
class ZCL_VCXI_XCSR_POPUP_RTEEDI definition
  public
  create protected .

public section.

  data S_RTEEDI_VIS type ZVCXI_XCSR_S_RTEEDI_VIS read-only .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_RTEEDI_VIS
    importing
      !IS_RTEEDI_VIS type ZVCXI_XCSR_S_RTEEDI_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_CLSNA type SEOCLSNAME default 'ZCL_VCXI_XCSR_POPUP_RTEEDI'
    raising
      /VCXI/CX_CKX .
protected section.

  data F_REJECT_INPUT type ABAP_BOOL .
  constants C_PSICO_EMPTY type ZVCXI_XCSR_PSICO value ICON_ENTER_MORE ##NO_TEXT.
  constants C_PSICO_MAINTAINED type ZVCXI_XCSR_PSICO value ICON_DISPLAY_MORE ##NO_TEXT.
  constants C_RSRCE_USER type /VCXI/VSMR_RSRCE value 'USER' ##NO_TEXT.
  constants C_UC_ADD_MANU type UI_FUNC value 'ADD_MANU' ##NO_TEXT.
  constants C_UC_ADD_OUTSO type UI_FUNC value 'ADD_OUTSO' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_DELETE type SYUCOMM value 'DELETE' ##NO_TEXT.
  constants C_UC_DEL_MANU_OUTSO type UI_FUNC value 'DEL_MANU_OUTSO' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_REFRESH_REQ type ABAP_BOOL .
  data F_TABNAME type TABNAME .
  data R_APPDATA type ref to /VCXI/CL_VKSR_APPDATA .
  data R_BL_PRTE_NEW type ref to ZCL_VCXI_XCSR_BL_PRTE .
  data R_BL_PRTE_ORG type ref to ZCL_VCXI_XCSR_BL_PRTE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .
  data R_PSTEP_MANU type ref to /VCXI/CL_VSMC_PSTEP .
  data R_PSTEP_OUTSO type ref to /VCXI/CL_VSMC_PSTEP .
  data T_FCAT type LVC_T_FCAT .
  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .

  methods FILL_LINE_BY_PSTEP
    importing
      !IR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PSICO
    changing
      !CS_RTEEDI_GRID type ZVCXI_XCSR_S_RTEEDI_GRID
    raising
      /VCXI/CX_CKX .
  methods GET_COMBO
    importing
      !IF_INDEX type I
    returning
      value(RF_COMBO) type ZVCXI_XCSR_COMBO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods BUILD_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_ARBPL
    importing
      !IF_INDEX type LVC_INDEX
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
      !IF_FAST_ENTRY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RR_ARBPL) type ref to /VCXI/CL_VSMC_ARBPL
    raising
      /VCXI/CX_CKX .
  methods CHECK_INPUT_ARBPL
    importing
      !IF_ARBPL type ARBPL
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods CHECK_INPUT_WERKS
    importing
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSR_S_RTEEDI_GRID'
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods FORWARD_COMBO_DATA_CHANGES
    importing
      !IT_GOOD_CELLS type LVC_T_MODI
    raising
      /VCXI/CX_CKX .
  methods GET_COMBO_PSTEP
    importing
      !IF_TABIX type I
    returning
      value(RT_PSTEP) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD_MANU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_OUTSO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_MANU_OUTSO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_PSTEP_MANU_OUTSO
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods IS_COMBO_POSSIBLE
    importing
      !IF_TABIX type I
    returning
      value(RF_POSSIBLE) type ABAP_BOOL
    exceptions
      /VCXI/CX_CKX .
  methods IS_MANWC_CHANGEABLE
    importing
      !IF_TABIX type I
    returning
      value(RF_CHANGEABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_OUTSO_CHANGEABLE
    importing
      !IF_TABIX type I
    returning
      value(RF_CHANGEABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REFRESH_FIELDCAT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods REFRESH_STYLE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
  methods TRANSFER_CHANGES
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BL_PRTE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSR_POPUP_RTEEDI definition
class ZCL_VCXI_XCSR_POPUP_RTEEDI implementation.
method BUILD_GRID_DATA.

  data:          LF_COMBO             type          ZVCXI_XCSR_COMBO,
                 LF_GUIDM             type          /VCXI/CKXM_GUIDM.
  data:          LS_RTEEDI_GRID       type          ZVCXI_XCSR_S_RTEEDI_GRID,
                 LS_MSG               type          /VCXI/CKXM_S_MSG.
  data:          LR_RTE_ARBPL         type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP         type ref to   /VCXI/CL_VSMR_RTE_PSTEP.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check ME->R_BL_PRTE_NEW->R_RTE_PRTE is bound.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  free <T_DATA>.
  loop at ME->R_BL_PRTE_NEW->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      if SY-TABIX eq 1.
        move ABAP_FALSE to LF_COMBO.
      else.
        move ABAP_TRUE  to LF_COMBO.
      endif.

***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***   Combo Flag
      move LF_COMBO  to LS_RTEEDI_GRID-COMBO.

***   Link Context Value
      move LR_RTE_ARBPL->F_LCVAL to LS_RTEEDI_GRID-LCVAL.

***------------------------------------------------------------------------------------------------
***   Fill Data
      move-corresponding LS_RTEEDI_GRID to <S_DATA>.
      ME->FILL_LINE_BY_PSTEP( exporting IR_RTE_PSTEP = LR_RTE_PSTEP
                              changing  CS_DATA      = <S_DATA> ).
      move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***   Work Center Data
      if LR_RTE_ARBPL->R_ARBPL is bound.
        move LR_RTE_ARBPL->R_ARBPL->F_ARBPL                                    to LS_RTEEDI_GRID-ARBPL.
        move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )           to LS_RTEEDI_GRID-DESCR.
        move LR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( )     to LS_RTEEDI_GRID-WERKS.
      endif.

      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUIDM.
      create object LS_RTEEDI_GRID-R_MSG.
      loop at LR_RTE_ARBPL->T_MSG into LS_MSG where GUIDM is initial
                                               or   GUIDM eq LF_GUIDM.
        LS_RTEEDI_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = LS_MSG-MSGID
                                           IF_MSGTY = LS_MSG-MSGTY
                                           IF_MSGNO = LS_MSG-MSGNO
                                           IF_MSGV1 = LS_MSG-MSGV1
                                           IF_MSGV2 = LS_MSG-MSGV2
                                           IF_MSGV3 = LS_MSG-MSGV3
                                           IF_MSGV4 = LS_MSG-MSGV4 ).
      endloop.

***   Status Icon
      read table LS_RTEEDI_GRID-R_MSG->T_MSG with key MSGTY = 'E'
                                             transporting no fields.
      if SY-SUBRC eq 0.
        write ICON_RED_LIGHT                                             to LS_RTEEDI_GRID-STICO as icon.
      else.
        if LS_RTEEDI_GRID-R_MSG->T_MSG is not initial.
          write ICON_YELLOW_LIGHT                                        to LS_RTEEDI_GRID-STICO as icon.
        else.
          write ICON_GREEN_LIGHT                                         to LS_RTEEDI_GRID-STICO as icon.
        endif.
      endif.

***   Info Icon
      move ICON_INFORMATION                      to LS_RTEEDI_GRID-BTN_INFO.

      move-corresponding LS_RTEEDI_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
method CALL_SHLP_ARBPL.

  data:          LF_TWOCE         type          ZVCXI_XCS_TWOCE,
                 LF_WERKS         type          WERKS_D,
                 LF_TABIX         type          I.
  data:          LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_PSTEP         type          /VCXI/CKX_TT_OBJECT.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Production Step Info
  read table <T_DATA> assigning <S_DATA> index IF_INDEX.
  check SY-SUBRC eq 0.
  move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Set Workcenter Type
  case ABAP_TRUE.
    when LS_RTEEDI_GRID-OUTSO.
      move ZCL_VCXI_XCSR_BL_PRTE=>C_TWOCE_OUTSO to LF_TWOCE.
    when LS_RTEEDI_GRID-MANWC.
      move ZCL_VCXI_XCSR_BL_PRTE=>C_TWOCE_MANWC to LF_TWOCE.
  endcase.

*** Get Plant
  move LS_RTEEDI_GRID-WERKS to LF_WERKS.
  if LF_WERKS is initial and
     ME->R_APPDATA is bound.
    move ME->R_APPDATA->F_WERKS to LF_WERKS.
  endif.

*** Collect all combined Production Steps
  move IF_INDEX to LF_TABIX.
  LT_PSTEP = ME->GET_COMBO_PSTEP( IF_TABIX = LF_TABIX ).

***--------------------------------------------------------------------------------------
*** Call Search Help
  RR_ARBPL = ZCL_VCXI_XCSR_SHLP_ARBPL=>CALL_SHLP( IF_WERKS      = LF_WERKS
                                                  IF_DISPLAY    = IF_DISPLAY
                                                  IF_TWOCE      = LF_TWOCE
                                                  IT_PSTEP      = LT_PSTEP
                                                  IF_FAST_ENTRY = IF_FAST_ENTRY ).
endmethod.
method CHECK_INPUT_ARBPL.

  data:  LF_COUNT type I.

  select count(*)
         into LF_COUNT
         from CRHD
        where WERKS eq IF_WERKS
         and  ARBPL eq IF_ARBPL.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'CR'
                                          IF_MSGNO = '011'
                                          IF_MSGV1 = IF_ARBPL
                                          IF_MSGV2 = IF_WERKS ).
  endif.

endmethod.
method CHECK_INPUT_WERKS.

  call function 'PLANT_GET_DETAIL'
    exporting
      PLANT     = IF_WERKS
    exceptions
      NOT_FOUND = 1.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method CONSTRUCTOR.

***--------------------------------------------------------------------------------------
  move IF_LOCKED           to ME->F_LOCKED.
  move IR_PR_RTESPV        to ME->R_PR_RTESPV.
  move IR_APPDATA          to ME->R_APPDATA.
  move IF_TABNAME          to ME->F_TABNAME.

***--------------------------------------------------------------------------------------
  move IR_BL_PRTE          to ME->R_BL_PRTE_ORG.
  move IR_BL_PRTE->COPY( ) to ME->R_BL_PRTE_NEW.
  ME->R_BL_PRTE_NEW->CHECK( ).

*** Set Source to User for new Route
  move ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER to ME->R_BL_PRTE_NEW->R_RTE_PRTE->F_RSRCE.

***--------------------------------------------------------------------------------------
*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Create Data Reference to Grid Data
  create data ME->R_DATA type table of (ME->F_TABNAME).

***--------------------------------------------------------------------------------------
*** Initialize Manual/Outsourcing Production Step
  ME->INIT_PSTEP_MANU_OUTSO( ).

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.
    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method DO_PBO.

*** Set PF-Status
  ME->SET_PF_STATUS( ).

*** Initialize Vis
  ME->INIT_VIS( ).

*** Modify Screen
  loop at SCREEN.
    if ME->F_LOCKED ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify SCREEN.
  endloop.

*** Create Container and Grid
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).

*** Build Grid Data
  ME->BUILD_GRID_DATA( ).
  ME->REFRESH_GRID( ).

endmethod.
method DO_UPDATE_RTEEDI_VIS.

***--------------------------------------------------------------------------------------
*** Set Technical Checks Flag
  if ME->R_BL_PRTE_NEW->F_TECHC ne IS_RTEEDI_VIS-TECHC.
    ME->R_BL_PRTE_NEW->SET_TECHC( IF_TECHC = IS_RTEEDI_VIS-TECHC ).
    ME->R_BL_PRTE_NEW->CHECK( ).
  endif.

*** Set Decison
  ME->R_BL_PRTE_NEW->SET_DECIS( IF_DECIS = IS_RTEEDI_VIS-DECIS ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when C_UC_OKAY.
      ME->HANDLE_UC_OKAY( ).

    when C_UC_DELETE.
      ME->HANDLE_UC_DELETE( ).

    when C_UC_CANCEL.
      leave to screen 0.
  endcase.

endmethod.
method FILL_LINE_BY_PSTEP.

  data:          LS_RTEEDI_GRID       type          ZVCXI_XCSR_S_RTEEDI_GRID,
                 LS_HELPER            type          ZVCXI_XCSR_S_HELPER.
  data:          LR_BL_PSTEP          type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_BL_MANU           type ref to   ZIF_VCXI_XCSR_BL_MANU,
                 LR_BL_OUTSO          type ref to   ZIF_VCXI_XCSR_BL_OUTSO.

  move-corresponding CS_DATA to LS_RTEEDI_GRID.

*** Production Step Data
  if IR_RTE_PSTEP is bound.
    move IR_RTE_PSTEP                                                to LS_RTEEDI_GRID-R_RTE_PSTEP.
    move IR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( )        to LS_RTEEDI_GRID-IPSTP.
    move IR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( )     to LS_RTEEDI_GRID-IPSTP_DESCR.

*** BL Production Step Data
    try.
        move IR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

        if LR_BL_PSTEP is bound.
          read table LR_BL_PSTEP->T_HELPER into LS_HELPER index 1.
          if SY-SUBRC eq 0.
            move-corresponding LS_HELPER to LS_RTEEDI_GRID.
          endif.

***       Get Manual Work Center Data
          try.
              move LR_BL_PSTEP ?to LR_BL_MANU.
              if LR_BL_MANU is bound and
                 LR_BL_MANU->F_MANWC eq ABAP_TRUE.
                move LR_BL_MANU->F_MANWC to LS_RTEEDI_GRID-MANWC.
                if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
                  move LR_BL_MANU->F_TEXT  to LS_RTEEDI_GRID-TEXT.
                  move LR_BL_MANU->S_MSRS  to LS_RTEEDI_GRID-S_MSRS.
                  move LR_BL_MANU->S_SCRAP to LS_RTEEDI_GRID-S_SCRAP.
                endif.
              endif.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_BL_MANU.
          endtry.

***       Get Outsourcing Data
          try.
              move LR_BL_PSTEP ?to LR_BL_OUTSO.
              if LR_BL_OUTSO is bound and
                 LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
                move LR_BL_OUTSO->F_OUTSO to LS_RTEEDI_GRID-OUTSO.
                if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
                  move LR_BL_OUTSO->F_TEXT  to LS_RTEEDI_GRID-TEXT.
                  move LR_BL_OUTSO->S_SCRAP to LS_RTEEDI_GRID-S_SCRAP.
                  move LR_BL_OUTSO->F_LIFNR to LS_RTEEDI_GRID-LIFNR.
                  if LR_BL_OUTSO->T_PSCALE is initial.
                    move LR_BL_OUTSO->S_PRICE to LS_RTEEDI_GRID-S_PRICE.
                    move LR_BL_OUTSO->S_PRICP to LS_RTEEDI_GRID-S_PRICP.
                    move C_PSICO_EMPTY        to LS_RTEEDI_GRID-PSICO.
                  else.
                    move C_PSICO_MAINTAINED   to LS_RTEEDI_GRID-PSICO.
                  endif.
                endif.
              endif.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_BL_OUTSO.
          endtry.

        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_PSTEP.
    endtry.
  endif.

  move-corresponding LS_RTEEDI_GRID to CS_DATA.

endmethod.
method FORWARD_COMBO_DATA_CHANGES.

  data:          LF_WERKS             type          WERKS_D,
                 LF_ARBPL             type          ARBPL,
                 LF_INDEX             type          I.
  data:          LS_MODI              type          LVC_S_MODI,
                 LS_RTEEDI_GRID       type          ZVCXI_XCSR_S_RTEEDI_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Process updated Work Center
  loop at IT_GOOD_CELLS into LS_MODI where FIELDNAME eq 'WERKS'
                                      or   FIELDNAME eq 'ARBPL'.
*** Find updated Entry
    read table <T_DATA> assigning <S_DATA> index LS_MODI-ROW_ID.
    check SY-SUBRC eq 0.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Buffer
    move LS_RTEEDI_GRID-WERKS to LF_WERKS.
    move LS_RTEEDI_GRID-ARBPL to LF_ARBPL.

*** Update Combined
    LF_INDEX = LS_MODI-ROW_ID + 1.
    loop at <T_DATA> assigning <S_DATA> from LF_INDEX.
      move-corresponding <S_DATA> to LS_RTEEDI_GRID.
      if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
        exit.
      else.
        move LF_WERKS to LS_RTEEDI_GRID-WERKS.
        move LF_ARBPL to LS_RTEEDI_GRID-ARBPL.
      endif.
      move-corresponding LS_RTEEDI_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
  method GET_COMBO.

    data:          LS_RTEEDI_GRID type          ZVCXI_XCSR_S_RTEEDI_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    read table <T_DATA> assigning <S_DATA> index IF_INDEX.
    check SY-SUBRC eq 0.

    move-corresponding <S_DATA> to LS_RTEEDI_GRID.
    move LS_RTEEDI_GRID-COMBO to RF_COMBO.

  endmethod.
method GET_COMBO_PSTEP.

  data:          LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Collect all combined Psteps
  loop at <T_DATA> assigning <S_DATA> from IF_TABIX.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Check is combined
    if SY-TABIX ne IF_TABIX.
      if LS_RTEEDI_GRID-COMBO eq ABAP_FALSE.
        exit.
      endif.
    endif.

    append LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP to RT_PSTEP.
  endloop.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***   Check if input should be rejected
      check ME->F_REJECT_INPUT ne ABAP_TRUE.

***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTEEDI_GRID.

      case ES_COL_ID-FIELDNAME.
        when 'BTN_INFO'.
          if LS_RTEEDI_GRID-R_RTE_PSTEP is bound.
            try.
                move LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
              catch CX_SY_MOVE_CAST_ERROR.
                clear LR_BL_PSTEP.
            endtry.
            if LR_BL_PSTEP is bound.
***           Start Information Popup
              ZCL_VCXI_XCSR_POPUP_BLPINFO=>START( IR_BL_PSTEP = LR_BL_PSTEP ).
            endif.
          endif.
      endcase.


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DATA_CHANGED.

  data: LF_TYPE        type C.
  data: LS_MOD_CELL    type LVC_S_MODI,
        LS_RTEEDI_GRID type ZVCXI_XCSR_S_RTEEDI_GRID.
  data: LT_ROID_FRONT  type LVC_T_ROID.
  data: LR_DATA   type ref to DATA,
        LR_CX_CKX type ref to /VCXI/CX_CKX.
  field-symbols: <T_DATA_ORG> type standard table,
                 <T_DATA_TMP> type standard table,
                 <S_DATA>     type          ANY,
                 <F_FIELD>    type          ANY.

  try.
***--------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA_ORG>.
      create data LR_DATA like <T_DATA_ORG>.
      assign LR_DATA->* to <T_DATA_TMP>.
      append lines of <T_DATA_ORG> to <T_DATA_TMP>.

***   Build Result Grid Values
      sort ER_DATA_CHANGED->MT_MOD_CELLS by ROW_ID .
      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
        check SY-SUBRC eq 0.

        assign component LS_MOD_CELL-FIELDNAME of structure <S_DATA> to <F_FIELD>.
        describe field <F_FIELD> type LF_TYPE.
        case LF_TYPE.
          when 'N' or 'i' or 'P' or 'F'.
            try.
                call function 'RSDS_CONVERT_NUMBER'
                  exporting
                    INPUT  = LS_MOD_CELL-VALUE
                  importing
                    OUTPUT = <F_FIELD>.
              catch CX_ROOT.
                clear <F_FIELD>.
            endtry.
          when others.
            translate LS_MOD_CELL-VALUE to upper case.
            move LS_MOD_CELL-VALUE to <F_FIELD>.
        endcase.
      endloop.


***--------------------------------------------------------------------------------------
***   Check Input
      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
        check SY-SUBRC eq 0.

        move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***     Check Work Center
        if LS_MOD_CELL-FIELDNAME eq 'ARBPL' or
           LS_MOD_CELL-FIELDNAME eq 'WERKS'.
          try.
              ME->CHECK_INPUT_ARBPL( IF_WERKS = LS_RTEEDI_GRID-WERKS
                                     IF_ARBPL = LS_RTEEDI_GRID-ARBPL ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
                                                   I_FIELDNAME = 'ARBPL'
                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
          endtry.
        endif.

***     Check Plant
        if LS_MOD_CELL-FIELDNAME eq 'WERKS'.
          try.
              ME->CHECK_INPUT_WERKS( IF_WERKS = LS_RTEEDI_GRID-WERKS ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
                                                   I_FIELDNAME = 'WERKS'
                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
          endtry.
        endif.

      endloop.

***--------------------------------------------------------------------------------------
      clear ME->F_REJECT_INPUT.

***   Don't allow to delete lines directly
      if ER_DATA_CHANGED->MT_DELETED_ROWS is not initial.
        ME->F_REJECT_INPUT = ABAP_TRUE.
      endif.

***   Don't allow shift of Rows
      LT_ROID_FRONT = ER_DATA_CHANGED->MT_ROID_FRONT.
      sort LT_ROID_FRONT by ROW_ID.
      if ER_DATA_CHANGED->MT_ROID_FRONT ne LT_ROID_FRONT.
        ME->F_REJECT_INPUT = ABAP_TRUE.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LR_CX_CKX            type ref to /VCXI/CX_CKX.

  try.
***   Check if input should be rejected
      check ME->F_REJECT_INPUT ne ABAP_TRUE.

***   If changed -> Request Refresh for ALV
      check E_MODIFIED eq ABAP_TRUE.
      move ABAP_TRUE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
***   Forward Data Changes to Combined Production Steps
      ME->FORWARD_COMBO_DATA_CHANGES( IT_GOOD_CELLS = ET_GOOD_CELLS ).

***   Update Production Route
      ME->UPDATE_BL_PRTE( ).

***   Check Production Route
      ME->R_BL_PRTE_NEW->CHECK( ).

***--------------------------------------------------------------------------------------
***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID,
                 LS_FCAT         type          LVC_S_FCAT.
  data:          LR_ARBPL        type ref to   /VCXI/CL_VSMC_ARBPL,
                 LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <F_FIELD>       type          any.

  try.
***   Reject data, by rebuilding it from Route
      if ME->F_REJECT_INPUT eq ABAP_TRUE.
        ME->BUILD_GRID_DATA( ).
      endif.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
      check SY-SUBRC eq 0.

      case E_COLUMN_ID-FIELDNAME.
        when 'STICO'.
          move-corresponding <S_DATA> to LS_RTEEDI_GRID.
          if LS_RTEEDI_GRID-R_MSG is bound.
            LS_RTEEDI_GRID-R_MSG->DISPLAY_MSG( ).
          endif.

        when 'PSICO'.
          move-corresponding <S_DATA> to LS_RTEEDI_GRID.
          ME->HANDLE_UC_PSICO( changing CS_RTEEDI_GRID = LS_RTEEDI_GRID ).
          move-corresponding LS_RTEEDI_GRID to <S_DATA>.

***       Request Refresh for ALV
          move ABAP_TRUE to ME->F_REFRESH_REQ.

***       Update Production Route
          ME->UPDATE_BL_PRTE( ).

***       Check Production Route
          ME->R_BL_PRTE_NEW->CHECK( ).


        when others.
          read table ME->T_FCAT into LS_FCAT with key FIELDNAME = E_COLUMN_ID-FIELDNAME.
          if LS_FCAT-CHECKBOX eq ABAP_TRUE.
            assign component E_COLUMN_ID-FIELDNAME of structure <S_DATA> to <F_FIELD>.

            if <F_FIELD> eq ABAP_TRUE.
              move ABAP_FALSE to <F_FIELD>.
            else.
              move ABAP_TRUE to <F_FIELD>.

***           In case of Manual/Outsourced -> Call Search Help
              if E_COLUMN_ID-FIELDNAME eq 'MANWC' or
                 E_COLUMN_ID-FIELDNAME eq 'OUTSO'.

                LR_ARBPL = ME->CALL_SHLP_ARBPL( IF_INDEX      = E_ROW_ID-INDEX
                                                IF_FAST_ENTRY = ABAP_TRUE ).
                assign component 'ARBPL' of structure <S_DATA> to <F_FIELD>.
                if <F_FIELD> is assigned.
                  clear <F_FIELD>.
                  if LR_ARBPL is bound.
                    move LR_ARBPL->F_ARBPL to <F_FIELD>.
                  endif.
                endif.

                assign component 'WERKS' of structure <S_DATA> to <F_FIELD>.
                if <F_FIELD> is assigned.
                  clear <F_FIELD>.
                  if LR_ARBPL is bound.
                    move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <F_FIELD>.
                  endif.
                endif.
              endif.
            endif.

***         Request Refresh for ALV
            move ABAP_TRUE to ME->F_REFRESH_REQ.

***         Update Production Route
            ME->UPDATE_BL_PRTE( ).

***         Check Production Route
            ME->R_BL_PRTE_NEW->CHECK( ).

          endif.
      endcase.


***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LF_INDEX         type          LVC_INDEX.
  data:          LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL,
                 LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any,
                 <F_FIELD>        type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

***     Handle F4 call
        case E_FIELDNAME.
***       Call Special Workcenter Searchhelp if we have a manual or outsourcing one!!
          when 'ARBPL'.
            move-corresponding <S_DATA> to LS_RTEEDI_GRID.
            check LS_RTEEDI_GRID-MANWC ne ABAP_FALSE or
                  LS_RTEEDI_GRID-OUTSO ne ABAP_FALSE.
            move ES_ROW_NO-ROW_ID to LF_INDEX.
            LR_ARBPL = ME->CALL_SHLP_ARBPL( IF_INDEX   = LF_INDEX
                                            IF_DISPLAY = E_DISPLAY ).
            if LR_ARBPL is bound.
              unassign <F_FIELD>.
              assign component 'ARBPL' of structure <S_DATA> to <F_FIELD>.
              if <F_FIELD> is assigned.
                move LR_ARBPL->F_ARBPL to <F_FIELD>.
              endif.

              assign component 'WERKS' of structure <S_DATA> to <F_FIELD>.
              if <F_FIELD> is assigned.
                move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <F_FIELD>.
              endif.
            endif.

            ER_EVENT_DATA->M_EVENT_HANDLED = ABAP_TRUE.
        endcase.
      endloop.


      if ER_EVENT_DATA->M_EVENT_HANDLED eq ABAP_TRUE.
***     Request Refresh for ALV
        move ABAP_TRUE to ME->F_REFRESH_REQ.

***     Update Production Route
        ME->UPDATE_BL_PRTE( ).

***     Check Production Route
        ME->R_BL_PRTE_NEW->CHECK( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:          LF_DISABLED     type        ABAP_BOOL.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
***----------------------------------------------------------------------------
***   Lock Status / Manual Step is not defined
      if ME->F_LOCKED     ne ABAP_TRUE or
         ME->R_PSTEP_MANU is not bound.
        move ABAP_TRUE  to LF_DISABLED.
      else.
        move ABAP_FALSE to LF_DISABLED.
      endif.

***   Pushbutton "Add Manual Step"
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD_MANU                         to <S_TOOLBAR>-FUNCTION.
      move 'Add Manual Step'(F01)                to <S_TOOLBAR>-TEXT.
      move ICON_INSERT_ROW                       to <S_TOOLBAR>-ICON.
      move LF_DISABLED                           to <S_TOOLBAR>-DISABLED.

***----------------------------------------------------------------------------
***   Lock Status / Outsourcing Step is not defined
      if ME->F_LOCKED     ne ABAP_TRUE or
         ME->R_PSTEP_OUTSO is not bound.
        move ABAP_TRUE  to LF_DISABLED.
      else.
        move ABAP_FALSE to LF_DISABLED.
      endif.

***   Pushbutton "Add Outsourcing Step"
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD_OUTSO                        to <S_TOOLBAR>-FUNCTION.
      move 'Add Outsourcing Step'(F02)           to <S_TOOLBAR>-TEXT.
      move ICON_INSERT_ROW                       to <S_TOOLBAR>-ICON.
      move LF_DISABLED                           to <S_TOOLBAR>-DISABLED.

***----------------------------------------------------------------------------
***   Lock Status / Manual Step and Outsourcing Step is not defined
      if ME->F_LOCKED      ne ABAP_TRUE or
         ( ME->R_PSTEP_MANU  is not bound and
           ME->R_PSTEP_OUTSO is not bound ).
        move ABAP_TRUE  to LF_DISABLED.
      else.
        move ABAP_FALSE to LF_DISABLED.
      endif.

***   Pushbutton "Delete Manual/Outsourcing Step"
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL_MANU_OUTSO                   to <S_TOOLBAR>-FUNCTION.
      move 'Delete Manual/Outsourcing Step'(F03) to <S_TOOLBAR>-TEXT.
      move ICON_DELETE_ROW                       to <S_TOOLBAR>-ICON.
      move LF_DISABLED                           to <S_TOOLBAR>-DISABLED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_MANU.

  data:          LS_ROW           type          LVC_S_ROW,
                 LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_ROW           type          LVC_T_ROW.
  data:          LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

***--------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Validate Selected Cells
  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Not between Combo-Steps
    if LS_RTEEDI_GRID-COMBO eq ABAP_TRUE.
      delete LT_ROW.
    endif.
  endloop.
  if LT_ROW is initial.
    append value #( INDEX = lines( <T_DATA> ) + 1 ) to LT_ROW.
  endif.

***--------------------------------------------------------------------------------------
*** Add from bottom to top
  sort LT_ROW by INDEX descending.

  loop at LT_ROW into LS_ROW.
    insert initial line into <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.

    clear LS_RTEEDI_GRID.

    move ABAP_TRUE to LS_RTEEDI_GRID-MANWC.

*** Create BL PStep
    move ME->R_PR_RTESPV->CREATE_BL_PSTEP_MANU( ) to LR_BL_PSTEP.

*** Create new Production Step
    create object LS_RTEEDI_GRID-R_RTE_PSTEP
      exporting
        IR_PSTEP = LR_BL_PSTEP->R_PSTEP.
    move LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_RTEEDI_GRID-IPSTP.
    move LR_BL_PSTEP to LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ.

*** Fill Data
    move-corresponding LS_RTEEDI_GRID to <S_DATA>.
    ME->FILL_LINE_BY_PSTEP( exporting IR_RTE_PSTEP = LS_RTEEDI_GRID-R_RTE_PSTEP
                            changing  CS_DATA      = <S_DATA> ).
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Pick Work Center for new Steps
    LR_ARBPL = ME->CALL_SHLP_ARBPL( IF_INDEX      = LS_ROW-INDEX
                                    IF_FAST_ENTRY = ABAP_TRUE ).

    if LR_ARBPL is bound.
      move LR_ARBPL->F_ARBPL                                  to LS_RTEEDI_GRID-ARBPL.
      move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_RTEEDI_GRID-WERKS.
    endif.
    move-corresponding LS_RTEEDI_GRID to <S_DATA>.

  endloop.

*** Update Production Route
  ME->UPDATE_BL_PRTE( ).

*** Check Production Route
  ME->R_BL_PRTE_NEW->CHECK( ).

*** REQUEST REFRESH FOR ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_ADD_OUTSO.

  data:          LS_ROW           type          LVC_S_ROW,
                 LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_ROW           type          LVC_T_ROW.
  data:          LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

***--------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Validate Selected Cells
  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Not between Combo-Steps
    if LS_RTEEDI_GRID-COMBO eq ABAP_TRUE.
      delete LT_ROW.
    endif.
  endloop.
  if LT_ROW is initial.
    append value #( INDEX = lines( <T_DATA> ) + 1 ) to LT_ROW.
  endif.

***--------------------------------------------------------------------------------------
*** Add from bottom to top
  sort LT_ROW by INDEX descending.

  loop at LT_ROW into LS_ROW.
    insert initial line into <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.

    clear LS_RTEEDI_GRID.

    move ABAP_TRUE to LS_RTEEDI_GRID-OUTSO.

*** Create BL PStep
    move ME->R_PR_RTESPV->CREATE_BL_PSTEP_OUTSO( ) to LR_BL_PSTEP.

*** Create new Production Step
    create object LS_RTEEDI_GRID-R_RTE_PSTEP
      exporting
        IR_PSTEP = LR_BL_PSTEP->R_PSTEP.
    move LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_RTEEDI_GRID-IPSTP.
    move LR_BL_PSTEP to LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ.

*** Fill Data
    move-corresponding LS_RTEEDI_GRID to <S_DATA>.
    ME->FILL_LINE_BY_PSTEP( exporting IR_RTE_PSTEP = LS_RTEEDI_GRID-R_RTE_PSTEP
                            changing  CS_DATA      = <S_DATA> ).
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Pick Work Center for new Steps
    LR_ARBPL = ME->CALL_SHLP_ARBPL( IF_INDEX      = LS_ROW-INDEX
                                    IF_FAST_ENTRY = ABAP_TRUE ).

    if LR_ARBPL is bound.
      move LR_ARBPL->F_ARBPL                                  to LS_RTEEDI_GRID-ARBPL.
      move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_RTEEDI_GRID-WERKS.
    endif.
    move-corresponding LS_RTEEDI_GRID to <S_DATA>.

  endloop.

*** Update Production Route
  ME->UPDATE_BL_PRTE( ).

*** Check Production Route
  ME->R_BL_PRTE_NEW->CHECK( ).

*** REQUEST REFRESH FOR ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DEL_MANU_OUTSO.

  data:          LS_ROW           type          LVC_S_ROW,
                 LS_CELL          type          LVC_S_CELL,
                 LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_ROW           type          LVC_T_ROW,
                 LT_CELL          type          LVC_T_CELL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

***--------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if LT_ROW is initial.
*** Get Selected Cells
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    loop at LT_CELL into LS_CELL.
      collect LS_CELL-ROW_ID into LT_ROW.
    endloop.
  endif.
  check LT_ROW is not initial.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Delete from bottom to top
  sort LT_ROW by INDEX descending.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

    check LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP eq ME->R_PSTEP_MANU or
          LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP eq ME->R_PSTEP_OUTSO.

    delete <T_DATA> index LS_ROW-INDEX.

*** Check if following step was combined
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    if SY-SUBRC eq 0.
      move-corresponding <S_DATA> to LS_RTEEDI_GRID.
      move ABAP_FALSE to LS_RTEEDI_GRID-COMBO.
      move-corresponding LS_RTEEDI_GRID to <S_DATA>.
    endif.
  endloop.

*** Update Production Route
  ME->UPDATE_BL_PRTE( ).

*** Check Production Route
  ME->R_BL_PRTE_NEW->CHECK( ).

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DELETE.

  check ME->R_BL_PRTE_ORG->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.

***--------------------------------------------------------------------------------------
*** Popup to confirm


***--------------------------------------------------------------------------------------
*** Delete
  ME->R_PR_RTESPV->DELETE_BL_PRTE( IR_BL_PRTE = ME->R_BL_PRTE_ORG ).

***--------------------------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UC_OKAY.

  data:  LT_BL_PRTE       type        ZVCXI_XCSR_TT_BL_PRTE.
  data:  LR_BL_PRTE       type ref to ZCL_VCXI_XCSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Check for Changes
  if ME->R_GRID is bound.
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

***--------------------------------------------------------------------------------------
  if ME->R_BL_PRTE_ORG->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
*** Update Original Route with new Route
    ME->TRANSFER_CHANGES( ).
    move ME->R_BL_PRTE_ORG to LR_BL_PRTE.
  else.
*** Add new Route
    move ME->R_BL_PRTE_NEW to LR_BL_PRTE.

*** Switch Selected Route
    if ME->R_PR_RTESPV->R_RTESEL eq ME->R_BL_PRTE_ORG.
      ME->R_PR_RTESPV->SET_RTESEL( IR_BL_PRTE = ME->R_BL_PRTE_NEW ).
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Initialize Relevancy Points
  LR_BL_PRTE->INIT_RELPO( ).

*** Check Production Route
  LR_BL_PRTE->CHECK( ).

*** Evaluate
  append LR_BL_PRTE to LT_BL_PRTE.
  ME->R_PR_RTESPV->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

***------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UC_PSICO.

  data:  LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO.

  try.
      move CS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_BL_OUTSO.
  endtry.
  check LR_BL_OUTSO is bound.

*** Start Price Scale Popup
  ZCL_VCXI_XCSR_POPUP_PSCALE=>START( IR_BL_OUTSO = LR_BL_OUTSO
                                     IF_LOCKED   = ME->F_LOCKED ).

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
***   Check if input should be rejected
      check ME->F_REJECT_INPUT ne ABAP_TRUE.

      case E_UCOMM.
        when C_UC_ADD_MANU.
          ME->HANDLE_UC_ADD_MANU( ).
        when C_UC_ADD_OUTSO.
          ME->HANDLE_UC_ADD_OUTSO( ).
        when C_UC_DEL_MANU_OUTSO.
          ME->HANDLE_UC_DEL_MANU_OUTSO( ).
      endcase.

***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  check ME->R_CONTAINER is not bound.

  create object ME->R_CONTAINER
    exporting
      CONTAINER_NAME              = '0100CC_GRID'
    exceptions
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      LIFETIME_DYNPRO_DYNPRO_LINK = 5
      others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

  create object ME->R_GRID
    exporting
      I_PARENT          = ME->R_CONTAINER
      I_APPL_EVENTS     = 'X'
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Enter as Event
  ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Register Event Handler
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR               for ME->R_GRID.
  set handler ME->HANDLE_UCOMM                 for ME->R_GRID.
  set handler ME->HANDLE_BUTTON_CLICK          for ME->R_GRID.
  set handler ME->HANDLE_HOTSPOT_CLICK         for ME->R_GRID.
  set handler ME->HANDLE_ONF4                  for ME->R_GRID.

*** Register F4-Fields
  ME->REGISTER_F4_FIELDS( ).

endmethod.
method INIT_PSTEP_MANU_OUTSO.

  data:  LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP.

***----------------------------------------------------------------------------
*** Create Manual Production Step
  try.
      move ME->R_PR_RTESPV->CREATE_BL_PSTEP_MANU( ) to LR_BL_PSTEP.
      if LR_BL_PSTEP is bound.
        move LR_BL_PSTEP->R_PSTEP to ME->R_PSTEP_MANU.
      endif.
    catch /VCXI/CX_CKX.
***   Continue without Manual Step
      clear ME->R_PSTEP_MANU.
  endtry.

***----------------------------------------------------------------------------
*** Create Outsourcing Production Step
  try.
      move ME->R_PR_RTESPV->CREATE_BL_PSTEP_OUTSO( ) to LR_BL_PSTEP.
      if LR_BL_PSTEP is bound.
        move LR_BL_PSTEP->R_PSTEP to ME->R_PSTEP_OUTSO.
      endif.
    catch /VCXI/CX_CKX.
***   Continue without Outsourcing Step
      clear ME->R_PSTEP_OUTSO.
  endtry.

endmethod.
method INIT_VIS.

  clear: ME->S_RTEEDI_VIS.

  move ME->R_BL_PRTE_NEW->F_TECHC to ME->S_RTEEDI_VIS-TECHC.
  move ME->R_BL_PRTE_NEW->F_DECIS to ME->S_RTEEDI_VIS-DECIS.

endmethod.
method IS_COMBO_POSSIBLE.

  data:          LF_TABIX_PREV        type          I.
  data:          LS_RTEEDI_GRID_CURR  type          ZVCXI_XCSR_S_RTEEDI_GRID,
                 LS_RTEEDI_GRID_PREV  type          ZVCXI_XCSR_S_RTEEDI_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

***----------------------------------------------------------------------------
*** Locked for changes
  check ME->F_LOCKED eq ABAP_TRUE.

*** First can't be combined
  check IF_TABIX ne 1.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***----------------------------------------------------------------------------
*** Find Current Entry
  read table <T_DATA> assigning <S_DATA> index IF_TABIX.
  move-corresponding <S_DATA> to LS_RTEEDI_GRID_CURR.

*** Find previous Entry
  LF_TABIX_PREV = IF_TABIX - 1.
  read table <T_DATA> assigning <S_DATA> index LF_TABIX_PREV.
  move-corresponding <S_DATA> to LS_RTEEDI_GRID_PREV.

***----------------------------------------------------------------------------
*** Perform Check
  if LS_RTEEDI_GRID_CURR-ARBPL eq LS_RTEEDI_GRID_PREV-ARBPL and
     LS_RTEEDI_GRID_CURR-WERKS eq LS_RTEEDI_GRID_PREV-WERKS.
    move ABAP_TRUE to RF_POSSIBLE.
  endif.

endmethod.
method IS_MANWC_CHANGEABLE.

  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_PSTEP        type          /VCXI/CKX_TT_OBJECT,
                 LT_ARBPL        type          /VCXI/CKX_TT_OBJECT.
  data:          LR_IF_BL_MANU   type ref to   ZIF_VCXI_XCSR_BL_MANU.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

***--------------------------------------------------------------------------------------
*** Locked for changes
  check ME->F_LOCKED eq ABAP_TRUE.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Get Data
  read table <T_DATA> assigning <S_DATA> index IF_TABIX.
  check SY-SUBRC eq 0.
  move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***--------------------------------------------------------------------------------------
*** Is Manual Production Step
  try.
      move LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_IF_BL_MANU.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_IF_BL_MANU.
  endtry.
  check LR_IF_BL_MANU is bound.

***--------------------------------------------------------------------------------------
*** Value based Checks
  check LS_RTEEDI_GRID-OUTSO ne ABAP_TRUE and
        LS_RTEEDI_GRID-COMBO ne ABAP_TRUE and
        LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP ne ME->R_PSTEP_MANU.

*** Check if a Work Center is defined for the combination of Steps
  LT_PSTEP = ME->GET_COMBO_PSTEP( IF_TABIX = IF_TABIX ).

*** Get allowed Work Center
  LT_ARBPL = ZCL_VCXI_XCSR_BL_PRTE=>GET_ALLOWED_ARBPL( IF_TWOCE = ZCL_VCXI_XCSR_BL_PRTE=>C_TWOCE_MANWC
                                                       IF_WERKS = LS_RTEEDI_GRID-WERKS
                                                       IT_PSTEP = LT_PSTEP ).
  check LT_ARBPL is not initial.

*** Allow Changes
  move ABAP_TRUE to RF_CHANGEABLE.

endmethod.
method IS_OUTSO_CHANGEABLE.

  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_PSTEP        type          /VCXI/CKX_TT_OBJECT,
                 LT_ARBPL        type          /VCXI/CKX_TT_OBJECT.
  data:          LR_IF_BL_OUTSO  type ref to   ZIF_VCXI_XCSR_BL_OUTSO.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

***--------------------------------------------------------------------------------------
*** Locked for changes
  check ME->F_LOCKED eq ABAP_TRUE.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Get Data
  read table <T_DATA> assigning <S_DATA> index IF_TABIX.
  check SY-SUBRC eq 0.
  move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***--------------------------------------------------------------------------------------
*** Is Outsourcing Production Step
  try.
      move LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_IF_BL_OUTSO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_IF_BL_OUTSO.
  endtry.
  check LR_IF_BL_OUTSO is bound.

***--------------------------------------------------------------------------------------
*** Value based Checks
  check LS_RTEEDI_GRID-MANWC ne ABAP_TRUE and
        LS_RTEEDI_GRID-COMBO ne ABAP_TRUE and
        LS_RTEEDI_GRID-R_RTE_PSTEP->R_PSTEP ne ME->R_PSTEP_OUTSO.

*** Check if a Work Center is defined for the combination of Steps
  LT_PSTEP = ME->GET_COMBO_PSTEP( IF_TABIX = IF_TABIX ).

*** Get allowed Work Center
  LT_ARBPL = ZCL_VCXI_XCSR_BL_PRTE=>GET_ALLOWED_ARBPL( IF_TWOCE = ZCL_VCXI_XCSR_BL_PRTE=>C_TWOCE_OUTSO
                                                       IF_WERKS = LS_RTEEDI_GRID-WERKS
                                                       IT_PSTEP = LT_PSTEP ).
  check LT_ARBPL is not initial.

*** Allow Changes
  move ABAP_TRUE to RF_CHANGEABLE.

endmethod.
method REFRESH_FIELDCAT.

  data:          LF_MANWC        type          ABAP_BOOL,
                 LF_OUTSO        type          ABAP_BOOL,
                 LF_PRICE        type          ABAP_BOOL.
  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <S_FCAT>        type          LVC_S_FCAT.

  free: ME->T_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = ME->T_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Analyze Route
  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

*** Check for Manual Work Center
    if LS_RTEEDI_GRID-MANWC eq ABAP_TRUE.
      move ABAP_TRUE to LF_MANWC.
    endif.

*** Check for Outsourcing
    if LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE.
      move ABAP_TRUE to LF_OUTSO.
    endif.

*** Check for Non-scaled Price
    if LS_RTEEDI_GRID-PSICO eq C_PSICO_EMPTY.
      move ABAP_TRUE to LF_PRICE.
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Change Field catalog attributes
  loop at ME->T_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Combo Flag
      when 'COMBO'.
        move ABAP_TRUE       to <S_FCAT>-CHECKBOX.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-HOTSPOT.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

***   Status (traffic light)
      when 'STICO'.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        move 'C'             to <S_FCAT>-JUST.

***   Information Button
      when 'BTN_INFO'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON  to <S_FCAT>-STYLE.
        move ABAP_TRUE                         to <S_FCAT>-ICON.
        move 'C'                               to <S_FCAT>-JUST.
        move 'Info'(C01)                       to <S_FCAT>-REPTEXT.

***   Helper
      when 'HELPN' or 'HELPT'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

***   Manual Work Center Flag
      when 'MANWC'.
        move ABAP_TRUE       to <S_FCAT>-CHECKBOX.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-HOTSPOT.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

      when 'MSRSR' or 'MSRST'.
        if LF_MANWC ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        else.
          if ME->F_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE   to <S_FCAT>-EDIT.
          endif.
        endif.
      when 'MSRSR_UOM' or 'MSRST_UOM'.
        if LF_MANWC ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        endif.

***   Outsourcing Flag
      when 'OUTSO'.
        move ABAP_TRUE       to <S_FCAT>-CHECKBOX.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-HOTSPOT.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

      when 'LIFNR'.
        if LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        else.
          if <S_FCAT>-FIELDNAME eq 'SCRAP' and
             ME->F_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE   to <S_FCAT>-EDIT.
          endif.
        endif.

      when 'PRICE' or 'PRICP'.
        if LF_OUTSO ne ABAP_TRUE or
           LF_PRICE ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        else.
          if ME->F_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE   to <S_FCAT>-EDIT.
          endif.
        endif.

      when 'PRICE_CURR' or 'PRICP_UOM'.
        if LF_OUTSO ne ABAP_TRUE or
           LF_PRICE ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        endif.

      when 'PSICO'.
        if LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        endif.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        move 'C'             to <S_FCAT>-JUST.

***   Text for Outsourcing/Manual
      when 'TEXT'.
        if LF_MANWC ne ABAP_TRUE and
           LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        else.
          if ME->F_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE   to <S_FCAT>-EDIT.
          endif.
        endif.

***   Scrap
      when 'SCRAP'.
        if LF_MANWC ne ABAP_TRUE and
           LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        else.
          if ME->F_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE   to <S_FCAT>-EDIT.
          endif.
        endif.
      when 'SCRAP_UOM'.
        if LF_MANWC ne ABAP_TRUE and
           LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        endif.

    endcase.
  endloop.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type          LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS.
  field-symbols: <T_DATA>             type standard table.


  clear ME->F_REJECT_INPUT.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Refresh Field Catalog
  ME->REFRESH_FIELDCAT( ).

*** Refresh Style Table of Grid Data
  ME->REFRESH_STYLE( ).

*** Get Layout
  move ABAP_TRUE to LS_LAYOUT-CWIDTH_OPT.
  move 'TSTYL'   to LS_LAYOUT-STYLEFNAME.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to LT_TOOLBAR_EXCLUDING.

***----------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = ME->T_FCAT
      IT_OUTTAB                     = <T_DATA>
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL ).

endmethod.
method REFRESH_STYLE.

  data:          LF_TABIX        type          I.
  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LT_STYLE        type table of LVC_S_STYL.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <S_STYLE>       type          LVC_S_STYL.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Update Style
  loop at <T_DATA> assigning <S_DATA>.
    move SY-TABIX to LF_TABIX.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

    free: LT_STYLE.

***----------------------------------------------------------------------------
*** Work Center & Plant
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'ARBPL'                              to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'WERKS'                              to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Combo Flag
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'COMBO'                              to <S_STYLE>-FIELDNAME.
    if ME->IS_COMBO_POSSIBLE( IF_TABIX = LF_TABIX ) eq ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT      to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO   to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Number of Helper and Helper Text
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'HELPN'                              to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO ne ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'HELPT'                              to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO ne ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Manual Work Center
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'MANWC'                                 to <S_STYLE>-FIELDNAME.
    if ME->IS_MANWC_CHANGEABLE( IF_TABIX = LF_TABIX ) eq ABAP_TRUE.
      add CL_GUI_ALV_GRID=>MC_STYLE_ENABLED      to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT      to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO   to <S_STYLE>-STYLE.
    endif.


    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'MSRSR'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-MANWC eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'MSRST'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-MANWC eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.


***----------------------------------------------------------------------------
*** Outsourcing
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'OUTSO'                                 to <S_STYLE>-FIELDNAME.
    if ME->IS_OUTSO_CHANGEABLE( IF_TABIX = LF_TABIX ) eq ABAP_TRUE.
      add CL_GUI_ALV_GRID=>MC_STYLE_ENABLED      to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT      to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO   to <S_STYLE>-STYLE.
    endif.


    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'LIFNR'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.


    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'PRICE'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE and
       LS_RTEEDI_GRID-PSICO ne C_PSICO_MAINTAINED.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'PRICP'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE and
       LS_RTEEDI_GRID-PSICO ne C_PSICO_MAINTAINED.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'PSICO'                                 to <S_STYLE>-FIELDNAME.
    if LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO  to <S_STYLE>-STYLE.
    endif.


***----------------------------------------------------------------------------
*** Manual and Outsourcing
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'TEXT'                                  to <S_STYLE>-FIELDNAME.
    if ( LS_RTEEDI_GRID-MANWC eq ABAP_TRUE or
         LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE ) and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'SCRAP'                                 to <S_STYLE>-FIELDNAME.
    if ( LS_RTEEDI_GRID-MANWC eq ABAP_TRUE or
         LS_RTEEDI_GRID-OUTSO eq ABAP_TRUE ) and
       LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
    endif.


***----------------------------------------------------------------------------
*** Update Style Table
    move LT_STYLE to LS_RTEEDI_GRID-TSTYL.
    move-corresponding LS_RTEEDI_GRID to <S_DATA>.

  endloop.

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT,
         LS_SHLP      type                   SHLP_DESCR_T.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Cat to find Fields with F4 Helps
  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = LT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_FCAT-DOMNAME
          FIELDNAME         = SPACE
        importing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-REF_TABLE
            FIELDNAME         = LS_FCAT-FIELDNAME
          importing
            SHLP              = LS_SHLP
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

      endif.


      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
*** Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method SET_PF_STATUS.

  data:  LT_EXCLUDE   type table of SYUCOMM.

  if ME->F_LOCKED ne ABAP_TRUE.
    append C_UC_OKAY   to LT_EXCLUDE.
    append C_UC_DELETE to LT_EXCLUDE.
  endif.

  if ME->R_BL_PRTE_ORG->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    append C_UC_DELETE to LT_EXCLUDE.
  endif.

  set pf-status '0100' of program 'SAPLZVCXI_XCSR_POPUP_RTEEDI'
      excluding LT_EXCLUDE.

endmethod.
method START.

  data:  LR_POPUP_RTEEDI type ref to ZCL_VCXI_XCSR_POPUP_RTEEDI.

*** Create Instance
  create object LR_POPUP_RTEEDI
    type
      (IF_CLSNA)
    exporting
      IR_BL_PRTE   = IR_BL_PRTE
      IR_PR_RTESPV = IR_PR_RTESPV
      IR_APPDATA   = IR_APPDATA
      IF_LOCKED    = IF_LOCKED.

*** Call Popup
  call function 'ZVCXI_XCSR_POPUP_RTEEDI_START'
    exporting
      IR_POPUP_RTEEDI = LR_POPUP_RTEEDI.

*** Free the Popup
  LR_POPUP_RTEEDI->DO_FREE( ).

endmethod.
method TRANSFER_CHANGES.

*** Transfer Work Center
  move ME->R_BL_PRTE_NEW->R_RTE_PRTE->T_RTE_ARBPL to ME->R_BL_PRTE_ORG->R_RTE_PRTE->T_RTE_ARBPL.

*** Transfer Technical Checks Flag
  ME->R_BL_PRTE_ORG->SET_TECHC( IF_TECHC = ME->R_BL_PRTE_NEW->F_TECHC ).

*** Transfer Decison
  ME->R_BL_PRTE_ORG->SET_DECIS( IF_DECIS = ME->R_BL_PRTE_NEW->F_DECIS ).

endmethod.
method UPDATE_BL_PRTE.

  data:          LF_GUID          type          /VCXI/CKX_GUID,
                 LF_MANWC         type          ZVCXI_XCSR_MANWC,
                 LF_OUTSO         type          ZVCXI_XCSR_OUTSO.
  data:          LS_RTEEDI_GRID   type          ZVCXI_XCSR_S_RTEEDI_GRID.
  data:          LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL,
                 LR_RTE_ARBPL     type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_BL_MANU       type ref to   ZIF_VCXI_XCSR_BL_MANU,
                 LR_BL_OUTSO      type ref to   ZIF_VCXI_XCSR_BL_OUTSO.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any,
                 <S_HELPER>       type          ZVCXI_XCSR_S_HELPER.

*** Clear old Values of Production Route
  free: ME->R_BL_PRTE_NEW->R_RTE_PRTE->T_RTE_ARBPL.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_RTEEDI_GRID.

***--------------------------------------------------------------------------------------
*** Add new Work Center
    if LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
      clear: LR_ARBPL.
      if LS_RTEEDI_GRID-WERKS is not initial and
         LS_RTEEDI_GRID-ARBPL is not initial.
        LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_RTEEDI_GRID-WERKS
                                                     IF_ARBPL = LS_RTEEDI_GRID-ARBPL ).
        LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      endif.

      create object LR_RTE_ARBPL
        exporting
          IR_ARBPL = LR_ARBPL
          IF_LCVAL = LS_RTEEDI_GRID-LCVAL.

      append LR_RTE_ARBPL to ME->R_BL_PRTE_NEW->R_RTE_PRTE->T_RTE_ARBPL.

***   Buffer Flags
      move LS_RTEEDI_GRID-MANWC to LF_MANWC.
      move LS_RTEEDI_GRID-OUTSO to LF_OUTSO.
    endif.

***--------------------------------------------------------------------------------------
*** Add Production Step
    append LS_RTEEDI_GRID-R_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.

***--------------------------------------------------------------------------------------
*** Get BL PStep
    try.
        move LS_RTEEDI_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_BL_PSTEP.
    endtry.

    if LR_BL_PSTEP is bound.
***--------------------------------------------------------------------------------------
***   Set Helper
      if LS_RTEEDI_GRID-HELPN is not initial or
         LS_RTEEDI_GRID-HELPT is not initial.
        read table LR_BL_PSTEP->T_HELPER assigning <S_HELPER> index 1.
        if SY-SUBRC ne 0.
          append initial line to LR_BL_PSTEP->T_HELPER assigning <S_HELPER>.
        endif.
        move LS_RTEEDI_GRID-HELPN to <S_HELPER>-HELPN.
        move LS_RTEEDI_GRID-HELPT to <S_HELPER>-HELPT.
      else.
        free LR_BL_PSTEP->T_HELPER.
      endif.

***--------------------------------------------------------------------------------------
***   Set Manual Work Center Data
      try.
          move LR_BL_PSTEP ?to LR_BL_MANU.
          if LR_BL_MANU is bound.
            if LF_MANWC             eq ABAP_TRUE and
               LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
              if LS_RTEEDI_GRID-MANWC ne LR_BL_MANU->F_MANWC.
                move '60'                 to LR_BL_MANU->S_MSRS-MSRST.
              else.
                LR_BL_MANU->F_TEXT        = LS_RTEEDI_GRID-TEXT.
                LR_BL_MANU->S_MSRS-MSRSR  = LS_RTEEDI_GRID-S_MSRS-MSRSR.
                LR_BL_MANU->S_MSRS-MSRST  = LS_RTEEDI_GRID-S_MSRS-MSRST.
                LR_BL_MANU->S_SCRAP-SCRAP = LS_RTEEDI_GRID-S_SCRAP-SCRAP.
              endif.
            else.
              clear: LR_BL_MANU->F_TEXT,
                     LR_BL_MANU->S_MSRS-MSRSR,
                     LR_BL_MANU->S_MSRS-MSRST,
                     LR_BL_MANU->S_SCRAP-SCRAP.
            endif.
            move LF_MANWC to LR_BL_MANU->F_MANWC.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_MANU.
      endtry.

***--------------------------------------------------------------------------------------
***   Set Outsourcing Data
      try.
          move LR_BL_PSTEP ?to LR_BL_OUTSO.
          if LR_BL_OUTSO is bound.
            if LF_OUTSO             eq ABAP_TRUE and
               LS_RTEEDI_GRID-COMBO ne ABAP_TRUE.
              if LS_RTEEDI_GRID-OUTSO ne LR_BL_OUTSO->F_OUTSO.
                move '1000'               to LR_BL_OUTSO->S_PRICP-PRICP.
              else.
                LR_BL_OUTSO->F_TEXT        = LS_RTEEDI_GRID-TEXT.
                LR_BL_OUTSO->S_SCRAP-SCRAP = LS_RTEEDI_GRID-S_SCRAP-SCRAP.
                LR_BL_OUTSO->F_LIFNR       = LS_RTEEDI_GRID-LIFNR.
                LR_BL_OUTSO->S_PRICE-PRICE = LS_RTEEDI_GRID-S_PRICE-PRICE.
                LR_BL_OUTSO->S_PRICP-PRICP = LS_RTEEDI_GRID-S_PRICP-PRICP.
              endif.
            else.
              clear: LR_BL_OUTSO->F_TEXT,
                     LR_BL_OUTSO->S_SCRAP-SCRAP,
                     LR_BL_OUTSO->F_LIFNR,
                     LR_BL_OUTSO->S_PRICE-PRICE,
                     LR_BL_OUTSO->S_PRICP-PRICP.
            endif.
            move LF_OUTSO to LR_BL_OUTSO->F_OUTSO.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_OUTSO.
      endtry.
    endif.
  endloop.

endmethod.
