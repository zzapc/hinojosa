
class ZCL_VCXI_PCSS_PR_MS_STARCH definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_PARID_STARC type /VCXI/VKS_PARID value 'ZVCXI_PC_STARC'. "#EC NOTEXT
  constants C_PARID_STARF type /VCXI/VKS_PARID value 'ZVCXI_PC_STARF'. "#EC NOTEXT
  constants C_IPRVT_PC_MS_STARCH type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_MS_STARCH'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_STARC
    returning
      value(RF_STARC) type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods GET_STARC_DESCR
    returning
      value(RF_STARC_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods GET_STARF
    returning
      value(RF_STARF) type ZVCXI_PCS_STARF
    raising
      /VCXI/CX_CKX .
  methods SET_STARC
    importing
      !IF_STARC type ZVCXI_PCSS_STARC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_STARF
    importing
      !IF_STARF type ZVCXI_PCS_STARF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  data R_CUST_STARCH type ref to ZCL_VCXI_PCSS_CUST_STARCH .
  constants C_IEVNT_O_AVGCO_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_STARF_CHANGED type /VCXI/VKSC_IEVNT value 'STARF_CHANGED'. "#EC NOTEXT

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_MS_STARCH definition
class ZCL_VCXI_PCSS_PR_MS_STARCH implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_W.
  ME->F_PARID_AVGCO = C_PARID_AVGCO_W.
  ME->F_PARID_AVGCP = C_PARID_AVGCP_A.

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_STARC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARC ).
  move LS_PARAM-ATWRT to RF_STARC.

endmethod.
method GET_STARC_DESCR.

  data:      LF_STARC   type                   ZVCXI_PCSS_STARC.

  LF_STARC = ME->GET_STARC( ).
  RF_STARC_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_STARC_DESCR( IF_STARC = LF_STARC ).

endmethod.
method GET_STARF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARF ).
  move LS_PARAM-ATFLV to RF_STARF.

endmethod.
method GET_STATUS.

  data:   LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Starch Code is maintained
  if ME->GET_STARC( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


*** Check Avg. Cons. is maintained
  LS_AVGCO = ME->GET_AVGCO( ).
  if LS_AVGCO-AVGCO is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Avg. Cons. Per is maintained
  LS_AVGCP = ME->GET_AVGCP( ).
  if LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


*** Check Starch Factor is maintained
  if ME->GET_STARF( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


endmethod.
method GET_STATUS_MSG.

  data:  LS_AVGCO type ZVCXI_XCS_S_AVGCO,
         LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Starch Code
  if ME->GET_STARC( ) is not initial.
*** Starch Code is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '253' ).
  else.
*** Starch Code is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '254' ).
  endif.

*** Check Avg. Cons
  LS_AVGCO = ME->GET_AVGCO( ).
  if LS_AVGCO-AVGCO is not initial.
*** Avg. Cons. is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '255' ).
  else.
*** Avg. Cons is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '256' ).
  endif.

*** Check Avg. Cons Per
  LS_AVGCP = ME->GET_AVGCP( ).
  if LS_AVGCP-AVGCP is not initial.
*** Avg. Cons. Per is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '257' ).
  else.
*** Avg. Cons Per is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '258' ).

  endif.

*** Check Starch Factor
  if ME->GET_STARF( ) is not initial.
*** Starch Factor is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '259' ).
  else.
*** Starch Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '260' ).
  endif.


endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).


endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

*** Only load Customizing with insert Materialnumber
  check LF_MATNR is not initial and
        LF_WERKS is not initial.

  if ME->R_CUST_MATNR          is bound    and
     ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
     ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear ME->R_CUST_MATNR.

*** Load the Customizing
  ME->R_CUST_STARCH = ZCL_VCXI_PCSS_CUST_STARCH=>GET_INSTANCE_STARCH( IF_MATNR = LF_MATNR
                                                                      IF_WERKS = LF_WERKS
                                                                      IF_DATE  = SY-DATUM ).

  ME->SET_AVGCO( exporting IS_AVGCO = ME->R_CUST_STARCH->S_AVGCO ).
  ME->SET_AVGCP( exporting IS_AVGCP = ME->R_CUST_STARCH->S_AVGCP ).

  move ME->R_CUST_STARCH to ME->R_CUST_MATNR.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO      to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP      to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_STARC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARC ).

  move IF_STARC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_STARF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARF ).

  move IF_STARF to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STARF_CHANGED ).
  endif.

endmethod.
