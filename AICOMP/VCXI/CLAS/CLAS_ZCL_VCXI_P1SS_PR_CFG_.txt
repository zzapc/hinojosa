
class ZCL_VCXI_P1SS_PR_CFG definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XFG
  create public .

public section.

  interfaces ZIF_VCXI_P1SS_COMM_PREV .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .

  constants C_FANDM_FANHE type ZVCXI_P1S_FANDM value 'H' ##NO_TEXT.
  constants C_FANDM_FANLE type ZVCXI_P1S_FANDM value 'L' ##NO_TEXT.
  constants C_FANDM_FANSH type ZVCXI_P1S_FANDM value 'S' ##NO_TEXT.
  constants C_IEVNT_O_BOXPA_CHANGED type /VCXI/VKSC_IEVNT value 'BOXPA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COUAR_CHANGED type /VCXI/VKSC_IEVNT value 'COUAR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FANDM_CHANGED type /VCXI/VKSC_IEVNT value 'FANDM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FANHE_CHANGED type /VCXI/VKSC_IEVNT value 'FANHE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FANLE_CHANGED type /VCXI/VKSC_IEVNT value 'FANLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FANSH_CHANGED type /VCXI/VKSC_IEVNT value 'FANSH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FDUST_CHANGED type /VCXI/VKSC_IEVNT value 'FDUST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FEFCO_CHANGED type /VCXI/VKSC_IEVNT value 'FEFCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FGAP_CHANGED type /VCXI/VKSC_IEVNT value 'FGAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FLUTO_CHANGED type /VCXI/VKSC_IEVNT value 'FLUTO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FTUCK_CHANGED type /VCXI/VKSC_IEVNT value 'FTUCK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JEXT_CHANGED type /VCXI/VKSC_IEVNT value 'JEXT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOILE_CHANGED type /VCXI/VKSC_IEVNT value 'JOILE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIPO_CHANGED type /VCXI/VKSC_IEVNT value 'JOIPO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIWI_CHANGED type /VCXI/VKSC_IEVNT value 'JOIWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_OVLAP_CHANGED type /VCXI/VKSC_IEVNT value 'OVLAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROH2_CHANGED type /VCXI/VKSC_IEVNT value 'PROH2_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROHE_CHANGED type /VCXI/VKSC_IEVNT value 'PROHE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROLE_CHANGED type /VCXI/VKSC_IEVNT value 'PROLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROWI_CHANGED type /VCXI/VKSC_IEVNT value 'PROWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ROLEN_CHANGED type /VCXI/VKSC_IEVNT value 'ROLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTPL_CHANGED type /VCXI/VKSC_IEVNT value 'SHTPL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTPW_CHANGED type /VCXI/VKSC_IEVNT value 'SHTPW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SUBOA_CHANGED type /VCXI/VKSC_IEVNT value 'SUBOA_CHANGED' ##NO_TEXT.
  constants C_IPRVT_CFG type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_CFG' ##NO_TEXT.
  constants C_PARID_BOXPA type /VCXI/VKS_PARID value 'ZVCXI_P0_BOXPA' ##NO_TEXT.
  constants C_PARID_COUAR type /VCXI/VKS_PARID value 'ZVCXI_PX_COUAR' ##NO_TEXT.
  constants C_PARID_FANDM type /VCXI/VKS_PARID value 'ZVCXI_P1_FANDM' ##NO_TEXT.
  constants C_PARID_FANHE type /VCXI/VKS_PARID value 'ZVCXI_P1_FANHE' ##NO_TEXT.
  constants C_PARID_FANLE type /VCXI/VKS_PARID value 'ZVCXI_P1_FANLE' ##NO_TEXT.
  constants C_PARID_FANSH type /VCXI/VKS_PARID value 'ZVCXI_P1_FANSH' ##NO_TEXT.
  constants C_PARID_FDUST type /VCXI/VKS_PARID value 'ZVCXI_PC_FDUST' ##NO_TEXT.
  constants C_PARID_FEFCO type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSTY' ##NO_TEXT.
  constants C_PARID_FGAPB type /VCXI/VKS_PARID value 'ZVCXI_P0_FGAPB' ##NO_TEXT.
  constants C_PARID_FGAPT type /VCXI/VKS_PARID value 'ZVCXI_P0_FGAPT' ##NO_TEXT.
  constants C_PARID_FLUTE type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTE' ##NO_TEXT.
  constants C_PARID_FLUTO type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTO' ##NO_TEXT.
  constants C_PARID_FTUCK type /VCXI/VKS_PARID value 'ZVCXI_PC_FTUCK' ##NO_TEXT.
  constants C_PARID_JEXTB type /VCXI/VKS_PARID value 'ZVCXI_P0_JEXTB' ##NO_TEXT.
  constants C_PARID_JEXTT type /VCXI/VKS_PARID value 'ZVCXI_P0_JEXTT' ##NO_TEXT.
  constants C_PARID_JOILE type /VCXI/VKS_PARID value 'ZVCXI_P0_JOILE' ##NO_TEXT.
  constants C_PARID_JOIPO type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIPO' ##NO_TEXT.
  constants C_PARID_JOIWI type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIWI' ##NO_TEXT.
  constants C_PARID_OVLAP type /VCXI/VKS_PARID value 'ZVCXI_P0_OVLAP' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_PROH2 type /VCXI/VKS_PARID value 'ZVCXI_PC_PROH2' ##NO_TEXT.
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE' ##NO_TEXT.
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE' ##NO_TEXT.
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI' ##NO_TEXT.
  constants C_PARID_ROLEN type /VCXI/VKS_PARID value 'ZVCXI_PC_ROLEN' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTPL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTPL' ##NO_TEXT.
  constants C_PARID_SHTPW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTPW' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.
  constants C_PARID_SUBOA type /VCXI/VKS_PARID value 'ZVCXI_P1_SUBOA' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  constants C_TPRST_FEFCO type ZVCXI_P0SS_TPRST value 'FEFCO' ##NO_TEXT.

  methods CHECK_CUST_DESIGN
    returning
      value(RF_FCUSD) type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD
    exporting
      !EF_BOARD type ZVCXI_PCS_BOARD
      !EF_DESCR type /VCXI/CKX_DESCR
      !ER_CUST_BOARD type ref to ZCL_VCXI_PCSS_CUST_BOARD
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_COUAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COUAR) type ZVCXI_PXS_S_COUAR
    raising
      /VCXI/CX_CKX .
  methods GET_CRBPX
    exporting
      !EF_CRBPX type ZVCXI_P1S_CRBPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_CRBPROP) type ref to ZCL_VCXI_P1SS_BL_CRBPROP
    raising
      /VCXI/CX_CKX .
  methods GET_CRFPX
    exporting
      !EF_CRFPX type ZVCXI_P1S_CRFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_CRFPROP) type ref to ZCL_VCXI_P1SS_BL_CRFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_FANDM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FANDM) type ZVCXI_P1S_FANDM
    raising
      /VCXI/CX_CKX .
  methods GET_FANHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FANHE) type ZVCXI_P1S_S_FANHE
    raising
      /VCXI/CX_CKX .
  methods GET_FANLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FANLE) type ZVCXI_P1S_S_FANLE
    raising
      /VCXI/CX_CKX .
  methods GET_FANSH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FANSH) type ZVCXI_P1S_S_FANSH
    raising
      /VCXI/CX_CKX .
  methods GET_FDUST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FDUST) type ZVCXI_PCSS_S_FDUST
    raising
      /VCXI/CX_CKX .
  methods GET_FEFCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !ER_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY
    returning
      value(RF_FEFCO) type ZVCXI_PCS_FEFCO
    raising
      /VCXI/CX_CKX .
  methods GET_FGAPB
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FGAPB) type ZVCXI_P0SS_S_FGAPB
    raising
      /VCXI/CX_CKX .
  methods GET_FGAPT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FGAPT) type ZVCXI_P0SS_S_FGAPT
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FLUTO) type ZVCXI_PCSS_FLUTO
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PRINT
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_FTUCK
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FTUCK) type ZVCXI_PCSS_S_FTUCK
    raising
      /VCXI/CX_CKX .
  methods GET_GCADO
    returning
      value(RF_GCADO) type ZVCXI_PXS_GCADO
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTB
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JEXTB) type ZVCXI_P0SS_S_JEXTB
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JEXTT) type ZVCXI_P0SS_S_JEXTT
    raising
      /VCXI/CX_CKX .
  methods GET_JOILE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JOILE) type ZVCXI_P0S_S_JOILE
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JOIWI) type ZVCXI_P0S_S_JOIWI
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUPS) type ZVCXI_PXS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_OVLAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_OVLAP) type ZVCXI_P0S_S_OVLAP
    raising
      /VCXI/CX_CKX .
  methods GET_PRODIM_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PROH2
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROH2) type ZVCXI_PCSS_S_PROH2
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_ELEMENTS
    returning
      value(RT_ELEMENT) type ZVCXI_P0SS_TT_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_ROLEN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ROLEN) type ZVCXI_PCS_S_ROLEN
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTPL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTPL) type ZVCXI_P0SS_S_SHTPL
    raising
      /VCXI/CX_CKX .
  methods GET_SHTPW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTPW) type ZVCXI_P0SS_S_SHTPW
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_SUBOA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SUBOA) type ZVCXI_P1S_SUBOA
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COUAR
    importing
      !IS_COUAR type ZVCXI_PXS_S_COUAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FANDM
    importing
      !IF_FANDM type ZVCXI_P1S_FANDM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FANDV type ZVCXI_P1S_S_FANDV optional
    raising
      /VCXI/CX_CKX .
  methods SET_FANHE
    importing
      !IS_FANHE type ZVCXI_P1S_S_FANHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FANLE
    importing
      !IS_FANLE type ZVCXI_P1S_S_FANLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FANSH
    importing
      !IS_FANSH type ZVCXI_P1S_S_FANSH optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FDUST
    importing
      !IS_FDUST type ZVCXI_PCSS_S_FDUST optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FEFCO
    importing
      !IF_FEFCO type ZVCXI_PCS_FEFCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FGAPB
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FGAPB type ZVCXI_P0SS_S_FGAPB optional
    raising
      /VCXI/CX_CKX .
  methods SET_FGAPT
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FGAPT type ZVCXI_P0SS_S_FGAPT optional
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTO
    importing
      !IF_FLUTO type ZVCXI_PCSS_FLUTO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRINT
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_FTUCK
    importing
      !IS_FTUCK type ZVCXI_PCSS_S_FTUCK optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JEXTB
    importing
      !IS_JEXTB type ZVCXI_P0SS_S_JEXTB optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JEXTT
    importing
      !IS_JEXTT type ZVCXI_P0SS_S_JEXTT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOILE
    importing
      !IS_JOILE type ZVCXI_P0S_S_JOILE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRL type ZVCXI_P0SS_FOVRL optional
    raising
      /VCXI/CX_CKX .
  methods SET_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROH2
    importing
      !IS_PROH2 type ZVCXI_PCSS_S_PROH2 optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OVLAP
    importing
      !IS_OVLAP type ZVCXI_P0S_S_OVLAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ROLEN
    importing
      !IS_ROLEN type ZVCXI_PCS_S_ROLEN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTPL
    importing
      !IS_SHTPL type ZVCXI_P0SS_S_SHTPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTPW
    importing
      !IS_SHTPW type ZVCXI_P0SS_S_SHTPW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SUBOA
    importing
      !IF_SUBOA type ZVCXI_P1S_SUBOA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FG~GET_HNDDIM
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_PRODIM type /VCXI/VKSC_IEVNT value 'INIT_PRODIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FANDIM type /VCXI/VKSC_IEVNT value 'RECALC_FANDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_JOIDIM type /VCXI/VKSC_IEVNT value 'RECALC_JOIDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRINT type /VCXI/VKSC_IEVNT value 'RECALC_PRINT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SHTDIM type /VCXI/VKSC_IEVNT value 'RECALC_SHTDIM' ##NO_TEXT.
  constants C_IEVNT_O_CRFPX_CHANGED type /VCXI/VKSC_IEVNT value 'CRFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTLE_CHANGED type /VCXI/VKSC_IEVNT value 'SHTLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTWI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_CRFPX type /VCXI/VKS_PARID value 'ZVCXI_P1_CRFPX' ##NO_TEXT.

  methods CHECK_FEFCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRODIM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods DFLT_FANDIM
    raising
      /VCXI/CX_CKX .
  methods GET_COLEN
    returning
      value(RS_COLEN) type ZVCXI_PCS_S_COLEN
    raising
      /VCXI/CX_CKX .
  methods GET_FOLDIM
    returning
      value(RS_FOLDIM) type ZVCXI_PXS_S_FOLDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_ONEUP
    exporting
      !ER_GATE_CADIF_ONEUP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_ONEUP) type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCORE_MGR
    exporting
      !ER_GATE_SCORE_MGR type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SCORE_MGR) type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRODIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FANDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_JOIDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRINT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTDIM
    raising
      /VCXI/CX_CKX .
  methods SET_CRFPX
    importing
      !IF_CRFPX type ZVCXI_P1S_CRFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_DIKEY
    redefinition .
  methods HANDLE_RECALC_PRODH
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CFG definition
class ZCL_VCXI_P1SS_PR_CFG implementation.
  method CHECK_CUST_DESIGN.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    RF_FCUSD = LR_CUST_PRSTY->GET_FCUSD( ).

  endmethod.
  method CHECK_FEFCO.

    data: LF_FEFCO type ZVCXI_PCS_FEFCO.


    LF_FEFCO = ME->GET_FEFCO( ).
    if LF_FEFCO is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     FEFCO is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '103' ).
      endif.

    else.
***   Check Existance
      case ZCL_VCXI_PCSS_CUST_FEFCO=>CHECK_PRSTY_EXIST( IF_PRSTY = LF_FEFCO ).
        when ABAP_TRUE.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          if IR_MESSAGE is bound.
***         FEFCO is maintained and valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '101' ).
          endif.
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          if IR_MESSAGE is bound.
***         FEFCO is maintained but not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '102' ).
          endif.
      endcase.
    endif.

  endmethod.
  method CHECK_JOIPO.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    RF_ELMST = switch #( LR_CUST_PRSTY->CHECK_JOIPO( IF_JOIPO   = ME->GET_JOIPO( )
                                                     IR_MESSAGE = IR_MESSAGE ) when ABAP_TRUE then /VCXI/CL_VKSR_SERVICE=>C_ELMST_G
                                                                                              else /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).

  endmethod.
  method CHECK_PRODIM.

    data: LF_COMPLETE type ABAP_BOOL.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.

***--------------------------------------------------------------------------------------
*** Check Element Values
    LF_COMPLETE = LR_CUST_PRSTY->CHECK_ELEMV( IT_ELEMENT = ME->GET_PRSTY_ELEMENTS( )
                                              IF_BOXPA   = ME->GET_BOXPA( )
                                              IR_MESSAGE = IR_MESSAGE ).

    RF_ELMST = switch #( LF_COMPLETE when ABAP_TRUE then /VCXI/CL_VKSR_SERVICE=>C_ELMST_G
                                                    else /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).

  endmethod.
  method DFLT_FANDIM.

    data: LF_FANDM   type ZVCXI_P1S_FANDM.
    data: LS_FANDV   type ZVCXI_P1S_S_FANDV.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.


*** Get Default Values
    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    ZCL_VCXI_P1SS_BL_FANF=>GET_DEFAULT( exporting IF_WERKS = ME->GET_WERKS( )
                                                  IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR
                                                  IF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR
                                        importing EF_FANDM = LF_FANDM
                                                  ES_FANDV = LS_FANDV ).

*** Set Default
    ME->SET_FANDM( IF_FANDM = cond #( when LF_FANDM is not initial then LF_FANDM else C_FANDM_FANHE )
                   IS_FANDV = LS_FANDV ).

  endmethod.
  method GET_BOARD.

    data: LF_MBOAR type  ZVCXI_PCSS_MBOAR.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.


*** Get Corrugator Forward Property (Inbound)
    LR_BL_CRFPROP = ME->GET_CRFPX( ).
    check LR_BL_CRFPROP is bound.

*** Get Sales/Production Board ID, depending on the Context
    case ME->GET_ICONT( ).
      when ZIF_VCXI_PXSS_ICONT=>C_ICONT_SALES.
        EF_BOARD = LR_BL_CRFPROP->F_SABOA.
        LF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S.

      when ZIF_VCXI_PXSS_ICONT=>C_ICONT_PROD.
        EF_BOARD = LR_BL_CRFPROP->F_PRBOA.
        LF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P.
    endcase.

    check EF_BOARD is not initial.

*** Get Board Description
    EF_DESCR = LR_BL_CRFPROP->GET_BOARD_DESCR( IF_BOARD = EF_BOARD
                                               IF_WERKS = ME->GET_WERKS( )
                                               IF_MBOAR = LF_MBOAR ).

  endmethod.
  method GET_BOXPA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).
    move LS_PARAM-ATWRT to RF_BOXPA.

  endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.

    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_CADLS = LR_PR_CADIF_ONEUP->GET_CADLS( ).

  endmethod.
  method GET_CALIP.

    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

*** Get Corrugator Forward Property (Inbound)
    LR_BL_CRFPROP = ME->GET_CRFPX( ).
    check LR_BL_CRFPROP is bound.

*** Get Calip
    RS_CALIP = LR_BL_CRFPROP->S_CALIP.

  endmethod.
  method GET_COLEN.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


*** Use Fanfold Length as Corrugation Length
    RS_COLEN = corresponding #( ME->GET_FANLE( importing EF_SETBY = LF_SETBY ) mapping COLEN     = FANLE
                                                                                       COLEN_UOM = FANLE_UOM ).
    check LF_SETBY is initial.

*** Use Roll Length as Corrugation Length
    RS_COLEN = corresponding #( ME->GET_ROLEN( importing EF_SETBY = LF_SETBY ) mapping COLEN     = ROLEN
                                                                                       COLEN_UOM = ROLEN_UOM ).

  endmethod.
  method GET_COUAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).
    move LS_PARAM-ATFLV to RS_COUAR-COUAR.
    move LS_PARAM-UNIT  to RS_COUAR-COUAR_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRBPX.

    data: LR_PR_SCORE_MGR type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR.


*** Get Score Manager Provider
    LR_PR_SCORE_MGR = ME->GET_PRVDR_SCORE_MGR( ).

***--------------------------------------------------------------------------------------
*** Create fresh instance of Corrugator Backward Property
    RR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( ).

    if RR_BL_CRBPROP is bound.
***   Cost Split Distribution
      RR_BL_CRBPROP->SET_CSPLIT( IT_CSPLIT = ME->ZIF_VCXI_PXSS_FG~GET_CSPLIT( ) ).

***   FEFCO
      RR_BL_CRBPROP->SET_FEFCO( IF_FEFCO = ME->GET_FEFCO( ) ).

***   Product Dimensions
      RR_BL_CRBPROP->SET_PRODIM( IS_PRODIM = value #( S_PROLE = ME->GET_PROLE( )
                                                      S_PROWI = ME->GET_PROWI( )
                                                      S_PROHE = ME->GET_PROHE( ) ) ).

***   Flute Orientation
      RR_BL_CRBPROP->SET_FLUTO( IF_FLUTO = ME->GET_FLUTO( ) ).

***   Corrugation Length
      RR_BL_CRBPROP->SET_COLEN( IS_COLEN = ME->GET_COLEN( ) ).

***   Cut Out Area
      RR_BL_CRBPROP->SET_COUAR( IS_COUAR = ME->GET_COUAR( ) ).

***   Joint Dimensions
      RR_BL_CRBPROP->SET_JOIDIM( IS_JOIDIM = value #( JOIPO   = ME->GET_JOIPO( )
                                                      S_JOIWI = ME->GET_JOIWI( )
                                                      S_JOILE = ME->GET_JOILE( )
                                                      S_JEXTT = ME->GET_JEXTT( )
                                                      S_JEXTB = ME->GET_JEXTB( ) ) ).

***   Folding Dimension
      RR_BL_CRBPROP->SET_FOLDIM( IS_FOLDIM = ME->GET_FOLDIM( ) ).

***   Scores & Tapes
      if LR_PR_SCORE_MGR is bound.
        RR_BL_CRBPROP->SET_SCORE( IT_SCORE = LR_PR_SCORE_MGR->GET_SCORE_COM( ) ).
        RR_BL_CRBPROP->SET_TAPE_COM( IT_TAPE_COM = LR_PR_SCORE_MGR->GET_TAPE_COM( ) ).
      endif.

***   OneUp GUID
      RR_BL_CRBPROP->SET_GCADO( IF_GCADO = ME->GET_GCADO( ) ).

    endif.

***--------------------------------------------------------------------------------------
*** Return Corrugator Backward Property XML (Outbound)
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method GET_CRFPX.

    data: LF_ALLOWED type ABAP_BOOL,
          LF_SETBY   type /VCXI/VKSR_SETBY.
    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LT_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM.


***--------------------------------------------------------------------------------------
*** Get Corrugator Forward Property (Inbound)
    RR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Use Sheet Dimension as Handling Dimension if Handling Dimensions are initial and Separation is active
    if RR_BL_CRFPROP->S_HNDDIM is initial.
      ME->GET_NOUTT( importing EF_ALLOW_MULTI = LF_ALLOWED ).
      if LF_ALLOWED eq ABAP_TRUE.
        LS_SHTLE = ME->GET_SHTLE( ).
        LS_SHTWI = ME->GET_SHTWI( ).
        RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                        HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                        HNDWI     = LS_SHTWI-SHTWI
                                                        HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                        HNDHE     = RR_BL_CRFPROP->S_CALIP-CALIP
                                                        HNDHE_UOM = RR_BL_CRFPROP->S_CALIP-CALIP_UOM ) ).
      endif.
    endif.

*** Get Print Definition (in case of Separation)
    LT_PRINT_COM = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is not initial.
      RR_BL_CRFPROP->SET_PRINT( IT_PRINT = LT_PRINT_COM ).
    endif.

*** Product Hierarchy
    RR_BL_CRFPROP->SET_PRODH( IF_PRODH = ME->ZIF_VCXI_PXSS_FG~GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method GET_FANDM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANDM ).
    move LS_PARAM-ATWRT to RF_FANDM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FANHE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANHE ).
    move LS_PARAM-ATFLV to RS_FANHE-FANHE.
    move LS_PARAM-UNIT  to RS_FANHE-FANHE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FANLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANLE ).
    move LS_PARAM-ATFLV to RS_FANLE-FANLE.
    move LS_PARAM-UNIT  to RS_FANLE-FANLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FANSH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANSH ).
    move LS_PARAM-ATFLV to RS_FANSH-FANSH.
    move LS_PARAM-UNIT  to RS_FANSH-FANSH_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FDUST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).
    move LS_PARAM-ATFLV to RS_FDUST-FDUST.
    move LS_PARAM-UNIT  to RS_FDUST-FDUST_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FEFCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FEFCO ).
    move LS_PARAM-ATWRT to RF_FEFCO.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_FEFCO is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PRSTY_DESCR( IF_TPRST = ZCL_VCXI_P1SS_PR_CFG=>C_TPRST_FEFCO
                                                            IF_PRSTY = RF_FEFCO ).
    endif.

    if ER_CUST_PRSTY is requested.
***   Customizing Instance for Product Style
      try.
          ER_CUST_PRSTY = ZCL_VCXI_PXSS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = ZCL_VCXI_P1SS_PR_CFG=>C_TPRST_FEFCO
                                                                  IF_PRSTY = RF_FEFCO ).
        catch /VCXI/CX_CKX.
          clear ER_CUST_PRSTY.
      endtry.
    endif.

  endmethod.
  method GET_FGAPB.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGAPB ).
    RS_FGAPB-FGAPB     = LS_PARAM-ATFLV.
    RS_FGAPB-FGAPB_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_FGAPT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGAPT ).
    RS_FGAPT-FGAPT     = LS_PARAM-ATFLV.
    RS_FGAPT-FGAPT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_FLUTE.

    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

***----------------------------------------------------------------------------
*** Get Corrugator Forward Property (Inbound)
    LR_BL_CRFPROP = ME->GET_CRFPX( ).
    check LR_BL_CRFPROP is bound.

*** Get Flute
    move LR_BL_CRFPROP->F_FLUTE to RF_FLUTE.

    check RF_FLUTE is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_FLUTE_DESCR( IF_FLUTE = RF_FLUTE ).
    endif.

  endmethod.
  method GET_FLUTO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTO ).
    move LS_PARAM-ATWRT to RF_FLUTO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOLDIM.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get FEFCO Customizing
    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.

*** Get Folding Dimensions
    RS_FOLDIM = LR_CUST_PRSTY->GET_FOLDIM( IF_ORIEN   = ME->GET_FLUTO( )
                                           IT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ) ).

  endmethod.
  method GET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

    RF_FOVRR = switch #( LF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                  when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC then ABAP_FALSE
                                                                        else ABAP_UNDEFINED ).

  endmethod.
  method GET_FTUCK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).
    move LS_PARAM-ATFLV to RS_FTUCK-FTUCK.
    move LS_PARAM-UNIT  to RS_FTUCK-FTUCK_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GCADO.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.


    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_GCADO = LR_PR_CADIF_ONEUP->GET_GCADO( ).

  endmethod.
  method GET_JEXTB.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTB ).
    move LS_PARAM-ATFLV to RS_JEXTB-JEXTB.
    move LS_PARAM-UNIT  to RS_JEXTB-JEXTB_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JEXTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTT ).
    move LS_PARAM-ATFLV to RS_JEXTT-JEXTT.
    move LS_PARAM-UNIT  to RS_JEXTT-JEXTT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOILE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).
    move LS_PARAM-ATFLV to RS_JOILE-JOILE.
    move LS_PARAM-UNIT  to RS_JOILE-JOILE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOIPO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).
    move LS_PARAM-ATWRT to RF_JOIPO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOIWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).
    move LS_PARAM-ATFLV to RS_JOIWI-JOIWI.
    move LS_PARAM-UNIT  to RS_JOIWI-JOIWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUPS.

*** Get fixed Number of Ups
    RF_NOUPS = 1.

  endmethod.
  method GET_OVLAP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OVLAP ).
    move LS_PARAM-ATFLV to RS_OVLAP-OVLAP.
    move LS_PARAM-UNIT  to RS_OVLAP-OVLAP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRODIM_DESCR.

    data: LF_BOXPA type ZVCXI_P0SS_BOXPA.
    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get FEFCO Customizing and Part of Box
    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    LF_BOXPA = ME->GET_BOXPA( ).

    if LR_CUST_PRSTY is bound.
***   Length
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'L' else '/L' ).
      endif.

***   Width
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'W' else '/W' ).
      endif.

***   Height
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'H' else '/H' ).
      endif.

***   Second Height
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'h' else '/h' ).
      endif.
    else.
***   Fallback
      RF_DESCR = 'L/W/H'.
    endif.

*** Full Description String
    RF_DESCR = 'Product Dim. ('(T01) && RF_DESCR && ')'.

  endmethod.
  method GET_PROH2.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROH2 ).
    move LS_PARAM-ATFLV to RS_PROH2-PROH2.
    move LS_PARAM-UNIT  to RS_PROH2-PROH2_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROHE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
    move LS_PARAM-ATFLV to RS_PROHE-PROHE.
    move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
    move LS_PARAM-ATFLV to RS_PROLE-PROLE.
    move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
    move LS_PARAM-ATFLV to RS_PROWI-PROWI.
    move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRSTY_ELEMENTS.

    data: LS_PROLE type ZVCXI_P0S_S_PROLE,
          LS_PROWI type ZVCXI_P0S_S_PROWI,
          LS_PROHE type ZVCXI_P0S_S_PROHE,
          LS_PROH2 type ZVCXI_PCSS_S_PROH2,
          LS_JOIWI type ZVCXI_P0S_S_JOIWI,
          LS_OVLAP type ZVCXI_P0S_S_OVLAP,
          LS_FDUST type ZVCXI_PCSS_S_FDUST,
          LS_FTUCK type ZVCXI_PCSS_S_FTUCK,
          LS_FANLE type ZVCXI_P1S_S_FANLE,
          LS_ROLEN type ZVCXI_PCS_S_ROLEN,
          LS_SHTPL type ZVCXI_P0SS_S_SHTPL,
          LS_SHTPW type ZVCXI_P0SS_S_SHTPW,
          LS_CALIP type ZVCXI_P0SS_S_CALIP,
          LS_FGAPT type ZVCXI_P0SS_S_FGAPT,
          LS_FGAPB type ZVCXI_P0SS_S_FGAPB.


***--------------------------------------------------------------------------------------
*** Product Length
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH
                      ELEMV     = LS_PROLE-PROLE
                      ELEMV_UOM = LS_PROLE-PROLE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Width
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH
                      ELEMV     = LS_PROWI-PROWI
                      ELEMV_UOM = LS_PROWI-PROWI_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Height
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                      ELEMV     = LS_PROHE-PROHE
                      ELEMV_UOM = LS_PROHE-PROHE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Height2
    LS_PROH2 = ME->GET_PROH2( ).
    if LS_PROH2-PROH2 is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                      ELEMV     = LS_PROHE-PROHE
                      ELEMV_UOM = LS_PROHE-PROHE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Get Joint Width
    LS_JOIWI = ME->GET_JOIWI( ).
    if LS_JOIWI-JOIWI is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_JOIWI
                      ELEMV     = LS_JOIWI-JOIWI
                      ELEMV_UOM = LS_JOIWI-JOIWI_UOM
                    ) to RT_ELEMENT.
    endif.

*** Overlap
    LS_OVLAP = ME->GET_OVLAP( ).
    if LS_OVLAP-OVLAP is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_OVLAP
                      ELEMV     = LS_OVLAP-OVLAP
                      ELEMV_UOM = LS_OVLAP-OVLAP_UOM
                    ) to RT_ELEMENT.
    endif.

*** Dust Flap
    LS_FDUST = ME->GET_FDUST( ).
    if LS_FDUST-FDUST is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                      ELEMV     = LS_FDUST-FDUST
                      ELEMV_UOM = LS_FDUST-FDUST_UOM
                    ) to RT_ELEMENT.
    endif.

*** Tuck in Flap
    LS_FTUCK = ME->GET_FTUCK( ).
    if LS_FTUCK-FTUCK is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                      ELEMV     = LS_FTUCK-FTUCK
                      ELEMV_UOM = LS_FTUCK-FTUCK_UOM
                    ) to RT_ELEMENT.
    endif.

*** Fanfold Length
    LS_FANLE = ME->GET_FANLE( ).
    if LS_FANLE-FANLE is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FANLE
                      ELEMV     = LS_FANLE-FANLE
                      ELEMV_UOM = LS_FANLE-FANLE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Roll Length
    LS_ROLEN = ME->GET_ROLEN( ).
    if LS_ROLEN-ROLEN is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_ROLEN
                      ELEMV     = LS_ROLEN-ROLEN
                      ELEMV_UOM = LS_ROLEN-ROLEN_UOM
                    ) to RT_ELEMENT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Product Sheet Dimensions (Outbound)
    LS_SHTPL = ME->GET_SHTPL( ).
    if LS_SHTPL-SHTPL is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPL
                      ELEMV     = LS_SHTPL-SHTPL
                      ELEMV_UOM = LS_SHTPL-SHTPL_UOM
                    ) to RT_ELEMENT.
    endif.

    LS_SHTPW = ME->GET_SHTPW( ).
    if LS_SHTPW-SHTPW is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPW
                      ELEMV     = LS_SHTPW-SHTPW
                      ELEMV_UOM = LS_SHTPW-SHTPW_UOM
                    ) to RT_ELEMENT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Caliper
    move ME->GET_CALIP( ) to LS_CALIP.
    if LS_CALIP-CALIP is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_CALIP
                      ELEMV     = LS_CALIP-CALIP
                      ELEMV_UOM = LS_CALIP-CALIP_UOM
                    ) to RT_ELEMENT.
    endif.

***------------------------------------------------------------------------------------------------
*** Gap in Flap Top
    LS_FGAPT = ME->GET_FGAPT( ).
    if LS_FGAPT-FGAPT is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_T
                      ELEMV     = LS_FGAPT-FGAPT / 2      "Use half of the Gap as Reduction for Scores
                      ELEMV_UOM = LS_FGAPT-FGAPT_UOM
                    ) to RT_ELEMENT.
    endif.

*** Gap in Flap Bottom
    LS_FGAPB = ME->GET_FGAPB( ).
    if LS_FGAPB-FGAPB is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_B
                      ELEMV     = LS_FGAPB-FGAPB / 2      "Use half of the Gap as Reduction for Scores
                      ELEMV_UOM = LS_FGAPB-FGAPB_UOM
                    ) to RT_ELEMENT.
    endif.

  endmethod.
  method GET_PRVDR_CADIF_ONEUP.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get CAD Integration provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get CAD Integration Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_CADIF_ONEUP.
          check RR_PR_CADIF_ONEUP is bound.
          move LR_GATE to ER_GATE_CADIF_ONEUP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CADIF_ONEUP, ER_GATE_CADIF_ONEUP.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SCORE_MGR.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Score Manager provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_IPRVT_PX_SCORE_MGR
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Score Manager Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SCORE_MGR.
          check RR_PR_SCORE_MGR is bound.
          move LR_GATE to ER_GATE_SCORE_MGR.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SCORE_MGR, ER_GATE_SCORE_MGR.
      endtry.
    endloop.

  endmethod.
  method GET_ROLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).
    move LS_PARAM-ATFLV to RS_ROLEN-ROLEN.
    move LS_PARAM-UNIT  to RS_ROLEN-ROLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
    move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
    move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTPL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).
    move LS_PARAM-ATFLV to RS_SHTPL-SHTPL.
    move LS_PARAM-UNIT  to RS_SHTPL-SHTPL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTPW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).
    move LS_PARAM-ATFLV to RS_SHTPW-SHTPW.
    move LS_PARAM-UNIT  to RS_SHTPW-SHTPW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
    move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
    move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check FEFCO
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_FEFCO( ) ).

*** Check Product Dimensions
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRODIM( ) ).

*** Check Joint Position
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_JOIPO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check FEFCO
    ME->CHECK_FEFCO( IR_MESSAGE = IR_MESSAGE ).

*** Check Product Dimensions
    ME->CHECK_PRODIM( IR_MESSAGE = IR_MESSAGE ).

*** Check Joint Position
    ME->CHECK_JOIPO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SUBOA.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_CUST_BOARD   type ref to ZCL_VCXI_PCSS_CUST_BOARD.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBOA ).
    move LS_PARAM-ATWRT to RF_SUBOA.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_SUBOA is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Get Board Customizing, depending on the Context
      try.
          LR_CUST_BOARD = ZCL_VCXI_PCSS_CUST_BOARD=>GET_INSTANCE( IF_BOARD = RF_SUBOA
                                                                  IF_MBOAR = switch #( ME->GET_ICONT( ) when ZIF_VCXI_PXSS_ICONT=>C_ICONT_SALES then ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S
                                                                                                        when ZIF_VCXI_PXSS_ICONT=>C_ICONT_PROD  then ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P )
                                                                  IF_WERKS = ME->GET_WERKS( ) ).
        catch /VCXI/CX_CKX.
          clear LR_CUST_BOARD.
      endtry.

***   Get Description (by Customizing)
      if LR_CUST_BOARD is bound.
        EF_DESCR = LR_CUST_BOARD->GET_BOARD_DESCR( ).
      endif.
    endif.

  endmethod.
  method GET_SURWT.

***--------------------------------------------------------------------------------------
*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_PRODIM.
        ME->HANDLE_INIT_PRODIM( ).

      when C_IEVNT_I_RECALC_SHTDIM.
        ME->HANDLE_RECALC_SHTDIM( ).

      when C_IEVNT_I_RECALC_JOIDIM.
        ME->HANDLE_RECALC_JOIDIM( ).

      when C_IEVNT_I_RECALC_FANDIM.
        ME->HANDLE_RECALC_FANDIM( ).

      when C_IEVNT_I_RECALC_PRINT.
        ME->HANDLE_RECALC_PRINT( ).

    endcase.

  endmethod.
  method HANDLE_INIT_PRODIM.

    data: LF_BOXPA type ZVCXI_P0SS_BOXPA,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_ELEMV type ZVCXI_P0SS_S_ELEMV.
    data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    LT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ).

***--------------------------------------------------------------------------------------
*** Part of Box
    if LR_CUST_PRSTY->GET_BOXPA( ) is initial.
      ME->SET_BOXPA( IF_SETBY = SPACE ).
    endif.
    LF_BOXPA = ME->GET_BOXPA( ).

***--------------------------------------------------------------------------------------
*** Height
    if not LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                                         IF_BOXPA = LF_BOXPA ).
      ME->SET_PROHE( IF_SETBY = SPACE ).
    endif.

*** Second Height
    if not LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                                         IF_BOXPA = LF_BOXPA ).
      ME->SET_PROH2( IF_SETBY = SPACE ).
    endif.

*** Overlap
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_OVLAP
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_OVLAP( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_OVLAP
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_OVLAP( IS_OVLAP = value #( OVLAP     = LS_ELEMV-ELEMV
                                           OVLAP_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_OVLAP( IF_SETBY = SPACE ).
    endif.

*** Tuck In Flap
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FTUCK( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FTUCK( IS_FTUCK = value #( FTUCK     = LS_ELEMV-ELEMV
                                           FTUCK_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FTUCK( IF_SETBY = SPACE ).
    endif.

*** Dust Flap
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FDUST( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FDUST( IS_FDUST = value #( FDUST     = LS_ELEMV-ELEMV
                                           FDUST_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FDUST( IF_SETBY = SPACE ).
    endif.

*** Gap in Flap Top
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_T
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FGAPT( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_T
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FGAPT( IS_FGAPT = value #( FGAPT     = LS_ELEMV-ELEMV
                                           FGAPT_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FGAPT( IF_SETBY = SPACE ).
    endif.

*** Gap in Flap Bottom
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_B
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FGAPB( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_B
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FGAPB( IS_FGAPB = value #( FGAPB     = LS_ELEMV-ELEMV
                                           FGAPB_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FGAPB( IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Fanfold
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FANLE
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FANDM( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial. "only if initial
***     Defaulting of Fanfold Dimension
        ME->DFLT_FANDIM( ).
      endif.
    else.
      ME->SET_FANDM( IF_SETBY = SPACE ).
      ME->SET_FANHE( IF_SETBY = SPACE ).
      ME->SET_FANLE( IF_SETBY = SPACE ).
      ME->SET_FANSH( IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Roll Length
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_ROLEN
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_ROLEN( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_ROLEN
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_ROLEN( IS_ROLEN = value #( ROLEN     = LS_ELEMV-ELEMV
                                           ROLEN_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_ROLEN( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_NOUTT  type ZVCXI_PXS_NOUTT,
          LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY             type ZVCXI_P0SS_S_DIKEY,
          LS_SHTLE             type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI             type ZVCXI_P0SS_S_SHTWI,
          LS_CALCV_SBLAR       type ZVCXI_XCS_S_CALCV,
          LS_CALCV_SBLAR_TOTAL type ZVCXI_XCS_S_CALCV,
          LS_CALCV_SBLAR_SELF  type ZVCXI_XCS_S_CALCV.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CRCONO type ref to ZCL_VCXI_P1SS_PR_CRCONO,
          LR_PR_CFG    type ref to ZCL_VCXI_P1SS_PR_CFG.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.


***------------------------------------------------------------------------------------------------
    if LINES( LT_GATE ) eq 1.     " not only me
      LF_FACTOR = 1.
    else.
***   Loop through all siblings and collect total Sold Blank Area
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_P1SS_PR_CRCONO into LR_PR_CRCONO.
            LF_NOUTT = LR_PR_CRCONO->GET_NOUTT( ).
            LR_PR_CRCONO->ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                                        ES_SHTWI = LS_SHTWI ).
          when type ZCL_VCXI_P1SS_PR_CFG into LR_PR_CFG.
            LF_NOUTT = LR_PR_CFG->GET_NOUTT( ).
            LR_PR_CFG->ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                                     ES_SHTWI = LS_SHTWI ).
          when others.
            continue.
        endcase.
        check LS_SHTLE-SHTLE_UOM is not initial and
              LS_SHTWI-SHTWI_UOM is not initial.

***     Calculate Sold Blank Area (considering Number of Outs)
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                            IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                            IF_CALCV_2     = LS_SHTWI-SHTWI
                                                            IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_CALCV_SBLAR-CALCV
                                                            EF_CALCV_UOM   = LS_CALCV_SBLAR-CALCV_UOM ).
        LS_CALCV_SBLAR-CALCV = LS_CALCV_SBLAR-CALCV * LF_NOUTT.

***     Keep own Area for determination of Factor
        if LR_GATE eq ME->R_GATE.
          LS_CALCV_SBLAR_SELF = LS_CALCV_SBLAR.
        endif.

***     Calculate Total Area
        if LS_CALCV_SBLAR_TOTAL is initial.
          LS_CALCV_SBLAR_TOTAL = LS_CALCV_SBLAR.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_SBLAR-CALCV
                                                              IF_CALCV_UOM_1 = LS_CALCV_SBLAR-CALCV_UOM
                                                              IF_CALCV_2     = LS_CALCV_SBLAR_TOTAL-CALCV
                                                              IF_CALCV_UOM_2 = LS_CALCV_SBLAR_TOTAL-CALCV_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                    importing EF_CALCV       = LS_CALCV_SBLAR_TOTAL-CALCV
                                                              EF_CALCV_UOM   = LS_CALCV_SBLAR_TOTAL-CALCV_UOM ).
        endif.
      endloop.

***   Determine Factor based on Area
      if LS_CALCV_SBLAR_TOTAL-CALCV gt 0.
        LF_FACTOR = LS_CALCV_SBLAR_SELF-CALCV / LS_CALCV_SBLAR_TOTAL-CALCV.
      else.
        LF_FACTOR = 0.
      endif.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_FANDIM.

    data: LS_FANHE type ZVCXI_P1S_S_FANHE,
          LS_FANLE type ZVCXI_P1S_S_FANLE,
          LS_FANSH type ZVCXI_P1S_S_FANSH.


    case ME->GET_FANDM( ).
***--------------------------------------------------------------------------------------
***   Fanfold Height is defined
      when C_FANDM_FANHE.
***     Fanfold Sheets = Fanfold Height / Caliper
        LS_FANSH = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANSH_BY_FANHE( IS_FANHE = ME->GET_FANHE( )
                                                               IS_CALIP = ME->GET_CALIP( ) ).
        ME->SET_FANSH( IS_FANSH = LS_FANSH ).

***     Fanfold Length = Sheet Length * Fanfold Sheets
        LS_FANLE = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANLE( IS_SHTLE = ME->GET_SHTLE( )
                                                      IS_FANSH = LS_FANSH
                                                      IF_UOM   = ME->GET_FANLE( )-FANLE_UOM ).
        ME->SET_FANLE( IS_FANLE = LS_FANLE ).

***--------------------------------------------------------------------------------------
***   Fanfold Length is defined
      when C_FANDM_FANLE.
***     Fanfold Sheets = Fanfold Length / Sheet Length
        LS_FANSH = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANSH_BY_FANLE( IS_FANLE = ME->GET_FANLE( )
                                                               IS_SHTLE = ME->GET_SHTLE( ) ).
        ME->SET_FANSH( IS_FANSH = LS_FANSH ).

***     Fanfold Height = Caliper * Fanfold Sheets
        LS_FANHE = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANHE( IS_FANSH = LS_FANSH
                                                      IS_CALIP = ME->GET_CRFPX( )->S_CALIP
                                                      IF_UOM   = ME->GET_FANHE( )-FANHE_UOM ).
        ME->SET_FANHE( IS_FANHE = LS_FANHE ).

***--------------------------------------------------------------------------------------
***   Fanfold Sheets are defined
      when C_FANDM_FANSH.
        LS_FANSH = ME->GET_FANSH( ).

***     Fanfold Length = Sheet Length * Fanfold Sheets
        LS_FANLE = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANLE( IS_SHTLE = ME->GET_SHTLE( )
                                                      IS_FANSH = LS_FANSH
                                                      IF_UOM   = ME->GET_FANLE( )-FANLE_UOM ).
        ME->SET_FANLE( IS_FANLE = LS_FANLE ).

***     Fanfold Height = Caliper * Fanfold Sheets
        LS_FANHE = ZCL_VCXI_P1SS_BL_FANF=>CALC_FANHE( IS_FANSH = LS_FANSH
                                                      IS_CALIP = ME->GET_CRFPX( )->S_CALIP
                                                      IF_UOM   = ME->GET_FANHE( )-FANHE_UOM ).
        ME->SET_FANHE( IS_FANHE = LS_FANHE ).

    endcase.

  endmethod.
  method HANDLE_RECALC_JOIDIM.

    data: LF_JOIPO type ZVCXI_P0S_JOIPO,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_ELEMV type ZVCXI_P0SS_S_ELEMV,
          LS_JOILE type ZVCXI_P0S_S_JOILE.
    data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_FEFCO( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    LT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ).

***--------------------------------------------------------------------------------------
*** Joint Position
    LF_JOIPO = ME->GET_JOIPO( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is initial and   "only if initial
       LR_CUST_PRSTY is bound.
      LR_CUST_PRSTY->GET_JOIPO( importing EF_DEFAULT = LF_JOIPO ).
      if LF_JOIPO is not initial.
        ME->SET_JOIPO( IF_JOIPO = LF_JOIPO ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Joint Width
    if LF_JOIPO ne ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE.
      ME->GET_JOIWI( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_JOIWI
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_JOIWI( IS_JOIWI = value #( JOIWI     = LS_ELEMV-ELEMV
                                           JOIWI_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
***   Initialize Joint Width
      ME->SET_JOIWI( IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Joint Length
    if LF_JOIPO ne ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE.
      ME->GET_JOILE( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***     Use Product Height as Joint Length
        LS_JOILE = corresponding #( ME->GET_PROHE( ) mapping JOILE     = PROHE
                                                             JOILE_UOM = PROHE_UOM ).
***     Add Joint Extension Top and Bottom
        try.
            data(LS_JEXTT) = ME->GET_JEXTT( ).
            if LS_JEXTT-JEXTT is not initial.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_JOILE-JOILE
                                                                  IF_CALCV_UOM_1 = LS_JOILE-JOILE_UOM
                                                                  IF_CALCV_2     = LS_JEXTT-JEXTT
                                                                  IF_CALCV_UOM_2 = LS_JEXTT-JEXTT_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_JOILE-JOILE_UOM
                                                        importing EF_CALCV       = LS_JOILE-JOILE
                                                                  EF_CALCV_UOM   = LS_JOILE-JOILE_UOM ).
            endif.
            data(LS_JEXTB) = ME->GET_JEXTB( ).
            if LS_JEXTB is not initial.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_JOILE-JOILE
                                                                  IF_CALCV_UOM_1 = LS_JOILE-JOILE_UOM
                                                                  IF_CALCV_2     = LS_JEXTB-JEXTB
                                                                  IF_CALCV_UOM_2 = LS_JEXTB-JEXTB_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_JOILE-JOILE_UOM
                                                        importing EF_CALCV       = LS_JOILE-JOILE
                                                                  EF_CALCV_UOM   = LS_JOILE-JOILE_UOM ).
            endif.
          catch /VCXI/CX_CKX into data(LR_CX_CKX).
            ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
            clear LS_JOILE-JOILE.
        endtry.

***     Set new Default
        ME->SET_JOILE( IS_JOILE = LS_JOILE ).
      endif.
    else.
***   Initialize Joint Length and Extension
      ME->SET_JOILE( IF_SETBY = SPACE ).
      ME->SET_JEXTT( IF_SETBY = SPACE ).
      ME->SET_JEXTB( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_PRINT.

    data: LF_SETBY  type /VCXI/VKSR_SETBY.


***------------------------------------------------------------------------------------------------
*** Get Setby
    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

*** Get all sibling provider
    if LINES( ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ) ) le 1.
      LF_SETBY = SPACE.  "No Print Definition if Separation is not active
    else.
      LF_SETBY = switch #( LF_SETBY when SPACE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                               else LF_SETBY ).
    endif.

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

***------------------------------------------------------------------------------------------------
*** Set forwarded Print Definition
    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IT_PRINT_COM = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->T_PRINT
                                               IF_SETBY     = LF_SETBY ).

  endmethod.
  method HANDLE_RECALC_PRODH.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.


    ME->ZIF_VCXI_PXSS_FG~GET_PRODH( importing EF_SETBY = LF_SETBY ).

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Set Forwarded Product Hierarchy
    LR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).
    if LR_BL_CRFPROP is bound.
      ME->ZIF_VCXI_PXSS_FG~SET_PRODH( IF_PRODH = LR_BL_CRFPROP->F_PRODH ).
    endif.

  endmethod.
  method HANDLE_RECALC_SHTDIM.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LR_PR_SCORE_MGR type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR.

*** Ger Score Manager Provider
    LR_PR_SCORE_MGR = ME->GET_PRVDR_SCORE_MGR( ).
    check LR_PR_SCORE_MGR is bound.

*** Get Sheet Dimensions based on Scores
    LR_PR_SCORE_MGR->GET_SHT_DIM( importing ES_SHTLE = LS_SHTLE
                                            ES_SHTWI = LS_SHTWI ).

*** Set Sheet Dimensions
    ME->SET_SHTLE( exporting IS_SHTLE = LS_SHTLE ).
    ME->SET_SHTWI( exporting IS_SHTWI = LS_SHTWI ).


*** Set Product Sheet Dimension for Non-Custom Designs
    if ME->CHECK_CUST_DESIGN( ) ne ABAP_TRUE.
      ME->SET_SHTPL( IS_SHTPL = value #( SHTPL     = LS_SHTLE-SHTLE
                                         SHTPL_UOM = LS_SHTLE-SHTLE_UOM ) ).
      ME->SET_SHTPW( IS_SHTPW = value #( SHTPW     = LS_SHTWI-SHTWI
                                         SHTPW_UOM = LS_SHTWI-SHTWI_UOM ) ).
    endif.

  endmethod.
  method SET_BOXPA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).

    if IF_BOXPA is supplied.
      LS_PARAM-ATWRT = IF_BOXPA.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOXPA_CHANGED ).
    endif.

  endmethod.
  method SET_COUAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).

    move IS_COUAR-COUAR     to LS_PARAM-ATFLV.
    move IS_COUAR-COUAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COUAR_CHANGED ).
    endif.

  endmethod.
  method SET_CRFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRFPX ).

    move IF_CRFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FANDM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANDM ).

    if IF_FANDM is supplied.
      LS_PARAM-ATWRT = IF_FANDM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FANDM_CHANGED ).
    endif.

***--------------------------------------------------------------------------------------
*** Dimension Value
    if IS_FANDV is supplied.
      case LS_PARAM-ATWRT.
        when C_FANDM_FANHE.
***       Set Fanfold Height
          ME->SET_FANHE( IS_FANHE = value #( FANHE     = IS_FANDV-FANDV
                                             FANHE_UOM = IS_FANDV-FANDV_UOM )
                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        when C_FANDM_FANLE.
***       Set Fanfold Length
          ME->SET_FANLE( IS_FANLE = value #( FANLE     = IS_FANDV-FANDV
                                             FANLE_UOM = IS_FANDV-FANDV_UOM )
                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        when C_FANDM_FANSH.
***       Set Fanfold Sheets
          ME->SET_FANSH( IS_FANSH = value #( FANSH     = IS_FANDV-FANDV
                                             FANSH_UOM = IS_FANDV-FANDV_UOM )
                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

      endcase.
    endif.

  endmethod.
  method SET_FANHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANHE ).

    if IS_FANHE is supplied.
      LS_PARAM-ATFLV = IS_FANHE-FANHE.
      LS_PARAM-UNIT  = IS_FANHE-FANHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FANHE_CHANGED ).
    endif.

  endmethod.
  method SET_FANLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANLE ).

    if IS_FANLE is supplied.
      LS_PARAM-ATFLV = IS_FANLE-FANLE.
      LS_PARAM-UNIT  = IS_FANLE-FANLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FANLE_CHANGED ).
    endif.

  endmethod.
  method SET_FANSH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FANSH ).

    if IS_FANSH is supplied.
      LS_PARAM-ATFLV = IS_FANSH-FANSH.
      LS_PARAM-UNIT  = IS_FANSH-FANSH_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FANSH_CHANGED ).
    endif.

  endmethod.
  method SET_FDUST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).

    if IS_FDUST is supplied.
      LS_PARAM-ATFLV = IS_FDUST-FDUST.
      LS_PARAM-UNIT  = IS_FDUST-FDUST_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FDUST_CHANGED ).
    endif.

  endmethod.
  method SET_FEFCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FEFCO ).

    move IF_FEFCO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FEFCO_CHANGED ).
    endif.

  endmethod.
  method SET_FGAPB.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGAPB ).

    if IS_FGAPB is supplied.
      LS_PARAM-ATFLV = IS_FGAPB-FGAPB.
      LS_PARAM-UNIT  = IS_FGAPB-FGAPB_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FGAP_CHANGED ).
    endif.

  endmethod.
  method SET_FGAPT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGAPT ).

    if IS_FGAPT is supplied.
      LS_PARAM-ATFLV = IS_FGAPT-FGAPT.
      LS_PARAM-UNIT  = IS_FGAPT-FGAPT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FGAP_CHANGED ).
    endif.

  endmethod.
  method SET_FLUTO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTO ).

    move IF_FLUTO     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTO_CHANGED ).
    endif.

  endmethod.
  method SET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


    LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE  then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                  when ABAP_FALSE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                  else SPACE ).

    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IF_SETBY = LF_SETBY ).

  endmethod.
  method SET_FTUCK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).

    if IS_FTUCK is supplied.
      LS_PARAM-ATFLV = IS_FTUCK-FTUCK.
      LS_PARAM-UNIT  = IS_FTUCK-FTUCK_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FTUCK_CHANGED ).
    endif.

  endmethod.
  method SET_JEXTB.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTB ).

    if IS_JEXTB is supplied.
      LS_PARAM-ATFLV = IS_JEXTB-JEXTB.
      LS_PARAM-UNIT  = IS_JEXTB-JEXTB_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JEXT_CHANGED ).
    endif.

  endmethod.
  method SET_JEXTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTT ).

    if IS_JEXTT is supplied.
      LS_PARAM-ATFLV = IS_JEXTT-JEXTT.
      LS_PARAM-UNIT  = IS_JEXTT-JEXTT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JEXT_CHANGED ).
    endif.

  endmethod.
  method SET_JOILE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).

    if IS_JOILE is supplied.
      LS_PARAM-ATFLV = IS_JOILE-JOILE.
      LS_PARAM-UNIT  = IS_JOILE-JOILE_UOM.
    endif.

*** Identify correct SETBY
    if IF_FOVRL is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRL when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOILE_CHANGED ).
    endif.

  endmethod.
  method SET_JOIPO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).

    move IF_JOIPO     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIPO_CHANGED ).
    endif.

  endmethod.
  method SET_JOIWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).

    if IS_JOIWI is supplied.
      LS_PARAM-ATFLV = IS_JOIWI-JOIWI.
      LS_PARAM-UNIT  = IS_JOIWI-JOIWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIWI_CHANGED ).
    endif.

  endmethod.
  method SET_OVLAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OVLAP ).

    if IS_OVLAP is supplied.
      LS_PARAM-ATFLV = IS_OVLAP-OVLAP.
      LS_PARAM-UNIT  = IS_OVLAP-OVLAP_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OVLAP_CHANGED ).
    endif.

  endmethod.
  method SET_PROH2.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROH2 ).

    if IS_PROH2 is supplied.
      LS_PARAM-ATFLV = IS_PROH2-PROH2.
      LS_PARAM-UNIT  = IS_PROH2-PROH2_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROH2_CHANGED ).
    endif.

  endmethod.
  method SET_PROHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

    if IS_PROHE is supplied.
      LS_PARAM-ATFLV = IS_PROHE-PROHE.
      LS_PARAM-UNIT  = IS_PROHE-PROHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROHE_CHANGED ).
    endif.

  endmethod.
  method SET_PROLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

    move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
    move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROLE_CHANGED ).
    endif.

  endmethod.
  method SET_PROWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

    move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
    move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROWI_CHANGED ).
    endif.

  endmethod.
  method SET_ROLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).

    if IS_ROLEN is supplied.
      LS_PARAM-ATFLV = IS_ROLEN-ROLEN.
      LS_PARAM-UNIT  = IS_ROLEN-ROLEN_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ROLEN_CHANGED ).
    endif.

  endmethod.
  method SET_SHTLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

    move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
    move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTLE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTPL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).

    move IS_SHTPL-SHTPL     to LS_PARAM-ATFLV.
    move IS_SHTPL-SHTPL_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTPL_CHANGED ).
    endif.

  endmethod.
  method SET_SHTPW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).

    move IS_SHTPW-SHTPW     to LS_PARAM-ATFLV.
    move IS_SHTPW-SHTPW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTPW_CHANGED ).
    endif.

  endmethod.
  method SET_SHTWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

    move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
    move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTWI_CHANGED ).
    endif.

  endmethod.
  method SET_SUBOA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBOA ).

    move IF_SUBOA     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SUBOA_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property (Outbound)
    RR_BL_CRBPROP = ME->GET_CRBPX( ).

***--------------------------------------------------------------------------------------
*** Apply Distribution Key to Cost Split
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_DIKEY( IS_DIKEY = ME->GET_DIKEY( ) ).

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property Instance
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRFPX ).
    move LS_PARAM-STRNG to EF_CRFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Corrugator Forward Property Instance
    if RR_BL_CRFPROP is requested.
      RR_BL_CRFPROP = ZCL_VCXI_P1SS_BL_CRFPROP=>FACTORY( IF_CRFPX = EF_CRFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RF_NOUPS *= ME->GET_NOUTT( ).

***------------------------------------------------------------------------------------------------
*** In case of existing Materials, only the Number of Ups of first FG will be considered
    if ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ) is not initial and
       ME->GET_ICSPL( ) gt 1.
      clear RF_NOUPS.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM.

    ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P1SS_COMM_NEXT,
          LR_BL_CRFPROP      type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRFPROP_NEXT type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Get Surface Weight
      LS_SURWT = LR_COMM_NEXT->GET_SURWT( ).

***   Combine Forward Property
      LR_BL_CRFPROP_NEXT = LR_COMM_NEXT->GET_CRFPX( ).
      if LR_BL_CRFPROP is not bound.
        move LR_BL_CRFPROP_NEXT to LR_BL_CRFPROP.
      else.
        LR_BL_CRFPROP->MERGE( IR_BL_CRFPROP = LR_BL_CRFPROP_NEXT ).
      endif.
    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Forward Property XML
    if LR_BL_CRFPROP is bound.
      ME->SET_CRFPX( IF_CRFPX = LR_BL_CRFPROP->GET_CRFPX( ) ).
    else.
      ME->SET_CRFPX( IF_CRFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.
    data: LR_DATA_SUPER   type ref to DATA,
          LR_PR_SCORE_MGR type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR.
    field-symbols: <S_FDI_SUPER> type ANY,
                   <S_FDI_CFG>   type ZVCXI_P1SS_S_FDI_CFG.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FDI_CFG.
    assign RR_DATA->* to <S_FDI_CFG>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( importing ET_FDMEX = ET_FDMEX ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_CFG> = corresponding #( <S_FDI_SUPER> ).
    endif.

***--------------------------------------------------------------------------------------
*** Get FEFCO
    <S_FDI_CFG>-FEFCO = ME->GET_FEFCO( ).

*** Get Part of Box
    <S_FDI_CFG>-BOXPA = ME->GET_BOXPA( ).

*** Get Product Dimension
    <S_FDI_CFG>-PRODIM_DESCR = ME->GET_PRODIM_DESCR( ).
    <S_FDI_CFG>-S_PROWI      = ME->GET_PROWI( ).
    <S_FDI_CFG>-S_PROLE      = ME->GET_PROLE( ).
    <S_FDI_CFG>-S_PROHE      = ME->GET_PROHE( ).
    <S_FDI_CFG>-S_PROH2      = ME->GET_PROH2( ).

*** Get Product Sheet Dimension
    <S_FDI_CFG>-S_SHTPW = ME->GET_SHTPW( ).
    <S_FDI_CFG>-S_SHTPL = ME->GET_SHTPL( ).

*** Get Overlap/Tuck in/Dust Flap
    <S_FDI_CFG>-S_OVLAP = ME->GET_OVLAP( ).
    <S_FDI_CFG>-S_FTUCK = ME->GET_FTUCK( ).
    <S_FDI_CFG>-S_FDUST = ME->GET_FDUST( ).

*** Fanfold
    <S_FDI_CFG>-FANDM   = ME->GET_FANDM( ).
    <S_FDI_CFG>-S_FANHE = ME->GET_FANHE( ).
    <S_FDI_CFG>-S_FANLE = ME->GET_FANLE( ).
    <S_FDI_CFG>-S_FANSH = ME->GET_FANSH( ).

*** Roll Length
    <S_FDI_CFG>-S_ROLEN = ME->GET_ROLEN( ).

*** Get Flute Orientation
    <S_FDI_CFG>-FLUTO = ME->GET_FLUTO( ).

*** Get Cut Out Area
    <S_FDI_CFG>-S_COUAR = ME->GET_COUAR( ).

*** Joint Information
    <S_FDI_CFG>-JOIPO   = ME->GET_JOIPO( ).
    <S_FDI_CFG>-S_JOIWI = ME->GET_JOIWI( ).

*** Scores & Tapes from Score Manager Provider
    LR_PR_SCORE_MGR = ME->GET_PRVDR_SCORE_MGR( ).
    if LR_PR_SCORE_MGR is bound.
      LT_SCORE_COM = LR_PR_SCORE_MGR->GET_SCORE_COM( ).
      LT_TAPE_COM  = LR_PR_SCORE_MGR->GET_TAPE_COM( ).

***   Score String Length
      ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                       importing EF_DESCR = <S_FDI_CFG>-SSTRL_DESCR ).
      <S_FDI_CFG>-SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_COM( IT_SCORE_COM = LT_SCORE_COM
                                                                 IF_DIMEN     = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).

***   Score String Cross
      ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                       importing EF_DESCR = <S_FDI_CFG>-SSTRC_DESCR ).
      <S_FDI_CFG>-SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_COM( IT_SCORE_COM = LT_SCORE_COM
                                                                 IT_TAPE_COM  = LT_TAPE_COM
                                                                 IF_DIMEN     = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

*** Board ID Suggestion
    <S_FDI_CFG>-SUBOA = ME->GET_SUBOA( importing EF_DESCR = <S_FDI_CFG>-SUBOA_DESCR ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CFG_OLD type ZVCXI_P1SS_S_FDI_CFG,
          LS_FDI_CFG_NEW type ZVCXI_P1SS_S_FDI_CFG.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CFG_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CFG_NEW = corresponding #( <S_DATA> ).
    endif.

*** Set SUPER Data
    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = IR_DATA
                                       IR_DATA_OLD = LR_DATA_OLD
                                       IT_FDMEX    = IT_FDMEX ).


***--------------------------------------------------------------------------------------
*** Set FEFCO
    if LS_FDI_CFG_OLD-FEFCO ne LS_FDI_CFG_NEW-FEFCO.
      ME->SET_FEFCO( IF_FEFCO = LS_FDI_CFG_NEW-FEFCO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Part of Box
    if LS_FDI_CFG_OLD-BOXPA ne LS_FDI_CFG_NEW-BOXPA.
      ME->SET_BOXPA( IF_BOXPA = LS_FDI_CFG_NEW-BOXPA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Product Length
    if LS_FDI_CFG_OLD-S_PROLE ne LS_FDI_CFG_NEW-S_PROLE.
      ME->SET_PROLE( IS_PROLE = LS_FDI_CFG_NEW-S_PROLE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Width
    if LS_FDI_CFG_OLD-S_PROWI ne LS_FDI_CFG_NEW-S_PROWI.
      ME->SET_PROWI( IS_PROWI = LS_FDI_CFG_NEW-S_PROWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Height
    if LS_FDI_CFG_OLD-S_PROHE ne LS_FDI_CFG_NEW-S_PROHE.
      ME->SET_PROHE( IS_PROHE = LS_FDI_CFG_NEW-S_PROHE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Height2
    if LS_FDI_CFG_OLD-S_PROH2 ne LS_FDI_CFG_NEW-S_PROH2.
      ME->SET_PROH2( IS_PROH2 = LS_FDI_CFG_NEW-S_PROH2
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Product Sheet Length
    if LS_FDI_CFG_OLD-S_SHTPL ne LS_FDI_CFG_NEW-S_SHTPL.
      ME->SET_SHTPL( IS_SHTPL = LS_FDI_CFG_NEW-S_SHTPL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Sheet Width
    if LS_FDI_CFG_OLD-S_SHTPW ne LS_FDI_CFG_NEW-S_SHTPW.
      ME->SET_SHTPW( IS_SHTPW = LS_FDI_CFG_NEW-S_SHTPW
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Overlap
    if LS_FDI_CFG_OLD-S_OVLAP ne LS_FDI_CFG_NEW-S_OVLAP.
      ME->SET_OVLAP( IS_OVLAP = LS_FDI_CFG_NEW-S_OVLAP
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Tuck in Flap
    if LS_FDI_CFG_OLD-S_FTUCK ne LS_FDI_CFG_NEW-S_FTUCK.
      ME->SET_FTUCK( IS_FTUCK = LS_FDI_CFG_NEW-S_FTUCK
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Dust Flap
    if LS_FDI_CFG_OLD-S_FDUST ne LS_FDI_CFG_NEW-S_FDUST.
      ME->SET_FDUST( IS_FDUST = LS_FDI_CFG_NEW-S_FDUST
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Fanfold Dimension
    if LS_FDI_CFG_OLD-FANDM ne LS_FDI_CFG_NEW-FANDM and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'FANDM' ] ).
      ME->SET_FANDM( IF_FANDM = LS_FDI_CFG_NEW-FANDM
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Fanfold Height
    if LS_FDI_CFG_OLD-S_FANHE ne LS_FDI_CFG_NEW-S_FANHE and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'FANHE' ] ).
      ME->SET_FANHE( IS_FANHE = LS_FDI_CFG_NEW-S_FANHE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Fanfold Length
    if LS_FDI_CFG_OLD-S_FANLE ne LS_FDI_CFG_NEW-S_FANLE and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'FANLE' ] ).
      ME->SET_FANLE( IS_FANLE = LS_FDI_CFG_NEW-S_FANLE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Fanfold Sheets
    if LS_FDI_CFG_OLD-S_FANSH ne LS_FDI_CFG_NEW-S_FANSH and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'FANSH' ] ).
      ME->SET_FANSH( IS_FANSH = LS_FDI_CFG_NEW-S_FANSH
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Length
    if LS_FDI_CFG_OLD-S_ROLEN ne LS_FDI_CFG_NEW-S_ROLEN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'ROLEN' ] ).
      ME->SET_ROLEN( IS_ROLEN = LS_FDI_CFG_NEW-S_ROLEN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Flute Orientation
    if LS_FDI_CFG_OLD-FLUTO ne LS_FDI_CFG_NEW-FLUTO.
      ME->SET_FLUTO( IF_FLUTO = LS_FDI_CFG_NEW-FLUTO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Cut Out Area
    if LS_FDI_CFG_OLD-S_COUAR ne LS_FDI_CFG_NEW-S_COUAR.
      ME->SET_COUAR( IS_COUAR = LS_FDI_CFG_NEW-S_COUAR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Joint Position
    if LS_FDI_CFG_OLD-JOIPO ne LS_FDI_CFG_NEW-JOIPO.
      ME->SET_JOIPO( IF_JOIPO = LS_FDI_CFG_NEW-JOIPO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Joint Width
    if LS_FDI_CFG_OLD-S_JOIWI ne LS_FDI_CFG_NEW-S_JOIWI.
      ME->SET_JOIWI( IS_JOIWI = LS_FDI_CFG_NEW-S_JOIWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Board ID Suggestion
    if LS_FDI_CFG_OLD-SUBOA ne LS_FDI_CFG_NEW-SUBOA and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SUBOA' ] ).
      ME->SET_SUBOA( IF_SUBOA = LS_FDI_CFG_NEW-SUBOA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_HNDDIM.

    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.


*** Get Corrugated Forward Property XML (Outbound)
    LR_BL_CRFPROP = ME->GET_CRFPX( ).
    check LR_BL_CRFPROP is bound.

*** Get Handling Dimension
    RS_HNDDIM = LR_BL_CRFPROP->S_HNDDIM.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.
    EF_SETBY = LS_PARAM-SETBY.


***--------------------------------------------------------------------------------------
*** Fallback in case of no Separation
    if EF_SETBY eq SPACE.
      RT_PRINT_COM = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->T_PRINT.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->GET_FOVRR_PRINT( ) when ABAP_TRUE then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_BOARD type ZVCXI_PCS_BOARD.
    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


***------------------------------------------------------------------------------------------------
*** Get Attribute Data
    ME->GET_BOARD( importing EF_BOARD = LF_BOARD ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_BOARD              "Board ID
                                changing  CT_ATTR  = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->GET_FEFCO( )      "FEFCO
                                changing  CT_ATTR  = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL = ME->GET_PRODIM_DESCR( )
                                          IF_VALUE = |{ ME->GET_PROLE( )-PROLE style = simple }x| &&
                                                     |{ ME->GET_PROWI( )-PROWI style = simple }x| &&
                                                     |{ ME->GET_PROHE( )-PROHE style = simple } |
                                          IF_UOM   = ME->GET_PROLE( )-PROLE_UOM
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://form'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    data(LR_PR_SHIPMGR) = cast ZCL_VCXI_PXSU_PR_SHIPMGR( ME->GET_PRVDR_SHIPMGR( ) ).
    if LR_PR_SHIPMGR is bound.
      LR_PR_SHIPMGR->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                              changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endif.

  endmethod.
