
class ZCL_VCXI_XCI_BOB_IDOC definition
  public
  create public .

public section.

  types:
    begin of YS_IDOCTYP,
             S_HEADER   type EDI_IAPI10,
             T_SEGMENTS type table of EDI_IAPI11 with default key,
             T_FIELDS   type table of EDI_IAPI12 with default key,
             T_FVALUES  type table of EDI_IAPI14 with default key,
             T_MESSAGES type table of EDI_IAPI17 with default key,
           end   of YS_IDOCTYP .

  data S_EDIDC type EDIDC .
  data T_EDIDS type EDIDS_TT .
  data T_EDIDD type EDIDD_TT .
  data S_IDOCTYP type YS_IDOCTYP read-only .

  methods ADD_DATA
    importing
      !IF_SEGNAM type EDI_SEGNAM
      !IF_SDATA type EDI_SDATA
    raising
      /VCXI/CX_CKX .
  methods GET_SEGMENT_INFO
    importing
      !IF_SEGNAM type EDI_SEGNAM
    returning
      value(RS_SEGMENT) type EDI_IAPI11
    raising
      /VCXI/CX_CKX .
  methods GET_SEGMENT_AS_STRING
    importing
      !IF_SEGNAM type EDI_SEGNAM
    returning
      value(RF_STRING) type STRING
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_DOCNUM type EDI_DOCNUM
    returning
      value(RR_BOB_IDOC) type ref to ZCL_VCXI_XCI_BOB_IDOC
    raising
      /VCXI/CX_CKX .
  methods INIT_NEW
    importing
      !IF_IDOCTP type EDI_IDOCTP
      !IF_MESTYP type EDI_MESTYP
      !IF_RCVPOR type EDI_RCVPOR
      !IF_RCVPRT type EDI_RCVPRT
      !IF_RCVPRN type EDI_RCVPRN
    returning
      value(RR_BOB_IDOC) type ref to ZCL_VCXI_XCI_BOB_IDOC
    raising
      /VCXI/CX_CKX .
  methods SEND_IDOC
    importing
      !IF_COMMIT type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_STRING_TO_SEGMENT
    importing
      !IF_SEGNAM type EDI_SEGNAM
      !IF_STRING type STRING
    raising
      /VCXI/CX_CKX .
protected section.

  methods READ_IDOCTYPE
    importing
      !IF_IDOCTP type EDI_IDOCTP
    raising
      /VCXI/CX_CKX .
  methods INIT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_IDOC definition
class ZCL_VCXI_XCI_BOB_IDOC implementation.
  method ADD_DATA.

    append value #( SEGNAM = IF_SEGNAM
                    MANDT  = SY-MANDT
                    HLEVEL = ME->GET_SEGMENT_INFO( IF_SEGNAM = IF_SEGNAM )-HLEVEL
                    SDATA  = IF_SDATA ) to ME->T_EDIDD.

  endmethod.
  method GET_SEGMENT_AS_STRING.

*** Get Length of Segment
    data(LF_SEGLEN) = ME->GET_SEGMENT_INFO( IF_SEGNAM = IF_SEGNAM )-SEGLEN.

*** Merge Segments Entries to one String
    loop at ME->T_EDIDD assigning field-symbol(<S_EDIDD>)
                        where SEGNAM eq IF_SEGNAM.
      concatenate RF_STRING <S_EDIDD>-SDATA(LF_SEGLEN) into RF_STRING respecting blanks.
    endloop.

    if SY-SUBRC ne 0.
***   EDI: Data record '&' does not exist
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'E0'
                                            IF_MSGNO = '065'
                                            IF_MSGV1 = IF_SEGNAM ).
    endif.

  endmethod.
  method GET_SEGMENT_INFO.

    RS_SEGMENT = value #( ME->S_IDOCTYP-T_SEGMENTS[ SEGMENTTYP = IF_SEGNAM ] optional ).


  endmethod.
  method INIT.

    free: ME->S_EDIDC,
          ME->T_EDIDS,
          ME->T_EDIDD.

  endmethod.
  method INIT_FROM_DB.

*** Initialize
    ME->INIT( ).

*** Read IDoc completely
    call function 'IDOC_READ_COMPLETELY'
      exporting
        DOCUMENT_NUMBER         = IF_DOCNUM
      importing
        IDOC_CONTROL            = ME->S_EDIDC
      tables
        INT_EDIDS               = ME->T_EDIDS
        INT_EDIDD               = ME->T_EDIDD
      exceptions
        DOCUMENT_NOT_EXIST      = 1
        DOCUMENT_NUMBER_INVALID = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Read IDoc Type
    ME->READ_IDOCTYPE( IF_IDOCTP = ME->S_EDIDC-IDOCTP ).

*** Return Instance for chaining
    RR_BOB_IDOC = ME.

  endmethod.
  method INIT_NEW.

*** Initialize
    ME->INIT( ).

***------------------------------------------------------------------------------------------------
*** Read IDoc Type
    ME->READ_IDOCTYPE( IF_IDOCTP = IF_IDOCTP ).

*** Get Output Type and Assignment to IDoc Type
    select single *
           from EDIMSG
           into @data(LS_EDIMSG)
          where MESTYP eq @IF_MESTYP
           and  IDOCTYP eq @IF_IDOCTP.

    if SY-SUBRC ne 0.
***   Message type & is unknown
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'E0'
                                            IF_MSGNO = '709'
                                            IF_MSGV1 = IF_MESTYP ).
    endif.

***------------------------------------------------------------------------------------------------
*** Fill Control Record
    ME->S_EDIDC = value #( MANDT  = SY-MANDT
                           DOCNUM = ''
                           DOCREL = LS_EDIMSG-RELEASED
                           STATUS = ''
                           DIRECT = '1'
                           RCVPOR = IF_RCVPOR
                           RCVPRT = IF_RCVPRT
                           RCVPRN = IF_RCVPRN
                           CREDAT = SY-DATUM
                           CRETIM = SY-UZEIT
                           MESTYP = IF_MESTYP
                           IDOCTP = IF_IDOCTP ).

*** Return Instance for chaining
    RR_BOB_IDOC = ME.

  endmethod.
  method READ_IDOCTYPE.

    call function 'IDOCTYPE_READ_COMPLETE'
      exporting
        PI_IDOCTYP         = IF_IDOCTP
*       PI_CIMTYP          = IF_CIMTYP
        PI_READ_UNREL      = ABAP_TRUE
      importing
        PE_HEADER          = ME->S_IDOCTYP-S_HEADER
      tables
        PT_SEGMENTS        = ME->S_IDOCTYP-T_SEGMENTS
*       PT_FIELDS          =
*       PT_FVALUES         =
*       PT_MESSAGES        =
      exceptions
        OBJECT_UNKNOWN     = 1
        SEGMENT_UNKNOWN    = 2
        RELATION_NOT_FOUND = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method SEND_IDOC.

    data: LT_EDIDC type table of EDIDC.
    field-symbols: <S_EDIDC> type EDIDC.

*** Single IDoc
    LT_EDIDC = value #( ( ME->S_EDIDC ) ).

*** Distribute IDoc
    call function 'MASTER_IDOC_DISTRIBUTE'
      exporting
        MASTER_IDOC_CONTROL            = ME->S_EDIDC
      tables
        COMMUNICATION_IDOC_CONTROL     = LT_EDIDC
        MASTER_IDOC_DATA               = ME->T_EDIDD
      exceptions
        ERROR_IN_IDOC_CONTROL          = 1
        ERROR_WRITING_IDOC_STATUS      = 2
        ERROR_IN_IDOC_DATA             = 3
        SENDING_LOGICAL_SYSTEM_UNKNOWN = 4
        others                         = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Check was Created
    loop at LT_EDIDC assigning <S_EDIDC> where DOCNUM ne '0000000000000000'.

***   Commit & Dequeue
      if IF_COMMIT eq ABAP_TRUE.
        call function 'DB_COMMIT'.
      endif.

      call function 'EDI_DOCUMENT_DEQUEUE_LATER'
        exporting
          DOCNUM                 = <S_EDIDC>-DOCNUM
        exceptions
          IDOC_IS_NOT_TO_DEQUEUE = 1 ##FM_SUBRC_OK
          others                 = 2 ##FM_SUBRC_OK.

      if IF_COMMIT eq ABAP_TRUE.
        commit work and wait.
      endif.
    endloop.

  endmethod.
  method SET_STRING_TO_SEGMENT.

    data: LF_LENGTH     type I,
          LF_OFFSET     type I,
          LF_OFFSET_ADD type I,
          LF_STRING     type STRING,
          LF_LINE       type TEXT1000,
*{   REPLACE        HEDK927942                                        1
*\          LF_LAST       type ABAP_BOOLEAN.
           LF_LAST       type CHAR1.
*}   REPLACE
    data: LT_RESULT type MATCH_RESULT_TAB.


*** Get Length of Segment
    data(LF_SEGLEN) = ME->GET_SEGMENT_INFO( IF_SEGNAM = IF_SEGNAM )-SEGLEN.

*** Buffer String to reduce line by line
    LF_STRING = IF_STRING.

*** Get String Length
    LF_LENGTH = STRLEN( LF_STRING ).
    check LF_LENGTH ne 0.

    do.
***   Get Line from String
      if LF_OFFSET + LF_SEGLEN le LF_LENGTH.
        LF_LINE = LF_STRING+LF_OFFSET(LF_SEGLEN).
      else.
        LF_LINE = LF_STRING+LF_OFFSET.
        LF_LAST = ABAP_TRUE.
      endif.

***   Last character is a space field, this should not happen --> Take the actual tag name and write it to next line.
      if STRLEN( LF_LINE ) lt LF_SEGLEN and
         LF_LAST eq ABAP_FALSE.

        clear: LT_RESULT.
        find all occurrences of '<' in LF_LINE results LT_RESULT.
        sort LT_RESULT descending by OFFSET.
        if value #( LT_RESULT[ 1 ]-OFFSET optional ) gt 0.
***       Update Line and Offset
          LF_OFFSET_ADD = LT_RESULT[ 1 ]-OFFSET.
          LF_LINE       = LF_LINE(LF_OFFSET_ADD).
        endif.
      else.
        LF_OFFSET_ADD = LF_SEGLEN.
      endif.

***   Add Line as Segment
      ME->ADD_DATA( IF_SEGNAM = IF_SEGNAM
                    IF_SDATA  = LF_LINE ).

***   Set Offset or Exit
      if LF_LAST eq ABAP_FALSE.
        LF_OFFSET = LF_OFFSET + LF_OFFSET_ADD.
      else.
        exit.
      endif.
    enddo.

  endmethod.
