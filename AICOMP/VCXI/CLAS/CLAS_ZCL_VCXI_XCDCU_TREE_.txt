
class ZCL_VCXI_XCDCU_TREE definition
  public
  final
  create public .

public section.
  type-pools ICON .

  data R_UIFW type ref to ZCL_VCXI_XCDCU_UIFW .
  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to ZCL_VCXI_XCDCU_UIFW
      !IS_DYNP type /VCXI/CKX_S_DYNP_KEY
      !IF_EXTENSION type I optional
      !IF_RATIO type I optional
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REFRESH_REQUEST
    importing
      !IF_INITIAL_REFRESH type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods REQUEST_REFRESH
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT optional .
protected section.

  constants C_FCODE_DELETE type UI_FUNC value '*DELETE*'. "#EC NOTEXT
  data R_CONTAINER_DOCKING type ref to CL_GUI_DOCKING_CONTAINER .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data T_ITEM type TREEMCITAC .
  data T_NODE type TREEMCNOTA .
  data T_REFRESH_REQ type /VCXI/CKX_TT_OBJECT .

  methods ASK_BEFORE_DELETE
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods ADD_COLUMNS
    raising
      /VCXI/CX_CKX .
  methods GET_COLUMN_DEFINITION
    returning
      value(RT_COLUMN) type /VCXI/VSMCU_TT_COLUMN
    raising
      /VCXI/CX_CKX .
  methods GET_NEXT_NODE_KEY
    returning
      value(RF_NODEKEY) type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods GET_OBJECT_OF_NODE
    importing
      !IF_NODE_KEY type TM_NODEKEY
    returning
      value(RR_OBJECT) type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_EXPAND_NO_CHILDREN
    for event EXPAND_NO_CHILDREN of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_ITEM_CONTEXT_REQ
    for event ITEM_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !MENU .
  methods HANDLE_ITEM_CONTEXT_SEL
    for event ITEM_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !FCODE .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_CONTEXT_REQ
    for event NODE_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !MENU .
  methods HANDLE_NODE_CONTEXT_SEL
    for event NODE_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods INIT_CONTAINER
    importing
      !IS_DYNP type /VCXI/CKX_S_DYNP_KEY
      !IF_EXTENSION type I
      !IF_RATIO type I
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods IS_NODE_HIDDEN
    importing
      !IF_NODE_KEY type TM_NODEKEY
    returning
      value(RF_HIDDEN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REFRESH_ELEMENTS
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
  methods RESET_ELEMENTS
    raising
      /VCXI/CX_CKX .
private section.

  data F_NODEKEY_COUNTER type I .

  methods DELETE_NODES_FOR_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_NODES_FOR_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_NODES_OF_FOLDER
    importing
      !IF_RELATKEY type TM_NODEKEY optional
      !IF_FOLDER_GUID type /VCXI/CKX_GUID
      !IT_OBJECT type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_ROOT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SUBNODES_FOR_OBJECT
    importing
      !IF_RELATKEY type TM_NODEKEY
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCDCU_TREE definition
class ZCL_VCXI_XCDCU_TREE implementation.
method ADD_COLUMNS .

  data:   LS_COLUMN type ZVCXI_XCDCU_S_COLUMN.
  data:   LT_COLUMN type ZVCXI_XCDCU_TT_COLUMN.

*** Get the Column Definitions
  LT_COLUMN = ME->GET_COLUMN_DEFINITION( ).


*** Add the rest of the Culomns
  loop at LT_COLUMN into LS_COLUMN where NAME ne 'ID'.
    ME->R_TREE->ADD_COLUMN( exporting
                              NAME                = LS_COLUMN-NAME
                              HIDDEN              = LS_COLUMN-HIDDEN
                              DISABLED            = LS_COLUMN-DISABLED
                              ALIGNMENT           = LS_COLUMN-ALIGNMENT
                              WIDTH               = LS_COLUMN-WIDTH
                              HEADER_IMAGE        = LS_COLUMN-HEADER_IMAGE
                              HEADER_TEXT         = LS_COLUMN-HEADER_TEXT
                              HEADER_TOOLTIP      = LS_COLUMN-HEADER_TOOLTIP
                            exceptions
                              COLUMN_EXISTS       = 1
                              ILLEGAL_COLUMN_NAME = 2
                              TOO_MANY_COLUMNS    = 3
                              ILLEGAL_ALIGNMENT   = 4
                              others              = 5 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endloop.

endmethod.
method ASK_BEFORE_DELETE.

  data:          LF_ANSWER      type          C.
  data:          LT_PARAMETER   type table of SPAR.
  field-symbols: <S_PARAMETER>  type          SPAR.

  append initial line to LT_PARAMETER assigning <S_PARAMETER>.
  move 'ID'                 to <S_PARAMETER>-PARAM.
  move IR_OBJECT->GET_ID( ) to <S_PARAMETER>-VALUE.

***----------------------------------------------------------------------------
*** Delete &1?
  call function 'POPUP_TO_CONFIRM'
    exporting
      TEXT_QUESTION  = 'Delete &ID&?'(Q01)
    importing
      ANSWER         = LF_ANSWER
    tables
      PARAMETER      = LT_PARAMETER
    exceptions
      TEXT_NOT_FOUND = 1
      others         = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  case LF_ANSWER.
    when '1'.
***   Go on changing Explosion Mode
      move ABAP_FALSE to RF_CANCELED.
    when '2'.
***   Cancel change
      move ABAP_TRUE to RF_CANCELED.
    when 'A'.
***   Cancel change
      move ABAP_TRUE to RF_CANCELED.
  endcase.

endmethod.
method CONSTRUCTOR .

*** Set the Importing Values
  move IR_UIFW   to ME->R_UIFW.

*** Initialize Container, Toolbar and Tree
  ME->INIT_CONTAINER( IS_DYNP      = IS_DYNP
                      IF_EXTENSION = IF_EXTENSION
                      IF_RATIO     = IF_RATIO ).
  ME->INIT_TREE( ).

*** Request a Refresh
  ME->REQUEST_REFRESH( ).

endmethod.
method DELETE_NODES_FOR_OBJECT.

  data:  LF_NODEKEY  type        TM_NODEKEY.
  data:  LS_NODE     type        TREEMCNODT.
  data:  LT_NODEKEY  type        TREEMNOTAB.

*** Get Object Nodes
  loop at ME->T_NODE into LS_NODE where USEROBJECT eq IR_OBJECT.
    append LS_NODE-NODE_KEY to LT_NODEKEY.
  endloop.

*** Find Subnodes
  loop at LT_NODEKEY into LF_NODEKEY.
    loop at ME->T_NODE into LS_NODE where RELATKEY eq LF_NODEKEY.
      collect LS_NODE-NODE_KEY into LT_NODEKEY.
    endloop.
  endloop.

*** Delete Nodes
  ME->R_TREE->DELETE_NODES( exporting  NODE_KEY_TABLE          = LT_NODEKEY
                            exceptions ERROR_IN_NODE_KEY_TABLE = 1 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at LT_NODEKEY into LF_NODEKEY.
    delete ME->T_NODE where NODE_KEY eq LF_NODEKEY.
    delete ME->T_ITEM where NODE_KEY eq LF_NODEKEY.
  endloop.

endmethod.
method DO_FREE .

  clear ME->R_TREE.

  if ME->R_CONTAINER_DOCKING is bound.
    ME->R_CONTAINER_DOCKING->FREE( ).
    clear ME->R_CONTAINER_DOCKING.
  endif.

endmethod.
method GET_COLUMN_DEFINITION.

  field-symbols:  <S_COLUMN> type /VCXI/VSMCU_S_COLUMN.

  append initial line to RT_COLUMN assigning <S_COLUMN>.
  move 'ID'               to <S_COLUMN>-NAME.
  move 'ID'(001)          to <S_COLUMN>-HEADER_TEXT.
  move '60'               to <S_COLUMN>-WIDTH.

  append initial line to RT_COLUMN assigning <S_COLUMN>.
  move 'DESCR'            to <S_COLUMN>-NAME.
  move 'Description'(002) to <S_COLUMN>-HEADER_TEXT.
  move '60'               to <S_COLUMN>-WIDTH.

endmethod.
method GET_NEXT_NODE_KEY.

  add 1 to ME->F_NODEKEY_COUNTER.
  move ME->F_NODEKEY_COUNTER to RF_NODEKEY.

endmethod.
method GET_OBJECT_OF_NODE .

  data:      LR_USEROBJECT type ref to OBJECT.

  ME->R_TREE->NODE_GET_USER_OBJECT( exporting
                                      NODE_KEY       = IF_NODE_KEY
                                    importing
                                      USER_OBJECT    = LR_USEROBJECT
                                    exceptions
                                      NODE_NOT_FOUND = 1
                                      others         = 2 ).
  if SY-SUBRC      ne     0     or
     LR_USEROBJECT is not bound.
    exit.
  endif.

  try.
      move LR_USEROBJECT ?to RR_OBJECT.
    catch CX_SY_MOVE_CAST_ERROR.
      raise exception type /VCXI/CX_CKX.
  endtry.

endmethod.
method HANDLE_EXPAND_NO_CHILDREN.

  data:  LT_TO_EXPAND_NODES  type        TREEMNOTAB.
  data:  LR_OBJECT           type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX           type ref to /VCXI/CX_CKX.

  try.
***--------------------------------------------------------------------------------------
***   Get Object of Node
      LR_OBJECT ?= ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).
      check LR_OBJECT is bound.

***--------------------------------------------------------------------------------------
***   Get Subnodes for Object
      ME->UPDATE_SUBNODES_FOR_OBJECT( exporting
                                        IF_RELATKEY = NODE_KEY
                                        IR_OBJECT   = LR_OBJECT ).

***--------------------------------------------------------------------------------------
***   Get Nodes to Expand
      append NODE_KEY to LT_TO_EXPAND_NODES.

***   Expanded Nodes
      ME->R_TREE->EXPAND_NODES( exporting
                                  NODE_KEY_TABLE          = LT_TO_EXPAND_NODES
                                exceptions
                                  ERROR_IN_NODE_KEY_TABLE = 1
                                  others                  = 2 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_CONTEXT_REQ .

  ME->HANDLE_NODE_CONTEXT_REQ( NODE_KEY = NODE_KEY
                               MENU     = MENU ).

endmethod.
method HANDLE_ITEM_CONTEXT_SEL .

  ME->HANDLE_NODE_CONTEXT_SEL( NODE_KEY = NODE_KEY
                               FCODE    = FCODE ).

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK .

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_NODE_CONTEXT_REQ.

  data:  LR_OBJECT_ACTION      type ref to /VCXI/IF_CKX_OBJECT_ACTION,
         LR_MENU               type ref to CL_CTMENU,
         LR_CX_CKX             type ref to /VCXI/CX_CKX.

  try.
      LR_OBJECT_ACTION ?= ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).
      check LR_OBJECT_ACTION is bound.

      LR_MENU = LR_OBJECT_ACTION->GET_ACTIONS( ).

      if LR_MENU is bound.
***     Add Actions to Menu
        MENU->ADD_MENU( MENU = LR_MENU ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_NODE_CONTEXT_SEL.

  data:  LR_OBJECT             type ref to /VCXI/IF_CKX_OBJECT,
         LR_OBJECT_ACTION      type ref to /VCXI/IF_CKX_OBJECT_ACTION,
         LR_CX_CKX             type ref to /VCXI/CX_CKX.

  try.
      LR_OBJECT = ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).
      check LR_OBJECT is bound.

      move LR_OBJECT ?to LR_OBJECT_ACTION.
      check LR_OBJECT_ACTION is bound.

      try.
          if FCODE cp C_FCODE_DELETE.
            check ME->ASK_BEFORE_DELETE( IR_OBJECT = LR_OBJECT ) ne ABAP_TRUE.
          endif.

          LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = FCODE ).
          move ABAP_TRUE to ME->F_REFRESH_REQ.
        catch /VCXI/CX_CKX into LR_CX_CKX.
          ME->R_UIFW->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
      endtry.

      ME->HANDLE_REFRESH_REQUEST( ).

      ME->R_UIFW->REQUEST_DUI_REFRESH( ).
      ME->R_UIFW->HANDLE_DUI_REFRESH_REQ( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_UIFW->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_NODE_DOUBLE_CLICK .

  data:  LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX         type ref to /VCXI/CX_CKX.

  try.
      LR_OBJECT = ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).
      check LR_OBJECT is bound.

      ME->R_UIFW->OPEN_NEW_DUI( IR_OBJECT = LR_OBJECT ).
      ME->HANDLE_REFRESH_REQUEST( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_REFRESH_REQUEST .

  check ME->R_TREE is bound.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------
*** Full Tree Refresh (Hard)
  if ME->T_REFRESH_REQ is initial.
    ME->RESET_ELEMENTS( ).
    ME->R_TREE->SCROLL( SCROLL_COMMAND = CL_TREE_MODEL=>SCROLL_HOME ).

***--------------------------------------------------------------------
*** Tree Refresh based on Changed Objects (Soft)
  else.
    ME->REFRESH_ELEMENTS( ).
    free: ME->T_REFRESH_REQ.
  endif.

endmethod.
method INIT_CONTAINER .

  data:  LF_RATIO type I.

  if IF_EXTENSION is initial and
     IF_RATIO     is initial.
    move '35' to LF_RATIO.
  else.
    move IF_RATIO to LF_RATIO.
  endif.

*** Create the Docking Container Instance
  create object ME->R_CONTAINER_DOCKING
                exporting
                  REPID                       = IS_DYNP-REPID
                  DYNNR                       = IS_DYNP-DYNNR
                  SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
                  EXTENSION                   = IF_EXTENSION
                  RATIO                       = LF_RATIO
                exceptions
                  CNTL_ERROR                  = 1
                  CNTL_SYSTEM_ERROR           = 2
                  CREATE_ERROR                = 3
                  LIFETIME_ERROR              = 4
                  LIFETIME_DYNPRO_DYNPRO_LINK = 5
                  others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method INIT_TREE.

  data:   LS_COLUMN type  ZVCXI_XCDCU_S_COLUMN,
          LS_HHDR   type  TREEMHHDR.
  data:   LT_COLUMN type  ZVCXI_XCDCU_TT_COLUMN.

*** Get the Column Definitions
  LT_COLUMN = ME->GET_COLUMN_DEFINITION( ).

*** Get the Hierarchy Column
  read table LT_COLUMN into LS_COLUMN with key NAME = 'ID'.
  move LS_COLUMN-HEADER_TEXT to LS_HHDR-HEADING.
  move LS_COLUMN-WIDTH       to LS_HHDR-WIDTH.

*** Create the Tree Instance
  create object ME->R_TREE
                exporting
                  NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
                  ITEM_SELECTION              = 'X'
                  HIERARCHY_COLUMN_NAME       = LS_COLUMN-NAME
                  HIERARCHY_HEADER            = LS_HHDR
                exceptions
                  ILLEGAL_NODE_SELECTION_MODE = 1
                  ILLEGAL_COLUMN_NAME         = 2
                  others                      = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create the Tree Control
  ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                     PARENT                       = ME->R_CONTAINER_DOCKING
                                   exceptions
                                     LIFETIME_ERROR               = 1
                                     CNTL_SYSTEM_ERROR            = 2
                                     CREATE_ERROR                 = 3
                                     FAILED                       = 4
                                     TREE_CONTROL_ALREADY_CREATED = 5
                                     others                       = 6 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Add Columns
  ME->ADD_COLUMNS( ).

*** Register the Tree Events
  ME->REGISTER_TREE_EVENTS( ).

endmethod.
method IS_NODE_HIDDEN .

  data:  LS_NODE type TREEMCNODT.

  read table ME->T_NODE into LS_NODE with key NODE_KEY = IF_NODE_KEY.
  if SY-SUBRC eq 0.
    move LS_NODE-HIDDEN to RF_HIDDEN.
  endif.

endmethod.
method REFRESH_ELEMENTS.

  data:  LF_UPDATE_ROOT type        ABAP_BOOL.
  data:  LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.


  check ME->T_REFRESH_REQ is not initial.

  loop at ME->T_REFRESH_REQ into LR_OBJECT.
    read table ME->T_NODE with key USEROBJECT = LR_OBJECT
                          transporting no fields.
    if SY-SUBRC eq 0.
***--------------------------------------------------------------------------------------
***   Object is deleted
      if ME->R_UIFW->R_DVCCOND->IS_OBJECT_DELETED( IR_OBJECT = LR_OBJECT ) eq ABAP_TRUE.
        ME->DELETE_NODES_FOR_OBJECT( IR_OBJECT = LR_OBJECT ).

***--------------------------------------------------------------------------------------
***   Object was Updated
      else.
        ME->UPDATE_NODES_FOR_OBJECT( IR_OBJECT = LR_OBJECT ).
      endif.
***--------------------------------------------------------------------------------------
*** Object is new
    else.
      move ABAP_TRUE to LF_UPDATE_ROOT.
    endif.
  endloop.

*** Update Root
  if LF_UPDATE_ROOT eq ABAP_TRUE.
    ME->UPDATE_ROOT( ).
  endif.

endmethod.
method REGISTER_TREE_EVENTS .

  data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
  field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_NODE_DOUBLE_CLICK   for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_REQ    for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_SEL    for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK   for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_REQ    for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_SEL    for ME->R_TREE.

  set handler ME->HANDLE_EXPAND_NO_CHILDREN  for ME->R_TREE.

endmethod.
method REQUEST_REFRESH .

  if IR_OBJECT is bound.
    collect IR_OBJECT into ME->T_REFRESH_REQ.
  endif.

  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method RESET_ELEMENTS.

***----------------------------------------------------------------------------
*** Delete all old Nodes
  ME->R_TREE->DELETE_ALL_NODES( ).
  free: ME->T_NODE,
        ME->T_ITEM,
        ME->F_NODEKEY_COUNTER.

*** Update Root
  ME->UPDATE_ROOT( ).

endmethod.
method UPDATE_NODES_FOR_OBJECT.

  data:          LS_NODE     type        TREEMCNODT.
  field-symbols: <S_ITEM>    type        TREEMCITEN.

  check IR_OBJECT is bound.

  loop at ME->T_NODE into LS_NODE where USEROBJECT eq IR_OBJECT.
***----------------------------------------------------------------------------
*** Update Text
    loop at ME->T_ITEM assigning <S_ITEM> where NODE_KEY eq LS_NODE-NODE_KEY.
      case <S_ITEM>-ITEM_NAME.
        when 'ID'.
          move IR_OBJECT->GET_ID( )    to <S_ITEM>-TEXT.
        when 'DESCR'.
          move IR_OBJECT->GET_DESCR( ) to <S_ITEM>-TEXT.
      endcase.

***   Update Text
      ME->R_TREE->ITEM_SET_TEXT(
        exporting
          NODE_KEY       = <S_ITEM>-NODE_KEY
          ITEM_NAME      = <S_ITEM>-ITEM_NAME
          TEXT           = <S_ITEM>-TEXT
        exceptions
          NODE_NOT_FOUND = 1
          ITEM_NOT_FOUND = 2
          others         = 3 ).
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endloop.

***----------------------------------------------------------------------------
*** Update Subnodes
    read table ME->T_NODE with key RELATKEY = LS_NODE-NODE_KEY
                          transporting no fields.
    if SY-SUBRC eq 0.
      ME->UPDATE_SUBNODES_FOR_OBJECT( exporting
                                        IF_RELATKEY = LS_NODE-NODE_KEY
                                        IR_OBJECT   = IR_OBJECT ).
    endif.
  endloop.

endmethod.
method UPDATE_NODES_OF_FOLDER.

  data:          LF_NODEKEY_FOLDER   type        TM_NODEKEY,
                 LF_NODEKEY          type        TM_NODEKEY.
  data:          LS_NODE             type        TREEMCNODT.
  data:          LT_OBJECT           type        /VCXI/CKX_TT_OBJECT,
                 LT_OBJECT_VISIBLE   type        /VCXI/CKX_TT_OBJECT,
                 LT_NODE_ADDED       type        TREEMCNOTA,
                 LT_ITEM_ADDED       type        TREEMCITAC,
                 LT_NODEKEY          type        TREEMNOTAB,
                 LT_NODEKEY_EXPANDED type        TREEMNOTAB.
  data:          LR_FOLDER           type ref to ZCL_VCXI_XCDCU_TREE_FOLDER,
                 LR_OBJECT           type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_ITEM>            type        TREEMCITEN.

*** Request Visible Objects (do Filter)
  LT_OBJECT_VISIBLE = ME->R_UIFW->REQUEST_FILTER( IT_OBJECT = IT_OBJECT ).

***----------------------------------------------------------------------------
*** Get Tree Folder for DynamicVC Customizing
  LR_FOLDER ?= ZCL_VCXI_XCDCU_TREE_FOLDER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = IF_FOLDER_GUID ).
  move ME->R_UIFW to LR_FOLDER->R_UIFW.

*** Find or add Folder
  read table ME->T_NODE into LS_NODE with key RELATKEY   = IF_RELATKEY
                                              USEROBJECT = LR_FOLDER.
  if SY-SUBRC eq 0.
    move LS_NODE-NODE_KEY         to LF_NODEKEY_FOLDER.
  else.
*** Get new Node Key
    move ME->GET_NEXT_NODE_KEY( ) to LF_NODEKEY_FOLDER.

*** Node Information
    LS_NODE-RELATKEY   = IF_RELATKEY.
    LS_NODE-NODE_KEY   = LF_NODEKEY_FOLDER.
    LS_NODE-RELATSHIP  = CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD.
    LS_NODE-STYLE      = CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT.
    LS_NODE-ISFOLDER   = 'X'.
    LS_NODE-USEROBJECT = LR_FOLDER.
    append LS_NODE to LT_NODE_ADDED.

*** Items
    append initial line to LT_ITEM_ADDED assigning <S_ITEM>.
    move LS_NODE-NODE_KEY                                 to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LR_FOLDER->/VCXI/IF_CKX_OBJECT~GET_DESCR( )      to <S_ITEM>-TEXT.
  endif.

***----------------------------------------------------------------------------
*** Get currently Expanded Nodes
  ME->R_TREE->GET_EXPANDED_NODES(
    importing
      NODE_KEY_TABLE       = LT_NODEKEY_EXPANDED
    exceptions
      CONTROL_NOT_EXISTING = 1
      CONTROL_DEAD         = 2
      CNTL_SYSTEM_ERROR    = 3
      FAILED               = 4
      others               = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Find or Add Objects
  move IT_OBJECT to LT_OBJECT.
  /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                      changing  CT_OBJECT     = LT_OBJECT ).
  loop at LT_OBJECT into LR_OBJECT.
    read table ME->T_NODE into LS_NODE with key RELATKEY   = LF_NODEKEY_FOLDER
                                                USEROBJECT = LR_OBJECT.
    if SY-SUBRC ne 0.
***   Node Information
      LS_NODE-RELATKEY   = LF_NODEKEY_FOLDER.
      LS_NODE-NODE_KEY   = ME->GET_NEXT_NODE_KEY( ).
      LS_NODE-RELATSHIP  = CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD.
      LS_NODE-STYLE      = CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT.
      LS_NODE-N_IMAGE    = LR_FOLDER->GET_SUBNODE_ICON( ).
      LS_NODE-EXP_IMAGE  = LR_FOLDER->GET_SUBNODE_ICON( ).
      LS_NODE-ISFOLDER   = 'X'.
      LS_NODE-EXPANDER   = 'X'.
      LS_NODE-USEROBJECT = LR_OBJECT.

***   is object Hidden?
      read table LT_OBJECT_VISIBLE with key TABLE_LINE = LR_OBJECT
                                   transporting no fields.
      if SY-SUBRC eq 0.
        move ABAP_FALSE to LS_NODE-HIDDEN.
      else.
        move ABAP_TRUE to LS_NODE-HIDDEN.
      endif.
      append LS_NODE to LT_NODE_ADDED.

***   Items
      append initial line to LT_ITEM_ADDED assigning <S_ITEM>.
      move LS_NODE-NODE_KEY                                 to <S_ITEM>-NODE_KEY.
      move 'ID'                                             to <S_ITEM>-ITEM_NAME.
      move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
      move LR_OBJECT->GET_ID( )                             to <S_ITEM>-TEXT.

      append initial line to LT_ITEM_ADDED assigning <S_ITEM>.
      move LS_NODE-NODE_KEY                                 to <S_ITEM>-NODE_KEY.
      move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
      move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
      move LR_OBJECT->GET_DESCR( )                          to <S_ITEM>-TEXT.

    else.
***   Update Subnodes of Object if Expanded
      read table LT_NODEKEY_EXPANDED with key TABLE_LINE = LS_NODE-NODE_KEY
                                     transporting no fields.
      if SY-SUBRC eq 0.
        ME->UPDATE_SUBNODES_FOR_OBJECT( exporting
                                          IF_RELATKEY = LS_NODE-NODE_KEY
                                          IR_OBJECT   = LR_OBJECT ).
      endif.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = LT_NODE_ADDED
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  append lines of LT_NODE_ADDED to ME->T_NODE.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = LT_ITEM_ADDED
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  append lines of LT_ITEM_ADDED to ME->T_ITEM.


***--------------------------------------------------------------------------------------
*** Find Objects that need to be deleted
  loop at ME->T_NODE into LS_NODE where RELATKEY eq LF_NODEKEY_FOLDER.
    move LS_NODE-USEROBJECT ?to LR_OBJECT.
    read table IT_OBJECT with key TABLE_LINE = LR_OBJECT
                         transporting no fields.
    if SY-SUBRC ne 0.
      append LS_NODE-NODE_KEY to LT_NODEKEY.
    endif.
  endloop.

*** Find Subnodes
  loop at LT_NODEKEY into LF_NODEKEY.
    loop at ME->T_NODE into LS_NODE where RELATKEY eq LF_NODEKEY.
      collect LS_NODE-NODE_KEY into LT_NODEKEY.
    endloop.
  endloop.

*** Delete Nodes
  if LT_NODEKEY is not initial.
    ME->R_TREE->DELETE_NODES(
      exporting
        NODE_KEY_TABLE          = LT_NODEKEY
      exceptions
        ERROR_IN_NODE_KEY_TABLE = 1
        others                  = 2 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    loop at LT_NODEKEY into LF_NODEKEY.
      delete ME->T_NODE where NODE_KEY eq LF_NODEKEY.
      delete ME->T_ITEM where NODE_KEY eq LF_NODEKEY.
    endloop.
  endif.

endmethod.
method UPDATE_ROOT.

  data:  LT_OBJECT   type        /VCXI/CKX_TT_OBJECT.

***----------------------------------------------------------------------------
*** Add Conddition Definitions
  LT_OBJECT = ME->R_UIFW->R_DVCCOND->GET_CONDDEF( IF_DELETED = ABAP_FALSE ).
  ME->UPDATE_NODES_OF_FOLDER( exporting
                                IF_FOLDER_GUID = ZCL_VCXI_XCDCU_TREE_FOLDER=>C_GUID_CONDDEF
                                IT_OBJECT      = LT_OBJECT ).

*** Add Condition Records
  LT_OBJECT = ME->R_UIFW->R_DVCCOND->GET_CONDREC( IF_DELETED = ABAP_FALSE ).
  ME->UPDATE_NODES_OF_FOLDER( exporting
                                IF_FOLDER_GUID = ZCL_VCXI_XCDCU_TREE_FOLDER=>C_GUID_CONDREC
                                IT_OBJECT      = LT_OBJECT ).

endmethod.
method UPDATE_SUBNODES_FOR_OBJECT.

  data:  LT_OBJECT         type        /VCXI/CKX_TT_OBJECT.
  data:  LR_WHEREUSED      type ref to /VCXI/IF_CKX_OBJECT_WHEREUSED.

***------------------------------------------------------------------------------------------------
  try.
***   Add Condition Records to Condition Definition
      case IR_OBJECT->F_TOOBJ.
        when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
          move IR_OBJECT ?to LR_WHEREUSED.
          LT_OBJECT = LR_WHEREUSED->GET_WHEREUSED( ).
          ME->UPDATE_NODES_OF_FOLDER( exporting
                                        IF_RELATKEY    = IF_RELATKEY
                                        IF_FOLDER_GUID = ZCL_VCXI_XCDCU_TREE_FOLDER=>C_GUID_CONDREC
                                        IT_OBJECT      = LT_OBJECT ).
      endcase.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_WHEREUSED.
  endtry.

endmethod.
