
class ZCL_VCXI_FFSR_BL_PSTEP_LAMI definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_FFSR_ADJ_FIDIM .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_LAMI type /VCXI/VSMC_IPSTP value 'FF_PS_LAMI' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_LAMI
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data S_FIDIM_OUT type ZVCXI_FFSP_S_FIDIM .
  data T_FIDIM_IN type ZVCXI_FFSP_TT_FIDIM .
  data T_MS_GLUE type ZVCXI_FFSR_TT_MS_GLUE .
  constants C_IATYP_AT_LAMI type /VCXI/VSMC_IATYP value 'FF_AT_LAMI' ##NO_TEXT.
  data S_WIDIM_OUT type ZVCXI_FFSR_S_WIDIM .
  data T_MS_RECI type ZVCXI_FFSR_TT_MS_RECI .
  data F_TPROC type ZVCXI_FFS_TPROC .

  methods ADD_SPVRE_MC_GLUE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_RECI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_LAMI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_GLUE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_RECI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_LAMI definition
class ZCL_VCXI_FFSR_BL_PSTEP_LAMI implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

    data: LS_MS_GLUE   type        ZVCXI_FFSR_S_MS_GLUE,
          LS_RTE_SAVAL type        /VCXI/VSMR_S_RTE_SAVAL.
    field-symbols: <S_AVVAL> type        /VCXI/VSMR_S_RTE_RANGE_AVVAL.

***----------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Aspect - Glue Type
    try.
        clear LS_RTE_SAVAL.
        if ME->T_MS_GLUE is not initial.
          loop at ME->T_MS_GLUE into LS_MS_GLUE.
            append initial line       to LS_RTE_SAVAL-I_AVVAL assigning <S_AVVAL>.
            move 'I'                  to <S_AVVAL>-SIGN.
            move 'EQ'                 to <S_AVVAL>-OPTION.
            move LS_MS_GLUE-TGLUE     to <S_AVVAL>-LOW.
          endloop.
        else.
***       No Glue Type in case of Dry Lamination
          append initial line         to LS_RTE_SAVAL-I_AVVAL assigning <S_AVVAL>.
          move 'I'                    to <S_AVVAL>-SIGN.
          move 'EQ'                   to <S_AVVAL>-OPTION.
          move SPACE                  to <S_AVVAL>-LOW.
        endif.

        IR_RTE_PSTEP->SET_RTE_SAVAL( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_LAMI=>C_IAATY_TGLUE
                                     II_AVVAL  = LS_RTE_SAVAL-I_AVVAL ).

      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type        /VCXI/VSMC_LDUOM,
          LF_LDVAL type        /VCXI/VSMR_LDVAL.
    data: LS_MS_GLUE type        ZVCXI_FFSR_S_MS_GLUE,
          LS_MS_RECI type        ZVCXI_FFSR_S_MS_RECI.
    data: LI_LVVAL   type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE   type        /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols:  <S_LVVAL>  type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***--------------------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).

***     Number of Films (Inbound)
        when 'FF_LT_DI_NOFIL'.
***       Bypass this limit if Process Type is filled
          check ME->F_TPROC is initial.

          move LINES( ME->T_FIDIM_IN )        to LF_LDVAL.
          move 'ST'                           to LF_LDUOM.

***     Winding Width (Outbound)
        when 'FF_LT_DO_WIWID'.
          move ME->S_WIDIM_OUT-WIWID          to LF_LDVAL.
          move ME->S_WIDIM_OUT-WIWID_UOM      to LF_LDUOM.

***     Number of Outs (Outbound)
        when 'F0_LT_DO_NOOUT'.
          move ME->S_FIDIM_OUT-NOOUT          to LF_LDVAL.
          move 'ST'                           to LF_LDUOM.

***     Glue Type
        when 'FF_LT_VP_TGLUE'.
          if ME->T_MS_GLUE is not initial.
            loop at ME->T_MS_GLUE into LS_MS_GLUE.
              append initial line to LI_LVVAL assigning <S_LVVAL>.
              move 'I'                          to <S_LVVAL>-SIGN.
              move 'EQ'                         to <S_LVVAL>-OPTION.
              move LS_MS_GLUE-TGLUE             to <S_LVVAL>-LOW.
            endloop.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

***     Type of Extrusion
        when 'FF_LT_VP_TEXTR'.
          if ME->T_MS_RECI is not initial.
            loop at ME->T_MS_RECI into LS_MS_RECI.
              append initial line to LI_LVVAL assigning <S_LVVAL>.
              move 'I'                          to <S_LVVAL>-SIGN.
              move 'EQ'                         to <S_LVVAL>-OPTION.
              move LS_MS_RECI-TEXTR             to <S_LVVAL>-LOW.
            endloop.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

        when others.
          continue.
      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_GLUE.

    data: LS_MS_GLUE type        ZVCXI_FFSR_S_MS_GLUE,
          LS_LEOKY   type        /VCXI/VKSR_S_LEOKY,
          LS_PARAM   type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_GLUE type ref to /VCXI/CL_VKSR_SPVRE.

    check ME->T_MS_GLUE is not initial.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_GLUE'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at ME->T_MS_GLUE into LS_MS_GLUE.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_GLUE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_GLUE to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_GLUE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Material Number
      clear LS_LEOKY.
      move LS_MS_GLUE-MATNR                             to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
      LR_SPVRE_MC_GLUE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***   Set Glue Type
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_TGLUE      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
      move LS_MS_GLUE-TGLUE                             to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Average Consumption
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_AVGCO_W    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_GLUE-AVGCO                             to LS_PARAM-ATFLV.
      move LS_MS_GLUE-AVGCO_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Average Consumption Per
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_AVGCP_A    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_GLUE-AVGCP                             to LS_PARAM-ATFLV.
      move LS_MS_GLUE-AVGCP_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Surface Weight
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_SURWT      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_GLUE-SURWT                             to LS_PARAM-ATFLV.
      move LS_MS_GLUE-SURWT_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Glue Width
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_GLWID      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_GLUE-GLWID                             to LS_PARAM-ATFLV.
      move LS_MS_GLUE-GLWID_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Internal Glue Thickness
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_GLTIN      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_GLUE-GLTIN                             to LS_PARAM-ATFLV.
      move LS_MS_GLUE-GLTIN_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = LS_PARAM ).


***--------------------------------------------------------------------------------------
***   Set Purchase Flag
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_PURCH
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                       ATWRT = LS_MS_GLUE-PURCH
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Vendor
      LR_SPVRE_MC_GLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_FFSP_PR_MC_GLUE=>C_PARID_LIFNR
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                       ATWRT = LS_MS_GLUE-LIFNR
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

      if LS_MS_GLUE-T_PSCALE is not initial.
***     Add Price Scale
        ME->ADD_SPVRE_PSCALE_MGR( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                            IR_SPVRE_PARENT = LR_SPVRE_MC_GLUE
                                            IT_PSCALE       = LS_MS_GLUE-T_PSCALE
                                  changing  CT_SPVRE        = CT_SPVRE ).
      endif.

    endloop.

  endmethod.
  method ADD_SPVRE_MC_RECI.

    data: LS_MS_RECI        type        ZVCXI_FFSR_S_MS_RECI,
          LS_LEOKY          type        /VCXI/VKSR_S_LEOKY,
          LS_PARAM          type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE          type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_RECI  type ref to /VCXI/CL_VKSR_SPVRE.

    check ME->T_MS_RECI is not initial.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_RECI'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at ME->T_MS_RECI into LS_MS_RECI.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_RECI
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_RECI to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_RECI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Material Number
      clear LS_LEOKY.
      move LS_MS_RECI-MATNR                             to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
      LR_SPVRE_MC_RECI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***--------------------------------------------------------------------------------------
***   Set Average Consumption
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_RECI=>C_PARID_AVGCO_W    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_RECI-AVGCO                             to LS_PARAM-ATFLV.
      move LS_MS_RECI-AVGCO_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_RECI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Average Consumption Per
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_RECI=>C_PARID_AVGCP_A    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_RECI-AVGCP                             to LS_PARAM-ATFLV.
      move LS_MS_RECI-AVGCP_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_RECI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
***   Set Extrusion Width
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_RECI=>C_PARID_EXWID        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_RECI-EXWID                             to LS_PARAM-ATFLV.
      move LS_MS_RECI-EXWID_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_RECI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Internal Film Thickness
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_RECI=>C_PARID_FITIN        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_RECI-FITIN                             to LS_PARAM-ATFLV.
      move LS_MS_RECI-FITIN_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_RECI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set External Film Thickness
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_RECI=>C_PARID_FITEX        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
      move LS_MS_RECI-FITEX                             to LS_PARAM-ATFLV.
      move LS_MS_RECI-FITEX_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_MC_RECI->SET_PARAM( IS_PARAM = LS_PARAM ).

    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_FFSR_BL_PSTEP_LAMI.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

***--------------------------------------------------------------------------------------
*** Process Type
    if ME->F_TPROC eq LR_BL_PSTEP_LAMI->F_TPROC.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->T_FIDIM_IN  eq LR_BL_PSTEP_LAMI->T_FIDIM_IN  and
       ME->S_FIDIM_OUT eq LR_BL_PSTEP_LAMI->S_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_OUT eq LR_BL_PSTEP_LAMI->S_WIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Glues / Extrusion Recipes
    if ME->T_MS_GLUE eq LR_BL_PSTEP_LAMI->T_MS_GLUE and
       ME->T_MS_RECI eq LR_BL_PSTEP_LAMI->T_MS_RECI.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_FFSR_BL_PSTEP_LAMI.

***--------------------------------------------------------------------------------------
*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

***--------------------------------------------------------------------------------------
*** Process Type
    move ME->F_TPROC      to LR_BL_PSTEP_LAMI->F_TPROC.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->T_FIDIM_IN    to LR_BL_PSTEP_LAMI->T_FIDIM_IN.
    move ME->S_FIDIM_OUT   to LR_BL_PSTEP_LAMI->S_FIDIM_OUT.

*** Winding Dimensions
    move ME->S_WIDIM_OUT   to LR_BL_PSTEP_LAMI->S_WIDIM_OUT.

***--------------------------------------------------------------------------------------
*** Glue / Extrusion Recipes
    move ME->T_MS_GLUE     to LR_BL_PSTEP_LAMI->T_MS_GLUE.
    move ME->T_MS_RECI     to LR_BL_PSTEP_LAMI->T_MS_RECI.

  endmethod.
  method DESERIALIZE.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML    = LF_XML
                F_TPROC      = ME->F_TPROC
                T_FIDIM_IN   = ME->T_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_OUT  = ME->S_WIDIM_OUT
                T_MS_GLUE    = ME->T_MS_GLUE
                T_MS_RECI    = ME->T_MS_RECI.

*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when C_IATYP_AT_LAMI.
        ME->FILL_SPVRE_ADDON_LAMI( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_LAMI.

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Glue
    ME->ADD_SPVRE_MC_GLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = IR_SPVRE_ADDON
                           changing  CT_SPVRE        = CT_SPVRE ).

*** Add Material Consumption for Extrusion Recipe
    ME->ADD_SPVRE_MC_RECI( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = IR_SPVRE_ADDON
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***--------------------------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***--------------------------------------------------------------------------------------
*** Standard
    move 'GRP_CONV'   to CF_ID_GRP.
    move 'ARBPL_CONV' to CF_ID_ARBPL.

***--------------------------------------------------------------------------------------
*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'GRP_CONV'     to CF_ID_GRP.
      move 'ARBPL_OUTSO'  to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element for Activity
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_LAMI'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Glue
    ME->ADD_SPVRE_MC_GLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                           changing  CT_SPVRE        = RT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Recipe
    ME->ADD_SPVRE_MC_RECI( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                           changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method INIT_BY_SPEC.

    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

*** Get Glue Data
    ME->INIT_BY_SPEC_GLUE( IR_GATE  = IR_GATE
                           IT_PRVDR = IT_PRVDR ).

*** Get Extrusion Recipe Data
    ME->INIT_BY_SPEC_RECI( IR_GATE  = IR_GATE
                           IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    data:           LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
                    LR_PR_FCONI    type ref to ZCL_VCXI_FFSS_PR_FCONI,
                    LR_PR_MS_FPROC type ref to ZCL_VCXI_FFSS_PR_MS_FPROC,
                    LR_PR_MS_EMAT  type ref to ZCL_VCXI_FFSS_PR_MS_EMAT,
                    LR_PR_INPUT    type ref to ZCL_VCXI_FFSS_PR_INPUT,
                    LR_BL_FIFPROP  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.
    field-symbols:  <S_FIDIM_IN>   type        ZVCXI_FFSP_S_FIDIM.

***--------------------------------------------------------------------------------------
*** Get Inbound Dimensions
    loop at IT_PRVDR into LR_GATE.
***   By Connection In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONI.
          if LR_PR_FCONI is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONI.
      endtry.

***   By MS Film Procurement
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_FPROC.
          if LR_PR_MS_FPROC is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_MS_FPROC->GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_MS_FPROC->GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_MS_FPROC->GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_MS_FPROC->GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_MS_FPROC->GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_FPROC.
      endtry.

***   By MS Estimation Material
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_EMAT.
          if LR_PR_MS_EMAT is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_MS_EMAT->GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_MS_EMAT->GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_MS_EMAT->GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_MS_EMAT->GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_MS_EMAT->GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_EMAT.
      endtry.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Outbound Dimensions from Input Element
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
          if LR_PR_INPUT is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    check LR_PR_INPUT is bound.
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_OUT-S_FITEX ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_OUT-S_SURWT ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_OUT-NOUPS ).
    move 1 to ME->S_FIDIM_OUT-NOOUT.

*** Get Winding Dimension
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width
      ME->S_WIDIM_OUT-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_OUT-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_OUT-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_OUT-S_SURWT
                                                          IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_WIWID = ME->S_WIDIM_OUT-S_WIWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Buffer Process Type for Limit
    LR_PR_INPUT->GET_TPROC( importing EF_TPROC = ME->F_TPROC ).

  endmethod.
  method INIT_BY_SPEC_GLUE.

    data: LS_APWGT type ZVCXI_FFS_S_APWGT.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PSCALE type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_GLUE  type ref to ZCL_VCXI_FFSS_PR_MS_GLUE,
          LR_PR_PSCALE   type ref to ZCL_VCXI_XCS_PR_PSCALE.
    field-symbols: <S_MS_GLUE>  type ZVCXI_FFSR_S_MS_GLUE.

***--------------------------------------------------------------------------------------
*** Get Glue Data
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_GLUE.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
      append initial line to ME->T_MS_GLUE assigning <S_MS_GLUE>.

***   Basic Info
      move LR_PR_MS_GLUE->GET_MATNR( ) to <S_MS_GLUE>-MATNR.

***   Glue Type
      LR_PR_MS_GLUE->GET_TGLUE( importing EF_TGLUE = <S_MS_GLUE>-TGLUE ).

***--------------------------------------------------------------------------------------
****  Calculate Average Consumption by Application Weight
      LR_PR_MS_GLUE->GET_APWGT( importing ES_APWGT = LS_APWGT ).

      move 1000 to <S_MS_GLUE>-S_AVGCP-AVGCP.
      move 'M2' to <S_MS_GLUE>-S_AVGCP-AVGCP_UOM.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_APWGT-APWGT
                                                          IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
                                                          IF_CALCV_2     = <S_MS_GLUE>-S_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = <S_MS_GLUE>-S_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = <S_MS_GLUE>-S_AVGCO-AVGCO
                                                          EF_CALCV_UOM   = <S_MS_GLUE>-S_AVGCO-AVGCO_UOM ).

***   Surface Weight
      LR_PR_MS_GLUE->GET_SURWT( importing ES_SURWT = <S_MS_GLUE>-S_SURWT ).

***   Glue Width
      LR_PR_MS_GLUE->GET_GLWID( importing ES_GLWID = <S_MS_GLUE>-S_GLWID ).

***   Internal Glue Thickness
      LR_PR_MS_GLUE->GET_GLTIN( importing ES_GLTIN = <S_MS_GLUE>-S_GLTIN ).

***--------------------------------------------------------------------------------------
***   Purchasing Info
      move LR_PR_MS_GLUE->GET_PURCH( )   to <S_MS_GLUE>-PURCH.
      move LR_PR_MS_GLUE->GET_LIFNR( )   to <S_MS_GLUE>-LIFNR.
      move LR_PR_MS_GLUE->GET_PRICE( )   to <S_MS_GLUE>-S_PRICE.
      move LR_PR_MS_GLUE->GET_PRICP( )   to <S_MS_GLUE>-S_PRICP.

***------------------------------------------------------------------------------------------------
***   Find Provider for Price Scale
      loop at IT_PRVDR into LR_GATE_PSCALE.
        clear: LR_PR_PSCALE.
        try.
***       Check Scale is part of Packaging Material
            check LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
            move LR_GATE_PSCALE->R_CLSPR ?to LR_PR_PSCALE.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PSCALE.
        endtry.
        check LR_PR_PSCALE is bound.

***     Add Price Scales
        append value #( ISVCE = LR_GATE_PSCALE->F_ID
                        S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                        S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                        S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                      ) to <S_MS_GLUE>-T_PSCALE.
      endloop.
    endloop.

  endmethod.
  method INIT_BY_SPEC_RECI.

    data: LS_SURWT type        ZVCXI_F0S_S_SURWT,
          LS_FIWID type        ZVCXI_F0S_S_FIWID,
          LS_TRWID type        ZVCXI_F0S_S_TRWID.
    data: LR_GATE_EXTR  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_RECI  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_EXTR    type ref to ZCL_VCXI_FFSS_PR_EXTR,
          LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.
    field-symbols:  <S_MS_RECI>   type        ZVCXI_FFSR_S_MS_RECI.

***--------------------------------------------------------------------------------------
*** Get Extrusion Recipe Data
    loop at IT_PRVDR into LR_GATE_EXTR.
      try.
          move LR_GATE_EXTR->R_CLSPR ?to LR_PR_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Find Recipe
      loop at IT_PRVDR into LR_GATE_RECI.
        check LR_GATE_RECI->IS_IN_LINE( IR_GATE = LR_GATE_EXTR ) eq ABAP_TRUE.
        try.
            move LR_GATE_RECI->R_CLSPR ?to LR_PR_MS_RECI.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        insert initial line into table ME->T_MS_RECI assigning <S_MS_RECI>.

***     Basic Info
        move LR_PR_MS_RECI->GET_MATNR( ) to <S_MS_RECI>-MATNR.
***        move LR_PR_MS_RECI->GET_TEXT( )  to <S_MS_RECI>-TEXT.

***     Extrusion Type
        LR_PR_EXTR->GET_TEXTR( importing EF_TEXTR = <S_MS_RECI>-TEXTR ).

***     Number of Layer
        LR_PR_MS_RECI->GET_NOLAY( importing EF_NOLAY = <S_MS_RECI>-NOLAY ).

***--------------------------------------------------------------------------------------
***     Calculate Average Consumption by Application Weight (Inbound)
        LR_PR_EXTR->GET_SURWT( importing ES_SURWT = LS_SURWT ).

        move 1000 to <S_MS_RECI>-S_AVGCP-AVGCP.
        move 'M2' to <S_MS_RECI>-S_AVGCP-AVGCP_UOM.

        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                            IF_CALCV_2     = <S_MS_RECI>-S_AVGCP-AVGCP
                                                            IF_CALCV_UOM_2 = <S_MS_RECI>-S_AVGCP-AVGCP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = <S_MS_RECI>-S_AVGCO-AVGCO
                                                            EF_CALCV_UOM   = <S_MS_RECI>-S_AVGCO-AVGCO_UOM ).

        if LR_PR_EXTR->GET_FOPEX( ) ne ABAP_TRUE.
          LR_PR_EXTR->GET_EXWID( importing ES_EXWID = <S_MS_RECI>-S_EXWID ).

        else.
***       Get Film Width (Inbound)
          LR_PR_EXTR->GET_FIWID( importing ES_FIWID = LS_FIWID ).
***       Get Trim on Width
          LR_PR_EXTR->GET_TRWID( importing ES_TRWID = LS_TRWID ).

***       Calculate Extrusion Width
          <S_MS_RECI>-S_EXWID-EXWID     = LS_FIWID-FIWID.
          <S_MS_RECI>-S_EXWID-EXWID_UOM = LS_FIWID-FIWID_UOM.

***       Add Trim
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_MS_RECI>-S_EXWID-EXWID
                                                              IF_CALCV_UOM_1 = <S_MS_RECI>-S_EXWID-EXWID_UOM
                                                              IF_CALCV_2     = LS_TRWID-TRWID
                                                              IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                              IF_UOM         = <S_MS_RECI>-S_EXWID-EXWID_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                    importing EF_CALCV       = <S_MS_RECI>-S_EXWID-EXWID
                                                              EF_CALCV_UOM   = <S_MS_RECI>-S_EXWID-EXWID_UOM ).
        endif.

***     Internal/External Thickness
        LR_PR_EXTR->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_MS_RECI>-S_FITIN ).
        LR_PR_EXTR->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_MS_RECI>-S_FITEX ).

***--------------------------------------------------------------------------------------
***     Purchasing Info
        move LR_PR_MS_RECI->GET_PURCH( )   to <S_MS_RECI>-PURCH.
        move LR_PR_MS_RECI->GET_LIFNR( )   to <S_MS_RECI>-LIFNR.
        move LR_PR_MS_RECI->GET_PRICE( )   to <S_MS_RECI>-S_PRICE.
        move LR_PR_MS_RECI->GET_PRICP( )   to <S_MS_RECI>-S_PRICP.

      endloop.
    endloop.

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

***--------------------------------------------------------------------------------------
*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML
                F_TPROC      = ME->F_TPROC
                T_FIDIM_IN   = ME->T_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_OUT  = ME->S_WIDIM_OUT
                T_MS_GLUE    = ME->T_MS_GLUE
                T_MS_RECI    = ME->T_MS_RECI

         result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_IN.

    refresh: CT_FIDIM.
    append lines of ME->T_FIDIM_IN to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_OUT.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append ME->S_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    if ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL is not initial.
      ME->S_FIDIM_OUT-S_RLETA = ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL[ 1 ]-S_RLETA.
    endif.

  endmethod.
