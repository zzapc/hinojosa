
class ZCL_VCXI_P2SR_BL_PSTEP_EMBOS definition
  public
  inheriting from ZCL_VCXI_P2SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .

  constants C_IPSTP_EMBOS type /VCXI/VSMC_IPSTP value 'PX_PS_EMBOS' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_EMBOS
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
protected section.

  data S_MS_TOOL type ZVCXI_P0SR_S_MS_TOOL .
  data S_PCDIM_IN type ZVCXI_P0SP_S_PCDIM .
  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .
  data T_MS_EMBMAT type ZVCXI_PXSR_TT_MS_EMBMAT .

  methods GET_MS_EMBMAT_AVGCO
    importing
      !IS_MS_EMBMAT type ZVCXI_PXSR_S_MS_EMBMAT
    exporting
      !ES_AVGCO type ZVCXI_XCS_S_AVGCO
      !ES_AVGCP type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_EMBMAT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_TOOL
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_EMBOS
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_EMBOS
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_CSTEP_EMBOS
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
  methods GET_XML_DREF
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SR_BL_PSTEP_EMBOS definition
class ZCL_VCXI_P2SR_BL_PSTEP_EMBOS implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Aspect - Embossing Type
    try.
        IR_RTE_PSTEP->SET_RTE_SAVAL( IF_IAATY  = ZCL_VCXI_PXSP_PR_ADDON_EMBOS=>C_IAATY_TEMBO
                                     II_AVVAL  = value #( for LS_MS_EMBMAT in ME->T_MS_EMBMAT ( SIGN = 'I' OPTION = 'EQ' LOW = LS_MS_EMBMAT-TEMBO ) ) ).
      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type /VCXI/VSMC_LDUOM,
          LF_LDVAL type /VCXI/VSMR_LDVAL.
    data: LI_LVVAL type /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE type /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***----------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Sheet Length (Inbound)
        when 'P0_LT_DI_SHTLEN'.
          move ME->S_PCDIM_IN-PCLEN      to LF_LDVAL.
          move ME->S_PCDIM_IN-PCLEN_UOM  to LF_LDUOM.

***     Sheet Width (Inbound)
        when 'P0_LT_DI_SHTWID'.
          move ME->S_PCDIM_IN-PCWID      to LF_LDVAL.
          move ME->S_PCDIM_IN-PCWID_UOM  to LF_LDUOM.

***     Embossing Type
        when 'PX_LT_VP_TEMBO'.
          if ME->T_MS_EMBMAT is not initial.
            LI_LVVAL = value #( for LS_MS_EMBMAT in ME->T_MS_EMBMAT ( SIGN = 'I' OPTION = 'EQ' LOW = LS_MS_EMBMAT-TEMBO ) ).
          else.
            LI_LVVAL = value #( ( SIGN = 'I' OPTION = 'EQ' LOW = SPACE ) ).
          endif.

        when others.
          continue.
      endcase.


***----------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_EMBMAT.

    data: LS_MS_EMBMAT type ZVCXI_PXSR_S_MS_EMBMAT,
          LS_AVGCO     type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP     type ZVCXI_XCS_S_AVGCP.
    data: LR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE.


    loop at ME->T_MS_EMBMAT into LS_MS_EMBMAT.

***------------------------------------------------------------------------------------------------
***   Create Supervisor Runtime Element
      LR_SPVRE = new #( IR_SPVCE  = IR_BL_RTESPV->GET_SPVCE( IF_ID           = switch #( LS_MS_EMBMAT-FEMBM when ABAP_TRUE then 'MC_EMBMAT'
                                                                                                                           else 'EMBOS' )
                                                             IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE )
                        IR_PARENT = IR_SPVRE_PARENT ).
      append LR_SPVRE to CT_SPVRE.

***   Set In Use
      LR_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

      case LS_MS_EMBMAT-FEMBM.
        when ABAP_TRUE.
***------------------------------------------------------------------------------------------------
***       Set Material
          LR_SPVRE->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MS_EMBMAT-MATNR
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***       Set Embossing Type
          LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_TEMBO
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = LS_MS_EMBMAT-TEMBO
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***       Set Average Consumption and Average Consumption Per
          ME->GET_MS_EMBMAT_AVGCO( exporting IS_MS_EMBMAT = LS_MS_EMBMAT
                                   importing ES_AVGCO     = LS_AVGCO
                                             ES_AVGCP     = LS_AVGCP ).
          LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_AVGCO_A
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = LS_AVGCO-AVGCO
                                                   UNIT  = LS_AVGCO-AVGCO_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
          LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_AVGCP_P
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = LS_AVGCP-AVGCP
                                                   UNIT  = LS_AVGCP-AVGCP_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***       Set Procurement Option
          LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_PURCH
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = LS_MS_EMBMAT-PURCH
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

          if LS_MS_EMBMAT-PURCH ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***         Set Price and Price Unit
            LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_PRICE
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = LS_MS_EMBMAT-PRICE
                                                     CURKY = LS_MS_EMBMAT-PRICE_CURR
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
            LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_PRICP_A
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = LS_MS_EMBMAT-PRICP
                                                     UNIT  = LS_MS_EMBMAT-PRICP_UOM
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***         Set Vendor
            LR_SPVRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_EMBMAT=>C_PARID_LIFNR
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_MS_EMBMAT-LIFNR
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
          endif.

***------------------------------------------------------------------------------------------------
        when others.
***       Set Embossing Type
          LR_SPVRE->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MS_EMBMAT-TEMBO
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_TOOL.

    data: LR_SPVRE_MC_TOOL type ref to /VCXI/CL_VKSR_SPVRE.


    check ME->S_MS_TOOL-MATNR is not initial.

***------------------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element
    LR_SPVRE_MC_TOOL = new #( IR_SPVCE  = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TOOL'
                                                                   IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE )
                              IR_PARENT = IR_SPVRE_PARENT ).
    append LR_SPVRE_MC_TOOL to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MC_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    LR_SPVRE_MC_TOOL->SET_LEOKY( IS_LEOKY = value #( LEOKY = ME->S_MS_TOOL-MATNR
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
    LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCO_P
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = 1
                                                     UNIT  = 'ST'
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

*** Set Average Consumption Per
    LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCP_P
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = ME->S_MS_TOOL-LTITO
                                                     UNIT  = ME->S_MS_TOOL-LTITO_UOM
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_EMBOS type ref to ZCL_VCXI_P2SR_BL_PSTEP_EMBOS.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_EMBOS.


***------------------------------------------------------------------------------------------------
*** PC Dimensions
    if ME->S_PCDIM_IN  eq LR_BL_PSTEP_EMBOS->S_PCDIM_IN and
       ME->S_PCDIM_OUT eq LR_BL_PSTEP_EMBOS->S_PCDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Tool
    if ME->S_MS_TOOL eq LR_BL_PSTEP_EMBOS->S_MS_TOOL.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Embossing Material
    if ME->T_MS_EMBMAT eq LR_BL_PSTEP_EMBOS->T_MS_EMBMAT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_EMBOS type ref to ZCL_VCXI_P2SR_BL_PSTEP_EMBOS.

*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_EMBOS.

***------------------------------------------------------------------------------------------------
*** PC Dimensions
    move ME->S_PCDIM_IN    to LR_BL_PSTEP_EMBOS->S_PCDIM_IN.
    move ME->S_PCDIM_OUT   to LR_BL_PSTEP_EMBOS->S_PCDIM_OUT.

*** Tool
    move ME->S_MS_TOOL     to LR_BL_PSTEP_EMBOS->S_MS_TOOL.

*** Embossing Material
    move ME->T_MS_EMBMAT   to LR_BL_PSTEP_EMBOS->T_MS_EMBMAT.

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'PX_AT_EMBOS'.
        ME->FILL_SPVRE_ADDON_EMBOS( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                              IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                    changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_EMBOS.

*** Add Material Consumption for Embossing Material
    ME->ADD_SPVRE_MC_EMBMAT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                       IR_SPVRE_PARENT = IR_SPVRE_ADDON
                             changing  CT_SPVRE        = CT_SPVRE ).

*** Add Material Consumption for Tool
    ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = IR_SPVRE_ADDON
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***------------------------------------------------------------------
*** Standard
    move 'CONV'     to CF_ID_ARBPL.

**** If Manual
*    if ME->ZIF_VCXI_XCSR_BL_MANU~F_MANWC eq ABAP_TRUE.
*      move 'MANU'     to CF_ID_ARBPL.
*    endif.

*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'OUTSO'    to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_MS_EMBMAT_AVGCO.

    clear: ES_AVGCO, ES_AVGCP.

*** Use 1000 PC as base for more accuracy of M2
    ES_AVGCP-AVGCP     = 1000.
    ES_AVGCP-AVGCP_UOM = 'ST'.

*** Embossing Area
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_MS_EMBMAT-EMBLE * ES_AVGCP-AVGCP
                                                        IF_CALCV_UOM_1 = IS_MS_EMBMAT-EMBLE_UOM
                                                        IF_CALCV_2     = IS_MS_EMBMAT-EMBWI
                                                        IF_CALCV_UOM_2 = IS_MS_EMBMAT-EMBWI_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = ES_AVGCO-AVGCO
                                                        EF_CALCV_UOM   = ES_AVGCO-AVGCO_UOM ).

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_EMBOS'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Embossing Material
    ME->ADD_SPVRE_MC_EMBMAT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                       IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                             changing  CT_SPVRE        = RT_SPVRE ).

*** Add Material Consumption for Tool
    ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                           changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method GET_XML_DREF.

*** Super References
    RT_DATA = SUPER->GET_XML_DREF( ).

*** Add additional References
    append value #( NAME = 'S_PCDIM_IN'   VALUE = ref #( ME->S_PCDIM_IN )  ) to RT_DATA.
    append value #( NAME = 'S_PCDIM_OUT'  VALUE = ref #( ME->S_PCDIM_OUT ) ) to RT_DATA.

    append value #( NAME = 'S_MS_TOOL'    VALUE = ref #( ME->S_MS_TOOL )   ) to RT_DATA.
    append value #( NAME = 'T_MS_EMBMAT'  VALUE = ref #( ME->T_MS_EMBMAT ) ) to RT_DATA.

  endmethod.
  method INIT_BY_CSTEP_EMBOS.

    data: LF_SHTDI type ZVCXI_P0SS_SHTDI,
          LF_SETTN type ZVCXI_PXS_SETTN.
    data: LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP_EMBOS type ref to ZCL_VCXI_P2SS_PR_CSTEP_EMBOS.


***--------------------------------------------------------------------------------------
*** Get Reference for CStep Embossing
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_P2SS_PR_CSTEP_EMBOS.
      LR_PR_CSTEP_EMBOS ?= LR_GATE->R_CLSPR.
      exit.
    endloop.
    check LR_PR_CSTEP_EMBOS is bound.


***--------------------------------------------------------------------------------------
*** Sheet Direction
    move LR_PR_CSTEP_EMBOS->GET_SHTDI( ) to LF_SHTDI.
    if LF_SHTDI is not initial.
      move LF_SHTDI                               to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR.
      move ZIF_VCXI_PXSR_PCDIR=>C_PCDOP_MANDATORY to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDOP.
    endif.

*** Embossing Tool Number
    ME->S_MS_TOOL-MATNR = LR_PR_CSTEP_EMBOS->GET_EMBTN( ).

  endmethod.
  method INIT_BY_EMBOS.

    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_EMBOS     type ref to ZCL_VCXI_PXSS_PR_EMBOS,
          LR_PR_MS_EMBMAT type ref to ZCL_VCXI_PXSS_PR_MS_EMBMAT.
    field-symbols: <S_MS_EMBMAT> type ZVCXI_PXSR_S_MS_EMBMAT.


*** Get Embossment
    loop at IT_PRVDR into LR_GATE where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_EMBOS.
      LR_PR_EMBOS = cast ZCL_VCXI_PXSS_PR_EMBOS( LR_GATE->R_CLSPR ).

      append initial line to ME->T_MS_EMBMAT assigning <S_MS_EMBMAT>.
      <S_MS_EMBMAT>-TEMBO   = LR_PR_EMBOS->GET_TEMBO( importing EF_FEMBM = <S_MS_EMBMAT>-FEMBM ).
      <S_MS_EMBMAT>-S_EMBLE = LR_PR_EMBOS->GET_EMBLE( ).
      <S_MS_EMBMAT>-S_EMBWI = LR_PR_EMBOS->GET_EMBWI( ).

***   Embossing Material
      if <S_MS_EMBMAT>-FEMBM eq ABAP_TRUE.
        LR_PR_MS_EMBMAT = LR_PR_EMBOS->GET_PRVDR_MS_EMBMAT( importing ER_GATE_MS_EMBMAT = LR_GATE ).
        if LR_PR_MS_EMBMAT is bound and
           LINE_EXISTS( IT_PRVDR[ TABLE_LINE = LR_GATE ] ).
          <S_MS_EMBMAT>-MATNR   = LR_PR_MS_EMBMAT->GET_MATNR( ).
          <S_MS_EMBMAT>-PURCH   = LR_PR_MS_EMBMAT->GET_PURCH( ).
          <S_MS_EMBMAT>-LIFNR   = LR_PR_MS_EMBMAT->GET_LIFNR( ).
          <S_MS_EMBMAT>-S_PRICE = LR_PR_MS_EMBMAT->GET_PRICE( ).
          <S_MS_EMBMAT>-S_PRICP = LR_PR_MS_EMBMAT->GET_PRICP( ).
        endif.
      endif.
    endloop.

  endmethod.
  method INIT_BY_SPEC.

    data: LT_PCDIM type ZVCXI_P0SP_TT_PCDIM.


***--------------------------------------------------------------------------------------
*** Get Inbound PC Dimension
    LT_PCDIM = ME->GET_PCDIM_IN( IT_PRVDR = IT_PRVDR ).
    ME->S_PCDIM_IN = value #( LT_PCDIM[ 1 ] optional ).

*** Get Outbound PC Dimension
    LT_PCDIM = ME->GET_PCDIM_OUT( IT_PRVDR = IT_PRVDR ).
    ME->S_PCDIM_OUT = value #( LT_PCDIM[ 1 ] optional ).

*** Initialize by CStep Embossing
    ME->INIT_BY_CSTEP_EMBOS( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize by Embossment
    ME->INIT_BY_EMBOS( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~GET_PCDIM.

    RT_PCDIM = value #( ( ME->S_PCDIM_IN ) ).

  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~SET_PCDIR.

    move IF_PCDIR to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR.

*** Turn PC Dimension IN
    ME->S_PCDIM_IN  = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_IN
                                      IF_PCDIR = IF_PCDIR ).

*** Turn PC Dimension OUT
    ME->S_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_OUT
                                      IF_PCDIR = IF_PCDIR ).

  endmethod.
