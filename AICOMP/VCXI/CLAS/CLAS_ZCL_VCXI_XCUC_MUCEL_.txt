
class ZCL_VCXI_XCUC_MUCEL definition
  public
  final
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .

  constants C_ACTVT_CREATE type ACTIV_AUTH value '01' ##NO_TEXT.
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06' ##NO_TEXT.
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03' ##NO_TEXT.
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02' ##NO_TEXT.
  constants C_ACTVT_EXECUTE type ACTIV_AUTH value '16' ##NO_TEXT.
  constants C_CDOCL_MUCEL type CDOBJECTCL value 'ZVCXI_XCU_MUCEL' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_TOOBJ_MUCEL type /VCXI/CKX_TOOBJ value 'MUCEL' ##NO_TEXT.
  class-data F_CCCORACTIV type CCCORACTIV read-only .
  data F_CHANGED type ABAP_BOOL read-only .
  data S_SRC type /VCXI/CKX_S_SRC read-only .
  data T_MUCAO type ZVCXI_XCUC_TT_MUCAO read-only .
  data T_MUCAE type ZVCXI_XCUC_TT_MUCAE read-only .
  data T_MUCFE type ZVCXI_XCUC_TT_MUCFE read-only .
  data T_MUCFP type ZVCXI_XCUC_TT_MUCFP read-only .
  data T_MUCUE type ZVCXI_XCUC_TT_MUCUE read-only .
  data T_MUCUP type ZVCXI_XCUC_TT_MUCUP read-only .
  data T_MUSCE type /VCXI/CKX_TT_OBJECT read-only .
  data T_MUSMD type /VCXI/CKX_TT_OBJECT read-only .

  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IF_ID type /VCXI/CKX_ID optional
      !IR_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL optional
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods COPY
    importing
      !IR_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL
    returning
      value(RR_MUCEL) type ref to ZCL_VCXI_XCUC_MUCEL
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    returning
      value(RR_MUCEL) type ref to ZCL_VCXI_XCUC_MUCEL
    raising
      /VCXI/CX_CKX .
  class-methods GET_ALL_INSTANCES
    returning
      value(RR_MUCEL) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods GET_CLSNA_SMDCNTRL
    importing
      !IR_CMODEL type ref to /VCXI/CL_CKMC_CMODEL
    exporting
      !EF_CLSNA type SEOCLSNAME
      !EF_CLSNA_UI type SEOCLSNAME
    raising
      /VCXI/CX_CKX .
  class-methods GET_DATEL_INFO
    importing
      !IF_DATEL type ROLLNAME
    exporting
      !ER_ELEMDESCR type ref to CL_ABAP_ELEMDESCR
      !ER_TABLEDESCR type ref to CL_ABAP_TABLEDESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_ID
    importing
      !IF_IMUCE type ZVCXI_XCUC_IMUCE
    returning
      value(RR_MUCEL) type ref to ZCL_VCXI_XCUC_MUCEL
    raising
      /VCXI/CX_CKX .
  class-methods GET_PARAM_INFO
    importing
      !IR_PARAM type ref to /VCXI/CL_VKSC_PARAM
      !IF_SYSOM type /VCXI/VKS_SYSOM optional
    exporting
      !EF_PARID type /VCXI/VKS_PARID
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_UNIT type /VCXI/CKX_UOM
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU optional
    raising
      /VCXI/CX_CKX .
  methods SET_ID
    importing
      !IF_ID type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods SET_KORRNR
    importing
      !IF_KORRNR type TRKORR optional
    raising
      /VCXI/CX_CKX .
  methods SET_MUCAO
    importing
      !IT_MUCAO type ZVCXI_XCUC_TT_MUCAO
    raising
      /VCXI/CX_CKX .
  methods SET_MUCAE
    importing
      !IT_MUCAE type ZVCXI_XCUC_TT_MUCAE
    raising
      /VCXI/CX_CKX .
  methods SET_MUCFE
    importing
      !IT_MUCFE type ZVCXI_XCUC_TT_MUCFE
    raising
      /VCXI/CX_CKX .
  methods SET_MUCFP
    importing
      !IT_MUCFP type ZVCXI_XCUC_TT_MUCFP
    raising
      /VCXI/CX_CKX .
  methods SET_MUCUE
    importing
      !IT_MUCUE type ZVCXI_XCUC_TT_MUCUE
    raising
      /VCXI/CX_CKX .
  methods SET_MUCUP
    importing
      !IT_MUCUP type ZVCXI_XCUC_TT_MUCUP
    raising
      /VCXI/CX_CKX .
  methods SET_MUSCE
    importing
      !IT_MUSCE type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods SET_MUSMD
    importing
      !IT_MUSMD type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data F_DELETED type ABAP_BOOL .
  data F_IMUCE type ZVCXI_XCUC_IMUCE .
  data F_KORRNR type TRKORR .
  data F_WRITE_TR type ABAP_BOOL .
  data S_LOG type /VCXI/CKX_S_LOG .

  methods CHECK_AUTH_EXECUTE
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC101
    returning
      value(RT_TC101) type ZVCXI_XCU_TT_TC101
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC102
    returning
      value(RT_TC102) type ZVCXI_XCU_TT_TC102
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC103
    returning
      value(RT_TC103) type ZVCXI_XCU_TT_TC103
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC104
    returning
      value(RT_TC104) type ZVCXI_XCU_TT_TC104
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC110
    returning
      value(RT_TC110) type ZVCXI_XCU_TT_TC110
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC120
    returning
      value(RT_TC120) type ZVCXI_XCU_TT_TC120
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC120T
    returning
      value(RT_TC120T) type ZVCXI_XCU_TT_TC120T
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC130
    returning
      value(RT_TC130) type ZVCXI_XCU_TT_TC130
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC140
    returning
      value(RT_TC140) type ZVCXI_XCU_TT_TC140
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC140T
    returning
      value(RT_TC140T) type ZVCXI_XCU_TT_TC140T
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GMUCE type ZVCXI_XCUC_GMUCE
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
  data F_GMUCE type ZVCXI_XCUC_GMUCE .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data T_DESCR type /VCXI/CKX_TT_DESCR .

  methods HANDLE_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCUC_MUCEL .
  methods INIT_LOG
    raising
      /VCXI/CX_CKX .
  methods INIT_SRC
    raising
      /VCXI/CX_CKX .
  methods LOAD_AUTH
    raising
      /VCXI/CX_CKX .
  methods LOAD_FILTER
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods LOAD_UPDATE
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCUC_MUCEL definition
class ZCL_VCXI_XCUC_MUCEL implementation.
  method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
  endmethod.
  method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

    case IF_FCODE.
      when ZCL_VCXI_XCUC_MUCEL=>C_FCODE_SAVE.
        ME->HANDLE_SAVE( ).
      when ZCL_VCXI_XCUC_MUCEL=>C_FCODE_DELETE.
        ME->HANDLE_DELETE( ).
      when ZCL_VCXI_XCUC_MUCEL=>C_FCODE_FREE.
        ME->HANDLE_FREE( ).
    endcase.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
***   Mass Update Customizing Element is not locked. No changes possible.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = 'ZVCXI_XCUC'
          F_MSGNO = '201'.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK .

    check ME->F_DELETED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Check Authorization
    ZCL_VCXI_XCUC_MUCEL=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCUC_MUCEL=>C_ACTVT_EDIT
                                     IR_MUCEL = ME ).

*** Customizing Changes allowed in Client
    check F_CCCORACTIV ne '2'.

*** Check Source of Element Type
    /VCXI/CL_CKX_SERVICE=>CHECK_SRC( IS_SRC = ME->S_SRC ).

*** Set DB Lock Entrie
    ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).
    move ABAP_TRUE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
    try.
***     Load from DB
        ME->LOAD_FROM_DB( ).

      catch /VCXI/CX_CKX.
        ME->HANDLE_FREE( ).
    endtry.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK .

*** Delete DB Lock Entrie
    ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
    try.
***     Load from DB
        ME->LOAD_FROM_DB( ).

      catch /VCXI/CX_CKX.
        ME->HANDLE_FREE( ).
    endtry.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED .

    move ME->F_LOCKED to RF_LOCKED.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR.

    try.
        RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ) ).
      catch /VCXI/CX_CKX.
        clear RF_DESCR.
    endtry.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

    RT_DESCR = ME->T_DESCR.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_GUID.

    RF_GUID = ME->F_GMUCE.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.

    RF_ID = ME->F_IMUCE.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

    data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.
    data: LR_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL.

    read table ZCL_VCXI_XCUC_MUCEL=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_OBJECT to RR_OBJECT.
    else.
***   Get new Instance
      create object LR_MUCEL
        exporting
          IF_GMUCE = conv ZVCXI_XCUC_GMUCE( IF_GUID ).
      move LR_MUCEL ?to RR_OBJECT.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_LOG.

    RS_LOG = ME->S_LOG.

  endmethod.
  method BUILD_TC101.

    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.

    loop at ME->T_MUSCE into LR_OBJECT.
      LR_CUELMNT ?= LR_OBJECT.
      append value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      GCELM = LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ) to RT_TC101.

    endloop.

  endmethod.
  method BUILD_TC102.

    data: LR_CMODEL type ref to /VCXI/CL_CKMC_CMODEL,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

    loop at ME->T_MUSMD into LR_OBJECT.
      LR_CMODEL ?= LR_OBJECT.
      append value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      GREGE = LR_CMODEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ) to RT_TC102.

    endloop.

  endmethod.
  method BUILD_TC103.

    data: LS_MUCAO type ZVCXI_XCUC_S_MUCAO,
          LS_MUAFV type ZVCXI_XCUC_S_MUAFV.

    loop at ME->T_MUCAO into LS_MUCAO.
      loop at LS_MUCAO-T_MUAFV into LS_MUAFV.
        append value #( MANDT = SY-MANDT
                        GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                        OBJCT = LS_MUCAO-OBJCT
                        FIELD = LS_MUAFV-FIELD
                        VALUE = LS_MUAFV-VALUE ) to RT_TC103.
      endloop.
    endloop.

  endmethod.
  method BUILD_TC104.

    data: LS_MUCAE type ZVCXI_XCUC_S_MUCAE.

    loop at ME->T_MUCAE into LS_MUCAE.
      append value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      FMCAE = LS_MUCAE-FMCAE ) to RT_TC104.

    endloop.

  endmethod.
  method BUILD_TC110.

    data: LF_PARID   type /VCXI/VKS_PARID.
    data: LS_MUCFP   type ZVCXI_XCUC_S_MUCFP.


    loop at ME->T_MUCFP into LS_MUCFP.
      if LS_MUCFP-R_PARAM is bound.
        LF_PARID = LS_MUCFP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      else.
        clear LF_PARID.
      endif.
      append value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      PARID = LF_PARID
                      DATEL = LS_MUCFP-DATEL
                      FDACT = LS_MUCFP-FDACT
                    ) to RT_TC110.
    endloop.

  endmethod.
  method BUILD_TC120.

    data: LS_MUCFE   type ZVCXI_XCUC_S_MUCFE.


    loop at ME->T_MUCFE into LS_MUCFE.
      insert value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      IEXIT = LS_MUCFE-IEXIT
                      FMDEF = LS_MUCFE-FMDEF
                      FMEXE = LS_MUCFE-FMEXE
                      FDACT = LS_MUCFE-FDACT
                    ) into table RT_TC120.
    endloop.

  endmethod.
  method BUILD_TC120T.

    data: LS_MUCFE type ZVCXI_XCUC_S_MUCFE,
          LS_DESCR type /VCXI/CKX_S_DESCR.


    loop at ME->T_MUCFE into LS_MUCFE.
      loop at LS_MUCFE-T_DESCR into LS_DESCR.
        insert value #( MANDT = SY-MANDT
                        GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                        IEXIT = LS_MUCFE-IEXIT
                        LANGU = LS_DESCR-LANGU
                        DESCR = LS_DESCR-DESCR
                      ) into table RT_TC120T.
      endloop.
    endloop.

  endmethod.
  method BUILD_TC130.

    data: LF_PARID   type /VCXI/VKS_PARID.
    data: LS_MUCUP   type ZVCXI_XCUC_S_MUCUP.


    loop at ME->T_MUCUP into LS_MUCUP.
      if LS_MUCUP-R_PARAM is bound.
        LF_PARID = LS_MUCUP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      else.
        clear LF_PARID.
      endif.
      insert value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      PARID = LF_PARID
                      DATEL = LS_MUCUP-DATEL
                      IEVNT = LS_MUCUP-IEVNT
                      FDACT = LS_MUCUP-FDACT
                    ) into table RT_TC130.
    endloop.

  endmethod.
  method BUILD_TC140.

    data: LS_MUCUE   type ZVCXI_XCUC_S_MUCUE.


    loop at ME->T_MUCUE into LS_MUCUE.
      insert value #( MANDT = SY-MANDT
                      GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                      IEXIT = LS_MUCUE-IEXIT
                      FMDEF = LS_MUCUE-FMDEF
                      FMEXE = LS_MUCUE-FMEXE
                      FDACT = LS_MUCUE-FDACT
                    ) into table RT_TC140.
    endloop.

  endmethod.
  method BUILD_TC140T.

    data: LS_MUCUE type ZVCXI_XCUC_S_MUCUE,
          LS_DESCR type /VCXI/CKX_S_DESCR.


    loop at ME->T_MUCUE into LS_MUCUE.
      loop at LS_MUCUE-T_DESCR into LS_DESCR.
        insert value #( MANDT = SY-MANDT
                        GMUCE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                        IEXIT = LS_MUCUE-IEXIT
                        LANGU = LS_DESCR-LANGU
                        DESCR = LS_DESCR-DESCR
                      ) into table RT_TC140T.
      endloop.
    endloop.

  endmethod.
method CHECK_AUTH.

  data: LF_VALID type ABAP_BOOL,
        LF_ID    type /VCXI/CKX_ID,
        LF_MSGV1 type SYMSGV,
        LF_MSGV2 type SYMSGV.

***--------------------------------------------------------------------------------------
*** Get Update Customizing Element ID
  if IR_MUCEL is bound.
    LF_ID = IR_MUCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
  elseif IF_ID is not initial.
    LF_ID = IF_ID.
  endif.

***--------------------------------------------------------------------------------------
*** Special Handling for Execution
  if IF_ACTVT eq C_ACTVT_EXECUTE.
    if IR_MUCEL is not bound.
      raise exception type /VCXI/CX_CKX.
    endif.
    LF_VALID = IR_MUCEL->CHECK_AUTH_EXECUTE( ).

  else.
***--------------------------------------------------------------------------------------
*** Check Authority for Update Customizing Element
    authority-check object 'Z_XC_MUCEL'
              id 'ACTVT'  field IF_ACTVT.
    LF_VALID = switch #( SY-SUBRC when 0 then ABAP_TRUE
                                  else ABAP_FALSE ).
  endif.

***--------------------------------------------------------------------------------------
  if LF_VALID ne ABAP_TRUE.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

    if LF_ID is not initial.
***   No authorization to & Update Customizing Element &.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUC'
                                            IF_MSGNO = '010'
                                            IF_MSGV1 = LF_MSGV1
                                            IF_MSGV2 = LF_ID ).
    else.
***   No authorization to & Update Customizing Elements.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUC'
                                            IF_MSGNO = '011'
                                            IF_MSGV1 = LF_MSGV1 ).
    endif.
  endif.

endmethod.
  method CHECK_AUTH_EXECUTE.

    data: LS_MUCAO   type ZVCXI_XCUC_S_MUCAO,
          LS_MUCAE   type ZVCXI_XCUC_S_MUCAE,
          LS_MUAFV01 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV02 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV03 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV04 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV05 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV06 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV07 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV08 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV09 type ZVCXI_XCUC_S_MUAFV,
          LS_MUAFV10 type ZVCXI_XCUC_S_MUAFV.

*** Start positiv
    RF_VALID = ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Authorization Objects
    loop at ME->T_MUCAO into LS_MUCAO.
      LS_MUAFV01 = value #( LS_MUCAO-T_MUAFV[  1 ] optional ).
      LS_MUAFV02 = value #( LS_MUCAO-T_MUAFV[  2 ] optional ).
      LS_MUAFV03 = value #( LS_MUCAO-T_MUAFV[  3 ] optional ).
      LS_MUAFV04 = value #( LS_MUCAO-T_MUAFV[  4 ] optional ).
      LS_MUAFV05 = value #( LS_MUCAO-T_MUAFV[  5 ] optional ).
      LS_MUAFV06 = value #( LS_MUCAO-T_MUAFV[  6 ] optional ).
      LS_MUAFV07 = value #( LS_MUCAO-T_MUAFV[  7 ] optional ).
      LS_MUAFV08 = value #( LS_MUCAO-T_MUAFV[  8 ] optional ).
      LS_MUAFV09 = value #( LS_MUCAO-T_MUAFV[  9 ] optional ).
      LS_MUAFV10 = value #( LS_MUCAO-T_MUAFV[ 10 ] optional ).

      authority-check object LS_MUCAO-OBJCT
           id LS_MUAFV01-FIELD field LS_MUAFV01-VALUE
           id LS_MUAFV02-FIELD field LS_MUAFV02-VALUE
           id LS_MUAFV03-FIELD field LS_MUAFV03-VALUE
           id LS_MUAFV04-FIELD field LS_MUAFV04-VALUE
           id LS_MUAFV05-FIELD field LS_MUAFV05-VALUE
           id LS_MUAFV06-FIELD field LS_MUAFV06-VALUE
           id LS_MUAFV07-FIELD field LS_MUAFV07-VALUE
           id LS_MUAFV08-FIELD field LS_MUAFV08-VALUE
           id LS_MUAFV09-FIELD field LS_MUAFV09-VALUE
           id LS_MUAFV10-FIELD field LS_MUAFV10-VALUE.

      if SY-SUBRC ne 0.
        RF_VALID = ABAP_FALSE.
        exit.
      endif.
    endloop.

*** Don't continue if already failed
    check RF_VALID eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Authorization Exits
    loop at ME->T_MUCAE into LS_MUCAE.
      try.
***       Clear Result for next Exit Call
          clear RF_VALID.

***       Dynamic Call of Exit Function Module
          call function LS_MUCAE-FMCAE
            importing
              EF_VALID = RF_VALID.

        catch CX_SY_DYN_CALL_ERROR into data(LR_CX_SY_DYN_CALL_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_DYN_CALL_ERROR ).
      endtry.

***   Stop processing if failed once
      if RF_VALID eq ABAP_FALSE.
        exit.
      endif.
    endloop.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Get System/Client Parameters
    call function 'TR_SYS_PARAMS'
      importing
        SYSTEM_CLIENT_EDIT = F_CCCORACTIV
      exceptions
        NO_SYSTEMNAME      = 0
        NO_SYSTEMTYPE      = 0.

  endmethod.
  method CONSTRUCTOR.

    try.
***------------------------------------------------------------------------------------------------
***     Set Import Parameter to Attributes
        move IF_GMUCE   to ME->F_GMUCE.

***     Define Type of Object
        move C_TOOBJ_MUCEL to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***------------------------------------------------------------------------------------------------
***     Load DB
        if IF_NEW ne ABAP_TRUE.
          ME->LOAD_FROM_DB( ).
        endif.

***------------------------------------------------------------------------------------------------
***     Add instance to instance buffer
        append value #( GUID = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                        R_OBJECT = ME
                      ) to ZCL_VCXI_XCUC_MUCEL=>T_INSTANCE.

***------------------------------------------------------------------------------------------------
***     Register on changes
        set handler ME->HANDLE_CHANGED for ME.

***     Raise Change Event
        raise event /VCXI/IF_CKX_OBJECT~CREATED.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->HANDLE_FREE( ).
        raise exception LR_CX_CKX.
    endtry.

  endmethod.
  method COPY.

    check IR_MUCEL is bound.

***--------------------------------------------------------------------------------------
*** Create new Instance
    RR_MUCEL = ZCL_VCXI_XCUC_MUCEL=>CREATE( ).

***--------------------------------------------------------------------------------------
*** Copy Values
    RR_MUCEL->SET_DESCR( IF_DESCR = IR_MUCEL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) ).

    RR_MUCEL->SET_MUSCE( IT_MUSCE = IR_MUCEL->T_MUSCE ).
    RR_MUCEL->SET_MUSMD( IT_MUSMD = IR_MUCEL->T_MUSMD ).

    RR_MUCEL->SET_MUCFP( IT_MUCFP = IR_MUCEL->T_MUCFP ).
    RR_MUCEL->SET_MUCFE( IT_MUCFE = IR_MUCEL->T_MUCFE ).

    RR_MUCEL->SET_MUCUP( IT_MUCUP = IR_MUCEL->T_MUCUP ).
    RR_MUCEL->SET_MUCUE( IT_MUCUE = IR_MUCEL->T_MUCUE ).

    RR_MUCEL->SET_MUCAO( IT_MUCAO = IR_MUCEL->T_MUCAO ).
    RR_MUCEL->SET_MUCAE( IT_MUCAE = IR_MUCEL->T_MUCAE ).

  endmethod.
  method CREATE.

    data:  LF_GMUCE                     type        ZVCXI_XCUC_GMUCE.
    data:  LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.


***--------------------------------------------------------------------------------------
*** Check Authorization
    ZCL_VCXI_XCUC_MUCEL=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCUC_MUCEL=>C_ACTVT_CREATE ).

*** Check Client Status
    if F_CCCORACTIV eq 2.  "Customizing in this client cannot be changed
***   Client &1 has status 'not modifiable'
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'TK'
                                            IF_MSGNO = '430'
                                            IF_MSGV1 = SY-MANDT ).
    endif.

***--------------------------------------------------------------------------------------
*** Get GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = LF_GMUCE.

*** Create Condition Definition
    try.
        create object RR_MUCEL
          exporting
            IF_GMUCE = LF_GMUCE
            IF_NEW   = ABAP_TRUE.
      catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

    RR_MUCEL->INIT_SRC( ).
    RR_MUCEL->INIT_LOG( ).
    RR_MUCEL->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  endmethod.
  method GET_ALL_INSTANCES.

    data: LF_GMUCE type ZVCXI_XCUC_GMUCE.
    data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.
    data: LT_GMUCE type table of ZVCXI_XCUC_GMUCE.

*** Ensure all Instances are loaded
    select GMUCE
           into table LT_GMUCE
           from ZVCXI_XCU_TC100.
    loop at LT_GMUCE into LF_GMUCE.
      ZCL_VCXI_XCUC_MUCEL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LF_GMUCE ) ).
    endloop.

*** Return loaded Instances (which were not deleted)
    loop at ZCL_VCXI_XCUC_MUCEL=>T_INSTANCE into LS_INSTANCE.
      check cast ZCL_VCXI_XCUC_MUCEL( LS_INSTANCE-R_OBJECT )->F_DELETED ne ABAP_TRUE.
      append LS_INSTANCE-R_OBJECT to RR_MUCEL.
    endloop.

  endmethod.
  method GET_CLSNA_SMDCNTRL.

    data: LS_PRPTY type /VCXI/CKX_S_PRPTY.


    check IR_CMODEL is bound and
          IR_CMODEL->R_PRPSET is bound.

***--------------------------------------------------------------------------------------
    if EF_CLSNA is requested.
***   Get Property for SmartMD Control Settings
      LS_PRPTY = IR_CMODEL->R_PRPSET->/VCXI/IF_CKX_OBJECT_PRPTY~GET_PRPTY( IF_PRPID        = 'CLSNA_SMDCNTRL'
                                                                           IF_INCL_COMMENT = ABAP_FALSE ).
      if LS_PRPTY-T_PRPVA is initial or
         LS_PRPTY-T_PRPVA[ 1 ]-PRPVA is initial.
***     Class Name for SmartMD Control Settings is not specified in Property &.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCUC'
                                              IF_MSGNO = '030'
                                              IF_MSGV1 = LS_PRPTY-PRPID ).
      else.
***     Get Class Name
        EF_CLSNA = LS_PRPTY-T_PRPVA[ 1 ]-PRPVA.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if EF_CLSNA_UI is requested.
***   Get Property for UI of SmartMD Control Settings
      LS_PRPTY = IR_CMODEL->R_PRPSET->/VCXI/IF_CKX_OBJECT_PRPTY~GET_PRPTY( IF_PRPID        = 'CLSNA_SMDCNTRL_UI'
                                                                           IF_INCL_COMMENT = ABAP_FALSE ).
      if LS_PRPTY-T_PRPVA is initial or
         LS_PRPTY-T_PRPVA[ 1 ]-PRPVA is initial.
***     Class Name for SmartMD Control Settings is not specified in Property &.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCUC'
                                              IF_MSGNO = '030'
                                              IF_MSGV1 = LS_PRPTY-PRPID ).
      else.
***     Get Class Name
        EF_CLSNA_UI = LS_PRPTY-T_PRPVA[ 1 ]-PRPVA.
      endif.
    endif.

  endmethod.
  method GET_DATEL_INFO.

    data: LT_COMPONENT type ABAP_COMPONENT_TAB.
    data: LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.


    if IF_DATEL is initial.
***   Data Element is not defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUC'
                                            IF_MSGNO = '060' ).
    endif.

***--------------------------------------------------------------------------------------
*** Create Type Description
    CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = IF_DATEL
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1 ).
    if SY-SUBRC ne 0.
***   Data Element &1 does not exist.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUC'
                                            IF_MSGNO = '061'
                                            IF_MSGV1 = IF_DATEL ).
    endif.

*** Cast to Data Element Type
    try.
        ER_ELEMDESCR ?= LR_TYPEDESCR.
      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

***--------------------------------------------------------------------------------------
*** Get Components of Range for Runtime Type Services
    LT_COMPONENT = value #( ( NAME = 'SIGN'   TYPE = cast #( CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( 'SE16N_SIGN ' ) ) )
                            ( NAME = 'OPTION' TYPE = cast #( CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( 'SE16N_OPTION' ) ) )
                            ( NAME = 'LOW'    TYPE = cast #( ER_ELEMDESCR ) )
                            ( NAME = 'HIGH'   TYPE = cast #( ER_ELEMDESCR ) )
                          ).
*** Create Table Type
    ER_TABLEDESCR ?= CL_ABAP_TABLEDESCR=>CREATE( CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENT ) ).

  endmethod.
  method GET_INSTANCE_BY_ID.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    loop at ZCL_VCXI_XCUC_MUCEL=>GET_ALL_INSTANCES( ) into LR_OBJECT.
      if LR_OBJECT->GET_ID( ) eq IF_IMUCE.
        RR_MUCEL ?= LR_OBJECT.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_PARAM_INFO.

    clear: EF_PARID,
           EF_DESCR,
           EF_UNIT.


*** Parameter Description
    if IR_PARAM is bound.
      EF_PARID = IR_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      EF_DESCR = IR_PARAM->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
    else.
      EF_PARID = 'LEOKY'.
      EF_DESCR = 'Leading Object'.
    endif.

    check IR_PARAM is bound.

*** Return Unit based on System of Measure
    if IF_SYSOM is supplied and
       EF_UNIT  is requested.
      case IF_SYSOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
          EF_UNIT = IR_PARAM->F_UOMKY_M.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
          EF_UNIT = IR_PARAM->F_UOMKY_I.
        when others.
          clear EF_UNIT.
      endcase.
    endif.

  endmethod.
  method HANDLE_CHANGED .

    move ABAP_TRUE to ME->F_CHANGED.

*** Transport
    if F_CCCORACTIV eq '1'.    "Changes are recorded in transport request
      move ABAP_TRUE to ME->F_WRITE_TR.
    endif.

  endmethod.
  method HANDLE_DELETE.

***--------------------------------------------------------------------------------------
*** Check Authorization
    ZCL_VCXI_XCUC_MUCEL=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCUC_MUCEL=>C_ACTVT_DELETE
                                     IR_MUCEL = ME ).

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
    endif.

***--------------------------------------------------------------------------------------
*** Mark as deleted
    move ABAP_TRUE to ME->F_DELETED.
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method HANDLE_FREE .

    free: ME->T_MUSCE,
          ME->T_MUSMD.
    free: ME->T_MUCFP,
          ME->T_MUCFE.
    free: ME->T_MUCUP,
          ME->T_MUCUE.

    delete ZCL_VCXI_XCUC_MUCEL=>T_INSTANCE where GUID = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

  endmethod.
  method HANDLE_SAVE .

*** Save only if changed
    check ME->F_CHANGED  eq ABAP_TRUE or
          ME->F_WRITE_TR eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Transport Object
    if ME->F_WRITE_TR eq ABAP_TRUE.
      if ME->F_KORRNR is initial.
        ME->SET_KORRNR( ).
      endif.
***   Open Transport
      call function 'ZVCXI_XCUC_DB_OPEN_TRANSPORT'
        in update task
        exporting
          IF_TRKORR = ME->F_KORRNR.
    endif.

***--------------------------------------------------------------------------------------
*** Set Changed Info to Log
    move SY-UNAME     to ME->S_LOG-CHABY.
    get time stamp field ME->S_LOG-CHAAT.

***--------------------------------------------------------------------------------------
    if ME->F_DELETED eq ABAP_FALSE.
***   Save Customizing Element
      call function 'ZVCXI_XCUC_DB_SAVE_MUCEL'
        in update task
        exporting
          IF_GMUCE    = ME->F_GMUCE
          IF_IMUCE    = ME->F_IMUCE
          IT_DESCR    = ME->T_DESCR
          IT_TC101    = ME->BUILD_TC101( )
          IT_TC102    = ME->BUILD_TC102( )
          IT_TC103    = ME->BUILD_TC103( )
          IT_TC104    = ME->BUILD_TC104( )
          IT_TC110    = ME->BUILD_TC110( )
          IT_TC120    = ME->BUILD_TC120( )
          IT_TC120T   = ME->BUILD_TC120T( )
          IT_TC130    = ME->BUILD_TC130( )
          IT_TC140    = ME->BUILD_TC140( )
          IT_TC140T   = ME->BUILD_TC140T( )
          IS_LOG      = ME->S_LOG
          IS_SRC      = ME->S_SRC
          IF_WRITE_TR = ME->F_WRITE_TR.
    else.
***   Delete Customizing Element
      call function 'ZVCXI_XCUC_DB_DEL_MUCEL'
        in update task
        exporting
          IF_GMUCE    = ME->F_GMUCE
          IF_WRITE_TR = ME->F_WRITE_TR.
    endif.

*** Write Transport
    call function 'ZVCXI_XCUC_DB_CLOSE_TRANSPORT'
      in update task.

***--------------------------------------------------------------------------------------
*** All changes are handled
    move ABAP_FALSE to ME->F_CHANGED.

  endmethod.
method INIT_LOG.

***----------------------------------------------------------------------------
*** Set Created Info to Log
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_SRC.

*** Set Source
  move SY-SYSID to ME->S_SRC-SRCSY.
  move SY-MANDT to ME->S_SRC-SRCMA.

endmethod.
  method LOAD_AUTH.

    data: LS_TC103 type ZVCXI_XCU_TC103.
    data: LT_TC103 type table of ZVCXI_XCU_TC103.
    field-symbols: <S_MUCAO> type ZVCXI_XCUC_S_MUCAO.


*** Authorization Objects
    select *
           into table LT_TC103
           from ZVCXI_XCU_TC103
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

    loop at LT_TC103 into LS_TC103.
      if not LINE_EXISTS( ME->T_MUCAO[ OBJCT = LS_TC103-OBJCT ] ).
        append initial line to ME->T_MUCAO assigning <S_MUCAO>.
        <S_MUCAO>-OBJCT = LS_TC103-OBJCT.
      endif.
      insert value #( FIELD   = LS_TC103-FIELD
                      VALUE   = LS_TC103-VALUE
                    ) into table <S_MUCAO>-T_MUAFV.
    endloop.

*** Authorization Exits
    select FMCAE
           into table ME->T_MUCAE
           from ZVCXI_XCU_TC104
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

  endmethod.
  method LOAD_FILTER.

    data: LS_TC110 type ZVCXI_XCU_TC110,
          LS_TC120 type ZVCXI_XCU_TC120.
    data: LT_TC110  type table of ZVCXI_XCU_TC110,
          LT_TC120  type table of ZVCXI_XCU_TC120,
          LT_TC120T type table of ZVCXI_XCU_TC120T,
          LT_DESCR  type          /VCXI/CKX_TT_DESCR.
    data: LR_PARAM   type ref to /VCXI/CL_VKSC_PARAM.


    free: ME->T_MUCFP,
          ME->T_MUCFE.

***--------------------------------------------------------------------------------------
*** Customized Filter Parameter
    select *
           into table LT_TC110
           from ZVCXI_XCU_TC110
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

    loop at LT_TC110 into LS_TC110.
***   Load Parameter
      if LS_TC110-PARID is not initial.
        try.
            LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_TC110-PARID ) ).
          catch /VCXI/CX_CKX.
            clear LR_PARAM.
        endtry.
        check LR_PARAM is bound.

***   Load Leading Object
      else.
        clear LR_PARAM.
      endif.

      insert value #( R_PARAM = LR_PARAM
                      DATEL   = LS_TC110-DATEL
                      FDACT   = LS_TC110-FDACT
                    ) into table ME->T_MUCFP.
    endloop.

***--------------------------------------------------------------------------------------
*** Customized Filter Exit
    select *
           into table LT_TC120
           from ZVCXI_XCU_TC120
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC
    if LT_TC120 is not initial.
      select *
           into table LT_TC120T
           from ZVCXI_XCU_TC120T
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC
    endif.

    loop at LT_TC120 into LS_TC120.
      LT_DESCR = value #( for LS_TC120T in LT_TC120T
                          where ( IEXIT eq LS_TC120-IEXIT )
                          ( LANGU = LS_TC120T-LANGU
                            DESCR = LS_TC120T-DESCR ) ).

      insert value #( IEXIT   = LS_TC120-IEXIT
                      FMDEF   = LS_TC120-FMDEF
                      FMEXE   = LS_TC120-FMEXE
                      FDACT   = LS_TC120-FDACT
                      T_DESCR = LT_DESCR
                    ) into table ME->T_MUCFE.
    endloop.

  endmethod.
  method LOAD_FROM_DB .

    data: LF_GCELM type /VCXI/VKSC_GCELM,
          LF_GREGE type /VCXI/CKR_GREGE.
    data: LS_TC100 type ZVCXI_XCU_TC100.
    data: LT_GCELM type table of /VCXI/VKSC_GCELM,
          LT_GREGE type table of /VCXI/CKR_GREGE,
          LT_MUAFV type          ZVCXI_XCUC_TT_MUAFV.
    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_CMODEL  type ref to /VCXI/CL_CKMC_CMODEL.


    free: ME->T_DESCR,
          ME->T_MUSCE,
          ME->T_MUSMD,
          ME->T_MUCAO.

***--------------------------------------------------------------------------------------
*** Load Header
    select single *
           into LS_TC100
           from ZVCXI_XCU_TC100
          where GMUCE eq ME->F_GMUCE.
    if SY-SUBRC ne 0.
      raise exception type /VCXI/CX_CKX.
    endif.
    ME->F_IMUCE = LS_TC100-IMUCE.
    ME->S_LOG   = LS_TC100-S_LOG.
    ME->S_SRC   = LS_TC100-S_SRC.

*** Initialize the Description
    select LANGU DESCR
           into table ME->T_DESCR
           from ZVCXI_XCU_TC100T
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Assigned SmartVC Elements
    select GCELM
           into table LT_GCELM
           from ZVCXI_XCU_TC101
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

    loop at LT_GCELM into LF_GCELM.
      try.
          LR_CUELMNT ?= /VCXI/CL_VKSC_CUELMNT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LF_GCELM ) ).
          if LR_CUELMNT is bound.
            append LR_CUELMNT to ME->T_MUSCE.
          endif.
        catch /VCXI/CX_CKX.
      endtry.
    endloop.

*** Assigned SmartMD Models
    select GREGE
           into table LT_GREGE
           from ZVCXI_XCU_TC102
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

    loop at LT_GREGE into LF_GREGE.
      try.
          LR_CMODEL ?= /VCXI/CL_CKMC_CMODEL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LF_GREGE ) ).
          if LR_CMODEL is bound.
            append LR_CMODEL to ME->T_MUSMD.
          endif.
        catch /VCXI/CX_CKX.
      endtry.
    endloop.

***--------------------------------------------------------------------------------------
*** Load Authorization from DB
    ME->LOAD_AUTH( ).

*** Load Filter from DB
    ME->LOAD_FILTER( ).

*** Load Update from DB
    ME->LOAD_UPDATE( ).

  endmethod.
  method LOAD_UPDATE.

    data: LS_TC130 type ZVCXI_XCU_TC130,
          LS_TC140 type ZVCXI_XCU_TC140.
    data: LT_TC130  type table of ZVCXI_XCU_TC130,
          LT_TC140  type table of ZVCXI_XCU_TC140,
          LT_TC140T type table of ZVCXI_XCU_TC140T,
          LT_DESCR  type          /VCXI/CKX_TT_DESCR.
    data: LR_PARAM   type ref to /VCXI/CL_VKSC_PARAM.


    free: ME->T_MUCUP,
          ME->T_MUCUE.

***--------------------------------------------------------------------------------------
*** Customized Update Parameter
    select *
           into table LT_TC130
           from ZVCXI_XCU_TC130
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC

    loop at LT_TC130 into LS_TC130.
***   Load Parameter
      if LS_TC130-PARID is not initial.
        try.
            LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_TC130-PARID ) ).
          catch /VCXI/CX_CKX.
            clear LR_PARAM.
        endtry.
        check LR_PARAM is bound.

***   Load Leading Object
      else.
        clear LR_PARAM.
      endif.

      insert value #( R_PARAM = LR_PARAM
                      DATEL   = LS_TC130-DATEL
                      IEVNT   = LS_TC130-IEVNT
                      FDACT   = LS_TC130-FDACT
                    ) into table ME->T_MUCUP.
    endloop.

***--------------------------------------------------------------------------------------
*** Customized Update Exit
    select *
           into table LT_TC140
           from ZVCXI_XCU_TC140
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC
    if LT_TC140 is not initial.
      select *
           into table LT_TC140T
           from ZVCXI_XCU_TC140T
          where GMUCE eq ME->F_GMUCE.                     "#EC CI_SUBRC
    endif.

    loop at LT_TC140 into LS_TC140.
      LT_DESCR = value #( for LS_TC140T in LT_TC140T
                          where ( IEXIT eq LS_TC140-IEXIT )
                          ( LANGU = LS_TC140T-LANGU
                            DESCR = LS_TC140T-DESCR ) ).

      insert value #( IEXIT   = LS_TC140-IEXIT
                      FMDEF   = LS_TC140-FMDEF
                      FMEXE   = LS_TC140-FMEXE
                      FDACT   = LS_TC140-FDACT
                      T_DESCR = LT_DESCR
                    ) into table ME->T_MUCUE.
    endloop.

  endmethod.
  method SET_DESCR .

    data:           LF_LANGU  type LANGU.
    field-symbols:  <S_DESCR> type /VCXI/CKX_S_DESCR.


***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IF_LANGU is initial.
      move SY-LANGU to LF_LANGU.
    else.
      move IF_LANGU to LF_LANGU.
    endif.

    read table ME->T_DESCR assigning <S_DESCR> with key LANGU = LF_LANGU.
    if SY-SUBRC ne 0.
      append initial line to ME->T_DESCR assigning <S_DESCR>.
      move LF_LANGU to <S_DESCR>-LANGU.
    endif.
    move IF_DESCR   to <S_DESCR>-DESCR.

*** Raise Changed Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method SET_ID .

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IF_ID ne ME->F_IMUCE.
***   Set new ID
      move IF_ID to ME->F_IMUCE.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_KORRNR.

    if IF_KORRNR is supplied.
      ME->F_KORRNR = IF_KORRNR.
    else.
***   Popup to pick Transport
      call function 'G_TRANS_NUMBER'
        exporting
          CATEGORY  = 'CUST'
        importing
          KORRNR    = ME->F_KORRNR
        exceptions
          NO_NUMBER = 1
          others    = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method SET_LOCK.

    try.
***------------------------------------------------------------------
        if IF_LOCKED eq ABAP_TRUE.
***       Try to Set Write Lock
          call function 'ENQUEUE_EZVCXI_XCU_C100E'
            exporting
              GMUCE          = ME->F_GMUCE
              _SCOPE         = 3
            exceptions
              FOREIGN_LOCK   = 1
              SYSTEM_FAILURE = 2
              others         = 3.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

***------------------------------------------------------------------
        else.
***       Remove Write Lock
          call function 'DEQUEUE_EZVCXI_XCU_C100E'
            exporting
              GMUCE = ME->F_GMUCE.
        endif.

        move IF_LOCKED to ME->F_LOCKED.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
        raise exception LR_CX_CKX.
    endtry.

  endmethod.
  method SET_MUCAE.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCAE ne ME->T_MUCAE.
***   Set new Authorication Exit
      move IT_MUCAE to ME->T_MUCAE.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUCAO.

    data: LF_INDEX type N,
          LF_FIELD type STRING.
    data: LS_TOBJ type TOBJ.
    field-symbols: <S_MUCAO> type ZVCXI_XCUC_S_MUCAO,
                   <F_FIELD> type XUFIELD.


***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCAO ne ME->T_MUCAO.
***   Set new Authorization Object
      move IT_MUCAO to ME->T_MUCAO.

***   Add Authorization fields
      loop at ME->T_MUCAO assigning <S_MUCAO>.

        select single *
          from TOBJ
          into LS_TOBJ
          where OBJCT eq <S_MUCAO>-OBJCT.

        if SY-SUBRC eq 0.
          do 10 times.
            LF_INDEX = SY-INDEX mod 10.
            concatenate 'LS_TOBJ-FIEL' LF_INDEX into LF_FIELD.
            assign (LF_FIELD) to <F_FIELD>.
            check <F_FIELD> is not initial.
            if not LINE_EXISTS( <S_MUCAO>-T_MUAFV[ FIELD = <F_FIELD> ] ).
              insert value ZVCXI_XCUC_S_MUAFV( FIELD = <F_FIELD> ) into table <S_MUCAO>-T_MUAFV.
            endif.
          enddo.
        endif.

      endloop.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUCFE.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCFE ne ME->T_MUCFE.
***   Set new Filter Exit
      move IT_MUCFE to ME->T_MUCFE.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUCFP.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCFP ne ME->T_MUCFP.
***   Set new Filter Parameter
      move IT_MUCFP to ME->T_MUCFP.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUCUE.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCUE ne ME->T_MUCUE.
***   Set new Update Exit
      move IT_MUCUE to ME->T_MUCUE.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUCUP.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUCUP ne ME->T_MUCUP.
***   Set new Update Parameter
      move IT_MUCUP to ME->T_MUCUP.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUSCE.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUSCE ne ME->T_MUSCE.
***   Set new SmartVC Customizing Elements
      ME->T_MUSCE = IT_MUSCE.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method SET_MUSMD.

***------------------------------------------------------------------------------------------------
*** Check is Locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
    if IT_MUSMD ne ME->T_MUSMD.
***   Set new SmartMD Models
      ME->T_MUSMD = IT_MUSMD.

***   Raise Changed Event
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
