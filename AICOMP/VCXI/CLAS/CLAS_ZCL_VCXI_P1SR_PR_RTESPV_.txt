
class ZCL_VCXI_P1SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_PXSR_PR_RTESPV
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
  class-methods GET_PCTYP_BY_BL_CRBPROP
    importing
      !IR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP
    returning
      value(RF_PCTYP) type ZVCXI_P0SP_PCTYP
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
protected section.

  methods GET_ACTIVE_BOARD
    returning
      value(RR_GATE_BOARD) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CORR
    importing
      !IR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_ADSTP
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_LABEL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_CHOP
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_FANF
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_WIND
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_CLOS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_ATDCT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_CTAPE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_DCUT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_EMBOS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_GUIL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_LAMI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_SSS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_WPATCH
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CORR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CORR) type ref to ZCL_VCXI_P1SS_PR_CORR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_LAMI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_LAMI) type ref to ZCL_VCXI_P1SS_PR_LAMI
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_LAMI
    importing
      !IR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_SSTEP_DCUT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR_OUT type /VCXI/VKSR_TT_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_TAPE
    importing
      !IR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_INLPR
    importing
      !IR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_WAX
    importing
      !IR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods CONVERT_EVQTY_FOR_XCONI
    redefinition .
  methods CREATE_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP_CSTEP
    redefinition .
  methods GET_BL_PSTEP_INPUT
    redefinition .
  methods GET_BL_PSTEP_SSTEP
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods GET_ICELM
    redefinition .
  methods GET_IMFXC_GATE_EXCL
    redefinition .
  methods GET_MFMI
    redefinition .
  methods GET_MFSI
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SR_PR_RTESPV definition
class ZCL_VCXI_P1SR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_P1SR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CONVERT_EVQTY_FOR_XCONI.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Calling SUPER
    SUPER->CONVERT_EVQTY_FOR_XCONI( exporting IR_GATE  = IR_GATE
                                    changing  CS_EVQTY = CS_EVQTY ).

    case type of IR_GATE->R_CLSPR.
***   Converting to Roll
      when type ZCL_VCXI_P5SS_PR_RLCONI into data(LR_PR_RLCONI).
        case ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = CS_EVQTY-EVQTY_UOM ).
***       Area
          when 'SURFAC'.
            data(LS_WEBWI) = LR_PR_RLCONI->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
            if LS_WEBWI-WEBWI_UOM is not initial.
***           Convert Area to Length
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_EVQTY-EVQTY
                                                                  IF_CALCV_UOM_1 = CS_EVQTY-EVQTY_UOM
                                                                  IF_CALCV_2     = LS_WEBWI-WEBWI
                                                                  IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                        importing EF_CALCV       = CS_EVQTY-EVQTY
                                                                  EF_CALCV_UOM   = CS_EVQTY-EVQTY_UOM ).
            else.
              clear CS_EVQTY.
            endif.
        endcase.
    endcase.

  endmethod.
  method CREATE_BL_PRTE.

    data: LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

    if IR_RTE_PRTE is bound.
      move IR_RTE_PRTE to LR_RTE_PRTE.
    else.
      create object LR_RTE_PRTE.
    endif.

    create object RR_BL_PRTE
      type ZCL_VCXI_P1SR_BL_PRTE
      exporting
        IR_RTE_PRTE  = LR_RTE_PRTE
        IR_MFMI      = ME->R_MFMI
        IR_MFSI      = ME->R_MFSI
        IT_CSPLIT    = ME->T_CSPLIT
        IF_DATE      = ME->F_DATE
        IF_LIFNR_REQ = ABAP_TRUE.

*** Set Material Flow Ratio
    cast ZCL_VCXI_PXSR_BL_PRTE( RR_BL_PRTE )->SET_MFRAT( IF_MFRAT = ME->GET_MFRAT( ) ).

  endmethod.
  method CREATE_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Create Instance based on ID
    case IF_IPSTP.
***   Inline Printing
      when ZCL_VCXI_P1SR_BL_PSTEP_INLPR=>C_IPSTP_INLPR.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_INLPR
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Corrugation
      when ZCL_VCXI_P1SR_BL_PSTEP_CORR=>C_IPSTP_CORR.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_CORR
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Tape
      when ZCL_VCXI_P1SR_BL_PSTEP_TAPE=>C_IPSTP_TAPE.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_TAPE
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Waxing
      when ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_IPSTP_WAX.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_WAX
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Fanfolding
      when ZCL_VCXI_P1SR_BL_PSTEP_FANF=>C_IPSTP_FANF.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_FANF
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Winding
      when ZCL_VCXI_P1SR_BL_PSTEP_WIND=>C_IPSTP_WIND.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_WIND
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Lamination
      when ZCL_VCXI_P1SR_BL_PSTEP_LAMI=>C_IPSTP_LAMI_INL or
           ZCL_VCXI_P1SR_BL_PSTEP_LAMI=>C_IPSTP_LAMI_STS.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_LAMI
          exporting
            IF_IPSTP   = IF_IPSTP
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Chopping
      when ZCL_VCXI_P1SR_BL_PSTEP_CHOP=>C_IPSTP_CHOP.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_CHOP
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Die Cut
      when ZCL_VCXI_P1SR_BL_PSTEP_DCUT=>C_IPSTP_DCUT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_DCUT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Embossing
      when ZCL_VCXI_P1SR_BL_PSTEP_EMBOS=>C_IPSTP_EMBOS.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_EMBOS
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Slot/Slit/Score
      when ZCL_VCXI_P1SR_BL_PSTEP_SSS=>C_IPSTP_SSS.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_SSS
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Attachment Die Cutting
      when ZCL_VCXI_P1SR_BL_PSTEP_ATDCT=>C_IPSTP_ATDCT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_ATDCT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Printing
      when ZCL_VCXI_P1SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_PRINT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Closing
      when ZCL_VCXI_P1SR_BL_PSTEP_CLOS=>C_IPSTP_CLOS.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_CLOS
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Guillotining
      when ZCL_VCXI_P1SR_BL_PSTEP_GUIL=>C_IPSTP_GUIL.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_GUIL
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Conversion Tape
      when ZCL_VCXI_P1SR_BL_PSTEP_CTAPE=>C_IPSTP_CTAPE.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_CTAPE
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Label Application
      when ZCL_VCXI_P1SR_BL_PSTEP_LABEL=>C_IPSTP_LABEL.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_LABEL
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Window Patching
      when ZCL_VCXI_P1SR_BL_PSTEP_WPATCH=>C_IPSTP_WPATCH.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_WPATCH
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Additional Step
      when ZCL_VCXI_P1SR_BL_PSTEP_ADSTP=>C_IPSTP_ADSTP.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P1SR_BL_PSTEP_ADSTP
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    endcase.

***------------------------------------------------------------------------------------------------
    if RR_BL_PSTEP is bound.
***   Initialize Production Step
      RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
      RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
      RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = IT_PRVDR ).
    else.
***   Create via SUPER
      RR_BL_PSTEP = SUPER->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                            IT_PRVDR = IT_PRVDR
                                            IF_COMBW = IF_COMBW ).
    endif.

  endmethod.
  method GET_ACTIVE_BOARD.

    data: LT_GATE_BOARD type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.

    LT_GATE_BOARD = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                           IF_INUSE = ABAP_TRUE ).


    loop at LT_GATE_BOARD into LR_GATE.

***   Get Board Reference
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
          if LR_PR_BOARD is bound.
            if LR_PR_BOARD->IS_ACTIVE_BOARD( ) eq ABAP_TRUE.
              exit.
            else.
              clear LR_PR_BOARD.
            endif.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

    endloop.

    check LR_PR_BOARD is bound.

    move LR_GATE to RR_GATE_BOARD.

  endmethod.
  method GET_BL_PSTEP_CORR.

    data: LT_PRVDR_CORR     type /VCXI/VKSR_TT_GATE,
          LT_GATE_CORR      type /VCXI/VKSR_TT_GATE,
          LT_GATE_BOARD     type /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_PAPER  type /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_STARCH type /VCXI/VKSR_TT_GATE,
          LT_GATE_PRPLIN    type /VCXI/VKSR_TT_GATE.
    data: LR_ARBPL         type ref to /VCXI/CL_VSMC_ARBPL,
          LR_GATE_BOARD    type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_PSTEP_CORR type ref to ZCL_VCXI_P1SR_BL_PSTEP_CORR.


***--------------------------------------------------------------------------------------
*** Find Provider for Corrugation
    LT_GATE_CORR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_CORR=>C_IPRVT_P1_CORR
                                          IF_INUSE = ABAP_TRUE ).
    check LT_GATE_CORR is not initial.

*** Ensure Work Center is defined
    cast ZCL_VCXI_P1SS_PR_CORR( LT_GATE_CORR[ 1 ]->R_CLSPR )->GET_ARBPL( importing ER_ARBPL = LR_ARBPL ).
    check LR_ARBPL is bound.

**** Find Provider for Board
    move ME->GET_ACTIVE_BOARD( ) to LR_GATE_BOARD.
    check LR_GATE_BOARD is bound.
    append LR_GATE_BOARD to LT_GATE_BOARD.

*** Find Provider for Paper
    LT_GATE_MS_PAPER = LR_GATE_BOARD->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER
                                                 IF_INUSE = ABAP_TRUE ).

*** Find Provider for Starch
    LT_GATE_MS_STARCH = LR_GATE_BOARD->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_STARCH=>C_IPRVT_P1_MS_STARCH
                                                  IF_INUSE = ABAP_TRUE ).

*** Find Provider for Preprint Liner
    LT_GATE_PRPLIN = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                            IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Collect all Provider
    refresh LT_PRVDR_CORR.
    append lines of LT_GATE_CORR      to LT_PRVDR_CORR.
    append lines of LT_GATE_BOARD     to LT_PRVDR_CORR.
    append lines of LT_GATE_MS_PAPER  to LT_PRVDR_CORR.
    append lines of LT_GATE_MS_STARCH to LT_PRVDR_CORR.
    append lines of LT_GATE_PRPLIN    to LT_PRVDR_CORR.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_CORR ).
    delete adjacent duplicates from LT_PRVDR_CORR comparing TABLE_LINE.

*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_CORR=>C_IPSTP_CORR
                                IT_PRVDR = LT_PRVDR_CORR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP.

    SUPER->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = IR_GATE_CSTEP
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step Conversion Step - Lamination
    ME->GET_BL_PSTEP_CSTEP_LAMI( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Chopping
    ME->GET_BL_PSTEP_CSTEP_CHOP( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Printing
    ME->GET_BL_PSTEP_CSTEP_PRINT( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Slit/Slot/Score
    ME->GET_BL_PSTEP_CSTEP_SSS( exporting IR_GATE     = IR_GATE_CSTEP
                                changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Attachment Die Cutting
    ME->GET_BL_PSTEP_CSTEP_ATDCT( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Die Cutting
    ME->GET_BL_PSTEP_CSTEP_DCUT( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Embossing
    ME->GET_BL_PSTEP_CSTEP_EMBOS( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Closing
    ME->GET_BL_PSTEP_CSTEP_CLOS( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Guillotining
    ME->GET_BL_PSTEP_CSTEP_GUIL( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Conversion Tape
    ME->GET_BL_PSTEP_CSTEP_CTAPE( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Label Application
    ME->GET_BL_PSTEP_CSTEP_LABEL( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Window Patching
    ME->GET_BL_PSTEP_CSTEP_WPATCH( exporting IR_GATE     = IR_GATE_CSTEP
                                   changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Additional Step
    ME->GET_BL_PSTEP_CSTEP_ADSTP( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Fanfolding
    ME->GET_BL_PSTEP_CSTEP_FANF( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Winding
    ME->GET_BL_PSTEP_CSTEP_WIND( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_ADSTP.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_ADSTP type ref to ZCL_VCXI_P1SS_PR_CSTEP_ADSTP,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Apply Additional Materials
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_ADSTP.
    LR_PR_CSTEP_ADSTP = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_ADSTP is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Additional Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_ADMAT=>C_IPRVT_PX_MS_ADMAT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_ADSTP=>C_IPSTP_ADSTP
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_ATDCT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_ATDCT type ref to ZCL_VCXI_P1SS_PR_CSTEP_ATDCT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Attachment Die Cutting
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_ATDCT.
    LR_PR_CSTEP_ATDCT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_ATDCT is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Attachment Die Cut Tools
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_ATDCTT=>C_IPRVT_PX_MS_ATDCTT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_ATDCT=>C_IPSTP_ATDCT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_CHOP.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_CHOP type ref to ZCL_VCXI_P1SS_PR_CSTEP_CHOP.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Chopping
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_CHOP.
    LR_PR_CSTEP_CHOP = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_CHOP is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_CHOP=>C_IPSTP_CHOP
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_CLOS.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_CLOS type ref to ZCL_VCXI_P1SS_PR_CSTEP_CLOS,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Closing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_CLOS.
    LR_PR_CSTEP_CLOS = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_CLOS is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Joints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_CLOS=>C_IPSTP_CLOS
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_CTAPE.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_CTAPE type ref to ZCL_VCXI_P1SS_PR_CSTEP_CTAPE,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Apply Conversion Tape
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_CTAPE.
    LR_PR_CSTEP_CTAPE = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_CTAPE is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Conversion Tape
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_CTAPE=>C_IPRVT_PX_MS_CTAPE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_CTAPE=>C_IPSTP_CTAPE
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_DCUT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_CSTEP_DCUT,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Die Cutting
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_DCUT.
    LR_PR_CSTEP_DCUT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_DCUT is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Embossment
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_EMBOS=>C_IPRVT_PX_EMBOS
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

*** Embossing Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_EMBMAT=>C_IPRVT_PX_MS_EMBMAT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_DCUT=>C_IPSTP_DCUT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_EMBOS.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_EMBOS type ref to ZCL_VCXI_P1SS_PR_CSTEP_EMBOS,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Embossing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_EMBOS.
    LR_PR_CSTEP_EMBOS = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_EMBOS is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Embossment
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_EMBOS=>C_IPRVT_PX_EMBOS
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

*** Embossing Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_EMBMAT=>C_IPRVT_PX_MS_EMBMAT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_EMBOS=>C_IPSTP_EMBOS
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_FANF.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_FANF type ref to ZCL_VCXI_P1SS_PR_CSTEP_FANF.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Fanfolding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_FANF.
    LR_PR_CSTEP_FANF = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_FANF is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_FANF=>C_IPSTP_FANF
                                IT_PRVDR = LT_PRVDR
                                IF_COMBW = ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_COMBW_PREV ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_GUIL.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_GUIL type ref to ZCL_VCXI_P1SS_PR_CSTEP_GUIL.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Guillotining
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_GUIL.
    LR_PR_CSTEP_GUIL = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_GUIL is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_GUIL=>C_IPSTP_GUIL
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_LABEL.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_LABEL type ref to ZCL_VCXI_P1SS_PR_CSTEP_LABEL,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Label Application
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_LABEL.
    LR_PR_CSTEP_LABEL = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_LABEL is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Labels
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_LABEL=>C_IPRVT_PX_MS_LABEL
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_LABEL=>C_IPSTP_LABEL
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_LAMI.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_LAMI type ref to ZCL_VCXI_P1SS_PR_CSTEP_LAMI,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Lamination (Sheet-to-Sheet)
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_LAMI.
    LR_PR_CSTEP_LAMI = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_LAMI is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Get MS Lamination Glue
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_LGLUE=>C_IPRVT_PX_MS_LGLUE
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

*** Lamination Sheets
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_LAMI=>C_IPSTP_LAMI_STS
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_PRINT.

    types: begin of YS_PRPTH_PRVDR,
             PRPTH   type ZVCXI_PXS_PRPTH,
             T_PRVDR type /VCXI/VKSR_TT_GATE,
           end of YS_PRPTH_PRVDR.

    data: LF_ACONO type ZVCXI_P0SS_ACONO,
          LF_PRPTH type ZVCXI_PXS_PRPTH.
    data: LT_GATE_INK    type /VCXI/VKSR_TT_GATE,
          LT_GATE_MARK   type /VCXI/VKSR_TT_GATE,
          LT_PRPTH_PRVDR type table of YS_PRPTH_PRVDR.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_P1SS_PR_CSTEP_PRINT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_PRPTH_PRVDR> type YS_PRPTH_PRVDR.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Printing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_PRINT.
    LR_PR_CSTEP_PRINT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_PRINT is bound.

*** Get MS (Digital) Inks and filter to current Print
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    loop at LT_GATE_INK into LR_GATE.
      if not LR_GATE->IS_IN_LINE( IR_GATE ).
        delete LT_GATE_INK.
      endif.
    endloop.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_INK ).

*** Get Marking and filter to current Print
    LT_GATE_MARK = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                                          IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_MARK into LR_GATE.
      if not LR_GATE->IS_IN_LINE( IR_GATE ).
        delete LT_GATE_MARK.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Assign Inks and Markings to Print Path
    loop at LT_GATE_INK into LR_GATE.
      LF_ACONO = SY-TABIX.
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_PXSS_PR_MS_INK.
          LF_PRPTH = cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->GET_PRPTH( ).
        when others.
          LF_PRPTH = 1.
      endcase.

      if LINE_EXISTS( LT_PRPTH_PRVDR[ PRPTH = LF_PRPTH ] ).
        assign LT_PRPTH_PRVDR[ PRPTH = LF_PRPTH ] to <S_PRPTH_PRVDR>.
      else.
        append value #( PRPTH = LF_PRPTH
                        T_PRVDR = value #( ( IR_GATE ) ) ) to LT_PRPTH_PRVDR assigning <S_PRPTH_PRVDR>.
      endif.
      append LR_GATE to <S_PRPTH_PRVDR>-T_PRVDR.

      loop at LT_GATE_MARK into LR_GATE.
        if cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_ACONO( ) eq LF_ACONO.
          append LR_GATE to <S_PRPTH_PRVDR>-T_PRVDR.
        endif.
      endloop.
    endloop.
    sort LT_PRPTH_PRVDR by PRPTH.

*** Fallback to ensure Print is created even w/o inks
    if LT_PRPTH_PRVDR is initial.
      append value #( T_PRVDR = value #( ( IR_GATE ) ) ) to LT_PRPTH_PRVDR.
    endif.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    loop at LT_PRPTH_PRVDR assigning <S_PRPTH_PRVDR>.
      append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT
                                  IT_PRVDR = <S_PRPTH_PRVDR>-T_PRVDR ) to CT_BL_PSTEP.
    endloop.

  endmethod.
  method GET_BL_PSTEP_CSTEP_SSS.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_SSS type ref to ZCL_VCXI_P1SS_PR_CSTEP_SSS.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Slit/Slot/Score
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_SSS.
    LR_PR_CSTEP_SSS = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_SSS is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_SSS=>C_IPSTP_SSS
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_WIND.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_WIND type ref to ZCL_VCXI_P1SS_PR_CSTEP_WIND.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Winding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_WIND.
    LR_PR_CSTEP_WIND = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_WIND is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_WIND=>C_IPSTP_WIND
                                IT_PRVDR = LT_PRVDR
                                IF_COMBW = ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_COMBW_PREV ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_WPATCH.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_WPATCH type ref to ZCL_VCXI_P1SS_PR_CSTEP_WPATCH,
          LR_GATE            type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is CSTEP Window Patching
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_WPATCH.
    LR_PR_CSTEP_WPATCH = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_WPATCH is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Window Patches
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_WPATCH=>C_IPRVT_PX_MS_WPATCH
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_WPATCH=>C_IPSTP_WPATCH
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_INLPR.

    data: LT_GATE_INPLIN type /VCXI/VKSR_TT_GATE,
          LT_GATE_INK    type /VCXI/VKSR_TT_GATE,
          LT_GATE_MARK   type /VCXI/VKSR_TT_GATE,
          LT_PRVDR       type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPLIN type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Inline Printed Liner
    LT_GATE_INPLIN = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_INPLIN=>C_IPRVT_P1_INPLIN
                                            IF_INUSE = ABAP_TRUE ).
    check LT_GATE_INPLIN is not initial.

*** Get MS (Digital) Inks and Marking
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    LT_GATE_MARK = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                                          IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Create Production Step per Liner
    loop at LT_GATE_INPLIN into LR_GATE_INPLIN.

***   Define Provider
      LT_PRVDR = value #( ( LR_GATE_INPLIN ) ).

      loop at LT_GATE_INK into LR_GATE.
        if LR_GATE->IS_IN_LINE( LR_GATE_INPLIN ).
          append LR_GATE to LT_PRVDR.
        endif.
      endloop.

      loop at LT_GATE_MARK into LR_GATE.
        if LR_GATE->IS_IN_LINE( LR_GATE_INPLIN ).
          append LR_GATE to LT_PRVDR.
        endif.
      endloop.

      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR ).
      delete adjacent duplicates from LT_PRVDR comparing TABLE_LINE.

***--------------------------------------------------------------------------------------
***   Create BL PStep
      append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_INLPR=>C_IPSTP_INLPR
                                  IT_PRVDR = LT_PRVDR
                                  IF_COMBW = ZCL_VCXI_P1SR_BL_PSTEP_INLPR=>C_COMBW_NEXT ) to CT_BL_PSTEP.
    endloop.

  endmethod.
  method GET_BL_PSTEP_INPUT.

    SUPER->GET_BL_PSTEP_INPUT( exporting IR_GATE_INPUT = IR_GATE_INPUT
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step - Inline Printing
    ME->GET_BL_PSTEP_INLPR( exporting IR_GATE_INPUT = IR_GATE_INPUT
                            changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

*** BL Production Step - Tape
    ME->GET_BL_PSTEP_TAPE( exporting IR_GATE_INPUT = IR_GATE_INPUT
                           changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

*** BL Production Step - Corrugation
    ME->GET_BL_PSTEP_CORR( exporting IR_GATE_INPUT = IR_GATE_INPUT
                           changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

*** BL Production Step - Wax
    ME->GET_BL_PSTEP_WAX( exporting IR_GATE_INPUT = IR_GATE_INPUT
                          changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

*** BL Production Step - Lamination (Inline)
    ME->GET_BL_PSTEP_LAMI( exporting IR_GATE_INPUT = IR_GATE_INPUT
                           changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_LAMI.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_LAMI type ref to ZCL_VCXI_P1SS_PR_CSTEP_LAMI,
          LR_GATE_LAMI     type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Find Provider for Litho-Lamination (Inline)
    ME->GET_PRVDR_LAMI( importing ER_GATE = LR_GATE_LAMI ).
    check LR_GATE_LAMI is bound.

*** Define Provider
    append IR_GATE_INPUT to LT_PRVDR.
    append LR_GATE_LAMI  to LT_PRVDR.

*** Get Corrugation
    ME->GET_PRVDR_CORR( importing ER_GATE = LR_GATE ).
    check LR_GATE is bound.
    append LR_GATE to LT_PRVDR.

*** Get MS Lamination Glue
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_LGLUE=>C_IPRVT_PX_MS_LGLUE
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      if LR_GATE->IS_IN_LINE( LR_GATE_LAMI ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

*** Lamination Sheets
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      if LR_GATE->IS_IN_LINE( LR_GATE_LAMI ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_LAMI=>C_IPSTP_LAMI_INL
                                IT_PRVDR = LT_PRVDR
                                IF_COMBW = ZCL_VCXI_PXSR_BL_PSTEP=>C_COMBW_PREV ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_SSTEP.

    SUPER->GET_BL_PSTEP_SSTEP( exporting IR_GATE_SSTEP = IR_GATE_SSTEP
                                         IT_PRVDR_OUT  = IT_PRVDR_OUT
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step Separation Step - Die Cutting
    ME->GET_BL_PSTEP_SSTEP_DCUT( exporting IR_GATE      = IR_GATE_SSTEP
                                           IT_PRVDR_OUT = IT_PRVDR_OUT
                                 changing  CT_BL_PSTEP  = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_SSTEP_DCUT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_SSTEP_DCUT,
          LR_GATE_OUTPUT   type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Die Cutting
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_SSTEP_DCUT.
    LR_PR_SSTEP_DCUT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_SSTEP_DCUT is bound.

*** Get Output
    ME->GET_PRVDR_OUTPUT( importing ER_GATE = LR_GATE_OUTPUT ).

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).
    append LR_GATE_OUTPUT to LT_PRVDR.
    append lines of IT_PRVDR_OUT to LT_PRVDR.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_DCUT=>C_IPSTP_DCUT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_TAPE.

    data: LT_GATE_CORR type /VCXI/VKSR_TT_GATE,
          LT_TAPE_AP   type ZVCXI_PXSS_TT_TAPE_AP,
          LT_PRVDR     type /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Corrugation
    LT_GATE_CORR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_CORR=>C_IPRVT_P1_CORR
                                          IF_INUSE = ABAP_TRUE ).
    check LT_GATE_CORR is not initial.


    cast ZCL_VCXI_P1SS_PR_CORR( LT_GATE_CORR[ 1 ]->R_CLSPR )->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_TAPE_AP = LT_TAPE_AP ).
    delete LT_TAPE_AP where FAPPL is initial.
    check LT_TAPE_AP is not initial.

***--------------------------------------------------------------------------------------
*** Define Provider
    refresh LT_PRVDR.
    append lines of LT_GATE_CORR to LT_PRVDR.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR ).
    delete adjacent duplicates from LT_PRVDR comparing TABLE_LINE.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_TAPE=>C_IPSTP_TAPE
                                IT_PRVDR = LT_PRVDR
                                IF_COMBW = ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_COMBW_NEXT ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_WAX.

    data: LT_GATE_CORR type        /VCXI/VKSR_TT_GATE,
          LT_GATE_WAX  type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_BOARD   type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Corrugation
    LT_GATE_CORR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_CORR=>C_IPRVT_P1_CORR
                                          IF_INUSE = ABAP_TRUE ).
    check LT_GATE_CORR is not initial.

*** Find Provider for Board
    move ME->GET_ACTIVE_BOARD( ) to LR_GATE_BOARD.
    check LR_GATE_BOARD is bound.

*** Find Provider for Wax
    LT_GATE_WAX = LR_GATE_BOARD->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_WAX=>C_IPRVT_P1_MS_WAX
                                            IF_INUSE = ABAP_TRUE ).
    check LT_GATE_WAX is not initial.

***--------------------------------------------------------------------------------------
*** Define Provider
    refresh LT_PRVDR.
    append lines of LT_GATE_CORR to LT_PRVDR.
    append lines of LT_GATE_WAX  to LT_PRVDR.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR ).
    delete adjacent duplicates from LT_PRVDR comparing TABLE_LINE.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_IPSTP_WAX
                                IT_PRVDR = LT_PRVDR
                                IF_COMBW = ZCL_VCXI_P1SR_BL_PSTEP_WAX=>C_COMBW_PREV ) to CT_BL_PSTEP.

  endmethod.
  method GET_CSPLIT.

    data: LR_PR_OUTPUT  type ref to ZCL_VCXI_P1SS_PR_OUTPUT,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


*** Get Provider for Output
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( ).
    check LR_PR_OUTPUT is bound.

*** Get Cost Split Distribution by Backward Property (Outbound)
    LR_BL_CRBPROP = LR_PR_OUTPUT->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    check LR_BL_CRBPROP is bound and
          LINES( LR_BL_CRBPROP->T_CSPLIT ) gt 1.

*** Add Component Cost Split
    RT_CSPLIT = value #( for LS_CSPLIT in LR_BL_CRBPROP->T_CSPLIT
                                       where ( DCSPL is not initial )
                                       ( ICSPL   = LS_CSPLIT-ICSPL
                                         S_DCSPL = LS_CSPLIT-S_DCSPL
                                         COMPR   = LS_CSPLIT-COMPR
                                         QFACT   = LS_CSPLIT-QFACT ) ).

  endmethod.
  method GET_ICELM.

    move 'P1_BOX' to RF_ICELM.

  endmethod.
  method GET_IMFXC_GATE_EXCL.

*** Exclude Standard Gates
    RT_GATE = SUPER->GET_IMFXC_GATE_EXCL( ).

*** Exclude Litho-Lamination (Inline)
    ME->GET_PRVDR_LAMI( importing ER_GATE = data(LR_GATE_LAMI) ).
    if LR_GATE_LAMI is bound.
      append LR_GATE_LAMI to RT_GATE.
    endif.

  endmethod.
  method GET_MFMI.

    data: LS_MFMI_P type ZVCXI_PCSR_S_MFMI_P,
          LS_SHTLE  type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI  type ZVCXI_P0SS_S_SHTWI,
          LS_CALIP  type ZVCXI_P0SS_S_CALIP,
          LS_BAWGT  type ZVCXI_P0S_S_BAWGT,
          LS_BAWGP  type ZVCXI_P0S_S_BAWGP.
    data: LT_GATE   type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CRPROC type ref to ZCL_VCXI_P1SS_PR_MS_CRPROC,
          LR_GATE         type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_MFMI> type standard table.


***------------------------------------------------------------------------------------------------
*** Get Input Provider
    ME->GET_PRVDR_INPUT( importing ER_GATE = LR_GATE_INPUT ).
    check LR_GATE_INPUT is bound.

*** Find Provider for Procurement
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_CRPROC=>C_IPRVT_P1_MS_CRPROC
                                     IF_INUSE = ABAP_TRUE ).
*** Filter to direct Input Childs
    loop at LT_GATE into LR_GATE.
      if not LR_GATE_INPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ).
        delete LT_GATE.
      endif.
    endloop.
    check LT_GATE is not initial.
    LR_PR_MS_CRPROC ?= LT_GATE[ 1 ]->R_CLSPR.
    check LR_PR_MS_CRPROC is bound.

***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_MFMI type table of ZVCXI_PCSR_S_MFMI_P.
    assign RR_MFMI->* to <T_MFMI>.

    LS_MFMI_P-MATNR = LR_PR_MS_CRPROC->GET_MATNR( ).
    LS_MFMI_P-TEXT  = LR_PR_MS_CRPROC->GET_MAKTX( ).

    LS_MFMI_P-S_KAUSF   = LR_PR_MS_CRPROC->GET_KAUSF( ).

    LS_MFMI_P-MFISP     = 100.
    LS_MFMI_P-MFISP_UOM = '%'.
    LS_MFMI_P-MFICF     = 1.
    LS_MFMI_P-MFICP     = 1.

    LS_MFMI_P-SANKA     = LR_PR_MS_CRPROC->GET_SANKA( ).

*** Sheet Dimension
    LR_PR_MS_CRPROC->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                                   ES_SHTWI = LS_SHTWI ).
    LS_MFMI_P-PCLEN     = LS_SHTLE-SHTLE.
    LS_MFMI_P-PCLEN_UOM = LS_SHTLE-SHTLE_UOM.
    LS_MFMI_P-PCWID     = LS_SHTWI-SHTWI.
    LS_MFMI_P-PCWID_UOM = LS_SHTWI-SHTWI_UOM.

*** Caliper as PC Height
    LS_CALIP = LR_PR_MS_CRPROC->GET_CALIP( ).
    LS_MFMI_P-PCHEI     = LS_CALIP-CALIP.
    LS_MFMI_P-PCHEI_UOM = LS_CALIP-CALIP_UOM.

*** Surface Weight as Base Weight
    LR_PR_MS_CRPROC->GET_SURWT( importing ES_BAWGT = LS_BAWGT
                                          ES_BAWGP = LS_BAWGP ).
    LS_MFMI_P = corresponding #( base ( LS_MFMI_P ) LS_BAWGT ).
    LS_MFMI_P = corresponding #( base ( LS_MFMI_P ) LS_BAWGP ).

    LS_MFMI_P-PCUPS = LR_PR_MS_CRPROC->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( ).
    LS_MFMI_P-PCDIR = 'A'.

*** Determine PC Type based on Backward Property
    LS_MFMI_P-PCTYP = ME->GET_PCTYP_BY_BL_CRBPROP( IR_BL_CRBPROP = LR_PR_MS_CRPROC->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ) ).
    LS_MFMI_P-FLUTE = LR_PR_MS_CRPROC->GET_FLUTE( ).

*** Purchase Information
    LS_MFMI_P-PURCH    = LR_PR_MS_CRPROC->GET_PURCH( ).
    LS_MFMI_P-LIFNR    = LR_PR_MS_CRPROC->GET_LIFNR( ).
    LS_MFMI_P-T_PSCALE = ME->GET_PSCALE( IR_GATE_PARENT = LT_GATE[ 1 ] ).

*** Append Material Flow Material to Data Reference
    append LS_MFMI_P to <T_MFMI>.

  endmethod.
  method GET_MFSI.

    data: LF_FLUTE type ZVCXI_PCS_FLUTE.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.
    data: LT_GATE    type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.
    field-symbols: <T_MFSI>         type standard table.


***--------------------------------------------------------------------------------------
*** Get Input Provider
    ME->GET_PRVDR_INPUT( importing ER_GATE = LR_GATE_INPUT ).
    check LR_GATE_INPUT is bound.

*** Find Provider for Connector In
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
*** Filter to direct Input Childs
    loop at LT_GATE into LR_GATE.
      if not LR_GATE_INPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ).
        delete LT_GATE.
      endif.
    endloop.
    check LT_GATE is not initial.

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_MFSI type table of ZVCXI_PCSR_S_MFSI_P.
    assign RR_MFSI->* to <T_MFSI>.

    loop at LT_GATE into LR_GATE.
***   Get Handling Dimensions based on Corrugator Forward Property (Inbound)
      LR_BL_CRFPROP = cast ZIF_VCXI_P1SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_CRFPX( ).
      if LR_BL_CRFPROP is bound.
        LS_HNDDIM = LR_BL_CRFPROP->S_HNDDIM.
        LF_FLUTE  = LR_BL_CRFPROP->F_FLUTE.
      else.
        clear: LS_HNDDIM,
               LF_FLUTE.
      endif.

***   Add PC Dimension
      append value ZVCXI_PCSR_S_MFSI_P( PCLEN     = LS_HNDDIM-HNDLE
                                        PCLEN_UOM = LS_HNDDIM-HNDLE_UOM
                                        PCWID     = LS_HNDDIM-HNDWI
                                        PCWID_UOM = LS_HNDDIM-HNDWI_UOM
                                        PCHEI     = LS_HNDDIM-HNDHE
                                        PCHEI_UOM = LS_HNDDIM-HNDHE_UOM

                                        PCUPS     = cast ZIF_VCXI_P1SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_NOUPS( )
                                        NOOUT     = '1'
                                        PCDIR     = 'A'
                                        PCTYP     = ME->GET_PCTYP_BY_BL_CRBPROP( IR_BL_CRBPROP = cast ZIF_VCXI_P1SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_CRBPX( ) )
                                        FLUTE     = LF_FLUTE
                                      ) to <T_MFSI>.
    endloop.

  endmethod.
  method GET_PCTYP_BY_BL_CRBPROP.

    if IR_BL_CRBPROP is bound.
      RF_PCTYP = switch #( IR_BL_CRBPROP->F_FEFCO(2) when '01' then 'ZVCXI_P0_SHEET'
                                                               else 'ZVCXI_P0_PRODUCT' ).
    else.
      clear: RF_PCTYP.
    endif.

  endmethod.
  method GET_PRVDR_CORR.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_CORR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Corrugation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_CORR=>C_IPRVT_P1_CORR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_CORR.

  endmethod.
  method GET_PRVDR_LAMI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Lamination
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_LAMI=>C_IPRVT_P1_LAMI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_LAMI.

  endmethod.
