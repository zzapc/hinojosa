
class ZCL_VCXI_PXSS_PR_MS_LGLUE definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PX_MS_LGLUE type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_LGLUE' ##NO_TEXT.
  constants C_PARID_TLGLC type /VCXI/VKS_PARID value 'ZVCXI_PX_TLGLC' ##NO_TEXT.
  constants C_ATTID_DEFAULT_TLGLC type /VCXI/VKS_ATTID value 'DEFAULT_TLGLC' ##NO_TEXT.

  methods GET_LGLCD
    returning
      value(RF_LGLCD) type ZVCXI_PXS_LGLCD
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_APWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_UOMC6 type /VCXI/CKX_UOMC6
    returning
      value(RS_APWGT) type ZVCXI_PXS_S_APWGT
    raising
      /VCXI/CX_CKX .
  methods GET_SLDCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SLDCO) type ZVCXI_PXS_S_SLDCO
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_UOMC6 type /VCXI/CKX_UOMC6
    returning
      value(RS_SURWT) type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_TLGLC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_TLGLC) type ZVCXI_PXS_TLGLC
    raising
      /VCXI/CX_CKX .
  methods SET_TLGLC
    importing
      !IF_TLGLC type ZVCXI_PXS_TLGLC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_APWGT type /VCXI/VKSC_IEVNT value 'RECALC_APWGT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_APWGT_CHANGED type /VCXI/VKSC_IEVNT value 'APWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SLDCO_CHANGED type /VCXI/VKSC_IEVNT value 'SLDCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLGLC_CHANGED type /VCXI/VKSC_IEVNT value 'TLGLC_CHANGED' ##NO_TEXT.
  constants C_PARID_APWGT type /VCXI/VKS_PARID value 'ZVCXI_PX_APWGT' ##NO_TEXT.
  constants C_PARID_SLDCO type /VCXI/VKS_PARID value 'ZVCXI_PX_SLDCO' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  data R_CUST_LGLUE type ref to ZCL_VCXI_PXSS_CUST_LGLUE .

  methods CHECK_APWGT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLGLC
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods SET_APWGT
    importing
      !IS_APWGT type ZVCXI_PXS_S_APWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_LAMI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_LAMI) type ref to ZIF_VCXI_PXSS_LAMI
    raising
      /VCXI/CX_CKX .
  methods SET_SLDCO
    importing
      !IS_SLDCO type ZVCXI_PXS_S_SLDCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_APWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_LGLUE definition
class ZCL_VCXI_PXSS_PR_MS_LGLUE implementation.
  method CHECK_APWGT.

*** Check Application Weight
    if ME->GET_APWGT( )-APWGT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Application Weight is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '204' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Application Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      endif.
    endif.

  endmethod.
  method CHECK_TLGLC.

*** Check Consumption Type
    if ME->GET_TLGLC( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Glue Consumption Type is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '301' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Glue Consumption Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '302' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_W to ME->F_PARID_PRICP.
    move C_PARID_AVGCO_W to ME->F_PARID_AVGCO.
    move C_PARID_AVGCP_A to ME->F_PARID_AVGCP.

  endmethod.
  method GET_APWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).
    move LS_PARAM-ATFLV to RS_APWGT-APWGT.
    move LS_PARAM-UNIT  to RS_APWGT-APWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    EF_UOMC6 = LS_PARAM-UNIT.

  endmethod.
  method GET_LGLCD.

    data: LR_LAMI type ref to ZIF_VCXI_PXSS_LAMI.


*** Get Lamination Provider
    LR_LAMI = ME->GET_PRVDR_LAMI( ).

***--------------------------------------------------------------------------------------
    if LR_LAMI is bound.
      RF_LGLCD = LR_LAMI->GET_LGLCD( ).
    endif.

  endmethod.
  method GET_PRVDR_LAMI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_LAMI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Lamination (Interface)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_LAMI=>C_IPRVT_PX_LAMI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_LAMI.

  endmethod.
  method GET_SLDCO.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move LS_PARAM-ATFLV to RS_SLDCO-SLDCO.
    move LS_PARAM-UNIT  to RS_SLDCO-SLDCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Glue Consumption Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TLGLC( ) ).

*** Check Application Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_APWGT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Glue Consumption Type
    ME->CHECK_TLGLC( IR_MESSAGE = IR_MESSAGE ).

*** Check Application Weight
    ME->CHECK_APWGT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    EF_UOMC6 = LS_PARAM-UNIT.

  endmethod.
  method GET_TLGLC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLGLC ).
    move LS_PARAM-ATWRT to RF_TLGLC.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_APWGT.
        ME->HANDLE_RECALC_APWGT( ).
      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_TLGLC type ZVCXI_PXS_TLGLC,
          LF_DCONF type DATS.
    data: LS_SLDCO type ZVCXI_PXS_S_SLDCO,
          LS_APWGT type ZVCXI_PXS_S_APWGT.


***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    move ME->GET_TLGLC( )  to LF_TLGLC.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_LGLUE          is bound    and
       ME->R_CUST_LGLUE->F_MATNR eq LF_MATNR and
       ME->R_CUST_LGLUE->F_WERKS eq LF_WERKS and
       ME->R_CUST_LGLUE->F_TLGLC eq LF_TLGLC.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR, ME->R_CUST_LGLUE.

***--------------------------------------------------------------------------------------
*** Load the Customizing (including new Material Number)
    try.
        ME->R_CUST_LGLUE = ZCL_VCXI_PXSS_CUST_LGLUE=>GET_INSTANCE_LGLUE( IF_TLGLC = LF_TLGLC
                                                                         IF_WERKS = LF_WERKS
                                                                         IF_DATE  = LF_DCONF ).
      catch /VCXI/CX_CKX.
***     It is not needed to handle Exception
        ME->SET_MATNR( IF_MATNR = value #( ) ).
        exit.
    endtry.

    move ME->R_CUST_LGLUE to ME->R_CUST_MATNR.

*** Set Material based on Customizing
    ME->SET_MATNR( IF_MATNR = ME->R_CUST_MATNR->F_MATNR ).

***--------------------------------------------------------------------------------------
*** Set Values for Real Lamination Glues
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   Set Solid Content and Application Weight
      if ME->R_CUST_LGLUE is bound.
        move ME->R_CUST_LGLUE->S_SLDCO to LS_SLDCO.
      endif.
      ME->SET_SLDCO( IS_SLDCO = LS_SLDCO ).
    endif.

  endmethod.
  method HANDLE_RECALC_APWGT.

    data: LF_CONSF type ZVCXI_P0SP_CONSF.
    data: LS_APWGT type ZVCXI_PXS_S_APWGT.


*** Get Base Application Weight and Consumption Factor
    if ME->R_CUST_LGLUE is bound.
      LS_APWGT = ME->R_CUST_LGLUE->S_APWGT.
      LF_CONSF = ME->R_CUST_LGLUE->GET_CONSF( IF_TLGLC = ME->GET_TLGLC( )
                                              IF_LGLCD = ME->GET_LGLCD( ) ).
    endif.

*** Consider Consumption Factor in Application Weight
    LS_APWGT-APWGT = LS_APWGT-APWGT * LF_CONSF.

*** Set new Application Weight
    ME->SET_APWGT( IS_APWGT = LS_APWGT ).

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_APWGT type ZVCXI_PXS_S_APWGT,
          LS_SLDCO type ZVCXI_PXS_S_SLDCO,
          LS_SURWT type ZVCXI_PXS_S_SURWT.


*** Get Application Weight and Solid Content
    LS_APWGT = ME->GET_APWGT( ).
    LS_SLDCO = ME->GET_SLDCO( ).

*** Calculate Surface Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_APWGT-APWGT
        IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
        IF_CALCV_2     = LS_SLDCO-SLDCO
        IF_CALCV_UOM_2 = LS_SLDCO-SLDCO_UOM
        IF_UOM         = LS_APWGT-APWGT_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
      importing
        EF_CALCV       = LS_SURWT-SURWT
        EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

*** Set new Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_APWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).

    move IS_APWGT-APWGT     to LS_PARAM-ATFLV.
    move IS_APWGT-APWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_APWGT_CHANGED ).
    endif.

  endmethod.
  method SET_SLDCO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move IS_SLDCO-SLDCO      to LS_PARAM-ATFLV.
    move IS_SLDCO-SLDCO_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SLDCO_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TLGLC.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLGLC ).

    move IF_TLGLC to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLGLC_CHANGED ).
    endif.

  endmethod.
