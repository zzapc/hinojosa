
class ZCL_VCXI_F0SS_ND_XCOMP definition
  public
  inheriting from ZCL_VCXI_F0SS_ND
  create public .

public section.

  constants C_UC_RTESPV type SYUCOMM value 'RTESPV' ##NO_TEXT.
  constants C_UC_ADD type SYUCOMM value 'ADD' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_FCODE
    redefinition .
  methods HANDLE_UC_DOUBLE_CLICK
    redefinition .
  methods HANDLE_UC_POPUP_SEL
    redefinition .
protected section.

  data T_PRVDR_DEF type ZVCXI_F0SS_TT_PRVDR_DEF .

  methods ADD_PRVDR
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_PRVDR_DEF
    raising
      /VCXI/CX_CKX .
  methods OPEN_RTESPV
    raising
      /VCXI/CX_CKX .
  methods ADD_NVALS_FOR_COLLAPSED
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP
    returning
      value(RT_BL_PSTEP) type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods INIT_NODE
    redefinition .
private section.
endclass. "ZCL_VCXI_F0SS_ND_XCOMP definition
class ZCL_VCXI_F0SS_ND_XCOMP implementation.
  method ADD_NVALS_FOR_COLLAPSED.

    data: LF_FL               type        NETVALSFL.
    data: LT_BL_PSTEP         type        ZVCXI_XCSR_TT_BL_PSTEP.
    data: LR_BL_PSTEP         type ref to ZCL_VCXI_XCSR_BL_PSTEP.
    field-symbols: <S_NVALS>  type        YS_NVALS.

*** Start Details at.
    move 1 to LF_FL.

*** Get Production Steps BL
    LT_BL_PSTEP = ME->GET_BL_PSTEP( ).

*** Build Texts
    loop at LT_BL_PSTEP into LR_BL_PSTEP.
      add 1 to LF_FL.
      insert initial line into table ME->T_NVALS assigning <S_NVALS>.
      move LF_FL                                                  to <S_NVALS>-FL.
      move LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) to <S_NVALS>-VAL.
    endloop.

  endmethod.
  method ADD_PRVDR.

    data: LF_POSID type /VCXI/VKSR_POSID,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_PRVDR_DEF type ZVCXI_F0SS_S_PRVDR_DEF.


***--------------------------------------------------------------------------------------
*** Check ID
    check IF_ID is not initial.
    move IF_ID to LF_ID.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.

    LF_POSID = LINES( ME->T_PRVDR_DEF ) * 10.

*** Add 5 to insert after selected position
    add 5 to LF_POSID.

***--------------------------------------------------------------------------------------
*** Create Provider
    check LS_PRVDR_DEF-R_PARENT_GATE is bound.

    RR_GATE = LS_PRVDR_DEF-R_PARENT_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
    if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
      RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Assign to cluster - None
    move C_NONE_ASSIGN to ME->F_ASSIGN.

*** Set Node as Expanded
    move ABAP_TRUE to ME->F_EXPANDABLE.

  endmethod.
  method GET_BL_PSTEP.

    data: LT_GATE_RTESPV type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV   type ref to ZCL_VCXI_XCSR_PR_RTESPV.

*** Get Routing Supervisor Gate
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                            IF_INUSE = ABAP_TRUE ).

    read table LT_GATE_RTESPV into LR_GATE_RTESPV index 1.
    check LR_GATE_RTESPV is bound.

*** Get Routing Supervisor PR
    try.
        move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_RTESPV.
    endtry.
    check LR_PR_RTESPV is bound.

    append lines of LR_PR_RTESPV->T_BL_PSTEP to RT_BL_PSTEP.

  endmethod.
  method GET_FCODE.

    data: LS_PRVDR_DEF  type ZVCXI_F0SS_S_PRVDR_DEF.
    field-symbols:  <S_FCODE> type YS_FCODE.

    SUPER->GET_FCODE( importing ET_FCODE = ET_FCODE ).

***--------------------------------------------------------------------------------------
*** Create Popup Menu Entries for Cluster
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_RTESPV                     to <S_FCODE>-FCODE.
    move text-G01                        to <S_FCODE>-TEXT.

    if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***   Initialize Provider Definitions
      ME->INIT_PRVDR_DEF( ).

      if LINES( ME->T_PRVDR_DEF ) is not initial.
***     Create Separation Line
        append initial line to ET_FCODE assigning <S_FCODE>.
        move C_UC_BLANK                      to <S_FCODE>-FCODE.
        move C_TEXT_SEP                      to <S_FCODE>-TEXT.
      endif.

***--------------------------------------------------------------------------------------
***   Add Provider Relations
      loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
        append initial line to ET_FCODE assigning <S_FCODE>.
        concatenate C_UC_ADD LS_PRVDR_DEF-ID   into <S_FCODE>-FCODE separated by '@'.
        concatenate text-M01 LS_PRVDR_DEF-DESCR into <S_FCODE>-TEXT separated by SPACE.
      endloop.
    endif.

  endmethod.
  method HANDLE_UC_DOUBLE_CLICK.

    data: LR_GATE           type ref to /VCXI/CL_VKSR_GATE.
    data: LT_PRVDR          type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** This represents Cluster -> Find Child to open
*** Get possible child provider definitions
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into LR_GATE index 1.
    check SY-SUBRC eq 0.

*** Open Sub Node
    ME->OPEN_UI_CHILD( IR_GATE   = LR_GATE
                       IF_SELECT = ABAP_TRUE ).

  endmethod.
   method HANDLE_UC_POPUP_SEL.

     data: LF_ID       type        /VCXI/CKX_ID.
     data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

***  Call Super
     SUPER->HANDLE_UC_POPUP_SEL( IF_FCODE = IF_FCODE ).

***--------------------------------------------------------------------------------------
*** Determine Action
     try.
***     Trigger specific Add command
         if IF_FCODE cp 'ADD@*'.
           move IF_FCODE+4 to LF_ID.
           ME->ADD_PRVDR( IF_ID = LF_ID ).
         endif.

         case IF_FCODE.
           when C_UC_RTESPV.
***          Open Routing Supervisor
             ME->OPEN_RTESPV( ).
         endcase.

       catch /VCXI/CX_CKX into LR_CX_CKX.
         ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
     endtry.

   endmethod.
  method INIT_NODE.

    data: LR_PR_XCOMP type ref to ZCL_VCXI_F0SS_PR_XCOMP.
    field-symbols:  <S_NVAL>    type        YS_NVALS.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->INIT_NODE( ).

***--------------------------------------------------------------------------------------
*** Check Input Gate is Component
    try.
        move ME->R_GATE->R_CLSPR ?to LR_PR_XCOMP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_XCOMP.
    endtry.
    check LR_PR_XCOMP is bound.

*** Initialize Node Values from Gate
    move 'A' to ME->F_NETTYPE.
    if ME->F_EXPANDED eq ABAP_TRUE.
      move '0' to ME->F_NETTYPE.
    endif.

*** Set additional Values if collapsed
    if ME->F_EXPANDED eq ABAP_FALSE.
      ME->ADD_NVALS_FOR_COLLAPSED( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Node Description
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 0.
    <S_NVAL>-VAL  = LR_PR_XCOMP->GET_DESCR( ).

  endmethod.
  method INIT_PRVDR_DEF.

    data: LR_PR_XCOMP type ref to ZCL_VCXI_F0SS_PR_XCOMP,
          LR_PR_SPEC  type ref to ZCL_VCXI_F0SS_PR_SPEC.

    refresh: ME->T_PRVDR_DEF.

*** Get Specification Gate
    check ME->R_GATE is bound.
    try .
        move ME->R_GATE->R_CLSPR ?to LR_PR_XCOMP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_XCOMP.
    endtry.

    check LR_PR_XCOMP is bound.
    move LR_PR_XCOMP->GET_PR_SPEC( ) to LR_PR_SPEC.

    check LR_PR_SPEC is bound.
    LR_PR_SPEC->GET_CSTEPS_DEF( importing ET_PRVDR_CSTEPS = ME->T_PRVDR_DEF ).

  endmethod.
  method OPEN_RTESPV.

    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE.
    data: LT_PRVDR  type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get child provider definition for Routing Supervisor
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV ).
    read table LT_PRVDR into LR_GATE index 1.
    check SY-SUBRC is initial.

*** Open Sub Node
    ME->OPEN_UI_CHILD( IR_GATE   = LR_GATE
                       IF_SELECT = ABAP_TRUE ).

  endmethod.
