
class ZCL_VCXI_XCM_MBQ_STP_S409 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.

  methods CREATE_DETERMINATION
    importing
      !IF_KSCHL type KSCH_PV
      !IF_KOTABNR type KOTABNR
      !IS_KOMGP type KOMGP
      !IF_MATNR type MATNR
      !IF_PACKINSTRID type PL_PIID
    changing
      !CF_ERROR type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CREATE_HUPI
    importing
      !IF_MATNR type MATNR
    changing
      !CS_HUPI type ZVCXI_XCM_MBQ_S_HUPI
      !CF_ERROR type ABAP_BOOL
    returning
      value(RR_BOB_HUPI) type ref to ZCL_VCXI_XCI_BOB_HUPI
    raising
      /VCXI/CX_CKX .
  methods GET_HEADER
    importing
      !IF_MATNR type MATNR
      !IS_HUPI type ZVCXI_XCM_MBQ_S_HUPI
    returning
      value(RS_HEADER) type BAPIHUPIHEADER
    raising
      /VCXI/CX_CKX .
  methods GET_POSITION
    importing
      !IF_MATNR type MATNR
      !IS_HUPI type ZVCXI_XCM_MBQ_S_HUPI
    returning
      value(RT_POSITION) type ZVCXI_XCI_TT_BAPIHUPIPOSITION
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S409 definition
class ZCL_VCXI_XCM_MBQ_STP_S409 implementation.
  method CREATE_DETERMINATION.

    data: LT_BAPIRET2  type BAPIRETTAB.


    check IF_KSCHL       is not initial and
          IF_KOTABNR     is not initial and
          IF_PACKINSTRID is not initial.

*** Set Material to Communication Structure
    data(LS_KOMGP) = value #( base IS_KOMGP
                              MATNR = IF_MATNR ).

*** Create Determination
    ZCL_VCXI_XCI_BOB_HUPI=>CREATE_DETERMINATION( exporting IF_KSCHL    = IF_KSCHL
                                                           IF_KOTABNR  = IF_KOTABNR
                                                           IS_KOMGP    = LS_KOMGP
                                                           IF_PACKNR   = conv #( IF_PACKINSTRID )
                                                 importing ET_BAPIRET2 = LT_BAPIRET2 ).

    loop at LT_BAPIRET2 into data(LS_BAPIRET2).
      ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

*** Mark Error
    if LINE_EXISTS( LT_BAPIRET2[ TYPE = 'E' ] ) or
       LINE_EXISTS( LT_BAPIRET2[ TYPE = 'X' ] ).
      CF_ERROR = ABAP_TRUE.
    endif.

  endmethod.
  method CREATE_HUPI.

    data: LT_BAPIRET2  type BAPIRETTAB.


*** Create Business Object for Packing Instruction
    RR_BOB_HUPI = new ZCL_VCXI_XCI_BOB_HUPI( ).

*** Fill Packaging Instruction
    RR_BOB_HUPI->S_HEADER   = ME->GET_HEADER(   IF_MATNR = IF_MATNR
                                                IS_HUPI  = CS_HUPI ).
    RR_BOB_HUPI->T_POSITION = ME->GET_POSITION( IF_MATNR = IF_MATNR
                                                IS_HUPI  = CS_HUPI ).

*** Save Packing Instruction
    RR_BOB_HUPI->SAVE( importing ET_BAPIRET2 = LT_BAPIRET2 ).
    loop at LT_BAPIRET2 into data(LS_BAPIRET2).
      ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

*** Mark Error
    if LINE_EXISTS( LT_BAPIRET2[ TYPE = 'E' ] ) or
       LINE_EXISTS( LT_BAPIRET2[ TYPE = 'X' ] ).
      CF_ERROR = ABAP_TRUE.

*** Return Packaging Instruction Number
    else.
      CS_HUPI-PACKINSTRID = RR_BOB_HUPI->S_HEADER-PACKINSTRID.
    endif.

  endmethod.
  method EXECUTE.

    data: LF_ERROR type ABAP_BOOL.
    data: LS_MATLI type ZVCXI_XCM_MBQ_S_MATLI.
    data: LR_ACTDAT   type ref to DATA.
    field-symbols: <S_ACTDAT_HUPI> type ZVCXI_XCM_MBQ_S_ACTDAT_HUPI.


    try.
***     Get Material List Entry of active Material List Entry
        LS_MATLI = ME->R_DCO_INPUT->T_MATLI[ MLCNT = ME->R_DCO_INPUT->F_MLCNT ].

***     Check Activity - Create Packing Instruction
        if not LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_HUPI ] ).
***       Set Status to CANCELED
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
          return.
        endif.

***     Load Activity Control Data
        LR_ACTDAT = LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_HUPI ]-R_ACTDAT.
        assign LR_ACTDAT->* to <S_ACTDAT_HUPI>.


***--------------------------------------------------------------------------------------
***     Create all Packing Instructions
        loop at <S_ACTDAT_HUPI>-T_HUPI into data(LS_HUPI).
          ME->CREATE_HUPI( exporting IF_MATNR = LS_MATLI-MATNR
                           changing  CS_HUPI  = LS_HUPI
                                     CF_ERROR = LF_ERROR ).
        endloop.

***     Update Information in DCO
        ME->R_DCO_OUTPUT->UPDATE_MATLI( IS_MATLI = LS_MATLI ).

***     Perform Save and Commit
        ME->R_RPSEG->SAVE_AND_COMMIT( ).

***     Create Determination (for last Instruction)
        ME->CREATE_DETERMINATION( exporting IF_KSCHL       = <S_ACTDAT_HUPI>-KSCHL
                                            IF_KOTABNR     = <S_ACTDAT_HUPI>-KOTABNR
                                            IS_KOMGP       = <S_ACTDAT_HUPI>-S_KOMGP
                                            IF_MATNR       = LS_MATLI-MATNR
                                            IF_PACKINSTRID = LS_HUPI-PACKINSTRID
                                  changing  CF_ERROR = LF_ERROR ).

***     Set Status
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = switch #( LF_ERROR when ABAP_FALSE then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED
                                                              when ABAP_TRUE  then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ) ).

***--------------------------------------------------------------------------------------
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

    endtry.

*** Perform Save and Commit
    ME->R_RPSEG->SAVE_AND_COMMIT( ).

  endmethod.
  method GET_HEADER.

    data: LF_MATNR  type MATNR.


*** Fill Packaging Instruction
    RS_HEADER   = corresponding #( IS_HUPI ).

*** Enrich Description
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = IF_MATNR
      importing
        OUTPUT = LF_MATNR.
    RS_HEADER-DESCRIPTION = REPLACE( VAL  = RS_HEADER-DESCRIPTION
                                     SUB  = |&MATNR&|
                                     WITH = LF_MATNR ).

  endmethod.
  method GET_POSITION.

*** Fill Packaging Instruction
    RT_POSITION = corresponding #( IS_HUPI-T_HUPI_ITEM ).

*** Enrich Position
    loop at RT_POSITION assigning field-symbol(<S_POSITION>).
      <S_POSITION>-ITEM_NUMBER = SY-TABIX * 10.
      case <S_POSITION>-DETAIL_ITEMTYPE.
        when 'M'.    "Packaged Material
*{   REPLACE        HEDK927942                                        1
*\          <S_POSITION>-MATERIAL_LONG = IF_MATNR.
           <S_POSITION>-MATERIAL = IF_MATNR.
*}   REPLACE
      endcase.
    endloop.

  endmethod.
