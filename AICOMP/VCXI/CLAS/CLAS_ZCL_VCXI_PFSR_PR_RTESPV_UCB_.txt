
class ZCL_VCXI_PFSR_PR_RTESPV_UCB definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  create public .

public section.

  constants C_IPRVT_PF_RTESPV_UCB type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSR_RTESPV_UCB'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
  methods FILL_PROD
    redefinition .
  methods IS_FILL_PROD_ALLOWED
    redefinition .
  methods GET_EXQTY
    redefinition .
protected section.

  data R_PR_RTESPV_HL type ref to ZCL_VCXI_XCSR_PR_RTESPV .

  methods GET_PRVDR_MS_RCUT
    importing
      !IR_GATE_SPEC_UCB type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_MS_RCUT) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC_UCB
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_UCB
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_RCUT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_UNIT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods HANDLE_GATE_FREED
    redefinition .
  methods HANDLE_INIT_REFERENCES
    redefinition .
  methods HANDLE_PROD_FILLED
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSR_PR_RTESPV_UCB definition
class ZCL_VCXI_PFSR_PR_RTESPV_UCB implementation.
method BUILD_RTE_PSTEP.

  data:  LT_BL_PSTEP        type        ZVCXI_XCSR_TT_BL_PSTEP.
  data:  LR_BL_PSTEP_ORG    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_NEW    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR_CURR      type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_PREV      type ref to ZIF_VCXI_P0SR_PCDIR.

***----------------------------------------------------------------------------
  if IR_RTE_PSEQ is not bound.
*** Copy BL PStep due to Sequence Specific Values
    loop at IT_BL_PSTEP into LR_BL_PSTEP_ORG.
      move LR_BL_PSTEP_ORG->COPY( ) to LR_BL_PSTEP_NEW.
      append LR_BL_PSTEP_NEW to LT_BL_PSTEP.
    endloop.

*** Create Routing Production Steps
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = LT_BL_PSTEP ).

*** Process Sequence Dependent BL PStep Settings
    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.

***   Get PC Direction
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Forward PC Direction
      if LR_PCDIR_PREV is bound and
         LR_PCDIR_CURR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
        LR_PCDIR_CURR->SET_PCDIR( IF_PCDIR = LR_PCDIR_PREV->F_PCDIR ).
      endif.

***   Keep Curr as Previous
      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.

***----------------------------------------------------------------------------
*** Cascading Method Call (Keep everything as is)
  else.
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = IT_BL_PSTEP
                                           IR_RTE_PSEQ = IR_RTE_PSEQ ).
  endif.

endmethod.
method CONSTRUCTOR.

  data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
  if IR_BL_RTESPV is bound.
    move IR_BL_RTESPV to LR_BL_RTESPV.
  else.
    create object LR_BL_RTESPV
      type
        ZCL_VCXI_P0SR_BL_RTESPV
      exporting
        IR_GATE                    = IR_GATE.
  endif.

*** Call Super
  call method SUPER->CONSTRUCTOR
    exporting
      IR_GATE      = IR_GATE
      IR_BL_RTESPV = LR_BL_RTESPV.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    type
      ZCL_VCXI_P0SR_BL_PRTE
    exporting
      IR_RTE_PRTE           = LR_RTE_PRTE
      IR_MFMI               = ME->R_MFMI
      IR_MFSI               = ME->R_MFSI
      IT_CSPLIT             = ME->T_CSPLIT
      IF_DATE               = ME->F_DATE
      IF_LIFNR_REQ          = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_P0SR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_MANU->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_P0SR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_OUTSO->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method FILL_PROD.

 if ME->R_PR_RTESPV_HL is not bound.
   SUPER->FILL_PROD( ).
 else.
   ME->R_PR_RTESPV_HL->FILL_PROD( ).
 endif.

endmethod.
method GET_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Reel Cutting
  ME->GET_BL_PSTEP_RCUT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Unitizing
  ME->GET_BL_PSTEP_UNIT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

endmethod.
method GET_BL_PSTEP_RCUT.

  data:  LT_GATE_PSCALE        type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR              type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_UCB           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC_UCB      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_RCUT       type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PSCALE        type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_RCUT      type ref to ZCL_VCXI_PFSR_BL_PSTEP_RCUT,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC_UCB = ME->GET_PRVDR_SPEC_UCB( ).
  check LR_GATE_SPEC_UCB is bound.
  collect LR_GATE_SPEC_UCB into LT_PRVDR.

*** Find Provider for MS Reel Cutting
  LR_GATE_MS_RCUT = ME->GET_PRVDR_MS_RCUT( IR_GATE_SPEC_UCB = LR_GATE_SPEC_UCB ).
  check LR_GATE_MS_RCUT is bound.
  collect LR_GATE_MS_RCUT into LT_PRVDR.

*** Find Provider for Unconverted Board
  move ME->GET_PRVDR_UCB( ) to LR_GATE_UCB.
  if LR_GATE_UCB is bound.
    collect LR_GATE_UCB into LT_PRVDR.
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scales
  LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
*** Collect all which are childs of MS_RCUT
    if LR_GATE_PSCALE->GET_PARENT( ) eq LR_GATE_MS_RCUT.
      collect LR_GATE_PSCALE into LT_PRVDR.
    endif.

  endloop.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  create object LR_BL_PSTEP_RCUT
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.
  append LR_BL_PSTEP_RCUT to CT_BL_PSTEP.
  LR_BL_PSTEP_RCUT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                  IT_PRVDR = LT_PRVDR ).

endmethod.
method GET_BL_PSTEP_UNIT.

  data:  LT_GATE_SHIPMGR   type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPUNIT  type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PACKMAT   type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR          type        /VCXI/VKSR_TT_GATE.
  data:  LR_BL_PSTEP_UNIT  type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT,
         LR_PR_SHIPMGR     type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
         LR_GATE_SHIPMGR   type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPUNIT  type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PACKMAT   type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.

  check LT_GATE_SHIPUNIT is not initial.


*** Filter Shipping Units
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                  changing  CT_GATE        = LT_GATE_SHIPUNIT ).

  check LT_GATE_SHIPUNIT is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials
  LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_PACKMAT.
    endif.
  endloop.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    clear: LT_PRVDR.

*** Get Shipping Manager as Provider.
    append LR_GATE_SHIPMGR to LT_PRVDR.

*** Get Shipping Unit as Provider.
    append LR_GATE_SHIPUNIT to LT_PRVDR.

*** Get Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_PACKMAT to LT_PRVDR.
      endif.
    endloop.

    create object LR_BL_PSTEP_UNIT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_UNIT to CT_BL_PSTEP.
    LR_BL_PSTEP_UNIT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR ).

  endloop.

endmethod.
method GET_CSPLIT.

  data:          LF_INLINE      type        ABAP_BOOL.
  data:          LS_DIKEY       type        ZVCXI_P0SS_S_DIKEY.
  data:          LT_GATE        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_COMP   type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE  type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_FG  type ref to ZCL_VCXI_P0SS_PR_COMP_FG.
  field-symbols: <S_CSPLIT>     type        ZVCXI_XCSR_S_CSPLIT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_COMP.

*** Find Provider for Component FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_COMP.
  check LT_GATE_COMP is not initial.

*** Sort Components
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_COMP ).

***------------------------------------------------------------------------------------------------
*** Is inline with any Component
  loop at LT_GATE_COMP into LR_GATE.
    if ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_INLINE.
      exit.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build Cost Split
  loop at LT_GATE_COMP into LR_GATE.
*** If Routing Supervisor is Inline with Component only process this Component
    if LF_INLINE eq ABAP_TRUE.
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    endif.

*** Get PR Reference of Component
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
    if LR_PR_COMP_SE is bound.
***   Get Distribution Key of Component
      move LR_PR_COMP_SE->GET_DIKEY( ) to LS_DIKEY.

***   Add Component Cost Split
      append initial line to RT_CSPLIT assigning <S_CSPLIT>.
      <S_CSPLIT>-ICSPL = LR_PR_COMP_SE->GET_COMPN( ).
      shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
      move LS_DIKEY-DIKEY              to <S_CSPLIT>-DCSPL.
      move LS_DIKEY-DIKEY_UOM          to <S_CSPLIT>-DCSPL_UOM.
      move LR_PR_COMP_SE->GET_COMPR( ) to <S_CSPLIT>-COMPR.
      move <S_CSPLIT>-COMPR            to <S_CSPLIT>-QFACT.

    else.

***   Get PR Reference of Component
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_COMP_FG.
      endtry.
      if LR_PR_COMP_FG is bound.
***     Get Distribution Key of Component
        move LR_PR_COMP_FG->GET_DIKEY( ) to LS_DIKEY.

***     Add Component Cost Split
        append initial line to RT_CSPLIT assigning <S_CSPLIT>.
        <S_CSPLIT>-ICSPL = LR_PR_COMP_FG->GET_COMPN( ).
        shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
        move LS_DIKEY-DIKEY              to <S_CSPLIT>-DCSPL.
        move LS_DIKEY-DIKEY_UOM          to <S_CSPLIT>-DCSPL_UOM.
        move LR_PR_COMP_FG->GET_COMPR( ) to <S_CSPLIT>-COMPR.
        move <S_CSPLIT>-COMPR            to <S_CSPLIT>-QFACT.
      else.
        continue.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** If the Routing Supervisor is in line with the Component
    if LF_INLINE eq ABAP_TRUE.
***   Adjust Distribution Key of Cost Split to 100%
      move 100 to <S_CSPLIT>-DCSPL.
    endif.
  endloop.

endmethod.
method GET_EXQTY.

  if ME->R_PR_RTESPV_HL is not bound.
*** Get own Explosion Quantity
    move SUPER->GET_EXQTY( )              to RS_EXQTY.
  else.
*** Get Higher-Level Explosion Quantity
    move ME->R_PR_RTESPV_HL->GET_EXQTY( ) to RS_EXQTY.
  endif.

endmethod.
method GET_PRVDR_MS_RCUT.

  data:  LT_GATE_MS_RCUT  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_MS_RCUT  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Material Specification Reel Cutting
  LT_GATE_MS_RCUT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_MS_RCUT=>C_IPRVT_PF_MS_RCUT
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_MS_RCUT into LR_GATE_MS_RCUT.
*** Check is child of Specification UCB
    check LR_GATE_MS_RCUT->GET_PARENT( ) eq IR_GATE_SPEC_UCB.
    move LR_GATE_MS_RCUT to RR_GATE_MS_RCUT.
    exit.
  endloop.

endmethod.
method GET_PRVDR_SPEC_UCB.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification UCB
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method GET_PRVDR_UCB.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Unconverted Board
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_UCB=>C_IPRVT_PF_UCB
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL activation ABAP_FALSE.
  endif.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE_RTESPV     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SPEC_HL    type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_RTESPV     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC       type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC_HL    type ref to /VCXI/CL_VKSR_GATE.

  SUPER->HANDLE_INIT_REFERENCES( ).

*** Get Specification
  move ME->GET_PRVDR_SPEC_UCB( ) to LR_GATE_SPEC.

***------------------------------------------------------------------------------------------------
*** Get Routing Supervisors for Higher Level
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
    check LR_GATE_RTESPV          is bound and
          LR_GATE_RTESPV->R_CLSPR is bound.

*** HigherLevel Supervisors shouldn't be InLine with my Specification
    check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) ne ABAP_TRUE.


*** Get Specification of potential HL Supervisor
    LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                                 IF_INUSE = ABAP_TRUE ).
    if LT_GATE_SPEC_HL is initial.
      LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                                   IF_INUSE = ABAP_TRUE ).
    endif.

    loop at LT_GATE_SPEC_HL into LR_GATE_SPEC_HL.
***   Specification of HigherLevel Supervisors should be InLine me
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC_HL ) eq ABAP_TRUE.


***   Get PR Reference
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to ME->R_PR_RTESPV_HL.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL.
  endif.

endmethod.
method HANDLE_PROD_FILLED.

  data:  LR_BL_PRTE    type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
      if ME->R_PR_RTESPV_HL is not bound.
        SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = IR_BL_PRTE ).
      else.
***     Copy
        move ME->R_RTESEL->COPY( ) to LR_BL_PRTE.
        SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = LR_BL_PRTE ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method IS_FILL_PROD_ALLOWED.

  data:  LR_PRVDR         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_RTESPV     type ref to ZCL_VCXI_XCSR_PR_RTESPV.
  data:  LT_GATE_IGNORE   type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_RTESPV  type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_COMP_SE type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_OPQTY   type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR         type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Refresh Auto and get Selected Route
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
  read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Be positive
    move ABAP_TRUE to EF_ALLOWED.

*** Ignore own Element for Routing Supervisor check
    append ME->R_GATE to CT_GATE_IGNORE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_PRVDR_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                             IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR_RTESPV into LR_PRVDR.
***   Check Routing Supervisor is not ignored
      read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
      check SY-SUBRC ne 0.

***   Get PR Reference
      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).

***   Check if Fill is allowed
      LR_PR_RTESPV->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                          changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
      if EF_ALLOWED ne ABAP_TRUE.
        exit.
      endif.
    endloop.
    check EF_ALLOWED eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Find Provider for Component SE
    LT_PRVDR_COMP_SE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                              IF_INUSE  = ABAP_TRUE ).

*** Find Provider for Operation Quantity
    LT_PRVDR_OPQTY = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                            IF_INUSE  = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Check Status of all Provider
    check EF_ALLOWED eq ABAP_TRUE.
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR into LR_PRVDR.
***   Don't check other Routing Supervisors
      read table LT_PRVDR_RTESPV with key TABLE_LINE = LR_PRVDR
                                 transporting no fields.
      check SY-SUBRC ne 0.

      if ME->R_PR_RTESPV_HL is bound.
        if LR_PRVDR->R_CLSPR eq ME->R_PR_RTESPV_HL.

***       Check Routing Supervisor is not ignored
          read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
          check SY-SUBRC ne 0.

***       Refresh Auto and get Selected Route
          ME->R_PR_RTESPV_HL->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).

          ME->R_PR_RTESPV_HL->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                                    changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
          if EF_ALLOWED ne ABAP_TRUE.
            exit.
          else.
            continue.
          endif.
        endif.
      endif.

***   Only check PR Class Status if Provider is in line to me or my Lamination Routing Supervisors
      if LR_PRVDR->IS_IN_LINE( IR_GATE = ME->R_GATE ) eq ABAP_TRUE or
         ME->IS_IN_LINE_RTESPV( IR_PRVDR        = LR_PRVDR
                                IT_PRVDR_RTESPV = LT_PRVDR_RTESPV ) eq ABAP_TRUE.
        if LR_PRVDR->R_CLSPR is bound and
           LR_PRVDR->R_CLSPR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      else.
***     Skip Component SE
        read table LT_PRVDR_COMP_SE with key TABLE_LINE = LR_PRVDR
                                    transporting no fields.
        check SY-SUBRC ne 0.

***     Skip Operation Quantity
        read table LT_PRVDR_OPQTY with key TABLE_LINE = LR_PRVDR
                                  transporting no fields.
        check SY-SUBRC ne 0.

***     Check Status
        if LR_PRVDR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      endif.
    endloop.
  endif.

endmethod.
