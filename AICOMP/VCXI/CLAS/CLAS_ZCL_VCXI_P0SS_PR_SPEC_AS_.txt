
class ZCL_VCXI_P0SS_PR_SPEC_AS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_P0_SPEC_AS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SPEC_AS'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE'. "#EC NOTEXT
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE'. "#EC NOTEXT
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI'. "#EC NOTEXT

  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods GET_FOLHE
    exporting
      !ES_FOLHE type ZVCXI_P0SS_S_FOLHE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOLLE
    exporting
      !ES_FOLLE type ZVCXI_P0SS_S_FOLLE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOLWI
    exporting
      !ES_FOLWI type ZVCXI_P0SS_S_FOLWI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLHE
    importing
      !IS_FOLHE type ZVCXI_P0SS_S_FOLHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLLE
    importing
      !IS_FOLLE type ZVCXI_P0SS_S_FOLLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLWI
    importing
      !IS_FOLWI type ZVCXI_P0SS_S_FOLWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRODI_DESCR
    returning
      value(RF_PRODI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_FOLDIM_CHANGED type /VCXI/VKSC_IEVNT value 'FOLDIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PROD_DIM_CHANGED type /VCXI/VKSC_IEVNT value 'PROD_DIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT
  constants C_PARID_FOLHE type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLHE'. "#EC NOTEXT
  constants C_PARID_FOLLE type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLLE'. "#EC NOTEXT
  constants C_PARID_FOLWI type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLWI'. "#EC NOTEXT

  methods GET_PPASS_COMP
    returning
      value(RT_PPASS) type ZVCXI_P0SS_TT_PPASS
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS_CLOS
    returning
      value(RT_PPASS) type ZVCXI_P0SS_TT_PPASS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_PPASS
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SPEC_AS definition
class ZCL_VCXI_P0SS_PR_SPEC_AS implementation.
method CHECK_PPASS.

*** 0 - All Production Pass of Component and Joint do match.
*** 1 - Production Pass &1 has no Joint assigned.
*** 1 - Production Pass &1 has no Component assigned.

  data: LF_PPASS      type ZVCXI_P0SS_PPASS,
        LF_MSGV1      type SYMSGV.
  data: LT_PPASS_COMP type ZVCXI_P0SS_TT_PPASS,
        LT_PPASS_CLOS type ZVCXI_P0SS_TT_PPASS.

*** Start Positiv
  RF_RESULT = 0.

  LT_PPASS_COMP = ME->GET_PPASS_COMP( ).
  LT_PPASS_CLOS = ME->GET_PPASS_CLOS( ).

  loop at LT_PPASS_COMP into LF_PPASS.
    read table LT_PPASS_CLOS with key TABLE_LINE = LF_PPASS transporting no fields.
    check SY-SUBRC ne 0.
    RF_RESULT = 1.

*** Add Message
    if IR_MESSAGE is bound.
***   Production Pass &1 has no Joint assigned.
      move LF_PPASS to LF_MSGV1.
      condense LF_MSGV1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '802'
                               IF_MSGV1 = LF_MSGV1 ).
    endif.
  endloop.

  loop at LT_PPASS_CLOS into LF_PPASS.
    read table LT_PPASS_COMP with key TABLE_LINE = LF_PPASS transporting no fields.
    check SY-SUBRC ne 0.
    RF_RESULT = 1.

*** Add Message
    if IR_MESSAGE is bound.
***   Production Pass &1 has no Component assigned.
      move LF_PPASS to LF_MSGV1.
      condense LF_MSGV1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '803'
                               IF_MSGV1 = LF_MSGV1 ).
    endif.
  endloop.

  check RF_RESULT eq 0.
*** Add Message
  if IR_MESSAGE is bound.
***   All Production Pass of Component and Joint do match.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '801' ).
  endif.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_FOLHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLHE ).
  move LS_PARAM-ATFLV to ES_FOLHE-FOLHE.
  move LS_PARAM-UNIT  to ES_FOLHE-FOLHE_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOLLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLLE ).
  move LS_PARAM-ATFLV to ES_FOLLE-FOLLE.
  move LS_PARAM-UNIT  to ES_FOLLE-FOLLE_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOLWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLWI ).
  move LS_PARAM-ATFLV to ES_FOLWI-FOLWI.
  move LS_PARAM-UNIT  to ES_FOLWI-FOLWI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_PPASS_CLOS.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CLOS         type ref to ZCL_VCXI_P0SS_PR_CLOS.

***------------------------------------------------------------------
*** Get Closing Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS_AS
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_CLOS.
        check LR_PR_CLOS is bound.
        RT_PPASS = LR_PR_CLOS->GET_PPASS( ).
        exit.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_CLOS.
    endtry.
  endloop.

endmethod.
method GET_PPASS_COMP.

  data:  LF_PPASS           type        ZVCXI_P0SS_PPASS.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_COMP_AS      type ref to ZCL_VCXI_P0SS_PR_COMP_AS,
         LR_PR_COMP_SFG     type ref to ZCL_VCXI_P0SS_PR_COMP_SFG.

***------------------------------------------------------------------
*** Get Component AS Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_AS.
        check LR_PR_COMP_AS is bound.
        LF_PPASS = LR_PR_COMP_AS->GET_PPASS( ).
        append LF_PPASS to RT_PPASS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_AS.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Get Component SFG Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SFG=>C_IPRVT_P0_COMP_SFG
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SFG.
        check LR_PR_COMP_SFG is bound.
        LF_PPASS = LR_PR_COMP_SFG->GET_PPASS( ).
        append LF_PPASS to RT_PPASS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SFG.
    endtry.
  endloop.

endmethod.
method GET_PRODI_DESCR.

*** Return only Product Dimensions
  RF_PRODI_DESCR = 'Product Dim.'(001).

endmethod.
method GET_PROHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
  move LS_PARAM-ATFLV to RS_PROHE-PROHE.
  move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.

endmethod.
method GET_PROLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
  move LS_PARAM-ATFLV to RS_PROLE-PROLE.
  move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.

endmethod.
method GET_PROWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
  move LS_PARAM-ATFLV to RS_PROWI-PROWI.
  move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_PTYPE_DESCR.


endmethod.
method GET_STATUS.

  data: LS_FOLLE type ZVCXI_P0SS_S_FOLLE,
        LS_FOLWI type ZVCXI_P0SS_S_FOLWI,
        LS_FOLHE type ZVCXI_P0SS_S_FOLHE.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Production Pass Joint agains Components
  if ME->CHECK_PPASS( ) is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Folding Length
  ME->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
  if LS_FOLLE-FOLLE is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Folding Width
  ME->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
  if LS_FOLWI-FOLWI is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Folding Height
  ME->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).
  if LS_FOLHE-FOLHE is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_FOLLE type ZVCXI_P0SS_S_FOLLE,
        LS_FOLWI type ZVCXI_P0SS_S_FOLWI,
        LS_FOLHE type ZVCXI_P0SS_S_FOLHE.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Production Pass agains Joint and Components
  ME->CHECK_PPASS( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Folding Length
  ME->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
  if LS_FOLLE-FOLLE is not initial.
***   Folding Length is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '804' ).
  else.
***   Folding Length is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '805' ).
  endif.

*** Check Folding Width
  ME->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
  if LS_FOLWI-FOLWI is not initial.
***   Folding Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '806' ).
  else.
***   Folding Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '807' ).
  endif.

*** Check Folding Height
  ME->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).
  if LS_FOLHE-FOLHE is not initial.
***   Folding Height is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '808' ).
  else.
***   Folding Height is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '809' ).
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).
  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_FOLHE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLHE ).

  if IS_FOLHE is supplied.
    move IS_FOLHE-FOLHE     to LS_PARAM-ATFLV.
    move IS_FOLHE-FOLHE_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_FOLLE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLLE ).

  if IS_FOLLE is supplied.
    move IS_FOLLE-FOLLE     to LS_PARAM-ATFLV.
    move IS_FOLLE-FOLLE_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_FOLWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLWI ).

  if IS_FOLWI is supplied.
    move IS_FOLWI-FOLWI     to LS_PARAM-ATFLV.
    move IS_FOLWI-FOLWI_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_PROHE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

  move IS_PROHE-PROHE     to LS_PARAM-ATFLV.
  move IS_PROHE-PROHE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROLE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

  move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
  move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

  move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
  move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
