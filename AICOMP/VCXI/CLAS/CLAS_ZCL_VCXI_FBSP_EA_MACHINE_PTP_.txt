
class ZCL_VCXI_FBSP_EA_MACHINE_PTP definition
  public
  inheriting from ZCL_VCXI_XCSP_EA_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_MACHINE_PTP type ref to ZCL_VCXI_FBSP_PR_MACHINE_PTP .

  methods GET_QUANTITY
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSP_EA_MACHINE_PTP definition
class ZCL_VCXI_FBSP_EA_MACHINE_PTP implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
    try.
        move ME->R_GATE->R_CLSPR ?to ME->R_PR_MACHINE_PTP.
      catch CX_SY_MOVE_CAST_ERROR.
***     Element API ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '804'.
    endtry.

  endmethod.
  method GET_QUANTITY.

    data: LF_NOUPS type ZVCXI_F0S_NOUPS,
          LF_UMREZ type UMREZ,
          LF_UMREN type UMREN.
    data: LS_MQTYI      type ZVCXI_XCSP_S_MQTYI,
          LS_QTY        type ZVCXI_XCSP_S_QTY,
          LS_MQTYI_AS_O type ZVCXI_XCSP_S_MQTYO,
          LS_BGDIM      type ZVCXI_FBSP_S_BGDIM.
    data: LT_BGDIM type ZVCXI_FBSP_TT_BGDIM.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.


    check ME->R_PR_MACHINE_PTP is bound and
          ME->R_PR_MACHINE_PTP->R_RTE_CMACH is bound.

    if ME->R_PR_MACHINE_PTP->R_RTE_CMACH->R_MTYPE->F_RCALC eq /VCXI/CL_VSMC_MTYPE=>C_RCALC_I.

***--------------------------------------------------------------------------------------
***   Use Operation Quantity In
      move ME->R_PR_MACHINE_PTP->GET_MQTYI( ) to LS_MQTYI.

      move LS_MQTYI-MQTYI                     to EF_BMSCH.
      move ABAP_TRUE                          to EF_BMSCH_X.
      move LS_MQTYI-MQTYI_UOM                 to EF_MEINH.
      move ABAP_TRUE                          to EF_MEINH_X.

***   Get Flow In
      LT_BGDIM = ME->R_PR_MACHINE_PTP->GET_MFI_BGDIM( ).

    else.

***--------------------------------------------------------------------------------------
***   Convert Operation Quantity In to Out
      move ME->R_PR_MACHINE_PTP->GET_MQTYI( )   to LS_MQTYI.
      move LS_MQTYI-MQTYI                       to LS_QTY-QTY.
      move LS_MQTYI-MQTYI_UOM                   to LS_QTY-QTY_UOM .
      LS_MQTYI_AS_O = ME->R_PR_MACHINE_PTP->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO( IS_QTY = LS_QTY ).

      move LS_MQTYI_AS_O-MQTYO                  to EF_BMSCH.
      move ABAP_TRUE                            to EF_BMSCH_X.
      move LS_MQTYI_AS_O-MQTYO_UOM              to EF_MEINH.
      move ABAP_TRUE                            to EF_MEINH_X.

***   Get Flow Out
      LT_BGDIM = ME->R_PR_MACHINE_PTP->GET_MFO_BGDIM( ).
    endif.

*** Always up Round to next full
    call function 'ROUND'
      exporting
        INPUT  = EF_BMSCH
        SIGN   = '+'
      importing
        OUTPUT = EF_BMSCH.

***--------------------------------------------------------------------------------------
*** Get maximum Ups
    loop at LT_BGDIM into LS_BGDIM.
      if LS_BGDIM-NOUPS gt LF_NOUPS.
        move LS_BGDIM-NOUPS to LF_NOUPS.
      endif.
    endloop.

    move LF_NOUPS         to EF_UMREZ.
    move ABAP_TRUE        to EF_UMREZ_X.
    move ME->GET_MFRAT( ) to EF_UMREN.
    move ABAP_TRUE        to EF_UMREN_X.

***--------------------------------------------------------------------------------------
*** Alternate Units
    if EF_MEINH ne IF_PLNME.
      call function 'UNIT_CONVERSION_SIMPLE'
        exporting
          INPUT                = 1
          UNIT_IN              = IF_PLNME
          UNIT_OUT             = EF_MEINH
        importing
          DENOMINATOR          = LF_UMREZ
          NUMERATOR            = LF_UMREN
        exceptions
          CONVERSION_NOT_FOUND = 1
          DIVISION_BY_ZERO     = 2
          INPUT_INVALID        = 3
          OUTPUT_INVALID       = 4
          OVERFLOW             = 5
          TYPE_INVALID         = 6
          UNITS_MISSING        = 7
          UNIT_IN_NOT_FOUND    = 8
          UNIT_OUT_NOT_FOUND   = 9.
      if SY-SUBRC ne 0.
***     Ignore Conversion
        LF_UMREZ = 1.
        LF_UMREN = 1.
      endif.

***   Adjust Conversion based on Unit Conversion
      EF_UMREZ = EF_UMREZ * LF_UMREZ.
      EF_UMREN = EF_UMREN * LF_UMREN.
    endif.

  endmethod.
endclass. "ZCL_VCXI_FBSP_EA_MACHINE_PTP implementation
