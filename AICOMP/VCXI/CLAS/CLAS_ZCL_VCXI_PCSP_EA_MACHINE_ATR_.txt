
class ZCL_VCXI_PCSP_EA_MACHINE_ATR definition
  public
  inheriting from ZCL_VCXI_XCSP_EA_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_RODIM
    returning
      value(RS_RODIM) type ZVCXI_PCSP_S_RODIM
    raising
      /VCXI/CX_CKX .

  methods /VCXI/IF_VKCR_EXPL_RTE~FILTER_CPBRG
    redefinition .
protected section.

  data R_PR_MACHINE_ATR type ref to ZCL_VCXI_PCSP_PR_MACHINE_ATR .

  methods GET_QUANTITY
    redefinition .
  methods GET_AUFAK
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSP_EA_MACHINE_ATR definition
class ZCL_VCXI_PCSP_EA_MACHINE_ATR implementation.
method /VCXI/IF_VKCR_EXPL_RTE~FILTER_CPBRG.

  data:  LF_IMFXC    type        ZVCXI_XCSP_IMFXC,
         LF_ID       type        /VCXI/CKX_ID,
         LF_CNT      type        STRING.
  data:  LT_MFO      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MF    type ref to ZCL_VCXI_XCSP_PR_MF,
         LR_CPBRG    type ref to /VCXI/CL_VKCC_CPBRG,
         LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.

  SUPER->/VCXI/IF_VKCR_EXPL_RTE~FILTER_CPBRG( changing CT_CPBRG = CT_CPBRG ).

  check ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~R_PR_MFMGR is bound.

***------------------------------------------------------------------------------------------------
*** Get Material Flow Out
  move ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~R_PR_MFMGR->ZIF_VCXI_XCSP_MFMGR~GET_MFO( ) to LT_MFO.

  if lines( LT_MFO ) eq 1.
    try.
        read table LT_MFO into LR_GATE index 1.
        check SY-SUBRC eq 0.
        move LR_GATE->R_CLSPR ?to LR_PR_MF.

***     Get MF x-connection and split it
        LF_IMFXC = LR_PR_MF->GET_IMFXC( ).
        check LF_IMFXC is not initial.
        split LF_IMFXC at '@' into LF_ID LF_CNT.

        loop at CT_CPBRG into LR_OBJECT.
          move LR_OBJECT ?to LR_CPBRG.

***       Filter
          if LR_CPBRG->/VCXI/IF_CKX_OBJECT~GET_ID( ) ne LF_ID.
            delete CT_CPBRG.
          endif.
        endloop.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MF.
    endtry.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
  try.
      move ME->R_GATE->R_CLSPR ?to ME->R_PR_MACHINE_ATR.
    catch CX_SY_MOVE_CAST_ERROR.
***   Element API ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '804'.
  endtry.

endmethod.
method GET_AUFAK.

  data:  LS_MQTYI         type ZVCXI_XCSP_S_MQTYI,
         LS_MQTYO         type ZVCXI_XCSP_S_MQTYO,
         LS_QTY           type ZVCXI_XCSP_S_QTY,
         LS_MQTYO_AS_I    type ZVCXI_XCSP_S_MQTYI.

*** Get Operation Quantity In and Out
  move ME->R_PR_MACHINE->GET_MQTYI( ) to LS_MQTYI.
  move ME->R_PR_MACHINE->GET_MQTYO( ) to LS_MQTYO.

*** Convert Out to In
  move LS_MQTYO-MQTYO     to LS_QTY-QTY.
  move LS_MQTYO-MQTYO_UOM to LS_QTY-QTY_UOM.
  LS_MQTYO_AS_I = ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY ).

***------------------------------------------------------------------------------------------------
*** Calculate the AUFAK
  try.
      if LS_MQTYI-MQTYI is not initial.
        EF_AUFAK = ( 1 - ( LS_MQTYO_AS_I-MQTYI / LS_MQTYI-MQTYI ) ) * 100.
      else.
        clear EF_AUFAK.
      endif.
      if EF_AUFAK lt 0.
        clear EF_AUFAK.
      endif.
    catch CX_SY_ARITHMETIC_OVERFLOW.
      move '99.999' to EF_AUFAK.
  endtry.

  move ABAP_TRUE to EF_AUFAK_X.

endmethod.
method GET_MFO_RODIM.

  check ME->R_PR_MACHINE_ATR is bound.
  RS_RODIM = ME->R_PR_MACHINE_ATR->GET_MFO_RODIM( ).

endmethod.
method GET_QUANTITY.

  data:  LS_MQTYI         type ZVCXI_XCSP_S_MQTYI,
         LS_QTY           type ZVCXI_XCSP_S_QTY,
         LS_MQTYI_AS_O    type ZVCXI_XCSP_S_MQTYO,
         LS_RODIM         type ZVCXI_PCSP_S_RODIM.

***--------------------------------------------------------------------------------------
*** Convert Operation Quantity In to Out
  move ME->R_PR_MACHINE_ATR->GET_MQTYI( )   to LS_MQTYI.
  move LS_MQTYI-MQTYI                       to LS_QTY-QTY.
  move LS_MQTYI-MQTYI_UOM                   to LS_QTY-QTY_UOM .
  LS_MQTYI_AS_O = ME->R_PR_MACHINE_ATR->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO( IS_QTY = LS_QTY ).
  move LS_MQTYI_AS_O-MQTYO                  to EF_BMSCH.
  move ABAP_TRUE                            to EF_BMSCH_X.
  move LS_MQTYI_AS_O-MQTYO_UOM              to EF_MEINH.
  move ABAP_TRUE                            to EF_MEINH_X.

***--------------------------------------------------------------------------------------
*** Get Flow Out
  LS_RODIM = ME->R_PR_MACHINE_ATR->GET_MFO_RODIM( ).

*** Get Ups
  move LS_RODIM-PCUPS               to EF_UMREZ.
  move ABAP_TRUE                    to EF_UMREZ_X.
  move ME->GET_MFRAT( )             to EF_UMREN.
  move ABAP_TRUE                    to EF_UMREN_X.

endmethod.
