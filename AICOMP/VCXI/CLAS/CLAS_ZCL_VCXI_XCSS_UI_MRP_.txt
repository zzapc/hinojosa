
class ZCL_VCXI_XCSS_UI_MRP definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_MRP_VIS type ZVCXI_XCSS_S_MRP_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PR_MRP type ref to ZCL_VCXI_XCSS_PR_MRP .
  data R_GRID_MRP_AREA type ref to ZCL_VCXI_XCSS_GRID_MRP_AREA .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_UI_MRP definition
class ZCL_VCXI_XCSS_UI_MRP implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_XCSS_UI_MRP_BIND'
      exporting
        IR_UI_MRP = ME
      importing
        ES_DYNP   = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Create Grid for MRP Areas
    create object ME->R_GRID_MRP_AREA
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_MRP_AREA'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_MRP.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_GRID_MRP_AREA is bound.
      ME->R_GRID_MRP_AREA->DO_FREE( ).
      clear ME->R_GRID_MRP_AREA.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.


    SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                             IF_DYNNR = IF_DYNNR ).

    try.
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

***--------------------------------------------------------------------------------------
*** Initialize GRID
    if ME->R_GRID_MRP_AREA is bound.
      ME->R_GRID_MRP_AREA->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_MRP_AREA->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_MRP_VIS type ZVCXI_XCSS_S_MRP_VIS.


*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_MRP_VIS.

***--------------------------------------------------------------------------------------
*** MRP Profile
    if ME->S_MRP_VIS-DISPR ne LS_MRP_VIS-DISPR.
      ME->R_PR_MRP->SET_DISPR( IF_DISPR = LS_MRP_VIS-DISPR
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** MRP Type
    if ME->S_MRP_VIS-DISMM ne LS_MRP_VIS-DISMM.
      ME->R_PR_MRP->SET_DISMM( IF_DISMM = LS_MRP_VIS-DISMM
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** MRP Controller
    if ME->S_MRP_VIS-DISPO ne LS_MRP_VIS-DISPO.
      ME->R_PR_MRP->SET_DISPO( IF_DISPO = LS_MRP_VIS-DISPO
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    if ME->S_MRP_VIS-DISLS ne LS_MRP_VIS-DISLS.
      ME->R_PR_MRP->SET_DISLS( IF_DISLS = LS_MRP_VIS-DISLS
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Minimum Lot Size
    if ME->S_MRP_VIS-S_BSTMI ne LS_MRP_VIS-S_BSTMI.
      ME->R_PR_MRP->SET_BSTMI( IS_BSTMI = LS_MRP_VIS-S_BSTMI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Maximum Lot Size
    if ME->S_MRP_VIS-S_BSTMA ne LS_MRP_VIS-S_BSTMA.
      ME->R_PR_MRP->SET_BSTMA( IS_BSTMA = LS_MRP_VIS-S_BSTMA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Fixed Lot Size
    if ME->S_MRP_VIS-S_BSTFE ne LS_MRP_VIS-S_BSTFE.
      ME->R_PR_MRP->SET_BSTFE( IS_BSTFE = LS_MRP_VIS-S_BSTFE
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Safety Stock
    if ME->S_MRP_VIS-S_EISBE ne LS_MRP_VIS-S_EISBE.
      ME->R_PR_MRP->SET_EISBE( IS_EISBE = LS_MRP_VIS-S_EISBE
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    if ME->R_GRID_MRP_AREA is bound.
      ME->R_GRID_MRP_AREA->CHECK_CHANGED_DATA( ).
    endif.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_MRP.

  endmethod.
  method INIT_VIS.

    free: ME->S_MRP_VIS.


***--------------------------------------------------------------------------------------
*** Plant
    ME->S_MRP_VIS-WERKS = ME->R_PR_MRP->GET_WERKS( importing EF_DESCR = ME->S_MRP_VIS-WERKS_DESCR ).

***--------------------------------------------------------------------------------------
*** MRP Profile
    ME->S_MRP_VIS-DISPR = ME->R_PR_MRP->GET_DISPR( ).

***--------------------------------------------------------------------------------------
*** MRP Type
    ME->S_MRP_VIS-DISMM = ME->R_PR_MRP->GET_DISMM( importing EF_DIBEZ = ME->S_MRP_VIS-DIBEZ ).

*** MRP Controller
    ME->S_MRP_VIS-DISPO = ME->R_PR_MRP->GET_DISPO( ).

***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    ME->S_MRP_VIS-DISLS = ME->R_PR_MRP->GET_DISLS( importing EF_LOSLT = ME->S_MRP_VIS-LOSLT ).

*** Minimum/Maximum/Fixed Lot Size
    ME->S_MRP_VIS-S_BSTMI = ME->R_PR_MRP->GET_BSTMI( ).
    ME->S_MRP_VIS-S_BSTMA = ME->R_PR_MRP->GET_BSTMA( ).
    ME->S_MRP_VIS-S_BSTFE = ME->R_PR_MRP->GET_BSTFE( ).

*** Safety Stock
    ME->S_MRP_VIS-S_EISBE = ME->R_PR_MRP->GET_EISBE( ).

  endmethod.
