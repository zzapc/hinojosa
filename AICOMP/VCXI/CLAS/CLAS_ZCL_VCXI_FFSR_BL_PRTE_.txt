
class ZCL_VCXI_FFSR_BL_PRTE definition
  public
  inheriting from ZCL_VCXI_F0SR_BL_PRTE
  create public .

public section.

  methods GET_RHNDL_IN
    returning
      value(RT_RHNDL_IN) type ZVCXI_FFSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods CHECK_EXTR_PSTEP
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_RHNDL_OUT
    importing
      !IT_RHNDL_OUT type ZVCXI_FFSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_RHNDL
    raising
      /VCXI/CX_CKX .

  methods CHECK
    redefinition .
  methods COMPARE
    redefinition .
  methods CONVERT_TO_MQTYO
    redefinition .
  methods COPY
    redefinition .
  methods GET_EVQTY_IN
    redefinition .
  methods GET_SPVRE_MFMI
    redefinition .
  methods PREP_EVAL_WASTE
    redefinition .
protected section.

  data T_RHNDL_OUT type ZVCXI_FFSR_TT_RHNDL .

  methods GET_RDIM_IN
    returning
      value(RT_RDIM_IN) type ZVCXI_FFSR_TT_RDIM
    raising
      /VCXI/CX_CKX .
  methods CONV_RHNDL_OUT_TO_IN
    importing
      !IT_RHNDL_OUT type ZVCXI_FFSR_TT_RHNDL
    returning
      value(RT_RHNDL_IN) type ZVCXI_FFSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_FIDIM_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    exporting
      !ET_FIDIM_OUT type ZVCXI_FFSP_TT_FIDIM
      !ET_FIDIM_IN type ZVCXI_FFSP_TT_FIDIM
    raising
      /VCXI/CX_CKX .

  methods CONV_MQTYO_TO_MQTYI
    redefinition .
  methods DESERIALIZE_INFO
    redefinition .
  methods GET_RTE_ATYPE
    redefinition .
  methods SERIALIZE_INFO
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PRTE definition
class ZCL_VCXI_FFSR_BL_PRTE implementation.
  method CHECK.

    data: LF_NOMAT type ABAP_BOOL,
          LF_GUIDM type /VCXI/CKXM_GUIDM.
    data: LS_RHNDL type ZVCXI_FFSR_S_RHNDL,
          LS_MSG   type /VCXI/CKXM_S_MSG.
    data: LT_MSG       type /VCXI/CKXM_TT_MSG.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL     type ref to ZIF_VCXI_FFSR_RHNDL.
    field-symbols: <S_MSG> type /VCXI/CKXM_S_MSG.

***--------------------------------------------------------------------------------------
*** Perform Super Check
    SUPER->CHECK( ).

***--------------------------------------------------------------------------------------
*** Check Roll Handling if Technical Checks are not turned off
    if ME->F_TECHC eq ABAP_TRUE.
      loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***     Check last Production Step with Roll Handling
        clear LR_RHNDL.
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                         where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_RHNDL.
        endloop.
        check LR_RHNDL is bound.

        move ABAP_FALSE to LF_NOMAT.
        loop at LR_RHNDL->T_RHNDL into LS_RHNDL where MATNR is initial.
          move ABAP_TRUE to LF_NOMAT.
        endloop.

        if LF_NOMAT eq ABAP_TRUE.
***       Core Material could not be determined or is not maintained.
          append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
          <S_MSG>-MSGTY = 'E'.
          <S_MSG>-MSGID = 'ZVCXI_FFSR'.
          <S_MSG>-MSGNO = '051'.
        endif.

***     Check Roll Handling
        if LR_RTE_ARBPL->R_ARBPL is bound and
           ZCL_VCXI_FFSS_CUST_RHNDL=>CHECK_RHNDL( exporting IT_RHNDL  = LR_RHNDL->T_RHNDL
                                                            IF_WERKS  = conv WERKS_D( LR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) )
                                                            IF_DATE   = ME->F_DATE
                                                  importing ET_MSG    = LT_MSG ) ne 0.
          clear: LF_GUIDM.
          move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUIDM.
          loop at LT_MSG into LS_MSG.
            append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
            move-corresponding LS_MSG to <S_MSG>.
            move LF_GUIDM             to <S_MSG>-GUIDM.
          endloop.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Set Status
    if ME->R_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                                IF_MSGTY_I = ABAP_FALSE ) is initial.
      move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID   to ME->R_RTE_PRTE->F_RSTAT.
    else.
      move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID to ME->R_RTE_PRTE->F_RSTAT.
    endif.

  endmethod.
  method CHECK_EXTR_PSTEP.

    data: LF_EXTR      type        ABAP_BOOL.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_MGRP      type ref to /VCXI/CL_VSMC_MGRP.

    move ABAP_TRUE to RF_RESULT.

*** Process each WorkCenter
    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***   Get Machine Type via Limit Machine Group
      check LR_RTE_ARBPL->R_ARBPL is bound.
      try.
          LR_MGRP = LR_RTE_ARBPL->R_ARBPL->GET_MGRP_BY_DATE( IF_DATE  = ME->F_DATE
                                                             IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).
        catch /VCXI/CX_CKX.
          clear LR_MGRP.
      endtry.
      check LR_MGRP          is bound and
            LR_MGRP->R_MTYPE is bound.

***   In case of Extruder
      if LR_MGRP->R_MTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'FF_MT_EXTR'.
***     Search for Extrusion PStep
        clear: LF_EXTR.
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
          if LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_FFSR_BL_PSTEP_EXTR=>C_IPSTP_EXTR.
            move ABAP_TRUE to LF_EXTR.
            exit.
          endif.
        endloop.

        if LF_EXTR eq ABAP_FALSE.
***       Extruder but no Extrusion Step
          move ABAP_FALSE to RF_RESULT.
          return.
        endif.
      endif.
    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PRTE_OTHER  type ref to ZCL_VCXI_FFSR_BL_PRTE.

    check IR_BL_PRTE is bound.

*** Cast to Film Route
    move IR_BL_PRTE ?to LR_BL_PRTE_OTHER.

***--------------------------------------------------------------------------------------
*** Check same Roll Handling Information
    check ME->T_RHNDL_OUT eq LR_BL_PRTE_OTHER->T_RHNDL_OUT.

***--------------------------------------------------------------------------------------
*** Perform Super-Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PRTE = IR_BL_PRTE ).

  endmethod.
  method CONV_MQTYO_TO_MQTYI.

    data: LF_NOOUT_OUT type        ZVCXI_XCS_NOOUT,
          LF_NOUPS_OUT type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_IN  type        ZVCXI_F0S_NOUPS.
    data: LS_FIDIM_IN  type        ZVCXI_FFSP_S_FIDIM,
          LS_FIDIM_OUT type        ZVCXI_FFSP_S_FIDIM.
    data: LT_FIDIM_IN  type        ZVCXI_FFSP_TT_FIDIM,
          LT_FIDIM_OUT type        ZVCXI_FFSP_TT_FIDIM.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_CONV_WTL  type ref to ZIF_VCXI_FFSR_CONV_WTL.


***--------------------------------------------------------------------------------------
*** Get Film Dimension
    ME->GET_FIDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_FIDIM_IN  = LT_FIDIM_IN
                                          ET_FIDIM_OUT = LT_FIDIM_OUT ).

*** Collect Ups of all Dimension Outs (MFMO are suppressed by NOUPS = 0)
    loop at LT_FIDIM_OUT into LS_FIDIM_OUT where NOUPS ne 0.
      add LS_FIDIM_OUT-NOOUT to LF_NOOUT_OUT.
      add LS_FIDIM_OUT-NOUPS to LF_NOUPS_OUT.
    endloop.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_FIDIM_OUT ) eq 0.
      CS_CALCV-CALCV = 0.

*** Logic "Single MFO"
    elseif LINES( LT_FIDIM_OUT ) eq 1.
***   Get maximum Ups of Flow In
      loop at LT_FIDIM_IN into LS_FIDIM_IN.
        if LS_FIDIM_IN-NOUPS gt LF_NOUPS_IN.
          move LS_FIDIM_IN-NOUPS to LF_NOUPS_IN.
        endif.
      endloop.
      if LF_NOUPS_IN is not initial.
***     Convert it to Machine Quantity In using Ups Ratio (Due to S&U)
        CS_CALCV-CALCV = CS_CALCV-CALCV * LF_NOUPS_OUT / LF_NOUPS_IN.
      else.
***     Calculate Quantity based on Number of Outs of all Film Dimension Outs
        if LF_NOOUT_OUT gt 0.
          CS_CALCV-CALCV = CS_CALCV-CALCV / LF_NOOUT_OUT.
        else.
          CS_CALCV-CALCV = 0.
        endif.
      endif.

*** Logic "Multiple MFO"
    else.
      check LF_NOOUT_OUT is not initial.
***   Convert it to Machine Quantity In using the Total Out
      CS_CALCV-CALCV = CS_CALCV-CALCV / LF_NOOUT_OUT.
    endif.

***--------------------------------------------------------------------------------------
*** Convert Length to Weight
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                     where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_CONV_WTL.
      LR_CONV_WTL ?= LR_RTE_PSTEP->R_BLOBJ.
      exit.
    endloop.
    if LR_CONV_WTL is bound.
      LR_CONV_WTL->CONV_LENGTH_TO_WEIGHT( changing CS_CALCV = CS_CALCV ).
    endif.

  endmethod.
  method CONV_RHNDL_OUT_TO_IN.

    data: LS_RHNDL type ZVCXI_FFSR_S_RHNDL.

***--------------------------------------------------------------------------------------
*** Return only one inbound Roll Handling based on outbound
    read table IT_RHNDL_OUT into LS_RHNDL index 1.

*** Default based on turned values
    move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to LS_RHNDL-S_RHSRC-RHSWI.

***--------------------------------------------------------------------------------------
*** Get Previous Winding Direction
    case LS_RHNDL-RWDIR.
      when 'L'.                        "Left   -> Right
        move 'R' to LS_RHNDL-RWDIR.
      when 'R'.                        "Right  -> Left
        move 'L' to LS_RHNDL-RWDIR.
      when 'T'.                        "Top    -> Bottom
        move 'B' to LS_RHNDL-RWDIR.
      when 'B'.                        "Bottom -> Top
        move 'T' to LS_RHNDL-RWDIR.
    endcase.

*** Get Previous Eyemark Position
    case LS_RHNDL-EYEMP.
      when 'L'.                        "Left   -> Right
        move 'R' to LS_RHNDL-EYEMP.
      when 'R'.                        "Right  -> Left
        move 'L' to LS_RHNDL-EYEMP.
      when 'B'.                        "Both   -> Both
      when 'C'.                        "Center -> Center
    endcase.

*** Use Roll Target Length as Length for Optimization
    LS_RHNDL-S_RLEOP = value #( RLEOP     = LS_RHNDL-S_RLETA-RLETA
                                RLEOP_UOM = LS_RHNDL-S_RLETA-RLETA_UOM ).

*** Default Roll Target Diameter
    LS_RHNDL-S_RHSRC-RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT.
    clear: LS_RHNDL-RDMTA,
           LS_RHNDL-S_RDITA-RDITA,
           LS_RHNDL-S_RLETA-RLETA,
           LS_RHNDL-S_RWGTA-RWGTA,
           LS_RHNDL-RLEOF.

*** Request default of Core
    move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to LS_RHNDL-S_RHSRC-RHSCO.
    clear: LS_RHNDL-S_MS_CORE.

*** Single Out during backwarding
    move 1 to LS_RHNDL-NOOUT.

***--------------------------------------------------------------------------------------
*** Return singel entry
    append LS_RHNDL to RT_RHNDL_IN.

  endmethod.
  method CONVERT_TO_MQTYO.

    data: LF_UNIT      type ABAP_BOOL,
          LF_NOUPS_OUT type ZVCXI_F0S_NOUPS,
          LF_NOOUT     type ZVCXI_XCS_NOOUT.
    data: LT_FIDIM_OUT type ZVCXI_FFSP_TT_FIDIM.


***----------------------------------------------------------------------------
*** Find Unitizing Step
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into data(LR_RTE_PSTEP)
                                      where TABLE_LINE->R_BLOBJ is instance of ZCL_VCXI_FFSR_BL_PSTEP_UNIT.
      if LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT.
        LF_UNIT = ABAP_TRUE.
      endif.
    endloop.

    if LF_UNIT eq ABAP_TRUE.
***   Get Roll Dimension
      ME->GET_FIDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                  importing ET_FIDIM_OUT = LT_FIDIM_OUT ).
***   Convert to PC based on total Roll Length
      CS_CALCV = ZCL_VCXI_FFSP_SERVICE=>CONV_L_TO_P( IS_CALCV = CS_CALCV
                                                     IS_FIDIM = value #( S_RLETA = value #( LT_FIDIM_OUT[ 1 ]-S_RLETA optional ) ) ).

***   Ignore Dimension Outs of MFMO (suppressed by NOUPS = 0)
      delete LT_FIDIM_OUT where NOUPS = 0.

***   Collect Ups/Outs of all Roll Dimension Out
      LF_NOUPS_OUT = reduce #( init NOUPS_OUT = 0 for LS_FIDIM_OUT in LT_FIDIM_OUT next NOUPS_OUT = NOUPS_OUT + ( LS_FIDIM_OUT-NOUPS * LS_FIDIM_OUT-NOOUT ) ).
      LF_NOOUT =  reduce #( init NOOUT = 0 for LS_FIDIM_OUT in LT_FIDIM_OUT next NOOUT += LS_FIDIM_OUT-NOOUT ).

***   Calculate
      if LF_NOUPS_OUT is not initial.
        CS_CALCV-CALCV = conv ZVCXI_XCSP_MQTYO( CS_CALCV-CALCV / LF_NOUPS_OUT * LF_NOOUT ).
      else.
        clear CS_CALCV-CALCV.
      endif.
    endif.

  endmethod.
  method COPY.

    data: LR_BL_PRTE type ref to ZCL_VCXI_FFSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Super Copy
    RR_BL_PRTE = SUPER->COPY( ).
    move RR_BL_PRTE ?to LR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Copy Roll Handling Information
    move ME->T_RHNDL_OUT to LR_BL_PRTE->T_RHNDL_OUT.

  endmethod.
  method DESERIALIZE_INFO.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML   = LF_XML
                T_RHNDL_OUT = ME->T_RHNDL_OUT.

*** Super Deserialize
    if LF_XML is not initial.
      SUPER->DESERIALIZE_INFO( IF_XML = LF_XML ).
    endif.

  endmethod.
  method GET_EVQTY_IN.

    data: LS_CALCV     type        ZVCXI_XCS_S_CALCV.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_CONV_WTL  type ref to ZIF_VCXI_FFSR_CONV_WTL.


***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->GET_EVQTY_IN( exporting IR_BL_RTESPV = IR_BL_RTESPV
                                   IR_BL_PSTEP  = IR_BL_PSTEP
                         changing  CS_EVQTY     = CS_EVQTY ).

*** Find first Workcenter
    read table ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    if SY-SUBRC ne 0.
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Convert Weight to Length (for Ingoing Films of Lamination-Extrusion)
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_WTL.
          check LR_CONV_WTL is bound.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
    if LR_CONV_WTL is bound.
      move CS_EVQTY-EVQTY     to LS_CALCV-CALCV.
      move CS_EVQTY-EVQTY_UOM to LS_CALCV-CALCV_UOM.

      LR_CONV_WTL->CONV_WEIGHT_TO_LENGTH( changing CS_CALCV = LS_CALCV ).

      move LS_CALCV-CALCV     to CS_EVQTY-EVQTY.
      move LS_CALCV-CALCV_UOM to CS_EVQTY-EVQTY_UOM.
    endif.

*** Convert to PC based on total Roll Length
    if CS_EVQTY-EVQTY_UOM eq 'ST'.
      data(LT_RHNDL) = ME->GET_RHNDL_IN( ).

      move CS_EVQTY-EVQTY     to LS_CALCV-CALCV.
      move CS_EVQTY-EVQTY_UOM to LS_CALCV-CALCV_UOM.
      LS_CALCV = ZCL_VCXI_FFSP_SERVICE=>CONV_P_TO_L( IS_CALCV = LS_CALCV
                                                     IS_FIDIM = value #( S_RLETA = value #( LT_RHNDL[ 1 ]-S_RLETA optional ) ) ).
      move LS_CALCV-CALCV     to CS_EVQTY-EVQTY.
      move LS_CALCV-CALCV_UOM to CS_EVQTY-EVQTY_UOM.
    endif.

  endmethod.
  method GET_FIDIM_BY_RTE_ARBPL.

    data: LT_FIDIM      type        ZVCXI_FFSP_TT_FIDIM.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_ADJ_FIDIM type ref to ZIF_VCXI_FFSR_ADJ_FIDIM.

    field-symbols: <T_MFMI>  type standard table,
                   <T_MFSI>  type standard table,
                   <S_MFMI>  type          ANY,
                   <S_MFSI>  type          ANY,
                   <S_FIDIM> type          ZVCXI_FFSP_S_FIDIM.

    refresh: ET_FIDIM_IN, ET_FIDIM_OUT.
***--------------------------------------------------------------------------------------
*** Material Flow Material In Dimensions
    if ME->R_MFMI is bound.
      assign ME->R_MFMI->* to <T_MFMI>.

      loop at <T_MFMI> assigning <S_MFMI>.
        append initial line to LT_FIDIM assigning <S_FIDIM>.
        move-corresponding <S_MFMI> to <S_FIDIM>.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
    if ME->R_MFSI is bound.
      assign ME->R_MFSI->* to <T_MFSI>.

      loop at <T_MFSI> assigning <S_MFSI>.
        append initial line to LT_FIDIM assigning <S_FIDIM>.
        move-corresponding <S_MFSI> to <S_FIDIM>.
      endloop.
    endif.

*** Forward Processing of Film Dimension Changes
    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***----------------------------------------------------------------------------
***   Reset Number of Outs on next Work Center
      loop at LT_FIDIM assigning <S_FIDIM>.
        move 1 to <S_FIDIM>-NOOUT.
      endloop.

***----------------------------------------------------------------------------
***   Adjust Film Dimension IN
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_FIDIM.
            check LR_ADJ_FIDIM is bound.

            LR_ADJ_FIDIM->CALC_FIDIM_IN( changing CT_FIDIM = LT_FIDIM ).

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   Keep PC Dimension In at requested Work Center
      if LR_RTE_ARBPL eq IR_RTE_ARBPL.
        move LT_FIDIM to ET_FIDIM_IN.
      endif.

***--------------------------------------------------------------------------------------
***   Calculate Film Out
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_FFSR_ADJ_FIDIM.
          LR_ADJ_FIDIM ?= LR_RTE_PSTEP->R_BLOBJ.
          LR_ADJ_FIDIM->CALC_FIDIM_OUT( changing CT_FIDIM = LT_FIDIM ).
        endif.

***     Production Step with Roll Handling
        if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
          data(LT_RHNDL) = cast ZIF_VCXI_FFSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->T_RHNDL.
          loop at LT_FIDIM assigning <S_FIDIM>.
            if LINE_EXISTS( LT_RHNDL[ SY-TABIX ] ).
              <S_FIDIM>-S_RLETA = LT_RHNDL[ SY-TABIX ]-S_RLETA.
            endif.
          endloop.
        endif.
      endloop.

***   Stop calculating at requested Work Center
      if LR_RTE_ARBPL eq IR_RTE_ARBPL.
        move LT_FIDIM to ET_FIDIM_OUT.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_RDIM_IN.

    field-symbols: <T_MFMI> type standard table,
                   <T_MFSI> type standard table,
                   <S_MFMI> type          ANY,
                   <S_MFSI> type          ANY.


***--------------------------------------------------------------------------------------
*** Material Flow Material In Dimensions
    if ME->R_MFMI is bound.
      assign ME->R_MFMI->* to <T_MFMI>.

      loop at <T_MFMI> assigning <S_MFMI>.
        append corresponding #( <S_MFMI> ) to RT_RDIM_IN.
      endloop.
    endif.

*** Material Flow SFG In Dimensions
    if ME->R_MFSI is bound.
      assign ME->R_MFSI->* to <T_MFSI>.

      loop at <T_MFSI> assigning <S_MFSI>.
        append corresponding #( <S_MFSI> ) to RT_RDIM_IN.
      endloop.
    endif.

*** Ignore unknown Roll Diameters
    delete RT_RDIM_IN where RDITA is initial.

  endmethod.
  method GET_RHNDL_IN.

    data: LT_RHNDL     type        ZVCXI_FFSR_TT_RHNDL.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL     type ref to ZIF_VCXI_FFSR_RHNDL.

    check ME->R_RTE_PRTE is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of first Work Center
    read table ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    if SY-SUBRC eq 0.
***   Get Information of first Production Step with Roll Handling
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                       where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_RHNDL.
        exit.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
    if LR_RHNDL is bound.
***   Use Roll Handling and adjust Outbound to Inbound
      LT_RHNDL = LR_RHNDL->T_RHNDL.
      RT_RHNDL_IN = ME->CONV_RHNDL_OUT_TO_IN( IT_RHNDL_OUT = LT_RHNDL ).
    else.
***   Return Outbound Roll Handling Information as is
      RT_RHNDL_IN = ME->T_RHNDL_OUT.

***   Use Roll Target Length as Length for Optimization
      loop at RT_RHNDL_IN assigning field-symbol(<S_RHNDL>).
        <S_RHNDL>-S_RLEOP = value #( RLEOP     = <S_RHNDL>-S_RLETA-RLETA
                                     RLEOP_UOM = <S_RHNDL>-S_RLETA-RLETA_UOM ).
      endloop.
    endif.

  endmethod.
  method GET_RTE_ATYPE.

    data: LF_GAATY       type /VCXI/VSMC_GAATY.
    data: LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL_LAST type ref to ZIF_VCXI_FFSR_RHNDL,
          LR_RTE_CADDON type ref to /VCXI/CL_VSMR_RTE_CADDON.


***--------------------------------------------------------------------------------------
*** Call Super
    RT_RTE_ATYPE = SUPER->GET_RTE_ATYPE( IR_RTE_CMACH = IR_RTE_CMACH
                                         IR_RTE_ARBPL = IR_RTE_ARBPL ).

***--------------------------------------------------------------------------------------
*** Get last Roll Handing Information of all Production Step
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
           where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
      LR_RHNDL_LAST ?= LR_RTE_PSTEP->R_BLOBJ.
    endloop.

    if LR_RHNDL_LAST is bound and
       LR_RHNDL_LAST->T_RHNDL is not initial.
***   Get Add-on Customizing
      LR_RTE_CADDON = /VCXI/CL_VSMR_RTE_CADDON=>GET_INSTANCE( IR_RTE_CMACH = IR_RTE_CMACH
                                                              IF_IATYP     = 'FF_AT_RWIND' ).

***   Aspect - Target Roll Length
      try.
          LF_GAATY = LR_RTE_CADDON->R_ATYPE->GET_GAATY_BY_IAATY( IF_IAATY = ZCL_VCXI_FFSP_PR_ADDON_RWIND=>C_IAATY_RLETA
                                                                 IF_MAATY = /VCXI/CL_VSMC_ATYPE=>C_MAATY_REC ).
          append value #( R_ATYPE     = LR_RTE_CADDON->R_ATYPE
                          T_RTE_SAREC = value #( ( GAATY  = LF_GAATY
                                                   MAXSEL = 1
                                                   ASORT  = /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING
                                                   I_ARECN = value #( ( SIGN   = 'I'
                                                                        OPTION = 'LE'
                                                                        LOW    = LR_RHNDL_LAST->T_RHNDL[ 1 ]-RLETA ) )
                                                 ) )
                        ) to RT_RTE_ATYPE.
        catch /VCXI/CX_CKX.
      endtry.
    endif.

  endmethod.
  method GET_SPVRE_MFMI.

    data: LS_LEOKY type          /VCXI/VKSR_S_LEOKY,
          LS_PARAM type          /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE      type ref to   /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMI type ref to   /VCXI/CL_VKSR_SPVRE.
    data:          LS_MFMI_L  type          ZVCXI_FFSR_S_MFMI_L.
    field-symbols: <T_MFMI>   type standard table,
                   <S_MFMI>   type          ANY.

    check ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      move-corresponding <S_MFMI> to LS_MFMI_L.

***--------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_L'
                                          IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMI
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMI to CT_SPVRE.
      move   ABAP_TRUE     to CF_MFI.

***   Set In Use
      LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Leading Object
      move LS_MFMI_L-MATNR                                   to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
      LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***   Set Setup Percentage for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_L-MFISP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_L-MFISP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_L-MFICF                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor Per for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_L-MFICP                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Purchase Flag
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_L-PURCH                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Costing Relevant
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_SANKA              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_L-SANKA                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Text
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_L-TEXT                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Vendor Number
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_L-LIFNR                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Film Width
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_FIWID to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                          to LS_PARAM-PARTY.
      move LS_MFMI_L-FIWID                                            to LS_PARAM-ATFLV.
      move LS_MFMI_L-FIWID_UOM                                        to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                           to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Repeat Length
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_RELEN   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-RELEN                                              to LS_PARAM-ATFLV.
      move LS_MFMI_L-RELEN_UOM                                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Film Thickness (Internal)
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_FITIN   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-FITIN                                              to LS_PARAM-ATFLV.
      move LS_MFMI_L-FITIN_UOM                                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Film Thickness (External)
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_FITEX   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-FITEX                                              to LS_PARAM-ATFLV.
      move LS_MFMI_L-FITEX_UOM                                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Surface Weight
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_SURWT   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-SURWT                                              to LS_PARAM-ATFLV.
      move LS_MFMI_L-SURWT_UOM                                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Number of Ups
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_NOUPS   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-NOUPS                                              to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Number of Outs
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_L=>ZIF_VCXI_FFSP_FIDIM~C_PARID_NOOUT   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
      move LS_MFMI_L-NOOUT                                              to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Add Price Scale Manager
      IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                              IT_PSCALE       = LS_MFMI_L-T_PSCALE
                                    changing  CT_SPVRE        = CT_SPVRE ).

    endloop.

  endmethod.
  method PREP_EVAL_WASTE.

    data: LF_UNIT type ABAP_BOOL.
    data: LT_FIDIM_OUT type ZVCXI_FFSP_TT_FIDIM.


***----------------------------------------------------------------------------
*** Find Unitizing Step
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into data(LR_RTE_PSTEP)
                                      where TABLE_LINE->R_BLOBJ is instance of ZCL_VCXI_FFSR_BL_PSTEP_UNIT.
      if LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT.
        LF_UNIT = ABAP_TRUE.
        exit.
      endif.
    endloop.

*** Get Roll Dimension
    ME->GET_FIDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_FIDIM_OUT = LT_FIDIM_OUT ).

*** Prepare Machine Quantity Out for Conversion
    data(LS_CALCV) = value ZVCXI_XCS_S_CALCV( CALCV     = IS_MQTYO-MQTYO
                                              CALCV_UOM = IS_MQTYO-MQTYO_UOM ).

    if LF_UNIT eq ABAP_TRUE.
***   Convert to PC based on total Roll Length
      if LS_CALCV-CALCV_UOM ne 'ST'.  "already converted by CONVERT_TO_MQTYO for last Work Center
        LS_CALCV = ZCL_VCXI_FFSP_SERVICE=>CONV_L_TO_P( IS_CALCV = LS_CALCV
                                                       IS_FIDIM = value #( S_RLETA = value #( LT_FIDIM_OUT[ 1 ]-S_RLETA optional ) ) ).
      endif.
    else.
***   Convert to PC based on total Roll Length
      if LS_CALCV-CALCV_UOM eq 'ST'.  "converted by previous Work Center
        LS_CALCV = ZCL_VCXI_FFSP_SERVICE=>CONV_P_TO_L( IS_CALCV = LS_CALCV
                                                       IS_FIDIM = value #( S_RLETA = value #( LT_FIDIM_OUT[ 1 ]-S_RLETA optional ) ) ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Standard Preparation
    SUPER->PREP_EVAL_WASTE( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                      IS_MQTYO      = value #( MQTYO     = LS_CALCV-CALCV
                                                               MQTYO_UOM = LS_CALCV-CALCV_UOM )
                            changing  CT_EVAL_WASTE = CT_EVAL_WASTE ).

  endmethod.
  method SERIALIZE_INFO.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE_INFO( ).

*** Serialize
    call transformation ID
         source SUPER_XML   = RF_XML
                T_RHNDL_OUT = ME->T_RHNDL_OUT
         result xml RF_XML.

  endmethod.
  method SET_RHNDL_OUT.

    check IT_RHNDL_OUT ne ME->T_RHNDL_OUT.

*** Set new Roll Handling Information
    move IT_RHNDL_OUT to ME->T_RHNDL_OUT.

  endmethod.
  method UPDATE_RHNDL.

    data: LF_INDEX_ARBPL type I,
          LF_INDEX_PSTEP type I.
    data: LS_RHNDL type ZVCXI_FFSR_S_RHNDL,
          LS_FIDIM type ZVCXI_FFSP_S_FIDIM,
          LS_MFMI  type ZVCXI_P5SR_S_MFMI.
    data: LT_RTE_ARBPL type /VCXI/VSMR_TT_RTE_ARBPL,
          LT_RHNDL_OUT type ZVCXI_FFSR_TT_RHNDL,
          LT_RHNDL_IN  type ZVCXI_FFSR_TT_RHNDL,
          LT_RHNDL     type ZVCXI_FFSR_TT_RHNDL,
          LT_FIDIM_OUT type ZVCXI_FFSP_TT_FIDIM,
          LT_RDIM      type ZVCXI_FFSR_TT_RDIM.
    data: LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL       type ref to ZIF_VCXI_FFSR_RHNDL,
          LR_RHNDL_COMBO type ref to ZIF_VCXI_FFSR_RHNDL.
    field-symbols: <S_RHNDL> type          ZVCXI_FFSR_S_RHNDL,
                   <T_MFMI>  type standard table,
                   <S_MFMI>  type          ANY.


*** Collect only Work Center with Roll Handling
    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
          append LR_RTE_ARBPL to LT_RTE_ARBPL.
          exit.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Prepare Backwards Calculation by setting last Work Center as starting point
    move LINES( LT_RTE_ARBPL ) to LF_INDEX_ARBPL.

*** Perform Backward Calculation
    do LINES( LT_RTE_ARBPL ) times.
      read table LT_RTE_ARBPL into LR_RTE_ARBPL index LF_INDEX_ARBPL.
      if SY-SUBRC ne 0.
        exit.
      endif.

***   Special Handling for last Work Center
      if LINES( LT_RTE_ARBPL ) eq LF_INDEX_ARBPL.
***     Last Operation receives outbound Roll Handling Information
        move ME->T_RHNDL_OUT to LT_RHNDL_OUT.
      else.
***     Any other Operation receives inbound Roll Handling Information of "next" Operation
        move LT_RHNDL_IN to LT_RHNDL_OUT.
      endif.

***   Adjust Number of Outs
      ME->GET_FIDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = LR_RTE_ARBPL
                                  importing ET_FIDIM_OUT = LT_FIDIM_OUT ).
      loop at LT_RHNDL_OUT assigning <S_RHNDL>.
        read table LT_FIDIM_OUT into LS_FIDIM index SY-TABIX.
        if SY-SUBRC eq 0.
          move LS_FIDIM-NOOUT to <S_RHNDL>-NOOUT.
        endif.
      endloop.

***--------------------------------------------------------------------------------------
***   Prepare Backwards Calculation by setting last Production Step as starting point
      move LINES( LR_RTE_ARBPL->T_RTE_PSTEP ) to LF_INDEX_PSTEP.

***   Perform Backward Calculation
      do LINES( LR_RTE_ARBPL->T_RTE_PSTEP ) times.
        read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index LF_INDEX_PSTEP.
        if SY-SUBRC ne 0.
          exit.
        endif.

***     Check if Production Step supports Roll Handling
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_RHNDL.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_RHNDL.
        endtry.
        if LR_RHNDL is bound.
***       Get current values of Roll Handling
          move LR_RHNDL->T_RHNDL to LT_RHNDL.

***       Set backwarded Roll Handling Information
          if LINES( LT_RHNDL ) eq LINES( LT_RHNDL_OUT ).
***         Don't overwrite user changes if number of entries match
            loop at LT_RHNDL assigning <S_RHNDL>.
              read table LT_RHNDL_OUT into LS_RHNDL index SY-TABIX.
              if SY-SUBRC eq 0.
***             Update Core Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSCO ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSCO to <S_RHNDL>-S_RHSRC-RHSCO.
                  move LS_RHNDL-S_MS_CORE     to <S_RHNDL>-S_MS_CORE.
                endif.

***             Update Dimensions Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSDI ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSDI to <S_RHNDL>-S_RHSRC-RHSDI.
                  move LS_RHNDL-RDMTA         to <S_RHNDL>-RDMTA.
                  move LS_RHNDL-S_RDITA       to <S_RHNDL>-S_RDITA.
                  move LS_RHNDL-S_RLETA       to <S_RHNDL>-S_RLETA.
                  move LS_RHNDL-S_RWGTA       to <S_RHNDL>-S_RWGTA.
                  move LS_RHNDL-RLEOF         to <S_RHNDL>-RLEOF.
                endif.

***             Update Winding Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSWI ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSWI to <S_RHNDL>-S_RHSRC-RHSWI.
                  move LS_RHNDL-RWSID         to <S_RHNDL>-RWSID.
                  move LS_RHNDL-RWDIR         to <S_RHNDL>-RWDIR.
                  move LS_RHNDL-EYEMP         to <S_RHNDL>-EYEMP.
                endif.

                move LS_RHNDL-S_RLEOP         to <S_RHNDL>-S_RLEOP.
                move LS_RHNDL-NOOUT           to <S_RHNDL>-NOOUT.
              endif.
            endloop.
          else.
***         Overwrite at full if entries don't match
            move LT_RHNDL_OUT to LT_RHNDL.
          endif.
          LR_RHNDL->SET_RHNDL( IT_RHNDL     = LT_RHNDL
                               IR_RTE_ARBPL = LR_RTE_ARBPL ).

***       Keep current Roll Handling Information as outbound (for other Production Steps)
          move LR_RHNDL->T_RHNDL to LT_RHNDL_OUT.

***       Special Handling for outbound Roll Handling of last Work Center
          if LINES( LR_RTE_ARBPL->T_RTE_PSTEP )   eq LF_INDEX_PSTEP and
             LINES( LT_RTE_ARBPL ) eq LF_INDEX_ARBPL.
***         Update outbound Roll Handling Information with updated Infos of Last Operation
            ME->SET_RHNDL_OUT( IT_RHNDL_OUT = LR_RHNDL->T_RHNDL ).
          endif.
        endif.

***     Go to previous Production Step
        subtract 1 from LF_INDEX_PSTEP.

      enddo.

***--------------------------------------------------------------------------------------
***   Convert outbound to inbound Roll Handling
      LT_RHNDL_IN = ME->CONV_RHNDL_OUT_TO_IN( IT_RHNDL_OUT = LT_RHNDL_OUT ).

***   Go to previous workcenter
      subtract 1 from LF_INDEX_ARBPL.
    enddo.


***--------------------------------------------------------------------------------------
*** Get Roll Dimension In
    LT_RDIM = ME->GET_RDIM_IN( ).

*** Forward Processing of Roll Dimension Changes
    loop at LT_RTE_ARBPL into LR_RTE_ARBPL.
***   Adjust Number of Outs
      ME->GET_FIDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = LR_RTE_ARBPL
                                  importing ET_FIDIM_OUT = LT_FIDIM_OUT ).

      clear LT_RHNDL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                       where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
***     Update Number of Outs
        LT_RHNDL = cast ZIF_VCXI_FFSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->T_RHNDL.
        loop at LT_RHNDL assigning <S_RHNDL>.
          <S_RHNDL>-NOOUT = value #( LT_FIDIM_OUT[ SY-TABIX ]-NOOUT optional ).
        endloop.
        cast ZIF_VCXI_FFSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->SET_RHNDL( IT_RHNDL     = LT_RHNDL
                                                                      IR_RTE_ARBPL = LR_RTE_ARBPL ).

***     Set new Roll Dimensions In
        cast ZIF_VCXI_FFSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->SET_RDIM_IN( IT_RDIM_IN = LT_RDIM ).
***     Get Roll Dimensions Out for forwarding
        cast ZIF_VCXI_FFSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->GET_RDIM( importing ET_RDIM_OUT = LT_RDIM ).

      endloop.
    endloop.

*** Update outbound Roll Handling Information with updated Infos of Last Operation
    if LT_RHNDL is not initial.
      ME->SET_RHNDL_OUT( IT_RHNDL_OUT = LT_RHNDL ).
    endif.

*** Update Material Flow Material In with Roll Handling Infos
    if ME->R_MFMI is bound.
      assign ME->R_MFMI->* to <T_MFMI>.

      LT_RHNDL_IN = ME->GET_RHNDL_IN( ).
      loop at <T_MFMI> assigning <S_MFMI>.
        LS_MFMI = corresponding #( <S_MFMI> ).
        LS_MFMI-S_RLETA = value #( LT_RHNDL_IN[ 1 ]-S_RLETA optional ).
        <S_MFMI> = corresponding #( base ( <S_MFMI> ) LS_MFMI ).
      endloop.
    endif.

  endmethod.
