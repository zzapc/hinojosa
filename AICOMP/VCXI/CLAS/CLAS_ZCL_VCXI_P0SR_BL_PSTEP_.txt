
class ZCL_VCXI_P0SR_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PSTEP
  create public .

public section.

  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods RESTORE_ON_UPDATE
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  methods TURN_PCDIM
    importing
      !IS_PCDIM type ZVCXI_P0SP_S_PCDIM
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP definition
class ZCL_VCXI_P0SR_BL_PSTEP implementation.
method ADD_SPVRE_MFSI_P.

  data:  LF_IMFXC            type        ZVCXI_XCSP_IMFXC,
         LF_NEXTL            type        ZVCXI_XCSP_NEXTL.
  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_PCDIR            type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSI_P     type ref to /VCXI/CL_VKSR_SPVRE.

*** Only if PC Direction is defined
  try.
      move ME ?to LR_PCDIR.
      check LR_PCDIR is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MFSI_P
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_MFMGR.
  append LR_SPVRE_MFSI_P to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
  read table ME->T_IMFXC_IN into LF_IMFXC index 1.
  if SY-SUBRC eq 0.
*** Set MF X-Connect
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_IMFXC                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
  endif.

***------------------------------------------------------------------------------------------------
*** "Next Low-Level Code" Flag
  read table ME->T_NEXTL into LF_NEXTL index 1.
  if SY-SUBRC eq 0.
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL        to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_NEXTL                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set PC Direction
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR      to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move LR_PCDIR->F_PCDIR                           to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ADD_SPVRE_MFSO_P.

  data:  LF_IMFXC            type        ZVCXI_XCSP_IMFXC.
  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSO_P     type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
  loop at CT_SPVRE into LR_SPVRE_MFSO_P.
    if LR_SPVRE_MFSO_P->GET_ID( ) eq 'MFSO_P'.
      delete CT_SPVRE.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MFSO_P
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_MFMGR.
  append LR_SPVRE_MFSO_P to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MFSO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
  read table ME->T_IMFXC_OUT into LF_IMFXC index 1.
  if SY-SUBRC eq 0.
*** Set MF X-Connect
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_IMFXC                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSO_P->SET_PARAM( IS_PARAM = LS_PARAM ).
  endif.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP        type ref to ZCL_VCXI_P0SR_BL_PSTEP,
         LR_PCDIR_ME        type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_OTHER     type ref to ZIF_VCXI_P0SR_PCDIR.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Compare PC Direction if available
  try.
      move ME          ?to LR_PCDIR_ME.
      move IR_BL_PSTEP ?to LR_PCDIR_OTHER.

      if LR_PCDIR_ME    is bound and
         LR_PCDIR_OTHER is bound.

        if LR_PCDIR_ME->F_PCDOP eq LR_PCDIR_OTHER->F_PCDOP and
           LR_PCDIR_ME->F_PCDIR eq LR_PCDIR_OTHER->F_PCDIR.
          move ABAP_TRUE  to RF_SIMILAR.
        else.
          move ABAP_FALSE to RF_SIMILAR.
          exit.
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      if LR_PCDIR_ME is bound.
        move ABAP_FALSE to RF_SIMILAR.
      endif.
  endtry.

endmethod.
method COPY.

  data:  LR_BL_PSTEP        type ref to ZCL_VCXI_P0SR_BL_PSTEP,
         LR_PCDIR_ME        type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_NEW       type ref to ZIF_VCXI_P0SR_PCDIR.

  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Copy PC Direction if available
  try.
      move ME          ?to LR_PCDIR_ME.
      move RR_BL_PSTEP ?to LR_PCDIR_NEW.

      if LR_PCDIR_ME  is bound and
         LR_PCDIR_NEW is bound.
        LR_PCDIR_NEW->SET_PCDIR( IF_PCDIR = LR_PCDIR_ME->F_PCDIR ).
        move LR_PCDIR_ME->F_PCDOP to LR_PCDIR_NEW->F_PCDOP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method DESERIALIZE.

  data:  LF_XML             type        STRING,
         LF_PCDIR_PCDIR     type        ZVCXI_P0SP_PCDIR,
         LF_PCDIR_PCDOP     type        ZVCXI_P0SR_PCDOP.
  data:  LR_PCDIR           type ref to ZIF_VCXI_P0SR_PCDIR.

  check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML     = LF_XML

              F_PCDIR_PCDIR = LF_PCDIR_PCDIR
              F_PCDIR_PCDOP = LF_PCDIR_PCDOP.

***--------------------------------------------------------------------------------------
*** Set PC Direction if available
  try.
      move ME ?to LR_PCDIR.

      if LR_PCDIR is bound.
        LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR_PCDIR ).
        move LF_PCDIR_PCDOP to LR_PCDIR->F_PCDOP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

***--------------------------------------------------------------------------------------
*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method GET_SPVRE_MF.

***------------------------------------------------------------------------------------------------
*** Add MFSI PC
  if CF_MFI ne ABAP_TRUE.
    ME->ADD_SPVRE_MFSI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE ).
    move ABAP_TRUE to CF_MFI.
  endif.

***------------------------------------------------------------------------------------------------
*** Add MFSO PC
  if CF_MFO ne ABAP_TRUE.
    ME->ADD_SPVRE_MFSO_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE ).
    move ABAP_TRUE to CF_MFO.
  endif.

endmethod.
method RESTORE_ON_UPDATE.

  data:  LR_BL_PSTEP        type ref to ZCL_VCXI_P0SR_BL_PSTEP,
         LR_PCDIR_ME        type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_OLD       type ref to ZIF_VCXI_P0SR_PCDIR.

  SUPER->RESTORE_ON_UPDATE( IR_BL_PSTEP = IR_BL_PSTEP ).
  move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Copy PC Direction if available
  try.
      move ME          ?to LR_PCDIR_ME.
      move IR_BL_PSTEP ?to LR_PCDIR_OLD.

      if LR_PCDIR_ME  is bound and
         LR_PCDIR_OLD is bound.

        if LR_PCDIR_ME->F_PCDOP ne ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
          LR_PCDIR_ME->SET_PCDIR( IF_PCDIR = LR_PCDIR_OLD->F_PCDIR ).
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method SERIALIZE.

  data:  LF_PCDIR_PCDIR     type        ZVCXI_P0SP_PCDIR,
         LF_PCDIR_PCDOP     type        ZVCXI_P0SR_PCDOP.
  data:  LR_PCDIR           type ref to ZIF_VCXI_P0SR_PCDIR.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

***--------------------------------------------------------------------------------------
*** Get PC Direction if available
  try.
      move ME ?to LR_PCDIR.

      if LR_PCDIR is bound.
        move LR_PCDIR->F_PCDIR to LF_PCDIR_PCDIR.
        move LR_PCDIR->F_PCDOP to LF_PCDIR_PCDOP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.


***--------------------------------------------------------------------------------------
*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              F_PCDIR_PCDIR = LF_PCDIR_PCDIR
              F_PCDIR_PCDOP = LF_PCDIR_PCDOP

       result xml RF_XML.

endmethod.
method TURN_PCDIM.

*** Keep everything else
  move IS_PCDIM           to RS_PCDIM.

  if IF_PCDIR ne IS_PCDIM-PCDIR.
*** Set new Direction
    move IF_PCDIR           to RS_PCDIM-PCDIR.

*** Turn
    move IS_PCDIM-PCLEN     to RS_PCDIM-PCWID.
    move IS_PCDIM-PCLEN_UOM to RS_PCDIM-PCWID_UOM.

    move IS_PCDIM-PCWID     to RS_PCDIM-PCLEN.
    move IS_PCDIM-PCWID_UOM to RS_PCDIM-PCLEN_UOM.
  endif.

endmethod.
