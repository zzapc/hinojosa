
class ZCL_VCXI_PCSS_PR_AREA_WGT_CR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PC_AREA_WGT_CR type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_AREA_WGT_CR'. "#EC NOTEXT

  methods GET_AREAO
    returning
      value(RS_AREAO) type ZVCXI_P0SS_S_AREAO
    raising
      /VCXI/CX_CKX .
  methods GET_AREAR
    returning
      value(RS_AREAR) type ZVCXI_PCSS_S_AREAR
    raising
      /VCXI/CX_CKX .
  methods GET_WDRYO
    returning
      value(RS_WDRYO) type ZVCXI_P0SS_S_WDRYO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRYR
    returning
      value(RS_WDRYR) type ZVCXI_PCSS_S_WDRYR
    raising
      /VCXI/CX_CKX .
  methods GET_WWETO
    returning
      value(RS_WWETO) type ZVCXI_P0SS_S_WWETO
    raising
      /VCXI/CX_CKX .
  methods GET_WWETR
    returning
      value(RS_WWETR) type ZVCXI_PCSS_S_WWETR
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  data R_PR_SPEC_CR type ref to ZCL_VCXI_PCSS_PR_SPEC_CR .
  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WWETW type /VCXI/VKSC_IEVNT value 'RECALC_WWETW'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WDRYW type /VCXI/VKSC_IEVNT value 'RECALC_WDRYW'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WASTE type /VCXI/VKSC_IEVNT value 'RECALC_WASTE'. "#EC NOTEXT
  constants C_IEVNT_O_WWETR_CHANGED type /VCXI/VKSC_IEVNT value 'WWETR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WWETO_CHANGED type /VCXI/VKSC_IEVNT value 'WWETO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRYR_CHANGED type /VCXI/VKSC_IEVNT value 'WDRYR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRYO_CHANGED type /VCXI/VKSC_IEVNT value 'WDRYO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AREAR_CHANGED type /VCXI/VKSC_IEVNT value 'AREAR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AREAO_CHANGED type /VCXI/VKSC_IEVNT value 'AREAO_CHANGED'. "#EC NOTEXT
  constants C_PARID_WWETR type /VCXI/VKS_PARID value 'ZVCXI_PC_WWETR'. "#EC NOTEXT
  constants C_PARID_WWETO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWETO'. "#EC NOTEXT
  constants C_PARID_WDRYR type /VCXI/VKS_PARID value 'ZVCXI_PC_WDRYR'. "#EC NOTEXT
  constants C_PARID_WDRYO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRYO'. "#EC NOTEXT
  constants C_PARID_AREAR type /VCXI/VKS_PARID value 'ZVCXI_PC_AREAR'. "#EC NOTEXT
  constants C_PARID_AREAO type /VCXI/VKS_PARID value 'ZVCXI_P0_AREAO'. "#EC NOTEXT

  methods GET_DETAIL_SPEC_CR
    exporting
      !ES_ROLEN type ZVCXI_PCS_S_ROLEN
      !ES_ROWID type ZVCXI_PCS_S_ROWID
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_WDRYW
    importing
      !IS_WDRYA type ZVCXI_P0SS_S_WDRYA
    returning
      value(RS_WDRYW) type ZVCXI_P0SS_S_WDRYW
    raising
      /VCXI/CX_CKX .
  methods GET_WWETW
    importing
      !IS_WWETA type ZVCXI_P0SS_S_WWETA
    returning
      value(RS_WWETW) type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AREA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WDRYW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WWETW
    raising
      /VCXI/CX_CKX .
  methods SET_AREAO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AREAO type ZVCXI_P0SS_S_AREAO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_AREAR
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AREAR type ZVCXI_PCSS_S_AREAR
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRYO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRYO type ZVCXI_P0SS_S_WDRYO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRYR
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRYR type ZVCXI_PCSS_S_WDRYR
    raising
      /VCXI/CX_CKX .
  methods SET_WWETO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWETO type ZVCXI_P0SS_S_WWETO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWETR
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWETR type ZVCXI_PCSS_S_WWETR
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PCSS_PR_AREA_WGT_CR definition
class ZCL_VCXI_PCSS_PR_AREA_WGT_CR implementation.
method GET_AREAO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).
  move LS_PARAM-ATFLV to RS_AREAO-AREAO.
  move LS_PARAM-UNIT  to RS_AREAO-AREAO_UOM.

endmethod.
method GET_AREAR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAR ).
  move LS_PARAM-ATFLV to RS_AREAR-AREAR.
  move LS_PARAM-UNIT  to RS_AREAR-AREAR_UOM.

endmethod.
method GET_DETAIL_SPEC_CR.

  check ME->R_PR_SPEC_CR is bound.
  ES_ROLEN = ME->R_PR_SPEC_CR->GET_ROLEN( ).
  ES_ROWID = ME->R_PR_SPEC_CR->GET_ROWID( ).

endmethod.
method GET_OPQTY.

  data:  LS_QITEM         type        ZVCXI_XCSS_S_QITEM.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QITEM( importing ES_QITEM_SELF = LS_QITEM ).
    move LS_QITEM-QITEM     to RS_OPQTY-OPQTY.
    move LS_QITEM-QITEM_UOM to RS_OPQTY-OPQTY_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY to RS_OPQTY.
  endif.

endmethod.
method GET_WDRYO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRYO ).
  move LS_PARAM-ATFLV to RS_WDRYO-WDRYO.
  move LS_PARAM-UNIT  to RS_WDRYO-WDRYO_UOM.

endmethod.
method GET_WDRYR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRYR ).
  move LS_PARAM-ATFLV to RS_WDRYR-WDRYR.
  move LS_PARAM-UNIT  to RS_WDRYR-WDRYR_UOM.

endmethod.
method GET_WDRYW.

  data:  LS_WDRYW           type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYW_P         type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA           type        ZVCXI_P0SS_S_WDRYA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_WEIGHT.
            continue.
        endtry.

        if LR_WEIGHT is bound.
          clear: LS_WDRYW, LS_WDRYA.
          LR_WEIGHT->GET_WDRYW( importing ES_WDRYW = LS_WDRYW
                                          ES_WDRYA = LS_WDRYA ).

          check LS_WDRYW-WDRYW is not initial.

***       Weights per Area
          if LS_WDRYA-WDRYA is not initial.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_WDRYA-WDRYA_UOM
                                                               IF_UOM_IN    = LS_WDRYA-WDRYA_UOM
                                                               IF_VALUE_IN  = LS_WDRYA-WDRYA
                                                     importing EF_VALUE_OUT = LS_WDRYA-WDRYA
                                                               EF_UOM_OUT   = LS_WDRYA-WDRYA_UOM ).


            if RS_WDRYW-WDRYW is not initial.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WDRYW-WDRYW_UOM
                                                                 IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                                 IF_VALUE_IN  = LS_WDRYW-WDRYW
                                                       importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                                 EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

              RS_WDRYW-WDRYW     = RS_WDRYW-WDRYW + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA ).

            else.
              RS_WDRYW-WDRYW = ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA.

            endif.

            RS_WDRYW-WDRYW_UOM = LS_WDRYW-WDRYW_UOM.

***       Weights per Piece
          else.

            if LS_WDRYW_P is initial.
              move-corresponding LS_WDRYW to LS_WDRYW_P.
            else.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WDRYW-WDRYW
                                                                  IF_CALCV_UOM_1 = LS_WDRYW-WDRYW_UOM
                                                                  IF_CALCV_2     = LS_WDRYW_P-WDRYW
                                                                  IF_CALCV_UOM_2 = LS_WDRYW_P-WDRYW_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_WDRYW_P-WDRYW_UOM
                                                        importing EF_CALCV       = LS_WDRYW_P-WDRYW
                                                                  EF_CALCV_UOM   = LS_WDRYW_P-WDRYW_UOM ).
            endif.



          endif.
        endif.

      endloop.

***   Add PC Weights to Area Weight if needed
      if LS_WDRYW_P-WDRYW is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WDRYW-WDRYW
                                                            IF_CALCV_UOM_1 = RS_WDRYW-WDRYW_UOM
                                                            IF_CALCV_2     = LS_WDRYW_P-WDRYW
                                                            IF_CALCV_UOM_2 = LS_WDRYW_P-WDRYW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WDRYW-WDRYW_UOM
                                                  importing EF_CALCV       = RS_WDRYW-WDRYW
                                                            EF_CALCV_UOM   = RS_WDRYW-WDRYW_UOM ).
      endif.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method GET_WWETO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETO ).
  move LS_PARAM-ATFLV to RS_WWETO-WWETO.
  move LS_PARAM-UNIT  to RS_WWETO-WWETO_UOM.

endmethod.
method GET_WWETR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETR ).
  move LS_PARAM-ATFLV to RS_WWETR-WWETR.
  move LS_PARAM-UNIT  to RS_WWETR-WWETR_UOM.

endmethod.
method GET_WWETW.

  data:  LS_WWETW           type        ZVCXI_P0SS_S_WWETW,
         LS_WWETW_P         type        ZVCXI_P0SS_S_WWETW,
         LS_WWETA           type        ZVCXI_P0SS_S_WWETA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_WEIGHT.
            continue.
        endtry.

        if LR_WEIGHT is bound.
          clear: LS_WWETW, LS_WWETA.
          LR_WEIGHT->GET_WWETW( importing ES_WWETW = LS_WWETW
                                          ES_WWETA = LS_WWETA ).

          check LS_WWETW-WWETW is not initial.

***       Weights per Area
          if LS_WWETA-WWETA is not initial.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_WWETA-WWETA_UOM
                                                               IF_UOM_IN    = LS_WWETA-WWETA_UOM
                                                               IF_VALUE_IN  = LS_WWETA-WWETA
                                                     importing EF_VALUE_OUT = LS_WWETA-WWETA
                                                               EF_UOM_OUT   = LS_WWETA-WWETA_UOM ).


            if RS_WWETW-WWETW is not initial.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WWETW-WWETW_UOM
                                                                 IF_UOM_IN    = LS_WWETW-WWETW_UOM
                                                                 IF_VALUE_IN  = LS_WWETW-WWETW
                                                       importing EF_VALUE_OUT = LS_WWETW-WWETW
                                                                 EF_UOM_OUT   = LS_WWETW-WWETW_UOM ).

              RS_WWETW-WWETW     = RS_WWETW-WWETW + ( ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA ).

            else.
              RS_WWETW-WWETW = ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA.

            endif.

            RS_WWETW-WWETW_UOM = LS_WWETW-WWETW_UOM.

***       Weights per Piece
          else.

            if LS_WWETW_P is initial.
              move-corresponding LS_WWETW to LS_WWETW_P.
            else.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WWETW-WWETW
                                                                  IF_CALCV_UOM_1 = LS_WWETW-WWETW_UOM
                                                                  IF_CALCV_2     = LS_WWETW_P-WWETW
                                                                  IF_CALCV_UOM_2 = LS_WWETW_P-WWETW_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_WWETW_P-WWETW_UOM
                                                        importing EF_CALCV       = LS_WWETW_P-WWETW
                                                                  EF_CALCV_UOM   = LS_WWETW_P-WWETW_UOM ).
            endif.



          endif.
        endif.

      endloop.

***------------------------------------------------------------------------------------------------
***   Add PC Weights to Area Weight if needed
      if LS_WWETW_P-WWETW is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WWETW-WWETW
                                                            IF_CALCV_UOM_1 = RS_WWETW-WWETW_UOM
                                                            IF_CALCV_2     = LS_WWETW_P-WWETW
                                                            IF_CALCV_UOM_2 = LS_WWETW_P-WWETW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WWETW-WWETW_UOM
                                                  importing EF_CALCV       = RS_WWETW-WWETW
                                                            EF_CALCV_UOM   = RS_WWETW-WWETW_UOM ).
      endif.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_AREA.
      ME->HANDLE_RECALC_AREA( ).

    when C_IEVNT_I_RECALC_WDRYW.
      ME->HANDLE_RECALC_WDRYW( ).

    when C_IEVNT_I_RECALC_WWETW.
      ME->HANDLE_RECALC_WWETW( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Specification Ref
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_SPEC_CR=>C_IPRVT_PC_SPEC_CR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC_CR.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if ME->R_PR_SPEC_CR is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PCSS_PR_SPEC_CR=>C_IPRVT_PC_SPEC_CR
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_RECALC_AREA.

  data:          LS_ROWID      type        ZVCXI_PCS_S_ROWID,
                 LS_ROLEN      type        ZVCXI_PCS_S_ROLEN,
                 LS_AREAO      type        ZVCXI_P0SS_S_AREAO,
                 LS_AREAR      type        ZVCXI_PCSS_S_AREAR,
                 LS_OPQTY      type        /VCXI/VSMR_S_OPQTY.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_AREAO>     type        ZVCXI_P0SS_AREAO.

  LS_AREAR = ME->GET_AREAR( ).
  LS_AREAO = ME->GET_AREAO( ).

***--------------------------------------------------------------------------------------
*** Get Sheet Details
  ME->GET_DETAIL_SPEC_CR( importing ES_ROLEN = LS_ROLEN
                                    ES_ROWID = LS_ROWID ).

***--------------------------------------------------------------------------------------
*** Recalc Area per Roll
  if LS_ROWID-ROWID     is not initial and
     LS_ROWID-ROWID_UOM is not initial and
     LS_ROLEN-ROLEN     is not initial and
     LS_ROLEN-ROLEN_UOM is not initial.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ROWID-ROWID
                                                        IF_CALCV_UOM_1 = LS_ROWID-ROWID_UOM
                                                        IF_CALCV_2     = LS_ROLEN-ROLEN
                                                        IF_CALCV_UOM_2 = LS_ROLEN-ROLEN_UOM
                                                        IF_UOM         = LS_AREAR-AREAR_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_AREAR-AREAR
                                                        EF_CALCV_UOM   = LS_AREAR-AREAR_UOM ).
  endif.

*** Make sure we do not get a negative value
  if LS_AREAR-AREAR < 0.
    move 0 to LS_AREAR-AREAR.
  endif.

*** Set Area
  ME->SET_AREAR( IS_AREAR = LS_AREAR ).

***--------------------------------------------------------------------------------------
*** Set Area per Order
  LS_AREAO = ME->GET_AREAO( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_AREAO-AREAO = LS_OPQTY-OPQTY * LS_AREAR-AREAR.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_AREAO-AREAO ).
      assign LR_DATA->* to <F_AREAO>.
      LS_AREAO-AREAO = <F_AREAO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_AREAO-AREAO < 0.
    move 0 to LS_AREAO-AREAO.
  endif.

  ME->SET_AREAO( IS_AREAO = LS_AREAO ).

endmethod.
method HANDLE_RECALC_WDRYW.

  data: LS_WDRYR     type ZVCXI_PCSS_S_WDRYR,
        LS_WDRYO     type ZVCXI_P0SS_S_WDRYO,
        LS_AREAR     type ZVCXI_PCSS_S_AREAR,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Dry Weight per Roll
  LS_WDRYR = ME->GET_WDRYR( ).
  LS_AREAR = ME->GET_AREAR( ).

*** Get Dry Weight per Roll
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_AREAR ).

  LS_WDRYR-WDRYR     = LS_WDRYW-WDRYW.
  LS_WDRYR-WDRYR_UOM = LS_WDRYW-WDRYW_UOM.

*** Make sure we do not have a negative value
  if LS_WDRYR-WDRYR < 0.
    move 0 to LS_WDRYR-WDRYR.
  endif.

*** Set Dry Weight per Roll
  ME->SET_WDRYR( IS_WDRYR = LS_WDRYR ).

*** 2. Step: Set Dry Weight per Order
  LS_WDRYO = ME->GET_WDRYO( ).

***  Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

  if LS_WDRYR-WDRYR > 0.
*** Get Dry Weight per Order
    LS_WDRYO-WDRYO = LS_OPQTY-OPQTY * LS_WDRYR-WDRYR.
  else.
    move 0 to LS_WDRYO-WDRYO.
  endif.

*** Set Dry Weight per Order
  ME->SET_WDRYO( IS_WDRYO = LS_WDRYO ).

endmethod.
method HANDLE_RECALC_WWETW.

  data: LS_WWETR     type ZVCXI_PCSS_S_WWETR,
        LS_WWETO     type ZVCXI_P0SS_S_WWETO,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW,
        LS_AREAR     type ZVCXI_PCSS_S_AREAR,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Reel Weight's
*** 1. Step: Set Wet Weight per Roll
  LS_WWETR = ME->GET_WWETR( ).
  LS_AREAR = ME->GET_AREAR( ).

*** Get Wet Weight per Roll
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_AREAR ).

  LS_WWETR-WWETR     = LS_WWETW-WWETW.
  LS_WWETR-WWETR_UOM = LS_WWETW-WWETW_UOM.

*** Make sure we do not have a negative value
  if LS_WWETR-WWETR < 0.
    move 0 to LS_WWETR-WWETR.
  endif.

*** Set Wet Weight per Roll
  ME->SET_WWETR( IS_WWETR = LS_WWETR ).

*** 2. Step: Wet Weight per Order
  LS_WWETO = ME->GET_WWETO( ).

*** Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

*** Make sure we do not have a negative value
  if LS_WWETR-WWETR > 0.
    LS_WWETO-WWETO = LS_OPQTY-OPQTY * LS_WWETR-WWETR.
  else.
    move 0 to LS_WWETO-WWETO.
  endif.

*** Set Wet Weight per Order
  ME->SET_WWETO( IS_WWETO = LS_WWETO ).

endmethod.
method SET_AREAO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).

  move IS_AREAO-AREAO     to LS_PARAM-ATFLV.
  move IS_AREAO-AREAO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREAO_CHANGED ).
  endif.

endmethod.
method SET_AREAR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAR ).

  move IS_AREAR-AREAR     to LS_PARAM-ATFLV.
  move IS_AREAR-AREAR_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREAR_CHANGED ).
  endif.

endmethod.
method SET_WDRYO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRYO ).

  move IS_WDRYO-WDRYO     to LS_PARAM-ATFLV.
  move IS_WDRYO-WDRYO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYO_CHANGED ).
  endif.

endmethod.
method SET_WDRYR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRYR ).

  move IS_WDRYR-WDRYR     to LS_PARAM-ATFLV.
  move IS_WDRYR-WDRYR_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYR_CHANGED ).
  endif.

endmethod.
method SET_WWETO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETO ).

  move IS_WWETO-WWETO     to LS_PARAM-ATFLV.
  move IS_WWETO-WWETO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETO_CHANGED ).
  endif.

endmethod.
method SET_WWETR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETR ).

  move IS_WWETR-WWETR     to LS_PARAM-ATFLV.
  move IS_WWETR-WWETR_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETR_CHANGED ).
  endif.

endmethod.
