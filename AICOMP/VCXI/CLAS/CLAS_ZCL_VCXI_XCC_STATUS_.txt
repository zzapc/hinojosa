
class ZCL_VCXI_XCC_STATUS definition
  public
  final
  create public .

public section.
  type-pools ICON .

  types:
    YI_ABGRU type range of VBAP-ABGRU .
  types:
    YI_AUART type range of VBAK-AUART .
  types:
    YI_BESKZ type range of MARC-BESKZ .
  types:
    YI_ERDAT type range of VBAK-ERDAT .
  types:
    YI_ERNAM type range of VBAK-ERNAM .
  types:
    YI_GBSTA type range of VBUP-GBSTA .
  types:
    YI_LVORM type range of MARA-LVORM .
  types:
    YI_LVOWK type range of MARC-LVORM .
  types:
    YI_MATKL type range of MARA-MATKL .
  types:
    YI_MATNR type range of MARA-MATNR .
  types:
    YI_MATSD type range of VBAP-MATNR .
  types:
    YI_MTART type range of MARA-MTART .
  types:
    YI_SOBSL type range of MARC-SOBSL .
  types:
    YI_STATE type range of /VCXI/VKSR_ELMST .
  types:
    YI_STDPD type range of MARC-STDPD .
  types:
    YI_VBELN type range of VBAK-VBELN .
  types:
    YI_VBTYP type range of VBAK-VBTYP .
  types:
    YI_WERKS type range of MARC-WERKS .
  types:
    YI_WRKSD type range of VBAP-WERKS .
  types:
***   Output Structure
    begin of YS_OUTP,
        CUOBJ       type CUOBJ,
        LOVCS       type C length 1,
        LOVCS_ICON  type ICON_D,
        STATE1      type /VCXI/VKSR_ELMST,   " Initial SVC Status
        STATE1_ICON type ICON_D,
        STATE2      type /VCXI/VKSR_ELMST,   " SVC Status after Processing (ALV via Selection Screen)
        STATE2_ICON type ICON_D,
        STATE3      type /VCXI/VKSR_ELMST,   " SVC Status after Processing with Save (ALV via Button)
        STATE3_ICON type ICON_D,
        VBELN       type VBELN,
        POSNR       type POSNR,
        ABGRU       type ABGRU,
        WERKS       type WERKS_D,
        MATNR       type MATNR,
        MAKTX       type MAKTX.
        include type /VCXI/CKXM_S_MSG as S_MSG.
  types  end of YS_OUTP .
  types:
    YT_OUTP type standard table of YS_OUTP .

  methods SELECTION_MAT
    importing
      !II_MATNR type YI_MATNR
      !II_MTART type YI_MTART
      !II_MATKL type YI_MATKL
      !II_LVORM type YI_LVORM
      !II_WERKS type YI_WERKS
      !II_STDPD type YI_STDPD
      !II_BESKZ type YI_BESKZ
      !II_SOBSL type YI_SOBSL
      !II_LVOWK type YI_LVOWK .
  methods CHECK_STATUS
    importing
      !IF_PROC type ABAP_BOOL optional
      !IF_SAVE type ABAP_BOOL optional
      !II_STATE type YI_STATE optional
      !IT_ROWS type LVC_T_ROW optional
      !IF_LIST type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SELECTION_SDOC
    importing
      !II_VBELN type YI_VBELN
      !II_ERDAT type YI_ERDAT
      !II_ERNAM type YI_ERNAM
      !II_VBTYP type YI_VBTYP
      !II_AUART type YI_AUART
      !II_MATSD type YI_MATSD
      !II_WRKSD type YI_WRKSD
      !II_GBSTA type YI_GBSTA
      !II_ABGRU type YI_ABGRU .
  methods DISPLAY_ALV .
  methods LIST_PROCESSING
    importing
      !IF_PAMAT type ABAP_BOOL
      !IF_COAR type ABAP_BOOL
      !IF_CORN type ABAP_BOOL
      !IF_COGR type ABAP_BOOL
      !IF_RMID type SY-MSGID
      !IF_RMNO type SY-MSGNO
      !II_STATE type YI_STATE
    raising
      /VCXI/CX_CKX .
protected section.

  data T_OUTP type YT_OUTP .

  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_HOTSPOT
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods START_SVC_UI
    importing
      !IS_OUTP type YS_OUTP
    raising
      /VCXI/CX_CKX .
private section.

  data R_ALV_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_ALV_GRID type ref to CL_GUI_ALV_GRID .

  methods GET_STATUS_MAT
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_PROC type ABAP_BOOL
      !IF_SAVE type ABAP_BOOL
    changing
      !CF_ELMST1 type /VCXI/VKSR_ELMST
      !CF_ELMST2 type /VCXI/VKSR_ELMST
      !CF_ELMST3 type /VCXI/VKSR_ELMST
      !CS_MSG type /VCXI/CKXM_S_MSG
    raising
      /VCXI/CX_CKX .
  methods GET_STATUS_SDOC
    importing
      !IF_VBELN type VBELN
      !IF_POSNR type POSNR
      !IF_PROC type ABAP_BOOL
      !IF_SAVE type ABAP_BOOL optional
    changing
      !CF_ELMST1 type /VCXI/VKSR_ELMST
      !CF_ELMST2 type /VCXI/VKSR_ELMST
      !CF_ELMST3 type /VCXI/VKSR_ELMST
      !CS_MSG type /VCXI/CKXM_S_MSG
    raising
      /VCXI/CX_CKX .
  methods PROGRESS_BAR
    importing
      !IF_TABIX type SY-TABIX .
  methods GET_FIELDCAT_BY_DATA
    changing
      !CT_FIELDCAT type LVC_T_FCAT .
  methods GET_STATUS_MSG
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RS_MSG) type /VCXI/CKXM_S_MSG
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCC_STATUS definition
class ZCL_VCXI_XCC_STATUS implementation.
  method CHECK_STATUS.

    data: LF_TABIX type I.
    data: LR_SVC type ref to /VCXI/CL_VKSRA_SVC.
    field-symbols: <S_OUTP> like line of T_OUTP.


***----------------------------------------------------------------------------
*** List Headers
    if IF_LIST eq 'X'.
      write: /   'Plant', 7 'Material', 26 'Short Text', 67 'SD Doc.', 78 'Pos.', 84 'Rej.',
              87 'LO-VC Status'(F01), 'Initial SVC'(F02), 'SVC after Process'(F03), 'SVC after Save'(F04), 'Message'.
      uline.
    endif.

***----------------------------------------------------------------------------
*** Process selecte VCs
    loop at ME->T_OUTP assigning <S_OUTP>.
      LF_TABIX = SY-TABIX.

***   Process only provided Rows
      if IT_ROWS is supplied.
        check LINE_EXISTS( IT_ROWS[ INDEX = LF_TABIX ] ).
      endif.

      if SY-TABIX mod 25 eq 1.
***     Cleanup SVC Instances
        call function 'CUCB_INITIALIZER'.
***     Progress
        ME->PROGRESS_BAR( IF_TABIX = LF_TABIX ).
      endif.

***----------------------------------------------------------------------------
***   Get LOVC status
      call function 'CE_I_GET_STATUS'
        exporting
          INSTANCE               = <S_OUTP>-CUOBJ
          IV_RAISE_INCONSISTENCY = 'X'
        exceptions
          FREE                   = 1
          INCOMPLETE             = 2
          INCONSISTENT           = 3
          LOCKED                 = 4
          INSTANCE_NOT_FOUND     = 5
          STATUS_NOT_FOUND       = 6
          others                 = 7.
      case SY-SUBRC.
        when 1.
          <S_OUTP>-LOVCS      = 'F'.  "Free
          <S_OUTP>-LOVCS_ICON = ICON_GREEN_LIGHT.
        when 2 or 3.
          <S_OUTP>-LOVCS      = 'I'.  "Inconsistent
          <S_OUTP>-LOVCS_ICON = ICON_YELLOW_LIGHT.
        when 4.
          <S_OUTP>-LOVCS      = 'L'.  "Locked
          <S_OUTP>-LOVCS_ICON = ICON_RED_LIGHT.
      endcase.

***----------------------------------------------------------------------------
***   Get SmartVC incl. Process and Save ...
      if <S_OUTP>-VBELN is not initial and
         <S_OUTP>-POSNR is not initial.
***     ... of Sales Document
        ME->GET_STATUS_SDOC( exporting IF_VBELN  = <S_OUTP>-VBELN
                                       IF_POSNR  = <S_OUTP>-POSNR
                                       IF_PROC   = IF_PROC
                                       IF_SAVE   = IF_SAVE
                              changing CF_ELMST1 = <S_OUTP>-STATE1
                                       CF_ELMST2 = <S_OUTP>-STATE2
                                       CF_ELMST3 = <S_OUTP>-STATE3
                                       CS_MSG    = <S_OUTP>-S_MSG ).
      elseif <S_OUTP>-MATNR is not initial and
             <S_OUTP>-WERKS is not initial.
***     ... of Material Master
        ME->GET_STATUS_MAT( exporting IF_MATNR  = <S_OUTP>-MATNR
                                      IF_WERKS  = <S_OUTP>-WERKS
                                      IF_PROC   = IF_PROC
                                      IF_SAVE   = IF_SAVE
                             changing CF_ELMST1 = <S_OUTP>-STATE1
                                      CF_ELMST2 = <S_OUTP>-STATE2
                                      CF_ELMST3 = <S_OUTP>-STATE3
                                      CS_MSG    = <S_OUTP>-S_MSG  ).
      endif.

***   Get Icons
      <S_OUTP>-STATE1_ICON = /VCXI/CL_VKSR_SERVICE=>GET_ELMST_ICON( <S_OUTP>-STATE1 ).
      <S_OUTP>-STATE2_ICON = /VCXI/CL_VKSR_SERVICE=>GET_ELMST_ICON( <S_OUTP>-STATE2 ).
      <S_OUTP>-STATE3_ICON = /VCXI/CL_VKSR_SERVICE=>GET_ELMST_ICON( <S_OUTP>-STATE3 ).

***----------------------------------------------------------------------------
***   Filter Output based on initial Status
      if not <S_OUTP>-STATE1 in II_STATE.
        delete ME->T_OUTP.
        continue.
      endif.

***----------------------------------------------------------------------------
***   List Output
      if IF_LIST eq 'X'.
        write: / <S_OUTP>-WERKS  under 'Plant',   <S_OUTP>-MATNR under 'Material', <S_OUTP>-MAKTX  under 'Short Text',
                 <S_OUTP>-VBELN  under 'SD Doc.', <S_OUTP>-POSNR under 'Pos.',     <S_OUTP>-ABGRU  under 'Rej.',
                 <S_OUTP>-LOVCS_ICON  under 'LO-VC Status'(F01),      <S_OUTP>-STATE1_ICON under 'Initial SVC'(F02),
                 <S_OUTP>-STATE2_ICON under 'SVC after Process'(F03), <S_OUTP>-STATE3_ICON under 'SVC after Save'(F04),
                 <S_OUTP>-MESSAGE  under 'Message'.
      endif.

    endloop.

  endmethod.
  method DISPLAY_ALV.

    data: LT_FIELDCAT type LVC_T_FCAT,
          LT_ROW      type LVC_T_ROW.
    field-symbols: <S_OUTP> like line of T_OUTP.


*** Create ALV Grid Instance as fullscreen
    check ME->R_ALV_GRID is not bound.
    ME->R_ALV_GRID = new #( I_PARENT      = CL_GUI_CUSTOM_CONTAINER=>DEFAULT_SCREEN
                            I_APPL_EVENTS = ABAP_TRUE ).

    ME->GET_FIELDCAT_BY_DATA( changing CT_FIELDCAT = LT_FIELDCAT ).
    ME->R_ALV_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting IS_LAYOUT       = value #( CWIDTH_OPT = 'X'
                                                                                      SEL_MODE   = 'A' )
                                                 changing  IT_OUTTAB       = ME->T_OUTP
                                                           IT_FIELDCATALOG = LT_FIELDCAT ).
*** Toolbar
    set handler ME->HANDLE_TOOLBAR for R_ALV_GRID.
    set handler ME->HANDLE_USER_COMMAND for R_ALV_GRID.
    set handler ME->HANDLE_HOTSPOT for R_ALV_GRID.
    R_ALV_GRID->SET_TOOLBAR_INTERACTIVE( ).

*** Select all "Refill of Production needed."
    loop at ME->T_OUTP assigning <S_OUTP> where MSGID = 'ZVCXI_XCSR'
                                           and  MSGNO = '323'.
      append value #( INDEX = SY-TABIX ) to LT_ROW.
    endloop.
    R_ALV_GRID->SET_SELECTED_ROWS( exporting IT_INDEX_ROWS = LT_ROW ).

  endmethod.
  method GET_FIELDCAT_BY_DATA.

    data: LF_COLPOS       type I.
    data: LS_FIELDCAT type LVC_S_FCAT.
    data: LR_TABDESCR type ref to CL_ABAP_STRUCTDESCR,
          LR_DATA     type ref to DATA.


    create data LR_DATA like line of ME->T_OUTP.
    LR_TABDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( LR_DATA ).

    loop at CL_SALV_DATA_DESCR=>READ_STRUCTDESCR( LR_TABDESCR ) into data(LS_DFIES).
      clear LS_FIELDCAT.
      move-corresponding LS_DFIES to LS_FIELDCAT.

***   Adjust Fields
      case LS_FIELDCAT-FIELDNAME.
        when 'CUOBJ'.
          LS_FIELDCAT-HOTSPOT = ABAP_TRUE.
        when 'LOVCS'.
          LS_FIELDCAT-NO_OUT = ABAP_TRUE.
        when 'LOVCS_ICON'.
          LS_FIELDCAT-COLTEXT   = 'LO-VC Status'(F01).
          LS_FIELDCAT-SCRTEXT_S = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_M = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_L = LS_FIELDCAT-COLTEXT.
        when 'STATE1'.
          LS_FIELDCAT-NO_OUT = ABAP_TRUE.
        when 'STATE1_ICON'.
          LS_FIELDCAT-COLTEXT   = 'Initial SVC'(F02).
          LS_FIELDCAT-SCRTEXT_S = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_M = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_L = LS_FIELDCAT-COLTEXT.
        when 'STATE2'.
          LS_FIELDCAT-NO_OUT = ABAP_TRUE.
        when 'STATE2_ICON'.
          LS_FIELDCAT-COLTEXT   = 'SVC after Process'(F03).
          LS_FIELDCAT-SCRTEXT_S = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_M = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_L = LS_FIELDCAT-COLTEXT.
        when 'STATE3'.
          LS_FIELDCAT-NO_OUT = ABAP_TRUE.
        when 'STATE3_ICON'.
          LS_FIELDCAT-COLTEXT   = 'SVC after Save'(F04).
          LS_FIELDCAT-SCRTEXT_S = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_M = LS_FIELDCAT-COLTEXT.
          LS_FIELDCAT-SCRTEXT_L = LS_FIELDCAT-COLTEXT.

        when 'GUIDM' or 'MSGID' or 'MSGTY' or 'MSGNO' or
             'MSGV1' or 'MSGV2' or 'MSGV3' or 'MSGV4'.
          LS_FIELDCAT-NO_OUT = ABAP_TRUE.

      endcase.

***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'CUOBJ'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'LOVCS_ICON'.   LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'STATE1_ICON'.  LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'STATE2_ICON'.  LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'STATE3_ICON'.  LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'VBELN'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'POSNR'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'ABGRU'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'MATNR'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'WERKS'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'MAKTX'.        LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'ICON'.         LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if LS_FIELDCAT-FIELDNAME eq 'MESSAGE'.      LS_FIELDCAT-COL_POS = LF_COLPOS.  endif.

***   Add to Field Catalog
      append LS_FIELDCAT to CT_FIELDCAT.
    endloop.

  endmethod.
  method GET_STATUS_MAT.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_SVC     type ref to /VCXI/CL_VKSRA_SVC.


    try.
        check IF_MATNR is not initial and
              IF_WERKS is not initial.

***     Create BOB Material
        create object LR_BOB_MAT.
        LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_MATNR
                                  IF_WERKS = IF_WERKS ).
        check LR_BOB_MAT is bound.

***------------------------------------------------------------------------------------------------
***     Initial Status
        if CF_ELMST1 is initial.
          LR_SVC = LR_BOB_MAT->GET_SVC( ).
          check LR_SVC is bound.
          CF_ELMST1 = LR_SVC->GET_STATUS( ).
        endif.

***     Processing VC
        if IF_PROC eq ABAP_TRUE.
          LR_BOB_MAT->RUN_CONFIG( IF_LOCKED = ABAP_TRUE ).

          LR_SVC = LR_BOB_MAT->GET_SVC( ).
          check LR_SVC is bound.
          CF_ELMST2 = LR_SVC->GET_STATUS( ).
        endif.

***     Change Configuration and Save Material via BAPI
        if IF_SAVE eq ABAP_TRUE.
          LR_BOB_MAT->ENQUEUE( ).
          LR_BOB_MAT->CHANGE_CONFIG( ).
          LR_BOB_MAT->SAVE( ).
          LR_BOB_MAT->DEQUEUE( ).

          LR_SVC = LR_BOB_MAT->GET_SVC( ).
          check LR_SVC is bound.
          CF_ELMST3 = LR_SVC->GET_STATUS( ).
        endif.

***------------------------------------------------------------------------------------------------
***     Get Status Message
        CS_MSG = ME->GET_STATUS_MSG( IR_SVC = LR_SVC ).

***     For Debugging Purpose: Display UI
        if 1 eq 2.
          LR_SVC->START_UI( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        CS_MSG = corresponding #( LR_CX_CKX->GET_BAPIRET2( ) ).
    endtry.

  endmethod.
  method GET_STATUS_MSG.

    data: LR_MSG  type ref to /VCXI/CL_CKXM_OBJMSG_MGR.
    field-symbols: <S_MSG> type /VCXI/CKXM_S_MSG.


    check IR_SVC is bound.

***------------------------------------------------------------------------------------------------
*** Get current Messages
    LR_MSG = IR_SVC->GET_STATUS_MSG( II_MSGTY = value #( ( SIGN = 'E' OPTION = 'EQ' LOW = 'S' ) ) ).
    check LR_MSG is bound and
          LR_MSG->R_MESSAGE is bound.

*** Ensure to find at least one Error
    read table LR_MSG->R_MESSAGE->T_MSG into RS_MSG with key MSGTY = 'E'.

*** Check for Special Messages
    read table LR_MSG->R_MESSAGE->T_MSG into RS_MSG with key MSGID = 'ZVCXI_XCSR'
                                                             MSGNO = '323'. "Refill of Production needed.
    check SY-SUBRC ne 0.

***------------------------------------------------------------------------------------------------
*** For all errors
    loop at LR_MSG->R_MESSAGE->T_MSG assigning <S_MSG> where MSGTY = 'E' or
                                                             MSGTY = 'W'.
***   Ignore some Errors
      case <S_MSG>-MSGID.
        when 'ZVCXI_XCSR'.
          case <S_MSG>-MSGNO.
            when '322' " Fill is required, but not allowed.
              or '324' " Refill of Production is required, but not allowed.
              or '325' " Related Supervisor requires fill of Production.
              or '326' " Related Supervisor requires fill of Production, but not allowed.
              .
              continue.
          endcase.
      endcase.

***   Return first not ignored error
      RS_MSG = <S_MSG>.
      exit.
    endloop.

  endmethod.
  method GET_STATUS_SDOC.

    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC,
          LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_MSG      type ref to /VCXI/CL_CKXM_MESSAGE.


    try.
        check IF_VBELN is not initial and
              IF_POSNR is not initial.

***     Create BOB Sales Document
        create object LR_BOB_SDOC.
        LR_BOB_SDOC->INIT_FROM_DB( IF_VBELN = IF_VBELN ).
        check LR_BOB_SDOC is bound.

***------------------------------------------------------------------------------------------------
***     Initial Status
        if CF_ELMST1 is initial.
          LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = IF_POSNR ).
          check LR_SVC is bound.
          CF_ELMST1 = LR_SVC->GET_STATUS( ).
        endif.

***     Process VC
        if IF_PROC eq ABAP_TRUE.
          LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = IF_POSNR ).

          LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = IF_POSNR ).
          check LR_SVC is bound.
          CF_ELMST2 = LR_SVC->GET_STATUS( ).
        endif.

***     Save Sales Document via BAPI
        if IF_SAVE eq ABAP_TRUE.
          LR_BOB_SDOC->ENQUEUE( ).
          append value #( POSNR = IF_POSNR
                          UPDKZ = 'U'
                        ) to LR_BOB_SDOC->T_CFGS_UPDKZ.
          LR_MSG = LR_BOB_SDOC->SAVE( IF_TESTRUN = ABAP_FALSE ).
          LR_BOB_SDOC->DEQUEUE( ).
          check LR_MSG is bound.

          if not LINE_EXISTS( LR_MSG->T_MSG[ MSGTY = 'E' ] ) and
             not LINE_EXISTS( LR_MSG->T_MSG[ MSGTY = 'A' ] ) and
             not LINE_EXISTS( LR_MSG->T_MSG[ MSGTY = 'X' ] ).
            LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = IF_POSNR ).
            check LR_SVC is bound.
            CF_ELMST3 = LR_SVC->GET_STATUS( ).
          else.
            CS_MSG = corresponding #( value #( LR_MSG->T_MSG[ MSGTY = 'E' ] default
                                      value #( LR_MSG->T_MSG[ MSGTY = 'A' ] default
                                      value #( LR_MSG->T_MSG[ MSGTY = 'X' ] optional ) ) ) ).
            exit.
          endif.
        endif.

***------------------------------------------------------------------------------------------------
***     Get Status Message
        CS_MSG = ME->GET_STATUS_MSG( IR_SVC = LR_SVC ).

***     For Debugging Purpose: Display UI
        if 1 eq 2.
          LR_SVC->START_UI( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        CS_MSG = corresponding #( LR_CX_CKX->GET_BAPIRET2( ) ).
    endtry.

  endmethod.
  method HANDLE_HOTSPOT.

    data: LR_CX_CKX type ref to /VCXI/CX_CKX.
    field-symbols: <S_OUTP> like line of T_OUTP.

    read table ME->T_OUTP assigning <S_OUTP> index ES_ROW_NO-ROW_ID.
    case E_COLUMN_ID.
      when 'CUOBJ'.
        try.

            ME->START_SVC_UI( IS_OUTP = <S_OUTP> ).

          catch /VCXI/CX_CKX into LR_CX_CKX.
            LR_CX_CKX->SHOW_MESSAGE( ).
        endtry.
    endcase.

  endmethod.
  method HANDLE_TOOLBAR.

*** Exclude Enduser Documentation
    delete E_OBJECT->MT_TOOLBAR where FUNCTION = CL_GUI_ALV_GRID=>MC_FC_INFO.

*** Add new Buttons
    append value #( BUTN_TYPE = 3 ) to E_OBJECT->MT_TOOLBAR.
    append value #( FUNCTION  = 'PROCESS'
                    ICON      = ICON_EXECUTE_OBJECT
                    TEXT      = 'Process and Save'(004)
                    QUICKINFO = 'Process and Save selected VCs'(Q04) ) to E_OBJECT->MT_TOOLBAR.

  endmethod.
  method HANDLE_USER_COMMAND.

    data: LT_ROWS type LVC_T_ROW.


    try.
        R_ALV_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROWS ).

        case E_UCOMM.
          when 'PROCESS'.
***         Process and Save
            ME->CHECK_STATUS( IF_PROC  = ABAP_TRUE
                              IF_SAVE  = ABAP_TRUE
                              IT_ROWS  = LT_ROWS ).
            R_ALV_GRID->REFRESH_TABLE_DISPLAY( ).

        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method LIST_PROCESSING.

    data: LF_INDEX  type I.
    data: LT_ROWS type LVC_T_ROW.
    field-symbols: <S_OUTP> like line of  T_OUTP,
                   <S_ROWS> like line of LT_ROWS.


*** Process and Save inconsistent SmartVC
    if IF_COAR eq 'X'.
      loop at ME->T_OUTP assigning <S_OUTP> where STATE1 eq 'R'
                                              or  STATE1 eq 'Y'.
        LF_INDEX = SY-TABIX.
        append initial line to LT_ROWS assigning <S_ROWS>.
        <S_ROWS>-INDEX = LF_INDEX.
      endloop.
    endif.

*** Process and save with "Refill needed"
    if IF_CORN eq 'X'.
      loop at ME->T_OUTP assigning <S_OUTP> where MSGID eq 'ZVCXI_XCSR'
                                             and  MSGNO eq '323'.
        LF_INDEX = SY-TABIX.
        append initial line to LT_ROWS assigning <S_ROWS>.
        <S_ROWS>-INDEX = LF_INDEX.
      endloop.
    endif.

*** Process and save consistent SmartVC
    if IF_COGR eq 'X'.
      loop at ME->T_OUTP assigning <S_OUTP> where STATE1 eq 'G'.
        LF_INDEX = SY-TABIX.
        append initial line to LT_ROWS assigning <S_ROWS>.
        <S_ROWS>-INDEX = LF_INDEX.
      endloop.
    endif.

*** Process and save with specific Message and ID
    if IF_RMID is not initial and
       IF_RMNO is not initial.
      loop at ME->T_OUTP assigning <S_OUTP> where MSGID eq IF_RMID
                                             and  MSGNO eq IF_RMNO.
        LF_INDEX = SY-TABIX.
        append initial line to LT_ROWS assigning <S_ROWS>.
        <S_ROWS>-INDEX = LF_INDEX.
      endloop.
    endif.

***------------------------------------------------------------------------------------------------
*** Process and Save with List Output of results
    check LT_ROWS is not initial.
    sort LT_ROWS.
    delete adjacent duplicates from LT_ROWS.
    skip 2.
    ME->CHECK_STATUS( IF_LIST  = ABAP_TRUE
                      IF_PROC  = ABAP_TRUE
                      IF_SAVE  = ABAP_TRUE
                      II_STATE = II_STATE
                      IT_ROWS  = LT_ROWS ).

  endmethod.
  method PROGRESS_BAR.

    data: LF_MSG  type STRING,
          LF_PERC type I.


    LF_PERC = 100 * IF_TABIX / LINES( ME->T_OUTP ).
    LF_MSG = CONDENSE( | { IF_TABIX }/{ LINES( ME->T_OUTP ) } | ).

*** Redispatch
    call function 'TH_REDISPATCH'.

    if SY-BATCH is initial and
       LF_PERC is not initial.
***   Progress Indicator
      call function 'SAPGUI_PROGRESS_INDICATOR'
        exporting
          PERCENTAGE = LF_PERC
          TEXT       = LF_MSG.
    else.
      message LF_MSG type 'S'.
    endif.

  endmethod.
  method SELECTION_MAT.

*** Material Selection
    select
      MARC~CUOBJ
      MARC~MATNR
      MARC~WERKS
      MAKT~MAKTX
      into corresponding fields of table ME->T_OUTP
      from MARC
      inner join MARA on
        MARA~MATNR eq MARC~MATNR
      left outer join MAKT on
        MAKT~MATNR eq MARC~MATNR and
        MAKT~SPRAS eq SY-LANGU
      where
        MARA~MTART in II_MTART and
        MARA~MATKL in II_MATKL and
        MARA~LVORM in II_LVORM and
        MARC~MATNR in II_MATNR and
        MARC~CUOBJ ne 0 and
        MARC~STDPD in II_STDPD and
        MARC~BESKZ in II_BESKZ and
        MARC~SOBSL in II_SOBSL and
        MARC~WERKS in II_WERKS and
        MARC~LVORM in II_LVOWK
      order by MARC~MATNR MARC~WERKS.

  endmethod.
  method SELECTION_SDOC.

*** Sales Document Selection
    select
      VBAP~CUOBJ
      VBAP~MATNR
      VBAP~WERKS
      VBAP~ARKTX as MAKTX
      VBAP~VBELN
      VBAP~POSNR
      VBAP~ABGRU
      appending corresponding fields of table ME->T_OUTP
      from VBAK
      inner join VBAP on
        VBAP~VBELN eq VBAK~VBELN
      where
        VBAK~VBELN  in II_VBELN and
        VBAK~ERDAT  in II_ERDAT and
        VBAK~ERNAM  in II_ERNAM and
        VBAK~VBTYP  in II_VBTYP and
        VBAK~AUART  in II_AUART and
        VBAP~CUOBJ  ne 0 and
        VBAP~MATNR  in II_MATSD and
        VBAP~WERKS  in II_WRKSD and
        VBAP~ABGRU  in II_ABGRU and
        VBAP~GBSTA  in II_GBSTA
      order by VBAP~VBELN VBAP~POSNR.

  endmethod.
  method START_SVC_UI.

    data: LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC.


*** Handle Sales Document via API
    if IS_OUTP-VBELN is not initial and
       IS_OUTP-POSNR is not initial.
***   Create BOB Sales Document
      create object LR_BOB_SDOC.
      LR_BOB_SDOC->INIT_FROM_DB( IF_VBELN = IS_OUTP-VBELN ).

***   Preprocess VC
      LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = IS_OUTP-POSNR ).

***   Get SmartVC Instance
      LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = IS_OUTP-POSNR ).
    else.
***   Handle Material via API
      if IS_OUTP-MATNR is not initial and
         IS_OUTP-WERKS is not initial.
***     Create BOB Material
        create object LR_BOB_MAT.
        LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IS_OUTP-MATNR
                                  IF_WERKS = IS_OUTP-WERKS ).

***     Process SVC before accessing it
        LR_BOB_MAT->RUN_CONFIG( IF_LOCKED = ABAP_FALSE ).

***     Get SVC
        LR_SVC = LR_BOB_MAT->GET_SVC( ).
      endif.
    endif.

    if ME->R_ALV_GRID is bound.
      ME->R_ALV_GRID->FREE( ).
      clear ME->R_ALV_GRID.
    endif.

    check LR_SVC is bound.
    LR_SVC->START_UI( ).

  endmethod.
