
class ZCL_VCXI_P0SSC_GRID_DELEM definition
  public
  inheriting from ZCL_VCXI_P0SSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_IELEM type standard table of ZVCXI_P0S_TC320 with default key .

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .

  methods ADD_DELEM
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_DELEM
    importing
      !IF_DEF_VALUE type NUMC1
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_DELEM
    importing
      !IT_PRSTY_DELEM type ZVCXI_P0SSC_TT_PRSTY_DELEM
    raising
      /VCXI/CX_CKX .
  methods GET_USED_IELEM
    returning
      value(RT_IELEM) type YT_IELEM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SSC_GRID_DELEM definition
class ZCL_VCXI_P0SSC_GRID_DELEM implementation.
method ADD_DELEM.

  data:  LS_RETURN       type                   DDSHRETVAL,
         LS_PRSTY_DELEM  type                   ZVCXI_P0SSC_S_PRSTY_DELEM,
         LS_DELEM        type                   ZVCXI_P0SSC_S_PRSTY_DELEM_SHLP,
         LS_IELEM        type                   ZVCXI_P0S_TC320.
  data:  LT_RETURN       type table of          DDSHRETVAL,
         LT_DELEM        type standard table of ZVCXI_P0SSC_S_PRSTY_DELEM_SHLP,
         LT_IELEM        type                   YT_IELEM.

  LT_IELEM = ME->GET_USED_IELEM( ).

  loop at LT_IELEM into LS_IELEM
  where DVAEL is initial.
    move-corresponding LS_IELEM to LS_DELEM.
    append LS_DELEM to LT_DELEM.
  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_P0SSC_S_PRSTY_DELEM_SHLP'
      RETFIELD        = 'IELEM'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_DELEM
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.

    move-corresponding ME->R_PRSTY->S_PRSTY to LS_PRSTY_DELEM.
    move               LS_RETURN-FIELDVAL   to LS_PRSTY_DELEM-IELEM.

*** Add Default Element
    ME->R_PRSTY->ADD_DELEM( IS_PRSTY_DELEM = LS_PRSTY_DELEM ).

  endloop.


endmethod.
method CHANGE_STYLE_DELEM.

  data: LF_STYLE_DVALU type LVC_STYLE,
        LF_STYLE_DVAEL type LVC_STYLE.

*** Default Value Element is insert
  if IF_DEF_VALUE eq 1.
    move ME->F_STYLE_ENABLED  to LF_STYLE_DVALU.
    move ME->F_STYLE_DISABLED to LF_STYLE_DVAEL.
*** Default Value is insert
  elseif IF_DEF_VALUE eq 2.
    move ME->F_STYLE_DISABLED to LF_STYLE_DVALU.
    move ME->F_STYLE_ENABLED  to LF_STYLE_DVAEL.
    LF_STYLE_DVAEL = LF_STYLE_DVAEL + CL_GUI_ALV_GRID=>MC_STYLE_F4.
*** Default Value is predefined
  elseif IF_DEF_VALUE eq 3.
    move ME->F_STYLE_DISABLED to LF_STYLE_DVALU.
    move ME->F_STYLE_DISABLED to LF_STYLE_DVAEL.
*** Nothing is insert
  elseif IF_DEF_VALUE eq 0.
    move ME->F_STYLE_ENABLED to LF_STYLE_DVALU.
    move ME->F_STYLE_ENABLED to LF_STYLE_DVAEL.
    LF_STYLE_DVAEL = LF_STYLE_DVAEL + CL_GUI_ALV_GRID=>MC_STYLE_F4.
  endif.

*** Set Default Element ID = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IELEM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Default Value = Editable if there is no default
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DVALU'
                              IF_STYLE     = LF_STYLE_DVALU
                    changing  CT_STYL      = CT_STYL ).

*** Set Default Value Uom = Editable if there is no default
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DVALU_UOM'
                              IF_STYLE     = LF_STYLE_DVALU
                    changing  CT_STYL      = CT_STYL ).

*** Set Default Value Element = Editable if there is no default Value Element predefined
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DVAEL'
                              IF_STYLE     = LF_STYLE_DVAEL
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to R_PRSTY.
    catch CX_SY_MOVE_CAST_ERROR.
*** Product Style Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_P0SSC'
          IF_MSGNO = '101' ).
  endtry.

  move 'Default Elements'(001) to ME->F_DESCR.

  check ME->R_PRSTY is bound.
  ME->F_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

endmethod.
method DELETE_DELEM.

  data:  LS_PRSTY_DELEM  type          ZVCXI_P0SSC_S_PRSTY_DELEM.

*** Process Result
  loop at IT_PRSTY_DELEM into LS_PRSTY_DELEM.

*** Delete Product Type
    ME->R_PRSTY->DELETE_DELEM( IS_PRSTY_DELEM = LS_PRSTY_DELEM ).

  endloop.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED          type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
  LF_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'TPRST' or 'PRSTY' or 'T_STYL' or 'INIT_KEY'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'IELEM' or 'DVALU' or 'DVALU_UOMM' or 'DVAEL'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_DEF_VALUE         type          NUMC1.
  data:          LS_PRSTY_DELEM       type          ZVCXI_P0SSC_S_PRSTY_DELEM,
                 LS_PRSTY_DELEM_GRID  type          ZVCXI_P0SSC_S_PRSTY_DELEM_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get Product Style - Product Type Entries
  loop at ME->R_PRSTY->T_PRSTY_DELEM into LS_PRSTY_DELEM.
    clear: LS_PRSTY_DELEM_GRID.

    move-corresponding LS_PRSTY_DELEM to LS_PRSTY_DELEM_GRID.

*** All is possible
    if ( LS_PRSTY_DELEM_GRID-DVALU     is initial or
         LS_PRSTY_DELEM_GRID-DVALU_UOM is initial )
    and  LS_PRSTY_DELEM_GRID-DVAEL     is initial.
      move 0 to LF_DEF_VALUE.
*** Only Default Value is possible
    elseif ( LS_PRSTY_DELEM_GRID-DVALU     is not initial or
             LS_PRSTY_DELEM_GRID-DVALU_UOM is not initial )
       and   LS_PRSTY_DELEM_GRID-DVAEL     is initial.
      move 1 to LF_DEF_VALUE.
*** Only Default Value Element is Possible
    elseif ( LS_PRSTY_DELEM_GRID-DVALU     is initial or
             LS_PRSTY_DELEM_GRID-DVALU_UOM is initial )
       and   LS_PRSTY_DELEM_GRID-DVAEL     is not initial.
      move 2 to LF_DEF_VALUE.
    endif.
*** --------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_DELEM( exporting IF_DEF_VALUE = LF_DEF_VALUE
                            changing  CT_STYL      = LS_PRSTY_DELEM_GRID-T_STYL ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_PRSTY_DELEM_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method GET_USED_IELEM.

  select * from ZVCXI_P0S_TC320
  into corresponding fields of table RT_IELEM
  where FDALL eq ABAP_TRUE.

endmethod.
method HANDLE_DATA_CHANGED.

  data:          LF_IELEM             type        ZVCXI_P0SS_IELEM.
  data:          LS_PRSTY_DELEM       type        ZVCXI_P0SSC_S_PRSTY_DELEM,
                 LS_GOOD_CELLS        type        LVC_S_MODI.
  data:          LR_CX_CKX            type ref to /VCXI/CX_CKX.
  field-symbols: <F_FIELD>            type        any.


  try.


      SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                            E_ONF4          = E_ONF4
                                            E_ONF4_BEFORE   = E_ONF4_BEFORE
                                            E_ONF4_AFTER    = E_ONF4_AFTER
                                            E_UCOMM         = E_UCOMM ).


      sort ER_DATA_CHANGED->MT_GOOD_CELLS by ROW_ID.
      loop at ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS.
***     Check Default Element
        if LS_GOOD_CELLS-FIELDNAME eq 'DVAEL'.
          assign component LS_GOOD_CELLS-FIELDNAME of structure LS_PRSTY_DELEM to <F_FIELD>.
          check SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to <F_FIELD>.

          select single IELEM from ZVCXI_P0S_TC320
          into LF_IELEM
          where IELEM = <F_FIELD>.

***       Add Protocol - Please maintain existing Element ID for Default Value Element.
          check SY-SUBRC ne 0.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '081'
                                                         I_FIELDNAME = 'DVAEL'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).

          ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

        endif.

***     New RowID Start new
        at new ROW_ID.
          clear: LS_PRSTY_DELEM.
        endat.

        assign component LS_GOOD_CELLS-FIELDNAME of structure LS_PRSTY_DELEM to <F_FIELD>.
        check SY-SUBRC = 0.
        move LS_GOOD_CELLS-VALUE to <F_FIELD>.

***     Check if there is DVALU filled and DVAEL -> do add Protocol
        check ( LS_PRSTY_DELEM-DVALU     is not initial or
                LS_PRSTY_DELEM-DVALU_UOM is not initial )
          and   LS_PRSTY_DELEM-DVAEL     is not initial.

        if LS_PRSTY_DELEM-DVALU     is not initial.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '080'
                                                         I_FIELDNAME = 'DVALU'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).
        endif.

        if LS_PRSTY_DELEM-DVALU_UOM is not initial.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '080'
                                                         I_FIELDNAME = 'DVALU_UOM'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).
        endif.

        if LS_PRSTY_DELEM-DVAEL     is not initial.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '080'
                                                         I_FIELDNAME = 'DVAEL'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).
        endif.

        ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

      endloop.


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_PRSTY_DELEM       type          ZVCXI_P0SSC_S_PRSTY_DELEM.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PRSTY_DELEM.
        ME->R_PRSTY->UPDATE_DELEM( IS_PRSTY_DELEM = LS_PRSTY_DELEM ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_PRSTY->IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_PRSTY_DELEM  type          ZVCXI_P0SSC_TT_PRSTY_DELEM.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_PRSTY_DELEM> type          ZVCXI_P0SSC_S_PRSTY_DELEM,
                 <S_DATA>        type          any.

  try.

***   Get Product Type Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Product Type
          ME->ADD_DELEM( ).

        when C_FUNC_DEL.
***     Delete Product Types
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_P0SSC'
                F_MSGNO = '002'.
          endif.

***       Get Selected Product Type's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_PRSTY_DELEM assigning <S_PRSTY_DELEM>.
            move-corresponding <S_DATA> to <S_PRSTY_DELEM>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_PRSTY_DELEM assigning <S_PRSTY_DELEM>.
            move-corresponding <S_DATA> to <S_PRSTY_DELEM>.
          endloop.

***       Delete Selected Product Type's
          ME->DELETE_DELEM( IT_PRSTY_DELEM = LT_PRSTY_DELEM ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
