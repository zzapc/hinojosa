
class ZCL_VCXI_P5SS_BL_RLFPROP definition
  public
  create protected .

public section.

  interfaces ZIF_VCXI_PXSS_PRINT_COM .

  data F_PRODH type PRODH_D read-only .
  data S_CALIP type ZVCXI_P0SS_S_CALIP read-only .
  data S_GRAMM type ZVCXI_P0SS_S_GRAMM read-only .
  data T_PRINT type ZVCXI_PXSS_TT_PRINT_COM read-only .
  data F_CCBGN type ZVCXI_PXS_CCBGN read-only .
  data S_REPLE type ZVCXI_PXS_S_REPLE read-only .

  class-methods GET_CCBGN_DESCR
    importing
      !IF_CCBGN type ZVCXI_PXS_CCBGN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SBSTR
    returning
      value(RF_SBSTR) type ZVCXI_P5S_SBSTR
    raising
      /VCXI/CX_CKX .
  methods DET_PRODH
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_RLFPX type ZVCXI_P5S_RLFPX optional
    returning
      value(RR_BL_RLFPROP) type ref to ZCL_VCXI_P5SS_BL_RLFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_RLFPX
    returning
      value(RF_RLFPX) type ZVCXI_P5S_RLFPX
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_BL_RLFPROP type ref to ZCL_VCXI_P5SS_BL_RLFPROP
    raising
      /VCXI/CX_CKX .
  methods MERGE_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods MERGE_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT
    importing
      !IT_PRINT type ZVCXI_PXSS_TT_PRINT_COM
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods SET_RLFPX
    importing
      !IF_RLFPX type ZVCXI_P5S_RLFPX
    raising
      /VCXI/CX_CKX .
  methods SET_CCBGN
    importing
      !IF_CCBGN type ZVCXI_PXS_CCBGN
    raising
      /VCXI/CX_CKX .
  methods SET_REPLE
    importing
      !IS_REPLE type ZVCXI_PXS_S_REPLE
    raising
      /VCXI/CX_CKX .
protected section.

  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P5SS_BL_RLFPROP definition
class ZCL_VCXI_P5SS_BL_RLFPROP implementation.
  method DET_PRODH.

    data: LS_PRODHS type PRODHS.


    check IR_GATE          is bound and
          IR_GATE->R_CLSPR is bound.

*** Convert previous Production Hierarchy to Structure
    LS_PRODHS = ME->F_PRODH.

*** Determine adjusted Hierarchy based on provided Gate (e.g. CStep)
ENHANCEMENT-SECTION DET_PRODH SPOTS ZVCXI_P5SS_ES_BL_RLFPROP .
*    case type of IR_GATE->R_CLSPR.
*      when type ZCL_VCXI_P3SS_PR_CSTEP_ASMBL into data(LR_PR_CSTEP_ASMBL).
*        "Custom-Specific
*    endcase.
END-ENHANCEMENT-SECTION.

*** Return Production Hierarchy based on Structure
    RF_PRODH = LS_PRODHS.

  endmethod.
  method FACTORY.

*** Create BL Reference
ENHANCEMENT-SECTION FACTORY SPOTS ZVCXI_P5SS_ES_BL_RLFPROP .
    create object RR_BL_RLFPROP.
end-enhancement-section.

*** Set Reel Forward Property XML
    RR_BL_RLFPROP->SET_RLFPX( IF_RLFPX = IF_RLFPX ).

  endmethod.
  method GET_CCBGN_DESCR.

    statics: LT_TC410T type sorted table of ZVCXI_PXS_TC410T with unique key CCBGN.
    data: LS_TC410T type ZVCXI_PXS_TC410T.


    if not LINE_EXISTS( LT_TC410T[ CCBGN = IF_CCBGN ] ).
      select single *
         into LS_TC410T
         from ZVCXI_PXS_TC410T
        where CCBGN eq IF_CCBGN
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC410T = value #( CCBGN = IF_CCBGN ).
      endif.
      insert LS_TC410T into table LT_TC410T.
    endif.

    RF_DESCR = LT_TC410T[ CCBGN = IF_CCBGN ]-DESCR.

  endmethod.
  method GET_RLFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).
    check LT_DATA is not initial.

*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_RLFPX.

  endmethod.
  method GET_SBSTR.

    data: LF_GRAMM_UOMC6 type /VCXI/CKX_UOMC6.


    call function 'CONVERSION_EXIT_LUNIT_OUTPUT'
      exporting
        INPUT          = ME->S_GRAMM-GRAMM_UOM
      importing
        OUTPUT         = LF_GRAMM_UOMC6
      exceptions
        UNIT_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      LF_GRAMM_UOMC6 = ME->S_GRAMM-GRAMM_UOM.
    endif.


    if ME->F_CCBGN is not initial.
      RF_SBSTR = |{ GET_CCBGN_DESCR( IF_CCBGN = ME->F_CCBGN ) } { ME->S_GRAMM-GRAMM number = environment decimals = 0 } { LF_GRAMM_UOMC6 }|.
    endif.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'F_CCBGN'   VALUE = ref #( ME->F_CCBGN  ) )
                       ( NAME = 'S_GRAMM'   VALUE = ref #( ME->S_GRAMM  ) )
                       ( NAME = 'S_CALIP'   VALUE = ref #( ME->S_CALIP  ) )
                       ( NAME = 'T_PRINT'   VALUE = ref #( ME->T_PRINT  ) )
                       ( NAME = 'S_REPLE'   VALUE = ref #( ME->S_REPLE  ) )
                       ( NAME = 'F_PRODH'   VALUE = ref #( ME->F_PRODH  ) )
                     ).

  endmethod.
  method MERGE.

    check IR_BL_RLFPROP is bound.

*** CCB Grade Number and Grammage
    ME->SET_CCBGN( IF_CCBGN = IR_BL_RLFPROP->F_CCBGN ).
    ME->SET_GRAMM( IS_GRAMM = IR_BL_RLFPROP->S_GRAMM ).

*** Caliper
    ME->MERGE_CALIP( IS_CALIP = IR_BL_RLFPROP->S_CALIP ).

*** Print Information
    ME->SET_PRINT( IT_PRINT = IR_BL_RLFPROP->T_PRINT ).

*** Product Hierarchy
    ME->MERGE_PRODH( IF_PRODH = IR_BL_RLFPROP->F_PRODH ).

  endmethod.
  method MERGE_CALIP.

    data: LS_CALIP type ZVCXI_P0SS_S_CALIP.


    check IS_CALIP is not initial.

***----------------------------------------------------------------------------
    if ME->S_CALIP is not initial.
***   Summarize Caliper
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_CALIP-CALIP
                                                          IF_CALCV_UOM_1 = ME->S_CALIP-CALIP_UOM
                                                          IF_CALCV_2     = IS_CALIP-CALIP
                                                          IF_CALCV_UOM_2 = IS_CALIP-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_CALIP-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP-CALIP_UOM ).
    else.
***   Use provided Caliper
      LS_CALIP = IS_CALIP.
    endif.

***----------------------------------------------------------------------------
*** Set new Caliper
    ME->SET_CALIP( IS_CALIP = LS_CALIP ).

  endmethod.
  method MERGE_PRODH.

    data: LF_PRODH type PRODH_D.


    check IF_PRODH is not initial.

***----------------------------------------------------------------------------
    if ME->F_PRODH is not initial.
***   Summarize Product Hierarchy
ENHANCEMENT-SECTION MERGE_PRODH SPOTS ZVCXI_P5SS_ES_BL_RLFPROP .
      LF_PRODH = ME->F_PRODH.
END-ENHANCEMENT-SECTION.
    else.
***   Use provided Product Hierarchy
      LF_PRODH = IF_PRODH.
    endif.

***----------------------------------------------------------------------------
*** Set new Product Hierarchy
    ME->SET_PRODH( IF_PRODH = LF_PRODH ).

  endmethod.
  method SET_CALIP.

    move IS_CALIP to ME->S_CALIP.

  endmethod.
  method SET_CCBGN.

    ME->F_CCBGN = IF_CCBGN.

  endmethod.
  method SET_GRAMM.

    move IS_GRAMM to ME->S_GRAMM.

  endmethod.
  method SET_PRINT.

    ME->T_PRINT = IT_PRINT.

  endmethod.
  method SET_PRODH.

    ME->F_PRODH = IF_PRODH.

  endmethod.
  method SET_REPLE.

    move IS_REPLE to ME->S_REPLE.

  endmethod.
  method SET_RLFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_RLFPX is not initial.

***   Get Data References for XML Serialize/Deserialize
      LT_DATA = ME->GET_XML_DREF( ).
      check LT_DATA is not initial.

***   Open XML
      call transformation ID
           source xml IF_RLFPX
           result (LT_DATA).

    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    RT_PRINT_COM = ME->T_PRINT.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = ABAP_FALSE.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    ME->T_PRINT = IT_PRINT_COM.

  endmethod.
