
class ZCL_VCXI_PCSSC_BOARD_P definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  types:
    YT_TC202 type standard table of ZVCXI_PCS_TC202 with default key .
  types:
    begin of YS_STATU_DESCR,
                      MBOAR       type ZVCXI_PCSS_MBOAR,
                      TBOAR       type ZVCXI_PCSS_TBOAR,
                      STSMA       type J_STSMA,
                      STATU       type ZVCXI_PCSSC_STATU,
                      TXT04       type J_TXT04,
                      RELST       type ABAP_BOOL,
                      INIST       type ABAP_BOOL,
                      STATU_DESCR type ZVCXI_PCSSC_STATU_DESCR,
              end of YS_STATU_DESCR .
  types:
    YT_STATU_DESCR type standard table of YS_STATU_DESCR with default key .

  constants C_ACTVT_CREATE type ACTIV_AUTH value '01' ##NO_TEXT.
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06' ##NO_TEXT.
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03' ##NO_TEXT.
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02' ##NO_TEXT.
  constants C_BLEVL_PLANT type CHAR1 value 'P' ##NO_TEXT.
  constants C_CDOCL_BOARD_P type CDOBJECTCL value 'ZVCXI_PCSSC_BP' ##NO_TEXT.
  constants C_FCODE_BOARD_P_CHECK type UI_FUNC value 'BOARD_P_CHECK' ##NO_TEXT.
  constants C_FCODE_BOARD_P_DELETE type UI_FUNC value 'BOARD_P_DELETE' ##NO_TEXT.
  constants C_FCODE_BOARD_P_FREE type UI_FUNC value 'BOARD_P_FREE' ##NO_TEXT.
  constants C_FCODE_BOARD_P_SAVE type UI_FUNC value 'BOARD_P_SAVE' ##NO_TEXT.
  constants C_SYSOM_IMPERIAL type /VCXI/VKS_SYSOM value 'I' ##NO_TEXT.
  constants C_SYSOM_METRIC type /VCXI/VKS_SYSOM value 'M' ##NO_TEXT.
  constants C_TOOBJ_BOARD type /VCXI/CKX_TOOBJ value 'BOARD' ##NO_TEXT.
  data F_APBOA type ZVCXI_PCS_APBOA read-only .
  data F_CHANGED type ABAP_BOOL read-only .
  data F_DELETED type ABAP_BOOL read-only .
  data F_FTBOA type ZVCXI_PCSS_FTBOA read-only .
  data F_GBOPV type ZVCXI_PCSSC_GBOPV read-only .
  data F_NSTBG type ZVCXI_PCSS_NSTBG read-only .
  data F_SPPAP type ZVCXI_PCSS_SPPAP read-only .
  data F_STARC type ZVCXI_PCSS_STARC read-only .
  data F_STATU type ZVCXI_PCSSC_STATU read-only .
  data F_VALFR type DATS read-only .
  data F_VALTO type DATS read-only .
  data F_WERKS type WERKS_D read-only .
  data R_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G read-only .
  data R_MSG type ref to /VCXI/CL_CKXM_MESSAGE .
  data S_MINWT type ZVCXI_PCSS_S_MINWT read-only .
  data T_APBOA type ZVCXI_PCSSC_TT_APBOA read-only .
  data T_ASBOA type ZVCXI_PCSSC_TT_ASBOA read-only .
  data T_BODSC type ZVCXI_PCSSC_TT_BODSC read-only .
  data T_CLAVA_P type ZVCXI_PCSSC_TT_CLAVA_P read-only .
  data T_CLAVC_P type ZVCXI_PCSSC_TT_CLAVC_P read-only .
  data T_COWID type ZVCXI_PCSSC_TT_COWID read-only .
  data T_PAPER type ZVCXI_PCSSC_TT_PAPER read-only .
  class-data T_SYSOM type /VCXI/VKSC_TT_SYSOM read-only .

  class-methods GET_SYSOM_BY_WERKS
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RF_SYSOM) type /VCXI/VKS_SYSOM
    raising
      /VCXI/CX_CKX .
  class-methods FREE_ALL
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G optional
      !IR_BOARD_P type ref to ZCL_VCXI_PCSSC_BOARD_P optional
      !IF_WERKS type WERKS_D optional
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods COPY_BOARD_P
    importing
      !IF_WERKS type WERKS_D optional
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G optional
    returning
      value(RR_BOARD_P) type ref to ZCL_VCXI_PCSSC_BOARD_P
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
      !IF_WERKS type WERKS_D
    returning
      value(RR_BOARD_P) type ref to ZCL_VCXI_PCSSC_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods DO_CHECK
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods GET_ALLOWED_STATU
    returning
      value(RT_STATU_DESCR) type YT_STATU_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_DATE
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    returning
      value(RR_BOARD_P) type ref to ZCL_VCXI_PCSSC_BOARD_P
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_DATE_RANGE
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
      !IF_WERKS type WERKS_D
      !IF_VALFR type ZVCXI_XCS_VALFR
      !IF_VALTO type ZVCXI_XCS_VALTO
    returning
      value(RT_R_BOARD_P) type ZVCXI_PCSSC_TT_R_BOARD_P
    raising
      /VCXI/CX_CKX .
  class-methods GET_STATU
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
      !IF_INITIAL type ABAP_BOOL optional
      !IF_RELEASED type ABAP_BOOL optional
    returning
      value(RF_STATU) type ZVCXI_PCSSC_STATU
    raising
      /VCXI/CX_CKX .
  class-methods GET_STATU_DESCR
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
      !IF_STATU type ZVCXI_PCSSC_STATU optional
      !IF_TXT04 type J_TXT04 optional
    exporting
      !EF_TXT04 type J_TXT04
      !EF_STATU_DESCR type ZVCXI_PCSSC_STATU_DESCR
      !EF_STSMA type J_STSMA
      !EF_STATU type ZVCXI_PCSSC_STATU
    raising
      /VCXI/CX_CKX .
  methods IS_RELEASED
    returning
      value(RF_RELEASED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods IS_STATU_ACTIVE
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_APBOA
    importing
      !IF_APBOA type ZVCXI_PCS_APBOA optional
      !IT_APBOA type ZVCXI_PCSSC_TT_APBOA optional
    raising
      /VCXI/CX_CKX .
  methods SET_BODSC_P
    importing
      !IF_IDEST type ZVCXI_PCSS_IDEST
      !IF_BODSC type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods SET_CLAVC
    importing
      !IF_ICLAT type ZVCXI_PCSS_ICLAT
      !IF_CLAVC_DESCR type /VCXI/CKX_DESCR optional
      !IF_CLAVC type ZVCXI_PCSS_CLAVC
    raising
      /VCXI/CX_CKX .
  methods SET_CLAVA
    importing
      !IF_ICLAT type ZVCXI_PCSS_ICLAT
      !IF_CLAVA_DESCR type /VCXI/CKX_DESCR optional
      !IF_CLAVA type ZVCXI_PCSS_CLAVA
      !IF_CLAVA_UOM type ZVCXI_PCSS_CLAVA_UOM optional
    raising
      /VCXI/CX_CKX .
  methods SET_COWID
    importing
      !IT_COWID type ZVCXI_PCSSC_TT_COWID
    raising
      /VCXI/CX_CKX .
  methods SET_COWID_ACTIVE
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID
      !IF_ACTIV type ZVCXI_PCSS_ACTIV
    raising
      /VCXI/CX_CKX .
  methods SET_FTBOA
    importing
      !IF_FTBOA type ZVCXI_PCSS_FTBOA
    raising
      /VCXI/CX_CKX .
  methods SET_MINWT
    importing
      !IS_MINWT type ZVCXI_PCSS_S_MINWT
    raising
      /VCXI/CX_CKX .
  methods SET_NSTBG
    importing
      !IF_NSTBG type ZVCXI_PCSS_NSTBG
    raising
      /VCXI/CX_CKX .
  methods SET_PAPER
    importing
      !IS_PAPER type ZVCXI_PCSSC_S_PAPER
    raising
      /VCXI/CX_CKX .
  methods SET_SPPAP
    importing
      !IF_SPPAP type ZVCXI_PCSS_SPPAP
    raising
      /VCXI/CX_CKX .
  methods SET_STARC
    importing
      !IF_STARC type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods SET_STATU
    importing
      !IF_STATU type ZVCXI_PCSSC_STATU
    raising
      /VCXI/CX_CKX .
  methods SET_VALFR
    importing
      !IF_VALFR type DATS
    raising
      /VCXI/CX_CKX .
  methods SET_VALTO
    importing
      !IF_VALTO type DATS
    raising
      /VCXI/CX_CKX .
protected section.

  class-data T_STATU_DESCR type YT_STATU_DESCR .
  class-data T_TC202 type YT_TC202 .

  methods CHECK_OBLIG_BPMAT
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_PAPER
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_STARC
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_STATU_UPDATE
    importing
      !IF_STATU type ZVCXI_PCSSC_STATU
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_VALFR
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_VALFR_VALTO .
  methods CONSTRUCTOR
    importing
      !IF_GBOPV type ZVCXI_PCSSC_GBOPV
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods GET_ASBOA_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type ABAP_BOOL .
  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods LOAD_BODSC
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_BOARD_P definition
class ZCL_VCXI_PCSSC_BOARD_P implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

*** Create Menu
  create object RR_MENU.

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_CHECK.
      ME->HANDLE_CHECK( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move C_CDOCL_BOARD_P                     to EF_CDOCL.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_P=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_P=>C_ACTVT_EDIT
                                      IR_BOARD_P = ME ).

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LF_MBOAR type STRING,
         LF_VALFR type CHAR10,
         LF_VALTO type CHAR10.

  concatenate '(' ME->R_BOARD_G->S_MBOAR-MBOAR ')' into LF_MBOAR.

  write ME->F_VALFR to LF_VALFR.
  write ME->F_VALTO to LF_VALTO.

  concatenate ME->R_BOARD_G->F_BOARD LF_MBOAR ME->F_WERKS LF_VALFR '-' LF_VALTO into RF_DESCR separated by SPACE.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GBOPV to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_ID( ) to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GBOPV    type        ZVCXI_PCSSC_GBOPV.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_BOARD_P  type ref to ZCL_VCXI_PCSSC_BOARD_P.

  check IF_GUID is not initial.

  read table ZCL_VCXI_PCSSC_BOARD_P=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GBOPV.
*** Get new Instance
    create object LR_BOARD_P
      exporting
        IF_GBOPV = LF_GBOPV.

    move LR_BOARD_P ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method CHECK_AUTH.

  data:  LF_MBOAR  type ZVCXI_PCSS_MBOAR,
         LF_TBOAR  type ZVCXI_PCSS_TBOAR,
         LF_WERKS  type WERKS_D,
         LF_MSGV1  type SYMSGV,
         LF_MSGV2  type SYMSGV,
         LF_MSGV3  type SYMSGV,
         LF_MSGV4  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Get Board Mode and Type
  if IR_BOARD_P is bound and
     IR_BOARD_P->R_BOARD_G is bound.
    move IR_BOARD_P->R_BOARD_G->S_MBOAR-MBOAR to LF_MBOAR.
    move IR_BOARD_P->R_BOARD_G->F_TBOAR       to LF_TBOAR.
  elseif IR_BOARD_G is bound.
    move IR_BOARD_G->S_MBOAR-MBOAR to LF_MBOAR.
    move IR_BOARD_G->F_TBOAR       to LF_TBOAR.
  else.
    raise exception type /VCXI/CX_CKX.
  endif.

***--------------------------------------------------------------------------------------
*** Get Plant
  if IR_BOARD_P is bound.
    move IR_BOARD_P->F_WERKS to LF_WERKS.
  elseif IF_WERKS is not initial.
    move IF_WERKS to LF_WERKS.
  endif.

***--------------------------------------------------------------------------------------
*** Check Authority for Board Customizing
  if LF_WERKS is not initial.
    authority-check object 'Z_PC_BOARP'
             id 'ACTVT'       field IF_ACTVT
             id 'Z_PC_MBOAR'  field LF_MBOAR
             id 'Z_PC_TBOAR'  field LF_TBOAR
             id 'WERKS'       field LF_WERKS.
  else.
    authority-check object 'Z_PC_BOARP'
             id 'ACTVT'       field IF_ACTVT
             id 'Z_PC_MBOAR'  field LF_MBOAR
             id 'Z_PC_TBOAR'  field LF_TBOAR
             id 'WERKS'       dummy.
  endif.


***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.
    if LF_WERKS is initial.
***   No authorization to &1 Plant Board Grade (Mode &2, Type &3).
      move LF_MBOAR to LF_MSGV2.
      move LF_TBOAR to LF_MSGV3.
      raise exception type /VCXI/CX_CKX
         exporting
           F_MSGTY = 'E'
           F_MSGID = 'ZVCXI_PCSSC'
           F_MSGNO = '240'
           F_MSGV1 = LF_MSGV1
           F_MSGV2 = LF_MSGV2
           F_MSGV3 = LF_MSGV3.

    else.
***   No authorization to &1 Plant Board Grade (Mode &2, Type &3) in Plant &4.
      move LF_MBOAR to LF_MSGV2.
      move LF_TBOAR to LF_MSGV3.
      move LF_WERKS to LF_MSGV4.
      raise exception type /VCXI/CX_CKX
         exporting
           F_MSGTY = 'E'
           F_MSGID = 'ZVCXI_PCSSC'
           F_MSGNO = '241'
           F_MSGV1 = LF_MSGV1
           F_MSGV2 = LF_MSGV2
           F_MSGV3 = LF_MSGV3
           F_MSGV4 = LF_MSGV4.


    endif.
  endif.

endmethod.
method CHECK_OBLIG_BPMAT.

  data:  LF_MSGTY           type SYMSGTY.
  data:  LS_PAPER           type ZVCXI_PCSSC_S_PAPER,
         LS_FSTRUCT         type ZVCXI_PCSSC_S_FSTRUCT.

*** Make sure Papers are maintained on Plant Level
  check ME->R_BOARD_G->S_MBOAR-BPAPL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.

*** Search for obligatory Liners
  loop at ME->T_PAPER into LS_PAPER.
    read table ME->R_BOARD_G->R_FLUTE->T_FSTRUCT with key BPAID = LS_PAPER-BPAID
                                                 into LS_FSTRUCT.

    if LS_FSTRUCT-OBLIG eq ABAP_TRUE and LS_PAPER-BPMAT is initial.
      if IF_IGNORE_BSAVI ne ABAP_TRUE.
        if ME->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
          move 'W' to LF_MSGTY.
        else.
          move 'E' to LF_MSGTY.
        endif.
      else.
        move 'E' to LF_MSGTY.
      endif.

***   "Please check Paper Material of obligatory Liner &1."
      ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                              IF_MSGTY = LF_MSGTY
                              IF_MSGNO = '153'
                              IF_MSGV1 =  LS_PAPER-BPAID ).
    endif.
  endloop.

endmethod.
method CHECK_PAPER.

  data:  LF_MSGTY   type SYMSGTY.
  data:  LS_PAPER   type ZVCXI_PCSSC_S_PAPER.
  data:  LT_PAPER   type ZVCXI_PCSSC_TT_PAPER.

*** Get Plant or Global Papers
  if ME->R_BOARD_G->S_MBOAR-BPAPL eq ZCL_VCXI_PCSSC_BOARD_P=>C_BLEVL_PLANT.
    move ME->T_PAPER            to LT_PAPER.
  else.
    move ME->R_BOARD_G->T_PAPER to LT_PAPER.
  endif.

*** Check all Papers
  loop at LT_PAPER into LS_PAPER
                  where BPMAT is not initial.
    call function 'MARC_SINGLE_READ'
      exporting
        MATNR             = LS_PAPER-BPMAT
        WERKS             = ME->F_WERKS
      exceptions
        LOCK_ON_MARC      = 1
        LOCK_SYSTEM_ERROR = 2
        WRONG_CALL        = 3
        NOT_FOUND         = 4.
    if SY-SUBRC ne 0.
      if IF_IGNORE_BSAVI ne ABAP_TRUE.
        if ME->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
          move 'W' to LF_MSGTY.
        else.
          move 'E' to LF_MSGTY.
        endif.
      else.
        move 'E' to LF_MSGTY.
      endif.

***   Add Message
      ME->R_MSG->ADD_MESSAGE( IF_MSGTY  = LF_MSGTY
                              IF_MSGID  = SY-MSGID
                              IF_MSGNO  = SY-MSGNO
                              IF_MSGV1  = SY-MSGV1
                              IF_MSGV2  = SY-MSGV2
                              IF_MSGV3  = SY-MSGV3
                              IF_MSGV4  = SY-MSGV4 ).
    endif.
  endloop.

endmethod.
method CHECK_STARC.

  data:  LF_MSGTY           type SYMSGTY.

*** Make sure Starch is maintained on Plant Level
  check ME->R_BOARD_G->S_MBOAR-BSTAL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.

  if ME->F_STARC is initial.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** There is no Starch maintained for this BoardID, please check.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '206' ).
  endif.

endmethod.
method CHECK_STATU_UPDATE.

*** Start Positiv
  move ABAP_TRUE to RF_RETURN.

*** if we wanna set a Released Status -> do check
  check IF_STATU = ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU( IF_MBOAR    = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                      IF_TBOAR    = ME->R_BOARD_G->F_TBOAR
                                                      IF_RELEASED = ABAP_TRUE ).
  ME->DO_CHECK( ).
  read table ME->R_MSG->T_MSG with key MSGTY = 'E' transporting no fields.
  if SY-SUBRC eq 0.
*** If there are Errors -> do not release!
    move ABAP_FALSE to RF_RETURN.
    ME->R_MSG->DISPLAY_MSG( ).
  endif.
  ME->R_MSG->INIT_MSG( ).

endmethod.
method CHECK_VALFR.

  data:  LF_GBOPV    type ZVCXI_PCSSC_GBOPV,
         LF_GBOGV    type ZVCXI_PCSSC_GBOGV,
         LF_COUNT    type I,
         LF_MSGTY    type SYMSGTY.
  data:  LS_TD110    type ZVCXI_PCS_TD110.

  LF_GBOPV = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
  LF_GBOGV = ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

  select count(*)
         into LF_COUNT
         from ZVCXI_PCS_TD110
        where GBOPV ne LF_GBOPV
         and  GBOGV eq LF_GBOGV
         and  WERKS eq ME->F_WERKS
         and  VALFR eq ME->F_VALFR.

  if SY-SUBRC eq 0.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** A Version with the same Valid From Date already exists.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '152' ).
  endif.

endmethod.
method CHECK_VALFR_VALTO.

*** Check if Valid From smaller than Valid To Date
  if ME->F_VALTO <= ME->F_VALFR.
*** The Valid To Date is smaller than the Valid From Date, please check.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '154' ).
  endif.

endmethod.
method CLASS_CONSTRUCTOR.

  data:          LS_TC202        type          ZVCXI_PCS_TC202,
                 LS_TJ30T        type          TJ30T,
                 LS_TJ30         type          TJ30.
  data:          LT_TJ30T        type table of TJ30T,
                 LT_TJ30         type table of TJ30.
  field-symbols: <S_STATU_DESCR> type          YS_STATU_DESCR.

***--------------------------------------------------------------------------------------
*** Classification - System of Measurement
  select *
         into corresponding fields of table T_SYSOM
         from ZVCXI_PCS_TC262.

***--------------------------------------------------------------------------------------
*** Get Customizing Entries w/o Status Profiles
  select *
         into table T_TC202
         from ZVCXI_PCS_TC202
         where STSMA eq ''.
  loop at T_TC202 into LS_TC202.
    append initial line to T_STATU_DESCR assigning <S_STATU_DESCR>.
    move-corresponding LS_TC202 to <S_STATU_DESCR>.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Customized Status Profiles
  select *
         into table T_TC202
         from ZVCXI_PCS_TC202
         where STSMA ne ''.
  check T_TC202 is not initial.

*** Read all Status and Status Texts
  select *
         into table LT_TJ30
         from TJ30
         for all entries in T_TC202
         where STSMA eq T_TC202-STSMA.

  select *
         into table LT_TJ30T
         from TJ30T
         for all entries in T_TC202
         where STSMA eq T_TC202-STSMA
           and SPRAS eq SY-LANGU.


*** Build Status Description table
  loop at T_TC202 into LS_TC202.
    loop at LT_TJ30 into LS_TJ30 where STSMA eq LS_TC202-STSMA.
      append initial line to T_STATU_DESCR assigning <S_STATU_DESCR>.
***   Save MBOAR, TBOAR and STSMA
      move-corresponding LS_TC202 to <S_STATU_DESCR>.

***   Save STATU
      move LS_TJ30-ESTAT to <S_STATU_DESCR>-STATU.

      read table LT_TJ30T with key STSMA =  <S_STATU_DESCR>-STSMA
                                   ESTAT = <S_STATU_DESCR>-STATU
                          into LS_TJ30T.
      if SY-SUBRC = 0.
***     Save TXT04 and Description
        move LS_TJ30T-TXT04 to <S_STATU_DESCR>-TXT04.
        move LS_TJ30T-TXT30 to <S_STATU_DESCR>-STATU_DESCR.
      endif.

***   Save Initial and Released Status
      if LS_TJ30-INIST eq ABAP_TRUE.
        move ABAP_TRUE to <S_STATU_DESCR>-INIST.
      endif.

      if LS_TC202-RESTB eq <S_STATU_DESCR>-STATU.
        move ABAP_TRUE to <S_STATU_DESCR>-RELST.
      endif.

    endloop.
  endloop.

endmethod.
method CONSTRUCTOR.

  data:          LR_CX_CKX     type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***------------------------------------------------------------------------------------------------
***   Set GUID and Type of Object
      move IF_GBOPV      to ME->F_GBOPV.
      move C_TOOBJ_BOARD to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***   Load from DB for existing Plant Boards
      if IF_NEW eq ABAP_FALSE.
        ME->LOAD_FROM_DB( ).
      endif.

***   Create Message
      create object ME->R_MSG.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to ZCL_VCXI_PCSSC_BOARD_P=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )     to  <S_INSTANCE>-GUID.
      move ME                                      ?to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method COPY_BOARD_P.

  data:          LF_WERKS     type        WERKS_D.
  data:          LR_BOARD_G   type ref to ZCL_VCXI_PCSSC_BOARD_G.
  field-symbols: <S_CLAVA_P> type ZVCXI_PCSSC_S_CLAVA_P,
                 <S_PAPER>   type ZVCXI_PCSSC_S_PAPER.

***------------------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_P=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_P=>C_ACTVT_CREATE
                                      IR_BOARD_P = ME ).


***------------------------------------------------------------------------------------------------
*** Get Plant
  if IF_WERKS is supplied.
    move IF_WERKS    to LF_WERKS.
  else.
    move ME->F_WERKS to LF_WERKS.
  endif.

***------------------------------------------------------------------------------------------------
*** Make sure that Global Board Setting are correct
  if IR_BOARD_G is supplied.
    if IR_BOARD_G                                           is bound                        and
       IR_BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) eq ME->R_BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      move IR_BOARD_G to LR_BOARD_G.
    else.
***   Copy from Plant Version to the provided Global Version is not supported.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'W'
          IF_MSGID = 'ZVCXI_PCSSC'
          IF_MSGNO = '203' ).
    endif.
  else.
    move ME->R_BOARD_G to LR_BOARD_G.
  endif.

***------------------------------------------------------------------------------------------------
*** Create copy of current Instance
  RR_BOARD_P = ZCL_VCXI_PCSSC_BOARD_P=>CREATE( IR_BOARD_G = LR_BOARD_G
                                               IF_WERKS   = LF_WERKS ).

*** Move Values from old Instance to new Instance
*** Standard Copy and Valid From/To
  move ME->F_NSTBG    to RR_BOARD_P->F_NSTBG.
  move ME->F_SPPAP    to RR_BOARD_P->F_SPPAP.
  move SY-DATUM       to RR_BOARD_P->F_VALFR.
  move '99991231'     to RR_BOARD_P->F_VALTO.
  move ME->S_MINWT    to RR_BOARD_P->S_MINWT.
  move ME->T_BODSC    to RR_BOARD_P->T_BODSC.

*** Copy Classification and adjust if needed
  if ME->F_WERKS ne LF_WERKS and
     ZCL_VCXI_PCSSC_BOARD_P=>GET_SYSOM_BY_WERKS( IF_WERKS = ME->F_WERKS ) ne ZCL_VCXI_PCSSC_BOARD_P=>GET_SYSOM_BY_WERKS( IF_WERKS = LF_WERKS ).
    loop at RR_BOARD_P->T_CLAVA_P assigning <S_CLAVA_P>.
      check LINE_EXISTS( ME->T_CLAVA_P[ ICLAT = <S_CLAVA_P>-ICLAT ] ).
      if <S_CLAVA_P>-CLAVA_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = ME->T_CLAVA_P[ ICLAT = <S_CLAVA_P>-ICLAT ]-CLAVA
                                                           IF_UOM_IN    = ME->T_CLAVA_P[ ICLAT = <S_CLAVA_P>-ICLAT ]-CLAVA_UOM
                                                           IF_UOM_OUT   = <S_CLAVA_P>-CLAVA_UOM
                                                 importing EF_VALUE_OUT = <S_CLAVA_P>-CLAVA
                                                           EF_UOM_OUT   = <S_CLAVA_P>-CLAVA_UOM ).
      else.
        <S_CLAVA_P>-CLAVA =  ME->T_CLAVA_P[ ICLAT = <S_CLAVA_P>-ICLAT ]-CLAVA.
      endif.
    endloop.
  else.
    move ME->T_CLAVA_P  to RR_BOARD_P->T_CLAVA_P.
  endif.
  move ME->T_CLAVC_P  to RR_BOARD_P->T_CLAVC_P.

*** Copy Assigned Sales Board Grades only for Plant -> Plant
  if LR_BOARD_G->S_MBOAR-MBOAR    eq C_BLEVL_PLANT and
     ME->R_BOARD_G->S_MBOAR-MBOAR eq C_BLEVL_PLANT.
    move ME->T_ASBOA    to RR_BOARD_P->T_ASBOA.
  endif.

*** Copy Assigned Production Board Grades only for Global -> Global
  if LR_BOARD_G->S_MBOAR-MBOAR    ne C_BLEVL_PLANT and
     ME->R_BOARD_G->S_MBOAR-MBOAR ne C_BLEVL_PLANT.
    move ME->F_APBOA    to RR_BOARD_P->F_APBOA.
    move ME->T_APBOA    to RR_BOARD_P->T_APBOA.
  endif.

*** Copy Starch only for Plant -> Plant
  if LR_BOARD_G->S_MBOAR-BSTAL    eq C_BLEVL_PLANT and
     ME->R_BOARD_G->S_MBOAR-BSTAL eq C_BLEVL_PLANT.
    move ME->F_STARC    to RR_BOARD_P->F_STARC.
  endif.

*** Copy Structure for Papers
  move ME->T_PAPER    to RR_BOARD_P->T_PAPER.

  loop at RR_BOARD_P->T_PAPER assigning <S_PAPER>.
*** Clear Paper Materials if it is no Copy of Plant -> Plant
    if LR_BOARD_G->S_MBOAR-BPAPL    ne C_BLEVL_PLANT or
       ME->R_BOARD_G->S_MBOAR-BPAPL ne C_BLEVL_PLANT.
      clear: <S_PAPER>-BPMAT.
    endif.

*** Clear Wax Code if it is no Copy of Plant -> Plant
    if LR_BOARD_G->S_MBOAR-BWAXL    ne C_BLEVL_PLANT or
       ME->R_BOARD_G->S_MBOAR-BWAXL ne C_BLEVL_PLANT.
      clear: <S_PAPER>-WAXCO.
    endif.

  endloop.

*** Copy Assigned Corrugation Width only for Plant -> Plant or Sales -> Sales
  if LR_BOARD_G->S_MBOAR-BPAPL eq ME->R_BOARD_G->S_MBOAR-BPAPL.
    move ME->T_COWID    to RR_BOARD_P->T_COWID.
  endif.

endmethod.
method CREATE.

  data:  LF_GBOPV    type        ZVCXI_PCSSC_GBOPV.

  check IR_BOARD_G is bound and
        IF_WERKS   is not initial.

***------------------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_P=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_P=>C_ACTVT_CREATE
                                      IR_BOARD_G = IR_BOARD_G
                                      IF_WERKS   = IF_WERKS ).

***----------------------------------------------------------------------------
*** Get new GUID for Plant Instance
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GBOPV.

***----------------------------------------------------------------------------
*** Create new Plant Board Version
  create object RR_BOARD_P
    exporting
      IF_GBOPV = LF_GBOPV
      IF_NEW   = ABAP_TRUE.

***----------------------------------------------------------------------------
*** Initialization after creation of new object
  RR_BOARD_P->INIT_AFTER_CREATE( IR_BOARD_G = IR_BOARD_G
                                 IF_WERKS   = IF_WERKS ).

endmethod.
method DO_CHECK.

  ME->R_MSG->INIT_MSG( ).

***----------------------------------------------------------------------------
*** Check obligatory Paper Materials
  ME->CHECK_OBLIG_BPMAT( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check Papers
  ME->CHECK_PAPER( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check Starch is maintained
  ME->CHECK_STARC( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check if Version with same Valfr already exists
  ME->CHECK_VALFR( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check that Valfr is smaller than Valto
  ME->CHECK_VALFR_VALTO( ).

endmethod.
  method FREE_ALL.

    data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.

    loop at T_INSTANCE into LS_INSTANCE where R_OBJECT is instance of ZCL_VCXI_PCSSC_BOARD_P.
      cast ZCL_VCXI_PCSSC_BOARD_P( LS_INSTANCE-R_OBJECT )->HANDLE_FREE( ).
    endloop.

  endmethod.
method GET_ALLOWED_STATU.

  data:          LF_STSMA type J_STSMA.
  data:          LS_TJ30  type TJ30.
  field-symbols: <S_STATU_DESCR> type YS_STATU_DESCR.

  ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR       = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                     IF_TBOAR       = ME->R_BOARD_G->F_TBOAR
                                           importing EF_STSMA       = LF_STSMA ).


*** Get current Status Number
  select single *
         into LS_TJ30
         from TJ30
        where STSMA eq LF_STSMA
         and  ESTAT eq ME->F_STATU.

*** Get allowed Status
  select ESTAT as STATU
         into corresponding fields of table RT_STATU_DESCR
         from TJ30
        where STSMA eq LF_STSMA
         and  STONR ge LS_TJ30-NSONR
         and  STONR le LS_TJ30-HSONR.

*** Get Status Text
  loop at RT_STATU_DESCR assigning <S_STATU_DESCR>.
    ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR       = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                       IF_TBOAR       = ME->R_BOARD_G->F_TBOAR
                                                       IF_STATU       = <S_STATU_DESCR>-STATU
                                             importing EF_TXT04       = <S_STATU_DESCR>-TXT04
                                                       EF_STATU_DESCR = <S_STATU_DESCR>-STATU_DESCR ).

  endloop.


endmethod.
method GET_ASBOA_P.

  clear ME->T_ASBOA.

***--------------------------------------------------------------------------------------
*** Get all valid Plant Versions
  select GBOGV
         into table @data(LT_GBOGV)
         from ZVCXI_PCS_TD110
        where WERKS eq @ME->F_WERKS
         and  APBOA eq @ME->R_BOARD_G->F_BOARD
         and  VALFR le @ME->F_VALTO
         and  VALTO ge @ME->F_VALFR.

*** Get Alternatives
  select ZVCXI_PCS_TD110~GBOGV
         appending table @LT_GBOGV
         from ZVCXI_PCS_TD117
        inner join ZVCXI_PCS_TD110
          on ZVCXI_PCS_TD117~GBOPV eq ZVCXI_PCS_TD110~GBOPV
        where ZVCXI_PCS_TD110~WERKS eq @ME->F_WERKS
         and  ZVCXI_PCS_TD117~APBOA eq @ME->R_BOARD_G->F_BOARD
         and  ZVCXI_PCS_TD110~VALFR le @ME->F_VALTO
         and  ZVCXI_PCS_TD110~VALTO ge @ME->F_VALFR.

***--------------------------------------------------------------------------------------
*** Get Global Sales Versions from DB
  check LT_GBOGV is not initial.
  select BOARD
         into table ME->T_ASBOA
         from ZVCXI_PCS_TD100
         for all entries in LT_GBOGV
        where GBOGV eq LT_GBOGV-GBOGV
         and  VALFR le ME->F_VALTO
         and  VALTO ge ME->F_VALFR.
  if SY-SUBRC ne 0.
    clear ME->T_ASBOA.
  endif.

endmethod.
method GET_INSTANCE_BY_DATE.

  data: LF_GBOGV type ZVCXI_PCSSC_GBOGV,
        LF_MSGV2 type SYMSGV.


  LF_GBOGV = IR_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Get all Versions of Board
  select GBOPV, VALFR
         into table @data(LT_TD110)
         from ZVCXI_PCS_TD110
         where GBOGV eq @LF_GBOGV
          and  WERKS eq @IF_WERKS
          and  VALFR <= @IF_DATE
          and  VALTO >= @IF_DATE.
  if SY-SUBRC ne 0.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_DATE
      importing
        DATE_EXTERNAL            = LF_MSGV2
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** There is no Board Version for Plant &1 valid at Date &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'W'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '201'
        IF_MSGV1 = IF_WERKS
        IF_MSGV2 = LF_MSGV2 ).
  endif.

*** Find best matching Version and return Instance
  sort LT_TD110 by VALFR descending.
  RR_BOARD_P ?= ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( LT_TD110[ 1 ]-GBOPV ) ).

endmethod.
method GET_INSTANCE_BY_DATE_RANGE.

  data:  LF_GBOGV    type          ZVCXI_PCSSC_GBOGV,
         LF_GUID     type          /VCXI/CKX_GUID,
         LF_VALFR    type          STRING,
         LF_VALTO    type          STRING,
         LF_DATE     type          STRING.
  data:  LS_TD110    type          ZVCXI_PCS_TD110.
  data:  LT_TD110    type table of ZVCXI_PCS_TD110.
  data:  LR_BOARD_P  type ref to   ZCL_VCXI_PCSSC_BOARD_P.

  LF_GBOGV = IR_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Get all Versions of Board
  select *
         into table LT_TD110
         from ZVCXI_PCS_TD110
         where GBOGV eq LF_GBOGV
          and  WERKS eq IF_WERKS
          and  VALFR >= IF_VALFR
          and  VALTO <= IF_VALTO.
  if SY-SUBRC ne 0.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_VALFR
      importing
        DATE_EXTERNAL            = LF_VALFR
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC <> 0.
      move IF_VALFR to LF_VALFR.
    endif.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_VALTO
      importing
        DATE_EXTERNAL            = LF_VALTO
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC <> 0.
      move IF_VALTO to LF_VALTO.
    endif.
    concatenate LF_VALFR LF_VALTO into LF_DATE separated by '-'.
*** There is no Board Version for Plant &1 valid at Date &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'W'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '201'
        IF_MSGV1 = IF_WERKS
        IF_MSGV2 = LF_DATE ).
  endif.

*** Find best matching Version
  sort LT_TD110 by VALFR descending.
  loop at LT_TD110 into LS_TD110 .

*** Get Instance
    move LS_TD110-GBOPV to LF_GUID.
    LR_BOARD_P ?= ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

    append LR_BOARD_P to RT_R_BOARD_P.
  endloop.

endmethod.
method GET_STATU.

  data: LS_STATU_DESCR type YS_STATU_DESCR.
  data: LT_STATU_DESCR type YT_STATU_DESCR.

*** Check if requested Status is supplied
  check IF_INITIAL  is not initial or
        IF_RELEASED is not initial.

*** Check status by Sequence
*** Check by MBOAR and TBOAR
  move T_STATU_DESCR to LT_STATU_DESCR.
  delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                              TBOAR ne IF_TBOAR.

  if LT_STATU_DESCR is initial.
*** Check by MBOAR only
    move T_STATU_DESCR to LT_STATU_DESCR.
    delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                                TBOAR is not initial.

    if LT_STATU_DESCR is initial.
*** Check by global entry
      move T_STATU_DESCR to LT_STATU_DESCR.
      delete LT_STATU_DESCR where MBOAR is not initial or
                                  TBOAR is not initial.

    endif.
  endif.

  check LT_STATU_DESCR is not initial.

  case ABAP_TRUE.
    when IF_INITIAL.
      read table LT_STATU_DESCR into LS_STATU_DESCR
                                with key INIST = ABAP_TRUE.
    when IF_RELEASED.
      read table LT_STATU_DESCR into LS_STATU_DESCR
                                with key RELST = ABAP_TRUE.
  endcase.

  check LS_STATU_DESCR is not initial.
  move LS_STATU_DESCR-STATU to RF_STATU.

endmethod.
method GET_STATU_DESCR.

  data: LS_STATU_DESCR type YS_STATU_DESCR.
  data: LT_STATU_DESCR type YT_STATU_DESCR.

*** Check status by Sequence
*** Check by MBOAR and TBOAR
  move T_STATU_DESCR to LT_STATU_DESCR.
  delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                              TBOAR ne IF_TBOAR.

  if LT_STATU_DESCR is initial.
*** Check by MBOAR only
    move T_STATU_DESCR to LT_STATU_DESCR.
    delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                                TBOAR is not initial.

    if LT_STATU_DESCR is initial.
*** Check by global entry
      move T_STATU_DESCR to LT_STATU_DESCR.
      delete LT_STATU_DESCR where MBOAR is not initial or
                                  TBOAR is not initial.

    endif.
  endif.

  check LT_STATU_DESCR is not initial.
  read table LT_STATU_DESCR into LS_STATU_DESCR
                            index 1.
  move LS_STATU_DESCR-STSMA       to EF_STSMA.

*** Get description
  clear: LS_STATU_DESCR.
  if IF_STATU is not initial.
    read table LT_STATU_DESCR into LS_STATU_DESCR
                              with key STATU = IF_STATU.
  elseif IF_TXT04 is not initial.
    read table LT_STATU_DESCR into LS_STATU_DESCR
                              with key TXT04 = IF_TXT04.
  endif.

  check LS_STATU_DESCR is not initial.
  move LS_STATU_DESCR-STATU       to EF_STATU.
  move LS_STATU_DESCR-TXT04       to EF_TXT04.
  move LS_STATU_DESCR-STATU_DESCR to EF_STATU_DESCR.
endmethod.
method GET_SYSOM_BY_WERKS.

  data:  LF_BUKRS   type BUKRS.
  data:  LS_SYSOM   type /VCXI/VKSC_S_SYSOM.

  if IF_WERKS is not initial.

***--------------------------------------------------------------------------------------
*** Get the Company Code
    call function 'CO_RM_COMPANYCODE_FIND'
      exporting
        WERKS    = IF_WERKS
      importing
        COMPCODE = LF_BUKRS
      exceptions
        NO_ENTRY = 1
        others   = 2.
*** On Error, eliminate Company Code
    if SY-SUBRC ne 0.
      clear LF_BUKRS.
    endif.

***--------------------------------------------------------------------------------------
*** By Plant and Company Code
    read table T_SYSOM into LS_SYSOM
                       with key BUKRS = LF_BUKRS
                                WERKS = IF_WERKS.
    if SY-SUBRC ne 0.
***   By Plant
      read table T_SYSOM into LS_SYSOM
                         with key BUKRS = SPACE
                                  WERKS = IF_WERKS.
      if SY-SUBRC ne 0.
***     By Company Code
        read table T_SYSOM into LS_SYSOM
                           with key BUKRS = LF_BUKRS
                                    WERKS = SPACE.

        if SY-SUBRC ne 0.
***       Globally
          read table T_SYSOM into LS_SYSOM
                             with key BUKRS = SPACE
                                      WERKS = SPACE.
        endif.
      endif.
    endif.

*** Use identified System of Measurement
    move LS_SYSOM-SYSOM to RF_SYSOM.
  endif.

*** Default is Metric
  if RF_SYSOM is initial.
    move /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC to RF_SYSOM.
  endif.

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CHECK.

  data: LF_IGNORE_BSAVI type ABAP_BOOL.

*** Set ignore flag if we have released Status
  move ME->IS_RELEASED( ) to LF_IGNORE_BSAVI.

*** Check the Instance
  ME->DO_CHECK( IF_IGNORE_BSAVI = LF_IGNORE_BSAVI ).

  if ME->IS_RELEASED( ) eq ABAP_TRUE.
*** Check also Global version if we are "released"
    ME->R_BOARD_G->DO_CHECK( IF_IGNORE_BSAVI = LF_IGNORE_BSAVI ).

    append lines of ME->R_BOARD_G->R_MSG->T_MSG to ME->R_MSG->T_MSG.
  endif.

endmethod.
method HANDLE_DELETE.

***------------------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_P=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_P=>C_ACTVT_DELETE
                                      IR_BOARD_P = ME ).

*** If not locked try to lock
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete T_INSTANCE where R_OBJECT eq ME.

*** Unlock
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

*** Mark as Deleted to Hide
  move ABAP_TRUE to ME->F_DELETED.

endmethod.
method HANDLE_SAVE.

  data: LF_IGNORE_BSAVI type ABAP_BOOL.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

  if ME->F_DELETED ne ABAP_TRUE.

*** Set ignore flag if we have released Status
    move ME->IS_RELEASED( ) to LF_IGNORE_BSAVI.

*** Check for Incompletion before Save
    ME->DO_CHECK( IF_IGNORE_BSAVI = LF_IGNORE_BSAVI ).
    read table ME->R_MSG->T_MSG with key MSGTY = 'E'
                                transporting no fields.
    if SY-SUBRC eq 0.
***   Not saved due to incompletion.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_PCSSC'
                                            IF_MSGNO = '004' ).
    endif.

    if ME->IS_RELEASED( ) eq ABAP_TRUE.
***   Check also Global version if we are "released"
      ME->R_BOARD_G->DO_CHECK( IF_IGNORE_BSAVI = LF_IGNORE_BSAVI ).
      read table ME->R_BOARD_G->R_MSG->T_MSG with key MSGTY = 'E'
                                             transporting no fields.
      if SY-SUBRC eq 0.
***     Not saved due to incompletion. - Check Global Version!
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                              IF_MSGID = 'ZVCXI_PCSSC'
                                              IF_MSGNO = '005' ).
      endif.
    endif.
  endif.

*** Remove empty/duplicate Assigned Production Boards
  sort ME->T_APBOA.
  delete adjacent duplicates from ME->T_APBOA.
  delete ME->T_APBOA where TABLE_LINE is initial.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Save Plant Board
    call function 'ZVCXI_PCSSC_DB_SAVE_BOARD_P'
      in update task
      exporting
        IF_GBOPV   = ME->F_GBOPV
        IF_GBOGV   = ME->R_BOARD_G->F_GBOGV
        IF_WERKS   = ME->F_WERKS
        IF_VALFR   = ME->F_VALFR
        IF_VALTO   = ME->F_VALTO
        IF_APBOA   = ME->F_APBOA
        IT_APBOA   = ME->T_APBOA
        IF_STARC   = ME->F_STARC
        IF_NSTBG   = ME->F_NSTBG
        IF_SPPAP   = ME->F_SPPAP
        IF_STATU   = ME->F_STATU
        IF_FTBOA   = ME->F_FTBOA
        IT_BODSC   = ME->T_BODSC
        IT_PAPER   = ME->T_PAPER
        IT_CLAVA_P = ME->T_CLAVA_P
        IT_CLAVC_P = ME->T_CLAVC_P
        IT_COWID   = ME->T_COWID
        IS_MINWT   = ME->S_MINWT
        IS_LOG     = ME->S_LOG.

  else.
*** Delete Plant Board
    call function 'ZVCXI_PCSSC_DB_DEL_BOARD_P'
      in update task
      exporting
        IF_GBOPV = F_GBOPV.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

*** Do Commit
  commit work and wait.

*** Relock
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

endmethod.
method INIT_AFTER_CREATE.

  data: LF_SYSOM  type /VCXI/VKS_SYSOM.
  data: LS_TC260  type                   ZVCXI_PCS_TC260,
        LS_TC260T type                   ZVCXI_PCS_TC260T,
        LS_TC261  type                   ZVCXI_PCS_TC261,
        LS_TC261T type                   ZVCXI_PCS_TC261T.
  data: LT_TC260 type standard table of ZVCXI_PCS_TC260,
        LT_TC261 type standard table of ZVCXI_PCS_TC261.
  field-symbols: <S_CLAVA> type                   ZVCXI_PCSSC_S_CLAVA_P,
                 <S_CLAVC> type                   ZVCXI_PCSSC_S_CLAVC_P.

***----------------------------------------------------------------------------
*** Set Basic Info
  move IR_BOARD_G to ME->R_BOARD_G.
  move IF_WERKS   to ME->F_WERKS.

*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

*** Set default Validity Date
  move ME->R_BOARD_G->F_VALFR  to ME->F_VALFR.
  move ME->R_BOARD_G->F_VALTO  to ME->F_VALTO.

***----------------------------------------------------------------------------
*** Get all Assigned Sales Boards for this Instance
  if ME->R_BOARD_G->S_MBOAR-FSABO ne ABAP_TRUE.
    ME->GET_ASBOA_P( ).
  endif.

***----------------------------------------------------------------------------
*** Set Initial Board Status
  ME->F_STATU = ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU( IF_MBOAR    = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                   IF_TBOAR    = ME->R_BOARD_G->F_TBOAR
                                                   IF_INITIAL  = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Load Board Papers for new created Version from DB
  ME->R_BOARD_G->R_FLUTE->SORT_PAPER( changing CT_PAPER = ME->T_PAPER ).

***----------------------------------------------------------------------------
*** Load Plant Description Board
  ME->LOAD_BODSC( ).

***----------------------------------------------------------------------------
*** Load Classification Types with Units and Description - Numeric
*** Get Classification Types and Units
  select *
         into table LT_TC260
         from ZVCXI_PCS_TC260.

  LF_SYSOM = ME->GET_SYSOM_BY_WERKS( IF_WERKS = ME->F_WERKS ).

  loop at LT_TC260 into LS_TC260.
*** Classification Description
    select single DESCR
           into LS_TC260T-DESCR
           from ZVCXI_PCS_TC260T
          where ICLAT eq LS_TC260-ICLAT
            and LANGU eq SY-LANGU.

    append initial line to ME->T_CLAVA_P assigning <S_CLAVA>.
    <S_CLAVA>-ICLAT       = LS_TC260-ICLAT.
    <S_CLAVA>-CLAVA_DESCR = LS_TC260T-DESCR.
    <S_CLAVA>-CLAVA_UOM   = switch #( LF_SYSOM when C_SYSOM_METRIC   then LS_TC260-UOMKY_M
                                               when C_SYSOM_IMPERIAL then LS_TC260-UOMKY_I ).
  endloop.

***----------------------------------------------------------------------------
*** Load Classification Types and Description - Character
*** Get Classification Types
  select *
         into table LT_TC261
         from ZVCXI_PCS_TC261.

  loop at LT_TC261 into LS_TC261.
*** Classification Description
    select single DESCR
           into LS_TC261T-DESCR
           from ZVCXI_PCS_TC261T
          where ICLAT eq LS_TC261-ICLAT
            and LANGU eq SY-LANGU.

    append initial line to ME->T_CLAVC_P assigning <S_CLAVC>.
    move-corresponding LS_TC261                 to <S_CLAVC>.
    move               LS_TC261T-DESCR          to <S_CLAVC>-CLAVC_DESCR.
  endloop.

***----------------------------------------------------------------------------
*** Write Create Log Entry
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

*** Raise event for Creation
  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method IS_RELEASED.

  if ZCL_VCXI_PCSSC_BOARD_P=>IS_STATU_ACTIVE( IF_MBOAR = ME->R_BOARD_G->S_MBOAR-MBOAR
                                              IF_TBOAR = ME->R_BOARD_G->F_TBOAR ) eq ABAP_FALSE.
    move ABAP_UNDEFINED to RF_RELEASED.
    exit.
  endif.


*** Check Status is released
  check ME->F_STATU = ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU( IF_MBOAR    = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                         IF_TBOAR    = ME->R_BOARD_G->F_TBOAR
                                                         IF_RELEASED = ABAP_TRUE ).

  move ABAP_TRUE to RF_RELEASED.

endmethod.
method IS_STATU_ACTIVE.

  data: LT_STATU_DESCR type YT_STATU_DESCR.

*** Check status by Sequence
*** Check by MBOAR and TBOAR
  move T_STATU_DESCR to LT_STATU_DESCR.
  delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                              TBOAR ne IF_TBOAR.

  if LT_STATU_DESCR is initial.
*** Check by MBOAR only
    move T_STATU_DESCR to LT_STATU_DESCR.
    delete LT_STATU_DESCR where MBOAR ne IF_MBOAR or
                                TBOAR is not initial.

    if LT_STATU_DESCR is initial.
***   Check by global entry
      move T_STATU_DESCR to LT_STATU_DESCR.
      delete LT_STATU_DESCR where MBOAR is not initial or
                                  TBOAR is not initial.

    endif.
  endif.

*** Remove where Status Profile is not maintained
  delete LT_STATU_DESCR where STSMA is initial.

*** Status is Maintained
  check LT_STATU_DESCR is not initial.
  move ABAP_TRUE to RF_RETURN.

endmethod.
method LOAD_BODSC.

  data:          LS_TD111   type          ZVCXI_PCS_TD111,
                 LS_TC220   type          ZVCXI_PCS_TC220,
                 LS_TC220T  type          ZVCXI_PCS_TC220T.
  data:          LT_TC220   type table of ZVCXI_PCS_TC220,
                 LT_TC220T  type table of ZVCXI_PCS_TC220T,
                 LT_TD111   type table of ZVCXI_PCS_TD111.
  field-symbols: <S_BODSC>  type          ZVCXI_PCSSC_S_BODSC.

  free:  ME->T_BODSC.

***------------------------------------------------------------------
*** Get defined Plant Description
  select *
          into table LT_TC220
          from ZVCXI_PCS_TC220
         where MDEST eq C_BLEVL_PLANT
         order by IDEST.
  check LT_TC220 is not initial.

*** Description Type Description
  select *
         into table LT_TC220T
         from ZVCXI_PCS_TC220T
         for all entries in LT_TC220
        where IDEST eq LT_TC220-IDEST.

*** Get Plant Description of Version
  select *
         into table LT_TD111
         from ZVCXI_PCS_TD111
         for all entries in LT_TC220
        where GBOPV eq ME->F_GBOPV
         and  IDEST eq LT_TC220-IDEST.

***------------------------------------------------------------------
  loop at LT_TC220 into LS_TC220.
*** Get all maintained Languages
    loop at LT_TD111 into LS_TD111 where IDEST eq LS_TC220-IDEST.
      append initial line to ME->T_BODSC assigning <S_BODSC>.
      move LS_TC220-IDEST  to <S_BODSC>-IDEST.
      move LS_TD111-LANGU  to <S_BODSC>-LANGU.
      move LS_TD111-DESCR  to <S_BODSC>-DESCR.
    endloop.

*** Initial entry in System Language
    read table LT_TD111 into LS_TD111 with key IDEST = LS_TC220-IDEST
                                               LANGU = SY-LANGU.
    if SY-SUBRC ne 0.
***   Add initial entry
      append initial line to ME->T_BODSC assigning <S_BODSC>.
      move LS_TC220-IDEST  to <S_BODSC>-IDEST.
      move SY-LANGU        to <S_BODSC>-LANGU.
    endif.
  endloop.

*** Add Description of Description Type
  loop at ME->T_BODSC assigning <S_BODSC>.
    read table LT_TC220T into LS_TC220T with key IDEST = <S_BODSC>-IDEST
                                                 LANGU = <S_BODSC>-LANGU.
    if SY-SUBRC eq 0.
      move LS_TC220T-DESCR to <S_BODSC>-IDEST_DESCR.
    endif.
  endloop.

endmethod.
method LOAD_FROM_DB.

  data: LF_GUID       type /VCXI/CKX_GUID,
        LF_STATU_INIT type ZVCXI_PCSSC_STATU,
        LF_SYSOM      type /VCXI/VKS_SYSOM.
  data: LS_TD110  type                   ZVCXI_PCS_TD110,
        LS_TD112  type                   ZVCXI_PCS_TD112,
        LS_TD113  type                   ZVCXI_PCS_TD113,
        LS_TD114  type                   ZVCXI_PCS_TD114,
        LS_TD115  type                   ZVCXI_PCS_TD115,
        LS_TD116  type                   ZVCXI_PCS_TD116,
        LS_TC260  type                   ZVCXI_PCS_TC260,
        LS_TC260T type                   ZVCXI_PCS_TC260T,
        LS_TC261  type                   ZVCXI_PCS_TC261,
        LS_TC261T type                   ZVCXI_PCS_TC261T.
  data: LT_TD112  type standard table of ZVCXI_PCS_TD112,
        LT_TD113  type standard table of ZVCXI_PCS_TD113,
        LT_TD114  type standard table of ZVCXI_PCS_TD114,
        LT_TD115  type standard table of ZVCXI_PCS_TD115,
        LT_TD116  type standard table of ZVCXI_PCS_TD116,
        LT_TC260  type standard table of ZVCXI_PCS_TC260,
        LT_TC260T type standard table of ZVCXI_PCS_TC260T,
        LT_TC261  type standard table of ZVCXI_PCS_TC261,
        LT_TC261T type standard table of ZVCXI_PCS_TC261T.
  field-symbols: <S_CLAVA> type                   ZVCXI_PCSSC_S_CLAVA_P,
                 <S_CLAVC> type                   ZVCXI_PCSSC_S_CLAVC_P,
                 <S_COWID> type                   ZVCXI_PCSSC_S_COWID,
                 <S_PAPER> type                   ZVCXI_PCSSC_S_PAPER.

  free: ME->F_WERKS,
        ME->F_VALFR,
        ME->F_VALTO,
        ME->F_STARC,
        ME->F_NSTBG,
        ME->F_APBOA,
        ME->F_SPPAP,
        ME->S_MINWT,
        ME->S_LOG,
        ME->F_CHANGED,
        ME->T_PAPER,
        ME->T_CLAVA_P,
        ME->T_CLAVC_P,
        ME->T_ASBOA,
        ME->T_COWID.

***----------------------------------------------------------------------------
*** Load Header
  select single *
         into LS_TD110
         from ZVCXI_PCS_TD110
        where GBOPV eq ME->F_GBOPV.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

  move LS_TD110-WERKS         to ME->F_WERKS.
  move LS_TD110-VALFR         to ME->F_VALFR.
  move LS_TD110-VALTO         to ME->F_VALTO.
  move LS_TD110-STATU         to ME->F_STATU.
  move LS_TD110-FTBOA         to ME->F_FTBOA.
  move LS_TD110-STARC         to ME->F_STARC.
  move LS_TD110-NSTBG         to ME->F_NSTBG.
  move LS_TD110-APBOA         to ME->F_APBOA.
  move LS_TD110-SPPAP         to ME->F_SPPAP.
  move-corresponding LS_TD110 to ME->S_MINWT.

*** Get Global Instance Reference
  move LS_TD110-GBOGV to LF_GUID.
  move ZCL_VCXI_PCSSC_BOARD_G=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to ME->R_BOARD_G.

*** Log
  move-corresponding LS_TD110       to ME->S_LOG.

***----------------------------------------------------------------------------
*** Get Initial Board Status
  LF_STATU_INIT = ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU( IF_MBOAR    = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                     IF_TBOAR    = ME->R_BOARD_G->F_TBOAR
                                                     IF_INITIAL  = ABAP_TRUE ).
  if LF_STATU_INIT is initial.
    clear ME->F_STATU.
  else.
    if ME->F_STATU is initial.
      move LF_STATU_INIT to ME->F_STATU.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Load Plant Description Board
  ME->LOAD_BODSC( ).

*** Get Assigned Production Boards (alternatives)
  select APBOA
         into table ME->T_APBOA
         from ZVCXI_PCS_TD117
        where GBOPV eq ME->F_GBOPV.

***----------------------------------------------------------------------------
*** Load Board Papers
  select *
         into table LT_TD114
         from ZVCXI_PCS_TD114
        where GBOPV eq ME->F_GBOPV.
  loop at LT_TD114 into LS_TD114.
    append initial line to ME->T_PAPER assigning <S_PAPER>.
    move-corresponding LS_TD114 to <S_PAPER>.
  endloop.
  if ME->R_BOARD_G->R_FLUTE is bound.
    ME->R_BOARD_G->R_FLUTE->SORT_PAPER( changing CT_PAPER = ME->T_PAPER ).
  endif.

***----------------------------------------------------------------------------
*** Load Classification Values with Units and Description - Numeric
*** Get Classification Types and Units
  select *
         into table LT_TC260
         from ZVCXI_PCS_TC260.

  if LT_TC260 is not initial.
*** Classification Description
    select *
           into table LT_TC260T
           from ZVCXI_PCS_TC260T
           for all entries in LT_TC260
          where ICLAT eq LT_TC260-ICLAT
            and LANGU eq SY-LANGU.

*** Get Classification Values
    select *
           into table LT_TD112
           from ZVCXI_PCS_TD112
          where GBOPV eq ME->F_GBOPV.

    LF_SYSOM = ME->GET_SYSOM_BY_WERKS( IF_WERKS = ME->F_WERKS ).

    loop at LT_TC260 into LS_TC260.
      append initial line to ME->T_CLAVA_P assigning <S_CLAVA>.

      <S_CLAVA>-ICLAT       = LS_TC260-ICLAT.
      <S_CLAVA>-CLAVA_UOM   = switch #( LF_SYSOM when C_SYSOM_METRIC   then LS_TC260-UOMKY_M
                                                 when C_SYSOM_IMPERIAL then LS_TC260-UOMKY_I ).

***   Get Description
      read table LT_TC260T into LS_TC260T with key ICLAT = LS_TC260-ICLAT.
      if SY-SUBRC = 0.
        move LS_TC260T-DESCR to <S_CLAVA>-CLAVA_DESCR.
      endif.

***   Get Value
      read table LT_TD112 into LS_TD112 with key ICLAT = LS_TC260-ICLAT.
      if SY-SUBRC = 0.
        move-corresponding LS_TD112 to <S_CLAVA>.
      endif.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Load Classification Values and Description - Character
*** Get Classification Types
  select *
         into table LT_TC261
         from ZVCXI_PCS_TC261.

  if LT_TC261 is not initial.
*** Classification Description
    select *
           into table LT_TC261T
           from ZVCXI_PCS_TC261T
           for all entries in LT_TC261
          where ICLAT eq LT_TC261-ICLAT
            and LANGU eq SY-LANGU.

*** Get Classification Values
    select *
           into table LT_TD116
           from ZVCXI_PCS_TD116
          where GBOPV eq ME->F_GBOPV.

    loop at LT_TC261 into LS_TC261.
      append initial line to ME->T_CLAVC_P assigning <S_CLAVC>.
      move-corresponding LS_TC261                 to <S_CLAVC>.

***   Get Description
      read table LT_TC261T into LS_TC261T with key ICLAT = LS_TC261-ICLAT.
      if SY-SUBRC = 0.
        move LS_TC261T-DESCR to <S_CLAVC>-CLAVC_DESCR.
      endif.

***   Get Value
      read table LT_TD116 into LS_TD116 with key ICLAT = LS_TC261-ICLAT.
      if SY-SUBRC = 0.
        move-corresponding LS_TD116 to <S_CLAVC>.
      endif.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Load Board Corrugation Width
  select *
           into table LT_TD113
           from ZVCXI_PCS_TD113
          where GBOPV eq ME->F_GBOPV.
  if LT_TD113 is not initial.
    select *
           into table LT_TD115
           from ZVCXI_PCS_TD115
          where GBOPV eq ME->F_GBOPV.

    loop at LT_TD113 into LS_TD113.
      append initial line to ME->T_COWID assigning <S_COWID>.
      move-corresponding LS_TD113 to <S_COWID>.
      loop at LT_TD115 into LS_TD115 where COWID     eq <S_COWID>-COWID
                                      and  COWID_UOM eq <S_COWID>-COWID_UOM.
        append initial line to <S_COWID>-T_PAPER assigning <S_PAPER>.
        move-corresponding LS_TD115 to <S_PAPER>.
      endloop.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Get all Assigned Sales Boards for this Instance
  if ME->R_BOARD_G->S_MBOAR-FSABO ne ABAP_TRUE.
    ME->GET_ASBOA_P( ).
  endif.

endmethod.
method SET_APBOA.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Default Assigned Production Board
  if IF_APBOA is supplied and
     IF_APBOA ne ME->F_APBOA.
    move IF_APBOA to ME->F_APBOA.

*** Raise change event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.
  endif.

*** Set alternative Assigned Production Board
  if IT_APBOA is supplied and
     IT_APBOA ne ME->T_APBOA.
    move IT_APBOA to ME->T_APBOA.

*** Raise change event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.
  endif.

endmethod.
  method SET_BODSC_P.

    field-symbols: <S_BODSC> type ZVCXI_PCSSC_S_BODSC.


*** Check of the Lock-Status of the Object
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Description
    read table ME->T_BODSC assigning <S_BODSC> with key IDEST = IF_IDEST
                                                        LANGU = IF_LANGU.
    if SY-SUBRC ne 0.
***   Description Type &1 does not exist.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_PCSSC'
                                            IF_MSGNO = '103'
                                            IF_MSGV1 = IF_IDEST ).
    endif.

*** Only if changed
    check IF_BODSC ne <S_BODSC>-DESCR.

*** Set Description
    move IF_BODSC  to <S_BODSC>-DESCR.

*** Raise Changed Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_CLAVA.

  field-symbols: <S_CLAVA> type ZVCXI_PCSSC_S_CLAVA_P.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Classification Value - Numeric
  read table ME->T_CLAVA_P assigning <S_CLAVA> with key ICLAT = IF_ICLAT.
  if SY-SUBRC ne 0.
*** The requested Classification Type does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'W'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '202'  ).
  endif.

*** Only if changed
  check IF_CLAVA ne <S_CLAVA>-CLAVA.

*** Set Classification Value
  move IF_CLAVA         to <S_CLAVA>-CLAVA.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_CLAVC.

  field-symbols: <S_CLAVC> type ZVCXI_PCSSC_S_CLAVC_P.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Classification Value - Character
  read table ME->T_CLAVC_P assigning <S_CLAVC> with key ICLAT = IF_ICLAT.
  if SY-SUBRC ne 0.
*** The requested Classification Type does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'W'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '202'  ).
  endif.

*** Only if changed
  check IF_CLAVC ne <S_CLAVC>-CLAVC.

*** Set Classification Value
  move IF_CLAVC         to <S_CLAVC>-CLAVC.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_COWID.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  check IT_COWID ne ME->T_COWID.

*** Set new Values
  move IT_COWID to ME->T_COWID.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_COWID_ACTIVE.

  field-symbols: <S_COWID>  type  ZVCXI_PCSSC_S_COWID.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Corrugation Widths
  loop at ME->T_COWID assigning <S_COWID>
                     where COWID     = IS_COWID-COWID
                      and  COWID_UOM = IS_COWID-COWID_UOM.
    move IF_ACTIV to <S_COWID>-ACTIV.
  endloop.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_FTBOA.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Test Board Flag
  if IF_FTBOA ne ME->F_FTBOA.
    move IF_FTBOA to ME->F_FTBOA.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Read Lock
        if ME->R_BOARD_G is bound.
          call function 'ENQUEUE_EZVCXI_PCS_D100S'
            exporting
              GBOGV          = ME->R_BOARD_G->F_GBOGV
            exceptions
              FOREIGN_LOCK   = 1
              SYSTEM_FAILURE = 2
              others         = 3.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.
        endif.

***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_PCS_D110E'
          exporting
            GBOPV          = ME->F_GBOPV
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
        call function 'DEQUEUE_EZVCXI_PCS_D110E'
          exporting
            GBOPV = ME->F_GBOPV.

***     Remove Read Lock
        if ME->R_BOARD_G is bound.
          call function 'DEQUEUE_EZVCXI_PCS_D100S'
            exporting
              GBOGV = ME->R_BOARD_G->F_GBOGV.
        endif.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_MINWT.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Minimal Waiting Time
  if IS_MINWT ne ME->S_MINWT.
    move IS_MINWT to ME->S_MINWT.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_NSTBG.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Non Standard Board Flag
  if IF_NSTBG ne ME->F_NSTBG.
    move IF_NSTBG to ME->F_NSTBG.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_PAPER.

  field-symbols: <S_PAPER>  type          ZVCXI_PCSSC_S_PAPER.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Paper Settings
  loop at ME->T_PAPER assigning <S_PAPER> where BPAID = IS_PAPER-BPAID.
    move   IS_PAPER-BPMAT       to <S_PAPER>-BPMAT.
    move   IS_PAPER-WAXCO       to <S_PAPER>-WAXCO.
  endloop.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SPPAP.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Special Paper Used Flag
  if IF_SPPAP ne ME->F_SPPAP.
    move IF_SPPAP to ME->F_SPPAP.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_STARC.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Starch Code
  if IF_STARC ne ME->F_STARC.
    move IF_STARC to ME->F_STARC.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method SET_STATU.

*** Make sure that object is locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Status
    check IF_STATU                                      ne ME->F_STATU and
          ME->CHECK_STATU_UPDATE( IF_STATU = IF_STATU ) eq ABAP_TRUE.

*** Check Status is valid
    ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                       IF_TBOAR = ME->R_BOARD_G->F_TBOAR
                                                       IF_STATU = IF_STATU
                                             importing EF_STATU = data(LF_STATU) ).
    if LF_STATU is not initial.
      move IF_STATU to ME->F_STATU.
    else.
***   Internal Status &1 is not valid.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PCSSC'
                                            IF_MSGNO = '207'
                                            IF_MSGV1 = IF_STATU ).
    endif.

*** Raise change event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_VALFR.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Valid From Date
  if IF_VALFR ne ME->F_VALFR.
    move IF_VALFR to ME->F_VALFR.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_VALTO.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Valid To Date
  if IF_VALTO ne ME->F_VALTO.
    move IF_VALTO to ME->F_VALTO.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
