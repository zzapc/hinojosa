
class ZCL_VCXI_FFSS_UI_FASTD_SE definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  interfaces ZIF_VCXI_FFS_SHCO .

  constants C_TAB_UCOMM type SYUCOMM value '0100S_TAB-TAB' ##NO_TEXT.
  data S_FASTD_FFG_SE_VIS type ZVCXI_FFSS_S_FASTD_FFG_SE_VIS .
  data S_FASTD_RHNDL_VIS type ZVCXI_FFSS_S_FASTD_RHNDL_VIS .
  data S_FASTD_SE_VIS type ZVCXI_FFSS_S_FASTD_SE_VIS .

  methods ACTIVATE_FFG
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DEACTIVATE_FFG
    raising
      /VCXI/CX_CKX .
  methods DO_PBO_FFG
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_FASTD_FFG_VIS
    importing
      !IS_FASTD_FFG_SE_VIS type ZVCXI_FFSS_S_FASTD_FFG_SE_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_FASTD_RHNDL_VIS
    importing
      !IS_FASTD_RHNDL_VIS type ZVCXI_FFSS_S_FASTD_RHNDL_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_FASTD_VIS
    importing
      !IS_FASTD_SE_VIS type ZVCXI_FFSS_S_FASTD_SE_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_REGISTERED_UI_INFO
    redefinition .
protected section.

  constants C_FCODE_MTS type UI_FUNC value 'MTS' ##NO_TEXT.
  constants C_FCODE_MULTIQTY type UI_FUNC value 'MULTIQTY' ##NO_TEXT.
  constants C_FCODE_RTESPV type UI_FUNC value 'RTESPV' ##NO_TEXT.
  constants C_FCODE_TINFO type UI_FUNC value 'TINFO' ##NO_TEXT.
  constants C_UC_BOOSTER type SYUCOMM value 'BOOSTER' ##NO_TEXT.
  constants C_UC_FISTRUC type SYUCOMM value '0100FASTD_FSTRC' ##NO_TEXT.
  constants C_UC_SHCO type SYUCOMM value '0200FASTD_SHCO' ##NO_TEXT.
  data F_APPL_EVENTS type ABAP_BOOL .
  data F_SFDAT type ZVCXI_F0SS_SFDAT .
  data R_BL_FASTD_SE type ref to ZCL_VCXI_FFSS_BL_FASTD_SE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID_FASTD_INP type ref to ZCL_VCXI_FFSS_GRID_FASTD_INP .
  data R_GRID_FASTD_LAMI type ref to ZCL_VCXI_FFSS_GRID_FASTD_LAMI .
  data R_GRID_FASTD_PRINT type ref to ZCL_VCXI_FFSS_GRID_FASTD_PRINT .
  data R_PICTURE_RHNDL type ref to ZCL_VCXI_FFS_PICTURE_RHNDL .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  data S_DYNP_TAB type /VCXI/CKX_S_DYNP_KEY .

  methods GET_PRVDR_MS_CORE
    returning
      value(RR_CORE_PRVDR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR_FCODE
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods HANDLE_UC_BOOSTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FISTRUC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MTS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MULTIQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_RTESPV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SHCO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TINFO
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_FFG_VIS
    importing
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_RHNDL_VIS
    importing
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    importing
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods IS_RTESPV_DISABLED
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_PRVDR_TAB
    redefinition .
  methods HANDLE_GATE_FREED
    redefinition .
  methods OPEN_SUBSCREEN
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_UI_FASTD_SE definition
class ZCL_VCXI_FFSS_UI_FASTD_SE implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_FASTD_SE_BIND'
      exporting
        IR_UI_FASTD_SE = ME
      importing
        ES_DYNP        = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Define if Application Events should be triggered
enhancement-section APPL_EVENT_ON_ACTIVATE spots ZVCXI_FFSS_ES_UI_FASTD_SE .
    ME->F_APPL_EVENTS = ABAP_TRUE.
end-enhancement-section.


***--------------------------------------------------------------------------------------
*** Create Roll Winding Picture
    if ME->R_PICTURE_RHNDL is not bound.
      create object ME->R_PICTURE_RHNDL
        exporting
          IR_GATE           = ME->R_GATE
          IR_UIGATE         = ME->R_UIGATE
          IF_CONTAINER_NAME = '0200CC_PICTURE'.
    endif.

***--------------------------------------------------------------------------------------
*** Create Grid for GRID_FASTD_INP
    create object ME->R_GRID_FASTD_INP
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_INP'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD_SE.

*** Create Grid for GRID_FASTD_LAMI
    create object ME->R_GRID_FASTD_LAMI
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_LAMI'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD_SE.

*** Create Grid for GRID_FASTD_PRINT
    create object ME->R_GRID_FASTD_PRINT
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_PRINT'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD_SE.

  endmethod.
  method ACTIVATE_FFG.

***--------------------------------------------------------------------------------------
*** Push FFG Screen
    move ME->S_DYNP-REPID      to ME->S_DYNP_TAB-REPID.
    move '0200'                to ME->S_DYNP_TAB-DYNNR.

    clear: ME->S_FASTD_FFG_SE_VIS, ME->S_FASTD_RHNDL_VIS.

***--------------------------------------------------------------------------------------
*** Create Roll Winding Picture
    if ME->R_PICTURE_RHNDL is not bound.
      create object ME->R_PICTURE_RHNDL
        exporting
          IR_GATE           = ME->R_GATE
          IR_UIGATE         = ME->R_UIGATE
          IF_CONTAINER_NAME = '0200CC_PICTURE'.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Create Business Logic Instance
    create object ME->R_BL_FASTD_SE
      exporting
        IR_GATE = ME->R_GATE.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

***--------------------------------------------------------------------------------------
*** Free Grids
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->DO_FREE( ).
      clear ME->R_GRID_FASTD_INP.
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->DO_FREE( ).
      clear ME->R_GRID_FASTD_LAMI.
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->DO_FREE( ).
      clear ME->R_GRID_FASTD_PRINT.
    endif.

***--------------------------------------------------------------------------------------
*** Free Roll Winding Picture
    if ME->R_PICTURE_RHNDL is bound.
      ME->R_PICTURE_RHNDL->DO_FREE( ).
      clear ME->R_PICTURE_RHNDL.
    endif.

  endmethod.
  method DEACTIVATE_FFG.

***--------------------------------------------------------------------------------------
*** Free Roll Winding Picture
    if ME->R_PICTURE_RHNDL is bound.
      ME->R_PICTURE_RHNDL->DO_FREE( ).
      clear ME->R_PICTURE_RHNDL.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Lock fields which should be display-only in non-standard configurations
          if ME->F_SFDAT ne ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
            if SCREEN-GROUP2 eq 'NSC'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***--------------------------------------------------------------------------------------
***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_FFG_SE_VIS-FOVRR_MAKTX' and
             ME->S_FASTD_FFG_SE_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Disable Material Description if generated
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_FFG_SE_VIS-MAKTX' and
             ME->S_FASTD_FFG_SE_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***--------------------------------------------------------------------------------------
***       Set Target Fields
          case ABAP_TRUE.
            when ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RLETA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RWGTA' .
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RWGTA' .
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RLETA' .
                move 0 to SCREEN-INPUT.
              endif.
          endcase.

***--------------------------------------------------------------------------------------
***       Set Minimum - Maximum Fields
          case ABAP_TRUE.
            when ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM.
              if    SCREEN-GROUP1 eq 'LMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'LMM'.
                move 0 to SCREEN-INPUT.
              endif.
          endcase.
***--------------------------------------------------------------------------------------
***       Set Percentage Fields
          if ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
***         Deactivate the min/max groups if percentage is active
            if    SCREEN-GROUP1 eq 'DMM'
               or SCREEN-GROUP1 eq 'LMM'
               or SCREEN-GROUP1 eq 'WMM'.
              move 0 to SCREEN-INPUT.
            endif.
          else.
***         Only set PPM read-only, don't touch the other groups here
            if SCREEN-GROUP1 eq 'PMM'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Set Flag - Shared Core
          if SCREEN-GROUP1 eq 'FSH'.
            if ME->S_FASTD_RHNDL_VIS-FOVRR_FSHCO eq ABAP_FALSE.
              move 0 to SCREEN-ACTIVE.
            else.
              move 1 to SCREEN-ACTIVE.
            endif.
          endif.

          if SCREEN-GROUP1 eq 'SHC'.
            if ME->S_FASTD_RHNDL_VIS-FOVRR_SHCBT eq ABAP_FALSE.
              move 0 to SCREEN-ACTIVE.
            else.
              move 1 to SCREEN-ACTIVE.
            endif.
          endif.

***       Shared Core ID
          if SCREEN-GROUP1 eq 'ISH'.
            if ME->S_FASTD_RHNDL_VIS-FSHCO eq ABAP_FALSE or
              ME->S_FASTD_RHNDL_VIS-FOVRR_FSHCO eq ABAP_FALSE.
              move 0 to SCREEN-ACTIVE.
            else.
              move 1 to SCREEN-ACTIVE.
            endif.
          endif.

***       Set Core Material
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-MATNR'.
            if ME->S_FASTD_RHNDL_VIS-ISHCO is not initial.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Reopen Info Buttons and Tabs
          if SCREEN-GROUP1 eq 'INF' or
             SCREEN-NAME cs ME->F_TABPT.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.


      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    data: LF_SFDAT       type        ZVCXI_F0SS_SFDAT.
    data: LT_FFG_PRVDR   type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE.

    SUPER->DO_PBO( ).

***--------------------------------------------------------------------------------------
*** Initialize Toolbar
    ME->INIT_CONTAINER( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Get Starting Gate
    ME->R_BL_FASTD_SE->GET_GATE_FFG( importing ER_GATE_OUTPUT = LR_GATE_OUTPUT
                                               ER_GATE_FFG    = LR_GATE_FFG
                                               EF_SFDAT       = ME->F_SFDAT
                                               ET_FFG_PRVDR   = LT_FFG_PRVDR ).

***--------------------------------------------------------------------------------------
**** Initialize VIS
    ME->INIT_VIS( IR_GATE_OUTPUT = LR_GATE_OUTPUT
                  IR_GATE_FFG    = LR_GATE_FFG ).

    check ME->R_GRID_FASTD_INP is bound and
          ME->R_GRID_FASTD_LAMI is bound.

*** Get Fast Data Information from Finished Good
    ME->R_BL_FASTD_SE->GET_FASTD_BY_OUTPUT( exporting IR_GATE_OUTPUT = LR_GATE_OUTPUT
                                            importing ET_FASTD_INP   = ME->R_GRID_FASTD_INP->T_FASTD_INP
                                                      ET_FASTD_LAMI  = ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI
                                                      EF_SFDAT       = LF_SFDAT ).
    if LF_SFDAT eq ZCL_VCXI_FFSS_BL_FASTD_SE=>C_SFDAT_NONSTANDARD.
      move LF_SFDAT to ME->F_SFDAT.
    endif.

    move LINES( ME->R_GRID_FASTD_INP->T_FASTD_INP ) to ME->S_FASTD_SE_VIS-NOFIL.

    move LINES( LT_FFG_PRVDR ) to  ME->S_FASTD_SE_VIS-NOFFG.

***--------------------------------------------------------------------------------------
*** Refresh Input Film Grid
    move ABAP_TRUE   to ME->R_GRID_FASTD_INP->F_REFRESH_REQ.
    move ME->F_SFDAT to ME->R_GRID_FASTD_INP->F_SFDAT.
    move LR_GATE_FFG to ME->R_GRID_FASTD_INP->R_GATE_OUT.
    ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_INP->REFRESH_GRID( ).

*** Refresh Lamination Grid
    move ABAP_TRUE   to ME->R_GRID_FASTD_LAMI->F_REFRESH_REQ.
    move ME->F_SFDAT to ME->R_GRID_FASTD_LAMI->F_SFDAT.
    move LR_GATE_FFG to ME->R_GRID_FASTD_LAMI->R_GATE_OUT.
    ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_LAMI->REFRESH_GRID( ).

*** Refresh Printing Grid
    move ME->R_GRID_FASTD_INP->T_FASTD_INP   to ME->R_GRID_FASTD_PRINT->T_FASTD_INP.
    move ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI to ME->R_GRID_FASTD_PRINT->T_FASTD_LAMI.
    move ABAP_TRUE                           to ME->R_GRID_FASTD_PRINT->F_REFRESH_REQ.
    move ME->F_SFDAT                         to ME->R_GRID_FASTD_PRINT->F_SFDAT.
    move LR_GATE_FFG                         to ME->R_GRID_FASTD_PRINT->R_GATE_OUT.
    ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_PRINT->REFRESH_GRID( ).

***--------------------------------------------------------------------------------------
*** Set Cursor
    set cursor field ME->F_CURSOR.

  endmethod.
  method DO_PBO_FFG.

    data: LF_SFDAT       type        ZVCXI_F0SS_SFDAT.
    data: LS_TAB_LIST    type        ZVCXI_F0S_S_TAB_LIST.
    data: LT_FFG_PRVDR   type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE.

    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    check LS_TAB_LIST-R_GATE is bound.

    move LS_TAB_LIST-R_GATE to LR_GATE_FFG.

***--------------------------------------------------------------------------------------
**** Initialize Finished Good VIS
    ME->INIT_FFG_VIS( IR_GATE_FFG = LR_GATE_FFG ).

***--------------------------------------------------------------------------------------
**** Initialize Roll Handling VIS
    ME->INIT_RHNDL_VIS( IR_GATE_FFG = LR_GATE_FFG ).

    check ME->R_GRID_FASTD_INP is bound and
          ME->R_GRID_FASTD_LAMI is bound.

*** Get Fast Data Information from Finished Good
    ME->R_BL_FASTD_SE->GET_FASTD_BY_OUT( exporting IR_GATE_OUT   = LR_GATE_FFG
                                         importing ET_FASTD_INP  = ME->R_GRID_FASTD_INP->T_FASTD_INP
                                                   ET_FASTD_LAMI = ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI
                                                   EF_SFDAT      = LF_SFDAT ).
    if LF_SFDAT eq ZCL_VCXI_FFSS_BL_FASTD_SE=>C_SFDAT_NONSTANDARD.
      move LF_SFDAT to ME->F_SFDAT.
    endif.

*** Get Number of Films
    move LINES( ME->R_GRID_FASTD_INP->T_FASTD_INP ) to ME->S_FASTD_SE_VIS-NOFIL.

*** Get Number of Finished Goods
    move LINES( LT_FFG_PRVDR ) to  ME->S_FASTD_SE_VIS-NOFFG.

***--------------------------------------------------------------------------------------
*** Refresh Input Film Grid
    move ABAP_TRUE   to ME->R_GRID_FASTD_INP->F_REFRESH_REQ.
    move ME->F_SFDAT to ME->R_GRID_FASTD_INP->F_SFDAT.
    move LR_GATE_FFG to ME->R_GRID_FASTD_INP->R_GATE_OUT.
    ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_INP->REFRESH_GRID( ).

*** Refresh Lamination Grid
    move ABAP_TRUE   to ME->R_GRID_FASTD_LAMI->F_REFRESH_REQ.
    move ME->F_SFDAT to ME->R_GRID_FASTD_LAMI->F_SFDAT.
    move LR_GATE_FFG to ME->R_GRID_FASTD_LAMI->R_GATE_OUT.
    ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_LAMI->REFRESH_GRID( ).

*** Refresh Printing Grid
    move ME->R_GRID_FASTD_INP->T_FASTD_INP   to ME->R_GRID_FASTD_PRINT->T_FASTD_INP.
    move ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI to ME->R_GRID_FASTD_PRINT->T_FASTD_LAMI.
    move ABAP_TRUE                           to ME->R_GRID_FASTD_PRINT->F_REFRESH_REQ.
    move LR_GATE_FFG                         to ME->R_GRID_FASTD_PRINT->R_GATE_OUT.
    move ME->F_SFDAT                         to ME->R_GRID_FASTD_PRINT->F_SFDAT.
    ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    ME->R_GRID_FASTD_PRINT->REFRESH_GRID( ).

***--------------------------------------------------------------------------------------
*** Set Cursor
    set cursor field ME->F_CURSOR.

  endmethod.
  method DO_UPDATE_FASTD_FFG_VIS.

    data: LS_TAB_LIST   type        ZVCXI_F0S_S_TAB_LIST.
    data: LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG.

***--------------------------------------------------------------------------------------
*** Get the active Gate based on the tabstrip
    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    check LS_TAB_LIST-R_GATE is bound.

*** Finished Good Film
    try.
        move LS_TAB_LIST-R_GATE->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.

    check LR_PR_FFG is bound.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if ME->S_FASTD_FFG_SE_VIS-MAKTX        ne IS_FASTD_FFG_SE_VIS-MAKTX or
       ME->S_FASTD_FFG_SE_VIS-FOVRR_MAKTX  ne IS_FASTD_FFG_SE_VIS-FOVRR_MAKTX.
      if IS_FASTD_FFG_SE_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        LR_PR_FFG->SET_MAKTX( IF_MAKTX = IS_FASTD_FFG_SE_VIS-MAKTX
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        LR_PR_FFG->SET_MAKTX( IF_MAKTX = IS_FASTD_FFG_SE_VIS-MAKTX
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Number Out directly
    if ME->S_FASTD_FFG_SE_VIS-NOOUT ne IS_FASTD_FFG_SE_VIS-NOOUT.
      LR_PR_FFG->SET_NOOUT( IF_NOOUT = IS_FASTD_FFG_SE_VIS-NOOUT
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Get Material Belonging to the Customer
    if ME->S_FASTD_FFG_SE_VIS-KDMAT ne IS_FASTD_FFG_SE_VIS-KDMAT.
      LR_PR_FFG->SET_KDMAT( IF_KDMAT = IS_FASTD_FFG_SE_VIS-KDMAT
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Get Customer Description of Material
    if ME->S_FASTD_FFG_SE_VIS-KDPTX ne IS_FASTD_FFG_SE_VIS-KDPTX.
      LR_PR_FFG->SET_KDPTX( IF_KDPTX = IS_FASTD_FFG_SE_VIS-KDPTX
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Width (Outbound)
    if ME->S_FASTD_FFG_SE_VIS-S_FIWID ne IS_FASTD_FFG_SE_VIS-S_FIWID.
      LR_PR_FFG->SET_FIWID( IS_FIWID = IS_FASTD_FFG_SE_VIS-S_FIWID ).
    endif.

*** Set Distribution Key
    if ME->S_FASTD_FFG_SE_VIS-S_DIKEY ne IS_FASTD_FFG_SE_VIS-S_DIKEY.
      LR_PR_FFG->SET_DIKEY( exporting IS_DIKEY = IS_FASTD_FFG_SE_VIS-S_DIKEY
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Component Ratio
    if ME->S_FASTD_FFG_SE_VIS-COMPR ne IS_FASTD_FFG_SE_VIS-COMPR.
      LR_PR_FFG->SET_COMPR( exporting IF_COMPR = IS_FASTD_FFG_SE_VIS-COMPR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_UPDATE_FASTD_RHNDL_VIS.

    data: LF_ISHCO      type ZVCXI_FFS_ISHCO.
    data: LS_TAB_LIST   type        ZVCXI_F0S_S_TAB_LIST.
    data: LT_PRVDR      type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
          LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get the active Gate based on the tabstrip
    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    check LS_TAB_LIST-R_GATE is bound.

*** Finished Good Film
    try.
        move LS_TAB_LIST-R_GATE->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.

    check LR_PR_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling Provider
    LT_PRVDR = LS_TAB_LIST-R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC is initial.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_RHNDL.
    endtry.

    if LR_PR_RHNDL is bound.

***--------------------------------------------------------------------------------------
***   Target Dimension
      if ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA ne IS_FASTD_RHNDL_VIS-FOVRR_RDITA or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA ne IS_FASTD_RHNDL_VIS-FOVRR_RLETA or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA ne IS_FASTD_RHNDL_VIS-FOVRR_RWGTA.
        LR_PR_RHNDL->SET_RDIMTA( IF_RDMTA = cond #( when IS_FASTD_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE then 'D'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE then 'L'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE then 'W' )
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Diameter Target
      if ME->S_FASTD_RHNDL_VIS-S_RDITA  ne IS_FASTD_RHNDL_VIS-S_RDITA and
         IS_FASTD_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDITA( IS_RDITA = IS_FASTD_RHNDL_VIS-S_RDITA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Length Target
      if ME->S_FASTD_RHNDL_VIS-S_RLETA  ne IS_FASTD_RHNDL_VIS-S_RLETA and
         IS_FASTD_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLETA( IS_RLETA = IS_FASTD_RHNDL_VIS-S_RLETA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Weight Target
      if ME->S_FASTD_RHNDL_VIS-S_RWGTA  ne IS_FASTD_RHNDL_VIS-S_RWGTA and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGTA( IS_RWGTA = IS_FASTD_RHNDL_VIS-S_RWGTA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.


***--------------------------------------------------------------------------------------
***   Minimum/Maximum Dimension
      if ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM ne IS_FASTD_RHNDL_VIS-FOVRR_RDIMM or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM ne IS_FASTD_RHNDL_VIS-FOVRR_RLEMM or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM ne IS_FASTD_RHNDL_VIS-FOVRR_RWGMM.
        LR_PR_RHNDL->SET_RDIMMM( IF_RDMMM = cond #( when IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE then 'D'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE then 'L'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE then 'W' )
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Diameter Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RDIMI  ne IS_FASTD_RHNDL_VIS-S_RDIMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDIMI( IS_RDIMI = IS_FASTD_RHNDL_VIS-S_RDIMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RDIMA  ne IS_FASTD_RHNDL_VIS-S_RDIMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDIMA( IS_RDIMA = IS_FASTD_RHNDL_VIS-S_RDIMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Length Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RLEMI  ne IS_FASTD_RHNDL_VIS-S_RLEMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLEMI( IS_RLEMI = IS_FASTD_RHNDL_VIS-S_RLEMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RLEMA     ne IS_FASTD_RHNDL_VIS-S_RLEMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLEMA( IS_RLEMA = IS_FASTD_RHNDL_VIS-S_RLEMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Weight Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RWGMI  ne IS_FASTD_RHNDL_VIS-S_RWGMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGMI( IS_RWGMI = IS_FASTD_RHNDL_VIS-S_RWGMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RWGMA  ne IS_FASTD_RHNDL_VIS-S_RWGMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGMA( IS_RWGMA = IS_FASTD_RHNDL_VIS-S_RWGMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.


***--------------------------------------------------------------------------------------
***   Set Percentage Minimum
      if     ME->S_FASTD_RHNDL_VIS-S_PERMI     ne IS_FASTD_RHNDL_VIS-S_PERMI
          or ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.

        if IS_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
          LR_PR_RHNDL->SET_PERMI( IS_PERMI = IS_FASTD_RHNDL_VIS-S_PERMI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        else.
          LR_PR_RHNDL->SET_PERMI( IS_PERMI = IS_FASTD_RHNDL_VIS-S_PERMI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
        endif.
      endif.

***   Set Percentage Maximum
      if     ME->S_FASTD_RHNDL_VIS-S_PERMA     ne IS_FASTD_RHNDL_VIS-S_PERMA
          or ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.

        if IS_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
          LR_PR_RHNDL->SET_PERMA( IS_PERMA = IS_FASTD_RHNDL_VIS-S_PERMA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        else.
          LR_PR_RHNDL->SET_PERMA( IS_PERMA = IS_FASTD_RHNDL_VIS-S_PERMA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
        endif.
      endif.


***--------------------------------------------------------------------------------------
***   Set Winding Side
      if     ME->S_FASTD_RHNDL_VIS-RWSID ne IS_FASTD_RHNDL_VIS-RWSID.
        LR_PR_RHNDL->SET_RWSID( exporting IF_RWSID = IS_FASTD_RHNDL_VIS-RWSID
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***--------------------------------------------------------------------------------------
***   Set Winding Direction
      if     ME->S_FASTD_RHNDL_VIS-RWDIR ne IS_FASTD_RHNDL_VIS-RWDIR.
        LR_PR_RHNDL->SET_RWDIR( exporting IF_RWDIR = IS_FASTD_RHNDL_VIS-RWDIR
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***--------------------------------------------------------------------------------------
***   Set Eyemark Position
      if     ME->S_FASTD_RHNDL_VIS-EYEMP ne IS_FASTD_RHNDL_VIS-EYEMP.
        LR_PR_RHNDL->SET_EYEMP( exporting IF_EYEMP = IS_FASTD_RHNDL_VIS-EYEMP
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***--------------------------------------------------------------------------------------
***   Set Percentage
      if ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.
        ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM = IS_FASTD_RHNDL_VIS-FOVRR_PERMM.
      endif.

    endif.

***--------------------------------------------------------------------------------------
*** Get MS Core Provider
    LT_PRVDR = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC is initial.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_CORE.
    endtry.

    if LR_PR_MS_CORE is bound.
***   Set Material Number
      if ME->S_FASTD_RHNDL_VIS-MATNR ne IS_FASTD_RHNDL_VIS-MATNR.
        LR_PR_MS_CORE->SET_MATNR( IF_MATNR = IS_FASTD_RHNDL_VIS-MATNR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Flag - Shared
      if ME->S_FASTD_RHNDL_VIS-FSHCO ne IS_FASTD_RHNDL_VIS-FSHCO.
        LR_PR_MS_CORE->SET_FSHCO( IF_FSHCO = IS_FASTD_RHNDL_VIS-FSHCO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Shared Core ID
      move IS_FASTD_RHNDL_VIS-ISHCO to LF_ISHCO.
      if IS_FASTD_RHNDL_VIS-FSHCO is initial.
        clear LF_ISHCO.
      endif.
      if ME->S_FASTD_RHNDL_VIS-ISHCO ne LF_ISHCO.
        LR_PR_MS_CORE->SET_ISHCO( IF_ISHCO = LF_ISHCO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

  endmethod.
  method DO_UPDATE_FASTD_VIS.

    data: LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OUTPUT   type ref to ZCL_VCXI_FFSS_PR_OUTPUT.

***--------------------------------------------------------------------------------------
*** Grids for Fast Data of Film
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Starting Gate
    ME->R_BL_FASTD_SE->GET_GATE_FFG( importing ER_GATE_FFG    = LR_GATE_FFG
                                               ER_GATE_OUTPUT = LR_GATE_OUTPUT ).

*** Finished Good Film
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.
    check LR_PR_FFG is bound.

*** Output
    try.
        move LR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_OUTPUT.
    endtry.
    check LR_PR_OUTPUT is bound.

*** Set Trim directly on the Output
    if ME->S_FASTD_SE_VIS-S_TRWID ne IS_FASTD_SE_VIS-S_TRWID.
      LR_PR_OUTPUT->SET_TRWID( IS_TRWID = IS_FASTD_SE_VIS-S_TRWID
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set number of Film Finished Goods
    if ME->S_FASTD_SE_VIS-NOFFG ne IS_FASTD_SE_VIS-NOFFG.
      ME->R_BL_FASTD_SE->SET_NOFFG( IF_NOFFG = IS_FASTD_SE_VIS-NOFFG ).
    endif.

***--------------------------------------------------------------------------------------
*** Number of Films, Number of Outs, Trim
    if ME->S_FASTD_SE_VIS-NOFIL   ne IS_FASTD_SE_VIS-NOFIL.
***   Set through Fast Data
      ME->R_BL_FASTD_SE->SET_NOFIL( IR_GATE_OUT = LR_GATE_FFG
                                    IF_NOFIL    = IS_FASTD_SE_VIS-NOFIL ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

*** Grids for Fast Data of Film
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    endif.

    case IF_UCOMM.
      when C_UC_FISTRUC.
        ME->HANDLE_UC_FISTRUC( ).

      when C_UC_SHCO.
        ME->HANDLE_UC_SHCO( ).

    endcase.

  endmethod.
  method GET_PRVDR_MS_CORE.

    data: LT_PRVDR      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_FFG   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
          LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Finsihed Good Film
    ME->R_BL_FASTD_SE->GET_GATE_FFG( importing ER_GATE_FFG = LR_GATE_FFG ).
    check LR_GATE_FFG is bound.
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    check LR_PR_FFG is bound.

*** Get Roll Handling Provider
    LT_PRVDR = LR_GATE_FFG->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC is initial.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_RHNDL.
    endtry.
    check LR_PR_RHNDL is bound.

*** Get MS Core Provider
    refresh LT_PRVDR.
    LT_PRVDR = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE ).
    read table LT_PRVDR into RR_CORE_PRVDR index 1.

  endmethod.
  method GET_PRVDR_TAB.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.

    ME->R_BL_FASTD_SE->GET_GATE_FFG( importing ET_FFG_PRVDR = LT_GATE ).
    append lines of LT_GATE to RT_PRVDR.

*** Sort before returning
    ME->R_GATE->SORT_GATE( changing CT_GATE = RT_PRVDR ).

  endmethod.
  method GET_REGISTERED_UI_INFO.

    if ME->S_DYNP_TAB is not initial.
      move ME->S_DYNP_TAB            to RS_DYNP.
    else.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_BL_FASTD_SE.

  endmethod.
  method HANDLE_TOOLBAR_FCODE.

    try.

***     Other user Commands
        case FCODE.
          when C_FCODE_MULTIQTY.
            ME->HANDLE_UC_MULTIQTY( ).

          when C_FCODE_TINFO.
            ME->HANDLE_UC_TINFO( ).

          when C_FCODE_MTS.
            ME->HANDLE_UC_MTS( ).

          when C_FCODE_RTESPV.
            ME->HANDLE_UC_RTESPV( ).

          when C_UC_BOOSTER.
            ME->HANDLE_UC_BOOSTER( ).

        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_BOOSTER.

***--------------------------------------------------------------------------------------
*** Call Booster Selection Popup
    ZCL_VCXI_XCS_POPUP_BOOSTER=>START( IR_GATE = ME->R_GATE ).

  endmethod.
  method HANDLE_UC_FISTRUC.

    data: LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

***--------------------------------------------------------------------------------------
*** Get Finished Good Film
    ME->R_BL_FASTD_SE->GET_GATE_FFG( importing ER_GATE_FFG = LR_GATE_FFG ).
    check LR_GATE_FFG is bound.
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    check LR_PR_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Film Structure XML
    LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Start Popup
    ZCL_VCXI_FFSS_POPUP_FISTRUCT=>START( IR_BL_FISTRUCT = LR_BL_FISTRUCT ).

  endmethod.
  method HANDLE_UC_MTS.

*** Call Popup for Make-to-Stock Materials
    ZCL_VCXI_XCSS_POPUP_MTS=>START( IR_GATE        = ME->R_GATE
                                    IR_UIGATE      = ME->R_UIGATE
                                    IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_MULTIQTY.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Multi Quantity Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Call Popup for Mulit Quantiies
    ZCL_VCXI_XCSS_POPUP_MULTIQTY=>START( IR_GATE        = LT_GATE[ 1 ]
                                         IR_UIGATE      = ME->R_UIGATE
                                         IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_RTESPV.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Fill Production
    cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->FILL_PROD( ).

*** Production was updated.
    message id 'ZVCXI_XCSR' type 'S' number '371'.

  endmethod.
  method HANDLE_UC_SHCO.

    data: LF_ICORE      type ZVCXI_FFS_ICORE.
    data: LS_SHCO       type ZVCXI_FFS_S_SHCO.
    data: LT_SHCO       type ZVCXI_FFS_TT_SHCO.

*** Start Shared Core Popup
    ZCL_VCXI_FFS_POPUP_SHCO=>START( exporting IR_SHCO   = ME
                                              IF_LOCKED = ME->R_GATE->IS_LOCKED( )
                                    importing EF_ICORE  = LF_ICORE ).

    if LF_ICORE is not initial.
      move ME->ZIF_VCXI_FFS_SHCO~GET_SHCO( ) to LT_SHCO.

      read table LT_SHCO into LS_SHCO with key ICORE = LF_ICORE.
      check LS_SHCO-R_GATE is bound.

      ME->R_UIGATE->OPEN_SUBSCREEN( exporting IR_GATE = LS_SHCO-R_GATE ).
      ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_SHCO-R_GATE->F_GATKY ).
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_SHCO-R_GATE->F_GATKY ).
    endif.

  endmethod.
  method HANDLE_UC_TINFO.

*** Call Popup for Tooling Information
    ZCL_VCXI_XCSS_POPUP_TINFO=>START( IR_GATE        = ME->R_GATE
                                      IR_UIGATE      = ME->R_UIGATE
                                      IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0100CC_TOOLBAR'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
method INIT_FFG_VIS.

  data: LR_PR_FFG type ref to ZCL_VCXI_FFSS_PR_FFG.

  check IR_GATE_FFG is bound.

***--------------------------------------------------------------------------------------
*** Finsihed Good Film Provider
  try.
      move IR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_FFG.
  endtry.
  check LR_PR_FFG is bound.

  free: ME->S_FASTD_FFG_SE_VIS.

***--------------------------------------------------------------------------------------
*** Get Material Description
  LR_PR_FFG->GET_MAKTX( importing EF_MAKTX = ME->S_FASTD_FFG_SE_VIS-MAKTX
                                  EF_FOVRR = ME->S_FASTD_FFG_SE_VIS-FOVRR_MAKTX ).

*** Get Material Belonging to the Customer
  LR_PR_FFG->GET_KDMAT( importing EF_KDMAT = ME->S_FASTD_FFG_SE_VIS-KDMAT ).

*** Get Customer Description of Material
  LR_PR_FFG->GET_KDPTX( importing EF_KDPTX = ME->S_FASTD_FFG_SE_VIS-KDPTX ).

*** Get Number of Outs
  ME->S_FASTD_FFG_SE_VIS-NOOUT = LR_PR_FFG->GET_NOOUT( ).

*** Get Film Width (Outbound)
  LR_PR_FFG->GET_FIWID( importing ES_FIWID = ME->S_FASTD_FFG_SE_VIS-S_FIWID ).

*** Get Distribution Key
  LR_PR_FFG->GET_DIKEY( importing ES_DIKEY = ME->S_FASTD_FFG_SE_VIS-S_DIKEY ).

*** Get Component Ratio
  LR_PR_FFG->GET_COMPR( importing EF_COMPR = ME->S_FASTD_FFG_SE_VIS-COMPR ).

endmethod.
method INIT_RHNDL_VIS.

  data: LF_SETBY      type /VCXI/VKSR_SETBY.
  data: LT_PRVDR      type /VCXI/VKSR_TT_GATE.
  data: LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
        LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
        LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.


  clear ME->S_FASTD_RHNDL_VIS.

  check IR_GATE_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling Provider
  LT_PRVDR = IR_GATE_FFG->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC is initial.

  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_RHNDL.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_RHNDL.
  endtry.

  if LR_PR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension Target
    case LR_PR_RHNDL->GET_RDIMTA( importing ES_RDITA  = ME->S_FASTD_RHNDL_VIS-S_RDITA
                                            ES_RLETA  = ME->S_FASTD_RHNDL_VIS-S_RLETA
                                            ES_RWGTA  = ME->S_FASTD_RHNDL_VIS-S_RWGTA )-RDMTA.
      when 'D'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA.
      when 'L'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA.
      when 'W'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA.
    endcase.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension Minimum/Maximum
    case LR_PR_RHNDL->GET_RDIMMM( )-RDMMM.
      when 'D'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM.
      when 'L'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM.
      when 'W'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM.
    endcase.

*** Get Roll Diameter Minimum/Maximum
    LR_PR_RHNDL->GET_RDIMI( importing ES_RDIMI = ME->S_FASTD_RHNDL_VIS-S_RDIMI ).
    LR_PR_RHNDL->GET_RDIMA( importing ES_RDIMA = ME->S_FASTD_RHNDL_VIS-S_RDIMA ).

*** Get Roll Length Minimum/Maximum
    LR_PR_RHNDL->GET_RLEMI( importing ES_RLEMI = ME->S_FASTD_RHNDL_VIS-S_RLEMI ).
    LR_PR_RHNDL->GET_RLEMA( importing ES_RLEMA = ME->S_FASTD_RHNDL_VIS-S_RLEMA ).

*** Get Roll Weight Minimum/Maximum
    LR_PR_RHNDL->GET_RWGMI( importing ES_RWGMI = ME->S_FASTD_RHNDL_VIS-S_RWGMI ).
    LR_PR_RHNDL->GET_RWGMA( importing ES_RWGMA = ME->S_FASTD_RHNDL_VIS-S_RWGMA ).

*** Get Percentage Minimum
    LR_PR_RHNDL->GET_PERMI( importing ES_PERMI = ME->S_FASTD_RHNDL_VIS-S_PERMI
                                      EF_SETBY = LF_SETBY ).
    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM.
    endif.

*** Get Percentage Maximum
    LR_PR_RHNDL->GET_PERMA( importing ES_PERMA = ME->S_FASTD_RHNDL_VIS-S_PERMA ).

***--------------------------------------------------------------------------------------
*** Get Winding Side
    LR_PR_RHNDL->GET_RWSID( importing EF_RWSID = ME->S_FASTD_RHNDL_VIS-RWSID ).

*** Get Winding Direction
    LR_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = ME->S_FASTD_RHNDL_VIS-RWDIR ).

*** Get Eyemark Position
    LR_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = ME->S_FASTD_RHNDL_VIS-EYEMP ).

*** Refresh Winding Picture
    ME->R_PICTURE_RHNDL->REFRESH_PICTURE( IF_EYEMP = ME->S_FASTD_RHNDL_VIS-EYEMP
                                          IF_RWDIR = ME->S_FASTD_RHNDL_VIS-RWDIR
                                          IF_RWSID = ME->S_FASTD_RHNDL_VIS-RWSID ).
  endif.

***--------------------------------------------------------------------------------------
*** Get MS Core Provider
  LT_PRVDR = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC is initial.

  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_CORE.
  endtry.

  if LR_PR_MS_CORE is bound.
***--------------------------------------------------------------------------------------
*** Material
    move LR_PR_MS_CORE->GET_MATNR( )       to ME->S_FASTD_RHNDL_VIS-MATNR.
    move LR_PR_MS_CORE->GET_MATNR_DESCR( ) to ME->S_FASTD_RHNDL_VIS-MATNR_DESCR.

*** Flag - Shared Core
    LR_PR_MS_CORE->GET_FSHCO( importing EF_FSHCO = ME->S_FASTD_RHNDL_VIS-FSHCO ).
    move LR_PR_MS_CORE->IS_FSHCO_AVAILABLE( ) to ME->S_FASTD_RHNDL_VIS-FOVRR_FSHCO.

*** Set Shared Core Button Visibility
    move LR_PR_MS_CORE->IS_BUTTON_SHCO_AVAILABLE( ) to ME->S_FASTD_RHNDL_VIS-FOVRR_SHCBT.

*** Shared Core ID
    LR_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = ME->S_FASTD_RHNDL_VIS-ISHCO ).

*** Define DropDown Values for Shared Core ID
    LR_PR_MS_CORE->SET_DDVAL_ISHCO( IF_TABNAME = 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS').

  endif.

endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED         type /VCXI/CKX_LOCKED,
          LF_INUSE          type /VCXI/VKSR_INUSE,
          LF_DISABLED       type ABAP_BOOL,
          LF_HIDDE_MULTIQTY type ABAP_BOOL.
    data: LT_EVENT  type CNTL_SIMPLE_EVENTS,
          LT_BTNGRP type TTB_BUTTON.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.


***--------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Create Toolbar
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Registered Events
      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS = LT_EVENT
                                            exceptions others = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Event Handler
      set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.

    endif.

***--------------------------------------------------------------------------------------
*** Remove all Buttons to start fresh
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Button to Load Booster
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_IDATSPV=>C_IPRVT_IDATSPV
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_UC_BOOSTER
                                            ICON        = ICON_CONFIGURATION
                                            IS_DISABLED = LF_DISABLED
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Load Booster'(F06)
                                 exceptions others      = 0 ).
    endif.

*** Hide Multi Quantity if Manager is not acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MULTIQTY
                                            ICON        = ICON_GRADUATE
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Multi Quantity'(F03)
                                 exceptions others      = 0 ).

    endif.

*** Hide Tooling Information if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_TINFO
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Tooling Information'(F05)
                                 exceptions others      = 0 ).

    endif.

*** Hide MTS if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_MTS=>C_IPRVT_XCS_MTS
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MTS
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Make-to-Stock'(F07)
                                 exceptions others      = 0 ).

    endif.

*** Button to Run Routing Supervisor
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_RTESPV
                                            ICON        = ICON_EXECUTE_OBJECT
                                            IS_DISABLED = ME->IS_RTESPV_DISABLED( )
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Fill Production'(F04)
                                 exceptions others      = 0 ).
    endif.

  endmethod.
method INIT_VIS.

  data: LR_PR_OUTPUT type ref to ZCL_VCXI_FFSS_PR_OUTPUT.

***--------------------------------------------------------------------------------------
*** Output Provider
  if IR_GATE_OUTPUT is bound.
    try.
        move IR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_OUTPUT.
    endtry.
    check LR_PR_OUTPUT is bound.

***--------------------------------------------------------------------------------------
*** Trim on the Width
    LR_PR_OUTPUT->GET_TRWID( importing ES_TRWID = ME->S_FASTD_SE_VIS-S_TRWID ).

  endif.

endmethod.
  method IS_RTESPV_DISABLED.

    data: LF_ALLOWED type ABAP_BOOL.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      RF_DISABLED = ABAP_TRUE.

    else.
***   Start Negative
      RF_DISABLED = ABAP_TRUE.

***   Get Gates of Routing Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                       IF_INUSE  = ABAP_TRUE ).
      check LT_GATE is not initial.

***   Check if Fill Production is allowed
      cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED = LF_ALLOWED ).
      RF_DISABLED = switch #( LF_ALLOWED when ABAP_TRUE then ABAP_FALSE else ABAP_TRUE ).
    endif.

  endmethod.
  method OPEN_SUBSCREEN.

***--------------------------------------------------------------------------------------
*** Deactivate UI for FFG
    ME->DEACTIVATE_FFG( ).

***--------------------------------------------------------------------------------------
*** Activate different Screens based on selected Gate
    case IR_GATE->F_ID.
      when ME->R_BL_FASTD_SE->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG ).
***     Activate UI for FFG
        ME->ACTIVATE_FFG( IR_GATE = IR_GATE ).

      when others.
        clear ME->S_DYNP_TAB.
    endcase.

    ME->F_ALREADY_OPEN = ABAP_TRUE.

  endmethod.
  method ZIF_VCXI_FFS_SHCO~GET_INFO.

    data: LS_SHCO       type ZVCXI_FFS_S_SHCO.
    data: LT_SHCO       type ZVCXI_FFS_TT_SHCO.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
          LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.

    move ME->GET_PRVDR_MS_CORE( ) to LR_PRVDR.
    check LR_PRVDR is bound.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_CORE.
    endtry.
    check LR_PR_MS_CORE is bound.

***--------------------------------------------------------------------------------------
*** Get MS Core data
    move LR_PR_MS_CORE->GET_MATNR( ) to RS_INFO_VIS-MATNR.
    move LR_PR_MS_CORE->GET_DESCR( ) to RS_INFO_VIS-MATNR_DESCR.
    LR_PR_MS_CORE->GET_CRLEN( importing ES_CRLEN = RS_INFO_VIS-S_CRLEN ).

*** Get Usage List
    LR_PR_MS_CORE->GET_ISHCO_USAGE_LIST( importing ET_SHCO = LT_SHCO ).

*** Calculate Total Target Core Length
    loop at LT_SHCO into LS_SHCO.
      RS_INFO_VIS-CLETT = RS_INFO_VIS-CLETT + LS_SHCO-CLETA.
    endloop.
    move LS_SHCO-CLETA_UOM to RS_INFO_VIS-CLETT_UOM.

  endmethod.
  method ZIF_VCXI_FFS_SHCO~GET_SHCO.

    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
          LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.

    move ME->GET_PRVDR_MS_CORE( ) to LR_PRVDR.
    check LR_PRVDR is bound.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_CORE.
    endtry.
    check LR_PR_MS_CORE is bound.

*** Get Usage List
    LR_PR_MS_CORE->GET_ISHCO_USAGE_LIST( importing ET_SHCO = RT_SHCO ).

  endmethod.
  method ZIF_VCXI_FFS_SHCO~SET_SHCO.

    data: LF_ICORE      type        ZVCXI_FFS_ICORE,
          LF_ROPCO      type        ZVCXI_FFS_ROPCO.
    data: LS_SHCO       type        ZVCXI_FFS_S_SHCO.
    data: LT_GATE_CORE  type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CORE  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

    move ME->GET_PRVDR_MS_CORE( ) to LR_PRVDR.
    check LR_PRVDR is bound.

*** Add all Shared Cores
    LT_GATE_CORE = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                        IF_INUSE = ABAP_TRUE ).

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CORE ).

    loop at LT_GATE_CORE into LR_GATE_CORE.
      clear: LF_ROPCO, LF_ICORE.

      try.
          move LR_GATE_CORE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

      move LR_PR_MS_CORE->GET_ICORE( ) to LF_ICORE.
      LR_PR_MS_CORE->GET_ROPCO( receiving RF_ROPCO = LF_ROPCO ).

      read table IT_SHCO into LS_SHCO with key ICORE = LF_ICORE.
      check SY-SUBRC is initial.

      check LS_SHCO-ROPCO ne LF_ROPCO.
      LR_PR_MS_CORE->SET_ROPCO( IF_ROPCO = LS_SHCO-ROPCO
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endloop.

  endmethod.
