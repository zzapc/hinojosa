
class ZCL_VCXI_XCSP_EA_MFMI definition
  public
  inheriting from /VCXI/CL_VKSR_CLSEA
  create public .

public section.

  interfaces /VCXI/IF_VKCR_EXPL_BOM .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_MFMI type ref to ZCL_VCXI_XCSP_PR_MFMI .

  methods FILTER_CPBRG_BY_ICSPA
    changing
      !CT_CPBRG type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_EXQTY
    returning
      value(RS_EXQTY) type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
  methods GET_BOM_CONSU
    importing
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
      !IF_BMENG type BASMN
      !IF_BMEIN type BASME
    returning
      value(RS_CONSU) type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
  methods ADJUST_BY_CSPLIT
    changing
      !CS_EXBOM type /VCXI/VKCR_S_EXBOM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_EA_MFMI definition
class ZCL_VCXI_XCSP_EA_MFMI implementation.
method /VCXI/IF_VKCR_EXPL_BOM~FILTER_CPBRG.

*** Filter BOM Groups by active Cost Split
  ME->FILTER_CPBRG_BY_ICSPA( changing CT_CPBRG = CT_CPBRG ).

endmethod.
  method /VCXI/IF_VKCR_EXPL_BOM~GET_BOM.

    data: LF_PURCH type ZVCXI_XCS_PURCH,
          LF_SANKA type SANKA,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_EXQTY type /VCXI/VKCR_S_EXQTY,
          LS_CONSU type ZVCXI_XCSP_S_CONSU,
          LS_KAUSF type ZVCXI_XCSP_S_KAUSF,
          LS_PRICE type ZVCXI_XCS_S_PRICE,
          LS_PRICP type ZVCXI_XCS_S_PRICP.


    if IS_EXQTY is supplied.
      move IS_EXQTY         to LS_EXQTY.
    else.
      move ME->GET_EXQTY( ) to LS_EXQTY.
    endif.

    LF_PURCH = ME->R_PR_MFMI->GET_PURCH( ).

*** Material Number
    move ME->R_PR_MFMI->GET_MATNR( )     to RS_EXBOM-IDNRK.
    move ABAP_TRUE                       to RS_EXBOM-IDNRK_X.

*** Item Category
    RS_EXBOM-POSTP   = switch #( LF_PURCH when ZIF_VCXI_XCSP_MFM=>C_PURCH_STOCK        then 'L'
                                          when ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT       then 'N'
                                          when ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT_PRICE then 'N' ).
    RS_EXBOM-POSTP_X = ABAP_TRUE.

*** BOM Consumption
    LS_CONSU = ME->GET_BOM_CONSU( IS_EXQTY = LS_EXQTY
                                  IF_BMENG = IF_BMENG
                                  IF_BMEIN = IF_BMEIN ).
    move LS_CONSU-CONSU                  to RS_EXBOM-MENGE.
    move ABAP_TRUE                       to RS_EXBOM-MENGE_X.
    move LS_CONSU-CONSU_UOM              to RS_EXBOM-MEINS.
    move ABAP_TRUE                       to RS_EXBOM-MEINS_X.

*** Component Scrap in Percent
    move ME->R_PR_MFMI->GET_KAUSF( )     to LS_KAUSF.
    move LS_KAUSF-KAUSF                  to RS_EXBOM-AUSCH.
    move ABAP_TRUE                       to RS_EXBOM-AUSCH_X.

*** Price
    if LF_PURCH eq ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT_PRICE.
      LS_PRICE = ME->R_PR_MFMI->GET_PRICE( ).
      LS_PRICP = ME->R_PR_MFMI->GET_PRICP( ).

***   Convert "Price" to Material Base Unint and keep "Price Per" stable
      call function 'MATERIAL_UNIT_CONVERSION'
        exporting
          INPUT   = LS_PRICE-PRICE
          KZMEINH = ' '
          MATNR   = RS_EXBOM-IDNRK
          MEINH   = LS_PRICP-PRICP_UOM
        importing
          OUTPUT  = LS_PRICE-PRICE
        exceptions
          others  = 9.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      RS_EXBOM-PREIS = LS_PRICE-PRICE.
      RS_EXBOM-WAERS = LS_PRICE-PRICE_CURR.
      RS_EXBOM-PEINH = LS_PRICP-PRICP.

      RS_EXBOM-PREIS_X = ABAP_TRUE.
      RS_EXBOM-WAERS_X = ABAP_TRUE.
      RS_EXBOM-PEINH_X = ABAP_TRUE.
    endif.

*** Vendor
    move ME->R_PR_MFMI->GET_LIFNR( )     to RS_EXBOM-LIFNR.
    move ABAP_TRUE                       to RS_EXBOM-LIFNR_X.

*** Set Costing Relevancy
    LF_SANKA = ME->R_PR_MFMI->GET_SANKA( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is not initial.
      move LF_SANKA                      to RS_EXBOM-SANKA.
      move ABAP_TRUE                     to RS_EXBOM-SANKA_X.
    endif.

***--------------------------------------------------------------------------------------
*** Adjust by Cost Split
    ME->ADJUST_BY_CSPLIT( changing CS_EXBOM = RS_EXBOM ).

  endmethod.
method ADJUST_BY_CSPLIT.

  data:  LF_ICSPA          type        ZVCXI_XCSP_ICSPA.
  data:  LS_DCSPL          type        ZVCXI_XCSP_S_DCSPL.

***--------------------------------------------------------------------------------------
*** Get Cost Split
  ME->R_PR_MFMI->GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                                       ES_DCSPL = LS_DCSPL ).
  check LF_ICSPA is not initial.

***--------------------------------------------------------------------------------------
*** Consumption
  CS_EXBOM-MENGE = CS_EXBOM-MENGE * ( LS_DCSPL-DCSPL / 100 ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
  try.
      move ME->R_GATE->R_CLSPR ?to ME->R_PR_MFMI.
    catch CX_SY_MOVE_CAST_ERROR.
***   Element API ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '804'.
  endtry.

endmethod.
method FILTER_CPBRG_BY_ICSPA.

  data:  LF_ICSPA     type        ZVCXI_XCSP_ICSPA.
  data:  LS_DCSPL     type        ZVCXI_XCSP_S_DCSPL.

***--------------------------------------------------------------------------------------
*** Get Cost Split
  ME->R_PR_MFMI->GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                                       ES_DCSPL = LS_DCSPL ).
  check LF_ICSPA is not initial.

***--------------------------------------------------------------------------------------
*** Do not exploded if Consumption is not Costing Relevant
  if LS_DCSPL-DCSPL le 0.
    free: CT_CPBRG.
  endif.

endmethod.
method GET_BOM_CONSU.

  data:  LF_CALCV   type        F.
  data:  LS_CONSU   type        ZVCXI_XCSP_S_CONSU.


  move ME->R_PR_MFMI->GET_CONSU( )  to LS_CONSU.

  if IS_EXQTY-EXQTY is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IF_BMENG
                                                        IF_CALCV_UOM_1 = IF_BMEIN
                                                        IF_CALCV_2     = IS_EXQTY-EXQTY
                                                        IF_CALCV_UOM_2 = IS_EXQTY-EXQTY_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_CALCV ).

    RS_CONSU-CONSU = LS_CONSU-CONSU * LF_CALCV.
  endif.
  RS_CONSU-CONSU_UOM = LS_CONSU-CONSU_UOM.

endmethod.
method GET_EXQTY.

  data:  LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  if LR_APPDATA is bound and
     LR_APPDATA->S_OPQTY-OPQTY is not initial.
    move LR_APPDATA->S_OPQTY-OPQTY     to RS_EXQTY-EXQTY.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to RS_EXQTY-EXQTY_UOM.
  endif.

endmethod.
