
class ZCL_VCXI_PXM_MBQ_BL_XCOMP definition
  public
  abstract
  create public .

public section.

  constants C_ISVCE_MS_DINK type ZVCXI_XCS_ISVCE value 'MS_DINK' ##NO_TEXT.
  constants C_ISVCE_MS_INK type ZVCXI_XCS_ISVCE value 'MS_INK' ##NO_TEXT.
  constants C_SOKEY_DMS_PRINT type ZVCXI_XCM_MBQ_SOKEY value 'PX_DMS_PRINT' ##NO_TEXT.
  constants C_SOKEY_TOOL_DCT type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_DCT' ##NO_TEXT.
  constants C_SOKEY_TOOL_EMB type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_EMB' ##NO_TEXT.
  constants C_SOKEY_TOOL_INK_L type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_INK_L' ##NO_TEXT.
  constants C_SOKEY_TOOL_INK_P type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_INK_P' ##NO_TEXT.
  constants C_SOKEY_TOOL_SET_PRINT type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_SET_PRINT' ##NO_TEXT.
  constants C_SOKEY_TOOL_SET_PRINT_OTU type ZVCXI_XCM_MBQ_SOKEY value 'PX_TOOL_SET_PRINT_OTU' ##NO_TEXT.

  methods ANALYZE
  abstract
    importing
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !ET_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !ET_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT .
  class-methods FACTORY
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_ISVCE type ZVCXI_XCS_ISVCE optional
    returning
      value(RR_BL_XCOMP) type ref to ZCL_VCXI_PXM_MBQ_BL_XCOMP
    raising
      /VCXI/CX_CKX .
  methods FILL_IDAT
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IR_CUELMNT_SOV type ref to /VCXI/CL_VKSC_CUELMNT
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_PCRSK_FG_PRICE type ZVCXI_XCM_MBQ_PCRSK value 'FG_PRICE' ##NO_TEXT.
  constants C_PCRSK_TOOL_DISC type ZVCXI_XCM_MBQ_PCRSK value 'TOOL_DISC' ##NO_TEXT.
  constants C_PCRSK_TOOL_PRICE type ZVCXI_XCM_MBQ_PCRSK value 'TOOL_PRICE' ##NO_TEXT.
  data F_POSNR type POSNR .
  data R_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC .
  data R_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT .

  methods FILL_MATDAT_MARC_BY_MRP
    importing
      !IR_EA_MRP type ref to ZCL_VCXI_XCSS_EA_MRP
    changing
      !CS_MATDAT_MARC type ZVCXI_XCM_MBQ_S_MATDAT_MARC
    raising
      /VCXI/CX_CKX .
  methods ADD_DMSLI
    importing
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY optional
    changing
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    returning
      value(RF_DLCNT) type ZVCXI_XCM_MBQ_DLCNT
    raising
      /VCXI/CX_CKX .
  methods ADD_MATLI
    importing
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_DISST type /VCXI/VKC_DISST
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_MATNR type MATNR optional
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
    returning
      value(RF_MLCNT) type ZVCXI_XCM_MBQ_MLCNT
    raising
      /VCXI/CX_CKX .
  methods ADJUST_ID
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CF_ID type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_MS_INK
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CPM
    importing
      !IR_SVCEL_CPM type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_MS_INK
    importing
      !IR_SVCEL_MS_INK type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SHIPMGR
    importing
      !IR_SVCEL_SHIPMGR type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SSTEP
    importing
      !IR_SVCEL_SSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods COPY_SVCEL
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods COPY_SVCEL_CHILDREN
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IF_CSELF type /VCXI/VKSR_REPNR
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC optional
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT optional
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods FILL_RTESPV
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT
    importing
      !IF_ACTID type ZVCXI_XCM_MBQ_ACTID
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST optional
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_BOM
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CKC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CKM
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CKR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CMIR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CNF
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CSPL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_DMS
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_DMSEXT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_HUPI
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_LLC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_MAT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_MCL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_MMEXT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_PCR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_PRU
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_PURIR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_PURSL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_PVER
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_QMAT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_QPLN
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_RTE
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_BL_ASCOMP
    returning
      value(RR_BL_ASCOMP) type ref to ZCL_VCXI_P3M_MBQ_BL_ASCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_CRCOMP
    returning
      value(RR_BL_CRCOMP) type ref to ZCL_VCXI_P1M_MBQ_BL_CRCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_FCCOMP
    returning
      value(RR_BL_FCCOMP) type ref to ZCL_VCXI_P2M_MBQ_BL_FCCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PRCOMP
    returning
      value(RR_BL_PRCOMP) type ref to ZCL_VCXI_P4M_MBQ_BL_PRCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_RLCOMP
    returning
      value(RR_BL_RLCOMP) type ref to ZCL_VCXI_P5M_MBQ_BL_RLCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_XCOMP
    importing
      !IF_ISVCE type ZVCXI_XCS_ISVCE
    returning
      value(RR_BL_XCOMP) type ref to ZCL_VCXI_PXM_MBQ_BL_XCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_CKKEY
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
    returning
      value(RT_CKKEY) type ZVCXI_XCM_MBQ_TT_CKKEY
    raising
      /VCXI/CX_CKX .
  methods GET_DMSEXT_PD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_DMSEXT_PD) type ZVCXI_PXM_MBQ_S_DMSEXT_PD
    raising
      /VCXI/CX_CKX .
  methods GET_DMSEXT_PDINK
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RT_DMSEXT_PDINK) type ZVCXI_PXM_MBQ_TT_DMSEXT_PDINK
    raising
      /VCXI/CX_CKX .
  methods GET_DOC_KEY_BY_SOURCE
    importing
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_DOC_KEY) type ZVCXI_XCS_S_DOC_KEY
    raising
      /VCXI/CX_CKX .
  class-methods GET_EKORG
    importing
      !IF_WERKS type WERKS_D
      !IF_LIFNR type LIFNR
    returning
      value(RF_EKORG) type EKORG
    raising
      /VCXI/CX_CKX .
  methods GET_EXQTY
    returning
      value(RS_EXQTY) type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
  methods GET_FMTSA
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ET_SVCEL type /VCXI/CKX_TT_OBJECT
    returning
      value(RF_FMTSA) type ZVCXI_XCSS_FMTSA
    raising
      /VCXI/CX_CKX .
  methods GET_HUPI
    importing
      !IR_SVCEL_SHIPMGR type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CF_SKIP type ABAP_BOOL
    returning
      value(RT_HUPI) type ZVCXI_XCM_MBQ_TT_HUPI
    raising
      /VCXI/CX_CKX .
  methods GET_INP_BY_XCONO
    importing
      !IR_SVCEL_XCONO type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_KMPMG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !EF_KMPME type KMPME
    returning
      value(RF_KMPMG) type KMPMG
    raising
      /VCXI/CX_CKX .
  methods GET_LOSGR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT
    returning
      value(RF_LOSGR) type CK_LOSGR
    raising
      /VCXI/CX_CKX .
  methods GET_LOVC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_VALUE) type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_LOVC_TOOL_DCT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_VALUE) type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_LOVC_TOOL_INK
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_VALUE) type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MAKT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MAKT) type ZVCXI_XCM_MBQ_TT_MATDAT_MAKT
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARA
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RS_MATDAT_MARA) type ZVCXI_XCM_MBQ_S_MATDAT_MARA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MARC) type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MARD) type ZVCXI_XCM_MBQ_TT_MATDAT_MARD
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARM
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MARM) type ZVCXI_XCM_MBQ_TT_MATDAT_MARM
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MBEW
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MBEW) type ZVCXI_XCM_MBQ_TT_MATDAT_MBEW
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MDMA
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MDMA) type ZVCXI_XCM_MBQ_TT_MATDAT_MDMA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MPGD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MPGD) type ZVCXI_XCM_MBQ_TT_MATDAT_MPGD
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MFHM
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MFHM) type ZVCXI_XCM_MBQ_TT_MATDAT_MFHM
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MLGN
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MLGN) type ZVCXI_XCM_MBQ_TT_MATDAT_MLGN
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MLGT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MLGN type ZVCXI_XCM_MBQ_TT_MATDAT_MLGN
    returning
      value(RT_MATDAT_MLGT) type ZVCXI_XCM_MBQ_TT_MATDAT_MLGT
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MVKE
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MVKE) type ZVCXI_XCM_MBQ_TT_MATDAT_MVKE
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_BY_SOURCE
    importing
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_PCR_FG
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_PCR) type ZVCXI_XCM_MBQ_TT_PCR
    raising
      /VCXI/CX_CKX .
  methods GET_PCR_TOOL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_PCR) type ZVCXI_XCM_MBQ_TT_PCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRU_TOOL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    changing
      !CF_SKIP type ABAP_BOOL
    returning
      value(RS_ACTDAT_PRU) type ZVCXI_XCM_MBQ_S_ACTDAT_PRU
    raising
      /VCXI/CX_CKX .
  methods GET_PURIR_TOOL
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    changing
      !CF_SKIP type ABAP_BOOL
    returning
      value(RS_ACTDAT_PURIR) type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR
    raising
      /VCXI/CX_CKX .
  methods GET_PURIR_XPROC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    changing
      !CF_SKIP type ABAP_BOOL
    returning
      value(RS_ACTDAT_PURIR) type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR
    raising
      /VCXI/CX_CKX .
  methods GET_REWRK
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RF_REWRK) type REWRK
    raising
      /VCXI/CX_CKX .
  methods GET_SOKEY_OUT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_KZKUP type KZKUP
    returning
      value(RF_SOKEY) type ZVCXI_XCM_MBQ_SOKEY
    raising
      /VCXI/CX_CKX .
  methods GET_SVCAD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_SVCAD) type ZVCXI_XCI_S_SVCAD
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_CONV
    importing
      !IR_SVCEL_SPEC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_CONV) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_INPUT
    importing
      !IR_SVCEL_SPEC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_INPUT) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_OUTPUT
    importing
      !IR_SVCEL_SPEC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_OUTPUT) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_RTESPV
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ER_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV
    returning
      value(RR_SVCEL_RTESPV) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_SHIPMGR
    importing
      !IR_SVCEL_PARENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ER_EA_SHIPMGR type ref to ZCL_VCXI_XCSU_EA_SHIPMGR
    returning
      value(RR_SVCEL_SHIPMGR) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_SPEC
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ER_EA_SPEC type ref to ZCL_VCXI_PXSS_EA_SPEC
      !ER_SVCEL_INPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !ER_SVCEL_CONV type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !ER_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_SPEC) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_TINFO
    importing
      !IR_SVCEL_PARENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ER_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO
    returning
      value(RR_SVCEL_TINFO) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_XCONO
    returning
      value(RR_SVCEL_XCONO) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods HAS_ARBPL
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RF_ARBPL) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXM_MBQ_BL_XCOMP definition
class ZCL_VCXI_PXM_MBQ_BL_XCOMP implementation.
  method ADD_DMSLI.

    data: LF_SKIP type ABAP_BOOL.
    field-symbols: <S_DMSLI>  type ZVCXI_XCM_MBQ_S_DMSLI,
                   <S_ACTCON> type ZVCXI_XCM_MBQ_S_ACTCON.


*** Add DMS Document
    RF_DLCNT = LINES( CT_DMSLI ) + 1.
    insert value #( DLCNT        = RF_DLCNT
                    SOKEY        = IF_SOKEY
                    LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( )
                    S_DOC_KEY    = IS_DOC_KEY
                  ) into table CT_DMSLI assigning <S_DMSLI>.

*** Load Activities based on Source Key
    <S_DMSLI>-T_ACTCON = ZCL_VCXI_XCM_MBQ_CUST=>READ_ACTCON( IF_SOKEY = <S_DMSLI>-SOKEY ).

    loop at <S_DMSLI>-T_ACTCON assigning <S_ACTCON>.
***   Load Activity Control Data
      <S_ACTCON>-R_ACTDAT = ME->GET_ACTDAT( exporting IF_ACTID        = <S_ACTCON>-ACTID
                                                      IF_SOKEY        = <S_DMSLI>-SOKEY
                                                      IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                      IF_WERKS        = IF_WERKS
                                            importing EF_SKIP         = LF_SKIP ).

***   Remove Activity if it should be skipped
      if LF_SKIP ne ABAP_FALSE.
        delete <S_DMSLI>-T_ACTCON.
      endif.
    endloop.

  endmethod.
  method ADD_MATLI.

    data: LF_SKIP type ABAP_BOOL.
    field-symbols: <S_MATLI>  type ZVCXI_XCM_MBQ_S_MATLI,
                   <S_ACTCON> type ZVCXI_XCM_MBQ_S_ACTCON.


*** Add Material
    RF_MLCNT = LINES( CT_MATLI ) + 1.
    insert value #( MLCNT        = RF_MLCNT
                    SOKEY        = IF_SOKEY
                    DISST        = IF_DISST
                    MATNR        = IF_MATNR
                    LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( )
                  ) into table CT_MATLI assigning <S_MATLI>.

*** Get Component Quantity
    <S_MATLI>-KMPMG = ME->GET_KMPMG( exporting IR_SVCEL = IR_SVCEL_SOURCE
                                     importing EF_KMPME = <S_MATLI>-KMPME ).

*** Load Activities based on Source Key
    <S_MATLI>-T_ACTCON = ZCL_VCXI_XCM_MBQ_CUST=>READ_ACTCON( IF_SOKEY = <S_MATLI>-SOKEY ).

    loop at <S_MATLI>-T_ACTCON assigning <S_ACTCON>.
***   Load Activity Control Data
      <S_ACTCON>-R_ACTDAT = ME->GET_ACTDAT( exporting IF_ACTID        = <S_ACTCON>-ACTID
                                                      IF_SOKEY        = <S_MATLI>-SOKEY
                                                      IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                      IF_WERKS        = IF_WERKS
                                                      IF_DISST        = IF_DISST
                                            importing EF_SKIP         = LF_SKIP ).

***   Remove Activity if it should be skipped
      if LF_SKIP ne ABAP_FALSE.
        delete <S_MATLI>-T_ACTCON.
      endif.
    endloop.

  endmethod.
  method ADJUST_ID.

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Corrugated Connection In is replaced by a Corrugated Procurement
      when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_CRCONI.
        CF_ID = ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_MS_CRPROC.

***   Folding Carton Connection In is replaced by a Folding Carton Procurement
      when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_FCCONI.
        CF_ID = ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_MS_FCPROC.

***   Assembly Connection In is replaced by a Assembly Procurement
      when ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_ASCONI.
        CF_ID = ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_MS_ASPROC.

***   Roll Connection In is replaced by a Roll Procurement
      when ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_RLCONI.
        CF_ID = ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_MS_RLPROC.
    endcase.

  endmethod.
  method ADJUST_SVCEL.

    case CS_SVCEL-ISELF.
      when C_ISVCE_MS_INK.
***     Adjust Ink
        ME->ADJUST_SVCEL_MS_INK( exporting IR_SVCEL         = IR_SVCEL
                                           IR_IDAT_SVC      = IR_IDAT_SVC
                                           IT_MATLI         = IT_MATLI
                                           IT_DMSLI         = IT_DMSLI
                                 importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                 changing  CS_SVCEL         = CS_SVCEL ).



***--------------------------------------------------------------------------------------
***   Delegations
***--------------------------------------------------------------------------------------
      when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_MS_CRPROC.
***     Delegate to Business Logic of Corrugated Component to adjust Corrugated Procurement
        ME->GET_BL_CRCOMP( )->ADJUST_SVCEL_MS_CRPROC( exporting IR_SVCEL         = IR_SVCEL
                                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                                IT_MATLI         = IT_MATLI
                                                                IT_DMSLI         = IT_DMSLI
                                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                      changing  CS_SVCEL         = CS_SVCEL ).


      when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_MS_FCPROC.
***     Delegate to Business Logic of Folding Carton Component to adjust Folding Carton Procurement
        ME->GET_BL_FCCOMP( )->ADJUST_SVCEL_MS_FCPROC( exporting IR_SVCEL         = IR_SVCEL
                                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                                IT_MATLI         = IT_MATLI
                                                                IT_DMSLI         = IT_DMSLI
                                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                      changing  CS_SVCEL         = CS_SVCEL ).

      when ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_MS_ASPROC.
***     Delegate to Business Logic of Assembly Component to adjust Assembly Procurement
        ME->GET_BL_ASCOMP( )->ADJUST_SVCEL_MS_ASPROC( exporting IR_SVCEL         = IR_SVCEL
                                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                                IT_MATLI         = IT_MATLI
                                                                IT_DMSLI         = IT_DMSLI
                                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                      changing  CS_SVCEL         = CS_SVCEL ).
      when ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_MS_RLPROC.
***     Delegate to Business Logic of Roll Component to adjust Roll Procurement
        ME->GET_BL_RLCOMP( )->ADJUST_SVCEL_MS_RLPROC( exporting IR_SVCEL         = IR_SVCEL
                                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                                IT_MATLI         = IT_MATLI
                                                                IT_DMSLI         = IT_DMSLI
                                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                      changing  CS_SVCEL         = CS_SVCEL ).
    endcase.

  endmethod.
  method ADJUST_SVCEL_MS_INK.

    data: LF_MATNR type MATNR.
    data: LR_EA_MS_INK type ref to ZCL_VCXI_PXSS_EA_MS_INK.


*** Check if Ink Tool has not been specified
    check IR_SVCEL is bound.
    LR_EA_MS_INK ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_MS_INK->GET_INKTN( ) is initial.

*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).
    check LF_MATNR is not initial.

*** Fill Tool Material
    delete CS_SVCEL-T_SVCPA where PARID = ZCL_VCXI_PXSS_PR_MS_INK=>C_PARID_INKTN.
    append value #( PARID = ZCL_VCXI_PXSS_PR_MS_INK=>C_PARID_INKTN
                    ATWRT = LF_MATNR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IEVNT_O_INKTN_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ANALYZE_CPM.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Configured Packaging Material
    loop at IR_SVCEL_CPM->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Configured Packaging Material
        when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_CRCPMCNF.
***       Delegate to Business Logic of Corrugated Component to analyze Configured Packaging Material
          ME->GET_BL_CRCOMP( )->ANALYZE_CRCPMCNF( exporting IR_SVCEL_CRCPMCNF = LR_SVCEL
                                                            IF_DISST          = IF_DISST
                                                  changing  CT_MATLI          = CT_MATLI
                                                            CT_DMSLI          = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP.
  endmethod.
  method ANALYZE_MS_INK.

    data: LR_EA_MS_INK type ref to ZCL_VCXI_PXSS_EA_MS_INK.


*** Check if Ink Tool has not been specified
    check IR_SVCEL_MS_INK is bound.
    LR_EA_MS_INK ?= IR_SVCEL_MS_INK->GET_CLSEA( ).
    check LR_EA_MS_INK->GET_INKTN( ) is initial.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_MS_INK->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

*** No Ink Tools for One-Time Usage
    check LF_FOTUT ne ABAP_TRUE.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_INK_P
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_MS_INK
                             IF_WERKS        = LR_EA_MS_INK->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_SHIPMGR.

    data: LT_SUB type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Collect all Sub Elements
    LT_SUB = IR_SVCEL_SHIPMGR->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    loop at LT_SUB into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      append lines of LR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) to LT_SUB.
    endloop.


***--------------------------------------------------------------------------------------
*** Analye Sub Elements
    loop at LT_SUB into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case type of LR_SVCEL->GET_CLSEA( ).
        when type ZCL_VCXI_XCSU_EA_CPM.
          ME->ANALYZE_CPM( exporting IR_SVCEL_CPM = LR_SVCEL
                                     IF_DISST     = IF_DISST
                           changing  CT_MATLI     = CT_MATLI
                                     CT_DMSLI     = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_SSTEP.
  endmethod.
  method CONSTRUCTOR.

    ME->R_BOB_SDOC    = IR_BOB_SDOC.
    ME->F_POSNR       = IF_POSNR.
    ME->R_SVCEL_XCOMP = IR_SVCEL_XCOMP.

  endmethod.
  method COPY_SVCEL.

    data: LF_PARID         type /VCXI/VKS_PARID,
          LF_SKIP_CHILDREN type ABAP_BOOL.
    data: LS_SVCEL          type ZVCXI_XCI_S_SVCEL,
          LS_LEOKY          type /VCXI/VKSR_S_LEOKY,
          LS_REGELMNT_PARAM type /VCXI/VKSC_S_REGELMNT_PARAM.
    data: LT_PARAM type /VCXI/VKSR_TT_PARAM.
    data: LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV.


    check IR_SVCEL is bound.

***--------------------------------------------------------------------------------------
*** Special Handlings for Routing Supervisor
    if IR_SVCEL->GET_CLSEA( ) is instance of ZCL_VCXI_XCSR_EA_RTESPV.
      ME->FILL_RTESPV( IR_SVCEL    = IR_SVCEL
                       IR_IDAT_SVC = IR_IDAT_SVC ).
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Get Element ID
    LS_SVCEL-ISELF = cond #( when IR_CUELMNT is bound then IR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( )
                                                      else IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).
    move IF_IPARE to LS_SVCEL-IPARE.
    move IF_CPARE to LS_SVCEL-CPARE.

*** Add Element and receive own Counter
    LS_SVCEL-CSELF = IR_IDAT_SVC->ADD_SVCEL( IF_IPARE = LS_SVCEL-IPARE
                                             IF_CPARE = LS_SVCEL-CPARE
                                             IF_ISELF = LS_SVCEL-ISELF ).

*** Copy Position
    move IR_SVCEL->GET_POSID( )  to LS_SVCEL-POSID.

*** Copy Leading Object Key
    LS_SVCEL-S_LEOKY = IR_SVCEL->GET_LEOKY( ).

    if IR_CUELMNT             is bound and
       IR_CUELMNT->R_REGELMNT is bound.
***   Copy matching supervised Parameter
      LT_PARAM = IR_SVCEL->GET_PARAM_ALL( ).
      loop at IR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_PARAM~T_REGELMNT_PARAM
           into LS_REGELMNT_PARAM where PARSP eq ABAP_TRUE.

***     Get Parameter Value
        move LS_REGELMNT_PARAM-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_PARID.
        check LINE_EXISTS( LT_PARAM[ PARID = LF_PARID ] ).

***     Add Parameter
        append corresponding #( LT_PARAM[ PARID = LF_PARID ] ) to LS_SVCEL-T_SVCPA.
      endloop.
    else.
***   Copy supervised Parameter
      LS_SVCEL-T_SVCPA = corresponding #( IR_SVCEL->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ) ).
    endif.

*** Adjust SmartVC Element Values in Integration Data
    ME->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                IR_IDAT_SVC      = IR_IDAT_SVC
                                IT_MATLI         = IT_MATLI
                                IT_DMSLI         = IT_DMSLI
                      importing EF_SKIP_CHILDREN = LF_SKIP_CHILDREN
                      changing  CS_SVCEL         = LS_SVCEL ).

*** Set Information to Integration Data Service
    IR_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).


***--------------------------------------------------------------------------------------
    check LF_SKIP_CHILDREN ne ABAP_TRUE.

*** Fill Integration Data of Children
    ME->COPY_SVCEL_CHILDREN( IF_ISELF    = LS_SVCEL-ISELF
                             IF_CSELF    = LS_SVCEL-CSELF
                             IR_SVC      = IR_SVC
                             IR_SVCEL    = IR_SVCEL
                             IR_CUELMNT  = IR_CUELMNT
                             IR_IDAT_SVC = IR_IDAT_SVC
                             IT_MATLI    = IT_MATLI
                             IT_DMSLI    = IT_DMSLI ).

  endmethod.
  method COPY_SVCEL_CHILDREN.

    data: LF_ID type /VCXI/CKX_ID.
    data: LT_SVCEL   type /VCXI/CKX_TT_OBJECT,
          LT_CUELMNT type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT,
          LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT.


***--------------------------------------------------------------------------------------
*** Fill Integration Data of Children
    LT_SVCEL = IR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    IR_SVCEL->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_SVCEL ).

    if IR_CUELMNT is bound.
      LT_CUELMNT = IR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    endif.

    loop at LT_SVCEL into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      check LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

***   Adjust ID for Elements which get replaced
      LF_ID = LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      ME->ADJUST_ID( exporting IR_SVCEL = LR_SVCEL
                     changing  CF_ID    = LF_ID ).
      check LF_ID is not initial.

***   Find matching Customizing Element
      if IR_CUELMNT is bound.
        loop at LT_CUELMNT into LR_OBJECT.
          move LR_OBJECT ?to LR_CUELMNT.
          if LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq LF_ID.
            exit.
          else.
            clear LR_CUELMNT.
          endif.
        endloop.
        check LR_CUELMNT is bound.
      endif.

***   Standard Copy
      ME->COPY_SVCEL( IF_IPARE    = IF_ISELF
                      IF_CPARE    = IF_CSELF
                      IR_SVC      = IR_SVC
                      IR_SVCEL    = LR_SVCEL
                      IR_CUELMNT  = LR_CUELMNT
                      IR_IDAT_SVC = IR_IDAT_SVC
                      IT_MATLI    = IT_MATLI
                      IT_DMSLI    = IT_DMSLI ).
    endloop.

  endmethod.
  method FACTORY.

    data: LF_ISVCE type ZVCXI_XCS_ISVCE.

*** Identify ID of Componennt
    case cond #( when IF_ISVCE is supplied then IF_ISVCE
                                           else IR_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).

***   Corrugated Component
      when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_COMP_P1.
        RR_BL_XCOMP = new ZCL_VCXI_P1M_MBQ_BL_CRCOMP( IR_BOB_SDOC    = IR_BOB_SDOC
                                                      IF_POSNR       = IF_POSNR
                                                      IR_SVCEL_XCOMP = IR_SVCEL_XCOMP ).

***   Folding Carton Component
      when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_COMP_P2.
        RR_BL_XCOMP = new ZCL_VCXI_P2M_MBQ_BL_FCCOMP( IR_BOB_SDOC    = IR_BOB_SDOC
                                                      IF_POSNR       = IF_POSNR
                                                      IR_SVCEL_XCOMP = IR_SVCEL_XCOMP ).

***   Assembly Component
      when ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_COMP_P3.
        RR_BL_XCOMP = new ZCL_VCXI_P3M_MBQ_BL_ASCOMP( IR_BOB_SDOC    = IR_BOB_SDOC
                                                      IF_POSNR       = IF_POSNR
                                                      IR_SVCEL_XCOMP = IR_SVCEL_XCOMP ).

***   Procurement Component
      when ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_ISVCE_COMP_P4.
        RR_BL_XCOMP = new ZCL_VCXI_P4M_MBQ_BL_PRCOMP( IR_BOB_SDOC    = IR_BOB_SDOC
                                                      IF_POSNR       = IF_POSNR
                                                      IR_SVCEL_XCOMP = IR_SVCEL_XCOMP ).

***   Roll Component
      when ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_COMP_P5.
        RR_BL_XCOMP = new ZCL_VCXI_P5M_MBQ_BL_RLCOMP( IR_BOB_SDOC    = IR_BOB_SDOC
                                                      IF_POSNR       = IF_POSNR
                                                      IR_SVCEL_XCOMP = IR_SVCEL_XCOMP ).

      when others.
        /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( 'Component not supported' ).
    endcase.

  endmethod.
  method FILL_IDAT.

*** Copy X-Component
    ME->COPY_SVCEL( IF_IPARE    = IF_IPARE
                    IF_CPARE    = IF_CPARE
                    IR_SVC      = IR_SVC
                    IR_SVCEL    = ME->R_SVCEL_XCOMP
                    IR_CUELMNT  = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL         = IR_CUELMNT_SOV->R_CUPRFL
                                                                       IR_CUELMNT_PARENT = IR_CUELMNT_SOV
                                                                       IF_ID             = ME->R_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT~GET_ID( ) )
                    IR_IDAT_SVC = IR_IDAT_SVC
                    IT_MATLI    = IT_MATLI
                    IT_DMSLI    = IT_DMSLI ).

  endmethod.
  method FILL_MATDAT_MARC_BY_MRP.

    check IR_EA_MRP is bound.

***--------------------------------------------------------------------------------------
*** MRP Profile
    CS_MATDAT_MARC-MRPPROFILE = IR_EA_MRP->GET_DISPR( ).

***--------------------------------------------------------------------------------------
*** MRP Type
    CS_MATDAT_MARC-MRP_TYPE = IR_EA_MRP->GET_DISMM( ).

*** MRP Controller
    CS_MATDAT_MARC-MRP_CTRLER = IR_EA_MRP->GET_DISPO( ).

***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    CS_MATDAT_MARC-LOTSIZEKEY = IR_EA_MRP->GET_DISLS( ).

*** Minimum/Maximum/Fixed Lot Size
    CS_MATDAT_MARC-MINLOTSIZE = IR_EA_MRP->GET_BSTMI( )-BSTMI.
    CS_MATDAT_MARC-MAXLOTSIZE = IR_EA_MRP->GET_BSTMA( )-BSTMA.
    CS_MATDAT_MARC-FIXED_LOT  = IR_EA_MRP->GET_BSTFE( )-BSTFE.

*** Safety Stock
    CS_MATDAT_MARC-SAFETY_STK = IR_EA_MRP->GET_EISBE( )-EISBE.

  endmethod.
  method FILL_RTESPV.

    data: LF_GUID_RTESEL type /VCXI/CKX_GUID.
    data: LT_BL_PRTE     type ZVCXI_XCSR_TT_BL_PRTE,
          LT_XML_BL_PRTE type ZVCXI_XCSR_TT_XML_BL_PRTE.
    data: LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV,
          LR_RTESEL    type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_BL_PRTE   type ref to ZCL_VCXI_XCSR_BL_PRTE.
    field-symbols: <S_XML_BL_PRTE>  type ZVCXI_XCSR_S_XML_BL_PRTE.


    check IR_SVCEL is bound.

***--------------------------------------------------------------------------------------
*** Get Element API for Routing Supervisor
    try.
        LR_EA_RTESPV ?= IR_SVCEL->GET_CLSEA( ).
        check LR_EA_RTESPV is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Get User Routes
    append lines of LR_EA_RTESPV->GET_RTEALT( ) to LT_BL_PRTE.
    append lines of LR_EA_RTESPV->GET_RTEINV( ) to LT_BL_PRTE.
    delete LT_BL_PRTE where TABLE_LINE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.

*** Get Selected Route
    LR_RTESEL = LR_EA_RTESPV->GET_RTESEL( ).

*** Serialize all Routes and assign a GUID
    loop at LT_BL_PRTE into LR_BL_PRTE.
      try.
          append value #( GUID_BL_PRTE = CL_SYSTEM_UUID=>IF_SYSTEM_UUID_STATIC~CREATE_UUID_C22( )
                          XML          = LR_BL_PRTE->SERIALIZE( )
                        ) to LT_XML_BL_PRTE assigning <S_XML_BL_PRTE>.
        catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_UUID_ERROR ).
      endtry.

***   Keep GUID of Selected Route
      if LR_EA_RTESPV->GET_RTEOP( ) ne ZCL_VCXI_XCSR_PR_RTESPV=>C_RTEOP_AUTO and
         LR_BL_PRTE eq LR_RTESEL.
        move <S_XML_BL_PRTE>-GUID_BL_PRTE to LF_GUID_RTESEL.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Routing Definition
    IR_IDAT_SVC->SET_SVCRT( IF_IEALI       = 'R_RTESPV'
                            IF_RTERD       = LR_EA_RTESPV->GET_RTERD( )
                            IF_RTEOP       = LR_EA_RTESPV->GET_RTEOP( )
                            IF_RELCO       = LR_EA_RTESPV->GET_RELCO( )
                            IF_GUID_RTESEL = LF_GUID_RTESEL
                            IT_XML_BL_PRTE = LT_XML_BL_PRTE ).

  endmethod.
  method GET_ACTDAT.

    clear EF_SKIP.

    case IF_ACTID.
***--------------------------------------------------------------------------------------
***   Loop to create materials
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MAT.    " Material Creation
        RR_ACTDAT = ME->GET_ACTDAT_MAT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_BOM.    " Assign to Super BOM
        RR_ACTDAT = ME->GET_ACTDAT_BOM( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_RTE.    " Assign to Super Route
        RR_ACTDAT = ME->GET_ACTDAT_RTE( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PVER.  " Create Production Versions
        RR_ACTDAT = ME->GET_ACTDAT_PVER( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MCL.    " Create Material Classification
        RR_ACTDAT = ME->GET_ACTDAT_MCL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_QMAT.    " Create Inspection Type
        RR_ACTDAT = ME->GET_ACTDAT_QMAT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_QPLN.    " Create Inspection Plan
        RR_ACTDAT = ME->GET_ACTDAT_QPLN( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

***--------------------------------------------------------------------------------------
***   Loop to create DMS Document
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_DMS.       " DMS Document Creation
        RR_ACTDAT = ME->GET_ACTDAT_DMS( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_DMSEXT.    " DMS Data Extension
        RR_ACTDAT = ME->GET_ACTDAT_DMSEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                     IF_SOKEY        = IF_SOKEY
                                                     IF_WERKS        = IF_WERKS
                                           importing EF_SKIP         = EF_SKIP ).

***--------------------------------------------------------------------------------------
***   Loop to update Materials (bottom up)
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MMEXT.  " MM Extension
        RR_ACTDAT = ME->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                    IF_SOKEY        = IF_SOKEY
                                                    IF_WERKS        = IF_WERKS
                                                    IF_DISST        = IF_DISST
                                          importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CNF.    " Create Configuration
        RR_ACTDAT = ME->GET_ACTDAT_CNF( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_LLC.    " Update Lower-Level Code
        RR_ACTDAT = ME->GET_ACTDAT_LLC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

*      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CSB.   " Create Sales BOM
***      Handled by Step itself, as the Sales BOM is not based on a single Component

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CSPL.   " Create Cost Apportionment to Co-Products
        RR_ACTDAT = ME->GET_ACTDAT_CSPL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PURIR.    " Create Purchasing Info Record
        RR_ACTDAT = ME->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                    IF_SOKEY        = IF_SOKEY
                                                    IF_WERKS        = IF_WERKS
                                                    IF_DISST        = IF_DISST
                                          importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PURSL.    " Generate Purchasing Source List
        RR_ACTDAT = ME->GET_ACTDAT_PURSL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                    IF_SOKEY        = IF_SOKEY
                                                    IF_WERKS        = IF_WERKS
                                                    IF_DISST        = IF_DISST
                                          importing EF_SKIP         = EF_SKIP ).


      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PRU.    " Price Change
        RR_ACTDAT = ME->GET_ACTDAT_PRU( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_HUPI.    " Packing Instruction
        RR_ACTDAT = ME->GET_ACTDAT_HUPI( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).


***--------------------------------------------------------------------------------------
***   Loop to update Materials (top down)
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PCR.    " Create Pricing Condition Record
        RR_ACTDAT = ME->GET_ACTDAT_PCR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CKC.    " Create Material Cost Estimate
        RR_ACTDAT = ME->GET_ACTDAT_CKC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CKM.    " Mark Standard Price
        RR_ACTDAT = ME->GET_ACTDAT_CKM( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CKR.    " Release Standard Price
        RR_ACTDAT = ME->GET_ACTDAT_CKR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CMIR.    " Create Customer-Materials Info Record
        RR_ACTDAT = ME->GET_ACTDAT_CMIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

    endcase.

  endmethod.
  method GET_ACTDAT_BOM.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_BOM> type ZVCXI_XCM_MBQ_S_ACTDAT_BOM.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_BOM.
    assign RR_ACTDAT->* to <S_ACTDAT_BOM>.

*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_BOM>-CMATN = conv MATNR( LR_BOB_MAT->S_PLANTDATA-PS_CONF_MAT ).
    <S_ACTDAT_BOM>-WERKS = IF_WERKS.
    <S_ACTDAT_BOM>-STLAN = '3'.

  endmethod.
  method GET_ACTDAT_CKC.

    field-symbols: <S_ACTDAT_CKC> type ZVCXI_XCM_MBQ_S_ACTDAT_CKC.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CKC.
    assign RR_ACTDAT->* to <S_ACTDAT_CKC>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_CKC>-T_CKKEY = ME->GET_CKKEY( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                            IF_WERKS        = IF_WERKS ).

  endmethod.
  method GET_ACTDAT_CKM.

    field-symbols: <S_ACTDAT_CKM> type ZVCXI_XCM_MBQ_S_ACTDAT_CKM.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CKM.
    assign RR_ACTDAT->* to <S_ACTDAT_CKM>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_CKM>-T_CKKEY = ME->GET_CKKEY( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                            IF_WERKS        = IF_WERKS ).

  endmethod.
  method GET_ACTDAT_CKR.

    field-symbols: <S_ACTDAT_CKR> type ZVCXI_XCM_MBQ_S_ACTDAT_CKR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CKR.
    assign RR_ACTDAT->* to <S_ACTDAT_CKR>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_CKR>-T_CKKEY = ME->GET_CKKEY( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                            IF_WERKS        = IF_WERKS ).

  endmethod.
  method GET_ACTDAT_CMIR.

    data: LR_EA_FG type ref to ZCL_VCXI_PXSS_EA_FG.
    field-symbols: <S_ACTDAT_CMIR> type ZVCXI_XCM_MBQ_S_ACTDAT_CMIR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CMIR.
    assign RR_ACTDAT->* to <S_ACTDAT_CMIR>.

***--------------------------------------------------------------------------------------
*** Define Control Data

*** Get Partner
    <S_ACTDAT_CMIR>-KUNNR = value #( ME->R_BOB_SDOC->T_VBPA[ POSNR = ME->F_POSNR
                                                             PARVW = 'AG' ]-KUNNR optional ).
    if <S_ACTDAT_CMIR>-KUNNR is initial.
      <S_ACTDAT_CMIR>-KUNNR = value #( ME->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                               PARVW = 'AG' ]-KUNNR optional ).
    endif.

*** Organizational Data
    <S_ACTDAT_CMIR>-VKORG = ME->R_BOB_SDOC->S_VBAK-VKORG.
    <S_ACTDAT_CMIR>-VTWEG = ME->R_BOB_SDOC->S_VBAK-VTWEG.
    <S_ACTDAT_CMIR>-SPART = ME->R_BOB_SDOC->T_VBAP[ POSNR = ME->F_POSNR ]-SPART.


*** Get Element API Reference
    try.
        LR_EA_FG ?= IR_SVCEL_SOURCE->GET_CLSEA( ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
    endtry.
    check LR_EA_FG is bound.

*** Get Customer-Material Number
    <S_ACTDAT_CMIR>-KDMAT = LR_EA_FG->GET_KDMAT( ).
    <S_ACTDAT_CMIR>-KDPTX = LR_EA_FG->GET_KDPTX( ).

    if <S_ACTDAT_CMIR>-KDMAT is initial and
       <S_ACTDAT_CMIR>-KDPTX is initial.
      EF_SKIP = ABAP_TRUE.
      return.
    endif.

*UNTTO
*UEBTO

  endmethod.
  method GET_ACTDAT_CNF.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_CNF> type ZVCXI_XCM_MBQ_S_ACTDAT_CNF.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CNF.
    assign RR_ACTDAT->* to <S_ACTDAT_CNF>.

*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

    if LR_BOB_MAT->F_CUOBJ is initial.
***   Reference material &1 in plant &2 has no configuration.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                            IF_MSGTY = 'E'
                                            IF_MSGNO = '104'
                                            IF_MSGV1 = LR_BOB_MAT->GET_MATNR( )
                                            IF_MSGV2 = LR_BOB_MAT->GET_WERKS( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_CNF>-WERKS       = IF_WERKS.
    <S_ACTDAT_CNF>-S_CMPRK     = /VCXI/CL_VKC_SERVICE=>GET_CMPRK_BY_CUOBJ( IF_CUOBJ = LR_BOB_MAT->F_CUOBJ ).
    <S_ACTDAT_CNF>-LEVEL_XCOMP = ME->R_SVCEL_XCOMP->GET_LEVEL( ).
    <S_ACTDAT_CNF>-S_SVCAD     = ME->GET_SVCAD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    <S_ACTDAT_CNF>-T_VALUE     = ME->GET_LOVC( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                               IF_SOKEY        = IF_SOKEY
                                               IF_WERKS        = IF_WERKS ).

  endmethod.
  method GET_ACTDAT_CSPL.

    data: LS_DIKEY type ZVCXI_P0SS_S_DIKEY.
    data: LT_CHILDREN type /VCXI/CKX_TT_OBJECT.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_ACTDAT_CSPL> type ZVCXI_XCM_MBQ_S_ACTDAT_CSPL.


***--------------------------------------------------------------------------------------
*** Get Siblings (including self)
    LT_CHILDREN = cast /VCXI/IF_CKX_OBJECT_H( IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )->GET_CHILDREN( ).

*** Cost Split only if more than one Output
    if LINES( LT_CHILDREN ) le 1.
      EF_SKIP = ABAP_TRUE.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CSPL.
    assign RR_ACTDAT->* to <S_ACTDAT_CSPL>.

***--------------------------------------------------------------------------------------
*** Define Control Data (Customizing Transaction OKEU)
    <S_ACTDAT_CSPL>-WERKS = IF_WERKS.
    append value #( CSPLIT = '1'
                    SCTYP  = 'U'
                    SCNAM  = 'YA'
                    KTEXT  = 'Normal Split'
                  ) to <S_ACTDAT_CSPL>-T_MATDAT_MAKV.
    append value #( CSPLIT = '1'
                    SCZUO  = 'ALL'
                    CRULE  = '2'
                  ) to <S_ACTDAT_CSPL>-T_MATDAT_MAKG.

*** Get Apportionments for Material and all Co-Products
    loop at LT_CHILDREN into LR_OBJECT.
      case type of cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_CLSEA( ).
***     Finished Good
        when type ZCL_VCXI_PXSS_EA_XFG into data(LR_EA_XFG).
          LS_DIKEY = LR_EA_XFG->GET_DIKEY( ).
***     Connection Out (SFG)
        when type ZCL_VCXI_PXSS_EA_XCONO into data(LR_EA_XCONO).
          LS_DIKEY = LR_EA_XCONO->GET_DIKEY( ).
        when others.
          continue.
      endcase.

      append value #( CSPLIT       = '1'
                      SCZUO        = 'ALL'
                      KUPPL        = SPACE       "will be determined based on Source Level later
                      LEVEL_SOURCE = cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_LEVEL( )
                      DATUB        = '99991231'
                      ZIFFR        = LS_DIKEY-DIKEY
                    ) to <S_ACTDAT_CSPL>-T_MATDAT_MAKZ.
    endloop.

  endmethod.
  method GET_ACTDAT_DMS.

    field-symbols: <S_ACTDAT_DMS> type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.
    assign RR_ACTDAT->* to <S_ACTDAT_DMS>.

****--------------------------------------------------------------------------------------
**** Define Control Data
    "see redefinition

  endmethod.
  method GET_ACTDAT_DMSEXT.

    field-symbols: <S_ACTDAT_DMSEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_DMSEXT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_PXM_MBQ_S_ACTDAT_DMSEXT.
    assign RR_ACTDAT->* to <S_ACTDAT_DMSEXT>.

***--------------------------------------------------------------------------------------
*** Define Control Data for Print Design
    <S_ACTDAT_DMSEXT>-S_DMSEXT_PD    = ME->GET_DMSEXT_PD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    <S_ACTDAT_DMSEXT>-T_DMSEXT_PDINK = ME->GET_DMSEXT_PDINK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).

  endmethod.
  method GET_ACTDAT_HUPI.

    field-symbols: <S_ACTDAT_HUPI> type ZVCXI_XCM_MBQ_S_ACTDAT_HUPI.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_HUPI.
    assign RR_ACTDAT->* to <S_ACTDAT_HUPI>.

*** Let the redefinitions define it
    EF_SKIP = ABAP_UNDEFINED.

****--------------------------------------------------------------------------------------
**** Define Control Data
    <S_ACTDAT_HUPI>-T_HUPI = ME->GET_HUPI( exporting IR_SVCEL_SHIPMGR = ME->GET_SVCEL_SHIPMGR( IR_SVCEL_PARENT = IR_SVCEL_SOURCE )
                                           changing  CF_SKIP          = EF_SKIP  ).

*** Packing Instruction Determination Record
    data(LS_SVCAD) = ME->GET_SVCAD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    <S_ACTDAT_HUPI>-KSCHL   = 'SHIP'.
    <S_ACTDAT_HUPI>-KOTABNR = '100'.
    <S_ACTDAT_HUPI>-S_KOMGP = value #( WERKS = IF_WERKS
                                       KUNWE = LS_SVCAD-KUNWE
                                       KUNAG = LS_SVCAD-KUNAG ).

  endmethod.
  method GET_ACTDAT_LLC.

*    field-symbols: <S_ACTDAT_LLC> type ZVCXI_XCM_MBQ_S_ACTDAT_LLC.
*
*
****--------------------------------------------------------------------------------------
**** Create Data Reference
*    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_LLC.
*    assign RR_ACTDAT->* to <S_ACTDAT_LLC>.
*
***--------------------------------------------------------------------------------------
*** Define Control Data
*    <S_ACTDAT_LLC>-xxx.


*** Process Lower-Level Update only for "root" materials
    if IF_DISST ne 0.
      EF_SKIP = ABAP_TRUE.
    endif.

  endmethod.
  method GET_ACTDAT_MAT.

    data: LF_BWKEY type BWKEY.
    data: LT_LGORT type table of LGORT_D.
    field-symbols: <S_ACTDAT_MAT> type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.
    assign RR_ACTDAT->* to <S_ACTDAT_MAT>.

***--------------------------------------------------------------------------------------
*** Get right Reference Material Information
*{   REPLACE        SBXK900067                                        1
*\    <S_ACTDAT_MAT>-TMATN = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
*\                                                               IF_WERKS = IF_WERKS )-TMATN.
    <S_ACTDAT_MAT>-TMATN = YCL_HP_XCM_MBQ_CUST=>READ_REFMAT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                             IF_SOKEY        = IF_SOKEY
                                                             IF_WERKS        = IF_WERKS )-TMATN.
*}   REPLACE

***--------------------------------------------------------------------------------------
*** Define Client Data
    <S_ACTDAT_MAT>-S_MATDAT_MARA = ME->GET_MATDAT_MARA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).
*** Define Material Description
    <S_ACTDAT_MAT>-T_MATDAT_MAKT = ME->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Units of Measure for Material
    <S_ACTDAT_MAT>-T_MATDAT_MARM = ME->GET_MATDAT_MARM( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Sales Organizations
    <S_ACTDAT_MAT>-T_MATDAT_MVKE = ME->GET_MATDAT_MVKE( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).
*** Define Plant Data
    <S_ACTDAT_MAT>-T_MATDAT_MARC = ME->GET_MATDAT_MARC( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).
*** Define Valuation Data
    <S_ACTDAT_MAT>-T_MATDAT_MBEW = ME->GET_MATDAT_MBEW( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Define MRP Area Data
    <S_ACTDAT_MAT>-T_MATDAT_MDMA = ME->GET_MATDAT_MDMA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Define Planning Data
    <S_ACTDAT_MAT>-T_MATDAT_MPGD = ME->GET_MATDAT_MPGD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).
*** Define PRT Data
    <S_ACTDAT_MAT>-T_MATDAT_MFHM = ME->GET_MATDAT_MFHM( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).
*** Determine Storage Location Data
    <S_ACTDAT_MAT>-T_MATDAT_MARD = ME->GET_MATDAT_MARD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Determine Warehouse Number Data
    <S_ACTDAT_MAT>-T_MATDAT_MLGN = ME->GET_MATDAT_MLGN( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Determine Storage Type Data
    <S_ACTDAT_MAT>-T_MATDAT_MLGT = ME->GET_MATDAT_MLGT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MLGN = <S_ACTDAT_MAT>-T_MATDAT_MLGN ).

  endmethod.
  method GET_ACTDAT_MCL.

    data: LS_ALLOC_LIST type BAPI1003_ALLOC_LIST,
          LS_CLASSI     type ZVCXI_XCM_MBQ_S_CLASSI.
    data: LT_ALLOC_LIST type TT_BAPI1003_ALLOC_LIST.
    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_MCL> type ZVCXI_XCM_MBQ_S_ACTDAT_MCL.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_MCL.
    assign RR_ACTDAT->* to <S_ACTDAT_MCL>.

*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

***--------------------------------------------------------------------------------------
*** Define Control Data
    LR_BOB_MAT->GET_CLASSI( importing ET_ALLOC_LIST = LT_ALLOC_LIST ).
    if LT_ALLOC_LIST is not initial.
      loop at LT_ALLOC_LIST into LS_ALLOC_LIST.
        clear LS_CLASSI.
        LS_CLASSI-CLTYP = LS_ALLOC_LIST-CLASSTYPE.
        LS_CLASSI-CLNAM = LS_ALLOC_LIST-CLASSNUM.

        LR_BOB_MAT->GET_CLASSI( exporting IF_CLTYP      = LS_CLASSI-CLTYP
                                          IF_CLNAM      = LS_CLASSI-CLNAM
                                importing ET_ALLOC_NUM  = LS_CLASSI-T_ALLOC_NUM
                                          ET_ALLOC_CHAR = LS_CLASSI-T_ALLOC_CHAR
                                          ET_ALLOC_CURR = LS_CLASSI-T_ALLOC_CURR ).

        insert LS_CLASSI into table <S_ACTDAT_MCL>-T_CLASSI.
      endloop.
    else.
      EF_SKIP = ABAP_TRUE.
    endif.

  endmethod.
  method GET_ACTDAT_MMEXT.
*** FG and SFG generate thier MM Extension via MM Exit based on its own VC at Material Save

    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.

*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.

    <S_ACTDAT_MMEXT>-WERKS = IF_WERKS.

  endmethod.
  method GET_ACTDAT_PCR.

    field-symbols: <S_ACTDAT_PCR> type ZVCXI_XCM_MBQ_S_ACTDAT_PCR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_PCR.
    assign RR_ACTDAT->* to <S_ACTDAT_PCR>.

*** Let the redefinitions define it
    EF_SKIP = ABAP_UNDEFINED.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_PCR>-VALID_FROM = value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = ME->F_POSNR ]-PRSDT
                                         default value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = '' ]-PRSDT optional ) ).
    <S_ACTDAT_PCR>-VALID_TO   = '99991231'.


    case IF_SOKEY.
***   Get Tools Condition Records
      when C_SOKEY_TOOL_DCT or           "Die Cut Tool
           C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        insert lines of ME->GET_PCR_TOOL( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                          IF_SOKEY        = IF_SOKEY
                                          IF_WERKS        = IF_WERKS ) into table <S_ACTDAT_PCR>-T_PCR.
      when others.
***     Get Finished Good Condition Records
        insert lines of ME->GET_PCR_FG( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                        IF_SOKEY        = IF_SOKEY
                                        IF_WERKS        = IF_WERKS ) into table <S_ACTDAT_PCR>-T_PCR.
    endcase.

    if <S_ACTDAT_PCR>-T_PCR is not initial.
      EF_SKIP = ABAP_FALSE.
    endif.

  endmethod.
  method GET_ACTDAT_PRU.

    field-symbols: <S_ACTDAT_PRU> type ZVCXI_XCM_MBQ_S_ACTDAT_PRU.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_PRU.
    assign RR_ACTDAT->* to <S_ACTDAT_PRU>.

*** Let the redefinitions define it
    EF_SKIP = ABAP_UNDEFINED.

***--------------------------------------------------------------------------------------
*** Define Control Data
    case IF_SOKEY.
***   Tools
      when C_SOKEY_TOOL_DCT       or     "Die Cut Tool
           C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        <S_ACTDAT_PRU> = ME->GET_PRU_TOOL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                     IF_SOKEY        = IF_SOKEY
                                                     IF_WERKS        = IF_WERKS
                                           changing  CF_SKIP         = EF_SKIP ).
    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

*** Let the redefinitions define it
    EF_SKIP = ABAP_UNDEFINED.

***--------------------------------------------------------------------------------------
*** Define Control Data
    case IF_SOKEY.
***   Tools
      when C_SOKEY_TOOL_DCT or           "Die Cut Tool
           C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        <S_ACTDAT_PURIR> = ME->GET_PURIR_TOOL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                         IF_SOKEY        = IF_SOKEY
                                                         IF_WERKS        = IF_WERKS
                                               changing  CF_SKIP         = EF_SKIP ).
    endcase.

  endmethod.
  method GET_ACTDAT_PURSL.

    field-symbols: <S_ACTDAT_PURSL> type ZVCXI_XCM_MBQ_S_ACTDAT_PURSL.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_PURSL.
    assign RR_ACTDAT->* to <S_ACTDAT_PURSL>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_PURSL>-WERKS = IF_WERKS.

  endmethod.
  method GET_ACTDAT_PVER.

    data: LS_TD111 type ZVCXI_XCM_TD111.
    field-symbols: <S_ACTDAT_PVER> type ZVCXI_XCM_MBQ_S_ACTDAT_PVER.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_PVER.
    assign RR_ACTDAT->* to <S_ACTDAT_PVER>.

***--------------------------------------------------------------------------------------
*** Get right Reference Material Information
    LS_TD111 = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY  = IF_SOKEY
                                                   IF_WERKS  = IF_WERKS ).
    <S_ACTDAT_PVER>-TMATN = LS_TD111-TMATN.
    <S_ACTDAT_PVER>-WERKS = IF_WERKS.

  endmethod.
  method GET_ACTDAT_QMAT.

    data: LF_REWRK type REWRK.
    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_QMAT> type ZVCXI_XCM_MBQ_S_ACTDAT_QMAT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_QMAT.
    assign RR_ACTDAT->* to <S_ACTDAT_QMAT>.

*** Skip by default if no Inspection Types defined by Template
    EF_SKIP = ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    <S_ACTDAT_QMAT>-TMATN = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                                IF_WERKS = IF_WERKS )-TMATN.

*** Main Plant
    create object LR_BOB_MAT.
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = <S_ACTDAT_QMAT>-TMATN
                              IF_WERKS = IF_WERKS ).
    if LR_BOB_MAT->GET_QMAT( ) is not initial.
      insert value #( WERKS = LR_BOB_MAT->GET_WERKS( ) ) into table <S_ACTDAT_QMAT>-T_QMAT.
      clear EF_SKIP.
    endif.

*** Cross Plant
    LF_REWRK = ME->GET_REWRK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    if LF_REWRK is not initial and
       LF_REWRK ne IF_WERKS.

      create object LR_BOB_MAT.
      LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = <S_ACTDAT_QMAT>-TMATN
                                IF_WERKS = LF_REWRK ).
      if LR_BOB_MAT->GET_QMAT( ) is not initial.
        insert value #( WERKS = LR_BOB_MAT->GET_WERKS( ) ) into table <S_ACTDAT_QMAT>-T_QMAT.
        clear EF_SKIP.
      endif.
    endif.

  endmethod.
  method GET_ACTDAT_QPLN.

    field-symbols: <S_ACTDAT_QPLN> type ZVCXI_XCM_MBQ_S_ACTDAT_QPLN.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_QPLN.
    assign RR_ACTDAT->* to <S_ACTDAT_QPLN>.

*** Skip by default if no Inspection Plan defined by Template
    EF_SKIP = ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Reference Material
    <S_ACTDAT_QPLN>-TMATN = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                                IF_WERKS = IF_WERKS )-TMATN.
    <S_ACTDAT_QPLN>-WERKS = IF_WERKS.

*** Perform step, if Inspection Plan is defined for Reference Material
    if ZCL_VCXI_XCI_BOB_QPLN=>CHECK_EXISTS( IF_MATNR = <S_ACTDAT_QPLN>-TMATN
                                            IF_WERKS = <S_ACTDAT_QPLN>-WERKS
                                            II_PLNAL = <S_ACTDAT_QPLN>-I_PLNAL ).
      clear EF_SKIP.
    endif.

  endmethod.
  method GET_ACTDAT_RTE.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_RTE> type ZVCXI_XCM_MBQ_S_ACTDAT_RTE.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_RTE.
    assign RR_ACTDAT->* to <S_ACTDAT_RTE>.

*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

***--------------------------------------------------------------------------------------
*** Define Control Data
    <S_ACTDAT_RTE>-CMATN = conv MATNR( LR_BOB_MAT->S_PLANTDATA-PS_CONF_MAT ).
    <S_ACTDAT_RTE>-WERKS = IF_WERKS.

  endmethod.
  method GET_BL_ASCOMP.

*** Delegate to Business Logic of Assembly Component
    RR_BL_ASCOMP ?= ME->GET_BL_XCOMP( ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_COMP_P3 ).

  endmethod.
  method GET_BL_CRCOMP.

*** Delegate to Business Logic of Corrugated Component
    RR_BL_CRCOMP ?= ME->GET_BL_XCOMP( ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_COMP_P1 ).

  endmethod.
  method GET_BL_FCCOMP.

*** Delegate to Business Logic of Folding Carton Component
    RR_BL_FCCOMP ?= ME->GET_BL_XCOMP( ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_COMP_P2 ).

  endmethod.
  method GET_BL_PRCOMP.

*** Delegate to Business Logic of Procurement Component
    RR_BL_PRCOMP ?= ME->GET_BL_XCOMP( ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_ISVCE_COMP_P4 ).

  endmethod.
  method GET_BL_RLCOMP.

*** Delegate to Business Logic of Roll Component
    RR_BL_RLCOMP ?= ME->GET_BL_XCOMP( ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_COMP_P5 ).

  endmethod.
  method GET_BL_XCOMP.

*** Delegate to Business Logic of corresponding Component
    RR_BL_XCOMP = ZCL_VCXI_PXM_MBQ_BL_XCOMP=>FACTORY( IR_BOB_SDOC    = ME->R_BOB_SDOC
                                                      IF_POSNR       = ME->F_POSNR
                                                      IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP
                                                      IF_ISVCE       = IF_ISVCE ).

  endmethod.
  method GET_CKKEY.

    data: LF_REWRK type REWRK.

*** Define Default Key
    append ZCL_VCXI_XCM_MBQ_CUST=>GET_CKKEY( IF_WERKS = IF_WERKS
                                             IF_DATE  = SY-DATLO ) to RT_CKKEY.

*** Define Cross Plant
    LF_REWRK = ME->GET_REWRK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    if LF_REWRK is not initial and
       LF_REWRK ne IF_WERKS.
      append ZCL_VCXI_XCM_MBQ_CUST=>GET_CKKEY( IF_WERKS = LF_REWRK
                                               IF_DATE  = SY-DATLO ) to RT_CKKEY.
    endif.

  endmethod.
  method GET_DMSEXT_PD.

*** Define Source of Data Extension
    RS_DMSEXT_PD-LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( ).

  endmethod.
  method GET_DMSEXT_PDINK.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    data(LT_SVCEL) = IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    IR_SVCEL_SOURCE->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_SVCEL ).
    loop at LT_SVCEL into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Traditional/Analog Inks
        when ZCL_VCXI_PXM_MBQ_BL_XCOMP=>C_ISVCE_MS_INK.
          append value #( LEVEL_SOURCE = LR_SVCEL->GET_LEVEL( )
                          S_PDINK      = cast ZCL_VCXI_PXSS_EA_MS_INK( LR_SVCEL->GET_CLSEA( ) )->GET_PDINK( )
                        ) to RT_DMSEXT_PDINK.
***     Analyze Digital Inks
        when ZCL_VCXI_PXM_MBQ_BL_XCOMP=>C_ISVCE_MS_DINK.
          append value #( LEVEL_SOURCE = LR_SVCEL->GET_LEVEL( )
                          S_PDINK      = cast ZCL_VCXI_PXSS_EA_MS_DINK( LR_SVCEL->GET_CLSEA( ) )->GET_PDINK( )
                        ) to RT_DMSEXT_PDINK.
      endcase.
    endloop.

  endmethod.
  method GET_DOC_KEY_BY_SOURCE.

    RS_DOC_KEY = value #( IT_DMSLI[ LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( ) ]-S_DOC_KEY optional ).

  endmethod.
  method GET_EKORG.

    types: begin of YS_LFM1,
             LIFNR type LIFNR,
             EKORG type EKORG,
           end of YS_LFM1.
    statics: LT_T024W type table of T024W,
             LT_LFM1  type table of YS_LFM1.


***----------------------------------------------------------------------------
*** Get Purchase Organization of Plant
    if not LINE_EXISTS( LT_T024W[ WERKS = IF_WERKS ] ).
      select *
             appending table @LT_T024W
             from T024W
            where WERKS eq @IF_WERKS.
      if SY-SUBRC ne 0.
***     No Purchasing Organistation assigned to Plant &1.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '601'
                                              IF_MSGV1 = IF_WERKS ).
      endif.
    endif.

*** Get Purchase Organization of Vendor
    if not LINE_EXISTS( LT_LFM1[ LIFNR = IF_LIFNR ] ).
      select LIFNR, EKORG
             appending table @LT_LFM1
             from LFM1
            where LIFNR eq @IF_LIFNR.
      if SY-SUBRC ne 0.
***     No Purchasing Organistation assigned to Vendor &1.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '602'
                                              IF_MSGV1 = IF_LIFNR ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Search for first Match
    loop at LT_LFM1 into data(LS_LFM1)
                    where LIFNR eq IF_LIFNR.
      if LINE_EXISTS( LT_T024W[ WERKS = IF_WERKS
                                EKORG = LS_LFM1-EKORG ] ).
        RF_EKORG = LS_LFM1-EKORG.
        exit.
      endif.
    endloop.

    if RF_EKORG is initial.
***   No matching Purchasing Organistation found for Plant &1 and Vendor &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '603'
                                            IF_MSGV1 = IF_WERKS
                                            IF_MSGV2 = IF_LIFNR ).
    endif.

  endmethod.
  method GET_EXQTY.

    data: LF_NOUTT       type ZVCXI_PXS_NOUTT,
          LF_NOUTT_FIRST type ZVCXI_PXS_NOUTT,
          LF_NOUTT_TOTAL type ZVCXI_PXS_NOUTT.
    data: LS_EVQTY type ZVCXI_XCSR_S_EVQTY.
    data: LR_EA_RTESPV    type ref to ZCL_VCXI_XCSR_EA_RTESPV,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


*** Get Evaluation Quantity of Routing Supervisor
    ME->GET_SVCEL_RTESPV( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                          importing ER_EA_RTESPV    = LR_EA_RTESPV ).
    check LR_EA_RTESPV is bound.
    LS_EVQTY = LR_EA_RTESPV->GET_EVQTY( ).

*** Get Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_SVCEL_OUTPUT is bound.

*** Find XCONOs and XFGs as Child
    loop at LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      check LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

      case type of LR_SVCEL->GET_CLSEA( ).
        when type ZCL_VCXI_PXSS_EA_XCONO into data(LR_EA_XCONO). " Connection Out
          LF_NOUTT = LR_EA_XCONO->GET_NOUTT( ).
        when type ZCL_VCXI_PXSS_EA_XFG into data(LR_EA_XFG).     " Finished Good
          LF_NOUTT = LR_EA_XFG->GET_NOUTT( ).
        when others.
          continue.
      endcase.
      LF_NOUTT_TOTAL += LF_NOUTT.
      if LF_NOUTT_FIRST is initial.
        LF_NOUTT_FIRST = LF_NOUTT.
      endif.
    endloop.

*** Calculate proprtianal Evaluation Quantity as Explosion Quantity
    check LF_NOUTT_TOTAL ne 0.
    RS_EXQTY-EXQTY     = LS_EVQTY-EVQTY / LF_NOUTT_TOTAL * LF_NOUTT_FIRST.
    RS_EXQTY-EXQTY_UOM = LS_EVQTY-EVQTY_UOM.

  endmethod.
  method GET_FMTSA.

*** Get MRP Settings Provider
    ET_SVCEL = IR_SVCEL->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP
                                    IF_INUSE = ABAP_TRUE ).

*** Return Flag based on existing provider
    RF_FMTSA = cond #( when ET_SVCEL is not initial then ABAP_TRUE
                                                    else ABAP_FALSE ).

  endmethod.
  method GET_HUPI.

    data: LF_PIREU       type ZVCXI_XCSU_PIREU,
          LF_PICHP       type PL_CHECKPROF,
          LF_MATNR       type MATNR,
          LF_SHUNT_DESCR type /VCXI/CKX_DESCR.
    data: LT_HUPII type ZVCXI_XCSU_TT_HUPII,
          LT_DIMEN type ZVCXI_XCSU_TT_DIMEN.
    data: LR_EA_SHIPUNIT type ref to ZCL_VCXI_XCSU_EA_SHIPUNIT,
          LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.


*** Skip if Shipping Manager was found
    CF_SKIP = cond #( when IR_SVCEL_SHIPMGR is not bound then ABAP_TRUE
                                                         else ABAP_FALSE ).
    check CF_SKIP ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get all Shipping Units (Sorted)
    data(LT_SVCEL_SHIPUNIT) = IR_SVCEL_SHIPMGR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                                           IF_INUSE  = ABAP_TRUE
                                                           IF_SORTED = ABAP_TRUE ).
    loop at LT_SVCEL_SHIPUNIT into LR_OBJECT.
      LR_EA_SHIPUNIT ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_CLSEA( ).

***   Get Packing Instruction Information
      LR_EA_SHIPUNIT->GET_HUPI( importing EF_PIREU = LF_PIREU
                                          EF_PICHP = LF_PICHP
                                          ET_HUPII = LT_HUPII ).

***--------------------------------------------------------------------------------------
      if LF_PIREU eq ABAP_TRUE.
***     Get Description and Dimension of Shipping Unit that creates the Instruction
        LR_EA_SHIPUNIT->GET_SHUNT( importing EF_SHUNT_DESCR = LF_SHUNT_DESCR ).
        LR_EA_SHIPUNIT->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).

***     Add Instruction Header
        append value #(
                        DESCRIPTION   = |&MATNR& - { LF_SHUNT_DESCR }|    "Placeholder will be replaced during the creation
*                       EXT_DESCRIPTION
                        HEIGHT        = value #( LT_DIMEN[ DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT ]-DIMVA     optional )
                        WIDTH         = value #( LT_DIMEN[ DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH  ]-DIMVA     optional )
                        LENGTH        = value #( LT_DIMEN[ DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH ]-DIMVA     optional )
                        UNIT_DIM      = value #( LT_DIMEN[ DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH ]-DIMVA_UOM optional )
                        SIZE_FIX      = ABAP_TRUE
                        CHECK_PROFILE = LF_PICHP
                      ) to RT_HUPI assigning field-symbol(<S_HUPI>).

***     Add Items
        loop at LT_HUPII into data(LS_HUPII).
          if LS_HUPII-R_ITEM is bound.
            case type of cast /VCXI/CL_VKSRA_SVC_ELEMENT( LS_HUPII-R_ITEM )->GET_CLSEA( ).
***           Included Packing Instruction
              when type ZCL_VCXI_XCSU_EA_SHIPUNIT. "Shipping Unit as included Packing Instruction

***           Packaging Material
              when type ZCL_VCXI_XCSU_EA_PACKMAT into data(LR_EA_PACKMAT).
                LR_EA_PACKMAT->GET_PMATN( importing EF_MATNR = LF_MATNR ).

***             Define Load Carrier
                if LR_EA_PACKMAT->GET_PIREM( ) eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_PIREM_MAIN and   "Main Packaging Material
                   not LINE_EXISTS( <S_HUPI>-T_HUPI_ITEM[ LOAD_CARRIER_INDICATOR = ABAP_TRUE ] ).
                  insert value #( DETAIL_ITEMTYPE        = LS_HUPII-ITMTY
                                  MATERIAL_LONG          = LF_MATNR
                                  TARGET_QTY             = 1    "SAP requires this to be just one
                                  UNIT_QTY               = LS_HUPII-PMQTY_UOM
                                  LOAD_CARRIER_INDICATOR = ABAP_TRUE
                                ) into <S_HUPI>-T_HUPI_ITEM index 1.
                  LS_HUPII-PMQTY -= 1.
                endif.

***             Normal Packaging Material
                check LS_HUPII-PMQTY ne 0.
                append value #( DETAIL_ITEMTYPE = LS_HUPII-ITMTY
                                MATERIAL_LONG   = LF_MATNR
                                TARGET_QTY      = LS_HUPII-PMQTY
                                UNIT_QTY        = LS_HUPII-PMQTY_UOM
                              ) to <S_HUPI>-T_HUPI_ITEM.
            endcase.
          else.
***         Main Finished Good
            append value #( DETAIL_ITEMTYPE = LS_HUPII-ITMTY
                            TARGET_QTY      = LS_HUPII-PMQTY
                            UNIT_QTY        = LS_HUPII-PMQTY_UOM
                          ) to <S_HUPI>-T_HUPI_ITEM.
          endif.
        endloop.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Skip if no Packing Instruction needs to be defined
    CF_SKIP = cond #( when RT_HUPI is initial then ABAP_TRUE
                                              else ABAP_FALSE ).

  endmethod.
  method GET_INP_BY_XCONO.

    data: LT_SVCEL  type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL_INPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


*** Get Specification
    LT_SVCEL = IR_SVCEL_XCONO->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    check LT_SVCEL is not initial.

*** Get Input
    LR_SVCEL_INPUT = ME->GET_SVCEL_INPUT( IR_SVCEL_SPEC = cast #( LT_SVCEL[ 1 ] ) ).
    check LR_SVCEL_INPUT is bound.

*** Get children of Input
    LT_SVCEL = LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    check LT_SVCEL is not initial.

*** Return first Child which should be e.g. Procurement
    RR_SVCEL = cast #( LT_SVCEL[ 1 ] ).

  endmethod.
  method GET_KMPMG.

    data: LR_CLSEA type ref to /VCXI/CL_VKSR_CLSEA.


    LR_CLSEA ?= IR_SVCEL->GET_CLSEA( ).
    check LR_CLSEA is instance of ZCL_VCXI_PXSS_EA_FG.

    RF_KMPMG = cast ZCL_VCXI_PXSS_EA_FG( LR_CLSEA )->GET_QFACT( ).
    EF_KMPME = SPACE. "Determined autmatically by Base UoM

  endmethod.
  method GET_LOSGR.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Finished Good
      when type ZCL_VCXI_PXSS_EA_FG into data(LR_EA_FG).
        RF_LOSGR = ME->GET_EXQTY( )-EXQTY.
***   Connection Out
      when type ZCL_VCXI_PXSS_EA_XCONO into data(LR_EA_XCONO).
        RF_LOSGR = ME->GET_EXQTY( )-EXQTY.
***   MS Procurement
      when type ZCL_VCXI_PXSS_EA_MS_XPROC into data(LR_EA_MS_XPROC).
        RF_LOSGR = IR_BOB_MAT->S_PLANTDATA-LOT_SIZE.

      when others.
        RF_LOSGR = IR_BOB_MAT->S_PLANTDATA-LOT_SIZE.
    endcase.

  endmethod.
  method GET_LOVC.

    case IF_SOKEY.
***   Ink Tool
      when C_SOKEY_TOOL_INK_P or
           C_SOKEY_TOOL_INK_L.
        RT_VALUE = ME->GET_LOVC_TOOL_INK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                          IF_SOKEY        = IF_SOKEY
                                          IF_WERKS        = IF_WERKS ).
***   Die Cut Tool
      when C_SOKEY_TOOL_DCT.
        RT_VALUE = ME->GET_LOVC_TOOL_DCT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                          IF_SOKEY        = IF_SOKEY
                                          IF_WERKS        = IF_WERKS ).
    endcase.

  endmethod.
  method GET_LOVC_TOOL_DCT.

    data: LT_CABN type TT_CABN.
    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO.


***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

*** Get LO-VC values of Reference
    RT_VALUE = LR_BOB_MAT->GET_LOVC( ).

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                         importing ER_EA_TINFO     = LR_EA_TINFO ).


***--------------------------------------------------------------------------------------
*** Fill LO-VC Values by SmartVC
ENHANCEMENT-POINT GET_LOVC_TOOL_DCT SPOTS ZVCXI_PXM_MBQ_ES_BL_XCOMP .

  endmethod.
  method GET_LOVC_TOOL_INK.

    data: LT_CABN type TT_CABN.
    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO.


***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

*** Get LO-VC values of Reference
    RT_VALUE = LR_BOB_MAT->GET_LOVC( ).

*** Get Tooling Information (based on Printing)
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                         importing ER_EA_TINFO     = LR_EA_TINFO ).


***--------------------------------------------------------------------------------------
*** Fill LO-VC Values by SmartVC
ENHANCEMENT-POINT GET_LOVC_TOOL_INK SPOTS ZVCXI_PXM_MBQ_ES_BL_XCOMP .

  endmethod.
  method GET_MATDAT_MAKT.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Finished Good
      when type ZCL_VCXI_PXSS_EA_FG into data(LR_EA_FG).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_FG->GET_MAKTX( ) ) ).
***   Connection Out
      when type ZCL_VCXI_PXSS_EA_XCONO into data(LR_EA_XCONO).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_XCONO->GET_MAKTX( ) ) ).
***   MS Procurement
      when type ZCL_VCXI_PXSS_EA_MS_XPROC into data(LR_EA_MS_XPROC).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_MS_XPROC->GET_MAKTX( ) ) ).

***   MS Ink
      when type ZCL_VCXI_PXSS_EA_MS_INK into data(LR_EA_MS_INK).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_MS_INK->GET_INKTD( ) ) ).
    endcase.

  endmethod.
  method GET_MATDAT_MARA.

    data: LS_TD111 type ZVCXI_XCM_TD111.
    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Get Reference Material
    LS_TD111 = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                   IF_WERKS = IF_WERKS ).
    create object LR_BOB_MAT.
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN ).

***--------------------------------------------------------------------------------------
*** Default Values
    RS_MATDAT_MARA = corresponding #( LR_BOB_MAT->S_CLIENTDATA ).

*** Set Material Type
    RS_MATDAT_MARA-MATL_TYPE = LS_TD111-MTART.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   MS Procurement
      when type ZCL_VCXI_PXSS_EA_MS_XPROC into data(LR_EA_MS_XPROC).
        RS_MATDAT_MARA-PROD_HIER = LR_EA_MS_XPROC->GET_PRODH( ).
    endcase.

  endmethod.
  method GET_MATDAT_MARC.

    data: LF_REWRK type REWRK.
    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_MATDAT_MARC> type ZVCXI_XCM_MBQ_S_MATDAT_MARC.


*** Get MRP Settings
    ME->GET_FMTSA( exporting IR_SVCEL = IR_SVCEL_SOURCE
                   importing ET_SVCEL = data(LT_SVCEL_MRP) ).

***--------------------------------------------------------------------------------------
*** Get Reference Material
    LR_BOB_MAT = new #( ).
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN
                              IF_WERKS = IF_WERKS ).

*** Define main Plant
    append corresponding #( LR_BOB_MAT->S_PLANTDATA ) to RT_MATDAT_MARC assigning <S_MATDAT_MARC>.

*** Adjust Procurement Type
    if IR_SVCEL_SOURCE->GET_CLSEA( ) is instance of ZCL_VCXI_PXSS_EA_MS_XPROC.
      <S_MATDAT_MARC>-PROC_TYPE = 'F'.
    endif.

*** Adjust Costing Lot Size
    <S_MATDAT_MARC>-LOT_SIZE = ME->GET_LOSGR( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                              IR_BOB_MAT      = LR_BOB_MAT ).

*** MRP Settings
    loop at LT_SVCEL_MRP into data(LR_SVCEL_MRP).
      data(LR_EA_MRP) = cast ZCL_VCXI_XCSS_EA_MRP( cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_SVCEL_MRP )->GET_CLSEA( ) ).
      check LR_EA_MRP is bound and
            LR_EA_MRP->GET_WERKS( ) eq IF_WERKS.
      ME->FILL_MATDAT_MARC_BY_MRP( exporting IR_EA_MRP      = LR_EA_MRP
                                   changing  CS_MATDAT_MARC = <S_MATDAT_MARC> ).
    endloop.

***--------------------------------------------------------------------------------------
*** Define Cross Plant
    LF_REWRK = ME->GET_REWRK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    if LF_REWRK is not initial and
       LF_REWRK ne IF_WERKS.
***   Get Reference Material
      LR_BOB_MAT = new #( ).
      LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN
                                IF_WERKS = LF_REWRK ).

***   Add Plant View
      append corresponding #( LR_BOB_MAT->S_PLANTDATA ) to RT_MATDAT_MARC assigning <S_MATDAT_MARC>.
      <S_MATDAT_MARC>-PROC_TYPE  = 'F'.
      <S_MATDAT_MARC>-SPPROCTYPE = ZCL_VCXI_XCSP_PR_RELOCATE=>DETERMINE_SOBSL( IF_WERKS_MFSI = LF_REWRK
                                                                               IF_WERKS_MFSO = IF_WERKS
                                                                               IF_REWFG      = ABAP_FALSE ).    "Generate purchase req. or stock transfer

***   MRP Settings
      loop at LT_SVCEL_MRP into LR_SVCEL_MRP.
        LR_EA_MRP = cast ZCL_VCXI_XCSS_EA_MRP( cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_SVCEL_MRP )->GET_CLSEA( ) ).
        check LR_EA_MRP is bound and
              LR_EA_MRP->GET_WERKS( ) eq LF_REWRK.
        ME->FILL_MATDAT_MARC_BY_MRP( exporting IR_EA_MRP      = LR_EA_MRP
                                     changing  CS_MATDAT_MARC = <S_MATDAT_MARC> ).
      endloop.
    endif.

  endmethod.
  method GET_MATDAT_MARD.

*** Determine Storage Location Data based on Plant and Template Material
    if IT_MATDAT_MARC is not initial.
      select WERKS as PLANT
             LGORT as STGE_LOC
             into corresponding fields of table RT_MATDAT_MARD
             from MARD
             for all entries in IT_MATDAT_MARC
            where MATNR eq IF_TMATN
             and  WERKS eq IT_MATDAT_MARC-PLANT
             and  LVORM eq SPACE.
    endif.

  endmethod.
  method GET_MATDAT_MARM.
  endmethod.
  method GET_MATDAT_MBEW.

*** Determine Valuation Area based on Plant
    if IT_MATDAT_MARC is not initial.
      select BWKEY as VAL_AREA
             into corresponding fields of table RT_MATDAT_MBEW
             from T001W
             for all entries in IT_MATDAT_MARC
            where WERKS eq IT_MATDAT_MARC-PLANT.
    endif.

  endmethod.
  method GET_MATDAT_MDMA.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Get MRP Settings
    ME->GET_FMTSA( exporting IR_SVCEL = IR_SVCEL_SOURCE
                   importing ET_SVCEL = data(LT_SVCEL_MRP) ).

    loop at LT_SVCEL_MRP into data(LR_SVCEL_MRP).
      data(LR_EA_MRP) = cast ZCL_VCXI_XCSS_EA_MRP( cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_SVCEL_MRP )->GET_CLSEA( ) ).
      check LR_EA_MRP is bound.

***   Ensure Plant Data are defined
      data(LF_WERKS) = LR_EA_MRP->GET_WERKS( ).
      check LINE_EXISTS( IT_MATDAT_MARC[ PLANT = LF_WERKS ] ).

***--------------------------------------------------------------------------------------
***   Collect all MRP Areas
      loop at LR_EA_MRP->GET_PRVDR_MRP_AREA( ) into LR_OBJECT.
        data(LR_EA_MRP_AREA) = cast ZCL_VCXI_XCSS_EA_MRP_AREA( cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_CLSEA( ) ).

        append value #( WERKS = LF_WERKS
                        BERID = LR_EA_MRP_AREA->GET_BERID( )
                        DISMM = LR_EA_MRP_AREA->GET_DISMM( )
                        DISPO = LR_EA_MRP_AREA->GET_DISPO( )
                        DISLS = LR_EA_MRP_AREA->GET_DISLS( )
                        BSTMI = LR_EA_MRP_AREA->GET_BSTMI( )-BSTMI
                        BSTMA = LR_EA_MRP_AREA->GET_BSTMA( )-BSTMA
                        EISBE = LR_EA_MRP_AREA->GET_EISBE( )-EISBE
                        BSTFE = LR_EA_MRP_AREA->GET_BSTFE( )-BSTFE
                      ) to RT_MATDAT_MDMA.
      endloop.
    endloop.

  endmethod.
  method GET_MATDAT_MFHM.

*** Determine PRT based on Plant
    RT_MATDAT_MFHM = value #( ( PLANT = IF_WERKS ) ).

  endmethod.
  method GET_MATDAT_MLGN.

*** Warehouse Number Data based on Plant and Template Material
    if IT_MATDAT_MARC is not initial.
      select MLGN~LGNUM as WHSE_NO
             into corresponding fields of table RT_MATDAT_MLGN
             from T320
             inner join MLGN
              on MLGN~LGNUM eq T320~LGNUM
             for all entries in IT_MATDAT_MARC
            where MLGN~MATNR eq IF_TMATN
             and  MLGN~LVORM eq SPACE
             and  T320~WERKS eq IT_MATDAT_MARC-PLANT.
    endif.

  endmethod.
  method GET_MATDAT_MLGT.

*** Storage Type Data based on Warehouse and Template Material
    if IT_MATDAT_MLGN is not initial.
      select LGNUM as WHSE_NO
             LGTYP as STGE_TYPE
             into corresponding fields of table RT_MATDAT_MLGT
             from MLGT
             for all entries in IT_MATDAT_MLGN
            where MATNR eq IF_TMATN
             and  LGNUM eq IT_MATDAT_MLGN-WHSE_NO
             and  LVORM eq SPACE.
    endif.

  endmethod.
  method GET_MATDAT_MPGD.

***--------------------------------------------------------------------------------------
*** Get Reference Material
    data(LR_BOB_MAT) = new ZCL_VCXI_XCI_BOB_MAT( ).
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN
                              IF_WERKS = IF_WERKS ).

*** Check maintained for the plant
    check LR_BOB_MAT->S_PLANNINGDATA-PLANT is not initial.

*** Define Planning based on Plant
    append corresponding #( LR_BOB_MAT->S_PLANNINGDATA ) to RT_MATDAT_MPGD.

  endmethod.
  method GET_MATDAT_MVKE.

    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO.
    field-symbols: <S_MATDAT_MVKE> type ZVCXI_XCM_MBQ_S_MATDAT_MVKE.


***--------------------------------------------------------------------------------------
*** Define Sales Organizations
    RT_MATDAT_MVKE = value #( ( SALES_ORG  = ME->R_BOB_SDOC->S_VBAK-VKORG
                                DISTR_CHAN = ME->R_BOB_SDOC->S_VBAK-VTWEG ) ).

    case IF_SOKEY.
      when C_SOKEY_TOOL_DCT.
***     Get Tooling Information
        ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                             importing ER_EA_TINFO     = LR_EA_TINFO ).
      when C_SOKEY_TOOL_INK_P or
           C_SOKEY_TOOL_INK_L.
***     Get Tooling Information (based on Printing)
        ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                             importing ER_EA_TINFO     = LR_EA_TINFO ).
      when C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
***     Get Tooling Information
        ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                             importing ER_EA_TINFO     = LR_EA_TINFO ).
    endcase.

*** No Sales Data for external Tools
    if LR_EA_TINFO is bound and
       LR_EA_TINFO->GET_FEXTT( ) eq ABAP_TRUE.
      clear RT_MATDAT_MVKE.
    endif.

***--------------------------------------------------------------------------------------
    loop at RT_MATDAT_MVKE assigning <S_MATDAT_MVKE>.
***   Load Default Values by Reference Material
      create object LR_BOB_MAT.
      LR_BOB_MAT->INIT_FROM_DB( exporting IF_MATNR = IF_TMATN
                                          IF_VKORG = <S_MATDAT_MVKE>-SALES_ORG
                                          IF_VTWEG = <S_MATDAT_MVKE>-DISTR_CHAN ).
      if LR_BOB_MAT->S_SALESDATA is not initial.
        <S_MATDAT_MVKE> = corresponding #( LR_BOB_MAT->S_SALESDATA ).

***     Adjust Delivery Plant
        <S_MATDAT_MVKE>-DELYG_PLNT = ME->R_BOB_SDOC->T_VBAP[ POSNR = ME->F_POSNR ]-WERKS.
      else.
***     Not defined in Template
        delete RT_MATDAT_MVKE.
      endif.
    endloop.

  endmethod.
  method GET_MATNR_BY_SOURCE.

    RF_MATNR = value #( IT_MATLI[ LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( ) ]-MATNR optional ).

  endmethod.
  method GET_PCR_FG.

    data: LF_ICSPL type ZVCXI_XCSP_ICSPL,
          LF_COUNT type I,
          LF_UEPOS type UEPOS.
    data: LS_VBAP type VBAP.
    data: LT_TC210  type ZVCXI_XCM_TT_TC210,
          LT_CSPLIT type ZVCXI_PXSS_TT_CSPLIT,
          LT_POSNR  type ZVCXI_XCI_TT_POSNR,
          LT_UEPOS  type table of UEPOS.
    data: LR_CLSEA type ref to /VCXI/CL_VKSR_CLSEA.


***--------------------------------------------------------------------------------------
*** Get Finished Good Element API
    LR_CLSEA = IR_SVCEL_SOURCE->GET_CLSEA( ).
    check LR_CLSEA is bound and
          LR_CLSEA is instance of ZCL_VCXI_PXSS_EA_FG.

*** Get Condition Type Customizing
    LT_TC210 = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = C_PCRSK_FG_PRICE
                                                 IF_VKORG = ME->R_BOB_SDOC->S_VBAK-VKORG ).
    check LT_TC210 is not initial.

***--------------------------------------------------------------------------------------
*** Get Cost Split of Finished Good
    LT_CSPLIT = cast ZCL_VCXI_PXSS_EA_FG( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_CSPLIT( ).
    LF_ICSPL = value #( LT_CSPLIT[ DCSPL = 100 ] optional ).

*** Single Product Configuration (with Multi Quantity)
    if LINES( LT_CSPLIT ) le 1.
      loop at ME->R_BOB_SDOC->T_VBAP into LS_VBAP where POSNR eq ME->F_POSNR
                                                    or  UEPOS eq ME->F_POSNR.
        append LS_VBAP-POSNR to LT_POSNR.
      endloop.

*** Multi Product Configuration (with Mutli Quantity)
    else.
      LT_UEPOS = value #( ( ME->F_POSNR ) ).
      loop at LT_UEPOS into LF_UEPOS.
        clear LF_COUNT.
        loop at ME->R_BOB_SDOC->T_VBAP into LS_VBAP where UEPOS eq LF_UEPOS.
          LF_COUNT += 1.

***       Pick Item based on Cost Split ID
          if LF_COUNT eq LF_ICSPL.
            append LS_VBAP-POSNR to LT_POSNR.
          endif.

***       Process MQ Item as Header
          if LF_COUNT gt LINES( LT_CSPLIT ).
            append LS_VBAP-POSNR to LT_UEPOS.
          endif.
        endloop.
      endloop.
    endif.

    check LT_POSNR is not initial.

***--------------------------------------------------------------------------------------
*** Add Customized Conditions
    loop at LT_TC210 into data(LS_TC210).
      insert value #( KVEWE   = LS_TC210-KVEWE
                      KAPPL   = 'V'      "Sales/Distribution
                      KSCHL   = LS_TC210-KSTAR
                      KOTABNR = LS_TC210-KOTABNR
                    ) into table RT_PCR
                      assigning field-symbol(<S_PCR>).

***   Get Allowed Fields for Condition Structures
      <S_PCR>-S_KOMG = ME->R_BOB_SDOC->GET_KOMG( IF_POSNR = ME->F_POSNR
                                                 IF_PARVW = LS_TC210-PARVW ).

***   Get Conditions of Sales Document Items
      <S_PCR>-T_CONDSCALE = ME->R_BOB_SDOC->GET_CONDSCALE( exporting IF_KSCHL = LS_TC210-KSCHL
                                                                     IT_POSNR = LT_POSNR
                                                           importing EF_KONMS = <S_PCR>-UNITMEASUR
                                                                     EF_KONWA = <S_PCR>-CONDCURR
                                                                     EF_KPEIN = <S_PCR>-COND_P_UNT
                                                                     EF_KMEIN = <S_PCR>-COND_UNIT
                                                                     EF_STFKZ = <S_PCR>-SCALETYPE ).
    endloop.

*** Delete Conditions that are not maintained
    delete RT_PCR where T_CONDSCALE is initial.

  endmethod.
  method GET_PCR_TOOL.

    data: LS_TC210  type ZVCXI_XCM_TC210.
    data: LT_TC210  type ZVCXI_XCM_TT_TC210.
    data: LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO,
          LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_PCR> type ZVCXI_XCM_MBQ_S_PCR.

***--------------------------------------------------------------------------------------
*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                         importing ER_EA_TINFO     = LR_EA_TINFO ).
    check LR_EA_TINFO is bound.

*** Skip if External Tools
    check LR_EA_TINFO->GET_FEXTT( ) ne ABAP_TRUE.

*** Get Tool Price and only create Condition Records if Price maintained
    data(LS_TPRCE) = LR_EA_TINFO->GET_TPRCE( ).
    check LS_TPRCE-TPRCE is not initial.

***--------------------------------------------------------------------------------------
*** Get Condition Type Customizing for Tool Price
    LT_TC210 = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = C_PCRSK_TOOL_PRICE
                                                 IF_VKORG = ME->R_BOB_SDOC->S_VBAK-VKORG ).
    if LT_TC210 is not initial.
***   Add customized Conditions
      loop at LT_TC210 into LS_TC210.
        insert value #( KVEWE       = LS_TC210-KVEWE
                        KAPPL       = 'V'      "Sales/Distribution
                        KSCHL       = LS_TC210-KSTAR
                        KOTABNR     = LS_TC210-KOTABNR
                        S_KOMG      = ME->R_BOB_SDOC->GET_KOMG( IF_POSNR = ME->F_POSNR
                                                                IF_PARVW = LS_TC210-PARVW )
                        UNITMEASUR  = 'ST'
                        CONDCURR    = LS_TPRCE-TPRCE_CURR
                        COND_P_UNT  = 1
                        COND_UNIT   = 'ST'
                        SCALETYPE   = SPACE
                        T_CONDSCALE = value #( ( KSTBM = 0
                                                 KBETR = LS_TPRCE-TPRCE ) )
                      ) into table RT_PCR
                        assigning <S_PCR>.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Get Condition Type Customizing for Discount
    LT_TC210 = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = C_PCRSK_TOOL_DISC
                                                 IF_VKORG = ME->R_BOB_SDOC->S_VBAK-VKORG ).
    if LT_TC210 is not initial.
***   Get Tool Costs covered by Customer
      data(LS_TCCBC) = LR_EA_TINFO->GET_TCCBC( ).

***   Add customized Conditions
      loop at LT_TC210 into LS_TC210.
        insert value #( KVEWE       = LS_TC210-KVEWE
                        KAPPL       = 'V'      "Sales/Distribution
                        KSCHL       = LS_TC210-KSTAR
                        KOTABNR     = LS_TC210-KOTABNR
                        S_KOMG      = ME->R_BOB_SDOC->GET_KOMG( IF_POSNR = ME->F_POSNR
                                                                IF_PARVW = LS_TC210-PARVW )
                        UNITMEASUR  = 'ST'
                        CONDCURR    = LS_TCCBC-TCCBC_UOM
                        COND_P_UNT  = 1
                        COND_UNIT   = 'ST'
                        SCALETYPE   = SPACE
                        T_CONDSCALE = value #( ( KSTBM = 0
                                                 KBETR = ( 100 - LS_TCCBC-TCCBC ) * -1 ) )
                      ) into table RT_PCR
                        assigning <S_PCR>.
      endloop.
    endif.

  endmethod.
  method GET_PRU_TOOL.

    data: LS_TCEST_LOCAL type ZVCXI_XCS_S_TCEST.
    data: LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO,
          LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                         importing ER_EA_TINFO     = LR_EA_TINFO ).
    if LR_EA_TINFO is not bound.
      CF_SKIP = ABAP_TRUE.
      exit.
    endif.

*** Skip if External Tools or Vendor is defined
    CF_SKIP = cond #( when LR_EA_TINFO->GET_FEXTT( ) eq ABAP_TRUE   then ABAP_TRUE
                      when LR_EA_TINFO->GET_LIFNR( ) is not initial then ABAP_TRUE
                                                                    else ABAP_FALSE ).
    check CF_SKIP ne ABAP_TRUE.


***--------------------------------------------------------------------------------------
*** Define Control Data
    RS_ACTDAT_PRU-WERKS = IF_WERKS.
    RS_ACTDAT_PRU-BUDAT = SY-DATLO.      "Use current date to ensure posting period is open

*** Estimated Tool Costs
    LR_EA_TINFO->GET_TCEST( importing ES_TCEST_LOCAL = LS_TCEST_LOCAL ).
    RS_ACTDAT_PRU-VALPR = LS_TCEST_LOCAL-TCEST.
    RS_ACTDAT_PRU-PEINH = 1.

  endmethod.
  method GET_PURIR_TOOL.

    data: LS_TCEST type ZVCXI_XCS_S_TCEST.
    data: LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO,
          LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                         importing ER_EA_TINFO     = LR_EA_TINFO ).
    if LR_EA_TINFO is not bound.
      CF_SKIP = ABAP_TRUE.
      exit.
    endif.

*** Get Vendor and Estimated Tool Costs
    RS_ACTDAT_PURIR-LIFNR = LR_EA_TINFO->GET_LIFNR( ).
    LS_TCEST = LR_EA_TINFO->GET_TCEST( ).

*** Skip if External Tools or Vendor/Est.Tool Costs are missing
    CF_SKIP = cond #( when LR_EA_TINFO->GET_FEXTT( ) eq ABAP_TRUE then ABAP_TRUE
                      when RS_ACTDAT_PURIR-LIFNR is initial then ABAP_TRUE
                      when LS_TCEST-TCEST        is initial then ABAP_TRUE
                                                            else ABAP_FALSE ).
    check CF_SKIP ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

    RS_ACTDAT_PURIR-EKORG = ME->GET_EKORG( IF_WERKS = IF_WERKS
                                           IF_LIFNR = RS_ACTDAT_PURIR-LIFNR ).
    RS_ACTDAT_PURIR-WERKS = IF_WERKS.
    RS_ACTDAT_PURIR-EKGRP = LR_BOB_MAT->S_PLANTDATA-PUR_GROUP.

*** Condition Scale Header
    RS_ACTDAT_PURIR-KONWA = LS_TCEST-TCEST_CURR.                 "Condition Currency
    RS_ACTDAT_PURIR-KPEIN = 1.                                   "Condition Pricing Unit
    RS_ACTDAT_PURIR-KMEIN = LR_BOB_MAT->S_CLIENTDATA-BASE_UOM.   "Condition Unit
    RS_ACTDAT_PURIR-KODATAB = value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = ME->F_POSNR ]-PRSDT
                                       default ME->R_BOB_SDOC->T_VBKD[ POSNR = 00000 ]-PRSDT ).

*** Validity Data shouldn't be in the future
    RS_ACTDAT_PURIR-KODATAB = cond #( when RS_ACTDAT_PURIR-KODATAB ge SY-DATUM then SY-DATUM
                                                                               else RS_ACTDAT_PURIR-KODATAB ).

*** Condition Scale (Which should not result in Scales)
    RS_ACTDAT_PURIR-T_CONDSCALE = value #( ( KSTBM = 0                    " Condition scale quantity
                                             KBETR = LS_TCEST-TCEST ) ).  " Condition Amount or Percentage

  endmethod.
  method GET_PURIR_XPROC.

    data: LF_PURCH type ZVCXI_XCS_PURCH.
    data: LT_PSCALE type ZVCXI_XCS_TT_PSCALE.
    data: LR_EA_MS_XPROC type ref to ZCL_VCXI_PXSS_EA_MS_XPROC,
          LR_BOB_MAT     type ref to ZCL_VCXI_XCI_BOB_MAT.


    LR_EA_MS_XPROC ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

*** Get Purchasing Information
    LR_EA_MS_XPROC->GET_PURCH_INFO( importing EF_PURCH  = LF_PURCH
                                               EF_LIFNR  = RS_ACTDAT_PURIR-LIFNR
                                               ET_PSCALE = LT_PSCALE ).

*** Skip if not "Direct Procurement & Price" or vendor is missing
    CF_SKIP = cond #( when LF_PURCH ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE then ABAP_TRUE
                      when RS_ACTDAT_PURIR-LIFNR is initial then ABAP_TRUE
                                                             else ABAP_FALSE ).
    check CF_SKIP ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

    RS_ACTDAT_PURIR-EKORG = ME->GET_EKORG( IF_WERKS = IF_WERKS
                                           IF_LIFNR = RS_ACTDAT_PURIR-LIFNR ).
    RS_ACTDAT_PURIR-WERKS = IF_WERKS.
    RS_ACTDAT_PURIR-EKGRP = LR_BOB_MAT->S_PLANTDATA-PUR_GROUP.

*** Condition Scale Header
    RS_ACTDAT_PURIR-KONWA = LT_PSCALE[ 1 ]-PRICE_CURR.  "Condition Currency
    RS_ACTDAT_PURIR-KPEIN = LT_PSCALE[ 1 ]-PRICP.       "Condition Pricing Unit
    RS_ACTDAT_PURIR-KMEIN = LT_PSCALE[ 1 ]-PRICP_UOM.   "Condition Unit
    RS_ACTDAT_PURIR-KODATAB = value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = ME->F_POSNR ]-PRSDT
                                       default ME->R_BOB_SDOC->T_VBKD[ POSNR = 00000 ]-PRSDT ).

*** Validity Data shouldn't be in the future
    RS_ACTDAT_PURIR-KODATAB = cond #( when RS_ACTDAT_PURIR-KODATAB ge SY-DATUM then SY-DATUM
                                                                               else RS_ACTDAT_PURIR-KODATAB ).

*** Condition Scale
    RS_ACTDAT_PURIR-T_CONDSCALE = value #( for LS_PSCALE in LT_PSCALE
                                            ( KSTBM = LS_PSCALE-PSQTY       " Condition scale quantity
                                              KBETR = LS_PSCALE-PRICE ) ).  " Condition Amount or Percentage
  endmethod.
  method GET_REWRK.

    data: LR_EA_XCONO type ref to ZCL_VCXI_PXSS_EA_XCONO,
          LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_XCONI type ref to ZCL_VCXI_PXSS_EA_XCONI.


    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***------------------------------------------------------------------------------------------------
***   Connection Out
      when type ZCL_VCXI_PXSS_EA_XCONO into LR_EA_XCONO.

***     Get related Connection In
        LR_SVCEL = LR_EA_XCONO->GET_XCONI( ).
        check LR_SVCEL is bound.
        try.
            LR_EA_XCONI ?= LR_SVCEL->GET_CLSEA( ).
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_EA_XCONO.
        endtry.
        check LR_EA_XCONI is bound.

***     Get Plant of Connection In
        RF_REWRK = LR_EA_XCONI->GET_WERKS( ).

***------------------------------------------------------------------------------------------------
***   Finished Good
      when type ZCL_VCXI_PXSS_EA_XFG.
        RF_REWRK = ME->R_BOB_SDOC->T_VBAP[ POSNR = ME->F_POSNR ]-WERKS.

***------------------------------------------------------------------------------------------------
***   Procurement
      when type ZCL_VCXI_PXSS_EA_MS_XPROC.
        if not ME->HAS_ARBPL( IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP ).
***       Get Plant based on Connection Out of Dummy Component
          RF_REWRK = ME->GET_REWRK( IR_SVCEL_SOURCE = ME->GET_XCONO( ) ).
        endif.

    endcase.

  endmethod.
  method GET_SOKEY_OUT.
  endmethod.
  method GET_SVCAD.

    data: LS_EXQTY type /VCXI/VKCR_S_EXQTY.
    data: LR_SVC          type ref to /VCXI/CL_VKSRA_SVC,
          LR_APPDATA_INFO type ref to DATA.
    field-symbols: <S_APPDATA_INFO> type ZVCXI_XCS_S_APPDATA_INFO.


***--------------------------------------------------------------------------------------
*** Get configuration for current position
    LR_SVC = ME->R_BOB_SDOC->GET_SVC( IF_POSNR = ME->F_POSNR ).
    check LR_SVC is bound.

*** Read application data
    LR_APPDATA_INFO = LR_SVC->GET_APPDATA_INFO( ).
    check LR_APPDATA_INFO is bound.
    assign LR_APPDATA_INFO->* to <S_APPDATA_INFO>.

    check <S_APPDATA_INFO> is assigned.

*** Create application data
    RS_SVCAD-USE_APPDATA = ABAP_TRUE.
    RS_SVCAD-S_OPQTY     = <S_APPDATA_INFO>-S_OPQTY.
    RS_SVCAD-VKORG       = <S_APPDATA_INFO>-S_KNVV_AG-VKORG.
    RS_SVCAD-VTWEG       = <S_APPDATA_INFO>-S_KNVV_AG-VTWEG.
    RS_SVCAD-SPART       = <S_APPDATA_INFO>-S_KNVV_AG-SPART.
    RS_SVCAD-KUNAG       = <S_APPDATA_INFO>-S_KNA1_AG-KUNNR.
    RS_SVCAD-KUNWE       = <S_APPDATA_INFO>-S_KNA1_WE-KUNNR.

*** Set Exposion Quantity if determined
    LS_EXQTY = ME->GET_EXQTY( ).
    if LS_EXQTY is not initial.
      RS_SVCAD-OPQTY     = LS_EXQTY-EXQTY.
      RS_SVCAD-OPQTY_UOM = LS_EXQTY-EXQTY_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Special Handling
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Connection Out
      when type ZCL_VCXI_PXSS_EA_XCONO into data(LR_EA_XCONO).
        RS_SVCAD-KUNWE = LR_EA_XCONO->GET_KUNWE( ).
    endcase.

  endmethod.
  method GET_SVCEL_CONV.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.

    check IR_SVCEL_SPEC is bound.

*** Find Conversion as Child
    loop at IR_SVCEL_SPEC->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'CONV' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_CONV = LR_SVCEL.
    endloop.

  endmethod.
  method GET_SVCEL_INPUT.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.

    check IR_SVCEL_SPEC is bound.

*** Find Input as Child
    loop at IR_SVCEL_SPEC->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'INPUT' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_INPUT = LR_SVCEL.
    endloop.

  endmethod.
  method GET_SVCEL_OUTPUT.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.

    check IR_SVCEL_SPEC is bound.

*** Find Output as Child
    loop at IR_SVCEL_SPEC->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'OUTPUT' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_OUTPUT = LR_SVCEL.
    endloop.

  endmethod.
  method GET_SVCEL_RTESPV.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


    clear ER_EA_RTESPV.
    check IR_SVCEL_XCOMP is bound.

***--------------------------------------------------------------------------------------
*** Find Routing Supervisor as Child
    loop at IR_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'RTESPV' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_RTESPV = LR_SVCEL.

      try.
          move LR_SVCEL->GET_CLSEA( ) ?to ER_EA_RTESPV.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          clear ER_EA_RTESPV.
      endtry.
    endloop.

  endmethod.
  method GET_SVCEL_SHIPMGR.

    data(LT_SVCEL) = IR_SVCEL_PARENT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                                 IF_INUSE = ABAP_TRUE ).
    RR_SVCEL_SHIPMGR = cast /VCXI/CL_VKSRA_SVC_ELEMENT( value #( LT_SVCEL[ 1 ] optional ) ).
    check RR_SVCEL_SHIPMGR is bound.

    try.
        ER_EA_SHIPMGR ?= RR_SVCEL_SHIPMGR->GET_CLSEA( ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear ER_EA_SHIPMGR.
    endtry.

  endmethod.
  method GET_SVCEL_SPEC.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


    clear ER_EA_SPEC.
    check IR_SVCEL_XCOMP is bound.

***--------------------------------------------------------------------------------------
*** Find Specification as Child
    loop at IR_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'SPEC' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_SPEC = LR_SVCEL.

      try.
          move LR_SVCEL->GET_CLSEA( ) ?to ER_EA_SPEC.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          clear ER_EA_SPEC.
      endtry.
    endloop.

    check RR_SVCEL_SPEC is bound.

***--------------------------------------------------------------------------------------
*** Get Input and Output if requested
    if ER_SVCEL_INPUT is requested.
      ER_SVCEL_INPUT = ME->GET_SVCEL_INPUT( IR_SVCEL_SPEC = RR_SVCEL_SPEC ).
    endif.

    if ER_SVCEL_CONV is requested.
      ER_SVCEL_CONV = ME->GET_SVCEL_CONV( IR_SVCEL_SPEC = RR_SVCEL_SPEC ).
    endif.

    if ER_SVCEL_OUTPUT is requested.
      ER_SVCEL_OUTPUT = ME->GET_SVCEL_OUTPUT( IR_SVCEL_SPEC = RR_SVCEL_SPEC ).
    endif.

  endmethod.
  method GET_SVCEL_TINFO.

    data(LT_SVCEL) = IR_SVCEL_PARENT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                                                 IF_INUSE = ABAP_TRUE ).
    RR_SVCEL_TINFO = cast /VCXI/CL_VKSRA_SVC_ELEMENT( value #( LT_SVCEL[ 1 ] optional ) ).
    check RR_SVCEL_TINFO is bound.

    try.
        ER_EA_TINFO ?= RR_SVCEL_TINFO->GET_CLSEA( ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear ER_EA_TINFO.
    endtry.

  endmethod.
  method GET_XCONO.

    data: LT_SVCEL  type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


*** Get Output Element
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_SVCEL_OUTPUT is bound.
*** Get children of Output
    LT_SVCEL = LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    check LT_SVCEL is not initial.

*** Return first Child which should be the Connection Out
    RR_SVCEL_XCONO = cast #( LT_SVCEL[ 1 ] ).

  endmethod.
  method HAS_ARBPL.

    data: LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV,
          LR_BL_PRTE   type ref to ZCL_VCXI_XCSR_BL_PRTE.


*** Find Routing Supervisor as Child
    loop at IR_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'RTESPV' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      try.
          move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_RTESPV.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_EA_RTESPV.
      endtry.
    endloop.

    check LR_EA_RTESPV is bound.

*** Get Selected Route
    move LR_EA_RTESPV->GET_RTESEL( ) to LR_BL_PRTE.
    check LR_BL_PRTE             is bound and
          LR_BL_PRTE->R_RTE_PRTE is bound.

*** Verify Number of Work Center
    if LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL is not initial.
      move ABAP_TRUE to RF_ARBPL.
    endif.

  endmethod.
