
class ZCL_VCXI_FBSS_PR_BFG definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_XFG
  create public .

public section.

  interfaces ZIF_VCXI_FBSS_COMM_PREV .

  constants C_IPRVT_BFG type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_BFG' ##NO_TEXT.
  constants C_PARID_BGHEI type /VCXI/VKS_PARID value 'ZVCXI_FB_BGHEI' ##NO_TEXT.
  constants C_PARID_BGPRL type /VCXI/VKS_PARID value 'ZVCXI_FB_BGPRL' ##NO_TEXT.
  constants C_PARID_BGWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWID' ##NO_TEXT.
  constants C_PARID_FOBOT type /VCXI/VKS_PARID value 'ZVCXI_FB_FOBOT' ##NO_TEXT.
  constants C_PARID_FOTOP type /VCXI/VKS_PARID value 'ZVCXI_FB_FOTOP' ##NO_TEXT.
  constants C_PARID_GUBOT type /VCXI/VKS_PARID value 'ZVCXI_FB_GUBOT' ##NO_TEXT.
  constants C_PARID_GULEF type /VCXI/VKS_PARID value 'ZVCXI_F0_GULEF' ##NO_TEXT.
  constants C_PARID_GURIG type /VCXI/VKS_PARID value 'ZVCXI_F0_GURIG' ##NO_TEXT.
  constants C_PARID_GUTOP type /VCXI/VKS_PARID value 'ZVCXI_FB_GUTOP' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.
  constants C_PARID_OLWID type /VCXI/VKS_PARID value 'ZVCXI_FB_OLWID' ##NO_TEXT.
  constants C_PARID_TWICK type /VCXI/VKS_PARID value 'ZVCXI_FB_TWICK' ##NO_TEXT.
  constants C_PARID_WIBST type /VCXI/VKS_PARID value 'ZVCXI_FB_WIBST' ##NO_TEXT.
  constants C_PARID_WIHDI type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHDI' ##NO_TEXT.
  constants C_PARID_WIHSP type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHSP' ##NO_TEXT.
  constants C_PARID_WILIP type /VCXI/VKS_PARID value 'ZVCXI_FB_WILIP' ##NO_TEXT.

  methods GET_BGDIM_VALUE
    returning
      value(RT_BGDIM_VALUE) type ZVCXI_FBSS_TT_BGDIM_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_BGPRL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BGPRL) type ZVCXI_FBS_BGPRL
    raising
      /VCXI/CX_CKX .
  methods GET_BGFPX
    exporting
      !EF_BGFPX type ZVCXI_FBS_BGFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_BGFPROP) type ref to ZCL_VCXI_FBSS_BL_BGFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_BGHEI
    exporting
      !ES_BGHEI type ZVCXI_FBS_S_BGHEI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BGWGT
    exporting
      !ES_BGWGT type ZVCXI_FBS_S_BGWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_BGPRL
    importing
      !IF_BGPRL type ZVCXI_FBS_BGPRL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_BGWID
    exporting
      !ES_BGWID type ZVCXI_FBS_S_BGWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOBOT
    exporting
      !ES_FOBOT type ZVCXI_FBS_S_FOBOT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOTOP
    exporting
      !ES_FOTOP type ZVCXI_FBS_S_FOTOP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GUBOT
    exporting
      !ES_GUBOT type ZVCXI_FBS_S_GUBOT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GULEF
    exporting
      !ES_GULEF type ZVCXI_F0S_S_GULEF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GURIG
    exporting
      !ES_GURIG type ZVCXI_F0S_S_GURIG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GUTOP
    exporting
      !ES_GUTOP type ZVCXI_FBS_S_GUTOP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_IBAGT
    exporting
      !EF_IBAGT type ZVCXI_FBS_IBAGT
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !ER_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG
    raising
      /VCXI/CX_CKX .
  methods GET_OLWID
    exporting
      !ES_OLWID type ZVCXI_FBS_S_OLWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TWICK
    exporting
      !EF_TWICK type ZVCXI_FBS_TWICK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIBST
    exporting
      !EF_WIBST type ZVCXI_FBS_WIBST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIHDI
    exporting
      !ES_WIHDI type ZVCXI_FBS_S_WIHDI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIHSP
    exporting
      !ES_WIHSP type ZVCXI_FBS_S_WIHSP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WILIP
    exporting
      !ES_WILIP type ZVCXI_FBS_S_WILIP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_BGHEI
    importing
      !IS_BGHEI type ZVCXI_FBS_S_BGHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWID
    importing
      !IS_BGWID type ZVCXI_FBS_S_BGWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOBOT
    importing
      !IS_FOBOT type ZVCXI_FBS_S_FOBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOTOP
    importing
      !IS_FOTOP type ZVCXI_FBS_S_FOTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GUBOT
    importing
      !IS_GUBOT type ZVCXI_FBS_S_GUBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GULEF
    importing
      !IS_GULEF type ZVCXI_F0S_S_GULEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GURIG
    importing
      !IS_GURIG type ZVCXI_F0S_S_GURIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GUTOP
    importing
      !IS_GUTOP type ZVCXI_FBS_S_GUTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_IBAGT
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OLWID
    importing
      !IS_OLWID type ZVCXI_FBS_S_OLWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TWICK
    importing
      !IF_TWICK type ZVCXI_FBS_TWICK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIBST
    importing
      !IF_WIBST type ZVCXI_FBS_WIBST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIHDI
    importing
      !IS_WIHDI type ZVCXI_FBS_S_WIHDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIHSP
    importing
      !IS_WIHSP type ZVCXI_FBS_S_WIHSP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WILIP
    importing
      !IS_WILIP type ZVCXI_FBS_S_WILIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
  methods GET_NOOUT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BGDIM type /VCXI/VKSC_IEVNT value 'INIT_BGDIM' ##NO_TEXT.
  constants C_IEVNT_O_BGFPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGHEI_CHANGED type /VCXI/VKSC_IEVNT value 'BGHEI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGPRL_CHANGED type /VCXI/VKSC_IEVNT value 'BGPRL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BGWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWID_CHANGED type /VCXI/VKSC_IEVNT value 'BGWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FODIM_CHANGED type /VCXI/VKSC_IEVNT value 'FODIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GUDIM_CHANGED type /VCXI/VKSC_IEVNT value 'GUDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBAGT_CHANGED type /VCXI/VKSC_IEVNT value 'IBAGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_OLDIM_CHANGED type /VCXI/VKSC_IEVNT value 'OLDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TWICK_CHANGED type /VCXI/VKSC_IEVNT value 'TWICK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIBST_CHANGED type /VCXI/VKSC_IEVNT value 'WIBST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHDI_CHANGED type /VCXI/VKSC_IEVNT value 'WIHDI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHSP_CHANGED type /VCXI/VKSC_IEVNT value 'WIHSP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WILIP_CHANGED type /VCXI/VKSC_IEVNT value 'WILIP_CHANGED' ##NO_TEXT.
  constants C_PARID_BGFPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGFPX' ##NO_TEXT.
  constants C_PARID_BGWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWGT' ##NO_TEXT.

  methods CHECK_BGPRL
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_BGDIM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_CSTEP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_IBAGT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TWICK
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIBST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WICKET_NEEDED
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BGDIM
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWGT
    importing
      !IS_BGWGT type ZVCXI_FBS_S_BGWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_BFG definition
class ZCL_VCXI_FBSS_PR_BFG implementation.
  method CHECK_BGDIM.

    data: LS_BGDIM  type ZVCXI_FBSSC_S_BAGTY_BGDIM,
          LS_VALUE  type ZVCXI_FBSS_S_BGDIM_VALUE,
          LS_TC010T type ZVCXI_FBS_TC010T.
    data: LT_BGDIM  type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_VALUES type ZVCXI_FBSS_TT_BGDIM_VALUE.
    data: LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.


    move 0 to RF_RETURN.

***--------------------------------------------------------------------------------------
*** Get Bag Type (Outbound)
    ME->GET_IBAGT( importing ER_CUST_BAG = LR_CUST_BAG ).

*** Get Bag Dimensions
    if LR_CUST_BAG is bound.
      LT_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
    endif.

*** Get all Bag Dimension values
    LT_VALUES = ME->GET_BGDIM_VALUE( ).

*** Check only Mandatory fields from screen
    loop at LT_BGDIM into LS_BGDIM where OBDIM eq 'M'.

      clear LS_VALUE.
      read table LT_VALUES into LS_VALUE with key IBDIM = LS_BGDIM-IBDIM.

      if LS_VALUE-BVDIM is initial.
        move 1 to RF_RETURN.
      endif.

      if IR_MESSAGE is supplied.
        clear LS_TC010T.
        read table ZCL_VCXI_FBSSC_BAGTY=>T_TC010T into LS_TC010T
                                                  with key IBDIM = LS_BGDIM-IBDIM.

        if LS_VALUE-BVDIM is not initial.
***       &1 is mandatory and maintain.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '103'
                                   IF_MSGV1 = LS_TC010T-DESCR ).
        else.
***       &1 is mandatory and not maintain.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '104'
                                   IF_MSGV1 = LS_TC010T-DESCR ).
        endif.
      else.

        check RF_RETURN ne 0.
        exit.
      endif.

    endloop.

  endmethod.
  method CHECK_BGPRL.

*** Check Bag/Roll
    if ME->GET_BGPRL( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Bag/Roll is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '490' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Bag/Roll is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '491' ).
      endif.
    endif.

  endmethod.
method CHECK_CSTEP.

*** 0 - No error .
*** 1 - Conversions check ignored.
*** 2 - Conversion & not allowed
*** 3 - Minimum & Conversion & .
*** 4 - Maximum & Conversion & .

  data: LF_IBAGT  type        ZVCXI_FBS_IBAGT,
        LF_BGFPX  type        ZVCXI_FBS_BGFPX,
        LF_DESCR  type        /VCXI/CKX_DESCR,
        LF_FDCHK  type        ZVCXI_F0S_FDCHK,
        LF_RETURN type        I.
  data: LS_CSTEP  type        ZVCXI_FBSSC_S_BAGTY_CSTEP,
        LS_BGICS  type        ZVCXI_FBSS_S_BGICS,
        LS_TC030T type        ZVCXI_FBS_TC030T.
  data: LT_CSTEP type        ZVCXI_FBSSC_TT_BAGTY_CSTEP,
        LT_BGICS type        ZVCXI_FBSS_TT_BGICS.
  data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG,
        LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

  move 0 to RF_RETURN.

  ME->GET_FDCHK( importing EF_FDCHK = LF_FDCHK ).
  if LF_FDCHK eq ABAP_TRUE.
    move 1 to RF_RETURN.

    if IR_MESSAGE is supplied.

***   Conversions check ignored.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '481').

    endif.

    return.
  endif.

*** Get Bag Type Customizing
  ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
  LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
  if LR_CUST_BAG is bound.
    move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
  endif.

*** Get Bag Forward Property XML (Inbound)
  ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing EF_BGFPX = LF_BGFPX ).

*** Get Bag Forward Property Instance
  LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = LF_BGFPX ).
  check LR_BL_BGFPROP is bound.
  move LR_BL_BGFPROP->T_BGICS to LT_BGICS.

*** Check Conversions
  loop at LT_CSTEP into LS_CSTEP.

    clear: LS_BGICS, LF_RETURN.

    read table LT_BGICS into LS_BGICS with key ICSTP = LS_CSTEP-ICSTP.
    if SY-SUBRC ne 0.
      if LS_CSTEP-QTYMI is not initial.
        move 3 to LF_RETURN.
      endif.
    else.
      delete table LT_BGICS from LS_BGICS.

***   Check Min/Max both are infinite
      if LS_CSTEP-QTYMI is initial and
         LS_CSTEP-QTYMA is initial.
        move 0 to LF_RETURN.
      else.
        if LS_CSTEP-QTYMI gt LS_BGICS-CCSTP.
          move 3 to LF_RETURN.
        endif.

        if LS_CSTEP-QTYMA lt LS_BGICS-CCSTP.
          move 4 to LF_RETURN.
        endif.
      endif.
    endif.

    check LF_RETURN ne 0.
    move LF_RETURN to RF_RETURN.

    if IR_MESSAGE is supplied.

***   Get Conversion Descriptions
      clear LS_TC030T.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T with key ICSTP = LS_CSTEP-ICSTP.
      move LS_TC030T-DESCR to LF_DESCR.

      case LF_RETURN.

        when 3.

***       Minimum &1 Conversion &2 needed.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '481'
                                   IF_MSGV1 = LS_CSTEP-QTYMI
                                   IF_MSGV2 = LF_DESCR ).

        when 4.

***       Maximum &1 Conversion &2 allowed.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '482'
                                   IF_MSGV1 = LS_CSTEP-QTYMA
                                   IF_MSGV2 = LF_DESCR ).

      endcase.
    endif.

  endloop.

*** Not allowed conversions
  loop at LT_BGICS into LS_BGICS.
    move 2 to RF_RETURN.

    if IR_MESSAGE is supplied.

***   Get Conversion Description
      clear LS_TC030T.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T with key ICSTP = LS_BGICS-ICSTP.
      move LS_TC030T-DESCR to LF_DESCR.

***   Conversion &1 not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '480'
                               IF_MSGV1 = LF_DESCR ).

    else.
      exit.
    endif.
  endloop.

endmethod.
  method CHECK_IBAGT.

*** 0 Bag Type is maintained.
*** 1 Bag Type is not maintained.
*** 2 Bag Type is maintained but not valid.

    data: LF_IBAGT type ZVCXI_FBS_IBAGT.

    move 0 to RF_RETURN.
    ME->GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).

    if LF_IBAGT is initial.
      move 1 to RF_RETURN.
    else.
      select count(*) from ZVCXI_FBS_TC500
         where IBAGT eq LF_IBAGT.
      if SY-SUBRC is not initial.
        move 2 to RF_RETURN.
      endif.
    endif.

  endmethod.
  method CHECK_TWICK.

*** 0 Wicket Type is maintained.
*** 1 Wicket Type is not maintained.

    data: LF_TWICK type ZVCXI_FBS_TWICK,
          LF_IBAGT type ZVCXI_FBS_IBAGT.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG.

    move 0 to RF_RETURN.

*** Get Bag Type Customizing
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    move 0 to RF_RETURN.

    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                        transporting no fields.
    check SY-SUBRC is initial.

    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    if LF_TWICK is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WIBST.

*** 0 Bag/Stack is maintained.
*** 1 Bag/Stack is not maintained.

    data: LF_WIBST type ZVCXI_FBS_WIBST,
          LF_IBAGT type ZVCXI_FBS_IBAGT.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG.

    move 0 to RF_RETURN.

*** Get Bag Type Customizing
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    move 0 to RF_RETURN.

    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                        transporting no fields.
    check SY-SUBRC is initial.

    ME->GET_WIBST( importing EF_WIBST = LF_WIBST ).

    if LF_WIBST is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WICKET_NEEDED.

    data: LF_IBAGT type ZVCXI_FBS_IBAGT.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG.

***--------------------------------------------------------------------------------------
*** Get Bag Type Customizing
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                        transporting no fields.
    if SY-SUBRC is initial.
***   Checks needed
      move ABAP_TRUE  to RF_RETURN.
    else.
***   Checks not needed
      move ABAP_FALSE to RF_RETURN.
    endif.

  endmethod.
  method GET_BGDIM_VALUE.

    data: LS_BGWID type ZVCXI_FBS_S_BGWID,
          LS_BGHEI type ZVCXI_FBS_S_BGHEI,
          LS_OLWID type ZVCXI_FBS_S_OLWID,
          LS_FOTOP type ZVCXI_FBS_S_FOTOP,
          LS_FOBOT type ZVCXI_FBS_S_FOBOT,
          LS_WILIP type ZVCXI_FBS_S_WILIP,
          LS_GULEF type ZVCXI_F0S_S_GULEF,
          LS_GURIG type ZVCXI_F0S_S_GURIG,
          LS_GUTOP type ZVCXI_FBS_S_GUTOP,
          LS_GUBOT type ZVCXI_FBS_S_GUBOT.
    field-symbols: <S_BGDIM_VALUE>  type ZVCXI_FBSS_S_BGDIM_VALUE.

***--------------------------------------------------------------------------------------
*** Bag Width
    ME->GET_BGWID( importing ES_BGWID = LS_BGWID ).
    if LS_BGWID-BGWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGWID to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGWID-BGWID                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGWID-BGWID_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Bag Height
    ME->GET_BGHEI( importing ES_BGHEI = LS_BGHEI ).
    if LS_BGHEI-BGHEI is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGHEI to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGHEI-BGHEI                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGHEI-BGHEI_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Overlap Dimension
    ME->GET_OLWID( importing ES_OLWID = LS_OLWID ).
    if LS_OLWID-OLWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_BGDIM_VALUE>-IBDIM.
      move LS_OLWID-OLWID          to <S_BGDIM_VALUE>-BVDIM.
      move LS_OLWID-OLWID_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Gusset Dimension
    ME->GET_GULEF( importing ES_GULEF = LS_GULEF ).
    if LS_GULEF-GULEF is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_BGDIM_VALUE>-IBDIM.
      move LS_GULEF-GULEF          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GULEF-GULEF_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GURIG( importing ES_GURIG = LS_GURIG ).
    if LS_GURIG-GURIG is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_BGDIM_VALUE>-IBDIM.
      move LS_GURIG-GURIG          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GURIG-GURIG_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GUTOP( importing ES_GUTOP = LS_GUTOP ).
    if LS_GUTOP-GUTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_BGDIM_VALUE>-IBDIM.
      move LS_GUTOP-GUTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GUTOP-GUTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GUBOT( importing ES_GUBOT = LS_GUBOT ).
    if LS_GUBOT-GUBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_BGDIM_VALUE>-IBDIM.
      move LS_GUBOT-GUBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GUBOT-GUBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Fold Dimension
    ME->GET_FOTOP( importing ES_FOTOP = LS_FOTOP ).
    if LS_FOTOP-FOTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_BGDIM_VALUE>-IBDIM.
      move LS_FOTOP-FOTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_FOTOP-FOTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_FOBOT( importing ES_FOBOT = LS_FOBOT ).
    if LS_FOBOT-FOBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_BGDIM_VALUE>-IBDIM.
      move LS_FOBOT-FOBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LS_FOBOT-FOBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Wicket Lip
    ME->GET_WILIP( importing ES_WILIP = LS_WILIP ).
    if LS_WILIP-WILIP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_WILIP to <S_BGDIM_VALUE>-IBDIM.
      move LS_WILIP-WILIP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_WILIP-WILIP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

  endmethod.
  method GET_BGFPX.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = RR_BL_BGFPROP
                                                     EF_SETBY      = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get new Bag Forward Property XML
    if EF_BGFPX is requested.
      EF_BGFPX = RR_BL_BGFPROP->GET_BGFPX( ).
    endif.

  endmethod.
  method GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BGPRL.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGPRL ).
    move LS_PARAM-ATFLV to RF_BGPRL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BGWGT.

*** Get Bag Weight (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = ES_BGWGT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOBOT ).
    move LS_PARAM-ATFLV to ES_FOBOT-FOBOT.
    move LS_PARAM-UNIT  to ES_FOBOT-FOBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOTOP ).
    move LS_PARAM-ATFLV to ES_FOTOP-FOTOP.
    move LS_PARAM-UNIT  to ES_FOTOP-FOTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GUBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUBOT ).
    move LS_PARAM-ATFLV to ES_GUBOT-GUBOT.
    move LS_PARAM-UNIT  to ES_GUBOT-GUBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GULEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).
    move LS_PARAM-ATFLV to ES_GULEF-GULEF.
    move LS_PARAM-UNIT  to ES_GULEF-GULEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GURIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).
    move LS_PARAM-ATFLV to ES_GURIG-GURIG.
    move LS_PARAM-UNIT  to ES_GURIG-GURIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GUTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUTOP ).
    move LS_PARAM-ATFLV to ES_GUTOP-GUTOP.
    move LS_PARAM-UNIT  to ES_GUTOP-GUTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_IBAGT.

    data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

    clear EF_DESCR.
    check EF_IBAGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    if ER_CUST_BAG is requested or
       EF_DESCR    is requested.
      ER_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
    endif.

*** Get Description
    if ER_CUST_BAG is bound and
       EF_DESCR    is requested.
      move ER_CUST_BAG->GET_DESCR( ) to EF_DESCR.
    endif.

  endmethod.
  method GET_NOOUT.

    RF_NOOUT       = 1.
    EF_ALLOW_MULTI = ABAP_FALSE.
    EF_NOOUT_MULTI = RF_NOOUT.

  endmethod.
  method GET_OLWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).
    move LS_PARAM-ATFLV to ES_OLWID-OLWID.
    move LS_PARAM-UNIT  to ES_OLWID-OLWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Bag Type
    if ME->CHECK_IBAGT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag Dimensions
    if ME->CHECK_BGDIM( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Conversion Step Customizing
    case ME->CHECK_CSTEP( ).
      when 0 or 1.

        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.

        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Checks on Wicket fields needed?
    if ME->CHECK_WICKET_NEEDED( ) eq ABAP_TRUE.

***   Check Wicket Type only if Cstep Wicket is allowed
      if ME->CHECK_TWICK( ) eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***   Check Bag/Stack only if Cstep Wicket is allowed
      if ME->CHECK_WIBST( ) eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_FDCHK type ZVCXI_F0S_FDCHK.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Bag Type
    case ME->CHECK_IBAGT( ).
      when 0.
***     Bag Type is mandatory and maintain.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '105' ).

      when 1.
***     Bag Type is mandatory and not maintain.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '106' ).
      when 2.
***     Bag Type is maintained but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '107' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Bag Dimensions
    ME->CHECK_BGDIM( exporting IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Conversion Customizing
    ME->CHECK_CSTEP( exporting IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Checks on Wicket fields needed?
    if ME->CHECK_WICKET_NEEDED( ) eq ABAP_TRUE.

***   Check Wicket Type
      if ME->CHECK_TWICK( ) eq 0.
***     Wicket Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '111' ).
      else.
***     Wicket Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '112' ).
      endif.

***   Check Bag/Stack
      if ME->CHECK_WIBST( ) eq 0.
***     Bag/Stack is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '113' ).
      else.
***     Bag/Stack is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '114' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Flag - Disable checks
    ME->GET_FDCHK( importing EF_FDCHK = LF_FDCHK ).
    if LF_FDCHK eq ABAP_TRUE.

***   Flag - Disable checks is Active.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '057' ).

    endif.

  endmethod.
  method GET_TWICK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TWICK ).
    move LS_PARAM-ATWRT to EF_TWICK.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIBST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIBST ).
    move LS_PARAM-ATFLV to EF_WIBST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIHDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHDI ).
    move LS_PARAM-ATFLV to ES_WIHDI-WIHDI.
    move LS_PARAM-UNIT  to ES_WIHDI-WIHDI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIHSP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHSP ).
    move LS_PARAM-ATFLV to ES_WIHSP-WIHSP.
    move LS_PARAM-UNIT  to ES_WIHSP-WIHSP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WILIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WILIP ).
    move LS_PARAM-ATFLV to ES_WILIP-WILIP.
    move LS_PARAM-UNIT  to ES_WILIP-WILIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_BGDIM.
        ME->HANDLE_INIT_BGDIM( ).

    endcase.

  endmethod.
  method HANDLE_INIT_BGDIM.

    data: LF_TWICK type ZVCXI_FBS_TWICK,
          LF_WIBST type ZVCXI_FBS_WIBST.
    data: LS_BGWID type ZVCXI_FBS_S_BGWID,
          LS_BGHEI type ZVCXI_FBS_S_BGHEI,
          LS_OLWID type ZVCXI_FBS_S_OLWID,
          LS_GUTOP type ZVCXI_FBS_S_GUTOP,
          LS_GUBOT type ZVCXI_FBS_S_GUBOT,
          LS_GULEF type ZVCXI_F0S_S_GULEF,
          LS_GURIG type ZVCXI_F0S_S_GURIG,
          LS_FOTOP type ZVCXI_FBS_S_FOTOP,
          LS_FOBOT type ZVCXI_FBS_S_FOBOT,
          LS_WILIP type ZVCXI_FBS_S_WILIP,
          LS_WIHDI type ZVCXI_FBS_S_WIHDI,
          LS_WIHSP type ZVCXI_FBS_S_WIHSP.
    data: LT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.


***--------------------------------------------------------------------------------------
*** Get Bag Customizing of Bag Type (Outbound)
    ME->GET_IBAGT( importing ER_CUST_BAG = LR_CUST_BAG ).
    if LR_CUST_BAG is bound.
      LT_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
      LT_CSTEP = LR_CUST_BAG->GET_CSTEP( ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Bag header information
    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGWID
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_BGWID( IS_BGWID = LS_BGWID ).
    endif.

    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGHEI
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Overlap dimension value
    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_OLWID( IS_OLWID = LS_OLWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Gusset dimension values
    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_GUTOP( IS_GUTOP = LS_GUTOP ).
    endif.

    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_GUBOT( IS_GUBOT = LS_GUBOT ).
    endif.

    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_GULEF( IS_GULEF = LS_GULEF ).
    endif.

    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_GURIG( IS_GURIG = LS_GURIG ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Fold dimension values
    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_FOTOP( IS_FOTOP = LS_FOTOP ).
    endif.

    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_FOBOT( IS_FOBOT = LS_FOBOT ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Wicket dimension values
    read table LT_BGDIM with key IBDIM = ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_WILIP
                        transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_WILIP( IS_WILIP = LS_WILIP ).
    endif.
    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                                  transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_TWICK( IF_TWICK = LF_TWICK ).
      ME->SET_WIBST( IF_WIBST = LF_WIBST ).
      ME->SET_WIHDI( IS_WIHDI = LS_WIHDI ).
      ME->SET_WIHSP( IS_WIHSP = LS_WIHSP ).
    endif.


***--------------------------------------------------------------------------------------
*** Initialize Winding dimension values
    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WIND
                                  transporting no fields.
    if SY-SUBRC is not initial.
      ME->SET_BGPRL( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method SET_BGFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).

    move IF_BGFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGFPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGHEI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).

    move IS_BGHEI-BGHEI     to LS_PARAM-ATFLV.
    move IS_BGHEI-BGHEI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGHEI_CHANGED ).
    endif.

  endmethod.
  method SET_BGPRL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGPRL ).

    if IF_BGPRL is supplied.
      LS_PARAM-ATFLV = IF_BGPRL.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGPRL_CHANGED ).
    endif.

  endmethod.
  method SET_BGWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).

    move IS_BGWGT-BGWGT     to LS_PARAM-ATFLV.
    move IS_BGWGT-BGWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BGWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).

    move IS_BGWID-BGWID     to LS_PARAM-ATFLV.
    move IS_BGWID-BGWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWID_CHANGED ).
    endif.

  endmethod.
  method SET_FOBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOBOT ).

    move IS_FOBOT-FOBOT     to LS_PARAM-ATFLV.
    move IS_FOBOT-FOBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FODIM_CHANGED ).
    endif.

  endmethod.
  method SET_FOTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOTOP ).

    move IS_FOTOP-FOTOP     to LS_PARAM-ATFLV.
    move IS_FOTOP-FOTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FODIM_CHANGED ).
    endif.

  endmethod.
  method SET_GUBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUBOT ).

    move IS_GUBOT-GUBOT     to LS_PARAM-ATFLV.
    move IS_GUBOT-GUBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GULEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).

    move IS_GULEF-GULEF     to LS_PARAM-ATFLV.
    move IS_GULEF-GULEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GURIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).

    move IS_GURIG-GURIG     to LS_PARAM-ATFLV.
    move IS_GURIG-GURIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GUTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUTOP ).

    move IS_GUTOP-GUTOP     to LS_PARAM-ATFLV.
    move IS_GUTOP-GUTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_IBAGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).

    move IF_IBAGT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBAGT_CHANGED ).
    endif.

  endmethod.
  method SET_OLWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).

    move IS_OLWID-OLWID     to LS_PARAM-ATFLV.
    move IS_OLWID-OLWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OLDIM_CHANGED ).
    endif.

  endmethod.
  method SET_TWICK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TWICK ).

    move IF_TWICK to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TWICK_CHANGED ).
    endif.

  endmethod.
  method SET_WIBST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIBST ).

    move IF_WIBST     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIBST_CHANGED ).
    endif.

  endmethod.
  method SET_WIHDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHDI ).

    move IS_WIHDI-WIHDI     to LS_PARAM-ATFLV.
    move IS_WIHDI-WIHDI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIHDI_CHANGED ).
    endif.

  endmethod.
  method SET_WIHSP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHSP ).

    move IS_WIHSP-WIHSP     to LS_PARAM-ATFLV.
    move IS_WIHSP-WIHSP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIHSP_CHANGED ).
    endif.

  endmethod.
  method SET_WILIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WILIP ).

    move IS_WILIP-WILIP     to LS_PARAM-ATFLV.
    move IS_WILIP-WILIP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WILIP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LS_BGWGT           type        ZVCXI_FBS_S_BGWGT,
          LS_BGWGT_NEXT      type        ZVCXI_FBS_S_BGWGT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_FBSS_COMM_NEXT,
          LR_BL_BGFPROP      type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_BL_BGFPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

***------------------------------------------------------------------------------------------------
*** Create new Bag Forward Property Instance
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Bag Weight
      LR_COMM_NEXT->GET_BGWGT( importing ES_BGWGT = LS_BGWGT_NEXT ).
      if LS_BGWGT_NEXT is not initial.
        if LS_BGWGT is initial.
          move LS_BGWGT_NEXT to LS_BGWGT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWGT_NEXT-BGWGT
                                                              IF_CALCV_UOM_1 = LS_BGWGT_NEXT-BGWGT_UOM
                                                              IF_CALCV_2     = LS_BGWGT-BGWGT
                                                              IF_CALCV_UOM_2 = LS_BGWGT-BGWGT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                    importing EF_CALCV       = LS_BGWGT-BGWGT
                                                              EF_CALCV_UOM   = LS_BGWGT-BGWGT_UOM ).
        endif.
      endif.

***   Combine Bag Forward Property
      LR_COMM_NEXT->GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
      LR_BL_BGFPROP->MERGE( IR_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Bag Weight
    ME->SET_BGWGT( IS_BGWGT = LS_BGWGT ).

*** Forward Bag Forward Property XML
    ME->SET_BGFPX( IF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ) ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGBPX.

    data: LS_OLDIM type        ZVCXI_FBSS_S_OLDIM,
          LS_GUDIM type        ZVCXI_FBSS_S_GUDIM,
          LS_FODIM type        ZVCXI_FBSS_S_FODIM,
          LS_WIDIM type        ZVCXI_FBSS_S_WIDIM.

***--------------------------------------------------------------------------------------
*** Create fresh instance of Bag Backward Property
    ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Set Overlap Dimensions
    ME->GET_OLWID( importing ES_OLWID = LS_OLDIM-S_OLWID ).
    ER_BL_BGBPROP->SET_OLDIM( IS_OLDIM = LS_OLDIM ).

*** Set Gusset Dimensions
    ME->GET_GULEF( importing ES_GULEF = LS_GUDIM-S_GULEF ).
    ME->GET_GURIG( importing ES_GURIG = LS_GUDIM-S_GURIG ).
    ME->GET_GUTOP( importing ES_GUTOP = LS_GUDIM-S_GUTOP ).
    ME->GET_GUBOT( importing ES_GUBOT = LS_GUDIM-S_GUBOT ).
    ER_BL_BGBPROP->SET_GUDIM( IS_GUDIM = LS_GUDIM ).

*** Set Fold Dimensions
    ME->GET_FOTOP( importing ES_FOTOP = LS_FODIM-S_FOTOP ).
    ME->GET_FOBOT( importing ES_FOBOT = LS_FODIM-S_FOBOT ).
    ER_BL_BGBPROP->SET_FODIM( IS_FODIM = LS_FODIM ).

*** Set Wicket Dimensions
    ME->GET_TWICK( importing EF_TWICK = LS_WIDIM-TWICK ).
    ME->GET_WILIP( importing ES_WILIP = LS_WIDIM-S_WILIP ).
    ME->GET_WIHDI( importing ES_WIHDI = LS_WIDIM-S_WIHDI ).
    ME->GET_WIHSP( importing ES_WIHSP = LS_WIDIM-S_WIHSP ).
    ME->GET_WIBST( importing EF_WIBST = LS_WIDIM-WIBST ).
    ER_BL_BGBPROP->SET_WIDIM( IS_WIDIM = LS_WIDIM ).

*** Set Winding Dimensions
    ER_BL_BGBPROP->SET_WNDIM( IS_WNDIM = value #( BGPRL = ME->GET_BGPRL( ) ) ).

***--------------------------------------------------------------------------------------
*** Return Bag Backward Property XML (Outbound)
    move ER_BL_BGBPROP->GET_BGBPX( ) to EF_BGBPX.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).
    move LS_PARAM-STRNG to EF_BGFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI.

*** Get Bag Height (Outbound)
    ME->GET_BGHEI( importing ES_BGHEI = ES_BGHEI
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).
    move LS_PARAM-ATFLV to ES_BGWGT-BGWGT.
    move LS_PARAM-UNIT  to ES_BGWGT-BGWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID.

*** Get Bag Width (Outbound)
    ME->GET_BGWID( importing ES_BGWID = ES_BGWID
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT.

*** Get Bag Type (Outbound)
    ME->GET_IBAGT( importing EF_IBAGT    = EF_IBAGT
                             EF_SETBY    = EF_SETBY
                             EF_DESCR    = EF_DESCR
                             ER_CUST_BAG = ER_CUST_BAG ).

  endmethod.
