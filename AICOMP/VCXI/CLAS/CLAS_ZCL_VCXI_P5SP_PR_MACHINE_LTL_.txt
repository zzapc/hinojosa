
class ZCL_VCXI_P5SP_PR_MACHINE_LTL definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  interfaces ZIF_VCXI_P5SP_UMREZ_UMREN .

  methods GET_WEBWI
    exporting
      !ES_WEBWI_IN type ZVCXI_PXS_S_WEBWI
      !ES_WEBWI_OUT type ZVCXI_PXS_S_WEBWI
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_RLDIM
    returning
      value(RT_RLDIM) type ZVCXI_P5SP_TT_RLDIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_RLDIM
    returning
      value(RT_RLDIM) type ZVCXI_P5SP_TT_RLDIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_RLDIM type /VCXI/VKSC_IEVNT value 'RECALC_RLDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_UMREZ_UMREN type /VCXI/VKSC_IEVNT value 'RECALC_UMREZ_UMREN' ##NO_TEXT.

  methods SET_UMREZ_UMREN
    importing
      !IF_UMREZ type CP_UMREZ
      !IF_UMREN type CP_UMREN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLDIM
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_RLDIM
    importing
      !IF_NOOUT type ZVCXI_XCS_NOOUT optional
      !IT_RLDIM type ZVCXI_P5SP_TT_RLDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_UMREZ_UMREN
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P5SP_PR_MACHINE_LTL definition
class ZCL_VCXI_P5SP_PR_MACHINE_LTL implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDs
    move C_PARID_MQTYI_L to ME->F_PARID_MQTYI.
    move C_PARID_MQTYO_L to ME->F_PARID_MQTYO.
    move C_PARID_MSRWA_L to ME->F_PARID_MSRWA.
    move C_PARID_MSSWA_L to ME->F_PARID_MSSWA.

*** Get Inbound Dimension
    call function 'DIMENSION_GET'
      exporting
        LENGTH              = 1
      importing
        DIMID               = ME->F_DIMNI
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Outbound Dimension
    call function 'DIMENSION_GET'
      exporting
        LENGTH              = 1
      importing
        DIMID               = ME->F_DIMNO
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method GET_MFI_RLDIM.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_RLDIM type ref to ZIF_VCXI_P5SP_RLDIM.


    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow In
    LT_GATE = ME->R_PR_MFMGR->GET_MFI( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow In available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '210' ).
    endif.

*** Get Dimensions of all
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_RLDIM.
          check LR_RLDIM is bound.

          insert LR_RLDIM->GET_RLDIM( ) into table RT_RLDIM.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_MFO_RLDIM.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_RLDIM type ref to ZIF_VCXI_P5SP_RLDIM.


    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow Out
    LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow Out available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '209' ).
    endif.

*** Get Dimensions of all
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_RLDIM.
          check LR_RLDIM is bound.

          insert LR_RLDIM->GET_RLDIM( ) into table RT_RLDIM.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_WEBWI.

*** Total Width (Inbound)
    if ES_WEBWI_IN is requested.
      ES_WEBWI_IN = ZCL_VCXI_P5SP_SERVICE=>GET_WEBWI( IT_RLDIM = ME->GET_MFI_RLDIM( ) ).
    endif.

*** Total Width (Outbound)
    if ES_WEBWI_OUT is requested.
      ES_WEBWI_OUT = ZCL_VCXI_P5SP_SERVICE=>GET_WEBWI( IT_RLDIM = ME->GET_MFO_RLDIM( ) ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_RLDIM.
        ME->HANDLE_RECALC_RLDIM( ).

      when C_IEVNT_I_RECALC_UMREZ_UMREN.
        ME->HANDLE_RECALC_UMREZ_UMREN( ).
    endcase.

  endmethod.
method HANDLE_RECALC_RLDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LT_RLDIM     type        ZVCXI_P5SP_TT_RLDIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_RLDIM type ref to ZIF_VCXI_P5SP_ADJ_RLDIM.

  check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension of Material Flow In
  move ME->GET_MFI_RLDIM( ) to LT_RLDIM.

***--------------------------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the Roll Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P5SP_ADJ_RLDIM=>C_IPRVT_ADJ_RLDIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_RLDIM.
        check LR_ADJ_RLDIM is bound.

        LR_ADJ_RLDIM->CALC_RLDIM_OUT( changing CT_RLDIM = LT_RLDIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***--------------------------------------------------------------------------------------
*** Set new Roll Dimension of Material Flow
  ME->SET_MFO_RLDIM( IT_RLDIM = LT_RLDIM ).

endmethod.
  method HANDLE_RECALC_UMREZ_UMREN.

    data: LF_UMREZ type CP_UMREZ,
          LF_UMREN type CP_UMREN.


    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Web Width Out (Adjusted by Numerator/Denominator) as Base
    loop at ME->R_PR_MFMGR->GET_MFO( ) into data(LR_GATE).
      check LR_GATE->R_CLSPR is instance of ZIF_VCXI_P5SP_UMREZ_UMREN and
            LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFO.
***   Dont't consider inactive MFSO
      check cast ZIF_VCXI_XCSP_MFSO( LR_GATE->R_CLSPR )->IS_ACTIVE_BY_CSPLIT( ) ne 2.

***   Get Numerator and Denominator of Material Flow Out
      cast ZIF_VCXI_P5SP_UMREZ_UMREN( LR_GATE->R_CLSPR )->GET_UMREZ_UMREN( importing EF_UMREZ = LF_UMREZ
                                                                                     EF_UMREN = LF_UMREN ).

      LF_UMREZ = LF_UMREZ * cast ZIF_VCXI_XCSP_MFO( LR_GATE->R_CLSPR )->GET_NOOUT( ).

    endloop.

*** Set new Values
    ME->SET_UMREZ_UMREN( IF_UMREZ = LF_UMREZ
                         IF_UMREN = LF_UMREN ).

  endmethod.
  method SET_MFO_RLDIM.

    data: LS_RLDIM     type ZVCXI_P5SP_S_RLDIM,
          LS_RLDIM_OLD type ZVCXI_P5SP_S_RLDIM.
    data: LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE,
          LR_MFO  type ref to ZIF_VCXI_P5SP_MFO.


    check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
    LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Set Dimensions to all
    loop at LT_GATE into LR_GATE.
      clear: LS_RLDIM.

      read table IT_RLDIM into LS_RLDIM index SY-TABIX.
      try.
          move LR_GATE->R_CLSPR ?to LR_MFO.
          check LR_MFO is bound.

***       Set new Roll Dimensions
          LR_MFO->SET_RLDIM( IS_RLDIM = LS_RLDIM ).

***       Check if Conversion for Machine Quantity changed
          break CHECK_AGAIN. " Checking against empty value in LS_RLDIM_OLD-NOUPS?
          if LS_RLDIM-NOUPS ne LS_RLDIM_OLD-NOUPS.
***         Send Event
            ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method SET_UMREZ_UMREN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***------------------------------------------------------------------------------------------------
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_UMREZ_UMREN~C_PARID_UMREZ ).

    LS_PARAM-ATFLV = IF_UMREZ.
    LS_PARAM-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P5SP_UMREZ_UMREN~C_IEVNT_O_UMREZ_UMREN_CHANGED ).
    endif.

***------------------------------------------------------------------------------------------------
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_UMREZ_UMREN~C_PARID_UMREN ).

    LS_PARAM-ATFLV = IF_UMREN.
    LS_PARAM-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P5SP_UMREZ_UMREN~C_IEVNT_O_UMREZ_UMREN_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SP_UMREZ_UMREN~GET_UMREZ_UMREN.

    EF_UMREZ = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_UMREZ_UMREN~C_PARID_UMREZ )-ATFLV.
    EF_UMREN = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_UMREZ_UMREN~C_PARID_UMREN )-ATFLV.

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

    data: LF_NOOUT     type        ZVCXI_XCS_NOOUT,
          LF_NOUPS_OUT type        ZVCXI_P0SS_NOUPS,
          LF_NOUPS_IN  type        ZVCXI_P0SS_NOUPS.
    data: LS_RLDIM     type        ZVCXI_P5SP_S_RLDIM.
    data: LT_RLDIM_OUT type        ZVCXI_P5SP_TT_RLDIM,
          LT_RLDIM_IN  type        ZVCXI_P5SP_TT_RLDIM.


***----------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    RS_MQTYI-MQTYI_UOM = ME->GET_MQTYI( )-MQTYI_UOM.

***----------------------------------------------------------------------------
    try.
***     Get Roll Dimension of Material Flow In and Out
        move ME->GET_MFI_RLDIM( ) to LT_RLDIM_IN.
        move ME->GET_MFO_RLDIM( ) to LT_RLDIM_OUT.
      catch /VCXI/CX_CKX.
        return.
    endtry.

***----------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_RLDIM_OUT ) eq 0.
      return.

***----------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_RLDIM_OUT ) eq 1.

***   Get No Ups of Flow Out
      read table LT_RLDIM_OUT into LS_RLDIM index 1.
      if SY-SUBRC eq 0.
        move LS_RLDIM-NOUPS to LF_NOUPS_OUT.
      endif.
      check LF_NOUPS_OUT is not initial.

***   Get No Ups of Flow In
      loop at LT_RLDIM_IN into LS_RLDIM.
***     Take maximum No of Ups
        if LS_RLDIM-NOUPS gt LF_NOUPS_IN.
          move LS_RLDIM-NOUPS to LF_NOUPS_IN.
        endif.
      endloop.
      check LF_NOUPS_IN is not initial.

***   Convert it to Machine Quantity In
      RS_MQTYI-MQTYI = IS_QTY-QTY * LF_NOUPS_OUT / LF_NOUPS_IN.

***----------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Get Total Number of Out
      loop at LT_RLDIM_OUT into LS_RLDIM.
        LF_NOOUT = LF_NOOUT + LS_RLDIM-NOOUT.
      endloop.
      check LF_NOOUT is not initial.

***   Convert it to Machine Quantity In using the Total Out
      RS_MQTYI-MQTYI = IS_QTY-QTY / LF_NOOUT.
    endif.

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

    data: LF_NOUPS_IN  type ZVCXI_P0SS_NOUPS.
    data: LS_RLDIM type ZVCXI_P5SP_S_RLDIM,
          LS_MQTYO type ZVCXI_XCSP_S_MQTYO.
    data: LT_RLDIM_IN  type ZVCXI_P5SP_TT_RLDIM,
          LT_RLDIM_OUT type ZVCXI_P5SP_TT_RLDIM.


***--------------------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    move ME->GET_MQTYO( ) to RS_MQTYO.
    clear RS_MQTYO-MQTYO.

***--------------------------------------------------------------------------------------
    try.
***     Get Roll Dimension of Material Flow In and Out
        move ME->GET_MFI_RLDIM( ) to LT_RLDIM_IN.
        move ME->GET_MFO_RLDIM( ) to LT_RLDIM_OUT.
      catch /VCXI/CX_CKX.
        return.
    endtry.

***--------------------------------------------------------------------------------------
*** Get No Ups of Flow In
    loop at LT_RLDIM_IN into LS_RLDIM.
***   Take maximum No Ups
      if LS_RLDIM-NOUPS gt LF_NOUPS_IN.
        move LS_RLDIM-NOUPS to LF_NOUPS_IN.
      endif.
    endloop.

    check LF_NOUPS_IN is not initial.

***--------------------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_RLDIM_OUT ) eq 0.
      return.

***--------------------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_RLDIM_OUT ) eq 1.

***   Get PC Ups of Flow Out
      read table LT_RLDIM_OUT into LS_RLDIM index 1.

      if LS_RLDIM-NOUPS ne 0.
***     Convert it To Machine Quantity Out and Round to PC Type Out
        RS_MQTYO-MQTYO = IS_QTY-QTY * LF_NOUPS_IN / LS_RLDIM-NOUPS.
      else.
        clear RS_MQTYO-MQTYO.
        return.
      endif.

***--------------------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Calculate each Output
      loop at LT_RLDIM_OUT into LS_RLDIM.
        if LS_RLDIM-NOUPS ne 0.
***       Convert it to Machine Quantity Out
          LS_MQTYO-MQTYO = IS_QTY-QTY * LS_RLDIM-NOOUT.

***       Add to Total Quantity
          add LS_MQTYO-MQTYO to RS_MQTYO-MQTYO.
        else.
          clear RS_MQTYO-MQTYO.
          exit.
        endif.
      endloop.
    endif.


***----------------------------------------------------------------------------
*** Round by Unit Definition
    ZCL_VCXI_XCS_SERVICE_UNIT=>ROUND_UNIT( exporting IF_UOM   = RS_MQTYO-MQTYO_UOM
                                           changing  CF_VALUE = RS_MQTYO-MQTYO ).

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT.

    SUPER->ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT( importing EF_ICSPA = EF_ICSPA
                                                         ES_DCSPL = ES_DCSPL ).

*** Don't consider Component Factor
    EF_COMPF = 1.

  endmethod.
