
class ZCL_VCXI_PCSS_UI_COMP_SFG definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.
  type-pools VRM .

  interfaces /VCXI/IF_VKSU_UIFW .

  data F_ACTIVE_TAB type STRING .
  data F_ACTIVE_TAB_OLD type STRING .
  data F_CURSOR type SCRFNAME .
  data F_DYNNR_SUBSC_TAB type DYNNR read-only .
  data F_DYNNR_SUBSC_PSCALE type DYNNR read-only .
  data R_DEFAULT_GATE type ref to /VCXI/CL_VKSR_GATE .
  data S_COMP_SFG_TAB type ZVCXI_P0SS_S_SFG_TAB_DESCR .
  data S_COMP_SFG_VIS type ZVCXI_PCSS_S_COMP_SFG_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BY_COMP_SFG_VIS
    importing
      !IS_COMP_SFG_VIS type ZVCXI_PCSS_S_COMP_SFG_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_DYNNR_INITIAL type DYNNR value '9999'. "#EC NOTEXT
  constants C_DYNNR_PSCALE type DYNNR value '0110'. "#EC NOTEXT
  constants C_TAB type STRING value 'TAB'. "#EC NOTEXT
  constants C_TABNAME type STRING value '0101S_TAB-TAB'. "#EC NOTEXT
  type-pools ABAP .
  data F_ALREADY_OPEN type ABAP_BOOL .
  data F_TAB_LIST_REFRESH_REQ type ABAP_BOOL .
  data R_GRID_PSCALE type ref to ZCL_VCXI_XCS_GRID_PSCALE .
  data R_OLD_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_PR_COMP_SFG type ref to ZCL_VCXI_PCSS_PR_COMP_SFG .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_XCS_TT_TAB_LIST .
  constants C_DYNNR_TAB type DYNNR value '0101'. "#EC NOTEXT
  constants C_TABNAME_PSCALE type STRING value '0101S_TAB-PSCALE'. "#EC NOTEXT

  methods LOAD_BOARD_INFO
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_ACTIVE_TAB
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSS_UI_COMP_SFG definition
class ZCL_VCXI_PCSS_UI_COMP_SFG implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.

endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI to ME->R_REGISTERED_UI.

endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PCSS_UI_COMP_SFG_BIND'
    exporting
      IR_UI_COMP_SFG = ME
    importing
      ES_DYNP        = ME->S_DYNP.

*** Create Grid for Price Scale
  create object ME->R_GRID_PSCALE
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0110CC_PSCALE'.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_COMP_SFG.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class doesn't work together with PR ABAP Class
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Request Init List for Tabs
  move ABAP_TRUE to ME->F_TAB_LIST_REFRESH_REQ.

*** Initialize Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_PSCALE is bound.
    ME->R_GRID_PSCALE->DO_FREE( ).
    clear ME->R_GRID_PSCALE.
  endif.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

endmethod.
method DISPLAY_ACTIVE_TAB.

  data:  LS_TAB_LIST    type        ZVCXI_XCSP_S_TAB_LIST.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  check ME->F_ACTIVE_TAB cs C_TABNAME.

  check ME->F_ACTIVE_TAB   ne ME->F_ACTIVE_TAB_OLD
     or ME->F_ALREADY_OPEN eq ABAP_FALSE.

  read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
  if SY-SUBRC eq 0.
    move LS_TAB_LIST-R_GATE to LR_GATE.
  endif.

  R_OLD_GATE = LR_GATE.

  ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

      SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                               IF_DYNNR = IF_DYNNR ).

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).

      loop at screen.
***     Set the Tabs which aren't in use as invisible.
        if SCREEN-NAME cs C_TABNAME.
          read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
          if SY-SUBRC ne 0.
            move 1 to SCREEN-INVISIBLE.
          endif.
        endif.
        if ME->R_PR_COMP_SFG->GET_PURCH( ) ne ZCL_VCXI_XCsS_PR_MS=>C_PURCH_DIRECT_PRICE and
           SCREEN-NAME cs C_TABNAME_PSCALE.
          move 1 to SCREEN-INVISIBLE.
        endif.
        modify screen.
      endloop.

***   Modify Screen using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

      loop at screen.
***     Set Board Fields to no Input if we have no DUMMY Material
        if ME->R_PR_COMP_SFG->IS_DUMMY( ) eq ABAP_FALSE and
           SCREEN-GROUP1                  eq 'STO'.
          move 0 to SCREEN-INPUT.
        endif.

        if ME->R_PR_COMP_SFG->IS_DUMMY( ) eq ABAP_FALSE and
           SCREEN-GROUP2                  eq 'STO'.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Purchase Flag to No Input for Dummy
        if ME->R_PR_COMP_SFG->IS_DUMMY( ) eq ABAP_TRUE and
           SCREEN-GROUP1                  eq 'FPU'.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Purchased Field to not visible if we have no Puchased Material
        if ME->R_PR_COMP_SFG->GET_PURCH( ) eq ZCL_VCXI_XCsS_PR_MS=>C_PURCH_STOCK and
           SCREEN-GROUP1                   eq 'PUR'.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Trigger PR in case of Purchased to no Input
        if ME->R_PR_COMP_SFG->GET_PURCH( ) eq ZCL_VCXI_XCsS_PR_MS=>C_PURCH_STOCK and
           SCREEN-GROUP1                   eq 'TPR'.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Print Inside to no Input if it is not active
        if ME->R_PR_COMP_SFG->GET_FLPRI( ) eq ABAP_FALSE and
           SCREEN-GROUP1                   eq 'PRI'.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Print Outside to no Input if it is not active
        if ME->R_PR_COMP_SFG->GET_FLPRO( ) eq ABAP_FALSE and
           SCREEN-GROUP1                   eq 'PRO'.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Print Details to invisible if it is not active
        if ME->R_PR_COMP_SFG->IS_SP_PRINT_ACTIVE( ) eq ABAP_FALSE and
           SCREEN-GROUP3                            eq 'PRD'.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
          move 0 to SCREEN-INPUT.
        endif.

***     Printing is not editable if we have Printing Calculated
        if SCREEN-GROUP4                             eq 'PRI' and
           ME->R_PR_COMP_SFG->IS_PRINT_CALCULATED( ) eq ABAP_TRUE.
          SCREEN-INPUT = 0.
        endif.

***     Set all Fields to no Input
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.

***     Set tabs back to input
        if SCREEN-NAME cs C_TABNAME or
           SCREEN-NAME cs C_TABNAME_PSCALE.
          move 1 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  if ME->F_ACTIVE_TAB ne ME->F_ACTIVE_TAB_OLD.
    move ME->F_ACTIVE_TAB to ME->F_ACTIVE_TAB_OLD.
    clear: ME->F_ALREADY_OPEN.
  endif.

  ME->INIT_VIS( ).
  ME->INIT_TAB_LIST( ).
  ME->DISPLAY_ACTIVE_TAB( ).

*** Set Screen for Tabs
  if ME->T_TAB_LIST is not initial or
     ME->R_PR_COMP_SFG->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
    move C_DYNNR_TAB to ME->F_DYNNR_SUBSC_TAB.
  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC_TAB.
  endif.

*** Set right subscreen for Price Scale
  if ME->R_PR_COMP_SFG->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
    move 'Price Scales'(D01) to S_COMP_SFG_TAB-PSCALE.
    move C_DYNNR_PSCALE to ME->F_DYNNR_SUBSC_PSCALE.

*** Refresh Grid
    if ME->R_GRID_PSCALE is bound.
      if ME->R_GRID_PSCALE->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_PSCALE->F_REFRESH_REQ.
      endif.
      ME->R_GRID_PSCALE->REFRESH_GRID( ).
    endif.

  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC_PSCALE.
  endif.

*** Set Cursor
  ME->SET_CURSOR( ).

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_PSCALE is bound.
    ME->R_GRID_PSCALE->CHECK_CHANGED_DATA( ).
  endif.

  if IF_UCOMM cs C_TABNAME        or
     IF_UCOMM cs C_TABNAME_PSCALE.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

  move IF_UCOMM to LF_UCOMM.
  ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

  case IF_UCOMM.
*** Load Board Informations
    when '0100UC_LOAD_BOARD'.
      ME->LOAD_BOARD_INFO( ).
  endcase.

endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_COMP_SFG.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method INIT_TAB_LIST.

  data:           LF_TAB             type         NUMC3,
                  LF_FNAME           type         STRING.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_GATE_CHILD      type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF,
                  LS_TAB_LIST        type         ZVCXI_PCSS_S_TAB_LIST.
  field-symbols:  <S_TAB_LIST>       type         ZVCXI_PCSS_S_TAB_LIST,
                  <F_DESCR>          type         /VCXI/CKX_DESCR.

*** Save "Gate" of selected tab befor refresh
  if ME->R_DEFAULT_GATE is not bound and
     ME->F_ACTIVE_TAB   is not initial.
    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    if LS_TAB_LIST-R_GATE          is bound and
       LS_TAB_LIST-R_GATE->F_FREED eq ABAP_FALSE.
      move LS_TAB_LIST-R_GATE to ME->R_DEFAULT_GATE.
    endif.
  endif.

  free: ME->T_TAB_LIST,
        ME->S_COMP_SFG_TAB,
        LF_TAB.

***------------------------------------------------------------------
*** Get all Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE to LT_GATE_CHILD.
  endloop.
  sort LT_GATE_CHILD.
  delete adjacent duplicates from LT_GATE_CHILD.

***------------------------------------------------------------------
*** Sort Children
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

  loop at LT_GATE_CHILD into LR_GATE.

    check LR_GATE->GET_CLSUI( ) is not initial.

    append initial line to ME->T_TAB_LIST assigning <S_TAB_LIST>.
    add 1 to LF_TAB.
    concatenate C_TABNAME LF_TAB into <S_TAB_LIST>-TABNAME.
    move LR_GATE                   to <S_TAB_LIST>-R_GATE.

*** Set Activ Tab if it was set by default Gate
    if ME->R_DEFAULT_GATE is bound and
       LR_GATE eq ME->R_DEFAULT_GATE.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
      if LR_GATE ne ME->R_OLD_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
*** Default gate is not bound but Gate of Activ Tab do not match
    elseif ME->R_DEFAULT_GATE is not bound.
      if ME->F_ACTIVE_TAB eq <S_TAB_LIST>-TABNAME and
         ME->R_OLD_GATE   ne LR_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
***   Otherwise the first Tab is the default Tab
      elseif ME->F_ACTIVE_TAB is initial.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
      endif.
    endif.

    concatenate C_TAB LF_TAB into LF_FNAME.
    assign component LF_FNAME of structure ME->S_COMP_SFG_TAB to <F_DESCR>.
    if SY-SUBRC eq 0.
      if <S_TAB_LIST>-R_GATE->R_CLSPR is bound.
        move <S_TAB_LIST>-R_GATE->R_CLSPR->GET_DESCR( ) to <F_DESCR>.
      else.
        move <S_TAB_LIST>-R_GATE->GET_DESCR( ) to <F_DESCR>.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------
*** Clear Default gate
  clear: ME->R_DEFAULT_GATE.

*** Check Active Tab exists
  if ME->F_ACTIVE_TAB cs C_TABNAME.
    read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                              transporting no fields.
    if SY-SUBRC ne 0.
      read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
      if SY-SUBRC eq 0.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      else.
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.
  endif.

endmethod.
method INIT_VIS.

  data:  LS_ABLAN          type ZVCXI_P0SS_S_ABLAN,
         LS_WNEPP          type ZVCXI_P0SS_S_WNEPP,
         LS_CALIP          type ZVCXI_P0SS_S_CALIP,
         LS_PROLE          type ZVCXI_P0S_S_PROLE,
         LS_PROWI          type ZVCXI_P0S_S_PROWI,
         LS_PROHE          type ZVCXI_P0S_S_PROHE,
         LS_FOLLE          type ZVCXI_P0SS_S_FOLLE,
         LS_FOLWI          type ZVCXI_P0SS_S_FOLWI,
         LS_FOLHE          type ZVCXI_P0SS_S_FOLHE.

  free: ME->S_COMP_SFG_VIS.
  check ME->R_PR_COMP_SFG is bound.

*** Get Material Number
  move ME->R_PR_COMP_SFG->GET_MATNR( )        to ME->S_COMP_SFG_VIS-MATNR.
  move ME->R_PR_COMP_SFG->GET_MATNR_DESCR( )  to ME->S_COMP_SFG_VIS-MATNR_DESCR.

*** Get Vendor Number
  move ME->R_PR_COMP_SFG->GET_LIFNR( )        to ME->S_COMP_SFG_VIS-LIFNR.
  move ME->R_PR_COMP_SFG->GET_LIFNR_DESCR( )  to ME->S_COMP_SFG_VIS-LIFNR_DESCR.

  move ME->R_PR_COMP_SFG->GET_PURCH( )        to ME->S_COMP_SFG_VIS-PURCH.

*** Get Trigger PR
  move ME->R_PR_COMP_SFG->GET_TRFPR( )        to ME->S_COMP_SFG_VIS-TRFPR.

*** Get Component Ratio
  move ME->R_PR_COMP_SFG->GET_COMPR( )        to ME->S_COMP_SFG_VIS-COMPR.

*** Get Production Pass
  move ME->R_PR_COMP_SFG->GET_PPASS( )        to ME->S_COMP_SFG_VIS-PPASS.

*** Get Component Product Type
  move ME->R_PR_COMP_SFG->GET_COMPP( )        to ME->S_COMP_SFG_VIS-COMPP.
  move ME->R_PR_COMP_SFG->GET_COMPP_DESCR( )  to ME->S_COMP_SFG_VIS-COMPP_DESCR.

*** Get Fefco
  move ME->R_PR_COMP_SFG->GET_FEFCO( )        to ME->S_COMP_SFG_VIS-FEFCO.
  move ME->R_PR_COMP_SFG->GET_FEFCO_DESCR( )  to ME->S_COMP_SFG_VIS-FEFCO_DESCR.

*** Get Part of Box
  move ME->R_PR_COMP_SFG->GET_BOXPA( )        to ME->S_COMP_SFG_VIS-BOXPA.
  move ME->R_PR_COMP_SFG->GET_BOXPA_DESCR( )  to ME->S_COMP_SFG_VIS-BOXPA_DESCR.

*** Get Product Dimensions
  move ME->R_PR_COMP_SFG->GET_PROLE( )        to LS_PROLE.
  move-corresponding LS_PROLE                 to ME->S_COMP_SFG_VIS.

  move ME->R_PR_COMP_SFG->GET_PROWI( )        to LS_PROWI.
  move-corresponding LS_PROWI                 to ME->S_COMP_SFG_VIS.

  move ME->R_PR_COMP_SFG->GET_PROHE( )        to LS_PROHE.
  move-corresponding LS_PROHE                 to ME->S_COMP_SFG_VIS.

*** Get Area and Weight
  move ME->R_PR_COMP_SFG->GET_ABLAN( )        to LS_ABLAN.
  move-corresponding LS_ABLAN                 to ME->S_COMP_SFG_VIS.

  move ME->R_PR_COMP_SFG->GET_WNEPP( )        to LS_WNEPP.
  move-corresponding LS_WNEPP                 to ME->S_COMP_SFG_VIS.

*** Get Board Descirpiton
  move ME->R_PR_COMP_SFG->GET_SBDES( )        to ME->S_COMP_SFG_VIS-SBDES.
  move ME->R_PR_COMP_SFG->GET_PBDES( )        to ME->S_COMP_SFG_VIS-PBDES.

*** Get Flute
  move ME->R_PR_COMP_SFG->GET_FLUTE( )        to ME->S_COMP_SFG_VIS-FLUTE.

*** Get Caliper
  move ME->R_PR_COMP_SFG->GET_CALIP( )        to LS_CALIP.
  move-corresponding LS_CALIP                 to ME->S_COMP_SFG_VIS.

*** Get Print Inside
  move ME->R_PR_COMP_SFG->GET_FLPRI( )        to ME->S_COMP_SFG_VIS-FLPRI.
  move ME->R_PR_COMP_SFG->GET_PRTYI( )        to ME->S_COMP_SFG_VIS-PRTYI.
  move ME->R_PR_COMP_SFG->GET_NOCOI( )        to ME->S_COMP_SFG_VIS-NOCOI.
  move ME->R_PR_COMP_SFG->GET_PRDEI( )        to ME->S_COMP_SFG_VIS-PRDEI.

*** Get Print Outside
  move ME->R_PR_COMP_SFG->GET_FLPRO( )        to ME->S_COMP_SFG_VIS-FLPRO.
  move ME->R_PR_COMP_SFG->GET_PRTYO( )        to ME->S_COMP_SFG_VIS-PRTYO.
  move ME->R_PR_COMP_SFG->GET_NOCOO( )        to ME->S_COMP_SFG_VIS-NOCOO.
  move ME->R_PR_COMP_SFG->GET_PRDEO( )        to ME->S_COMP_SFG_VIS-PRDEO.

*** Get Folding Dimensions
  ME->R_PR_COMP_SFG->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
  move-corresponding LS_FOLLE                 to ME->S_COMP_SFG_VIS.

  ME->R_PR_COMP_SFG->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
  move-corresponding LS_FOLWI                 to ME->S_COMP_SFG_VIS.

  ME->R_PR_COMP_SFG->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).
  move-corresponding LS_FOLHE                 to ME->S_COMP_SFG_VIS.

*** Get Flag - Price Scael modified
  move ME->R_PR_COMP_SFG->GET_FPSMO( )        to ME->S_COMP_SFG_VIS-FPSMO.

endmethod.                    "INIT_VIS
  method LOAD_BOARD_INFO.

    data: LF_BOARD type ZVCXI_PCS_BOARD,
          LF_MBOAR type ZVCXI_PCSS_MBOAR,
          LF_WERKS type WERKS_D.


*** Set Plant as Parameter
    data(LR_APPDATA) = ME->R_GATE->GET_APPDATA( ).
    set parameter id 'WRK' field LR_APPDATA->F_WERKS.

***----------------------------------------------------------------------------
*** Call Search Help for Board
    ZCL_VCXI_PCSS_CUST_BOARD=>SHLP_LOAD_BOARD( exporting IF_DCONF  = LR_APPDATA->F_DCONF
                                                         IF_LOCKED = ME->R_GATE->IS_LOCKED( )
                                               importing EF_BOARD  = LF_BOARD
                                                         EF_MBOAR  = LF_MBOAR
                                                         EF_WERKS  = LF_WERKS ).

*** Load Board
    check LF_BOARD is not initial and
          LF_MBOAR is not initial.
    ME->R_PR_COMP_SFG->LOAD_BOARD_INFO( IF_BOARD = LF_BOARD
                                        IF_WERKS = LF_WERKS
                                        IF_MBOAR = LF_MBOAR ).

  endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
    ME->F_ALREADY_OPEN = ABAP_TRUE.
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method UPDATE_BY_COMP_SFG_VIS.

  data:  LS_CALIP          type ZVCXI_P0SS_S_CALIP,
         LS_ABLAN          type ZVCXI_P0SS_S_ABLAN,
         LS_WNEPP          type ZVCXI_P0SS_S_WNEPP,
         LS_PROLE          type ZVCXI_P0S_S_PROLE,
         LS_PROWI          type ZVCXI_P0S_S_PROWI,
         LS_PROHE          type ZVCXI_P0S_S_PROHE,
         LS_FOLLE          type ZVCXI_P0SS_S_FOLLE,
         LS_FOLWI          type ZVCXI_P0SS_S_FOLWI,
         LS_FOLHE          type ZVCXI_P0SS_S_FOLHE.

  check ME->R_PR_COMP_SFG is bound.

*** Set Material Number
  if ME->S_COMP_SFG_VIS-MATNR ne IS_COMP_SFG_VIS-MATNR.
    ME->R_PR_COMP_SFG->SET_MATNR( IF_MATNR = IS_COMP_SFG_VIS-MATNR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Purchase Flag
  if ME->S_COMP_SFG_VIS-PURCH ne IS_COMP_SFG_VIS-PURCH.
    ME->R_PR_COMP_SFG->SET_PURCH( IF_PURCH = IS_COMP_SFG_VIS-PURCH
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Vendor Number
  if ME->S_COMP_SFG_VIS-LIFNR ne IS_COMP_SFG_VIS-LIFNR.
    ME->R_PR_COMP_SFG->SET_LIFNR( IF_LIFNR = IS_COMP_SFG_VIS-LIFNR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Trigger PR
  if ME->S_COMP_SFG_VIS-TRFPR ne IS_COMP_SFG_VIS-TRFPR.
    ME->R_PR_COMP_SFG->SET_TRFPR( IF_TRFPR = IS_COMP_SFG_VIS-TRFPR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Component Ratio
  if ME->S_COMP_SFG_VIS-COMPR ne IS_COMP_SFG_VIS-COMPR.
    ME->R_PR_COMP_SFG->SET_COMPR( IF_COMPR = IS_COMP_SFG_VIS-COMPR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Production Pass
  if ME->S_COMP_SFG_VIS-PPASS ne IS_COMP_SFG_VIS-PPASS.
    ME->R_PR_COMP_SFG->SET_PPASS( IF_PPASS = IS_COMP_SFG_VIS-PPASS
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Component Product Type
  if ME->S_COMP_SFG_VIS-COMPP ne IS_COMP_SFG_VIS-COMPP.
    ME->R_PR_COMP_SFG->SET_COMPP( IF_COMPP = IS_COMP_SFG_VIS-COMPP
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Fefco
  if ME->S_COMP_SFG_VIS-FEFCO ne IS_COMP_SFG_VIS-FEFCO.
    ME->R_PR_COMP_SFG->SET_FEFCO( IF_FEFCO = IS_COMP_SFG_VIS-FEFCO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Part of Box
  if ME->S_COMP_SFG_VIS-BOXPA ne IS_COMP_SFG_VIS-BOXPA.
    ME->R_PR_COMP_SFG->SET_BOXPA( IF_BOXPA = IS_COMP_SFG_VIS-BOXPA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Board Description
  if ME->S_COMP_SFG_VIS-SBDES ne IS_COMP_SFG_VIS-SBDES.
    ME->R_PR_COMP_SFG->SET_SBDES( IF_SBDES = IS_COMP_SFG_VIS-SBDES
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PBDES ne IS_COMP_SFG_VIS-PBDES.
    ME->R_PR_COMP_SFG->SET_PBDES( IF_PBDES = IS_COMP_SFG_VIS-PBDES
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Flute
  if ME->S_COMP_SFG_VIS-FLUTE ne IS_COMP_SFG_VIS-FLUTE.
    ME->R_PR_COMP_SFG->SET_FLUTE( IF_FLUTE = IS_COMP_SFG_VIS-FLUTE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Product Dimensions
  if ME->S_COMP_SFG_VIS-PROLE ne IS_COMP_SFG_VIS-PROLE.
    move-corresponding IS_COMP_SFG_VIS to LS_PROLE.
    ME->R_PR_COMP_SFG->SET_PROLE( IS_PROLE = LS_PROLE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PROWI ne IS_COMP_SFG_VIS-PROWI.
    move-corresponding IS_COMP_SFG_VIS to LS_PROWI.
    ME->R_PR_COMP_SFG->SET_PROWI( IS_PROWI = LS_PROWI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PROHE ne IS_COMP_SFG_VIS-PROHE.
    move-corresponding IS_COMP_SFG_VIS to LS_PROHE.
    ME->R_PR_COMP_SFG->SET_PROHE( IS_PROHE = LS_PROHE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Area and Weight
  if ME->S_COMP_SFG_VIS-ABLAN ne IS_COMP_SFG_VIS-ABLAN.
    move-corresponding IS_COMP_SFG_VIS to LS_ABLAN.
    ME->R_PR_COMP_SFG->SET_ABLAN( IS_ABLAN = LS_ABLAN
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-WNEPP ne IS_COMP_SFG_VIS-WNEPP.
    move-corresponding IS_COMP_SFG_VIS to LS_WNEPP.
    ME->R_PR_COMP_SFG->SET_WNEPP( IS_WNEPP = LS_WNEPP
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Caliper
  if ME->S_COMP_SFG_VIS-CALIP ne IS_COMP_SFG_VIS-CALIP.
    move-corresponding IS_COMP_SFG_VIS to LS_CALIP.
    ME->R_PR_COMP_SFG->SET_CALIP( IS_CALIP = LS_CALIP
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Print inside
  if ME->S_COMP_SFG_VIS-FLPRI ne IS_COMP_SFG_VIS-FLPRI.
    ME->R_PR_COMP_SFG->SET_FLPRI( IF_FLPRI = IS_COMP_SFG_VIS-FLPRI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PRTYI ne IS_COMP_SFG_VIS-PRTYI.
    ME->R_PR_COMP_SFG->SET_PRTYI( IF_PRTYI = IS_COMP_SFG_VIS-PRTYI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-NOCOI ne IS_COMP_SFG_VIS-NOCOI.
    ME->R_PR_COMP_SFG->SET_NOCOI( IF_NOCOI = IS_COMP_SFG_VIS-NOCOI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PRDEI ne IS_COMP_SFG_VIS-PRDEI.
    ME->R_PR_COMP_SFG->SET_PRDEI( IF_PRDEI = IS_COMP_SFG_VIS-PRDEI ).
  endif.

*** Set Print outside
  if ME->S_COMP_SFG_VIS-FLPRO ne IS_COMP_SFG_VIS-FLPRO.
    ME->R_PR_COMP_SFG->SET_FLPRO( IF_FLPRO = IS_COMP_SFG_VIS-FLPRO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PRTYO ne IS_COMP_SFG_VIS-PRTYO.
    ME->R_PR_COMP_SFG->SET_PRTYO( IF_PRTYO = IS_COMP_SFG_VIS-PRTYO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-NOCOO ne IS_COMP_SFG_VIS-NOCOO.
    ME->R_PR_COMP_SFG->SET_NOCOO( IF_NOCOO = IS_COMP_SFG_VIS-NOCOO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-PRDEO ne IS_COMP_SFG_VIS-PRDEO.
    ME->R_PR_COMP_SFG->SET_PRDEO( IF_PRDEO = IS_COMP_SFG_VIS-PRDEO ).
  endif.

*** Set Folding Dimensions
  if ME->S_COMP_SFG_VIS-FOLLE ne IS_COMP_SFG_VIS-FOLLE.
    move-corresponding IS_COMP_SFG_VIS to LS_FOLLE.
    ME->R_PR_COMP_SFG->SET_FOLLE( IS_FOLLE = LS_FOLLE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-FOLWI ne IS_COMP_SFG_VIS-FOLWI.
    move-corresponding IS_COMP_SFG_VIS to LS_FOLWI.
    ME->R_PR_COMP_SFG->SET_FOLWI( IS_FOLWI = LS_FOLWI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_COMP_SFG_VIS-FOLHE ne IS_COMP_SFG_VIS-FOLHE.
    move-corresponding IS_COMP_SFG_VIS to LS_FOLHE.
    ME->R_PR_COMP_SFG->SET_FOLHE( IS_FOLHE = LS_FOLHE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Flag - Price Scale modified
  if ME->S_COMP_SFG_VIS-FPSMO ne IS_COMP_SFG_VIS-FPSMO.
    ME->R_PR_COMP_SFG->SET_FPSMO( IF_FPSMO = IS_COMP_SFG_VIS-FPSMO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
