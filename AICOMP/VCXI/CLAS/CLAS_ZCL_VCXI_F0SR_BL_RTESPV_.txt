
class ZCL_VCXI_F0SR_BL_RTESPV definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_RTESPV
  create public .

public section.

  methods SET_F0_BL_PRTE
    importing
      !IT_XCOMP_RTESEL type ZVCXI_F0SR_TT_XCOMP_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
protected section.

  methods ADD_RELOCATE
    importing
      !IR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    exporting
      !ER_SPVRE_RELOCATE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .

  methods BUILD_STRUCT
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods PROCESS_RTE_ARBPL
    redefinition .
private section.
endclass. "ZCL_VCXI_F0SR_BL_RTESPV definition
class ZCL_VCXI_F0SR_BL_RTESPV implementation.
  method ADD_RELOCATE.

*** Check if Relocation is even needed
    check ME->R_GATE->GET_APPDATA( )->F_WERKS ne IR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***-------------------------------------------------------------------------------------–----------
*** Create Supervisor Runtime Element
    create object ER_SPVRE_RELOCATE
      exporting
        IR_SPVCE  = ME->GET_SPVCE( IF_ID           = 'RELOCATE'
                                   IR_SPVCE_PARENT = IR_SPVRE_ROOT->R_SPVCE )
        IR_PARENT = IR_SPVRE_ROOT.
    append ER_SPVRE_RELOCATE to CT_SPVRE.

*** Set In Use
    ER_SPVRE_RELOCATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***-------------------------------------------------------------------------------------–----------
*** Add Cost Split Manager
    if IR_BL_PRTE->T_CSPLIT is not initial.
      ME->ADD_CSPLIT_MGR( exporting IR_BL_PRTE       = IR_BL_PRTE
                                    IR_SPVRE_ARBPL   = ER_SPVRE_RELOCATE
                          changing  CT_SPVRE         = CT_SPVRE ).
    endif.

  endmethod.
  method BUILD_STRUCT.

    data:  LS_PARAM          type        /VCXI/VKSR_S_PARAM.
    data:  LT_SPVRE_CURR     type        /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE_GRP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVCE     type ref to /VCXI/CL_VKSC_SPVCE.

***----------------------------------------------------------------------------
*** Get Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

*** Find Root
    loop at LT_SPVRE_CURR into ER_SPVRE_ROOT
                         where TABLE_LINE->R_PARENT is initial.
      append ER_SPVRE_ROOT to CT_SPVRE.

***   Update Explosion Quantity
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_ORGLC=>C_PARID_EXQTY_L     to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move IS_EXQTY-EXQTY                              to LS_PARAM-ATFLV.
      move IS_EXQTY-EXQTY_UOM                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      ER_SPVRE_ROOT->SET_PARAM( IS_PARAM = LS_PARAM ).
    endloop.

***----------------------------------------------------------------------------
*** Create Level below Root
    loop at LT_SPVRE_CURR into LR_SPVRE_GRP
                         where TABLE_LINE->R_PARENT eq ER_SPVRE_ROOT.

***   Buffer Customizing Element
      move LR_SPVRE_GRP->R_SPVCE to LR_SPVCE.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_GRP
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = ER_SPVRE_ROOT.
      append LR_SPVRE_GRP to CT_SPVRE.
    endloop.

  endmethod.
  method GET_ARBPL_INFO.

    data: LF_ID_GRP    type        /VCXI/CKX_ID.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***-------------------------------------------------------------------------------------–----------
*** Get ID of Group and Work Center where to be supervised to
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          LR_BL_PSTEP->GET_ARBPL_INFO( changing CF_ID_GRP   = LF_ID_GRP
                                                CF_ID_ARBPL = EF_ID_ARBPL ).
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.

*** No Groups
    move IR_SPVRE_ROOT to ER_SPVRE_GRP.

  endmethod.
  method PROCESS_RTE_ARBPL.

*{   REPLACE        HEDK918175                                        2
*\    data: LR_BL_PSTEP   type ref to ZCL_VCXI_XCSR_BL_PSTEP.
    data: LR_BL_PSTEP   type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP.
*}   REPLACE


*** Call SUPER
    SUPER->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                        IR_RTE_ARBPL   = IR_RTE_ARBPL
                                        IR_BL_PRTE     = IR_BL_PRTE
                              importing ER_SPVRE_ARBPL = ER_SPVRE_ARBPL
                              changing  CT_SPVRE       = CT_SPVRE ).


***----------------------------------------------------------------------------
*** Add Relocation after last Work Center
    if LINE_INDEX( IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ) eq LINES( IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ).
***   Check if we're the FG (No Connection Out)
      check IR_RTE_ARBPL->T_RTE_PSTEP is not initial.
*{   REPLACE        HEDK918175                                        1
*\      LR_BL_PSTEP ?= IR_RTE_ARBPL->T_RTE_PSTEP[ 1 ]->R_BLOBJ.
      read TABLE IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
      if sy-subrc eq 0.
        try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
        catch CX_SY_MOVE_CAST_ERROR.

        endtry.
      endif.
      "LR_BL_PSTEP ?= IR_RTE_ARBPL->T_RTE_PSTEP[ 1 ]->R_BLOBJ.
*}   REPLACE
      check LR_BL_PSTEP->T_IMFXC_OUT is initial or
            LR_BL_PSTEP->T_IMFXC_OUT[ 1 ] is initial.

***   Add Relocation Node if needed
      ME->ADD_RELOCATE( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                  IR_RTE_ARBPL   = IR_RTE_ARBPL
                                  IR_BL_PRTE     = IR_BL_PRTE
                        changing  CT_SPVRE       = CT_SPVRE ).
    endif.

  endmethod.
  method SET_F0_BL_PRTE.

    data: LF_INDEX        type        I.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM,
          LS_XCOMP_RTESEL type        ZVCXI_F0SR_S_XCOMP_RTESEL.
    data: LT_SPVRE_CURR   type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW    type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVCE_BUFFER type        /VCXI/CKX_TT_OBJECT.
    data: LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_PART type ref to /VCXI/CL_VKSR_SPVRE,
          LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP   type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

*** Find Root
    loop at LT_SPVRE_CURR into LR_SPVRE_ROOT
                         where TABLE_LINE->R_PARENT is initial.
      append LR_SPVRE_ROOT to LT_SPVRE_NEW.

      loop at LR_SPVRE_ROOT->R_SPVCE->T_PARAM into LR_OBJECT.
        check LR_OBJECT->GET_ID( ) eq ZCL_VCXI_XCSP_PR_ORGXC=>C_PARID_EXQTY_L or
              LR_OBJECT->GET_ID( ) eq ZCL_VCXI_XCSP_PR_ORGXC=>C_PARID_EXQTY_P.

***     Update Explosion Quantity
        clear LS_PARAM.
        move LR_OBJECT->GET_ID( )                          to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
        move IS_EXQTY-EXQTY                                to LS_PARAM-ATFLV.
        move IS_EXQTY-EXQTY_UOM                            to LS_PARAM-UNIT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
        LR_SPVRE_ROOT->SET_PARAM( IS_PARAM = LS_PARAM ).
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Process all Routes
    loop at IT_XCOMP_RTESEL into LS_XCOMP_RTESEL.
***   Get Customizing Element for Component
      LR_SPVCE = ME->GET_SPVCE( IF_ID           = LS_XCOMP_RTESEL-ICELM
                                IR_SPVCE_PARENT = LR_SPVRE_ROOT->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_PART
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = LR_SPVRE_ROOT.
      append LR_SPVRE_PART to LT_SPVRE_NEW.

***   Process Work Center
      check LS_XCOMP_RTESEL-R_RTESEL is bound and
            LS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE is bound.
      loop at LS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
        move SY-TABIX to LF_INDEX.

***     Get first Production Step
        read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

***     First Work Center gets Inbound Connects
        if LF_INDEX eq 1.
          move LS_XCOMP_RTESEL-T_NEXTL    to LR_BL_PSTEP->T_NEXTL.
          move LS_XCOMP_RTESEL-T_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
        endif.

***     Last Work Center gets Outbound Connects
        if LF_INDEX eq LINES( LS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL ).
          loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
            move LS_XCOMP_RTESEL-T_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
          endloop.
        endif.

        if LS_XCOMP_RTESEL-R_BL_RTESPV is not bound.
***       No BL Routing Supervisor Instance to Process the Work Center.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_F0SR'
                                                IF_MSGNO = '052' ).
        endif.

***     Buffer Customizing Element during sub-processing
        move LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE to LT_SPVCE_BUFFER.
        move ME->T_SPVCE to LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE.

***     Process Work Center through related BL Routing Supervisor
        LS_XCOMP_RTESEL-R_BL_RTESPV->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_PART
                                                                  IR_RTE_ARBPL   = LR_RTE_ARBPL
                                                                  IR_BL_PRTE     = LS_XCOMP_RTESEL-R_RTESEL
                                                        changing  CT_SPVRE       = LT_SPVRE_NEW ).
***     Return to buffered Customizing Elements
        move LT_SPVCE_BUFFER to LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE.

      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

  endmethod.
