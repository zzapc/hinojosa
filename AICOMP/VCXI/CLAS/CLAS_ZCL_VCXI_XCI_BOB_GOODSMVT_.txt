
class ZCL_VCXI_XCI_BOB_GOODSMVT definition
  public
  create public .

public section.

  types:
    YT_ITEM type table of BAPI2017_GM_ITEM_SHOW .

  constants C_GMCODE_GI type BAPI2017_GM_CODE value '03' ##NO_TEXT.
  constants C_GMCODE_GR_OTHER type BAPI2017_GM_CODE value '05' ##NO_TEXT.
  constants C_GMCODE_GR_PRODORD type BAPI2017_GM_CODE value '02' ##NO_TEXT.
  constants C_GMCODE_GR_PURORD type BAPI2017_GM_CODE value '01' ##NO_TEXT.
  constants C_GMCODE_TRANSFER type BAPI2017_GM_CODE value '04' ##NO_TEXT.
  data S_HEADER type BAPI2017_GM_HEAD_02 read-only .
  data T_ITEM type YT_ITEM read-only .

  methods CANCEL
    importing
      !IF_BKTXT type BKTXT optional
      !IF_BUDAT type BUDAT default SY-DATUM
      !IF_UNAME type UNAME default SY-UNAME
      !IF_TESTRUN type ABAP_BOOL default ABAP_FALSE
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ER_BOB_GOODSMVT type ref to ZCL_VCXI_XCI_BOB_GOODSMVT
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RS_GMHEADRET) type BAPI2017_GM_HEAD_RET
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MBLNR type MBLNR
      !IF_MJAHR type MJAHR
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IS_GMHEADER type BAPI2017_GM_HEAD_01 optional
      !IF_BKTXT type BKTXT optional
      !IF_GMCODE type BAPI2017_GM_CODE
      !IT_GMITEM type BAPI2017_GM_ITEM_CREATE_T
      !IF_TESTRUN type ABAP_BOOL default ABAP_FALSE
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ER_BOB_GOODSMVT type ref to ZCL_VCXI_XCI_BOB_GOODSMVT
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RS_GMHEADRET) type BAPI2017_GM_HEAD_RET
    raising
      /VCXI/CX_CKX .
  class-methods PREPARE_GMITEM_BLOCK
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CHARG type CHARG_D
      !IF_LGORT type LGORT_D
      !IF_UMLGO type UMLGO optional
      !IF_ERFMG type ERFMG
      !IF_ERFME type ERFME optional
    returning
      value(RT_GMITEM) type BAPI2017_GM_ITEM_CREATE_T
    raising
      /VCXI/CX_CKX .
  class-methods PREPARE_GMITEM_UNRESTR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CHARG type CHARG_D
      !IF_LGORT type LGORT_D
      !IF_UMLGO type UMLGO optional
      !IF_ERFMG type ERFMG
      !IF_ERFME type ERFME optional
    returning
      value(RT_GMITEM) type BAPI2017_GM_ITEM_CREATE_T
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_XCI_BOB_GOODSMVT definition
class ZCL_VCXI_XCI_BOB_GOODSMVT implementation.
  method CANCEL.

    data: LT_BAPIRET2   type table of BAPIRET2.


*** Reverse Goods Movements via BAPI
    call function 'BAPI_GOODSMVT_CANCEL'
      exporting
        MATERIALDOCUMENT    = ME->S_HEADER-MAT_DOC
        MATDOCUMENTYEAR     = ME->S_HEADER-DOC_YEAR
        GOODSMVT_PSTNG_DATE = IF_BUDAT
        GOODSMVT_PR_UNAME   = IF_UNAME
        DOCUMENTHEADER_TEXT = IF_BKTXT
      importing
        GOODSMVT_HEADRET    = RS_GMHEADRET
      tables
        RETURN              = LT_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Process Messages
    if CR_MSG is not bound.
      CR_MSG = new #( ).
    endif.
    loop at LT_BAPIRET2 into data(LS_BAPIRET2).
      CR_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

    if RS_GMHEADRET-MAT_DOC is not initial.
***   Material document & posted
      CR_MSG->ADD_MESSAGE( IF_MSGID = 'MIGO'
                           IF_MSGTY = 'S'
                           IF_MSGNO = '012'
                           IF_MSGV1 = RS_GMHEADRET-MAT_DOC ).
    endif.

***--------------------------------------------------------------------------------------
*** Perform Commit
    check IF_TESTRUN ne ABAP_TRUE and
          IF_COMMIT  eq ABAP_TRUE.

    if RS_GMHEADRET-MAT_DOC is not initial.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    else.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
    endif.

***--------------------------------------------------------------------------------------
    if ER_BOB_GOODSMVT is requested.
***   Create Instance of Reversing Document
      create object ER_BOB_GOODSMVT
        exporting
          IF_MBLNR = RS_GMHEADRET-MAT_DOC
          IF_MJAHR = RS_GMHEADRET-DOC_YEAR.
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LT_BAPIRET2   type table of BAPIRET2.


    call function 'BAPI_GOODSMVT_GETDETAIL'
      exporting
        MATERIALDOCUMENT = IF_MBLNR
        MATDOCUMENTYEAR  = IF_MJAHR
      importing
        GOODSMVT_HEADER  = ME->S_HEADER
      tables
        GOODSMVT_ITEMS   = ME->T_ITEM
        RETURN           = LT_BAPIRET2.

    if LINE_EXISTS( LT_BAPIRET2[ TYPE = 'E' ] ).
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LT_BAPIRET2[ TYPE = 'E' ] ).
    endif.

  endmethod.
  method CREATE.

    data: LS_GMHEADER type BAPI2017_GM_HEAD_01.
    data: LT_GMITEM   type BAPI2017_GM_ITEM_CREATE_T,
          LT_BAPIRET2 type table of BAPIRET2.


***--------------------------------------------------------------------------------------
*** Header
    if IS_GMHEADER is supplied.
      LS_GMHEADER = IS_GMHEADER.
    else.
      LS_GMHEADER = value #( PSTNG_DATE = SY-DATUM
                             DOC_DATE   = SY-DATUM
                             HEADER_TXT = IF_BKTXT
                           ).
    endif.

*** Items (allow changes in BAPI to this table)
    LT_GMITEM = IT_GMITEM.

***--------------------------------------------------------------------------------------
*** Create Goods Movements
    call function 'BAPI_GOODSMVT_CREATE'
      exporting
        GOODSMVT_HEADER  = LS_GMHEADER
        GOODSMVT_CODE    = IF_GMCODE
        TESTRUN          = IF_TESTRUN
      importing
        GOODSMVT_HEADRET = RS_GMHEADRET
      tables
        GOODSMVT_ITEM    = LT_GMITEM
        RETURN           = LT_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Process Messages
    if CR_MSG is not bound.
      CR_MSG = new #( ).
    endif.
    loop at LT_BAPIRET2 into data(LS_BAPIRET2).
      CR_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

    if RS_GMHEADRET-MAT_DOC is not initial.
***   Material document & posted
      CR_MSG->ADD_MESSAGE( IF_MSGID = 'MIGO'
                           IF_MSGTY = 'S'
                           IF_MSGNO = '012'
                           IF_MSGV1 = RS_GMHEADRET-MAT_DOC ).
    endif.

***--------------------------------------------------------------------------------------
*** Perform Commit
    check IF_TESTRUN ne ABAP_TRUE and
          IF_COMMIT  eq ABAP_TRUE.

    if RS_GMHEADRET-MAT_DOC is not initial.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    else.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
    endif.


***--------------------------------------------------------------------------------------
    if ER_BOB_GOODSMVT is requested.
***   Create Instance of Reversing Document
      create object ER_BOB_GOODSMVT
        exporting
          IF_MBLNR = RS_GMHEADRET-MAT_DOC
          IF_MJAHR = RS_GMHEADRET-DOC_YEAR.
    endif.

  endmethod.
  method PREPARE_GMITEM_BLOCK.

    data: LF_ERFME type ERFME,
          LF_LGORT type LGORT_D.


*** Identify Unit
    if IF_ERFME is supplied.
      LF_ERFME = IF_ERFME.
    else.
      select single MEINS
             into LF_ERFME
             from MARA
            where MATNR eq IF_MATNR.
      if SY-SUBRC ne 0.
        raise exception type /VCXI/CX_CKX.
      endif.
    endif.

    if IF_UMLGO is supplied and
       IF_UMLGO ne IF_LGORT.
***   Transfer posting storage location (one-step)
      append value #( MOVE_TYPE      = '311'
*{   REPLACE        HEDK927942                                        1
*\                      MATERIAL_LONG  = IF_MATNR
                        MATERIAL  = IF_MATNR
*}   REPLACE
                      PLANT          = IF_WERKS
                      STGE_LOC       = IF_LGORT      MOVE_STLOC     = IF_UMLGO
                      BATCH          = IF_CHARG      MOVE_BATCH     = IF_CHARG
                      ENTRY_QNT      = IF_ERFMG
                      ENTRY_UOM      = IF_ERFME
                    ) to RT_GMITEM.
      LF_LGORT = IF_UMLGO.
    else.
      LF_LGORT = IF_LGORT.
    endif.

*** Transfer posting blocked stock to unr.-use stock - reversal
    append value #( MOVE_TYPE      = '344'
*{   REPLACE        HEDK927942                                        2
*\                    MATERIAL_LONG  = IF_MATNR
                    MATERIAL  = IF_MATNR
*}   REPLACE
                    PLANT          = IF_WERKS
                    STGE_LOC       = LF_LGORT
                    BATCH          = IF_CHARG      MOVE_BATCH     = IF_CHARG
                    ENTRY_QNT      = IF_ERFMG
                    ENTRY_UOM      = IF_ERFME
                  ) to RT_GMITEM.

  endmethod.
  method PREPARE_GMITEM_UNRESTR.

    data: LF_ERFME type ERFME.


*** Identify Unit
    if IF_ERFME is supplied.
      LF_ERFME = IF_ERFME.
    else.
      select single MEINS
             into LF_ERFME
             from MARA
            where MATNR eq IF_MATNR.
      if SY-SUBRC ne 0.
        raise exception type /VCXI/CX_CKX.
      endif.
    endif.

*** Transfer posting blocked to unrestricted
    append value #( MOVE_TYPE      = '343'
*{   REPLACE        HEDK927942                                        1
*\                    MATERIAL_LONG  = IF_MATNR
                    MATERIAL  = IF_MATNR
*}   REPLACE
                    PLANT          = IF_WERKS
                    STGE_LOC       = IF_LGORT
                    BATCH          = IF_CHARG      MOVE_BATCH     = IF_CHARG
                    ENTRY_QNT      = IF_ERFMG
                    ENTRY_UOM      = IF_ERFME
                  ) to RT_GMITEM.

***   Transfer posting storage location (one-step)
    if IF_UMLGO is supplied and
       IF_UMLGO ne IF_LGORT.
      append value #( MOVE_TYPE      = '311'
*{   REPLACE        HEDK927942                                        2
*\                      MATERIAL_LONG  = IF_MATNR
                      MATERIAL  = IF_MATNR
*}   REPLACE
                      PLANT          = IF_WERKS
                      STGE_LOC       = IF_LGORT      MOVE_STLOC     = IF_UMLGO
                      BATCH          = IF_CHARG      MOVE_BATCH     = IF_CHARG
                      ENTRY_QNT      = IF_ERFMG
                      ENTRY_UOM      = IF_ERFME
                    ) to RT_GMITEM.
    endif.

  endmethod.
