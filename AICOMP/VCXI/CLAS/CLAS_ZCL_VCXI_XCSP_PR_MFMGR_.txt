
class ZCL_VCXI_XCSP_PR_MFMGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFMGR .

  aliases C_IPRVT_XCS_MFMGR
    for ZIF_VCXI_XCSP_MFMGR~C_IPRVT_XCS_MFMGR .
  aliases GET_MFI
    for ZIF_VCXI_XCSP_MFMGR~GET_MFI .
  aliases GET_MFO
    for ZIF_VCXI_XCSP_MFMGR~GET_MFO .

  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_COMPR
    importing
      !IR_GATE_MFO type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_COMPR) type ZVCXI_XCSP_COMPR
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_QFACT
    importing
      !IR_GATE_MFO type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_QFACT) type ZVCXI_XCS_QFACT
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    exporting
      !EF_ICSPA type ZVCXI_XCSP_ICSPA
      !ES_DCSPL type ZVCXI_XCSP_S_DCSPL
      !EF_COMPF type ZVCXI_XCSP_COMPF
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_MQTYI
    importing
      !IS_QTY type ZVCXI_XCSP_S_QTY
    returning
      value(RS_MQTYI) type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_MQTYO
    importing
      !IS_QTY type ZVCXI_XCSP_S_QTY
    returning
      value(RS_MQTYO) type ZVCXI_XCSP_S_MQTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OPERATION
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_OPERATION) type ref to ZIF_VCXI_XCSP_OPERATION
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_CONSU type /VCXI/VKSC_IEVNT value 'RECALC_CONSU' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MQTYO type /VCXI/VKSC_IEVNT value 'RECALC_MQTYO' ##NO_TEXT.
  constants C_IEVNT_I_RENEW_MFI_DISST type /VCXI/VKSC_IEVNT value 'RENEW_MFI_DISST' ##NO_TEXT.
  constants C_IEVNT_I_RENEW_MFI_MFRAT type /VCXI/VKSC_IEVNT value 'RENEW_MFI_MFRAT' ##NO_TEXT.
  constants C_IEVNT_I_REQ_MFO_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_MFO_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_MFO_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_MFO_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_OP_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_OP_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_OP_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_OP_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_MFO_BACKWARD_REQ type /VCXI/VKSC_IEVNT value 'MFO_BACKWARD_REQ' ##NO_TEXT.
  constants C_IEVNT_O_MFO_FORWARD_REQ type /VCXI/VKSC_IEVNT value 'MFO_FORWARD_REQ' ##NO_TEXT.
  constants C_IEVNT_O_OP_BACKWARD_REQ type /VCXI/VKSC_IEVNT value 'OP_BACKWARD_REQ' ##NO_TEXT.
  constants C_IEVNT_O_OP_FORWARD_REQ type /VCXI/VKSC_IEVNT value 'OP_FORWARD_REQ' ##NO_TEXT.

  methods CHECK_MFI
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MFO
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods GET_MATPO
    returning
      value(RR_PR_MATPO) type ref to ZCL_VCXI_XCSP_PR_MATPO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_CONSU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MQTYO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RENEW_MFI_DISST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RENEW_MFI_MFRAT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MFMGR definition
class ZCL_VCXI_XCSP_PR_MFMGR implementation.
method CHECK_MFI.

  data:  LT_GATE   type /VCXI/VKSR_TT_GATE.

  LT_GATE = ME->ZIF_VCXI_XCSP_MFMGR~GET_MFI( ).
  if lines( LT_GATE ) ge 1.
    move 0 to RF_RESULT.
  else.
    move 1 to RF_RESULT.
  endif.

endmethod.
method CHECK_MFO.

  data:  LT_GATE   type /VCXI/VKSR_TT_GATE.

  LT_GATE = ME->ZIF_VCXI_XCSP_MFMGR~GET_MFO( ).
  if lines( LT_GATE ) ge 1.
    move 0 to RF_RESULT.
  else.
    move 1 to RF_RESULT.
  endif.

endmethod.
method CONV_TO_MQTYI.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION       type ref to ZIF_VCXI_XCSP_OPERATION.

***------------------------------------------------------------------
*** Get Operation to do the Conversion
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.
    if LR_OPERATION is bound.
      RS_MQTYI = LR_OPERATION->CONV_TO_MQTYI( IS_QTY = IS_QTY ).
    endif.
  endif.

endmethod.
method CONV_TO_MQTYO.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION       type ref to ZIF_VCXI_XCSP_OPERATION.

***------------------------------------------------------------------
*** Get Operation to do the Conversion
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.
    if LR_OPERATION is bound.
      RS_MQTYO = LR_OPERATION->CONV_TO_MQTYO( IS_QTY = IS_QTY ).
    endif.
  endif.

endmethod.
method GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION      type ref to ZIF_VCXI_XCSP_OPERATION,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  if LT_GATE is initial.
***--------------------------------------------------------------------------------------
*** Get via Operation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC = 0.
    move LR_GATE->R_CLSPR ?to LR_OPERATION.
    check LR_OPERATION is bound.
    LR_OPERATION->GET_CSPLIT( importing EF_ICSPA = EF_ICSPA
                                        ES_DCSPL = ES_DCSPL
                                        EF_COMPF = EF_COMPF ).

***--------------------------------------------------------------------------------------
  else.
    if lines( LT_GATE ) gt 1.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    read table LT_GATE into LR_GATE index 1.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

*** Get ID of active Cost Split
    move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
    check EF_ICSPA is not initial.

*** Get active Cost Splits
    move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
    move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.

  endif.

endmethod.
method GET_MATPO.

  data:  LT_GATE   type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get Material Pool
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MATPO=>C_IPRVT_XCS_MATPO
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.

  try.
      move LR_GATE->R_CLSPR ?to RR_PR_MATPO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: RR_PR_MATPO.
  endtry.

endmethod.
method GET_MFO_COMPR.

  data:  LF_ICSPL           type        ZVCXI_XCSP_ICSPL.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_GATE_CSPLIT     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MFO        type        /VCXI/VKSR_TT_GATE,
         LT_ICSPL           type        ZVCXI_XCSP_TT_ICSPL.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT       type ref to ZCL_VCXI_XCSP_PR_CSPLIT,
         LR_MFSO            type ref to ZIF_VCXI_XCSP_MFSO.

***----------------------------------------------------------------------------
*** Default Ratio is 1
  move 1 to RF_COMPR.

***----------------------------------------------------------------------------
*** Get Cost Split Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.

*** Get all Cost Splits
  LT_GATE_CSPLIT = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSP_PR_CSPLIT=>C_IPRVT_XCS_CSPLIT
                                       IF_INUSE  = ABAP_TRUE
                                       IF_SORTED = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get relevant Cost Split IDs of MFSO
  try.
      move IR_GATE_MFO->R_CLSPR ?to LR_MFSO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_MFSO.
  endtry.
  check LR_MFSO is bound.
  move LR_MFSO->GET_ICSPL( ) to LT_ICSPL.

*** Get all Flow Outs
  LT_GATE_MFO = ME->GET_MFO( ).

***----------------------------------------------------------------------------
  clear RF_COMPR.
  if lines( LT_GATE_MFO ) gt 1.
*** Find matching Cost Split by ID
    loop at LT_GATE_CSPLIT into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.

      move LR_PR_CSPLIT->GET_ICSPL( ) to LF_ICSPL.
      read table LT_ICSPL with key TABLE_LINE = LF_ICSPL
                          transporting no fields.
      if SY-SUBRC eq 0.
***     Collect Costing Ratio
        RF_COMPR = RF_COMPR + LR_PR_CSPLIT->GET_COMPR( ).
      endif.
    endloop.
  else.
*** Get only the first
    read table LT_GATE_CSPLIT into LR_GATE index 1.
    check SY-SUBRC eq 0.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.

*** Collect Costing Ratio
    RF_COMPR = LR_PR_CSPLIT->GET_COMPR( ).
  endif.

endmethod.
method GET_MFO_QFACT.

  data:  LF_ICSPL           type        ZVCXI_XCSP_ICSPL.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_GATE_CSPLIT     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MFO        type        /VCXI/VKSR_TT_GATE,
         LT_ICSPL           type        ZVCXI_XCSP_TT_ICSPL.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT       type ref to ZCL_VCXI_XCSP_PR_CSPLIT,
         LR_MFSO            type ref to ZIF_VCXI_XCSP_MFSO.

***----------------------------------------------------------------------------
*** Default Factor is 1
  move 1 to RF_QFACT.

***----------------------------------------------------------------------------
*** Get Cost Split Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.

*** Get all Cost Splits
  LT_GATE_CSPLIT = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSP_PR_CSPLIT=>C_IPRVT_XCS_CSPLIT
                                       IF_INUSE  = ABAP_TRUE
                                       IF_SORTED = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get relevant Cost Split IDs of MFSO
  try.
      move IR_GATE_MFO->R_CLSPR ?to LR_MFSO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_MFSO.
  endtry.
  check LR_MFSO is bound.
  move LR_MFSO->GET_ICSPL( ) to LT_ICSPL.

*** Get all Flow Outs
  LT_GATE_MFO = ME->GET_MFO( ).

***----------------------------------------------------------------------------
  clear RF_QFACT.
  if lines( LT_GATE_MFO ) gt 1.
*** Find matching Cost Split by ID
    loop at LT_GATE_CSPLIT into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.

      move LR_PR_CSPLIT->GET_ICSPL( ) to LF_ICSPL.
      read table LT_ICSPL with key TABLE_LINE = LF_ICSPL
                          transporting no fields.
      if SY-SUBRC eq 0.
***     Collect Quantity Factor
        RF_QFACT += LR_PR_CSPLIT->GET_QFACT( ).
      endif.
    endloop.
  else.
*** Get only the first
    read table LT_GATE_CSPLIT into LR_GATE index 1.
    check SY-SUBRC eq 0.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.

*** Collect Quantity Factor
    RF_QFACT = LR_PR_CSPLIT->GET_QFACT( ).
  endif.

endmethod.
  method GET_PRVDR_OPERATION.

    clear: ER_GATE,
           RR_OPERATION.

***------------------------------------------------------------------------------------------------
*** Find Provider for Operation
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                           IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_OPERATION.

  endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Material Flow In
  if ME->CHECK_MFI( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Material Flow Out
  if ME->CHECK_MFO( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_WERKS.

  data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
        LR_OPERATION  type ref to ZIF_VCXI_XCSP_OPERATION.

***------------------------------------------------------------------
*** Get Plant of Machine
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).


  read table LT_GATE into LR_GATE index 1.

  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.
    if LR_OPERATION is bound.
      RF_WERKS = LR_OPERATION->GET_WERKS( ).
    endif.

  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_CONSU.
      ME->HANDLE_RECALC_CONSU( ).
    when C_IEVNT_I_RECALC_MQTYO.
      ME->HANDLE_RECALC_MQTYO( ).
    when C_IEVNT_I_RENEW_MFI_DISST.
      ME->HANDLE_RENEW_MFI_DISST( ).
    when C_IEVNT_I_RENEW_MFI_MFRAT.
      ME->HANDLE_RENEW_MFI_MFRAT( ).

*** Operation Forward/Backward
    when C_IEVNT_I_REQ_OP_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OP_FORWARD_REQ ).
    when C_IEVNT_I_REQ_OP_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OP_BACKWARD_REQ ).

*** Material Flow Out Forward/Backward
    when C_IEVNT_I_REQ_MFO_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFO_FORWARD_REQ ).
    when C_IEVNT_I_REQ_MFO_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFO_BACKWARD_REQ ).

  endcase.

endmethod.
method HANDLE_RECALC_CONSU.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LS_MQTYI           type        ZVCXI_XCSP_S_MQTYI,
         LS_MSSWA           type        /VCXI/VSM_S_MSSWA.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION       type ref to ZIF_VCXI_XCSP_OPERATION,
         LR_PR_MACHINE      type ref to ZCL_VCXI_XCSP_PR_MACHINE,
         LR_MFI             type ref to ZIF_VCXI_XCSP_MFI.

***------------------------------------------------------------------
*** Get all Machine Quantity and Setup Waste
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.
    if LR_OPERATION is bound.
      move LR_OPERATION->GET_MQTYI( ) to LS_MQTYI.
    endif.

    clear: LR_PR_MACHINE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MACHINE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MACHINE.
    endtry.
    if LR_PR_MACHINE is bound.
      move LR_PR_MACHINE->GET_MSSWA( ) to LS_MSSWA.
    endif.

  endif.

***------------------------------------------------------------------
*** Get all Material Flows
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFI=>C_IPRVT_XCS_MFI
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Start Recalc Consumption of all Material Flow In
  loop at LT_GATE into LR_GATE.
    try.

        clear: LR_MFI.
        move LR_GATE->R_CLSPR ?to LR_MFI.
        check LR_MFI is bound.
        LR_MFI->CALC_CONSU( IS_MQTYI = LS_MQTYI
                            IS_MSSWA = LS_MSSWA ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

  endloop.

endmethod.
method HANDLE_RECALC_MQTYO.

  data:  LF_NOOUT           type        ZVCXI_XCS_NOOUT,
         LF_NOOUT_TOTAL     type        ZVCXI_XCS_NOOUT.
  data:  LS_MQTYO           type        ZVCXI_XCSP_S_MQTYO,
         LS_CONSU           type        ZVCXI_XCSP_S_CONSU,
         LS_CALCV_MQTYO     type        ZVCXI_XCS_S_CALCV,
         LS_CALCV_CONSU     type        ZVCXI_XCS_S_CALCV.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MFMO       type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION       type ref to ZIF_VCXI_XCSP_OPERATION,
         LR_MFO             type ref to ZIF_VCXI_XCSP_MFO,
         LR_MFMO            type ref to ZCL_VCXI_XCSP_PR_MFMO.

***----------------------------------------------------------------------------
*** Get First MFSO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFO=>C_IPRVT_XCS_MFO
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Material Flow Out Consumption
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFO.
        move LR_GATE->R_CLSPR ?to LR_MFO.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_MFO.
    endtry.
    check LR_MFO is bound.

*** Is it a MFMO
    try.
        clear: LR_MFMO.
        move LR_GATE->R_CLSPR ?to LR_MFMO.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_MFMO.
    endtry.

*** Get Consumption and Number of Outs
    LS_CONSU = LR_MFO->GET_CONSU( ).
    LF_NOOUT = LR_MFO->GET_NOOUT( ).

    if LR_MFMO is bound.
      clear LS_CONSU-CONSU.
      append LR_GATE to LT_GATE_MFMO.
    endif.

***----------------------------------------------------------------------------
*** Take Number of Outs into account
    if LF_NOOUT ne 0.
      LS_CALCV_CONSU-CALCV = LS_CONSU-CONSU / LF_NOOUT.
    else.
      LS_CALCV_CONSU-CALCV = 0.
    endif.
    LS_CALCV_CONSU-CALCV_UOM = LS_CONSU-CONSU_UOM.
    add LF_NOOUT to LF_NOOUT_TOTAL.

*** Use maximum Quantity
    if LS_CALCV_CONSU-CALCV gt LS_CALCV_MQTYO-CALCV.
      move LS_CALCV_CONSU-CALCV     to LS_CALCV_MQTYO-CALCV.
      move LS_CALCV_CONSU-CALCV_UOM to LS_CALCV_MQTYO-CALCV_UOM.
    endif.
  endloop.


***----------------------------------------------------------------------------
*** Set Quanity to Material Flow Material Out (Co-Products)
  loop at LT_GATE_MFMO into LR_GATE.
    try.
        clear: LR_MFMO.
        move LR_GATE->R_CLSPR ?to LR_MFMO.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_MFMO is bound.

    LF_NOOUT = LR_MFMO->GET_NOOUT( ).
    LS_CONSU-CONSU     = LS_CALCV_MQTYO-CALCV * LF_NOOUT.
    LS_CONSU-CONSU_UOM = LS_CALCV_MQTYO-CALCV_UOM.

    LR_MFMO->ZIF_VCXI_XCSP_MFO~SET_CONSU( IS_CONSU = LS_CONSU ).
  endloop.


***----------------------------------------------------------------------------
*** Set MFSO Consumption to Machine MQTYO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.

*** Out bound Quantity = total
    LS_MQTYO-MQTYO     = LS_CALCV_MQTYO-CALCV * LF_NOOUT_TOTAL.
    LS_MQTYO-MQTYO_UOM = LS_CALCV_MQTYO-CALCV_UOM.

    if LR_OPERATION is bound.
      LR_OPERATION->SET_MQTYO( IS_MQTYO = LS_MQTYO ).
    endif.
  endif.

endmethod.
method HANDLE_RENEW_MFI_DISST.

  data:  LF_DISST_MFO       type        /VCXI/VKC_DISST,
         LF_DISST_REQ       type        /VCXI/VKC_DISST,
         LF_DISST           type        /VCXI/VKC_DISST,
         LF_MATNR           type        MATNR,
         LF_MATNR_MFO       type        MATNR.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_MFSO            type ref to ZIF_VCXI_XCSP_MFSO,
         LR_MFSI            type ref to ZIF_VCXI_XCSP_MFSI,
         LR_PR_MATPO        type ref to ZCL_VCXI_XCSP_PR_MATPO.

***------------------------------------------------------------------
*** Get Material Pool
  LR_PR_MATPO = ME->GET_MATPO( ).
  check LR_PR_MATPO is bound.

***------------------------------------------------------------------
*** Get all Material Flow Out
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFO=>C_IPRVT_XCS_MFO
                                   IF_INUSE = ABAP_TRUE ).

*** Get MFSO with highest Low-Level Code
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFSO.
        move LR_GATE->R_CLSPR ?to LR_MFSO.
        check LR_MFSO is bound.

***     Check is not Inactive via Cost Split
        check LR_MFSO->IS_ACTIVE_BY_CSPLIT(  ) ne 2.

        move LR_MFSO->GET_DISST( ) to LF_DISST.

        if LF_DISST gt LF_DISST_MFO or
           LF_MATNR_MFO is initial.
          move LF_DISST              to LF_DISST_MFO.
          move LR_MFSO->GET_MATNR( ) to LF_MATNR_MFO.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Get all Material Flow In
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFI=>C_IPRVT_XCS_MFI
                                   IF_INUSE = ABAP_TRUE ).

*** Set MFSI Infos
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFSI.
        move LR_GATE->R_CLSPR ?to LR_MFSI.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_MFSI is bound.

*** Get old Matnr and Low Level
    LF_MATNR = LR_MFSI->GET_MATNR( ).
    LF_DISST = LR_MFSI->GET_DISST( ).


*** We need to have a new one on this Point
    if LR_MFSI->GET_NEXTL( ) eq ABAP_TRUE.
***   Add 1 to Low-Level Code
      LF_DISST_REQ = LF_DISST_MFO + 1.

***   Request new Material Number for req. Low-Level Code
      LR_PR_MATPO->CHANGE_MATNR( exporting IF_DISST     = LF_DISST
                                           IF_DISST_REQ = LF_DISST_REQ
                                           IR_MFI       = LR_GATE
                                 changing  CF_MATNR     = LF_MATNR ).
      move LF_DISST_REQ to LF_DISST.


*** We have the same Dispo Level
    else.
***   Give the Material back to the Pool
      LR_PR_MATPO->CHANGE_MATNR( exporting IF_DISST     = LF_DISST
                                           IR_MFI       = LR_GATE
                                 changing  CF_MATNR     = LF_MATNR ).

***   Use MFO Material Number and Low-Level Code
      move LF_MATNR_MFO to LF_MATNR.
      move LF_DISST_MFO to LF_DISST.
    endif.


*** Set Material and Low-Level Code
    LR_MFSI->SET_MATNR( IF_MATNR = LF_MATNR ).
    LR_MFSI->SET_DISST( IF_DISST = LF_DISST ).
  endloop.

endmethod.
method HANDLE_RENEW_MFI_MFRAT.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LF_MFRAT_MFO       type        ZVCXI_XCSP_MFRAT,
         LF_MFRAT_MFI       type        ZVCXI_XCSP_MFRAT.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_MFSO            type ref to ZCL_VCXI_XCSP_PR_MFSO,
         LR_MFI             type ref to ZCL_VCXI_XCSP_PR_MF.

***------------------------------------------------------------------
*** Get all Material Flow Out
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFO=>C_IPRVT_XCS_MFO
                                   IF_INUSE = ABAP_TRUE ).

*** Determine Material Flow Ratio based on Material Flow SFG Out
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFSO.
        move LR_GATE->R_CLSPR ?to LR_MFSO.
        check LR_MFSO is bound.

***     Get outbound Material Flow Ratio
        move LR_MFSO->GET_MFRAT( ) to LF_MFRAT_MFO.

***     Check is not Inactive via Cost Split
        case LR_MFSO->IS_ACTIVE_BY_CSPLIT(  ).
          when 0.
***         Summarize if no Cost Split is acitve (Single Product Diamond Shape)
            add LF_MFRAT_MFO to LF_MFRAT_MFI.
          when 1.
***         When using Cost Split, use only Max (Separation)
            if LF_MFRAT_MFO gt LF_MFRAT_MFI.
              move LF_MFRAT_MFO to LF_MFRAT_MFI.
            endif.
          when 2.
***         Ignore those that are inactive via Cost Split
        endcase.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Get all Material Flow In
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFI=>C_IPRVT_XCS_MFI
                                   IF_INUSE = ABAP_TRUE ).

*** Set MFI
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFI.
        move LR_GATE->R_CLSPR ?to LR_MFI.
        check LR_MFI is bound.

        LR_MFI->SET_MFRAT( IF_MFRAT = LF_MFRAT_MFI ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

  endloop.

endmethod.
method ZIF_VCXI_XCSP_MFMGR~GET_MFI.

***------------------------------------------------------------------
*** Get all Material Flow In
  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFI=>C_IPRVT_XCS_MFI
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
method ZIF_VCXI_XCSP_MFMGR~GET_MFO.

***------------------------------------------------------------------
*** Get all Material Flow Out
  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFO=>C_IPRVT_XCS_MFO
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
