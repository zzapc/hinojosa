
class ZCL_VCXI_P4SP_PR_MC_PROC definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MC
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFO .
  interfaces ZIF_VCXI_XCSP_MFS .
  interfaces ZIF_VCXI_XCSP_MFSO .

  constants C_PARID_MFCSP type /VCXI/VKS_PARID value 'ZVCXI_XC_MFCSP' ##NO_TEXT.
  constants C_PARID_WERKS type /VCXI/VKS_PARID value 'ZVCXI_XC_WERKS' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS
    importing
      !IF_WERKS type WERKS_D
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods CALC_CONSU
    redefinition .
  methods GET_WERKS
    redefinition .
protected section.

  constants C_IEVNT_O_WERKS_CHANGED type /VCXI/VKSC_IEVNT value 'WERKS_CHANGED' ##NO_TEXT.

  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P4SP_PR_MC_PROC definition
class ZCL_VCXI_P4SP_PR_MC_PROC implementation.
  method CALC_CONSU.

    ME->SET_CONSU( IS_CONSU = value #( CONSU     = IS_MQTYI-MQTYI
                                       CONSU_UOM = IS_MQTYI-MQTYI_UOM ) ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Specific Dimension Parameter
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method GET_WERKS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).
    move LS_PARAM-ATWRT to RF_WERKS.

  endmethod.
  method INIT_DIM_PARAM.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
    data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

    LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_CONSU_A or
                            PARID eq C_PARID_CONSU_L or
                            PARID eq C_PARID_CONSU_P or
                            PARID eq C_PARID_CONSU_W ).
      move LS_PARAM-PARID to ME->F_PARID_CONSU.
      exit.
    endloop.

    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_PRICP_A or
                            PARID eq C_PARID_PRICP_L or
                            PARID eq C_PARID_PRICP_P or
                            PARID eq C_PARID_PRICP_W ).
      move LS_PARAM-PARID to ME->F_PARID_PRICP.
      exit.
    endloop.

  endmethod.
  method SET_WERKS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).

    move IF_WERKS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_XCSP_MFO~GET_CONSU.

    RS_CONSU = ME->GET_CONSU( ).

  endmethod.
  method ZIF_VCXI_XCSP_MFO~GET_NOOUT.
  endmethod.
  method ZIF_VCXI_XCSP_MFO~GET_WERKS.

    RF_WERKS = ME->GET_WERKS( ).

  endmethod.
  method ZIF_VCXI_XCSP_MFO~SET_CONSU.

    ME->CALC_CONSU( IS_MQTYI = value #( MQTYI     = IS_CONSU-CONSU
                                        MQTYI_UOM = IS_CONSU-CONSU_UOM ) ).

  endmethod.
  method ZIF_VCXI_XCSP_MFO~SET_NOOUT.
  endmethod.
  method ZIF_VCXI_XCSP_MFSO~DO_BACKWARD.

    data: LS_CONSU    type        ZVCXI_XCSP_S_CONSU.


    if IR_MFSI is bound.
***   Get Consumption
      LS_CONSU = IR_MFSI->GET_CONSU( ).
    endif.

    ME->ZIF_VCXI_XCSP_MFO~SET_CONSU( IS_CONSU = LS_CONSU ).

  endmethod.
  method ZIF_VCXI_XCSP_MFSO~GET_ICSPL.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFCSP ).
    check LS_PARAM-SETBY is not initial.

*** Convert from "MF relevant CSplit IDs"
    RT_ICSPL = ZCL_VCXI_XCSP_PR_MFSO=>CONV_FROM_MFCSP( IF_STRNG = LS_PARAM-STRNG ).

  endmethod.
  method ZIF_VCXI_XCSP_MFSO~GET_KAUSF.
  endmethod.
  method ZIF_VCXI_XCSP_MFSO~IS_ACTIVE_BY_CSPLIT.
*** 0 = Cost Split not used
*** 1 = Active by Cost Split
*** 2 = Not Active by Cost Split

    data: LF_ICSPA         type        ZVCXI_XCSP_ICSPA.
    data: LS_DCSPL         type        ZVCXI_XCSP_S_DCSPL.


***----------------------------------------------------------------------------
*** Cost Split using Material Flow Manager
    ME->GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                              ES_DCSPL = LS_DCSPL ).
*** Check for active Cost Split
    check LF_ICSPA is not initial.

***----------------------------------------------------------------------------
*** Start negative
    move 2 to RF_RETURN.  " Mark as NOT ACTIVE

*** Check if active Cost Split carries any costs
    if LS_DCSPL-DCSPL gt 0.
      move 1 to RF_RETURN.  " Mark as ACTIVE
    endif.

  endmethod.
  method ZIF_VCXI_XCSP_MFS~GET_DISST.

*** Return MFSI Low-Level Code
    move 1 to RF_DISST.

  endmethod.
  method ZIF_VCXI_XCSP_MFS~GET_MATNR.

    RF_MATNR = ME->GET_MATNR( ).

  endmethod.
  method ZIF_VCXI_XCSP_MFS~SET_DISST.
  endmethod.
  method ZIF_VCXI_XCSP_MFS~SET_MATNR.

    ME->SET_MATNR( IF_MATNR = IF_MATNR ).

  endmethod.
