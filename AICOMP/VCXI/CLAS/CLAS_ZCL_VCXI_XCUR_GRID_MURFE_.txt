
class ZCL_VCXI_XCUR_GRID_MURFE definition
  public
  final
  create public .

public section.

  methods CHECK_CHANGED_DATA
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_POPUP_MURGR type ref to ZCL_VCXI_XCUR_POPUP_MURGR
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    importing
      !IF_INDEX type I
    raising
      /VCXI/CX_CKX .
protected section.

  data F_INDEX type I .
  data T_MURFE_GRID type ZVCXI_XCUR_TT_MURFE_GRID .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data T_FIELDCAT type LVC_T_FCAT .
  data R_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL .
  data R_POPUP_MURGR type ref to ZCL_VCXI_XCUR_POPUP_MURGR .
  data R_TABLEDESCR type ref to CL_ABAP_TABLEDESCR .
  data R_ELEMDESCR type ref to CL_ABAP_ELEMDESCR .

  methods BUILD_FIELDCAT
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_UC_DEF
    importing
      !IS_MURFE_GRID type ZVCXI_XCUR_S_MURFE_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_DATA
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_GRID_MURFE definition
class ZCL_VCXI_XCUR_GRID_MURFE implementation.
  method BUILD_FIELDCAT .

    field-symbols: <S_FCAT> type LVC_S_FCAT.


***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    call function 'LVC_FIELDCATALOG_MERGE'
      exporting
        I_STRUCTURE_NAME       = 'ZVCXI_XCUR_S_MURFE_GRID'
      changing
        CT_FIELDCAT            = ME->T_FIELDCAT
      exceptions
        INCONSISTENT_INTERFACE = 1
        PROGRAM_ERROR          = 2
        others                 = 3.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

****--------------------------------------------------------------------------------------
*** Modify Field Catalog
    loop at ME->T_FIELDCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'FACTV'.
          <S_FCAT>-EDIT     = switch #( ME->R_POPUP_MURGR->F_LOCKED when ABAP_TRUE then ABAP_TRUE ).
          <S_FCAT>-CHECKBOX = ABAP_TRUE.

        when 'DEF_ICON'.
          <S_FCAT>-JUST = 'C'.
          move 'Option'(C01)     to: <S_FCAT>-COLTEXT,
                                     <S_FCAT>-SCRTEXT_L,
                                     <S_FCAT>-SCRTEXT_M,
                                     <S_FCAT>-SCRTEXT_S.

      endcase.
    endloop.

  endmethod.
method CHECK_CHANGED_DATA.

  if ME->R_GRID is bound.
*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
  method CONSTRUCTOR.

    ME->R_POPUP_MURGR = IR_POPUP_MURGR.

  endmethod.
  method DO_FREE .

*** Check for Changes
    if ME->R_GRID is bound.
      ME->R_GRID->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID is bound.
      ME->R_GRID->FREE( exceptions
                          CNTL_ERROR        = 1
                          CNTL_SYSTEM_ERROR = 2
                          others            = 3 ).
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_GRID.
    endif.

    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

    clear ME->R_MUCEL.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT-CWIDTH_OPT = 'X'.
    RS_LAYOUT-STYLEFNAME = 'T_STYL'.

  endmethod.
  method HANDLE_BUTTON_CLICK.

    try.
        check LINE_EXISTS( ME->T_MURFE_GRID[ ES_ROW_NO-ROW_ID ] ).

        case ES_COL_ID-FIELDNAME.
          when 'DEF_ICON'.
            ME->HANDLE_UC_DEF( IS_MURFE_GRID = ME->T_MURFE_GRID[ ES_ROW_NO-ROW_ID ] ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
method HANDLE_DATA_CHANGED.

endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_MURFE_GRID type ZVCXI_XCUR_S_MURFE_GRID,
          LS_MURFE      type ZVCXI_XCUR_S_MURFE.
    data: LT_MURFE      type ZVCXI_XCUR_TT_MURFE.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        check ME->R_POPUP_MURGR is bound and
              LINE_EXISTS( ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ] ).

***     Get current Exit-based Filter
        LT_MURFE = ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-T_MURFE.

***     Process Filters
        loop at ME->T_MURFE_GRID into LS_MURFE_GRID.
          check LINE_EXISTS( ET_GOOD_CELLS[ ROW_ID = SY-TABIX ] ).

****      Active Filter
          if LS_MURFE_GRID-FACTV eq ABAP_TRUE.
            if LINE_EXISTS( LT_MURFE[ IEXIT = LS_MURFE_GRID-IEXIT ] ).
              LS_MURFE = LT_MURFE[ IEXIT = LS_MURFE_GRID-IEXIT ].
            else.
              LS_MURFE = value #( IEXIT = LS_MURFE_GRID-IEXIT ).
              insert LS_MURFE into table LT_MURFE.
            endif.

***         Update Values
            LT_MURFE[ IEXIT = LS_MURFE_GRID-IEXIT ] = LS_MURFE.

***       Deactive Filter
          else.
            delete LT_MURFE where IEXIT = LS_MURFE_GRID-IEXIT.
          endif.
        endloop.

***     Set updated Exit-based Filters
        ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-T_MURFE = LT_MURFE.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_DEF.

    data: LS_MUCFE type ZVCXI_XCUC_S_MUCFE.
    data: LR_DATA type ref to DATA.


    check ME->R_MUCEL is bound and
          LINE_EXISTS( ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ] ) and
          LINE_EXISTS( ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-T_MURFE[ IEXIT = IS_MURFE_GRID-IEXIT ] ).

*** Get Customizing of Exit
    LS_MUCFE = R_MUCEL->T_MUCFE[ IEXIT = IS_MURFE_GRID-IEXIT ].
    check LS_MUCFE-FMDEF is not initial.

    try.
***     Get current Data Reference
        LR_DATA = ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-T_MURFE[ IEXIT = IS_MURFE_GRID-IEXIT ]-R_DATA.

***     Dynamic Call of Exit Function Module
        call function LS_MUCFE-FMDEF
          exporting
            IF_SYSOM  = ME->R_POPUP_MURGR->S_MURGR_VIS-SYSOM
            IF_LOCKED = ME->R_POPUP_MURGR->F_LOCKED
          changing
            CR_DATA   = LR_DATA.

***     Update Data Reference
        ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-T_MURFE[ IEXIT = IS_MURFE_GRID-IEXIT ]-R_DATA = LR_DATA.

      catch CX_SY_DYN_CALL_ERROR into data(LR_CX_SY_DYN_CALL_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_DYN_CALL_ERROR ).
    endtry.

  endmethod.
  method INIT_CONTAINER .

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0200CC_MURFE'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_DATA.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL,
          LS_MUCFE type ZVCXI_XCUC_S_MUCFE,
          LS_MURFE type ZVCXI_XCUR_S_MURFE.
    field-symbols: <S_MURFE_GRID> type ZVCXI_XCUR_S_MURFE_GRID.


    clear ME->T_MURFE_GRID.

*** Get current Update Element
    LS_MUREL = ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ].
    check LS_MUREL-R_MUCEL is bound.

    loop at LS_MUREL-R_MUCEL->T_MUCFE into LS_MUCFE.
***   Add new Entry
      append value #( IEXIT       = LS_MUCFE-IEXIT
                      IEXIT_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LS_MUCFE-T_DESCR )
                    ) to ME->T_MURFE_GRID assigning <S_MURFE_GRID>.

***   Load current Runtime Data
      if LINE_EXISTS( LS_MUREL-T_MURFE[ IEXIT = LS_MUCFE-IEXIT ] ).
        LS_MURFE = LS_MUREL-T_MURFE[ IEXIT = LS_MUCFE-IEXIT ].
        <S_MURFE_GRID>-FACTV    = ABAP_TRUE.
        if LS_MUCFE-FMDEF is not initial.
          <S_MURFE_GRID>-DEF_ICON = ICON_DETAIL.
          insert value #( FIELDNAME = 'DEF_ICON'
                          STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON ) into table <S_MURFE_GRID>-T_STYL.
        endif.
      endif.
    endloop.

  endmethod.
method INIT_GRID .

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Hanlder for Input
    set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
    set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

*** Button in ALV Column
    set handler ME->HANDLE_BUTTON_CLICK  for ME->R_GRID.

*** Build Field Catalog
    ME->BUILD_FIELDCAT( ).

  endif.

endmethod.
  method REFRESH_GRID .

    ME->F_INDEX = IF_INDEX.

*** Initialize Update Customizing Element
    ME->R_MUCEL = ME->R_POPUP_MURGR->T_MUREL[ ME->F_INDEX ]-R_MUCEL.

*** Initialize Data
    ME->INIT_DATA( ).

*** Initial Display
    if ME->R_GRID is not bound.

      ME->INIT_CONTAINER( ).
      ME->INIT_GRID( ).

      ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                 IT_TOOLBAR_EXCLUDING          = value #( ( CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL ) )
                                                 IS_LAYOUT                     = ME->GET_LAYOUT( )
                                               changing
                                                 IT_FIELDCATALOG               = ME->T_FIELDCAT
                                                 IT_OUTTAB                     = ME->T_MURFE_GRID
                                               exceptions
                                                 INVALID_PARAMETER_COMBINATION = 1
                                                 PROGRAM_ERROR                 = 2
                                                 TOO_MANY_LINES                = 3
                                                 others                        = 4 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

*** Update of Data
    else.
      ME->R_GRID->SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG = ME->T_FIELDCAT ).
      ME->R_GRID->SET_FRONTEND_LAYOUT( IS_LAYOUT = ME->GET_LAYOUT( ) ).
      ME->R_GRID->REFRESH_TABLE_DISPLAY( exceptions FINISHED = 1 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
