
class ZCL_VCXI_XCDCU_DUI_CONDDEF definition
  public
  inheriting from ZCL_VCXI_XCDCU_DUI
  create public .

public section.

  data S_CD_VIS type ZVCXI_XCDCU_S_CD_VIS .
  data S_TAB_DESCR type ZVCXI_XCD_S_TAB_DESCR .
  constants C_UC_REQ_TR type SYUCOMM value 'REQ_TR'. "#EC NOTEXT
  constants C_UC_SEL_IREGE type SYUCOMM value '0100UC_SEL_IREGE'. "#EC NOTEXT

  methods DO_UPDATE_CONDDEF_VIS
    importing
      !IS_CD_VIS type ZVCXI_XCDCU_S_CD_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to ZCL_VCXI_XCDCU_UIFW
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .

  methods DO_FREE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_GRID_EXIT type ref to ZCL_VCXI_XCDCU_GRID_CD_EXIT .
  data R_GRID_VALID type ref to ZCL_VCXI_XCDCU_GRID_CD_VALID .
  data R_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF .
  data R_GRID_VALUE type ref to ZCL_VCXI_XCDCU_GRID_CD_VALUE .

  methods MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_REQ_TR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SEL_IREGE
    raising
      /VCXI/CX_CKX .
  methods INTI_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_UC_CHECK_S
    redefinition .
  methods HANDLE_UC_CHOOSE
    redefinition .
  methods HANDLE_UC_TOGGLE
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_DUI_CONDDEF definition
class ZCL_VCXI_XCDCU_DUI_CONDDEF implementation.
method CONSTRUCTOR.

  data: LR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF.

***--------------------------------------------------------------------------------------
*** Get Condition Definition
  try.
      move IR_OBJECT ?to LR_CONDDEF.
    catch CX_SY_MOVE_CAST_ERROR.
      raise exception type /VCXI/CX_CKX.
  endtry.

*** Check Authorization
  ZCL_VCXI_XCDC_CONDDEF=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_CONDDEF=>C_ACTVT_DISPLAY
                                     IR_CONDDEF = LR_CONDDEF ).

***--------------------------------------------------------------------------------------
*** Do Super
  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_OBJECT = IR_OBJECT ).


  try.
      move IR_OBJECT ?to ME->R_CONDDEF.
    catch CX_SY_MOVE_CAST_ERROR.
      raise exception type /VCXI/CX_CKX.
  endtry.

***----------------------------------------------------------------------------
  if ME->R_GRID_VALID is not bound.
*** Create Grid for DVC Validation
    create object ME->R_GRID_VALID
      exporting
        IR_CUSTOMIZING = ME->R_CONDDEF.
  endif.

***----------------------------------------------------------------------------
  if ME->R_GRID_VALUE is not bound.
*** Create Grid for DVC Condition Value
    create object ME->R_GRID_VALUE
      exporting
        IR_CUSTOMIZING = ME->R_CONDDEF.
  endif.

***----------------------------------------------------------------------------
  if ME->R_GRID_EXIT is not bound.
*** Create Grid for DVC Condition Exit
    create object ME->R_GRID_EXIT
      exporting
        IR_CUSTOMIZING = ME->R_CONDDEF.
  endif.


  call function 'ZVCXI_XCDCU_DUI_CONDDEF_BIND'
    exporting
      IR_DUI_CONDDEF = ME
    importing
      ES_DYNP        = ME->S_DYNP.

endmethod.
method DO_FREE.

  SUPER->DO_FREE( ).

***------------------------------------------------------------------
*** Free Validation Grid
  if ME->R_GRID_VALID is bound.
    ME->R_GRID_VALID->DO_FREE( ).
    clear ME->R_GRID_VALID.
  endif.

***------------------------------------------------------------------
*** Free Value Grid
  if ME->R_GRID_VALUE is bound.
    ME->R_GRID_VALUE->DO_FREE( ).
    clear ME->R_GRID_VALUE.
  endif.

***------------------------------------------------------------------
*** Free Value Grid
  if ME->R_GRID_EXIT is bound.
    ME->R_GRID_EXIT->DO_FREE( ).
    clear ME->R_GRID_EXIT.
  endif.

endmethod.
method DO_PBO.

*** initialze Visualization
  ME->INTI_VIS( ).

*** Refresh Grid
  if ME->R_GRID_VALID is bound.
    ME->R_GRID_VALID->REFRESH_GRID( ).
  endif.
  if ME->R_GRID_VALUE is bound.
    ME->R_GRID_VALUE->REFRESH_GRID( ).
  endif.
  if ME->R_GRID_EXIT is bound.
    ME->R_GRID_EXIT->REFRESH_GRID( ).
  endif.

  ME->MODIFY_SCREEN( ).

endmethod.
method DO_UPDATE_CONDDEF_VIS.

  if ME->S_CD_VIS-ICODE ne IS_CD_VIS-ICODE.
    ME->R_CONDDEF->SET_ID( IF_ID = IS_CD_VIS-ICODE ).
  endif.

  if ME->S_CD_VIS-ICODE_DESCR ne IS_CD_VIS-ICODE_DESCR.
    ME->R_CONDDEF->SET_DESCR( IF_DESCR = IS_CD_VIS-ICODE_DESCR ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_VALID is bound.
    ME->R_GRID_VALID->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID_VALUE is bound.
    ME->R_GRID_VALUE->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID_EXIT is bound.
    ME->R_GRID_EXIT->CHECK_CHANGED_DATA( ).
  endif.

  case IF_UCOMM.
    when ZCL_VCXI_XCDCU_DUI_CONDDEF=>C_UC_REQ_TR.
      ME->HANDLE_UC_REQ_TR( ).

    when ZCL_VCXI_XCDCU_DUI_CONDDEF=>C_UC_SEL_IREGE.
      ME->HANDLE_UC_SEL_IREGE( ).

  endcase.

endmethod.
method HANDLE_UC_CHECK_S.

  create object ME->R_MSG.

  ME->R_CONDDEF->DO_CHECK( IR_MSG = ME->R_MSG ).

  if ME->R_MSG->T_MSG is not initial.
    ME->R_MSG->DISPLAY_MSG( ).
    ME->R_MSG->INIT_MSG( ).
  endif.

endmethod.
method HANDLE_UC_CHOOSE.

  data:  LF_GREGE   type /VCXI/CKR_GREGE.

  case ME->R_UIFW->F_CURSOR.
    when 'ZVCXI_XCDCU_S_CD_VIS-IREGE'.
      if ME->R_CONDDEF->R_REGDVC is bound.
        LF_GREGE = ME->R_CONDDEF->R_REGDVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***     Call Registry UI
        call function '/VCXI/CKRU_REGISTRY_START'
          starting new task 'REG'
          exporting
            IF_GREGE = LF_GREGE.
      endif.
  endcase.

endmethod.
method HANDLE_UC_REQ_TR.

  ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCDC_CONDDEF=>C_FCODE_CONDDEF_REQ_TR ).

endmethod.
method HANDLE_UC_SEL_IREGE.

  data: LT_ELMTY  type        /VCXI/CKX_TT_OBJECT.
  data: LR_REGDVC type ref to /VCXI/CL_CKR_REGELMNT,
        LR_ELMTY  type ref to /VCXI/IF_CKX_OBJECT.
  data: LF_GREGE  type        /VCXI/CKR_GREGE.

*** Get Only Registry DVC Elements
  LR_ELMTY = /VCXI/CL_CKR_ELMTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = 'ZVCXI_XCD_DVC' ).
  if LR_ELMTY is bound.
    append LR_ELMTY to LT_ELMTY.
  endif.

*** Open Searchhelp
  LR_REGDVC = /VCXI/CL_CKRU_SHLP_REGELMNT=>CALL_SHLP( IT_ELMTY = LT_ELMTY ).

  check LR_REGDVC is bound.

*** Set Registry Element
  move LR_REGDVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GREGE.
  ME->R_CONDDEF->SET_REGDVC( IF_GREGE = LF_GREGE ).

endmethod.
method HANDLE_UC_TOGGLE.

*** Request Machine ALV Refresh
  if ME->R_GRID_VALID is bound.
    move ABAP_TRUE to ME->R_GRID_VALID->F_REFRESH_ALL_REQ.
    move ABAP_TRUE to ME->R_GRID_VALID->F_REFRESH_REQ.
  endif.
  if ME->R_GRID_VALUE is bound.
    move ABAP_TRUE to ME->R_GRID_VALUE->F_REFRESH_ALL_REQ.
    move ABAP_TRUE to ME->R_GRID_VALUE->F_REFRESH_REQ.
  endif.
  if ME->R_GRID_EXIT is bound.
    move ABAP_TRUE to ME->R_GRID_EXIT->F_REFRESH_ALL_REQ.
    move ABAP_TRUE to ME->R_GRID_EXIT->F_REFRESH_REQ.
  endif.

endmethod.
method INTI_VIS.

  data:  LS_LOG      type /VCXI/CKX_S_LOG,
         LS_LOG_EXT  type /VCXI/CKX_S_LOG_EXT.

  free: ME->S_CD_VIS.

  move ME->R_OBJECT->GET_ID( )     to ME->S_CD_VIS-ICODE.
  move ME->R_OBJECT->GET_DESCR( )  to ME->S_CD_VIS-ICODE_DESCR.

*** Get Registry Element DVC
  if ME->R_CONDDEF           is bound and
     ME->R_CONDDEF->R_REGDVC is bound.
    move ME->R_CONDDEF->R_REGDVC->/VCXI/IF_CKX_OBJECT~GET_ID( )
                                   to ME->S_CD_VIS-IREGE.
  endif.

*** Get Source
  move-corresponding ME->R_CONDDEF->S_SRC to ME->S_CD_VIS.

*** Get Log Data
  move ME->R_OBJECT->GET_LOG( )    to LS_LOG.
  LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
  move-corresponding LS_LOG_EXT    to ME->S_CD_VIS.

endmethod.
method MODIFY_SCREEN.

***------------------------------------------------------------------------------------------------
*** Modify Screen
  loop at screen.
    if ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-REQUIRED.
    endif.
    modify screen.
  endloop.

endmethod.
