
class ZCL_VCXI_XCM_MBQ_STP_S101 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  abstract
  create public .

public section.

  constants C_SOKEY_DMS_DOC type ZVCXI_XCM_MBQ_SOKEY value 'XC_DMS_DOC' ##NO_TEXT.

  methods EXECUTE
    redefinition .
protected section.

  methods ADD_DMSLI
    importing
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY optional
    changing
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    returning
      value(RF_DLCNT) type ZVCXI_XCM_MBQ_DLCNT
    raising
      /VCXI/CX_CKX .
  methods ADD_MATLI_SB
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT optional
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
    returning
      value(RF_MLCNT) type ZVCXI_XCM_MBQ_MLCNT
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CONFIG
  abstract
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    exporting
      !ET_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !ET_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT
    importing
      !IF_ACTID type ZVCXI_XCM_MBQ_ACTID
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT optional
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST optional
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CMIR
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_CSB
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_DMS
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_ACTDAT_MAT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_DISST type /VCXI/VKC_DISST
    exporting
      !EF_SKIP type ABAP_BOOL
    returning
      value(RR_ACTDAT) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MAKT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MAKT) type ZVCXI_XCM_MBQ_TT_MATDAT_MAKT
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARA
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RS_MATDAT_MARA) type ZVCXI_XCM_MBQ_S_MATDAT_MARA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARC
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MARC) type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MARD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MARD) type ZVCXI_XCM_MBQ_TT_MATDAT_MARD
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MBEW
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MBEW) type ZVCXI_XCM_MBQ_TT_MATDAT_MBEW
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MLGN
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MARC type ZVCXI_XCM_MBQ_TT_MATDAT_MARC
    returning
      value(RT_MATDAT_MLGN) type ZVCXI_XCM_MBQ_TT_MATDAT_MLGN
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MLGT
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
      !IT_MATDAT_MLGN type ZVCXI_XCM_MBQ_TT_MATDAT_MLGN
    returning
      value(RT_MATDAT_MLGT) type ZVCXI_XCM_MBQ_TT_MATDAT_MLGT
    raising
      /VCXI/CX_CKX .
  methods GET_MATDAT_MVKE
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_TMATN type ZVCXI_XCM_MBQ_TMATN
    returning
      value(RT_MATDAT_MVKE) type ZVCXI_XCM_MBQ_TT_MATDAT_MVKE
    raising
      /VCXI/CX_CKX .
  methods GET_SOKEY_SB
  abstract
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
    returning
      value(RF_SOKEY) type ZVCXI_XCM_MBQ_SOKEY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S101 definition
class ZCL_VCXI_XCM_MBQ_STP_S101 implementation.
  method ADD_DMSLI.

    data: LF_SKIP type ABAP_BOOL.
    field-symbols: <S_DMSLI>  type ZVCXI_XCM_MBQ_S_DMSLI,
                   <S_ACTCON> type ZVCXI_XCM_MBQ_S_ACTCON.


*** Add DMS Document
    RF_DLCNT = LINES( CT_DMSLI ) + 1.
    insert value #( DLCNT        = RF_DLCNT
                    SOKEY        = IF_SOKEY
                    LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( )
                    S_DOC_KEY    = IS_DOC_KEY
                  ) into table CT_DMSLI assigning <S_DMSLI>.

*** Load Activities based on Source Key
    <S_DMSLI>-T_ACTCON = ZCL_VCXI_XCM_MBQ_CUST=>READ_ACTCON( IF_SOKEY = <S_DMSLI>-SOKEY ).

    loop at <S_DMSLI>-T_ACTCON assigning <S_ACTCON>.
***   Load Activity Control Data
      <S_ACTCON>-R_ACTDAT = ME->GET_ACTDAT( exporting IF_ACTID        = <S_ACTCON>-ACTID
                                                      IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                      IF_SOKEY        = <S_DMSLI>-SOKEY
                                                      IF_WERKS        = IF_WERKS
                                            importing EF_SKIP         = LF_SKIP ).

***   Remove Activity if it should be skipped
      if LF_SKIP ne ABAP_FALSE.
        delete <S_DMSLI>-T_ACTCON.
      endif.
    endloop.

  endmethod.
  method ADD_MATLI_SB.

    data: LF_SKIP type ABAP_BOOL.
    field-symbols: <S_MATLI>  type ZVCXI_XCM_MBQ_S_MATLI,
                   <S_ACTCON> type ZVCXI_XCM_MBQ_S_ACTCON.


*** Set Material List to make it available for Sales BOM
    ME->R_DCO_OUTPUT->SET_MATLI( IT_MATLI = CT_MATLI ).

***--------------------------------------------------------------------------------------
*** Add Material
    RF_MLCNT = LINES( CT_MATLI ) + 1.
    insert value #( MLCNT        = RF_MLCNT
                    SOKEY        = ME->GET_SOKEY_SB( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                     IT_MATLI        = CT_MATLI )
                    DISST        = 0
                  ) into table CT_MATLI assigning <S_MATLI>.

*** Load Activities based on Source Key
    <S_MATLI>-T_ACTCON = ZCL_VCXI_XCM_MBQ_CUST=>READ_ACTCON( IF_SOKEY = <S_MATLI>-SOKEY ).

***--------------------------------------------------------------------------------------
    loop at <S_MATLI>-T_ACTCON assigning <S_ACTCON>.
***   Load Activity Control Data
      <S_ACTCON>-R_ACTDAT = ME->GET_ACTDAT( exporting IF_ACTID        = <S_ACTCON>-ACTID
                                                      IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                      IF_SOKEY        = <S_MATLI>-SOKEY
                                                      IF_WERKS        = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-WERKS
                                                      IF_DISST        = <S_MATLI>-DISST
                                            importing EF_SKIP         = LF_SKIP ).

***   Remove Activity if it should be skipped
      if LF_SKIP eq ABAP_TRUE.
        delete <S_MATLI>-T_ACTCON.
      endif.
    endloop.

  endmethod.
  method EXECUTE.

    data: LT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI,
          LT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI.
    data: LR_SVC type ref to /VCXI/CL_VKSRA_SVC.


    try.
***--------------------------------------------------------------------------------------
***     Get configuration for current position
        LR_SVC = ME->R_DCO_INPUT->R_BOB_SDOC->GET_SVC( IF_POSNR = ME->R_DCO_INPUT->F_POSNR ).

***     Check status of configuration to be consistent
        if LR_SVC is bound and
           LR_SVC->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

***       Get all messages
          append lines of LR_SVC->GET_STATUS_MSG( )->R_MESSAGE->T_MSG to ME->R_RPSEG->R_MSG->T_MSG.

***       Material configuration is inconsistent. Please double check.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                                IF_MSGTY = 'E'
                                                IF_MSGNO = '101' ).
        endif.

***--------------------------------------------------------------------------------------
***     Analyze Configuration for SubProcesses
        ME->ANALYZE_CONFIG( exporting IR_SVC   = LR_SVC
                            importing ET_MATLI = LT_MATLI
                                      ET_DMSLI = LT_DMSLI ).

***     Set Material and DMS Document List
        ME->R_DCO_OUTPUT->SET_MATLI( IT_MATLI = LT_MATLI ).
        ME->R_DCO_OUTPUT->SET_DMSLI( IT_DMSLI = LT_DMSLI ).


***--------------------------------------------------------------------------------------
***     Set Status to Complete
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method GET_ACTDAT.

    clear EF_SKIP.

    case IF_ACTID.
***--------------------------------------------------------------------------------------
***   Loop to create materials
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MAT.    " Material Creation
        RR_ACTDAT = ME->GET_ACTDAT_MAT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CSB.    " Create Sales BOM
        RR_ACTDAT = ME->GET_ACTDAT_CSB( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_CMIR.    " Create Customer-Materials Info Record
        RR_ACTDAT = ME->GET_ACTDAT_CMIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).

***--------------------------------------------------------------------------------------
***   Loop to create DMS Document
      when ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_DMS.    " DMS Document Creation
        RR_ACTDAT = ME->GET_ACTDAT_DMS( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                        importing EF_SKIP         = EF_SKIP ).

    endcase.

  endmethod.
  method GET_ACTDAT_CMIR.

    field-symbols: <S_ACTDAT_CMIR> type ZVCXI_XCM_MBQ_S_ACTDAT_CMIR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CMIR.
    assign RR_ACTDAT->* to <S_ACTDAT_CMIR>.

***--------------------------------------------------------------------------------------
*** Define Control Data

*** Get Partner
    <S_ACTDAT_CMIR>-KUNNR = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ME->R_DCO_INPUT->F_POSNR
                                                                          PARVW = 'AG' ]-KUNNR optional ).
    if <S_ACTDAT_CMIR>-KUNNR is initial.
      <S_ACTDAT_CMIR>-KUNNR = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                                            PARVW = 'AG' ]-KUNNR optional ).
    endif.

*** Organizational Data
    <S_ACTDAT_CMIR>-VKORG = ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK-VKORG.
    <S_ACTDAT_CMIR>-VTWEG = ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK-VTWEG.
    <S_ACTDAT_CMIR>-SPART = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-SPART.

*** Get Customer-Material Number
    <S_ACTDAT_CMIR>-KDMAT = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-KDMAT.
    <S_ACTDAT_CMIR>-KDPTX = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-ARKTX.

    if <S_ACTDAT_CMIR>-KDMAT is initial.
      EF_SKIP = ABAP_TRUE.
      return.
    endif.

*UNTTO
*UEBTO

  endmethod.
  method GET_ACTDAT_CSB.

    data: LS_TD111 type ZVCXI_XCM_TD111.
    data: LT_STKO_EX type ZCL_VCXI_XCI_BOB_BOM=>YT_STKO_EX,
          LT_STPO_EX type ZCL_VCXI_XCI_BOB_BOM=>YT_STPO_EX.
    field-symbols: <S_ACTDAT_CSB> type ZVCXI_XCM_MBQ_S_ACTDAT_CSB.

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_CSB.
    assign RR_ACTDAT->* to <S_ACTDAT_CSB>.

***--------------------------------------------------------------------------------------
*** Get right Reference Material Information
    LS_TD111 = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                   IF_WERKS = IF_WERKS ).
    <S_ACTDAT_CSB>-TMATN = LS_TD111-TMATN.
    <S_ACTDAT_CSB>-WERKS = IF_WERKS.
    <S_ACTDAT_CSB>-STLAN = '5'.       "Sales and Distribution

***--------------------------------------------------------------------------------------
*** Read Template BOM
    new ZCL_VCXI_XCI_BOB_BOM( IF_MATNR = <S_ACTDAT_CSB>-TMATN
                              IF_WERKS = <S_ACTDAT_CSB>-WERKS )->READ( exporting IF_STLAN = <S_ACTDAT_CSB>-STLAN
                                                                       importing ET_STKO  = LT_STKO_EX
                                                                                 ET_STPO  = LT_STPO_EX ).
    if LINE_EXISTS( LT_STKO_EX[ 1 ] ).
      <S_ACTDAT_CSB> = corresponding #( base ( <S_ACTDAT_CSB> ) LT_STKO_EX[ 1 ] ).
    else.
      raise exception type /VCXI/CX_CKX.
    endif.

***--------------------------------------------------------------------------------------
*** Define Valid From Date
    <S_ACTDAT_CSB>-DATUV = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBEP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-EDATU default SY-DATUM ).
    <S_ACTDAT_CSB>-DATUV = cond #( when <S_ACTDAT_CSB>-DATUV gt SY-DATUM then SY-DATUM
                                                                         else <S_ACTDAT_CSB>-DATUV ).

***--------------------------------------------------------------------------------------
*** Define Items based on Finished Goods
    loop at ME->R_DCO_OUTPUT->T_MATLI into data(LS_MATLI)
                                      where DISST = 1.
      append value #( LEVEL_SOURCE = LS_MATLI-LEVEL_SOURCE
                    ) to <S_ACTDAT_CSB>-T_SBDAT_ITEM assigning field-symbol(<S_SBDAT_ITEM>).
      <S_SBDAT_ITEM> = corresponding #( base ( <S_SBDAT_ITEM> ) LT_STPO_EX[ 1 ] ).

***   Adjust Component Quantity
      write LS_MATLI-KMPMG unit LS_MATLI-KMPME to <S_SBDAT_ITEM>-COMP_QTY.
      <S_SBDAT_ITEM>-COMP_UNIT = LS_MATLI-KMPME.

    endloop.

  endmethod.
  method GET_ACTDAT_DMS.

    field-symbols: <S_ACTDAT_DMS> type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.
    assign RR_ACTDAT->* to <S_ACTDAT_DMS>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    EF_SKIP = ABAP_TRUE.

  endmethod.
  method GET_ACTDAT_MAT.

    data: LF_BWKEY type BWKEY,
          LF_REWRK type REWRK.
    data: LS_TD111       type ZVCXI_XCM_TD111,
          LS_MATDAT_MARC type ZVCXI_XCM_MBQ_S_MATDAT_MARC.
    data: LT_LGORT type table of LGORT_D.
    field-symbols: <S_ACTDAT_MAT> type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.
    assign RR_ACTDAT->* to <S_ACTDAT_MAT>.

***--------------------------------------------------------------------------------------
*** Get right Reference Material Information
    <S_ACTDAT_MAT>-TMATN = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                               IF_WERKS = IF_WERKS )-TMATN.

***--------------------------------------------------------------------------------------
*** Define Client Data
    <S_ACTDAT_MAT>-S_MATDAT_MARA = ME->GET_MATDAT_MARA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Material Description
    <S_ACTDAT_MAT>-T_MATDAT_MAKT = ME->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Sales Organizations
    <S_ACTDAT_MAT>-T_MATDAT_MVKE = ME->GET_MATDAT_MVKE( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Plant Data
    <S_ACTDAT_MAT>-T_MATDAT_MARC = ME->GET_MATDAT_MARC( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN ).

*** Define Valuation Data
    <S_ACTDAT_MAT>-T_MATDAT_MBEW = ME->GET_MATDAT_MBEW( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC  = <S_ACTDAT_MAT>-T_MATDAT_MARC ).

*** Determine Storage Location Data
    <S_ACTDAT_MAT>-T_MATDAT_MARD = ME->GET_MATDAT_MARD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC  = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Determine Warehouse Number Data
    <S_ACTDAT_MAT>-T_MATDAT_MLGN = ME->GET_MATDAT_MLGN( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MARC  = <S_ACTDAT_MAT>-T_MATDAT_MARC ).
*** Determine Storage Type Data
    <S_ACTDAT_MAT>-T_MATDAT_MLGT = ME->GET_MATDAT_MLGT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                        IF_SOKEY        = IF_SOKEY
                                                        IF_WERKS        = IF_WERKS
                                                        IF_TMATN        = <S_ACTDAT_MAT>-TMATN
                                                        IT_MATDAT_MLGN  = <S_ACTDAT_MAT>-T_MATDAT_MLGN ).
  endmethod.
  method GET_MATDAT_MAKT.

    data: LS_VBAP type VBAP.


    LS_VBAP = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ] optional ).
    check LS_VBAP is not initial.

*** Use Item Description as Material Description
    RT_MATDAT_MAKT = value #( ( MAKTX = LS_VBAP-ARKTX ) ).

  endmethod.
  method GET_MATDAT_MARA.

    data: LS_TD111 type ZVCXI_XCM_TD111.
    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Get Reference Material
    LS_TD111 = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                   IF_WERKS = IF_WERKS ).
    create object LR_BOB_MAT.
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN ).

***--------------------------------------------------------------------------------------
*** Default Values
    RS_MATDAT_MARA = corresponding #( LR_BOB_MAT->S_CLIENTDATA ).

*** Set Material Type
    RS_MATDAT_MARA-MATL_TYPE = LS_TD111-MTART.

  endmethod.
  method GET_MATDAT_MARC.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_MATDAT_MARC> type ZVCXI_XCM_MBQ_S_MATDAT_MARC.


***--------------------------------------------------------------------------------------
*** Get Reference Material
    LR_BOB_MAT = new #( ).
    LR_BOB_MAT->INIT_FROM_DB( IF_MATNR = IF_TMATN
                              IF_WERKS = IF_WERKS ).

*** Define main Plant
    append corresponding #( LR_BOB_MAT->S_PLANTDATA ) to RT_MATDAT_MARC assigning <S_MATDAT_MARC>.

*** Adjust Procurement Type
    <S_MATDAT_MARC>-PROC_TYPE = 'E'.

  endmethod.
  method GET_MATDAT_MARD.

*** Determine Storage Location Data based on Plant and Template Material
    if IT_MATDAT_MARC is not initial.
      select WERKS as PLANT
             LGORT as STGE_LOC
             into corresponding fields of table RT_MATDAT_MARD
             from MARD
             for all entries in IT_MATDAT_MARC
            where MATNR eq IF_TMATN
             and  WERKS eq IT_MATDAT_MARC-PLANT.
    endif.

  endmethod.
  method GET_MATDAT_MBEW.

*** Determine Valuation Area based on Plant
    if IT_MATDAT_MARC is not initial.
      select BWKEY as VAL_AREA
             into corresponding fields of table RT_MATDAT_MBEW
             from T001W
             for all entries in IT_MATDAT_MARC
            where WERKS eq IT_MATDAT_MARC-PLANT.
    endif.

  endmethod.
  method GET_MATDAT_MLGN.

*** Warehouse Number Data based on Plant and Template Material
    if IT_MATDAT_MARC is not initial.
      select MLGN~LGNUM as WHSE_NO
             into corresponding fields of table RT_MATDAT_MLGN
             from T320
             inner join MLGN
              on MLGN~LGNUM eq T320~LGNUM
             for all entries in IT_MATDAT_MARC
            where MLGN~MATNR eq IF_TMATN
             and  T320~WERKS eq IT_MATDAT_MARC-PLANT.
    endif.

  endmethod.
  method GET_MATDAT_MLGT.

*** Storage Type Data based on Warehouse and Template Material
    if IT_MATDAT_MLGN is not initial.
      select LGNUM as WHSE_NO
             LGTYP as STGE_TYPE
             into corresponding fields of table RT_MATDAT_MLGT
             from MLGT
             for all entries in IT_MATDAT_MLGN
            where MATNR eq IF_TMATN
             and  LGNUM eq IT_MATDAT_MLGN-WHSE_NO.
    endif.

  endmethod.
  method GET_MATDAT_MVKE.

    data: LS_TD111 type ZVCXI_XCM_TD111.
    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_MATDAT_MVKE> type ZVCXI_XCM_MBQ_S_MATDAT_MVKE.


***--------------------------------------------------------------------------------------
*** Get Reference Material
    LS_TD111 = ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( IF_SOKEY = IF_SOKEY
                                                   IF_WERKS = IF_WERKS ).

***--------------------------------------------------------------------------------------
*** Define Sales Organizations
    RT_MATDAT_MVKE = value #( ( SALES_ORG  = ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK-VKORG
                                DISTR_CHAN = ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK-VTWEG ) ).

***--------------------------------------------------------------------------------------
    loop at RT_MATDAT_MVKE assigning <S_MATDAT_MVKE>.
***   Load Default Values by Reference Material
      create object LR_BOB_MAT.
      LR_BOB_MAT->INIT_FROM_DB( exporting IF_MATNR    = LS_TD111-TMATN
                                          IF_VKORG    = <S_MATDAT_MVKE>-SALES_ORG
                                          IF_VTWEG    = <S_MATDAT_MVKE>-DISTR_CHAN ).
      <S_MATDAT_MVKE> = corresponding #( LR_BOB_MAT->S_SALESDATA ).

***   Adjust Delivery Plant
      <S_MATDAT_MVKE>-DELYG_PLNT = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-WERKS.
    endloop.

  endmethod.
