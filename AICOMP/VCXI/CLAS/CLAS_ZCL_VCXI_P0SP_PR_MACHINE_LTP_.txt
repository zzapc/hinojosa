
class ZCL_VCXI_P0SP_PR_MACHINE_LTP definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_PCDIM
    returning
      value(RT_PCDIM) type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_PCDIM
    returning
      value(RT_PCDIM) type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
  methods GET_FEATURE
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_PCDIM type /VCXI/VKSC_IEVNT value 'RECALC_PCDIM' ##NO_TEXT.

  methods GET_CONV_LTP
    returning
      value(RR_CONV_LTP) type ref to ZIF_VCXI_P0SP_CONV_LTP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PCDIM
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_PCDIM
    importing
      !IT_PCDIM type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SP_PR_MACHINE_LTP definition
class ZCL_VCXI_P0SP_PR_MACHINE_LTP implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDS's
  move C_PARID_MQTYI_L to ME->F_PARID_MQTYI.
  move C_PARID_MQTYO_P to ME->F_PARID_MQTYO.
  move C_PARID_MSRWA_L to ME->F_PARID_MSRWA.
  move C_PARID_MSSWA_L to ME->F_PARID_MSSWA.
  move 'LENGTH'        to ME->F_DIMNI.
  move 'AAAADL'        to ME->F_DIMNO.

endmethod.
method GET_CONV_LTP.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_CONV_LTP  type ref to ZIF_VCXI_P0SP_CONV_LTP.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SP_CONV_LTP=>C_IPRVT_P0_CONV_LTP
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CONV_LTP.
        check LR_CONV_LTP is bound.

        move LR_CONV_LTP to RR_CONV_LTP.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_FEATURE.

    data: LF_RATIO type F.
    data: LT_PCDIM_IN  type ZVCXI_P0SP_TT_PCDIM,
          LT_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM.


*** Get Super Features
    if IT_GATE_ADDON is supplied.
      RT_FEATURE = SUPER->GET_FEATURE( IT_GATE_ADDON = IT_GATE_ADDON ).
    else.
      RT_FEATURE = SUPER->GET_FEATURE( ).
    endif.

***------------------------------------------------------------------------------------------------
*** PC Dimension In
    LT_PCDIM_IN = ME->GET_MFI_PCDIM( ).
    if LINES( LT_PCDIM_IN ) eq 1.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInLength'     FTVAL = LT_PCDIM_IN[ 1 ]-PCLEN )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInWidth'      FTVAL = LT_PCDIM_IN[ 1 ]-PCWID )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInHeight'     FTVAL = LT_PCDIM_IN[ 1 ]-PCHEI )
                                        changing  CT_FEATURE = RT_FEATURE ).

      if LT_PCDIM_IN[ 1 ]-PCLEN is not initial and
         LT_PCDIM_IN[ 1 ]-PCWID is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LT_PCDIM_IN[ 1 ]-PCLEN
                                                            IF_CALCV_UOM_1 = LT_PCDIM_IN[ 1 ]-PCLEN_UOM
                                                            IF_CALCV_2     = LT_PCDIM_IN[ 1 ]-PCWID
                                                            IF_CALCV_UOM_2 = LT_PCDIM_IN[ 1 ]-PCWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_RATIO ).
      else.
        clear LF_RATIO.
      endif.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInRatio'      FTVAL = LF_RATIO )
                                        changing  CT_FEATURE = RT_FEATURE ).
    endif.

*** PC Dimension Out
    LT_PCDIM_OUT = ME->GET_MFO_PCDIM( ).
    if LINES( LT_PCDIM_OUT ) eq 1.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutLength'     FTVAL = LT_PCDIM_OUT[ 1 ]-PCLEN )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutWidth'      FTVAL = LT_PCDIM_OUT[ 1 ]-PCWID )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutHeight'     FTVAL = LT_PCDIM_OUT[ 1 ]-PCHEI )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutNumberOut'  FTVAL = LT_PCDIM_OUT[ 1 ]-NOOUT )
                                        changing  CT_FEATURE = RT_FEATURE ).

      if LT_PCDIM_OUT[ 1 ]-PCLEN is not initial and
         LT_PCDIM_OUT[ 1 ]-PCWID is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LT_PCDIM_OUT[ 1 ]-PCLEN
                                                            IF_CALCV_UOM_1 = LT_PCDIM_OUT[ 1 ]-PCLEN_UOM
                                                            IF_CALCV_2     = LT_PCDIM_OUT[ 1 ]-PCWID
                                                            IF_CALCV_UOM_2 = LT_PCDIM_OUT[ 1 ]-PCWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_RATIO ).
        /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutRatio'      FTVAL = LF_RATIO )
                                          changing  CT_FEATURE = RT_FEATURE ).
      endif.
    endif.

  endmethod.
method GET_MFI_PCDIM.

  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_MFP       type ref to ZIF_VCXI_P0SP_MFP.
  field-symbols: <S_PCDIM>    type        ZVCXI_P0SP_S_PCDIM.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow In
  LT_GATE = ME->R_PR_MFMGR->GET_MFI( ).
  if lines( LT_GATE ) lt 1.
*** No Material Flow In available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '210' ).
  endif.

*** Get Dimensions of all
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_MFP.
        check LR_MFP is bound.
        append initial line to RT_PCDIM assigning <S_PCDIM>.
        <S_PCDIM> = LR_MFP->GET_PCDIM( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_MFO_PCDIM.

  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_MFP       type ref to ZIF_VCXI_P0SP_MFP.
  field-symbols: <S_PCDIM>    type        ZVCXI_P0SP_S_PCDIM.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne 1.
*** No Material Flow Out available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '209' ).
  endif.

*** Get Dimensions of all
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_MFP.
        check LR_MFP is bound.
        append initial line to RT_PCDIM assigning <S_PCDIM>.
        <S_PCDIM> = LR_MFP->GET_PCDIM( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_PCDIM.
      ME->HANDLE_RECALC_PCDIM( ).
  endcase.

endmethod.
method HANDLE_RECALC_PCDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
        LT_PCDIM     type        ZVCXI_P0SP_TT_PCDIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_PCDIM type ref to ZIF_VCXI_P0SP_ADJ_PCDIM.

  if ME->R_PR_MFMGR is not bound.
    ME->ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR( ).
  endif.
  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the PC Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SP_ADJ_PCDIM=>C_IPRVT_P0_ADJ_PCDIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_PCDIM.
        check LR_ADJ_PCDIM is bound.
        LR_ADJ_PCDIM->CALC_PCDIM_OUT( changing CT_PCDIM = LT_PCDIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set new PC Dimension of Material Flow
  ME->SET_MFO_PCDIM( IT_PCDIM = LT_PCDIM ).

endmethod.
method SET_MFO_PCDIM.

  data: LS_PCDIM     type        ZVCXI_P0SP_S_PCDIM,
        LS_PCDIM_OLD type        ZVCXI_P0SP_S_PCDIM.
  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MFP       type ref to ZIF_VCXI_P0SP_MFP.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne lines( IT_PCDIM ).
*** Requested Material Flow Out not available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '211' ).
  endif.

*** Set Dimensions to first
  loop at LT_GATE into LR_GATE.
    clear LS_PCDIM.
    read table IT_PCDIM into LS_PCDIM index SY-TABIX.
    try.
        move LR_GATE->R_CLSPR ?to LR_MFP.
        check LR_MFP is bound.
        move LR_MFP->GET_PCDIM( ) to LS_PCDIM_OLD.
        LR_MFP->SET_PCDIM( IS_PCDIM = LS_PCDIM ).

***     Check if Conversion for Machine Quantity changed
        if LS_PCDIM-PCLEN ne LS_PCDIM_OLD-PCLEN or
           LS_PCDIM-PCWID ne LS_PCDIM_OLD-PCWID or
           LS_PCDIM-PCUPS ne LS_PCDIM_OLD-PCUPS.
***       Send Event
          ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

  data: LF_NOOUT       type        ZVCXI_XCS_NOOUT.
  data: LS_PCDIM       type        ZVCXI_P0SP_S_PCDIM,
        LS_PCDIM_IN    type        ZVCXI_P0SP_S_PCDIM,
        LS_QTY         type        ZVCXI_XCSP_S_QTY.
  data: LT_PCDIM_OUT   type        ZVCXI_P0SP_TT_PCDIM,
        LT_PCDIM_IN    type        ZVCXI_P0SP_TT_PCDIM.
  data: LR_CONV_LTP    type ref to ZIF_VCXI_P0SP_CONV_LTP.

***----------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
  move ME->GET_MQTYI( ) to RS_MQTYI.
  clear RS_MQTYI-MQTYI.

***----------------------------------------------------------------------------
  try.
***   Get PC Dimension of Material Flow In and Out
      move ME->GET_MFI_PCDIM( ) to LT_PCDIM_IN.
      move ME->GET_MFO_PCDIM( ) to LT_PCDIM_OUT.
    catch /VCXI/CX_CKX.
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Get Length to PC Conversion
  LR_CONV_LTP = ME->GET_CONV_LTP( ).
  if LR_CONV_LTP is bound.
    LT_PCDIM_IN = LR_CONV_LTP->CONV_PC_TO_LENGTH( IT_PCDIM = LT_PCDIM_IN ).
  endif.

***----------------------------------------------------------------------------
*** Get PC Dimension of Flow Out
  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
  check SY-SUBRC = 0.

***----------------------------------------------------------------------------
*** "No MFO" -> Can't work
  if lines( LT_PCDIM_OUT ) eq 0.
    exit.

***----------------------------------------------------------------------------
  else.

*** Get Total Number of Out
    loop at LT_PCDIM_OUT into LS_PCDIM.
      LF_NOOUT = LF_NOOUT + LS_PCDIM-NOOUT.
    endloop.
    check LF_NOOUT is not initial.

*** Get Number of PC's in relation to Number of Outs
    LS_QTY-QTY = ceil( IS_QTY-QTY / LF_NOOUT ).

*** Convert it to Machine Quantity In
    LS_QTY-QTY     = LS_QTY-QTY * LS_PCDIM_IN-PCLEN.
    LS_QTY-QTY_UOM = LS_PCDIM_IN-PCLEN_UOM.

    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_MQTYI-MQTYI_UOM
                                                       IF_UOM_IN    = LS_QTY-QTY_UOM
                                                       IF_VALUE_IN  = LS_QTY-QTY
                                             importing EF_VALUE_OUT = RS_MQTYI-MQTYI
                                                       EF_UOM_OUT   = RS_MQTYI-MQTYI_UOM ).

  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

  data: LF_NUPSL       type        F.
  data: LS_PCDIM       type        ZVCXI_P0SP_S_PCDIM,
        LS_PCDIM_IN    type        ZVCXI_P0SP_S_PCDIM,
        LS_MQTYO       type        ZVCXI_XCSP_S_MQTYO.
  data: LT_PCDIM_IN    type        ZVCXI_P0SP_TT_PCDIM,
        LT_PCDIM_OUT   type        ZVCXI_P0SP_TT_PCDIM.
  data: LR_CONV_LTP    type ref to ZIF_VCXI_P0SP_CONV_LTP.

***----------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
  move ME->GET_MQTYO( ) to RS_MQTYO.
  clear RS_MQTYO-MQTYO.

***----------------------------------------------------------------------------
  try.
***   Get PC Dimension of Material Flow In and Out
      move ME->GET_MFI_PCDIM( ) to LT_PCDIM_IN.
      move ME->GET_MFO_PCDIM( ) to LT_PCDIM_OUT.
    catch /VCXI/CX_CKX.
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Get Length to PC Conversion
  LR_CONV_LTP = ME->GET_CONV_LTP( ).
  if LR_CONV_LTP is bound.
    LT_PCDIM_IN = LR_CONV_LTP->CONV_PC_TO_LENGTH( IT_PCDIM = LT_PCDIM_IN ).
  endif.

***----------------------------------------------------------------------------
*** Get PC Dimension of Flow In and Out
  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
  check SY-SUBRC = 0.


  read table LT_PCDIM_OUT index 1
                          transporting no fields.
  check SY-SUBRC = 0.

***----------------------------------------------------------------------------
*** "No MFO" -> Can't work
  if lines( LT_PCDIM_OUT ) eq 0.
    exit.

***----------------------------------------------------------------------------
  else.
*** Calculate each Output
    loop at LT_PCDIM_OUT into LS_PCDIM.
      if LS_PCDIM_IN-PCLEN ne 0.
***     Convert it to Machine Quantity Out and Round to PC Type Out
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_QTY-QTY
                                                            IF_CALCV_UOM_1 = IS_QTY-QTY_UOM
                                                            IF_CALCV_2     = LS_PCDIM_IN-PCLEN
                                                            IF_CALCV_UOM_2 = LS_PCDIM_IN-PCLEN_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_NUPSL ).

        LS_MQTYO-MQTYO = LF_NUPSL * LS_PCDIM-NOOUT.

***     Round Depending on PC Typ Out
        ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM-PCTYP
                                                   changing  CF_VALUE = LS_MQTYO-MQTYO ).

***     Add to Total Quantity
        add LS_MQTYO-MQTYO to RS_MQTYO-MQTYO.
      else.
        clear RS_MQTYO-MQTYO.
        exit.
      endif.
    endloop.
  endif.

endmethod.
