
class ZCL_VCXI_XCDCU_UI_REGDVC definition
  public
  inheriting from /VCXI/CL_CKRU_UI_REGELMNT
  create public .

public section.

  class-data F_ACTIVETAB type STRING .
  data S_REGDVC_VIS type ZVCXI_XCDCU_S_REGDVC_VIS .

  methods UPDATE_REGDVC
    importing
      !IS_REGDVC_VIS type ZVCXI_XCDCU_S_REGDVC_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/CL_CKRU_UIFW
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .

  methods DO_FREE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PART_SCRGR type ref to ZCL_VCXI_XCDCU_PART_SCRGR .
  data R_PART_FUNCT type ref to ZCL_VCXI_XCDCU_PART_FUNCT .
  data R_PART_DEFAU type ref to ZCL_VCXI_XCDCU_PART_DEFAU .
  data R_REGDVC type ref to ZCL_VCXI_XCDC_REGDVC .

  methods INIT_DEFAU
    raising
      /VCXI/CX_CKX .
  methods INIT_FUNCT
    raising
      /VCXI/CX_CKX .
  methods INIT_SCRGR
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCDCU_UI_REGDVC definition
class ZCL_VCXI_XCDCU_UI_REGDVC implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_OBJECT = IR_OBJECT ).

  try.
      move ME->R_OBJECT ?to ME->R_REGDVC.
    catch CX_SY_MOVE_CAST_ERROR.
      raise exception type /VCXI/CX_CKX.
  endtry.

  call function 'ZVCXI_XCDCU_UI_REGDVC_BIND'
    exporting
      IR_UI_REGDVC = ME
    importing
      ES_DYNP            = ME->S_DYNP.

  ME->INIT_SCRGR( ).
  ME->INIT_FUNCT( ).
  ME->INIT_DEFAU( ).

endmethod.
method DO_FREE.

  SUPER->DO_FREE( ).

  if ME->R_PART_SCRGR is bound.
    ME->R_PART_SCRGR->DO_FREE( ).
  endif.

  if ME->R_PART_FUNCT is bound.
    ME->R_PART_FUNCT->DO_FREE( ).
  endif.

  if ME->R_PART_DEFAU is bound.
    ME->R_PART_DEFAU->DO_FREE( ).
  endif.

endmethod.
method DO_PBO.

  check ME->R_REGDVC is bound.

***------------------------------------------------------------------------------------------------
  SUPER->DO_PBO( ).
  move-corresponding ME->S_REGELMNT_VIS                to ME->S_REGDVC_VIS.

***----------------------------------------------------------------------------
*** Initialize TabStrip Description
  if ME->R_PART_SCRGR is bound.
    ME->S_REGDVC_VIS-STRIPDESCR_SCRGR = ME->R_PART_SCRGR->GET_STRIPDESCR( ).
  endif.
  if ME->R_PART_FUNCT is bound.
    ME->S_REGDVC_VIS-STRIPDESCR_FUNCT = ME->R_PART_FUNCT->GET_STRIPDESCR( ).
  endif.
  if ME->R_PART_DEFAU is bound.
    ME->S_REGDVC_VIS-STRIPDESCR_DEFAU  = ME->R_PART_DEFAU->GET_STRIPDESCR( ).
  endif.

***----------------------------------------------------------------------------
*** Active Tab
  if ( ME->R_PART_SCRGR is not bound and ME->F_ACTIVETAB eq '0100STRIP_SCRGR' ) or
     ( ME->R_PART_FUNCT is not bound and ME->F_ACTIVETAB eq '0100STRIP_FUNCT' ) or
     ( ME->R_PART_DEFAU is not bound and ME->F_ACTIVETAB eq '0100STRIP_DEFAU' ).
    clear ME->F_ACTIVETAB.
  endif.

***------------------------------------------------------------------------------------------------
*** Modify Screen
  loop at screen.
    if ME->R_REGELMNT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-REQUIRED.
    endif.

*** Hide Screen Group Tab when not bound
    if SCREEN-NAME eq 'ZVCXI_XCDCU_S_REGDVC_VIS-STRIPDESCR_SCRGR'.
      if ME->R_PART_SCRGR is not bound.
        move 1 to SCREEN-INVISIBLE.
      endif.
      move 1 to SCREEN-INPUT.
    endif.

*** Hide Function Tab when not bound
    if SCREEN-NAME eq 'ZVCXI_XCDCU_S_REGDVC_VIS-STRIPDESCR_FUNCT'.
      if ME->R_PART_FUNCT is not bound.
        move 1 to SCREEN-INVISIBLE.
      endif.
      move 1 to SCREEN-INPUT.
    endif.

*** Hide Default Tab when not bound
    if SCREEN-NAME eq 'ZVCXI_XCDCU_S_REGDVC_VIS-STRIPDESCR_DEFAU'.
      if ME->R_PART_DEFAU is not bound.
        move 1 to SCREEN-INVISIBLE.
      endif.
      move 1 to SCREEN-INPUT.
    endif.

    modify screen.
  endloop.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  case IF_UCOMM.
    when '0100STRIP_SCRGR' or
         '0100STRIP_FUNCT' or
         '0100STRIP_DEFAU'.
      move IF_UCOMM to ME->F_ACTIVETAB.

    when others.
      if ME->R_PART_SCRGR is bound.
        ME->R_PART_SCRGR->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
      endif.
      if ME->R_PART_FUNCT is bound.
        ME->R_PART_FUNCT->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
      endif.
      if ME->R_PART_DEFAU is bound.
        ME->R_PART_DEFAU->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
      endif.

  endcase.

endmethod.
method INIT_DEFAU.

  data: LR_DEFAU type ref to ZIF_VCXI_XCDC_REGDVC_DEFAU.

  try.
      move ME->R_REGELMNT ?to LR_DEFAU.

      create object ME->R_PART_DEFAU
        exporting
          IR_DEFAU = LR_DEFAU.

    catch CX_SY_MOVE_CAST_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endtry.

endmethod.
method INIT_FUNCT.

  data: LR_FUNCT type ref to ZIF_VCXI_XCDC_REGDVC_FUNCT.

  try.
      move ME->R_REGELMNT ?to LR_FUNCT.

      create object ME->R_PART_FUNCT
        exporting
          IR_FUNCT = LR_FUNCT.

    catch CX_SY_MOVE_CAST_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endtry.

endmethod.
method INIT_SCRGR.

  data: LR_SCRGR type ref to ZIF_VCXI_XCDC_REGDVC_SCRGR.

  try.
      move ME->R_REGELMNT ?to LR_SCRGR.

      create object ME->R_PART_SCRGR
        exporting
          IR_SCRGR = LR_SCRGR.

    catch CX_SY_MOVE_CAST_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endtry.

endmethod.
method UPDATE_REGDVC.

  data:  LS_REGELMNT_VIS type /VCXI/CKRU_S_REGELMNT_VIS.

*** process 'super' update
  move-corresponding IS_REGDVC_VIS to LS_REGELMNT_VIS.
  ME->UPDATE_REGELMNT( IS_REGELMNT_VIS = LS_REGELMNT_VIS ).

endmethod.
