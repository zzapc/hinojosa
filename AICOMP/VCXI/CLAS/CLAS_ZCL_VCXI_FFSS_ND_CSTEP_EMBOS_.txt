
class ZCL_VCXI_FFSS_ND_CSTEP_EMBOS definition
  public
  inheriting from ZCL_VCXI_F0SS_ND_CSTEP
  create public .

public section.
protected section.

  methods INIT_NODE
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_ND_CSTEP_EMBOS definition
class ZCL_VCXI_FFSS_ND_CSTEP_EMBOS implementation.
  method INIT_NODE.

    data:           LF_EMTON            type        ZVCXI_FFS_EMTON.
    data:           LS_EMTIN            type        ZVCXI_FFS_S_EMTIN.
    data:           LR_EMBOS            type ref to ZCL_VCXI_FFSS_PR_CSTEP_EMBOS.
    field-symbols:  <S_NVAL>            type        YS_NVALS.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->INIT_NODE( ).

***--------------------------------------------------------------------------------------
*** Check Input Gate is Embossing
    try.
        move ME->R_GATE->R_CLSPR ?to LR_EMBOS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_EMBOS.
    endtry.

    check LR_EMBOS is bound.

*** Set Internal Embossing Thickness
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 2.
    move text-D01 to <S_NVAL>-VAL.

    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 3.
    LR_EMBOS->GET_EMTIN( importing ES_EMTIN = LS_EMTIN ).
    <S_NVAL>-VAL = ME->CONV_ANY_TO_VAL( IF_VALUE = LS_EMTIN-EMTIN
                                        IF_UOM   = LS_EMTIN-EMTIN_UOM ).

*** Set Embossing Tool Number
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 4.
    move text-D02 to <S_NVAL>-VAL.

    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 5.
    LR_EMBOS->GET_EMTON( importing EF_EMTON = LF_EMTON ).

    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_EMTON
      importing
        OUTPUT = <S_NVAL>-VAL.

  endmethod.
endclass. "ZCL_VCXI_FFSS_ND_CSTEP_EMBOS definition
endclass. "ZCL_VCXI_FFSS_ND_CSTEP_EMBOS implementation
