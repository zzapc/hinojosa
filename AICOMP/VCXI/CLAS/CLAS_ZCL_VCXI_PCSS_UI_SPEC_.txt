
class ZCL_VCXI_PCSS_UI_SPEC definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.
  type-pools VRM .

  interfaces /VCXI/IF_VKSU_UIFW .

  data F_ACTIVE_TAB type STRING .
  data F_ACTIVE_TAB_OLD type STRING .
  data F_CURSOR type SCRFNAME .
  data F_DYNNR_SUBSC type DYNNR .
  data R_DEFAULT_GATE type ref to /VCXI/CL_VKSR_GATE .
  data S_SPEC_LAMI_VIS type ZVCXI_P0SS_S_SPEC_LAMI_VIS .
  data S_SPEC_TAB type ZVCXI_PCSS_S_TAB_DESCR .
  data S_SPEC_VIS type ZVCXI_PCSS_S_SPEC_VIS .

  methods ADJUST_PRODI_DESCR
    changing
      !CF_PRODI_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SPEC_LAMI_VIS
    importing
      !IS_SPEC_LAMI_VIS type ZVCXI_P0SS_S_SPEC_LAMI_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SPEC_VIS
    importing
      !IS_SPEC_VIS type ZVCXI_PCSS_S_SPEC_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_DYNNR_INITIAL type DYNNR value '9999'. "#EC NOTEXT
  constants C_DYNNR_LAMI type DYNNR value '0110'. "#EC NOTEXT
  constants C_TAB type STRING value 'TAB'. "#EC NOTEXT
  constants C_TABNAME type STRING value '0100S_TAB-TAB'. "#EC NOTEXT
  type-pools ABAP .
  data F_ALREADY_OPEN type ABAP_BOOL .
  data F_TAB_LIST_REFRESH_REQ type ABAP_BOOL .
  data R_OLD_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_PR_SPEC type ref to ZCL_VCXI_PCSS_PR_SPEC .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_PCSS_TT_TAB_LIST .

  methods SET_DDVAL_PRALI
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_PRALO
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_VLASH_I
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_TLAMI
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_VLASH_O
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_ACTIVE_TAB
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods INIT_LAMI_VIS
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSS_UI_SPEC definition
class ZCL_VCXI_PCSS_UI_SPEC implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.


endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI to ME->R_REGISTERED_UI.

endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PCSS_UI_SPEC_BIND'
    exporting
      IR_UI_SPEC    = ME
    importing
      ES_DYNP       = ME->S_DYNP
      EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->ACTIVATE( ).
  endif.

endmethod.
method ADJUST_PRODI_DESCR.

  data: LF_FIRST type ABAP_BOOL,
        LF_DIMEN type CHAR01.

  LF_FIRST = ABAP_TRUE.

  loop at screen.
    clear: LF_DIMEN.

    check SCREEN-INVISIBLE eq 0.

*** Add needed Product Dimensions
    if SCREEN-NAME cp '*PROLE'.
      move 'L'(D01) to LF_DIMEN.
    endif.
    if SCREEN-NAME cp '*PROWI'.
      move 'W'(D02) to LF_DIMEN.
    endif.
    if SCREEN-NAME cp '*PROHE'.
      move 'H'(D03) to LF_DIMEN.
    endif.
    if SCREEN-NAME cp '*PROH2'.
      move 'h'(D04) to LF_DIMEN.
    endif.

    check LF_DIMEN is not initial.

    if LF_FIRST eq ABAP_TRUE.
      concatenate CF_PRODI_DESCR LF_DIMEN into CF_PRODI_DESCR separated by SPACE.
      clear: LF_FIRST.

    else.
      concatenate CF_PRODI_DESCR LF_DIMEN into CF_PRODI_DESCR separated by '/'.

    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SPEC.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.


*** Request Init List for Tabs
  move ABAP_TRUE to ME->F_TAB_LIST_REFRESH_REQ.

*** Initialize Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

  clear: ME->F_ALREADY_OPEN.

endmethod.
method DISPLAY_ACTIVE_TAB.

  data:  LS_TAB_LIST    type        ZVCXI_XCSP_S_TAB_LIST.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  check ME->F_ACTIVE_TAB cs C_TABNAME.

  check ME->F_ACTIVE_TAB   ne ME->F_ACTIVE_TAB_OLD
     or ME->F_ALREADY_OPEN eq ABAP_FALSE.

  read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
  if SY-SUBRC eq 0.
    move LS_TAB_LIST-R_GATE to LR_GATE.
  endif.

  R_OLD_GATE = LR_GATE.

  ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED      type        /VCXI/CKX_LOCKED,
         LF_INUSE       type        /VCXI/VKSR_INUSE,
         LF_MATNR_O_E   type        ABAP_BOOL,
         LF_MATNR_O_V   type        ABAP_BOOL,
         LF_MATNR_I_E   type        ABAP_BOOL,
         LF_MATNR_I_V   type        ABAP_BOOL,
         LF_SBINFO_O_E  type        ABAP_BOOL,
         LF_SBINFO_O_V  type        ABAP_BOOL,
         LF_SBINFO_I_E  type        ABAP_BOOL,
         LF_SBINFO_I_V  type        ABAP_BOOL,
         LF_PRALO       type        I,
         LF_PRALI       type        I.
  data:  LT_PRALL       type        ZVCXI_P0SS_TT_PRALL.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                               IF_DYNNR = IF_DYNNR ).

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).

      ME->R_PR_SPEC->IS_SBINFO_VISIBLE_O( importing EF_MATNR  = LF_MATNR_O_V
                                                    EF_SBINFO = LF_SBINFO_O_V ).

      ME->R_PR_SPEC->IS_SBINFO_EDITABLE_O( importing EF_MATNR  = LF_MATNR_O_E
                                                     EF_SBINFO = LF_SBINFO_O_E ).

      ME->R_PR_SPEC->IS_SBINFO_VISIBLE_I( importing EF_MATNR  = LF_MATNR_I_V
                                                    EF_SBINFO = LF_SBINFO_I_V ).

      ME->R_PR_SPEC->IS_SBINFO_EDITABLE_I( importing EF_MATNR  = LF_MATNR_I_E
                                                     EF_SBINFO = LF_SBINFO_I_E ).

      LT_PRALL = ME->R_PR_SPEC->GET_ALL_PRALL( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
      LF_PRALO = lines( LT_PRALL ).

      LT_PRALL = ME->R_PR_SPEC->GET_ALL_PRALL( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
      LF_PRALI = lines( LT_PRALL ).

      loop at screen.
***     Set the Tabs which aren't in use as invisible.
        if SCREEN-NAME cs C_TABNAME.
          read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
          if SY-SUBRC ne 0.
            move 1 to SCREEN-INVISIBLE.
          endif.
        endif.

        modify screen.
      endloop.

***   Modify Scree using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

      loop at screen.
***     Self Deckling Flag is not editable if we have it mandatory for the BoardID
***     or if we have Preprint selected!
        if SCREEN-GROUP1                          eq 'FSD' and
         ( ME->R_PR_SPEC->GET_BOARD_CUST_NSTBG( ) eq ABAP_TRUE or
           ME->R_PR_SPEC->GET_FPRPR( )            eq ABAP_TRUE ).
          SCREEN-INPUT = 0.
        endif.

***     BoardID cant be maintained if we have Sheet Procurement
        if ( SCREEN-GROUP1               eq 'FSP'     or
             SCREEN-GROUP1               eq 'FSD' )   and
             ME->R_PR_SPEC->GET_FSHTP( ) eq ABAP_TRUE.
          SCREEN-ACTIVE = 0.
        endif.

***     Hide Lamination Headline
        if SCREEN-GROUP1               eq 'LA'.
          if ME->R_PR_SPEC->GET_TOLAM( ) is initial and
             ME->R_PR_SPEC->GET_TILAM( ) is initial.
            move 0 to SCREEN-INPUT.
          endif.
        endif.

***     Hide Lamination Outside
        if SCREEN-GROUP1 eq 'OLA' and
           ME->R_PR_SPEC->GET_TOLAM( ) is initial.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Lamination Outside Material Screen Option
        if SCREEN-GROUP1 eq 'OLA' and
           SCREEN-GROUP2 eq 'MAT'.
          if LF_MATNR_O_V eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
          if LF_MATNR_O_E eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
        endif.

***     Set SB Info Outside Screen Options
        if SCREEN-GROUP1 eq 'OLA' and
           SCREEN-GROUP2 eq 'SBI'.
          if LF_SBINFO_O_V eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
          if LF_SBINFO_O_E eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
        endif.

***     Hide Lamination Inside
        if SCREEN-GROUP1 eq 'ILA' and
           ME->R_PR_SPEC->GET_TILAM( ) is initial.
          move 0 to SCREEN-INPUT.
        endif.

***     Set Lamination Outside Material Screen Option
        if SCREEN-GROUP1 eq 'ILA' and
           SCREEN-GROUP2 eq 'MAT'.
          if LF_MATNR_I_V eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
          if LF_MATNR_I_E eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
        endif.

***     Set SB Info Inside Screen Options
        if SCREEN-GROUP1 eq 'ILA' and
           SCREEN-GROUP2 eq 'SBI'.
          if LF_SBINFO_I_V eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
          if LF_SBINFO_I_E eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
        endif.

***     Set Print allocation to hidden
        if SCREEN-GROUP1 eq 'PAO' and
         ( LF_PRALO      le 1     or
           ME->R_PR_SPEC->GET_PRTYO( ) is initial ).
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
          move 0 to SCREEN-INPUT.
        endif.
        if SCREEN-GROUP1 eq 'PAI' and
         ( LF_PRALI      le 1     or
           ME->R_PR_SPEC->GET_PRTYI( ) is initial ).
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
          move 0 to SCREEN-INPUT.
        endif.


***     Lock everything if not in change mode
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

      loop at screen.
***     Set tabs back to input
        if SCREEN-NAME cs C_TABNAME.
          move 1 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

***---------------------------------------------------------------------------
*** Check if the PR Class is bound
  check ME->R_PR_SPEC is bound.

  if ME->F_ACTIVE_TAB ne ME->F_ACTIVE_TAB_OLD.
    move ME->F_ACTIVE_TAB to ME->F_ACTIVE_TAB_OLD.
    clear: ME->F_ALREADY_OPEN.
  endif.

  ME->INIT_VIS( ).
  ME->INIT_LAMI_VIS( ).
  ME->INIT_TAB_LIST( ).
  ME->DISPLAY_ACTIVE_TAB( ).

***---------------------------------------------------------------------------
*** Set right subscreen
  if ME->R_PR_SPEC->IS_LAMI_ACTIVE( ) eq ABAP_TRUE.
    move C_DYNNR_LAMI to ME->F_DYNNR_SUBSC.
  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC.
  endif.

***---------------------------------------------------------------------------
*** Define Drop Down Values for Laminating Sheet Variants
  ME->SET_DDVAL_VLASH_O( ).
  ME->SET_DDVAL_VLASH_I( ).

*** Define Drop Down Values for Print Allocation
  ME->SET_DDVAL_PRALO( ).
  ME->SET_DDVAL_PRALI( ).

*** Define Drop Down Values for Lamination Type
  ME->SET_DDVAL_TLAMI( ).

***---------------------------------------------------------------------------
*** Position Cursor
  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_SPEC_LAMI_VIS.

  data: LS_GRAMM_O    type        ZVCXI_P0SS_S_GRAMM,
        LS_GRAMM_I    type        ZVCXI_P0SS_S_GRAMM.

*** Set Lamination Information
  if ME->S_SPEC_LAMI_VIS-TOLAM ne IS_SPEC_LAMI_VIS-TOLAM.
    ME->R_PR_SPEC->SET_TOLAM( IF_TOLAM = IS_SPEC_LAMI_VIS-TOLAM
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-TILAM ne IS_SPEC_LAMI_VIS-TILAM.
    ME->R_PR_SPEC->SET_TILAM( IF_TILAM = IS_SPEC_LAMI_VIS-TILAM
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-VLASH_O ne IS_SPEC_LAMI_VIS-VLASH_O.
    ME->R_PR_SPEC->CREATE_VLASH_O( IF_VLASH = IS_SPEC_LAMI_VIS-VLASH_O ).
  endif.

  if ME->S_SPEC_LAMI_VIS-VLASH_I ne IS_SPEC_LAMI_VIS-VLASH_I.
    ME->R_PR_SPEC->CREATE_VLASH_I( IF_VLASH = IS_SPEC_LAMI_VIS-VLASH_I ).
  endif.

  if ME->S_SPEC_LAMI_VIS-MATNR_O ne IS_SPEC_LAMI_VIS-MATNR_O.
    ME->R_PR_SPEC->SET_MATNR_O( IF_MATNR = IS_SPEC_LAMI_VIS-MATNR_O
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-MATNR_I ne IS_SPEC_LAMI_VIS-MATNR_I.
    ME->R_PR_SPEC->SET_MATNR_I( IF_MATNR = IS_SPEC_LAMI_VIS-MATNR_I
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-PAPGR_O ne IS_SPEC_LAMI_VIS-PAPGR_O.
    ME->R_PR_SPEC->SET_PAPGR_O( IF_PAPGR = IS_SPEC_LAMI_VIS-PAPGR_O
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-PAPGR_I ne IS_SPEC_LAMI_VIS-PAPGR_I.
    ME->R_PR_SPEC->SET_PAPGR_I( IF_PAPGR = IS_SPEC_LAMI_VIS-PAPGR_I
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-GRAMM_O ne IS_SPEC_LAMI_VIS-GRAMM_O.
    move IS_SPEC_LAMI_VIS-GRAMM_O     to LS_GRAMM_O-GRAMM.
    move IS_SPEC_LAMI_VIS-GRAMM_O_UOM to LS_GRAMM_O-GRAMM_UOM.
    ME->R_PR_SPEC->SET_GRAMM_O( IS_GRAMM = LS_GRAMM_O
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_LAMI_VIS-GRAMM_I ne IS_SPEC_LAMI_VIS-GRAMM_I.
    move IS_SPEC_LAMI_VIS-GRAMM_I     to LS_GRAMM_I-GRAMM.
    move IS_SPEC_LAMI_VIS-GRAMM_I_UOM to LS_GRAMM_I-GRAMM_UOM.
    ME->R_PR_SPEC->SET_GRAMM_I( IS_GRAMM = LS_GRAMM_I
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_UPDATE_SPEC_VIS.

  data: LS_PROLE      type        ZVCXI_P0S_S_PROLE,
        LS_PROWI      type        ZVCXI_P0S_S_PROWI,
        LS_PROHE      type        ZVCXI_P0S_S_PROHE,
        LS_JOIWI      type        ZVCXI_P0S_S_JOIWI,
        LS_PROH2      type        ZVCXI_PCSS_S_PROH2,
        LS_FDUST      type        ZVCXI_PCSS_S_FDUST,
        LS_FTUCK      type        ZVCXI_PCSS_S_FTUCK,
        LS_STITP      type        ZVCXI_P0SS_S_STITP.

  move-corresponding IS_SPEC_VIS to:
                     LS_PROLE, LS_PROWI,
                     LS_PROHE, LS_JOIWI,
                     LS_FDUST, LS_FTUCK,
                     LS_STITP, LS_PROH2.

***----------------------------------------------------------------------------
*** Set Material Description and Customer Material Number
  if ME->S_SPEC_VIS-MATDE ne IS_SPEC_VIS-MATDE.
    ME->R_PR_SPEC->SET_MATDE( IF_MATDE = IS_SPEC_VIS-MATDE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-CMATN ne IS_SPEC_VIS-CMATN.
    ME->R_PR_SPEC->SET_CMATN( IF_CMATN = IS_SPEC_VIS-CMATN
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Update Context
  if ME->S_SPEC_VIS-ICONT ne IS_SPEC_VIS-ICONT.
    ME->R_PR_SPEC->SET_ICONT( IF_ICONT = IS_SPEC_VIS-ICONT
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.


***----------------------------------------------------------------------------
*** Set Product Type
  if ME->S_SPEC_VIS-PTYPE ne IS_SPEC_VIS-PTYPE.
    ME->R_PR_SPEC->SET_PTYPE( IF_PTYPE = IS_SPEC_VIS-PTYPE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Fefco
  if ME->S_SPEC_VIS-FEFCO ne IS_SPEC_VIS-FEFCO.
    ME->R_PR_SPEC->SET_FEFCO( IF_FEFCO = IS_SPEC_VIS-FEFCO
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Box Part
  if ME->S_SPEC_VIS-BOXPA ne IS_SPEC_VIS-BOXPA.
    ME->R_PR_SPEC->SET_BOXPA( IF_BOXPA = IS_SPEC_VIS-BOXPA
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.


***----------------------------------------------------------------------------
*** Set Joint Information
  if ME->S_SPEC_VIS-JOIPO ne IS_SPEC_VIS-JOIPO.
    ME->R_PR_SPEC->SET_JOIPO( IF_JOIPO = IS_SPEC_VIS-JOIPO
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-JOITY ne IS_SPEC_VIS-JOITY.
    ME->R_PR_SPEC->SET_JOITY( IF_JOITY = IS_SPEC_VIS-JOITY
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-JOIWI ne LS_JOIWI-JOIWI.
    ME->R_PR_SPEC->SET_JOIWI( IS_JOIWI = LS_JOIWI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.


***----------------------------------------------------------------------------
*** Set Flaps
  if ME->R_PR_SPEC->CHECK_ELEMENT_REQ( IF_IELEM = 'DUST_FLAP' ) eq ABAP_TRUE.
    if ME->S_SPEC_VIS-FDUST ne LS_FDUST-FDUST.
      ME->R_PR_SPEC->SET_FDUST( IS_FDUST = LS_FDUST
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.
  if ME->R_PR_SPEC->CHECK_ELEMENT_REQ( IF_IELEM = 'TUCKIN_FLAP' ) eq ABAP_TRUE.
    if ME->S_SPEC_VIS-FTUCK ne LS_FTUCK-FTUCK.
      ME->R_PR_SPEC->SET_FTUCK( IS_FTUCK = LS_FTUCK
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.

*** Set Stiching info
  if ME->R_PR_SPEC->CHECK_STITCH_REQ( ) eq ABAP_TRUE.
    if ME->S_SPEC_VIS-NOSTI ne IS_SPEC_VIS-NOSTI.
      ME->R_PR_SPEC->SET_NOSTI( IF_NOSTI = IS_SPEC_VIS-NOSTI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if ME->S_SPEC_VIS-STITP ne LS_STITP-STITP.
      ME->R_PR_SPEC->SET_STITP( IS_STITP = LS_STITP
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.


***----------------------------------------------------------------------------
*** Set Product Dimensions
  if ME->S_SPEC_VIS-PROLE ne LS_PROLE-PROLE.
    ME->R_PR_SPEC->SET_PROLE( IS_PROLE = LS_PROLE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-PROWI ne LS_PROWI-PROWI.
    ME->R_PR_SPEC->SET_PROWI( IS_PROWI = LS_PROWI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-PROHE ne LS_PROHE-PROHE.
    ME->R_PR_SPEC->SET_PROHE( IS_PROHE = LS_PROHE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->R_PR_SPEC->CHECK_ELEMENT_REQ( IF_IELEM = 'HEIGHT2' ) eq ABAP_TRUE.
    if ME->S_SPEC_VIS-PROH2 ne LS_PROH2-PROH2.
      ME->R_PR_SPEC->SET_PROH2( IS_PROH2 = LS_PROH2
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.


***----------------------------------------------------------------------------
*** Set Board Information
  if ME->S_SPEC_VIS-SABOA ne IS_SPEC_VIS-SABOA.
    ME->R_PR_SPEC->SET_SABOA( IF_SABOA = IS_SPEC_VIS-SABOA
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-PRBOA ne IS_SPEC_VIS-PRBOA.
    ME->R_PR_SPEC->SET_PRBOA( IF_PRBOA = IS_SPEC_VIS-PRBOA
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-SELFD ne IS_SPEC_VIS-SELFD.
    ME->R_PR_SPEC->SET_SELFD( IF_SELFD = IS_SPEC_VIS-SELFD
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.


***----------------------------------------------------------------------------
*** Set Preprint
  if ME->S_SPEC_VIS-FPRPR ne IS_SPEC_VIS-FPRPR.
    ME->R_PR_SPEC->SET_FPRPR( IF_FPRPR = IS_SPEC_VIS-FPRPR ).
  endif.

*** Set Sheet Procurement
  if ME->S_SPEC_VIS-FSHTP ne IS_SPEC_VIS-FSHTP.
    ME->R_PR_SPEC->SET_FSHTP( IF_FSHTP = IS_SPEC_VIS-FSHTP ).
  endif.


***----------------------------------------------------------------------------
*** Set Printing Information
  if ME->S_SPEC_VIS-PRTYO ne IS_SPEC_VIS-PRTYO.
    ME->R_PR_SPEC->SET_PRTYO( IF_PRTYP = IS_SPEC_VIS-PRTYO
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-NOCOO ne IS_SPEC_VIS-NOCOO.
    ME->R_PR_SPEC->SET_NOCOO( IF_NOCOL = IS_SPEC_VIS-NOCOO ).
  endif.

  if ME->S_SPEC_VIS-PRALO ne IS_SPEC_VIS-PRALO.
    ME->R_PR_SPEC->SET_PRALO( IF_PRALL = IS_SPEC_VIS-PRALO ).
  endif.

  if ME->S_SPEC_VIS-PRTYI ne IS_SPEC_VIS-PRTYI.
    ME->R_PR_SPEC->SET_PRTYI( IF_PRTYP = IS_SPEC_VIS-PRTYI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_VIS-NOCOI ne IS_SPEC_VIS-NOCOI.
    ME->R_PR_SPEC->SET_NOCOI( IF_NOCOL = IS_SPEC_VIS-NOCOI ).
  endif.

  if ME->S_SPEC_VIS-PRALI ne IS_SPEC_VIS-PRALI.
    ME->R_PR_SPEC->SET_PRALI( IF_PRALL = IS_SPEC_VIS-PRALI ).
  endif.

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if IF_UCOMM cs C_TABNAME.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

  move IF_UCOMM to LF_UCOMM.
  ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SPEC.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method INIT_LAMI_VIS.

  data: LS_GRAMM_O      type        ZVCXI_P0SS_S_GRAMM,
        LS_GRAMM_I      type        ZVCXI_P0SS_S_GRAMM.
  data: LR_GATE_VLASH_O type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_VLASH_I type ref to /VCXI/CL_VKSR_GATE.

  free: ME->S_SPEC_LAMI_VIS.

*** Get Lamination Information
  ME->S_SPEC_LAMI_VIS-TOLAM        = ME->R_PR_SPEC->GET_TOLAM( ).
  ME->S_SPEC_LAMI_VIS-TILAM        = ME->R_PR_SPEC->GET_TILAM( ).
  LR_GATE_VLASH_O                  = ME->R_PR_SPEC->GET_VLASH_O( ).
  if LR_GATE_VLASH_O is bound.
    move LR_GATE_VLASH_O->F_ID     to ME->S_SPEC_LAMI_VIS-VLASH_O.
  endif.
  LR_GATE_VLASH_I                  = ME->R_PR_SPEC->GET_VLASH_I( ).
  if LR_GATE_VLASH_I is bound.
    move LR_GATE_VLASH_I->F_ID     to ME->S_SPEC_LAMI_VIS-VLASH_I.
  endif.
  ME->S_SPEC_LAMI_VIS-MATNR_O      = ME->R_PR_SPEC->GET_MATNR_O( ).
  ME->S_SPEC_LAMI_VIS-MATNR_I      = ME->R_PR_SPEC->GET_MATNR_I( ).
  ME->S_SPEC_LAMI_VIS-PAPGR_O      = ME->R_PR_SPEC->GET_PAPGR_O( ).
  ME->S_SPEC_LAMI_VIS-PAPGR_I      = ME->R_PR_SPEC->GET_PAPGR_I( ).
  LS_GRAMM_O                       = ME->R_PR_SPEC->GET_GRAMM_O( ).
  move LS_GRAMM_O-GRAMM            to ME->S_SPEC_LAMI_VIS-GRAMM_O.
  move LS_GRAMM_O-GRAMM_UOM        to ME->S_SPEC_LAMI_VIS-GRAMM_O_UOM.
  LS_GRAMM_I                       = ME->R_PR_SPEC->GET_GRAMM_I( ).
  move LS_GRAMM_I-GRAMM            to ME->S_SPEC_LAMI_VIS-GRAMM_I.
  move LS_GRAMM_I-GRAMM_UOM        to ME->S_SPEC_LAMI_VIS-GRAMM_I_UOM.

endmethod.
method INIT_TAB_LIST.

  data:           LF_TAB             type         NUMC3,
                  LF_FNAME           type         STRING.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_GATE_CHILD      type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF,
                  LS_TAB_LIST        type         ZVCXI_PCSS_S_TAB_LIST.
  field-symbols:  <S_TAB_LIST>       type         ZVCXI_PCSS_S_TAB_LIST,
                  <F_DESCR>          type         /VCXI/CKX_DESCR.

*** Save "Gate" of selected tab befor refresh
  if ME->R_DEFAULT_GATE is not bound and
     ME->F_ACTIVE_TAB   is not initial.
    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    if LS_TAB_LIST-R_GATE          is bound and
       LS_TAB_LIST-R_GATE->F_FREED eq ABAP_FALSE.
      move LS_TAB_LIST-R_GATE to ME->R_DEFAULT_GATE.
    endif.
  endif.

  free: ME->T_TAB_LIST,
        ME->S_SPEC_TAB,
        LF_TAB.

***------------------------------------------------------------------
*** Get all Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE to LT_GATE_CHILD.
  endloop.
  sort LT_GATE_CHILD.
  delete adjacent duplicates from LT_GATE_CHILD.

***------------------------------------------------------------------
*** Sort Children
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

  loop at LT_GATE_CHILD into LR_GATE.

    check LR_GATE->GET_CLSUI( ) is not initial.

    append initial line to ME->T_TAB_LIST assigning <S_TAB_LIST>.
    add 1 to LF_TAB.
    concatenate C_TABNAME LF_TAB into <S_TAB_LIST>-TABNAME.
    move LR_GATE                   to <S_TAB_LIST>-R_GATE.

*** Set Activ Tab if it was set by default Gate
    if ME->R_DEFAULT_GATE is bound and
       LR_GATE eq ME->R_DEFAULT_GATE.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
      if LR_GATE ne ME->R_OLD_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
*** Default gate is not bound but Gate of Activ Tab do not match
    elseif ME->R_DEFAULT_GATE is not bound.
      if ME->F_ACTIVE_TAB eq <S_TAB_LIST>-TABNAME and
         ME->R_OLD_GATE   ne LR_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
    endif.

    concatenate C_TAB LF_TAB into LF_FNAME.
    assign component LF_FNAME of structure ME->S_SPEC_TAB to <F_DESCR>.
    if SY-SUBRC eq 0.
      if <S_TAB_LIST>-R_GATE->R_CLSPR is bound.
        move <S_TAB_LIST>-R_GATE->R_CLSPR->GET_DESCR( ) to <F_DESCR>.
      else.
        move <S_TAB_LIST>-R_GATE->GET_DESCR( ) to <F_DESCR>.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------
*** Clear Default gate
  clear: ME->R_DEFAULT_GATE.

*** Check Active Tab exists
  if ME->F_ACTIVE_TAB cs C_TABNAME.
    read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                              transporting no fields.
    if SY-SUBRC ne 0.
      read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
      if SY-SUBRC eq 0.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      else.
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.
  endif.

endmethod.
method INIT_VIS.

  data: LF_DCONF        type        DATS,
        LF_VALID_TBOAR  type        CHAR100,
        LF_TPRST        type        ZVCXI_P0SS_TPRST,
        LF_WERKS        type        WERKS_D,
        LF_RELEASED     type        ABAP_BOOL.
  data: LS_PROLE        type        ZVCXI_P0S_S_PROLE,
        LS_PROWI        type        ZVCXI_P0S_S_PROWI,
        LS_PROHE        type        ZVCXI_P0S_S_PROHE,
        LS_JOIWI        type        ZVCXI_P0S_S_JOIWI,
        LS_PROH2        type        ZVCXI_PCSS_S_PROH2,
        LS_FDUST        type        ZVCXI_PCSS_S_FDUST,
        LS_FTUCK        type        ZVCXI_PCSS_S_FTUCK,
        LS_STITP        type        ZVCXI_P0SS_S_STITP.

  free: ME->S_SPEC_VIS.

***----------------------------------------------------------------------------
*** Material Description and Customer Material number
  ME->S_SPEC_VIS-MATDE         = ME->R_PR_SPEC->GET_MATDE( ).
  ME->S_SPEC_VIS-CMATN         = ME->R_PR_SPEC->GET_CMATN( ).

*** Get Context
  ME->S_SPEC_VIS-ICONT         = ME->R_PR_SPEC->GET_ICONT( ).
  ME->S_SPEC_VIS-ICONT_DESCR   = ME->R_PR_SPEC->GET_ICONT_DESCR( ).

***----------------------------------------------------------------------------
*** Get Product Type
  ME->S_SPEC_VIS-PTYPE         = ME->R_PR_SPEC->GET_PTYPE( ).
  ME->S_SPEC_VIS-PTYPE_DESCR   = ME->R_PR_SPEC->GET_PTYPE_DESCR( ).

  set parameter id 'ZVCXI_P0SS_PTYPE' field ME->S_SPEC_VIS-PTYPE.

*** Get Fefco
  ME->S_SPEC_VIS-FEFCO         = ME->R_PR_SPEC->GET_FEFCO( ).
  ME->S_SPEC_VIS-FEFCO_DESCR   = ME->R_PR_SPEC->GET_FEFCO_DESCR( ).

*** Set Parameter for Product Style Type and Product Style
  LF_TPRST = ME->R_PR_SPEC->GET_TPRST( ).
  set parameter id 'ZVCXI_P0SS_TPRST' field LF_TPRST.
  set parameter id 'ZVCXI_P0SS_PRSTY' field ME->S_SPEC_VIS-FEFCO.

*** Get Part of Box
  ME->S_SPEC_VIS-BOXPA         = ME->R_PR_SPEC->GET_BOXPA( ).
  ME->S_SPEC_VIS-BOXPA_DESCR   = ME->R_PR_SPEC->GET_BOXPA_DESCR( ).

***----------------------------------------------------------------------------
*** Get Joint Info
  ME->S_SPEC_VIS-JOIPO         = ME->R_PR_SPEC->GET_JOIPO( ).
  ME->S_SPEC_VIS-JOIPO_DESCR   = ME->R_PR_SPEC->GET_JOIPO_DESCR( ).

  ME->S_SPEC_VIS-JOITY         = ME->R_PR_SPEC->GET_JOITY( ).
  ME->S_SPEC_VIS-JOITY_DESCR   = ME->R_PR_SPEC->GET_JOITY_DESCR( ).

  LS_JOIWI                     = ME->R_PR_SPEC->GET_JOIWI( ).
  move-corresponding LS_JOIWI to ME->S_SPEC_VIS.

*** Get Stitching info
  ME->S_SPEC_VIS-NOSTI         = ME->R_PR_SPEC->GET_NOSTI( ).
  LS_STITP                     = ME->R_PR_SPEC->GET_STITP( ).
  move-corresponding LS_STITP to ME->S_SPEC_VIS.

***----------------------------------------------------------------------------
*** Get Flaps
  LS_FDUST                     = ME->R_PR_SPEC->GET_FDUST( ).
  move-corresponding LS_FDUST to ME->S_SPEC_VIS.
  LS_FTUCK                     = ME->R_PR_SPEC->GET_FTUCK( ).
  move-corresponding LS_FTUCK to ME->S_SPEC_VIS.

***----------------------------------------------------------------------------
*** Get Product Dimensions
  ME->S_SPEC_VIS-PRODI_DESCR   = ME->R_PR_SPEC->GET_PRODI_DESCR( ).
  LS_PROLE                     = ME->R_PR_SPEC->GET_PROLE( ).
  move-corresponding LS_PROLE to ME->S_SPEC_VIS.
  LS_PROWI                     = ME->R_PR_SPEC->GET_PROWI( ).
  move-corresponding LS_PROWI to ME->S_SPEC_VIS.
  LS_PROHE                     = ME->R_PR_SPEC->GET_PROHE( ).
  move-corresponding LS_PROHE to ME->S_SPEC_VIS.
  LS_PROH2                     = ME->R_PR_SPEC->GET_PROH2( ).
  move-corresponding LS_PROH2 to ME->S_SPEC_VIS.

***----------------------------------------------------------------------------
*** Get Sheet Procurement Info
  ME->S_SPEC_VIS-FSHTP         = ME->R_PR_SPEC->GET_FSHTP( ).

*** Get Board Information
  ME->S_SPEC_VIS-SABOA         = ME->R_PR_SPEC->GET_SABOA( ).
  ME->S_SPEC_VIS-SABOA_DESCR   = ME->R_PR_SPEC->GET_SABOA_DESCR( ).

  ME->S_SPEC_VIS-PRBOA         = ME->R_PR_SPEC->GET_PRBOA( ).
  ME->S_SPEC_VIS-PRBOA_DESCR   = ME->R_PR_SPEC->GET_PRBOA_DESCR( ).

  ME->S_SPEC_VIS-FLUTE         = ME->R_PR_SPEC->GET_FLUTE( ).
  ME->S_SPEC_VIS-FLUTE_DESCR   = ME->R_PR_SPEC->GET_FLUTE_DESCR( ).

  ME->S_SPEC_VIS-SELFD         = ME->R_PR_SPEC->GET_SELFD( ).

*** Get Flag of Preprint
  ME->S_SPEC_VIS-FPRPR         = ME->R_PR_SPEC->GET_FPRPR( ).

***----------------------------------------------------------------------------
*** Get Printing Information
  ME->S_SPEC_VIS-PRTYO         = ME->R_PR_SPEC->GET_PRTYO( ).
  ME->S_SPEC_VIS-PRTYO_DESCR   = ME->R_PR_SPEC->GET_PRTYO_DESCR( ).
  ME->S_SPEC_VIS-NOCOO         = ME->R_PR_SPEC->GET_NOCOO( ).
  ME->S_SPEC_VIS-PRALO         = ME->R_PR_SPEC->GET_PRALO( ).

  ME->S_SPEC_VIS-PRTYI         = ME->R_PR_SPEC->GET_PRTYI( ).
  ME->S_SPEC_VIS-PRTYI_DESCR   = ME->R_PR_SPEC->GET_PRTYI_DESCR( ).
  ME->S_SPEC_VIS-NOCOI         = ME->R_PR_SPEC->GET_NOCOI( ).
  ME->S_SPEC_VIS-PRALI         = ME->R_PR_SPEC->GET_PRALI( ).

***----------------------------------------------------------------------------
*** Set Parameter Date Config
  LF_DCONF = ME->R_PR_SPEC->GET_DCONF( ).
  set parameter id 'ZVCXI_XCS_DCONF' field LF_DCONF.

*** Set Valid Board Types as Parameter
  LF_VALID_TBOAR = ME->R_PR_SPEC->GET_VALID_TBOAR( ).
  set parameter id 'ZVCXI_PCS_TBOAR' field LF_VALID_TBOAR.

*** Set Plant as Parameter
  LF_WERKS = ME->R_PR_SPEC->GET_WERKS( ).
  set parameter id 'WRK' field LF_WERKS.

*** Set only Released BoardIDs are allowed
  move ABAP_TRUE to LF_RELEASED.
  set parameter id 'ZVCXI_PCS_RELEASED' field LF_RELEASED.

endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
    ME->F_ALREADY_OPEN = ABAP_TRUE.
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_DDVAL_PRALI.

  data:          LF_ID      type       VRM_ID.
  data:          LS_PRALL   type       ZVCXI_P0SS_S_PRALL.
  data:          LT_PRALL   type       ZVCXI_P0SS_TT_PRALL,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Print Allocation
  LT_PRALL = ME->R_PR_SPEC->GET_ALL_PRALL( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).

*** Add to search help structure
  loop at LT_PRALL into LS_PRALL.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_PRALL-PRALL to <S_VALUE>-KEY.
    move LS_PRALL-DESCR to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move 'ZVCXI_PCSS_S_SPEC_VIS-PRALI' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
method SET_DDVAL_PRALO.

  data:          LF_ID      type       VRM_ID.
  data:          LS_PRALL   type       ZVCXI_P0SS_S_PRALL.
  data:          LT_PRALL   type       ZVCXI_P0SS_TT_PRALL,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Print Allocation
  LT_PRALL = ME->R_PR_SPEC->GET_ALL_PRALL( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).

*** Add to search help structure
  loop at LT_PRALL into LS_PRALL.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_PRALL-PRALL to <S_VALUE>-KEY.
    move LS_PRALL-DESCR to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move 'ZVCXI_PCSS_S_SPEC_VIS-PRALO' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
method SET_DDVAL_TLAMI.

  data:          LF_ID      type       VRM_ID.
  data:          LF_TLAMI   type       ZVCXI_P0SS_TLAMI.
  data:          LT_TLAMI   type       ZVCXI_P0SS_TT_TLAMI,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Lamination Types
  LT_TLAMI = ME->R_PR_SPEC->GET_VALID_TLAMI( ).

*** Add to search help structure
  loop at LT_TLAMI into LF_TLAMI.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LF_TLAMI to <S_VALUE>-KEY.
    move ZCL_VCXI_P0SS_CUST_LAMI=>GET_DESCR_TLAMI( IF_TLAMI = LF_TLAMI )
                  to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List - Inside
  move 'ZVCXI_P0SS_S_SPEC_LAMI_VIS-TILAM' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

*** Set to DropDown List - Outside
  move 'ZVCXI_P0SS_S_SPEC_LAMI_VIS-TOLAM' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
method SET_DDVAL_VLASH_I.

  data:          LF_ID      type       VRM_ID.
  data:          LS_VLASH   type       ZVCXI_P0SS_S_VLASH.
  data:          LT_VLASH   type       ZVCXI_P0SS_TT_VLASH,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Laminating Sheet Variants
  LT_VLASH = ME->R_PR_SPEC->GET_ALL_VLASH_I( ).

*** Add to search help structure
  loop at LT_VLASH into LS_VLASH.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_VLASH-VLASH       to <S_VALUE>-KEY.
    move LS_VLASH-VLASH_DESCR to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move 'ZVCXI_P0SS_S_SPEC_LAMI_VIS-VLASH_I' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
method SET_DDVAL_VLASH_O.

  data:          LF_ID      type       VRM_ID.
  data:          LS_VLASH   type       ZVCXI_P0SS_S_VLASH.
  data:          LT_VLASH   type       ZVCXI_P0SS_TT_VLASH,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Laminating Sheet Variants
  LT_VLASH = ME->R_PR_SPEC->GET_ALL_VLASH_O( ).

*** Add to search help structure
  loop at LT_VLASH into LS_VLASH.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_VLASH-VLASH       to <S_VALUE>-KEY.
    move LS_VLASH-VLASH_DESCR to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move 'ZVCXI_P0SS_S_SPEC_LAMI_VIS-VLASH_O' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
