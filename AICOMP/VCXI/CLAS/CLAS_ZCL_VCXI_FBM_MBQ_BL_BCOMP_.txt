
class ZCL_VCXI_FBM_MBQ_BL_BCOMP definition
  public
  inheriting from ZCL_VCXI_F0M_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_BCONI type ZVCXI_XCS_ISVCE value 'BCONI' ##NO_TEXT.
  constants C_ISVCE_BCONO type ZVCXI_XCS_ISVCE value 'BCONO' ##NO_TEXT.
  constants C_ISVCE_BFG type ZVCXI_XCS_ISVCE value 'BFG' ##NO_TEXT.
  constants C_ISVCE_BMAKE type ZVCXI_XCS_ISVCE value 'BMAKE' ##NO_TEXT.
  constants C_ISVCE_MS_BPROC type ZVCXI_XCS_ISVCE value 'MS_BPROC' ##NO_TEXT.
  constants C_SOKEY_BFG type ZVCXI_XCM_MBQ_SOKEY value 'FB_BFG' ##NO_TEXT.
  constants C_SOKEY_BFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FB_BFG_MTS' ##NO_TEXT.
  constants C_SOKEY_BPROC type ZVCXI_XCM_MBQ_SOKEY value 'FB_BPROC' ##NO_TEXT.
  constants C_SOKEY_BSFG type ZVCXI_XCM_MBQ_SOKEY value 'FB_BSFG' ##NO_TEXT.
  constants C_SOKEY_BSFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FB_BSFG_MTS' ##NO_TEXT.

  methods ANALYZE_MS_BPROC
    importing
      !IR_SVCEL_BPROC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_MS_BPROC
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods ANALYZE_BFILM
    importing
      !IR_SVCEL_BFILM type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_BMAKE
    importing
      !IR_SVCEL_BMAKE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_BFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_BL_FCOMP
    returning
      value(RR_BL_FCOMP) type ref to ZCL_VCXI_FFM_MBQ_BL_FCOMP
    raising
      /VCXI/CX_CKX .
  methods FILL_BFG
    importing
      !IR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .

  methods ADJUST_ID
    redefinition .
  methods ADJUST_SVCEL
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_SOKEY_OUT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBM_MBQ_BL_BCOMP definition
class ZCL_VCXI_FBM_MBQ_BL_BCOMP implementation.
  method ADJUST_ID.

*** Call SUPER
    SUPER->ADJUST_ID( exporting IR_SVCEL = IR_SVCEL
                      changing  CF_ID    = CF_ID ).

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Connection In is replaced by a Bag Procurement
      when C_ISVCE_BCONI.
        CF_ID = C_ISVCE_MS_BPROC.

***   Connection Out is replaced by a Finished Good
      when C_ISVCE_BCONO.
        CF_ID = C_ISVCE_BFG.

***   Film Connection In is replaced by a Film Procurement
      when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_FCONI.
        CF_ID = ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_FPROC.

    endcase.

  endmethod.
  method ADJUST_SVCEL.

    data: LF_MATNR type MATNR.


*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
      when C_ISVCE_BFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_BFG( exporting IR_SVCEL         = IR_SVCEL
                                        IR_IDAT_SVC      = IR_IDAT_SVC
                                        IT_MATLI         = IT_MATLI
                                        IT_DMSLI         = IT_DMSLI
                              importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                              changing  CS_SVCEL         = CS_SVCEL ).

      when C_ISVCE_MS_BPROC.
***     Adjust Bag Procurement
        ME->ADJUST_SVCEL_MS_BPROC( exporting IR_SVCEL         = IR_SVCEL
                                             IR_IDAT_SVC      = IR_IDAT_SVC
                                             IT_MATLI         = IT_MATLI
                                             IT_DMSLI         = IT_DMSLI
                                   importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                   changing  CS_SVCEL         = CS_SVCEL ).

      when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_FPROC.
***     Delegate to Business Logic of Film Component to adjust Film Procurement
        ME->GET_BL_FCOMP( )->ADJUST_SVCEL_MS_FPROC( exporting IR_SVCEL         = IR_SVCEL
                                                              IR_IDAT_SVC      = IR_IDAT_SVC
                                                              IT_MATLI         = IT_MATLI
                                                              IT_DMSLI         = IT_DMSLI
                                                    importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                    changing  CS_SVCEL         = CS_SVCEL ).

    endcase.

  endmethod.
  method ADJUST_SVCEL_BFG.

    data: LR_EA_BCONO  type ref to ZCL_VCXI_FBSS_EA_BCONO.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***--------------------------------------------------------------------------------------
*** Transfer Information of Connection Out to Finished Good
    if IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ISVCE_BCONO.
      LR_EA_BCONO ?= IR_SVCEL->GET_CLSEA( ).

***   Fill Finished Good based on Bag Backward Property
      ME->FILL_BFG( exporting IR_BL_BGBPROP = LR_EA_BCONO->GET_BGBPX( )
                              IR_IDAT_SVC   = IR_IDAT_SVC
                    changing  CS_SVCEL      = CS_SVCEL ).

***   Disable Checks for SFGs
      if not LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK ] ).
        append value #( PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK
                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) to CS_SVCEL-T_SVCPA.
      endif.
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK ]-ATWRT = ABAP_TRUE.
    endif.

  endmethod.
  method ADJUST_SVCEL_MS_BPROC.

    data: LF_MATNR type MATNR.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.


***--------------------------------------------------------------------------------------
*** Get correct Source Element
    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_BPROC.
        LR_SVCEL_SOURCE = IR_SVCEL.

****    No adjustments for "non-dummies"
        if not cast ZCL_VCXI_F0SS_EA_MS_XPROC( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
          return.
        endif.

      when C_ISVCE_BCONI.
***     Get related Connection Out
        LR_SVCEL_SOURCE = cast ZCL_VCXI_F0SS_EA_XCONI( IR_SVCEL->GET_CLSEA( ) )->GET_XCONO( ).

***     Substitute Component with Dummy Route if needed
        if not LINE_EXISTS( IT_MATLI[ LEVEL_SOURCE = LR_SVCEL_SOURCE->GET_LEVEL( ) ] ).
          LR_SVCEL_SOURCE = ME->GET_INP_BY_XCONO( IR_SVCEL_XCONO = LR_SVCEL_SOURCE ).
        endif.
    endcase.
    check LR_SVCEL_SOURCE is bound.

***--------------------------------------------------------------------------------------
    case LR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_BPROC.
***     Use existing Material for "non-dummies"
        if not cast ZCL_VCXI_F0SS_EA_MS_XPROC( LR_SVCEL_SOURCE->GET_CLSEA( ) )->IS_DUMMY( ).
          LF_MATNR = LR_SVCEL_SOURCE->GET_LEOKY( )-LEOKY.
        endif.

    endcase.

*** Get Material Number of created Material
    if LF_MATNR is initial.
      LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                          IR_SVCEL_SOURCE = LR_SVCEL_SOURCE ).
    endif.

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Switch Procurement Option to "Direct Procurement"/"Stock"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] to <S_PARAM>.

      if <S_PARAM>-ATWRT eq ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
         LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_XCSS_PR_MS=>C_PARID_FPTOS )-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                                     else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

  endmethod.
  method ANALYZE.

    data: LF_WERKS type WERKS_D,
          LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY.
    data: LR_EA_SPEC      type ref to ZCL_VCXI_F0SS_EA_SPEC,
          LR_SVCEL_INPUT  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CONV   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Specification and Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_EA_SPEC      = LR_EA_SPEC
                                  ER_SVCEL_INPUT  = LR_SVCEL_INPUT
                                  ER_SVCEL_CONV   = LR_SVCEL_CONV
                                  ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_EA_SPEC      is bound and
          LR_SVCEL_INPUT  is bound and
          LR_SVCEL_CONV   is bound and
          LR_SVCEL_OUTPUT is bound.

*** Get Plant
    LF_WERKS = LR_EA_SPEC->GET_WERKS( ).

***--------------------------------------------------------------------------------------
*** Analyze Output for FG / SFG
    loop at LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

***   Define Source Key
      LF_SOKEY = ME->GET_SOKEY_OUT( IR_SVCEL = LR_SVCEL
                                    IF_KZKUP = ABAP_FALSE ).

***   Add Material with Activities based on Source Key
      ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                               IF_DISST        = IF_DISST
                               IR_SVCEL_SOURCE = LR_SVCEL
                               IF_WERKS        = LF_WERKS
                     changing  CT_MATLI        = ET_MATLI ).
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze Conversion Steps
    loop at LR_SVCEL_CONV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      ME->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = LR_SVCEL
                                   IF_DISST       = conv #( IF_DISST + 1 )
                         changing  CT_MATLI       = ET_MATLI
                                   CT_DMSLI       = ET_DMSLI ).
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze Input for Procurement Dummy
    loop at LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        when C_ISVCE_MS_BPROC.
          ME->ANALYZE_MS_BPROC( exporting IR_SVCEL_BPROC = LR_SVCEL
                                          IF_DISST       = conv #( IF_DISST + 1 )
                                changing  CT_MATLI       = ET_MATLI
                                          CT_DMSLI       = ET_DMSLI ).
        when C_ISVCE_BMAKE.
          ME->ANALYZE_BMAKE( exporting IR_SVCEL_BMAKE = LR_SVCEL
                                       IF_DISST       = conv #( IF_DISST + 1 )
                             changing  CT_MATLI       = ET_MATLI
                                       CT_DMSLI       = ET_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_BFILM.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Bag Film
    loop at IR_SVCEL_BFILM->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Film Procurement
        when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_FPROC.
***       Delegate to Business Logic of Film Component to analyze Film Procurement
          ME->GET_BL_FCOMP( )->ANALYZE_MS_FPROC( exporting IR_SVCEL_FPROC = LR_SVCEL
                                                           IF_DISST       = IF_DISST
                                                 changing  CT_MATLI       = CT_MATLI
                                                           CT_DMSLI       = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_BMAKE.

    data: LR_SVCEL_BPART  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_HANDLE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_HPART  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Analyze Bag Parts
    loop at IR_SVCEL_BMAKE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART ) into LR_OBJECT.
      LR_SVCEL_BPART ?= LR_OBJECT.

***   Analyze Bag Films
      loop at LR_SVCEL_BPART->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM ) into LR_OBJECT.
        ME->ANALYZE_BFILM( exporting IR_SVCEL_BFILM = cast #( LR_OBJECT )
                                     IF_DISST       = IF_DISST
                           changing  CT_MATLI       = CT_MATLI
                                     CT_DMSLI       = CT_DMSLI ).
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze Handle
    loop at IR_SVCEL_BMAKE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE ) into LR_OBJECT.
      LR_SVCEL_HANDLE ?= LR_OBJECT.

***   Analyze Handle Part
      loop at LR_SVCEL_HANDLE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_HPART=>C_IPRVT_HPART ) into LR_OBJECT.
        LR_SVCEL_HPART ?= LR_OBJECT.

***     Analyze Bag Films
        loop at LR_SVCEL_HPART->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM ) into LR_OBJECT.
          ME->ANALYZE_BFILM( exporting IR_SVCEL_BFILM = cast #( LR_OBJECT )
                                       IF_DISST       = IF_DISST
                             changing  CT_MATLI       = CT_MATLI
                                       CT_DMSLI       = CT_DMSLI ).
        endloop.
      endloop.
    endloop.

  endmethod.
  method ANALYZE_MS_BPROC.

    data: LR_EA_MS_XPROC type ref to ZCL_VCXI_F0SS_EA_MS_XPROC.


    check IR_SVCEL_BPROC is bound.
    LR_EA_MS_XPROC ?= IR_SVCEL_BPROC->GET_CLSEA( ).
    check LR_EA_MS_XPROC->IS_DUMMY( ).

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_BPROC
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_BPROC
                             IF_WERKS        = LR_EA_MS_XPROC->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method FILL_BFG.

***--------------------------------------------------------------------------------------
*** Overlap on Width
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_OLWID
                    ATFLV = IR_BL_BGBPROP->S_OLDIM-OLWID
                    UNIT  = IR_BL_BGBPROP->S_OLDIM-OLWID_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

***--------------------------------------------------------------------------------------
*** Left Gusset
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_GULEF
                    ATFLV = IR_BL_BGBPROP->S_GUDIM-GULEF
                    UNIT  = IR_BL_BGBPROP->S_GUDIM-GULEF_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Right Gusset
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_GURIG
                    ATFLV = IR_BL_BGBPROP->S_GUDIM-GURIG
                    UNIT  = IR_BL_BGBPROP->S_GUDIM-GURIG_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Top Gusset
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_GUTOP
                    ATFLV = IR_BL_BGBPROP->S_GUDIM-GUTOP
                    UNIT  = IR_BL_BGBPROP->S_GUDIM-GUTOP_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Bottom Gusset
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_GUBOT
                    ATFLV = IR_BL_BGBPROP->S_GUDIM-GUBOT
                    UNIT  = IR_BL_BGBPROP->S_GUDIM-GUBOT_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

***--------------------------------------------------------------------------------------
*** Top Fold
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_FOTOP
                    ATFLV = IR_BL_BGBPROP->S_FODIM-FOTOP
                    UNIT  = IR_BL_BGBPROP->S_FODIM-FOTOP_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Bottom Fold
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_FOBOT
                    ATFLV = IR_BL_BGBPROP->S_FODIM-FOBOT
                    UNIT  = IR_BL_BGBPROP->S_FODIM-FOBOT_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

***--------------------------------------------------------------------------------------
*** Wicket Type
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_TWICK
                    ATWRT = IR_BL_BGBPROP->S_WIDIM-TWICK
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Wicket Lip
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_WILIP
                    ATFLV = IR_BL_BGBPROP->S_WIDIM-WILIP
                    UNIT  = IR_BL_BGBPROP->S_WIDIM-WILIP_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Hole Diameter
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_WIHDI
                    ATFLV = IR_BL_BGBPROP->S_WIDIM-WIHDI
                    UNIT  = IR_BL_BGBPROP->S_WIDIM-WIHDI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Hole Space
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_WIHSP
                    ATFLV = IR_BL_BGBPROP->S_WIDIM-WIHSP
                    UNIT  = IR_BL_BGBPROP->S_WIDIM-WIHSP_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
*** Bag/Stack
    append value #( PARID = ZCL_VCXI_FBSS_PR_BFG=>C_PARID_WIBST
                    ATFLV = IR_BL_BGBPROP->S_WIDIM-WIBST
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

  endmethod.
  method GET_ACTDAT_MMEXT.

    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_F0M_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Bag Procurement
      when C_SOKEY_BPROC.
***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_FBE_MM_MMEXT=>C_CNTXT_FB.    "Bag
        <S_ACTDAT_MMEXT>-S_FB_EXTVAL = cast ZCL_VCXI_FBSS_EA_MS_BPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( ).

    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Bag Procurement
      when C_SOKEY_BPROC.
        <S_ACTDAT_PURIR> = ME->GET_PURIR_XPROC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                          IF_SOKEY        = IF_SOKEY
                                                          IF_WERKS        = IF_WERKS
                                                changing  CF_SKIP         = EF_SKIP ).

      when others.
        EF_SKIP = ABAP_TRUE.
    endcase.

  endmethod.
  method GET_BL_FCOMP.

*** Delegate to Business Logic of Film Component
    create object RR_BL_FCOMP
      exporting
        IR_BOB_SDOC    = ME->R_BOB_SDOC
        IF_POSNR       = ME->F_POSNR
        IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP.

  endmethod.
  method GET_SOKEY_OUT.

*** Get Make-to-Stock Flag of Element
    data(LF_FMTSA) = ME->GET_FMTSA( IR_SVCEL = IR_SVCEL ).

*** Define Source Key based on FG/SFG > MTO/MTS
    RF_SOKEY = switch #( IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( )
                         when C_ISVCE_BFG   then switch #( LF_FMTSA     "Finished Good
                                                           when ABAP_FALSE then C_SOKEY_BFG
                                                           when ABAP_TRUE  then C_SOKEY_BFG_MTS
                                                         )
                         when C_ISVCE_BCONO then switch #( LF_FMTSA     "Semi-Finished Good
                                                           when ABAP_FALSE then C_SOKEY_BSFG
                                                           when ABAP_TRUE  then C_SOKEY_BSFG_MTS
                                                         )

                       ).

  endmethod.
