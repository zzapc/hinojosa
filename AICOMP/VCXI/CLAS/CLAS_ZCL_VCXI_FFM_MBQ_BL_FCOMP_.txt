
class ZCL_VCXI_FFM_MBQ_BL_FCOMP definition
  public
  inheriting from ZCL_VCXI_F0M_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_CSTEP_PRINT type ZVCXI_XCS_ISVCE value 'CSTEP_PRINT' ##NO_TEXT.
  constants C_ISVCE_FCONI type ZVCXI_XCS_ISVCE value 'FCONI' ##NO_TEXT.
  constants C_ISVCE_FCONO type ZVCXI_XCS_ISVCE value 'FCONO' ##NO_TEXT.
  constants C_ISVCE_FFG type ZVCXI_XCS_ISVCE value 'FFG' ##NO_TEXT.
  constants C_ISVCE_MS_DINK type ZVCXI_XCS_ISVCE value 'MS_DINK' ##NO_TEXT.
  constants C_ISVCE_MS_EMAT type ZVCXI_XCS_ISVCE value 'MS_EMAT' ##NO_TEXT.
  constants C_ISVCE_MS_FPROC type ZVCXI_XCS_ISVCE value 'MS_FPROC' ##NO_TEXT.
  constants C_ISVCE_MS_INK type ZVCXI_XCS_ISVCE value 'MS_INK' ##NO_TEXT.
  constants C_ISVCE_RHNDL type ZVCXI_XCS_ISVCE value 'RHNDL' ##NO_TEXT.
  constants C_SOKEY_DMS_PRINT type ZVCXI_XCM_MBQ_SOKEY value 'FF_DMS_PRINT' ##NO_TEXT.
  constants C_SOKEY_FFG type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG' ##NO_TEXT.
  constants C_SOKEY_FFG_CO type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG_CO' ##NO_TEXT.
  constants C_SOKEY_FFG_CO_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG_CO_MTS' ##NO_TEXT.
  constants C_SOKEY_FFG_M type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG_M' ##NO_TEXT.
  constants C_SOKEY_FFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG_MTS' ##NO_TEXT.
  constants C_SOKEY_FFG_M_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FFG_M_MTS' ##NO_TEXT.
  constants C_SOKEY_FPROC type ZVCXI_XCM_MBQ_SOKEY value 'FF_FPROC' ##NO_TEXT.
  constants C_SOKEY_FSFG type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG' ##NO_TEXT.
  constants C_SOKEY_FSFG_CO type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG_CO' ##NO_TEXT.
  constants C_SOKEY_FSFG_CO_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG_CO_MTS' ##NO_TEXT.
  constants C_SOKEY_FSFG_M type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG_M' ##NO_TEXT.
  constants C_SOKEY_FSFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG_MTS' ##NO_TEXT.
  constants C_SOKEY_FSFG_M_MTS type ZVCXI_XCM_MBQ_SOKEY value 'FF_FSFG_M_MTS' ##NO_TEXT.
  constants C_SOKEY_TOOL_INK type ZVCXI_XCM_MBQ_SOKEY value 'FF_TOOL_INK' ##NO_TEXT.
  constants C_SOKEY_TOOL_SET_PRINT type ZVCXI_XCM_MBQ_SOKEY value 'FF_TOOL_SET_PRINT' ##NO_TEXT.
  constants C_SOKEY_TOOL_SET_PRINT_OTU type ZVCXI_XCM_MBQ_SOKEY value 'FF_TOOL_SET_PRINT_OTU' ##NO_TEXT.

  methods ANALYZE_MS_FPROC
    importing
      !IR_SVCEL_FPROC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_MS_FPROC
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods GET_BL_ALTUOM
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_WERKS type WERKS_D
    returning
      value(RR_BL_ALTUOM) type ref to ZCL_VCXI_F0SS_BL_ALTUOM
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_FFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_RHNDL
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_SELRTE_RHNDL
    returning
      value(RR_RHNDL) type ref to ZIF_VCXI_FFSR_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_LOTMI
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_LOTMI) type ZVCXI_F0S_S_LOTMI
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_PRINT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_MS_INK
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_MS_INK
    importing
      !IR_SVCEL_MS_INK type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_PRINT
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods GET_DMSEXT_PD
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_DMSEXT_PD) type ZVCXI_FFM_MBQ_S_DMSEXT_PD
    raising
      /VCXI/CX_CKX .
  methods GET_DMSEXT_PDINK
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RT_DMSEXT_PDINK) type ZVCXI_FFM_MBQ_TT_DMSEXT_PDINK
    raising
      /VCXI/CX_CKX .
  methods GET_LOVC_TOOL_INK
    importing
      !IR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY
      !IF_WERKS type WERKS_D
    returning
      value(RT_VALUE) type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .

  methods ADJUST_ID
    redefinition .
  methods ADJUST_SVCEL
    redefinition .
  methods ANALYZE_CSTEP
    redefinition .
  methods GET_ACTDAT_DMS
    redefinition .
  methods GET_ACTDAT_DMSEXT
    redefinition .
  methods GET_ACTDAT_MCL
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PCR
    redefinition .
  methods GET_ACTDAT_PRU
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_EXQTY
    redefinition .
  methods GET_LOVC
    redefinition .
  methods GET_MATDAT_MAKT
    redefinition .
  methods GET_MATDAT_MARA
    redefinition .
  methods GET_MATDAT_MARM
    redefinition .
  methods GET_SOKEY_OUT
    redefinition .
  methods GET_MATDAT_MVKE
    redefinition .
private section.
endclass. "ZCL_VCXI_FFM_MBQ_BL_FCOMP definition
class ZCL_VCXI_FFM_MBQ_BL_FCOMP implementation.
  method ADJUST_ID.

*** Call SUPER
    SUPER->ADJUST_ID( exporting IR_SVCEL = IR_SVCEL
                      changing  CF_ID    = CF_ID ).

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Connection In is replaced by a Film Procurement
      when C_ISVCE_FCONI.
        CF_ID = C_ISVCE_MS_FPROC.

***   Estimation Material is replaced by a Film Procurement
      when C_ISVCE_MS_EMAT.
        CF_ID = C_ISVCE_MS_FPROC.

***   Connection Out is replaced by a Finished Good
      when C_ISVCE_FCONO.
        CF_ID = C_ISVCE_FFG.

    endcase.

  endmethod.
  method ADJUST_SVCEL.

    data: LF_MATNR type MATNR.


*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
***--------------------------------------------------------------------------------------
***   Input
***-------------------------------------------------------------------------------------
      when C_ISVCE_MS_FPROC.
***     Adjust Film Procurement
        ME->ADJUST_SVCEL_MS_FPROC( exporting IR_SVCEL         = IR_SVCEL
                                             IR_IDAT_SVC      = IR_IDAT_SVC
                                             IT_MATLI         = IT_MATLI
                                             IT_DMSLI         = IT_DMSLI
                                   importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                   changing  CS_SVCEL         = CS_SVCEL ).

***-------------------------------------------------------------------------------------
***   Conversion Steps
***-------------------------------------------------------------------------------------
      when C_ISVCE_CSTEP_PRINT.
***     Adjust CStep Printing
        ME->ADJUST_SVCEL_CSTEP_PRINT( exporting IR_SVCEL         = IR_SVCEL
                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                IT_MATLI         = IT_MATLI
                                                IT_DMSLI         = IT_DMSLI
                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                      changing  CS_SVCEL         = CS_SVCEL ).
      when C_ISVCE_MS_INK.
***     Adjust Ink
        ME->ADJUST_SVCEL_MS_INK( exporting IR_SVCEL         = IR_SVCEL
                                           IR_IDAT_SVC      = IR_IDAT_SVC
                                           IT_MATLI         = IT_MATLI
                                           IT_DMSLI         = IT_DMSLI
                                 importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                 changing  CS_SVCEL         = CS_SVCEL ).

***--------------------------------------------------------------------------------------
***   Output
***-------------------------------------------------------------------------------------
      when C_ISVCE_FFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_FFG( exporting IR_SVCEL         = IR_SVCEL
                                        IR_IDAT_SVC      = IR_IDAT_SVC
                                        IT_MATLI         = IT_MATLI
                                        IT_DMSLI         = IT_DMSLI
                              importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                              changing  CS_SVCEL         = CS_SVCEL ).

      when C_ISVCE_RHNDL.
***     Adjust Roll Handling
        ME->ADJUST_SVCEL_RHNDL( exporting IR_SVCEL         = IR_SVCEL
                                          IR_IDAT_SVC      = IR_IDAT_SVC
                                          IT_MATLI         = IT_MATLI
                                          IT_DMSLI         = IT_DMSLI
                                importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                changing  CS_SVCEL         = CS_SVCEL ).

    endcase.

  endmethod.
  method ADJUST_SVCEL_CSTEP_PRINT.

    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_EA_CSTEP_PRINT.


*** Check if Die Cut Tool has not been specified
    LR_EA_CSTEP_PRINT ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound and
          LR_EA_CSTEP_PRINT->GET_DESDO( ) is initial.

*** Get DMS Document Key of created DMS Document
    LS_DOC_KEY = ME->GET_DOC_KEY_BY_SOURCE( IT_DMSLI        = IT_DMSLI
                                            IR_SVCEL_SOURCE = IR_SVCEL ).
    check LS_DOC_KEY is not initial.

*** Fill Design Document
    delete CS_SVCEL-T_SVCPA where PARID = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_PARID_DESDO.
    append value #( PARID = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_PARID_DESDO
                    STRNG = conv #( ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                                        IF_DOKNR = LS_DOC_KEY-DOKNR
                                                                        IF_DOKTL = LS_DOC_KEY-DOKTL
                                                                        IF_DOKVR = LS_DOC_KEY-DOKVR ) )
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_IEVNT_O_DESDO_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_FFG.

    data: LT_SIBLING type /VCXI/CKX_TT_OBJECT.
    data: LR_EA_FCONO     type ref to ZCL_VCXI_FFSS_EA_FCONO,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***--------------------------------------------------------------------------------------
*** Transfer Information of Connection Out to Finished Good
    if IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ISVCE_FCONO.
***   Reset Component Ratio
      if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_FFG=>C_PARID_COMPR ] ).
        CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_FFG=>C_PARID_COMPR ]-ATFLV = 1.
      endif.

***   Disable Checks for SFGs
      if not LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK ] ).
        append value #( PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK
                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) to CS_SVCEL-T_SVCPA.
      endif.
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_XFG=>C_PARID_FDCHK ]-ATWRT = ABAP_TRUE.
    endif.

  endmethod.
  method ADJUST_SVCEL_MS_FPROC.

    data: LF_MATNR type MATNR.
    data: LT_PARAM_SOURCE type /VCXI/VKSR_TT_PARAM.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.


***--------------------------------------------------------------------------------------
*** Get correct Source Element
    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_FPROC.
        LR_SVCEL_SOURCE = IR_SVCEL.

***     No adjustments for "non-dummies"
        if not cast ZCL_VCXI_F0SS_EA_MS_XPROC( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
          return.
        endif.

      when C_ISVCE_MS_EMAT.
***     Replace Estimation Material with Procurement
        LR_SVCEL_SOURCE = IR_SVCEL.

      when C_ISVCE_FCONI.
***     Get related Connection Out
        LR_SVCEL_SOURCE = cast ZCL_VCXI_F0SS_EA_XCONI( IR_SVCEL->GET_CLSEA( ) )->GET_XCONO( ).

***     Substitute Component with Dummy Route if needed
        if not LINE_EXISTS( IT_MATLI[ LEVEL_SOURCE = LR_SVCEL_SOURCE->GET_LEVEL( ) ] ).
          LR_SVCEL_SOURCE = ME->GET_INP_BY_XCONO( IR_SVCEL_XCONO = LR_SVCEL_SOURCE ).

          if LR_SVCEL_SOURCE is bound.
***         Copy supervised Parameter of input but keep Reduction Information
            delete CS_SVCEL-T_SVCPA where PARID ne ZCL_VCXI_FFSS_PR_FCONI=>C_PARID_REDUW
                                     and  PARID ne ZCL_VCXI_FFSS_PR_FCONI=>C_PARID_FITRW.
            LT_PARAM_SOURCE = LR_SVCEL_SOURCE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ).
            delete LT_PARAM_SOURCE where PARID eq ZCL_VCXI_FFSS_PR_FCONI=>C_PARID_REDUW
                                    or   PARID eq ZCL_VCXI_FFSS_PR_FCONI=>C_PARID_FITRW.
            CS_SVCEL-T_SVCPA = corresponding #( base ( CS_SVCEL-T_SVCPA ) LT_PARAM_SOURCE ).
***         Copy children of e.g. Procurement
            ME->COPY_SVCEL_CHILDREN( IF_ISELF    = CS_SVCEL-ISELF
                                     IF_CSELF    = CS_SVCEL-CSELF
                                     IR_SVCEL    = LR_SVCEL_SOURCE
                                     IR_IDAT_SVC = IR_IDAT_SVC
                                     IT_MATLI    = IT_MATLI
                                     IT_DMSLI    = IT_DMSLI ).
          endif.
        endif.
    endcase.
    check LR_SVCEL_SOURCE is bound.

    LT_PARAM_SOURCE = LR_SVCEL_SOURCE->GET_PARAM_ALL( ).

***--------------------------------------------------------------------------------------
    case LR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_FPROC.
***     Use existing Material for "non-dummies"
        if not cast ZCL_VCXI_F0SS_EA_MS_XPROC( LR_SVCEL_SOURCE->GET_CLSEA( ) )->IS_DUMMY( ).
          LF_MATNR = LR_SVCEL_SOURCE->GET_LEOKY( )-LEOKY.
        endif.

      when C_ISVCE_MS_EMAT.
***     Get assigned Material of Estimation Material
        LF_MATNR = value #( LT_PARAM_SOURCE[ PARID = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_PARID_AMAT ]-ATWRT optional ).
    endcase.

*** Get Material Number of created Material
    if LF_MATNR is initial.
      LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                          IR_SVCEL_SOURCE = LR_SVCEL_SOURCE ).
    endif.

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Keep Procurement Option
    if not LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] ) and
           LINE_EXISTS( LT_PARAM_SOURCE[  PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      append corresponding #( LT_PARAM_SOURCE[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] ) to CS_SVCEL-T_SVCPA.
    endif.
    if not LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_LIFNR ] ) and
           LINE_EXISTS( LT_PARAM_SOURCE[  PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_LIFNR ] ).
      append corresponding #( LT_PARAM_SOURCE[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_LIFNR ] ) to CS_SVCEL-T_SVCPA.
    endif.

*** Switch Procurement Option to "Direct Procurement"/"Stock"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_PURCH ] to <S_PARAM>.
      if <S_PARAM>-ATWRT eq ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
         LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_F0SS_PR_MS_XPROC=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_XCSS_PR_MS=>C_PARID_FPTOS )-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                                     else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

*** Keep Flag - Reverse film structure
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_PARID_FRFST ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_PARID_FRFST ] to <S_PARAM>.
      <S_PARAM>-ATWRT = value #( LT_PARAM_SOURCE[ PARID = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_PARID_FRFST ]-ATWRT optional ).
      <S_PARAM>-SETBY = value #( LT_PARAM_SOURCE[ PARID = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_PARID_FRFST ]-SETBY optional ).
    endif.

  endmethod.
  method ADJUST_SVCEL_MS_INK.

    data: LF_MATNR type MATNR.
    data: LR_EA_MS_INK type ref to ZCL_VCXI_FFSS_EA_MS_INK.


*** Check if Ink Tool has not been specified
    check IR_SVCEL is bound.
    LR_EA_MS_INK ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_MS_INK->GET_INKTN( ) is initial.

*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).
    check LF_MATNR is not initial.

*** Fill Tool Material
    delete CS_SVCEL-T_SVCPA where PARID = ZCL_VCXI_FFSS_PR_MS_INK=>C_PARID_INKTN.
    append value #( PARID = ZCL_VCXI_FFSS_PR_MS_INK=>C_PARID_INKTN
                    ATWRT = LF_MATNR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZCL_VCXI_FFSS_PR_MS_INK=>C_IEVNT_O_INKTN_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_RHNDL.

***--------------------------------------------------------------------------------------
*** Fix Roll Dimension Target
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RDMTA ] ).
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RDMTA ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    endif.

*** Fix Roll Dimension Minimum/Maximum
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RDMMM ] ).
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RDMMM ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    endif.

***--------------------------------------------------------------------------------------
*** Fix Roll Winding Side
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWSID ] ).
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWSID ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    else.
      append value #( PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWSID
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) to CS_SVCEL-T_SVCPA.
    endif.

*** Fix Roll Winding Direction
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWDIR ] ).
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWDIR ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    else.
      append value #( PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_RWDIR
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) to CS_SVCEL-T_SVCPA.
    endif.

*** Fix Eyemark Position
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_EYEMP ] ).
      CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_EYEMP ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    else.
      append value #( PARID = ZCL_VCXI_FFSS_PR_RHNDL=>C_PARID_EYEMP
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) to CS_SVCEL-T_SVCPA.
    endif.

  endmethod.
  method ANALYZE.

    data: LF_WERKS type WERKS_D,
          LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY,
          LF_COUNT type I.
    data: LT_CHILDREN type /VCXI/CKX_TT_OBJECT.
    data: LR_EA_SPEC      type ref to ZCL_VCXI_F0SS_EA_SPEC,
          LR_SVCEL_INPUT  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CONV   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Specification and Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_EA_SPEC      = LR_EA_SPEC
                                  ER_SVCEL_INPUT  = LR_SVCEL_INPUT
                                  ER_SVCEL_CONV   = LR_SVCEL_CONV
                                  ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_EA_SPEC      is bound and
          LR_SVCEL_INPUT  is bound and
          LR_SVCEL_CONV   is bound and
          LR_SVCEL_OUTPUT is bound.

*** Get Plant
    LF_WERKS = LR_EA_SPEC->GET_WERKS( ).

***--------------------------------------------------------------------------------------
*** Ignore Dummy Routes
    if ME->HAS_ARBPL( IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP ).
***   Analyze Output for FG / SFG
      LT_CHILDREN = LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
      LR_SVCEL_OUTPUT->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_CHILDREN ).
      loop at LT_CHILDREN into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.

***     Define Source Key
        LF_SOKEY = ME->GET_SOKEY_OUT( IR_SVCEL = LR_SVCEL
                                      IF_KZKUP = cond #( when LINES( LT_CHILDREN ) eq 1 then ABAP_FALSE
                                                         when LINES( LT_CHILDREN ) gt 1 and LF_COUNT eq 0 then ABAP_UNDEFINED
                                                         when LINES( LT_CHILDREN ) gt 1 and LF_COUNT ne 0 then ABAP_TRUE ) ).
        check LF_SOKEY is not initial.
        LF_COUNT += 1.

***     Add Material with Activities based on Source Key
        ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                                 IF_DISST        = switch #( LF_SOKEY when C_SOKEY_FFG    or C_SOKEY_FFG_MTS
                                                                        or C_SOKEY_FFG_M  or C_SOKEY_FFG_M_MTS
                                                                        or C_SOKEY_FFG_CO or C_SOKEY_FFG_CO_MTS then 0
                                                                      else IF_DISST )
                                 IR_SVCEL_SOURCE = LR_SVCEL
                                 IF_WERKS        = LF_WERKS
                       changing  CT_MATLI        = ET_MATLI ).
      endloop.


***--------------------------------------------------------------------------------------
***   Analyze Conversion Steps
      loop at LR_SVCEL_CONV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.
        ME->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = LR_SVCEL
                                     IF_DISST       = conv #( IF_DISST + 1 )
                           changing  CT_MATLI       = ET_MATLI
                                     CT_DMSLI       = ET_DMSLI ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Analyze Input for Film Procurement Dummy
    loop at LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        when C_ISVCE_MS_FPROC.
          ME->ANALYZE_MS_FPROC( exporting IR_SVCEL_FPROC = LR_SVCEL
                                          IF_DISST       = conv #( IF_DISST + 1 )
                                changing  CT_MATLI       = ET_MATLI
                                          CT_DMSLI       = ET_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP.

    SUPER->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                    IF_DISST       = IF_DISST
                          changing  CT_MATLI       = CT_MATLI
                                    CT_DMSLI       = CT_DMSLI ).

    case IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_CSTEP_PRINT.
        ME->ANALYZE_CSTEP_PRINT( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                           IF_DISST       = IF_DISST
                                 changing  CT_MATLI       = CT_MATLI
                                           CT_DMSLI       = CT_DMSLI ).
    endcase.

  endmethod.
  method ANALYZE_CSTEP_PRINT.

    data: LF_PRTEC type ZVCXI_FFS_PRTEC.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_EA_CSTEP_PRINT,
          LR_BL_DOC         type ref to ZCL_VCXI_XCSS_BL_DOC,
          LR_SVCEL          type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.


    LR_EA_CSTEP_PRINT ?= IR_SVCEL_CSTEP->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_CSTEP
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if DMS Design Document has not been specified
    if LR_EA_CSTEP_PRINT->GET_DESDO( importing ER_BL_DOC = LR_BL_DOC ) is initial.
***   Add DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = value #( DOKAR = LR_EA_CSTEP_PRINT->GET_DOKAR( )  )
                     changing  CT_DMSLI        = CT_DMSLI ).

***   Add Material with Activities based on Source Key (Print Tool Set for analog printing)
      LR_EA_CSTEP_PRINT->GET_TPRIN( importing EF_PRTEC = LF_PRTEC ).
      if LF_PRTEC eq ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
        ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_FOTUT when ABAP_TRUE then C_SOKEY_TOOL_SET_PRINT_OTU
                                                                                     else C_SOKEY_TOOL_SET_PRINT )
                                 IF_DISST        = IF_DISST
                                 IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                                 IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                       changing  CT_MATLI        = CT_MATLI ).
      endif.
    else.
***   Add existing DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = LR_BL_DOC->GET_DOC_KEY( )
                     changing  CT_DMSLI        = CT_DMSLI ).
    endif.


***--------------------------------------------------------------------------------------
    loop at IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Inks
        when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_INK.
          ME->ANALYZE_MS_INK( exporting IR_SVCEL_MS_INK = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_MS_FPROC.

    data: LR_EA_MS_FPROC type ref to ZCL_VCXI_FFSS_EA_MS_FPROC.


    check IR_SVCEL_FPROC is bound.
    LR_EA_MS_FPROC ?= IR_SVCEL_FPROC->GET_CLSEA( ).
    check LR_EA_MS_FPROC->IS_DUMMY( ).

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_FPROC
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_FPROC
                             IF_WERKS        = LR_EA_MS_FPROC->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_MS_INK.

    data: LR_EA_MS_INK type ref to ZCL_VCXI_FFSS_EA_MS_INK.


*** Check if Ink Tool has not been specified
    check IR_SVCEL_MS_INK is bound.
    LR_EA_MS_INK ?= IR_SVCEL_MS_INK->GET_CLSEA( ).
    check LR_EA_MS_INK->GET_INKTN( ) is initial.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_MS_INK->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

*** No Ink Tools for One-Time Usage
    check LF_FOTUT ne ABAP_TRUE.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_INK
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_MS_INK
                             IF_WERKS        = LR_EA_MS_INK->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method GET_ACTDAT_DMS.

    field-symbols: <S_ACTDAT_DMS> type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_DMS( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                       importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_DMS>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Printing
      when C_SOKEY_DMS_PRINT.
        if cast ZCL_VCXI_FFSS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_DESDO( ) is initial.
***       Create a new Design Document
          cast ZCL_VCXI_FFSS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_DESDD( importing ET_DKTXT = data(LT_DXTXT) ).
          <S_ACTDAT_DMS>-T_DMSDAT_DRAT = corresponding #( LT_DXTXT ).
        else.
***       Design Document already exists - no creation needed
          EF_SKIP = ABAP_TRUE.
        endif.

    endcase.

  endmethod.
  method GET_ACTDAT_DMSEXT.

    field-symbols: <S_ACTDAT_DMSEXT> type ZVCXI_FFM_MBQ_S_ACTDAT_DMSEXT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_ACTDAT type ZVCXI_FFM_MBQ_S_ACTDAT_DMSEXT.
    assign RR_ACTDAT->* to <S_ACTDAT_DMSEXT>.

***--------------------------------------------------------------------------------------
*** Define Control Data for Print Design
    <S_ACTDAT_DMSEXT>-S_DMSEXT_PD    = ME->GET_DMSEXT_PD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    <S_ACTDAT_DMSEXT>-T_DMSEXT_PDINK = ME->GET_DMSEXT_PDINK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).

  endmethod.
  method GET_ACTDAT_MCL.

    data: LS_LOTMI type ZVCXI_F0S_S_LOTMI.
    field-symbols: <S_ACTDAT_MCL> type ZVCXI_XCM_MBQ_S_ACTDAT_MCL,
                   <S_CLASSI>     type ZVCXI_XCM_MBQ_S_CLASSI,
                   <S_ALLOC_NUM>  type BAPI1003_ALLOC_VALUES_NUM.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MCL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                                 IF_DISST        = IF_DISST
                                       importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MCL>.

***--------------------------------------------------------------------------------------
*** Get Minimum Lot Size
    LS_LOTMI = ME->GET_LOTMI( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).

*** Define Classification
    if LS_LOTMI is not initial.
      read table <S_ACTDAT_MCL>-T_CLASSI assigning <S_CLASSI>
                                         with key CLNAM = 'VCXI_AOO'
                                                  CLTYP = '001'.
      if SY-SUBRC ne 0.
        append value #( CLNAM = 'VCXI_AOO'
                        CLTYP = '001' ) to <S_ACTDAT_MCL>-T_CLASSI assigning <S_CLASSI>.
      endif.

***   Update Characteristic
      read table <S_CLASSI>-T_ALLOC_NUM assigning <S_ALLOC_NUM>
                                         with key CHARACT = 'VCXI_AOO_LOTMI'.
      if SY-SUBRC ne 0.
        append value #( CHARACT = 'VCXI_AOO_LOTMI' ) to <S_CLASSI>-T_ALLOC_NUM assigning <S_ALLOC_NUM>.
      endif.
      <S_ALLOC_NUM>-VALUE_FROM = LS_LOTMI-LOTMI.
    endif.

***--------------------------------------------------------------------------------------
*** Activity can be skipped?
    EF_SKIP = cond #( when <S_ACTDAT_MCL>-T_CLASSI is initial then ABAP_TRUE else ABAP_FALSE ).

  endmethod.
  method GET_ACTDAT_MMEXT.

    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_F0M_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Film Procurement
      when C_SOKEY_FPROC.
***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_FFE_MM_MMEXT=>C_CNTXT_FF.    "Film
        <S_ACTDAT_MMEXT>-S_FF_EXTVAL = cast ZCL_VCXI_FFSS_EA_MS_FPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( ).

    endcase.

  endmethod.
  method GET_ACTDAT_PCR.

    field-symbols: <S_ACTDAT_PCR> type ZVCXI_XCM_MBQ_S_ACTDAT_PCR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PCR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                                 IF_DISST        = IF_DISST
                                       importing EF_SKIP         = EF_SKIP ).

    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PCR>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    case IF_SOKEY.
***   Tools
      when C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        insert lines of ME->GET_PCR_TOOL( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                          IF_SOKEY        = IF_SOKEY
                                          IF_WERKS        = IF_WERKS ) into table <S_ACTDAT_PCR>-T_PCR.
    endcase.

    if <S_ACTDAT_PCR>-T_PCR is not initial.
      EF_SKIP = ABAP_FALSE.
    endif.

  endmethod.
  method GET_ACTDAT_PRU.

    field-symbols: <S_ACTDAT_PRU> type ZVCXI_XCM_MBQ_S_ACTDAT_PRU.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PRU( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                                 IF_DISST        = IF_DISST
                                       importing EF_SKIP         = EF_SKIP ).

    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PRU>.

***--------------------------------------------------------------------------------------
*** Define Control Data
    case IF_SOKEY.
***   Tools
      when C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        <S_ACTDAT_PRU> = ME->GET_PRU_TOOL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                     IF_SOKEY        = IF_SOKEY
                                                     IF_WERKS        = IF_WERKS
                                           changing  CF_SKIP         = EF_SKIP ).
    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Film Procurement
      when C_SOKEY_FPROC.
        <S_ACTDAT_PURIR> = ME->GET_PURIR_XPROC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                          IF_SOKEY        = IF_SOKEY
                                                          IF_WERKS        = IF_WERKS
                                                changing  CF_SKIP         = EF_SKIP ).

***   Tools
      when C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
        <S_ACTDAT_PURIR> = ME->GET_PURIR_TOOL( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                         IF_SOKEY        = IF_SOKEY
                                                         IF_WERKS        = IF_WERKS
                                               changing  CF_SKIP         = EF_SKIP ).
      when others.
        EF_SKIP = ABAP_TRUE.
    endcase.

  endmethod.
  method GET_BL_ALTUOM.

    create object RR_BL_ALTUOM
      exporting
        IS_CMPRK = value #( CMATN = 'VCXI_FF_FILM_CNF'
                            PRFID = 'VCXI_FF_FILM_CNF' )
        IF_WERKS = IF_WERKS.

  endmethod.
  method GET_DMSEXT_PD.

*** Define Source of Data Extension
    RS_DMSEXT_PD-LEVEL_SOURCE = IR_SVCEL_SOURCE->GET_LEVEL( ).

*** Get Print Design Header Information
    RS_DMSEXT_PD-S_PD = cast ZCL_VCXI_FFSS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_PD( ).

  endmethod.
  method GET_DMSEXT_PDINK.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    data(LT_SVCEL) = IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    IR_SVCEL_SOURCE->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_SVCEL ).
    loop at LT_SVCEL into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Traditional/Analog Inks
        when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_INK.
          append value #( LEVEL_SOURCE = LR_SVCEL->GET_LEVEL( )
                          S_PDINK      = cast ZCL_VCXI_FFSS_EA_MS_INK( LR_SVCEL->GET_CLSEA( ) )->GET_PDINK( )
                        ) to RT_DMSEXT_PDINK.
***     Analyze Digital Inks
        when ZCL_VCXI_FFM_MBQ_BL_FCOMP=>C_ISVCE_MS_DINK.
          append value #( LEVEL_SOURCE = LR_SVCEL->GET_LEVEL( )
                          S_PDINK      = cast ZCL_VCXI_FFSS_EA_MS_DINK( LR_SVCEL->GET_CLSEA( ) )->GET_PDINK( )
                        ) to RT_DMSEXT_PDINK.
      endcase.
    endloop.

  endmethod.
  method GET_EXQTY.

    data: LF_NOOUT       type ZVCXI_XCS_NOOUT,
          LF_NOOUT_FIRST type ZVCXI_XCS_NOOUT,
          LF_NOOUT_TOTAL type ZVCXI_XCS_NOOUT.
    data: LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


*** Get SUPER Explosion Quantity
    RS_EXQTY = SUPER->GET_EXQTY( ).

*** Get Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_SVCEL_OUTPUT is bound.

*** Find Connection Outs and FGs as Child
    loop at LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      check LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

*{   REPLACE        HEDK925765                                        1
*\      case type of LR_SVCEL->GET_CLSEA( ).
*\        when type ZCL_VCXI_FFSS_EA_FCONO into data(LR_EA_FCONO). " Connection Out
*\          LF_NOOUT = LR_EA_FCONO->GET_NOOUT( ).
*\        when type ZCL_VCXI_FFSS_EA_FFG into data(LR_EA_FFG).     " Finished Good
*\          LF_NOOUT = LR_EA_FFG->GET_NOOUT( ).
*\        when others.
*\          continue.
*\      endcase.
*\      LF_NOOUT_TOTAL += LF_NOOUT.
data lr_ea_fcono type ref to ZCL_VCXI_FFSS_EA_FCONO.
data lr_ea_ffg type ref to ZCL_VCXI_FFSS_EA_FFG.
try.
lr_ea_fcono ?= LR_SVCEL->GET_CLSEA( ).
         LF_NOOUT = LR_EA_FCONO->GET_NOOUT( ).
catch cx_sy_move_cast_error.
  try.
         LR_EA_FFG ?=   LR_SVCEL->GET_CLSEA( ).   " Finished Good
          LF_NOOUT = LR_EA_FFG->GET_NOOUT( ).
catch cx_sy_move_cast_error.
  continue.
endtry. .
endtry.

LF_NOOUT_TOTAL = LF_NOOUT + LF_NOOUT_TOTAL.
*}   REPLACE
      if LF_NOOUT_FIRST is initial.
        LF_NOOUT_FIRST = LF_NOOUT.
      endif.
    endloop.

*** Calculate proprtianal Evaluation Quantity as Explosion Quantity
    if LF_NOOUT_TOTAL ne 0.
      RS_EXQTY-EXQTY     = RS_EXQTY-EXQTY / LF_NOOUT_TOTAL * LF_NOOUT_FIRST.
    else.
      RS_EXQTY-EXQTY = 0.
    endif.

  endmethod.
  method GET_LOTMI.

    data: LT_PARAM type /VCXI/VKSR_TT_PARAM.
    data: LR_CLSEA type ref to /VCXI/CL_VKSR_CLSEA.


***--------------------------------------------------------------------------------------
*** Get Lot Size
    LR_CLSEA = IR_SVCEL_SOURCE->GET_CLSEA( ).

*{   REPLACE        HEDK925765                                        1
*\    case type of LR_CLSEA.
*\***   Finished Good
*\      when type ZCL_VCXI_FFSS_EA_FFG.
*\        RS_LOTMI = cast ZCL_VCXI_FFSS_EA_FFG( LR_CLSEA )->GET_LOTMI( ).
*\
*\***   Connection Out
*\      when type ZCL_VCXI_FFSS_EA_FCONO.
*\        RS_LOTMI = cast ZCL_VCXI_FFSS_EA_FCONO( LR_CLSEA )->GET_LOTMI( ).
*\
*\***   Film Procurement
*\      when type ZCL_VCXI_FFSS_EA_MS_FPROC.
*\        RS_LOTMI = cast ZCL_VCXI_FFSS_EA_MS_FPROC( LR_CLSEA )->GET_LOTMI( ).
*\
*\***   others
*\      when others.
*\        LT_PARAM = IR_SVCEL_SOURCE->GET_PARAM_ALL( ).
*\        if LINE_EXISTS( LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ] ).
*\          RS_LOTMI = value #( LOTMI     = LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ]-ATFLV
*\                              LOTMI_UOM = LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ]-UNIT ).
*\        endif.
*\    endcase.
   data lr_ffg type ref to  ZCL_VCXI_FFSS_EA_FFG.
   data lr_fcono type ref to ZCL_VCXI_FFSS_EA_FCONO.
   data lr_fproc type ref to ZCL_VCXI_FFSS_EA_MS_FPROC.
   try.
   lr_ffg ?=  LR_CLSEA.
***   Finished Good
        RS_LOTMI = cast ZCL_VCXI_FFSS_EA_FFG( LR_CLSEA )->GET_LOTMI( ).
        catch cx_sy_move_cast_error.
    try.
    lr_fcono ?=  LR_CLSEA.
     RS_LOTMI = cast ZCL_VCXI_FFSS_EA_FCONO( LR_CLSEA )->GET_LOTMI( ).
      catch cx_sy_move_cast_error.
     try.
       lr_fproc ?=  LR_CLSEA.
        RS_LOTMI = cast ZCL_VCXI_FFSS_EA_MS_FPROC( LR_CLSEA )->GET_LOTMI( ).
       catch cx_sy_move_cast_error.
           LT_PARAM = IR_SVCEL_SOURCE->GET_PARAM_ALL( ).
        if LINE_EXISTS( LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ] ).
          RS_LOTMI = value #( LOTMI     = LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ]-ATFLV
                              LOTMI_UOM = LT_PARAM[ PARID = 'ZVCXI_F0_LOTMI_L' ]-UNIT ).
        endif.
endtry.
endtry.
endtry.
*}   REPLACE

  endmethod.
  method GET_LOVC.

    case IF_SOKEY.
***   Ink Tool
      when C_SOKEY_TOOL_INK.
        RT_VALUE = ME->GET_LOVC_TOOL_INK( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                          IF_SOKEY        = IF_SOKEY
                                          IF_WERKS        = IF_WERKS ).
    endcase.

  endmethod.
  method GET_LOVC_TOOL_INK.

    data: LT_CABN type TT_CABN.
    data: LR_BOB_MAT  type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO.


***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

*** Get LO-VC values of Reference
    RT_VALUE = LR_BOB_MAT->GET_LOVC( ).

*** Get Tooling Information (based on Printing)
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                         importing ER_EA_TINFO     = LR_EA_TINFO ).


***--------------------------------------------------------------------------------------
*** Fill LO-VC Values by SmartVC
ENHANCEMENT-POINT GET_LOVC_TOOL_INK SPOTS ZVCXI_FFM_MBQ_ES_BL_FCOMP .

  endmethod.
  method GET_MATDAT_MAKT.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Print Tool Set of Conversion Step
      when type ZCL_VCXI_FFSS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_CSTEP_PRINT->GET_DESDD( ) ) ).
***   MS Ink
      when type ZCL_VCXI_FFSS_EA_MS_INK into data(LR_EA_MS_INK).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_MS_INK->GET_INKTD( ) ) ).

***   Super
      when others.
        RT_MATDAT_MAKT = SUPER->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).
    endcase.

  endmethod.
  method GET_MATDAT_MARA.

    data: LF_UMREN type UMREN,
          LF_UMREZ type UMREZ.
    data: LS_MMEXT type ZVCXI_FFE_MM_S_MMEXT.
    data: LR_BL_ALTUOM type ref to ZCL_VCXI_F0SS_BL_ALTUOM.


    RS_MATDAT_MARA = SUPER->GET_MATDAT_MARA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_SOKEY        = IF_SOKEY
                                             IF_WERKS        = IF_WERKS ).

***--------------------------------------------------------------------------------------
*{   REPLACE        HEDK925765                                        1
*\    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
*\***   Film Procurement
*\      when type ZCL_VCXI_FFSS_EA_MS_FPROC.
*\***     Get Extension Values
*\        LS_MMEXT = cast ZCL_VCXI_FFSS_EA_MS_FPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( )-S_MMEXT.
*\
*\      when others.
*\        exit.
*\    endcase.
data lr_fproc type ref to  ZCL_VCXI_FFSS_EA_MS_FPROC.
try.
 lr_fproc ?= IR_SVCEL_SOURCE->GET_CLSEA( ).
        LS_MMEXT = cast ZCL_VCXI_FFSS_EA_MS_FPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( )-S_MMEXT.
catch cx_sy_move_cast_error.
        exit.
endtry.
*}   REPLACE

***------------------------------------------------------------------------------------------------
*** Get Alternative UoM Business Logic
    LR_BL_ALTUOM = ME->GET_BL_ALTUOM( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                      IF_WERKS        = IF_WERKS ).
    check LR_BL_ALTUOM is bound.

*** Get Conversion Factor
    LR_BL_ALTUOM->GET_UMREZ_UMREN( exporting IS_MMEXT = LS_MMEXT
                                             IF_UOM   = RS_MATDAT_MARA-UNIT_OF_WT
                                   importing EF_UMREZ = LF_UMREZ
                                             EF_UMREN = LF_UMREN ).

*** Calculate Net Weigth based on Conversion Factor
    if LF_UMREZ ne 0.
      RS_MATDAT_MARA-NET_WEIGHT = LF_UMREN / LF_UMREZ.
    else.
      clear RS_MATDAT_MARA-NET_WEIGHT.
    endif.

  endmethod.
  method GET_MATDAT_MARM.

    data: LS_MMEXT      type ZVCXI_FFE_MM_S_MMEXT,
          LS_ALTUOM_DEF type ZVCXI_F0SS_S_ALTUOM_DEF.
    data: LR_BL_ALTUOM type ref to ZCL_VCXI_F0SS_BL_ALTUOM.
    field-symbols: <S_MATDAT_MARM> type ZVCXI_XCM_MBQ_S_MATDAT_MARM.



    RT_MATDAT_MARM = SUPER->GET_MATDAT_MARM( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_WERKS        = IF_WERKS
                                             IS_MATDAT_MARA  = IS_MATDAT_MARA ).

***--------------------------------------------------------------------------------------
*{   REPLACE        HEDK925765                                        1
*\    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
*\***   Film Procurement
*\      when type ZCL_VCXI_FFSS_EA_MS_FPROC.
*\***     Get Extension Values
*\        LS_MMEXT = cast ZCL_VCXI_FFSS_EA_MS_FPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( )-S_MMEXT.
*\
*\      when others.
*\        exit.
*\    endcase.
data lr_fproc type ref to ZCL_VCXI_FFSS_EA_MS_FPROC.
try.
lr_fproc ?= IR_SVCEL_SOURCE->GET_CLSEA( ).
        LS_MMEXT = cast ZCL_VCXI_FFSS_EA_MS_FPROC( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_EXTVAL( )-S_MMEXT.
catch cx_sy_move_cast_error.
        exit.
    endtry.
*}   REPLACE

***------------------------------------------------------------------------------------------------
*** Get Alternative UoM Business Logic
    LR_BL_ALTUOM = ME->GET_BL_ALTUOM( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                      IF_WERKS        = IF_WERKS ).
    check LR_BL_ALTUOM is bound.

*** Process all customized Alternate Unit Definition
    loop at LR_BL_ALTUOM->T_ALTUOM_DEF into LS_ALTUOM_DEF.
      if LINE_EXISTS( RT_MATDAT_MARM[ MEINH = LS_ALTUOM_DEF-UOM ] ).
        assign RT_MATDAT_MARM[ MEINH = LS_ALTUOM_DEF-UOM ] to <S_MATDAT_MARM>.
      else.
***     Add customized Alt.UoM before otherwise defined UoMs
        insert value #( MEINH = LS_ALTUOM_DEF-UOM ) into table RT_MATDAT_MARM assigning <S_MATDAT_MARM>.
      endif.

***   Get Conversion Factor
      LR_BL_ALTUOM->GET_UMREZ_UMREN( exporting IS_MMEXT = LS_MMEXT
                                               IF_UOM   = <S_MATDAT_MARM>-MEINH
                                     importing EF_UMREZ = <S_MATDAT_MARM>-UMREZ
                                               EF_UMREN = <S_MATDAT_MARM>-UMREN ).

***   Set Gross Weight to Base Unit
      if <S_MATDAT_MARM>-UMREZ eq 1 and
         <S_MATDAT_MARM>-UMREN eq 1.
        <S_MATDAT_MARM>-BRGEW = IS_MATDAT_MARA-NET_WEIGHT.
      endif.
    endloop.

*** Remove invalid Conversions
    delete RT_MATDAT_MARM where UMREZ eq 0
                           or   UMREN eq 0.

  endmethod.
  method GET_MATDAT_MVKE.

    data: LR_EA_TINFO type ref to ZCL_VCXI_XCSS_EA_TINFO.


    RT_MATDAT_MVKE = SUPER->GET_MATDAT_MVKE( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_WERKS        = IF_WERKS
                                             IF_SOKEY        = IF_SOKEY
                                             IF_TMATN        = IF_TMATN ).

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
      when C_SOKEY_TOOL_INK.
***     Get Tooling Information (based on Printing)
        ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                             importing ER_EA_TINFO     = LR_EA_TINFO ).
      when C_SOKEY_TOOL_SET_PRINT or     "Print Tool Set
           C_SOKEY_TOOL_SET_PRINT_OTU.   "Print Tool Set (One-Time Usage)
***     Get Tooling Information
        ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_SOURCE
                             importing ER_EA_TINFO     = LR_EA_TINFO ).
    endcase.

*** No Sales Data for external Tools
    if LR_EA_TINFO is bound and
       LR_EA_TINFO->GET_FEXTT( ) eq ABAP_TRUE.
      clear RT_MATDAT_MVKE.
    endif.

  endmethod.
  method GET_SELRTE_RHNDL.

    data: LF_INDEX              type        I.
    data: LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV,
          LR_BL_PRTE   type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL     type ref to ZIF_VCXI_FFSR_RHNDL.


***--------------------------------------------------------------------------------------
*** Get SVC Element for Routing Supervisor
    ME->GET_SVCEL_RTESPV( exporting IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP
                          importing ER_EA_RTESPV   = LR_EA_RTESPV ).
    check LR_EA_RTESPV is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of Selected Route
    move  LR_EA_RTESPV->GET_RTESEL( ) to LR_BL_PRTE.
    check LR_BL_PRTE             is bound and
          LR_BL_PRTE->R_RTE_PRTE is bound.

*** Get last Work center
    LF_INDEX = LINES( LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ).
    check LF_INDEX > 0.

*** Get last Step with Roll Handling
*{   REPLACE        HEDK925765                                        1
*\    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL[ LF_INDEX ]->T_RTE_PSTEP into LR_RTE_PSTEP.
data ls_arbpl like line of LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL.
read table LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into ls_arbpl index lf_index.
    loop at ls_arbpl->T_RTE_PSTEP into LR_RTE_PSTEP.
*}   REPLACE
      try.
          LR_RHNDL ?= LR_RTE_PSTEP->R_BLOBJ.
          check LR_RHNDL is not initial.
          check LR_RHNDL->T_RHNDL is not initial.
          move LR_RHNDL to RR_RHNDL.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_RHNDL.
      endtry.
    endloop.

  endmethod.
  method GET_SOKEY_OUT.

*** Get Make-to-Stock Flag of Element
    data(LF_FMTSA) = ME->GET_FMTSA( IR_SVCEL = IR_SVCEL ).

*** Define Source Key based on FG/SFG > Co-Product > MTO/MTS
    RF_SOKEY = switch #( IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( )
                         when C_ISVCE_FFG    then switch #( IF_KZKUP                          "Finished Good
                                                            when ABAP_FALSE     then switch #( LF_FMTSA     "Normal
                                                                                               when ABAP_FALSE then C_SOKEY_FFG
                                                                                               when ABAP_TRUE  then C_SOKEY_FFG_MTS
                                                                                             )
                                                            when ABAP_UNDEFINED then switch #( LF_FMTSA      "Main-Co-Product
                                                                                               when ABAP_FALSE then C_SOKEY_FFG_M
                                                                                               when ABAP_TRUE  then C_SOKEY_FFG_M_MTS
                                                                                             )
                                                            when ABAP_TRUE      then switch #( LF_FMTSA      "Co-Product
                                                                                               when ABAP_FALSE then C_SOKEY_FFG_CO
                                                                                               when ABAP_TRUE  then C_SOKEY_FFG_CO_MTS
                                                                                             )
                                                          )
                         when C_ISVCE_FCONO  then switch #( IF_KZKUP                          "Semi-Finished Good
                                                            when ABAP_FALSE     then switch #( LF_FMTSA     "Normal
                                                                                               when ABAP_FALSE then C_SOKEY_FSFG
                                                                                               when ABAP_TRUE  then C_SOKEY_FSFG_MTS
                                                                                             )
                                                            when ABAP_UNDEFINED then switch #( LF_FMTSA      "Main-Co-Product
                                                                                               when ABAP_FALSE then C_SOKEY_FSFG_M
                                                                                               when ABAP_TRUE  then C_SOKEY_FSFG_M_MTS
                                                                                             )
                                                            when ABAP_TRUE      then switch #( LF_FMTSA      "Co-Product
                                                                                               when ABAP_FALSE then C_SOKEY_FSFG_CO
                                                                                               when ABAP_TRUE  then C_SOKEY_FSFG_CO_MTS
                                                                                             )
                                                          )
                       ).

  endmethod.
