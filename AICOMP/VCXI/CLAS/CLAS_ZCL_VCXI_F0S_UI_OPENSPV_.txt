
class ZCL_VCXI_F0S_UI_OPENSPV definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data F_CURSOR type SCRFNAME .
  data S_OPENSPV_VIS type ZVCXI_F0S_S_OPENSPV_VIS .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_OPENSPV_VIS
    importing
      !IS_OPENSPV_VIS type ZVCXI_F0S_S_OPENSPV_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_UC_OPEN type SYUCOMM value 'OPEN' ##NO_TEXT.
  data R_PR_OPENSPV type ref to ZCL_VCXI_F0S_PR_OPENSPV .

  methods HANDLE_UC_OPEN
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0S_UI_OPENSPV definition
class ZCL_VCXI_F0S_UI_OPENSPV implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_F0S_UI_OPENSPV_BIND'
      exporting
        IR_UI_OPENSPV = ME
      importing
        ES_DYNP       = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    data:  LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

***--------------------------------------------------------------------------------------
*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_OPENSPV.
      catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

***--------------------------------------------------------------------------------------
*** Defaulting of Plant
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->F_WERKS to ME->S_OPENSPV_VIS-WERKS.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***     Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***---------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

***---------------------------------------------------------------------------
*** Set Cursor
    set cursor field ME->F_CURSOR.
    clear ME->F_CURSOR.

  endmethod.
  method DO_UPDATE_OPENSPV_VIS.

*** Update Vis Structure with enterred info
    move IS_OPENSPV_VIS to ME->S_OPENSPV_VIS.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_OPEN.
        ME->HANDLE_UC_OPEN( ).
    endcase.

  endmethod.
  method HANDLE_UC_OPEN.

    data: LS_MARC  type MARC,
          LS_CMPRK type /VCXI/VKC_S_CMPRK.

***--------------------------------------------------------------------------------------
*** Get Configuration
    call function 'MARC_SINGLE_READ'
      exporting
        MATNR             = ME->S_OPENSPV_VIS-MATNR
        WERKS             = ME->S_OPENSPV_VIS-WERKS
      importing
        WMARC             = LS_MARC
      exceptions
        LOCK_ON_MARC      = 1
        LOCK_SYSTEM_ERROR = 2
        WRONG_CALL        = 3
        NOT_FOUND         = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LS_MARC-CUOBJ is initial.
***   Material &1 in plant &2 has no configuration.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_F0S'
                                            IF_MSGNO = '001'
                                            IF_MSGV1 = ME->S_OPENSPV_VIS-MATNR
                                            IF_MSGV2 = ME->S_OPENSPV_VIS-WERKS ).
    else.
***   Get configurable Material
      ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

      if LS_MARC-STDPD ne LS_CMPRK-CMATN.
***     Material &1 with configurable material &2 is not allowed here.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_F0S'
                                              IF_MSGNO = '002'
                                              IF_MSGV1 = ME->S_OPENSPV_VIS-MATNR
                                              IF_MSGV2 = LS_MARC-STDPD ).
      endif.
    endif.

*** Open complete Configuration
    ME->R_PR_OPENSPV->OPEN_COMPLETE( IF_MATNR = LS_MARC-MATNR
                                     IF_WERKS = LS_MARC-WERKS ).

  endmethod.
  method INIT_VIS.

    check ME->R_PR_OPENSPV is bound.

***--------------------------------------------------------------------------------------
*** Get Material Description
    move ME->R_PR_OPENSPV->GET_MATNR_DESCR( ME->S_OPENSPV_VIS-MATNR ) to ME->S_OPENSPV_VIS-MATNR_DESCR.

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.
    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
