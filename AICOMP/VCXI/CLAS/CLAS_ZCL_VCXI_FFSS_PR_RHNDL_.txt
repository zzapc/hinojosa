
class ZCL_VCXI_FFSS_PR_RHNDL definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_EYEMP_CHANGED type /VCXI/VKSC_IEVNT value 'EYEMP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PERMA_CHANGED type /VCXI/VKSC_IEVNT value 'PERMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PERMI_CHANGED type /VCXI/VKSC_IEVNT value 'PERMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDIMA_CHANGED type /VCXI/VKSC_IEVNT value 'RDIMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDIMI_CHANGED type /VCXI/VKSC_IEVNT value 'RDIMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDITA_CHANGED type /VCXI/VKSC_IEVNT value 'RDITA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDMMM_CHANGED type /VCXI/VKSC_IEVNT value 'RDMMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDMTA_CHANGED type /VCXI/VKSC_IEVNT value 'RDMTA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEMA_CHANGED type /VCXI/VKSC_IEVNT value 'RLEMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEMI_CHANGED type /VCXI/VKSC_IEVNT value 'RLEMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEOF_CHANGED type /VCXI/VKSC_IEVNT value 'RLEOF_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEOP_CHANGED type /VCXI/VKSC_IEVNT value 'RLEOP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLETA_CHANGED type /VCXI/VKSC_IEVNT value 'RLETA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWDIR_CHANGED type /VCXI/VKSC_IEVNT value 'RWDIR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGMA_CHANGED type /VCXI/VKSC_IEVNT value 'RWGMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGMI_CHANGED type /VCXI/VKSC_IEVNT value 'RWGMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGTA_CHANGED type /VCXI/VKSC_IEVNT value 'RWGTA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWSID_CHANGED type /VCXI/VKSC_IEVNT value 'RWSID_CHANGED' ##NO_TEXT.
  constants C_IPRVT_RHNDL type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_RHNDL' ##NO_TEXT.
  constants C_PARID_EYEMP type /VCXI/VKS_PARID value 'ZVCXI_FF_EYEMP' ##NO_TEXT.
  constants C_PARID_PERMA type /VCXI/VKS_PARID value 'ZVCXI_FF_PERMA' ##NO_TEXT.
  constants C_PARID_PERMI type /VCXI/VKS_PARID value 'ZVCXI_FF_PERMI' ##NO_TEXT.
  constants C_PARID_RDIMA type /VCXI/VKS_PARID value 'ZVCXI_FF_RDIMA' ##NO_TEXT.
  constants C_PARID_RDIMI type /VCXI/VKS_PARID value 'ZVCXI_FF_RDIMI' ##NO_TEXT.
  constants C_PARID_RDITA type /VCXI/VKS_PARID value 'ZVCXI_FF_RDITA' ##NO_TEXT.
  constants C_PARID_RDMMM type /VCXI/VKS_PARID value 'ZVCXI_FF_RDMMM' ##NO_TEXT.
  constants C_PARID_RDMTA type /VCXI/VKS_PARID value 'ZVCXI_FF_RDMTA' ##NO_TEXT.
  constants C_PARID_RLEMA type /VCXI/VKS_PARID value 'ZVCXI_FF_RLEMA' ##NO_TEXT.
  constants C_PARID_RLEMI type /VCXI/VKS_PARID value 'ZVCXI_FF_RLEMI' ##NO_TEXT.
  constants C_PARID_RLEOF type /VCXI/VKS_PARID value 'ZVCXI_FF_RLEOF' ##NO_TEXT.
  constants C_PARID_RLEOP type /VCXI/VKS_PARID value 'ZVCXI_FF_RLEOP' ##NO_TEXT.
  constants C_PARID_RLETA type /VCXI/VKS_PARID value 'ZVCXI_FF_RLETA' ##NO_TEXT.
  constants C_PARID_RWDIR type /VCXI/VKS_PARID value 'ZVCXI_FF_RWDIR' ##NO_TEXT.
  constants C_PARID_RWGMA type /VCXI/VKS_PARID value 'ZVCXI_FF_RWGMA' ##NO_TEXT.
  constants C_PARID_RWGMI type /VCXI/VKS_PARID value 'ZVCXI_FF_RWGMI' ##NO_TEXT.
  constants C_PARID_RWGTA type /VCXI/VKS_PARID value 'ZVCXI_FF_RWGTA' ##NO_TEXT.
  constants C_PARID_RWSID type /VCXI/VKS_PARID value 'ZVCXI_FF_RWSID' ##NO_TEXT.

  methods GET_EYEMP
    exporting
      !EF_EYEMP type ZVCXI_FFS_EYEMP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PERMA
    exporting
      !ES_PERMA type ZVCXI_FFS_S_PERMA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PERMI
    exporting
      !ES_PERMI type ZVCXI_FFS_S_PERMI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_CORE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_CORE) type ref to ZCL_VCXI_FFSS_PR_MS_CORE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_WIDIM
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_WIDIM) type ref to ZIF_VCXI_FFSS_WIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMA
    exporting
      !ES_RDIMA type ZVCXI_FFS_S_RDIMA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMI
    exporting
      !ES_RDIMI type ZVCXI_FFS_S_RDIMI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RDMMM type ZVCXI_FFS_RDMMM
      !ES_RDIMI type ZVCXI_FFS_S_RDIMI
      !ES_RDIMA type ZVCXI_FFS_S_RDIMA
      !ES_RLEMI type ZVCXI_FFS_S_RLEMI
      !ES_RLEMA type ZVCXI_FFS_S_RLEMA
      !ES_RWGMI type ZVCXI_FFS_S_RWGMI
      !ES_RWGMA type ZVCXI_FFS_S_RWGMA
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_RDIMMM) type ZVCXI_FFS_S_RDIMMM
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMTA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_RDITA type ZVCXI_FFS_S_RDITA
      !ES_RLETA type ZVCXI_FFS_S_RLETA
      !ES_RWGTA type ZVCXI_FFS_S_RWGTA
      !EF_RLEOF type ZVCXI_FFS_RLEOF
      !EF_RDMTA type ZVCXI_FFS_RDMTA
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_RDIMTA) type ZVCXI_FFS_S_RDIMTA
    raising
      /VCXI/CX_CKX .
  methods GET_RDITA
    exporting
      !ES_RDITA type ZVCXI_FFS_S_RDITA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RHSRC
    returning
      value(RS_RHSRC) type ZVCXI_PXS_S_RHSRC
    raising
      /VCXI/CX_CKX .
  methods GET_RLEMA
    exporting
      !ES_RLEMA type ZVCXI_FFS_S_RLEMA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RLEMI
    exporting
      !ES_RLEMI type ZVCXI_FFS_S_RLEMI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RLEOF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_RLEOF) type ZVCXI_FFS_RLEOF
    raising
      /VCXI/CX_CKX .
  methods GET_RLEOP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ACTIVE type FLAG
    returning
      value(RS_RLEOP) type ZVCXI_FFS_S_RLEOP
    raising
      /VCXI/CX_CKX .
  methods GET_RLETA
    exporting
      !ES_RLETA type ZVCXI_FFS_S_RLETA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWDIR
    exporting
      !EF_RWDIR type ZVCXI_FFS_RWDIR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWGMA
    exporting
      !ES_RWGMA type ZVCXI_FFS_S_RWGMA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWGMI
    exporting
      !ES_RWGMI type ZVCXI_FFS_S_RWGMI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWGTA
    exporting
      !ES_RWGTA type ZVCXI_FFS_S_RWGTA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWSID
    exporting
      !EF_RWSID type ZVCXI_FFS_RWSID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_WISWG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WISWG) type ZVCXI_FFS_S_WISWG
    raising
      /VCXI/CX_CKX .
  methods GET_WITHI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WITHI) type ZVCXI_FFS_S_WITHI
    raising
      /VCXI/CX_CKX .
  methods GET_WIWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WIWID) type ZVCXI_FFS_S_WIWID
    raising
      /VCXI/CX_CKX .
  methods SET_EYEMP
    importing
      !IF_EYEMP type ZVCXI_FFS_EYEMP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PERMA
    importing
      !IS_PERMA type ZVCXI_FFS_S_PERMA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PERMI
    importing
      !IS_PERMI type ZVCXI_FFS_S_PERMI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMA
    importing
      !IS_RDIMA type ZVCXI_FFS_S_RDIMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMI
    importing
      !IS_RDIMI type ZVCXI_FFS_S_RDIMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMMM
    importing
      !IF_RDMMM type ZVCXI_FFS_RDMMM optional
      !IS_RDIMMM type ZVCXI_FFS_S_RDIMMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMTA
    importing
      !IF_RDMTA type ZVCXI_FFS_RDMTA optional
      !IS_RDIMTA type ZVCXI_FFS_S_RDIMTA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDITA
    importing
      !IS_RDITA type ZVCXI_FFS_S_RDITA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEMA
    importing
      !IS_RLEMA type ZVCXI_FFS_S_RLEMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEMI
    importing
      !IS_RLEMI type ZVCXI_FFS_S_RLEMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEOF
    importing
      !IF_RLEOF type ZVCXI_FFS_RLEOF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEOP
    importing
      !IS_RLEOP type ZVCXI_FFS_S_RLEOP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLETA
    importing
      !IS_RLETA type ZVCXI_FFS_S_RLETA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWDIR
    importing
      !IF_RWDIR type ZVCXI_FFS_RWDIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGMA
    importing
      !IS_RWGMA type ZVCXI_FFS_S_RWGMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGMI
    importing
      !IS_RWGMI type ZVCXI_FFS_S_RWGMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGTA
    importing
      !IS_RWGTA type ZVCXI_FFS_S_RWGTA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWSID
    importing
      !IF_RWSID type ZVCXI_FFS_RWSID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_RDITA type /VCXI/VKSC_IEVNT value 'INIT_RDITA' ##NO_TEXT.
  constants C_IEVNT_I_INIT_WIDIM type /VCXI/VKSC_IEVNT value 'INIT_WIDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PERMA type /VCXI/VKSC_IEVNT value 'RECALC_PERMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PERMI type /VCXI/VKSC_IEVNT value 'RECALC_PERMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDIMA type /VCXI/VKSC_IEVNT value 'RECALC_RDIMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDIMI type /VCXI/VKSC_IEVNT value 'RECALC_RDIMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDITA type /VCXI/VKSC_IEVNT value 'RECALC_RDITA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEMA type /VCXI/VKSC_IEVNT value 'RECALC_RLEMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEMI type /VCXI/VKSC_IEVNT value 'RECALC_RLEMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEOF type /VCXI/VKSC_IEVNT value 'RECALC_RLEOF' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLETA type /VCXI/VKSC_IEVNT value 'RECALC_RLETA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGMA type /VCXI/VKSC_IEVNT value 'RECALC_RWGMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGMI type /VCXI/VKSC_IEVNT value 'RECALC_RWGMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGTA type /VCXI/VKSC_IEVNT value 'RECALC_RWGTA' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_WISWG_CHANGED type /VCXI/VKSC_IEVNT value 'WISWG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WITHI_CHANGED type /VCXI/VKSC_IEVNT value 'WITHI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIWID_CHANGED type /VCXI/VKSC_IEVNT value 'WIWID_CHANGED' ##NO_TEXT.
  constants C_PARID_WISWG type /VCXI/VKS_PARID value 'ZVCXI_FF_WISWG' ##NO_TEXT.
  constants C_PARID_WITHI type /VCXI/VKS_PARID value 'ZVCXI_FF_WITHI' ##NO_TEXT.
  constants C_PARID_WIWID type /VCXI/VKS_PARID value 'ZVCXI_FF_WIWID' ##NO_TEXT.

  methods CHECK_RDITA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_RLETA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_RWGTA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_RWSID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_RDITA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_WIDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PERMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PERMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDIMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDIMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDITA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLEMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLEMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLETA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLEOF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGTA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_WISWG
    importing
      !IS_WISWG type ZVCXI_PXS_S_WISWG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WITHI
    importing
      !IS_WITHI type ZVCXI_PXS_S_WITHI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIWID
    importing
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_RHNDL definition
class ZCL_VCXI_FFSS_PR_RHNDL implementation.
  method CHECK_RDITA.
*** 0 - Roll Diameter Target is maintained and valid.
*** 1 - Roll Diameter Length is not maintained.
*** 2 - Roll Diameter Length is out of intervall minimum-maxium

    data:  LS_RDITA   type ZVCXI_FFS_S_RDITA.
    data:  LS_RDIMI   type ZVCXI_FFS_S_RDIMI.
    data:  LS_RDIMA   type ZVCXI_FFS_S_RDIMA.

*** Get Roll Diameter Target
    ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).

*** Get Roll Diameter Minimum
    ME->GET_RDIMI( importing ES_RDIMI = LS_RDIMI ).

*** Get Roll Diameter Maximum
    ME->GET_RDIMA( importing ES_RDIMA = LS_RDIMA ).

    if LS_RDITA-RDITA le 0.
      move 1 to RF_RETURN .
    elseif LS_RDITA-RDITA lt LS_RDIMI-RDIMI or
           ( LS_RDIMA-RDIMA ne 0 and LS_RDITA-RDITA gt LS_RDIMA-RDIMA ).
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_RLETA.
*** 0 - Roll Length Target is maintained and valid.
*** 1 - Roll Length Target is not maintained.
*** 2 - Roll Length Target is out of intervall minimum-maxium

    data:  LS_RLETA   type ZVCXI_FFS_S_RLETA.
    data:  LS_RLEMI   type ZVCXI_FFS_S_RLEMI.
    data:  LS_RLEMA   type ZVCXI_FFS_S_RLEMA.

*** Get Roll Length Target
    ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).

*** Get Roll Length Minimum
    ME->GET_RLEMI( importing ES_RLEMI = LS_RLEMI ).

*** Get Roll Length Maximum
    ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).

    if LS_RLETA-RLETA le 0.
      move 1 to RF_RETURN .
    elseif LS_RLETA-RLETA lt LS_RLEMI-RLEMI or
           ( LS_RLEMA-RLEMA ne 0 and LS_RLETA-RLETA gt LS_RLEMA-RLEMA ).
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_RWGTA.
*** 0 - Roll Weight Target is maintained and valid.
*** 1 - Roll Weight Length is not maintained.
*** 2 - Roll Weight Length is out of intervall minimum-maxium

    data:  LS_RWGTA   type ZVCXI_FFS_S_RWGTA.
    data:  LS_RWGMI   type ZVCXI_FFS_S_RWGMI.
    data:  LS_RWGMA   type ZVCXI_FFS_S_RWGMA.

*** Get Roll Weight Target
    ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).

*** Get Roll Weight Minimum
    ME->GET_RWGMI( importing ES_RWGMI = LS_RWGMI ).

*** Get Roll Weight Maximum
    ME->GET_RWGMA( importing ES_RWGMA = LS_RWGMA ).

    if LS_RWGTA-RWGTA le 0.
      move 1 to RF_RETURN .
    elseif LS_RWGTA-RWGTA lt LS_RWGMI-RWGMI or
           ( LS_RWGMA-RWGMA ne 0 and LS_RWGTA-RWGTA gt LS_RWGMA-RWGMA ).
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_RWSID.
*** 0 - Roll Winding Side is maintained and valid.
*** 1 - Roll Winding Side is not maintained or invalid.

    data:  LF_RWSID   type ZVCXI_FFS_RWSID.

    ME->GET_RWSID( importing EF_RWSID = LF_RWSID ).
    if LF_RWSID is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method GET_EYEMP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).
    move LS_PARAM-ATWRT to EF_EYEMP.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PERMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMA ).
    move LS_PARAM-ATFLV to ES_PERMA-PERMA.
    move LS_PARAM-UNIT  to ES_PERMA-PERMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PERMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMI ).
    move LS_PARAM-ATFLV to ES_PERMI-PERMI.
    move LS_PARAM-UNIT  to ES_PERMI-PERMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_MS_CORE.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MS_CORE.

*** Get MS Core Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_PR_MS_CORE.
    endtry.

  endmethod.
  method GET_PRVDR_WIDIM.

    clear: ER_GATE,
           RR_WIDIM.

*** Get Provider
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_FFSS_WIDIM=>C_IPRVT_FF_WIDIM
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_WIDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_WIDIM.
    endtry.

  endmethod.
  method GET_RDIMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMA ).
    move LS_PARAM-ATFLV to ES_RDIMA-RDIMA.
    move LS_PARAM-UNIT  to ES_RDIMA-RDIMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RDIMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMI ).
    move LS_PARAM-ATFLV to ES_RDIMI-RDIMI.
    move LS_PARAM-UNIT  to ES_RDIMI-RDIMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RDIMMM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMMM ).
    EF_RDMMM = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** Fallback
    if EF_RDMMM is initial.
      EF_RDMMM = 'D'.
    endif.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter Minimum
    if RS_RDIMMM is requested or
       ES_RDIMI  is requested or
       EF_FOVRR  is requested.
      ME->GET_RDIMI( importing ES_RDIMI = ES_RDIMI
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Diameter Maximum
    if RS_RDIMMM is requested or
       ES_RDIMA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RDIMA( importing ES_RDIMA = ES_RDIMA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Minimum
    if RS_RDIMMM is requested or
       ES_RLEMI  is requested or
       EF_FOVRR  is requested.
      ME->GET_RLEMI( importing ES_RLEMI = ES_RLEMI
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Maximum
    if RS_RDIMMM is requested or
       ES_RLEMA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RLEMA( importing ES_RLEMA = ES_RLEMA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Minimum
    if RS_RDIMMM is requested or
       ES_RWGMI  is requested or
       EF_FOVRR  is requested.
      ME->GET_RWGMI( importing ES_RWGMI = ES_RWGMI
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Maximum
    if RS_RDIMMM is requested or
       ES_RWGMA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RWGMA( importing ES_RWGMA = ES_RWGMA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.


    if RS_RDIMMM is requested.
      RS_RDIMMM-RDMMM = EF_RDMMM.

***   Pick Dimension Value
      case RS_RDIMMM-RDMMM.
        when 'D'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RDIMI-RDIMI
                                       RDVMI_UOM = ES_RDIMI-RDIMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RDIMA-RDIMA
                                       RDVMA_UOM = ES_RDIMA-RDIMA_UOM ).
        when 'L'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RLEMI-RLEMI
                                       RDVMI_UOM = ES_RLEMI-RLEMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RLEMA-RLEMA
                                       RDVMA_UOM = ES_RLEMA-RLEMA_UOM ).
        when 'W'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RWGMI-RWGMI
                                       RDVMI_UOM = ES_RWGMI-RWGMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RWGMA-RWGMA
                                       RDVMA_UOM = ES_RWGMA-RWGMA_UOM ).
      endcase.
    endif.

  endmethod.
  method GET_RDIMTA.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMTA ).
    EF_RDMTA = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** Fallback
    if EF_RDMTA is initial.
      EF_RDMTA = 'D'.
    endif.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter Target
    if RS_RDIMTA is requested or
       ES_RDITA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RDITA( importing ES_RDITA = ES_RDITA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Target
    if RS_RDIMTA is requested or
       ES_RLETA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RLETA( importing ES_RLETA = ES_RLETA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Target
    if RS_RDIMTA is requested or
       ES_RWGTA  is requested or
       EF_FOVRR  is requested.
      ME->GET_RWGTA( importing ES_RWGTA = ES_RWGTA
                               EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Optimization Factor
    if RS_RDIMTA is requested or
       EF_RLEOF  is requested or
       EF_FOVRR  is requested.
      EF_RLEOF = ME->GET_RLEOF( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

    if RS_RDIMTA is requested.
      RS_RDIMTA-RDMTA = EF_RDMTA.

***   Pick Dimension Value
      case RS_RDIMTA-RDMTA.
        when 'D'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RDITA-RDITA
                                       RDVTA_UOM = ES_RDITA-RDITA_UOM ).
        when 'L'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RLETA-RLETA
                                       RDVTA_UOM = ES_RLETA-RLETA_UOM ).
        when 'W'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RWGTA-RWGTA
                                       RDVTA_UOM = ES_RWGTA-RWGTA_UOM ).
        when 'O'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = EF_RLEOF ).
      endcase.
    endif.

  endmethod.
  method GET_RDITA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).
    move LS_PARAM-ATFLV to ES_RDITA-RDITA.
    move LS_PARAM-UNIT  to ES_RDITA-RDITA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RHSRC.

    RS_RHSRC = value #( RHSWI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC
                        RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC
                        RHSCO = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC ).

  endmethod.
  method GET_RLEMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMA ).
    move LS_PARAM-ATFLV to ES_RLEMA-RLEMA.
    move LS_PARAM-UNIT  to ES_RLEMA-RLEMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RLEMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMI ).
    move LS_PARAM-ATFLV to ES_RLEMI-RLEMI.
    move LS_PARAM-UNIT  to ES_RLEMI-RLEMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RLEOF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEOF ).
    move LS_PARAM-ATFLV to RF_RLEOF.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RLEOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEOP ).
    move LS_PARAM-ATFLV to RS_RLEOP-RLEOP.
    move LS_PARAM-UNIT  to RS_RLEOP-RLEOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    EF_ACTIVE = cond #( when EF_SETBY is not initial then ABAP_TRUE
                                                     else ABAP_FALSE ).

  endmethod.
  method GET_RLETA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLETA ).
    move LS_PARAM-ATFLV to ES_RLETA-RLETA.
    move LS_PARAM-UNIT  to ES_RLETA-RLETA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWDIR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWDIR ).
    move LS_PARAM-ATWRT to EF_RWDIR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMA ).
    move LS_PARAM-ATFLV to ES_RWGMA-RWGMA.
    move LS_PARAM-UNIT  to ES_RWGMA-RWGMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMI ).
    move LS_PARAM-ATFLV to ES_RWGMI-RWGMI.
    move LS_PARAM-UNIT  to ES_RWGMI-RWGMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGTA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGTA ).
    move LS_PARAM-ATFLV to ES_RWGTA-RWGTA.
    move LS_PARAM-UNIT  to ES_RWGTA-RWGTA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWSID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWSID ).
    move LS_PARAM-ATWRT to EF_RWSID.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Target Roll Diameter
    case ME->CHECK_RDITA( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1 or 2.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Target Roll Length
    case ME->CHECK_RLETA( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1 or 2.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Target Roll Weight
    case ME->CHECK_RWGTA( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1 or 2.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Roll Winding Side
    case ME->CHECK_RWSID( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Roll Diameter Target
    case ME->CHECK_RDITA( ).
      when 0.
***     Roll Diameter Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      when 1.
***     Roll Diameter Target is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      when 2.
***     Roll Diameter Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '153' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Roll Length Target
    case ME->CHECK_RLETA( ).
      when 0.
***     Roll Length Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '154' ).
      when 1.
***     Roll Length Target is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '155' ).
      when 2.
***     Roll Length Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '156' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Roll Weight Target
    case ME->CHECK_RWGTA( ).
      when 0.
***     Roll Weight Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '157' ).
      when 1.
***     Roll Weight Target is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '158' ).
      when 2.
***     Roll Weight Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '159' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Roll Winding Side
    case ME->CHECK_RWSID( ).
      when 0.
***     Roll Winding Side is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '160' ).
      when 1.
***     Roll Winding Side is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '161' ).
    endcase.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).
    else.
      LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
      RF_WERKS =  LR_APPDATA->F_WERKS.
    endif.

  endmethod.
  method GET_WISWG.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISWG ).
    RS_WISWG = value #( WISWG     = LS_PARAM-ATFLV
                        WISWG_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WITHI.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WITHI ).
    RS_WITHI = value #( WITHI     = LS_PARAM-ATFLV
                        WITHI_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WIWID.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWID ).
    RS_WIWID = value #( WIWID     = LS_PARAM-ATFLV
                        WIWID_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).
    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Initialize Winding DimensionsInitial Winding Dimentions
      when C_IEVNT_I_INIT_WIDIM.
        ME->HANDLE_INIT_WIDIM( ).

***   Set Initial Roll Diameter Target
      when C_IEVNT_I_INIT_RDITA.
        ME->HANDLE_INIT_RDITA( ).

***   Recalculate Roll Diameter Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RDITA.
        ME->HANDLE_RECALC_RDITA( ).
      when C_IEVNT_I_RECALC_RDIMI.
        ME->HANDLE_RECALC_RDIMI( ).
      when C_IEVNT_I_RECALC_RDIMA.
        ME->HANDLE_RECALC_RDIMA( ).

***   Recalculate Roll Length Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RLETA.
        ME->HANDLE_RECALC_RLETA( ).
      when C_IEVNT_I_RECALC_RLEMI.
        ME->HANDLE_RECALC_RLEMI( ).
      when C_IEVNT_I_RECALC_RLEMA.
        ME->HANDLE_RECALC_RLEMA( ).

***   Recalculate Roll Weight Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RWGTA.
        ME->HANDLE_RECALC_RWGTA( ).
      when C_IEVNT_I_RECALC_RWGMI.
        ME->HANDLE_RECALC_RWGMI( ).
      when C_IEVNT_I_RECALC_RWGMA.
        ME->HANDLE_RECALC_RWGMA( ).

***   Recalculate Roll Length Optimization Factor
      when C_IEVNT_I_RECALC_RLEOF.
        ME->HANDLE_RECALC_RLEOF( ).

***   Recalculate Percentage Minimum/Maximum
      when C_IEVNT_I_RECALC_PERMI.
        ME->HANDLE_RECALC_PERMI( ).
      when C_IEVNT_I_RECALC_PERMA.
        ME->HANDLE_RECALC_PERMA( ).

    endcase.

  endmethod.
  method HANDLE_INIT_RDITA.
*
*    data: LF_SETBY    type        /VCXI/VKSR_SETBY.
*    data: LS_RDITA    type        ZVCXI_FFS_S_RDITA.
*
****--------------------------------------------------------------------------------------
**** Load Default only if no value has be set before
**** and RLETA/RWGTA are not set by user
*    clear LF_SETBY.
*    ME->GET_RDITA( importing ES_RDITA = LS_RDITA
*                             EF_SETBY = LF_SETBY ).
*    check LF_SETBY is initial.
*
*    clear LF_SETBY.
*    ME->GET_RLETA( importing EF_SETBY = LF_SETBY ).
*    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*
*    clear LF_SETBY.
*    ME->GET_RWGTA( importing EF_SETBY = LF_SETBY ).
*    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*
**** Get Default Target Roll Diameter for Finished Goods
*    LS_RDITA = ME->GET_DEFAULT_RDITA( ).
*
****--------------------------------------------------------------------------------------
**** Set Roll Target Diameter
*    ME->SET_RDITA( exporting IS_RDITA = LS_RDITA
*                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
break tbd.
  endmethod.
  method HANDLE_INIT_WIDIM.

    data(LR_WIDIM) = ME->GET_PRVDR_WIDIM( ).
    check LR_WIDIM is bound.

*** Set Winding Width, Winding Thickness and Surface Weight
    ME->SET_WIWID( IS_WIWID = LR_WIDIM->GET_WIWID( ) ).
    ME->SET_WITHI( IS_WITHI = LR_WIDIM->GET_WITHI( ) ).
    ME->SET_WISWG( IS_WISWG = LR_WIDIM->GET_WISWG( ) ).

  endmethod.
  method HANDLE_RECALC_PERMA.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_RDMMM type ZVCXI_FFS_RDMMM.
    data: LS_PERMA type ZVCXI_FFS_S_PERMA,
          LS_RDIMA type ZVCXI_FFS_S_RDIMA,
          LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_RLEMA type ZVCXI_FFS_S_RLEMA,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_RWGMA type ZVCXI_FFS_S_RWGMA,
          LS_RWGTA type ZVCXI_FFS_S_RWGTA.

***--------------------------------------------------------------------------------------
*** Get current Value and check it's not set by User
    ME->GET_PERMA( importing ES_PERMA = LS_PERMA
                             EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    clear LS_PERMA-PERMA.

***--------------------------------------------------------------------------------------
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).
    case LF_RDMMM.
***   Calculate Percentage by Diameter
      when 'D'.
        ME->GET_RDIMA( importing ES_RDIMA = LS_RDIMA ).
        ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RDIMA-RDIMA
                                                                IF_DIMEN_UOM = LS_RDIMA-RDIMA_UOM
                                                                IF_DIMTA     = LS_RDITA-RDITA
                                                                IF_DIMTA_UOM = LS_RDITA-RDITA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                      importing EF_PERC      = LS_PERMA-PERMA ).

***   Calculate Percentage by Length
      when 'L'.
        ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).
        ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RLEMA-RLEMA
                                                                IF_DIMEN_UOM = LS_RLEMA-RLEMA_UOM
                                                                IF_DIMTA     = LS_RLETA-RLETA
                                                                IF_DIMTA_UOM = LS_RLETA-RLETA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                      importing EF_PERC      = LS_PERMA-PERMA ).

***   Calculate Percentage by Weight
      when 'W'.
        ME->GET_RWGMA( importing ES_RWGMA = LS_RWGMA ).
        ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RWGMA-RWGMA
                                                                IF_DIMEN_UOM = LS_RWGMA-RWGMA_UOM
                                                                IF_DIMTA     = LS_RWGTA-RWGTA
                                                                IF_DIMTA_UOM = LS_RWGTA-RWGTA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                      importing EF_PERC      = LS_PERMA-PERMA ).
    endcase.

***--------------------------------------------------------------------------------------
*** Set Percentage Maximum
    ME->SET_PERMA( IS_PERMA = LS_PERMA ).

  endmethod.
  method HANDLE_RECALC_PERMI.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_RDMMM type ZVCXI_FFS_RDMMM.
    data: LS_PERMI type ZVCXI_FFS_S_PERMI,
          LS_RDIMI type ZVCXI_FFS_S_RDIMI,
          LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_RLEMI type ZVCXI_FFS_S_RLEMI,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_RWGMI type ZVCXI_FFS_S_RWGMI,
          LS_RWGTA type ZVCXI_FFS_S_RWGTA.

***--------------------------------------------------------------------------------------
*** Get current Value and check it's not set by User
    ME->GET_PERMI( importing ES_PERMI = LS_PERMI
                             EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    clear LS_PERMI-PERMI.

***--------------------------------------------------------------------------------------
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).
    case LF_RDMMM.
***   Calculate Percentage by Diameter
      when 'D'.
        ME->GET_RDIMI( importing ES_RDIMI = LS_RDIMI ).
        ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RDIMI-RDIMI
                                                                IF_DIMEN_UOM = LS_RDIMI-RDIMI_UOM
                                                                IF_DIMTA     = LS_RDITA-RDITA
                                                                IF_DIMTA_UOM = LS_RDITA-RDITA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                      importing EF_PERC      = LS_PERMI-PERMI ).
***   Calculate Percentage by Length
      when 'L'.
        ME->GET_RLEMI( importing ES_RLEMI = LS_RLEMI ).
        ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RLEMI-RLEMI
                                                                IF_DIMEN_UOM = LS_RLEMI-RLEMI_UOM
                                                                IF_DIMTA     = LS_RLETA-RLETA
                                                                IF_DIMTA_UOM = LS_RLETA-RLETA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                      importing EF_PERC      = LS_PERMI-PERMI ).

***   Calculate Percentage by Weight
      when 'W'.
        ME->GET_RWGMI( importing ES_RWGMI = LS_RWGMI ).
        ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_PERC_BY_DIMEN( exporting IF_DIMEN     = LS_RWGMI-RWGMI
                                                                IF_DIMEN_UOM = LS_RWGMI-RWGMI_UOM
                                                                IF_DIMTA     = LS_RWGTA-RWGTA
                                                                IF_DIMTA_UOM = LS_RWGTA-RWGTA_UOM
                                                                IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                      importing EF_PERC      = LS_PERMI-PERMI ).
    endcase.

***--------------------------------------------------------------------------------------
*** Set Percentage Minimum
    ME->SET_PERMI( IS_PERMI = LS_PERMI ).

  endmethod.
  method HANDLE_RECALC_RDIMA.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RDIMA type ZVCXI_FFS_S_RDIMA,
          LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_PERMA type ZVCXI_FFS_S_PERMA,
          LS_RLEMA type ZVCXI_FFS_S_RLEMA.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RDIMA( importing ES_RDIMA = LS_RDIMA ).
    clear LS_RDIMA-RDIMA.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'D'.
***     Get Percentage and check it's set by User
        ME->GET_PERMA( importing ES_PERMA = LS_PERMA
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
***       Calculate Roll Diameter by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMA-PERMA
                                                                  IF_PERC_UOM  = LS_PERMA-PERMA_UOM
                                                                  IF_DIMTA     = LS_RDITA-RDITA
                                                                  IF_DIMTA_UOM = LS_RDITA-RDITA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                        importing EF_DIMEN     = LS_RDIMA-RDIMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
      when others.
***     Get Roll Diameter by Length
        ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Diameter
        if LS_RLEMA-RLEMA is not initial and
           LR_PR_MS_CORE  is bound.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_RODIA_BY_ROLEN( exporting IF_ROLEN     = LS_RLEMA-RLEMA
                                                                   IF_ROLEN_UOM = LS_RLEMA-RLEMA_UOM
                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                   IF_RODIA_UOM = LS_RDIMA-RDIMA_UOM
                                                         importing EF_RODIA     = LS_RDIMA-RDIMA ).
        else.
          clear LS_RDIMA-RDIMA.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Maximum
    ME->SET_RDIMA( IS_RDIMA = LS_RDIMA ).

  endmethod.
  method HANDLE_RECALC_RDIMI.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RDIMI type ZVCXI_FFS_S_RDIMI,
          LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_PERMI type ZVCXI_FFS_S_PERMI,
          LS_RLEMI type ZVCXI_FFS_S_RLEMI.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RDIMI( importing ES_RDIMI = LS_RDIMI ).
    clear LS_RDIMI-RDIMI.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'D'.
***     Get Percentage and check it's set by User
        ME->GET_PERMI( importing ES_PERMI = LS_PERMI
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
***       Calculate Roll Diameter by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMI-PERMI
                                                                  IF_PERC_UOM  = LS_PERMI-PERMI_UOM
                                                                  IF_DIMTA     = LS_RDITA-RDITA
                                                                  IF_DIMTA_UOM = LS_RDITA-RDITA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                        importing EF_DIMEN     = LS_RDIMI-RDIMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
      when others.
***     Get Roll Diameter by Length
        ME->GET_RLEMI( importing ES_RLEMI = LS_RLEMI ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Diameter
        if LS_RLEMI-RLEMI is not initial and
           LR_PR_MS_CORE  is bound.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_RODIA_BY_ROLEN( exporting IF_ROLEN     = LS_RLEMI-RLEMI
                                                                   IF_ROLEN_UOM = LS_RLEMI-RLEMI_UOM
                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                   IF_RODIA_UOM = LS_RDIMI-RDIMI_UOM
                                                         importing EF_RODIA     = LS_RDIMI-RDIMI ).
        else.
          clear LS_RDIMI-RDIMI.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Minimum
    ME->SET_RDIMI( IS_RDIMI = LS_RDIMI ).

  endmethod.
  method HANDLE_RECALC_RDITA.

    data: LF_RDMTA type ZVCXI_FFS_RDMTA.
    data: LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_RLETA type ZVCXI_FFS_S_RLETA.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Diameter is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'D'.

    ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
    clear LS_RDITA-RDITA.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter by Length
    ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).

*** Get Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

*** Calculate Roll Diameter
    if LS_RLETA-RLETA is not initial and
       LR_PR_MS_CORE  is bound.
      ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_RODIA_BY_ROLEN( exporting IF_ROLEN     = LS_RLETA-RLETA
                                                               IF_ROLEN_UOM = LS_RLETA-RLETA_UOM
                                                               IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                               IS_WITHI     = ME->GET_WITHI( )
                                                               IF_RODIA_UOM = LS_RDITA-RDITA_UOM
                                                     importing EF_RODIA     = LS_RDITA-RDITA ).
    else.
      clear LS_RDITA-RDITA.
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Target
    ME->SET_RDITA( IS_RDITA = LS_RDITA ).

  endmethod.
  method HANDLE_RECALC_RLEMA.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RLEMA type ZVCXI_FFS_S_RLEMA,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_PERMA type ZVCXI_FFS_S_PERMA,
          LS_RDIMA type ZVCXI_FFS_S_RDIMA,
          LS_RWGMA type ZVCXI_FFS_S_RWGMA,
          LS_CRDIO type ZVCXI_FFS_S_CRDIO,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).
    clear LS_RLEMA-RLEMA.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Percentage
      when 'L'.
***     Get Percentage and check it's set by User
        ME->GET_PERMA( importing ES_PERMA = LS_PERMA
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).
***       Calculate Roll Length by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMA-PERMA
                                                                  IF_PERC_UOM  = LS_PERMA-PERMA_UOM
                                                                  IF_DIMTA     = LS_RLETA-RLETA
                                                                  IF_DIMTA_UOM = LS_RLETA-RLETA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                        importing EF_DIMEN     = LS_RLEMA-RLEMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Diameter
      when 'D'.
***     Roll Diameter
        ME->GET_RDIMA( importing ES_RDIMA = LS_RDIMA ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Length
        if LS_RDIMA-RDIMA is not initial and
           LR_PR_MS_CORE  is bound.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_RODIA( exporting IF_RODIA     = LS_RDIMA-RDIMA
                                                                   IF_RODIA_UOM = LS_RDIMA-RDIMA_UOM
                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                   IF_ROLEN_UOM = LS_RLEMA-RLEMA_UOM
                                                         importing EF_ROLEN     = LS_RLEMA-RLEMA ).
        else.
          clear LS_RLEMA-RLEMA.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Weight
      when 'W'.
***     Roll Weigth
        ME->GET_RWGMA( importing ES_RWGMA = LS_RWGMA ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Length
        if LS_RWGMA-RWGMA is not initial.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_ROWGT( exporting IF_ROWGT     = LS_RWGMA-RWGMA
                                                                   IF_ROWGT_UOM = LS_RWGMA-RWGMA_UOM
                                                                   IS_CRWGT     = LS_CRWGT
                                                                   IS_WIWID     = ME->GET_WIWID( )
                                                                   IS_WISWG     = ME->GET_WISWG( )
                                                         importing EF_ROLEN     = LS_RLEMA-RLEMA
                                                                   EF_ROLEN_UOM = LS_RLEMA-RLEMA_UOM ).
        else.
          clear LS_RLEMA-RLEMA.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Length Maximum
    ME->SET_RLEMA( IS_RLEMA = LS_RLEMA ).

  endmethod.
  method HANDLE_RECALC_RLEMI.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RLEMI type ZVCXI_FFS_S_RLEMI,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_PERMI type ZVCXI_FFS_S_PERMI,
          LS_RDIMI type ZVCXI_FFS_S_RDIMI,
          LS_RWGMI type ZVCXI_FFS_S_RWGMI,
          LS_CRDIO type ZVCXI_FFS_S_CRDIO,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RLEMI( importing ES_RLEMI = LS_RLEMI ).
    clear LS_RLEMI-RLEMI.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Percentage
      when 'L'.
***     Get Percentage and check it's set by User
        ME->GET_PERMI( importing ES_PERMI = LS_PERMI
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).
***       Calculate Roll Length by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMI-PERMI
                                                                  IF_PERC_UOM  = LS_PERMI-PERMI_UOM
                                                                  IF_DIMTA     = LS_RLETA-RLETA
                                                                  IF_DIMTA_UOM = LS_RLETA-RLETA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                        importing EF_DIMEN     = LS_RLEMI-RLEMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Diameter
      when 'D'.
***     Roll Diameter
        ME->GET_RDIMI( importing ES_RDIMI = LS_RDIMI ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Length
        if LS_RDIMI-RDIMI is not initial and
           LR_PR_MS_CORE  is bound.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_RODIA( exporting IF_RODIA     = LS_RDIMI-RDIMI
                                                                   IF_RODIA_UOM = LS_RDIMI-RDIMI_UOM
                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                   IF_ROLEN_UOM = LS_RLEMI-RLEMI_UOM
                                                         importing EF_ROLEN     = LS_RLEMI-RLEMI ).
        else.
          clear LS_RLEMI-RLEMI.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Weight
      when 'W'.
***     Roll Weigth
        ME->GET_RWGMI( importing ES_RWGMI = LS_RWGMI ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Length
        if LS_RWGMI-RWGMI is not initial.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_ROWGT( exporting IF_ROWGT     = LS_RWGMI-RWGMI
                                                                   IF_ROWGT_UOM = LS_RWGMI-RWGMI_UOM
                                                                   IS_CRWGT     = LS_CRWGT
                                                                   IS_WIWID     = ME->GET_WIWID( )
                                                                   IS_WISWG     = ME->GET_WISWG( )
                                                         importing EF_ROLEN     = LS_RLEMI-RLEMI
                                                                   EF_ROLEN_UOM = LS_RLEMI-RLEMI_UOM ).
        else.
          clear LS_RLEMI-RLEMI.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Length Minimum
    ME->SET_RLEMI( IS_RLEMI = LS_RLEMI ).

  endmethod.
  method HANDLE_RECALC_RLEOF.

    data: LF_RDMTA type ZVCXI_FFS_RDMTA,
          LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_RLEOF type ZVCXI_FFS_RLEOF.
    data: LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_RLEOP type ZVCXI_FFS_S_RLEOP,
          LS_RLEMA type ZVCXI_FFS_S_RLEMA.


***--------------------------------------------------------------------------------------
*** Check Roll Length Optimization Factor is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA
                              EF_FOVRR = LF_FOVRR ).
    check LF_RDMTA ne 'O' or
          LF_FOVRR ne ABAP_TRUE.

*** Get Roll Length for Optimization
    LS_RLEOP = ME->GET_RLEOP( ).

***--------------------------------------------------------------------------------------
*** Calculate Optimization Factor by Roll Length
    if LF_RDMTA ne 'O'.
      ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).

***   Calculate Roll Length Optimization Factor
      LF_RLEOF = ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_RLEOF_BY_ROLEN( IF_ROLEN     = LS_RLETA-RLETA
                                                                IF_ROLEN_UOM = LS_RLETA-RLETA_UOM
                                                                IS_RLEOP     = LS_RLEOP ).
    else.
***   Calculate optimal Factor based on Maximum Roll Length
      ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).
      LF_RLEOF = ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_RLEOF_BY_ROLEN( IF_ROLEN     = LS_RLEMA-RLEMA
                                                                IF_ROLEN_UOM = LS_RLEMA-RLEMA_UOM
                                                                IS_RLEOP     = LS_RLEOP ).
      LF_RLEOF = FLOOR( LF_RLEOF ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Length Optimization Factor
    ME->SET_RLEOF( IF_RLEOF = LF_RLEOF ).

  endmethod.
  method HANDLE_RECALC_RLETA.

    data: LF_RDMTA  type ZVCXI_FFS_RDMTA,
          LF_RLEOF  type ZVCXI_FFS_RLEOF,
          LF_ACTIVE type FLAG.
    data: LS_RDITA type ZVCXI_FFS_S_RDITA,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_CRDIO type ZVCXI_FFS_S_CRDIO,
          LS_RWGTA type ZVCXI_FFS_S_RWGTA,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT,
          LS_RLEOP type ZVCXI_FFS_S_RLEOP.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Length is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'L'.

    ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).
    clear LS_RLETA-RLETA.

*** Get Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.

      case LF_RDMTA.
***--------------------------------------------------------------------------------------
***     Calculate Roll Length by Diameter
        when 'D'.
          ME->GET_RDITA( importing ES_RDITA = LS_RDITA ).
***       Calculate Roll Length
          if LS_RDITA-RDITA is not initial.
            ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_RODIA( exporting IF_RODIA     = LS_RDITA-RDITA
                                                                     IF_RODIA_UOM = LS_RDITA-RDITA_UOM
                                                                     IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                     IS_WITHI     = ME->GET_WITHI( )
                                                                     IF_ROLEN_UOM = LS_RLETA-RLETA_UOM
                                                           importing EF_ROLEN     = LS_RLETA-RLETA ).
          else.
            clear LS_RLETA-RLETA.
          endif.

***--------------------------------------------------------------------------------------
***     Calculate Roll Length by Weight
        when 'W'.
          ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
***       Calculate Roll Length
          if LS_RWGTA-RWGTA is not initial.
            ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROLEN_BY_ROWGT( exporting IF_ROWGT     = LS_RWGTA-RWGTA
                                                                     IF_ROWGT_UOM = LS_RWGTA-RWGTA_UOM
                                                                     IS_CRWGT     = LS_CRWGT
                                                                     IS_WIWID     = ME->GET_WIWID( )
                                                                     IS_WISWG     = ME->GET_WISWG( )
                                                           importing EF_ROLEN     = LS_RLETA-RLETA
                                                                     EF_ROLEN_UOM = LS_RLETA-RLETA_UOM ).
          else.
            clear LS_RLETA-RLETA.
          endif.

***--------------------------------------------------------------------------------------
***     Calculate Roll Length by Optimization Factor
        when 'O'.
          LS_RLEOP = ME->GET_RLEOP( importing EF_ACTIVE = LF_ACTIVE ).
          if LF_ACTIVE eq ABAP_TRUE.
            LF_RLEOF = ME->GET_RLEOF( ).
            LS_RLETA = value #( RLETA     = LS_RLEOP-RLEOP * LF_RLEOF
                                RLETA_UOM = LS_RLEOP-RLEOP_UOM ).
          else.
            ME->SET_RDIMTA( IF_RDMTA  = 'L'
                            IF_SETBY  = 'USER' ).
            ME->SET_RLEOF( IF_SETBY = SPACE ).
            exit.  "Don't set the Roll Length to keep the original value
          endif.
      endcase.
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Length Target
    ME->SET_RLETA( IS_RLETA = LS_RLETA ).

  endmethod.
  method HANDLE_RECALC_RWGMA.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RWGMA type ZVCXI_FFS_S_RWGMA,
          LS_RWGTA type ZVCXI_FFS_S_RWGTA,
          LS_PERMA type ZVCXI_FFS_S_PERMA,
          LS_RLEMA type ZVCXI_FFS_S_RLEMA,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RWGMA( importing ES_RWGMA = LS_RWGMA ).
    clear LS_RWGMA-RWGMA.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'W'.
***     Get Percentage and check it's set by User
        ME->GET_PERMA( importing ES_PERMA = LS_PERMA
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
***       Calculate Roll Weight by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMA-PERMA
                                                                  IF_PERC_UOM  = LS_PERMA-PERMA_UOM
                                                                  IF_DIMTA     = LS_RWGTA-RWGTA
                                                                  IF_DIMTA_UOM = LS_RWGTA-RWGTA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MAX
                                                        importing EF_DIMEN     = LS_RWGMA-RWGMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Weight by Length
      when others.
***     Get Roll Length
        ME->GET_RLEMA( importing ES_RLEMA = LS_RLEMA ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Weight
        if LS_RLEMA-RLEMA is not initial.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROWGT_BY_ROLEN( exporting IF_ROLEN     = LS_RLEMA-RLEMA
                                                                   IF_ROLEN_UOM = LS_RLEMA-RLEMA_UOM
                                                                   IS_CRWGT     = LS_CRWGT
                                                                   IS_WIWID     = ME->GET_WIWID( )
                                                                   IS_WISWG     = ME->GET_WISWG( )
                                                         importing EF_ROWGT     = LS_RWGMA-RWGMA
                                                                   EF_ROWGT_UOM = LS_RWGMA-RWGMA_UOM ).
        else.
          clear LS_RWGMA-RWGMA.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Weight Maximum
    ME->SET_RWGMA( IS_RWGMA = LS_RWGMA ).

  endmethod.
  method HANDLE_RECALC_RWGMI.

    data: LF_RDMMM type ZVCXI_FFS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RWGMI type ZVCXI_FFS_S_RWGMI,
          LS_RWGTA type ZVCXI_FFS_S_RWGTA,
          LS_PERMI type ZVCXI_FFS_S_PERMI,
          LS_RLEMI type ZVCXI_FFS_S_RLEMI,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    ME->GET_RWGMI( importing ES_RWGMI = LS_RWGMI ).
    clear LS_RWGMI-RWGMI.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'W'.
***     Get Percentage and check it's set by User
        ME->GET_PERMI( importing ES_PERMI = LS_PERMI
                                 EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
***       Calculate Roll Weight by Percentage
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC      = LS_PERMI-PERMI
                                                                  IF_PERC_UOM  = LS_PERMI-PERMI_UOM
                                                                  IF_DIMTA     = LS_RWGTA-RWGTA
                                                                  IF_DIMTA_UOM = LS_RWGTA-RWGTA_UOM
                                                                  IF_MINMAX    = ZCL_VCXI_FFSS_CUST_RHNDL=>C_MIN
                                                        importing EF_DIMEN     = LS_RWGMI-RWGMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Weight by Length
      when others.
***     Get Roll Length
        ME->GET_RLEMI( importing ES_RLEMI = LS_RLEMI ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Weight
        if LS_RLEMI-RLEMI is not initial.
          ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROWGT_BY_ROLEN( exporting IF_ROLEN     = LS_RLEMI-RLEMI
                                                                   IF_ROLEN_UOM = LS_RLEMI-RLEMI_UOM
                                                                   IS_CRWGT     = LS_CRWGT
                                                                   IS_WIWID     = ME->GET_WIWID( )
                                                                   IS_WISWG     = ME->GET_WISWG( )
                                                         importing EF_ROWGT     = LS_RWGMI-RWGMI
                                                                   EF_ROWGT_UOM = LS_RWGMI-RWGMI_UOM ).
        else.
          clear LS_RWGMI-RWGMI.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Weight Minimum
    ME->SET_RWGMI( IS_RWGMI = LS_RWGMI ).

  endmethod.
  method HANDLE_RECALC_RWGTA.

    data: LF_RDMTA type ZVCXI_FFS_RDMTA.
    data: LS_RWGTA type ZVCXI_FFS_S_RWGTA,
          LS_RLETA type ZVCXI_FFS_S_RLETA,
          LS_CRWGT type ZVCXI_FFS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Weight is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'W'.

    ME->GET_RWGTA( importing ES_RWGTA = LS_RWGTA ).
    clear LS_RWGTA-RWGTA.

***--------------------------------------------------------------------------------------
*** Get Target Roll Length
    ME->GET_RLETA( importing ES_RLETA = LS_RLETA ).

*** Core Weight per Roll
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.
      LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
    endif.

*** Calculate Roll Weight
    ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROWGT_BY_ROLEN( exporting IF_ROLEN     = LS_RLETA-RLETA
                                                             IF_ROLEN_UOM = LS_RLETA-RLETA_UOM
                                                             IS_CRWGT     = LS_CRWGT
                                                             IS_WIWID     = ME->GET_WIWID( )
                                                             IS_WISWG     = ME->GET_WISWG( )
                                                   importing EF_ROWGT     = LS_RWGTA-RWGTA
                                                             EF_ROWGT_UOM = LS_RWGTA-RWGTA_UOM ).

***--------------------------------------------------------------------------------------
*** Set Roll Weight Target
    ME->SET_RWGTA( IS_RWGTA = LS_RWGTA ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_EYEMP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).

    move IF_EYEMP to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EYEMP_CHANGED ).
    endif.

  endmethod.
  method SET_PERMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMA ).

    move IS_PERMA-PERMA     to LS_PARAM-ATFLV.
    move IS_PERMA-PERMA_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PERMA_CHANGED ).
    endif.

  endmethod.
  method SET_PERMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMI ).

    move IS_PERMI-PERMI     to LS_PARAM-ATFLV.
    move IS_PERMI-PERMI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PERMI_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMA ).

    if IS_RDIMA is supplied.
      LS_PARAM-ATFLV = IS_RDIMA-RDIMA.
      LS_PARAM-UNIT  = IS_RDIMA-RDIMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDIMA_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMI ).

    if IS_RDIMI is supplied.
      LS_PARAM-ATFLV = IS_RDIMI-RDIMI.
      LS_PARAM-UNIT  = IS_RDIMI-RDIMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDIMI_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMMM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMMM ).

    if IF_RDMMM is supplied.
      LS_PARAM-ATWRT = IF_RDMMM.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if IS_RDIMMM is supplied.
      LS_PARAM-ATWRT = IS_RDIMMM-RDMMM.
      LS_PARAM-SETBY = IF_SETBY.
    endif.

    if IF_SETBY is initial.
      clear: LS_PARAM-ATWRT,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDMMM_CHANGED ).
    endif.

***--------------------------------------------------------------------------------------
    if IS_RDIMMM is supplied.
      case IS_RDIMMM-RDMMM.
***     Roll Diameter Minimum/Maximum
        when 'D'.
          ME->SET_RDIMI( IS_RDIMI = value #( RDIMI     = IS_RDIMMM-RDVMI
                                             RDIMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RDIMA( IS_RDIMA = value #( RDIMA     = IS_RDIMMM-RDVMA
                                             RDIMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Length and Weight
          ME->SET_RLEMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Length Minimum/Maximum
        when 'L'.
          ME->SET_RLEMI( IS_RLEMI = value #( RLEMI     = IS_RDIMMM-RDVMI
                                             RLEMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RLEMA( IS_RLEMA = value #( RLEMA     = IS_RDIMMM-RDVMA
                                             RLEMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Weight
          ME->SET_RDIMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RDIMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Weight Minimum/Maximum
        when 'W'.
          ME->SET_RWGMI( IS_RWGMI = value #( RWGMI     = IS_RDIMMM-RDVMI
                                             RWGMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RWGMA( IS_RWGMA = value #( RWGMA     = IS_RDIMMM-RDVMA
                                             RWGMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Length
          ME->SET_RDIMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RDIMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

      endcase.
    endif.

  endmethod.
  method SET_RDIMTA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMTA ).

    if IF_RDMTA is supplied.
      LS_PARAM-ATWRT = IF_RDMTA.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if IS_RDIMTA is supplied.
      LS_PARAM-ATWRT = IS_RDIMTA-RDMTA.
      LS_PARAM-SETBY = IF_SETBY.
    endif.

    if IF_SETBY is initial.
      clear: LS_PARAM-ATWRT,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDMTA_CHANGED ).
    endif.

***--------------------------------------------------------------------------------------
    if IS_RDIMTA is supplied.
      case IS_RDIMTA-RDMTA.
***     Roll Diameter Target
        when 'D'.
          ME->SET_RDITA( IS_RDITA = value #( RDITA     = IS_RDIMTA-RDVTA
                                             RDITA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Length and Weight
          ME->SET_RLETA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGTA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Length Target
        when 'L'.
          ME->SET_RLETA( IS_RLETA = value #( RLETA     = IS_RDIMTA-RDVTA
                                             RLETA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Weight
          ME->SET_RDITA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGTA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Weight Target
        when 'W'.
          ME->SET_RWGTA( IS_RWGTA = value #( RWGTA     = IS_RDIMTA-RDVTA
                                             RWGTA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Length
          ME->SET_RDITA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLETA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

      endcase.
    endif.

  endmethod.
  method SET_RDITA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).

    if IS_RDITA is supplied.
      LS_PARAM-ATFLV = IS_RDITA-RDITA.
      LS_PARAM-UNIT  = IS_RDITA-RDITA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDITA_CHANGED ).
    endif.

  endmethod.
  method SET_RLEMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMA ).

    if IS_RLEMA is supplied.
      LS_PARAM-ATFLV = IS_RLEMA-RLEMA.
      LS_PARAM-UNIT  = IS_RLEMA-RLEMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEMA_CHANGED ).
    endif.

  endmethod.
  method SET_RLEMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMI ).

    if IS_RLEMI is supplied.
      LS_PARAM-ATFLV = IS_RLEMI-RLEMI.
      LS_PARAM-UNIT  = IS_RLEMI-RLEMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEMI_CHANGED ).
    endif.

  endmethod.
  method SET_RLEOF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEOF ).

    if IF_RLEOF is supplied.
      LS_PARAM-ATFLV = IF_RLEOF.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEOF_CHANGED ).
    endif.

  endmethod.
  method SET_RLEOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEOP ).

    if IS_RLEOP is supplied.
      LS_PARAM-ATFLV = IS_RLEOP-RLEOP.
      LS_PARAM-UNIT  = IS_RLEOP-RLEOP_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEOP_CHANGED ).
    endif.

  endmethod.
  method SET_RLETA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLETA ).

    if IS_RLETA is supplied.
      LS_PARAM-ATFLV = IS_RLETA-RLETA.
      LS_PARAM-UNIT  = IS_RLETA-RLETA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLETA_CHANGED ).
    endif.

  endmethod.
  method SET_RWDIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWDIR ).

    move IF_RWDIR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWDIR_CHANGED ).
    endif.

  endmethod.
  method SET_RWGMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMA ).

    if IS_RWGMA is supplied.
      LS_PARAM-ATFLV = IS_RWGMA-RWGMA.
      LS_PARAM-UNIT  = IS_RWGMA-RWGMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGMA_CHANGED ).
    endif.

  endmethod.
  method SET_RWGMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMI ).

    if IS_RWGMI is supplied.
      LS_PARAM-ATFLV = IS_RWGMI-RWGMI.
      LS_PARAM-UNIT  = IS_RWGMI-RWGMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGMI_CHANGED ).
    endif.

  endmethod.
  method SET_RWGTA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGTA ).

    if IS_RWGTA is supplied.
      LS_PARAM-ATFLV = IS_RWGTA-RWGTA.
      LS_PARAM-UNIT  = IS_RWGTA-RWGTA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGTA_CHANGED ).
    endif.

  endmethod.
  method SET_RWSID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWSID ).

    move IF_RWSID to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWSID_CHANGED ).
    endif.

  endmethod.
  method SET_WISWG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISWG ).

    LS_PARAM-ATFLV = IS_WISWG-WISWG.
    LS_PARAM-UNIT  = IS_WISWG-WISWG_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISWG_CHANGED ).
    endif.

  endmethod.
  method SET_WITHI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WITHI ).

    LS_PARAM-ATFLV = IS_WITHI-WITHI.
    LS_PARAM-UNIT  = IS_WITHI-WITHI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WITHI_CHANGED ).
    endif.

  endmethod.
  method SET_WIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWID ).

    LS_PARAM-ATFLV = IS_WIWID-WIWID.
    LS_PARAM-UNIT  = IS_WIWID-WIWID_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIWID_CHANGED ).
    endif.

  endmethod.
