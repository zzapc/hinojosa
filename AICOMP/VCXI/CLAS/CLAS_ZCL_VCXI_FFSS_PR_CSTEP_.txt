
class ZCL_VCXI_FFSS_PR_CSTEP definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_COMM_PREV .
  interfaces ZIF_VCXI_F0S_LTEXT .

  types:
    YT_TC520 type standard table of ZVCXI_FFS_TC520 with default key .

  constants C_IPRVT_CSTEP type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_CSTEP' ##NO_TEXT.
  class-data T_TC520 type YT_TC520 read-only .

  class-methods CLASS_CONSTRUCTOR .
  methods GET_LTEXT
    exporting
      !EF_LTEXT type ZVCXI_F0S_LTEXT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_LTEXT
    importing
      !IF_LTEXT type ZVCXI_F0S_LTEXT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
protected section.

  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIFPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIFPX' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_LTEXT type /VCXI/VKS_PARID value 'ZVCXI_F0_LTEXT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.

  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FITEX type ZVCXI_FFS_S_FITEX
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FITIN type ZVCXI_FFS_S_FITIN
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FIWID type ZVCXI_F0S_S_FIWID
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_SURWT type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_TREQW type ZVCXI_FFS_S_TREQW
    raising
      /VCXI/CX_CKX .
  methods ADJUST_FIRNG
    changing
      !CT_FIRNG type ZVCXI_FFSS_TT_FIRNG
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_CSTEP definition
class ZCL_VCXI_FFSS_PR_CSTEP implementation.
  method ADJUST_FIRNG.

    data: LF_WERKS      type        WERKS_D,
          LF_MAX_LOTMI  type        ZVCXI_F0S_LOTMI,
          LF_CUST_LOTMI type        ZVCXI_F0S_LOTMI.
    data: LS_TC520      type        ZVCXI_FFS_TC520,
          LS_FIRNG      type        ZVCXI_FFSS_S_FIRNG.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC    type ref to ZCL_VCXI_F0SS_PR_SPEC.
    field-symbols: <S_FIRNG> type ZVCXI_FFSS_S_FIRNG.

*** Get Plant
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if LR_GATE is bound.
      try .
          move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SPEC.
      endtry.

      if LR_PR_SPEC is bound.
        LR_PR_SPEC->GET_WERKS( importing EF_WERKS = LF_WERKS ).
      endif.
    endif.

*** Read Customizing according to Access Sequence
    loop at T_TC520 into LS_TC520 where WERKS eq LF_WERKS.
      check ME->R_GATE->F_ID cs LS_TC520-ISTEP.
      move LS_TC520-LOTMI to LF_CUST_LOTMI.
      exit.
    endloop.

    if LF_CUST_LOTMI is initial.
      loop at T_TC520 into LS_TC520.
        check ME->R_GATE->F_ID cs LS_TC520-ISTEP.
        move LS_TC520-LOTMI to LF_CUST_LOTMI.
        exit.
      endloop.
    endif.

    if LF_CUST_LOTMI is initial.
      return.
    endif.

*** Get Higher Minimum Lot Size
    clear LF_MAX_LOTMI.
    loop at CT_FIRNG into LS_FIRNG.
      if LS_FIRNG-LOTMI gt LF_MAX_LOTMI.
        move LS_FIRNG-LOTMI to LF_MAX_LOTMI.
      endif.
    endloop.

*** Set new Minimum Lot Size if needed
    if LF_MAX_LOTMI lt LF_CUST_LOTMI.
      loop at CT_FIRNG ASSIGNING <S_FIRNG> where LOTMI eq LF_MAX_LOTMI.
        move LF_CUST_LOTMI to <S_FIRNG>-LOTMI.
      endloop.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Load Customizing
    select * from ZVCXI_FFS_TC520
      into table T_TC520.

  endmethod.
  method GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LTEXT ).
    move LS_PARAM-STRNG to EF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
*** Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).

    move IF_FIFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
    endif.

  endmethod.
  method SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID           type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV      type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS           type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV      type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Forward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LF_FISTX            type        ZVCXI_FFS_FISTX.
    data: LS_TREQW            type        ZVCXI_FFS_S_TREQW,
          LS_TREQW_NEXT       type        ZVCXI_FFS_S_TREQW,
          LS_FITIN            type        ZVCXI_FFS_S_FITIN,
          LS_FITIN_NEXT       type        ZVCXI_FFS_S_FITIN,
          LS_FITEX            type        ZVCXI_FFS_S_FITEX,
          LS_FITEX_NEXT       type        ZVCXI_FFS_S_FITEX,
          LS_SURWT            type        ZVCXI_F0S_S_SURWT,
          LS_SURWT_NEXT       type        ZVCXI_F0S_S_SURWT,
          LS_RELEN            type        ZVCXI_FFS_S_RELEN,
          LS_RELEN_NEXT       type        ZVCXI_FFS_S_RELEN.
    data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT        type ref to ZIF_VCXI_FFSS_COMM_NEXT,
          LR_BL_FISTRUCT      type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FISTRUCT_NEXT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FIFPROP       type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIFPROP_NEXT  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get largest Trim Requirement
      LR_COMM_NEXT->GET_TREQW( importing ES_TREQW = LS_TREQW_NEXT ).
      if LS_TREQW is initial or
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_TREQW_NEXT-TREQW
                                                      IF_CALCV_UOM_1 = LS_TREQW_NEXT-TREQW_UOM
                                                      IF_CALCV_2     = LS_TREQW-TREQW
                                                      IF_CALCV_UOM_2 = LS_TREQW-TREQW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_TREQW_NEXT to LS_TREQW.
      endif.

***   Get Sum of Internal Thickness
      LR_COMM_NEXT->GET_FITIN( importing ES_FITIN = LS_FITIN_NEXT ).
      if LS_FITIN_NEXT is not initial.
        if LS_FITIN is initial.
          move LS_FITIN_NEXT to LS_FITIN.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITIN_NEXT-FITIN
                                                              IF_CALCV_UOM_1 = LS_FITIN_NEXT-FITIN_UOM
                                                              IF_CALCV_2     = LS_FITIN-FITIN
                                                              IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITIN-FITIN_UOM
                                                    importing EF_CALCV       = LS_FITIN-FITIN
                                                              EF_CALCV_UOM   = LS_FITIN-FITIN_UOM ).

        endif.
      endif.

***   Get Sum of External Thickness
      LR_COMM_NEXT->GET_FITEX( importing ES_FITEX = LS_FITEX_NEXT ).
      if LS_FITEX_NEXT is not initial.
        if LS_FITEX is initial.
          move LS_FITEX_NEXT to LS_FITEX.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITEX_NEXT-FITEX
                                                              IF_CALCV_UOM_1 = LS_FITEX_NEXT-FITEX_UOM
                                                              IF_CALCV_2     = LS_FITEX-FITEX
                                                              IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITEX-FITEX_UOM
                                                    importing EF_CALCV       = LS_FITEX-FITEX
                                                              EF_CALCV_UOM   = LS_FITEX-FITEX_UOM ).

        endif.
      endif.

***   Get Sum of Surface Weight
      LR_COMM_NEXT->GET_SURWT( importing ES_SURWT = LS_SURWT_NEXT ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Get Repeat Length if not different
      LR_COMM_NEXT->GET_RELEN( importing ES_RELEN = LS_RELEN_NEXT ).
      if LS_RELEN_NEXT-RELEN is not initial.
        if LS_RELEN is initial.
          move LS_RELEN_NEXT to LS_RELEN.
        else.
          if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RELEN_NEXT-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN_NEXT-RELEN_UOM
                                                          IF_CALCV_2     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ).
***         Clear Repeat if different
            clear LS_RELEN-RELEN.
          endif.
        endif.
      endif.

***   Combine Film Structure
      clear LR_BL_FISTRUCT_NEXT.
      LR_COMM_NEXT->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      if LR_BL_FISTRUCT is not bound.
        move LR_BL_FISTRUCT_NEXT to LR_BL_FISTRUCT.
      else.
        LR_BL_FISTRUCT->ADD_BL_FISTRUCT( IR_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      endif.

***   Combine Film Forward Property
      clear LR_BL_FIFPROP_NEXT.
      LR_COMM_NEXT->GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      if LR_BL_FIFPROP is not bound.
        move LR_BL_FIFPROP_NEXT to LR_BL_FIFPROP.
      else.
        LR_BL_FIFPROP->MERGE( IR_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Trim Requirement on the Width
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

*** Forward Internal Film Thickness
    ME->SET_FITIN( IS_FITIN = LS_FITIN ).

*** Forward External Film Thickness
    ME->SET_FITEX( IS_FITEX = LS_FITEX ).

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Repeat Length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

*** Forward Film Structure XML
    if LR_BL_FISTRUCT is bound.
      LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    else.
      clear LF_FISTX.
    endif.
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

*** Forward Film Forward Property XML
    if LR_BL_FIFPROP is bound.
      ME->SET_FIFPX( IF_FIFPX = LR_BL_FIFPROP->GET_FIFPX( ) ).
    else.
      ME->SET_FIFPX( IF_FIFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LT_FIRNG      type ZVCXI_FFSS_TT_FIRNG.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing EF_FIFPX = EF_FIFPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Adjust Film Range
    LR_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    move LR_BL_FIFPROP->T_FIRNG to LT_FIRNG.

    ME->ADJUST_FIRNG( changing CT_FIRNG = LT_FIRNG ).
    LR_BL_FIFPROP->SET_FIRNG( exporting IT_FIRNG = LT_FIRNG ).
    move LR_BL_FIFPROP->GET_FIFPX( ) to EF_FIFPX.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing EF_FISTX = EF_FISTX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ES_FITEX
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.

*** Get Repeat Length (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN( importing ES_RELEN = ES_RELEN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ES_SURWT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

*** Get Trim Requirement on Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ES_TREQW
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing EF_FIBPX = EF_FIBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).
    move LS_PARAM-STRNG to EF_FIFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
