
class ZCL_VCXI_P0SP_PR_MC_JGLUE definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MC
  create public .

public section.

  constants C_PARID_JOITY type /VCXI/VKS_PARID value 'ZVCXI_P0_JOITY'. "#EC NOTEXT
  constants C_PARID_JOILE type /VCXI/VKS_PARID value 'ZVCXI_P0_JOILE'. "#EC NOTEXT
  constants C_PARID_JOIWI type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIWI'. "#EC NOTEXT
  constants C_PARID_CONSU_W_S type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_W_S'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_JOILE
    returning
      value(RS_JOILE) type ZVCXI_P0S_S_JOILE
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    returning
      value(RS_JOIWI) type ZVCXI_P0S_S_JOIWI
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    returning
      value(RF_JOITY) type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOILE
    importing
      !IS_JOILE type ZVCXI_P0S_S_JOILE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .

  methods CALC_CONSU
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.
private section.
endclass. "ZCL_VCXI_P0SP_PR_MC_JGLUE definition
class ZCL_VCXI_P0SP_PR_MC_JGLUE implementation.
method CALC_CONSU.

  data:  LS_AVGCO         type ZVCXI_XCS_S_AVGCO,
         LS_AVGCP         type ZVCXI_XCS_S_AVGCP,
         LS_JOILE         type ZVCXI_P0S_S_JOILE,
         LS_JOIWI         type ZVCXI_P0S_S_JOIWI,
         LS_CONSU         type ZVCXI_XCSP_S_CONSU,
         LS_CALCV         type ZVCXI_XCS_S_CALCV.

  check IS_MQTYI is not initial.

*** Get Average Consumption Weight and Joint Length and Width
  move ME->GET_AVGCO( ) to LS_AVGCO.
  move ME->GET_AVGCP( ) to LS_AVGCP.
  move ME->GET_JOILE( ) to LS_JOILE.
  move ME->GET_JOIWI( ) to LS_JOIWI.

*** Get Joint Area
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_JOILE-JOILE
                                                      IF_CALCV_UOM_1 = LS_JOILE-JOILE_UOM
                                                      IF_CALCV_2     = LS_JOIWI-JOIWI
                                                      IF_CALCV_UOM_2 = LS_JOIWI-JOIWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                      IF_UOM         = LS_AVGCP-AVGCP_UOM
                                            importing EF_CALCV       = LS_CALCV-CALCV
                                                      EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

*** Calculate Weight
  if LS_AVGCP-AVGCP is not initial.

*** Get Total Area
    LS_CALCV-CALCV     = LS_CALCV-CALCV * IS_MQTYI-MQTYI.
    LS_CALCV-CALCV_UOM = LS_AVGCP-AVGCP_UOM.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                        IF_CALCV_2     = LS_AVGCP-AVGCP
                                                        IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LS_CALCV-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

    LS_CONSU-CONSU   =  LS_CALCV-CALCV * LS_AVGCO-AVGCO.
  else.
    LS_CONSU-CONSU   = 0.
  endif.
  LS_CONSU-CONSU_UOM = LS_AVGCO-AVGCO_UOM.

*** Set Consumption
  ME->SET_CONSU( IS_CONSU = LS_CONSU ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  F_PARID_CONSU = C_PARID_CONSU_W_S.
  F_PARID_PRICP = C_PARID_PRICP_W.
  F_PARID_AVGCO = C_PARID_AVGCO_W.
  F_PARID_AVGCP = C_PARID_AVGCP_A.

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_JOILE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).
  move LS_PARAM-ATFLV to RS_JOILE-JOILE.
  move LS_PARAM-UNIT  to RS_JOILE-JOILE_UOM.

endmethod.
method GET_JOITY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOITY ).
  move LS_PARAM-ATWRT to RF_JOITY.

endmethod.
method GET_JOITY_DESCR.

  data:  LF_JOITY type ZVCXI_P0S_JOITY.

  LF_JOITY = ME->GET_JOITY( ).
  RF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DESCR( IF_JOITY = LF_JOITY ).

endmethod.
method GET_JOIWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).
  move LS_PARAM-ATFLV to RS_JOIWI-JOIWI.
  move LS_PARAM-UNIT  to RS_JOIWI-JOIWI_UOM.

endmethod.
method GET_STATUS.

  data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type ZVCXI_XCS_S_AVGCP,
        LS_JOILE type ZVCXI_P0S_S_JOILE,
        LS_JOIWI type ZVCXI_P0S_S_JOIWI.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Joint Details
  LS_AVGCO = ME->GET_AVGCO( ).
  LS_AVGCP = ME->GET_AVGCP( ).
  LS_JOILE = ME->GET_JOILE( ).
  LS_JOIWI = ME->GET_JOIWI( ).

*** Check Average Consumption
  if LS_AVGCO-AVGCO is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Average Consumption Unit
  if LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Joint Length
  if LS_JOILE-JOILE is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Joint Width
  if LS_JOIWI-JOIWI is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Joint Type
  if ME->GET_JOITY( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type ZVCXI_XCS_S_AVGCP,
        LS_JOILE type ZVCXI_P0S_S_JOILE,
        LS_JOIWI type ZVCXI_P0S_S_JOIWI.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Joint Details
  LS_AVGCO = ME->GET_AVGCO( ).
  LS_AVGCP = ME->GET_AVGCP( ).
  LS_JOILE = ME->GET_JOILE( ).
  LS_JOIWI = ME->GET_JOIWI( ).

*** Check Average Consumption
  if LS_AVGCO-AVGCO is not initial.
*** Average Consumption is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '101' ).
  else.
*** Average Consumption is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '102' ).
  endif.

*** Check Average Consumption Unit
  if LS_AVGCP-AVGCP is not initial.
*** Average Consumption Unit is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '103' ).
  else.
*** Average Consumption Unit is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '104' ).
  endif.

*** Check Joint Length
  if LS_JOILE-JOILE is not initial.
*** Joint Length is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '171' ).
  else.
*** Joint Length is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '172' ).
  endif.

*** Check Joint Width
  if LS_JOIWI-JOIWI is not initial.
*** Joint Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '173' ).
  else.
*** Joint Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '174' ).
  endif.

*** Check Joint Type
  if ME->GET_JOITY( ) is not initial.
*** Joint Type is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '175' ).
  else.
*** Joint Type is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '176' ).
  endif.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO     to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP     to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_JOILE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).

  move IS_JOILE-JOILE     to LS_PARAM-ATFLV.
  move IS_JOILE-JOILE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_JOITY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOITY ).

  move IF_JOITY to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_JOIWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).

  move IS_JOIWI-JOIWI     to LS_PARAM-ATFLV.
  move IS_JOIWI-JOIWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
