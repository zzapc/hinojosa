
class ZCL_VCXI_FBSS_UI_BMAKE definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  data S_BMAKE_VIS type ZVCXI_FBSS_S_BMAKE_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_BM_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  types:
    YT_IBDIM type standard table of ZVCXI_FBS_IBDIM .

  data R_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE .
  constants C_UC_BGPROP type SYUCOMM value 'BMAKE_BGPROP' ##NO_TEXT.
  data R_TOOLBAR type ref to ZCL_VCXI_FBSS_TOOLBAR_HANDLE .
  data R_TEXTEDIT type ref to ZCL_VCXI_F0S_TEXTEDIT .

  methods ADJUST_SCREEN_BY_OBDIM
    importing
      !IT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM
      !IT_IBDIM type YT_IBDIM
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BGPROP
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_BMAKE definition
class ZCL_VCXI_FBSS_UI_BMAKE implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_BMAKE_BIND'
      exporting
        IR_UI_BMAKE   = ME
      importing
        ES_DYNP       = ME->S_DYNP
        EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.

*** Create Handle Toolbar
    create object ME->R_TOOLBAR
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_HANDLE_TOOLBAR'
        IF_IPRVT          = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE.

*** Create Text Editor for Long Text
    create object ME->R_TEXTEDIT
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_TEXTEDIT_LTEXT'.

  endmethod.
  method ADJUST_SCREEN_BY_OBDIM.

    data: LF_IBDIM type ZVCXI_FBS_IBDIM.

    loop at IT_IBDIM into LF_IBDIM.

      read table IT_BGDIM with key IBDIM = LF_IBDIM transporting no fields.
      if SY-SUBRC is initial.
        move 0 to CS_SCREEN-INVISIBLE.
        exit.
      else.
        move 1 to CS_SCREEN-INVISIBLE.
      endif.

    endloop.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_BMAKE.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->DO_FREE( ).
      clear ME->R_TOOLBAR.
    endif.

    if ME->R_TEXTEDIT is bound.
***   Update the Long Text before leaving the screen
      if ME->R_TEXTEDIT is bound.
        ME->R_TEXTEDIT->UPDATE_TEXT( ).
      endif.
      ME->R_TEXTEDIT->DO_FREE( ).
      clear ME->R_TEXTEDIT.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_IBDIM type table of ZVCXI_FBS_IBDIM.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.
    field-symbols: <S_IBDIM> type ZVCXI_FBS_IBDIM.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***--------------------------------------------------------------------------------------
***     Get Bag Customizing
        move ME->R_PR_BMAKE->GET_CUST_BAG( ) to LR_CUST_BAG.
        if LR_CUST_BAG is bound.
          LT_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
        endif.

        loop at screen.

          case SCREEN-GROUP1.
            when 'GL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
            when 'GL2'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
            when 'FL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).

            when 'OL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).


***         Handling Dimension changeable if Override Flag is set
            when 'OHD'.
              if ME->S_BMAKE_VIS-FOVRR_HNDDIM eq ABAP_FALSE.
                move 0 to SCREEN-INPUT.
              endif.

            when others.
          endcase.

          modify screen.
        endloop.

***--------------------------------------------------------------------------------------
***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    data: LT_PRVDR_SELECTED type /VCXI/VKSR_TT_GATE.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Initialize Toolbar and provide active tab as Selected Provider (for inserting/deletion)
    append ME->R_OLD_GATE to LT_PRVDR_SELECTED.
    ME->R_TOOLBAR->REFRESH_TOOLBAR( IT_PRVDR_SELECTED = LT_PRVDR_SELECTED ).

*** Get TextEdit Conversion Text
    if ME->R_TEXTEDIT is bound.
      move ABAP_TRUE to ME->R_TEXTEDIT->F_REFRESH_REQ.
      ME->R_TEXTEDIT->REFRESH_TEXTEDIT( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_BMAKE_VIS  type ZVCXI_FBSS_S_BMAKE_VIS.


    check ME->R_PR_BMAKE is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_BMAKE_VIS.

***--------------------------------------------------------------------------------------
*** Update Handling Dimension if it is "Overriden"
    if ME->S_BMAKE_VIS-FOVRR_HNDDIM eq ABAP_TRUE and
       ME->S_BMAKE_VIS-S_HNDDIM ne LS_BMAKE_VIS-S_HNDDIM.
      ME->R_PR_BMAKE->SET_HNDDIM( IS_HNDDIM = LS_BMAKE_VIS-S_HNDDIM
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag Override Handling Dimension
    if ME->S_BMAKE_VIS-FOVRR_HNDDIM ne LS_BMAKE_VIS-FOVRR_HNDDIM.
      ME->R_PR_BMAKE->SET_HNDDIM( IF_FOVRR = LS_BMAKE_VIS-FOVRR_HNDDIM ).
    endif.

***--------------------------------------------------------------------------------------
*** Update TextEdit Long Text
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->UPDATE_TEXT( ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

***--------------------------------------------------------------------------------------
*** Update TextEdit
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->UPDATE_TEXT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_BGPROP.
        ME->HANDLE_UC_BGPROP( ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_BMAKE.

  endmethod.
  method HANDLE_UC_BGPROP.

    data: LS_BGDATA type ZVCXI_FBSS_S_BGDATA.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property XML (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property XML (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    check LR_BL_BGFPROP is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Basic data information
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LS_BGDATA-IBAGT ).

    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_BGDATA-S_BGHEI ).

    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_BGDATA-S_BGWID ).

    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_BGDATA-S_BGWGT ).

*** Start Popup
    ZCL_VCXI_FBSS_POPUP_BGPROP=>START( IR_GATE       = ME->R_GATE
                                       IR_UIGATE     = ME->R_UIGATE
                                       IR_BL_BGBPROP = LR_BL_BGBPROP
                                       IR_BL_BGFPROP = LR_BL_BGFPROP
                                       IS_BGDATA     = LS_BGDATA  ).

  endmethod.
  method INIT_VIS.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    free: ME->S_BMAKE_VIS.
    check ME->R_PR_BMAKE is bound.

***--------------------------------------------------------------------------------------
*** Bag Type (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = ME->S_BMAKE_VIS-IBAGT
                                                                 EF_DESCR = ME->S_BMAKE_VIS-IBAGT_DESCR ).

*** Bag Width (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = ME->S_BMAKE_VIS-S_BGWID ).

*** Bag Height (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = ME->S_BMAKE_VIS-S_BGHEI ).

*** Bag Weight (Outbound)
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = ME->S_BMAKE_VIS-S_BGWGT ).

***--------------------------------------------------------------------------------------
*** Get Bag Backward Properties
    ME->R_PR_BMAKE->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

*** Overlap Dimension
    move LR_BL_BGBPROP->S_OLDIM-S_OLWID to ME->S_BMAKE_VIS-S_OLWID.

*** Gusset Dimension
    move: LR_BL_BGBPROP->S_GUDIM-S_GULEF to ME->S_BMAKE_VIS-S_GULEF,
          LR_BL_BGBPROP->S_GUDIM-S_GURIG to ME->S_BMAKE_VIS-S_GURIG,
          LR_BL_BGBPROP->S_GUDIM-S_GUTOP to ME->S_BMAKE_VIS-S_GUTOP,
          LR_BL_BGBPROP->S_GUDIM-S_GUBOT to ME->S_BMAKE_VIS-S_GUBOT.

*** Fold Dimension
    move: LR_BL_BGBPROP->S_FODIM-S_FOTOP to ME->S_BMAKE_VIS-S_FOTOP,
          LR_BL_BGBPROP->S_FODIM-S_FOBOT to ME->S_BMAKE_VIS-S_FOBOT.

*** Handling Dimension
    ME->S_BMAKE_VIS-S_HNDDIM = ME->R_PR_BMAKE->GET_HNDDIM( importing EF_FOVRR = ME->S_BMAKE_VIS-FOVRR_HNDDIM ).

  endmethod.
