
class ZCL_VCXI_XCUR_PUI_P001 definition
  public
  inheriting from /VCXI/CL_CKMRU_CLPUI
  create public .

public section.

  data S_PUI_P001_VIS type ZVCXI_XCUR_S_PUI_P001_VIS read-only .
  data T_PUI_P002_GRID type ZVCXI_XCUR_TT_PUI_P002_GRID read-only .

  methods CONSTRUCTOR
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .

  methods /VCXI/IF_CKMRU_DUI~ACTIVATE
    redefinition .
protected section.

  data R_DCO type ref to ZCL_VCXI_XCUR_DCO_MURDE .
  data R_SALV type ref to CL_SALV_TABLE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .

  methods HANDLE_UC_CALL_MURGR
    importing
      !IR_P002 type ref to ZCL_VCXI_XCUR_P002
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods INIT_SALV
    raising
      /VCXI/CX_CKX .
  methods INIT_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LINK_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
private section.
endclass. "ZCL_VCXI_XCUR_PUI_P001 definition
class ZCL_VCXI_XCUR_PUI_P001 implementation.
  method /VCXI/IF_CKMRU_DUI~ACTIVATE.

*** Bind UI
    call function 'ZVCXI_XCUR_PUI_P001_BIND'
      exporting
        IR_PUI_P001 = ME
      importing
        ES_DYNP     = ME->/VCXI/IF_CKMRU_DUI~S_DYNP.

  endmethod.
  method CONSTRUCTOR.

*** Super Constructor
    SUPER->CONSTRUCTOR( IR_RPROC = IR_RPROC ).

*** Map DCO to required Instance
    ME->R_RPROC->MAP_DCO( changing CR_DCO = ME->R_DCO ).

  endmethod.
  method DO_PBO.

*** Initialize/Refresh ALV Data
    ME->INIT_DATA( ).

*** Initialize Simple ALV
    ME->INIT_SALV( ).

*** Initialize VIS
    ME->INIT_VIS( ).

  endmethod.
method HANDLE_LINK_CLICK.

  try.
      check LINE_EXISTS( ME->T_PUI_P002_GRID[ ROW ] ).

      case COLUMN.
        when 'BTN_MURGR'.
***       Update Group Button
          ME->HANDLE_UC_CALL_MURGR( IR_P002 = ME->T_PUI_P002_GRID[ ROW ]-R_P002 ).

      endcase.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method HANDLE_UC_CALL_MURGR.

*** Update Group in Display Mode
    ZCL_VCXI_XCUR_POPUP_MURGR=>START( IS_MURGR  = IR_P002->GET_MURGR( )
                                      IF_LOCKED = ABAP_FALSE ).

  endmethod.
  method INIT_DATA.

    data: LT_PRSEG  type /VCXI/CKX_TT_OBJECT.
    data: LR_PRSEG  type ref to /VCXI/CL_CKMR_RPSEG,
          LR_RPROC  type ref to /VCXI/CL_CKMR_RPROC,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_PUI_P002_GRID> type ZVCXI_XCUR_S_PUI_P002_GRID.


    refresh ME->T_PUI_P002_GRID.

*** Get Segments (Steps)
    LT_PRSEG = ME->R_RPROC->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    loop at LT_PRSEG into LR_OBJECT.
      LR_PRSEG ?= LR_OBJECT.

***   Loop at Update Groups
      loop at LR_PRSEG->T_RPROC into LR_OBJECT.
        LR_RPROC ?= LR_OBJECT.

        append initial line to ME->T_PUI_P002_GRID assigning <S_PUI_P002_GRID>.

***     Create Process Instance
        create object <S_PUI_P002_GRID>-R_P002
          exporting
            IR_RPROC = LR_RPROC.

***     Get Number of Objects (with Status)
        <S_PUI_P002_GRID>-R_P002->GET_NOOBJ( importing EF_NOOBN = <S_PUI_P002_GRID>-NOOBN
                                                       EF_NOOBR = <S_PUI_P002_GRID>-NOOBR
                                                       EF_NOOBE = <S_PUI_P002_GRID>-NOOBE
                                                       EF_NOOBS = <S_PUI_P002_GRID>-NOOBS ).

***     Button with Update Definition
        <S_PUI_P002_GRID>-BTN_MURGR = 'Update Group'(B01).
      endloop.
    endloop.

  endmethod.
  method INIT_SALV.

***--------------------------------------------------------------------------------------
*** Initialize Container
    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0100CC_PUI_P002'
          LIFETIME                    = CL_GUI_CUSTOM_CONTAINER=>LIFETIME_DYNPRO
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Initialize SALV
    try.
        if ME->R_SALV is not bound.
          CL_SALV_TABLE=>FACTORY( exporting R_CONTAINER  = ME->R_CONTAINER
                                  importing R_SALV_TABLE = ME->R_SALV
                                  changing  T_TABLE      = ME->T_PUI_P002_GRID ).

          cast CL_SALV_COLUMN_LIST( ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'R_P002' ) )->SET_TECHNICAL( ).
          cast CL_SALV_COLUMN_LIST( ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'BTN_MURGR' ) )->SET_OPTIMIZED( ).
          cast CL_SALV_COLUMN_LIST( ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'BTN_MURGR' ) )->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>BUTTON ).
          set handler ME->HANDLE_LINK_CLICK for ME->R_SALV->GET_EVENT( ).

***       Display Simple ALV
          ME->R_SALV->DISPLAY( ).

        else.
***       Refresh Grid Content
          ME->R_SALV->REFRESH( ).
        endif.

      catch CX_SALV_ERROR into data(LR_CX_SALV_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SALV_ERROR ).
    endtry.

  endmethod.
  method INIT_VIS.

    data: LS_PUI_P002_GRID type ZVCXI_XCUR_S_PUI_P002_GRID.


    clear ME->S_PUI_P001_VIS.

    loop at ME->T_PUI_P002_GRID into LS_PUI_P002_GRID.
***   Get Total Number of Objests (with Status)
      add LS_PUI_P002_GRID-NOOBN to ME->S_PUI_P001_VIS-NOOBN.
      add LS_PUI_P002_GRID-NOOBR to ME->S_PUI_P001_VIS-NOOBR.
      add LS_PUI_P002_GRID-NOOBE to ME->S_PUI_P001_VIS-NOOBE.
      add LS_PUI_P002_GRID-NOOBS to ME->S_PUI_P001_VIS-NOOBS.
    endloop.

  endmethod.
