
class ZCL_VCXI_XCSU_GRID_PALOP_RES definition
  public
  create public .

public section.

  types:
    begin of YS_DYN_FIELD_LIMIT,
              NAME      type FIELDNAME,
              DIMEN     type ZVCXI_XCSU_DIMEN,
              LIMIT     type ZVCXI_XCSU_LIMIT,
              FIELD     type FIELDNAME,
              DESCR     type /VCXI/CKX_DESCR,
           end of YS_DYN_FIELD_LIMIT .
  types:
    YT_DYN_FIELD_LIMIT type standard table of YS_DYN_FIELD_LIMIT .
  types:
    begin of YS_DYN_FIELD_DIMEN,
              NAME      type FIELDNAME,
              DIMEN     type ZVCXI_XCSU_DIMEN,
              FIELD     type FIELDNAME,
              DESCR     type /VCXI/CKX_DESCR,
           end of YS_DYN_FIELD_DIMEN .
  types:
    YT_DYN_FIELD_DIMEN type standard table of YS_DYN_FIELD_DIMEN .

  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  events DOUBLE_CLICK .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_BL_PALOP type ref to ZCL_VCXI_XCSU_BL_PALOP
    raising
      /VCXI/CX_CKX .
  methods GET_COPTI_SEL
    returning
      value(RF_COPTI) type ZVCXI_XCSU_COPTI
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  data T_DYN_FIELD_LIMIT type YT_DYN_FIELD_LIMIT .
  data T_DYN_FIELD_DIMEN type YT_DYN_FIELD_DIMEN .
  data S_ROW_NO type LVC_S_ROID .
  data S_ROW type LVC_S_ROW .
  data S_COL type LVC_S_COL .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_DATA type ref to DATA .
  data R_BL_PALOP type ref to ZCL_VCXI_XCSU_BL_PALOP .
  data F_TABNAME type TABNAME .
  data F_CONTAINER_NAME type SCRFNAME .
  constants C_COLUMN_UOM type STRING value 'UOM'. "#EC NOTEXT
  constants C_COLUMN_HU_LIMIT type STRING value 'LIMIT'. "#EC NOTEXT
  constants C_COLUMN_HU_DIMEN type STRING value 'DIMEN'. "#EC NOTEXT

  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  methods SET_EVENT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods GET_TOOLBAR_EXCLUDING
    returning
      value(RT_TOOLBAR_EXCLUDING) type UI_FUNCTIONS
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID .
private section.

  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
endclass. "ZCL_VCXI_XCSU_GRID_PALOP_RES definition
class ZCL_VCXI_XCSU_GRID_PALOP_RES implementation.
method BUILD_DYN_TABLE.

  data:          LF_NAME_COUNT       type        NUMC5,
                 LF_NAME_VALUE       type        STRING,
                 LF_NAME_UOM         type        STRING,
                 LF_DIMEN_DESCR      type        /VCXI/CKX_DESCR.
  data:          LS_RES              type        ZVCXI_XCSU_S_PALOP_RES,
                 LS_DIMEN            type        ZVCXI_XCSU_S_DIMEN,
                 LS_LIMIT            type        ZVCXI_XCSU_S_LIMIT.
  data:          LT_COMPONENT        type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE,
                 LT_DIMEN            type        ZVCXI_XCSU_TT_DIMEN,
                 LT_LIMIT            type        ZVCXI_XCSU_TT_LIMIT.
  data:          LR_STRUCTDESCR      type ref to CL_ABAP_STRUCTDESCR,
                 LR_TABLEDESCR       type ref to CL_ABAP_TABLEDESCR,
                 LR_TYPEDESCR        type ref to CL_ABAP_TYPEDESCR.
  field-symbols: <S_COMPONENT>       type        CL_ABAP_STRUCTDESCR=>COMPONENT,
                 <S_DYN_FIELD_DIMEN> type YS_DYN_FIELD_DIMEN,
                 <S_DYN_FIELD_LIMIT> type YS_DYN_FIELD_LIMIT.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = ME->F_TABNAME
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  move LR_TYPEDESCR ?to LR_STRUCTDESCR.
  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).

***--------------------------------------------------------------------------------------
*** Get all Relevant Dimensions and Limits of Unit
  loop at ME->R_BL_PALOP->T_RES into LS_RES.
    loop at LS_RES-T_DIMEN_UNIT into LS_DIMEN.
      clear: LS_DIMEN-DIMVA, LS_DIMEN-DIMVA_UOM.
      collect LS_DIMEN into LT_DIMEN.
    endloop.

    loop at LS_RES-T_LIMIT_UNIT into LS_LIMIT.
      clear: LS_LIMIT-DIMVA, LS_LIMIT-DIMVA_UOM.
      collect LS_LIMIT into LT_LIMIT.
    endloop.
  endloop.

  clear: LF_NAME_COUNT.
*** --------------------------------------------------------------------------------------
*** --------------------------------------------------------------------------------------
*** Add Dimensions of Handling Unit
  loop at LT_DIMEN into LS_DIMEN.
    clear: LF_NAME_VALUE, LF_NAME_UOM.
    add 1 to LF_NAME_COUNT.

    concatenate C_COLUMN_HU_DIMEN
                LF_NAME_COUNT
           into LF_NAME_VALUE
           separated by '_'.

*** Add Mapping Entry
    append initial line to ME->T_DYN_FIELD_DIMEN assigning <S_DYN_FIELD_DIMEN>.
    <S_DYN_FIELD_DIMEN>-NAME  = LF_NAME_VALUE.
    <S_DYN_FIELD_DIMEN>-FIELD = 'DIMVA'.
    <S_DYN_FIELD_DIMEN>-DIMEN = LS_DIMEN-DIMEN.
    <S_DYN_FIELD_DIMEN>-DESCR = ME->R_BL_PALOP->GET_DESCR_FOR_DIMEN( IF_DIMEN = LS_DIMEN-DIMEN ).
    concatenate 'HU'(D01) <S_DYN_FIELD_DIMEN>-DESCR
           into <S_DYN_FIELD_DIMEN>-DESCR
           separated by SPACE.

    concatenate LF_NAME_VALUE
                C_COLUMN_UOM
           into LF_NAME_UOM
           separated by '_'.

*** Add Mapping Entry
    append initial line to ME->T_DYN_FIELD_DIMEN assigning <S_DYN_FIELD_DIMEN>.
    <S_DYN_FIELD_DIMEN>-NAME  = LF_NAME_UOM.
    <S_DYN_FIELD_DIMEN>-FIELD = 'DIMVA_UOM'.
    <S_DYN_FIELD_DIMEN>-DIMEN = LS_DIMEN-DIMEN.
    <S_DYN_FIELD_DIMEN>-DESCR = ME->R_BL_PALOP->GET_DESCR_FOR_DIMEN( IF_DIMEN = LS_DIMEN-DIMEN ).
    concatenate 'HU'(D01) <S_DYN_FIELD_DIMEN>-DESCR 'UoM'(D02)
           into <S_DYN_FIELD_DIMEN>-DESCR
           separated by SPACE.



*** --------------------------------------------------------------------------------------
*** Create data for Dimension Field
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSU_DIMVA'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Result list.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSU'
                                            IF_MSGNO = '621' ).
    endif.

    append initial line to LT_COMPONENT assigning <S_COMPONENT>.
    move LF_NAME_VALUE to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.
*** --------------------------------------------------------------------------------------
*** Create data for Dimension Unit
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'UNIT'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Result list.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSU'
                                            IF_MSGNO = '621' ).
    endif.

    append initial line to LT_COMPONENT assigning <S_COMPONENT>.
    move LF_NAME_UOM   to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.

  endloop.

  clear: LF_NAME_COUNT.
*** --------------------------------------------------------------------------------------
*** --------------------------------------------------------------------------------------
*** Add Limit of Handling Unit
  loop at LT_LIMIT into LS_LIMIT.
    clear: LF_NAME_VALUE, LF_NAME_UOM.
    add 1 to LF_NAME_COUNT.

    concatenate C_COLUMN_HU_LIMIT
                LF_NAME_COUNT
           into LF_NAME_VALUE
           separated by '_'.

*** Add Mapping Entry
    append initial line to ME->T_DYN_FIELD_LIMIT assigning <S_DYN_FIELD_LIMIT>.
    <S_DYN_FIELD_LIMIT>-NAME  = LF_NAME_VALUE.
    <S_DYN_FIELD_LIMIT>-FIELD = 'DIMVA'.
    <S_DYN_FIELD_LIMIT>-LIMIT = LS_LIMIT-LIMIT.
    <S_DYN_FIELD_LIMIT>-DIMEN = LS_LIMIT-DIMEN.
    <S_DYN_FIELD_LIMIT>-DESCR = ME->R_BL_PALOP->GET_DESCR_FOR_LIMIT( IF_LIMIT = LS_LIMIT-LIMIT ).
    LF_DIMEN_DESCR            = ME->R_BL_PALOP->GET_DESCR_FOR_DIMEN( IF_DIMEN = LS_LIMIT-DIMEN ).
    concatenate 'HU'(D01) <S_DYN_FIELD_LIMIT>-DESCR LF_DIMEN_DESCR
           into <S_DYN_FIELD_LIMIT>-DESCR
           separated by SPACE.

    concatenate LF_NAME_VALUE
                C_COLUMN_UOM
           into LF_NAME_UOM
           separated by '_'.

*** Add Mapping Entry
    append initial line to ME->T_DYN_FIELD_LIMIT assigning <S_DYN_FIELD_LIMIT>.
    <S_DYN_FIELD_LIMIT>-NAME  = LF_NAME_UOM.
    <S_DYN_FIELD_LIMIT>-FIELD = 'DIMVA_UOM'.
    <S_DYN_FIELD_LIMIT>-LIMIT = LS_LIMIT-LIMIT.
    <S_DYN_FIELD_LIMIT>-DIMEN = LS_LIMIT-DIMEN.
    <S_DYN_FIELD_LIMIT>-DESCR = ME->R_BL_PALOP->GET_DESCR_FOR_LIMIT( IF_LIMIT = LS_LIMIT-LIMIT ).
    LF_DIMEN_DESCR            = ME->R_BL_PALOP->GET_DESCR_FOR_DIMEN( IF_DIMEN = LS_LIMIT-DIMEN ).
    concatenate 'HU'(D01) <S_DYN_FIELD_LIMIT>-DESCR LF_DIMEN_DESCR  'UoM'(D02)
           into <S_DYN_FIELD_LIMIT>-DESCR
           separated by SPACE.

*** --------------------------------------------------------------------------------------
*** Create data for Dimension Field
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSU_DIMVA'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Result list.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSU'
                                            IF_MSGNO = '621' ).
    endif.

    append initial line to LT_COMPONENT assigning <S_COMPONENT>.
    move LF_NAME_VALUE to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.
*** --------------------------------------------------------------------------------------
*** Create data for Dimension Unit
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'UNIT'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Result list.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSU'
                                            IF_MSGNO = '621' ).
    endif.

    append initial line to LT_COMPONENT assigning <S_COMPONENT>.
    move LF_NAME_UOM   to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.

  endloop.

***--------------------------------------------------------------------------------------
*** Create data type for table
  try.
      LR_STRUCTDESCR = CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ).
      LR_TABLEDESCR  = CL_ABAP_TABLEDESCR=>CREATE(  P_LINE_TYPE  = LR_STRUCTDESCR ).

    catch CX_SY_TYPE_CREATION.
***     Error generating dynamic Result list.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSU'
                                            IF_MSGNO = '621' ).
  endtry.

  create data ME->R_DATA type handle LR_TABLEDESCR.

endmethod.
method CONSTRUCTOR.

  move IF_TABNAME        to ME->F_TABNAME.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.
  move IR_BL_PALOP       to ME->R_BL_PALOP.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.

*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_COPTI_SEL.

  data:          LS_ROW               type          LVC_S_ROW,
                 LS_RES_GRID          type          ZVCXI_XCSU_S_PALOP_RES_GRID.
  data:          LT_ROW               type          LVC_T_ROW.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if lines( LT_ROW ) is initial.
    exit.

  else.
    read table LT_ROW into LS_ROW index 1.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

*** --------------------------------------------------------------------------------------------
*** Get Selected Option
    move-corresponding <S_DATA> to LS_RES_GRID.
    move LS_RES_GRID-COPTI to RF_COPTI.

  endif.

endmethod.
method GET_FIELDCAT.

  data: LF_DESCR           type /VCXI/CKX_DESCR.
  data: LS_COMPONENT       type CL_ABAP_STRUCTDESCR=>COMPONENT,
        LS_DFIES           type DFIES,
        LS_DYN_FIELD_DIMEN type YS_DYN_FIELD_DIMEN,
        LS_DYN_FIELD_LIMIT type YS_DYN_FIELD_LIMIT.
  data: LT_COMPONENT   type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data: LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR,
        LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
        LR_ELEMDESCR   type ref to CL_ABAP_ELEMDESCR.
  field-symbols: <S_FCAT>            type        LVC_S_FCAT.


*** Get static Field Catalog
  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Dynamic Field Catalog
  check ME->R_DATA is bound.
  LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ).
  LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).

  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).
  loop at LT_COMPONENT into LS_COMPONENT.
    read table RT_FCAT with key FIELDNAME = LS_COMPONENT-NAME
                       transporting no fields.
    check SY-SUBRC ne 0.

    try.
        move LS_COMPONENT-TYPE ?to LR_ELEMDESCR.
        LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

        append initial line to RT_FCAT assigning <S_FCAT>.
        move-corresponding LS_DFIES to <S_FCAT>.
        move LS_COMPONENT-NAME to <S_FCAT>-FIELDNAME.
        move SY-TABIX          to <S_FCAT>-COL_POS.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'T_STYL' or 'COPTI'.
        move ABAP_TRUE to <S_FCAT>-TECH.

      when 'STATU'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON to <S_FCAT>-STYLE.

      when 'TTRUC' or  'TTRUC_DESCR' or   "Truck Type
           'PCPTR' or                     "PC per Truck
           'FGPTR' or                     "FG per Truck
           'LAPTR' or                     "Layer per Truck
           'TRPRE' or                     "Truck Type Preference
           'HUPTR' or                     "HU per Truck
           'TRUHU' or 'TRUHU_UOM' or      "Truck Utilization % (HU)
           'OTRUT' or 'OTRUT_UOM' or      "Order Truck Utilization (%)
           'TPORD' or                     "Truck per Order
           'HUPLA'.                       "HU per Layer
        if not LINE_EXISTS( ME->R_BL_PALOP->T_OPTI_CUST[ IELOP = ZCL_VCXI_XCSU_BL_PALOP=>C_IELOP_TTRUC ] ).
          <S_FCAT>-NO_OUT = ABAP_TRUE.
        endif.

      when others.
        if <S_FCAT>-FIELDNAME cs C_COLUMN_HU_DIMEN.
          read table ME->T_DYN_FIELD_DIMEN into LS_DYN_FIELD_DIMEN
                                           with key NAME = <S_FCAT>-FIELDNAME.
          LF_DESCR = LS_DYN_FIELD_DIMEN-DESCR.

        elseif <S_FCAT>-FIELDNAME cs C_COLUMN_HU_LIMIT.
          read table ME->T_DYN_FIELD_LIMIT into LS_DYN_FIELD_LIMIT
                                           with key NAME = <S_FCAT>-FIELDNAME.
          LF_DESCR = LS_DYN_FIELD_LIMIT-DESCR.

        else.
          continue.
        endif.

        move LF_DESCR to: <S_FCAT>-REPTEXT,
                          <S_FCAT>-COLTEXT,
                          <S_FCAT>-SCRTEXT_L,
                          <S_FCAT>-SCRTEXT_M,
                          <S_FCAT>-SCRTEXT_S.
    endcase.

  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_RES               type          ZVCXI_XCSU_S_PALOP_RES,
                 LS_DIMEN             type          ZVCXI_XCSU_S_DIMEN,
                 LS_LIMIT             type          ZVCXI_XCSU_S_LIMIT,
                 LS_RES_GRID          type          ZVCXI_XCSU_S_PALOP_RES_GRID,
                 LS_DYN_FIELD_DIMEN   type          YS_DYN_FIELD_DIMEN,
                 LS_DYN_FIELD_LIMIT   type          YS_DYN_FIELD_LIMIT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any,
                 <F_VALUE>            type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Ingoing Dimension
  loop at ME->R_BL_PALOP->T_RES into LS_RES.

    move-corresponding LS_RES to LS_RES_GRID.

*** Get Status Icon
    if lines( LS_RES_GRID-R_MSG->T_MSG ) is initial.
      LS_RES_GRID-STATU = ICON_GREEN_LIGHT.
    else.
      read table LS_RES_GRID-R_MSG->T_MSG with key MSGTY = 'E' transporting no fields.
      if SY-SUBRC = 0.
        LS_RES_GRID-STATU = ICON_RED_LIGHT.
      else.
        read table LS_RES_GRID-R_MSG->T_MSG with key MSGTY = 'W' transporting no fields.
        if SY-SUBRC = 0.
          LS_RES_GRID-STATU = ICON_YELLOW_LIGHT.
        endif.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_RES_GRID to <S_DATA>.

*** Add Dimension Entry to Dynamic Fields
    loop at LS_RES-T_DIMEN_UNIT into LS_DIMEN.

      loop at ME->T_DYN_FIELD_DIMEN into LS_DYN_FIELD_DIMEN
                                    where DIMEN = LS_DIMEN-DIMEN.

***     Get Dynamic Table Field
        assign component LS_DYN_FIELD_DIMEN-FIELD of structure LS_DIMEN to <F_VALUE>.
        check <F_VALUE> is assigned.

        assign component LS_DYN_FIELD_DIMEN-NAME of structure <S_DATA> to <F_FIELD>.
        check <F_FIELD> is assigned.
        <F_FIELD> = <F_VALUE>.
      endloop.
    endloop.

*** Add Limit Entry to Dynamic Fields
    loop at LS_RES-T_LIMIT_UNIT into LS_LIMIT.

      loop at ME->T_DYN_FIELD_LIMIT into LS_DYN_FIELD_LIMIT
                                    where LIMIT = LS_LIMIT-LIMIT
                                      and DIMEN = LS_LIMIT-DIMEN.

***     Get Dynamic Table Field
        assign component LS_DYN_FIELD_LIMIT-FIELD of structure LS_LIMIT to <F_VALUE>.
        check <F_VALUE> is assigned.

        assign component LS_DYN_FIELD_LIMIT-NAME of structure <S_DATA> to <F_FIELD>.
        check <F_FIELD> is assigned.
        <F_FIELD> = <F_VALUE>.
      endloop.
    endloop.

  endloop.

endmethod.
method GET_LAYOUT.

  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move ABAP_TRUE  to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'   to RS_LAYOUT-STYLEFNAME.
*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''         to RS_LAYOUT-EDIT.

endmethod.
method GET_TOOLBAR_EXCLUDING.

*** Exclude Buttons of Toolbar
  append CL_GUI_ALV_GRID=>MC_MB_SUM        to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_MB_SUBTOT     to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_INFO       to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MAXIMUM    to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MINIMUM    to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_DETAIL     to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_GRAPH      to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_MB_EXPORT     to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PRINT      to RT_TOOLBAR_EXCLUDING.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LS_RES_GRID          type          ZVCXI_XCSU_S_PALOP_RES_GRID.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.

*** --------------------------------------------------------------------------------------------
***   Get Range and Call Searchhelp
      move-corresponding <S_DATA> to LS_RES_GRID.

      check LS_RES_GRID-R_MSG is bound.
      LS_RES_GRID-R_MSG->DISPLAY_MSG( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DOUBLE_CLICK.

  raise event DOUBLE_CLICK.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event
    ME->SET_EVENT( ).

  endif.

endmethod.
method REFRESH_GRID.

  data:          LF_INITIAL_REFRESH   type          ABAP_BOOL.
  data:          LS_LAYOUT            type          LVC_S_LAYO,
                 LS_VARIANT           type          DISVARIANT.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS,
                 LT_FCAT              type          LVC_T_FCAT,
                 LT_FILTER            type          LVC_T_FILT,
                 LT_SORT              type          LVC_T_SORT.
  field-symbols: <T_DATA>             type standard table.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

  if ME->R_GRID is not bound.
    move ABAP_TRUE to LF_INITIAL_REFRESH.
  endif.

*** Initialize if needed
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).

*** Build Dynamic Table with columns for all Limits and Dimensions
  ME->BUILD_DYN_TABLE( ).

*** Get Grid Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT( )          to LT_FCAT.
  move ME->GET_LAYOUT( )            to LS_LAYOUT.
  move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

*** Variant
  move SY-REPID                     to LS_VARIANT-REPORT.

*** Get Current Sort and Filter Criteria
  ME->R_GRID->GET_SORT_CRITERIA( importing ET_SORT = LT_SORT ).
  ME->R_GRID->GET_FILTER_CRITERIA( importing ET_FILTER = LT_FILTER ).

  if LF_INITIAL_REFRESH ne ABAP_TRUE.
**** Get the Current cell
    ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                            ES_COL_ID = ME->S_COL
                                            ES_ROW_NO = ME->S_ROW_NO ).
  endif.

*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
      IS_VARIANT                    = LS_VARIANT
      I_SAVE                        = 'A'
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = <T_DATA>
      IT_SORT                       = LT_SORT
      IT_FILTER                     = LT_FILTER
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL
                                       IS_ROW_NO    = ME->S_ROW_NO ).

endmethod.
method SET_EVENT.

*** Set Button Click
  set handler ME->HANDLE_BUTTON_CLICK          for ME->R_GRID.

*** Set Double Click
  set handler ME->HANDLE_DOUBLE_CLICK          for ME->R_GRID.

endmethod.
