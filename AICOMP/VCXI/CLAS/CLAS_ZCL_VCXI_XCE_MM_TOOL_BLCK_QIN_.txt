
class ZCL_VCXI_XCE_MM_TOOL_BLCK_QIN definition
  public
  final
  create public .

public section.

  types:
    YT_BOB_BATCH TYPE TABLE OF REF TO zcl_vcxi_xci_bob_batch .
  types:
    YT_MSKA TYPE STANDARD TABLE OF mska WITH DEFAULT KEY .
  types YS_GMVTI type BAPI2017_GM_ITEM_SHOW .
  types:
    yt_gmvti TYPE STANDARD TABLE OF ys_gmvti WITH DEFAULT KEY .

  methods RELEASE
    importing
      !IS_QINRELEASE type ZVCXI_XCE_MM_S_QINRELEASE
    exporting
      !ET_BAPIRET2 type TT_BAPIRET2 .
  methods RETURN
    importing
      !IS_QINRETURN type ZVCXI_XCE_MM_S_QINRETURN
    exporting
      !ET_BAPIRET2 type TT_BAPIRET2 .
protected section.
private section.

  methods IS_BATCH_MANAGED
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D optional
    returning
      value(RF_TRUE) type ABAP_BOOL .
  methods POST_GOODSMVT_BATCH
    importing
      !IT_MSKA type YT_MSKA
      !IF_LGORT type LGORT_D optional
    exporting
      value(ET_BAPIRET2) type TT_BAPIRET2
    changing
      !CT_BOB_BATCH type YT_BOB_BATCH
    raising
      /VCXI/CX_CKX .
  methods POST_GOODSMVT_SET
    importing
      !IT_MSKA type YT_MSKA
      !IF_LGORT type LGORT_D optional
    exporting
      value(ET_BAPIRET2) type TT_BAPIRET2
    changing
      !CT_BOB_BATCH type YT_BOB_BATCH
    raising
      /VCXI/CX_CKX .
  methods POST_GOODSMVT_RETURN
    importing
      !IT_GMVTI type YT_GMVTI
      !IF_GRBEW type MB_GRBEW
    returning
      value(RT_BAPIRET2) type TT_BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BATCH
    importing
      !IS_QINRELEASE type ZVCXI_XCE_MM_S_QINRELEASE
      !IT_BOB_BATCH type YT_BOB_BATCH
    returning
      value(RT_BAPIRET2) type TT_BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods GET_SO_STOCK
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CHARG type CHARG_D
    returning
      value(RT_MSKA) type YT_MSKA
    raising
      /VCXI/CX_CKX .
  methods COLLECT_GOODSMVT
    importing
      !IT_MSKA type YT_MSKA
    returning
      value(RT_GMVTI) type YT_GMVTI .
  methods GET_SLOC
    importing
      !IF_WERKS type WERKS_D optional
    returning
      value(RF_LGORT) type LGORT_D
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCE_MM_TOOL_BLCK_QIN definition
class ZCL_VCXI_XCE_MM_TOOL_BLCK_QIN implementation.
  method COLLECT_GOODSMVT.

    data: LI_MATERIAL   type table of BAPI2017_GM_MATERIAL_RA,
          LI_PLANT      type table of BAPI2017_GM_PLANT_RA,
          LI_BATCH      type table of BAPI2017_GM_BATCH_RA,
          LI_MOVE_TYPE  type table of BAPI2017_GM_MOVE_TYPE_RA,
          LI_TR_EV_TYPE type table of BAPI2017_GM_TR_EV_TYPE_RA,
          LT_GMHEADER   type table of BAPI2017_GM_HEAD_02,
          LT_BAPIRET2   type table of BAPIRET2.

*** Define Material, Plant and Batch
    loop at IT_MSKA into data(LS_MSKA).
      append value #( SIGN = 'I'  OPTION = 'EQ'  LOW_LONG = LS_MSKA-MATNR ) to LI_MATERIAL.
      append value #( SIGN = 'I'  OPTION = 'EQ'  LOW      = LS_MSKA-WERKS ) to LI_PLANT.
      if LS_MSKA-CHARG is not initial.
        append value #( SIGN = 'I'  OPTION = 'EQ'  LOW    = LS_MSKA-CHARG ) to LI_BATCH.
      endif.
    endloop.

*** Search only for "Goods Receipt for Purchase Order"
    append value #( SIGN = 'I'  OPTION = 'EQ'  LOW = '101' ) to LI_MOVE_TYPE.
    append value #( SIGN = 'I'  OPTION = 'EQ'  LOW = 'WE'  ) to LI_TR_EV_TYPE.

*** Collect Goods Movements
    call function 'BAPI_GOODSMVT_GETITEMS'
      tables
        MATERIAL_RA     = LI_MATERIAL
        PLANT_RA        = LI_PLANT
        BATCH_RA        = LI_BATCH
        MOVE_TYPE_RA    = LI_MOVE_TYPE
        TR_EV_TYPE_RA   = LI_TR_EV_TYPE
        GOODSMVT_HEADER = LT_GMHEADER
        GOODSMVT_ITEMS  = RT_GMVTI
        RETURN          = LT_BAPIRET2.

    sort RT_GMVTI                                   by MATERIAL PLANT BATCH STGE_LOC PO_NUMBER PO_ITEM STCK_TYPE SPEC_STOCK MAT_DOC.
    delete adjacent duplicates from RT_GMVTI comparing MATERIAL PLANT BATCH STGE_LOC PO_NUMBER PO_ITEM STCK_TYPE SPEC_STOCK.

  endmethod.
  method GET_SLOC.

*** Get Storage Location from Database Table
    select single LGORT into @RF_LGORT
           from ZVCXI_XCE_TC310
          where TSLOC eq 'RELEASED'
            and WERKS eq @IF_WERKS.
    if SY-SUBRC ne 0.
      select single LGORT into @RF_LGORT
             from ZVCXI_XCE_TC310
            where TSLOC eq 'RELEASED'.
    endif.

    if SY-SUBRC ne 0.
***   No Storage Location found
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '017' ).
    endif.

  endmethod.
  method GET_SO_STOCK.

    select MATNR, WERKS, CHARG, LGORT, SOBKZ, VBELN, POSNR,
           sum( KASPE ) as KASPE
      into corresponding fields of table @RT_MSKA
      from MSKA
      where MATNR eq @IF_MATNR
        and WERKS eq @IF_WERKS
        and CHARG eq @IF_CHARG
        and SOBKZ eq 'E'     "Order at Hand
        and KASPE ne 0
      group by MATNR, WERKS, CHARG, LGORT, SOBKZ, VBELN, POSNR.

    if SY-SUBRC ne 0.
***   No Sales Order Stock
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '009' ).
    endif.

  endmethod.
  method IS_BATCH_MANAGED.

    select single XCHPF from MARC into @RF_TRUE
      where MATNR eq @IF_MATNR
        and WERKS eq @IF_WERKS.

  endmethod.
  method POST_GOODSMVT_BATCH.

    data: LT_GMITEM   type table of BAPI2017_GM_ITEM_CREATE,
          LT_BAPIRET2 type table of BAPIRET2.

    data(LR_MSG) = new /VCXI/CL_CKXM_MESSAGE( ).

    free: LT_GMITEM.
    loop at IT_MSKA into data(LS_MSKA).
      append value #( MOVE_TYPE      = '343'              "Transfer posting blocked to unrestricted
                      SPEC_STOCK     = LS_MSKA-SOBKZ
                      MATERIAL       = LS_MSKA-MATNR
                      PLANT          = LS_MSKA-WERKS
                      STGE_LOC       = LS_MSKA-LGORT
                      BATCH          = LS_MSKA-CHARG      MOVE_BATCH     = LS_MSKA-CHARG
                      SALES_ORD      = LS_MSKA-VBELN      VAL_SALES_ORD  = LS_MSKA-VBELN
                      S_ORD_ITEM     = LS_MSKA-POSNR      VAL_S_ORD_ITEM = LS_MSKA-POSNR
                      ENTRY_QNT      = LS_MSKA-KASPE
                      ENTRY_UOM      = 'ST'
                    ) to LT_GMITEM.
      append value #( MOVE_TYPE      = '411'              "Transfer posting sales order to own
                      SPEC_STOCK     = LS_MSKA-SOBKZ
                      MATERIAL       = LS_MSKA-MATNR
                      PLANT          = LS_MSKA-WERKS
                      STGE_LOC       = LS_MSKA-LGORT      MOVE_STLOC     = IF_LGORT
                      BATCH          = LS_MSKA-CHARG      MOVE_BATCH     = LS_MSKA-CHARG
                      SALES_ORD      = LS_MSKA-VBELN      VAL_SALES_ORD  = LS_MSKA-VBELN
                      S_ORD_ITEM     = LS_MSKA-POSNR      VAL_S_ORD_ITEM = LS_MSKA-POSNR
                      ENTRY_QNT      = LS_MSKA-KASPE
                      ENTRY_UOM      = 'ST'
                    ) to LT_GMITEM.

    endloop.

*** Create Goods Movements
    ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT   = 'Rel. Tool for Production'(001)
                                                 IF_GMCODE  = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_TRANSFER   "Transfer posting
                                                 IT_GMITEM  = LT_GMITEM
                                       changing  CR_MSG     = LR_MSG ).

*** Load Business Object of Material Batch
    data(LR_BOB_BATCH) = new ZCL_VCXI_XCI_BOB_BATCH( ).
    LR_BOB_BATCH->INIT_FROM_DB( IF_MATNR = LS_MSKA-MATNR
                                IF_CHARG = LS_MSKA-CHARG
                                IF_WERKS = LS_MSKA-WERKS ).
    append LR_BOB_BATCH to CT_BOB_BATCH.

*** Return Messages
    append lines of LR_MSG->GET_BAPIRET2( ) to ET_BAPIRET2.

  endmethod.
  method POST_GOODSMVT_RETURN.

    data: LF_GRBEW type MB_GRBEW.
    data: LT_GMITEM type table of BAPI2017_GM_ITEM_CREATE.
    data(LR_MSG) = new /VCXI/CL_CKXM_MESSAGE( ).

    LF_GRBEW  = |{ IF_GRBEW alpha = in }|.

***--------------------------------------------------------------------------------------
*** Items
    free: LT_GMITEM.
    loop at IT_GMVTI into data(LS_GMVTI).
      append value #( MOVE_TYPE      = '122'              "Return delivery to vendor
                      MVT_IND        = LS_GMVTI-MVT_IND
                      STCK_TYPE      = LS_GMVTI-STCK_TYPE
                      SPEC_STOCK     = LS_GMVTI-SPEC_STOCK
                      MATERIAL       = LS_GMVTI-MATERIAL
                      PLANT          = LS_GMVTI-PLANT
                      BATCH          = LS_GMVTI-BATCH
                      STGE_LOC       = LS_GMVTI-STGE_LOC
                      PO_NUMBER      = LS_GMVTI-PO_NUMBER
                      PO_ITEM        = LS_GMVTI-PO_ITEM
                      SALES_ORD      = LS_GMVTI-SALES_ORD      VAL_SALES_ORD  = LS_GMVTI-VAL_SALES_ORD
                      S_ORD_ITEM     = LS_GMVTI-S_ORD_ITEM     VAL_S_ORD_ITEM = LS_GMVTI-VAL_S_ORD_ITEM
                      ENTRY_QNT      = LS_GMVTI-ENTRY_QNT
                      ENTRY_UOM      = LS_GMVTI-ENTRY_UOM
                      MOVE_REAS      = LF_GRBEW
                    ) to LT_GMITEM.
    endloop.

*** Create Goods Movements
    ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT   = 'Return delivery of Tool'(003)
                                                 IF_GMCODE  = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_GR_PURORD   "Goods Receipt for Purchase Order
                                                 IT_GMITEM  = LT_GMITEM
                                       changing  CR_MSG     = LR_MSG ).
*** Return Messages
    append lines of LR_MSG->GET_BAPIRET2( ) to RT_BAPIRET2.

  endmethod.
  method POST_GOODSMVT_SET.

    data: LT_GMITEM     type table of BAPI2017_GM_ITEM_CREATE.

    data(LR_MSG) = new /VCXI/CL_CKXM_MESSAGE( ).

***--------------------------------------------------------------------------------------
    free: LT_GMITEM.
    loop at IT_MSKA into data(LS_MSKA).
      append value #( MOVE_TYPE      = '555'           "Goods Issue scrapping Sales Order blocked
                    SPEC_STOCK     = LS_MSKA-SOBKZ
                    MATERIAL       = LS_MSKA-MATNR
                    PLANT          = LS_MSKA-WERKS
                    STGE_LOC       = LS_MSKA-LGORT
                    SALES_ORD      = LS_MSKA-VBELN      VAL_SALES_ORD  = LS_MSKA-VBELN
                    S_ORD_ITEM     = LS_MSKA-POSNR      VAL_S_ORD_ITEM = LS_MSKA-POSNR
                    ENTRY_QNT      = LS_MSKA-KASPE
                    ENTRY_UOM      = 'ST'
                  ) to LT_GMITEM.

***   Find Ink Tools using DMS
      select SETTN, INKTN
             from ZVCXI_PXE_TD200
             inner join ZVCXI_PXE_TD210
              on   ZVCXI_PXE_TD210~DOKAR = ZVCXI_PXE_TD200~DOKAR
               and ZVCXI_PXE_TD210~DOKNR = ZVCXI_PXE_TD200~DOKNR
               and ZVCXI_PXE_TD210~DOKVR = ZVCXI_PXE_TD200~DOKVR
               and ZVCXI_PXE_TD210~DOKTL = ZVCXI_PXE_TD200~DOKTL
             where SETTN = @LS_MSKA-MATNR
             union select SETTN, INKTN
                   from ZVCXI_FFE_TD200
                   inner join ZVCXI_FFE_TD210
                    on   ZVCXI_FFE_TD210~DOKAR = ZVCXI_FFE_TD200~DOKAR
                     and ZVCXI_FFE_TD210~DOKNR = ZVCXI_FFE_TD200~DOKNR
                     and ZVCXI_FFE_TD210~DOKVR = ZVCXI_FFE_TD200~DOKVR
                     and ZVCXI_FFE_TD210~DOKTL = ZVCXI_FFE_TD200~DOKTL
                   where SETTN = @LS_MSKA-MATNR
             appending table @data(LT_INK_TOOL).
      if SY-SUBRC ne 0.
***     No Ink Tools found
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCE_MM'
                                              IF_MSGNO = '016'
                                              IF_MSGTY = 'E' ).
      endif.

    endloop.

*** Create Goods Movements
    ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT   = 'Rel. Tool for Production'(001)
                                                 IF_GMCODE  = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_GI "Goods issue (See BAPI Documentation)
                                                 IT_GMITEM  = LT_GMITEM
                                       changing  CR_MSG     = LR_MSG ).


***--------------------------------------------------------------------------------------
    free: LT_GMITEM.

*** Items
    loop at IT_MSKA into LS_MSKA.
      loop at LT_INK_TOOL into data(LS_INK_TOOL)
                         where SETTN eq LS_MSKA-MATNR.
        append value #( MOVE_TYPE      = '501'              "Goods Receipt w/o PO
                        MATERIAL       = LS_INK_TOOL-INKTN
                        PLANT          = LS_MSKA-WERKS
                        STGE_LOC       = IF_LGORT
                        ENTRY_QNT      = LS_MSKA-KASPE
                        ENTRY_UOM      = 'ST'
                      ) to LT_GMITEM.
      endloop.
    endloop.

*** Create Goods Movements
    ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT        = 'Rel. Ink Tool for Prod.'(002)
                                                 IF_GMCODE       = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_GR_OTHER   "Other goods receipt (See BAPI Documentation)
                                                 IT_GMITEM       = LT_GMITEM
                                       importing ER_BOB_GOODSMVT = data(LR_BOB_GOODSMVT)
                                       changing  CR_MSG          = LR_MSG ).

***--------------------------------------------------------------------------------------
*** Load Business Object of Material Batch
    loop at LR_BOB_GOODSMVT->T_ITEM into data(LS_GMITEM_NEW).
      data(LR_BOB_BATCH) = new ZCL_VCXI_XCI_BOB_BATCH( ).
      LR_BOB_BATCH->INIT_FROM_DB( IF_MATNR = LS_GMITEM_NEW-MATERIAL_LONG
                                  IF_CHARG = LS_GMITEM_NEW-BATCH
                                  IF_WERKS = LS_GMITEM_NEW-PLANT ).
      append LR_BOB_BATCH to CT_BOB_BATCH.
    endloop.


*** Return messages
    append lines of LR_MSG->GET_BAPIRET2( ) to ET_BAPIRET2.

  endmethod.
  method RELEASE.

    data: LT_BAPIRET2  type TT_BAPIRET2,
          LT_BOB_BATCH type YT_BOB_BATCH.

    try.
***     Get Sales Order Stock with Blocked Stock
        data(LT_MSKA) = ME->GET_SO_STOCK( IF_MATNR = IS_QINRELEASE-MATNR
                                          IF_WERKS = IS_QINRELEASE-WERKS
                                          IF_CHARG = IS_QINRELEASE-CHARG ).
        check LT_MSKA is not initial.

***     Get Storage Location
        data(LF_LGORT) = ME->GET_SLOC( IF_WERKS = IS_QINRELEASE-WERKS ).
        check LF_LGORT is not initial.

        free LT_BAPIRET2.

***     Batch Managed?
        if ME->IS_BATCH_MANAGED( IF_MATNR = IS_QINRELEASE-MATNR
                                 IF_WERKS = IS_QINRELEASE-WERKS ) eq ABAP_TRUE.
          ME->POST_GOODSMVT_BATCH( exporting IT_MSKA      = LT_MSKA
                                             IF_LGORT     = LF_LGORT
                                   importing ET_BAPIRET2  = LT_BAPIRET2
                                   changing  CT_BOB_BATCH = LT_BOB_BATCH ).
        else.
          ME->POST_GOODSMVT_SET( exporting IT_MSKA      = LT_MSKA
                                           IF_LGORT     = LF_LGORT
                                 importing ET_BAPIRET2  = LT_BAPIRET2
                                 changing  CT_BOB_BATCH = LT_BOB_BATCH ).
        endif.

        append lines of LT_BAPIRET2 to ET_BAPIRET2.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        append LR_CX_CKX->GET_BAPIRET2( ) to ET_BAPIRET2.
        exit.
    endtry.


*** For succeded movements Update Batch Classification Tool Lifetime and Storage Information
    if LT_BOB_BATCH  is not initial.
      try.
          LT_BAPIRET2 = ME->UPDATE_BATCH( IS_QINRELEASE = IS_QINRELEASE
                                          IT_BOB_BATCH  = LT_BOB_BATCH ).
          append lines of LT_BAPIRET2 to ET_BAPIRET2.

        catch /VCXI/CX_CKX into LR_CX_CKX.
          append LR_CX_CKX->GET_BAPIRET2( ) to ET_BAPIRET2.
      endtry.
    endif.

    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
***   Material IS_QINRELEASE-MATNR failed
      append value #( ID          = 'ZVCXI_XCE_MM'
                      NUMBER      = '002'
                      TYPE        = 'E'
                      MESSAGE_V1  = IS_QINRELEASE-MATNR
                    ) to ET_BAPIRET2.
    else.
***   Material IS_QINRELEASE-MATNR processed
      append value #( ID          = 'ZVCXI_XCE_MM'
                      NUMBER      = '001'
                      TYPE        = 'S'
                      MESSAGE_V1  = IS_QINRELEASE-MATNR
                    ) to ET_BAPIRET2.
    endif.


  endmethod.
  method RETURN.

    try.
***     Get Sales Order Stock with Blocked Stock
        data(LT_MSKA) = ME->GET_SO_STOCK( IF_MATNR = IS_QINRETURN-MATNR
                                          IF_WERKS = IS_QINRETURN-WERKS
                                          IF_CHARG = IS_QINRETURN-CHARG ).
        check LT_MSKA is not initial.

***     Collect Goods Movements
        data(LT_GMVTI) = ME->COLLECT_GOODSMVT( IT_MSKA = LT_MSKA ).
        if LT_GMVTI is initial.
          append value  #(  ID          = 'ZVCXI_XCE_MM'
                            NUMBER      = '015'
                            TYPE        = 'E'
                         )  to ET_BAPIRET2.
          exit.
        endif.

        ET_BAPIRET2 = ME->POST_GOODSMVT_RETURN( IT_GMVTI = LT_GMVTI
                                                IF_GRBEW = IS_QINRETURN-GRBEW ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        append LR_CX_CKX->GET_BAPIRET2( ) to ET_BAPIRET2.
        exit.
    endtry.

    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
***   Material IS_QINRETURN-MATNR failed
      append value #( ID          = 'ZVCXI_XCE_MM'
                      NUMBER      = '002'
                      TYPE        = 'E'
                      MESSAGE_V1  = IS_QINRETURN-MATNR
                    ) to ET_BAPIRET2.
    else.
***   Material IS_QINRETURN-MATNR processed
      append value #( ID          = 'ZVCXI_XCE_MM'
                      NUMBER      = '001'
                      TYPE        = 'S'
                      MESSAGE_V1  = IS_QINRETURN-MATNR
                    ) to ET_BAPIRET2.
    endif.

  endmethod.
  method UPDATE_BATCH.

    field-symbols: <S_MAPVC> type /VCXI/CKXC_S_MAPVC,
                   <S_MAPVN> type /VCXI/CKXC_S_MAPVN.


    loop at IT_BOB_BATCH into data(LR_BOB_BATCH).

***   Get current Classification
      data(LT_SETVA) = LR_BOB_BATCH->GET_CLASSI( IF_SETID = 'ZVCXI_XCE_PP_TOOL_BATCH' ).

***--------------------------------------------------------------------------------------
***   Update Classification
      loop at LT_SETVA assigning field-symbol(<S_SETVA>).
        case <S_SETVA>-MAPID.
***       Tool Lifetime
          when 'LIFETIME'.
            check IS_QINRELEASE-TLTIM_X eq ABAP_TRUE.

            if <S_SETVA>-T_MAPVN is initial.
              append initial line to <S_SETVA>-T_MAPVN.
            endif.
            loop at <S_SETVA>-T_MAPVN assigning <S_MAPVN>.
              <S_MAPVN>-ATFLV = conv STRING( IS_QINRELEASE-TLTIM ).
            endloop.

***       Storage Information
          when 'STORAGE_INFO'.
            check IS_QINRELEASE-STINF_X eq ABAP_TRUE.
            if <S_SETVA>-T_MAPVC is initial.
              append initial line to <S_SETVA>-T_MAPVC.
            endif.
            loop at <S_SETVA>-T_MAPVC assigning <S_MAPVC>.
              clear: <S_MAPVC>-ATWTB, <S_MAPVC>-VAMAP.  "Only provide Original Value
              <S_MAPVC>-VAORG = conv STRING( IS_QINRELEASE-STINF ).
            endloop.

***       Release Date
          when 'REL_DATE'.
            if <S_SETVA>-T_MAPVN is initial.
              append initial line to <S_SETVA>-T_MAPVN.
            endif.
            loop at <S_SETVA>-T_MAPVN assigning <S_MAPVN>.
              <S_MAPVN>-ATFLV = conv STRING( SY-DATUM ).
            endloop.

        endcase.
      endloop.

***--------------------------------------------------------------------------------------
***   Set new Classification
      LR_BOB_BATCH->CHANGE_CLASSI( exporting IF_SETID    = 'ZVCXI_XCE_PP_TOOL_BATCH'
                                             IT_SETVA    = LT_SETVA
                                             IF_COMMIT   = ABAP_TRUE
                                   importing ET_BAPIRET2 = data(LT_BAPIRET2) ).

      append lines of LT_BAPIRET2 to RT_BAPIRET2.
    endloop.

  endmethod.
