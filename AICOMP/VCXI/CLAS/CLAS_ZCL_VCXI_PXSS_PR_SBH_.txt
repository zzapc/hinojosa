
class ZCL_VCXI_PXSS_PR_SBH definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_KDMAT_CHANGED type /VCXI/VKSC_IEVNT value 'KDMAT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KDPTX_CHANGED type /VCXI/VKSC_IEVNT value 'KDPTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'PRODH_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_SBH type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_SBH' ##NO_TEXT.
  constants C_PARID_KDMAT type /VCXI/VKS_PARID value 'ZVCXI_XC_KDMAT' ##NO_TEXT.
  constants C_PARID_KDPTX type /VCXI/VKS_PARID value 'ZVCXI_XC_KDPTX' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_PRODH type /VCXI/VKS_PARID value 'ZVCXI_XC_PRODH' ##NO_TEXT.

  methods GET_KDMAT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_KDMAT) type KDMAT
    raising
      /VCXI/CX_CKX .
  methods GET_KDPTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_KDPTX) type KDPTX
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_PRODH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods SET_KDMAT
    importing
      !IF_KDMAT type KDMAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KDPTX
    importing
      !IF_KDPTX type KDPTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRODH type /VCXI/VKSC_IEVNT value 'RECALC_PRODH' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CHECK_KDMAT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_BOB_CMIR
    returning
      value(RR_BOB_CMIR) type ref to ZCL_VCXI_XCI_BOB_CMIR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRODH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.

  data R_BOB_CMIR type ref to ZCL_VCXI_XCI_BOB_CMIR .
endclass. "ZCL_VCXI_PXSS_PR_SBH definition
class ZCL_VCXI_PXSS_PR_SBH implementation.
  method CHECK_KDMAT.

    data: LS_VBAP type VBAP.


*** Don't check if item is rejected
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                                                  changing  CS_DATA  = LS_VBAP ).
    check LS_VBAP-ABGRU is initial.

*** Get Customer Material
    data(LF_KDMAT) = ME->GET_KDMAT( ).
    check LF_KDMAT is not initial.

***------------------------------------------------------------------------------------------------
*** Get Instance Business Object - Customer-Material Info Record
    data(LR_BOB_CMIR) = ME->GET_BOB_CMIR( ).
    check LR_BOB_CMIR is bound.

*** Check duplicate entries of Customer Material Number
    data(LS_KNMT) = LR_BOB_CMIR->GET_KNMT( IF_KDMAT = LF_KDMAT ).

    if LS_KNMT-MATNR is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Customer material &1 has already been used in info &2
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'VS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '003'
                                 IF_MSGV1 = LF_KDMAT
                                 IF_MSGV2 = LS_KNMT-MATNR ).
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Check other FGs for duplicates
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      check LR_GATE ne ME->R_GATE.

      if cast ZIF_VCXI_PXSS_FG( LR_GATE->R_CLSPR )->GET_KDMAT( ) eq LF_KDMAT.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Customer material &1 is already defined for "&2"
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '026'
                                   IF_MSGV1 = LF_KDMAT
                                   IF_MSGV2 = LR_GATE->R_CLSPR->GET_DESCR( ) ).
        endif.
      endif.
    endloop.

  endmethod.
  method CHECK_MAKTX.

***------------------------------------------------------------------------------------------------
    if ME->GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '021' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '022' ).
      endif.
    endif.

  endmethod.
  method GET_BOB_CMIR.

    if ME->R_BOB_CMIR is not bound.
      data(LR_APPDATA) = cast ZCL_VCXI_XCS_APPDATA( ME->R_GATE->GET_APPDATA( ) ).
      ME->R_BOB_CMIR = new #( IF_KUNNR = LR_APPDATA->S_KNVV_AG-KUNNR
                              IF_VKORG = LR_APPDATA->S_KNVV_AG-VKORG
                              IF_SPART = LR_APPDATA->S_KNVV_AG-SPART
                              IF_VTWEG = LR_APPDATA->S_KNVV_AG-VTWEG ).
    endif.

    RR_BOB_CMIR = ME->R_BOB_CMIR.

  endmethod.
  method GET_KDMAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).
    move LS_PARAM-STRNG to RF_KDMAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_KDPTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).
    move LS_PARAM-STRNG to RF_KDPTX.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to RF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).
    move LS_PARAM-ATWRT to RF_PRODH.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

*** Check Customer Material Number (CMIR)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_KDMAT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

*** Check Customer Material Number (CMIR)
    ME->CHECK_KDMAT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_RECALC_PRODH.
        ME->HANDLE_RECALC_PRODH( ).
    endcase.

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.


*** Only calcualate if calculation is active
    ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

*** Get generated Material Description
    LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

*** Set new Description
    ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

  endmethod.
  method HANDLE_RECALC_PRODH.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_PRODH type PRODH_D.


    ME->GET_PRODH( importing EF_SETBY = LF_SETBY ).

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Determine and set Product Hierarchy
ENHANCEMENT-POINT RECALC_PRODH SPOTS ZVCXI_PXSS_ES_PR_SBH .
    ME->SET_PRODH( IF_PRODH = LF_PRODH ).

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_KDMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).

    move IF_KDMAT to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDMAT_CHANGED ).
    endif.

  endmethod.
  method SET_KDPTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).

    move IF_KDPTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDPTX_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_PRODH.

    data: LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).

    if IF_PRODH is supplied.
      LS_PARAM-ATWRT = IF_PRODH.
    endif.

    LS_PARAM-SETBY = LF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
