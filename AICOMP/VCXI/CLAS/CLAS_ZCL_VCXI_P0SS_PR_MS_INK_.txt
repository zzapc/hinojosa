
class ZCL_VCXI_P0SS_PR_MS_INK definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IEVNT_O_TOOL_CHANGED type /VCXI/VKSC_IEVNT value 'TOOL_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P0_MS_INK type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_MS_INK' ##NO_TEXT.
  constants C_PARID_COLCO type /VCXI/VKS_PARID value 'ZVCXI_P0_COLCO' ##NO_TEXT.
  constants C_PARID_COVRG type /VCXI/VKS_PARID value 'ZVCXI_P0_COVRG' ##NO_TEXT.
  constants C_PARID_INKTN type /VCXI/VKS_PARID value 'ZVCXI_P0_INKTN' ##NO_TEXT.
  constants C_PARID_VARNI type /VCXI/VKS_PARID value 'ZVCXI_P0_VARNI' ##NO_TEXT.
  constants C_ATTID_CALCULATED type /VCXI/VKS_ATTID value 'CALCULATED' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_COVRG
    exporting
      !ES_COVRG type ZVCXI_P0S_S_COVRG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_VARNI
    exporting
      value(EF_VARNI) type ZVCXI_P0S_VARNI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_COVRG
    importing
      !IS_COVRG type ZVCXI_P0S_S_COVRG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_VARNI
    importing
      !IF_VARNI type ZVCXI_P0S_VARNI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO
    exporting
      value(EF_COLCO) type ZVCXI_P0SS_COLCO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LTITO
    returning
      value(RS_LTITO) type ZVCXI_P0S_S_LTITO
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_DESCR
    importing
      !IF_COLCO type ZVCXI_P0SS_COLCO
    returning
      value(RF_COLCO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_COLCO
    importing
      !IF_COLCO type ZVCXI_P0SS_COLCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_INKTN
    returning
      value(RF_INKTN) type ZVCXI_P0SS_INKTN
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods SET_INKTN
    importing
      !IF_INKTN type ZVCXI_P0SS_INKTN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods SET_LTITO
    importing
      !IS_LTITO type ZVCXI_P0S_S_LTITO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods IS_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods SET_TEXT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_COLCO_DATA type /VCXI/VKSC_IEVNT value 'INIT_COLCO_DATA' ##NO_TEXT.
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_COLCO_CHANGED type /VCXI/VKSC_IEVNT value 'COLCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_INK_DATA_CHANGED type /VCXI/VKSC_IEVNT value 'INK_DATA_CHANGED' ##NO_TEXT.
  constants C_IFUNC_CHECK_COLCO type ZVCXI_XCD_IFUNC value 'CHECK_COLCO' ##NO_TEXT.
  constants C_PARID_LTITO_A type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_A' ##NO_TEXT.
  constants C_PARID_LTITO_L type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_L' ##NO_TEXT.
  constants C_PARID_LTITO_P type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_P' ##NO_TEXT.
  constants C_PARID_LTITO_W type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_W' ##NO_TEXT.
  data F_PARID_LTITO type /VCXI/VKS_PARID .

  methods GET_PRTYP
    exporting
      !EF_PRTYP type ZVCXI_P0S_PRTYP
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG_INITIAL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_AVGCO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_COLCO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL_AND_COMPO
    exporting
      value(ER_PRINT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
      !EF_COMPO type CHAR02
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_COLCO_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_MS_INK definition
class ZCL_VCXI_P0SS_PR_MS_INK implementation.
method CHECK_AVGCO.

  data:  LS_AVGCO           type        ZVCXI_XCS_S_AVGCO,
         LS_AVGCP           type        ZVCXI_XCS_S_AVGCP.

*** 0 = Average Consumption and Unit is maintained and valid.
*** 1 = Average Consumption is not maintained.
*** 2 = Average Consumption Unit is not maintained.
*** 3 = Average Consumption and Unit is not maintained.

***  Start Positiv.
  move 0 to RF_RETURN.

  move ME->GET_AVGCO( ) to LS_AVGCO.
  move ME->GET_AVGCP( ) to LS_AVGCP.

  if LS_AVGCO-AVGCO le 0.
    move 1 to RF_RETURN.
  endif.
  if LS_AVGCP-AVGCP le 0.
    if RF_RETURN eq 1.
      move 3 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_COLCO.
*** 0 = No Check
*** 1 = Color Code is maintained
*** 2 = Color Code is not maintained

  data:  LF_COLCO   type ZVCXI_P0SS_COLCO.

*** Start Neutral
  RF_RETURN = 0.

*** Do Active Check
  check ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                   IF_IFUNC = C_IFUNC_CHECK_COLCO ) eq ABAP_TRUE.

  ME->GET_COLCO( importing EF_COLCO = LF_COLCO ).
  if LF_COLCO is not initial.
    RF_RETURN = 1.
  else.
    RF_RETURN = 2.
  endif.

endmethod.
method CHECK_COVRG.

  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT        type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** 0 = Coverage is maintained and valid.
*** 1 = Coverage is not maintained.
*** 2 = Coverage is greater than 100%.

  ME->GET_COVRG( importing ES_COVRG = LS_COVRG ).

  if LS_COVRG-COVRG le 0.
*** Check if assigned Marking with Coverage exists
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    try.
        if LR_GATE          is bound and
           LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        move 1 to RF_RETURN.
        exit.
    endtry.
    RF_RETURN = LR_PR_PRINT->CHECK_MARK_INK( IR_GATE = ME->R_GATE ).

  elseif LS_COVRG-COVRG gt 100.
    move 2 to RF_RETURN.
  else.
    move 0 to RF_RETURN.
  endif.

endmethod.
method CHECK_COVRG_INITIAL.

  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT        type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** 0 = Coverage is initial and valid (Tool is activ and Marking is assigned).
*** 1 = Coverage is initial and not valid (Tool is activ and no Markin is assigned).
*** 2 = Coverage is not initial.

  ME->GET_COVRG( importing ES_COVRG = LS_COVRG ).

  if LS_COVRG-COVRG le 0.
*** Check if assigned Marking with Coverage exists
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    try.
        if LR_GATE          is bound and
           LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        move 1 to RF_RETURN.
        exit.
    endtry.
    RF_RETURN = LR_PR_PRINT->CHECK_MARK_INK( IR_GATE = ME->R_GATE ).

  else.
    move 2 to RF_RETURN.
  endif.

endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_COMPO      type        CHAR02,
         LF_PARID      type        /VCXI/VKS_PARID,
         LF_CHECK      type        CHAR30,
         LF_INVALID    type        ABAP_BOOL,
         LF_MSGV1      type        SYMSGV.
  data:  LR_PRINT_TOOL type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET     type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA      type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC      type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM      type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN      type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT      type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID      type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT      type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool and Component Number
  ME->GET_TOOL_AND_COMPO( importing ER_PRINT_TOOL = LR_PRINT_TOOL
                                    EF_COMPO      = LF_COMPO ).


*** Load Mapset of Print Tool
  check LR_PRINT_TOOL is bound.
  append ZCL_VCXI_P0SS_PR_PRINT=>C_SETID_PRTO to LT_SETID.
  LR_PRINT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Print Tool Mapping Mapping
  read table LR_PRINT_TOOL->T_MAPSET into LS_MAPSET with key SETID = ZCL_VCXI_P0SS_PR_PRINT=>C_SETID_PRTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq ZCL_VCXI_P0SS_PR_PRINT=>C_CHECK_TOOL and
          LF_PARID is not initial.

    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
*** Get Coponent "PARID"
    concatenate LF_PARID LF_COMPO into LF_PARID separated by '@'.
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  move C_PARID_PRICP_W to ME->F_PARID_PRICP.
  move C_PARID_AVGCO_W to ME->F_PARID_AVGCO.
  move C_PARID_AVGCP_A to ME->F_PARID_AVGCP.

*** Init Unit of Parametr
  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Tool Life Time
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_LTITO_A or
                          PARID eq C_PARID_LTITO_L or
                          PARID eq C_PARID_LTITO_P or
                          PARID eq C_PARID_LTITO_W ).
    move LS_PARAM-PARID to ME->F_PARID_LTITO.
    exit.
  endloop.

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_COLCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COLCO ).
  move LS_PARAM-ATWRT to EF_COLCO.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_COLCO_DESCR.

  data: LF_WERKS type WERKS_D.

  move ME->GET_WERKS( ) to LF_WERKS.

  RF_COLCO_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_COLCO_DESCR( IF_COLCO = IF_COLCO
                                                              IF_WERKS = LF_WERKS  ).

endmethod.
method GET_COVRG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).
  move LS_PARAM-ATFLV to ES_COVRG-COVRG.
  move LS_PARAM-UNIT  to ES_COVRG-COVRG_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_INKTN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTN ).
  move LS_PARAM-ATWRT to RF_INKTN.

endmethod.
method GET_LTITO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_LTITO ).
  move LS_PARAM-ATFLV to RS_LTITO-LTITO.
  move LS_PARAM-UNIT  to RS_LTITO-LTITO_UOM.

endmethod.
  method GET_PRTYP.

    data: LT_GATE            type        /VCXI/VKSR_TT_GATE.
    data: LS_GATE like line of LT_GATE.
    data: LR_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** Get Printing Element
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                     IF_INUSE = ABAP_TRUE ).
    check LT_GATE is not initial.
    read table LT_GATE into LS_GATE index 1.
*    LR_PR_PRINT ?= LT_GATE[ 1 ]->R_CLSPR.
    LR_PR_PRINT ?= LS_GATE->R_CLSPR.

*** Get Print Type
    EF_PRTYP = LR_PR_PRINT->GET_PRTYP( ).

  endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Coverage
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_COVRG_INITIAL' ) eq ABAP_FALSE.

    case ME->CHECK_COVRG( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.
  else.
    case ME->CHECK_COVRG_INITIAL( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.
  endif.

  if ME->IS_DUMMY( ) eq ABAP_TRUE.
*** Check Average Consumption
    case ME->CHECK_AVGCO( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.
  endif.

*** Check Tools
  case ME->CHECK_TOOL_VALUES( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Color Code
  case ME->CHECK_COLCO( ).
    when 1 or 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

***----------------------------------------------------------------------------
*** Super
  SUPER->GET_STATUS_MSG( IR_MESSAGE =  IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Coverage
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_COVRG_INITIAL' ) eq ABAP_FALSE.
    case ME->CHECK_COVRG( ).
***   Coverage is maintained and valid.
      when 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '351' ).
***   Coverage is not maintained.
      when 1.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '352' ).
***   Coverage is greater than 100%.
      when 2.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '353' ).
    endcase.
  else.
    case ME->CHECK_COVRG_INITIAL( ).
      when 0.
***   Coverage is inital (Tool is activ and Marking is assigned).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '358' ).
      when 1.
***     Coverage is inital (Tool is activ and Marking is not assigned).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '359' ).

      when 2.
***   Coverage is not initial (Tool is activ).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '360' ).
    endcase.
  endif.

  if ME->IS_DUMMY( ) eq ABAP_TRUE.
***----------------------------------------------------------------------------
*** Check Average Consumption
    case ME->CHECK_AVGCO( ).
*** Average Consumption and Unit is maintained and valid.
      when 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '354' ).
*** Average Consumption is not maintained.
      when 1.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '355' ).
*** Average Consumption Unit is not maintained.
      when 2.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '356' ).
*** Average Consumption and Unit is not maintained.
      when 3.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '357' ).
    endcase.
  endif.

***----------------------------------------------------------------------------
*** Check Tool Values
  ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Color Code
  case ME->CHECK_COLCO( ).
*** Color Code is maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '361' ).
*** Color Code is not maintained.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '362' ).
  endcase.

endmethod.
method GET_TOOL_AND_COMPO.

  data:  LT_PRVDR          type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR          type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA,
         LR_PR_PRINT       type ref to ZCL_VCXI_P0SS_PR_PRINT.
  data:  LF_PRTON          type        ZVCXI_P0SS_PRTON,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT.
  endtry.

*** if Print is bound -> get Number of Requesting Ink
  check LR_PR_PRINT is bound.
  EF_COMPO = LR_PR_PRINT->GET_INK_NO( IR_GATE = ME->R_GATE ).
  move LR_PR_PRINT->GET_PRTON( ) to LF_PRTON.

*** Get Printing Tool Customizing Instance
  ER_PRINT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_PRTON
                                                         IF_WERKS = LF_WERKS ).

endmethod.
method GET_VARNI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VARNI ).
  move LS_PARAM-ATWRT to EF_VARNI.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_COLCO_DATA.
      ME->HANDLE_INIT_COLCO_DATA( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

  endcase.


endmethod.
method HANDLE_INIT_COLCO_DATA.

  data:  LF_COLCO       type        ZVCXI_P0SS_COLCO,
         LF_PRTYP       type        ZVCXI_P0S_PRTYP,
         LF_WERKS       type        WERKS_D,
         LF_MATNR       type        MATNR,
         LF_VARNI       type        ZVCXI_P0S_VARNI.
  data:  LR_CUST_PRINT  type ref to ZCL_VCXI_P0SS_CUST_PRINT.

  ME->GET_COLCO( importing EF_COLCO = LF_COLCO ).

  if LF_COLCO is not initial.
    ME->GET_PRTYP( importing EF_PRTYP = LF_PRTYP ).
*** Read Customizing
    move ME->GET_WERKS( ) to LF_WERKS.
    LR_CUST_PRINT = ZCL_VCXI_P0SS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = LF_WERKS ).
    LR_CUST_PRINT->GET_COLCO( exporting IF_COLCO = LF_COLCO
                                        IF_PRTYP = LF_PRTYP
                                        IF_DATE  = SY-DATUM
                              importing EF_MATNR = LF_MATNR
                                        EF_VARNI = LF_VARNI ).

*** Set Material
    ME->SET_MATNR( IF_MATNR = LF_MATNR
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

*** Set Varnish
    ME->SET_VARNI( IF_VARNI = LF_VARNI
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method IS_CALCULATED.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.
  data: LT_ATTRI type /VCXI/VKS_TT_ATTRI.

*** Read Attribute
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).
  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_CALCULATED.
  check SY-SUBRC = 0.
  move LS_ATTRI-ATTVA to RF_CALCULATED.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO     to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DATA_CHANGED ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP  ).

  move IS_AVGCP-AVGCP     to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DATA_CHANGED ).
  endif.

endmethod.
method SET_COLCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COLCO ).

  move IF_COLCO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COLCO_CHANGED ).
  endif.

endmethod.
method SET_COVRG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).

  move IS_COVRG-COVRG     to LS_PARAM-ATFLV.
  move IS_COVRG-COVRG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DATA_CHANGED ).
  endif.

endmethod.
method SET_INKTN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTN ).

  move IF_INKTN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TOOL_CHANGED ).
  endif.

endmethod.
method SET_LTITO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_LTITO ).

  move IS_LTITO-LTITO     to LS_PARAM-ATFLV.
  move IS_LTITO-LTITO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TOOL_CHANGED ).
  endif.

endmethod.
method SET_TEXT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DATA_CHANGED ).
  endif.

endmethod.
method SET_VARNI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VARNI ).

  move IF_VARNI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DATA_CHANGED ).
  endif.

endmethod.
