
class ZCL_VCXI_P0SS_PR_MS_AUX definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_QUMAT
    returning
      value(RF_QUMAT) type ZVCXI_P0SS_QUMAT
    raising
      /VCXI/CX_CKX .
  methods SET_QUMAT
    importing
      !IF_QUMAT type ZVCXI_P0SS_QUMAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR_NO_DUMMY
    returning
      value(RF_NO_DUMMY) type FLAG
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_AVGCO_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AVGCP_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED'. "#EC NOTEXT
  constants C_PARID_QUMAT type /VCXI/VKS_PARID value 'ZVCXI_P0_QUMAT'. "#EC NOTEXT
  constants C_IEVNT_O_QUMAT_CHANGED type /VCXI/VKSC_IEVNT value 'QUMAT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_QUMAT_MAT type /VCXI/VKSC_IEVNT value 'INIT_QUMAT_MAT'. "#EC NOTEXT
  constants C_ATTID_MATNR_DUMMY type /VCXI/VKS_ATTID value 'MATNR_DUMMY'. "#EC NOTEXT

  methods HANDLE_INIT_QUMAT_MAT
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_PR_MS_AUX definition
class ZCL_VCXI_P0SS_PR_MS_AUX implementation.
method CHECK_MATNR_NO_DUMMY.

  data: LF_MATNR type MATNR.

  move ME->GET_MATNR( ) to LF_MATNR.
  check LF_MATNR is not initial.

*** Is Matrial a Dummy?
  check ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                                 IF_MATNR = LF_MATNR   ) eq ABAP_FALSE.

  move ABAP_TRUE to RF_NO_DUMMY.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
  ME->INIT_DIM_PARAM( ).

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_QUMAT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_QUMAT ).
  move LS_PARAM-ATWRT to RF_QUMAT.

endmethod.
method GET_STATUS.

  data: LS_AVGCO  type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP  type ZVCXI_XCS_S_AVGCP.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Consumption
  move ME->GET_AVGCO( ) to LS_AVGCO.
  move ME->GET_AVGCP( ) to LS_AVGCP.

  if LS_AVGCO-AVGCO is not initial and LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_AVGCO  type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP  type ZVCXI_XCS_S_AVGCP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Consumption
  move ME->GET_AVGCO( ) to LS_AVGCO.
  move ME->GET_AVGCP( ) to LS_AVGCP.

  if LS_AVGCO-AVGCO is not initial and LS_AVGCP-AVGCP is not initial.
*** Consumption is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '551' ).
  else.
*** Please check Consumption.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '552' ).

  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_QUMAT_MAT.
      ME->HANDLE_INIT_QUMAT_MAT( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data: LF_MATNR type MATNR.

  SUPER->HANDLE_INIT_CUST_MATNR( ).

*** Set Quote Mat if needed!
  move ME->GET_MATNR( ) to LF_MATNR.

*** Is Matrial a Dummy -> Set Quote Material Flag!
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = LF_MATNR   ) eq ABAP_TRUE.
    ME->SET_QUMAT( IF_QUMAT = ABAP_TRUE ).
  else.
    ME->SET_QUMAT( IF_QUMAT = ABAP_FALSE ).
  endif.


endmethod.
method HANDLE_INIT_QUMAT_MAT.

  data: LF_MATNR type MATNR.

*** Material is no Dummy
  if ME->CHECK_MATNR_NO_DUMMY( ) ne ABAP_TRUE.
    case ME->GET_QUMAT( ).
      when ABAP_TRUE.
***     If Dummy Matnr should be used, set it
        ME->SET_MATNR( IF_MATNR = ME->F_MATNR_DUMMY ).

      when ABAP_FALSE.
***     If Quote Mat. Flag is not set
***     -> delete material
        ME->SET_MATNR( IF_MATNR = LF_MATNR ).
    endcase.
  endif.

endmethod.
method INIT_DIM_PARAM.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Average Consumption
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCO_A or
                          PARID eq C_PARID_AVGCO_L or
                          PARID eq C_PARID_AVGCO_P or
                          PARID eq C_PARID_AVGCO_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCO.
    exit.
  endloop.


*** Average Consumption Per
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCP_A or
                          PARID eq C_PARID_AVGCP_L or
                          PARID eq C_PARID_AVGCP_P or
                          PARID eq C_PARID_AVGCP_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCP.
    exit.
  endloop.


*** Price
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PRICP_A or
                          PARID eq C_PARID_PRICP_L or
                          PARID eq C_PARID_PRICP_P or
                          PARID eq C_PARID_PRICP_W ).
    move LS_PARAM-PARID to ME->F_PARID_PRICP.
    exit.
  endloop.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO      to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP      to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_QUMAT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_QUMAT ).

  move IF_QUMAT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_QUMAT_CHANGED ).
  endif.

endmethod.
