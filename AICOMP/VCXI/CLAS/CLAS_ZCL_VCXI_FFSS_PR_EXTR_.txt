
class ZCL_VCXI_FFSS_PR_EXTR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_GLUE_CARRIER .
  interfaces ZIF_VCXI_XCS_NGREP .

  types:
    YT_TC120  type standard table of ZVCXI_FFS_TC120 .
  types:
    YT_TC121  type standard table of ZVCXI_FFS_TC121 .
  types:
    YT_TC120T type standard table of ZVCXI_FFS_TC120T .
  types:
    begin of YS_FISTY,
             FISTY       type ZVCXI_FFS_FISTY,
             FISTY_DESCR type /VCXI/CKX_DESCR,
           end of YS_FISTY .
  types:
    YT_FISTY type standard table of YS_FISTY .

  constants C_IEVNT_O_TEXTR_CHANGED type /VCXI/VKSC_IEVNT value 'TEXTR_CHANGED' ##NO_TEXT.
  constants C_IPRVT_EXTR type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_EXTR' ##NO_TEXT.
  constants C_PARID_FITRW type /VCXI/VKS_PARID value 'ZVCXI_FF_FITRW' ##NO_TEXT.
  constants C_PARID_REDUW type /VCXI/VKS_PARID value 'ZVCXI_FF_REDUW' ##NO_TEXT.

  methods GET_VALID_TEXTR
    returning
      value(RT_TEXTR) type ZVCXI_F0S_TT_TEXTR
    raising
      /VCXI/CX_CKX .
  methods GET_FIWID
    exporting
      !ES_FIWID type ZVCXI_F0S_S_FIWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITRW
    exporting
      !EF_FITRW type ZVCXI_FFS_FITRW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIRNG
    exporting
      !ET_FIRNG type ZVCXI_FFSS_TT_FIRNG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_REDUW
    exporting
      !ES_REDUW type ZVCXI_FFS_S_REDUW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods GET_EXWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_EXWID type ZVCXI_FFS_S_EXWID
    raising
      /VCXI/CX_CKX .
  methods GET_FISTY
    exporting
      !EF_FISTY type ZVCXI_FFS_FISTY
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FISTY_DESCR type /VCXI/CKX_DESCR
      !EF_FBLOF type ZVCXI_F0S_FBLOF
    raising
      /VCXI/CX_CKX .
  methods GET_FISTX
    exporting
      !EF_FISTX type ZVCXI_FFS_FISTX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
    raising
      /VCXI/CX_CKX .
  methods SET_FITRW
    importing
      !IF_FITRW type ZVCXI_FFS_FITRW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FITEX
    exporting
      !ES_FITEX type ZVCXI_FFS_S_FITEX
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITIN
    exporting
      !ES_FITIN type ZVCXI_FFS_S_FITIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_REDUW
    importing
      !IS_REDUW type ZVCXI_FFS_S_REDUW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FOPEX
    returning
      value(RF_FOPEX) type ZVCXI_FFS_FOPEX
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_FRFST
    exporting
      !EF_FRFST type ZVCXI_FFS_FRFST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOOUT
    exporting
      !EF_NOOUT type ZVCXI_XCS_NOOUT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_RECI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_SURWT type ZVCXI_F0S_S_SURWT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TEXTR
    exporting
      !EF_TEXTR type ZVCXI_F0S_TEXTR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_FIX type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_TFILM
    exporting
      !EF_TFILM type ZVCXI_F0S_TFILM
    raising
      /VCXI/CX_CKX .
  methods GET_TRWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_TRWID type ZVCXI_F0S_S_TRWID
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_FISTY
    exporting
      !ET_FISTY type YT_FISTY
    raising
      /VCXI/CX_CKX .
  methods IS_FTRAL
    returning
      value(RF_FTRAL) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_OEWAL
    returning
      value(RF_OEWAL) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FISTY
    importing
      !IF_FISTY type ZVCXI_FFS_FISTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOPEX
    importing
      !IF_FOPEX type ZVCXI_FFS_FOPEX
    raising
      /VCXI/CX_CKX .
  methods SET_FRFST
    importing
      !IF_FRFST type ZVCXI_FFS_FRFST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOOUT
    importing
      !IF_NOOUT type ZVCXI_XCS_NOOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods IS_ONLY_ONE_IN
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_TEXTR
    importing
      !IF_TEXTR type ZVCXI_F0S_TEXTR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRWID
    importing
      !IS_TRWID type ZVCXI_F0S_S_TRWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BY_FISTY type /VCXI/VKSC_IEVNT value 'INIT_BY_FISTY' ##NO_TEXT.
  constants C_IEVNT_I_INIT_FIRNG type /VCXI/VKSC_IEVNT value 'INIT_FIRNG' ##NO_TEXT.
  constants C_IEVNT_I_INIT_FOPEX type /VCXI/VKSC_IEVNT value 'INIT_FOPEX' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REDUW type /VCXI/VKSC_IEVNT value 'INIT_REDUW' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_EXWID type /VCXI/VKSC_IEVNT value 'RECALC_EXWID' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FISTX type /VCXI/VKSC_IEVNT value 'RECALC_FISTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_EXWID_CHANGED type /VCXI/VKSC_IEVNT value 'EXWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIRNG_CHANGED type /VCXI/VKSC_IEVNT value 'FIRNG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTY_CHANGED type /VCXI/VKSC_IEVNT value 'FISTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITRW_CHANGED type /VCXI/VKSC_IEVNT value 'FITRW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FRFST_CHANGED type /VCXI/VKSC_IEVNT value 'FRFST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOOUT_CHANGED type /VCXI/VKSC_IEVNT value 'NOOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REDUW_CHANGED type /VCXI/VKSC_IEVNT value 'REDUW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRWID_CHANGED type /VCXI/VKSC_IEVNT value 'TRWID_CHANGED' ##NO_TEXT.
  constants C_PARID_EXWID type /VCXI/VKS_PARID value 'ZVCXI_FF_EXWID' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIRNG type /VCXI/VKS_PARID value 'ZVCXI_FF_FIRNG' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FISTY type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTY' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_FRFST type /VCXI/VKS_PARID value 'ZVCXI_FF_FRFST' ##NO_TEXT.
  constants C_PARID_NOOUT type /VCXI/VKS_PARID value 'ZVCXI_XC_NOOUT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TEXTR type /VCXI/VKS_PARID value 'ZVCXI_F0_TEXTR' ##NO_TEXT.
  constants C_PARID_TFILM type /VCXI/VKS_PARID value 'ZVCXI_F0_TFILM' ##NO_TEXT.
  constants C_PARID_TRWID type /VCXI/VKS_PARID value 'ZVCXI_F0_TRWID' ##NO_TEXT.
  data F_FTRAL type ABAP_BOOL .
  class-data T_TC120 type YT_TC120 .
  class-data T_TC120T type YT_TC120T .
  class-data T_TC121 type YT_TC121 .

  methods CHECK_TEXTR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_FOPEX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EXWID
    importing
      !IS_EXWID type ZVCXI_FFS_S_EXWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_FISTY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FITEX
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FITIN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOOUT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_EXWID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FISTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BY_FISTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_FIRNG
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIRNG
    importing
      !IT_FIRNG type ZVCXI_FFSS_TT_FIRNG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REDUW
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_EXTR definition
class ZCL_VCXI_FFSS_PR_EXTR implementation.
  method CHECK_FISTY.

*** 0 Film Style is maintained and valid.
*** 1 Film Style is maintained and not valid.
*** 2 Film Style is not maintained.

    data: LF_TEXTR      type        ZVCXI_F0S_TEXTR,
          LF_FISTY      type        ZVCXI_FFS_FISTY,
          LF_FBLOF      type        ZVCXI_F0S_FBLOF,
          LF_FBLOF_RECI type        ZVCXI_F0S_FBLOF.
    data: LR_PR_MS_RECI      type ref to ZCL_VCXI_FFSS_PR_MS_RECI.
    field-symbols: <S_TC121> type        ZVCXI_FFS_TC121.

***--------------------------------------------------------------------------------------
*** Get Film Style
    ME->GET_FISTY( importing EF_FISTY = LF_FISTY
                             EF_FBLOF = LF_FBLOF ).

***--------------------------------------------------------------------------------------
*** Film Style is not maintained.
    if LF_FISTY is initial.
      move 2 to RF_RETURN.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Get Extrusion Type
    ME->GET_TEXTR( importing EF_TEXTR = LF_TEXTR ).

*** Check if Film Style is allowed for extrusion type
    read table T_TC121 assigning <S_TC121> with key FISTY = LF_FISTY
                                                    TEXTR = LF_TEXTR.

    if SY-SUBRC ne 0.
***   Film Style is maintained and not valid.
      move 1 to RF_RETURN.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    if LR_PR_MS_RECI is bound.
      LR_PR_MS_RECI->GET_FBLOF( importing EF_FBLOF = LF_FBLOF_RECI ).

      if LF_FBLOF eq LF_FBLOF_RECI.
***     Film Style is maintained and valid.
        move 0 to RF_RETURN.
        return.
      else.
***     Film Style is maintained and not valid.
        move 1 to RF_RETURN.
      endif.
    else.
      move 1 to RF_RETURN.
      return.
    endif.

  endmethod.
  method CHECK_FITEX.

*** 0 Film Thickness is maintained and valid.
*** 1 Film Thickness is maintained and not valid.
*** 2 Film Thickness is not maintained.

    data: LS_FITEX      type        ZVCXI_FFS_S_FITEX.
    data: LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.

***--------------------------------------------------------------------------------------
*** Get Film Thickness
    ME->GET_FITEX( importing ES_FITEX = LS_FITEX ).

***--------------------------------------------------------------------------------------
*** Film Thickness is not maintained.
    if LS_FITEX-FITEX is initial.
      move 2 to RF_RETURN.
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    if LR_PR_MS_RECI is bound and
       LR_PR_MS_RECI->R_CUST_RECI is bound.
***   Check Minimum
      if LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FITEX-FITEX
                                                      IF_CALCV_UOM_1 = LS_FITEX-FITEX_UOM
                                                      IF_CALCV_2     = LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI
                                                      IF_CALCV_UOM_2 = LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
        move 1 to RF_RETURN.
      endif.
***   Check Maximum
      if LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FITEX-FITEX
                                                      IF_CALCV_UOM_1 = LS_FITEX-FITEX_UOM
                                                      IF_CALCV_2     = LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA
                                                      IF_CALCV_UOM_2 = LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move 1 to RF_RETURN.
      endif.
    endif.

  endmethod.
  method CHECK_FITIN.
*** 0 Film Thickness is maintained and valid.
*** 1 Film Thickness is maintained and not valid.
*** 2 Film Thickness is not maintained.

    data: LS_FITIN      type        ZVCXI_FFS_S_FITIN.
    data: LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.

***--------------------------------------------------------------------------------------
*** Get Film Thickness
    ME->GET_FITIN( importing ES_FITIN = LS_FITIN ).

***--------------------------------------------------------------------------------------
*** Film Thickness is not maintained.
    if LS_FITIN-FITIN is initial.
      move 2 to RF_RETURN.
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    if LR_PR_MS_RECI is bound and
       LR_PR_MS_RECI->R_CUST_RECI is bound.
***   Check Minimum
      if LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FITIN-FITIN
                                                      IF_CALCV_UOM_1 = LS_FITIN-FITIN_UOM
                                                      IF_CALCV_2     = LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI
                                                      IF_CALCV_UOM_2 = LR_PR_MS_RECI->R_CUST_RECI->S_FITMI-FITMI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
        move 1 to RF_RETURN.
      endif.
***   Check Maximum
      if LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FITIN-FITIN
                                                      IF_CALCV_UOM_1 = LS_FITIN-FITIN_UOM
                                                      IF_CALCV_2     = LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA
                                                      IF_CALCV_UOM_2 = LR_PR_MS_RECI->R_CUST_RECI->S_FITMA-FITMA_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move 1 to RF_RETURN.
      endif.
    endif.

  endmethod.
  method CHECK_NOOUT.
*** 0 No check
*** 1 Number of Outs is maintained and valid.
*** 2 Number of Outs is maintained but not valid.
*** 3 Number of Outs is not maintained.

    data: LF_NOOMI type        ZVCXI_FFS_NOOMI,
          LF_NOOMA type        ZVCXI_FFS_NOOMA,
          LF_NOOUT type        ZVCXI_XCS_NOOUT.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Perform no check if Extrusion Width is optimized
    check ME->GET_FOPEX( ) ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get actual Film Structure Property
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Number of Outs Minimum/Maximum
    LR_BL_FIFPROP->GET_NOOMI_NOOMA( importing EF_NOOMI = LF_NOOMI
                                              EF_NOOMA = LF_NOOMA ).

*** Get Numbet of Outs
    ME->GET_NOOUT( importing EF_NOOUT = LF_NOOUT ).

***--------------------------------------------------------------------------------------
*** Check Number of Outs
    if LF_NOOUT is initial.
***   Number of Outs is not maintained
      move 3 to RF_RETURN.
    else.
      if LF_NOOUT lt LF_NOOMI or
         ( LF_NOOMA ne 0 and
           LF_NOOUT gt LF_NOOMA ).
***     Number of Outs is maintained but not valid.
        move 2 to RF_RETURN.
      else.
****    Number of Outs is maintained and valid.
        move 1 to RF_RETURN.
      endif.
    endif.

  endmethod.
  method CHECK_TEXTR.

    data: LF_TEXTR type ZVCXI_F0S_TEXTR.
    data: LT_TEXTR type ZVCXI_F0S_TT_TEXTR.

*** Get Extrusion Type
    ME->GET_TEXTR( importing EF_TEXTR = LF_TEXTR ).

*** Check if maintained
    if LF_TEXTR is not initial.
***   Check if valid
      LT_TEXTR = ME->GET_VALID_TEXTR( ).
      if LINE_EXISTS( LT_TEXTR[ TABLE_LINE = LF_TEXTR ] ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Extrusion Type is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '213' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Extrusion Type is maintained, but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '214' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Extrusion Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '215' ).
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

    select *
      from ZVCXI_FFS_TC120
      into table T_TC120.                                            "#EC CI_SUBRC

    if SY-SUBRC = 0.
      select *
        from ZVCXI_FFS_TC120T
        into table T_TC120T.                                         "#EC CI_SUBRC
    endif.

    select *
      from ZVCXI_FFS_TC121
      into table T_TC121.                                            "#EC CI_SUBRC

  endmethod.
  method GET_EXWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).
  move LS_PARAM-ATFLV to ES_EXWID-EXWID.
  move LS_PARAM-UNIT  to ES_EXWID-EXWID_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIRNG.

    data:  LF_FIRNG   type STRING.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIRNG ).
    move LS_PARAM-STRNG to LF_FIRNG.
    move LS_PARAM-SETBY to EF_SETBY.

    clear: ET_FIRNG.

*** Deserialize XML
    if LF_FIRNG is not initial.
      call transformation ID
           source xml LF_FIRNG
           result T_FIRNG   = ET_FIRNG.
    endif.

  endmethod.
  method GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method GET_FISTY.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_TC120 type ZVCXI_FFS_TC120.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTY ).
    move LS_PARAM-ATWRT to EF_FISTY.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Style Description
    if EF_FISTY_DESCR is requested.
      ZCL_VCXI_FFSS_BL_FIFPROP=>GET_FISTY_DESCR( exporting IF_FISTY       = EF_FISTY
                                                 importing EF_FISTY_DESCR = EF_FISTY_DESCR ).
    endif.

***--------------------------------------------------------------------------------------
*** Return Block Film Indicator of Film Style
    if EF_FBLOF is requested.
      read table T_TC120 into LS_TC120 with key FISTY = EF_FISTY.
      if SY-SUBRC = 0.
        move LS_TC120-FBLOF to EF_FBLOF.
      endif.
    endif.

  endmethod.
  method GET_FITEX.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
  move LS_PARAM-ATFLV to ES_FITEX-FITEX.
  move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITIN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
  move LS_PARAM-ATFLV to ES_FITIN-FITIN.
  move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITRW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).
    move LS_PARAM-ATWRT to EF_FITRW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIWID.

    data: LF_FBLOF type ZVCXI_F0S_FBLOF.
    data: LS_REDUW type ZVCXI_FFS_S_REDUW.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Substract Reduction Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    try.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_FIWID-FIWID
                                                            IF_CALCV_UOM_1 = ES_FIWID-FIWID_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                  importing EF_CALCV       = ES_FIWID-FIWID
                                                            EF_CALCV_UOM   = ES_FIWID-FIWID_UOM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        clear ES_FIWID-FIWID.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.
    if ES_FIWID-FIWID lt 0.
      move 0 to ES_FIWID-FIWID.
    endif.

***------------------------------------------------------------------------------------------------
*** Double Film Width in case of Blocked Films
    ME->GET_FISTY( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.
      ES_FIWID-FIWID = ES_FIWID-FIWID * 2.
    endif.

  endmethod.
  method GET_FOPEX.

    data:  LF_SETBY  type /VCXI/VKSR_SETBY.

    ME->GET_NOOUT( importing EF_SETBY = LF_SETBY ).

    if LF_SETBY is initial.
      move ABAP_TRUE to RF_FOPEX.
    endif.

  endmethod.
  method GET_FRFST.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRFST ).
  move LS_PARAM-ATWRT to EF_FRFST.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOOUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).
    move LS_PARAM-ATFLV to EF_NOOUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_MS_RECI.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_MS_RECI.

*** Get Recipe Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_RECI=>C_IPRVT_MS_RECI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move ER_GATE->R_CLSPR ?to ER_PR_MS_RECI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: ER_GATE,
                 ER_PR_MS_RECI.
      endtry.
    endif.

  endmethod.
  method GET_REDUW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).
    move LS_PARAM-ATFLV to ES_REDUW-REDUW.
    move LS_PARAM-UNIT  to ES_REDUW-REDUW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

*** Check Extrusion Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TEXTR( ) ).

***--------------------------------------------------------------------------------------
*** Check Internal Film Thickness
    if ME->CHECK_FITIN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check External Film Thickness
    if ME->CHECK_FITEX( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Film Style
    if ME->CHECK_FISTY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Number of Outs
    case ME->CHECK_NOOUT( ).
      when 0.
        "No Check
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Extrusion Type
    ME->CHECK_TEXTR( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Internal Film Thickness
    case ME->CHECK_FITIN( ).
      when 0.
***     Internal Film Thickness is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '201' ).
      when 1.
***     Internal Film Thickness is maintained, but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '202' ).
      when 2.
***     Internal Film Thickness is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '203' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check External Film Thickness
    case ME->CHECK_FITEX( ).
      when 0.
***     External Film Thickness is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '204' ).
      when 1.
***     External Film Thickness is maintained, but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      when 2.
***     External Film Thickness is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '206' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Film Style
    case ME->CHECK_FISTY( ).
      when 0.
***     Film Style is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '207' ).
      when 1.
***     Film Style is maintained, but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '208' ).
      when 2.
***     Film Style is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '209' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Number of Outs
    case ME->CHECK_NOOUT( ).
      when 0.
        "No Check
      when 1.
***     Number of Outs is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '210' ).
      when 2.
***     Number of Outs is maintained, but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '211' ).
      when 3.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '212' ).
    endcase.

  endmethod.
  method GET_SURWT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
  move LS_PARAM-ATFLV to ES_SURWT-SURWT.
  move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TEXTR.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXTR ).
    move LS_PARAM-ATWRT to EF_TEXTR.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    check EF_TEXTR is not initial.

*** Get Description
    if EF_DESCR is requested.
      select single DESCR
             from ZVCXI_F0S_TC010T
             into EF_DESCR
            where LANGU eq SY-LANGU
             and  TEXTR eq EF_TEXTR.                      "#EC CI_SUBRC
    endif.

*** Is Extrusion Type defined by Recipe
    if EF_FIX is requested.
      ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
      check LR_PR_MS_RECI is bound and
            LR_PR_MS_RECI->R_CUST_RECI is bound.
      if LR_PR_MS_RECI->R_CUST_RECI->F_TEXTR is not initial.
***     Mark Extrusion Type as defined by Recipe
        EF_FIX = ABAP_TRUE.
      endif.
    endif.

  endmethod.
  method GET_TFILM.

    data:  LR_BL_FISTRUCT  type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

*** Get Film Structure (Inbound)
    ME->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Get Film Type of Film Structure
    LR_BL_FISTRUCT->GET_TFILM( importing EF_TFILM = EF_TFILM ).

  endmethod.
  method GET_TRWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).
  move LS_PARAM-ATFLV to ES_TRWID-TRWID.
  move LS_PARAM-UNIT  to ES_TRWID-TRWID_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VALID_FISTY.

    data: LF_TEXTR      type          ZVCXI_F0S_TEXTR,
          LF_FBLOF      type          ZVCXI_F0S_FBLOF.
    data: LR_PR_MS_RECI type ref to   ZCL_VCXI_FFSS_PR_MS_RECI.
    field-symbols: <S_FISTY>  type YS_FISTY,
                   <S_TC120>  type ZVCXI_FFS_TC120,
                   <S_TC120T> type ZVCXI_FFS_TC120T,
                   <S_TC121>  type ZVCXI_FFS_TC121.

*** Get Extrusion Type
    ME->GET_TEXTR( importing EF_TEXTR = LF_TEXTR ).

    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    check LR_PR_MS_RECI is bound.

*** Get Blocked Film Flag
    LR_PR_MS_RECI->GET_FBLOF( importing EF_FBLOF = LF_FBLOF ).

    loop at ME->T_TC120 assigning <S_TC120> where FBLOF = LF_FBLOF.
***   Check if Film Style is allowed
      read table ME->T_TC121 assigning <S_TC121> with key FISTY = <S_TC120>-FISTY
                                                          TEXTR = LF_TEXTR.

      if SY-SUBRC = 0.
***     Get Film Style description and build exporting table
        read table ME->T_TC120T assigning <S_TC120T> with key FISTY = <S_TC120>-FISTY.

        if SY-SUBRC = 0.
          append initial line   to ET_FISTY assigning <S_FISTY>.
          move <S_TC120>-FISTY  to <S_FISTY>-FISTY.
          move <S_TC120T>-DESCR to <S_FISTY>-FISTY_DESCR.
        endif.

      endif.
    endloop.

  endmethod.
  method GET_VALID_TEXTR.

    data: LF_FISTY type ZVCXI_FFS_FISTY.
    data: LS_TC121 type ZVCXI_FFS_TC121.
    data: LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.


*** Get Film Style
    ME->GET_FISTY( importing EF_FISTY = LF_FISTY ).

*** Collect Extrusion Types allowed for Film Styles
    loop at ME->T_TC121 into LS_TC121.
***   Filter by Film Style
      if LF_FISTY is not initial.
        check LS_TC121-FISTY eq LF_FISTY.
      endif.
      collect LS_TC121-TEXTR into RT_TEXTR.
    endloop.

*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    check LR_PR_MS_RECI is bound and
          LR_PR_MS_RECI->R_CUST_RECI is bound.
    if LR_PR_MS_RECI->R_CUST_RECI->F_TEXTR is not initial.
      delete RT_TEXTR where TABLE_LINE ne LR_PR_MS_RECI->R_CUST_RECI->F_TEXTR.
    endif.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

*** Get Sepcification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SPEC.
    endtry.

    check LR_PR_SPEC is bound.
*** Get Plant from Specification
    LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).
      when C_IEVNT_I_RECALC_EXWID.
        ME->HANDLE_RECALC_EXWID( ).
      when C_IEVNT_I_RECALC_FISTX.
        ME->HANDLE_RECALC_FISTX( ).

      when C_IEVNT_I_INIT_FIRNG.
        ME->HANDLE_INIT_FIRNG( ).

      when C_IEVNT_I_INIT_BY_FISTY.
        ME->HANDLE_INIT_BY_FISTY( ).

      when C_IEVNT_I_INIT_FOPEX.
        ME->HANDLE_INIT_FOPEX( ).
      when C_IEVNT_I_INIT_REDUW.
        ME->HANDLE_INIT_REDUW( ).

***   Event Backarding for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_BY_FISTY.

    data: LS_TRWID type ZVCXI_F0S_S_TRWID.

*** Initialize Trim Width
    if ME->IS_FTRAL( ) ne ABAP_TRUE.
      ME->SET_TRWID( IS_TRWID = LS_TRWID
                     IF_SETBY = SPACE ).
    endif.

*** Initialize Optimize Extrusion Width
    if ME->IS_OEWAL( ) ne ABAP_TRUE.
      ME->SET_FOPEX( IF_FOPEX = ABAP_TRUE ).
    endif.

  endmethod.
  method HANDLE_INIT_FIRNG.

    data: LF_TEXTR type ZVCXI_F0S_TEXTR.
    data: LT_FIRNG type ZVCXI_FFSS_TT_FIRNG.

*** Get Extrusion Type
    ME->GET_TEXTR( importing EF_TEXTR = LF_TEXTR ).

*** Determine Extrusion Width Ranges (based on Plant and Extrusion Type)
    LT_FIRNG = ZCL_VCXI_FFSS_CUST_EXTR=>GET_FIRNG( IF_WERKS = ME->GET_WERKS( )
                                                   IF_TEXTR = LF_TEXTR ).

*** Initialize based on Defaults
    ME->SET_FIRNG( IT_FIRNG = LT_FIRNG
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

  endmethod.
  method HANDLE_INIT_FOPEX.

*** Disable Extrusion Optimization and remove any trim for Lamination-Extrusion and Extrusion-Lamination
    check ME->IS_ONLY_ONE_IN( ) ne ABAP_TRUE.

    ME->SET_NOOUT( IF_NOOUT = 1 ).
    ME->SET_TRWID( IF_SETBY = SPACE ).

  endmethod.
  method HANDLE_INIT_REDUW.

    data: LS_REDUW type ZVCXI_FFS_S_REDUW.

    check ME->IS_ONLY_ONE_IN( ) eq ABAP_TRUE.

*** Initialize Reduction on Width
    ME->SET_REDUW( IS_REDUW = LS_REDUW ).

*** Initialize Flag Ignore Trim required
    ME->SET_FITRW( IF_FITRW = SPACE ).

  endmethod.
  method HANDLE_RECALC_EXWID.

    data: LF_NOOUT type        ZVCXI_XCS_NOOUT.
    data: LS_FIWID type        ZVCXI_F0S_S_FIWID,
          LS_TRWID type        ZVCXI_F0S_S_TRWID,
          LS_EXWID type        ZVCXI_FFS_S_EXWID.

***--------------------------------------------------------------------------------------
    if ME->GET_FOPEX( ) ne ABAP_TRUE.
***   Get Film Width (Inbound)
      ME->GET_FIWID( importing ES_FIWID = LS_FIWID ).
***   Get Number of Outs
      ME->GET_NOOUT( importing EF_NOOUT = LF_NOOUT ).
***   Get Trim on Width
      ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).

***   Calculate Extrusion Width
      LS_EXWID-EXWID     = LS_FIWID-FIWID * LF_NOOUT.
      LS_EXWID-EXWID_UOM = LS_FIWID-FIWID_UOM.

***   Add Trimm
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_EXWID-EXWID
          IF_CALCV_UOM_1 = LS_EXWID-EXWID_UOM
          IF_CALCV_2     = LS_TRWID-TRWID
          IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
          IF_UOM         = LS_EXWID-EXWID_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
        importing
          EF_CALCV       = LS_EXWID-EXWID
          EF_CALCV_UOM   = LS_EXWID-EXWID_UOM ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Extrusion Width
    ME->SET_EXWID( IS_EXWID = LS_EXWID ).

  endmethod.
  method HANDLE_RECALC_FISTX.

    data: LF_FISTX type ZVCXI_FFS_FISTX,
          LF_FRFST type ZVCXI_FFS_FRFST.
    data: LS_FSFILM     type ZVCXI_FFSS_S_FSFILM.
    data: LR_PR_MS_RECI  type ref to ZCL_VCXI_FFSS_PR_MS_RECI,
          LR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

***--------------------------------------------------------------------------------------
*** Create new BL Instance
    LR_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    if LR_PR_MS_RECI is bound and
       LR_PR_MS_RECI->R_CUST_RECI is bound.
***   Define Layer
      move LR_PR_MS_RECI->R_CUST_RECI->T_FSFLAYER to LS_FSFILM-T_LAYER.
    endif.

*** Add new Film
    LR_BL_FISTRUCT->ADD_ENTRY( IS_FISTRUCT = LS_FSFILM
                               IF_TFSDA    = ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_FILM ).

***--------------------------------------------------------------------------------------
*** Reverse Film Structure
    ME->GET_FRFST( importing EF_FRFST = LF_FRFST ).
    if LF_FRFST eq ABAP_TRUE.
      LR_BL_FISTRUCT->TURN( ).
    endif.

*** Create XML and set to parameter
    LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_FIDEN      type        ZVCXI_FFS_S_FIDEN,
          LS_FITIN      type        ZVCXI_FFS_S_FITIN,
          LS_SURWT      type        ZVCXI_F0S_S_SURWT.
    data: LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI.

***--------------------------------------------------------------------------------------
*** Get current Surface Weight(get UOM)
    ME->GET_SURWT( importing ES_SURWT = LS_SURWT ).
    clear LS_SURWT-SURWT.

****--------------------------------------------------------------------------------------
*** Get Recipe
    ME->GET_PRVDR_MS_RECI( importing ER_PR_MS_RECI = LR_PR_MS_RECI ).
    if LR_PR_MS_RECI is bound.
***   Get Density
      LR_PR_MS_RECI->GET_FIDEN( importing ES_FIDEN = LS_FIDEN ).

***   Get Film Thickness
      ME->GET_FITIN( importing ES_FITIN = LS_FITIN ).

      if LS_FITIN-FITIN is not initial.
***     Calculate Surface Weight
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting
            IF_CALCV_1     = LS_FIDEN-FIDEN
            IF_CALCV_UOM_1 = LS_FIDEN-FIDEN_UOM
            IF_CALCV_2     = LS_FITIN-FITIN
            IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
            IF_UOM         = LS_SURWT-SURWT_UOM
            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
          importing
            EF_CALCV       = LS_SURWT-SURWT
            EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_FTRAL.

    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Trim Allowed
    RF_FTRAL = LR_BL_FIFPROP->IS_FTRAL( ).

  endmethod.
  method IS_OEWAL.

    data: LF_NOOMI type        ZVCXI_FFS_NOOMI,
          LF_NOOMA type        ZVCXI_FFS_NOOMA.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get actual Film Structure Property
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Number of Outs Minimum/Maximum
    LR_BL_FIFPROP->GET_NOOMI_NOOMA( importing EF_NOOMI = LF_NOOMI
                                              EF_NOOMA = LF_NOOMA ).

*** Is Optimized Extrusion Width Allowed
    if LF_NOOMI ne LF_NOOMA.
      move ABAP_TRUE to RF_OEWAL.
    endif.

  endmethod.
  method IS_ONLY_ONE_IN.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.

    move ABAP_TRUE to RF_RETURN.

*** Get Sibling Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.

***   Get Siblings of a specific Provider Type
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

****  Ignore myself
      delete LT_GATE where TABLE_LINE eq ME->R_GATE.

      if LT_GATE is not initial.
        move ABAP_FALSE to RF_RETURN.
        exit.
      endif.
    endloop.

  endmethod.
  method SET_EXWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).

    move IS_EXWID-EXWID     to LS_PARAM-ATFLV.
    move IS_EXWID-EXWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EXWID_CHANGED ).
    endif.

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIRNG.

    data: LF_CHANGED type       ABAP_BOOL,
          LF_FIRNG   type       STRING.
    data: LS_PARAM   type       /VCXI/VKSR_S_PARAM.

*** Transform Table into XML
    call transformation ID
         source T_FIRNG = IT_FIRNG
         result xml LF_FIRNG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIRNG ).

    move LF_FIRNG           to LS_PARAM-STRNG.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIRNG_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX           to LS_PARAM-STRNG.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FISTY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTY ).

    move IF_FISTY to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTY_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

  data:  LF_CHANGED   type ABAP_BOOL.
  data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

  move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
  move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
  endif.

  endmethod.
  method SET_FITIN.

  data:  LF_CHANGED   type ABAP_BOOL.
  data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

  move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
  move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
  endif.

  endmethod.
  method SET_FITRW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).

    move IF_FITRW to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITRW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_FOPEX.

    if IF_FOPEX eq ABAP_TRUE.
***   Initialize Number of Out
      ME->SET_NOOUT( IF_NOOUT = 0
                     IF_SETBY = SPACE ).
    else.
***   Mark Number of Outs as User Entry
      ME->SET_NOOUT( IF_NOOUT = 0
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method SET_FRFST.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRFST ).

  move IF_FRFST           to LS_PARAM-ATWRT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FRFST_CHANGED ).
  endif.

  endmethod.
  method SET_NOOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).

    move IF_NOOUT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_REDUW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).

    move IS_REDUW-REDUW     to LS_PARAM-ATFLV.
    move IS_REDUW-REDUW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REDUW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

  move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
  move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
  endif.

  endmethod.
  method SET_TEXTR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXTR ).

    move IF_TEXTR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TEXTR_CHANGED ).
    endif.

  endmethod.
  method SET_TRWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).

    if IS_TRWID is supplied.
      move IS_TRWID-TRWID     to LS_PARAM-ATFLV.
      move IS_TRWID-TRWID_UOM to LS_PARAM-UNIT.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRWID_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS      type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Forward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LF_FISTY type        ZVCXI_FFS_FISTY.
    data: LS_REDUW type ZVCXI_FFS_S_REDUW,
          LS_FIWID type        ZVCXI_F0S_S_FIWID,
          LS_GULEF type        ZVCXI_F0S_S_GULEF,
          LS_GURIG type        ZVCXI_F0S_S_GURIG.
    data: LT_FIRNG type        ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_FIRNG>  type ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property
    ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( ).
    check ER_BL_FIFPROP is bound.

***--------------------------------------------------------------------------------------
*** Film Style
    ME->GET_FISTY( importing EF_FISTY = LF_FISTY ).
    ER_BL_FIFPROP->SET_FISTY( IF_FISTY = LF_FISTY ).

*** Get Film Ranges
    ME->GET_FIRNG( importing ET_FIRNG = LT_FIRNG ).

*** Get Reduction On Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LS_REDUW-REDUW ne 0.
      loop at LT_FIRNG assigning <S_FIRNG>.
***     Increase Film Width Minimum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMI
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMI_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMI_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMI
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMI_UOM ).

***     Increase Film Width Maximum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMA
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMA_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMA_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMA
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMA_UOM ).
      endloop.
    endif.

    ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).

***--------------------------------------------------------------------------------------
*** Default Gusset Units by Film Width
    ME->GET_FIWID( importing ES_FIWID = LS_FIWID ).

    clear LS_GULEF.
    move LS_FIWID-FIWID_UOM to LS_GULEF-GULEF_UOM.
    ER_BL_FIFPROP->SET_GULEF( IS_GULEF = LS_GULEF ).

    clear LS_GURIG.
    move LS_FIWID-FIWID_UOM to LS_GURIG-GURIG_UOM.
    ER_BL_FIFPROP->SET_GURIG( IS_GURIG = LS_GURIG ).

***--------------------------------------------------------------------------------------
*** Return Film Foward Property
    EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

    data: LF_TFSDA type        ZVCXI_FFSS_TFSDA,
          LF_FBLOF type        ZVCXI_F0S_FBLOF,
          LF_LAYER type        I.
    data: LS_FSFILM type        ZVCXI_FFSS_S_FSFILM,
          LS_LAYER  type        ZVCXI_FFSS_S_FSFLAYER.
    data: LR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_DATA        type ref to DATA.
    field-symbols: <S_DATA>    type          ANY.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

***--------------------------------------------------------------------------------------
*** Get first (only) film of Inbound Structure
    LR_BL_FISTRUCT->GET_ENTRY( exporting IF_INDEX = 1
                               importing EF_TFSDA = LF_TFSDA
                                         ER_DATA  = LR_DATA ).
    check LF_TFSDA eq ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_FILM.
    assign LR_DATA->* to <S_DATA>.
    move-corresponding <S_DATA> to LS_FSFILM.

***--------------------------------------------------------------------------------------
*** Special handling for Blocked Films
    ME->GET_FISTY( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.

***  Add Layers in reverse order in case of
      LF_LAYER = LINES( LS_FSFILM-T_LAYER ) + 1.
      do LF_LAYER times.
        read table LS_FSFILM-T_LAYER into LS_LAYER index LF_LAYER - SY-INDEX.
        if SY-SUBRC eq 0.
          append LS_LAYER to LS_FSFILM-T_LAYER.
        endif.
      enddo.

***  Set Side A also as Side B
      move LS_FSFILM-S_SIDEA to LS_FSFILM-S_SIDEB.
    endif.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( ).
    ER_BL_FISTRUCT->ADD_ENTRY( IS_FISTRUCT = LS_FSFILM
                               IF_TFSDA    = ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_FILM ).

*** Create XML
    ER_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = EF_FISTX ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

    data: LF_FBLOF type        ZVCXI_F0S_FBLOF.

***------------------------------------------------------------------------------------------------
*** Get External Film Thickness (Inbound)
    ME->GET_FITEX( importing ES_FITEX = ES_FITEX
                             EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Double External Film Thickness in case of Blocked Films
    ME->GET_FISTY( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.
      ES_FITEX-FITEX = ES_FITEX-FITEX * 2.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

    data: LF_FBLOF type        ZVCXI_F0S_FBLOF.

***------------------------------------------------------------------------------------------------
*** Get Internal Film Thickness (Inbound)
    ME->GET_FITIN( importing ES_FITIN = ES_FITIN
                             EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Double Internal Film Thickness in case of Blocked Films
    ME->GET_FISTY( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.
      ES_FITIN-FITIN = ES_FITIN-FITIN * 2.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.
    return.
  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

    data: LF_FBLOF type        ZVCXI_F0S_FBLOF.

***------------------------------------------------------------------------------------------------
*** Get Surface Weight (Inbound)
    ME->GET_SURWT( importing ES_SURWT = ES_SURWT
                             EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Double Surface Weight in case of Blocked Films
    ME->GET_FISTY( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.
      ES_SURWT-SURWT = ES_SURWT-SURWT * 2.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

    data: LS_REDUW type ZVCXI_FFS_S_REDUW,
          LF_FITRW type ZVCXI_FFS_FITRW.

***------------------------------------------------------------------------------------------------
*** Add Reduction on Width
    ME->GET_FITRW( importing EF_FITRW = LF_FITRW ).
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LF_FITRW is initial.
      ES_TREQW-TREQW     = LS_REDUW-REDUW.
      ES_TREQW-TREQW_UOM = LS_REDUW-REDUW_UOM.
    else.
***   Set to 0 if not ignored (FITRW)
      clear ES_TREQW-TREQW.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FITRW.

*** Never Ignore for Extrusion
    move ABAP_FALSE to RF_FITRW.

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FIWID.

*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = RS_FIWID ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    ME->GET_TEXTR( importing EF_TEXTR = data(LF_TEXTR) ).        "Extrusion Type
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_TEXTR
                                changing  CT_ATTR  = LT_ATTR ).
    ME->GET_FISTY( importing EF_FISTY = data(LF_FISTY) ).        "Film Style
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_FISTY
                                changing  CT_ATTR  = LT_ATTR ).
    ME->GET_TFILM( importing EF_TFILM = data(LF_TFILM) ).        "Film Type
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_TFILM
                                changing  CT_ATTR  = LT_ATTR ).
    ME->GET_FIWID( importing ES_FIWID = data(LS_FIWID) ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_FIWID-FIWID
                                          IF_UOM   = LS_FIWID-FIWID_UOM
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_ICON      = 'sap-icon://tag'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
