
class ZCL_VCXI_PCSS_CUST_BOARD definition
  public
  create protected .

public section.

  types:
    begin of YS_INSTANCE,
                            BOARD      type        ZVCXI_PCS_BOARD,
                            WERKS      type        WERKS_D,
                            MBOAR      type        ZVCXI_PCSS_MBOAR,
                            DATE       type        DATS,
                            R_INSTANCE type ref to ZCL_VCXI_PCSS_CUST_BOARD,
                          end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .

  data F_ARBPL type ARBPL read-only .
  data F_BOARD type ZVCXI_PCS_BOARD read-only .
  data F_FLUTE type ZVCXI_PCS_FLUTE read-only .
  data F_FTBOA type ZVCXI_PCSS_FTBOA read-only .
  data F_MBOAR type ZVCXI_PCSS_MBOAR read-only .
  data F_SELFD type ZVCXI_PCSS_SELFD read-only .
  data F_STATU type ZVCXI_PCSSC_STATU read-only .
  data F_TBOAR type ZVCXI_PCSS_TBOAR read-only .
  data F_VALFR type ZVCXI_XCS_VALFR read-only .
  data F_VALTO type ZVCXI_XCS_VALTO read-only .
  data F_WERKS type WERKS_D read-only .
  data S_MINWT type ZVCXI_PCSS_S_MINWT read-only .

  class-methods GET_BPAID_DESCR
    importing
      !IF_BPAID type ZVCXI_PCS_BPAID
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods SHLP_LOAD_BOARD
    importing
      !IF_DCONF type /VCXI/VKCR_DCONF
      !IF_LOCKED type /VCXI/CKX_LOCKED
    exporting
      !EF_BOARD type ZVCXI_PCS_BOARD
      !EF_MBOAR type ZVCXI_PCSS_MBOAR
      !EF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_ARBPL
    importing
      !IF_FENDL type ZVCXI_PCS_FENDL optional
      !IF_TLAMI type ZVCXI_P0SS_TLAMI optional
    returning
      value(RF_ARBPL) type ARBPL
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_ALL_TPRPR
    returning
      value(RT_TPRPR) type ZVCXI_PCSS_TT_TPRPR
    raising
      /VCXI/CX_CKX .
  methods GET_APBOA
    exporting
      !ET_APBOA type ZVCXI_PCSSC_TT_APBOA
    returning
      value(RF_APBOA) type ZVCXI_PCS_APBOA
    raising
      /VCXI/CX_CKX .
  methods GET_ASBOA
    returning
      value(RT_ASBOA) type ZVCXI_PCSSC_TT_ASBOA
    raising
      /VCXI/CX_CKX .
  methods GET_BGWHT
    importing
      !IF_ARBPL type ARBPL
    returning
      value(RS_BGWHT) type ZVCXI_PCSS_S_BGWHT
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD_DESCR
    changing
      !CT_BOARD_DESCR type ZVCXI_PCSS_TT_BOARD_DESCR optional
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_BPAP
    importing
      !IF_ARBPL type ARBPL
      !IS_BOARW type ZVCXI_PCSS_S_BOARW optional
    returning
      value(RT_BPAP) type ZVCXI_PCSS_TT_BPAP
    raising
      /VCXI/CX_CKX .
  methods GET_BSTA
    importing
      !IF_ARBPL type ARBPL
    returning
      value(RS_BSTA) type ZVCXI_PCSS_S_BSTA
    raising
      /VCXI/CX_CKX .
  methods GET_STARC
    returning
      value(RF_STARC) type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods GET_BWAX
    importing
      !IF_ARBPL type ARBPL
    returning
      value(RT_BWAX) type ZVCXI_PCSS_TT_BWAX
    raising
      /VCXI/CX_CKX .
  methods GET_CLASS_VALUE
    changing
      !CT_CLASS_VALUE type ZVCXI_PCSS_TT_CLASS_VALUE optional
      !CT_CLASS_VALUE_C type ZVCXI_PCSS_TT_CLASS_VALUE_C optional
    raising
      /VCXI/CX_CKX .
  methods GET_COWID
    returning
      value(RT_COWID) type ZVCXI_PCS_TT_COWID
    raising
      /VCXI/CX_CKX .
  class-methods GET_FLUTE_DESCR
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
    returning
      value(RF_FLUTE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FSTRUCT
    returning
      value(RT_FSTRUCT) type ZVCXI_PCSSC_TT_FSTRUCT
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
      !IF_TLAMI type ZVCXI_P0SS_TLAMI optional
    returning
      value(RR_CUST_BOARD) type ref to ZCL_VCXI_PCSS_CUST_BOARD
    raising
      /VCXI/CX_CKX .
  class-methods GET_MBOAR_DESCR
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_LANGU type LANGU default SY-LANGU
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_PWIDT
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RS_PWIDT) type ZVCXI_PCSS_S_PWIDT .
  methods GET_SPPAP
    returning
      value(RF_SPPAP) type ZVCXI_PCSS_SPPAP
    raising
      /VCXI/CX_CKX .
  class-methods GET_STARC_DESCR
    importing
      !IF_STARC type ZVCXI_PCSS_STARC
    returning
      value(RF_STARC_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRPR_DEFNC
    importing
      !IF_TPRPR type ZVCXI_PCS_TPRPR
    returning
      value(RF_DEFNC) type ZVCXI_PCS_DEFNC
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRPR_DESCR
    importing
      !IF_TPRPR type ZVCXI_PCS_TPRPR
    returning
      value(RF_TPRPR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_WAXCO_DESCR
    importing
      !IF_WAXCO type ZVCXI_PCSS_WAXCO
    returning
      value(RF_WAXCO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods IS_RELEASED
    returning
      value(RF_RELEASED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods IS_TPRPR_CYLBA
    importing
      !IF_TPRPR type ZVCXI_PCS_TPRPR
    returning
      value(RF_CYLBA) type ZVCXI_PCS_CYLBA
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_TC220 type standard table of ZVCXI_PCS_TC220 with default key .
  types:
    YT_TC210T type standard table of ZVCXI_PCS_TC210T with default key .
  types:
    YT_TC240T type standard table of ZVCXI_PCS_TC240T with default key .
  types:
    YT_TC250T type standard table of ZVCXI_PCS_TC250T with default key .
  types:
    YT_TC260T type standard table of ZVCXI_PCS_TC260T with default key .
  types:
    YT_TC261T type standard table of ZVCXI_PCS_TC261T with default key .
  types:
    YT_TC500  type standard table of ZVCXI_PCS_TC500 with default key .
  types:
    YT_TC500T  type standard table of ZVCXI_PCS_TC500T with default key .
  types:
    YT_TD270 type standard table of ZVCXI_PCS_TD270 with default key .

  data F_DATE type DATS .
  data R_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G .
  data R_BOARD_P type ref to ZCL_VCXI_PCSSC_BOARD_P .
  class-data T_INSTANCE type YT_INSTANCE .
  class-data T_TC210T type YT_TC210T .
  class-data T_TC220 type YT_TC220 .
  class-data T_TC240T type YT_TC240T .
  class-data T_TC250T type YT_TC250T .
  class-data T_TC260T type YT_TC260T .
  class-data T_TC261T type YT_TC261T .
  class-data T_TC500 type YT_TC500 .
  class-data T_TC500T type YT_TC500T .
  class-data T_TD270 type YT_TD270 .

  methods CONSTRUCTOR
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PCSS_CUST_BOARD definition
class ZCL_VCXI_PCSS_CUST_BOARD implementation.
method CLASS_CONSTRUCTOR.

*** Get Classification Description
  select * from ZVCXI_PCS_TC260T
         into table T_TC260T.

*** Get Classification Description
  select * from ZVCXI_PCS_TC261T
         into table T_TC261T.

*** Get Board Description Types
  select * from ZVCXI_PCS_TC220
         into table T_TC220.

*** Get Flute Description
  select * from ZVCXI_PCS_TC210T
         into table T_TC210T.

*** Get Wax Code Description
  select * from ZVCXI_PCS_TC240T
         into table T_TC240T.

*** Get Starch Code Description
  select * from ZVCXI_PCS_TC250T
         into table T_TC250T.

*** Get Preprint Type Informations
  select * from ZVCXI_PCS_TC500
         into table T_TC500.

*** Get Preprint Type Description
  select * from ZVCXI_PCS_TC500T
         into table T_TC500T.

*** Get Corrugation Tolerance
  select * from ZVCXI_PCS_TD270
         into table T_TD270.

endmethod.
  method CONSTRUCTOR.

    field-symbols: <S_INSTANCE> type YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Store Input
    move IF_BOARD to ME->F_BOARD.
    move IF_MBOAR to ME->F_MBOAR.
    move IF_WERKS to ME->F_WERKS.
    move IF_DATE  to ME->F_DATE.

***--------------------------------------------------------------------------------------
*** Get Global Version
    ME->R_BOARD_G = ZCL_VCXI_PCSSC_BOARD_G=>GET_INSTANCE_BY_DATE( IF_BOARD = ME->F_BOARD
                                                                  IF_MBOAR = ME->F_MBOAR
                                                                  IF_DATE  = ME->F_DATE ).

*** Get Plant Version
    ME->R_BOARD_P = ZCL_VCXI_PCSSC_BOARD_P=>GET_INSTANCE_BY_DATE( IR_BOARD_G = ME->R_BOARD_G
                                                                  IF_WERKS   = ME->F_WERKS
                                                                  IF_DATE    = ME->F_DATE ).

    move ME->R_BOARD_G->F_VALFR       to ME->F_VALFR.
    move ME->R_BOARD_G->F_VALTO       to ME->F_VALTO.
    move ME->R_BOARD_G->S_MBOAR-MBOAR to ME->F_MBOAR.
    move ME->R_BOARD_G->F_TBOAR       to ME->F_TBOAR.
    move ME->R_BOARD_P->F_NSTBG       to ME->F_SELFD.
    move ME->R_BOARD_P->F_FTBOA       to ME->F_FTBOA.
    move ME->R_BOARD_P->F_STATU       to ME->F_STATU.
    move ME->R_BOARD_P->S_MINWT       to ME->S_MINWT.

***--------------------------------------------------------------------------------------
*** Buffer Values
    move ME->R_BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to ME->F_FLUTE.

*** Initialize basic default Work Center
    ME->F_ARBPL = ME->GET_ARBPL( ).

***--------------------------------------------------------------------------------------
*** Add Instance to Instance Buffer
    append initial line to ZCL_VCXI_PCSS_CUST_BOARD=>T_INSTANCE assigning <S_INSTANCE>.
    move ME->F_BOARD to <S_INSTANCE>-BOARD.
    move ME->F_MBOAR to <S_INSTANCE>-MBOAR.
    move ME->F_WERKS to <S_INSTANCE>-WERKS.
    move ME->F_DATE  to <S_INSTANCE>-DATE.
    move ME          to <S_INSTANCE>-R_INSTANCE.

  endmethod.
method GET_ALL_TPRPR.

  data:          LS_TC500T type ZVCXI_PCS_TC500T,
                 LS_TC500  type ZVCXI_PCS_TC500.
  field-symbols: <S_TPRPR> type ZVCXI_PCSS_S_TPRPR.

  loop at T_TC500 into LS_TC500.
    append initial line to RT_TPRPR assigning <S_TPRPR>.
    move-corresponding LS_TC500 to <S_TPRPR>.

    read table T_TC500T with key TPRPR = LS_TC500-TPRPR
                                 LANGU = SY-LANGU
                        into LS_TC500T.

    if SY-SUBRC = 0.
      move LS_TC500T-DESCR to <S_TPRPR>-DESCR.
    endif.
  endloop.

endmethod.
method GET_APBOA.

  clear ET_APBOA.

*** Get assigend Production BoardID from PlantVerison
  move ME->R_BOARD_P->F_APBOA to RF_APBOA.

  append ME->R_BOARD_P->F_APBOA to ET_APBOA.
  append lines of ME->R_BOARD_P->T_APBOA to ET_APBOA.

endmethod.
  method GET_ARBPL.

    data:  LS_TD231  type          ZVCXI_PCS_TD231.
    data:  LT_TD231  type table of ZVCXI_PCS_TD231.


    select *
           into table LT_TD231
           from ZVCXI_PCS_TD231
          where TBOAR eq ME->R_BOARD_G->F_TBOAR
            and FENDL eq IF_FENDL
            and VALFR le ME->F_DATE
            and WERKS eq ME->F_WERKS
            and TLAMI eq IF_TLAMI
            and FLUTE eq ME->F_FLUTE.
    if SY-SUBRC ne 0.
      select *
             into table LT_TD231
             from ZVCXI_PCS_TD231
          where TBOAR eq ME->R_BOARD_G->F_TBOAR
            and FENDL eq IF_FENDL
            and VALFR le ME->F_DATE
            and WERKS eq ME->F_WERKS
            and TLAMI eq IF_TLAMI
            and FLUTE eq SPACE.

      if SY-SUBRC ne 0.
        select *
               into table LT_TD231
               from ZVCXI_PCS_TD231
            where TBOAR eq ME->R_BOARD_G->F_TBOAR
              and FENDL eq IF_FENDL
              and VALFR le ME->F_DATE
              and WERKS eq ME->F_WERKS
              and TLAMI eq SPACE
              and FLUTE eq ME->F_FLUTE.

        if SY-SUBRC ne 0.
          select *
                 into table LT_TD231
                 from ZVCXI_PCS_TD231
              where TBOAR eq ME->R_BOARD_G->F_TBOAR
                and FENDL eq IF_FENDL
                and VALFR le ME->F_DATE
                and WERKS eq ME->F_WERKS
                and TLAMI eq SPACE
                and FLUTE eq SPACE.
          if SY-SUBRC ne 0.
            select *
                   into table LT_TD231
                   from ZVCXI_PCS_TD231
                where TBOAR eq ME->R_BOARD_G->F_TBOAR
                  and FENDL eq IF_FENDL
                  and VALFR le ME->F_DATE
                  and WERKS eq SPACE
                  and TLAMI eq SPACE
                  and FLUTE eq SPACE.
          endif.
        endif.
      endif.
    endif.

    sort LT_TD231 by VALFR descending.
    read table LT_TD231 into LS_TD231 index 1.

    RF_ARBPL = LS_TD231-ARBPL.

  endmethod.
method GET_ASBOA.

*** Get assigend Sales BoardID'S from PlantVerison
  move ME->R_BOARD_P->T_ASBOA to RT_ASBOA.

endmethod.
method GET_BGWHT.

  data:  LS_FPLAI type ZVCXI_PCSSC_S_FPLAI.

  LS_FPLAI = ME->R_BOARD_G->R_FLUTE->GET_FPLAI_BY_DATE( IF_WERKS = ME->F_WERKS
                                                        IF_ARBPL = IF_ARBPL
                                                        IF_DATE  = ME->F_DATE ).

  move-corresponding LS_FPLAI to RS_BGWHT.

endmethod.
  method GET_BOARD_DESCR.

    data: LF_STRING type STRING.
    data: LS_TC220 type ZVCXI_PCS_TC220,
          LS_BODSC type ZVCXI_PCSSC_S_BODSC.
    data: LT_TC220 type YT_TC220.
    field-symbols: <S_BOARD_DESCR> type ZVCXI_PCSS_S_BOARD_DESCR.

***----------------------------------------------------------------------------
*** Get Board Description based on Customizing
    if CT_BOARD_DESCR is initial.
      LT_TC220 = ME->T_TC220.
      delete LT_TC220 where SVCDO eq 0.
      sort LT_TC220 by SVCDO.  "Sort by Display Order
      loop at LT_TC220 into LS_TC220.
        append value #( IDEST = LS_TC220-IDEST ) to CT_BOARD_DESCR.
      endloop.
    endif.

***----------------------------------------------------------------------------
*** Get Global Descriptions
    loop at CT_BOARD_DESCR assigning <S_BOARD_DESCR>.
      read table ME->R_BOARD_G->T_BODSC into LS_BODSC with key IDEST = <S_BOARD_DESCR>-IDEST
                                                               LANGU = SY-LANGU.
      check SY-SUBRC eq 0.
      move-corresponding LS_BODSC to <S_BOARD_DESCR>.
    endloop.

*** Get Plant Descriptions
    loop at CT_BOARD_DESCR assigning <S_BOARD_DESCR>.
      read table ME->R_BOARD_P->T_BODSC into LS_BODSC with key IDEST = <S_BOARD_DESCR>-IDEST
                                                               LANGU = SY-LANGU.
      check SY-SUBRC eq 0.
      move-corresponding LS_BODSC to <S_BOARD_DESCR>.
    endloop.

***----------------------------------------------------------------------------
*** Combine into one String
    loop at CT_BOARD_DESCR assigning <S_BOARD_DESCR>
                          where DESCR is not initial.
      if SY-TABIX eq 1.
        move <S_BOARD_DESCR>-DESCR to LF_STRING.
      else.
        concatenate LF_STRING <S_BOARD_DESCR>-DESCR
               into LF_STRING separated by '/'.
      endif.
    endloop.
    move LF_STRING to RF_DESCR.

  endmethod.
  method GET_BPAID_DESCR.

*    statics: LT_D07V   type standard table of DD07V.
*
*
**** Identify Paper ID Description
*    if LT_D07V is initial.
*      call function 'DD_DOMVALUES_GET'
*        exporting
*          DOMNAME   = 'ZVCXI_PCS_BPAID'
*          TEXT      = 'X'
*          LANGU     = SY-LANGU
*        tables
*          DD07V_TAB = LT_D07V.
*    endif.
*
*    RF_DESCR = value #( LT_D07V[ DOMVALUE_L = IF_BPAID ]-DDTEXT optional ).

  endmethod.
method GET_BPAP.

  data:          LS_COWID    type ZVCXI_PCSSC_S_COWID,
                 LS_PAPER    type ZVCXI_PCSSC_S_PAPER,
                 LS_FPAPI    type ZVCXI_PCSSC_S_FPAPI,
                 LS_FSTRUCT  type ZVCXI_PCSSC_S_FSTRUCT.
  data:          LT_PAPER    type ZVCXI_PCSSC_TT_PAPER.
  field-symbols: <S_PAPER>   type ZVCXI_PCSSC_S_PAPER,
                 <S_BPAP>    type ZVCXI_PCSS_S_BPAP.

***----------------------------------------------------------------------------
*** Set Standard Board Grade Papers
  if ME->R_BOARD_G->S_MBOAR-BPAPL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
    move ME->R_BOARD_G->T_PAPER to LT_PAPER.
  else.
    move ME->R_BOARD_P->T_PAPER to LT_PAPER.
  endif.

***----------------------------------------------------------------------------
*** if Board Grade Width is supplied -> check if special Papers need to be used
  if IS_BOARW       is     supplied and
     IS_BOARW-BOARW is not initial.

*** Check if Special Papers exist for Board Grade Width
    read table ME->R_BOARD_P->T_COWID into LS_COWID
                                      with key COWID     = IS_BOARW-BOARW
                                               COWID_UOM = IS_BOARW-BOARW_UOM
                                               ACTIV     = ABAP_TRUE.
    if SY-SUBRC eq 0.
***   Use specific Papers
      loop at LT_PAPER assigning <S_PAPER>.
        read table LS_COWID-T_PAPER into LS_PAPER
                                    with key BPAID = <S_PAPER>-BPAID.
        if SY-SUBRC eq 0.
          if LS_PAPER-BPMAT is not initial or
             LS_COWID-FPLBW ne ABAP_TRUE.
            move LS_PAPER-BPMAT to <S_PAPER>-BPMAT.
          endif.
        else.
          clear <S_PAPER>-BPMAT.
        endif.
      endloop.
    endif.
  endif.

***----------------------------------------------------------------------------
  loop at LT_PAPER into LS_PAPER.
*** Don't return optional Papers without Material Number
    if LS_PAPER-BPMAT is initial.
      read table ME->R_BOARD_G->R_FLUTE->T_FSTRUCT into LS_FSTRUCT
                                                   with key BPAID = LS_PAPER-BPAID.
      check LS_FSTRUCT-OBLIG eq ABAP_TRUE.
    endif.

*** Return Papers
    append initial line to RT_BPAP assigning <S_BPAP>.

    move LS_PAPER-BPAID to <S_BPAP>-BPAID.
    move LS_PAPER-BPMAT to <S_BPAP>-BPMAT.
    move LS_PAPER-WAXCO to <S_BPAP>-WAXCO.

*** Add Paper Factors
    LS_FPAPI = ME->R_BOARD_G->R_FLUTE->GET_FPAPI_BY_DATE( IF_WERKS = ME->F_WERKS
                                                          IF_ARBPL = IF_ARBPL
                                                          IF_BPAID = <S_BPAP>-BPAID
                                                          IF_DATE  = ME->F_DATE ).
    move LS_FPAPI-BPFAC to <S_BPAP>-BPFAC.
  endloop.

endmethod.
method GET_BSTA.

  data: LS_TD250 type          ZVCXI_PCS_TD250,
        LS_FPLAI type          ZVCXI_PCSSC_S_FPLAI.
  data: LT_TD250 type table of ZVCXI_PCS_TD250.


*** Get Starch Code
  RS_BSTA-STARC = ME->GET_STARC( ).

***----------------------------------------------------------------------------
*** Get Starch Material
  select * into table LT_TD250
           from ZVCXI_PCS_TD250
          where STARC eq RS_BSTA-STARC
           and  WERKS eq ME->F_WERKS
           and  VALFR le ME->F_DATE.
  if SY-SUBRC ne 0.
    select * into table LT_TD250
             from ZVCXI_PCS_TD250
            where STARC eq RS_BSTA-STARC
             and  WERKS eq SPACE
             and  VALFR le ME->F_DATE.
  endif.
  sort LT_TD250 by VALFR descending.
  read table LT_TD250 into LS_TD250 index 1.

  move LS_TD250-STMAT to RS_BSTA-STMAT.

***----------------------------------------------------------------------------
*** Get Starch Factor
  LS_FPLAI = ME->R_BOARD_G->R_FLUTE->GET_FPLAI_BY_DATE( IF_WERKS = ME->F_WERKS
                                                        IF_ARBPL = IF_ARBPL
                                                        IF_DATE  = ME->F_DATE ).
  move LS_FPLAI-STARF to RS_BSTA-STARF.

endmethod.
method GET_BWAX.

  data:          LS_BPAP    type                   ZVCXI_PCSS_S_BPAP,
                 LS_TD240   type                   ZVCXI_PCS_TD240.
  data:          LT_BPAP    type                   ZVCXI_PCSS_TT_BPAP,
                 LT_TD240   type standard table of ZVCXI_PCS_TD240.
  field-symbols: <S_BWAX>   type                   ZVCXI_PCSS_S_BWAX.

***----------------------------------------------------------------------------
*** Get Paper
  LT_BPAP = ME->GET_BPAP( IF_ARBPL = IF_ARBPL ).

***----------------------------------------------------------------------------
*** Collect Wax Codes
  loop at LT_BPAP into LS_BPAP
                 where WAXCO is not initial.
    read table RT_BWAX assigning <S_BWAX>
                       with key WAXCO = LS_BPAP-WAXCO.
    if SY-SUBRC ne 0.
      append initial line to RT_BWAX assigning <S_BWAX>.
      move LS_BPAP-WAXCO to <S_BWAX>-WAXCO.
    endif.
    add LS_BPAP-BPFAC to <S_BWAX>-WAXFA.

***----------------------------------------------------------------------------
*** Get Wax Material
    select * into table LT_TD240
             from ZVCXI_PCS_TD240
            where WAXCO eq <S_BWAX>-WAXCO
             and  WERKS eq ME->F_WERKS
             and  VALFR le ME->F_DATE.
    if SY-SUBRC ne 0.
      select * into table LT_TD240
               from ZVCXI_PCS_TD240
              where WAXCO eq <S_BWAX>-WAXCO
               and  WERKS eq SPACE
               and  VALFR le ME->F_DATE.
    endif.
    sort LT_TD240 by VALFR descending.
    read table LT_TD240 into LS_TD240 index 1.

    move LS_TD240-WAMAT to <S_BWAX>-WAMAT.

  endloop.

endmethod.
method GET_CLASS_VALUE.

  data:          LS_CLAVA          type ZVCXI_PCSSC_S_CLAVA_P,
                 LS_TC260T         type ZVCXI_PCS_TC260T,
                 LS_CLAVC          type ZVCXI_PCSSC_S_CLAVC_P,
                 LS_TC261T         type ZVCXI_PCS_TC261T,
                 LS_DESCR          type /VCXI/CKX_S_DESCR.
  data:          LT_DESCR_NUM      type /VCXI/CKX_TT_DESCR,
                 LT_DESCR_CHAR     type /VCXI/CKX_TT_DESCR.
  field-symbols: <S_CLASS_VALUE>   type ZVCXI_PCSS_S_CLASS_VALUE,
                 <S_CLASS_VALUE_C> type ZVCXI_PCSS_S_CLASS_VALUE_C,
                 <S_DESCR>         type /VCXI/CKX_S_DESCR.

*** Return Numeric
  loop at CT_CLASS_VALUE assigning <S_CLASS_VALUE>.
    read table ME->R_BOARD_P->T_CLAVA_P into LS_CLAVA with key ICLAT = <S_CLASS_VALUE>-ICLAT.
    if SY-SUBRC eq 0.
      move-corresponding LS_CLAVA to <S_CLASS_VALUE>.
    endif.

    clear: LT_DESCR_NUM.
    loop at T_TC260T into LS_TC260T
      where ICLAT = <S_CLASS_VALUE>-ICLAT.
      append initial line to LT_DESCR_NUM assigning <S_DESCR>.
      move-corresponding LS_TC260T to <S_DESCR>.
    endloop.

    <S_CLASS_VALUE>-CLASS_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR_NUM ).
    if <S_CLASS_VALUE>-CLASS_DESCR is initial.
      delete CT_CLASS_VALUE.
    endif.
  endloop.

*** Return Character
  loop at CT_CLASS_VALUE_C assigning <S_CLASS_VALUE_C>.
    read table ME->R_BOARD_P->T_CLAVC_P into LS_CLAVC with key ICLAT = <S_CLASS_VALUE_C>-ICLAT.
    if SY-SUBRC eq 0.
      move-corresponding LS_CLAVC to <S_CLASS_VALUE_C>.
    endif.

    clear: LT_DESCR_CHAR.
    loop at T_TC261T into LS_TC261T
      where ICLAT = <S_CLASS_VALUE_C>-ICLAT.
      append initial line to LT_DESCR_CHAR assigning <S_DESCR>.
      move-corresponding LS_TC261T to <S_DESCR>.
    endloop.

    <S_CLASS_VALUE_C>-CLASS_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR_CHAR ).
    if <S_CLASS_VALUE_C>-CLASS_DESCR is initial.
      delete CT_CLASS_VALUE_C.
    endif.
  endloop.

endmethod.
method GET_COWID.

  data:          LS_COWID  type ZVCXI_PCSSC_S_COWID.
  field-symbols: <S_COWID> type ZVCXI_PCS_S_COWID.

  loop at ME->R_BOARD_P->T_COWID into LS_COWID
                                 where ACTIV eq ABAP_TRUE.
    append initial line to RT_COWID assigning <S_COWID>.
    move-corresponding LS_COWID to <S_COWID>.
  endloop.

endmethod.
method GET_FLUTE_DESCR.

  data: LS_TC210T type ZVCXI_PCS_TC210T.

  read table T_TC210T with key FLUTE = IF_FLUTE
                               LANGU = SY-LANGU
                      into LS_TC210T.

  check SY-SUBRC = 0.
  move LS_TC210T-DESCR to RF_FLUTE_DESCR.

endmethod.
  method GET_FSTRUCT.

    check ME->R_BOARD_G is bound and
          ME->R_BOARD_G->R_FLUTE is bound.

    RT_FSTRUCT = ME->R_BOARD_G->R_FLUTE->T_FSTRUCT.
    sort RT_FSTRUCT by SEQNR.

  endmethod.
method GET_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_PCSS_CUST_BOARD=>T_INSTANCE into LS_INSTANCE
                                              with key BOARD = IF_BOARD
                                                       MBOAR = IF_MBOAR
                                                       WERKS = IF_WERKS
                                                       DATE  = IF_DATE.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_INSTANCE to RR_CUST_BOARD.
  else.
    create object RR_CUST_BOARD
      exporting
        IF_BOARD = IF_BOARD
        IF_MBOAR = IF_MBOAR
        IF_WERKS = IF_WERKS
        IF_DATE  = IF_DATE.
  endif.

endmethod.
  method GET_MBOAR_DESCR.

    select single DESCR
           from ZVCXI_PCS_TC201T
           into RF_DESCR
          where MBOAR = IF_MBOAR
           and  LANGU = IF_LANGU.
    if SY-SUBRC ne 0.
***   Alternatively English
      select single DESCR
             from ZVCXI_PCS_TC201T
             into RF_DESCR
            where MBOAR = IF_MBOAR
             and  LANGU = 'E'.
      if SY-SUBRC ne 0.
***     Fall-back any language
        select single DESCR
               from ZVCXI_PCS_TC201T
               into RF_DESCR
              where MBOAR = IF_MBOAR.
      endif.
    endif.

  endmethod.
  method GET_PWIDT.

    data: LS_TD270 type ZVCXI_PCS_TD270.


*** Read depending Tolerance
    read table T_TD270 with key WERKS = IF_WERKS into LS_TD270.
    if SY-SUBRC eq 0.
      move-corresponding LS_TD270 to RS_PWIDT.
    else.
      RS_PWIDT = value #( PWIDT     = 0
                          PWIDT_UOM = 'MM' ).
    endif.

  endmethod.
method GET_SPPAP.

  check ME->R_BOARD_P is bound.
  RF_SPPAP = ME->R_BOARD_P->F_SPPAP.

endmethod.
  method GET_STARC.

    if ME->R_BOARD_G->S_MBOAR-BSTAL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
      move ME->R_BOARD_G->F_STARC to RF_STARC.
    else.
      move ME->R_BOARD_P->F_STARC to RF_STARC.
    endif.

  endmethod.
method GET_STARC_DESCR.

  data: LS_TC250T type ZVCXI_PCS_TC250T.

  read table T_TC250T with key STARC = IF_STARC
                               LANGU = SY-LANGU
                      into LS_TC250T.

  check SY-SUBRC = 0.
  move LS_TC250T-DESCR to RF_STARC_DESCR.

endmethod.
method GET_TPRPR_DEFNC.

  data: LS_TC500 type ZVCXI_PCS_TC500.

  read table T_TC500 with key TPRPR = IF_TPRPR
                     into LS_TC500.

  check SY-SUBRC = 0.
  move LS_TC500-DEFNC to RF_DEFNC.

endmethod.
method GET_TPRPR_DESCR.

  data: LS_TC500T type ZVCXI_PCS_TC500T.

  read table T_TC500T with key TPRPR = IF_TPRPR
                               LANGU = SY-LANGU
                      into LS_TC500T.

  check SY-SUBRC = 0.
  move LS_TC500T-DESCR to RF_TPRPR_DESCR.

endmethod.
method GET_WAXCO_DESCR.

  data: LS_TC240T type ZVCXI_PCS_TC240T.

  read table T_TC240T with key WAXCO = IF_WAXCO
                               LANGU = SY-LANGU
                      into LS_TC240T.

  check SY-SUBRC = 0.
  move LS_TC240T-DESCR to RF_WAXCO_DESCR.

endmethod.
method IS_RELEASED.

  move ME->R_BOARD_P->IS_RELEASED( ) to RF_RELEASED.

endmethod.
method IS_TPRPR_CYLBA.

  data: LS_TC500 type ZVCXI_PCS_TC500.

  read table T_TC500 with key TPRPR = IF_TPRPR
                     into LS_TC500.

  check SY-SUBRC = 0.
  move LS_TC500-CYLBA to RF_CYLBA.

endmethod.
  method SHLP_LOAD_BOARD.

    data: LS_SHLP   type SHLP_DESCR,
          LS_RETURN type DDSHRETVAL.
    data: LT_RETURN type table of DDSHRETVAL.


***----------------------------------------------------------------------------
*** Prepare Search Help for Board (general)
    call function 'F4IF_GET_SHLP_DESCR'
      exporting
        SHLPNAME = 'ZVCXI_PCS_BOARD'
      importing
        SHLP     = LS_SHLP.

*** Request all Fields
    loop at LS_SHLP-INTERFACE assigning field-symbol(<S_INTERFACE>)
                              where SHLPFIELD eq 'BOARD'
                               or   SHLPFIELD eq 'WERKS'
                               or   SHLPFIELD eq 'MBOAR'.
      <S_INTERFACE>-VALFIELD = ABAP_TRUE.
    endloop.

*** Call Search Help
    call function 'F4IF_START_VALUE_REQUEST'
      exporting
        SHLP          = LS_SHLP
        DISPONLY      = switch #( IF_LOCKED when ABAP_FALSE then ABAP_TRUE )
      tables
        RETURN_VALUES = LT_RETURN.

***----------------------------------------------------------------------------
*** Get Result
    loop at LT_RETURN into LS_RETURN.
      case LS_RETURN-FIELDNAME.
        when 'BOARD'.
          move LS_RETURN-FIELDVAL to EF_BOARD.
        when 'WERKS'.
          move LS_RETURN-FIELDVAL to EF_WERKS.
        when 'MBOAR'.
          move LS_RETURN-FIELDVAL to EF_MBOAR.
      endcase.
    endloop.

  endmethod.
