
class ZCL_VCXI_P0SS_PR_SPEC_SE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_ICONT .
  interfaces ZIF_VCXI_P0SS_PRALLOC .
  interfaces ZIF_VCXI_XCSS_OPQTY .

  aliases C_ICONT_PROD
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_PROD .
  aliases C_ICONT_SALES
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_SALES .
  aliases C_IEVNT_O_ICONT_CHANGED
    for ZIF_VCXI_P0SS_ICONT~C_IEVNT_O_ICONT_CHANGED .
  aliases C_IPRVT_P0_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_IPRVT_P0_ICONT .
  aliases C_PARID_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_PARID_ICONT .
  aliases GET_ICONT
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT .
  aliases GET_ICONT_DESCR
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR .
  aliases SET_ICONT
    for ZIF_VCXI_P0SS_ICONT~SET_ICONT .

  constants C_IPRVT_P0_SPEC_SE type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SPEC_SE'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT

  type-pools ABAP .
  methods IS_PRINT_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TLAMI
    returning
      value(RT_TLAMI) type ZVCXI_P0SS_TT_TLAMI
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TLAGC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_TLAGC) type ZVCXI_P0SS_TT_TLAGC
    raising
      /VCXI/CX_CKX .
  methods GET_COMPR
    returning
      value(RF_COMPR) type ZVCXI_P0SS_COMPR
    raising
      /VCXI/CX_CKX .
  methods CALC_COMP_DIKEY
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods CHECK_SALES_ACTIV
    returning
      value(RF_SALES_ACTIV) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CREATE_VLASH_I
    importing
      !IF_VLASH type ZVCXI_P0SS_VLASH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CREATE_VLASH_O
    importing
      !IF_VLASH type ZVCXI_P0SS_VLASH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VLASH_I
    returning
      value(RT_VLASH) type ZVCXI_P0SS_TT_VLASH
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VLASH_O
    returning
      value(RT_VLASH) type ZVCXI_P0SS_TT_VLASH
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    importing
      !IF_POOTI type ZVCXI_P0S_POOTI
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_COMPN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_DCUTT
    returning
      value(RF_DCUTT) type ZVCXI_P0SS_DCUTT
    raising
      /VCXI/CX_CKX .
  methods GET_FSHTP
    returning
      value(RF_FSHTP) type ZVCXI_P0SS_FSHTP
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM_I
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM_O
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_I
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_O
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOI
    returning
      value(RF_NOCOI) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOO
    returning
      value(RF_NOCOO) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR_I
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR_O
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI
    returning
      value(RF_PRTYI) type ZVCXI_P0SS_PRTYI
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI_DESCR
    returning
      value(RF_PRTYI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO
    returning
      value(RF_PRTYO) type ZVCXI_P0SS_PRTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO_DESCR
    returning
      value(RF_PRTYO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TILAM
    returning
      value(RF_TILAM) type ZVCXI_P0SS_TILAM
    raising
      /VCXI/CX_CKX .
  methods GET_TOLAM
    returning
      value(RF_TOLAM) type ZVCXI_P0SS_TOLAM
    raising
      /VCXI/CX_CKX .
  methods GET_VLASH_I
    returning
      value(RR_VLASH) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_VLASH_O
    returning
      value(RR_VLASH) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_LAMI_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRALI
    returning
      value(RF_PRALL) type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods GET_PRALLOC
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRALL type ZVCXI_P0SS_PRALL optional
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods IS_PRINT_SE_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_PRALL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RT_PRALL) type ZVCXI_P0SS_TT_PRALL
    raising
      /VCXI/CX_CKX .
  methods GET_PRALO
    returning
      value(RF_PRALL) type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_EDITABLE_I
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_EDITABLE_O
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_VISIBLE_I
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_VISIBLE_O
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_DCUTT
    importing
      !IF_DCUTT type ZVCXI_P0SS_DCUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FSHTP
    importing
      !IF_FSHTP type ZVCXI_P0SS_FSHTP
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM_I
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM_O
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR_I
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR_O
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOI
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOO
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR_I
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR_O
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYI
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYO
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TILAM
    importing
      !IF_TILAM type ZVCXI_P0SS_TILAM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TOLAM
    importing
      !IF_TOLAM type ZVCXI_P0SS_TOLAM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods SET_PRALI
    importing
      !IF_PRALL type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods SET_PRALO
    importing
      !IF_PRALL type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_PRINT type /VCXI/VKSC_IEVNT value 'INIT_PRINT'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_PRINT_DATA type /VCXI/VKSC_IEVNT value 'RECALC_PRINT_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_I_UPDATE_COMP_PRINT type /VCXI/VKSC_IEVNT value 'UPDATE_COMP_PRINT'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT
  data R_DCT type ref to ZIF_VCXI_P0SS_DCT .

  methods SET_PRINT_DATA_MS_SHTPR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_DATA_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_DATA_SE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_DATA_SP_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_MARK
    importing
      !IT_COLCO type ZVCXI_P0SS_TT_PRINT_COLCO_SE
      !IT_MARK type ZVCXI_P0SS_TT_PRINT_MARK_SE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_MS_INK
    importing
      !IT_COLCO type ZVCXI_P0SS_TT_PRINT_COLCO_SE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_SP_INK
    importing
      !IT_COLCO type ZVCXI_P0SS_TT_PRINT_COLCO_SE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_SP_PRINT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_PRINT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_MS_SHTPR
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UPDATE_COMP_PRINT
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_PART_COMP_SE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRINT_DATA_SE
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RS_PRINT_DATA_SE) type ZVCXI_P0SS_S_PRINT_DATA_SE
    raising
      /VCXI/CX_CKX .
  methods CALC_PRINT_DATA
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRINT_DATA
    importing
      !IT_GATE_PROVIDER type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIKEY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLAMI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CREATE_SHTPR
    returning
      value(RR_GATE_SHTPR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_LAMI
    importing
      !IF_LASID type ZVCXI_P0SS_LASID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRINT_SE
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_CREATE type ABAP_BOOL default ABAP_FALSE
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL
    returning
      value(RR_DIECUT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods REMOVE_EMPTY_LAMI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods REMOVE_EMPTY_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SPEC_SE definition
class ZCL_VCXI_P0SS_PR_SPEC_SE implementation.
method CALC_COMP_DIKEY.

  data:          LF_NOUPS             type        ZVCXI_P0SS_NOUPS.
  data:          LS_ABLAS             type        ZVCXI_P0SS_S_ABLAS,
                 LS_ABLAS_REQ         type        ZVCXI_P0SS_S_ABLAS,
                 LS_ABLAG             type        ZVCXI_P0SS_S_ABLAG,
                 LS_SHTPL             type        ZVCXI_P0SS_S_SHTPL,
                 LS_SHTPW             type        ZVCXI_P0SS_S_SHTPW,
                 LS_DIKEY             type        ZVCXI_P0SS_S_DIKEY.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_SE           type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CO           type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_FG           type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE        type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_CO        type ref to ZCL_VCXI_P0SS_PR_COMP_CO,
                 LR_PR_COMP_FG        type ref to ZCL_VCXI_P0SS_PR_COMP_FG.

*** Get Gates of Components SE
  LT_GATE_SE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                      IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE_SE to LT_GATE.

*** Get Gates of Components CO
  LT_GATE_CO = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                      IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE_CO to LT_GATE.

*** Get Gates of Components FG
  LT_GATE_FG = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                      IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE_FG to LT_GATE.

*** Sort Components
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).


  loop at LT_GATE into LR_GATE.
    clear: LS_SHTPL, LS_SHTPW, LS_ABLAS, LS_DIKEY.

***------------------------------------------------------------------------------------------------
*** First Try Comp SE
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
    if LR_PR_COMP_SE is bound.
***   Get Product Area
      LS_SHTPL = LR_PR_COMP_SE->GET_SHTPL( ).
      LS_SHTPW = LR_PR_COMP_SE->GET_SHTPW( ).
      LF_NOUPS = LR_PR_COMP_SE->GET_NOUPS( ).
      LS_DIKEY = LR_PR_COMP_SE->GET_DIKEY( ).
    else.
***------------------------------------------------------------------------------------------------
***   Second Try Comp CO
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_COMP_CO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_COMP_CO.
      endtry.
      if LR_PR_COMP_CO is bound.
***     Get Product Area
        LS_SHTPL = LR_PR_COMP_CO->GET_SHTPL( ).
        LS_SHTPW = LR_PR_COMP_CO->GET_SHTPW( ).
        LF_NOUPS = LR_PR_COMP_CO->GET_NOUPS( ).
        LS_DIKEY = LR_PR_COMP_CO->GET_DIKEY( ).
      else.
***------------------------------------------------------------------------------------------------
***     Third Try Comp FG
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_COMP_FG.
        endtry.
        if LR_PR_COMP_FG is bound.
***       Get Product Area
          LS_SHTPL = LR_PR_COMP_FG->GET_SHTPL( ).
          LS_SHTPW = LR_PR_COMP_FG->GET_SHTPW( ).
          LF_NOUPS = LR_PR_COMP_FG->GET_NOUPS( ).
          LS_DIKEY = LR_PR_COMP_FG->GET_DIKEY( ).
        else.
          continue.
        endif.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Calculate Sold Blank Area
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTPL-SHTPL
                                                        IF_CALCV_UOM_1 = LS_SHTPL-SHTPL_UOM
                                                        IF_CALCV_2     = LS_SHTPW-SHTPW
                                                        IF_CALCV_UOM_2 = LS_SHTPW-SHTPW_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = 'M2'
                                              importing EF_CALCV       = LS_ABLAS-ABLAS
                                                        EF_CALCV_UOM   = LS_ABLAS-ABLAS_UOM ).

    LS_ABLAS-ABLAS = LS_ABLAS-ABLAS * LF_NOUPS.

*** Save Requester Area and Current Distribution Key
    if IR_GATE eq LR_GATE.
      move-corresponding LS_ABLAS to LS_ABLAS_REQ.
      RS_DIKEY = LS_DIKEY.
    endif.

***------------------------------------------------------------------------------------------------
*** Calculate Total Area
    if LS_ABLAG-ABLAG_UOM is initial and
       LS_ABLAG-ABLAG     is initial.

      move LS_ABLAS-ABLAS     to LS_ABLAG-ABLAG.
      move LS_ABLAS-ABLAS_UOM to LS_ABLAG-ABLAG_UOM.

    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ABLAS-ABLAS
                                                          IF_CALCV_UOM_1 = LS_ABLAS-ABLAS_UOM
                                                          IF_CALCV_2     = LS_ABLAG-ABLAG
                                                          IF_CALCV_UOM_2 = LS_ABLAG-ABLAG_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = 'M2'
                                                importing EF_CALCV       = LS_ABLAG-ABLAG
                                                          EF_CALCV_UOM   = LS_ABLAG-ABLAG_UOM ).
    endif.

  endloop.

***------------------------------------------------------------------------------------------------
*** Calculate Distribution Key
  RS_DIKEY-DIKEY = LS_ABLAS_REQ-ABLAS / LS_ABLAG-ABLAG * 100.

endmethod.
method CALC_PRINT_DATA.

  data: LS_PRINT_DATA_SE type        ZVCXI_P0SS_S_PRINT_DATA_SE.
  data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

*** --------------------------------------------------------------------------------
*** Get Collected Printing Data for SE Header
  LS_PRINT_DATA_SE = ME->GET_PRINT_DATA_SE( IF_PRSID = IF_PRSID ).

*** Get current Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = IF_PRSID ).

  if LS_PRINT_DATA_SE is not initial.
    if LR_GATE is not bound.
      LR_GATE = ME->GET_PRALLOC( IF_PRSID = IF_PRSID
                                 IF_PRALL = SPACE ).
    endif.

    if LR_GATE is bound.
***   Set Print Data
      ME->SET_PRINT_DATA_SE( IR_GATE          = LR_GATE
                             IS_PRINT_DATA_SE = LS_PRINT_DATA_SE ).
    endif.
  else.
    if LR_GATE is bound.
***   Remove Print
      LS_PRINT_DATA_SE-PRSID = IF_PRSID.
      ME->SET_PRINT_DATA_SE( IR_GATE          = LR_GATE
                             IS_PRINT_DATA_SE = LS_PRINT_DATA_SE ).
    endif.
  endif.

endmethod.
method CHECK_COMP.
*** 0 => At least 2 Components are maintained.
*** 1 => At least 2 Components need to be maintained.

  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_TOTAL        type        /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Get Gates of Components SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_TOTAL.

*** Get Gates of Components CO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_TOTAL.

*** Get Gates of Components FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_TOTAL.

***------------------------------------------------------------------------------------------------
*** Check Number of Components
  if lines( LT_GATE_TOTAL ) ge 2.
    move 0 to RF_RETURN.
  else.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_DIKEY.
*** 0 => Distribution Key is maintained
*** 1 => Distribution Key is not maintained
*** 2 => Distribution Key is not 100%

  data:          LS_DIKEY             type        ZVCXI_P0SS_S_DIKEY,
                 LS_DIKEY_TOTAL       type        ZVCXI_P0SS_S_DIKEY.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE        type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_CO        type ref to ZCL_VCXI_P0SS_PR_COMP_CO,
                 LR_PR_COMP_FG        type ref to ZCL_VCXI_P0SS_PR_COMP_FG.

***------------------------------------------------------------------------------------------------
*** Get Gates of Components SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
        check LR_PR_COMP_SE is bound.

        LS_DIKEY = LR_PR_COMP_SE->GET_DIKEY( ).
        if LS_DIKEY_TOTAL-DIKEY is initial.
          move LS_DIKEY to LS_DIKEY_TOTAL.
        else.
          LS_DIKEY_TOTAL-DIKEY = LS_DIKEY-DIKEY + LS_DIKEY_TOTAL-DIKEY.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Add also Component CO
*** Get Gates of Components CO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_CO.
        check LR_PR_COMP_CO is bound.

        LS_DIKEY = LR_PR_COMP_CO->GET_DIKEY( ).
        if LS_DIKEY_TOTAL-DIKEY is initial.
          move LS_DIKEY to LS_DIKEY_TOTAL.
        else.
          LS_DIKEY_TOTAL-DIKEY = LS_DIKEY-DIKEY + LS_DIKEY_TOTAL-DIKEY.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_CO.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Add also Component FG
*** Get Gates of Components FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        check LR_PR_COMP_FG is bound.

        LS_DIKEY = LR_PR_COMP_FG->GET_DIKEY( ).
        if LS_DIKEY_TOTAL-DIKEY is initial.
          move LS_DIKEY to LS_DIKEY_TOTAL.
        else.
          LS_DIKEY_TOTAL-DIKEY = LS_DIKEY-DIKEY + LS_DIKEY_TOTAL-DIKEY.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_FG.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Check Total Distriubtion Key
  if LS_DIKEY_TOTAL-DIKEY is initial.
    move 1 to RF_RETURN.
  elseif LS_DIKEY_TOTAL-DIKEY ne '100'.
    move 2 to RF_RETURN.
  endif.

endmethod.
method CHECK_PART_COMP_SE.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Component SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    check LR_GATE                                  eq IR_GATE or
          LR_GATE->IS_IN_LINE( IR_GATE = IR_GATE ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_RETURN.
    exit.
  endloop.

endmethod.
method CHECK_SALES_ACTIV.

  if ME->GET_ICONT( ) eq ZCL_VCXI_P0SS_PR_SPEC=>C_ICONT_SALES.
    RF_SALES_ACTIV = ABAP_TRUE.
  endif.

endmethod.
method CHECK_TLAMI.

*** 0 No Lamination at all.
*** 1 Lamination Type(s) are maintained correctly.
*** 2 Inline Lamination is maintained twice.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get all Lamination
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        check LR_PR_LAMI is bound and
              LR_PR_LAMI->GET_TLAMI( ) eq ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_RTS.
        add 1 to RF_RETURN.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_PARID        type        /VCXI/VKS_PARID,
         LF_CHECK        type        CHAR30,
         LF_INVALID      type        ABAP_BOOL,
         LF_MSGV1        type        SYMSGV.
  data:  LR_DIECUT_TOOL  type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET       type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA        type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC        type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM        type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN        type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT        type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID        type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT        type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool
  LR_DIECUT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Die Cut Tool
  check LR_DIECUT_TOOL is bound.
  append ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO to LT_SETID.
  LR_DIECUT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Die Cut Tool Mapping Mapping
  read table LR_DIECUT_TOOL->T_MAPSET into LS_MAPSET with key SETID = ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq ZCL_VCXI_P0SS_PR_SHEET=>C_CHECK_TOOL and
          LF_PARID is not initial.


    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CREATE_SHTPR.

  data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

*** Get Sheet Procurement Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  if lines( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Create Sheet Procurement
  RR_GATE_SHTPR = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

endmethod.
method CREATE_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Laminating Sheet Variant
  if IF_VLASH is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

***--------------------------------------------------------------------------------------
*** Clear Laminating Sheet Variant
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method CREATE_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Laminating Sheet Variant
  if IF_VLASH is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

***--------------------------------------------------------------------------------------
*** Clear Laminating Sheet Variant
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method GET_ALL_PRALL.

  data:          LF_LASID         type        ZVCXI_P0SS_LASID,
                 LF_CHANGEABLE    type        ABAP_BOOL.
  data:          LT_GATE          type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_PRALLOC  type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_PRALLOC  type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_CURR     type ref to /VCXI/CL_VKSR_GATE,
                 LR_PRALLOC       type ref to ZIF_VCXI_P0SS_PRALLOC.
  field-symbols: <S_PRALL>        type        ZVCXI_P0SS_S_PRALL.

***--------------------------------------------------------------------------------------
*** Get current Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = IF_PRSID ).

***--------------------------------------------------------------------------------------
*** Check "Specification"
  append ME->R_GATE to LT_GATE_PRALLOC.

*** Check Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

*** Check Lamination
  case IF_PRSID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O to LF_LASID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I to LF_LASID.
  endcase.
  LR_GATE = ME->GET_LAMI( IF_LASID  = LF_LASID
                          IF_CREATE = ABAP_FALSE ).
  if LR_GATE is bound.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

***--------------------------------------------------------------------------------------
*** Process all potential Print Allocations
  loop at LT_GATE_PRALLOC into LR_GATE_PRALLOC.
    try.
        move LR_GATE_PRALLOC->R_CLSPR ?to LR_PRALLOC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PRALLOC.
    endtry.
    check LR_PRALLOC is bound.

*** Reduce to possible
    if LR_GATE_PRALLOC ne LR_GATE_CURR.
      LR_PRALLOC->GET_PRINFO( exporting IF_PRSID      = IF_PRSID
                                        IF_CREATE     = ABAP_FALSE
                              importing EF_CHANGEABLE = LF_CHANGEABLE ).
      check LF_CHANGEABLE eq ABAP_TRUE.
    endif.

*** Build Allocation List
    append initial line to RT_PRALL assigning <S_PRALL>.
    move LR_GATE_PRALLOC->F_ID         to <S_PRALL>-PRALL.
    move LR_GATE_PRALLOC->GET_DESCR( ) to <S_PRALL>-DESCR.
  endloop.

endmethod.
method GET_ALL_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  RT_VLASH = LR_PR_LAMI->GET_ALL_VLASH( ).

endmethod.
method GET_ALL_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  RT_VLASH = LR_PR_LAMI->GET_ALL_VLASH( ).

endmethod.
method GET_CALIP.

  data:  LS_CALIP     type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
         LR_CALIP     type ref to ZIF_VCXI_P0SS_CALIP.

***------------------------------------------------------------------------------------------------
*** Get Caliper Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_CALIP=>C_IPRVT_P0_CALIP
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CALIP.
        check LR_CALIP is bound.
        clear: LS_CALIP.
        LS_CALIP = LR_CALIP->GET_CALIP( IF_POOTI = IF_POOTI ).
        check LS_CALIP-CALIP is not initial.


        if RS_CALIP-CALIP is initial.
          move LS_CALIP to RS_CALIP.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_CALIP-CALIP
                                                              IF_CALCV_UOM_1 = RS_CALIP-CALIP_UOM
                                                              IF_CALCV_2     = LS_CALIP-CALIP
                                                              IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = RS_CALIP-CALIP_UOM
                                                    importing EF_CALCV       = RS_CALIP-CALIP
                                                              EF_CALCV_UOM   = RS_CALIP-CALIP_UOM ).
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CALIP.
    endtry.
  endloop.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_COMPN.

  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_ALL  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

*** Get Gates of Components
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_ALL.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_ALL.

*** Sort Components
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_ALL ).

*** Assign Component Number
  loop at LT_GATE_ALL into LR_GATE.
    add 1 to RF_COMPN.
    if IR_GATE eq LR_GATE.
      exit.
    endif.
  endloop.

endmethod.
method GET_COMPR.

  data:  LF_COMPR         type        ZVCXI_P0SS_COMPR.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_COMP_SE    type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
         LR_PR_COMP_FG    type ref to ZCL_VCXI_P0SS_PR_COMP_FG,
         LR_PR_COMP_CO    type ref to ZCL_VCXI_P0SS_PR_COMP_CO.

***--------------------------------------------------------------------------------------
*** Components SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
        check LR_PR_COMP_SE is bound.
        move LR_PR_COMP_SE->GET_COMPR( ) to LF_COMPR.
        add LF_COMPR to RF_COMPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_COMP_SE.
    endtry.
  endloop.

***--------------------------------------------------------------------------------------
*** Components FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        check LR_PR_COMP_FG is bound.
        move LR_PR_COMP_FG->GET_COMPR( ) to LF_COMPR.
        add LF_COMPR to RF_COMPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_COMP_FG.
    endtry.
  endloop.

***--------------------------------------------------------------------------------------
*** Components CO (Only First)
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                   IF_INUSE  = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    move 1 to RF_COMPR.
  endif.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_DCUTT.

  check ME->R_DCT is bound.
  RF_DCUTT = ME->R_DCT->GET_DCUTT( ).

endmethod.
method GET_FSHTP.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***------------------------------------------------------------------------------------------------
*** Get Flag if Sheet Procurement is there
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
  endloop.

  check LR_PR_MS_SHTPR is bound.
  move ABAP_TRUE to RF_FSHTP.

endmethod.
method GET_GRAMM_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_GRAMM( ) to RS_GRAMM.

endmethod.
method GET_GRAMM_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_GRAMM( ) to RS_GRAMM.

endmethod.
method GET_LAMI.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get all Lamination
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        check LR_PR_LAMI is bound and
              LR_PR_LAMI->GET_LASID( ) eq IF_LASID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Lamination Side
    move RR_GATE->R_CLSPR ?to LR_PR_LAMI.
    LR_PR_LAMI->SET_LASID( IF_LASID = IF_LASID ).

  endif.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_MATNR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_MATNR( ) to RF_MATNR.

endmethod.
method GET_MATNR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_MATNR( ) to RF_MATNR.

endmethod.
method GET_NOCOI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                    IF_CREATE = ABAP_FALSE
                          importing EF_NOCOL  = RF_NOCOI ).

endmethod.
method GET_NOCOO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                    IF_CREATE = ABAP_FALSE
                          importing EF_NOCOL  = RF_NOCOO ).

endmethod.
method GET_PAPGR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_PAPGR( ) to RF_PAPGR.

endmethod.
method GET_PAPGR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_PAPGR( ) to RF_PAPGR.

endmethod.
method GET_PRALI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

*** Return
  move LR_GATE->F_ID to RF_PRALL.

endmethod.
method GET_PRALLOC.

  data:  LF_CREATE        type        ABAP_BOOL,
         LF_LASID         type        ZVCXI_P0SS_LASID.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PRALLOC  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PRALLOC  type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_INFO     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC       type ref to ZIF_VCXI_P0SS_PRALLOC.

***--------------------------------------------------------------------------------------
*** Check "Specification"
  append ME->R_GATE to LT_GATE_PRALLOC.

*** Check Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

*** Check Lamination
  case IF_PRSID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O to LF_LASID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I to LF_LASID.
  endcase.
  LR_GATE = ME->GET_LAMI( IF_LASID  = LF_LASID
                          IF_CREATE = ABAP_FALSE ).
  if LR_GATE is bound.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

***--------------------------------------------------------------------------------------
*** Search for Print Allocation
  loop at LT_GATE_PRALLOC into LR_GATE_PRALLOC.
    try.
        move LR_GATE_PRALLOC->R_CLSPR ?to LR_PRALLOC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PRALLOC.
    endtry.
    check LR_PRALLOC is bound.

*** Verify Allocation ID
    clear LF_CREATE.
    if IF_PRALL is supplied.
      if IF_PRALL eq LR_GATE_PRALLOC->F_ID or
         IF_PRALL is initial.
***     Ensure Print exists if requested
        move ABAP_TRUE to LF_CREATE.
      else.
***     Not the one
        continue.
      endif.
    endif.

*** Check "Specification"
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IF_PRSID
                                      IF_CREATE = LF_CREATE
                            importing ER_GATE   = LR_GATE_INFO ).
    if LR_GATE_INFO is bound.
      move LR_GATE_PRALLOC to RR_GATE.
      exit.
    endif.
  endloop.

endmethod.
method GET_PRALO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

*** Return
  move LR_GATE->F_ID to RF_PRALL.

endmethod.
method GET_PRINT.

  data:  LS_ATTRI           type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT        type ref to ZCL_VCXI_P0SS_PR_PRINT.

***------------------------------------------------------------------------------------------------
*** Get all (SE) Prints
  LT_GATE = ME->GET_PRINT_SE( ).

  loop at LT_GATE into LR_GATE.
*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        check LR_PR_PRINT is bound and
              LR_PR_PRINT->GET_PRSID( ) eq IF_PRSID.
        move LR_GATE to RR_GATE.
        exit.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = 'PRINTING_SE' ).
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Attribute - Calculated
    LS_ATTRI = RR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    RR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

*** Set Print Side
    move RR_GATE->R_CLSPR ?to LR_PR_PRINT.
    LR_PR_PRINT->SET_PRSID( IF_PRSID = IF_PRSID ).

  endif.

endmethod.
method GET_PRINT_DATA_SE.

  data:          LF_FOUND             type        ABAP_BOOL,
                 LF_NO_PRTYP          type        ABAP_BOOL,
                 LF_INDEX             type        ZVCXI_P0SS_ACONO.
  data:          LS_PCDIM             type        ZVCXI_P0SP_S_PCDIM,
                 LS_COVRG             type        ZVCXI_P0S_S_COVRG,
                 LS_SHTPL             type        ZVCXI_P0SS_S_SHTPL,
                 LS_SHTPW             type        ZVCXI_P0SS_S_SHTPW,
                 LS_ABLAG             type        ZVCXI_P0SS_S_ABLAG,
                 LS_PRINT_COLCO_SE    type        ZVCXI_P0SS_S_PRINT_COLCO_SE,
                 LS_PRINT_MARK_SE     type        ZVCXI_P0SS_S_PRINT_MARK_SE.
  data:          LT_GATE_PRODDIM      type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_PRINT        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_MS_INK       type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_MARK         type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_SP_PRINT     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_SP_INK       type        /VCXI/VKSR_TT_GATE,
                 LT_PRINT_DATA_SE     type        ZVCXI_P0SS_TT_PRINT_DATA_SE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PRODDIM           type ref to ZIF_VCXI_P0SS_PRODDIM,
                 LR_PR_PRINT          type ref to ZCL_VCXI_P0SS_PR_PRINT,
                 LR_PR_MS_INK         type ref to ZCL_VCXI_P0SS_PR_MS_INK,
                 LR_PR_MARK           type ref to ZCL_VCXI_P0SS_PR_MARK,
                 LR_PR_SP_PRINT       type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
                 LR_PR_SP_INK         type ref to ZCL_VCXI_P0SS_PR_SP_INK.
  field-symbols: <S_PRINT_DATA_SE>    type        ZVCXI_P0SS_S_PRINT_DATA_SE,
                 <S_PRINT_COLCO_SE>   type        ZVCXI_P0SS_S_PRINT_COLCO_SE,
                 <S_PRINT_MARK_SE>    type        ZVCXI_P0SS_S_PRINT_MARK_SE.

***-----------------------------------------------------------------------------------------------
*** Get Gates of Product Dimension of Components
  LT_GATE_PRODDIM = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                           IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE_PRODDIM into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PRODDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PRODDIM.
    endtry.
    check LR_PRODDIM is bound.

*** Add Component Dimensions
    append initial line to LT_PRINT_DATA_SE assigning <S_PRINT_DATA_SE>.
    move               LR_GATE                     to <S_PRINT_DATA_SE>-R_GATE_COMP.

*** Get Product Dimension
    move LR_PRODDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_PRODDIM=>C_POOTI_PRODUCT ) to LS_PCDIM.

    move LS_PCDIM-PCLEN       to <S_PRINT_DATA_SE>-SHTPL.
    move LS_PCDIM-PCLEN_UOM   to <S_PRINT_DATA_SE>-SHTPL_UOM.
    move LS_PCDIM-PCWID       to <S_PRINT_DATA_SE>-SHTPW.
    move LS_PCDIM-PCWID_UOM   to <S_PRINT_DATA_SE>-SHTPW_UOM.
    move LS_PCDIM-NOOUT       to <S_PRINT_DATA_SE>-NOUPS.

*** Calculate Area
    if <S_PRINT_DATA_SE>-SHTPL_UOM is not initial and
       <S_PRINT_DATA_SE>-SHTPW_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_PRINT_DATA_SE>-SHTPL
                                                          IF_CALCV_UOM_1 = <S_PRINT_DATA_SE>-SHTPL_UOM
                                                          IF_CALCV_2     = <S_PRINT_DATA_SE>-SHTPW
                                                          IF_CALCV_UOM_2 = <S_PRINT_DATA_SE>-SHTPW_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = 'M2'
                                                importing EF_CALCV       = <S_PRINT_DATA_SE>-ABLAS
                                                          EF_CALCV_UOM   = <S_PRINT_DATA_SE>-ABLAS_UOM ).
    endif.

    <S_PRINT_DATA_SE>-ABLAS = <S_PRINT_DATA_SE>-ABLAS * <S_PRINT_DATA_SE>-NOUPS.

    if LS_ABLAG-ABLAG_UOM is not initial and
       LS_ABLAG-ABLAG     is not initial.
***   Sum Up Total Area
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ABLAG-ABLAG
                                                          IF_CALCV_UOM_1 = LS_ABLAG-ABLAG_UOM
                                                          IF_CALCV_2     = <S_PRINT_DATA_SE>-ABLAS
                                                          IF_CALCV_UOM_2 = <S_PRINT_DATA_SE>-ABLAS_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_ABLAG-ABLAG_UOM
                                                importing EF_CALCV       = LS_ABLAG-ABLAG
                                                          EF_CALCV_UOM   = LS_ABLAG-ABLAG_UOM ).

    else.
      LS_ABLAG-ABLAG     = <S_PRINT_DATA_SE>-ABLAS.
      LS_ABLAG-ABLAG_UOM = <S_PRINT_DATA_SE>-ABLAS_UOM.
    endif.

  endloop.

***-----------------------------------------------------------------------------------------------
*** Get Gates of Prints
  LT_GATE_PRINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                         IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE_PRINT into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PRINT.
    endtry.

    check LR_PR_PRINT is bound and
          LR_PR_PRINT->GET_PRSID( ) eq IF_PRSID.

*** Find Component Entry
    move ABAP_FALSE to LF_FOUND.
    loop at LT_PRINT_DATA_SE assigning <S_PRINT_DATA_SE>.
***   Component is inline with Print
      if LR_GATE->IS_IN_LINE( IR_GATE = <S_PRINT_DATA_SE>-R_GATE_COMP ) eq ABAP_TRUE.
        move ABAP_TRUE to LF_FOUND.
        exit.
      endif.
    endloop.
    check LF_FOUND eq ABAP_TRUE.


*** Get Printing Informations
    move LR_GATE                   to <S_PRINT_DATA_SE>-R_GATE_PRINT.
    move LR_PR_PRINT->GET_PRTYP( ) to <S_PRINT_DATA_SE>-PRTYP.

*** Get Ink Informations
    clear: LT_GATE_MS_INK.
    LT_GATE_MS_INK = LR_PR_PRINT->GET_MS_INK( ).

    loop at LT_GATE_MS_INK into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_INK.
      endtry.

      check LR_PR_MS_INK is bound.
      append initial line to <S_PRINT_DATA_SE>-T_COLCO assigning <S_PRINT_COLCO_SE>.
      LR_PR_MS_INK->GET_COLCO( importing EF_COLCO = <S_PRINT_COLCO_SE>-COLCO ).
      LR_PR_MS_INK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
      move-corresponding LS_COVRG to <S_PRINT_COLCO_SE>.

    endloop.

*** Get Marking Informations
    clear: LT_GATE_MARK.
    LT_GATE_MARK = LR_PR_PRINT->GET_MARK( ).

    loop at LT_GATE_MARK into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MARK.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MARK.
      endtry.

      check LR_PR_MARK is bound.
      append initial line to <S_PRINT_DATA_SE>-T_MARK assigning <S_PRINT_MARK_SE>.
      LR_PR_MARK->GET_TMARK( importing EF_TMARK = <S_PRINT_MARK_SE>-TMARK ).
      LR_PR_MARK->GET_MARKP( importing EF_MARKP = <S_PRINT_MARK_SE>-MARKP ).
      LR_PR_MARK->GET_NUMPR( importing EF_NUMPR = <S_PRINT_MARK_SE>-NUMPR ).
      LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
      move-corresponding LS_COVRG to <S_PRINT_MARK_SE>.

      LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_INDEX ).
      read table <S_PRINT_DATA_SE>-T_COLCO into LS_PRINT_COLCO_SE index LF_INDEX.
      <S_PRINT_MARK_SE>-COLCO = LS_PRINT_COLCO_SE-COLCO.

    endloop.
  endloop.

***-----------------------------------------------------------------------------------------------
*** Get Gates of Prints
  LT_GATE_SP_PRINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                            IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE_SP_PRINT into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound and
          LR_PR_SP_PRINT->GET_PRSID( ) eq IF_PRSID.

*** Find Component Entry
    move ABAP_FALSE to LF_FOUND.
    loop at LT_PRINT_DATA_SE assigning <S_PRINT_DATA_SE>.
***   Component is inline with Print
      if LR_GATE->IS_IN_LINE( IR_GATE = <S_PRINT_DATA_SE>-R_GATE_COMP ) eq ABAP_TRUE.
        move ABAP_TRUE to LF_FOUND.
        exit.
      endif.
    endloop.
    check LF_FOUND eq ABAP_TRUE.


*** Get Printing Informations
    move LR_GATE                      to <S_PRINT_DATA_SE>-R_GATE_PRINT.
    move LR_PR_SP_PRINT->GET_PRTYP( ) to <S_PRINT_DATA_SE>-PRTYP.

*** Get Ink Informations
    LT_GATE_SP_INK = LR_PR_SP_PRINT->GET_SP_INK( ).
    loop at LT_GATE_SP_INK into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SP_INK.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SP_INK.
      endtry.

      check LR_PR_SP_INK is bound.
      append initial line to <S_PRINT_DATA_SE>-T_COLCO assigning <S_PRINT_COLCO_SE>.
      LR_PR_SP_INK->GET_COLCO( importing EF_COLCO = <S_PRINT_COLCO_SE>-COLCO ).
      LR_PR_SP_INK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
      move-corresponding LS_COVRG to <S_PRINT_COLCO_SE>.

    endloop.

*** Get Marking Informations
    LT_GATE_MARK = LR_PR_SP_PRINT->GET_MARK( ).
    loop at LT_GATE_MARK into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MARK.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MARK.
      endtry.

      check LR_PR_MARK is bound.
      append initial line to <S_PRINT_DATA_SE>-T_MARK assigning <S_PRINT_MARK_SE>.
      LR_PR_MARK->GET_TMARK( importing EF_TMARK = <S_PRINT_MARK_SE>-TMARK ).
      LR_PR_MARK->GET_MARKP( importing EF_MARKP = <S_PRINT_MARK_SE>-MARKP ).
      LR_PR_MARK->GET_NUMPR( importing EF_NUMPR = <S_PRINT_MARK_SE>-NUMPR ).
      LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
      move-corresponding LS_COVRG to <S_PRINT_MARK_SE>.

      LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_INDEX ).
      read table <S_PRINT_DATA_SE>-T_COLCO into LS_PRINT_COLCO_SE index LF_INDEX.
      <S_PRINT_MARK_SE>-COLCO = LS_PRINT_COLCO_SE-COLCO.

    endloop.
  endloop.

***-----------------------------------------------------------------------------------------------
*** Return the Collected Data
  loop at LT_PRINT_DATA_SE assigning <S_PRINT_DATA_SE>.

*** Calculate Area Proportion
    if LS_ABLAG-ABLAG is not initial.
      <S_PRINT_DATA_SE>-APROP     = <S_PRINT_DATA_SE>-ABLAS * 100 / LS_ABLAG-ABLAG.
      <S_PRINT_DATA_SE>-APROP_UOM = '%'.
    endif.

    if <S_PRINT_DATA_SE>-R_GATE_PRINT is bound.
***   Collect Print Type
      if RS_PRINT_DATA_SE-PRTYP is initial and
         LF_NO_PRTYP ne ABAP_TRUE.
        move <S_PRINT_DATA_SE>-PRTYP to RS_PRINT_DATA_SE-PRTYP.
      elseif RS_PRINT_DATA_SE-PRTYP is not initial and
             RS_PRINT_DATA_SE-PRTYP ne <S_PRINT_DATA_SE>-PRTYP.
        clear RS_PRINT_DATA_SE-PRTYP.
        move ABAP_TRUE to LF_NO_PRTYP.
      endif.

***   Collect/Sum Up Color Codes
      loop at <S_PRINT_DATA_SE>-T_COLCO into LS_PRINT_COLCO_SE.

        LS_COVRG-COVRG = <S_PRINT_DATA_SE>-APROP * LS_PRINT_COLCO_SE-COVRG / 100.

        read table RS_PRINT_DATA_SE-T_COLCO assigning <S_PRINT_COLCO_SE> with key COLCO = LS_PRINT_COLCO_SE-COLCO.
        if SY-SUBRC ne 0.
          append initial line to RS_PRINT_DATA_SE-T_COLCO assigning <S_PRINT_COLCO_SE>.
          move-corresponding LS_PRINT_COLCO_SE to <S_PRINT_COLCO_SE>.
          move LS_COVRG-COVRG to <S_PRINT_COLCO_SE>-COVRG.
        else.
          <S_PRINT_COLCO_SE>-COVRG = <S_PRINT_COLCO_SE>-COVRG + LS_COVRG-COVRG.
        endif.

      endloop.

***   Collect Markings
      loop at <S_PRINT_DATA_SE>-T_MARK into LS_PRINT_MARK_SE.
        append initial line to RS_PRINT_DATA_SE-T_MARK assigning <S_PRINT_MARK_SE>.
        move-corresponding LS_PRINT_MARK_SE to <S_PRINT_MARK_SE>.
        <S_PRINT_MARK_SE>-COVRG = <S_PRINT_DATA_SE>-APROP * <S_PRINT_MARK_SE>-COVRG / 100.
      endloop.
    endif.
  endloop.

  check RS_PRINT_DATA_SE is not initial.
*** Return PrintSide
  RS_PRINT_DATA_SE-PRSID = IF_PRSID.


endmethod.
method GET_PRINT_SE.

  data:  LF_INLINE          type        ABAP_BOOL.
  data:  LT_GATE_PRINT      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_COMP       type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_PRINT      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_COMP       type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Prints
  LT_GATE_PRINT  = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                          IF_INUSE = ABAP_TRUE ).

*** Get all Component SE
  LT_GATE_COMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                        IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
  loop at LT_GATE_PRINT into LR_GATE_PRINT.
*** Is inline with Component?
    clear LF_INLINE.
    loop at LT_GATE_COMP into LR_GATE_COMP.
      check LR_GATE_COMP->IS_IN_LINE( IR_GATE = LR_GATE_PRINT ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_INLINE.
      exit.
    endloop.
    check LF_INLINE ne ABAP_TRUE.

*** Return as SE Print
    append LR_GATE_PRINT to RT_GATE.
  endloop.

endmethod.
method GET_PRTYI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                    IF_CREATE = ABAP_FALSE
                          importing EF_PRTYP  = RF_PRTYI ).

endmethod.
method GET_PRTYI_DESCR.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT   type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** Get Inside Print
  LR_GATE = ME->GET_PRINT( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_PRINT.

  move LR_PR_PRINT->GET_PRTYP_DESCR( ) to  RF_PRTYI_DESCR.

endmethod.
method GET_PRTYO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                    IF_CREATE = ABAP_FALSE
                          importing EF_PRTYP  = RF_PRTYO ).

endmethod.
method GET_PRTYO_DESCR.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT   type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** Get Outside Print
  LR_GATE = ME->GET_PRINT( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_PRINT.

  move LR_PR_PRINT->GET_PRTYP_DESCR( ) to  RF_PRTYO_DESCR.

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_PTYPE_DESCR.

endmethod.
method GET_STATUS.

  data:  LS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE.
  data:  LT_FUNCT         type ZVCXI_XCDC_TT_CR_FUNCT.

*** Super Status
  RF_ELMST = SUPER->GET_STATUS( ).

*** Get all Active Functions at once
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  read table LT_FUNCT with key IFUNC = 'CHECK_MATDE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Distribution Key
  if ME->CHECK_DIKEY( ) is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Components
  if ME->CHECK_COMP( ) is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Print Type on SE header
*** Get Collected Printing Data for SE Header
  LS_PRINT_DATA_SE = ME->GET_PRINT_DATA_SE( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LS_PRINT_DATA_SE is not initial.
    if LS_PRINT_DATA_SE-PRTYP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Print Type on SE header
*** Get Collected Printing Data for SE Header
  LS_PRINT_DATA_SE = ME->GET_PRINT_DATA_SE( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LS_PRINT_DATA_SE is not initial.
    if LS_PRINT_DATA_SE-PRTYP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------
*** Check Tools
  case ME->CHECK_TOOL_VALUES( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.


***------------------------------------------------------------------
*** Check Lamination Type
  case ME->CHECK_TLAMI( ).
    when 0 or 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  data:  LS_PRINT_DATA_SE type ZVCXI_P0SS_S_PRINT_DATA_SE.
  data:  LT_FUNCT         type ZVCXI_XCDC_TT_CR_FUNCT.

*** Super Status Messages
  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Get all Active Functions at once
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  read table LT_FUNCT with key IFUNC = 'CHECK_MATDE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Distribution Key
  case ME->CHECK_DIKEY( ).
    when 0.
***   Distribution Key is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '951' ).
    when 1.
***   Distribution Key is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '952' ).
    when 2.
***   Distribution Key is not 100%.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '953' ).
  endcase.

*** Check Components
  case ME->CHECK_COMP( ).
    when 0.
***   At least 2 Components are maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '955' ).
    when 1.
***   At least 2 Components need to be maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '956' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Print Type on SE header
*** Get Collected Printing Data for SE Header Inside
  LS_PRINT_DATA_SE = ME->GET_PRINT_DATA_SE( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LS_PRINT_DATA_SE is not initial.
    if LS_PRINT_DATA_SE-PRTYP is not initial.
***   Print Type is consistent defined on Component Level.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '310'
                               IF_MSGV1 = 'Inside'(M01) ).
    else.
***   Print Type is inconsistent defined on Component Level.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '311'
                               IF_MSGV1 = 'Inside'(M01) ).
    endif.
  endif.

*** Get Collected Printing Data for SE Header Outside
  LS_PRINT_DATA_SE = ME->GET_PRINT_DATA_SE( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LS_PRINT_DATA_SE is not initial.
    if LS_PRINT_DATA_SE-PRTYP is not initial.
***   Print Type is consistent defined on Component Level.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '310'
                               IF_MSGV1 = 'Outside'(M02) ).
    else.
***   Print Type is inconsistent defined on Component Level.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '311'
                               IF_MSGV1 = 'Outside'(M02) ).
    endif.
  endif.

***----------------------------------------------------------------------------
*** Check Tool Values
  ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).


***------------------------------------------------------------------
*** Check Lamination Type
  if ME->CHECK_TLAMI( ) eq 1.
*** Lamination Type(s) are maintained correctly.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '083' ).
  elseif ME->CHECK_TLAMI( ) eq 2.
*** Inline Lamination is maintained twice.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '084' ).
  elseif ME->CHECK_TLAMI( ) eq 5.
*** One or more Lamination Type is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '084' ).
  endif.

endmethod.
method GET_TILAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_TLAMI( ) to RF_TILAM.

endmethod.
method GET_TOLAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_TLAMI( ) to RF_TOLAM.

endmethod.
method GET_TOOL.

  data:  LT_PRVDR          type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR          type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA,
         LR_DCT            type ref to ZIF_VCXI_P0SS_DCT.
  data:  LF_DCUTT          type        ZVCXI_P0SS_DCUTT,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

*** Get DCT Provider
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_DCT=>C_IPRVT_P0_DCT
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_DCT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_DCT.
  endtry.

  check LR_DCT is bound.
  move LR_DCT->GET_DCUTT( ) to LF_DCUTT.

*** Get Die Cut Tool Customizing Instance
  RR_DIECUT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_DCUTT
                                                          IF_WERKS = LF_WERKS ).

endmethod.
method GET_VALID_TLAGC.

*** Lamination Glue Consumption Type Whole Surface is always allowed.
  append ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAGC_WHOLE to RT_TLAGC.

endmethod.
method GET_VALID_TLAMI.

*** Lamination Type STS is always allowed.
  append ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_STS to RT_TLAMI.

endmethod.
method GET_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_VLASH( ) to RR_VLASH.

endmethod.
method GET_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_VLASH( ) to RR_VLASH.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_UPDATE_COMP_PRINT.
      ME->HANDLE_UPDATE_COMP_PRINT( IT_GATE = IT_GATE_PROVIDER ).

    when C_IEVNT_I_RECALC_PRINT_DATA.
      ME->HANDLE_RECALC_PRINT_DATA( IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

    when C_IEVNT_I_REQ_CALIP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_DCT.

***------------------------------------------------------------------
*** Get Die Cut Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_DCT=>C_IPRVT_P0_DCT
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_DCT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DCT.
    endtry.
  endif.

  if ME->R_DCT is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZIF_VCXI_P0SS_DCT=>C_IPRVT_P0_DCT
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_RECALC_PRINT_DATA.

  data:  LF_CONTINUE type        ABAP_BOOL.
  data:  LT_GATE     type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------
*** Ignore SE Prints
  LT_GATE = ME->GET_PRINT_SE( ) .
  loop at IT_GATE_PROVIDER into LR_GATE.
    read table LT_GATE with key TABLE_LINE = LR_GATE
                       transporting no fields.
    if SY-SUBRC ne 0.
      LF_CONTINUE = ABAP_TRUE.
      exit.
    endif.
  endloop.
  check LF_CONTINUE eq ABAP_TRUE.

***--------------------------------------------------------------------------------
*** Start Calculation of Printing Data -> inside Print
  ME->CALC_PRINT_DATA( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).

*** Start Calculation of Printing Data -> outside Print
  ME->CALC_PRINT_DATA( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method HANDLE_UPDATE_COMP_PRINT.

  data:          LF_SUTYP             type        ZVCXI_P0S_SUTYP,
                 LF_FPRFS             type        ZVCXI_P0SS_FPRFS.
  data:          LT_GATE_PRINT        type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PRINT_SE       type ref to ZCL_VCXI_P0SS_PR_PRINT,
                 LR_PR_PRINT          type ref to ZCL_VCXI_P0SS_PR_PRINT.



*** -----------------------------------------------------------------------------------------------
*** Get Gates of Prints
  LT_GATE_PRINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

*** Process all Header Prints
  loop at LT_GATE_PRINT into LR_GATE.
    check ME->CHECK_PART_COMP_SE( IR_GATE = LR_GATE ) eq ABAP_FALSE.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PRINT_SE.
    endtry.

    check LR_PR_PRINT_SE is bound.

    clear: LF_SUTYP, LF_FPRFS.
*** Get Header Surface data
    LF_SUTYP = LR_PR_PRINT_SE->GET_SUTYP( ).
    LF_FPRFS = LR_PR_PRINT_SE->GET_FPRFS( ).

    loop at LT_GATE_PRINT into LR_GATE.
      check ME->CHECK_PART_COMP_SE( IR_GATE = LR_GATE ) eq ABAP_TRUE.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PRINT.
      endtry.

      check LR_PR_PRINT               is bound and
            LR_PR_PRINT->GET_PRSID( ) eq LR_PR_PRINT_SE->GET_PRSID( ).

***   Update Surface Data
      LR_PR_PRINT->SET_SUTYP( IF_SUTYP = LF_SUTYP ).
      LR_PR_PRINT->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

    endloop.
  endloop.

endmethod.
method IS_LAMI_ACTIVE.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definitions
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  check lines( LT_PRVDR_DEF ) is not initial.
  move ABAP_TRUE to RF_ACTIVE.

endmethod.
method IS_PRINT_CALCULATED.

*** Printing is on SE always Calculated
  RF_CALCULATED = ABAP_TRUE.

endmethod.
method IS_PRINT_SE_ACTIVE.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definitions
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_INLINE ).
  read table LT_PRVDR_DEF with key ID = 'PRINTING_SE'
                          transporting no fields.
  check SY-SUBRC = 0.
  move ABAP_TRUE to RF_ACTIVE.

endmethod.
method IS_SBINFO_EDITABLE_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_EDITABLE( importing EF_MATNR  = EF_MATNR
                                            EF_SBINFO = EF_SBINFO
                                            EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_EDITABLE_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_EDITABLE( importing EF_MATNR  = EF_MATNR
                                            EF_SBINFO = EF_SBINFO
                                            EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_VISIBLE_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_VISIBLE( importing EF_MATNR  = EF_MATNR
                                           EF_SBINFO = EF_SBINFO
                                           EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_VISIBLE_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_VISIBLE( importing EF_MATNR  = EF_MATNR
                                           EF_SBINFO = EF_SBINFO
                                           EF_CALIP  = EF_CALIP ).

endmethod.
method MOVE_PRALLOC_MS_SHTPR.

  data:  LF_PRTYP                type        ZVCXI_P0S_PRTYP,
         LF_NOCOL                type        ZVCXI_P0S_NOCOL.
  data:  LR_PR_PRINT_SELF        type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_MS_SHTPR_SOURCE   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Sheet Procurement PR Class
 try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_SHTPR_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SOURCE.
  endtry.
  check LR_PR_MS_SHTPR_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Sheet Procurement
  move LR_PR_MS_SHTPR_SOURCE->GET_PRTYP( IF_PRSID = IF_PRSID ) to LF_PRTYP.
  move LR_PR_MS_SHTPR_SOURCE->GET_NOCOL( IF_PRSID = IF_PRSID ) to LF_NOCOL.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).

endmethod.
method MOVE_PRALLOC_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRTON               type        ZVCXI_P0SS_PRTON,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_MATNR               type        MATNR,
         LF_TEXT                type        TEXT30,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_VARNI               type        ZVCXI_P0S_VARNI,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_PRINT_SELF       type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_PRINT_SOURCE     type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MS_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SOURCE.
  endtry.
  check LR_PR_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_PRINT_SOURCE->GET_PRTON( ) to LF_PRTON.
  move LR_PR_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_PRINT_SELF->SET_PRTON( IF_PRTON = LF_PRTON ).
  LR_PR_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                            IF_INUSE = ABAP_TRUE ).
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                              IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MS_INK_SELF.

*** Copy Material Number
    move LR_PR_MS_INK_SOURCE->GET_MATNR( ) to LF_MATNR.
    LR_PR_MS_INK_SELF->SET_MATNR( IF_MATNR = LF_MATNR ).

*** Copy Text
    move LR_PR_MS_INK_SOURCE->GET_TEXT( ) to LF_TEXT.
    LR_PR_MS_INK_SELF->SET_TEXT( IF_TEXT = LF_TEXT ).

*** Copy Color Code
    LR_PR_MS_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MS_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

*** Copy Varnish Flag
    LR_PR_MS_INK_SOURCE->GET_VARNI( importing EF_VARNI = LF_VARNI
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_VARNI( IF_VARNI = LF_VARNI
                                  IF_SETBY = LF_SETBY ).
  endloop.


***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.

endmethod.
method MOVE_PRALLOC_SP_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_PRINT_SELF       type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_SP_PRINT_SOURCE  type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_SP_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SP_PRINT_SOURCE.
  endtry.
  check LR_PR_SP_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_SP_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_SP_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_SP_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_SP_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                            IF_INUSE = ABAP_TRUE ).
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                              IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).


    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MS_INK_SELF.

*** Copy Color Code
    LR_PR_SP_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_SP_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

  endloop.

***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).


    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.

endmethod.
method REMOVE_EMPTY_LAMI.

  data:  LR_PR_LAMI type ref to ZCL_VCXI_P0SS_PR_LAMI.

  move IR_GATE->R_CLSPR ?to LR_PR_LAMI.

  if LR_PR_LAMI->GET_TLAMI( ) is initial.
    IR_GATE->DO_FREE( ).
  endif.

endmethod.
method REMOVE_EMPTY_PRINT.

  data:  LR_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT.

  move IR_GATE->R_CLSPR ?to LR_PR_PRINT.

  if LR_PR_PRINT->GET_PRTYP( ) is initial and
     LR_PR_PRINT->GET_NOCOL( ) is initial.
    IR_GATE->DO_FREE( ).
  endif.

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_DCUTT.

  check ME->R_DCT is bound.
  ME->R_DCT->SET_DCUTT( IF_DCUTT = IF_DCUTT
                        IF_SETBY = IF_SETBY ).

endmethod.
method SET_FSHTP.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***------------------------------------------------------------------------------------------------
*** Set Flag if Sheet Procurement is there
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
  endloop.

*** Free Sheet Procurement
  if IF_FSHTP is initial.
    if LR_PR_MS_SHTPR is bound.
      LR_PR_MS_SHTPR->DO_FREE( ).
      free: LR_PR_MS_SHTPR.
    endif.
  else.

*** Set Sheet Procurement
    if LR_PR_MS_SHTPR is not bound.
***   Create Sheet Procurement
      ME->CREATE_SHTPR( ).

    endif.
  endif.

endmethod.
method SET_GRAMM_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Grammage
  if IS_GRAMM-GRAMM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Grammage
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_GRAMM_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Grammage
  if IS_GRAMM-GRAMM is not initial.
*** Get Outside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Grammage
  else.
*** Get existing Outside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_MATNR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Material
  if IF_MATNR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Material
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_MATNR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Material
  if IF_MATNR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Material
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_NOCOI.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                          IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_NOCOO.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                          IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_PAPGR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Paper Grade
  if IF_PAPGR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Paper Grade
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_PAPGR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Paper Grade
  if IF_PAPGR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Paper Grade
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_PRALI.

  data:  LF_CHANGEABLE      type        ABAP_BOOL.
  data:  LR_GATE_CURR       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_CURR    type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_NEW        type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_NEW     type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_INFO       type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE_CURR is bound.
  move LR_GATE_CURR->R_CLSPR ?to LR_PRALLOC_CURR.

*** Get current Information
  LR_PRALLOC_CURR->GET_PRINFO( exporting IF_PRSID      = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                         IF_CREATE     = ABAP_FALSE
                               importing ER_GATE       = LR_GATE_INFO
                                         EF_CHANGEABLE = LF_CHANGEABLE ).
  check LF_CHANGEABLE eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get new Inside Print Allocation
  LR_GATE_NEW = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                 IF_PRALL = IF_PRALL ).
  check LR_GATE_NEW is bound.
  move LR_GATE_NEW->R_CLSPR ?to LR_PRALLOC_NEW.

***----------------------------------------------------------------------------
*** Move Information to new Print Allocation
  LR_PRALLOC_NEW->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                              IR_GATE  = LR_GATE_INFO ).

*** Delete Information from current Print Allocation
  clear LR_GATE_INFO.
  LR_PRALLOC_CURR->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IR_GATE  = LR_GATE_INFO ).

*** Start Calculation of Printing Data -> inside Print
  ME->CALC_PRINT_DATA( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).

endmethod.
method SET_PRALO.

  data:  LF_CHANGEABLE      type        ABAP_BOOL.
  data:  LR_GATE_CURR       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_CURR    type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_NEW        type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_NEW     type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_INFO       type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE_CURR is bound.
  move LR_GATE_CURR->R_CLSPR ?to LR_PRALLOC_CURR.

*** Get current Information
  LR_PRALLOC_CURR->GET_PRINFO( exporting IF_PRSID      = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                         IF_CREATE     = ABAP_FALSE
                               importing ER_GATE       = LR_GATE_INFO
                                         EF_CHANGEABLE = LF_CHANGEABLE ).
  check LF_CHANGEABLE eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get new Outside Print Allocation
  LR_GATE_NEW = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                 IF_PRALL = IF_PRALL ).
  check LR_GATE_NEW is bound.
  move LR_GATE_NEW->R_CLSPR ?to LR_PRALLOC_NEW.

***----------------------------------------------------------------------------
*** Move Information to new Print Allocation
  LR_PRALLOC_NEW->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                              IR_GATE  = LR_GATE_INFO ).

*** Delete Information from current Print Allocation
  clear LR_GATE_INFO.
  LR_PRALLOC_CURR->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IR_GATE  = LR_GATE_INFO ).

*** Start Calculation of Printing Data -> outside Print
  ME->CALC_PRINT_DATA( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).

endmethod.
method SET_PRINT_DATA_MS_SHTPR.

  data: LF_NOCOL                 type        ZVCXI_P0S_NOCOL.
  data: LR_PR_MS_SHTPR           type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

*** Set Information to Print
  try.
      move IR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR.
  endtry.
  check LR_PR_MS_SHTPR is bound.

*** Set Print Type
  LR_PR_MS_SHTPR->SET_PRTYP( IF_PRSID = IS_PRINT_DATA_SE-PRSID
                             IF_PRTYP = IS_PRINT_DATA_SE-PRTYP ).

*** Set Number of Colors
  LF_NOCOL = lines( IS_PRINT_DATA_SE-T_COLCO ).
  LR_PR_MS_SHTPR->SET_NOCOL( IF_PRSID = IS_PRINT_DATA_SE-PRSID
                             IF_NOCOL = LF_NOCOL ).

endmethod.
method SET_PRINT_DATA_PRINT.

  data: LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data: LR_PR_PRINT            type ref to ZCL_VCXI_P0SS_PR_PRINT.

*** Set Information to Print
  try.
      move IR_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT.
  endtry.
  check LR_PR_PRINT is bound.

*** Set Attribute - Calculated
  LS_ATTRI = IR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
  LS_ATTRI-ATTVA = ABAP_TRUE.
  IR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

*** Set Print Type
  LR_PR_PRINT->SET_PRTYP( IF_PRTYP = IS_PRINT_DATA_SE-PRTYP ).

*** Set Colors
  ME->SET_PRINT_MS_INK( IR_GATE  = IR_GATE
                        IT_COLCO = IS_PRINT_DATA_SE-T_COLCO ).

*** Set Markings
  ME->SET_PRINT_MARK( IR_GATE  = IR_GATE
                      IT_COLCO = IS_PRINT_DATA_SE-T_COLCO
                      IT_MARK  = IS_PRINT_DATA_SE-T_MARK ).

***--------------------------------------------------------------------------------------
*** Remove empty Print
  if IR_GATE->F_FREED          ne ABAP_TRUE and
     LR_PR_PRINT->GET_PRTYP( ) is initial   and
     LR_PR_PRINT->GET_NOCOL( ) is initial.
    IR_GATE->DO_FREE( ).
  endif.

endmethod.
method SET_PRINT_DATA_SE.

  data: LR_PRALLOC             type ref to ZIF_VCXI_P0SS_PRALLOC,
        LR_GATE                type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_PRINT            type ref to ZCL_VCXI_P0SS_PR_PRINT,
        LR_PR_SP_PRINT         type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
        LR_PR_MS_SHTPR         type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

  try.
      move IR_GATE->R_CLSPR ?to LR_PRALLOC.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PRALLOC.
  endtry.
  check LR_PRALLOC is bound.

*** Get right Print Element
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IS_PRINT_DATA_SE-PRSID
                                    IF_CREATE = SPACE
                          importing ER_GATE   = LR_GATE ).

  check LR_GATE is bound.

*** Move Information to Print
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT.
  endtry.
  if LR_PR_PRINT is bound.
    ME->SET_PRINT_DATA_PRINT( IR_GATE          = LR_GATE
                              IS_PRINT_DATA_SE = IS_PRINT_DATA_SE ).
  endif.

*** Move Information to Sheet Procurement Print
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SP_PRINT.
  endtry.
  if LR_PR_SP_PRINT is bound.
    ME->SET_PRINT_DATA_SP_PRINT( IR_GATE          = LR_GATE
                                 IS_PRINT_DATA_SE = IS_PRINT_DATA_SE ).
  endif.

*** Move Information to Sheet Procurement
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR.
  endtry.
  if LR_PR_MS_SHTPR is bound.
    ME->SET_PRINT_DATA_MS_SHTPR( IR_GATE          = LR_GATE
                                 IS_PRINT_DATA_SE = IS_PRINT_DATA_SE ).
  endif.

endmethod.
method SET_PRINT_DATA_SP_PRINT.

  data: LS_ATTRI                  type        /VCXI/VKS_S_ATTRI.
  data: LR_PR_SP_PRINT            type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

*** Set Information to Print
  try.
      move IR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SP_PRINT.
  endtry.
  check LR_PR_SP_PRINT is bound.

*** Set Attribute - Calculated
  LS_ATTRI = IR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_ATTID_CALCULATED ).
  LS_ATTRI-ATTVA = ABAP_TRUE.
  IR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

*** Set Print Type
  LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = IS_PRINT_DATA_SE-PRTYP ).

*** Set Colors
  ME->SET_PRINT_SP_INK( IR_GATE  = IR_GATE
                        IT_COLCO = IS_PRINT_DATA_SE-T_COLCO ).

*** Set Markings
  ME->SET_PRINT_MARK( IR_GATE  = IR_GATE
                      IT_COLCO = IS_PRINT_DATA_SE-T_COLCO
                      IT_MARK  = IS_PRINT_DATA_SE-T_MARK ).

endmethod.
method SET_PRINT_MARK.

  data:          LF_NOCOL           type        ZVCXI_P0S_NOCOL,
                 LF_NOCOL_NEW       type        ZVCXI_P0S_NOCOL,
                 LF_INDEX           type        I,
                 LF_ACONO           type        ZVCXI_P0SS_ACONO.
  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_PRINT_MARK_SE   type        ZVCXI_P0SS_S_PRINT_MARK_SE,
                 LS_COVRG           type        ZVCXI_P0S_S_COVRG,
                 LS_ATTRI           type        /VCXI/VKS_S_ATTRI.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.


***--------------------------------------------------------------------------------------
*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                         IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

***--------------------------------------------------------------------------------------
*** Get all Markings
  LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Adjust Number of Markings
  move LINES( LT_GATE ) to LF_NOCOL.
  move LINES( IT_MARK ) to LF_NOCOL_NEW.
  if LF_NOCOL ne LF_NOCOL_NEW.

***--------------------------------------------------------------------------------------
*** Less Markings needed
    if LF_NOCOL gt LF_NOCOL_NEW.
      LF_INDEX = LF_NOCOL_NEW + 1.
      loop at LT_GATE into LR_GATE from LF_INDEX.
        LR_GATE->DO_FREE( ).
        delete LT_GATE.
      endloop.

***--------------------------------------------------------------------------------------
*** More Markings needed
    else.
      LF_INDEX = LF_NOCOL_NEW - LF_NOCOL.
      do LF_INDEX times.
        LR_GATE = IR_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        append LR_GATE to LT_GATE.
      enddo.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Start Update
  loop at LT_GATE into LR_GATE.

    read table IT_MARK into LS_PRINT_MARK_SE index SY-TABIX.
    check SY-SUBRC = 0.

*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MARK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MARK.
    endtry.

    check LR_PR_MARK is bound.

    LR_PR_MARK->SET_TMARK( IF_TMARK = LS_PRINT_MARK_SE-TMARK ).
    LR_PR_MARK->SET_MARKP( IF_MARKP = LS_PRINT_MARK_SE-MARKP ).
    LR_PR_MARK->SET_NUMPR( IF_NUMPR = LS_PRINT_MARK_SE-NUMPR ).
    move-corresponding LS_PRINT_MARK_SE to LS_COVRG.
    LR_PR_MARK->SET_COVRG( IS_COVRG = LS_COVRG ).

    read table IT_COLCO with key COLCO = LS_PRINT_MARK_SE-COLCO
                        transporting no fields.
    check SY-SUBRC = 0.
    LF_ACONO = SY-TABIX.
    LR_PR_MARK->SET_ACONO( IF_ACONO = LF_ACONO ).

  endloop.

endmethod.
method SET_PRINT_MS_INK.

  data:          LF_NOCOL           type        ZVCXI_P0S_NOCOL,
                 LF_NOCOL_NEW       type        ZVCXI_P0S_NOCOL,
                 LF_INDEX           type        I,
                 LF_COLCO           type        ZVCXI_P0SS_COLCO.
  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_PRINT_COLCO_SE  type        ZVCXI_P0SS_S_PRINT_COLCO_SE,
                 LS_COVRG           type        ZVCXI_P0S_S_COVRG,
                 LS_LTITO           type        ZVCXI_P0S_S_LTITO,
                 LS_ATTRI           type        /VCXI/VKS_S_ATTRI.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
                 LT_COLCO           type        ZVCXI_P0SS_TT_PRINT_COLCO_SE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_INK       type ref to ZCL_VCXI_P0SS_PR_MS_INK.
  field-symbols: <S_PRINT_COLCO_SE> type        ZVCXI_P0SS_S_PRINT_COLCO_SE.

  move IT_COLCO to LT_COLCO.


***--------------------------------------------------------------------------------------
*** Get Provider Definitions for MS_INK
  LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                         IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

***--------------------------------------------------------------------------------------
*** Get all Inks
  LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Save Ink Tool Data
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_INK.
    endtry.

    check LR_PR_MS_INK is bound.
    LR_PR_MS_INK->GET_COLCO( importing EF_COLCO = LF_COLCO ).
    read table LT_COLCO assigning <S_PRINT_COLCO_SE> with key COLCO = LF_COLCO.
    check SY-SUBRC = 0.
    <S_PRINT_COLCO_SE>-INKTN = LR_PR_MS_INK->GET_INKTN( ).
    LS_LTITO = LR_PR_MS_INK->GET_LTITO( ).
    move-corresponding LS_LTITO to <S_PRINT_COLCO_SE>.
  endloop.

***--------------------------------------------------------------------------------------
*** Adjust Number of Colors
  move LINES( LT_GATE ) to LF_NOCOL.
  move LINES( LT_COLCO ) to LF_NOCOL_NEW.
  if LF_NOCOL ne LF_NOCOL_NEW.

***--------------------------------------------------------------------------------------
*** Less Inks needed
    if LF_NOCOL gt LF_NOCOL_NEW.
      LF_INDEX = LF_NOCOL_NEW + 1.
      loop at LT_GATE into LR_GATE from LF_INDEX.
        LR_GATE->DO_FREE( ).
        delete LT_GATE.
      endloop.

***--------------------------------------------------------------------------------------
*** More Inks needed
    else.
      LF_INDEX = LF_NOCOL_NEW - LF_NOCOL.
      do LF_INDEX times.
        LR_GATE = IR_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        append LR_GATE to LT_GATE.
      enddo.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Start Update
  loop at LT_GATE into LR_GATE.
    read table LT_COLCO into LS_PRINT_COLCO_SE index SY-TABIX.
    check SY-SUBRC = 0.

*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_INK.
    endtry.

    check LR_PR_MS_INK is bound.

    LR_PR_MS_INK->SET_COLCO( IF_COLCO = LS_PRINT_COLCO_SE-COLCO ).
    move-corresponding LS_PRINT_COLCO_SE to LS_COVRG.
    LR_PR_MS_INK->SET_COVRG( IS_COVRG = LS_COVRG ).
    LR_PR_MS_INK->SET_INKTN( IF_INKTN = LS_PRINT_COLCO_SE-INKTN ).
    move-corresponding LS_PRINT_COLCO_SE to LS_LTITO.
    LR_PR_MS_INK->SET_LTITO( IS_LTITO = LS_LTITO ).

  endloop.

endmethod.
method SET_PRINT_SP_INK.

  data:          LF_NOCOL           type        ZVCXI_P0S_NOCOL,
                 LF_NOCOL_NEW       type        ZVCXI_P0S_NOCOL,
                 LF_INDEX           type        I.
  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_PRINT_COLCO_SE  type        ZVCXI_P0SS_S_PRINT_COLCO_SE,
                 LS_COVRG           type        ZVCXI_P0S_S_COVRG,
                 LS_ATTRI           type        /VCXI/VKS_S_ATTRI.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
                 LT_COLCO           type        ZVCXI_P0SS_TT_PRINT_COLCO_SE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SP_INK       type ref to ZCL_VCXI_P0SS_PR_SP_INK.

  move IT_COLCO to LT_COLCO.


***--------------------------------------------------------------------------------------
*** Get Provider Definitions for MS_INK
  LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                         IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

***--------------------------------------------------------------------------------------
*** Get all Inks
  LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Adjust Number of Colors
  move LINES( LT_GATE ) to LF_NOCOL.
  move LINES( LT_COLCO ) to LF_NOCOL_NEW.
  if LF_NOCOL ne LF_NOCOL_NEW.

***--------------------------------------------------------------------------------------
*** Less Inks needed
    if LF_NOCOL gt LF_NOCOL_NEW.
      LF_INDEX = LF_NOCOL_NEW + 1.
      loop at LT_GATE into LR_GATE from LF_INDEX.
        LR_GATE->DO_FREE( ).
        delete LT_GATE.
      endloop.

***--------------------------------------------------------------------------------------
*** More Inks needed
    else.
      LF_INDEX = LF_NOCOL_NEW - LF_NOCOL.
      do LF_INDEX times.
        LR_GATE = IR_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        append LR_GATE to LT_GATE.
      enddo.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Start Update
  loop at LT_GATE into LR_GATE.
    read table LT_COLCO into LS_PRINT_COLCO_SE index SY-TABIX.
    check SY-SUBRC = 0.

*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_INK=>C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_INK.
    endtry.

    check LR_PR_SP_INK is bound.

    LR_PR_SP_INK->SET_COLCO( IF_COLCO = LS_PRINT_COLCO_SE-COLCO ).
    move-corresponding LS_PRINT_COLCO_SE to LS_COVRG.
    LR_PR_SP_INK->SET_COVRG( IS_COVRG = LS_COVRG ).

  endloop.

endmethod.
method SET_PRTYI.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IF_PRALL = SPACE ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                          IF_PRTYP = IF_PRTYP
                          IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRTYO.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                          IF_PRTYP = IF_PRTYP
                          IF_SETBY = IF_SETBY ).

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
method SET_TILAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Lamination Type
  if IF_TILAM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TILAM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Lamination Type
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TILAM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_TOLAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Lamination Type
  if IF_TOLAM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TOLAM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Lamination Type
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TOLAM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).
  move LS_PARAM-ATWRT to RF_ICONT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_ICONT'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_ICONT   type                   ZVCXI_P0S_ICONT.

  LF_ICONT = ME->GET_ICONT( ).

*** Return Context ID Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_ICONT into LS_D07V.
  check SY-SUBRC = 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~SET_ICONT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).

  move IF_ICONT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICONT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~GET_PRINFO.

  data:  LR_PR_PRINT   type ref to ZCL_VCXI_P0SS_PR_PRINT.

***--------------------------------------------------------------------------------------
*** Always changeable
  move ABAP_TRUE to EF_CHANGEABLE.

***--------------------------------------------------------------------------------------
*** Get Printing Gate
  ER_GATE = ME->GET_PRINT( IF_PRSID  = IF_PRSID
                           IF_CREATE = IF_CREATE ).
  check ER_GATE is bound.
  try.
      move ER_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT.
  endtry.
  check LR_PR_PRINT is bound.

***--------------------------------------------------------------------------------------
*** Print Type
  if EF_PRTYP is requested.
    move LR_PR_PRINT->GET_PRTYP( ) to EF_PRTYP.
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if EF_NOCOL is requested.
    move LR_PR_PRINT->GET_NOCOL( ) to EF_NOCOL.
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~SET_PRINFO.

  data:  LR_GATE_SELF     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT_SELF type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_PRINT      type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_SP_PRINT   type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_PR_MS_SHTPR   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Get own Printing Gate / PR Class
  LR_GATE_SELF = ME->GET_PRINT( IF_PRSID  = IF_PRSID
                                IF_CREATE = ABAP_TRUE ).
  check LR_GATE_SELF is bound.
  try.
      move LR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

***--------------------------------------------------------------------------------------
*** Print Type
  if IF_PRTYP is supplied.
    LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = IF_PRTYP
                                 IF_SETBY = IF_SETBY ).
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if IF_NOCOL is supplied.
    LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = IF_NOCOL ).
  endif.

***--------------------------------------------------------------------------------------
*** Print Gate
  if IR_GATE is supplied.
    if IR_GATE is not bound.
***   Remove Print
      LR_GATE_SELF->DO_FREE( ).

    else.
***   Move Information from Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_PRINT.
      endtry.
      if LR_PR_PRINT is bound.
        ME->MOVE_PRALLOC_PRINT( IR_GATE_SOURCE = IR_GATE
                                IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SP_PRINT.
      endtry.
      if LR_PR_SP_PRINT is bound.
        ME->MOVE_PRALLOC_SP_PRINT( IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_SHTPR.
      endtry.
      if LR_PR_MS_SHTPR is bound.
        ME->MOVE_PRALLOC_MS_SHTPR( IF_PRSID       = IF_PRSID
                                   IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = LR_GATE_SELF ).
      endif.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Remove empty Print
  if LR_GATE_SELF->F_FREED          ne ABAP_TRUE and
     LR_PR_PRINT_SELF->GET_PRTYP( ) is initial   and
     LR_PR_PRINT_SELF->GET_NOCOL( ) is initial.
    LR_GATE_SELF->DO_FREE( ).
  endif.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

  data: LT_GATE type /VCXI/VKSR_TT_GATE.
  data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
        LR_OPQTY   type ref to ZIF_VCXI_XCSS_OPQTY,
        LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.


***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
        exit.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = ES_QCALC_BASE ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    ES_QCALC_BASE-QCALC     = LR_APPDATA->S_OPQTY-OPQTY.
    ES_QCALC_BASE-QCALC_UOM = LR_APPDATA->S_OPQTY-OPQTY_UOM.
  endif.
  EF_UMREZ = ME->GET_COMPR( ).
  EF_UMREN = 1.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QCALC_SELF-QCALC   = ES_QCALC_BASE-QCALC * EF_UMREZ / EF_UMREN.
  endif.
  ES_QCALC_SELF-QCALC_UOM = ES_QCALC_BASE-QCALC_UOM.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

  data:  LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Quantity of Application Data
  LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
  move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_BASE-QITEM.
  move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_BASE-QITEM_UOM.
  move 1                             to EF_UMREZ.
  move 1                             to EF_UMREN.

***--------------------------------------------------------------------------------------
*** Adjust Numenator and Denominator
  move ME->GET_COMPR( )              to EF_UMREZ.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QITEM_SELF-QITEM   = ES_QITEM_BASE-QITEM * EF_UMREZ / EF_UMREN.
  endif.
  ES_QITEM_SELF-QITEM_UOM = ES_QITEM_BASE-QITEM_UOM.

endmethod.
