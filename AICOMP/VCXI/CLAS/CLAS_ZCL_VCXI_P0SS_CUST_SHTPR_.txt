
class ZCL_VCXI_P0SS_CUST_SHTPR definition
  public
  inheriting from ZCL_VCXI_P0SS_CUST_SFG
  create protected .

public section.

  data F_FLCUT type ZVCXI_P0SS_FLCUT read-only .
  data S_SHTLE type ZVCXI_P0SS_S_SHTLE read-only .
  data S_SHTWI type ZVCXI_P0SS_S_SHTWI read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_P0_SHTPR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P0SS_CUST_SHTPR
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    importing
      !IS_EVQTY type ZVCXI_XCSR_S_EVQTY
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_KAUSF,
           MATNR    type MATNR,
           WERKS    type WERKS_D,
           DATE     type DATS,
           S_EVQTY  type ZVCXI_XCSR_S_EVQTY,
           S_KAUSF  type ZVCXI_XCSP_S_KAUSF,
         end   of YS_KAUSF .
  types:
    YT_KAUSF type standard table of YS_KAUSF .

  constants C_SETID_P0S_SHTPR type /VCXI/CKXC_SETID value 'ZVCXI_P0S_SHTPR'. "#EC NOTEXT
  class-data T_KAUSF type YT_KAUSF .
private section.
endclass. "ZCL_VCXI_P0SS_CUST_SHTPR definition
class ZCL_VCXI_P0SS_CUST_SHTPR implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC     type        /VCXI/CKXC_S_MAPVC,
         LS_MAPVN     type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Paper Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_SHTPR
                                               IF_OBJNUM = LF_OBJNUM ).
***   Check if Classification is active
      read table LT_SETVA into LS_SETVA index 1.
      if  LS_SETVA-ATNAM is initial.
        clear: LF_OBJNUM.
        concatenate ME->F_MATNR ME->F_WERKS into LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_SHTPR
                                                 IF_OBJNUM = LF_OBJNUM ).
      endif.

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVC,
               LS_MAPVN.

        case LS_SETVA-MAPID.
          when 'FLCUT'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FLCUT.

          when 'SHTLE'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_SHTLE-SHTLE.
            move LS_MAPVN-ATFLV_UOM to ME->S_SHTLE-SHTLE_UOM.

          when 'SHTWI'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_SHTWI-SHTWI.
            move LS_MAPVN-ATFLV_UOM to ME->S_SHTWI-SHTWI_UOM.

        endcase.
      endloop.

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_P0_SHTPR.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
method GET_KAUSF.

  data:          LS_MDLSE      type ZVCXI_P0S_S_MDLSE.
  data:          LT_MDLSE      type ZVCXI_P0S_TT_MDLSE.
  field-symbols: <S_KAUSF>     type YS_KAUSF.

*** Always return Unit
  move '%' to RS_KAUSF-KAUSF_UOM.

*** Only if a Main Co-Product exits
  check ME->F_MCOPR is not initial.

***--------------------------------------------------------------------------------------
*** Check Buffer
  read table T_KAUSF assigning <S_KAUSF>
                     with key MATNR   = ME->F_MATNR
                              WERKS   = ME->F_WERKS
                              DATE    = ME->F_DATE
                              S_EVQTY = IS_EVQTY.
  if SY-SUBRC ne 0.
***--------------------------------------------------------------------------------------
*** Get Separation Model
    call function 'ZVCXI_P0S_COPROD_GET_MDLSE'
      exporting
        IF_MATNR    = ME->F_MATNR
        IF_WERKS    = ME->F_WERKS
        IF_DATE     = ME->F_DATE
        IS_EVQTY    = IS_EVQTY
      importing
        ET_MDLSE    = LT_MDLSE.

*** Get Entry for current Material
    read table LT_MDLSE into LS_MDLSE with key MATNR = ME->F_MATNR.
    check SY-SUBRC eq 0.

*** Add to Buffer
    append initial line to T_KAUSF assigning <S_KAUSF>.
    move ME->F_MATNR            to <S_KAUSF>-MATNR.
    move ME->F_WERKS            to <S_KAUSF>-WERKS.
    move ME->F_DATE             to <S_KAUSF>-DATE.
    move IS_EVQTY               to <S_KAUSF>-S_EVQTY.
    move-corresponding LS_MDLSE to <S_KAUSF>-S_KAUSF.

  endif.


***--------------------------------------------------------------------------------------
*** Return buffered Value
  move <S_KAUSF>-S_KAUSF to RS_KAUSF.

endmethod.
