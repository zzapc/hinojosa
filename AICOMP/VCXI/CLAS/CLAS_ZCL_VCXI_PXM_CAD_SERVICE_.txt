
class ZCL_VCXI_PXM_CAD_SERVICE definition
  public
  final
  create protected .

public section.

  class-methods RESTART_BY_VBELN
    importing
      !IF_VBELN type VBELN
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_PXM_CAD_SERVICE definition
class ZCL_VCXI_PXM_CAD_SERVICE implementation.
  method RESTART_BY_VBELN.

    data: LF_GREGE type /VCXI/CKR_GREGE,
          LF_GRPRO type /VCXI/CKMR_GRPRO.
    data: LS_JOBDATA   type TBTCSTRT.
    data: LT_GRPRO     type table of /VCXI/CKMR_GRPRO,
          LT_GRPRO_SUB type table of /VCXI/CKMR_GRPRO.
    data: LR_CMODEL  type ref to /VCXI/CL_CKMC_CMODEL,
          LR_RPROC   type ref to /VCXI/CL_CKMR_RPROC,
          LR_DCO_INB type ref to ZCL_VCXI_PXM_CAD_DCO_INB.


*** Create SmartMD Customizing Model
    LR_CMODEL = /VCXI/CL_CKMC_CMODEL=>GET_INSTANCE_BY_ICMDL( IF_ICMDL = 'ZVCXI_PXM_CAD_INB' ).

*** Get GUID of Process
    LF_GREGE = LR_CMODEL->R_CPROC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***------------------------------------------------------------------------------------------------
*** Get all Processes with Temporary Error
    select GRPRO
           into table LT_GRPRO
           from /VCXI/CKM_TD200
          where GREGE eq LF_GREGE
           and  SRPRO eq /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP
          order by STAAT.
    check SY-SUBRC eq 0 and
          LT_GRPRO is not initial.

*** Filter to Top-Level Processes
    select GRPRO
           into table LT_GRPRO_SUB
           from /VCXI/CKM_TD211
           for all entries in LT_GRPRO
          where GRPRO eq LT_GRPRO-TABLE_LINE.             "#EC CI_SUBRC
    loop at LT_GRPRO_SUB into LF_GRPRO.
      delete LT_GRPRO where TABLE_LINE eq LF_GRPRO.
    endloop.
    check LT_GRPRO is not initial.

***------------------------------------------------------------------------------------------------
*** Check all Processes
    loop at LT_GRPRO into LF_GRPRO.
      LR_RPROC ?= /VCXI/CL_CKMR_RPROC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( LF_GRPRO ) ).

***   Map DCO for check
      clear LR_DCO_INB.
      LR_RPROC->MAP_DCO( changing CR_DCO = LR_DCO_INB ).
      check LR_DCO_INB is bound and
            LR_DCO_INB->F_CADPO cp 'VBAP' && IF_VBELN && '*'.

***------------------------------------------------------------------------------------------------
***   Verify Job Data
      call function 'BP_START_DATE_EDITOR'
        exporting
          STDT_DIALOG = 'N'
          STDT_INPUT  = value TBTCSTRT( STARTDTTYP = 'I'    "Immediately starting Job
                                        IMSTRTPOS  = ABAP_TRUE )
        importing
          STDT_OUTPUT = LS_JOBDATA
        exceptions
          others      = 99.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Lock Process
      LR_RPROC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

***   Set Job Data
      LR_RPROC->SET_JOBDATA( IS_JOBDATA = LS_JOBDATA ).

***   Start directly
      LR_RPROC->F_SCHEDULE_WAIT_JOB = ABAP_TRUE.
      LR_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_JOB ).
      LR_RPROC->F_SCHEDULE_WAIT_JOB = ABAP_FALSE.

***   Stop after first started, as they would lock each other
      exit.
    endloop.

  endmethod.
endclass. "ZCL_VCXI_PXM_CAD_SERVICE implementation
