
class ZCL_VCXI_P3SS_UI_CSTEP definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_CSTEP_VIS type ZVCXI_P3SS_S_CSTEP_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_CSTEP_VIS type ANY
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_UC_ASPROP_IN type SYUCOMM value 'ASPROP_IN' ##NO_TEXT.
  constants C_UC_ASPROP_OUT type SYUCOMM value 'ASPROP_OUT' ##NO_TEXT.
  data R_PR_CSTEP type ref to ZCL_VCXI_P3SS_PR_CSTEP .
  data R_TEXTEDIT_LTEXT type ref to ZCL_VCXI_PXSS_TEXTEDIT_LTEXT .

  methods HANDLE_UC_ASPROP
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_P3SS_UI_CSTEP definition
class ZCL_VCXI_P3SS_UI_CSTEP implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Create Text Editor for Long Text
    create object ME->R_TEXTEDIT_LTEXT
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_TEXTEDIT_LTEXT'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Update the Long Text before leaving the screen
    if ME->R_TEXTEDIT_LTEXT is bound.
      ME->R_TEXTEDIT_LTEXT->UPDATE_TEXT( ).
      ME->R_TEXTEDIT_LTEXT->DO_FREE( ).
      clear ME->R_TEXTEDIT_LTEXT.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

***--------------------------------------------------------------------------------------
*** Get TextEdit Conversion Text
    if ME->R_TEXTEDIT_LTEXT is bound.
      move ABAP_TRUE to ME->R_TEXTEDIT_LTEXT->F_REFRESH_REQ.
      ME->R_TEXTEDIT_LTEXT->REFRESH_TEXTEDIT( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_VIS type ZVCXI_P1SS_S_CSTEP_VIS.


    check ME->R_PR_CSTEP is bound.

*** "Cast" Vis Structure
    move-corresponding IS_CSTEP_VIS to LS_CSTEP_VIS.

***--------------------------------------------------------------------------------------
*** Update TextEdit Long Text
    if ME->R_TEXTEDIT_LTEXT is bound.
      ME->R_TEXTEDIT_LTEXT->UPDATE_TEXT( ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

***--------------------------------------------------------------------------------------
*** Update TextEdit Long Text
    if ME->R_TEXTEDIT_LTEXT is bound.
      ME->R_TEXTEDIT_LTEXT->UPDATE_TEXT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
***   Assembly Property Popup
      when C_UC_ASPROP_IN or C_UC_ASPROP_OUT.
        ME->HANDLE_UC_ASPROP( exporting IF_UCOMM = IF_UCOMM ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP.

  endmethod.
  method HANDLE_UC_ASPROP.

    data: LR_BL_ASBPROP type ref to ZCL_VCXI_P3SS_BL_ASBPROP,
          LR_BL_ASFPROP type ref to ZCL_VCXI_P3SS_BL_ASFPROP.


    case IF_UCOMM.
      when C_UC_ASPROP_IN.
***     Get Assembly Property (Inbound)
        LR_BL_ASBPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_PREV~GET_ASBPX( ).
        LR_BL_ASFPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX( ).

      when C_UC_ASPROP_OUT.
***     Get Assembly Property (Outbound)
        LR_BL_ASBPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX( ).
        LR_BL_ASFPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASFPX( ).

    endcase.

*** Start Popup
    ZCL_VCXI_P3SS_POPUP_ASPROP=>START( IR_BL_ASBPROP = LR_BL_ASBPROP
                                       IR_BL_ASFPROP = LR_BL_ASFPROP
                                       IF_WERKS      = ME->R_PR_CSTEP->GET_WERKS( ) ).

  endmethod.
  method INIT_VIS.

    data: LR_BL_ASFPROP type ref to ZCL_VCXI_P3SS_BL_ASFPROP.

    check ME->R_PR_CSTEP is bound.
    free: ME->S_CSTEP_VIS.


***--------------------------------------------------------------------------------------
*** Get Handling Dimension (Inbound)
    LR_BL_ASFPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX( ).
    if LR_BL_ASFPROP is bound.
      ME->S_CSTEP_VIS-S_IOSEC_IN-S_HNDDIM = LR_BL_ASFPROP->S_HNDDIM.
    endif.


***--------------------------------------------------------------------------------------
*** Get Handling Dimension (Outbound)
    LR_BL_ASFPROP = ME->R_PR_CSTEP->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASFPX( ).
    if LR_BL_ASFPROP is bound.
      ME->S_CSTEP_VIS-S_IOSEC_OUT-S_HNDDIM = LR_BL_ASFPROP->S_HNDDIM.
    endif.

  endmethod.
