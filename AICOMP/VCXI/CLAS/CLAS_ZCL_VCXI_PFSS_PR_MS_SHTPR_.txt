
class ZCL_VCXI_PFSS_PR_MS_SHTPR definition
  public
  inheriting from ZCL_VCXI_P0SS_PR_MS_SHTPR
  create public .

public section.

  interfaces ZIF_VCXI_PFSS_SBINFO .

  constants C_IPRVT_PF_MS_SHTPR type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_MS_SHTPR'. "#EC NOTEXT

  methods GET_PAPGR
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_BAWGP
    redefinition .
  methods GET_BAWGT
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods SET_BAWGP
    redefinition .
  methods SET_BAWGT
    redefinition .
  methods IS_PRINT_CALCULATED
    redefinition .
protected section.

  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PAPGR_CHANGED type /VCXI/VKSC_IEVNT value 'PAPGR_CHANGED'. "#EC NOTEXT
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM'. "#EC NOTEXT
  constants C_PARID_PAPGR type /VCXI/VKS_PARID value 'ZVCXI_PF_PAPGR'. "#EC NOTEXT
  data R_CUST_PF_SHTPR type ref to ZCL_VCXI_PFSS_CUST_SHTPR .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
  methods SET_SHTPR_BY_CUST
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSS_PR_MS_SHTPR definition
class ZCL_VCXI_PFSS_PR_MS_SHTPR implementation.
method GET_BAWGP.

*** always 1 M2
  RS_BAWGP-BAWGP     = 1.
  RS_BAWGP-BAWGP_UOM = 'M2'.

endmethod.
method GET_BAWGT.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM,
        LS_BAWGP type ZVCXI_P0S_S_BAWGP.

  LS_GRAMM = ME->GET_GRAMM( ).
  LS_BAWGP = ME->GET_BAWGP( ).

*** Calculate Weight
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_GRAMM-GRAMM
                                                      IF_CALCV_UOM_1 = LS_GRAMM-GRAMM_UOM
                                                      IF_CALCV_2     = LS_BAWGP-BAWGP
                                                      IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                            importing EF_CALCV       = RS_BAWGT-BAWGT
                                                      EF_CALCV_UOM   = RS_BAWGT-BAWGT_UOM ).
endmethod.
method GET_GRAMM.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
  move LS_PARAM-ATFLV to RS_GRAMM-GRAMM.
  move LS_PARAM-UNIT  to RS_GRAMM-GRAMM_UOM.

endmethod.
method GET_PAPGR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).
  move LS_PARAM-ATWRT to RF_PAPGR.

endmethod.
method GET_STATUS.

  data: LF_PAPGR type ZVCXI_PFSS_PAPGR.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Paper Grade
  LF_PAPGR = ME->GET_PAPGR( ).
  if LF_PAPGR is not initial and
     ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LF_PAPGR type ZVCXI_PFSS_PAPGR.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Paper Grade
  LF_PAPGR = ME->GET_PAPGR( ).
  if LF_PAPGR is not initial and
     ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_TRUE.
*** Paper Grade is maintained and valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '151' ).
  elseif LF_PAPGR is not initial and
         ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_FALSE.
*** Paper Grad is maintained but not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '152' ).
  elseif LF_PAPGR is initial.
*** Paper Grade is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '153' ).
  endif.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D,
         LF_DCONF type DATS.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.
  move ME->GET_DCONF( )            to LF_DCONF.

  if ME->R_CUST_PF_SHTPR          is bound    and
     ME->R_CUST_PF_SHTPR->F_MATNR eq LF_MATNR and
     ME->R_CUST_PF_SHTPR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_P0_SHTPR, ME->R_CUST_PF_SHTPR.

*** Load the Customizing
  ME->R_CUST_PF_SHTPR = ZCL_VCXI_PFSS_CUST_SHTPR=>GET_INSTANCE_PF_SHTPR( IF_MATNR = LF_MATNR
                                                                         IF_WERKS = LF_WERKS
                                                                         IF_DATE  = LF_DCONF ).

  check ME->R_CUST_PF_SHTPR is bound.
  move ME->R_CUST_PF_SHTPR to ME->R_CUST_P0_SHTPR.
  move ME->R_CUST_PF_SHTPR to ME->R_CUST_MATNR.

*** Set Data
  ME->SET_SHTPR_BY_CUST( ).
  ME->SET_PRINT_BY_CUST( ).

endmethod.
method IS_PRINT_CALCULATED.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC         type ref to ZCL_VCXI_PFSS_PR_SPEC.

  RF_CALCULATED = SUPER->IS_PRINT_CALCULATED( ).
  check RF_CALCULATED eq ABAP_FALSE.

***------------------------------------------------------------------------------------------------
*** Get Specification SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC.
  endtry.

  if LR_PR_SPEC is bound.
    RF_CALCULATED = LR_PR_SPEC->IS_PRINT_CALCULATED( ).
    exit.
  endif.

endmethod.
method SET_BAWGP.

*** Will be always 1M2

endmethod.
method SET_BAWGT.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM,
        LS_BAWGP type ZVCXI_P0S_S_BAWGP.

  LS_GRAMM = ME->GET_GRAMM( ).
  LS_BAWGP = ME->GET_BAWGP( ).

*** Calculate Weight
  if IS_BAWGT-BAWGT_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_BAWGT-BAWGT
                                                        IF_CALCV_UOM_1 = IS_BAWGT-BAWGT_UOM
                                                        IF_CALCV_2     = LS_BAWGP-BAWGP
                                                        IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                        IF_UOM         = LS_GRAMM-GRAMM_UOM
                                              importing EF_CALCV       = LS_GRAMM-GRAMM
                                                        EF_CALCV_UOM   = LS_GRAMM-GRAMM_UOM ).
  endif.

  ME->SET_GRAMM( IS_GRAMM = LS_GRAMM ).

endmethod.
method SET_GRAMM.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

  move IS_GRAMM-GRAMM     to LS_PARAM-ATFLV.
  move IS_GRAMM-GRAMM_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYW_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).
  endif.

endmethod.
method SET_PAPGR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).

  move IF_PAPGR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAPGR_CHANGED ).
  endif.

endmethod.
method SET_SHTPR_BY_CUST.

  SUPER->SET_SHTPR_BY_CUST( ).

*** Get Sheet Procurement Info's for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_PAPGR( IF_PAPGR = ME->R_CUST_PF_SHTPR->F_PAPGR ).
    ME->SET_GRAMM( IS_GRAMM = ME->R_CUST_PF_SHTPR->S_GRAMM ).
  endif.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_GRAMM.

  RS_GRAMM = ME->GET_GRAMM( ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_GRDIR.

  data:  LS_AGGRA    type ZVCXI_PFSS_S_AGGRA,
         LS_INGRA    type ZVCXI_PFSS_S_INGRA,
         LS_SHTLE    type ZVCXI_P0SS_S_SHTLE,
         LS_SHTWI    type ZVCXI_P0SS_S_SHTWI.

*** Get Sheet Size
  LS_SHTWI = ME->GET_SHTWI( ).
  LS_SHTLE = ME->GET_SHTLE( ).

  move LS_SHTWI-SHTWI     to LS_AGGRA-AGGRA.
  move LS_SHTWI-SHTWI_UOM to LS_AGGRA-AGGRA_UOM.

  move LS_SHTLE-SHTLE     to LS_INGRA-INGRA.
  move LS_SHTLE-SHTLE_UOM to LS_INGRA-INGRA_UOM.

*** Get Grain Direction
  RF_GRDIR = ZCL_VCXI_PFSS_CUST_SBOARD=>GET_GRDIR( IS_AGGRA = LS_AGGRA
                                                   IS_INGRA = LS_INGRA ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_PAPGR.

  RF_PAPGR = ME->GET_PAPGR( ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~IS_EDITABLE.

  EF_MATNR  = ABAP_TRUE.
  if ME->IS_DUMMY( ) eq ABAP_TRUE.
    EF_SBINFO = ABAP_TRUE.
    EF_CALIP  = ABAP_TRUE.
  else.
    EF_SBINFO = ABAP_FALSE.
    EF_CALIP  = ABAP_FALSE.
  endif.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~IS_VISIBLE.

  EF_MATNR  = ABAP_TRUE.
  EF_SBINFO = ABAP_TRUE.
  EF_CALIP  = ABAP_TRUE.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_CALIP.

  check ME->IS_DUMMY( ) eq ABAP_TRUE.

  ME->SET_CALIP( IS_CALIP = IS_CALIP
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_GRAMM.

  check ME->IS_DUMMY( ) eq ABAP_TRUE.

  ME->SET_GRAMM( IS_GRAMM = IS_GRAMM
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_MATNR.

  ME->SET_MATNR( IF_MATNR = IF_MATNR
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_PAPGR.

  check ME->IS_DUMMY( ) eq ABAP_TRUE.

  ME->SET_PAPGR( IF_PAPGR = IF_PAPGR
                 IF_SETBY = IF_SETBY ).

endmethod.
