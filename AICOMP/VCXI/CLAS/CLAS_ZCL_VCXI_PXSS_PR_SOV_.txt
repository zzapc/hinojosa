
class ZCL_VCXI_PXSS_PR_SOV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_ICONT .
  interfaces ZIF_VCXI_XCS_NGREP .

  aliases C_ICONT_PROD
    for ZIF_VCXI_PXSS_ICONT~C_ICONT_PROD .
  aliases C_ICONT_SALES
    for ZIF_VCXI_PXSS_ICONT~C_ICONT_SALES .
  aliases C_IEVNT_O_ICONT_CHANGED
    for ZIF_VCXI_PXSS_ICONT~C_IEVNT_O_ICONT_CHANGED .
  aliases C_IPRVT_PX_ICONT
    for ZIF_VCXI_PXSS_ICONT~C_IPRVT_PX_ICONT .
  aliases C_PARID_ICONT
    for ZIF_VCXI_PXSS_ICONT~C_PARID_ICONT .
  aliases GET_ICONT
    for ZIF_VCXI_PXSS_ICONT~GET_ICONT .
  aliases SET_ICONT
    for ZIF_VCXI_PXSS_ICONT~SET_ICONT .

  constants C_IPRVT_PX_SOV type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_SOV' ##NO_TEXT.

  methods CONNECT
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CONNECTED_XCOMP
    importing
      !IT_XCONR type ZVCXI_PXSS_TT_XCONR optional
    returning
      value(RT_XCONR) type ZVCXI_PXSS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE optional
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONI
    importing
      !IF_CONNECTED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONO
    importing
      !IF_CONNECTED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_XCONR
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCONR) type ZVCXI_PXSS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods SET_XCONR
    importing
      !IT_XCONR type ZVCXI_PXSS_TT_XCONR
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  types:
    begin of YS_XCON_MAP,
         R_GATE   type ref to /VCXI/CL_VKSR_GATE,
         GXCON    type        ZVCXI_PXSS_GXCON,
       end   of YS_XCON_MAP .
  types:
    YT_XCON_MAP type standard table of YS_XCON_MAP with default key .

  constants C_ATTID_MAX_ALLOWED_FG type /VCXI/VKS_ATTID value 'MAX_ALLOWED_FG' ##NO_TEXT.
  constants C_ATTID_MIN_ALLOWED_FG type /VCXI/VKS_ATTID value 'MIN_ALLOWED_FG' ##NO_TEXT.
  constants C_IEVNT_I_DO_BACKWARD type /VCXI/VKSC_IEVNT value 'DO_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_DO_FORWARD type /VCXI/VKSC_IEVNT value 'DO_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_REORG_XCON type /VCXI/VKSC_IEVNT value 'REORG_XCON' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_PARID_XCONG type /VCXI/VKS_PARID value 'ZVCXI_PX_XCONG' ##NO_TEXT.

  methods REPLACE_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_XCONG
    returning
      value(RT_XCONG) type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_XCONI_MAP
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCON_MAP) type YT_XCON_MAP
    raising
      /VCXI/CX_CKX .
  methods GET_XCONO_MAP
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCON_MAP) type YT_XCON_MAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_BACKWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_FORWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REORG_XCON
    raising
      /VCXI/CX_CKX .
  methods SET_XCONG
    importing
      !IT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_ALLOWED_FG
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_SOV definition
class ZCL_VCXI_PXSS_PR_SOV implementation.
  method CHECK_ALLOWED_FG.

    data: LF_MIN_FG   type I,
          LF_MAX_FG   type I,
          LF_COUNT_FG type I.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Read minimum/maximum number of Finished Goods from attribute
    LF_MIN_FG = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_MIN_ALLOWED_FG )-ATTVA.
    LF_MAX_FG = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_MAX_ALLOWED_FG )-ATTVA.

*** Count Finished Goods without Material Number (before MBQ)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if cast ZIF_VCXI_PXSS_FG( LR_GATE->R_CLSPR )->GET_MATNR( ) is initial.
        LF_COUNT_FG += 1.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Check minimum allowed FGs
    if LINES( LT_GATE ) lt LF_MIN_FG.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     At least &1 Finished Goods are required.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '051'
                                 IF_MSGV1 = |{ LF_MIN_FG number = user }| ).
      endif.
    endif.

*** Check maximum allowed FGs
    if LF_COUNT_FG gt LF_MAX_FG.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Only &1 Finished Goods allowed.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '052'
                                 IF_MSGV1 = |{ LF_MAX_FG number = user }| ).
      endif.
    endif.

  endmethod.
  method CONNECT.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR.


*** Check compatibility
    if IR_GATE_IN->R_CLSPR  is not instance of ZCL_VCXI_PXSS_PR_XCONI or
       IR_GATE_OUT->R_CLSPR is not instance of ZCL_VCXI_PXSS_PR_XCONO or
       cast ZCL_VCXI_PXSS_PR_XCONI( IR_GATE_IN->R_CLSPR  )->IS_XCONO_COMPATIBLE( IR_GATE_XCONO = IR_GATE_OUT ) ne ABAP_TRUE or
       cast ZCL_VCXI_PXSS_PR_XCONO( IR_GATE_OUT->R_CLSPR )->IS_XCONI_COMPATIBLE( IR_GATE_XCONI = IR_GATE_IN  ) ne ABAP_TRUE.
***   Connection In and Out are not compatible.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '053' ).
    endif.

*** Enhance existing Connections
    LT_XCONR = ME->GET_XCONR( ).

    append value #( R_GATE_IN  = IR_GATE_IN
                    R_GATE_OUT = IR_GATE_OUT ) to LT_XCONR.

    ME->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method GET_CONNECTED_XCOMP.

    data: LS_XCONR      type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR      type ZVCXI_PXSS_TT_XCONR,
          LT_GATE_XCOMP type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_XCONR> type ZVCXI_PXSS_S_XCONR.


***--------------------------------------------------------------------------------------
*** Get Components
    LT_GATE_XCOMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCOMP=>C_IPRVT_PX_XCOMP ).
    check LT_GATE_XCOMP is not initial.

*** Get X-Connections as References
    LT_XCONR = cond #( when IT_XCONR is supplied then IT_XCONR
                                                 else ME->GET_XCONR( ) ).

***--------------------------------------------------------------------------------------
*** Translate Connections to Component Level
    loop at LT_XCONR into LS_XCONR.
      append initial line to RT_XCONR assigning <S_XCONR>.

      loop at LT_GATE_XCOMP into LR_GATE_XCOMP.
***     Translate XCONI to XCOMP
        if LS_XCONR-R_GATE_IN is bound and LS_XCONR-R_GATE_IN->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
          <S_XCONR>-R_GATE_IN = LR_GATE_XCOMP.
        endif.

***     Translate XCONO to XCOMP
        if LS_XCONR-R_GATE_OUT is bound and LS_XCONR-R_GATE_OUT->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
          <S_XCONR>-R_GATE_OUT = LR_GATE_XCOMP.
        endif.

***     Translation completed?
        if <S_XCONR>-R_GATE_IN is bound and
           <S_XCONR>-R_GATE_OUT is bound.
          exit.
        endif.
      endloop.
    endloop.

  endmethod.
  method GET_PRVDR_XCONI.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Provider
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Filter by Connection Status
    if IF_CONNECTED ne ABAP_UNDEFINED.
      LT_XCONR = ME->GET_XCONR( ).

      loop at RT_GATE into LR_GATE.
        if ( IF_CONNECTED eq ABAP_TRUE  and not LINE_EXISTS( LT_XCONR[ R_GATE_IN = LR_GATE ] ) ) or
           ( IF_CONNECTED eq ABAP_FALSE and     LINE_EXISTS( LT_XCONR[ R_GATE_IN = LR_GATE ] ) ).
          delete RT_GATE.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_PRVDR_XCONO.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Provider
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONO=>C_IPRVT_XCONO
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Filter by Connection Status
    if IF_CONNECTED ne ABAP_UNDEFINED.
      LT_XCONR = ME->GET_XCONR( ).

      loop at RT_GATE into LR_GATE.
        if ( IF_CONNECTED eq ABAP_TRUE  and not LINE_EXISTS( LT_XCONR[ R_GATE_OUT = LR_GATE ] ) ) or
           ( IF_CONNECTED eq ABAP_FALSE and     LINE_EXISTS( LT_XCONR[ R_GATE_OUT = LR_GATE ] ) ).
          delete RT_GATE.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Number of Finished Goods
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ALLOWED_FG( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Number of Finished Goods
    ME->CHECK_ALLOWED_FG( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_XCONG.

    data:  LF_XML            type        STRING.
    data:  LS_PARAM          type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_XCONG ).
    move LS_PARAM-STRNG to LF_XML.
    check LF_XML is not initial.

*** Deserialize XML
    call transformation ID
         source xml LF_XML
         result T_XCONG  = RT_XCONG.

  endmethod.
  method GET_XCONI_MAP.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_PXSS_PR_XCONI.
    field-symbols: <S_XCON_MAP>  type YS_XCON_MAP.


***--------------------------------------------------------------------------------------
    if IR_GATE_IN is supplied.
***   Use supplied Gate
      append IR_GATE_IN to LT_GATE.
    else.
***   Get Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                       IF_INUSE = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.

          append initial line to RT_XCON_MAP assigning <S_XCON_MAP>.
          move LR_GATE                    to <S_XCON_MAP>-R_GATE.
          move LR_PR_XCONI->GET_GXCON( )  to <S_XCON_MAP>-GXCON.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_XCONO_MAP.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.
    field-symbols: <S_XCON_MAP>  type YS_XCON_MAP.

***--------------------------------------------------------------------------------------
    if IR_GATE_OUT is supplied.
***   Use supplied Gate
      append IR_GATE_OUT to LT_GATE.
    else.
***   Get Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONO=>C_IPRVT_XCONO
                                       IF_INUSE = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.

          append initial line to RT_XCON_MAP assigning <S_XCON_MAP>.
          move LR_GATE                    to <S_XCON_MAP>-R_GATE.
          move LR_PR_XCONO->GET_GXCON( )  to <S_XCON_MAP>-GXCON.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_XCONR.

    data: LS_XCONG type ZVCXI_PXSS_S_XCONG,
          LS_XCONR type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONG     type ZVCXI_PXSS_TT_XCONG,
          LT_XCONO_MAP type YT_XCON_MAP,
          LT_XCONI_MAP type YT_XCON_MAP.

***------------------------------------------------------------------------------------------------
*** Get X-Connections (GUID)
    LT_XCONG = ME->GET_XCONG( ).
    check LT_XCONG is not initial.

*** Get X-Connect Mapping
    if IR_GATE_OUT is supplied.
      LT_XCONO_MAP = ME->GET_XCONO_MAP( IR_GATE_OUT = IR_GATE_OUT ).
    else.
      LT_XCONO_MAP = ME->GET_XCONO_MAP( ).
    endif.
    if IR_GATE_IN is supplied.
      LT_XCONI_MAP = ME->GET_XCONI_MAP( IR_GATE_IN = IR_GATE_IN ).
    else.
      LT_XCONI_MAP = ME->GET_XCONI_MAP( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Map the Connections
    loop at LT_XCONG into LS_XCONG.
      clear LS_XCONR.

      if LS_XCONG-GXCON_OUT is not initial.
        LS_XCONR-R_GATE_OUT = value #( LT_XCONO_MAP[ GXCON = LS_XCONG-GXCON_OUT ]-R_GATE optional ).
      endif.

      if LS_XCONG-GXCON_IN is not initial.
        LS_XCONR-R_GATE_IN = value #( LT_XCONI_MAP[ GXCON = LS_XCONG-GXCON_IN ]-R_GATE optional ).
      endif.

      append LS_XCONR to RT_XCONR.
    endloop.

*** Filter to requested Gates
    if IR_GATE_IN is supplied.
      delete RT_XCONR where R_GATE_IN ne IR_GATE_IN.
    endif.
    if IR_GATE_OUT is supplied.
      delete RT_XCONR where R_GATE_OUT ne IR_GATE_OUT.
    endif.

  endmethod.
  method HANDLE_DO_BACKWARD.

    data: LS_XCONR   type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR   type ZVCXI_PXSS_TT_XCONR,
          LT_GATE_IN type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_PXSS_PR_XCONI,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.

***--------------------------------------------------------------------------------------
*** Get Connections
    move ME->GET_XCONR( ) to LT_XCONR.

    loop at IT_GATE into LR_GATE.
      clear LS_XCONR.
      check LR_GATE is bound.

***--------------------------------------------------------------------------------------
***   If Request comes from a Connection In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_IN = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

***   If Request comes from a Connection Out
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

***--------------------------------------------------------------------------------------
***   Perform Backward
      if LS_XCONR is not initial.

        try.
            check LS_XCONR-R_GATE_IN is bound.
            move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
            check LR_PR_XCONI is bound.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_XCONI.
        endtry.

        try.
            check LS_XCONR-R_GATE_OUT is bound.
            move LS_XCONR-R_GATE_OUT->R_CLSPR ?to LR_PR_XCONO.
            check LR_PR_XCONO is bound.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_XCONO.
        endtry.

        clear: LT_GATE_IN.
        append LS_XCONR-R_GATE_IN to LT_GATE_IN.

***     Perform actual Backwarding
        LR_PR_XCONO->ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD( IT_GATE = LT_GATE_IN ).

***   Perform backwarding for deleted Connection
      elseif LR_PR_XCONO is bound.
        LR_PR_XCONO->ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD( IT_GATE = value #( ) ).

      endif.
    endloop.

  endmethod.
  method HANDLE_DO_FORWARD.

    data: LS_XCONR    type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR    type ZVCXI_PXSS_TT_XCONR,
          LT_GATE_OUT type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_PXSS_PR_XCONI,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.

***--------------------------------------------------------------------------------------
*** Get Connections
    move ME->GET_XCONR( ) to LT_XCONR.

    loop at IT_GATE into LR_GATE.
      clear LS_XCONR.
      check LR_GATE is bound.

***--------------------------------------------------------------------------------------
***   If Request comes from a Connection In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_IN = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

***   If Request comes from a Connection Out
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

***--------------------------------------------------------------------------------------
***   Perform Forward
      if LS_XCONR is not initial.
        try.
            check LS_XCONR-R_GATE_IN is bound.
            move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
            check LR_PR_XCONI is bound.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_XCONI.
        endtry.

        try.
            check LS_XCONR-R_GATE_OUT is bound.
            move LS_XCONR-R_GATE_OUT->R_CLSPR ?to LR_PR_XCONO.
            check LR_PR_XCONO is bound.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_XCONO.
        endtry.

        clear: LT_GATE_OUT.
        append LS_XCONR-R_GATE_OUT to LT_GATE_OUT.

***     Perform actual Forwarding
        LR_PR_XCONI->ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD( IT_GATE = LT_GATE_OUT ).

***   Perform Forwarding for deleted Connection
      elseif LR_PR_XCONI is bound.
        LR_PR_XCONI->ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD( IT_GATE = value #( ) ).

      endif.
    endloop.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_REORG_XCON.
        ME->HANDLE_REORG_XCON( ).

***   Backward Processing
      when C_IEVNT_I_DO_BACKWARD.
        ME->HANDLE_DO_BACKWARD( IT_GATE = IT_GATE_PROVIDER ).
***   Forward Processing
      when C_IEVNT_I_DO_FORWARD.
        ME->HANDLE_DO_FORWARD( IT_GATE = IT_GATE_PROVIDER ).

    endcase.

  endmethod.
  method HANDLE_REORG_XCON.

    data:  LT_XCONR   type        ZVCXI_PXSS_TT_XCONR.


***------------------------------------------------------------------------------------------------
*** Get X-Connections (References)
    LT_XCONR = ME->GET_XCONR( ).

*** Delete Connections with missing Gate
    delete LT_XCONR where R_GATE_OUT is not bound
                     or   R_GATE_IN  is not bound.

*** Set new X-Connection
    ME->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method MERGE.

    data: LS_XCONR type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR       type ZVCXI_PXSS_TT_XCONR,
          LT_XCONR_XCOMP type ZVCXI_PXSS_TT_XCONR,
          LT_SPVRE       type /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE       type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_XCOMP type ref to /VCXI/CL_VKSR_SPVRE.


***--------------------------------------------------------------------------------------
*** Get and validate Connection
    if IR_GATE_XCONI is supplied and
       IR_GATE_XCONO is supplied.
      LT_XCONR = ME->GET_XCONR( IR_GATE_IN  = IR_GATE_XCONI
                                IR_GATE_OUT = IR_GATE_XCONO ).
    elseif IR_GATE_XCONI is supplied.
      LT_XCONR = ME->GET_XCONR( IR_GATE_IN  = IR_GATE_XCONI ).
    elseif IR_GATE_XCONO is supplied.
      LT_XCONR = ME->GET_XCONR( IR_GATE_OUT = IR_GATE_XCONO ).
    endif.
    if LINES( LT_XCONR ) ne 1.
      raise exception type /VCXI/CX_CKX.
    endif.
    LS_XCONR = LT_XCONR[ 1 ].

*** Check that Connections allow merging (delegate decision)
    check cast ZCL_VCXI_PXSS_PR_XCONO( LS_XCONR-R_GATE_OUT->R_CLSPR )->IS_MERGE_ALLOWED( ) and
          cast ZCL_VCXI_PXSS_PR_XCONI( LS_XCONR-R_GATE_IN->R_CLSPR  )->IS_MERGE_ALLOWED( ).

*** Get Provider of connected Components
    LT_XCONR_XCOMP = ME->GET_CONNECTED_XCOMP( IT_XCONR = LT_XCONR ).
    check LT_XCONR_XCOMP is not initial.

***--------------------------------------------------------------------------------------
*** Get supervised Runtime Elements
    LT_SPVRE = ME->R_GATE->GET_SPVRE( ).

*** Remove Outbound XCONO and Output
    LR_SPVRE = value #( LT_SPVRE[ TABLE_LINE->F_GATKY = LS_XCONR-R_GATE_OUT->F_GATKY ] optional ).
    check LR_SPVRE is bound.
    delete LT_SPVRE where TABLE_LINE eq LR_SPVRE
                     or   TABLE_LINE eq LR_SPVRE->R_PARENT.

*** Remove Inbound XCONI and Input
    LR_SPVRE = value #( LT_SPVRE[ TABLE_LINE->F_GATKY = LS_XCONR-R_GATE_IN->F_GATKY ] optional ).
    check LR_SPVRE is bound.
    delete LT_SPVRE where TABLE_LINE eq LR_SPVRE
                     or   TABLE_LINE eq LR_SPVRE->R_PARENT.


*** Replace Outbound Component by new Component
    LR_SPVRE_XCOMP = ME->REPLACE_SPVRE( exporting IR_SPVRE        = value #( LT_SPVRE[ TABLE_LINE->F_GATKY = LT_XCONR_XCOMP[ 1 ]-R_GATE_OUT->F_GATKY ] optional )
                                                  IR_SPVRE_PARENT = value #( LT_SPVRE[ TABLE_LINE->F_GATKY = ME->R_GATE->F_GATKY ] optional )
                                        changing  CT_SPVRE        = LT_SPVRE ).

*** Replace Elements of Inbound Component and assign to new Component
    loop at LT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq value #( LT_SPVRE[ TABLE_LINE->F_GATKY = LT_XCONR_XCOMP[ 1 ]-R_GATE_IN->F_GATKY ] optional ).
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = LR_SPVRE_XCOMP
                         changing  CT_SPVRE        = LT_SPVRE ).
    endloop.
    delete LT_SPVRE where TABLE_LINE->F_GATKY = LT_XCONR_XCOMP[ 1 ]-R_GATE_IN->F_GATKY.

*** Set Supervised Runtime Element
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE ).

  endmethod.
  method REPLACE_SPVRE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_ID type table of /VCXI/CKX_ID.
    data: LR_SPVRE  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Remove old Element from List
    delete CT_SPVRE where TABLE_LINE eq IR_SPVRE.

*** Reuse Component Structure if already available
    LT_ID = value #( ( 'SPEC' ) ( 'INPUT' ) ( 'CONV' ) ( 'OUTPUT' )
                     ( 'RTESPV' ) ).
    if LINE_EXISTS( LT_ID[ TABLE_LINE = IR_SPVRE->GET_ID( ) ] ).
      RR_SPVRE = value #( CT_SPVRE[ TABLE_LINE->R_SPVCE  = IR_SPVRE->R_SPVCE
                                    TABLE_LINE->R_PARENT = IR_SPVRE_PARENT ] optional ).
    endif.

    if RR_SPVRE is not bound.
***   Create new Element
      create object RR_SPVRE
        exporting
          IR_SPVCE  = IR_SPVRE->R_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append RR_SPVRE to CT_SPVRE.

***   Copy Leading Object
      RR_SPVRE->SET_LEOKY( IS_LEOKY = IR_SPVRE->S_LEOKY ).

***   Copy Parameter
      loop at IR_SPVRE->R_SPVCE->T_PARAM into LR_OBJECT.
        LS_PARAM = IR_SPVRE->GET_PARAM( IF_PARID = LR_OBJECT->GET_ID( ) ).
        RR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
      endloop.

***   Copy In Use Status
      RR_SPVRE->SET_INUSE( IF_INUSE = IR_SPVRE->F_INUSE ).
    endif.

***--------------------------------------------------------------------------------------
*** Process Children
    loop at CT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq IR_SPVRE.
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = RR_SPVRE
                         changing  CT_SPVRE        = CT_SPVRE ).
    endloop.

  endmethod.
  method SET_XCONG.

    data:  LF_XML            type        STRING.
    data:  LS_PARAM          type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Create XML
    call transformation ID
         source T_XCONG  = IT_XCONG
         result xml LF_XML.

*** Set Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_XCONG ).
    move LF_XML                           to LS_PARAM-STRNG.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.
    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_XCONR.

    data: LS_XCONR    type ZVCXI_PXSS_S_XCONR,
          LS_XCON_MAP type YS_XCON_MAP.
    data: LT_XCONR         type ZVCXI_PXSS_TT_XCONR,
          LT_XCONG         type ZVCXI_PXSS_TT_XCONG,
          LT_XCONO_MAP     type YT_XCON_MAP,
          LT_XCONI_MAP     type YT_XCON_MAP,
          LT_GATE_FORWARD  type /VCXI/VKSR_TT_GATE,
          LT_GATE_BACKWARD type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_XCONG>  type ZVCXI_PXSS_S_XCONG.

***------------------------------------------------------------------------------------------------
*** Process all events to ensure GUIDs are set
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Get X-Connect Mapping
    LT_XCONO_MAP = ME->GET_XCONO_MAP( ).
    LT_XCONI_MAP = ME->GET_XCONI_MAP( ).

*** Get old X-Connections (References)
    move ME->GET_XCONR( ) to LT_XCONR.

***------------------------------------------------------------------------------------------------
*** Map the Connections
    loop at IT_XCONR into LS_XCONR.
      check LS_XCONR-R_GATE_OUT is bound and
            LS_XCONR-R_GATE_IN  is bound.

      append initial line to LT_XCONG assigning <S_XCONG>.

      read table LT_XCONO_MAP into LS_XCON_MAP with key R_GATE = LS_XCONR-R_GATE_OUT.
      if SY-SUBRC eq 0.
        move LS_XCON_MAP-GXCON to <S_XCONG>-GXCON_OUT.
      endif.

      read table LT_XCONI_MAP into LS_XCON_MAP with key R_GATE = LS_XCONR-R_GATE_IN.
      if SY-SUBRC eq 0.
        move LS_XCON_MAP-GXCON to <S_XCONG>-GXCON_IN.
      endif.
    endloop.

*** Remove Duplicates
    sort LT_XCONG by GXCON_OUT.
    delete adjacent duplicates from LT_XCONG comparing GXCON_OUT.
    sort LT_XCONG by GXCON_IN.
    delete adjacent duplicates from LT_XCONG comparing GXCON_IN.

***------------------------------------------------------------------------------------------------
*** Set X-Connections (GUID)
    ME->SET_XCONG( IT_XCONG = LT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Forward/Backward between new Connections
    if IT_XCONR ne LT_XCONR.
***   Forward/Backward between new Connections
      loop at IT_XCONR into LS_XCONR
                      where R_GATE_OUT is bound
                       and  R_GATE_IN  is bound.

        if not LINE_EXISTS( LT_XCONR[ R_GATE_OUT = LS_XCONR-R_GATE_OUT
                                      R_GATE_IN  = LS_XCONR-R_GATE_IN ] ).
          append LS_XCONR-R_GATE_OUT to LT_GATE_FORWARD.
          append LS_XCONR-R_GATE_IN  to LT_GATE_BACKWARD.

***       Raise events on Connectin Out/In
          LS_XCONR-R_GATE_OUT->SET_EVENT( IF_IEVNT = ZCL_VCXI_PXSS_PR_XCONO=>C_IEVNT_O_CONNECTED ).
          LS_XCONR-R_GATE_IN->SET_EVENT(  IF_IEVNT = ZCL_VCXI_PXSS_PR_XCONI=>C_IEVNT_O_CONNECTED ).
        endif.
      endloop.

***   Forward/Backward on removed Connections
      loop at LT_XCONR into LS_XCONR.
        if not LINE_EXISTS( IT_XCONR[ R_GATE_OUT = LS_XCONR-R_GATE_OUT
                                      R_GATE_IN  = LS_XCONR-R_GATE_IN ] ).
          append LS_XCONR-R_GATE_IN  to LT_GATE_FORWARD.
          append LS_XCONR-R_GATE_OUT to LT_GATE_BACKWARD.
        endif.
      endloop.

      ME->HANDLE_DO_FORWARD(  IT_GATE = LT_GATE_FORWARD ).
      ME->HANDLE_DO_BACKWARD( IT_GATE = LT_GATE_BACKWARD ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_ICONT~GET_ICONT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).
    move LS_PARAM-ATWRT to RF_ICONT.

    check RF_ICONT is not initial.

*** Get Context ID description
    if EF_DESCR is requested.
      EF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DOMAIN_VALUE_TEXT( IF_DOMNAME    = 'ZVCXI_P0S_ICONT'
                                                              IF_DOMVALUE_L = conv #( RF_ICONT ) ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_ICONT~SET_ICONT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).

    move IF_ICONT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICONT_CHANGED ).

    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_GROUP_KEY type I.
    data: LS_XCONR      type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR      type ZVCXI_PXSS_TT_XCONR.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.


    check CR_NETGRAPH_JSON is bound.

***--------------------------------------------------------------------------------------
*** Get all Components
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCOMP=>C_IPRVT_PX_XCOMP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE_XCOMP.
***   Add component as Group
      LF_GROUP_KEY = CR_NETGRAPH_JSON->ADD_GROUP( IF_TITLE = LR_GATE_XCOMP->R_CLSPR->GET_DESCR( )
                                                  IF_DESCR = LR_GATE_XCOMP->R_CLSPR->GET_DESCR( )
                                                  IF_ICON = 'sap-icon://header'
                                                  ).
***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_XCOMP
                                          IF_NODE_KEY = LF_GROUP_KEY ).

***   Delegate Fill to Component
      cast ZIF_VCXI_XCS_NGREP( LR_GATE_XCOMP->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = LF_GROUP_KEY
                                                               changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endloop.

***--------------------------------------------------------------------------------------
*** Get Connections between Components
    LT_XCONR = ME->GET_XCONR( ).

*** Delete Connections with missing Gate
    delete LT_XCONR where R_GATE_OUT is not bound
                     or   R_GATE_IN  is not bound.

***--------------------------------------------------------------------------------------
*** Complete Re-Build of the lines
    loop at LT_XCONR into LS_XCONR.
***   Add Line
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_XCONR-R_GATE_OUT )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_XCONR-R_GATE_IN ) ).
    endloop.

  endmethod.
