
class ZCL_VCXI_PCSR_PR_RTESPV_CR definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  create public .

public section.

  constants C_IPRVT_P0_RTESPV_AS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SR_RTESPV_AS'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
protected section.

  methods GET_PRVDR_SELFD
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_SELFD) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods TURN_PCDIR
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_PCDIR_PREV type ZVCXI_P0SP_PCDIR
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_PCDIR
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CORR_CR
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_WAX
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCSTR
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_TAPE type /VCXI/VKSR_TT_GATE optional
      !IF_CSCOR type ZVCXI_P0SS_CSCOR optional
      !IF_SCSOP type ZVCXI_P0S_SCSOP optional
    returning
      value(RT_GATE_SCSTR) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BOARD
    importing
      !IR_GATE_SPEC_CR type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_BOARD) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCSTR_MGR
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_SCSTR_MGR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_TAPE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_COMBI_PSTEP
    redefinition .
  methods BUILD_RTE_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods VALIDATE
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSR_PR_RTESPV_CR definition
class ZCL_VCXI_PCSR_PR_RTESPV_CR implementation.
method BUILD_RTE_COMBI_PSTEP.

  data:  LS_RTE_COMBI_PSTEP_CORR   type        /VCXI/VSMR_S_RTE_COMBI_PSTEP.
  data:  LR_RTE_PSTEP              type ref to /VCXI/CL_VSMR_RTE_PSTEP.

*** Super
  RT_RTE_COMBI_PSTEP = SUPER->BUILD_RTE_COMBI_PSTEP( IR_PRTE      = IR_PRTE
                                                     IT_RTE_PSTEP = IT_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Define Combinations
  loop at IT_RTE_PSTEP into LR_RTE_PSTEP.

    case LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Waxing and Taping with Corrugation
      when ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR=>C_IPSTP_CORR_CR or
           ZCL_VCXI_PCSR_BL_PSTEP_WAX=>C_IPSTP_WAX         or
           ZCL_VCXI_P0SR_BL_PSTEP_TAPE=>C_IPSTP_TAPE.
        append LR_RTE_PSTEP to LS_RTE_COMBI_PSTEP_CORR-T_RTE_PSTEP.

    endcase.
  endloop.

***--------------------------------------------------------------------------------------
*** Set Combination
  if lines( LS_RTE_COMBI_PSTEP_CORR-T_RTE_PSTEP ) gt 1.
    append LS_RTE_COMBI_PSTEP_CORR to RT_RTE_COMBI_PSTEP.
  endif.

endmethod.
method BUILD_RTE_PSTEP.

  data:  LT_BL_PSTEP        type        ZVCXI_XCSR_TT_BL_PSTEP.
  data:  LR_BL_PSTEP_ORG    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_NEW    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR_CURR      type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_PREV      type ref to ZIF_VCXI_P0SR_PCDIR.

***----------------------------------------------------------------------------
  if IR_RTE_PSEQ is not bound.
*** Copy BL PStep due to Sequence Specific Values
    loop at IT_BL_PSTEP into LR_BL_PSTEP_ORG.
      move LR_BL_PSTEP_ORG->COPY( ) to LR_BL_PSTEP_NEW.
      append LR_BL_PSTEP_NEW to LT_BL_PSTEP.
    endloop.

*** Create Routing Production Steps
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = LT_BL_PSTEP ).

*** Process Sequence Dependent BL PStep Settings
    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.

***   Get PC Direction
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Forward PC Direction
      if LR_PCDIR_PREV is bound and
         LR_PCDIR_CURR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
        LR_PCDIR_CURR->SET_PCDIR( IF_PCDIR = LR_PCDIR_PREV->F_PCDIR ).
      endif.

***   Keep Curr as Previous
      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.

***----------------------------------------------------------------------------
*** Cascading Method Call (Keep everything as is)
  else.
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = IT_BL_PSTEP
                                           IR_RTE_PSEQ = IR_RTE_PSEQ ).
  endif.

endmethod.
method CONSTRUCTOR.

  data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
  if IR_BL_RTESPV is bound.
    move IR_BL_RTESPV to LR_BL_RTESPV.
  else.
    create object LR_BL_RTESPV
      type
        ZCL_VCXI_P0SR_BL_RTESPV
      exporting
        IR_GATE                    = IR_GATE.
  endif.

*** Call Super
  call method SUPER->CONSTRUCTOR
    exporting
      IR_GATE      = IR_GATE
      IR_BL_RTESPV = LR_BL_RTESPV.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    type
      ZCL_VCXI_PCSR_BL_PRTE_CR
    exporting
      IR_RTE_PRTE              = LR_RTE_PRTE
      IR_MFMI                  = ME->R_MFMI
      IR_MFSI                  = ME->R_MFSI
      IT_CSPLIT                = ME->T_CSPLIT
      IF_DATE                  = ME->F_DATE
      IF_LIFNR_REQ             = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_P0SR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_MANU->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_P0SR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_OUTSO->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method GET_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Corrugation CR
  ME->GET_BL_PSTEP_CORR_CR( changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** BL PSTEP - Waxing
  ME->GET_BL_PSTEP_WAX( changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** BL PSTEP - Tape
  ME->GET_BL_PSTEP_TAPE( changing CT_BL_PSTEP = RT_BL_PSTEP ).

endmethod.
method GET_BL_PSTEP_CORR_CR.

  data:  LT_GATE_MS_STARCH     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MS_PAPER      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MS_PRPRP      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SCORE         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SCSTR         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_CORR         type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_BOARD         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SELFD         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCORE         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_STARCH     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_PAPER      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_PRPRP      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR_MGR     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR         type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_CORR_CR   type ref to ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.
  append LR_GATE_SPEC to LT_PRVDR_CORR.

*** Find Provider for Selfdeckling
  LR_GATE_SELFD = ME->GET_PRVDR_SELFD( IR_GATE_SPEC = LR_GATE_SPEC ).
  if LR_GATE_SELFD is bound.
    append LR_GATE_SELFD to LT_PRVDR_CORR.
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Board
  LR_GATE_BOARD = ME->GET_PRVDR_BOARD( IR_GATE_SPEC_CR = LR_GATE_SPEC ).
  check LR_GATE_BOARD is bound.
  append LR_GATE_BOARD to LT_PRVDR_CORR.

*** Find Provider for Starch (of Board)
  LT_GATE_MS_STARCH = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_MS_STARCH=>C_IPRVT_PC_MS_STARCH
                                             IF_INUSE  = ABAP_TRUE
                                             IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_MS_STARCH into LR_GATE_MS_STARCH.
    if LR_GATE_MS_STARCH->IS_IN_LINE( IR_GATE = LR_GATE_BOARD ) eq ABAP_TRUE.
      append LR_GATE_MS_STARCH to LT_PRVDR_CORR.
    endif.
  endloop.

*** Find Provider for Paper (of Board)
  LT_GATE_MS_PAPER = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_MS_PAPER=>C_IPRVT_PC_MS_PAPER
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_MS_PAPER into LR_GATE_MS_PAPER.
    if LR_GATE_MS_PAPER->IS_IN_LINE( IR_GATE = LR_GATE_BOARD ) eq ABAP_TRUE.
      append LR_GATE_MS_PAPER to LT_PRVDR_CORR.
    endif.
  endloop.

*** Find Provider for Preprint Paper (of Board)
  LT_GATE_MS_PRPRP = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_MS_PRPRP=>C_IPRVT_PC_MS_PRPRP
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_MS_PRPRP into LR_GATE_MS_PRPRP.
    if LR_GATE_MS_PRPRP->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.
      append LR_GATE_MS_PRPRP to LT_PRVDR_CORR.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Find Provider for Scores
  LT_GATE_SCORE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_SCORE into LR_GATE_SCORE.
    if LR_GATE_SCORE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.
      append LR_GATE_SCORE to LT_PRVDR_CORR.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Find Provider for Score string Manager
  LR_GATE_SCSTR_MGR = ME->GET_PRVDR_SCSTR_MGR( IR_GATE_SPEC = LR_GATE_SPEC ).
  if LR_GATE_SCSTR_MGR is bound.
    append LR_GATE_SCSTR_MGR to LT_PRVDR_CORR.
  endif.

*** Find Provider for Score Strings with Score Definition
  LT_GATE_SCSTR = ME->GET_PRVDR_SCSTR( IR_GATE_SPEC  = LR_GATE_SPEC
                                       IF_CSCOR      = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                                       IF_SCSOP      = ZCL_VCXI_PCSS_BL_SCSOP_CORR_CR=>C_SCSOP_CORR_CR ).

*** Add Operations with Score Definition
  read table LT_GATE_SCSTR into LR_GATE_SCSTR index 1.
  if LR_GATE_SCSTR is not bound.
*** Find Provider for Score Strings without Score Definition
    LT_GATE_SCSTR = ME->GET_PRVDR_SCSTR( IR_GATE_SPEC  = LR_GATE_SPEC
                                         IF_SCSOP      = ZCL_VCXI_PCSS_BL_SCSOP_CORR_CR=>C_SCSOP_CORR_CR ).

*** Add Operations with Score Definition
    read table LT_GATE_SCSTR into LR_GATE_SCSTR index 1.
  endif.
  check LR_GATE_SCSTR is bound.
  append LR_GATE_SCSTR to LT_PRVDR_CORR.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  create object LR_BL_PSTEP_CORR_CR
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.
  append LR_BL_PSTEP_CORR_CR to CT_BL_PSTEP.
  LR_BL_PSTEP_CORR_CR->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                     IT_PRVDR = LT_PRVDR_CORR ).

endmethod.
method GET_BL_PSTEP_TAPE.

  data:  LT_GATE_TAPE         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SCSTR        type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_TAPE        type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_TAPE         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR_MGR    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR        type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_TAPE     type ref to ZCL_VCXI_PCSR_BL_PSTEP_TAPE_CR,
         LR_APPDATA           type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Tape
  LT_GATE_TAPE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MS_TAPE=>C_IPRVT_P0_MS_TAPE
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).
  check LT_GATE_TAPE is not initial.
  loop at LT_GATE_TAPE into LR_GATE_TAPE.
    if LR_GATE_TAPE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) ne ABAP_TRUE.
      delete LT_GATE_TAPE.
    endif.
  endloop.
  check LT_GATE_TAPE is not initial.

***------------------------------------------------------------------------------------------------
*** Get Provider for Score String Manager
  LR_GATE_SCSTR_MGR = ME->GET_PRVDR_SCSTR_MGR( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SCSTR_MGR is bound.

*** Find Provider for Score Strings
  LT_GATE_SCSTR = ME->GET_PRVDR_SCSTR( IR_GATE_SPEC = LR_GATE_SPEC
                                       IT_GATE_TAPE = LT_GATE_TAPE ).

*** Add all needed Operations with Tape Definition
  loop at LT_GATE_SCSTR into LR_GATE_SCSTR.
    check LR_GATE_SCSTR is bound.

    clear: LT_PRVDR_TAPE.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Collect all Provider
    append          LR_GATE_SPEC      to LT_PRVDR_TAPE.
    append          LR_GATE_SCSTR     to LT_PRVDR_TAPE.
    append          LR_GATE_SCSTR_MGR to LT_PRVDR_TAPE.
    append lines of LT_GATE_TAPE      to LT_PRVDR_TAPE.

*** Create BL PStep
    create object LR_BL_PSTEP_TAPE
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_TAPE to CT_BL_PSTEP.
    LR_BL_PSTEP_TAPE->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR_TAPE ).

  endloop.

endmethod.
method GET_BL_PSTEP_WAX.

  data:  LT_GATE_BOARD     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MS_WAX    type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_WAX      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_BOARD     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_WAX    type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_WAX   type ref to ZCL_VCXI_PCSR_BL_PSTEP_WAX,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Board
  LT_GATE_BOARD = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_BOARD into LR_GATE_BOARD.
*** Check is child of Specification
    if LR_GATE_BOARD->GET_PARENT( ) eq LR_GATE_SPEC.
      exit.
    else.
      clear LR_GATE_BOARD.
    endif.
  endloop.
  check LR_GATE_BOARD is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Wax
  LT_GATE_MS_WAX = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_MS_WAX=>C_IPRVT_PC_MS_WAX
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).
  check LT_GATE_MS_WAX is not initial.
  loop at LT_GATE_MS_WAX into LR_GATE_MS_WAX.
    if LR_GATE_MS_WAX->IS_IN_LINE( IR_GATE = LR_GATE_BOARD ) eq ABAP_TRUE.
      append LR_GATE_MS_WAX to LT_PRVDR_WAX.
    endif.
  endloop.
  check LT_PRVDR_WAX is not initial.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  create object LR_BL_PSTEP_WAX
         exporting IF_DATE    = ME->F_DATE
                   IR_APPDATA = LR_APPDATA.
  append LR_BL_PSTEP_WAX to CT_BL_PSTEP.
  LR_BL_PSTEP_WAX->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = LT_PRVDR_WAX ).

endmethod.
method GET_PRVDR_BOARD.

  data:  LT_GATE_BOARD  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_BOARD  type ref to /VCXI/CL_VKSR_GATE,
         LR_ICONT       type ref to ZIF_VCXI_P0SS_ICONT,
         LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Specificatin Reference
  try.
      move IR_GATE_SPEC_CR->R_CLSPR ?to LR_ICONT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_ICONT.
  endtry.
  check LR_ICONT is bound.


  LT_GATE_BOARD = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE_BOARD into LR_GATE_BOARD.
*** Check is child of Specification
    if LR_GATE_BOARD->GET_PARENT( ) eq IR_GATE_SPEC_CR.

*** Check Board Mode against Context
      try.
          move LR_GATE_BOARD->R_CLSPR ?to LR_PR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BOARD, LR_GATE_BOARD.
      endtry.
      check LR_PR_BOARD is bound.

      if ( LR_PR_BOARD->GET_MBOAR( ) eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S   and
           LR_ICONT->GET_ICONT( )    eq ZCL_VCXI_PCSS_PR_SPEC=>C_ICONT_SALES    ) or
         ( LR_PR_BOARD->GET_MBOAR( ) eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P   and
           LR_ICONT->GET_ICONT( )    eq ZCL_VCXI_PCSS_PR_SPEC=>C_ICONT_PROD     ) .
        exit.
      else.
        clear LR_GATE_BOARD.
      endif.
    endif.
  endloop.
  check LR_GATE_BOARD is bound.
  move LR_GATE_BOARD to RR_GATE_BOARD.


endmethod.
method GET_PRVDR_SCSTR.

  data:  LR_GATE_SCSTR  type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SCSTR    type ref to ZCL_VCXI_P0SS_PR_SCSTR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Score Strings
  RT_GATE_SCSTR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR=>C_IPRVT_P0_SCSTR
                                         IF_INUSE = ABAP_TRUE ).


  loop at RT_GATE_SCSTR into LR_GATE_SCSTR.
*** Check is child of Specification
    if LR_GATE_SCSTR->IS_IN_LINE( IR_GATE = IR_GATE_SPEC ) eq ABAP_FALSE.
      delete RT_GATE_SCSTR.
      continue.
    endif.

    if IF_SCSOP is supplied or
       IF_CSCOR is supplied.
      try.
          move LR_GATE_SCSTR->R_CLSPR ?to LR_PR_SCSTR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SCSTR.
      endtry.

      if LR_PR_SCSTR is not bound.
        delete RT_GATE_SCSTR.
        continue.
      endif.

***   Collect Score String with Operation and/or Score Category
      if IF_SCSOP                  is supplied and
         LR_PR_SCSTR->GET_SCSOP( ) ne IF_SCSOP.
        delete RT_GATE_SCSTR.
        continue.
      endif.

      if IF_CSCOR                  is supplied and
         LR_PR_SCSTR->GET_CSCOR( ) ne IF_CSCOR.
        delete RT_GATE_SCSTR.
        continue.
      endif.
    endif.

  endloop.

*** Collect all Tape Types to return only Score Strings with Tapes
  if IT_GATE_TAPE is supplied.
    ZCL_VCXI_P0SS_CUST_SCSTR=>FILTER_TAPE_SCSTR( exporting IT_GATE_TAPE  = IT_GATE_TAPE
                                                 changing  CT_GATE_SCSTR = RT_GATE_SCSTR ).
  endif.

endmethod.
method GET_PRVDR_SCSTR_MGR.

  data:  LT_GATE_SCSTR_MGR  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SCSTR_MGR  type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Find Provider for Score String Maager
  LT_GATE_SCSTR_MGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_IPRVT_P0_SCSTR_MGR
                                             IF_INUSE = ABAP_TRUE ).


  loop at LT_GATE_SCSTR_MGR into LR_GATE_SCSTR_MGR.
*** Check is child of Specification
    check LR_GATE_SCSTR_MGR->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_SCSTR_MGR to RR_GATE_SCSTR_MGR.
  endloop.

endmethod.
method GET_PRVDR_SELFD.

  data:  LT_GATE_SELFD  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SELFD  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Selfdeckling
  LT_GATE_SELFD = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PCSS_SELFD=>C_IPRVT_PC_SELFD
                                         IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SELFD into LR_GATE_SELFD.
*** Check is child of Specification
    check LR_GATE_SELFD->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_SELFD to RR_GATE_SELFD.
    exit.
  endloop.


endmethod.
method GET_PRVDR_SPEC.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_SPEC_CR=>C_IPRVT_PC_SPEC_CR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method TURN_PCDIR.

  data:  LF_PCDIR          type        ZVCXI_P0SP_PCDIR,
         LF_PREVIOUS       type        ABAP_BOOL,
         LF_MANDATORY      type        ABAP_BOOL,
         LF_IPSTP          type        /VCXI/VSMC_IPSTP,
         LF_ILTYP          type        /VCXI/VSMC_ILTYP.
  data:  LT_ILTYP_PSTEP    type        /VCXI/CKX_TT_ID,
         LT_ILTYP_ARBPL    type        /VCXI/CKX_TT_ID,
         LT_MSG            type        /VCXI/CKXM_TT_MSG,
         LT_RTE_PSTEP_ORG  type        /VCXI/VSMR_TT_RTE_PSTEP,
         LT_RTE_PSTEP_NEW  type        /VCXI/VSMR_TT_RTE_PSTEP,
         LT_MSG_ORG        type        /VCXI/CKXM_TT_MSG.
  data:  LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR          type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_RTE_PSTEP_ORG  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_ORG   type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSEQ_NEW   type ref to /VCXI/CL_VSMR_RTE_PSEQ,
         LR_RTE_PSTEP_NEW  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_NEW   type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  check IR_RTE_ARBPL->R_ARBPL is bound.

*** Get current Direction
  if IF_PCDIR_PREV is not initial.
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.

          move LR_PCDIR->F_PCDIR to LF_PCDIR.

          if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
            move ABAP_TRUE to LF_PREVIOUS.
          endif.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
  endif.

  if not ( LF_PREVIOUS   eq ABAP_TRUE and
           IF_PCDIR_PREV is not initial and
           IF_PCDIR_PREV ne LF_PCDIR ).
*** Turn not because of prefere previous
    clear LF_PREVIOUS.

    check IR_RTE_ARBPL->T_MSG is not initial.
*** Get Error Messages
    move IR_RTE_ARBPL->T_MSG  to LT_MSG.
    delete LT_MSG where MSGTY eq 'S'
                   or   MSGTY eq 'I'
                   or   MSGTY eq 'W'.
    check LT_MSG is not initial.
  endif.

***----------------------------------------------------------------------------
*** Identify Limits that allow turning
  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
      move ABAP_TRUE to LF_MANDATORY.
      exit.
    endif.

    move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
    ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LF_IPSTP
                                              importing ET_ILTYP = LT_ILTYP_PSTEP ).
    append lines of LT_ILTYP_PSTEP to LT_ILTYP_ARBPL.
  endloop.

  check LF_MANDATORY ne ABAP_TRUE.

  sort LT_ILTYP_ARBPL.
  delete adjacent duplicates from LT_ILTYP_ARBPL.

***----------------------------------------------------------------------------
  if LF_PREVIOUS ne ABAP_TRUE.
*** Ignore Messages that can be resolved by Turn
    loop at LT_ILTYP_ARBPL into LF_ILTYP.
      delete LT_MSG where MSGV2 eq LF_ILTYP.
    endloop.

*** Check no other Error Message exists...
    check LT_MSG is initial.
  endif.

***----------------------------------------------------------------------------
*** Buffer to be able to turn it back
  move IR_RTE_ARBPL->T_RTE_PSTEP to LT_RTE_PSTEP_ORG.
  move IR_RTE_ARBPL->T_MSG       to LT_MSG_ORG.


  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_ORG.
*** Create new Production Steps
    if LR_RTE_PSTEP_ORG->R_RTE_PSEQ is bound.
      create object LR_RTE_PSEQ_NEW
        exporting
          IR_PSEQ     = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_PSEQ
          IR_RTE_PSEQ = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_RTE_PSEQ.
      move LR_RTE_PSEQ_NEW->R_RTE_PSTEP to LR_RTE_PSTEP_NEW.
    else.
      create object LR_RTE_PSTEP_NEW
        exporting
          IR_PSTEP = LR_RTE_PSTEP_ORG->R_PSTEP.
    endif.
    append LR_RTE_PSTEP_NEW to LT_RTE_PSTEP_NEW.

*** Copy Link Context Value
    move LR_RTE_PSTEP_ORG->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

*** Create Copy of BL Production Steps
    try.
        move LR_RTE_PSTEP_ORG->R_BLOBJ ?to LR_BL_PSTEP_ORG.
        if LR_BL_PSTEP_ORG is bound.
          LR_BL_PSTEP_NEW = LR_BL_PSTEP_ORG->COPY( ).
          move LR_BL_PSTEP_NEW to LR_RTE_PSTEP_NEW->R_BLOBJ.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

*** Turn
    try.
        move LR_RTE_PSTEP_NEW->R_BLOBJ ?to LR_PCDIR.
        if LR_PCDIR is bound.
          case LR_PCDIR->F_PCDIR.
            when 'A'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'B' ).
            when 'B'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'A' ).
          endcase.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Add new Limits
    LR_BL_PSTEP_NEW->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP_NEW ).
  endloop.

*** Set new Production Steps
  move LT_RTE_PSTEP_NEW to IR_RTE_ARBPL->T_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Check Limits on Work Center Level
  IR_RTE_ARBPL->CHECK_LIMITS( ).

*** Get Error Messages
  move IR_RTE_ARBPL->T_MSG  to LT_MSG.
  delete LT_MSG where MSGTY eq 'S'
                 or   MSGTY eq 'I'
                 or   MSGTY eq 'W'.
  if LT_MSG is not initial.
*** Return to Original Direction
    move LT_RTE_PSTEP_ORG to IR_RTE_ARBPL->T_RTE_PSTEP.
    move LT_MSG_ORG       to IR_RTE_ARBPL->T_MSG.
  else.
*** Recheck complete Route
    move ABAP_TRUE to RF_RECHECK.
  endif.

endmethod.
method VALIDATE.

  data:  LF_RECHECK  type        ABAP_BOOL.
  data:  LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE.

  SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Process Routes
  loop at CT_BL_PRTE into LR_BL_PRTE.
    clear LF_RECHECK.

***------------------------------------------------------------------------------------------------
*** Continue only for invalid
    check LR_BL_PRTE->R_RTE_PRTE->F_RSTAT ne /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID.

*** Sheet Rotation
    if ME->VALIDATE_PCDIR( IR_BL_PRTE = LR_BL_PRTE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_RECHECK.
    endif.

*** Recheck
    if LF_RECHECK eq ABAP_TRUE.
      LR_BL_PRTE->CHECK( ).
      LR_BL_PRTE->INIT_RELPO( ).
    endif.
  endloop.

endmethod.
method VALIDATE_PCDIR.

  data:  LF_PCDIR      type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PRTE    type ref to ZCL_VCXI_P0SR_BL_PRTE,
         LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR      type ref to ZIF_VCXI_P0SR_PCDIR.

  try.
      move IR_BL_PRTE ?to LR_BL_PRTE.
      check LR_BL_PRTE is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Check Mandetory Directions missmatch will not be fixed automatically
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Update Direction
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR->F_PCDIR ne LF_PCDIR.
***     Set Direction
        LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR ).
        move ABAP_TRUE to RF_RECHECK.
      endif.
    endloop.
  endloop.

*** Check
  if RF_RECHECK eq ABAP_TRUE.
    IR_BL_PRTE->CHECK( ).
  endif.

***--------------------------------------------------------------------------------------
*** Automatic Turn of Route
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    if ME->TURN_PCDIR( IR_RTE_ARBPL  = LR_RTE_ARBPL
                       IF_PCDIR_PREV = LF_PCDIR ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_RECHECK.
    endif.

    if LR_BL_PRTE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_P0SR_BL_PRTE=>C_RSRCE_USER.
      try.
***       Get PC Direction of Work Center
          LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        catch /VCXI/CX_CKX.
          clear LF_PCDIR.
      endtry.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Adjust PC Direction of Material Flow In
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        exit.
      catch /VCXI/CX_CKX.
        clear LF_PCDIR.
    endtry.
  endloop.
  LR_BL_PRTE->SET_PCDIR_OF_MFI( IF_PCDIR = LF_PCDIR ).

endmethod.
