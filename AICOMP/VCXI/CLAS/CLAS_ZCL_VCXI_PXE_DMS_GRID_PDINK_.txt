
class ZCL_VCXI_PXE_DMS_GRID_PDINK definition
  public
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_DMSEXT_PD type ref to ZCL_VCXI_PXE_DMS_DMSEXT_PD
      !IF_CONTAINER_NAME type SCRFNAME default '0100CC_GRID_PDINK'
      !IF_TABNAME type TABNAME default 'ZVCXI_PXE_DMS_S_PDINK_GRID'
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_BTYPE_BUTTON type TB_BTYPE value 0 ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value 3 ##NO_TEXT.
  constants C_UC_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_UC_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  data F_CONTAINER_NAME type SCRFNAME .
  data F_TABNAME type TABNAME .
  class-data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DMSEXT_PD type ref to ZCL_VCXI_PXE_DMS_DMSEXT_PD .
  class-data R_GRID type ref to CL_GUI_ALV_GRID .
  class-data T_FCAT type LVC_T_FCAT .
  data T_PDINK_GRID type ZVCXI_PXE_DMS_TT_PDINK_GRID .

  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_LINE
    changing
      !CS_PDINK_GRID type ZVCXI_PXE_DMS_S_PDINK_GRID
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO .
  methods GET_MATNR_DESCR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_MATNR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ES_LAST_ROW type LVC_S_ROW
      !ET_ROW type LVC_T_ROW
    raising
      /VCXI/CX_CKX .
  methods GET_TOOLBAR_EXCLUDING
    returning
      value(RT_TOOLBAR_EXCLUDING) type UI_FUNCTIONS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_DATA
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXE_DMS_GRID_PDINK definition
class ZCL_VCXI_PXE_DMS_GRID_PDINK implementation.
  method CHANGE_STYLE.

    data:          LS_STYL   type LVC_S_STYL.
    field-symbols: <S_STYL>  type LVC_S_STYL.

    read table CT_STYL assigning <S_STYL>
                       with key FIELDNAME = IF_FIELDNAME.
    if SY-SUBRC eq 0.
      <S_STYL>-STYLE = IF_STYLE.
    else.
      LS_STYL-FIELDNAME   = IF_FIELDNAME.
      LS_STYL-STYLE       = IF_STYLE.
      insert LS_STYL into table CT_STYL.
    endif.

  endmethod.
  method CHANGE_STYLE_LINE.

    data: LF_LOCKED type ABAP_BOOL.
    data: LS_FCAT   type LVC_S_FCAT.

    refresh:  CS_PDINK_GRID-T_STYL.

***--------------------------------------------------------------------------------------
*** Get information if user is in change or display mode
    move ME->R_DMSEXT_PD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.
    if LF_LOCKED eq ABAP_TRUE.
      LF_LOCKED = ZCL_VCXI_XCE_DMS_TAB=>CHECK_IS_LOCKED( ).
    endif.

    if LF_LOCKED eq ABAP_FALSE.
***   De-Activate all fields
      loop at T_FCAT into LS_FCAT.
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = LS_FCAT-FIELDNAME
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      endloop.

    else.
***   Enable all as default
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TINK'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COLCO'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOP'
                                  IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED
                        changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).

***--------------------------------------------------------------------------------------
***   If Color Code is filled disable Material and Ink Type fields
      if CS_PDINK_GRID-COLCO is not initial.
***     Set Material = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***     Set Ink Type = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TINK'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      endif.

***--------------------------------------------------------------------------------------
***   Ink Type Definition
      case ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = CS_PDINK_GRID-TINK ).
***     Traditional Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
***       Set Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOP'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).

***     Digital Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
***       Set Color Code = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COLCO'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***       Set Ink Tool = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'INKTN'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***       Set Sleeve Flag = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLVE'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***       Set Adapter/Print Cylinder Tool Number = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APCTN'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***       Set Mounting Sleeve Tool Number = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MSLTN'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
***       Set Anilox Roll Tool = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ANITN'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                            changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).

***       Application Dimension based
          case ME->R_DMSEXT_PD->F_APDIM.
            when ZCL_VCXI_PXSS_PR_MS_DINK=>C_APDIM_VOLUME.
              ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT'
                                          IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                                changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
            when ZCL_VCXI_PXSS_PR_MS_DINK=>C_APDIM_MASS.
              ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL'
                                          IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                                changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
              ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOP'
                                          IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                                changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
          endcase.
      endcase.

***--------------------------------------------------------------------------------------
***   Ink Tool
      if CS_PDINK_GRID-INKTN is not initial.
***     Ink Tool Number set - disable tool fields
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLVE'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      endif.

***   Sleeve Flag
      if CS_PDINK_GRID-FSLVE is not initial.
***     Sleeve Flag is checked - disable Mounting Sleeve Tool Number
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MSLTN'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      endif.

***   Anilox Roll Tool
      if CS_PDINK_GRID-ANITN is not initial.
***     Anilox Roll Tool Number set - disable tool fields
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = CS_PDINK_GRID-T_STYL ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    ME->R_DMSEXT_PD      = IR_DMSEXT_PD.
    ME->F_CONTAINER_NAME = IF_CONTAINER_NAME.
    ME->F_TABNAME        = IF_TABNAME.

    if ME->R_GRID is bound.
***   Tab is created, we need a fresh grid
      ME->R_GRID->FREE( ).
      clear ME->R_GRID.
    endif.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_COLPOS type I.
    field-symbols: <S_FCAT>  type LVC_S_FCAT.


***--------------------------------------------------------------------------------------
*** Get Basic Field Catalog
    call function 'LVC_FIELDCATALOG_MERGE'
      exporting
        I_STRUCTURE_NAME       = ME->F_TABNAME
      changing
        CT_FIELDCAT            = RT_FCAT
      exceptions
        INCONSISTENT_INTERFACE = 1
        PROGRAM_ERROR          = 2
        others                 = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get information if user is in change or display mode
    move ME->R_DMSEXT_PD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.
    if LF_LOCKED eq ABAP_TRUE.
      move ZCL_VCXI_XCE_DMS_TAB=>CHECK_IS_LOCKED( ) to LF_LOCKED.
    endif.

*** Is Adapter/Cylinder allowed for Print Type
    data(LF_FAPCA) = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_FAPCA( IF_TPRIN = ME->R_DMSEXT_PD->S_PD-TPRIN ).


***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      move 'A' to <S_FCAT>-COL_OPT.

      case <S_FCAT>-FIELDNAME.
        when 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

        when 'MATNR'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'TINK'.
          move ABAP_TRUE    to <S_FCAT>-F4AVAILABL.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'COLCO'.
          move ABAP_TRUE    to <S_FCAT>-F4AVAILABL.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'INKTN'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'COVRG'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'FSLVE'.      "Sleeve Flag
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'APCTN'.      "Adapter/Print Cylinder Tool Number
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'MSLTN'.      "Mounting Sleeve Tool Number
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'ANITN'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'APWGT'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.
        when 'APWGT_UOM'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.

        when 'APVOL'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.
        when 'APVOL_UOM'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.

        when 'APVOP'.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.
        when 'APVOP_UOM'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.

      endcase.

***--------------------------------------------------------------------------------------
***   Hide related fields if Adapter/Print Cylinder are not allowed
      if LF_FAPCA ne ABAP_TRUE.
        if <S_FCAT>-FIELDNAME eq 'FSLVE' or
           <S_FCAT>-FIELDNAME eq 'APCTN' or
           <S_FCAT>-FIELDNAME eq 'MSLTN'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'CINKN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TINK'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'COVRG'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'COVRG_UOM'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APWGT'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APWGT_UOMC6'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APVOL'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APVOL_UOMC6'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APVOP'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APVOP_UOMC6'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MATNR'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MATNR_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'COLCO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'COLCO_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'INKTN_ICON'.      <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'INKTN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'INKTN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FSLVE'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APCTN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APCTN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MSLTN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MSLTN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ANITN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ANITN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.

    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_LAYOUT.

    move ABAP_TRUE  to RS_LAYOUT-CWIDTH_OPT.
    move 'T_STYL'   to RS_LAYOUT-STYLEFNAME.
    move ABAP_FALSE to RS_LAYOUT-EDIT.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_MAKT  type MAKT.

    check IF_MATNR is not initial.

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_MATNR_DESCR.
    else.
      move LS_MAKT-MAKTX to RF_MATNR_DESCR.
    endif.

  endmethod.
  method GET_SELECTED_ROWS.

    data: LT_CELL type        LVC_T_CELL,
          LT_ROW  type        LVC_T_ROW.
    data: LS_CELL type        LVC_S_CELL,
          LS_ROW  type        LVC_S_ROW.

*** Get Cursor in Grid
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    if LINES( LT_CELL ) gt 0.

      loop at LT_CELL into LS_CELL.
        append LS_CELL-ROW_ID to ET_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
          move LS_CELL-ROW_ID to ES_LAST_ROW.
        endif.
      endloop.

    endif.

*** Get Selected Rows
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
    if LINES( LT_ROW ) gt 0.

      append lines of LT_ROW to ET_ROW.

      loop at LT_ROW into LS_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
          move LS_ROW to ES_LAST_ROW.
        endif.
      endloop.

    endif.

  endmethod.
  method GET_TOOLBAR_EXCLUDING.

*** Exclude All Functions
    append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to RT_TOOLBAR_EXCLUDING.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    try.
        check E_MODIFIED eq ABAP_TRUE.

        ME->R_DMSEXT_PD->SET_PDINK( IT_PDINK = corresponding #( ME->T_PDINK_GRID ) ).
        ME->R_DMSEXT_PD->SET_CHANGED( ABAP_TRUE ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data:          LF_LOCKED       type        /VCXI/CKX_LOCKED.
    data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

    try.
***--------------------------------------------------------------------------------------
***     Get information if user is in change or display mode
        move ME->R_DMSEXT_PD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.
        if LF_LOCKED eq ABAP_TRUE.
          move ZCL_VCXI_XCE_DMS_TAB=>CHECK_IS_LOCKED( ) to LF_LOCKED.
        endif.

***--------------------------------------------------------------------------------------
***     Add Ink
        append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move C_UC_ADD                 to <S_TOOLBAR>-FUNCTION.
        move C_BTYPE_BUTTON           to <S_TOOLBAR>-BUTN_TYPE.
        move ICON_INSERT_ROW          to <S_TOOLBAR>-ICON.
        move text-ADD                 to <S_TOOLBAR>-TEXT.
        if LF_LOCKED ne ABAP_TRUE.
          move ABAP_TRUE              to <S_TOOLBAR>-DISABLED.
        endif.

***     Delete Ink
        append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move C_UC_DEL                 to <S_TOOLBAR>-FUNCTION.
        move C_BTYPE_BUTTON           to <S_TOOLBAR>-BUTN_TYPE.
        move ICON_DELETE_ROW          to <S_TOOLBAR>-ICON.
        move text-DEL                 to <S_TOOLBAR>-TEXT.
        if LF_LOCKED ne ABAP_TRUE.
          move ABAP_TRUE              to <S_TOOLBAR>-DISABLED.
        endif.

***     Separator
        append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move C_BTYPE_SEPARATOR        to <S_TOOLBAR>-BUTN_TYPE.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data:           LS_LAST_ROW     type        LVC_S_ROW.
    data:           LR_CUST_PRINT   type ref to ZCL_VCXI_PXSS_CUST_PRINT.
    field-symbols:  <S_PDINK>       type        ZVCXI_PXE_DMS_S_PDINK.

*** Get last selected Row
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_LAST_ROW ).

*** Insert or append initial line
    if LS_LAST_ROW-INDEX ne 0.
      add 1 to LS_LAST_ROW-INDEX.
      insert initial line into ME->R_DMSEXT_PD->T_PDINK assigning <S_PDINK> index LS_LAST_ROW-INDEX.
    else.
      append initial line to ME->R_DMSEXT_PD->T_PDINK assigning <S_PDINK>.
    endif.

    check <S_PDINK> is assigned.

*** Get Print Customizing
    LR_CUST_PRINT = ME->R_DMSEXT_PD->GET_CUST_PRINT( ).

*** Set Default Ink Type
    if <S_PDINK>-TINK is initial.
      <S_PDINK>-TINK = 'INK'.
    endif.

  endmethod.
  method HANDLE_UC_DEL.

    data:  LS_ROW    type LVC_S_ROW.
    data:  LT_ROW    type LVC_T_ROW.

*** Get selected Row
    ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).

*** Delete from bottom to top
    sort LT_ROW by INDEX descending.
    loop at LT_ROW into LS_ROW.
      delete ME->R_DMSEXT_PD->T_PDINK index LS_ROW-INDEX.
    endloop.

  endmethod.
  method HANDLE_UCOMM.

    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        case E_UCOMM.

***       Add Button
          when C_UC_ADD.
            ME->HANDLE_UC_ADD( ).

***       Delete Button
          when C_UC_DEL.
            ME->HANDLE_UC_DEL( ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER.

    data: LF_VALID type I.

***--------------------------------------------------------------------------------------
*** Remove invalid Instance
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->IS_VALID( importing RESULT = LF_VALID ).
      if LF_VALID eq 0.
        clear ME->R_CONTAINER.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    check ME->R_CONTAINER is not bound.

    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method INIT_DATA.

    data: LS_PDINK type ZVCXI_PXE_DMS_S_PDINK.
    data: LR_CUST_PRINT    type ref to ZCL_VCXI_PXSS_CUST_PRINT,
          LR_CUST_TOOL_INK type ref to ZCL_VCXI_PXSS_CUST_TOOL_INK.
    field-symbols: <S_PDINK_GRID> type ZVCXI_PXE_DMS_S_PDINK_GRID.


    free: ME->T_PDINK_GRID.

*** Get Printing Customizing
    LR_CUST_PRINT = ME->R_DMSEXT_PD->GET_CUST_PRINT( ).

*** Fill by Data Extension
    loop at ME->R_DMSEXT_PD->T_PDINK into LS_PDINK.
      append corresponding #( LS_PDINK ) to ME->T_PDINK_GRID assigning <S_PDINK_GRID>.
      <S_PDINK_GRID>-CINKN       = SY-TABIX.
      <S_PDINK_GRID>-APWGT_UOMC6 = <S_PDINK_GRID>-APWGT_UOM.
      <S_PDINK_GRID>-APVOL_UOMC6 = <S_PDINK_GRID>-APVOL_UOM.
      <S_PDINK_GRID>-APVOP_UOMC6 = <S_PDINK_GRID>-APVOP_UOM.

***   Get Color Description
      if LR_CUST_PRINT is bound and
         LS_PDINK-COLCO is not initial.
        <S_PDINK_GRID>-COLCO_DESCR = LR_CUST_PRINT->GET_COLCO_DESCR( IF_COLCO = LS_PDINK-COLCO ).
      endif.

***   Ink Material Description
      <S_PDINK_GRID>-MATNR_DESCR = ME->GET_MATNR_DESCR( IF_MATNR = <S_PDINK_GRID>-MATNR ).

***   Get Ink Tool Number Information
      if <S_PDINK_GRID>-INKTN is not initial.
***     Ink Tool Material Description
        <S_PDINK_GRID>-INKTN_DESCR = ME->GET_MATNR_DESCR( IF_MATNR = <S_PDINK_GRID>-INKTN ).

***     Get Ink Tool Release Status
        LR_CUST_TOOL_INK = ME->R_DMSEXT_PD->GET_CUST_TOOL_INK( IF_INKTN = <S_PDINK_GRID>-INKTN ).
        if LR_CUST_TOOL_INK is bound and
           LR_CUST_TOOL_INK->IS_RELEASED( ).
          <S_PDINK_GRID>-INKTN_ICON = ICON_CONNECT.
        else.
          <S_PDINK_GRID>-INKTN_ICON = ICON_DISCONNECT.
        endif.
      endif.

***   Adapter/Print Cylinder Tool Number Information
      if <S_PDINK_GRID>-APCTN is not initial.
***     Adapter/Print Cylinder Tool Material Description
        <S_PDINK_GRID>-APCTN_DESCR = ME->GET_MATNR_DESCR( IF_MATNR = <S_PDINK_GRID>-APCTN ).
      endif.

***   Get Mounting Sleeve Tool Number Information
      if <S_PDINK_GRID>-MSLTN is not initial.
***     Mounting Sleeve Tool Material Description
        <S_PDINK_GRID>-MSLTN_DESCR = ME->GET_MATNR_DESCR( IF_MATNR = <S_PDINK_GRID>-MSLTN ).
      endif.

***   Get Anilox Roll Tool Number Information
      if <S_PDINK_GRID>-ANITN is not initial.
***     Anilox Roll Tool Material Description
        <S_PDINK_GRID>-ANITN_DESCR = ME->GET_MATNR_DESCR( IF_MATNR = <S_PDINK_GRID>-ANITN ).
      endif.

***   Change Style depending on Ink and Ink Tool
      ME->CHANGE_STYLE_LINE( changing CS_PDINK_GRID = <S_PDINK_GRID> ).

    endloop.

  endmethod.
  method INIT_GRID.

    if ME->R_GRID is not bound.
      create object ME->R_GRID
        exporting
          I_PARENT          = ME->R_CONTAINER
          I_APPL_EVENTS     = ABAP_TRUE
        exceptions
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          others            = 5.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Enter as Event
      ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

***   Set Modified as Event
      ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).

***   Set Handler for Events
      set handler ME->HANDLE_DATA_CHANGED_FINISHED    for ME->R_GRID.
      set handler ME->HANDLE_TOOLBAR                  for ME->R_GRID.
      set handler ME->HANDLE_UCOMM                    for ME->R_GRID.

    endif.

  endmethod.
  method REFRESH_GRID.

    data: LF_VALID   type I,
          LF_SAVE    type ABAP_BOOL,
          LF_INITIAL type ABAP_BOOL.
    data: LS_LAYOUT  type LVC_S_LAYO,
          LS_VARIANT type DISVARIANT,
          LS_STABLE  type LVC_S_STBL.
    data: LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

***--------------------------------------------------------------------------------------
*** Remove invalid Instance
    if ME->R_GRID is bound.
      ME->R_GRID->IS_VALID( importing RESULT = LF_VALID ).
      if LF_VALID eq 0.
        clear ME->R_GRID.
      endif.
    endif.

    if ME->R_GRID is initial.
      move ABAP_TRUE to LF_INITIAL.
    endif.

***--------------------------------------------------------------------------------------
*** Check Container Instance
    ME->INIT_CONTAINER( ).
    check ME->R_CONTAINER is bound.

*** Check Grid Instance
    ME->INIT_GRID( ).
    check ME->R_GRID is bound.

*** Initialzie Data to be shown
    ME->INIT_DATA( ).

***--------------------------------------------------------------------------------------
*** Initial Refresh or Lock State change
    if LF_INITIAL eq ABAP_TRUE.

***   Get Layout
      move ME->GET_LAYOUT( )            to LS_LAYOUT.
***   Field Catalog
      move ME->GET_FIELDCAT( )          to ME->T_FCAT.

***   Get Excluded Items
      move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

***   Enable layout saving
      move 'A'                          to LF_SAVE.

      LS_VARIANT-REPORT = SY-REPID.

***   Refresh ALV Grid
      ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
        exporting
          IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
          IS_LAYOUT                     = LS_LAYOUT
          IS_VARIANT                    = LS_VARIANT
          I_SAVE                        = LF_SAVE
        changing
          IT_FIELDCATALOG               = ME->T_FCAT
          IT_OUTTAB                     = ME->T_PDINK_GRID
        exceptions
          INVALID_PARAMETER_COMBINATION = 1
          PROGRAM_ERROR                 = 2
          TOO_MANY_LINES                = 3
          others                        = 4 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

*** Stable Refresh
    else.
      move ABAP_TRUE to LS_STABLE-ROW.
      move ABAP_TRUE to LS_STABLE-COL.
      ME->R_GRID->REFRESH_TABLE_DISPLAY( exporting  IS_STABLE = LS_STABLE
                                         exceptions FINISHED  = 1
                                                    others    = 2 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
