
class ZCL_VCXI_P0SR_BL_PSTEP_LAMI definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.
  type-pools ABAP .

  interfaces ZIF_VCXI_P0SR_ADJ_PCDIM .
  interfaces ZIF_VCXI_P0SR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .

  constants C_IPSTP_P0_LAMI_RTS type /VCXI/VSMC_IPSTP value 'P0_PS_LAMI_RTS'. "#EC NOTEXT
  constants C_IPSTP_P0_LAMI_STS type /VCXI/VSMC_IPSTP value 'P0_PS_LAMI_STS'. "#EC NOTEXT
  data F_LASID type ZVCXI_P0SS_LASID read-only .

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data F_RLAMI type ZVCXI_P0SS_RLAMI .
  data F_TLAGC type ZVCXI_P0SS_TLAGC .
  data F_TLAMI type ZVCXI_P0SS_TLAMI .
  data S_MFMI_P type ZVCXI_P0SR_S_MFMI_P .
  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .
  data T_PCDIM_IN type ZVCXI_P0SP_TT_PCDIM .

  methods ADD_SPVRE_LASHT_MFMI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_LASHT_MFSI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_LGLUE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_PSCALE_MGR
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_PSCALE type ZVCXI_XCSR_TT_PSCALE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_LAMI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_MS_LGLUE
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    returning
      value(RS_MS_LGLUE) type ZVCXI_P0SR_S_MS_LGLUE
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_POOTI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    exporting
      !EF_POOTI_IN type ZVCXI_P0S_POOTI
      !EF_POOTI_OUT type ZVCXI_P0S_POOTI
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_LAMI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_MFMI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PCDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_SPVRE_VALUE_PSCALE_A
    importing
      !IR_SPVRE_PSCALE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_PSCALE type ZVCXI_XCSR_S_PSCALE
    raising
      /VCXI/CX_CKX .
  methods SET_SPVRE_VALUE_PSCALE_P
    importing
      !IR_SPVRE_PSCALE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_PSCALE type ZVCXI_XCSR_S_PSCALE
    raising
      /VCXI/CX_CKX .
  methods SET_SPVRE_VALUE_PSCALE_W
    importing
      !IR_SPVRE_PSCALE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_PSCALE type ZVCXI_XCSR_S_PSCALE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_LAMI definition
class ZCL_VCXI_P0SR_BL_PSTEP_LAMI implementation.
method ADD_LIMITS_TO_RTE_PSTEP.

  data:          LF_LDUOM               type        /VCXI/VSMC_LDUOM,
                 LF_LDVAL               type        /VCXI/VSMR_LDVAL.
  data:          LI_LVVAL               type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE               type        /VCXI/CKX_TT_OBJECT.
  data:          LR_LTYPE               type ref to /VCXI/CL_VSMC_LTYPE,
                 LR_OBJECT              type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_LVVAL>              type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    clear: LF_LDVAL,
           LF_LDUOM,
           LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Sheet Length (Outbound)
      when 'P0_LT_DO_SHTLEN'.
        move ME->S_PCDIM_OUT-PCLEN     to LF_LDVAL.
        move ME->S_PCDIM_OUT-PCLEN_UOM to LF_LDUOM.

***   Sheet Width (Outbound)
      when 'P0_LT_DO_SHTWID'.
        move ME->S_PCDIM_OUT-PCWID     to LF_LDVAL.
        move ME->S_PCDIM_OUT-PCWID_UOM to LF_LDUOM.

***   Lamination Type
      when 'P0_LT_VP_LAMITYP'.
        append initial line to LI_LVVAL assigning <S_LVVAL>.
        move 'I'                   to <S_LVVAL>-SIGN.
        move 'EQ'                  to <S_LVVAL>-OPTION.
        move ME->F_TLAMI           to <S_LVVAL>-LOW.

      when others.
        continue.
    endcase.

***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method ADD_SPVRE_LASHT_MFMI_P.

  data:          LS_LEOKY       type        /VCXI/VKSR_S_LEOKY,
                 LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:          LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
                 LR_SPVRE_MFMI  type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MFMI
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_MFMGR.
  append LR_SPVRE_MFMI to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Leading Object
  move ME->S_MFMI_P-MATNR                                to LS_LEOKY-LEOKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
  LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Set Component Scrap
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_KAUSF              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-KAUSF                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-KAUSF_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Setup Percentage for Material Flow In
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-MFISP                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-MFISP_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor for Material Flow In
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-MFICF                                to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor Per for Material Flow In
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-MFICP                                to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Purchase Flag
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PURCH                                to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Text
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-TEXT                                 to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Vendor Number
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-LIFNR                                to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICE              to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PRICE                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-PRICE_CURR                           to LS_PARAM-CURKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price Unit
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICP_P            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PRICP                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-PRICP_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCTYP            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCTYP                                to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Length
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCLEN            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCLEN                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-PCLEN_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Width
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCWID            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCWID                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-PCWID_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Height
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCHEI            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCHEI                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-PCHEI_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Ups
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCUPS            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCUPS                                to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCDIR            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-PCDIR                                to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Base Weight
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGT            to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-BAWGT                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-BAWGT_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Base Weight Per
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGP_A          to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
  move ME->S_MFMI_P-BAWGP                                to LS_PARAM-ATFLV.
  move ME->S_MFMI_P-BAWGP_UOM                            to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
  LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Price Scale
  ME->ADD_SPVRE_PSCALE_MGR( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                      IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                      IT_PSCALE       = ME->S_MFMI_P-T_PSCALE
                            changing  CT_SPVRE        = CT_SPVRE ).

endmethod.
method ADD_SPVRE_LASHT_MFSI_P.

  data:  LF_TABIX            type        I,
         LF_IMFXC            type        ZVCXI_XCSP_IMFXC,
         LF_NEXTL            type        ZVCXI_XCSP_NEXTL.
  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM,
         LS_PCDIM            type        ZVCXI_P0SP_S_PCDIM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSI_P     type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

  loop at ME->T_IMFXC_IN into LF_IMFXC from 2.    "First is already processed
    move SY-TABIX to LF_TABIX.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSI_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSI_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set MF X-Connect
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_IMFXC                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** "Next Low-Level Code" Flag
    read table ME->T_NEXTL into LF_NEXTL index LF_TABIX.
    if SY-SUBRC eq 0.
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LF_NEXTL                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

***------------------------------------------------------------------------------------------------
*** PC Direction
    read table ME->T_PCDIM_IN into LS_PCDIM index LF_TABIX.
    if SY-SUBRC eq 0.
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_PCDIM-PCDIR                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

  endloop.

endmethod.
method ADD_SPVRE_MC_LGLUE.

  data:  LS_MS_LGLUE         type        ZVCXI_P0SR_S_MS_LGLUE,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MC_LGLUE   type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Read Glue Info
  LS_MS_LGLUE = ME->GET_MS_LGLUE( IR_ARBPL = IR_ARBPL ).

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_LGLUE'
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MC_LGLUE
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_PARENT.
  append LR_SPVRE_MC_LGLUE to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MC_LGLUE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
  clear LS_LEOKY.
  move LS_MS_LGLUE-MATNR                           to LS_LEOKY-LEOKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
  LR_SPVRE_MC_LGLUE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_AVGCO_W  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move LS_MS_LGLUE-AVGCO                           to LS_PARAM-ATFLV.
  move LS_MS_LGLUE-AVGCO_UOM                       to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_AVGCP_A  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move LS_MS_LGLUE-AVGCP                           to LS_PARAM-ATFLV.
  move LS_MS_LGLUE-AVGCP_UOM                       to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Glue Area
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_GLUEA    to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move LS_MS_LGLUE-GLUEA                           to LS_PARAM-ATFLV.
  move LS_MS_LGLUE-GLUEA_UOM                       to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Glue Consumption Factor
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_CONSF    to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move LS_MS_LGLUE-CONSF                           to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PURCH    to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move LS_MS_LGLUE-PURCH                           to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).



  if LS_MS_LGLUE-PURCH eq ABAP_TRUE.
***------------------------------------------------------------------------------------------------
*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PRICE    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_LGLUE-PRICE                           to LS_PARAM-ATFLV.
    move LS_MS_LGLUE-PRICE_CURR                      to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PRICP_W   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
    move LS_MS_LGLUE-PRICP                            to LS_PARAM-ATFLV.
    move LS_MS_LGLUE-PRICP_UOM                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Vendor
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_LIFNR     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move LS_MS_LGLUE-LIFNR                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = LS_PARAM ).
  endif.

endmethod.
method ADD_SPVRE_PSCALE_MGR.

  data:  LS_PSCALE           type        ZVCXI_XCSR_S_PSCALE.
  data:  LR_SPVCE_PSCALE_MGR type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVCE_PSCALE     type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_PSCALE_MGR type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_PSCALE     type ref to /VCXI/CL_VKSR_SPVRE.

  check IT_PSCALE is not initial.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE_PSCALE_MGR = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'PSCALE_MGR'
                                                 IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_PSCALE_MGR
    exporting
      IR_SPVCE  = LR_SPVCE_PSCALE_MGR
      IR_PARENT = IR_SPVRE_PARENT.
  append LR_SPVRE_PSCALE_MGR to CT_SPVRE.

*** Set In Use
  LR_SPVRE_PSCALE_MGR->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Add Scales
  loop at IT_PSCALE into LS_PSCALE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE_PSCALE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = LS_PSCALE-ISVCE
                                               IR_SPVCE_PARENT = LR_SPVRE_PSCALE_MGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_PSCALE
      exporting
        IR_SPVCE  = LR_SPVCE_PSCALE
        IR_PARENT = LR_SPVRE_PSCALE_MGR.
    append LR_SPVRE_PSCALE to CT_SPVRE.

*** Set In Use
    LR_SPVRE_PSCALE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set specific Price Scale Data
    case LS_PSCALE-ISVCE.
      when 'PSCALE_A'.
        ME->SET_SPVRE_VALUE_PSCALE_A( IR_SPVRE_PSCALE = LR_SPVRE_PSCALE
                                      IS_PSCALE       = LS_PSCALE ).

      when 'PSCALE_P'.
        ME->SET_SPVRE_VALUE_PSCALE_P( IR_SPVRE_PSCALE = LR_SPVRE_PSCALE
                                      IS_PSCALE       = LS_PSCALE ).

      when 'PSCALE_W'.
        ME->SET_SPVRE_VALUE_PSCALE_W( IR_SPVRE_PSCALE = LR_SPVRE_PSCALE
                                      IS_PSCALE       = LS_PSCALE ).

    endcase.

  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

***----------------------------------------------------------------------------
*** PC Dimensions
  if ME->T_PCDIM_IN  eq LR_BL_PSTEP_LAMI->T_PCDIM_IN and
    ME->S_PCDIM_OUT eq LR_BL_PSTEP_LAMI->S_PCDIM_OUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Lamination Side, Type, Relation and Glue Consumption Type
  if ME->F_LASID eq LR_BL_PSTEP_LAMI->F_LASID and
     ME->F_TLAMI eq LR_BL_PSTEP_LAMI->F_TLAMI and
     ME->F_RLAMI eq LR_BL_PSTEP_LAMI->F_RLAMI and
     ME->F_TLAGC eq LR_BL_PSTEP_LAMI->F_TLAGC.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Solid Board Procurement
  if ME->S_MFMI_P eq LR_BL_PSTEP_LAMI->S_MFMI_P.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
  move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
  ME->INIT_OUTSO( ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->T_PCDIM_IN    to LR_BL_PSTEP_LAMI->T_PCDIM_IN.
  move ME->S_PCDIM_OUT   to LR_BL_PSTEP_LAMI->S_PCDIM_OUT.

*** Lamination Side, Type, Relation and Glue Consumption Type
  move ME->F_LASID       to LR_BL_PSTEP_LAMI->F_LASID.
  move ME->F_TLAMI       to LR_BL_PSTEP_LAMI->F_TLAMI.
  move ME->F_RLAMI       to LR_BL_PSTEP_LAMI->F_RLAMI.
  move ME->F_TLAGC       to LR_BL_PSTEP_LAMI->F_TLAGC.

*** Solid Board Procurement
  move ME->S_MFMI_P      to LR_BL_PSTEP_LAMI->S_MFMI_P.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML

              T_PCDIM_IN   = ME->T_PCDIM_IN
              S_PCDIM_OUT  = ME->S_PCDIM_OUT

              F_LASID      = ME->F_LASID
              F_TLAMI      = ME->F_TLAMI
              F_RLAMI      = ME->F_RLAMI
              F_TLAGC      = ME->F_TLAGC

              S_MFMI_P     = ME->S_MFMI_P.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'P0_AT_LAMI'.
      ME->FILL_SPVRE_ADDON_LAMI( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                           IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                           IR_ARBPL       = IR_ARBPL
                                 changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_LAMI.

  data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCTYP   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCTYP                        to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCLEN  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCLEN                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCLEN_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCWID  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCWID                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCWID_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Height
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCHEI  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCHEI                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCHEI_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Ups
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCUPS  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCUPS                       to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Outs
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_NOOUT  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-NOOUT                       to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCDIR  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCDIR                       to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Lamination Glue
  ME->ADD_SPVRE_MC_LGLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                    IR_SPVRE_PARENT = IR_SPVRE_ADDON
                                    IR_ARBPL        = IR_ARBPL
                          changing  CT_SPVRE        = CT_SPVRE ).

endmethod.
method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Overrule existing
  clear: CF_ID_GRP,
         CF_ID_ARBPL.

***------------------------------------------------------------------
*** Different based on Lamination Type
  case ME->F_TLAMI.
    when ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_RTS.
***   Standard for Inline Lamination
      move 'GRP_CORR' to CF_ID_GRP.
      move 'INLLAM'   to CF_ID_ARBPL.

    when ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_STS. "Sheet
***   Standard for Sheet Lamination
      move 'GRP_CONV' to CF_ID_GRP.
      move 'CONV'     to CF_ID_ARBPL.

***   If Outsourcing for Sheet Lamination
      if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
        move 'GRP_CONV' to CF_ID_GRP.
        move 'OUTSO'    to CF_ID_ARBPL.
      endif.
  endcase.

endmethod.
method GET_MS_LGLUE.

  data:  LF_WERKS    type        WERKS_D.
  data:  LS_AVGCO    type        ZVCXI_XCS_S_AVGCO,
         LS_AVGCP    type        ZVCXI_XCS_S_AVGCP,
         LS_PCDIM    type        ZVCXI_P0SP_S_PCDIM.

*** Get Plant
  move IR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.

*** Get Lamination Glue Consumption
  ZCL_VCXI_P0SS_CUST_LAMI=>GET_LAMI_GCONSU( exporting IF_TLAGC = ME->F_TLAGC
                                                      IF_WERKS = LF_WERKS
                                                      IF_DATS  = ME->F_DATE
                                            importing EF_MATNR = RS_MS_LGLUE-MATNR
                                                      ES_AVGCO = LS_AVGCO
                                                      ES_AVGCP = LS_AVGCP ).
  move-corresponding LS_AVGCO to RS_MS_LGLUE.
  move-corresponding LS_AVGCP to RS_MS_LGLUE.

*** Calculate Glue Area
  read table ME->T_PCDIM_IN into LS_PCDIM index 1.
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                      IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                      IF_CALCV_2     = LS_PCDIM-PCWID
                                                      IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                            importing EF_CALCV       = RS_MS_LGLUE-GLUEA
                                                      EF_CALCV_UOM   = RS_MS_LGLUE-GLUEA_UOM ).

*** Fix Lamination Glue Consumption Factor
  move 1 to RS_MS_LGLUE-CONSF.

endmethod.
method GET_PCDIM_POOTI.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get Lamination Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        if LR_PR_LAMI is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_LAMI, LR_GATE.
    endtry.
    clear LR_GATE.
  endloop.
  check LR_PR_LAMI is bound.


***------------------------------------------------------------------------------------------------
*** Get all Lamination (Sorted)
  LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                IF_INUSE = ABAP_TRUE ).
  ZCL_VCXI_P0SS_CUST_LAMI=>SORT_LAMI( changing CT_GATE = LT_GATE ).

*** Find Position
  read table LT_GATE with key TABLE_LINE = LR_GATE
                     transporting no fields.
  case SY-TABIX.
    when 1.
      move ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFLAM to EF_POOTI_IN.
      move ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSLAM to EF_POOTI_OUT.
    when 2.
      move ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSLAM to EF_POOTI_IN.
      move ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_ASLAM to EF_POOTI_OUT.
  endcase.

endmethod.
method GET_SPVRE_ACTVY.

  data:  LS_PARAM        type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_ACTVY  type ref to /VCXI/CL_VKSR_SPVRE.

***----------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_LAMI'
                                      IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_ACTVY
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ARBPL.
  append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
  LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCTYP   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCTYP                        to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCLEN  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCLEN                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCLEN_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCWID  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCWID                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCWID_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Height
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCHEI  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCHEI                       to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCHEI_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Ups
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCUPS  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCUPS                       to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Outs
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_NOOUT  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-NOOUT                       to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCDIR  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCDIR                       to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Lamination Glue
  ME->ADD_SPVRE_MC_LGLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                    IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                                    IR_ARBPL        = IR_ARBPL
                          changing  CT_SPVRE        = RT_SPVRE ).

endmethod.
method GET_SPVRE_MF.

  data:  LF_MFO   type ABAP_BOOL.

*** Delay MFO
  move ABAP_TRUE to LF_MFO.

*** Process Super
  SUPER->GET_SPVRE_MF( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                 IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                       changing  CT_SPVRE       = CT_SPVRE
                                 CF_MFI         = CF_MFI
                                 CF_MFO         = LF_MFO ).

***------------------------------------------------------------------------------------------------
  if ME->S_MFMI_P is initial.
*** Add Solid Board as MFSI
    ME->ADD_SPVRE_LASHT_MFSI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                          IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                                changing  CT_SPVRE       = CT_SPVRE ).
  else.
*** Add Solid Board as MFMI
    ME->ADD_SPVRE_LASHT_MFMI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                          IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                                changing  CT_SPVRE       = CT_SPVRE ).
  endif.

***------------------------------------------------------------------------------------------------
*** Add MFSO PC (replace if needed)
  ME->ADD_SPVRE_MFSO_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                  IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                        changing  CT_SPVRE       = CT_SPVRE ).
  move ABAP_TRUE to CF_MFO.

endmethod.
method INIT_BY_SPEC.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
  ME->INIT_BY_SPEC_LAMI(  IT_PRVDR = IT_PRVDR ).
  ME->INIT_BY_SPEC_PCDIM( IT_PRVDR = IT_PRVDR ).
  ME->INIT_BY_SPEC_MFMI(  IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_LAMI.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get Lamination Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        if LR_PR_LAMI is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_LAMI is bound.

***------------------------------------------------------------------------------------------------
*** Lamination Side
  move LR_PR_LAMI->GET_LASID( ) to ME->F_LASID.

*** Lamination Type
  move LR_PR_LAMI->GET_TLAMI( ) to ME->F_TLAMI.

*** Lamination Relation
  move LR_PR_LAMI->GET_RLAMI( ) to ME->F_RLAMI.

*** Lamination Glue Consumption Type
  move LR_PR_LAMI->GET_TLAGC( ) to ME->F_TLAGC.

endmethod.
method INIT_BY_SPEC_MFMI.

  data: LS_PCDIM type        ZVCXI_P0SP_S_PCDIM,
        LS_BAWGT type        ZVCXI_P0S_S_BAWGT,
        LS_BAWGP type        ZVCXI_P0S_S_BAWGP.
  data: LR_GATE_LAMI   type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_LAMI     type ref to ZCL_VCXI_P0SS_PR_LAMI,
        LR_PR_MS_SHTPR type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
        LR_PR_PSCALE   type ref to ZCL_VCXI_XCS_PR_PSCALE.


***------------------------------------------------------------------------------------------------
*** Find Provider for Lamination
  loop at IT_PRVDR into LR_GATE_LAMI.
    try.
        move LR_GATE_LAMI->R_CLSPR ?to LR_PR_LAMI.
        if LR_PR_LAMI is bound.
          exit.
        else.
          clear LR_GATE_LAMI.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_GATE_LAMI.
        continue.
    endtry.
  endloop.
  check LR_GATE_LAMI is bound.

*** Find Provider for Sheet Procurment
  loop at IT_PRVDR into LR_GATE.
*** Check is InLine with Lamination
    check LR_GATE->IS_IN_LINE( IR_GATE = LR_GATE_LAMI ) eq ABAP_TRUE.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
        if LR_PR_MS_SHTPR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_MS_SHTPR is bound.

***------------------------------------------------------------------------------------------------
*** Get Material Information
  move LR_PR_MS_SHTPR->GET_MATNR( ) to ME->S_MFMI_P-MATNR.
  move LR_PR_MS_SHTPR->GET_PURCH( ) to ME->S_MFMI_P-PURCH.
  move LR_PR_MS_SHTPR->GET_LIFNR( ) to ME->S_MFMI_P-LIFNR.

  move 100                          to ME->S_MFMI_P-MFISP.
  move '%'                          to ME->S_MFMI_P-MFISP_UOM.

  move 1                            to ME->S_MFMI_P-MFICF.
  move 1                            to ME->S_MFMI_P-MFICP.

  read table ME->T_PCDIM_IN into LS_PCDIM index 2.
  if SY-SUBRC eq 0.
    move-corresponding LS_PCDIM to ME->S_MFMI_P.
  endif.

  move LR_PR_MS_SHTPR->GET_BAWGT( ) to LS_BAWGT.
  move-corresponding LS_BAWGT       to ME->S_MFMI_P.
  move LR_PR_MS_SHTPR->GET_BAWGP( ) to LS_BAWGP.
  move-corresponding LS_BAWGP       to ME->S_MFMI_P.

***------------------------------------------------------------------------------------------------
*** Process Provider for Price Scale
  loop at IT_PRVDR into LR_GATE.
    clear LR_PR_PSCALE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_PR_PSCALE is bound.

*** Add Price Scales
    append value #( ISVCE   = LR_GATE->F_ID
                    S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                    S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                    S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                  ) to ME->S_MFMI_P-T_PSCALE.
  endloop.

endmethod.
method INIT_BY_SPEC_PCDIM.

  data:  LF_POOTI_IN       type        ZVCXI_P0S_POOTI,
         LF_POOTI_OUT      type        ZVCXI_P0S_POOTI.
  data:  LS_PCDIM_BASE     type        ZVCXI_P0SP_S_PCDIM,
         LS_PCDIM_SHTL     type        ZVCXI_P0SP_S_PCDIM,
         LS_SHTLL          type        ZVCXI_P0SS_S_SHTLL,
         LS_SHTLW          type        ZVCXI_P0SS_S_SHTLW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

*** Get Lamination Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        if LR_PR_LAMI is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_LAMI is bound.

***------------------------------------------------------------------------------------------------
*** Get Point of Time for PC Dimensions
  ME->GET_PCDIM_POOTI( exporting IT_PRVDR     = IT_PRVDR
                       importing EF_POOTI_IN  = LF_POOTI_IN
                                 EF_POOTI_OUT = LF_POOTI_OUT ).
*** Get PC Dimensions
  LS_PCDIM_BASE   = LR_SHTDIM->GET_PCDIM( IF_POOTI = LF_POOTI_IN ).
  append LS_PCDIM_BASE to ME->T_PCDIM_IN.
  ME->S_PCDIM_OUT = LR_SHTDIM->GET_PCDIM( IF_POOTI = LF_POOTI_OUT ).

***------------------------------------------------------------------------------------------------
*** Build PC Dimension of Laminated Sheet based on Base
  move LS_PCDIM_BASE            to LS_PCDIM_SHTL.

*** Set Lamination Sheet Length
  move LR_PR_LAMI->GET_SHTLL( ) to LS_SHTLL.
  move LS_SHTLL-SHTLL           to LS_PCDIM_SHTL-PCLEN.
  move LS_SHTLL-SHTLL_UOM       to LS_PCDIM_SHTL-PCLEN_UOM.

*** Set Lamination Sheet Width
  move LR_PR_LAMI->GET_SHTLW( ) to LS_SHTLW.
  move LS_SHTLW-SHTLW           to LS_PCDIM_SHTL-PCWID.
  move LS_SHTLW-SHTLW_UOM       to LS_PCDIM_SHTL-PCWID_UOM.

*** Set Caliper
  move LR_PR_LAMI->ZIF_VCXI_P0SS_CALIP~GET_CALIP( IF_POOTI = '*' ) to LS_CALIP.
  move LS_CALIP-CALIP           to LS_PCDIM_SHTL-PCHEI.
  move LS_CALIP-CALIP_UOM       to LS_PCDIM_SHTL-PCHEI_UOM.

*** Set PC Direction based on Relation
  case ME->F_RLAMI.
    when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_WITH.
      move 'A' to LS_PCDIM_SHTL-PCDIR.
    when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_CROSS.
      move 'B' to LS_PCDIM_SHTL-PCDIR.
  endcase.

*** Add to Dimensions
  append LS_PCDIM_SHTL to ME->T_PCDIM_IN.

***------------------------------------------------------------------------------------------------
*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCTYP = ME->S_PCDIM_OUT-PCTYP
                                                      EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move LS_PCDIM_BASE-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              T_PCDIM_IN   = ME->T_PCDIM_IN
              S_PCDIM_OUT  = ME->S_PCDIM_OUT

              F_LASID      = ME->F_LASID
              F_TLAMI      = ME->F_TLAMI
              F_RLAMI      = ME->F_RLAMI
              F_TLAGC      = ME->F_TLAGC

              S_MFMI_P     = ME->S_MFMI_P

       result xml RF_XML.

endmethod.
method SET_SPVRE_VALUE_PSCALE_A.

  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set Price Scale Quantity
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_A       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PSQTY                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PSQTY_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICE         to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICE                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICE_CURR                          to LS_PARAM-CURKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_A       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICP                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICP_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).


endmethod.
method SET_SPVRE_VALUE_PSCALE_P.

  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set Price Scale Quantity
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_P       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PSQTY                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PSQTY_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICE         to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICE                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICE_CURR                          to LS_PARAM-CURKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_P       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICP                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICP_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).


endmethod.
method SET_SPVRE_VALUE_PSCALE_W.

  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set Price Scale Quantity
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_W       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PSQTY                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PSQTY_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICE         to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICE                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICE_CURR                          to LS_PARAM-CURKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
  clear LS_PARAM.
  move ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_W       to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
  move IS_PSCALE-PRICP                               to LS_PARAM-ATFLV.
  move IS_PSCALE-PRICP_UOM                           to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
  IR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = LS_PARAM ).


endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_IN.

  free: CT_PCDIM.
  append lines of ME->T_PCDIM_IN to CT_PCDIM.

endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_OUT.

  free: CT_PCDIM.
  append ME->S_PCDIM_OUT to CT_PCDIM.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  data:          LF_PCDIR   type ZVCXI_P0SP_PCDIR.
  data:          LS_PCDIM   type ZVCXI_P0SP_S_PCDIM.
  field-symbols: <S_PCDIM>  type ZVCXI_P0SP_S_PCDIM.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

***----------------------------------------------------------------------------
*** Turn PC Dimension IN
  loop at ME->T_PCDIM_IN assigning <S_PCDIM>.
    if SY-TABIX eq 1.
***   Base
      <S_PCDIM> = ME->TURN_PCDIM( IS_PCDIM = <S_PCDIM>
                                  IF_PCDIR = IF_PCDIR ).
    else.
***   Laminating Sheet
      case ME->F_RLAMI.
        when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_WITH.
          move IF_PCDIR to LF_PCDIR.
        when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_CROSS.
          case IF_PCDIR.
            when 'A'.
              move 'B' to LF_PCDIR.
            when 'B'.
              move 'A' to LF_PCDIR.
          endcase.
      endcase.
      <S_PCDIM> = ME->TURN_PCDIM( IS_PCDIM = <S_PCDIM>
                                  IF_PCDIR = LF_PCDIR ).
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Turn PC Dimension OUT
  ME->S_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_OUT
                                    IF_PCDIR = IF_PCDIR ).


***----------------------------------------------------------------------------
*** Turn Material Flow Material In
  if ME->S_MFMI_P is not initial.
    case ME->F_RLAMI.
      when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_WITH.
        move IF_PCDIR to LF_PCDIR.
      when ZCL_VCXI_P0SS_CUST_LAMI=>C_RLAMI_CROSS.
        case IF_PCDIR.
          when 'A'.
            move 'B' to LF_PCDIR.
          when 'B'.
            move 'A' to LF_PCDIR.
        endcase.
    endcase.
    move-corresponding ME->S_MFMI_P to LS_PCDIM.
    LS_PCDIM = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM
                               IF_PCDIR = LF_PCDIR ).
    move-corresponding LS_PCDIM to ME->S_MFMI_P.
  endif.

endmethod.
