
class ZCL_VCXI_P5SS_PR_MS_RLPROC definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_MS_XPROC
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_PRINT_COM .
  interfaces ZIF_VCXI_P5SS_COMM_NEXT .

  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CCBGN_CHANGED type /VCXI/VKSC_IEVNT value 'CCBGN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRWWI_CHANGED type /VCXI/VKSC_IEVNT value 'PRWWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P5_MS_RLPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_P5SS_MS_RLPROC' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_CCBGN type /VCXI/VKS_PARID value 'ZVCXI_PX_CCBGN' ##NO_TEXT.
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_PRWWI type /VCXI/VKS_PARID value 'ZVCXI_PX_PRWWI' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods GET_CALIP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_CCBGN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CCBGN) type ZVCXI_PXS_CCBGN
    raising
      /VCXI/CX_CKX .
  methods GET_PRWWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PRWWI) type ZVCXI_PXS_S_PRWWI
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_BAWGT type ZVCXI_P0S_S_BAWGT
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CCBGN
    importing
      !IF_CCBGN type ZVCXI_PXS_CCBGN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRWWI
    importing
      !IS_PRWWI type ZVCXI_PXS_S_PRWWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLBPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WEBWI_CHANGED type /VCXI/VKSC_IEVNT value 'WEBWI_CHANGED' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_PARID_RLBPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLBPX' ##NO_TEXT.
  constants C_PARID_WEBWI type /VCXI/VKS_PARID value 'ZVCXI_PX_WEBWI' ##NO_TEXT.

  methods CHECK_CALIP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRWWI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_GRAMM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_CCBGN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SURWT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLBPX
    importing
      !IF_RLBPX type ZVCXI_P5S_RLBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WEBWI
    importing
      !IS_WEBWI type ZVCXI_PXS_S_WEBWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SS_PR_MS_RLPROC definition
class ZCL_VCXI_P5SS_PR_MS_RLPROC implementation.
  method CHECK_CALIP.

*** Check Caliper
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '125' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '126' ).
      endif.
    endif.

  endmethod.
  method CHECK_CCBGN.

*** Check CCB Grade Number
    if ME->GET_CCBGN( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     CCB Grade Number is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '104' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     CCB Grade Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '105' ).
      endif.
    endif.

  endmethod.
  method CHECK_GRAMM.

*** Check Grammage
    if ME->GET_GRAMM( )-GRAMM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Grammage is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '123' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Grammage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '124' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRWWI.

*** Get required Web Width and Procurement Web Width
    data(LS_WEBWI) = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
    data(LS_PRWWI) = ME->GET_PRWWI( ).

    if LS_PRWWI-PRWWI is not initial.
***   Check Web Width
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_WEBWI-WEBWI
                                                      IF_CALCV_UOM_1 = LS_WEBWI-WEBWI_UOM
                                                      IF_CALCV_2     = LS_PRWWI-PRWWI
                                                      IF_CALCV_UOM_2 = LS_PRWWI-PRWWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ ) eq ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Procurement Web Width matches requirement.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '101' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Procurement Web Width does not matches requirement.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '102' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Procurement Web Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '103' ).
      endif.
    endif.

  endmethod.
  method CHECK_SURWT.

*** Check Surface Weight
    if ME->GET_SURWT( )-SURWT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Surface Weight is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '127' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Surface Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '128' ).
      endif.
    endif.

  endmethod.
  method GET_CALIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
    move LS_PARAM-ATFLV to RS_CALIP-CALIP.
    move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CCBGN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CCBGN ).
    RF_CCBGN = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_GRAMM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
    RS_GRAMM-GRAMM     = LS_PARAM-ATFLV.
    RS_GRAMM-GRAMM_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_PRWWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRWWI ).
    move LS_PARAM-ATFLV to RS_PRWWI-PRWWI.
    move LS_PARAM-UNIT  to RS_PRWWI-PRWWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check CCB Grade Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CCBGN( ) ).

*** Check Grammage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_GRAMM( ) ).

*** Check Surface Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SURWT( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

*** Check Procurement Web Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRWWI( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check CCB Grade Number
    ME->CHECK_CCBGN( IR_MESSAGE = IR_MESSAGE ).

*** Check Grammage
    ME->CHECK_GRAMM( IR_MESSAGE = IR_MESSAGE ).

*** Check Surface Weight
    ME->CHECK_SURWT( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

*** Check Procurement Web Width
    ME->CHECK_PRWWI( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    if ES_BAWGT is requested or
       ES_BAWGP is requested.
***   Fixed Base Weight Unit as base for Base Weight
      ES_BAWGP-BAWGP     = 1000.
      ES_BAWGP-BAWGP_UOM = 'M2'.

***   Calculate Base Weight by Surface Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = ES_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = ES_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = ES_BAWGT-BAWGT
                                                          EF_CALCV_UOM   = ES_BAWGT-BAWGT_UOM ).
    endif.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_DCONF type DATS,
          LF_SETBY type /VCXI/VKSR_SETBY.


    data(LF_MATNR) = ME->GET_MATNR( ).
    data(LF_WERKS) = ME->GET_WERKS( ).
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          data(LR_CUST_RLPROC) = ZCL_VCXI_P5SS_CUST_RLPROC=>GET_INSTANCE_RLPROC( IF_MATNR = LF_MATNR
                                                                                 IF_WERKS = LF_WERKS
                                                                                 IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          clear LR_CUST_RLPROC.
      endtry.
    endif.
    ME->R_CUST_MATNR = LR_CUST_RLPROC.

***--------------------------------------------------------------------------------------
*** Set Values for Real Procurement
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_PRODH( IF_PRODH = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->F_PRODH )
                     IF_SETBY = LF_SETBY ).
      ME->SET_CCBGN( IF_CCBGN = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->F_CCBGN )
                     IF_SETBY = LF_SETBY ).
      ME->SET_GRAMM( IS_GRAMM = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->S_GRAMM )
                     IF_SETBY = LF_SETBY ).
      ME->SET_CALIP( IS_CALIP = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->S_CALIP )
                     IF_SETBY = LF_SETBY ).
      ME->SET_SURWT( IS_SURWT = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->S_SURWT )
                     IF_SETBY = LF_SETBY ).
      ME->SET_PRWWI( IS_PRWWI = cond #( when LR_CUST_RLPROC is bound then value #( PRWWI     = LR_CUST_RLPROC->S_WEBWI-WEBWI
                                                                                   PRWWI_UOM = LR_CUST_RLPROC->S_WEBWI-WEBWI_UOM ) )
                     IF_SETBY = LF_SETBY ).
      ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IT_PRINT_COM = cond #( when LR_CUST_RLPROC is bound then LR_CUST_RLPROC->T_PRINT_COM )
                                                 IF_SETBY     = LF_SETBY ).
    endif.

  endmethod.
  method SET_CALIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

    if IS_CALIP is supplied.
      LS_PARAM-ATFLV = IS_CALIP-CALIP.
      LS_PARAM-UNIT  = IS_CALIP-CALIP_UOM.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
    endif.

  endmethod.
  method SET_CCBGN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CCBGN ).

    if IF_CCBGN is supplied.
      LS_PARAM-ATWRT = IF_CCBGN.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CCBGN_CHANGED ).
    endif.

  endmethod.
  method SET_GRAMM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

    if IS_GRAMM is supplied.
      LS_PARAM-ATFLV = IS_GRAMM-GRAMM.
      LS_PARAM-UNIT  = IS_GRAMM-GRAMM_UOM.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_PRWWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRWWI ).

    if IS_PRWWI is supplied.
      LS_PARAM-ATFLV = IS_PRWWI-PRWWI.
      LS_PARAM-UNIT  = IS_PRWWI-PRWWI_UOM.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRWWI_CHANGED ).
    endif.

  endmethod.
  method SET_RLBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).

    move IF_RLBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLBPX_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    if IS_SURWT is supplied.
      LS_PARAM-ATFLV = IS_SURWT-SURWT.
      LS_PARAM-UNIT  = IS_SURWT-SURWT_UOM.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_WEBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).

    LS_PARAM-ATFLV = IS_WEBWI-WEBWI.
    LS_PARAM-UNIT  = IS_WEBWI-WEBWI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEBWI_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).
    move LS_PARAM-STRNG to EF_RLBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property Instance
    if RR_BL_RLBPROP is requested.
      RR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( IF_RLBPX = EF_RLBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX.

***--------------------------------------------------------------------------------------
*** Get Roll Forward Property (Inbound)
    RR_BL_RLFPROP = ZCL_VCXI_P5SS_BL_RLFPROP=>FACTORY( ).
    check RR_BL_RLFPROP is bound.

***--------------------------------------------------------------------------------------
*** CCB Grade Number
    RR_BL_RLFPROP->SET_CCBGN( IF_CCBGN = ME->GET_CCBGN( ) ).

*** Grammage
    RR_BL_RLFPROP->SET_GRAMM( IS_GRAMM = ME->GET_GRAMM( ) ).

*** Caliper
    RR_BL_RLFPROP->SET_CALIP( IS_CALIP = ME->GET_CALIP( ) ).

*** Print Definition
    RR_BL_RLFPROP->SET_PRINT( IT_PRINT = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( ) ).

*** Product Hierarchy
    RR_BL_RLFPROP->SET_PRODH( IF_PRODH = ME->GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Roll Forward Property XML
    if EF_RLFPX is requested.
      EF_RLFPX = RR_BL_RLFPROP->GET_RLFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    RS_SURWT = ME->GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).
    RS_WEBWI-WEBWI     = LS_PARAM-ATFLV.
    RS_WEBWI-WEBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LS_WEBWI      type ZVCXI_PXS_S_WEBWI,
          LS_WEBWI_PREV type ZVCXI_PXS_S_WEBWI.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P5SS_COMM_PREV,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Backward Property Instance
    LR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Sum of Web Width
      LS_WEBWI_PREV = LR_COMM_PREV->GET_WEBWI( ).
      if LS_WEBWI is initial.
        move LS_WEBWI_PREV to LS_WEBWI.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WEBWI_PREV-WEBWI
                                                            IF_CALCV_UOM_1 = LS_WEBWI_PREV-WEBWI_UOM
                                                            IF_CALCV_2     = LS_WEBWI-WEBWI
                                                            IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_WEBWI-WEBWI_UOM
                                                  importing EF_CALCV       = LS_WEBWI-WEBWI
                                                            EF_CALCV_UOM   = LS_WEBWI-WEBWI_UOM ).
      endif.

***   Get Sum of Number of Ups
      LF_NOUPS += LR_COMM_PREV->GET_NOUPS( ).

***   Combine Backward Property
      LR_BL_RLBPROP->MERGE( IR_BL_RLBPROP = LR_COMM_PREV->GET_RLBPX( ) ).
    endloop.

***------------------------------------------------------------------------------------------------
*** Backward Web Width
    ME->SET_WEBWI( IS_WEBWI = LS_WEBWI ).

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Roll Backward Property XML
    ME->SET_RLBPX( IF_RLBPX = LR_BL_RLBPROP->GET_RLBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LR_DATA_SUPER type ref to DATA.
    field-symbols: <S_FDI_SUPER>     type ANY,
                   <S_FDI_MS_RLPROC> type ZVCXI_P5SS_S_FDI_MS_RLPROC.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P5SS_S_FDI_MS_RLPROC.
    assign RR_DATA->* to <S_FDI_MS_RLPROC>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_MS_RLPROC>-S_FDI_MS_XPROC = corresponding #( <S_FDI_SUPER> ).
    endif.


***--------------------------------------------------------------------------------------
*** CCB Grade Number
    <S_FDI_MS_RLPROC>-CCBGN = ME->GET_CCBGN( ).

*** Grammage
    <S_FDI_MS_RLPROC>-S_GRAMM = ME->GET_GRAMM( ).

*** Caliper
    <S_FDI_MS_RLPROC>-S_CALIP = ME->GET_CALIP( ).

*** Procurement Web Width
    <S_FDI_MS_RLPROC>-S_PRWWI = ME->GET_PRWWI( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_MS_RLPROC_OLD type ZVCXI_P5SS_S_FDI_MS_RLPROC,
          LS_FDI_MS_RLPROC_NEW type ZVCXI_P5SS_S_FDI_MS_RLPROC.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data new Data
    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_MS_RLPROC_NEW = corresponding #( <S_DATA> ).
    endif.

*** Dereference Data old Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_MS_RLPROC_OLD = corresponding #( <S_DATA> ).
    endif.

*** Set SUPER Data
    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = ref #( LS_FDI_MS_RLPROC_NEW-S_FDI_MS_XPROC )
                                       IR_DATA_OLD = ref #( LS_FDI_MS_RLPROC_OLD-S_FDI_MS_XPROC ) ).

***--------------------------------------------------------------------------------------
*** Set CCB Grade Number
    if LS_FDI_MS_RLPROC_OLD-CCBGN ne LS_FDI_MS_RLPROC_NEW-CCBGN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'CCBGN' ] ).
      ME->SET_CCBGN( IF_CCBGN = LS_FDI_MS_RLPROC_NEW-CCBGN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Grammage
    if LS_FDI_MS_RLPROC_OLD-S_GRAMM ne LS_FDI_MS_RLPROC_NEW-S_GRAMM and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'GRAMM' ] ).
      ME->SET_GRAMM( IS_GRAMM = LS_FDI_MS_RLPROC_NEW-S_GRAMM
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Caliper
    if LS_FDI_MS_RLPROC_OLD-S_CALIP ne LS_FDI_MS_RLPROC_NEW-S_CALIP and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'CALIP' ] ).
      ME->SET_CALIP( IS_CALIP = LS_FDI_MS_RLPROC_NEW-S_CALIP
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Web Width
    if LS_FDI_MS_RLPROC_OLD-S_PRWWI ne LS_FDI_MS_RLPROC_NEW-S_PRWWI and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'PRWWI' ] ).
      ME->SET_PRWWI( IS_PRWWI = LS_FDI_MS_RLPROC_NEW-S_PRWWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->IS_DUMMY( ) when ABAP_TRUE then ABAP_TRUE
                                                           else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    data(LS_PRWWI) = ME->GET_PRWWI( ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_PRWWI-PRWWI
                                          IF_UOM   = LS_PRWWI-PRWWI_UOM
                                changing  CT_ATTR  = LT_ATTR ).
    data(LR_BL_RLFPROP) = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( ).
    if LR_BL_RLFPROP is bound.
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = LR_BL_RLFPROP->GET_SBSTR( )    "Substrate
                                  changing  CT_ATTR      = LT_ATTR ).
    endif.
    data(LS_CALIP) = ME->GET_CALIP( ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_CALIP-CALIP
                                          IF_UOM   = LS_CALIP-CALIP_UOM
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR     = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON      = 'sap-icon://tag'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
