
class ZCL_VCXI_P0SS_PR_COMP_SFG definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_PSCALE_MGR .

  constants C_IPRVT_P0_COMP_SFG type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_COMP_SFG'. "#EC NOTEXT
  constants C_PARID_ABLAN type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAN'. "#EC NOTEXT
  constants C_PARID_BOXPA type /VCXI/VKS_PARID value 'ZVCXI_P0_BOXPA'. "#EC NOTEXT
  constants C_PARID_COMPP type /VCXI/VKS_PARID value 'ZVCXI_P0_COMPP'. "#EC NOTEXT
  constants C_PARID_COMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_COMPR'. "#EC NOTEXT
  constants C_PARID_FOLHE type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLHE'. "#EC NOTEXT
  constants C_PARID_FOLLE type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLLE'. "#EC NOTEXT
  constants C_PARID_FOLWI type /VCXI/VKS_PARID value 'ZVCXI_P0_FOLWI'. "#EC NOTEXT
  constants C_PARID_PPASS type /VCXI/VKS_PARID value 'ZVCXI_P0_PPASS'. "#EC NOTEXT
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE'. "#EC NOTEXT
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE'. "#EC NOTEXT
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI'. "#EC NOTEXT
  constants C_PARID_PRSTY type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSTY'. "#EC NOTEXT
  constants C_PARID_PURCH type /VCXI/VKS_PARID value 'ZVCXI_XC_PURCH'. "#EC NOTEXT
  constants C_PARID_WNEPP type /VCXI/VKS_PARID value 'ZVCXI_P0_WNEPP'. "#EC NOTEXT
  data F_MATNR_DUMMY type MATNR .
  data R_CUST_P0_COMP_SFG type ref to ZCL_VCXI_P0SS_CUST_COMP_SFG read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_WNEPP
    returning
      value(RS_WNEPP) type ZVCXI_P0SS_S_WNEPP
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAN
    returning
      value(RS_ABLAN) type ZVCXI_P0SS_S_ABLAN
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP
    returning
      value(RF_COMPP) type ZVCXI_P0SS_COMPP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COMPR
    returning
      value(RF_COMPR) type ZVCXI_P0SS_COMPR
    raising
      /VCXI/CX_CKX .
  methods GET_FLPRI
    returning
      value(RF_FLPRI) type ZVCXI_P0SS_FLPRI
    raising
      /VCXI/CX_CKX .
  methods GET_FLPRO
    returning
      value(RF_FLPRO) type ZVCXI_P0SS_FLPRO
    raising
      /VCXI/CX_CKX .
  methods GET_FOLHE
    exporting
      !ES_FOLHE type ZVCXI_P0SS_S_FOLHE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOLLE
    exporting
      !ES_FOLLE type ZVCXI_P0SS_S_FOLLE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOLWI
    exporting
      !ES_FOLWI type ZVCXI_P0SS_S_FOLWI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FPSMO
    returning
      value(RF_FPSMO) type ZVCXI_P0SS_FPSMO
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR_DESCR
    returning
      value(RF_LIFNR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOI
    returning
      value(RF_NOCOI) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOO
    returning
      value(RF_NOCOO) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS
    returning
      value(RF_PPASS) type ZVCXI_P0SS_PPASS
    raising
      /VCXI/CX_CKX .
  methods GET_PRDEI
    returning
      value(RF_PRDEI) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_PRDEO
    returning
      value(RF_PRDEO) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_PRDET
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_PRDET) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_DESCR
    returning
      value(RF_PRSTY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI
    returning
      value(RF_PRTYI) type ZVCXI_P0SS_PRTYI
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO
    returning
      value(RF_PRTYO) type ZVCXI_P0SS_PRTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_PRTYP) type ZVCXI_P0S_PRTYP
    raising
      /VCXI/CX_CKX .
  methods GET_PSCALE
    importing
      !IS_PSQTY type ZVCXI_XCS_S_PSQTY
    exporting
      !ES_PRICE type ZVCXI_XCS_S_PRICE
      !ES_PRICP type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    raising
      /VCXI/CX_CKX .
  methods GET_TRFPR
    returning
      value(RF_TRFPR) type ZVCXI_P0SS_TRFPR
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_PRINT_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SP_PRINT_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_WNEPP
    importing
      !IS_WNEPP type ZVCXI_P0SS_S_WNEPP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAN
    importing
      !IS_ABLAN type ZVCXI_P0SS_S_ABLAN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI_DESCR
    returning
      value(RF_PRTYI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO_DESCR
    returning
      value(RF_PRTYO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_COMPP
    importing
      !IF_COMPP type ZVCXI_P0SS_COMPP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMPR
    importing
      !IF_COMPR type ZVCXI_P0SS_COMPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLPRI
    importing
      !IF_FLPRI type ZVCXI_P0SS_FLPRI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLPRO
    importing
      !IF_FLPRO type ZVCXI_P0SS_FLPRO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLHE
    importing
      !IS_FOLHE type ZVCXI_P0SS_S_FOLHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLLE
    importing
      !IS_FOLLE type ZVCXI_P0SS_S_FOLLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOLWI
    importing
      !IS_FOLWI type ZVCXI_P0SS_S_FOLWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPSMO
    importing
      !IF_FPSMO type ZVCXI_P0SS_FPSMO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOI
    importing
      !IF_NOCOI type ZVCXI_P0S_NOCOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_NOCOL type ZVCXI_P0S_NOCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOO
    importing
      !IF_NOCOO type ZVCXI_P0S_NOCOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PPASS
    importing
      !IF_PPASS type ZVCXI_P0SS_PPASS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRDEI
    importing
      !IF_PRDEI type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods SET_PRDEO
    importing
      !IF_PRDEO type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods SET_PRDET
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRDET type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTY
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYI
    importing
      !IF_PRTYI type ZVCXI_P0SS_PRTYI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYO
    importing
      !IF_PRTYO type ZVCXI_P0SS_PRTYO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYP
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PURCH
    importing
      !IF_PURCH type ZVCXI_XCS_PURCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRFPR
    importing
      !IF_TRFPR type ZVCXI_P0SS_TRFPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_TPRST type /VCXI/VKS_ATTID value 'TPRST' ##NO_TEXT.
  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PRICE type /VCXI/VKSC_IEVNT value 'INIT_PRICE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_IEVNT_I_LOAD_PSCALE type /VCXI/VKSC_IEVNT value 'LOAD_PSCALE' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_ABLAN_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COMPR_CHANGED type /VCXI/VKSC_IEVNT value 'COMPR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FOLDIM_CHANGED type /VCXI/VKSC_IEVNT value 'FOLDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPSMO_CHANGED type /VCXI/VKSC_IEVNT value 'FPSMO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PPASS_CHANGED type /VCXI/VKSC_IEVNT value 'PPASS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WNEPP_CHANGED type /VCXI/VKSC_IEVNT value 'WNEPP_CHANGED' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_FLCUT type /VCXI/VKS_PARID value 'ZVCXI_P0_FLCUT' ##NO_TEXT.
  constants C_PARID_FLPRI type /VCXI/VKS_PARID value 'ZVCXI_P0_FLPRI' ##NO_TEXT.
  constants C_PARID_FLPRO type /VCXI/VKS_PARID value 'ZVCXI_P0_FLPRO' ##NO_TEXT.
  constants C_PARID_FPSMO type /VCXI/VKS_PARID value 'ZVCXI_P0_FPSMO' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_NOCOI type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOI' ##NO_TEXT.
  constants C_PARID_NOCOO type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOO' ##NO_TEXT.
  constants C_PARID_PRTYI type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYI' ##NO_TEXT.
  constants C_PARID_PRTYO type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYO' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.
  constants C_PARID_TRFPR type /VCXI/VKS_PARID value 'ZVCXI_P0_TRFPR' ##NO_TEXT.
  data F_TPRST type ZVCXI_P0SS_TPRST .

  methods HANDLE_LOAD_PSCALE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRICE
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMPP
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LIFNR
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PPASS
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRINT_I
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRINT_O
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_AS
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_SP_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods INIT_MATNR_DUMMY
    raising
      /VCXI/CX_CKX .
  methods SET_COMP_SFG_BY_CUST
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_BY_CUST
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_PR_COMP_SFG definition
class ZCL_VCXI_P0SS_PR_COMP_SFG implementation.
method CHECK_COMPP.

*** 0 - Product Type is maintained and valid.
*** 1 - Product Type is maintained but not valid for AS
*** 2 - Product type is maintained but not valid.
*** 3 - Product Type is not maintained.

  data: LF_COMPP type ZVCXI_P0SS_COMPP,
        LF_PTYPE type ZVCXI_P0S_PTYPE.

*** Start Positiv
  RF_RESULT = 0.

  LF_COMPP = ME->GET_COMPP( ).

*** Check if Product Type is maintained.
  if LF_COMPP is initial.
    RF_RESULT = 3.
    exit.
  endif.

*** Check Product Type is valid
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100 with key PTYPE = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 2.
    exit.
  endif.

*** Check Product Type is valid
  LF_PTYPE = ME->GET_PTYPE_AS( ).
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC101 with key PTYPE = LF_PTYPE
                                                        COMPP = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 1.
    exit.
  endif.

endmethod.
method CHECK_LIFNR.
*** 0 - No Check
*** 1 - Vendor is maintained and correct
*** 2 - Vendor is not maintained.   (not in use)
*** 3 - Vendor is not correct.

  data:  LF_LIFNR    type        LIFNR,
         LF_WERKS    type        WERKS_D.
  data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

***----------------------------------------------------------------------------
*** Only for Purchased Material
  check ME->GET_PURCH( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get Vendor and check if maintained
  move ME->GET_LIFNR( ) to LF_LIFNR.
  if LF_LIFNR is initial.
    move 0 to RF_RETURN.    " No Check
    exit.
  endif.

***----------------------------------------------------------------------------
*** Get Plant
  move ME->GET_WERKS( ) to LF_WERKS.

***----------------------------------------------------------------------------
*** Perform Check
  try.
      ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = LF_LIFNR
                                         IF_WERKS = LF_WERKS ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      move 3 to RF_RETURN.
      if IR_MSG is bound.
        IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      endif.
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Check was successful
  move 1 to RF_RETURN.
  if IR_MSG is bound.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                         IF_MSGTY = 'S'
                         IF_MSGNO = '008' ).
  endif.

endmethod.
method CHECK_MATNR.

*** Check Material Number is maintained
  if ME->GET_MATNR( ) is initial.
    move 1 to RF_RESULT.
    exit.
  endif.

*** Check Material Instance was created
  if ME->R_CUST_P0_COMP_SFG is not bound.
    move 2 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid
  if ME->R_CUST_P0_COMP_SFG->F_CHECK_MATNR ne ABAP_TRUE.
    move 3 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid in Plant
  if ME->R_CUST_P0_COMP_SFG->F_CHECK_MAT_MARC ne ABAP_TRUE.
    move 4 to RF_RESULT.
    exit.
  endif.

endmethod.
method CHECK_PPASS.

*** RF_SUBRC = 0 => Production Pass is maintained
*** RF_SUBRC = 1 => Production Pass is not maintained

  if ME->GET_PPASS( ) is initial.
    move 1 to RF_SUBRC.
    exit.
  endif.

endmethod.
method CHECK_PRICE.

*** 0 - No Check
*** 1 - Price is maintained
*** 2 - Price is not maintained.

  data: LS_PRICE             type        ZVCXI_XCS_S_PRICE,
        LS_PRICP             type        ZVCXI_XCS_S_PRICP.
  data: LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Only for Purchased Materials
  if ME->GET_PURCH( ) eq abap_true.

*** Start negative
    move 2 to RF_RETURN.

*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***       Get Price Scale
          LS_PRICE = LR_PR_PSCALE->GET_PRICE( ).
          LS_PRICP = LR_PR_PSCALE->GET_PRICP( ).

          if LS_PRICE-PRICE is not initial and LS_PRICP-PRICP is not initial.
            move 1 to RF_RETURN.
          else.
            move 2 to RF_RETURN.
            exit.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endif.

endmethod.
method CHECK_PRINT_I.

*** 0 - Print Inside is maintained and valid.
*** 1 - Print Inside is not fully maintained.
*** 2 - Print Type for Print Inside is not valid.
*** 9 - Print Inside is not active.

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  if ME->GET_FLPRI( ) ne ABAP_TRUE.
    move 9 to RF_RETURN.
    exit.
  endif.

  if ME->GET_NOCOI( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

  LF_PRTYP = ME->GET_PRTYI( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_PRINT_O.

*** 0 - Print Outside is maintained and valid
*** 1 - Print Outside is not fully maintained
*** 2 - Print Type for Print Outside is not valid
*** 9 - Print Outside is not active

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  if ME->GET_FLPRO( ) ne ABAP_TRUE.
    move 9 to RF_RETURN.
    exit.
  endif.

  if ME->GET_NOCOO( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

  LF_PRTYP = ME->GET_PRTYO( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Material Dummy
  ME->INIT_MATNR_DUMMY( ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method DO_FREE.

  ME->R_GATE->DO_FREE( ).

endmethod.
method GET_ABLAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).
  move LS_PARAM-ATFLV to RS_ABLAN-ABLAN.
  move LS_PARAM-UNIT  to RS_ABLAN-ABLAN_UOM.

endmethod.
method GET_BOXPA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).
  move LS_PARAM-ATWRT to RF_BOXPA.

endmethod.
method GET_BOXPA_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_BOXPA'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_BOXPA   type                   ZVCXI_P0SS_BOXPA.

  LF_BOXPA = ME->GET_BOXPA( ).

*** Return BOXPA description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_BOXPA into LS_D07V.
  check SY-SUBRC eq 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_COMPP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPP ).
  move LS_PARAM-ATWRT to RF_COMPP.

endmethod.
method GET_COMPP_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_COMPP( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_DESCR.

endmethod.
method GET_COMPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).
  move LS_PARAM-ATFLV to RF_COMPR.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_DESCR.

  data: LF_MATNR type MATNR,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_MATNR = ME->GET_MATNR( ).

  if LF_MATNR is not initial.
*** Convert Material Number to Output
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_MATNR
      importing
        OUTPUT = LF_MATNR.
*** Get Material Description
    LF_DESCR = ME->GET_MATNR_DESCR( ).

    concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_FLPRI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRI ).
  move LS_PARAM-ATWRT to RF_FLPRI.

endmethod.
method GET_FLPRO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRO ).
  move LS_PARAM-ATWRT to RF_FLPRO.

endmethod.
method GET_FOLHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLHE ).
  move LS_PARAM-ATFLV to ES_FOLHE-FOLHE.
  move LS_PARAM-UNIT  to ES_FOLHE-FOLHE_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOLLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLLE ).
  move LS_PARAM-ATFLV to ES_FOLLE-FOLLE.
  move LS_PARAM-UNIT  to ES_FOLLE-FOLLE_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOLWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLWI ).
  move LS_PARAM-ATFLV to ES_FOLWI-FOLWI.
  move LS_PARAM-UNIT  to ES_FOLWI-FOLWI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FPSMO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).
  move LS_PARAM-ATWRT to RF_FPSMO.

endmethod.
method GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.

endmethod.
method GET_LIFNR_DESCR.

  data: LF_LIFNR       type LIFNR,
        LF_LIFNR_DESCR type /VCXI/CKX_DESCR.

  LF_LIFNR = ME->GET_LIFNR( ).
  check LF_LIFNR is not initial.

  select single NAME1
         from LFA1
         into LF_LIFNR_DESCR
        where LIFNR eq LF_LIFNR.

  if SY-SUBRC = 0.
    move LF_LIFNR_DESCR to RF_LIFNR_DESCR.
  endif.

endmethod.
method GET_MATNR.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_MATNR.

endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_NOCOI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOI ).
    move LS_PARAM-ATWRT to RF_NOCOI.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_NOCOI = LR_PR_SP_PRINT->GET_NOCOL( ).

  endif.

endmethod.
method GET_NOCOL.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_NOCOI( ) to RF_NOCOL.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_NOCOO( ) to RF_NOCOL.
  endcase.

endmethod.
method GET_NOCOO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOO ).
  move LS_PARAM-ATWRT to RF_NOCOO.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_NOCOO = LR_PR_SP_PRINT->GET_NOCOL( ).

  endif.

endmethod.
method GET_PPASS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).
  move LS_PARAM-ATFLV to RF_PPASS.

endmethod.
method GET_PRDEI.

  data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                              IF_CREATE = SPACE ).
  check LR_GATE is bound.
  move ABAP_TRUE to RF_PRDEI.

endmethod.
method GET_PRDEO.

  data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                              IF_CREATE = SPACE ).
  check LR_GATE is bound.
  move ABAP_TRUE to RF_PRDEO.

endmethod.
method GET_PRDET.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_PRDEI( ) to RF_PRDET.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_PRDEO( ) to RF_PRDET.
  endcase.

endmethod.
method GET_PROHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
  move LS_PARAM-ATFLV to RS_PROHE-PROHE.
  move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.

endmethod.
method GET_PROLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
  move LS_PARAM-ATFLV to RS_PROLE-PROLE.
  move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.

endmethod.
method GET_PROWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
  move LS_PARAM-ATFLV to RS_PROWI-PROWI.
  move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.

endmethod.
method GET_PRSTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).
  move LS_PARAM-ATWRT to RF_PRSTY.

endmethod.
method GET_PRSTY_DESCR.

  data: LF_PRSTY        type        ZVCXI_P0SS_PRSTY,
        LF_TPRST        type        ZVCXI_P0SS_TPRST.

  LF_PRSTY = ME->GET_PRSTY( ).
  LF_TPRST = ME->GET_TPRST( ).

  RF_PRSTY_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PRSTY_DESCR( IF_TPRST = LF_TPRST
                                                              IF_PRSTY = LF_PRSTY ).

endmethod.
method GET_PRTYI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYI ).
    move LS_PARAM-ATWRT to RF_PRTYI.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_PRTYI = LR_PR_SP_PRINT->GET_PRTYP( ).

  endif.

endmethod.
method GET_PRTYI_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYI( ).
  RF_PRTYI_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_PRTYO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYO ).
  move LS_PARAM-ATWRT to RF_PRTYO.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_PRTYO = LR_PR_SP_PRINT->GET_PRTYP( ).

  endif.

endmethod.
method GET_PRTYO_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYO( ).
  RF_PRTYO_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_PRTYP.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_PRTYI( ) to RF_PRTYP.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_PRTYO( ) to RF_PRTYP.
  endcase.

endmethod.
method GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

endmethod.
method GET_PTYPE_AS.

  data:          LT_PRVDR             type        /VCXI/VKSR_TT_GATE.
  data:          LR_PRVDR             type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_AS        type ref to ZCL_VCXI_P0SS_PR_SPEC_AS.

*** Get Gates of AS Specification
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_AS=>C_IPRVT_P0_SPEC_AS
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SPEC_AS.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SPEC_AS.
  endtry.

  check LR_PR_SPEC_AS is bound.
  move LR_PR_SPEC_AS->GET_PTYPE( ) to RF_PTYPE.

endmethod.
method GET_PURCH.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
  move LS_PARAM-ATWRT to RF_PURCH.

endmethod.
method GET_SP_PRINT.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***------------------------------------------------------------------------------------------------
*** Get all Prints
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        check LR_PR_SP_PRINT is bound and
              LR_PR_SP_PRINT->GET_PRSID( ) eq IF_PRSID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
    check SY-SUBRC eq 0.
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Print Side
    move RR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    LR_PR_SP_PRINT->SET_PRSID( IF_PRSID = IF_PRSID ).

  endif.

endmethod.
method GET_STATUS.

  data:  LS_ABLAN    type ZVCXI_P0SS_S_ABLAN,
         LS_WNEPP    type ZVCXI_P0SS_S_WNEPP,
         LS_FOLLE    type ZVCXI_P0SS_S_FOLLE,
         LS_FOLWI    type ZVCXI_P0SS_S_FOLWI,
         LS_FOLHE    type ZVCXI_P0SS_S_FOLHE.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Material
  if ME->CHECK_MATNR( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Price - only for Purchased Material
  case ME->CHECK_PRICE( ).
    when 0.  " No Check
    when 1.  " Price is maintained
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Vendor - only for Purchased Material
  case ME->CHECK_LIFNR( ).
    when 0.  " No Check
    when 1.  " Vendor is maintained and correct
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Area & Weight
  LS_ABLAN = ME->GET_ABLAN( ).
  LS_WNEPP = ME->GET_WNEPP( ).
  if LS_ABLAN-ABLAN is not initial and
     LS_WNEPP-WNEPP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Get all Folding Dimensions
  ME->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
  ME->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
  ME->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).

*** Folding Length is maintained.
  if LS_FOLLE-FOLLE is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
*** Folding Length is not maintained.
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Folding Width is maintained.
  if LS_FOLWI-FOLWI is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
*** Folding Width is not maintained.
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Folding Height is maintained
  if LS_FOLHE-FOLHE is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
*** Folding Height is not maintained
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Print Inside
  if ME->CHECK_PRINT_I( ) eq 0 or
     ME->CHECK_PRINT_I( ) eq 9.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Print Outside
  if ME->CHECK_PRINT_O( ) eq 0 or
     ME->CHECK_PRINT_O( ) eq 9.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:  LF_WERKS    type WERKS_D.
  data:  LS_ABLAN    type ZVCXI_P0SS_S_ABLAN,
         LS_WNEPP    type ZVCXI_P0SS_S_WNEPP,
         LS_FOLLE    type ZVCXI_P0SS_S_FOLLE,
         LS_FOLWI    type ZVCXI_P0SS_S_FOLWI,
         LS_FOLHE    type ZVCXI_P0SS_S_FOLHE.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Material
  case ME->CHECK_MATNR( ).
    when 1.
***   Material Number is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '001' ).
    when 2.
***   Material Instance was not created.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '002' ).
    when 3.
***   Material Number is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '003' ).
    when 4.
***   Material Number is not valid in Plant.
      LF_WERKS = ME->GET_WERKS( ).
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '004'
                               IF_MSGV1 = LF_WERKS ).
    when others.
***   Material is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '005' ).
  endcase.

***------------------------------------------------------------------
*** Check Price - only for Purchased Material
  if ME->CHECK_PRICE( ) eq 1.
*** Price is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '006' ).
  elseif ME->CHECK_PRICE( ) eq 2.
*** Please check Price.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '007' ).

  endif.

***------------------------------------------------------------------
*** Check Vendor - only for Purchased Material
  ME->CHECK_LIFNR( IR_MSG = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  if LS_ABLAN-ABLAN is initial.

*** Net Blank Area is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '871' ).

  else.
*** Net Blank Area is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '872' ).
  endif.

***------------------------------------------------------------------
*** Check Net Weight per Piece
  LS_WNEPP = ME->GET_WNEPP( ).
  if LS_WNEPP-WNEPP is initial.

*** Net Weight per Piece is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '873' ).

  else.
*** Net Weight per Piece is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '874' ).
  endif.

***------------------------------------------------------------------
*** Get all Folding Dimensions
  ME->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
  ME->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
  ME->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).


***------------------------------------------------------
*** Folding Length
  if LS_FOLLE-FOLLE is not initial.
*** Folding Length is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '875' ).
  else.
*** Folding Length is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '876' ).
  endif.

***------------------------------------------------------
*** Folding Width
  if LS_FOLWI-FOLWI is not initial.
*** Folding Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '877' ).
  else.
*** Folding Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '878' ).
  endif.

***------------------------------------------------------
*** Folding Heigth
  if LS_FOLHE-FOLHE is not initial.
*** Folding Height is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '879' ).
  else.
*** Folding Height is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '880' ).
  endif.

***------------------------------------------------------------------
*** Check Print Inside
  case ME->CHECK_PRINT_I( ).
    when 0.
***   Print Inside is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '625' ).
    when 1.
***   Print Inside is not fully maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '626' ).
    when 2.
***   Print Type for Print Inside is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '627' ).
  endcase.

*** Check Print Outside
  case ME->CHECK_PRINT_O( ).
    when 0.
***   Print Outside is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '628' ).
    when 1.
***   Print Outside is not fully maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '629' ).
    when 2.
***   Print Type for Print Outside is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '630' ).
  endcase.

endmethod.
method GET_TPRST.

  RF_TPRST = ME->F_TPRST.

endmethod.
method GET_TRFPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRFPR ).
  move LS_PARAM-ATWRT to RF_TRFPR.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method GET_WNEPP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPP ).
  move LS_PARAM-ATFLV to RS_WNEPP-WNEPP.
  move LS_PARAM-UNIT  to RS_WNEPP-WNEPP_UOM.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_LOAD_PSCALE.
      ME->HANDLE_LOAD_PSCALE( ).

    when C_IEVNT_I_INIT_CUST_MATNR.
      ME->HANDLE_INIT_CUST_MATNR( ).

    when C_IEVNT_I_INIT_PURCH.
      ME->HANDLE_INIT_PURCH( ).
    when C_IEVNT_I_INIT_PRICE.
      ME->HANDLE_INIT_PRICE( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR       type        MATNR,
         LF_WERKS       type        WERKS_D,
         LF_DCONF       type        DATS.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.
  move ME->GET_DCONF( )            to LF_DCONF.

  if ME->R_CUST_P0_COMP_SFG          is bound    and
     ME->R_CUST_P0_COMP_SFG->F_MATNR eq LF_MATNR and
     ME->R_CUST_P0_COMP_SFG->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_P0_COMP_SFG.

*** Load the Customizing
  ME->R_CUST_P0_COMP_SFG = ZCL_VCXI_P0SS_CUST_COMP_SFG=>GET_INSTANCE_P0_COMP_SFG( IF_MATNR = LF_MATNR
                                                                                  IF_WERKS = LF_WERKS
                                                                                  IF_DATE  = LF_DCONF ).

  check ME->R_CUST_P0_COMP_SFG is bound.

*** Set Data
  ME->SET_COMP_SFG_BY_CUST( ).
  ME->SET_PRINT_BY_CUST( ).

endmethod.
  method HANDLE_INIT_PRICE.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Different behavior based on Procurement Option
    case ME->GET_PURCH( ).

***------------------------------------------------------------------------------------------------
***   Stock Items
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***     Free Price Scale
        loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                       IF_INUSE = ABAP_TRUE ) into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

***     Clear Vendor
        ME->SET_LIFNR( IF_LIFNR = SPACE
                       IF_SETBY = SPACE ).

***     Clear Trigger for PR
        ME->SET_TRFPR( IF_TRFPR = SPACE
                       IF_SETBY = SPACE ).

***------------------------------------------------------------------------------------------------
***   Direct Procurement
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
***     Free Price Scale
        loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                       IF_INUSE = ABAP_TRUE ) into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

***------------------------------------------------------------------------------------------------
***   Direct Procurement & Price
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.

    endcase.

  endmethod.
method HANDLE_INIT_PURCH.

  data: LF_MATNR type MATNR.

  move ME->GET_MATNR( ) to LF_MATNR.

*** Is Matrial a Dummy -> Set Purchase Flag!
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = LF_MATNR   ) eq ABAP_TRUE.
    ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCsS_PR_MS=>C_PURCH_DIRECT_PRICE ).
  else.
    ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCsS_PR_MS=>C_PURCH_STOCK ).
  endif.

endmethod.
method HANDLE_LOAD_PSCALE.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.
  data:  LT_ATTRI       type /VCXI/VKS_TT_ATTRI.

*** -------------------------------------------------------------------------------------------------
*** Init Product Style Type
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_TPRST.
  if SY-SUBRC = 0.
    ME->F_TPRST = LS_ATTRI-ATTVA.
  endif.

endmethod.
method INIT_MATNR_DUMMY.

*** Get Dummy Material
  ME->F_MATNR_DUMMY = ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE  = ME->R_GATE ).

endmethod.
method IS_DUMMY.

  data: LF_MATNR type MATNR.

  move ME->GET_MATNR( ) to LF_MATNR.

*** Is Matrial a Dummy -> Set Purchase Flag!
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = LF_MATNR   ) eq ABAP_TRUE.
    RF_RETURN = ABAP_TRUE.
  else.
    RF_RETURN = ABAP_FALSE.
  endif.

endmethod.
method IS_PRINT_CALCULATED.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get Specification SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC_SE.
  endtry.

  if LR_PR_SPEC_SE is bound.
    RF_CALCULATED = LR_PR_SPEC_SE->IS_PRINT_CALCULATED( ).
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Get Lamination Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_LAMI.
  endtry.

  if LR_PR_LAMI is bound.
    RF_CALCULATED = LR_PR_LAMI->IS_PRINT_CALCULATED( ).
    exit.
  endif.

endmethod.
method IS_SP_PRINT_ACTIVE.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definitions
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  check lines( LT_PRVDR_DEF ) is not initial.
  move ABAP_TRUE to RF_ACTIVE.

endmethod.
method SET_ABLAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).

  move IS_ABLAN-ABLAN                      to LS_PARAM-ATFLV.
  move IS_ABLAN-ABLAN_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAN_CHANGED ).
  endif.

endmethod.
method SET_BOXPA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).

  move IF_BOXPA to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_COMP_SFG_BY_CUST.

*** Get Sheet Procurement Info's for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_COMPP( IF_COMPP = ME->R_CUST_P0_COMP_SFG->F_COMPP ).
    ME->SET_PRSTY( IF_PRSTY = ME->R_CUST_P0_COMP_SFG->F_PRSTY ).
    ME->SET_PROLE( IS_PROLE = ME->R_CUST_P0_COMP_SFG->S_PROLE ).
    ME->SET_PROWI( IS_PROWI = ME->R_CUST_P0_COMP_SFG->S_PROWI ).
    ME->SET_PROHE( IS_PROHE = ME->R_CUST_P0_COMP_SFG->S_PROHE ).
    ME->SET_FOLLE( IS_FOLLE = ME->R_CUST_P0_COMP_SFG->S_FOLLE ).
    ME->SET_FOLWI( IS_FOLWI = ME->R_CUST_P0_COMP_SFG->S_FOLWI ).
    ME->SET_FOLHE( IS_FOLHE = ME->R_CUST_P0_COMP_SFG->S_FOLHE ).
    ME->SET_ABLAN( IS_ABLAN = ME->R_CUST_P0_COMP_SFG->S_ABLAN ).
    ME->SET_WNEPP( IS_WNEPP = ME->R_CUST_P0_COMP_SFG->S_WNEPP ).
    ME->SET_CALIP( IS_CALIP = ME->R_CUST_P0_COMP_SFG->S_CALIP ).
  endif.

endmethod.
method SET_COMPP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPP ).

  move IF_COMPP           to LS_PARAM-ATWRT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_COMPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).

  move IF_COMPR           to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COMPR_CHANGED ).
  endif.

endmethod.
method SET_FLPRI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRI ).

  move IF_FLPRI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Clear also Print Type and Number of Colors if it is deaktivated
  if IF_FLPRI eq ABAP_FALSE.
    ME->SET_PRDEI( IF_PRDEI = ABAP_FALSE ).
    ME->SET_PRTYI( IF_PRTYI = SPACE
                   IF_SETBY = SPACE ).
    ME->SET_NOCOI( IF_SETBY = SPACE ).
  endif.

endmethod.
method SET_FLPRO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRO ).

  move IF_FLPRO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Clear also Print Type and Number of Colors if it is deaktivated
  if IF_FLPRO eq ABAP_FALSE.
    ME->SET_PRDEO( IF_PRDEO = ABAP_FALSE ).
    ME->SET_PRTYO( IF_PRTYO = SPACE
                   IF_SETBY = SPACE ).
    ME->SET_NOCOO( IF_SETBY = SPACE ).
  endif.

endmethod.
method SET_FOLHE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLHE ).

  if IS_FOLHE is supplied.
    move IS_FOLHE-FOLHE     to LS_PARAM-ATFLV.
    move IS_FOLHE-FOLHE_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_FOLLE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLLE ).

  if IS_FOLLE is supplied.
    move IS_FOLLE-FOLLE     to LS_PARAM-ATFLV.
    move IS_FOLLE-FOLLE_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_FOLWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOLWI ).

  if IS_FOLWI is supplied.
    move IS_FOLWI-FOLWI     to LS_PARAM-ATFLV.
    move IS_FOLWI-FOLWI_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOLDIM_CHANGED ).
  endif.

endmethod.
method SET_FPSMO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).

  move IF_FPSMO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPSMO_CHANGED ).
  endif.

endmethod.
method SET_LIFNR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIFNR_CHANGED ).
  endif.

endmethod.
method SET_MATNR.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_MATNR to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
  endif.

endmethod.
method SET_NOCOI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOI ).

    if IF_NOCOI is supplied.
      move IF_NOCOI to LS_PARAM-ATWRT.
    else.
      clear: LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = IF_NOCOI ).

  endif.

endmethod.
method SET_NOCOL.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_NOCOI( IF_NOCOI = IF_NOCOL
                     IF_SETBY = IF_SETBY ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_NOCOO( IF_NOCOO = IF_NOCOL
                     IF_SETBY = IF_SETBY ).
  endcase.

endmethod.
method SET_NOCOO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOO ).

    if IF_NOCOO is supplied.
      move IF_NOCOO to LS_PARAM-ATWRT.
    else.
      clear: LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = IF_NOCOO ).

  endif.

endmethod.
method SET_PPASS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).

  move IF_PPASS to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PPASS_CHANGED ).
  endif.

endmethod.
method SET_PRDEI.

  data: LF_PRTYP       type        ZVCXI_P0S_PRTYP,
        LF_NOCOL       type        ZVCXI_P0S_NOCOL.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

*** Get Current Printing Data
  LF_PRTYP = ME->GET_PRTYI( ).
  LF_NOCOL = ME->GET_NOCOI( ).

*** Get Instance of Print Node
  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                              IF_CREATE = IF_PRDEI ).
  check LR_GATE is bound.
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SP_PRINT.
  endtry.
  check LR_PR_SP_PRINT is bound.

*** Initialize Printing Data
  ME->SET_PRTYI( IF_PRTYI = SPACE
                 IF_SETBY = SPACE ).
  ME->SET_NOCOI( IF_SETBY = SPACE ).

  if IF_PRDEI eq ABAP_FALSE.
*** Delete Print
    LR_GATE->DO_FREE( ).
  endif.

*** Set Values again
  if LF_PRTYP is not initial.
    ME->SET_PRTYI( IF_PRTYI = LF_PRTYP ).
  endif.
  if LF_NOCOL is not initial.
    ME->SET_NOCOI( IF_NOCOI = LF_NOCOL ).
  endif.

endmethod.
method SET_PRDEO.

  data: LF_PRTYP       type        ZVCXI_P0S_PRTYP,
        LF_NOCOL       type        ZVCXI_P0S_NOCOL.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

*** Get Current Printing Data
  LF_PRTYP = ME->GET_PRTYO( ).
  LF_NOCOL = ME->GET_NOCOO( ).

*** Get Instance of Print Node
  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                              IF_CREATE = IF_PRDEO ).
  check LR_GATE is bound.
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SP_PRINT.
  endtry.
  check LR_PR_SP_PRINT is bound.
*** Initialize Printing Data
  ME->SET_PRTYO( IF_PRTYO = SPACE
                 IF_SETBY = SPACE ).
  ME->SET_NOCOO( IF_SETBY = SPACE ).

  if IF_PRDEO eq ABAP_FALSE.
*** Delete Print
    LR_GATE->DO_FREE( ).
  endif.

*** Set Values again
  if LF_PRTYP is not initial.
    ME->SET_PRTYO( IF_PRTYO = LF_PRTYP ).
  endif.
  if LF_NOCOL is not initial.
    ME->SET_NOCOO( IF_NOCOO = LF_NOCOL ).
  endif.

endmethod.
method SET_PRDET.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_PRDEI( IF_PRDEI = IF_PRDET ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_PRDEO( IF_PRDEO = IF_PRDET ).
  endcase.

endmethod.
method SET_PRINT_BY_CUST.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***--------------------------------------------------------------------------------------
*** Get Printing Info for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_FLPRI( IF_FLPRI = ME->R_CUST_P0_COMP_SFG->F_FLPRI ).
    ME->SET_PRTYI( IF_PRTYI = ME->R_CUST_P0_COMP_SFG->F_PRTYI ).
    ME->SET_NOCOI( IF_NOCOI = ME->R_CUST_P0_COMP_SFG->F_NOCOI ).
    ME->SET_FLPRO( IF_FLPRO = ME->R_CUST_P0_COMP_SFG->F_FLPRO ).
    ME->SET_PRTYO( IF_PRTYO = ME->R_CUST_P0_COMP_SFG->F_PRTYO ).
    ME->SET_NOCOO( IF_NOCOO = ME->R_CUST_P0_COMP_SFG->F_NOCOO ).

***--------------------------------------------------------------------------------------
*** Inside Print Details?
    if ME->R_CUST_P0_COMP_SFG->F_FPRFI     is not initial or
       ME->R_CUST_P0_COMP_SFG->F_PRCAI     is not initial or
       ME->R_CUST_P0_COMP_SFG->T_SP_INK_I  is not initial or
       ME->R_CUST_P0_COMP_SFG->T_SP_MARK_I is not initial.
      ME->SET_PRDEI( IF_PRDEI = ABAP_TRUE ).

***   Get Instance of Print Node Inside and Force Load Printing Details
      LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                                  IF_CREATE = SPACE ).
      if LR_GATE is bound.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SP_PRINT.
        endtry.
        if LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_COMP_SFG ).
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Outside Print Details?
    if ME->R_CUST_P0_COMP_SFG->F_FPRFO     is not initial or
       ME->R_CUST_P0_COMP_SFG->F_PRCAO     is not initial or
       ME->R_CUST_P0_COMP_SFG->T_SP_INK_O  is not initial or
       ME->R_CUST_P0_COMP_SFG->T_SP_MARK_O is not initial.
      ME->SET_PRDEO( IF_PRDEO = ABAP_TRUE ).

***   Get Instance of Print Node Outside and Force Load Printing Details
      LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                                  IF_CREATE = SPACE ).
      if LR_GATE is bound.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SP_PRINT.
        endtry.
        if LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_COMP_SFG ).
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Printing Details to no calculated
  else.
*** Get all Prints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          check LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->INIT_CALCULATED( ).

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SP_PRINT.
      endtry.
    endloop.
  endif.

endmethod.
method SET_PROHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

  move IS_PROHE-PROHE     to LS_PARAM-ATFLV.
  move IS_PROHE-PROHE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PROLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

  move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
  move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PROWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

  move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
  move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PRSTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).

  move IF_PRSTY to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PRTYI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYI ).

    move IF_PRTYI to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = IF_PRTYI ).

  endif.

endmethod.
method SET_PRTYO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYO ).

    move IF_PRTYO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM )..

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = IF_PRTYO ).

  endif.

endmethod.
method SET_PRTYP.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_PRTYI( IF_PRTYI = IF_PRTYP
                     IF_SETBY = IF_SETBY ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_PRTYO( IF_PRTYO = IF_PRTYP
                     IF_SETBY = IF_SETBY ).
  endcase.

endmethod.
method SET_PURCH.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

  move IF_PURCH to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
  endif.

endmethod.
method SET_TRFPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRFPR ).

  move IF_TRFPR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WNEPP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPP ).

  move IS_WNEPP-WNEPP                      to LS_PARAM-ATFLV.
  move IS_WNEPP-WNEPP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WNEPP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY,
                 LS_UOMCF             type        ZVCXI_XCS_S_UOMCF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***     Convert Price Scale Quantity if needed
        if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
          read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
          LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
          if LS_UOMCF-UOMCF is not initial.
            LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
          else.
            clear: LS_PSQTY-PSQTY.
          endif.
        endif.

***     Check conversion was successful
        check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***     Compare
        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PSCALE.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
  if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
    read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
    ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
    if LS_UOMCF-UOMCF is not initial.
      ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
    endif.
  endif.

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Changeable depending on Flag - Price Scale modified
  RF_CHANGEABLE = ME->GET_FPSMO( ).

endmethod.
