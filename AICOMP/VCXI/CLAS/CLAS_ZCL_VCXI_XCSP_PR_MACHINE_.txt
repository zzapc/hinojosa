
class ZCL_VCXI_XCSP_PR_MACHINE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_OPERATION
      abstract methods CONV_TO_MQTYI
                       CONV_TO_MQTYO .

  aliases C_IPRVT_XCS_OPERATION
    for ZIF_VCXI_XCSP_OPERATION~C_IPRVT_XCS_OPERATION .
  aliases R_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~R_PR_MFMGR .
  aliases CONV_TO_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI .
  aliases CONV_TO_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO .
  aliases GET_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYI .
  aliases GET_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYO .
  aliases GET_WERKS
    for ZIF_VCXI_XCSP_OPERATION~GET_WERKS .
  aliases SET_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~SET_MQTYO .

  constants C_IEVNT_O_IQCFT_CHANGED type /VCXI/VKSC_IEVNT value 'IQCFT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XCS_MACHINE type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSP_MACHINE' ##NO_TEXT.
  constants C_PARID_HELPN type /VCXI/VKS_PARID value 'ZVCXI_XC_HELPN' ##NO_TEXT.
  constants C_PARID_IQCFT type /VCXI/VKS_PARID value 'ZVCXI_XC_IQCFT' ##NO_TEXT.
  constants C_PARID_MSRSF type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRSF' ##NO_TEXT.
  constants C_PARID_MSRTI type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRTI' ##NO_TEXT.
  constants C_PARID_MSRWA_A type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_A' ##NO_TEXT.
  constants C_PARID_MSRWA_L type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_L' ##NO_TEXT.
  constants C_PARID_MSRWA_P type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_P' ##NO_TEXT.
  constants C_PARID_MSRWA_W type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_W' ##NO_TEXT.
  constants C_PARID_MSRWF type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWF' ##NO_TEXT.
  constants C_PARID_MSSTI type /VCXI/VKS_PARID value 'ZVCXI_XC_MSSTI' ##NO_TEXT.
  constants C_PARID_MSSWA_A type /VCXI/VKS_PARID value 'ZVCXI_XC_MSSWA_A' ##NO_TEXT.
  constants C_PARID_MSSWA_L type /VCXI/VKS_PARID value 'ZVCXI_XC_MSSWA_L' ##NO_TEXT.
  constants C_PARID_MSSWA_P type /VCXI/VKS_PARID value 'ZVCXI_XC_MSSWA_P' ##NO_TEXT.
  constants C_PARID_MSSWA_W type /VCXI/VKS_PARID value 'ZVCXI_XC_MSSWA_W' ##NO_TEXT.
  constants C_PARID_MSTTI type /VCXI/VKS_PARID value 'ZVCXI_XC_MSTTI' ##NO_TEXT.
  constants C_QTY_TYPE_IN type C value 'I' ##NO_TEXT.
  constants C_QTY_TYPE_OUT type C value 'O' ##NO_TEXT.
  data F_DIMNI type /VCXI/VSMC_DIMNI .
  data F_DIMNO type /VCXI/VSMC_DIMNO .
  data F_PARID_MSRWA type /VCXI/VKS_PARID .
  data F_PARID_MSSWA type /VCXI/VKS_PARID .
  data R_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH .

  methods ADD_ADDON
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ARBPL_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FEATURE
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE optional
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods GET_HELPN
    returning
      value(RF_HELPN) type ZVCXI_XCSP_HELPN
    raising
      /VCXI/CX_CKX .
  methods GET_IQCFT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods GET_MDS
    returning
      value(RS_MDS) type /VCXI/VSMC_S_MDS
    raising
      /VCXI/CX_CKX .
  methods GET_MSRS
    importing
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE optional
    returning
      value(RS_MSRS) type /VCXI/VSM_S_MSRS
    raising
      /VCXI/CX_CKX .
  methods GET_MSRSF
    returning
      value(RS_MSRSF) type /VCXI/VSM_S_MSRSF
    raising
      /VCXI/CX_CKX .
  methods GET_MSRTI
    returning
      value(RS_MSRTI) type /VCXI/VSM_S_MSRTI
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWA
    returning
      value(RS_MSRWA) type /VCXI/VSM_S_MSRWA
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWF
    returning
      value(RS_MSRWF) type /VCXI/VSM_S_MSRWF
    raising
      /VCXI/CX_CKX .
  methods GET_MSSTI
    returning
      value(RS_MSSTI) type /VCXI/VSM_S_MSSTI
    raising
      /VCXI/CX_CKX .
  methods GET_MSSWA
    returning
      value(RS_MSSWA) type /VCXI/VSM_S_MSSWA
    raising
      /VCXI/CX_CKX .
  methods GET_MSTTI
    returning
      value(RS_MSTTI) type /VCXI/VSM_S_MSTTI
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    exporting
      !ES_OPQTY_IN type /VCXI/VSMR_S_OPQTY
      !ES_OPQTY_OUT type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_POSSIBLE_ADDONS
    returning
      value(RT_ADDON_DESCR) type ZVCXI_XCSP_TT_ADDON_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS_ARBPL
    exporting
      !EF_WERKS type WERKS_D
      !EF_ARBPL type ARBPL
    raising
      /VCXI/CX_CKX .
  methods SET_IQCFT
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE optional
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS_ARBPL
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_I_INIT_PR_MFMGR .
  aliases C_IEVNT_O_MQTYI_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYI_CHANGED .
  aliases C_IEVNT_O_MQTYO_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYO_CHANGED .
  aliases C_IEVNT_O_MQTY_CONV_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTY_CONV_CHANGED .
  aliases C_PARID_MQTYI_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_A .
  aliases C_PARID_MQTYI_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_L .
  aliases C_PARID_MQTYI_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_P .
  aliases C_PARID_MQTYI_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_W .
  aliases C_PARID_MQTYO_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_A .
  aliases C_PARID_MQTYO_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_L .
  aliases C_PARID_MQTYO_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_P .
  aliases C_PARID_MQTYO_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_W .
  aliases F_PARID_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYI .
  aliases F_PARID_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYO .
  aliases HANDLE_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR .

  constants C_IEVNT_I_INIT_CMACH type /VCXI/VKSC_IEVNT value 'INIT_CMACH' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HELPN type /VCXI/VKSC_IEVNT value 'RECALC_HELPN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TIME type /VCXI/VKSC_IEVNT value 'RECALC_TIME' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_WASTE type /VCXI/VKSC_IEVNT value 'RECALC_WASTE' ##NO_TEXT.
  constants C_IEVNT_O_ARBPL_CHANGED type /VCXI/VKSC_IEVNT value 'ARBPL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MGRPV_CHANGED type /VCXI/VKSC_IEVNT value 'MGRPV_CHANGED' ##NO_TEXT.

  methods CALC_MQTYI
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRSF
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE
      !IT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRTI
    importing
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRWA
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRWF
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE
      !IT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CALC_MSSTI
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE
      !IT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods CALC_MSSWA
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE
      !IT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CALC_MSTTI
    importing
      !IT_GATE_ADDON type /VCXI/VKSR_TT_GATE
      !IT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods CHECK_WERKS_ARBPL
    returning
      value(RF_SUBRC) type SY-SUBRC
    raising
      /VCXI/CX_CKX .
  methods GET_LCVAL
    returning
      value(RF_LCVAL) type /VCXI/VSMC_LCVAL
    raising
      /VCXI/CX_CKX .
  methods GET_RRVAL
    returning
      value(RF_RRVAL) type /VCXI/VSMC_RRVAL
    raising
      /VCXI/CX_CKX .
  methods GET_RTE_SMVAL
    returning
      value(RT_RTE_SMVAL) type /VCXI/VSMR_TT_RTE_SMVAL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CMACH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HELPN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TIME
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WASTE
    raising
      /VCXI/CX_CKX .
  methods SET_HELPN
    importing
      !IF_HELPN type ZVCXI_XCSP_HELPN
    raising
      /VCXI/CX_CKX .
  methods SET_MQTYI
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
  methods SET_MSRSF
    importing
      !IS_MSRSF type /VCXI/VSM_S_MSRSF
    raising
      /VCXI/CX_CKX .
  methods SET_MSRTI
    importing
      !IS_MSRTI type /VCXI/VSM_S_MSRTI
    raising
      /VCXI/CX_CKX .
  methods SET_MSRWA
    importing
      !IS_MSRWA type /VCXI/VSM_S_MSRWA
    raising
      /VCXI/CX_CKX .
  methods SET_MSRWF
    importing
      !IS_MSRWF type /VCXI/VSM_S_MSRWF
    raising
      /VCXI/CX_CKX .
  methods SET_MSSTI
    importing
      !IS_MSSTI type /VCXI/VSM_S_MSSTI
    raising
      /VCXI/CX_CKX .
  methods SET_MSSWA
    importing
      !IS_MSSWA type /VCXI/VSM_S_MSSWA
    raising
      /VCXI/CX_CKX .
  methods SET_MSTTI
    importing
      !IS_MSTTI type /VCXI/VSM_S_MSTTI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MACHINE definition
class ZCL_VCXI_XCSP_PR_MACHINE implementation.
method ADD_ADDON.

*** Create Friend
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = IF_ID ).

*** Set In use if it's needed
  if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.

endmethod.
method CALC_MQTYI.

  data: LS_MQTYO type        ZVCXI_XCSP_S_MQTYO,
        LS_MSSWA type        /VCXI/VSM_S_MSSWA,
        LS_MSRWA type        /VCXI/VSM_S_MSRWA,
        LS_MQTYI type        ZVCXI_XCSP_S_MQTYI.


  check ME->R_RTE_CMACH is bound and
        ME->R_RTE_CMACH->R_MTYPE is bound.

*** Get initial Outbound Quantity
  move ME->GET_MQTYO( ) to LS_MQTYO.

***------------------------------------------------------------------------------------------------
*** Add Waste to Outbound as machine runs based on outbound
  if ME->R_RTE_CMACH->R_MTYPE->F_RCALC = /VCXI/CL_VSMC_MTYPE=>C_RCALC_O and
     LS_MQTYO-MQTYO is not initial.
*** Add Setup Waste
    move ME->GET_MSSWA( ) to LS_MSSWA.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYO-MQTYO
                                                        IF_CALCV_UOM_1 = LS_MQTYO-MQTYO_UOM
                                                        IF_CALCV_2     = LS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_2 = LS_MSSWA-MSSWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_MQTYO-MQTYO_UOM
                                              importing EF_CALCV       = LS_MQTYO-MQTYO
                                                        EF_CALCV_UOM   = LS_MQTYO-MQTYO_UOM ).

*** Add Run Waste
    move ME->GET_MSRWA( ) to LS_MSRWA.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYO-MQTYO
                                                        IF_CALCV_UOM_1 = LS_MQTYO-MQTYO_UOM
                                                        IF_CALCV_2     = LS_MSRWA-MSRWA
                                                        IF_CALCV_UOM_2 = LS_MSRWA-MSRWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_MQTYO-MQTYO_UOM
                                              importing EF_CALCV       = LS_MQTYO-MQTYO
                                                        EF_CALCV_UOM   = LS_MQTYO-MQTYO_UOM ).
  endif.


***------------------------------------------------------------------------------------------------
*** Convert
  LS_MQTYI = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = value #( QTY     = LS_MQTYO-MQTYO
                                                                          QTY_UOM = LS_MQTYO-MQTYO_UOM ) ).

***------------------------------------------------------------------------------------------------
*** Add Waste to Inbound as machine runs based on inbound
  if ME->R_RTE_CMACH->R_MTYPE->F_RCALC = /VCXI/CL_VSMC_MTYPE=>C_RCALC_I and
     LS_MQTYI-MQTYI is not initial.
*** Add Setup Waste
    move ME->GET_MSSWA( ) to LS_MSSWA.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYI-MQTYI
                                                        IF_CALCV_UOM_1 = LS_MQTYI-MQTYI_UOM
                                                        IF_CALCV_2     = LS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_2 = LS_MSSWA-MSSWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_MQTYI-MQTYI_UOM
                                              importing EF_CALCV       = LS_MQTYI-MQTYI
                                                        EF_CALCV_UOM   = LS_MQTYI-MQTYI_UOM ).

*** Add Run Waste
    move ME->GET_MSRWA( ) to LS_MSRWA.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYI-MQTYI
                                                        IF_CALCV_UOM_1 = LS_MQTYI-MQTYI_UOM
                                                        IF_CALCV_2     = LS_MSRWA-MSRWA
                                                        IF_CALCV_UOM_2 = LS_MSRWA-MSRWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_MQTYI-MQTYI_UOM
                                              importing EF_CALCV       = LS_MQTYI-MQTYI
                                                        EF_CALCV_UOM   = LS_MQTYI-MQTYI_UOM ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set new Machine Quantity
  ME->SET_MQTYI( IS_MQTYI = LS_MQTYI ).

endmethod.
method CALC_MSRSF.

  data:          LS_MSRSF         type        /VCXI/VSM_S_MSRSF,
                 LS_OPQTY         type        /VCXI/VSMR_S_OPQTY.
  data:          LT_ADDON_MSRSF   type        /VCXI/VSMR_TT_ADDON_MSRSF,
                 LT_RTE_SMVAL     type        /VCXI/VSMR_TT_RTE_SMVAL.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_ADDON         type ref to ZIF_VCXI_XCSP_ADDON,
                 LR_OVRCNT        type ref to ZIF_VCXI_XCSP_OVRCNT.
  field-symbols: <S_ADDON_MSRSF>  type        /VCXI/VSMR_S_ADDON_MSRSF.


  if ME->R_RTE_CMACH                is bound and
     ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.
***------------------------------------------------------------------------------------------------
*** Get Values by
*** Add-on
    loop at IT_GATE_ADDON into LR_GATE.
      try.
          clear LR_ADDON.
          move LR_GATE->R_CLSPR ?to LR_ADDON.
          check LR_ADDON is bound.

          LS_MSRSF = LR_ADDON->GET_MSRSF( ).

          append initial line to LT_ADDON_MSRSF assigning <S_ADDON_MSRSF>.
          move               LR_GATE->F_ID  to <S_ADDON_MSRSF>-IATYP.
          move-corresponding LS_MSRSF       to <S_ADDON_MSRSF>.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** Machine
    LT_RTE_SMVAL = ME->GET_RTE_SMVAL( ).

***------------------------------------------------------------------------------------------------
*** Get Operation Quantity In depending on Machine Customizing "Calc Run based on"
    ME->GET_OPQTY( importing ES_OPQTY_IN = LS_OPQTY ).

***------------------------------------------------------------------------------------------------
*** Get Rund Slowdown Factor
    clear LS_MSRSF.
    LS_MSRSF = ME->R_RTE_CMACH->GET_MSRSF( IS_OPQTY       = LS_OPQTY
                                           IT_RTE_SMVAL   = LT_RTE_SMVAL
                                           IT_ADDON_MSRSF = LT_ADDON_MSRSF ).
  endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Override Control
  loop at IT_GATE_OVRCNT into LR_GATE.
    try.
        clear LR_OVRCNT.
        move LR_GATE->R_CLSPR ?to LR_OVRCNT.
        check LR_OVRCNT is bound.

        LR_OVRCNT->ADJ_MSRSF( changing CS_MSRSF = LS_MSRSF ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set new Value
  ME->SET_MSRSF( IS_MSRSF = LS_MSRSF ).

endmethod.
  method CALC_MSRTI.

    data: LS_OPQTY type         /VCXI/VSMR_S_OPQTY,
          LS_MSRS  type         /VCXI/VSM_S_MSRS,
          LS_MSRTI type         /VCXI/VSM_S_MSRTI.


*** Get Machine Run Time
    move ME->GET_MSRTI( ) to LS_MSRTI.
    clear LS_MSRTI-MSRTI.

    if ME->R_RTE_CMACH          is bound and
       ME->R_RTE_CMACH->R_MTYPE is bound.
***------------------------------------------------------------------------------------------------
***   Get Operation Quantity In depending on Machine Customizing "Calc Run based on"
      ME->GET_OPQTY( importing ES_OPQTY_IN = LS_OPQTY ).

      if LS_OPQTY-OPQTY gt 0.
***     Get Machine Speed
        LS_MSRS = ME->GET_MSRS( IT_FEATURE = IT_FEATURE ).

        if LS_MSRS is not initial.
***       Convert to Unit
          if LS_MSRS-MSRSR_UOM ne LS_OPQTY-OPQTY_UOM.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_OPQTY-OPQTY_UOM
                                                               IF_UOM_IN    = LS_MSRS-MSRSR_UOM
                                                               IF_VALUE_IN  = LS_MSRS-MSRSR
                                                     importing EF_VALUE_OUT = LS_MSRS-MSRSR
                                                               EF_UOM_OUT   = LS_MSRS-MSRSR_UOM ).
          endif.
          if LS_MSRS-MSRST_UOM ne LS_MSRTI-MSRTI_UOM.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_MSRTI-MSRTI_UOM
                                                               IF_UOM_IN    = LS_MSRS-MSRST_UOM
                                                               IF_VALUE_IN  = LS_MSRS-MSRST
                                                     importing EF_VALUE_OUT = LS_MSRS-MSRST
                                                               EF_UOM_OUT   = LS_MSRS-MSRST_UOM ).
          endif.
        endif.

***------------------------------------------------------------------------------------------------
***     Calculate
        if LS_MSRS-MSRSR is not initial.
          LS_MSRTI-MSRTI     = LS_MSRS-MSRST * LS_OPQTY-OPQTY / LS_MSRS-MSRSR.
          LS_MSRTI-MSRTI_UOM = LS_MSRS-MSRST_UOM.
        endif.
      endif.

    endif.

***------------------------------------------------------------------------------------------------
*** Set Machine Run Time
    ME->SET_MSRTI( IS_MSRTI = LS_MSRTI ).

  endmethod.
  method CALC_MSRWA.

    data: LS_MSRWF type /VCXI/VSM_S_MSRWF,
          LS_MSRWA type /VCXI/VSM_S_MSRWA,
          LS_OPQTY type /VCXI/VSMR_S_OPQTY.
    data: LT_FEATURE type /VCXI/CKI_TT_FEATURE.


***----------------------------------------------------------------------------
    if ME->R_RTE_CMACH                is bound and
       ME->R_RTE_CMACH->R_MGRPV_SPEED is bound and
       ME->R_RTE_CMACH->R_MTYPE       is bound.

***   Get Run Waste Factor
      LS_MSRWF = ME->GET_MSRWF( ).

***   Get Operation Quantity Out depending on Machine Customizing "Calc Run based on"
      ME->GET_OPQTY( importing ES_OPQTY_OUT = LS_OPQTY ).

***   Get Feature for IQ.catalyst
      LT_FEATURE = ME->GET_FEATURE( ).

***   Get Run Waste
      LS_MSRWA = ME->R_RTE_CMACH->GET_MSRWA( IS_OPQTY   = LS_OPQTY
                                             IS_MSRWF   = LS_MSRWF
                                             IT_FEATURE = LT_FEATURE ).
    endif.

***----------------------------------------------------------------------------
*** Set Machine Run Waste
    ME->SET_MSRWA( IS_MSRWA = LS_MSRWA ).

  endmethod.
method CALC_MSRWF.

  data:          LS_MSRWF         type        /VCXI/VSM_S_MSRWF,
                 LS_OPQTY         type        /VCXI/VSMR_S_OPQTY.
  data:          LT_ADDON_MSRWF   type        /VCXI/VSMR_TT_ADDON_MSRWF,
                 LT_RTE_SMVAL     type        /VCXI/VSMR_TT_RTE_SMVAL.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_ADDON         type ref to ZIF_VCXI_XCSP_ADDON,
                 LR_OVRCNT        type ref to ZIF_VCXI_XCSP_OVRCNT.
  field-symbols: <S_ADDON_MSRWF>  type        /VCXI/VSMR_S_ADDON_MSRWF.


  if ME->R_RTE_CMACH                is bound and
     ME->R_RTE_CMACH->R_MGRPV_SPEED is bound and
     ME->R_RTE_CMACH->R_MTYPE       is bound.
***------------------------------------------------------------------------------------------------
*** Get Values by
*** Add-on
    loop at IT_GATE_ADDON into LR_GATE.
      try.
          clear LR_ADDON.
          move LR_GATE->R_CLSPR ?to LR_ADDON.
          check LR_ADDON is bound.

          LS_MSRWF = LR_ADDON->GET_MSRWF( ).

          append initial line to LT_ADDON_MSRWF assigning <S_ADDON_MSRWF>.
          move               LR_GATE->F_ID  to <S_ADDON_MSRWF>-IATYP.
          move-corresponding LS_MSRWF       to <S_ADDON_MSRWF>.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Machine
    LT_RTE_SMVAL = ME->GET_RTE_SMVAL( ).

***------------------------------------------------------------------------------------------------
*** Get Operation Quantity Out depending on Machine Customizing "Calc Run based on"
    ME->GET_OPQTY( importing ES_OPQTY_OUT = LS_OPQTY ).

***------------------------------------------------------------------------------------------------
*** Get Run Waste Factor
    clear LS_MSRWF.
    LS_MSRWF = ME->R_RTE_CMACH->GET_MSRWF( IS_OPQTY       = LS_OPQTY
                                           IT_RTE_SMVAL   = LT_RTE_SMVAL
                                           IT_ADDON_MSRWF = LT_ADDON_MSRWF ).
  endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Override Control
  loop at IT_GATE_OVRCNT into LR_GATE.
    try.
        clear LR_OVRCNT.
        move LR_GATE->R_CLSPR ?to LR_OVRCNT.
        check LR_OVRCNT is bound.

        LR_OVRCNT->ADJ_MSRWF( changing CS_MSRWF = LS_MSRWF ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set new Value
  ME->SET_MSRWF( IS_MSRWF = LS_MSRWF ).

endmethod.
  method CALC_MSSTI.

    data: LS_MSSTI type /VCXI/VSM_S_MSSTI.
    data: LT_ADDON_MSSTI type /VCXI/VSMR_TT_ADDON_MSSTI,
          LT_RTE_SMVAL   type /VCXI/VSMR_TT_RTE_SMVAL.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_OVRCNT type ref to ZIF_VCXI_XCSP_OVRCNT.


***------------------------------------------------------------------------------------------------
    if ME->R_RTE_CMACH                is bound and
       ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.

***   Calculated by Machine Routing Customizing
      if ME->R_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSST eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_MRC.
***     Get Values by Add-on
        loop at IT_GATE_ADDON into LR_GATE
                             where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_XCSP_ADDON.
          append value #( IATYP   = LR_GATE->F_ID
                          S_MSSTI = cast ZIF_VCXI_XCSP_ADDON( LR_GATE->R_CLSPR )->GET_MSSTI( )
                        ) to LT_ADDON_MSSTI.
        endloop.

***     Get Value by Machine
        LT_RTE_SMVAL = ME->GET_RTE_SMVAL( ).
      endif.

***   Get Setup Time
      clear LS_MSSTI.
      LS_MSSTI = ME->R_RTE_CMACH->GET_MSSTI( IT_RTE_SMVAL   = LT_RTE_SMVAL
                                             IT_ADDON_MSSTI = LT_ADDON_MSSTI
                                             IT_FEATURE     = IT_FEATURE ).
    endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Override Control
    loop at IT_GATE_OVRCNT into LR_GATE.
      try.
          clear LR_OVRCNT.
          move LR_GATE->R_CLSPR ?to LR_OVRCNT.
          check LR_OVRCNT is bound.

          LR_OVRCNT->ADJ_MSSTI( changing CS_MSSTI = LS_MSSTI ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set new Value
    ME->SET_MSSTI( IS_MSSTI = LS_MSSTI ).

  endmethod.
method CALC_MSSWA.

  data:          LF_DIMID         type        DIMID.
  data:          LS_MSSWA         type        /VCXI/VSM_S_MSSWA.
  data:          LT_ADDON_MSSWA   type        /VCXI/VSMR_TT_ADDON_MSSWA,
                 LT_RTE_SMVAL     type        /VCXI/VSMR_TT_RTE_SMVAL.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_ADDON         type ref to ZIF_VCXI_XCSP_ADDON,
                 LR_OVRCNT        type ref to ZIF_VCXI_XCSP_OVRCNT.
  field-symbols: <S_ADDON_MSSWA>  type        /VCXI/VSMR_S_ADDON_MSSWA.


  if ME->R_RTE_CMACH                is bound and
     ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.
***------------------------------------------------------------------------------------------------
*** Get Values by
*** Add-on
    loop at IT_GATE_ADDON into LR_GATE.
      try.
          clear LR_ADDON.
          move LR_GATE->R_CLSPR ?to LR_ADDON.
          check LR_ADDON is bound.

          LS_MSSWA = LR_ADDON->GET_MSSWA( ).

          append initial line to LT_ADDON_MSSWA assigning <S_ADDON_MSSWA>.
          move               LR_GATE->F_ID  to <S_ADDON_MSSWA>-IATYP.
          move-corresponding LS_MSSWA       to <S_ADDON_MSSWA>.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Machine
    LT_RTE_SMVAL = ME->GET_RTE_SMVAL( ).

***------------------------------------------------------------------------------------------------
*** Get Setup Waste
    clear LS_MSSWA.
    LS_MSSWA = ME->R_RTE_CMACH->GET_MSSWA( IT_RTE_SMVAL   = LT_RTE_SMVAL
                                           IT_ADDON_MSSWA = LT_ADDON_MSSWA ).
  endif.

***------------------------------------------------------------------------------------------------
*** In Case of PC adjust upwards
*** Get Dimensions of Unit
  if LS_MSSWA-MSSWA_UOM is not initial.
    call function 'DIMENSION_GET_FOR_UNIT'
      exporting
        UNIT           = LS_MSSWA-MSSWA_UOM
      importing
        DIMENSION      = LF_DIMID
      exceptions
        UNIT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LF_DIMID eq 'AAAADL'.
      LS_MSSWA-MSSWA = ceil( LS_MSSWA-MSSWA ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Override Control
  loop at IT_GATE_OVRCNT into LR_GATE.
    try.
        clear LR_OVRCNT.
        move LR_GATE->R_CLSPR ?to LR_OVRCNT.
        check LR_OVRCNT is bound.

        LR_OVRCNT->ADJ_MSSWA( changing CS_MSSWA = LS_MSSWA ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set new Value
  ME->SET_MSSWA( IS_MSSWA = LS_MSSWA ).

endmethod.
  method CALC_MSTTI.

    data: LS_MSTTI type /VCXI/VSM_S_MSTTI.
    data: LT_ADDON_MSTTI type /VCXI/VSMR_TT_ADDON_MSTTI,
          LT_RTE_SMVAL   type /VCXI/VSMR_TT_RTE_SMVAL.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_OVRCNT type ref to ZIF_VCXI_XCSP_OVRCNT.


***------------------------------------------------------------------------------------------------
    if ME->R_RTE_CMACH                is bound and
       ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.

***   Calculated by Machine Routing Customizing
      if ME->R_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSTT eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_MRC.
***     Get Values by Add-on
        loop at IT_GATE_ADDON into LR_GATE
                             where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_XCSP_ADDON.
          append value #( IATYP   = LR_GATE->F_ID
                          S_MSTTI = cast ZIF_VCXI_XCSP_ADDON( LR_GATE->R_CLSPR )->GET_MSTTI( )
                        ) to LT_ADDON_MSTTI.
        endloop.

***     Get Value by Machine
        LT_RTE_SMVAL = ME->GET_RTE_SMVAL( ).
      endif.

***   Get Setup Time
      clear LS_MSTTI.
      LS_MSTTI = ME->R_RTE_CMACH->GET_MSTTI( IT_RTE_SMVAL   = LT_RTE_SMVAL
                                             IT_ADDON_MSTTI = LT_ADDON_MSTTI
                                             IT_FEATURE     = IT_FEATURE ).
    endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Override Control
    loop at IT_GATE_OVRCNT into LR_GATE.
      try.
          clear LR_OVRCNT.
          move LR_GATE->R_CLSPR ?to LR_OVRCNT.
          check LR_OVRCNT is bound.

          LR_OVRCNT->ADJ_MSTTI( changing CS_MSTTI = LS_MSTTI ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set new Value
    ME->SET_MSTTI( IS_MSTTI = LS_MSTTI ).

  endmethod.
method CHECK_WERKS_ARBPL.

  data:  LF_WERKS type WERKS_D,
         LF_ARBPL type ARBPL,
         LF_COUNT type I.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS
                                 EF_ARBPL = LF_ARBPL ).

  if LF_WERKS is initial or
     LF_ARBPL is initial.
    move 1 to RF_SUBRC.
  else.
*** Check Plant and Work Center Combination
    select count(*)
           into LF_COUNT
           from CRHD
          where WERKS eq LF_WERKS
           and  ARBPL eq LF_ARBPL.
    if SY-SUBRC ne 0.
      move 2 to RF_SUBRC.
    else.
      move 0 to RF_SUBRC.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_ARBPL_DESCR.

  if ME->R_RTE_CMACH          is bound and
     ME->R_RTE_CMACH->R_ARBPL is bound.
    RF_DESCR = ME->R_RTE_CMACH->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
  endif.

endmethod.
method GET_DESCR.

  data:  LF_ID     type /VCXI/CKX_ID,
         LF_DESCR  type /VCXI/CKX_DESCR.

  if ME->R_RTE_CMACH          is bound and
     ME->R_RTE_CMACH->R_ARBPL is bound.
    LF_ID    = ME->R_RTE_CMACH->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
    LF_DESCR = ME->GET_ARBPL_DESCR( ).
    concatenate LF_ID '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
  method GET_FEATURE.

    data: LS_OPQTY_IN  type /VCXI/VSMR_S_OPQTY,
          LS_OPQTY_OUT type /VCXI/VSMR_S_OPQTY.
    data: LT_GATE_ADDON type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get stored IQ.catalyst Features
    RT_FEATURE = ME->GET_IQCFT( ).

***------------------------------------------------------------------------------------------------
*** Get Operation Quantity In and Out depending on Machine Customizing "Calc Run based on"
    ME->GET_OPQTY( importing ES_OPQTY_IN  = LS_OPQTY_IN
                             ES_OPQTY_OUT = LS_OPQTY_OUT ).

*** Modify Features for Operation Quantity
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'opQty'      FTVAL = LS_OPQTY_IN-OPQTY )
                                      changing  CT_FEATURE = RT_FEATURE ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'opQtyYield' FTVAL = LS_OPQTY_OUT-OPQTY )
                                      changing  CT_FEATURE = RT_FEATURE ).

***------------------------------------------------------------------------------------------------
*** Use provided Addons or get them
    if IT_GATE_ADDON is supplied.
      LT_GATE_ADDON = IT_GATE_ADDON.
    else.
      LT_GATE_ADDON = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSP_ADDON=>C_IPRVT_XCS_ADDON
                                             IF_INUSE  = ABAP_TRUE
                                             IF_SORTED = ABAP_TRUE ).
    endif.

*** Adjust Features by Add-on
    loop at LT_GATE_ADDON into LR_GATE
                         where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_XCSP_ADDON.
      cast ZIF_VCXI_XCSP_ADDON( LR_GATE->R_CLSPR )->ADJ_FEATURE( changing CT_FEATURE = RT_FEATURE ).
    endloop.

  endmethod.
method GET_HELPN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HELPN ).
  move LS_PARAM-ATFLV to RF_HELPN.

endmethod.
  method GET_IQCFT.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    try.
***     Get Parameter if supported by Machine
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IQCFT ).
      catch /VCXI/CX_CKX.
        return.
    endtry.


    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_FEATURE = RT_FEATURE.
    endif.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_LCVAL.

    try.
***     Get Attribute Value for Link Context Value
        RF_LCVAL = ME->R_GATE->GET_ATTRI( IF_ATTID = 'LCVAL' )-ATTVA.
      catch /VCXI/CX_CKX.
        clear RF_LCVAL.
    endtry.

  endmethod.
  method GET_MDS.

    if ME->R_RTE_CMACH                is bound and
       ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.
      RS_MDS = ME->R_RTE_CMACH->R_MGRPV_SPEED->S_MDS.
    endif.

  endmethod.
  method GET_MSRS.

    data: LS_OPQTY type /VCXI/VSMR_S_OPQTY,
          LS_MSRSF type /VCXI/VSM_S_MSRSF.
    data: LF_RRVAL type /VCXI/VSMC_RRVAL.
    data: LT_FEATURE     type /VCXI/CKI_TT_FEATURE,
          LT_GATE_OVRCNT type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_OVRCNT type ref to ZIF_VCXI_XCSP_OVRCNT.

    check ME->R_RTE_CMACH is bound.

***------------------------------------------------------------------------------------------------
*** Get Operation Quantity In depending on Machine Customizing "Calc Run based on"
    ME->GET_OPQTY( importing ES_OPQTY_IN = LS_OPQTY ).
    check LS_OPQTY-OPQTY_UOM is not initial.

***------------------------------------------------------------------------------------------------
*** Get Slowdown Factor
    LS_MSRSF = ME->GET_MSRSF( ).

*** Get Run Speed Rate Value for value-based Run Speed
    if ME->R_RTE_CMACH->R_MTYPE->F_MMSRR eq /VCXI/CL_VSMC_MTYPE=>C_MMSRR_VALUE.
      try.
          LF_RRVAL = ME->GET_RRVAL( ).
        catch /VCXI/CX_CKX.
          exit.
      endtry.
    endif.

*** IQ.catalyst Feature
    if IT_FEATURE is supplied.
      LT_FEATURE = IT_FEATURE.
    else.
      LT_FEATURE = ME->GET_FEATURE( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Get Machine Speed (incl. Slowdown Factor)
    RS_MSRS = ME->R_RTE_CMACH->GET_MSRS( IS_OPQTY   = LS_OPQTY
                                         IS_MSRSF   = LS_MSRSF
                                         IF_RRVAL   = LF_RRVAL
                                         IT_FEATURE = LT_FEATURE ).

***------------------------------------------------------------------------------------------------
*** Get all Override Control
    LT_GATE_OVRCNT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OVRCNT=>C_IPRVT_XCS_OVRCNT
                                            IF_INUSE = ABAP_TRUE ).

*** Adjust by Override Control
    loop at LT_GATE_OVRCNT into LR_GATE.
      try.
          clear LR_OVRCNT.
          move LR_GATE->R_CLSPR ?to LR_OVRCNT.
          check LR_OVRCNT is bound.

          LR_OVRCNT->ADJ_MSRS( changing CS_MSRS = RS_MSRS ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
method GET_MSRSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRSF ).
  move LS_PARAM-ATFLV to RS_MSRSF-MSRSF.
  move LS_PARAM-UNIT  to RS_MSRSF-MSRSF_UOM.

endmethod.
method GET_MSRTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRTI ).
  move LS_PARAM-ATFLV to RS_MSRTI-MSRTI.
  move LS_PARAM-UNIT  to RS_MSRTI-MSRTI_UOM.

endmethod.
method GET_MSRWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRWA ).
  move LS_PARAM-ATFLV to RS_MSRWA-MSRWA.
  move LS_PARAM-UNIT  to RS_MSRWA-MSRWA_UOM.

endmethod.
method GET_MSRWF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRWF ).
  move LS_PARAM-ATFLV to RS_MSRWF-MSRWF.
  move LS_PARAM-UNIT  to RS_MSRWF-MSRWF_UOM.

endmethod.
method GET_MSSTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSSTI ).
  move LS_PARAM-ATFLV to RS_MSSTI-MSSTI.
  move LS_PARAM-UNIT  to RS_MSSTI-MSSTI_UOM.

endmethod.
method GET_MSSWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSSWA ).
  move LS_PARAM-ATFLV to RS_MSSWA-MSSWA.
  move LS_PARAM-UNIT  to RS_MSSWA-MSSWA_UOM.

endmethod.
method GET_MSTTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSTTI ).
  move LS_PARAM-ATFLV to RS_MSTTI-MSTTI.
  move LS_PARAM-UNIT  to RS_MSTTI-MSTTI_UOM.

endmethod.
method GET_OPQTY.

  data: LS_MQTYI       type        ZVCXI_XCSP_S_MQTYI,
        LS_MQTYO       type        ZVCXI_XCSP_S_MQTYO,
        LS_MSSWA       type        /VCXI/VSM_S_MSSWA,
        LS_QTY         type        ZVCXI_XCSP_S_QTY.

  clear: ES_OPQTY_IN,
         ES_OPQTY_OUT.

  check ME->R_RTE_CMACH is bound and
        ME->R_RTE_CMACH->R_MTYPE is bound.

***---------------------------------------------------------------------
*** Get Machine Quantity In (without Setup Waste)
  if ES_OPQTY_IN is requested.
      LS_MQTYI           = ME->GET_MQTYI( ).
      LS_MSSWA           = ME->GET_MSSWA( ).
      LS_MQTYI-MQTYI     = LS_MQTYI-MQTYI - LS_MSSWA-MSSWA.

***   Convert it depending on Machine Customizing to Outbound or not
      if ME->R_RTE_CMACH->R_MTYPE->F_RCALC = /VCXI/CL_VSMC_MTYPE=>C_RCALC_O.
        LS_QTY-QTY     = LS_MQTYI-MQTYI.
        LS_QTY-QTY_UOM = LS_MQTYI-MQTYI_UOM.

        LS_MQTYO = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO( IS_QTY = LS_QTY ).
        ES_OPQTY_IN-OPQTY     = LS_MQTYO-MQTYO.
        ES_OPQTY_IN-OPQTY_UOM = LS_MQTYO-MQTYO_UOM.
      else.
        ES_OPQTY_IN-OPQTY     = LS_MQTYI-MQTYI.
        ES_OPQTY_IN-OPQTY_UOM = LS_MQTYI-MQTYI_UOM.
      endif.

*** Round PC up
    if ES_OPQTY_IN-OPQTY_UOM eq 'ST'.
      ES_OPQTY_IN-OPQTY = ceil( ES_OPQTY_IN-OPQTY ).
    endif.
  endif.

***---------------------------------------------------------------------
*** Get Machine Quantity Out
  if ES_OPQTY_OUT is requested.
    LS_MQTYO = ME->GET_MQTYO( ).

*** Convert it depending on Machine Customizing to Outbound or not
    if ME->R_RTE_CMACH->R_MTYPE->F_RCALC = /VCXI/CL_VSMC_MTYPE=>C_RCALC_I.
      LS_QTY-QTY     = LS_MQTYO-MQTYO.
      LS_QTY-QTY_UOM = LS_MQTYO-MQTYO_UOM.

      LS_MQTYI = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY ).
      ES_OPQTY_OUT-OPQTY     = LS_MQTYI-MQTYI.
      ES_OPQTY_OUT-OPQTY_UOM = LS_MQTYI-MQTYI_UOM.
    else.
      ES_OPQTY_OUT-OPQTY     = LS_MQTYO-MQTYO.
      ES_OPQTY_OUT-OPQTY_UOM = LS_MQTYO-MQTYO_UOM.
    endif.

*** Round PC up
    if ES_OPQTY_OUT-OPQTY_UOM eq 'ST'.
      ES_OPQTY_OUT-OPQTY = ceil( ES_OPQTY_OUT-OPQTY ).
    endif.
  endif.

endmethod.
method GET_POSSIBLE_ADDONS.

  data:  LF_IATYP       type        /VCXI/VSMC_IATYP.
  data:  LS_PRVDR_DEF   type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_ATYPE       type        /VCXI/CKX_TT_OBJECT,
         LT_PRVDR_DEF   type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

  field-symbols: <S_ADDON_DESCR> type ZVCXI_XCSP_S_ADDON_DESCR.

***----------------------------------------------------------------------------
*** Get possible Add-on Types (used Add-on Types of Machine Group Version)
  if ME->R_RTE_CMACH                is bound and
     ME->R_RTE_CMACH->R_MGRPV_SPEED is bound.
    LT_ATYPE = ME->R_RTE_CMACH->R_MGRPV_SPEED->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).
  endif.

*** Get possible Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZIF_VCXI_XCSP_ADDON=>C_IPRVT_XCS_ADDON ).

***----------------------------------------------------------------------------
*** Get Add-ons that are possible and Description
  loop at LT_ATYPE into LR_OBJECT.

*** Get ID of Add-on Type
    move LR_OBJECT->GET_ID( )    to LF_IATYP.

    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_IATYP.
    check SY-SUBRC eq 0.

    append initial line to RT_ADDON_DESCR assigning <S_ADDON_DESCR>.
    move LS_PRVDR_DEF-ID    to <S_ADDON_DESCR>-ADDON_ID.
    move LS_PRVDR_DEF-DESCR to <S_ADDON_DESCR>-DESCR.

  endloop.

endmethod.
method GET_RRVAL.
endmethod.
method GET_RTE_SMVAL.
endmethod.
method GET_STATUS.

  data: LS_MSRS type /VCXI/VSM_S_MSRS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  if ME->CHECK_WERKS_ARBPL( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Machine Customizing is loaded
  if ME->R_RTE_CMACH is bound.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Machine Run Speed
  LS_MSRS = ME->GET_MSRS( ).

  if LS_MSRS-MSRSR     is initial or
     LS_MSRS-MSRSR_UOM is initial or
     LS_MSRS-MSRST     is initial or
     LS_MSRS-MSRST_UOM is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_MSRS type /VCXI/VSM_S_MSRS.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  case ME->CHECK_WERKS_ARBPL( ).
    when 0.
***   Plant and Work Center maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '001' ).
    when 1.
***   Plant and Work Center not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '002' ).
    when 2.
***   Maintained Plant and Work Center combination not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '003' ).
  endcase.

*** Check Machine Customizing is loaded
  if ME->R_RTE_CMACH is not bound.
***   Machine Customizing isn't loaded.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '006' ).
  endif.

*** Check Machine Run Speed
  LS_MSRS = ME->GET_MSRS( ).

  if LS_MSRS-MSRSR     is initial or
     LS_MSRS-MSRSR_UOM is initial or
     LS_MSRS-MSRST     is initial or
     LS_MSRS-MSRST_UOM is initial.
***  Machine Run Speed is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '007' ).
  endif.

endmethod.
method GET_WERKS_ARBPL.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY+0(4) to EF_WERKS.
  move LS_LEOKY-LEOKY+4(8) to EF_ARBPL.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_PR_MFMGR.
      ME->HANDLE_INIT_PR_MFMGR( ).

    when C_IEVNT_I_INIT_CMACH.
      ME->HANDLE_INIT_CMACH( ).

    when C_IEVNT_I_RECALC_WASTE.
      ME->HANDLE_RECALC_WASTE( ).

    when C_IEVNT_I_RECALC_TIME.
      ME->HANDLE_RECALC_TIME( ).

    when C_IEVNT_I_RECALC_HELPN.
      ME->HANDLE_RECALC_HELPN( ).
  endcase.

endmethod.
method HANDLE_INIT_CMACH.

  data: LF_WERKS type        WERKS_D,
        LF_ARBPL type        ARBPL,
        LF_GUID  type        /VCXI/CKX_GUID,
        LF_DCONF type        /VCXI/VKCR_DCONF.
  data: LR_MGRPV_SPEED_OLD type ref to /VCXI/CL_VSMC_MGRPV_SPEED,
        LR_MGRPV_SPEED_NEW type ref to /VCXI/CL_VSMC_MGRPV_SPEED,
        LR_ARBPL           type ref to /VCXI/CL_VSMC_ARBPL,
        LR_CX_CKX          type ref to /VCXI/CX_CKX.

  if ME->R_RTE_CMACH is bound.
    move ME->R_RTE_CMACH->R_MGRPV_SPEED to LR_MGRPV_SPEED_OLD.
  endif.

  clear ME->R_RTE_CMACH.

***--------------------------------------------------------------------------------------
*** Get Work Center Instance
  ME->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS
                                 EF_ARBPL = LF_ARBPL ).

  if LF_WERKS is not initial and
     LF_ARBPL is not initial.
    LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LF_WERKS
                                                 IF_ARBPL = LF_ARBPL ).
    LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endif.

*** Get Configuration Date
  ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

***--------------------------------------------------------------------------------------
*** Get Instance of Customizing Machine
  if LR_ARBPL is bound.
    try.
        ME->R_RTE_CMACH = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IF_DATE  = LF_DCONF
                                                                 IR_ARBPL = LR_ARBPL
                                                                 IF_LCVAL = ME->GET_LCVAL( ) ).
        move ME->R_RTE_CMACH->R_MGRPV_SPEED to LR_MGRPV_SPEED_NEW.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.
  endif.

***--------------------------------------------------------------------------------------
*** Check if Machine Group Inbound/Outbound Dimension fit to Machine
  if  ME->R_RTE_CMACH is bound.
    if ME->R_RTE_CMACH is bound and
       ME->R_RTE_CMACH->R_MTYPE is bound and
       ME->R_RTE_CMACH->R_MTYPE->F_DIMNI ne ME->F_DIMNI or
       ME->R_RTE_CMACH->R_MTYPE->F_DIMNO ne ME->F_DIMNO .

      if ME->R_RTE_CMACH->R_MTYPE->F_DIMNI ne ME->F_DIMNI.
***     Workcenter can't be selected. Inbound Dimension does not fit.
        ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '004' ).
      endif.

      if ME->R_RTE_CMACH->R_MTYPE->F_DIMNO ne ME->F_DIMNO.
***     Workcenter can't be selected. Outbound Dimension does not fit.
        ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '005' ).
      endif.

      clear ME->R_RTE_CMACH.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MGRPV_CHANGED ).
      exit.

    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Send Event
  if LR_MGRPV_SPEED_NEW ne LR_MGRPV_SPEED_OLD.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MGRPV_CHANGED ).
  endif.

endmethod.
method HANDLE_RECALC_HELPN.

  data:  LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data:  LF_HELPN       type        ZVCXI_XCSP_HELPN,
         LF_HELPN_TOTAL type        ZVCXI_XCSP_HELPN.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_HELPER   type ref to ZCL_VCXI_XCSP_PR_HELPER.

***------------------------------------------------------------------
*** Get all Helpers
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_HELPER=>C_IPRVT_XCS_HELPER
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_HELPER.
        check LR_PR_HELPER is bound.

        LF_HELPN = LR_PR_HELPER->GET_HELPN( ).
        add  LF_HELPN to LF_HELPN_TOTAL.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set new Number of Helpers
  ME->SET_HELPN( IF_HELPN = LF_HELPN_TOTAL ).

endmethod.
  method HANDLE_RECALC_TIME.

    data: LT_GATE_ADDON  type /VCXI/VKSR_TT_GATE,
          LT_GATE_OVRCNT type /VCXI/VKSR_TT_GATE,
          LT_FEATURE     type /VCXI/CKI_TT_FEATURE.


***------------------------------------------------------------------
*** Get all active Addons
    LT_GATE_ADDON = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSP_ADDON=>C_IPRVT_XCS_ADDON
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

*** Get all Override Control
    LT_GATE_OVRCNT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSP_OVRCNT=>C_IPRVT_XCS_OVRCNT
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).

*** Get Feature for IQ.catalyst
    LT_FEATURE = ME->GET_FEATURE( IT_GATE_ADDON = LT_GATE_ADDON ).

***------------------------------------------------------------------
*** Calcualte Setup Time, Run Slowdown Factor, Run Time and Teardown Time
    ME->CALC_MSSTI( IT_GATE_ADDON  = LT_GATE_ADDON
                    IT_GATE_OVRCNT = LT_GATE_OVRCNT
                    IT_FEATURE     = LT_FEATURE ).
    ME->CALC_MSRSF( IT_GATE_ADDON  = LT_GATE_ADDON
                    IT_GATE_OVRCNT = LT_GATE_OVRCNT ).
    ME->CALC_MSRTI( IT_FEATURE     = LT_FEATURE ).
    ME->CALC_MSTTI( IT_GATE_ADDON  = LT_GATE_ADDON
                    IT_GATE_OVRCNT = LT_GATE_OVRCNT
                    IT_FEATURE     = LT_FEATURE ).

  endmethod.
method HANDLE_RECALC_WASTE.

  data:  LT_GATE_ADDON            type        /VCXI/VKSR_TT_GATE,
         LT_GATE_OVRCNT           type        /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------
*** Get all Addons
  LT_GATE_ADDON = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_ADDON=>C_IPRVT_XCS_ADDON
                                         IF_INUSE = ABAP_TRUE ).

*** Get all Override Control
  LT_GATE_OVRCNT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OVRCNT=>C_IPRVT_XCS_OVRCNT
                                          IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------
*** Calculate Setup Waste, Run Waste Factor and Run Waste
  ME->CALC_MSSWA( IT_GATE_ADDON  = LT_GATE_ADDON
                  IT_GATE_OVRCNT = LT_GATE_OVRCNT ).

  ME->CALC_MSRWF( IT_GATE_ADDON  = LT_GATE_ADDON
                  IT_GATE_OVRCNT = LT_GATE_OVRCNT ).
  ME->CALC_MSRWA( ).

***------------------------------------------------------------------
*** Calculate Quantity In
  ME->CALC_MQTYI( ).


endmethod.
method SET_HELPN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HELPN ).

  check IF_HELPN ne LS_PARAM-ATFLV.

***--------------------------------------------------------------------------------------
  if IF_HELPN is not initial.
    move IF_HELPN                         to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

***--------------------------------------------------------------------------------------
*** Set Parameter
  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
  method SET_IQCFT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IQCFT ).

    if IT_FEATURE is supplied.
      call transformation ID
           source T_FEATURE = IT_FEATURE
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IQCFT_CHANGED ).
    endif.

  endmethod.
method SET_MQTYI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).

  move IS_MQTYI-MQTYI                   to LS_PARAM-ATFLV.
  move IS_MQTYI-MQTYI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYI_CHANGED ).
  endif.

endmethod.
method SET_MSRSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRSF ).

  move IS_MSRSF-MSRSF                   to LS_PARAM-ATFLV.
  move IS_MSRSF-MSRSF_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSRTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRTI ).

  move IS_MSRTI-MSRTI                   to LS_PARAM-ATFLV.
  move IS_MSRTI-MSRTI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSRWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRWA ).

  move IS_MSRWA-MSRWA                   to LS_PARAM-ATFLV.
  move IS_MSRWA-MSRWA_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSRWF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRWF ).

  move IS_MSRWF-MSRWF                   to LS_PARAM-ATFLV.
  move IS_MSRWF-MSRWF_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSSTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSSTI ).

  move IS_MSSTI-MSSTI                   to LS_PARAM-ATFLV.
  move IS_MSSTI-MSSTI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSSWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSSWA ).

  move IS_MSSWA-MSSWA                   to LS_PARAM-ATFLV.
  move IS_MSSWA-MSSWA_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSTTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSTTI ).

  move IS_MSTTI-MSTTI                   to LS_PARAM-ATFLV.
  move IS_MSTTI-MSTTI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WERKS_ARBPL.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_WERKS to LS_LEOKY-LEOKY+0(4).
  move IF_ARBPL to LS_LEOKY-LEOKY+4(8).
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ARBPL_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.
  if lines( LT_GATE ) gt 1.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  read table LT_GATE into LR_GATE index 1.
  move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get ID of active Cost Split
  move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
  check EF_ICSPA is not initial.

*** Get active Cost Splits
  move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
  move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).
  move LS_PARAM-ATFLV to RS_MQTYI-MQTYI.
  move LS_PARAM-UNIT  to RS_MQTYI-MQTYI_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).
  move LS_PARAM-ATFLV to RS_MQTYO-MQTYO.
  move LS_PARAM-UNIT  to RS_MQTYO-MQTYO_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_WERKS.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = RF_WERKS ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR.


  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get all Machine Quantity and Setup Waste
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: ME->R_PR_MFMGR.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_MFMGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_MFMGR.
    endtry.

  endif.

  check ME->R_PR_MFMGR is not bound.
*** Provider &1 is not available for &2.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
      IF_MSGTY = 'E'
      IF_MSGID = 'ZVCXI_XCS'
      IF_MSGNO = '010'
      IF_MSGV1 = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
      IF_MSGV2 = ME->R_GATE->F_ID ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~SET_MQTYO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).

  move IS_MQTYO-MQTYO                   to LS_PARAM-ATFLV.
  move IS_MQTYO-MQTYO_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYO_CHANGED ).
  endif.

endmethod.
