
class ZCL_VCXI_XCSUC_GRID_CPACK definition
  public
  inheriting from ZCL_VCXI_XCSUC_GRID
  create public .

public section.

  data T_CPACK type ZVCXI_XCSUC_TT_CPACK read-only .
  data T_CPACK_DESCR type ZVCXI_XCSUC_TT_CPACK_DESCR read-only .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT optional
      !IR_S_CONTAINER type ref to CL_GUI_CONTAINER optional
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_REQ_TR type UI_FUNC value 'REQ_TR'. "#EC NOTEXT

  methods HANDLE_REQ_TR_CPACK
    importing
      !IF_CPACK type ZVCXI_XCSU_CPACK
      !IF_KORRNR type TRKORR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_COPY_CPACK
    importing
      !IF_CPACK type ZVCXI_XCSU_CPACK
      !IF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE_CPACK
    importing
      !IF_CPACK type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods HANDLE_OPEN_DETAIL
    importing
      !IF_CHANGE type ABAP_BOOL default ABAP_FALSE
      !IF_CPACK type ZVCXI_XCSU_CPACK
    preferred parameter IF_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADD_CPACK
    raising
      /VCXI/CX_CKX .
  methods GET_CPACK
    returning
      value(RF_CPACK) type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  methods GET_CPACK_COPY_TO
    importing
      !IF_CPACK type ZVCXI_XCSU_CPACK
      !IF_DESCR type /VCXI/CKX_DESCR
    exporting
      !EF_CPACK type ZVCXI_XCSU_CPACK
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods CHECK_SELECTION
    importing
      !IF_DETAIL type ABAP_BOOL optional
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods REFRESH_CPACK
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods SET_EVENT
    redefinition .
private section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_CHANGE type UI_FUNC value 'CHANGE'. "#EC NOTEXT
  constants C_FUNC_COPY type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  constants C_FUNC_DISP type UI_FUNC value 'DISPLAY'. "#EC NOTEXT
endclass. "ZCL_VCXI_XCSUC_GRID_CPACK definition
class ZCL_VCXI_XCSUC_GRID_CPACK implementation.
method CHECK_SELECTION.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Selection is only valid if Cells are selected
  if   IF_DETAIL eq ABAP_FALSE  and
     ( lines( LT_CELL ) gt 0 or
       lines( LT_ROW )  gt 0    ).
    move ABAP_TRUE to RF_OKAY.
*** Selection is only valid if one Cell is selected
  elseif IF_DETAIL eq ABAP_TRUE and
       ( lines( LT_CELL ) eq 1 or
         lines( LT_ROW )  eq 1 ).
    move ABAP_TRUE to RF_OKAY.
*** Selection is not valid
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCSUC_S_CPACK_GRID'
                      IF_CONTAINER_NAME = '0100CC_CPACK_OV_GRID'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).
endmethod.
method GET_CPACK.

  data:          LF_RETURN    type                   ABAP_BOOL,
                 LF_EXIT      type                   ABAP_BOOL.
  data:          LT_SVAL      type standard table of SVAL.
  field-symbols: <S_FIELD>    type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCS_TD370'.
  <S_FIELD>-FIELDNAME = 'CPACK'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please Enter new Packaging Code'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'CPACK'.
          move <S_FIELD>-VALUE to RF_CPACK.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check RF_CPACK is not initial.

*** Check also there is no Packaging Code like the new one
    read table ME->T_CPACK with key CPACK = RF_CPACK transporting no fields.
    check SY-SUBRC ne 0.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

endmethod.
method GET_CPACK_COPY_TO.

  data:          LF_RETURN    type                   ABAP_BOOL,
                 LF_EXIT      type                   ABAP_BOOL.
  data:          LT_SVAL      type standard table of SVAL.
  field-symbols: <S_FIELD>    type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCS_TD370'.
  <S_FIELD>-FIELDNAME = 'CPACK'.
  <S_FIELD>-VALUE     = IF_CPACK.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCS_TD370T'.
  <S_FIELD>-FIELDNAME = 'DESCR'.
  <S_FIELD>-VALUE     = IF_DESCR.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please Enter new Packaging Code'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'CPACK'.
          move <S_FIELD>-VALUE to EF_CPACK.
        when 'DESCR'.
          move <S_FIELD>-VALUE to EF_DESCR.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check EF_CPACK is not initial and
          IF_CPACK ne EF_CPACK.

*** Check also there is no Packaging Code like the new one
    read table ME->T_CPACK with key CPACK = EF_CPACK transporting no fields.
    check SY-SUBRC ne 0.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
*** Set GUID's and Log Data to only technical Fields
      when 'CREBY' or 'CREAT' or 'CHABY' or 'CHAAT'.
        move ABAP_TRUE to <S_FCAT>-TECH.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CPACK_GRID  type          ZVCXI_XCSUC_S_CPACK_GRID,
                 LS_CPACK       type          ZVCXI_XCSUC_S_CPACK,
                 LS_CPACK_DESCR type          ZVCXI_XCSUC_S_CPACK_DESCR,
                 LS_LOG         type          /VCXI/CKX_S_LOG,
                 LS_LOG_EXT     type          /VCXI/CKX_S_LOG_EXT.
  data:          LT_SORT        type          ABAP_SORTORDER_TAB.
  field-symbols: <T_DATA>       type standard table,
                 <S_DATA>       type          any,
                 <S_SORT>       type          ABAP_SORTORDER.

  ME->REFRESH_CPACK( ).

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Packaging Code Packaging Materials Depending on Packaging Code - Shipping Unit Entry
  loop at ME->T_CPACK into LS_CPACK.

    clear: LS_CPACK_GRID.
    move-corresponding LS_CPACK to LS_CPACK_GRID.

*** Get Description
    read table ME->T_CPACK_DESCR into LS_CPACK_DESCR
    with key CPACK = LS_CPACK-CPACK
             LANGU = SY-LANGU.

    if SY-SUBRC = 0.
      move LS_CPACK_DESCR-DESCR to LS_CPACK_GRID-DESCR.
    endif.

*** Get Log Data
    move-corresponding LS_CPACK   to LS_LOG.
    LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
    move-corresponding LS_LOG_EXT to LS_CPACK_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CPACK_GRID to <S_DATA>.
  endloop.

***------------------------------------------------------------------------------------------------
*** Dynamic Sort
  append initial line to LT_SORT assigning <S_SORT>.
  move 'CPACK'   to <S_SORT>-NAME.

  sort <T_DATA> by (LT_SORT).

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_ADD_CPACK.

  data:          LF_CPACK            type               ZVCXI_XCSU_CPACK.

*** Get Packaging Code
  LF_CPACK = ME->GET_CPACK( ).
  check LF_CPACK is not initial.

*** Start UI
  ZCL_VCXI_XCSUC_UI_CPACK=>START_UI( IF_CPACK  = LF_CPACK
                                     IF_CHANGE = ABAP_TRUE ).

endmethod.
method HANDLE_COPY_CPACK.

  data: LF_CPACK  type        ZVCXI_XCSU_CPACK,
        LF_DESCR  type        /VCXI/CKX_DESCR,
        LF_GUID   type        /VCXI/CKX_GUID.
  data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
        LR_CPACK  type ref to ZCL_VCXI_XCSUC_CPACK.

  check IF_CPACK is not initial.

*** Ask for new one
  ME->GET_CPACK_COPY_TO( exporting IF_CPACK = IF_CPACK
                                   IF_DESCR = IF_DESCR
                         importing EF_CPACK = LF_CPACK
                                   EF_DESCR = LF_DESCR ).

  check LF_CPACK is not initial.

  clear: LF_GUID.
  move IF_CPACK to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.

*** Do Locking
  LR_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Do Copy
  LR_CPACK->COPY( IF_CPACK = LF_CPACK
                  IF_DESCR = LF_DESCR ).

*** Do Free old one
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_FREE ).

endmethod.
method HANDLE_DELETE_CPACK.

  data: LF_GUID     type        /VCXI/CKX_GUID,
        LF_QUESTION type        CHAR128,
        LF_ANSWER   type        C,
        LF_REQ_TR   type        ABAP_BOOL.
  data: LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_CPACK    type ref to ZCL_VCXI_XCSUC_CPACK.

  check IF_CPACK is not initial.

  concatenate 'Do you really wanna delete Packaging Code:'(Q02) IF_CPACK into LF_QUESTION
  separated by SPACE.

  call function 'POPUP_TO_CONFIRM'
    exporting
      TITLEBAR       = 'Delete selected Packaging Code'(Q01)
      TEXT_QUESTION  = LF_QUESTION
      TEXT_BUTTON_1  = 'Yes'(Q03)
      TEXT_BUTTON_2  = 'Yes & Transport'(Q04)
      DEFAULT_BUTTON = '1'
    importing
      ANSWER         = LF_ANSWER
    exceptions
      TEXT_NOT_FOUND = 1
      others         = 2.
  if SY-SUBRC ne 0 or LF_ANSWER eq 'A'.
    exit.
  elseif LF_ANSWER eq '2'.
    move ABAP_TRUE to LF_REQ_TR.
  endif.


  clear: LF_GUID.
  move IF_CPACK to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.
*** Do Locking
  LR_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Request Transport if needed
  if LF_REQ_TR eq ABAP_TRUE.
    LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_REQ_TR ).
  endif.

*** Do Deletion
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_DELETE ).

*** Do Save
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_SAVE ).

*** Do Free
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_FREE ).

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_CELL             type                   LVC_S_CELL,
                 LS_ROW              type                   LVC_S_ROW,
                 LS_CPACK            type                   ZVCXI_XCSUC_S_CPACK_VIS.
  data:          LT_CELL             type                   LVC_T_CELL,
                 LT_ROW              type                   LVC_T_ROW,
                 LT_CPACK            type standard table of ZVCXI_XCSUC_S_CPACK_VIS.
  data:          LR_CX_CKX           type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard          table,
                 <S_CPACK>           type                   ZVCXI_XCSUC_S_CPACK_VIS,
                 <S_DATA>            type                   any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Packaging Material Assignment
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK assigning <S_CPACK>.
        move-corresponding <S_DATA> to <S_CPACK>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK assigning <S_CPACK>.
        move-corresponding <S_DATA> to <S_CPACK>.
      endloop.

      check lines( LT_CPACK ) eq 1.

      read table LT_CPACK into LS_CPACK index 1.
      ME->HANDLE_OPEN_DETAIL( IF_CPACK  = LS_CPACK-CPACK ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_OPEN_DETAIL.

  data: LF_GUID   type        /VCXI/CKX_GUID.
  data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
        LR_CPACK  type ref to ZCL_VCXI_XCSUC_CPACK.

  check IF_CPACK is not initial.
  clear: LF_GUID.
  move IF_CPACK to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.
*** Do Locking
  if IF_CHANGE eq ABAP_TRUE.
    LR_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Start UI
  ZCL_VCXI_XCSUC_UI_CPACK=>START_UI( IF_CPACK = IF_CPACK ).

endmethod.
method HANDLE_REQ_TR_CPACK.

  data: LF_GUID   type        /VCXI/CKX_GUID.
  data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
        LR_CPACK  type ref to ZCL_VCXI_XCSUC_CPACK.

  check IF_CPACK is not initial.

  clear: LF_GUID.
  move IF_CPACK to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.

*** Do Locking
  LR_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Do Request Transport
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_REQ_TR ).
  LR_CPACK->ASSIGN_TRANSPORT( IF_KORRNR = IF_KORRNR ).

*** Do Save
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_SAVE ).

*** Do Free
  LR_CPACK->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_FREE ).


endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
***   Authority Check
      BREAK CHECK_AUTHORITY_KFISCHER.


***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                     to LS_TOOLBAR-FUNCTION.
      move 'Add'(001)                     to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW                to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                     to LS_TOOLBAR-FUNCTION.
      move 'Delete'(002)                  to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW                to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar elements Copy
      clear LS_TOOLBAR.
      move C_FUNC_COPY                    to LS_TOOLBAR-FUNCTION.
      move 'Copy'(003)                    to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SYSTEM_COPY               to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Display
      clear LS_TOOLBAR.
      move C_FUNC_DISP                    to LS_TOOLBAR-FUNCTION.
      move 'Display'(004)                 to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DISPLAY                   to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Change
      clear LS_TOOLBAR.
      move C_FUNC_CHANGE                  to LS_TOOLBAR-FUNCTION.
      move 'Change'(005)                  to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_CHANGE                    to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Transport
      clear LS_TOOLBAR.
      move C_FUNC_REQ_TR                  to LS_TOOLBAR-FUNCTION.
      move 'Req.Transport'(006)           to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_IMPORT_TRANSPORT_REQUEST  to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LF_KORRNR           type                   TRKORR.
  data:          LS_CELL             type                   LVC_S_CELL,
                 LS_ROW              type                   LVC_S_ROW,
                 LS_CPACK            type                   ZVCXI_XCSUC_S_CPACK_VIS.
  data:          LT_CELL             type                   LVC_T_CELL,
                 LT_ROW              type                   LVC_T_ROW,
                 LT_CPACK            type standard table of ZVCXI_XCSUC_S_CPACK_VIS.
  data:          LR_CX_CKX           type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard          table,
                 <S_CPACK>           type                   ZVCXI_XCSUC_S_CPACK_VIS,
                 <S_DATA>            type                   any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Packaging Material Assignment
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK assigning <S_CPACK>.
        move-corresponding <S_DATA> to <S_CPACK>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK assigning <S_CPACK>.
        move-corresponding <S_DATA> to <S_CPACK>.
      endloop.

*** ---------------------------------------------------------------------------
***   handle UserCommand
      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Packaging Code - and Start Edit
          ME->HANDLE_ADD_CPACK( ).

        when C_FUNC_DEL.
***       Delete Packaging Code
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '003'.
          endif.

***       Delete all Packaging Code
          loop at LT_CPACK into LS_CPACK.
            ME->HANDLE_DELETE_CPACK( IF_CPACK = LS_CPACK-CPACK ).
          endloop.

        when C_FUNC_COPY.
***     Copy Complete Packaging Code
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Copy.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '005'.
          endif.

***       Copy all Packaging Code
          loop at LT_CPACK into LS_CPACK.
            ME->HANDLE_COPY_CPACK( IF_CPACK = LS_CPACK-CPACK
                                   IF_DESCR = LS_CPACK-DESCR ).
          endloop.

        when C_FUNC_DISP.
***     Open Packaging Code in Display Mode
          if ME->CHECK_SELECTION( IF_DETAIL = ABAP_TRUE ) eq ABAP_FALSE.
***         Please Select only one Packaging Code.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '110'.
          endif.
          read table LT_CPACK into LS_CPACK index 1.
          ME->HANDLE_OPEN_DETAIL( IF_CPACK  = LS_CPACK-CPACK ).

        when C_FUNC_CHANGE.
***     Open Packaging Code in Display Mode
          if ME->CHECK_SELECTION( IF_DETAIL = ABAP_TRUE ) eq ABAP_FALSE.
***         Please Select only one Packaging Code.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '110'.
          endif.
          read table LT_CPACK into LS_CPACK index 1.
          ME->HANDLE_OPEN_DETAIL( IF_CPACK  = LS_CPACK-CPACK
                                  IF_CHANGE = ABAP_TRUE ).

        when C_FUNC_REQ_TR.
***     Add all Packaging Code to Transport
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Add to Transport.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '111'.
          endif.

***       Popup to pick Transport
          call function 'G_TRANS_NUMBER'
            exporting
              CATEGORY  = 'CUST'
            importing
              KORRNR    = LF_KORRNR
            exceptions
              NO_NUMBER = 1
              others    = 2.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

          loop at LT_CPACK into LS_CPACK.
            ME->HANDLE_REQ_TR_CPACK( IF_CPACK  = LS_CPACK-CPACK
                                     IF_KORRNR = LF_KORRNR ).
          endloop.

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method REFRESH_CPACK.

  free: ME->T_CPACK, ME->T_CPACK_DESCR.

  select *
         into corresponding fields of table ME->T_CPACK
         from ZVCXI_XCS_TD370.

  select *
         into corresponding fields of table ME->T_CPACK_DESCR
         from ZVCXI_XCS_TD370T.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for F4Help, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
