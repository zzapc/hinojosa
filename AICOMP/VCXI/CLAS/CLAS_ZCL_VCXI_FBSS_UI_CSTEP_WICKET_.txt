
class ZCL_VCXI_FBSS_UI_CSTEP_WICKET definition
  public
  inheriting from ZCL_VCXI_FBSS_UI_CSTEP
  create public .

public section.

  data S_CSTEP_WICKET_VIS type ZVCXI_FBSS_S_CSTEP_WICKET_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_UPDATE_VIS
    redefinition .
protected section.

  data R_PR_CSTEP_WICKET type ref to ZCL_VCXI_FBSS_PR_CSTEP_WICKET .

  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_CSTEP_WICKET definition
class ZCL_VCXI_FBSS_UI_CSTEP_WICKET implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_CSTEP_WICK_BIND'
      exporting
        IR_UI_CSTEP_WICKET = ME
      importing
        ES_DYNP            = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP_WICKET.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE,
          LF_TWICK  type        ZVCXI_FBS_TWICK.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

        ME->R_PR_CSTEP_WICKET->GET_TWICK( importing EF_TWICK = LF_TWICK ).

        loop at screen.
          check LF_LOCKED eq ABAP_TRUE or
                LF_INUSE eq ABAP_TRUE.

          case SCREEN-GROUP1.

            when 'WIK'.
              if LF_TWICK is initial.
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
              endif.
          endcase.

          case LF_TWICK.
            when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_WIRE.
              check SCREEN-GROUP2 eq 'SPO'.
              move 1 to SCREEN-INVISIBLE.
              move 0 to SCREEN-ACTIVE.

            when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_SPOOL.
              check SCREEN-GROUP2 eq 'WCK'.
              move 1 to SCREEN-INVISIBLE.
              move 0 to SCREEN-ACTIVE.
          endcase.

***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_WICKET_VIS type ZVCXI_FBSS_S_CSTEP_WICKET_VIS.


*** Call SUPER
    SUPER->DO_UPDATE_VIS( IS_VIS = IS_VIS ).

    check ME->R_PR_CSTEP_WICKET is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_CSTEP_WICKET_VIS.

***--------------------------------------------------------------------------------------
*** Wicket Wire
    if ME->S_CSTEP_WICKET_VIS-WIWIR ne LS_CSTEP_WICKET_VIS-WIWIR.
      ME->R_PR_CSTEP_WICKET->SET_WIWIR( IF_WIWIR = LS_CSTEP_WICKET_VIS-WIWIR
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Rubber
    if ME->S_CSTEP_WICKET_VIS-WIRUB ne LS_CSTEP_WICKET_VIS-WIRUB.
      ME->R_PR_CSTEP_WICKET->SET_WIRUB( IF_WIRUB = LS_CSTEP_WICKET_VIS-WIRUB
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Rubber/Stack
    if ME->S_CSTEP_WICKET_VIS-WIRST ne LS_CSTEP_WICKET_VIS-WIRST.
      ME->R_PR_CSTEP_WICKET->SET_WIRST( IF_WIRST = LS_CSTEP_WICKET_VIS-WIRST
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Paperboard
    if ME->S_CSTEP_WICKET_VIS-WIPBO ne LS_CSTEP_WICKET_VIS-WIPBO.
      ME->R_PR_CSTEP_WICKET->SET_WIPBO( IF_WIPBO = LS_CSTEP_WICKET_VIS-WIPBO
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Paperboard per Stack
    if ME->S_CSTEP_WICKET_VIS-WIPST ne LS_CSTEP_WICKET_VIS-WIPST.
      ME->R_PR_CSTEP_WICKET->SET_WIPST( IF_WIPST = LS_CSTEP_WICKET_VIS-WIPST
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Spool Pin
    if ME->S_CSTEP_WICKET_VIS-WISPI ne LS_CSTEP_WICKET_VIS-WISPI.
      ME->R_PR_CSTEP_WICKET->SET_WISPI( IF_WISPI = LS_CSTEP_WICKET_VIS-WISPI
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Spool Cap
    if ME->S_CSTEP_WICKET_VIS-WISCA ne LS_CSTEP_WICKET_VIS-WISCA.
      ME->R_PR_CSTEP_WICKET->SET_WISCA( IF_WISCA = LS_CSTEP_WICKET_VIS-WISCA
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Spool per Stack
    if ME->S_CSTEP_WICKET_VIS-WISST ne LS_CSTEP_WICKET_VIS-WISST.
      ME->R_PR_CSTEP_WICKET->SET_WISST( IF_WISST = LS_CSTEP_WICKET_VIS-WISST
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP_WICKET.

  endmethod.
  method INIT_VIS.

    SUPER->INIT_VIS( ).

    move ME->S_CSTEP_VIS to ME->S_CSTEP_WICKET_VIS-S_CSTEP_VIS.

    check ME->R_PR_CSTEP_WICKET is bound.

*** Wicket Type
    ME->R_PR_CSTEP_WICKET->GET_TWICK( importing EF_TWICK = ME->S_CSTEP_WICKET_VIS-TWICK ).

*** Wicket Lip
    ME->R_PR_CSTEP_WICKET->GET_WILIP( importing ES_WILIP = ME->S_CSTEP_WICKET_VIS-S_WILIP ).

*** Hole Diameter
    ME->R_PR_CSTEP_WICKET->GET_WIHDI( importing ES_WIHDI = ME->S_CSTEP_WICKET_VIS-S_WIHDI ).

*** Hole Space
    ME->R_PR_CSTEP_WICKET->GET_WIHSP( importing ES_WIHSP = ME->S_CSTEP_WICKET_VIS-S_WIHSP ).

*** Bag/Stack
    ME->R_PR_CSTEP_WICKET->GET_WIBST( importing EF_WIBST = ME->S_CSTEP_WICKET_VIS-WIBST ).

*** Wicket Wire
    ME->R_PR_CSTEP_WICKET->GET_WIWIR( importing EF_WIWIR = ME->S_CSTEP_WICKET_VIS-WIWIR ).

*** Rubber
    ME->R_PR_CSTEP_WICKET->GET_WIRUB( importing EF_WIRUB = ME->S_CSTEP_WICKET_VIS-WIRUB ).

*** Rubber/Stack
    ME->R_PR_CSTEP_WICKET->GET_WIRST( importing EF_WIRST = ME->S_CSTEP_WICKET_VIS-WIRST ).

*** Paperboard
    ME->R_PR_CSTEP_WICKET->GET_WIPBO( importing EF_WIPBO = ME->S_CSTEP_WICKET_VIS-WIPBO ).

*** Paperboard per Stack
    ME->R_PR_CSTEP_WICKET->GET_WIPST( importing EF_WIPST = ME->S_CSTEP_WICKET_VIS-WIPST ).

*** Spool Pin
    ME->R_PR_CSTEP_WICKET->GET_WISPI( importing EF_WISPI = ME->S_CSTEP_WICKET_VIS-WISPI ).

*** Spool Cap
    ME->R_PR_CSTEP_WICKET->GET_WISCA( importing EF_WISCA = ME->S_CSTEP_WICKET_VIS-WISCA ).

*** Spool per Stack
    ME->R_PR_CSTEP_WICKET->GET_WISST( importing EF_WISST = ME->S_CSTEP_WICKET_VIS-WISST ).

  endmethod.
