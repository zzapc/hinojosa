
class ZCL_VCXI_P0SR_PR_RTESPV_MCH definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  create public .

public section.

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
protected section.

  methods TURN_PCDIR
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_PCDIR_PREV type ZVCXI_P0SP_PCDIR
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_PCDIR
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_UNIT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods GET_MFMI
    redefinition .
  methods VALIDATE
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_PR_RTESPV_MCH definition
class ZCL_VCXI_P0SR_PR_RTESPV_MCH implementation.
method BUILD_RTE_PSTEP.

  data:  LT_BL_PSTEP        type        ZVCXI_XCSR_TT_BL_PSTEP.
  data:  LR_BL_PSTEP_ORG    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_NEW    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR_CURR      type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_PREV      type ref to ZIF_VCXI_P0SR_PCDIR.

***----------------------------------------------------------------------------
  if IR_RTE_PSEQ is not bound.
*** Copy BL PStep due to Sequence Specific Values
    loop at IT_BL_PSTEP into LR_BL_PSTEP_ORG.
      move LR_BL_PSTEP_ORG->COPY( ) to LR_BL_PSTEP_NEW.
      append LR_BL_PSTEP_NEW to LT_BL_PSTEP.
    endloop.

*** Create Routing Production Steps
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = LT_BL_PSTEP ).

*** Process Sequence Dependent BL PStep Settings
    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.

***   Get PC Direction
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Forward PC Direction
      if LR_PCDIR_PREV is bound and
         LR_PCDIR_CURR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
        LR_PCDIR_CURR->SET_PCDIR( IF_PCDIR = LR_PCDIR_PREV->F_PCDIR ).
      endif.

***   Keep Curr as Previous
      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.

***----------------------------------------------------------------------------
*** Cascading Method Call (Keep everything as is)
  else.
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = IT_BL_PSTEP
                                           IR_RTE_PSEQ = IR_RTE_PSEQ ).
  endif.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    type
      ZCL_VCXI_P0SR_BL_PRTE
    exporting
      IR_RTE_PRTE           = LR_RTE_PRTE
      IR_MFMI               = ME->R_MFMI
      IR_MFSI               = ME->R_MFSI
      IT_CSPLIT             = ME->T_CSPLIT
      IF_DATE               = ME->F_DATE
      IF_LIFNR_REQ          = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_P0SR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_MANU->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_P0SR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_OUTSO->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method GET_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Unitization
  ME->GET_BL_PSTEP_UNIT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

endmethod.
method GET_BL_PSTEP_UNIT.

  data:  LT_GATE_SHIPMGR   type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPUNIT  type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PACKMAT   type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR          type        /VCXI/VKSR_TT_GATE.
  data:  LR_BL_PSTEP_UNIT  type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT,
         LR_PR_SHIPMGR     type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
         LR_GATE_SHIPMGR   type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPUNIT  type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PACKMAT   type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPUNIT is not initial.


*** Filter Shipping Units
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                  changing  CT_GATE        = LT_GATE_SHIPUNIT ).

  check LT_GATE_SHIPUNIT is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials
  LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    clear: LT_PRVDR.

*** Get Shipping Manager as Provider.
    append LR_GATE_SHIPMGR to LT_PRVDR.

*** Get Shipping Unit as Provider.
    append LR_GATE_SHIPUNIT to LT_PRVDR.

*** Get Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_PACKMAT to LT_PRVDR.
      endif.
    endloop.

    create object LR_BL_PSTEP_UNIT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_UNIT to CT_BL_PSTEP.
    LR_BL_PSTEP_UNIT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR ).

*** Mark as Outsourced
    move ABAP_TRUE to LR_BL_PSTEP_UNIT->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.
    move '0.01'    to LR_BL_PSTEP_UNIT->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICE-PRICE.
    move '1000'    to LR_BL_PSTEP_UNIT->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.
    LR_BL_PSTEP_UNIT->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = 'A' ).
  endloop.

endmethod.
method GET_MFMI.

  data:          LS_MFMI_P      type          ZVCXI_P0SR_S_MFMI_P,
                 LS_HULEN       type          ZVCXI_P0S_S_HULEN,
                 LS_HUWID       type          ZVCXI_P0S_S_HUWID,
                 LS_HUHEI       type          ZVCXI_P0S_S_HUHEI,
                 LS_PRICE       type          ZVCXI_XCS_S_PRICE,
                 LS_PRICP       type          ZVCXI_XCS_S_PRICP,
                 LS_PSQTY       type          ZVCXI_XCS_S_PSQTY.
  data:          LT_GATE        type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE        type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_MCH type ref to   ZCL_VCXI_P0SS_PR_SPEC_MCH,
                 LR_PR_PSCALE   type ref to   ZCL_VCXI_XCS_PR_PSCALE.
  field-symbols: <T_MFMI>       type standard table,
                 <S_PSCALE>     type          ZVCXI_XCSR_S_PSCALE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_MCH=>C_IPRVT_P0_SPEC_MCH
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into LR_GATE index 1.

  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC_MCH.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC_MCH.
  endtry.
  check LR_PR_SPEC_MCH is bound.

*** Create Data Reference
  create data RR_MFMI type table of ZVCXI_P0SR_S_MFMI_P.
  assign RR_MFMI->* to <T_MFMI>.

  move ME->F_MFMI_MATNR to LS_MFMI_P-MATNR.
  move ABAP_TRUE        to LS_MFMI_P-PURCH.

  LS_HULEN = LR_PR_SPEC_MCH->GET_HULEN( ).
  move LS_HULEN-HULEN     to LS_MFMI_P-PCLEN.
  move LS_HULEN-HULEN_UOM to LS_MFMI_P-PCLEN_UOM.

  LS_HUWID = LR_PR_SPEC_MCH->GET_HUWID( ).
  move LS_HUWID-HUWID     to LS_MFMI_P-PCWID.
  move LS_HUWID-HUWID_UOM to LS_MFMI_P-PCWID_UOM.

  LS_HUHEI = LR_PR_SPEC_MCH->GET_HUHEI( ).
  move LS_HUHEI-HUHEI     to LS_MFMI_P-PCHEI.
  move LS_HUHEI-HUHEI_UOM to LS_MFMI_P-PCHEI_UOM.

*** BaseWeight will not be set because we ony have the weihgt including the Pallet

*** always 1 Up
  move 1                  to LS_MFMI_P-PCUPS.

  move 'A'                to LS_MFMI_P-PCDIR.

  move 'ZVCXI_P0_PRODUCT' to LS_MFMI_P-PCTYP.

*** Set always Consumption factor and per to 1
  move 1                  to LS_MFMI_P-MFICF.
  move 1                  to LS_MFMI_P-MFICP.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scale
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PSCALE.
    endtry.
    check LR_PR_PSCALE is bound.

    append initial line to LS_MFMI_P-T_PSCALE assigning <S_PSCALE>.

    move LR_GATE->F_ID to <S_PSCALE>-ISVCE.

    LS_PSQTY = LR_PR_PSCALE->GET_PSQTY( ).
    move LS_PSQTY-PSQTY     to <S_PSCALE>-PSQTY.
    move LS_PSQTY-PSQTY_UOM to <S_PSCALE>-PSQTY_UOM.

    LS_PRICE = LR_PR_PSCALE->GET_PRICE( ).
    move LS_PRICE-PRICE      to <S_PSCALE>-PRICE.
    move LS_PRICE-PRICE_CURR to <S_PSCALE>-PRICE_CURR.

    LS_PRICP = LR_PR_PSCALE->GET_PRICP( ).
    move LS_PRICP-PRICP     to <S_PSCALE>-PRICP.
    move LS_PRICP-PRICP_UOM to <S_PSCALE>-PRICP_UOM.

  endloop.

*** Append Material Flow Material to Data Reference
  append LS_MFMI_P to <T_MFMI>.

endmethod.
method TURN_PCDIR.

  data:  LF_MANDATORY      type        ABAP_BOOL,
         LF_IPSTP          type        /VCXI/VSMC_IPSTP,
         LF_ILTYP          type        /VCXI/VSMC_ILTYP.
  data:  LT_ILTYP_PSTEP    type        /VCXI/CKX_TT_ID,
         LT_ILTYP_ARBPL    type        /VCXI/CKX_TT_ID,
         LT_MSG            type        /VCXI/CKXM_TT_MSG,
         LT_RTE_PSTEP_ORG  type        /VCXI/VSMR_TT_RTE_PSTEP,
         LT_RTE_PSTEP_NEW  type        /VCXI/VSMR_TT_RTE_PSTEP.
  data:  LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR          type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_RTE_PSTEP_ORG  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_ORG   type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSEQ_NEW   type ref to /VCXI/CL_VSMR_RTE_PSEQ,
         LR_RTE_PSTEP_NEW  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_NEW   type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  check IR_RTE_ARBPL->R_ARBPL is bound and
        IR_RTE_ARBPL->T_MSG  is not initial.

*** Get Error Messages
  move IR_RTE_ARBPL->T_MSG  to LT_MSG.
  delete LT_MSG where MSGTY eq 'S'
                 or   MSGTY eq 'I'
                 or   MSGTY eq 'W'.
  check LT_MSG is not initial.

***----------------------------------------------------------------------------
*** Identify Limits that allow turning
  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
      move ABAP_TRUE to LF_MANDATORY.
      exit.
    endif.

    move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
    ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LF_IPSTP
                                              importing ET_ILTYP = LT_ILTYP_PSTEP ).
    append lines of LT_ILTYP_PSTEP to LT_ILTYP_ARBPL.
  endloop.

  check LF_MANDATORY ne ABAP_TRUE.

  sort LT_ILTYP_ARBPL.
  delete adjacent duplicates from LT_ILTYP_ARBPL.

***----------------------------------------------------------------------------
*** Ignore Messages that can be resolved by Turn
  loop at LT_ILTYP_ARBPL into LF_ILTYP.
    delete LT_MSG where MSGV2 eq LF_ILTYP.
  endloop.

*** Check no other Error Message exists...
  check LT_MSG is initial.

***----------------------------------------------------------------------------
*** Buffer to be able to turn it back
  move IR_RTE_ARBPL->T_RTE_PSTEP to LT_RTE_PSTEP_ORG.

  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_ORG.
*** Create new Production Steps
    if LR_RTE_PSTEP_ORG->R_RTE_PSEQ is bound.
      create object LR_RTE_PSEQ_NEW
        exporting
          IR_PSEQ     = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_PSEQ
          IR_RTE_PSEQ = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_RTE_PSEQ.
      move LR_RTE_PSEQ_NEW->R_RTE_PSTEP to LR_RTE_PSTEP_NEW.
    else.
      create object LR_RTE_PSTEP_NEW
        exporting
          IR_PSTEP = LR_RTE_PSTEP_ORG->R_PSTEP.
    endif.
    append LR_RTE_PSTEP_NEW to LT_RTE_PSTEP_NEW.

*** Copy Link Context Value
    move LR_RTE_PSTEP_ORG->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

*** Create Copy of BL Production Steps
    try.
        move LR_RTE_PSTEP_ORG->R_BLOBJ ?to LR_BL_PSTEP_ORG.
        if LR_BL_PSTEP_ORG is bound.
          LR_BL_PSTEP_NEW = LR_BL_PSTEP_ORG->COPY( ).
          move LR_BL_PSTEP_NEW to LR_RTE_PSTEP_NEW->R_BLOBJ.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

*** Turn
    try.
        move LR_RTE_PSTEP_NEW->R_BLOBJ ?to LR_PCDIR.
        if LR_PCDIR is bound.
          case LR_PCDIR->F_PCDIR.
            when 'A'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'B' ).
            when 'B'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'A' ).
          endcase.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Add new Limits
    LR_BL_PSTEP_NEW->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP_NEW ).
  endloop.

*** Set new Production Steps
  move LT_RTE_PSTEP_NEW to IR_RTE_ARBPL->T_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Check Limits on Work Center Level
  IR_RTE_ARBPL->CHECK_LIMITS( ).

*** Get Error Messages
  move IR_RTE_ARBPL->T_MSG  to LT_MSG.
  delete LT_MSG where MSGTY eq 'S'
                 or   MSGTY eq 'I'
                 or   MSGTY eq 'W'.
  if LT_MSG is not initial.
*** Return to Original Direction
    move LT_RTE_PSTEP_ORG to IR_RTE_ARBPL->T_RTE_PSTEP.
  else.
    move ABAP_TRUE to RF_RECHECK.
  endif.

endmethod.
method VALIDATE.

  data:  LF_RECHECK  type        ABAP_BOOL.
  data:  LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE.

  SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Process Routes
  loop at CT_BL_PRTE into LR_BL_PRTE.
    clear LF_RECHECK.

***------------------------------------------------------------------------------------------------
*** Continue only for invalid
    check LR_BL_PRTE->R_RTE_PRTE->F_RSTAT ne /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID.

*** Sheet Rotation
    if ME->VALIDATE_PCDIR( IR_BL_PRTE = LR_BL_PRTE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_RECHECK.
    endif.

*** Recheck
    if LF_RECHECK eq ABAP_TRUE.
      LR_BL_PRTE->CHECK( ).
      LR_BL_PRTE->INIT_RELPO( ).
    endif.
  endloop.

endmethod.
method VALIDATE_PCDIR.

  data:  LF_PCDIR      type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PRTE    type ref to ZCL_VCXI_P0SR_BL_PRTE,
         LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR      type ref to ZIF_VCXI_P0SR_PCDIR.

  try.
      move IR_BL_PRTE ?to LR_BL_PRTE.
      check LR_BL_PRTE is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Check Mandetory Directions missmatch will not be fixed automatically
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Update Direction
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR->F_PCDIR ne LF_PCDIR.
***     Set Direction
        LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR ).
        move ABAP_TRUE to RF_RECHECK.
      endif.
    endloop.
  endloop.

*** Check
  if RF_RECHECK eq ABAP_TRUE.
    IR_BL_PRTE->CHECK( ).
  endif.

***--------------------------------------------------------------------------------------
*** Automatic Turn of Route
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    if ME->TURN_PCDIR( IR_RTE_ARBPL  = LR_RTE_ARBPL
                       IF_PCDIR_PREV = LF_PCDIR ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_RECHECK.
    endif.

    if LR_BL_PRTE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_P0SR_BL_PRTE=>C_RSRCE_USER.
      try.
***       Get PC Direction of Work Center
          LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        catch /VCXI/CX_CKX.
          clear LF_PCDIR.
      endtry.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Adjust PC Direction of Material Flow In
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        exit.
      catch /VCXI/CX_CKX.
        clear LF_PCDIR.
    endtry.
  endloop.
  LR_BL_PRTE->SET_PCDIR_OF_MFI( IF_PCDIR = LF_PCDIR ).

endmethod.
