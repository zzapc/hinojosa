
class ZCL_VCXI_PXSS_GRID_FD_LAMI definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_FD_LAMI_GRID'
      !IF_CONTAINER_NAME type SCRFNAME default 'CC_GRID_FD_LAMI'
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_LAMI,
      R_GATE     type ref to /VCXI/CL_VKSR_GATE,
      R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL,
    end   of YS_LAMI .
  types:
    YT_LAMI type table of YS_LAMI with default key .

  data R_GATE_OUT type ref to /VCXI/CL_VKSR_GATE .
  data R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL .
  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DEL type UI_FUNC value 'DEL' ##NO_TEXT.

  methods SHLP_BOARD
    importing
      !IF_FNAME type LVC_FNAME
      !IF_VALUE type LVC_VALUE
      !IF_ROWID type I
      !IR_EVENT_DATA type ref to CL_ALV_EVENT_DATA
      !IF_DISPLAY type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SHLP_SRCIN
    importing
      !IF_FNAME type LVC_FNAME
      !IF_VALUE type LVC_VALUE
      !IF_ROWID type I
      !IR_EVENT_DATA type ref to CL_ALV_EVENT_DATA
      !IF_DISPLAY type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_BL_FDMDL_XSHT
    importing
      !IR_GATE_LAMI type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_XSHT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RR_BL_FDMDL_XSHT) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PSICO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_FD_LAMI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_LAMI
    returning
      value(RT_LAMI) type YT_LAMI
    raising
      /VCXI/CX_CKX .
  methods GET_FD_LAMI_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_MENU_ADD
    returning
      value(RR_MENU) type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods SET_FD_LAMI_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_F4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_FD_LAMI definition
class ZCL_VCXI_PXSS_GRID_FD_LAMI implementation.
  method CHANGE_STYLE_FD_LAMI.

    data: LS_FD_LAMI_VIS type ZVCXI_PXSS_S_FD_LAMI_VIS.


    free CT_STYL.

*** "Cast" generic structure to Vis Structure
    LS_FD_LAMI_VIS = corresponding #( IS_DATA ).

***--------------------------------------------------------------------------------------
*** Disable Material Description Override Flag if undefined
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_MAKTXXPR'
                                IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE            then ME->F_STYLE_DISABLED
                                                       when LS_FD_LAMI_VIS-FOVRR_MAKTXXPR eq ABAP_UNDEFINED then ME->F_STYLE_DISABLED
                                                                                                            else ME->F_STYLE_ENABLED )
                      changing  CT_STYL      = CT_STYL ).

*** Disable Material Description if generated
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MAKTXXPR'
                                IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE       then ME->F_STYLE_DISABLED
                                                       when LS_FD_LAMI_VIS-FOVRR_MAKTXXPR eq ABAP_TRUE then ME->F_STYLE_ENABLED
                                                                                                       else ME->F_STYLE_DISABLED )
                      changing  CT_STYL      = CT_STYL ).

***--------------------------------------------------------------------------------------
*** Corruagted related
    if LS_FD_LAMI_VIS-FDMDL eq ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT.
***   Material
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNRXPR'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_CORR                              "Input Source - Corrugation
                                                          or  LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_SFG  then ME->F_STYLE_DISABLED    "Input Source - SFG
                                                                                                                           else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).

***   Sales Board
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SABOA'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_CORR                              "Input Source - Corrugation
                                                          or  LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_SFG  then ME->F_STYLE_ENABLED     "Input Source - SFG
                                                         when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE                         then ME->F_STYLE_DISABLED    "Procurement - No Dummy
                                                                                                                           else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
***   Production Board
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRBOA'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_CORR                              "Input Source - Corrugation
                                                          or  LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_SFG  then ME->F_STYLE_ENABLED     "Input Source - SFG
                                                         when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE                         then ME->F_STYLE_DISABLED    "Procurement - No Dummy
                                                                                                                           else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
***   Flute = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FLUTE'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE then ME->F_STYLE_DISABLED     "No Dummy
                                                                                                   else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
***   Corrugation Plant = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'WERKS_CORR'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_SFG  then ME->F_STYLE_ENABLED     "Input Source - SFG
                                                                                                                           else ME->F_STYLE_DISABLED )
                        changing  CT_STYL      = CT_STYL ).
    else.
***   Sales Board = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SABOA'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Production Board = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRBOA'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Flute = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FLUTE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Corrugation Plant = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'WERKS_CORR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.


***--------------------------------------------------------------------------------------
*** Folding Carton related
    if LS_FD_LAMI_VIS-FDMDL eq ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT.
***   Material
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNRXPR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).

***   Paper Grade = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PAPGR'
                                  IF_STYLE     =  cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE then ME->F_STYLE_DISABLED    "No Dummy
                                                                                                    else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
***   Grammage = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'GRAMM'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE then ME->F_STYLE_DISABLED     "No Dummy
                                                                                                   else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
***   Reel Width = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'REWID'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE                          then ME->F_STYLE_DISABLED     "No Dummy
                                                         when LS_FD_LAMI_VIS-SRCIN ne ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_RCUT  then ME->F_STYLE_DISABLED     "Input Source - Reel Cutting
                                                                                                                            else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).
    else.
***   Paper Grade = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PAPGR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Grammage = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'GRAMM'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Reel Width = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'REWID'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.


*** Caliper = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CALIP'
                                IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR ne ABAP_TRUE then ME->F_STYLE_DISABLED     "No Dummy
                                                                                                 else ME->F_STYLE_ENABLED )
                      changing  CT_STYL      = CT_STYL ).

***--------------------------------------------------------------------------------------
    if ( LS_FD_LAMI_VIS-FDMDL eq ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT and
         LS_FD_LAMI_VIS-SRCIN eq ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_PROC ) or
       ( LS_FD_LAMI_VIS-FDMDL eq ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT ).
***   Procurement Option
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCHXPR'
                                  IF_STYLE     = cond #( when LS_FD_LAMI_VIS-DUMMYXPR eq ABAP_TRUE then ME->F_STYLE_DISABLED     "Dummy
                                                                                                   else ME->F_STYLE_ENABLED )
                        changing  CT_STYL      = CT_STYL ).

      case LS_FD_LAMI_VIS-S_FDI_MS_XPROC-PURCH.
        when ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE.
***       Set Vendor = Enable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNRXPR'
                                      IF_STYLE     = ME->F_STYLE_ENABLED
                            changing  CT_STYL      = CT_STYL ).
***       Price List Modified
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FPSMOXPR'
                                      IF_STYLE     = cond #( when LS_FD_LAMI_VIS-FPSMOXPR eq ABAP_UNDEFINED then ME->F_STYLE_DISABLED     "No Standard Price List
                                                                                                            else ME->F_STYLE_ENABLED )
                            changing  CT_STYL      = CT_STYL ).
***       Set Button Price Scale = Enable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                      IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON
                            changing  CT_STYL      = CT_STYL ).

        when ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT.
***       Set Vendor = Enable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNRXPR'
                                      IF_STYLE     = ME->F_STYLE_ENABLED
                            changing  CT_STYL      = CT_STYL ).
***       Price List Modified
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FPSMOXPR'
                                      IF_STYLE     = cond #( when LS_FD_LAMI_VIS-FPSMOXPR eq ABAP_UNDEFINED then ME->F_STYLE_DISABLED     "No Standard Price List
                                                                                                            else ME->F_STYLE_ENABLED )
                            changing  CT_STYL      = CT_STYL ).
***       Set Button Price Scale = Disabled
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).

        when ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_STOCK.
***       Set Vendor = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNRXPR'
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Price List Modified
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FPSMOXPR'
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Set Button Price Scale = Disabled
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
      endcase.
    else.
***   Procurement Option
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCHXPR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Vendor = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNRXPR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Price List Modified
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FPSMOXPR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Button Price Scale = Disabled
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LR_PR_XCONI   type ref to ZCL_VCXI_PXSS_PR_XCONI.


***------------------------------------------------------------------------------------------------
*** Call Super
    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Set Fast Data Model and FG/SFG Gate
    ME->R_BL_FDMDL = IR_BL_FDMDL.

***------------------------------------------------------------------------------------------------
*** Replace Part by related Connection Out if needed
    if IR_GATE_OUT->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XPART.
***   Get Connection In
      LR_PR_XCONI = cast ZCL_VCXI_PXSS_PR_XPART( IR_GATE_OUT->R_CLSPR )->GET_PRVDR_XCONI( ).
      if LR_PR_XCONI is bound.
***     Get connected Connection Out
        ME->R_GATE_OUT = LR_PR_XCONI->GET_CONNECTED_GATE( ).
      endif.
    else.
      ME->R_GATE_OUT = IR_GATE_OUT.
    endif.

  endmethod.
  method GET_BL_FDMDL_XSHT.

    data: LR_GATE_XSHT  type ref to /VCXI/CL_VKSR_GATE.


    check ME->R_BL_FDMDL is bound.

    if IR_GATE_LAMI is bound.
***   Get Lamination Sheet
      cast ZIF_VCXI_PXSS_LAMI( IR_GATE_LAMI->R_CLSPR )->GET_PRVDR_XSHT( importing ER_GATE = LR_GATE_XSHT ).
    endif.

    if IR_GATE_XSHT is bound.
      LR_GATE_XSHT = IR_GATE_XSHT.
    endif.
    check LR_GATE_XSHT is bound.

*** Identify Sub-Model
    loop at ME->R_BL_FDMDL->T_BL_FDMDL_SUB into data(LR_BL_FDMDL_SUB).
      if LINE_EXISTS( LR_BL_FDMDL_SUB->T_GATE_OUT[ TABLE_LINE = LR_GATE_XSHT ] ).
        RR_BL_FDMDL_XSHT = LR_BL_FDMDL_SUB.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_FD_LAMI_VIS.

    data: LS_FD_LAMI_VIS type ZVCXI_PXSS_S_FD_LAMI_VIS.
    data: LR_DATA          type ref to DATA,
          LR_GATE_XSHT     type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_FDMDL_XSHT type ref to ZCL_VCXI_PXSS_BL_FDMDL.
    field-symbols: <S_DATA> type ANY.


    check IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.

*** "Cast" generic structure to Vis Structure
    LS_FD_LAMI_VIS = corresponding #( CS_DATA ).

***--------------------------------------------------------------------------------------
*** Get Fast Data Integration Data for Lamination
    LR_DATA = cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->GET_DATA( ).
    assign LR_DATA->* to <S_DATA>.
    LS_FD_LAMI_VIS = corresponding #( base ( LS_FD_LAMI_VIS ) <S_DATA> ).

*** Get Fast Data Integration Data for Sheet
    data(LR_PR_XSHT) = cast ZIF_VCXI_PXSS_LAMI( IR_GATE->R_CLSPR )->GET_PRVDR_XSHT( importing ER_GATE = LR_GATE_XSHT ).
    if LR_PR_XSHT is bound.
      LR_DATA = LR_PR_XSHT->ZIF_VCXI_PXSS_FDI~GET_DATA( ).
      assign LR_DATA->* to <S_DATA>.
      LS_FD_LAMI_VIS = corresponding #( base ( LS_FD_LAMI_VIS ) <S_DATA> ).

***   Get Fast Data Model and receive Sheet Information
      LR_BL_FDMDL_XSHT = ME->GET_BL_FDMDL_XSHT( IR_GATE_XSHT = LR_GATE_XSHT ).
      if LR_BL_FDMDL_XSHT is bound.
        LS_FD_LAMI_VIS-FDMDL = LR_BL_FDMDL_XSHT->F_FDMDL.
        LS_FD_LAMI_VIS-IFDMV = LR_BL_FDMDL_XSHT->F_IFDMV.

        LR_DATA = LR_BL_FDMDL_XSHT->GET_XSHT( ).
        assign LR_DATA->* to <S_DATA>.
        LS_FD_LAMI_VIS = corresponding #( base ( LS_FD_LAMI_VIS ) <S_DATA> ).

***     Set Price Scale Icon based on Procurement Option
        if LS_FD_LAMI_VIS-S_FDI_MS_XPROC-PURCH eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE.
          LS_FD_LAMI_VIS-PSICO = ICON_PRICE.
        endif.

      endif.
    endif.

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    CS_DATA = corresponding #( base ( CS_DATA ) LS_FD_LAMI_VIS ).

  endmethod.
  method GET_FIELDCAT.

    types: begin of YS_BL_FDMDL,
             FDMDL    type ZVCXI_PXSS_FDMDL,
             IFDMV    type ZVCXI_PXSS_IFDMV,
             SRCIN    type ZVCXI_P1SS_SRCIN,
             PURCHXPR type ZVCXI_XCS_PURCH,
           end of YS_BL_FDMDL.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_COLPOS type I.
    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    data: LT_BL_FDMDL   type table of YS_BL_FDMDL.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <S_FCAT> type          LVC_S_FCAT.


***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    loop at <T_DATA> assigning <S_DATA>.
      LS_FD_LAMI_GRID = corresponding #( <S_DATA> ).
      collect value YS_BL_FDMDL( FDMDL    = LS_FD_LAMI_GRID-FDMDL
                                 IFDMV    = LS_FD_LAMI_GRID-IFDMV
                                 SRCIN    = LS_FD_LAMI_GRID-SRCIN
                                 PURCHXPR = LS_FD_LAMI_GRID-PURCHXPR
                               ) into LT_BL_FDMDL.
    endloop.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'R_GATE' or 'T_STYL' or 'FDMDL' or 'IFDMV'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'SRCIN'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.
          clear: <S_FCAT>-DOMNAME,  "make model independent
                 <S_FCAT>-REF_TABLE.

        when 'MATNRXPR' or 'MAKTXXPR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT
                                           SRCIN = ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_PROC ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_PROC ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_RCUT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.
        when 'FOVRR_MAKTXXPR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT
                                           SRCIN = ZCL_VCXI_P1SS_BL_FDMDL=>C_SRCIN_PROC ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_PROC ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_RCUT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            <S_FCAT>-CHECKBOX = ABAP_TRUE.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.

        when 'PAPGR' or 'GRAMM'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.
        when 'GRAMM_UOM'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          endif.

        when 'REWID'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_RCUT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.
        when 'REWID_UOM'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_RCUT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          endif.

        when 'SABOA' or 'PRBOA' or 'FLUTE' or 'WERKS_CORR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.
        when 'VALID_TBOAR'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'CALIP'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'PURCHXPR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT
                                           SRCIN = ZCL_VCXI_P2SS_BL_FDMDL=>C_SRCIN_PROC  ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ FDMDL = ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.

        when 'LIFNRXPR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ PURCHXPR = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ] ) and
             not LINE_EXISTS( LT_BL_FDMDL[ PURCHXPR = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.

        when 'FPSMOXPR'.
          if not LINE_EXISTS( LT_BL_FDMDL[ PURCHXPR = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            <S_FCAT>-CHECKBOX = ABAP_TRUE.
            if LF_LOCKED eq ABAP_TRUE and
               LF_INUSE  eq ABAP_TRUE.
              <S_FCAT>-EDIT = ABAP_TRUE.
            endif.
          endif.

        when 'PSICO'.
          if not LINE_EXISTS( LT_BL_FDMDL[ PURCHXPR = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ] ).
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          else.
            <S_FCAT>-ICON = ABAP_TRUE.
          endif.

        when 'DUMMYXPR'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

      endcase.


***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SRCIN'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MATNRXPR'.          <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MAKTXXPR'.          <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FOVRR_MAKTXXPR'.    <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PAPGR'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'GRAMM'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'GRAMM_UOM'.         <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SABOA'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRBOA'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FLUTE'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'WERKS_CORR'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'CALIP'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'CALIP_UOM'.         <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'REWID'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'REWID_UOM'.         <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PURCHXPR'.          <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'LIFNRXPR'.          <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FPSMOXPR'.          <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PSICO'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESCR_LAMI'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESCR_XSHT'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT type LVC_S_LAYO.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <T_STYL> type          LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

***--------------------------------------------------------------------------------------
    loop at ME->GET_LAMI( ) into data(LS_LAMI).
***   Add Line with Gate Key Data
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_PXSS_S_FD_LAMI_GRID( R_GATE = LS_LAMI-R_GATE
                                                         ) to <S_DATA>.

***   Get Visualization Data
      ME->GET_FD_LAMI_VIS( exporting IR_GATE = LS_LAMI-R_GATE
                           changing  CS_DATA = <S_DATA> ).

***   Set Style Details
      if LS_LAYOUT-STYLEFNAME is not initial.
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_FD_LAMI( exporting IR_GATE = LS_LAMI-R_GATE
                                              IS_DATA = <S_DATA>
                                    changing  CT_STYL = <T_STYL> ).
***       Call DVC Servcie - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LS_LAMI-R_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endif.
    endloop.

  endmethod.
  method GET_LAMI.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE,
          LT_GATE         type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->R_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = ME->R_GATE_OUT
                                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

***   Collect Lamination Gates
      free: LT_GATE.
      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA
                                   where R_GATE is bound
                                    and  R_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_LAMI.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        append LS_FASTD_XCOMP_DATA-R_GATE to LT_GATE.
      endloop.

***   Sort Gates and add to Result
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).
      loop at LT_GATE into LR_GATE.
        append value #( R_GATE     = LR_GATE
                        R_BL_FDMDL = ME->R_BL_FDMDL
                      ) to RT_LAMI.
      endloop.
    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Activate Toolbar
    RS_LAYOUT-NO_TOOLBAR = ABAP_FALSE.

  endmethod.
  method GET_MENU_ADD.

    data: LS_PRVDR_DEF_LAMI type /VCXI/VKSR_S_PRVDR_DEF,
          LS_PRVDR_DEF_XSHT type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF_LAMI type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_PRVDR_DEF_XSHT type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_MENU type ref to CL_CTMENU.


*** Create DropDown Menu
    create object RR_MENU.

*** Get Provider Definitions
    LT_PRVDR_DEF_LAMI = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZIF_VCXI_PXSS_LAMI=>C_IPRVT_PX_LAMI ).
    check LT_PRVDR_DEF_LAMI is not initial.
    sort LT_PRVDR_DEF_LAMI by DESCR.
    delete adjacent duplicates from LT_PRVDR_DEF_LAMI.

    LT_PRVDR_DEF_XSHT = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT ).
    check LT_PRVDR_DEF_XSHT is not initial.
    sort LT_PRVDR_DEF_XSHT by DESCR.
    delete adjacent duplicates from LT_PRVDR_DEF_XSHT.

***--------------------------------------------------------------------------------------
    loop at LT_PRVDR_DEF_LAMI into LS_PRVDR_DEF_LAMI.
***   Create Submenu
      create object LR_MENU.
      RR_MENU->ADD_SUBMENU( MENU = LR_MENU
                            TEXT = conv #( LS_PRVDR_DEF_LAMI-DESCR ) ).

***   Add Function for all Sheets
      loop at LT_PRVDR_DEF_XSHT into LS_PRVDR_DEF_XSHT.
        LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_ADD && '@' && LS_PRVDR_DEF_LAMI-ID && '@' && LS_PRVDR_DEF_XSHT-ID
                               TEXT  = conv #( LS_PRVDR_DEF_XSHT-DESCR ) ).
      endloop.
    endloop.

  endmethod.
  method HANDLE_BUTTON_CLICK.

    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Read selected entry
        read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
        check SY-SUBRC is initial.

        LS_FD_LAMI_GRID = corresponding #( <S_DATA> ).
        check LS_FD_LAMI_GRID-R_GATE is bound and
              LS_FD_LAMI_GRID-R_GATE->F_FREED is initial.

***     Check Column
        case ES_COL_ID-FIELDNAME.
***       Price Scale
          when 'PSICO'.
            ME->HANDLE_UC_PSICO( IR_GATE = LS_FD_LAMI_GRID-R_GATE ).

        endcase.

        if ME->F_REFRESH_REQ eq ABAP_TRUE.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          LS_FD_LAMI_GRID = corresponding #( <S_DATA> ).

          check LS_FD_LAMI_GRID-R_GATE is bound and
                LS_FD_LAMI_GRID-R_GATE->F_FREED is initial.

***       Set Values to PR Class
          ME->SET_FD_LAMI_VIS( IR_GATE = LS_FD_LAMI_GRID-R_GATE
                               IS_DATA = <S_DATA> ).

        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type          ANY,
                   <F_FIELD> type          ANY.

    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        check LINE_EXISTS( <T_DATA>[ E_ROW-INDEX ] ).
        LS_FD_LAMI_GRID = corresponding #( <T_DATA>[ E_ROW-INDEX ] ).

***     Check Gate is bound and Provider has an own UI
        check LS_FD_LAMI_GRID-R_GATE is bound and
              LS_FD_LAMI_GRID-R_GATE->F_FREED is initial and
              LS_FD_LAMI_GRID-R_GATE->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LS_FD_LAMI_GRID-R_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_FD_LAMI_GRID-R_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_FD_LAMI_GRID-R_GATE->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_F4.

    try.
        case E_FIELDNAME.
          when 'SRCIN'.   "Model specific Input Sources
            ME->SHLP_SRCIN( IF_FNAME      = E_FIELDNAME
                            IF_VALUE      = E_FIELDVALUE
                            IF_ROWID      = ES_ROW_NO-ROW_ID
                            IR_EVENT_DATA = ER_EVENT_DATA
                            IF_DISPLAY    = E_DISPLAY ).

          when 'SABOA' or 'PRBOA'.
            ME->SHLP_BOARD( IF_FNAME      = E_FIELDNAME
                            IF_VALUE      = E_FIELDVALUE
                            IF_ROWID      = ES_ROW_NO-ROW_ID
                            IR_EVENT_DATA = ER_EVENT_DATA
                            IF_DISPLAY    = E_DISPLAY ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data: LF_DISABLED type ABAP_BOOL.


    try.
***--------------------------------------------------------------------------------------
***     Use Lock-Status of VC to define if buttons are disabled
        LF_DISABLED = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                        else ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***     Insert "Add" function to Toolbar
        append value #( FUNCTION  = C_FCODE_ADD
                        TEXT      = 'Add'(001)
                        BUTN_TYPE = C_BTYPE_MENU
                        ICON      = ICON_INSERT_ROW
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.


***     Add Function of Lamination Options
        append value #( FUNCTION = 'ADD'
                        CTMENU   = ME->GET_MENU_ADD( )
                      ) to E_OBJECT->MT_BTNMNU.

***--------------------------------------------------------------------------------------
***     Insert "Delete" function to Toolbar
        append value #( FUNCTION  = C_FCODE_DEL
                        TEXT      = 'Delete'(002)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_DELETE_ROW
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LF_ISELF type /VCXI/CKX_ID,
          LF_FDMDL type ZVCXI_PXSS_FDMDL.
    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.


*** Get Details from User Command
    split IF_UCOMM at '@' into data(DUMMY) LF_ISELF LF_FDMDL.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Add Lamination
    cast ZCL_VCXI_P1SS_BL_FDMDL( ME->R_BL_FDMDL )->ADD_LAMI( exporting IR_GATE_OUT    = ME->R_GATE_OUT
                                                                       IF_ISELF       = LF_ISELF
                                                                       IF_FDMDL       = LF_FDMDL
                                                             changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                                                       CT_XCONG       = LT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method HANDLE_UC_DEL.

    data: LS_ROW          type LVC_S_ROW,
          LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    data: LT_ROW         type LVC_T_ROW,
          LT_GATE        type /VCXI/VKSR_TT_GATE,
          LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA>  type standard table.


*** Get all Selected Rows
    ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
    check LINES( LT_ROW ) is not initial.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

*** Collect Gates of selected rows
    loop at LT_ROW into LS_ROW.
      check LINE_EXISTS( <T_DATA>[ LS_ROW-INDEX ] ).
      LS_FD_LAMI_GRID = corresponding #( <T_DATA>[ LS_ROW-INDEX ] ).
      append LS_FD_LAMI_GRID-R_GATE to LT_GATE.
    endloop.
    check LT_GATE is not initial.

*** Get available Laminations
    data(LT_LAMI) = ME->GET_LAMI( ).

*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Free Selected Gates
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.
***   Check if Gate is changeable and can be deleted
      check ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.

***   Get Fast Data Model of Sheet
      data(LR_BL_FDMDL_XSHT) = ME->GET_BL_FDMDL_XSHT( IR_GATE_LAMI = LR_GATE ).

***   Delete Sheet
      if LR_BL_FDMDL_XSHT is bound.
        ME->R_BL_FDMDL->DEL_SUB_BL_FDMDL( exporting IR_BL_FDMDL_SUB = LR_BL_FDMDL_XSHT
                                          changing  CT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                                    CT_XCONG        = LT_XCONG ).
      endif.

***   Delete Lamination
      loop at LT_FASTD_XCOMP assigning field-symbol(<S_FASTD_XCOMP>).
        delete <S_FASTD_XCOMP>-T_DATA where R_GATE = LR_GATE.
      endloop.
    endloop.

*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method HANDLE_UC_PSICO.

    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Get Fast Data Model of Sheet
    data(LR_BL_FDMDL_XSHT) = ME->GET_BL_FDMDL_XSHT( IR_GATE_LAMI = IR_GATE ).
    check LR_BL_FDMDL_XSHT is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = LR_BL_FDMDL_XSHT->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = LR_BL_FDMDL_XSHT ).

*** Get excluded Gates
    LT_GATE_EXCLUDE = LR_BL_FDMDL_XSHT->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_BL_FDMDL_XSHT->T_GATE_OUT[ 1 ]
                                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Also Exclude Component that uses the Sheet
    append LR_BL_FDMDL_XSHT->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_BL_FDMDL_XSHT->T_GATE_OUT[ 1 ]
                                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ) to LT_GATE_EXCLUDE.

*** Get Source for Input
    case type of LR_BL_FDMDL_XSHT.
      when type ZCL_VCXI_P1SS_BL_FDMDL.
        cast ZCL_VCXI_P1SS_BL_FDMDL( LR_BL_FDMDL_XSHT )->GET_SRCIN( exporting IR_GATE_OUT     = LR_BL_FDMDL_XSHT->T_GATE_OUT[ 1 ]
                                                                              IT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                                                    importing ER_GATE         = LR_GATE ).
      when type ZCL_VCXI_P2SS_BL_FDMDL.
        cast ZCL_VCXI_P2SS_BL_FDMDL( LR_BL_FDMDL_XSHT )->GET_SRCIN( exporting IR_GATE_OUT     = LR_BL_FDMDL_XSHT->T_GATE_OUT[ 1 ]
                                                                              IT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                                                    importing ER_GATE         = LR_GATE ).
    endcase.

    check LR_GATE is bound and
          LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCS_PSCALE_MGR.

***--------------------------------------------------------------------------------------
*** Call Popup with Price Scales
    ZCL_VCXI_XCS_POPUP_PSCALE=>START( IR_GATE   = LR_GATE
                                      IR_UIGATE = ME->R_UIGATE
                                      IF_LOCKED = cast ZIF_VCXI_XCS_PSCALE_MGR( LR_GATE->R_CLSPR )->IS_CHANGEABLE( ) ).

*** Request Refresh for ALV
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method HANDLE_UCOMM.

    try.
***     Trigger general Add command
        case E_UCOMM.
          when C_FCODE_DEL.
            ME->HANDLE_UC_DEL( ).
          when others.
            if E_UCOMM cs C_FCODE_ADD.
              ME->HANDLE_UC_ADD( IF_UCOMM = E_UCOMM ).
            endif.
        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE and
           ME->R_UIGATE is bound.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Eventhandler for Toolbar
    set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
    set handler ME->HANDLE_UCOMM               for ME->R_GRID.

*** Set Double Click
    set handler ME->HANDLE_DOUBLE_CLICK        for ME->R_GRID.

*** Set Button Click
    set handler ME->HANDLE_BUTTON_CLICK        for ME->R_GRID.

    set handler ME->HANDLE_F4             for ME->R_GRID.

  endmethod.
  method SET_FD_LAMI_VIS.

    data: LS_FD_LAMI_VIS type ZVCXI_PXSS_S_FD_LAMI_VIS.
    data: LR_DATA          type ref to DATA,
          LR_GATE_XSHT     type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_FDMDL_XSHT type ref to ZCL_VCXI_PXSS_BL_FDMDL.
    field-symbols: <S_DATA> type ANY.


    check IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.

*** "Cast" generic structure to Vis Structure
    LS_FD_LAMI_VIS = corresponding #( IS_DATA ).

***--------------------------------------------------------------------------------------
*** Get Fast Data Integration Data
    LR_DATA = cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->GET_DATA( ).
    assign LR_DATA->* to <S_DATA>.

*** Perform Update
    <S_DATA> = corresponding #( base ( <S_DATA> ) LS_FD_LAMI_VIS ).

*** Set Fast Data Integration Data
    cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->SET_DATA( IR_DATA = LR_DATA ).
    assign LR_DATA->* to <S_DATA>.
    LS_FD_LAMI_VIS = corresponding #( base ( LS_FD_LAMI_VIS ) <S_DATA> ).

***--------------------------------------------------------------------------------------
*** Set Fast Data Integration Data to Sheet
    data(LR_PR_XSHT) = cast ZIF_VCXI_PXSS_LAMI( IR_GATE->R_CLSPR )->GET_PRVDR_XSHT( importing ER_GATE = LR_GATE_XSHT ).
    if LR_PR_XSHT is bound.
***   Get Fast Data Integration Data
      LR_DATA = LR_PR_XSHT->ZIF_VCXI_PXSS_FDI~GET_DATA( ).
      assign LR_DATA->* to <S_DATA>.
***   Perform Update
      <S_DATA> = corresponding #( base ( <S_DATA> ) LS_FD_LAMI_VIS ).
***   Set Fast Data Integration Data
      LR_PR_XSHT->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA = LR_DATA ).

***--------------------------------------------------------------------------------------
***   Get Fast Data Model and receive Sheet Information
      LR_BL_FDMDL_XSHT = ME->GET_BL_FDMDL_XSHT( IR_GATE_XSHT = LR_GATE_XSHT ).
      if LR_BL_FDMDL_XSHT is bound.
        LR_BL_FDMDL_XSHT->SET_XSHT( IS_DATA = IS_DATA ).
      endif.
    endif.

  endmethod.
  method SHLP_BOARD.

    data: LF_SUBRC type I.
    data: LS_SHLP type SHLP_DESCR.
    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    data: LT_RETURN type table of DDSHRETVAL.
    field-symbols: <T_DATA> type standard table,
                   <T_MODI> type LVC_T_MODI.


*** Mark as processed
    IR_EVENT_DATA->M_EVENT_HANDLED = ABAP_TRUE.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    check LINE_EXISTS( <T_DATA>[ IF_ROWID ] ).
    LS_FD_LAMI_GRID = corresponding #( <T_DATA>[ IF_ROWID ] ).


***------------------------------------------------------------------------------------------------
*** Set Parameter Date Config
    data(LF_DCONF) = ME->R_GATE->GET_APPDATA( )->F_DCONF.
    set parameter id 'ZVCXI_XCS_DCONF' field LF_DCONF.

*** Set Plant as Parameter
    set parameter id 'WRK' field LS_FD_LAMI_GRID-WERKS_CORR.

*** Set Parameter of Valid Board Types
    set parameter id 'ZVCXI_PCS_TBOAR' field LS_FD_LAMI_GRID-VALID_TBOAR.

*** Set only Released BoardIDs are allowed
    data(LF_RELEASED) = ABAP_TRUE.
    set parameter id 'ZVCXI_PCS_RELEASED' field LF_RELEASED.

***------------------------------------------------------------------------------------------------
*** Determine the search help of Board IDs
    call function 'F4IF_DETERMINE_SEARCHHELP'
      exporting
        TABNAME           = 'ZVCXI_PXSS_S_FD_LAMI_GRID'
        FIELDNAME         = IF_FNAME
      importing
        SHLP              = LS_SHLP
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3.

***------------------------------------------------------------------------------------------------
*** Show all Boards for Sales Boards
    if LS_SHLP-SHLPNAME eq 'ZVCXI_PCSS_SABOA'.
      call function 'F4IF_FIELD_VALUE_REQUEST'
        exporting
          TABNAME           = 'ZVCXI_PXSS_S_FD_LAMI_GRID'
          FIELDNAME         = IF_FNAME
          DISPLAY           = IF_DISPLAY
        tables
          RETURN_TAB        = LT_RETURN
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          NO_VALUES_FOUND   = 4.
      check SY-SUBRC eq 0 and
            IF_DISPLAY ne ABAP_TRUE.
    else.
***   Filter by Sales Board
      append value #( SHLPFIELD = 'SABOA'
                      SIGN      = 'I'
                      OPTION    = 'EQ'
                      LOW       = LS_FD_LAMI_GRID-SABOA
                    ) to LS_SHLP-SELOPT.

***   Assigned Production Boards
      call function 'F4IF_START_VALUE_REQUEST'
        exporting
          SHLP          = LS_SHLP
          DISPONLY      = IF_DISPLAY
        importing
          RC            = LF_SUBRC
        tables
          RETURN_VALUES = LT_RETURN.
      check LF_SUBRC eq 0 and
            IF_DISPLAY ne ABAP_TRUE.
    endif.

***--------------------------------------------------------------------------------------
*** Return selected Board
    check LT_RETURN is not initial.
    assign IR_EVENT_DATA->M_DATA->* to <T_MODI>.
    <T_MODI> = value #( ( ROW_ID    = IF_ROWID
                          FIELDNAME = IF_FNAME
                          VALUE     = LT_RETURN[ 1 ]-FIELDVAL ) ).

  endmethod.
  method SHLP_SRCIN.

    data: LS_FD_LAMI_GRID type ZVCXI_PXSS_S_FD_LAMI_GRID.
    data: LT_RETURN type table of DDSHRETVAL.
    field-symbols: <T_DATA> type standard table,
                   <T_MODI> type LVC_T_MODI.


*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    check LINE_EXISTS( <T_DATA>[ IF_ROWID ] ).
    LS_FD_LAMI_GRID = corresponding #( <T_DATA>[ IF_ROWID ] ).


    IR_EVENT_DATA->M_EVENT_HANDLED = ABAP_TRUE.

    call function 'F4IF_FIELD_VALUE_REQUEST'
      exporting
        TABNAME           = switch TABNAME( LS_FD_LAMI_GRID-FDMDL when ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CRSHT then 'ZVCXI_P1SS_S_FD_CRSHT'
                                                                  when ZCL_VCXI_P2SS_BL_FDMDL=>C_FDMDL_FCSHT then 'ZVCXI_P2SS_S_FD_FCSHT' )
        FIELDNAME         = 'SRCIN'
        VALUE             = conv DYNFIELDVALUE( IF_VALUE )
        DISPLAY           = IF_DISPLAY
      tables
        RETURN_TAB        = LT_RETURN
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3
        NO_VALUES_FOUND   = 4.
    if LT_RETURN is not initial.
      assign IR_EVENT_DATA->M_DATA->* to <T_MODI>.
      <T_MODI> = value #( ( ROW_ID    = IF_ROWID
                            FIELDNAME = IF_FNAME
                            VALUE     = LT_RETURN[ 1 ]-FIELDVAL ) ).
    endif.

  endmethod.
