
class ZCL_VCXI_FFSS_PR_OUTPUT definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_OUTPUT
  create public .

public section.

  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_COMM_PREV .
  interfaces ZIF_VCXI_XCS_NGREP .

  types:
    YT_TC520 type standard table of ZVCXI_FFS_TC520 with default key .

  constants C_IPRVT_OUTPUT type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_OUTPUT' ##NO_TEXT.
  constants C_PARID_FOPSL type /VCXI/VKS_PARID value 'ZVCXI_FF_FOPSL' ##NO_TEXT.
  constants C_PARID_TRWID type /VCXI/VKS_PARID value 'ZVCXI_F0_TRWID' ##NO_TEXT.
  class-data T_TC520 type YT_TC520 .
  constants C_ISTEP_SLIT type ZVCXI_FFSS_ISTEP value 'SLIT' ##NO_TEXT.

  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_COMPN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_COMPN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_FOPSL
    exporting
      !EF_FOPSL type ZVCXI_FFS_FOPSL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_MCOMP
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TRWID
    exporting
      !ES_TRWID type ZVCXI_F0S_S_TRWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods IS_FTRAL
    returning
      value(RF_FTRAL) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FOPSL
    importing
      !IF_FOPSL type ZVCXI_FFS_FOPSL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRWID
    importing
      !IS_TRWID type ZVCXI_F0S_S_TRWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
  methods ZIF_VCXI_F0SS_ANCHO~ADD_XCON
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_FOPSL type /VCXI/VKSC_IEVNT value 'INIT_FOPSL' ##NO_TEXT.
  constants C_IEVNT_I_OPTI_TRWID type /VCXI/VKSC_IEVNT value 'OPTI_TRWID' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FOPSL_CHANGED type /VCXI/VKSC_IEVNT value 'FOPSL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRWID_CHANGED type /VCXI/VKSC_IEVNT value 'TRWID_CHANGED' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIFPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIFPX' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.

  methods GET_EVQTY
    returning
      value(RS_EVQTY) type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods CHECK_FSLAL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods ADJUST_FIRNG
    importing
      !IS_TRWID type ZVCXI_F0S_S_TRWID
    changing
      !CT_FIRNG type ZVCXI_FFSS_TT_FIRNG
    raising
      /VCXI/CX_CKX .
  methods FFG_EXIST
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_CHILDREN
    importing
      !IF_SORTED type ABAP_BOOL default ABAP_FALSE
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_FOPSL
    raising
      /VCXI/CX_CKX .
  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_OPTI_TRWID
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_OUTPUT definition
class ZCL_VCXI_FFSS_PR_OUTPUT implementation.
  method ADJUST_FIRNG.

    data: LF_WERKS      type        WERKS_D,
          LF_NOOUT      type        ZVCXI_XCS_NOOUT,
          LF_ISTEP      type        ZVCXI_FFSS_ISTEP,
          LF_MAX_LOTMI  type        ZVCXI_F0S_LOTMI.
    data: LS_TC520      type        ZVCXI_FFS_TC520,
          LS_FIRNG      type        ZVCXI_FFSS_S_FIRNG.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_SPEC    type ref to ZCL_VCXI_F0SS_PR_SPEC.
    field-symbols: <S_FIRNG> type ZVCXI_FFSS_S_FIRNG.

*** Get FFG - Number of Outs
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if LR_GATE is bound.
      try .
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.

      if LR_PR_FFG is bound.
        LF_NOOUT = LR_PR_FFG->GET_NOOUT( ).
      endif.
    endif.

*** If multiple Number of Outs are found or Trim on Width is present
    check LF_NOOUT gt 1 or IS_TRWID-TRWID is not initial.
    move C_ISTEP_SLIT to LF_ISTEP.

*** Get Plant
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if LR_GATE is bound.
      try .
          move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SPEC.
      endtry.

      if LR_PR_SPEC is bound.
        LR_PR_SPEC->GET_WERKS( importing EF_WERKS = LF_WERKS ).
      endif.
    endif.

*** Read Customizing according to Access Sequence
    read table T_TC520 into LS_TC520 with key ISTEP = LF_ISTEP
                                              WERKS = LF_WERKS.
    if SY-SUBRC is not initial.
      read table T_TC520 into LS_TC520 with key ISTEP = LF_ISTEP.
      if SY-SUBRC is not initial.
        return.
      endif.
    endif.

*** Get Higher Minimum Lot Size
    clear LF_MAX_LOTMI.
    loop at CT_FIRNG into LS_FIRNG.
      if LS_FIRNG-LOTMI gt LF_MAX_LOTMI.
        move LS_FIRNG-LOTMI to LF_MAX_LOTMI.
      endif.
    endloop.

*** Set new Minimum Lot Size if needed
    if LF_MAX_LOTMI lt LS_TC520-LOTMI.
      loop at CT_FIRNG assigning <S_FIRNG> where LOTMI eq LF_MAX_LOTMI.
        move LS_TC520-LOTMI to LS_FIRNG-LOTMI.
      endloop.
    endif.

  endmethod.
  method CHECK_FSLAL.
*** 0 Slitting allowed.
*** 1 Slitting is maintained but not allowed.
*** 2 Slitting is not allowed.

    data: LS_TRWID      type       ZVCXI_F0S_S_TRWID.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get actual Film Structure Property
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Slitting allowed
    if LR_BL_FIFPROP->IS_FSLAL( ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
***   Get Trim on Width
      ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).
      if LS_TRWID-TRWID is not initial.
        move 1 to RF_RETURN.
      else.
        move 2 to RF_RETURN.
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Load Customizing
    select * from ZVCXI_FFS_TC520
      into table T_TC520.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Communicate forward only with children
    move ABAP_TRUE to ZIF_VCXI_F0SS_COMM_NEXT~F_COMWC.

  endmethod.
  method FFG_EXIST.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG type ref to ZCL_VCXI_FFSS_PR_FFG.

    move ABAP_FALSE to RF_RETURN.

    LT_GATE = ME->GET_CHILDREN( ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.

      check LR_PR_FFG is bound.
      move ABAP_TRUE to RF_RETURN.
      return.
    endloop.

  endmethod.
  method GET_CHILDREN.

    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Child Provider
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).
      loop at LT_GATE into LR_GATE.
        read table RT_GATE with key TABLE_LINE = LR_GATE
                                 transporting no fields.
        if SY-SUBRC ne 0.
          append LR_GATE to RT_GATE.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Sort if needed
    if IF_SORTED eq ABAP_TRUE.
      ME->R_GATE->SORT_GATE( changing CT_GATE = RT_GATE ).
    endif.

  endmethod.
  method GET_COMPN.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_ALL type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE.

*** Get Gates of Components
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG
                                     IF_INUSE  = ABAP_TRUE ).
    append lines of LT_GATE to LT_GATE_ALL.

*** Sort Components
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_ALL ).

*** Assign Component Number
    loop at LT_GATE_ALL into LR_GATE.
      add 1 to RF_COMPN.
      if IR_GATE eq LR_GATE.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_EVQTY.

    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV type ref to ZCL_VCXI_F0SR_PR_RTESPV.

***--------------------------------------------------------------------------------------
*** Get Routing Supervisor Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_RTESPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_RTESPV.
      endtry.
    endif.
    if LR_PR_RTESPV is not bound.
      raise exception type /VCXI/CX_CKX.
    endif.

***--------------------------------------------------------------------------------------
*** Get Evaluation Quantity from Routing Supervisor
    RS_EVQTY = LR_PR_RTESPV->GET_EVQTY( ).

  endmethod.
  method GET_FOPSL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOPSL ).
    move LS_PARAM-ATWRT to EF_FOPSL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MCOMP.

    data: LT_GATE_CHILD type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Child Provider
    LT_GATE_CHILD = ME->GET_CHILDREN( IF_SORTED = ABAP_TRUE ).

*** Get Main Component
    read table LT_GATE_CHILD into RR_GATE index 1.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Slitting allowed
    case ME->CHECK_FSLAL( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Slitting allowed
    case ME->CHECK_FSLAL( ).
      when 0.
***     Slitting is allowed.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '376' ).
    when 1.
***   Slitting is maintained but not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '378' ).
    when 2.
***   Slitting is not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'I'
                               IF_MSGNO = '377' ).
    endcase.

  endmethod.
  method GET_TRWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).
    move LS_PARAM-ATFLV to ES_TRWID-TRWID.
    move LS_PARAM-UNIT  to ES_TRWID-TRWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
*** Event Forwarding for Communication
    when C_IEVNT_I_REQ_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
    when C_IEVNT_I_REQ_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    when C_IEVNT_I_INIT_FOPSL.
      ME->HANDLE_INIT_FOPSL( ).
    when C_IEVNT_I_OPTI_TRWID.
      ME->HANDLE_OPTI_TRWID( ).
  endcase.

endmethod.
  method HANDLE_INIT_FOPSL.

    data: LF_FOPSL type   ZVCXI_FFS_FOPSL,
          LF_SETBY type   /VCXI/VKSR_SETBY.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

*** Process other events first
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).

***--------------------------------------------------------------------------------------
*** No Optimization in case of:
***  - No Film Ranges
***  - Trim on Width is not allowed
***  - Not just one child
    if LR_BL_FIFPROP                is not bound  or
       LR_BL_FIFPROP->T_FIRNG       is initial    or
       ME->IS_FTRAL( )              ne ABAP_TRUE  or
       LINES( ME->GET_CHILDREN( ) ) ne 1.
      move ABAP_UNDEFINED                   to LF_FOPSL.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    else.
***   Check if Flag was undefined before
      ME->GET_FOPSL( importing EF_FOPSL = LF_FOPSL
                               EF_SETBY = LF_SETBY ).
      if LF_FOPSL eq ABAP_UNDEFINED.
        move ABAP_FALSE                       to LF_FOPSL.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Optimization Flag
    ME->SET_FOPSL( IF_FOPSL = LF_FOPSL
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_OPTI_TRWID.

    data: LF_FOPSL type        ZVCXI_FFS_FOPSL,
          LF_NOOUT type        ZVCXI_XCS_NOOUT.
    data: LS_FIWID type        ZVCXI_F0S_S_FIWID,
          LS_TREQW type        ZVCXI_FFS_S_TREQW,
          LS_EVQTY type        ZVCXI_XCSR_S_EVQTY,
          LS_TRWID type        ZVCXI_F0S_S_TRWID.
    data: LT_GATE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO   type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_AOO        type ref to ZCL_VCXI_FFSS_CUST_AOO.


*** Only Optimize, if optimization is active
    ME->GET_FOPSL( importing EF_FOPSL = LF_FOPSL ).
    check LF_FOPSL eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Children and assign to matching reference
    LT_GATE = ME->GET_CHILDREN( ).
    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FCONO.
    endtry.

    if ME->IS_FTRAL( ) eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***   Get Film Width (Outbound) of one of the children
      if LR_PR_FFG is bound.
        LR_PR_FFG->GET_FIWID( importing ES_FIWID = LS_FIWID ).
      endif.
      if LR_PR_FCONO is bound.
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_FIWID ).
      endif.

***   Trim Requirement (Inbound)
      ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = LS_TREQW ).

***   Get Evaluation Qantity
      move ME->GET_EVQTY( ) to LS_EVQTY.

***   Get Film Forward Property (Inbound)
      ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
      check LR_BL_FIFPROP is bound.

***--------------------------------------------------------------------------------------
***   Automatic Optimization of Number of Outs
      LR_AOO = ZCL_VCXI_FFSS_CUST_AOO=>GET_INSTANCE( ).
      LR_AOO->OPTIMIZE( exporting IS_FIWID = LS_FIWID
                                  IS_TREQW = LS_TREQW
                                  IS_EVQTY = LS_EVQTY
                                  IT_FIRNG = LR_BL_FIFPROP->T_FIRNG
                        importing EF_NOOUT = LF_NOOUT
                                  ES_TRWID = LS_TRWID ).
    else.
***   No Slitting if Slitting is not allowed
      move 1 to LF_NOOUT.
      clear LS_TRWID.
    endif.

***--------------------------------------------------------------------------------------
*** Set determined optimal Number of Outs to FFG or FCONO
    if LR_PR_FFG is bound.
      LR_PR_FFG->SET_NOOUT( IF_NOOUT = LF_NOOUT ).
    endif.
    if LR_PR_FCONO is bound.
      LR_PR_FCONO->SET_NOOUT( IF_NOOUT = LF_NOOUT ).
    endif.

*** Set determined Trim
    ME->SET_TRWID( IS_TRWID = LS_TRWID ).

  endmethod.
  method IS_FTRAL.

    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Trim Allowed
    RF_FTRAL = LR_BL_FIFPROP->IS_FTRAL( ).

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).

    move IF_FIFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
    endif.

  endmethod.
  method SET_FOPSL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOPSL ).

    move IF_FOPSL           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOPSL_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method SET_TRWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).

    move IS_TRWID-TRWID     to LS_PARAM-ATFLV.
    move IS_TRWID-TRWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRWID_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_ANCHO~ADD_XCON.

    data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type        /VCXI/VKSR_TT_GATE,
          LT_GATE_SOV   type        /VCXI/VKSR_TT_GATE,
          LT_XCONR      type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FCONO type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOV   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FCONO   type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_PR_SOV     type ref to ZCL_VCXI_F0SS_PR_SOV.

***--------------------------------------------------------------------------------------
*** Get Provider Definition for Connection Out
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCONO=>C_IPRVT_FF_FCONO ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    check SY-SUBRC eq 0.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONO.
      endtry.

      check LR_PR_FCONO is bound.

***--------------------------------------------------------------------------------------
***   Get Specification Overview provider
      if LR_PR_SOV is not bound.
        LT_GATE_SOV = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                          IF_INUSE = ABAP_TRUE ).
        read table LT_GATE_SOV into LR_GATE_SOV index 1.
        check LR_GATE_SOV is bound.

        try.
            move LR_GATE_SOV->R_CLSPR ?to LR_PR_SOV.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

***     Get current Connections
        LT_XCONR = LR_PR_SOV->GET_XCONR( ).
      endif.

***   Check if Film Connection Out is linked to a Connection Out
      read table LT_XCONR with key R_GATE_OUT = LR_GATE transporting no fields.
      check SY-SUBRC is not initial.

***   Store the Film Connection In Gate
      move LR_GATE to LR_GATE_FCONO.
      exit.

    endloop.

*** If a Connection Out is found then use it
    if LR_GATE_FCONO is bound.
      move LR_GATE_FCONO to RR_GATE.
      return.
    endif.

*** Create new Connector Out
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    check RR_GATE is bound.

*** Set in-use
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS      type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Forward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LF_FISTX      type        ZVCXI_FFS_FISTX.
    data: LS_TREQW      type        ZVCXI_FFS_S_TREQW,
          LS_TREQW_NEXT type        ZVCXI_FFS_S_TREQW,
          LS_FITIN      type        ZVCXI_FFS_S_FITIN,
          LS_FITIN_NEXT type        ZVCXI_FFS_S_FITIN,
          LS_FITEX      type        ZVCXI_FFS_S_FITEX,
          LS_FITEX_NEXT type        ZVCXI_FFS_S_FITEX,
          LS_SURWT      type        ZVCXI_F0S_S_SURWT,
          LS_SURWT_NEXT type        ZVCXI_F0S_S_SURWT,
          LS_RELEN      type        ZVCXI_FFS_S_RELEN,
          LS_RELEN_NEXT type        ZVCXI_FFS_S_RELEN.
    data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT        type ref to ZIF_VCXI_FFSS_COMM_NEXT,
          LR_BL_FISTRUCT      type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FISTRUCT_NEXT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FIFPROP       type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIFPROP_NEXT  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.


***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get largest Trim Requirement
      LR_COMM_NEXT->GET_TREQW( importing ES_TREQW = LS_TREQW_NEXT ).
      if LS_TREQW is initial or
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_TREQW_NEXT-TREQW
                                                      IF_CALCV_UOM_1 = LS_TREQW_NEXT-TREQW_UOM
                                                      IF_CALCV_2     = LS_TREQW-TREQW
                                                      IF_CALCV_UOM_2 = LS_TREQW-TREQW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_TREQW_NEXT to LS_TREQW.
      endif.

***   Get Sum of Internal Thickness
      LR_COMM_NEXT->GET_FITIN( importing ES_FITIN = LS_FITIN_NEXT ).
      if LS_FITIN_NEXT is not initial.
        if LS_FITIN is initial.
          move LS_FITIN_NEXT to LS_FITIN.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITIN_NEXT-FITIN
                                                              IF_CALCV_UOM_1 = LS_FITIN_NEXT-FITIN_UOM
                                                              IF_CALCV_2     = LS_FITIN-FITIN
                                                              IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITIN-FITIN_UOM
                                                    importing EF_CALCV       = LS_FITIN-FITIN
                                                              EF_CALCV_UOM   = LS_FITIN-FITIN_UOM ).

        endif.
      endif.

***   Get Sum of External Thickness
      LR_COMM_NEXT->GET_FITEX( importing ES_FITEX = LS_FITEX_NEXT ).
      if LS_FITEX_NEXT is not initial.
        if LS_FITEX is initial.
          move LS_FITEX_NEXT to LS_FITEX.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITEX_NEXT-FITEX
                                                              IF_CALCV_UOM_1 = LS_FITEX_NEXT-FITEX_UOM
                                                              IF_CALCV_2     = LS_FITEX-FITEX
                                                              IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITEX-FITEX_UOM
                                                    importing EF_CALCV       = LS_FITEX-FITEX
                                                              EF_CALCV_UOM   = LS_FITEX-FITEX_UOM ).

        endif.
      endif.

***   Get Sum of Surface Weight
      LR_COMM_NEXT->GET_SURWT( importing ES_SURWT = LS_SURWT_NEXT ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Get Repeat Length if not different
      LR_COMM_NEXT->GET_RELEN( importing ES_RELEN = LS_RELEN_NEXT ).
      if LS_RELEN_NEXT-RELEN is not initial.
        if LS_RELEN is initial.
          move LS_RELEN_NEXT to LS_RELEN.
        else.
          if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RELEN_NEXT-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN_NEXT-RELEN_UOM
                                                          IF_CALCV_2     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ).
***         Clear Repeat if different
            clear LS_RELEN-RELEN.
          endif.
        endif.
      endif.

***   Combine Film Structure
      clear LR_BL_FISTRUCT_NEXT.
      LR_COMM_NEXT->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      if LR_BL_FISTRUCT is not bound.
        move LR_BL_FISTRUCT_NEXT to LR_BL_FISTRUCT.
      else.
        LR_BL_FISTRUCT->ADD_BL_FISTRUCT( IR_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      endif.

***   Combine Film Forward Property
      clear LR_BL_FIFPROP_NEXT.
      LR_COMM_NEXT->GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      if LR_BL_FIFPROP is not bound.
        move LR_BL_FIFPROP_NEXT to LR_BL_FIFPROP.
      else.
        LR_BL_FIFPROP->MERGE( IR_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Trim Requirement on the Width
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

*** Forward Internal Film Thickness
    ME->SET_FITIN( IS_FITIN = LS_FITIN ).

*** Forward External Film Thickness
    ME->SET_FITEX( IS_FITEX = LS_FITEX ).

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Repeat Length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

*** Forward Film Structure XML
    if LR_BL_FISTRUCT is bound.
      LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    else.
      clear LF_FISTX.
    endif.
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

*** Forward Film Forward Property XML
    if LR_BL_FIFPROP is bound.
      ME->SET_FIFPX( IF_FIFPX = LR_BL_FIFPROP->GET_FIFPX( ) ).
    else.
      ME->SET_FIFPX( IF_FIFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LS_TRWID  type ZVCXI_F0S_S_TRWID.
    data: LT_FIRNG  type ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_FIRNG>  type ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing EF_SETBY      = EF_SETBY
                                                     ER_BL_FIFPROP = ER_BL_FIFPROP ).

***--------------------------------------------------------------------------------------
*** No Ranges should be forwarded, in case of Separation
    if LINES( ME->GET_CHILDREN( ) ) eq 1.
***   Get Trim
      ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).

***   Reduce Film Width Minimum and Maximumg by Trim
      move ER_BL_FIFPROP->T_FIRNG to LT_FIRNG.
      loop at LT_FIRNG assigning <S_FIRNG>.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMI
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMI_UOM
                                                            IF_CALCV_2     = LS_TRWID-TRWID
                                                            IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = <S_FIRNG>-FIWMI_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMI
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMI_UOM ).

        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMA
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMA_UOM
                                                            IF_CALCV_2     = LS_TRWID-TRWID
                                                            IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = <S_FIRNG>-FIWMA_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMA
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMA_UOM ).
      endloop.

***   Check If we need an adjustment of Minimum Lot Size
      ME->ADJUST_FIRNG( exporting IS_TRWID = LS_TRWID
                        changing CT_FIRNG = LT_FIRNG ).
    else.
      clear LT_FIRNG.
    endif.
    ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).

***--------------------------------------------------------------------------------------
*** Get new Film Forward Property XML
    if EF_FIFPX is requested.
      EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing EF_FISTX = EF_FISTX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ES_FITEX
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.

*** Get Repeat Length (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN( importing ES_RELEN = ES_RELEN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ES_SURWT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

    data: LS_TRWID        type    ZVCXI_F0S_S_TRWID.

***--------------------------------------------------------------------------------------
*** Get Trim Requirement on Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ES_TREQW
                                                     EF_SETBY = EF_SETBY ).

*** Get Trim on Width
    ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).

***--------------------------------------------------------------------------------------
*** Subtract Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_TREQW-TREQW
                                                        IF_CALCV_UOM_1 = ES_TREQW-TREQW_UOM
                                                        IF_CALCV_2     = LS_TRWID-TRWID
                                                        IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                              importing EF_CALCV       = ES_TREQW-TREQW
                                                        EF_CALCV_UOM   = ES_TREQW-TREQW_UOM ).

*** Not less than 0
    if  ES_TREQW-TREQW lt 0.
      move 0 to ES_TREQW-TREQW.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing EF_FIBPX = EF_FIBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).
    move LS_PARAM-STRNG to EF_FIFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID.

    data: LS_TRWID   type       ZVCXI_F0S_S_TRWID.
    data: LR_CX_CKX  type ref to /VCXI/CX_CKX.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Add Trim
    ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).
    try.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_FIWID-FIWID
                                                            IF_CALCV_UOM_1 = ES_FIWID-FIWID_UOM
                                                            IF_CALCV_2     = LS_TRWID-TRWID
                                                            IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                  importing EF_CALCV       = ES_FIWID-FIWID
                                                            EF_CALCV_UOM   = ES_FIWID-FIWID_UOM ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        clear ES_FIWID-FIWID.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Is Slitting Active
    ME->GET_TRWID( importing ES_TRWID = data(LS_TRWID) ).
    data(LF_NOOUT) = ME->GET_NOOUT( ).
    data(LT_GATE)  = ME->GET_CHILDREN( ).

***--------------------------------------------------------------------------------------
*** If Slitting active - Add own Node for Output
    if LS_TRWID-TRWID   ne 0 or
       LF_NOOUT         gt 1 or
       LINES( LT_GATE ) gt 1.
***   Get Attribute Data
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_TRWID-TRWID        "Trim on Width
                                            IF_UOM   = LS_TRWID-TRWID_UOM
                                  changing  CT_ATTR  = LT_ATTR ).

***   Add Node
      data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                      IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                      IF_ICON       = 'sap-icon://scissors'
                                                      IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                      IF_GROUP_KEY  = IF_GROUP_KEY
                                                      IT_ATTR       = LT_ATTR ).
***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                          IF_NODE_KEY = LF_NODE_KEY ).

***--------------------------------------------------------------------------------------
*** Represent by Child
    else.
      check LT_GATE is not initial.
***   Check representation already created
      if CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LT_GATE[ 1 ] ) is initial and
         LT_GATE[ 1 ]->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
***     Fill
        cast ZIF_VCXI_XCS_NGREP( LT_GATE[ 1 ]->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
      endif.

***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                          IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LT_GATE[ 1 ] ) ).
    endif.

  endmethod.
