
class ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP_UNIT
  create public .

public section.

  data F_PPASS type ZVCXI_P0SS_PPASS .

  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
  methods ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_OUT
    redefinition .
protected section.

  data T_COMP_IN type ZVCXI_P0SR_TT_COMP_IN .
  data T_MFMI_P type ZVCXI_P0SR_TT_MFMI_P .

  methods ADD_SPVRE_MFMI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_JOINT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_MFMI_P
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_CPM_MFSI_P
    redefinition .
  methods ADD_SPVRE_MFSI_P
    redefinition .
  methods INIT_BY_SPEC_PCDIM
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS definition
class ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS implementation.
method ADD_SPVRE_CPM_MFSI_P.

  data:  LF_COUNT     type I.
  data:  LT_IMFXC_IN  type ZVCXI_XCSP_TT_IMFXC,
         LT_NEXTL     type ZVCXI_XCSP_TT_NEXTL.

*** Buffer X-Connects
  move ME->T_IMFXC_IN to LT_IMFXC_IN.
  move ME->T_NEXTL    to LT_NEXTL.

*** Remove already handled X-Connects / NextL
  LF_COUNT = lines( ME->T_COMP_IN ).
  if LF_COUNT gt 1.
    delete ME->T_IMFXC_IN from 2 to LF_COUNT.
    delete ME->T_NEXTL    from 2 to LF_COUNT.
  endif.

  SUPER->ADD_SPVRE_CPM_MFSI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                         IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                                changing CT_SPVRE       = CT_SPVRE ).

*** Bring back buffer X-Connects / NextL
  move LT_IMFXC_IN to ME->T_IMFXC_IN.
  move LT_NEXTL    to ME->T_NEXTL.

endmethod.
method ADD_SPVRE_MFMI_P.

  data:  LS_MFMI_P           type        ZVCXI_P0SR_S_MFMI_P,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFMI_P     type ref to /VCXI/CL_VKSR_SPVRE.

  check ME->T_MFMI_P is not initial.

***------------------------------------------------------------------------------------------------
*** Remove existing
  loop at CT_SPVRE into LR_SPVRE_MFMI_P.
    if LR_SPVRE_MFMI_P->GET_ID( ) eq 'MFMI_P'.
      delete CT_SPVRE.
    endif.
  endloop.

*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***------------------------------------------------------------------------------------------------
  loop at ME->T_MFMI_P into LS_MFMI_P.
*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMI_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMI_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFMI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Leading Object
    move LS_MFMI_P-MATNR                                   to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
    LR_SPVRE_MFMI_P->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Set Consumption Factor for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-MFICF                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor Per for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-MFICP                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Purchase Flag
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PURCH                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Vendor Number
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-LIFNR                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCTYP            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCTYP                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Length
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCLEN            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCLEN                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCLEN_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Width
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCWID            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCWID                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCWID_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Height
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCHEI            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCHEI                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCHEI_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Ups
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCUPS            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCUPS                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCDIR            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCDIR                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Price Scale Manager
    ME->ADD_SPVRE_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI_P
                                        IR_BL_RTESPV    = IR_BL_RTESPV
                                        IT_PSCALE       = LS_MFMI_P-T_PSCALE
                              changing  CT_SPVRE        = CT_SPVRE ).

  endloop.

endmethod.
method ADD_SPVRE_MFSI_P.

  data:  LF_TABIX            type        I,
         LF_IMFXC            type        ZVCXI_XCSP_IMFXC,
         LF_NEXTL            type        ZVCXI_XCSP_NEXTL.
  data:  LS_COMP_IN          type        ZVCXI_P0SR_S_COMP_IN,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSI_P     type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

  loop at ME->T_COMP_IN into LS_COMP_IN.
    move SY-TABIX to LF_TABIX.
    read table ME->T_IMFXC_IN into LF_IMFXC index LF_TABIX.
    read table ME->T_NEXTL    into LF_NEXTL index LF_TABIX.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSI_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSI_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set MF X-Connect
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_IMFXC                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set "Next Low-Level Code" Flag
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL        to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_NEXTL                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR      to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_COMP_IN-PCDIR                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor for Material Flow In
    if LS_COMP_IN-COMPR is not initial.
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_MFICF      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_COMP_IN-COMPR                            to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.
  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_UNIT_AS type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_UNIT_AS.

***----------------------------------------------------------------------------
*** PC Dimensions
  if ME->T_COMP_IN  eq LR_BL_PSTEP_UNIT_AS->T_COMP_IN.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** SFG Components
  if ME->T_MFMI_P   eq LR_BL_PSTEP_UNIT_AS->T_MFMI_P.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Production Pass
  if ME->F_PPASS    eq LR_BL_PSTEP_UNIT_AS->F_PPASS.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method COPY.

  data:  LR_BL_PSTEP_UNIT_AS type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_UNIT_AS.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->T_COMP_IN     to LR_BL_PSTEP_UNIT_AS->T_COMP_IN.

*** SFG Components
  move ME->T_MFMI_P      to LR_BL_PSTEP_UNIT_AS->T_MFMI_P.

*** Production Pass
  move ME->F_PPASS       to LR_BL_PSTEP_UNIT_AS->F_PPASS.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML
              T_COMP_IN    = ME->T_COMP_IN
              F_PPASS      = ME->F_PPASS
              T_MFMI_P     = ME->T_MFMI_P.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method GET_SPVRE_MF.

***------------------------------------------------------------------------------------------------
*** Add MFMI PC
  ME->ADD_SPVRE_MFMI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                  IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                        changing  CT_SPVRE       = CT_SPVRE ).


*** Call Super
  SUPER->GET_SPVRE_MF( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                 IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                       changing  CT_SPVRE       = CT_SPVRE
                                 CF_MFI         = CF_MFI
                                 CF_MFO         = CF_MFO ).


endmethod.
method INIT_BY_SPEC.

***------------------------------------------------------------------------------------------------
*** Initizalize Joints by Specification
  ME->INIT_BY_SPEC_JOINT( IT_PRVDR = IT_PRVDR ).

*** SUPER Initialization
  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

*** Initialize Material Flow Material In PC
  ME->INIT_BY_SPEC_MFMI_P( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_JOINT.

  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_JOINT      type ref to ZCL_VCXI_P0SS_PR_JOINT.

  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_PR_JOINT is bound.

    move LR_PR_JOINT->GET_PPASS( ) to ME->F_PPASS.
  endloop.

endmethod.
method INIT_BY_SPEC_MFMI_P.

  data:          LS_MFMI_P        type          ZVCXI_P0SR_S_MFMI_P,
                 LS_FOLLE         type          ZVCXI_P0SS_S_FOLLE,
                 LS_FOLWI         type          ZVCXI_P0SS_S_FOLWI,
                 LS_FOLHE         type          ZVCXI_P0SS_S_FOLHE,
                 LS_PRICE         type          ZVCXI_XCS_S_PRICE,
                 LS_PRICP         type          ZVCXI_XCS_S_PRICP,
                 LS_PSQTY         type          ZVCXI_XCS_S_PSQTY,
                 LS_BAWGT         type          ZVCXI_P0S_S_BAWGT,
                 LS_BAWGP         type          ZVCXI_P0S_S_BAWGP,
                 LS_AREA          type          ZVCXI_XCS_S_CALCV.
  data:          LR_GATE          type ref to   /VCXI/CL_VKSR_GATE,
                 LR_GATE_COMP_SFG type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SFG   type ref to   ZCL_VCXI_P0SS_PR_COMP_SFG,
                 LR_PR_PSCALE     type ref to   ZCL_VCXI_XCS_PR_PSCALE.
  field-symbols: <S_PSCALE>       type          ZVCXI_XCSR_S_PSCALE.

*** Process all Component SFGs
  loop at IT_PRVDR into LR_GATE_COMP_SFG.
*** Check is child of Specification
    try.
        move LR_GATE_COMP_SFG->R_CLSPR ?to LR_PR_COMP_SFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SFG.
    endtry.

    check LR_PR_COMP_SFG is bound.


    move LR_PR_COMP_SFG->GET_MATNR( ) to LS_MFMI_P-MATNR.
    move LR_PR_COMP_SFG->GET_PURCH( ) to LS_MFMI_P-PURCH.

    move 100                          to LS_MFMI_P-MFISP.
    move '%'                          to LS_MFMI_P-MFISP_UOM.

    move LR_PR_COMP_SFG->GET_COMPR( ) to LS_MFMI_P-MFICF.
    move 1                            to LS_MFMI_P-MFICP.

    LR_PR_COMP_SFG->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
    move LS_FOLLE-FOLLE               to LS_MFMI_P-PCLEN.
    move LS_FOLLE-FOLLE_UOM           to LS_MFMI_P-PCLEN_UOM.

    LR_PR_COMP_SFG->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
    move LS_FOLWI-FOLWI               to LS_MFMI_P-PCWID.
    move LS_FOLWI-FOLWI_UOM           to LS_MFMI_P-PCWID_UOM.

    LR_PR_COMP_SFG->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).
    move LS_FOLHE-FOLHE               to LS_MFMI_P-PCHEI.
    move LS_FOLHE-FOLHE_UOM           to LS_MFMI_P-PCHEI_UOM.

    move 1                            to LS_MFMI_P-PCUPS.

    move 'A'                          to LS_MFMI_P-PCDIR.

    move 'ZVCXI_P0_PRODUCT'           to LS_MFMI_P-PCTYP.

    move LR_PR_COMP_SFG->GET_LIFNR( ) to LS_MFMI_P-LIFNR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scale
    loop at IT_PRVDR into LR_GATE.
      try.
***     Check Scale is part of Sheet Procurement
          check LR_GATE->GET_PARENT( ) eq LR_GATE_COMP_SFG.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PSCALE.
      endtry.
      check LR_PR_PSCALE is bound.

      append initial line to LS_MFMI_P-T_PSCALE assigning <S_PSCALE>.

***   Add Price Scales
      move LR_GATE->F_ID       to <S_PSCALE>-ISVCE.

      LS_PSQTY = LR_PR_PSCALE->GET_PSQTY( ).
      move LS_PSQTY-PSQTY      to <S_PSCALE>-PSQTY.
      move LS_PSQTY-PSQTY_UOM  to <S_PSCALE>-PSQTY_UOM.

      LS_PRICE = LR_PR_PSCALE->GET_PRICE( ).
      move LS_PRICE-PRICE      to <S_PSCALE>-PRICE.
      move LS_PRICE-PRICE_CURR to <S_PSCALE>-PRICE_CURR.

      LS_PRICP = LR_PR_PSCALE->GET_PRICP( ).
      move LS_PRICP-PRICP      to <S_PSCALE>-PRICP.
      move LS_PRICP-PRICP_UOM  to <S_PSCALE>-PRICP_UOM.

    endloop.

*** Append Material Flow Material In
    append LS_MFMI_P to ME->T_MFMI_P.

  endloop.
endmethod.
method INIT_BY_SPEC_PCDIM.

  data:          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_AS     type ref to ZCL_VCXI_P0SS_PR_COMP_AS.
  field-symbols: <S_COMP_IN>       type        ZVCXI_P0SR_S_COMP_IN.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions In
  if ME->F_PPASS gt 1.
*** Ignore Size and have fixed PC Direction
    append initial line to ME->T_COMP_IN assigning <S_COMP_IN>.
    move 'A' to <S_COMP_IN>-PCDIR.
  endif.

  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_AS.
        check LR_PR_COMP_AS is bound and
              LR_PR_COMP_AS->GET_PPASS( ) eq ME->F_PPASS.

***     Ignore Size and have fixed PC Direction
        append initial line to ME->T_COMP_IN assigning <S_COMP_IN>.
        move LR_PR_COMP_AS->GET_PPASS( ) to <S_COMP_IN>-PPASS.
        move LR_PR_COMP_AS->GET_COMPR( ) to <S_COMP_IN>-COMPR.
        move 'A'                         to <S_COMP_IN>-PCDIR.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Initialize Standard Unitizing Infos
  SUPER->INIT_BY_SPEC_PCDIM( IR_GATE  = IR_GATE
                             IT_PRVDR = IT_PRVDR ).

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML
              T_COMP_IN    = ME->T_COMP_IN
              F_PPASS      = ME->F_PPASS
              T_MFMI_P     = ME->T_MFMI_P

       result xml RF_XML.

endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_OUT.

  free CT_PCDIM.
  append ME->S_PCDIM_OUT to CT_PCDIM.

endmethod.
