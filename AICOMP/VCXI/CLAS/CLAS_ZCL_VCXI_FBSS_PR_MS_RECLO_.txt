
class ZCL_VCXI_FBSS_PR_MS_RECLO definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_MS_RECLO type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_MS_RECLO' ##NO_TEXT.
  constants C_PARID_FRECL type /VCXI/VKS_PARID value 'ZVCXI_FB_FRECL' ##NO_TEXT.
  constants C_PARID_RCLEN type /VCXI/VKS_PARID value 'ZVCXI_FB_RCLEN' ##NO_TEXT.
  constants C_PARID_RCWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_RCWGT' ##NO_TEXT.
  constants C_PARID_TPRCL type /VCXI/VKS_PARID value 'ZVCXI_FB_TPRCL' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FRECL
    exporting
      !EF_FRECL type ZVCXI_FBS_FRECL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RCLEN
    exporting
      !ES_RCLEN type ZVCXI_FBS_S_RCLEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RCWGT
    exporting
      !ES_RCWGT type ZVCXI_FBS_S_RCWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TPRCL
    exporting
      !EF_TPRCL type ZVCXI_FBS_TPRCL
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_FRECL
    importing
      !IF_FRECL type ZVCXI_FBS_FRECL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RCLEN
    importing
      !IS_RCLEN type ZVCXI_FBS_S_RCLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RCWGT
    importing
      !IS_RCWGT type ZVCXI_FBS_S_RCWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TPRCL
    importing
      !IF_TPRCL type ZVCXI_FBS_TPRCL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_RCWGT type /VCXI/VKSC_IEVNT value 'RECALC_RCWGT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_FRECL_CHANGED type /VCXI/VKSC_IEVNT value 'FRECL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RCLEN_CHANGED type /VCXI/VKSC_IEVNT value 'RCLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RCWGT_CHANGED type /VCXI/VKSC_IEVNT value 'RCWGT_CHANGED' ##NO_TEXT.

  methods CHECK_FRECL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_RCLEN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RCWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_MS_RECLO definition
class ZCL_VCXI_FBSS_PR_MS_RECLO implementation.
method CHECK_FRECL.

*** 0 - Reclosing Factor is maintained.
*** 1 - Reclosing Factor is not maintained.

  data:  LF_FRECL type ZVCXI_FBS_FRECL.

  ME->GET_FRECL( importing EF_FRECL = LF_FRECL ).

  if LF_FRECL is initial.
    move 1 to RF_RETURN.
  else.
    move 0 to RF_RETURN.
  endif.

endmethod.
method CHECK_RCLEN.

*** 0 - Reclosing Length is maintained.
*** 1 - Reclosing Length is not maintained.
*** 2 - Not relevant

  data:  LS_RCLEN type ZVCXI_FBS_S_RCLEN.

  RF_RETURN = 2.

  if ME->R_GATE->F_ID = 'MS_RECLO_L'.
    ME->GET_RCLEN( importing ES_RCLEN = LS_RCLEN ).

    if LS_RCLEN-RCLEN is initial.
      move 1 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.
  endif.

endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Specific Dimension Parameter
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method GET_FRECL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRECL ).
    move LS_PARAM-ATFLV to EF_FRECL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RCLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCLEN ).
    move LS_PARAM-ATFLV to ES_RCLEN-RCLEN.
    move LS_PARAM-UNIT  to ES_RCLEN-RCLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RCWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCWGT ).
    move LS_PARAM-ATFLV to ES_RCWGT-RCWGT.
    move LS_PARAM-UNIT  to ES_RCWGT-RCWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

***--------------------------------------------------------------------------------------
*** Check Reclosing Length
    if ME->CHECK_RCLEN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    elseif ME->CHECK_RCLEN( ) = 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Reclosing Factor
    if ME->CHECK_FRECL( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Reclosing Length
    case ME->CHECK_RCLEN( ).
      when 0.

***     Reclosing Length is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '476' ).


      when 1.

***     Reclosing Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '477' ).


    endcase.

***--------------------------------------------------------------------------------------
*** Check Reclosing Factor
    case ME->CHECK_FRECL( ).
      when 0.

***     Reclosing Factor is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '478' ).


      when 1.

***     Reclosing Factor is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '479' ).


    endcase.

  endmethod.
  method GET_TPRCL.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM,
          LS_TC211T type ZVCXI_FBS_TC211T.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPRCL ).
    move LS_PARAM-ATWRT to EF_TPRCL.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_TPRCL is not initial.

***--------------------------------------------------------------------------------------
*** Get Description
    if EF_DESCR is requested.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC211T into LS_TC211T
                                                with key TPRCL = EF_TPRCL
                                                         LANGU = SY-LANGU.
      if SY-SUBRC is initial.
        EF_DESCR = LS_TC211T-DESCR.
      endif.
    endif.

  endmethod.
  method GET_WERKS.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP type ref to ZCL_VCXI_FBSS_PR_CSTEP_RECLO.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IPRVT_CSTEP_RECLO ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_CSTEP.
      check LR_PR_CSTEP is bound.
      RF_WERKS = LR_PR_CSTEP->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_RCWGT.
        ME->HANDLE_RECALC_RCWGT( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_RCWGT.

    data: LF_MENGE  type        BSTMG,
          LF_MEINS  type        MEINS,
          LF_GEWEI  type        GEWEI,
          LF_BRGEW  type        BRGEW,
          LF_WEIGHT type       NTGEW.
    data: LS_RCWGT type        ZVCXI_FBS_S_RCWGT,
          LS_RCLEN type        ZVCXI_FBS_S_RCLEN,
          LS_CALCV type        ZVCXI_XCS_S_CALCV.

***--------------------------------------------------------------------------------------
**** Get Reclosing Weight (for Unit)
    ME->GET_RCWGT( importing ES_RCWGT = LS_RCWGT ).
    clear LS_RCWGT-RCWGT.

*** Ensure Material Customizing is up-to-date before using it
    ME->HANDLE_INIT_CUST_MATNR( ).

***--------------------------------------------------------------------------------------
    if ME->R_CUST_MATNR is bound.
***   Get Material Data
      call function 'KEPSL_MATERIAL_UNITS_GET'
        exporting
          I_MATNR = ME->R_CUST_MATNR->F_MATNR
        importing
          E_MEINS = LF_MEINS
          E_GEWEI = LF_GEWEI
          E_BRGEW = LF_BRGEW.

***   Define Base Value for Weight
      break HARDCODED_ID.
      case ME->R_GATE->F_ID.
        when 'MS_RECLO_L'.
          ME->GET_RCLEN( importing ES_RCLEN = LS_RCLEN ).
          move LS_RCLEN-RCLEN     to LS_CALCV-CALCV.
          move LS_RCLEN-RCLEN_UOM to LS_CALCV-CALCV_UOM.

        when 'MS_RECLO_P'.
          move 1    to LS_CALCV-CALCV.
          move 'ST' to LS_CALCV-CALCV_UOM.

      endcase.

***   Convert Quantity per Reclose to Base of Material
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT(
        exporting
          IF_MATNR     = ME->R_CUST_MATNR->F_MATNR
          IF_VALUE_IN  = LS_CALCV-CALCV
          IF_UOM_IN    = LS_CALCV-CALCV_UOM
          IF_UOM_OUT   = LF_MEINS
        importing
          EF_VALUE_OUT = LS_CALCV-CALCV
          EF_UOM_OUT   = LS_CALCV-CALCV_UOM ).

***   If Material Base Unit is not Weight
      if ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_CALCV-CALCV_UOM ) ne ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_RCWGT-RCWGT_UOM ).
***     Calculate Reclosing Weight in Material Weight Unit
        LS_CALCV-CALCV     = LF_BRGEW * LS_CALCV-CALCV.
        LS_CALCV-CALCV_UOM = LF_GEWEI.
      endif.

***   Convert to Reclosing Weight Unit
      ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_RCWGT-RCWGT_UOM
                                               changing  CS_CALCV = LS_CALCV ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Reclosing Weight
    move LS_CALCV-CALCV     to LS_RCWGT-RCWGT.
    move LS_CALCV-CALCV_UOM to LS_RCWGT-RCWGT_UOM.
    ME->SET_RCWGT( IS_RCWGT = LS_RCWGT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method INIT_DIM_PARAM.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
    data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

    LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_AVGCO_A or
                            PARID eq C_PARID_AVGCO_L or
                            PARID eq C_PARID_AVGCO_P or
                            PARID eq C_PARID_AVGCO_W ).
      move LS_PARAM-PARID to ME->F_PARID_AVGCO.
      exit.
    endloop.

    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_AVGCP_A or
                            PARID eq C_PARID_AVGCP_L or
                            PARID eq C_PARID_AVGCP_P or
                            PARID eq C_PARID_AVGCP_W ).
      move LS_PARAM-PARID to ME->F_PARID_AVGCP.
      exit.
    endloop.

    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_PRICP_A or
                            PARID eq C_PARID_PRICP_L or
                            PARID eq C_PARID_PRICP_P or
                            PARID eq C_PARID_PRICP_W ).
      move LS_PARAM-PARID to ME->F_PARID_PRICP.
      exit.
    endloop.

  endmethod.
  method SET_FRECL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRECL ).

    move IF_FRECL to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FRECL_CHANGED ).
    endif.

  endmethod.
  method SET_RCLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCLEN ).

    move IS_RCLEN-RCLEN     to LS_PARAM-ATFLV.
    move IS_RCLEN-RCLEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RCLEN_CHANGED ).
    endif.

  endmethod.
  method SET_RCWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCWGT ).

    move IS_RCWGT-RCWGT     to LS_PARAM-ATFLV.
    move IS_RCWGT-RCWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RCWGT_CHANGED ).
    endif.

  endmethod.
  method SET_TPRCL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPRCL ).

    move IF_TPRCL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
