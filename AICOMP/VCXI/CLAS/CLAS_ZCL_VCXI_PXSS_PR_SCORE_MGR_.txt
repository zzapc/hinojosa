
class ZCL_VCXI_PXSS_PR_SCORE_MGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_SCORES_CHANGED type /VCXI/VKSC_IEVNT value 'SCORES_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TAPES_CHANGED type /VCXI/VKSC_IEVNT value 'TAPES_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_SCORE_MGR type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_SCORE_MGR' ##NO_TEXT.
  constants C_JOIPO_NONE type ZVCXI_P0S_JOIPO value 'N' ##NO_TEXT.
  constants C_PARID_SSCOR type /VCXI/VKS_PARID value 'ZVCXI_P0_SSCOR' ##NO_TEXT.
  data F_SCORE_ADJ type ABAP_BOOL read-only .

  methods SET_SCORE_COM
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods CHECK_LAST_SCORE
    importing
      !IF_ISCOR type ZVCXI_P0SS_ISCOR
    returning
      value(RF_LAST_SCORE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods DELETE_SCORE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PANOR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PANOR) type ZVCXI_P0SS_PANOR
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    exporting
      !ER_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_ELEMENTS
    returning
      value(RT_ELEMENT) type ZVCXI_P0SS_TT_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE_COM
    exporting
      !ET_GATE type /VCXI/VKSR_TT_GATE
    returning
      value(RT_SCORE) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods GET_SHT_DIM
    exporting
      !ES_SHTLE type ZVCXI_P0SS_S_SHTLE
      !ES_SHTWI type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_SSCOR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SSCOR) type ZVCXI_P0SS_SSCOR
    raising
      /VCXI/CX_CKX .
  methods SET_TAPE_COM
    importing
      !IT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM
    raising
      /VCXI/CX_CKX .
  methods GET_TAPE_COM
    returning
      value(RT_TAPE_COM) type ZVCXI_PXSS_TT_TAPE_COM
    raising
      /VCXI/CX_CKX .
  methods GET_TSCOR_DEFAULT
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_NSCOR type ZVCXI_P0SS_NSCOR
      !IF_PANOR type ZVCXI_P0SS_PANOR optional
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
    returning
      value(RF_TSCOR) type ZVCXI_P0SS_TSCOR
    raising
      /VCXI/CX_CKX .
  methods SET_PANOR
    importing
      !IF_PANOR type ZVCXI_P0SS_PANOR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SSCOR
    importing
      !IF_SSCOR type ZVCXI_P0SS_SSCOR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_SADMO type /VCXI/VKS_ATTID value 'SCORE_ADJUST_MODE' ##NO_TEXT.
  constants C_IEVNT_I_ADJUST_SCORES type /VCXI/VKSC_IEVNT value 'ADJUST_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_CUST_PRSTY type /VCXI/VKSC_IEVNT value 'INIT_CUST_PRSTY' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SCORES type /VCXI/VKSC_IEVNT value 'INIT_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SCORE_ADJUST type /VCXI/VKSC_IEVNT value 'INIT_SCORE_ADJUST' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SCORES type /VCXI/VKSC_IEVNT value 'RECALC_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_REQ_SCORES_CHANGED type /VCXI/VKSC_IEVNT value 'REQ_SCORES_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_REQ_TAPES_CHANGED type /VCXI/VKSC_IEVNT value 'REQ_TAPES_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_PANOR_CHANGED type /VCXI/VKSC_IEVNT value 'PANOR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SCORE_DELETED type /VCXI/VKSC_IEVNT value 'SCORE_DELETED' ##NO_TEXT.
  constants C_IEVNT_O_SSCOR_CHANGED type /VCXI/VKSC_IEVNT value 'SSCOR_CHANGED' ##NO_TEXT.
  constants C_SADMO_LAST type ZVCXI_P0SS_SADMO value 'L' ##NO_TEXT.
  data F_INIT_SCORES type ABAP_BOOL value ABAP_TRUE ##NO_TEXT.
  data F_SADMO type ZVCXI_P0SS_SADMO .
  data R_CUST_PRSTY type ref to ZCL_VCXI_P0SS_CUST_PRSTY .
  data T_SCORE type ZVCXI_PXSS_TT_SCORE .

  methods GET_PRVDR_CADIF_ONEUP
    exporting
      !ER_GATE_CADIF_ONEUP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_ONEUP) type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SCORE_NUMBER
    raising
      /VCXI/CX_CKX .
  methods CHECK_CUST_PRSTY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PANOR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SSCOR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TAPOS
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods DEL_ALL_SCORES
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_CURR_SCORES
    importing
      !IF_SORTED type ABAP_BOOL default ABAP_TRUE
    returning
      value(RT_SCORE) type ZVCXI_PXSS_TT_SCORE
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_SCORES
    exporting
      value(ET_SCORE) type ZVCXI_PXSS_TT_SCORE
      !EF_CHANGED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_SCORES
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SCORES
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SCORE_ADJUST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SCORES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods INIT_SADMO
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IS_SCORE type ZVCXI_PXSS_S_SCORE
      !IF_CREATE type ABAP_BOOL default ABAP_FALSE
      !IF_INDEX type I optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_CALCM type CHAR01 optional
    changing
      !CR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SCORES
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_SCORE_MGR definition
class ZCL_VCXI_PXSS_PR_SCORE_MGR implementation.
  method ADJUST_SCORE_NUMBER.

    data: LF_INDEX      type I,
          LF_NSCOR_NEW  type ZVCXI_P0SS_NSCOR,
          LF_CSCOR_PREV type ZVCXI_P0SS_CSCOR,
          LF_ISCOR      type ZVCXI_P0SS_ISCOR,
          LF_ADJUST     type ABAP_BOOL.
    data: LS_SCORE_DEL type ZVCXI_PXSS_S_SCORE.
    data: LT_SCORE     type ZVCXI_PXSS_TT_SCORE.
    field-symbols: <S_SCORE>    type ZVCXI_PXSS_S_SCORE.


    LT_SCORE = ME->GET_CURR_SCORES( ).

*** Check score was deleted
    if ME->F_SCORE_ADJ eq ABAP_UNDEFINED.
      loop at ME->T_SCORE into LS_SCORE_DEL.
        read table LT_SCORE with key CSCOR = LS_SCORE_DEL-CSCOR
                                     NSCOR = LS_SCORE_DEL-NSCOR
                            transporting no fields.
        if SY-SUBRC ne 0.
          exit.
        else.
          clear: LS_SCORE_DEL.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Adjust Current one
    loop at LT_SCORE assigning <S_SCORE>.

      add 1 to LF_INDEX.

***   Adjust Score Number
      if LF_CSCOR_PREV ne <S_SCORE>-CSCOR and
         <S_SCORE>-CSCOR is not initial.
        clear: LF_NSCOR_NEW.
      endif.
      add 1 to LF_NSCOR_NEW.
      move LF_NSCOR_NEW to <S_SCORE>-NSCOR.

***   Set Score Category for new one
      if <S_SCORE>-CSCOR is initial.
        move LF_CSCOR_PREV to <S_SCORE>-CSCOR.
      endif.

***   Set changes to Score
      ME->SET_SCORE( IS_SCORE = <S_SCORE>
                     IF_INDEX = LF_INDEX ).

***--------------------------------------------------------------------------------------
***   Do we need to adjust Score Position
      if LS_SCORE_DEL-SCORP is not initial and
         LS_SCORE_DEL-CSCOR eq <S_SCORE>-CSCOR.

***     Set Adjustment if we have the same score
        if LS_SCORE_DEL-NSCOR eq <S_SCORE>-NSCOR.
          LF_ADJUST = ABAP_TRUE.
        endif.
***     Check if we have to adjust last or next
        if ME->F_SADMO eq C_SADMO_LAST.
          clear: LF_ISCOR.
          concatenate <S_SCORE>-CSCOR <S_SCORE>-NSCOR into LF_ISCOR.
          LF_ADJUST = ME->CHECK_LAST_SCORE( IF_ISCOR = LF_ISCOR ).
        endif.

        if LF_ADJUST = ABAP_TRUE.
          <S_SCORE>-SCORP = <S_SCORE>-SCORP + LS_SCORE_DEL-SCORP.
          clear: LS_SCORE_DEL-SCORP.

***       Set changes to Score
          ME->SET_SCORE( IS_SCORE = <S_SCORE>
                         IF_INDEX = LF_INDEX ).
        endif.

      endif.

***--------------------------------------------------------------------------------------
***   Set Previous Score Category
      move <S_SCORE>-CSCOR to LF_CSCOR_PREV.

    endloop.

*** Save Adjusted one
    clear: ME->T_SCORE.
    move LT_SCORE to ME->T_SCORE.

  endmethod.
  method CHECK_CUST_PRSTY.

*** Check Product Style Customizing
    if ME->R_CUST_PRSTY is not bound.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***       Product Style Customizing Reference can't be assigned.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SSC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '101' ).
      endif.
    elseif ME->R_CUST_PRSTY->R_MSG is bound.
***   Collect Messages of Product Style Customizing
      if IR_MESSAGE is bound.
        append lines of ME->R_CUST_PRSTY->R_MSG->T_MSG to IR_MESSAGE->T_MSG.
      endif.
    endif.

  endmethod.
  method CHECK_LAST_SCORE.

    data: LT_SCORE     type ZVCXI_PXSS_TT_SCORE.
    data: LS_SCORE     type ZVCXI_PXSS_S_SCORE,
          LS_SCORE_TMP type ZVCXI_PXSS_S_SCORE.
    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_NSCOR type ZVCXI_P0SS_NSCOR.

    move IF_ISCOR+0(1) to LF_CSCOR.
    move IF_ISCOR+1(2) to LF_NSCOR.

    LT_SCORE = ME->GET_CURR_SCORES( ).

    loop at LT_SCORE into LS_SCORE.
      move LS_SCORE to LS_SCORE_TMP.

*** At last Score Categorie -> check if it match the requested one
      at end of CSCOR.
        check LS_SCORE_TMP-CSCOR eq LF_CSCOR and
              LS_SCORE_TMP-NSCOR eq LF_NSCOR.
        move ABAP_TRUE to RF_LAST_SCORE.
        exit.
      endat.

    endloop.

  endmethod.
  method CHECK_PANOR.

    data: LF_PANOR type ZVCXI_P0SS_PANOR.


*** Get current Panel Orientation
    LF_PANOR = ME->GET_PANOR( ).

***----------------------------------------------------------------------------
    if LF_PANOR is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Panel Orientation is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '406' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check if Panel Orientation is Valid for that Product Style
    if ME->R_CUST_PRSTY is bound and
       LF_PANOR in ME->R_CUST_PRSTY->GET_VALID_PANOR( ).
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Panel Orientation is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '404' ).
      endif.
    else.
      if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = ME->GET_SSCOR( ) ) eq '4'.  "External
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Panel Orientation is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'W'
                                   IF_MSGNO = '405' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Panel Orientation is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '405' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_SCORP.

    data: LF_INITIAL  type I,
          LF_NEGATIVE type I.
    data: LS_SCORE type ZVCXI_PXSS_S_SCORE.
    data: LT_SCORE type ZVCXI_PXSS_TT_SCORE.


*** Check for Initial Scores
    LT_SCORE = ME->GET_CURR_SCORES( IF_SORTED = ABAP_FALSE ).

***----------------------------------------------------------------------------
    if LT_SCORE is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     No Scores are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '412' ).
      endif.
      exit.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Scores are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '407' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check each Score Position
    loop at LT_SCORE into LS_SCORE.
      if LS_SCORE-SCORP eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        add 1 to LF_INITIAL.
      elseif LS_SCORE-SCORP lt 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        add 1 to LF_NEGATIVE.
      endif.
    endloop.

*** Add corresponding Message
    if IR_MESSAGE is bound.
      if LF_INITIAL ne 0 and
         LF_NEGATIVE ne 0.
***     Two or more Scores have a negative/initial Score Positon.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '411' ).
      elseif LF_INITIAL ne 0.
***     One or more Scores have a Score Positon = 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '409' ).

      elseif LF_NEGATIVE ne 0.
***     One or more Scores have a negative Score Positon.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '410' ).

      else.
***     Each Score has a Score Positon > 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '408' ).

      endif.
    endif.

  endmethod.
  method CHECK_SSCOR.

    data: LF_SSCOR type ZVCXI_P0SS_SSCOR.


*** Get current Score Status
    LF_SSCOR = ME->GET_SSCOR( ).

***----------------------------------------------------------------------------
    if LF_SSCOR is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Score Status is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '403' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check if Score Status is valid for that Product Style
    if ME->R_CUST_PRSTY is bound and
       ME->R_CUST_PRSTY->GET_SSCOR_INFO( IF_SSCOR = LF_SSCOR ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Score Status is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '401' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Score Status is maintained but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '402' ).
      endif.
    endif.

  endmethod.
  method CHECK_TAPOS.

    data: LF_INITIAL  type I,
          LF_NEGATIVE type I.
    data: LS_SHTWI    type ZVCXI_P0SS_S_SHTWI,
          LS_TAPOS    type ZVCXI_P0SS_S_TAPOS,
          LS_TAPE_COM type ZVCXI_PXSS_S_TAPE_COM.
    data: LT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM.


***----------------------------------------------------------------------------
*** Get Tapes
    LT_TAPE_COM = ME->GET_TAPE_COM( ).
    check LT_TAPE_COM is not initial.

*** Get Sheet Width
    ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = ME->GET_SCORE_COM( )
                                        importing ES_SHTWI     = LS_SHTWI ).

*** Define default Unit for calculation of total Tape Position
    LS_TAPOS-TAPOS_UOM = LS_SHTWI-SHTWI_UOM.

***----------------------------------------------------------------------------
*** Check each Tape Position and create Sum
    loop at LT_TAPE_COM into LS_TAPE_COM.
      if LS_TAPE_COM-TAPOS eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        add 1 to LF_INITIAL.
      elseif LS_TAPE_COM-TAPOS lt 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        add 1 to LF_NEGATIVE.
      endif.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TAPE_COM-TAPOS
                                                          IF_CALCV_UOM_1 = LS_TAPE_COM-TAPOS_UOM
                                                          IF_CALCV_2     = LS_TAPOS-TAPOS
                                                          IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_TAPOS-TAPOS_UOM
                                                importing EF_CALCV       = LS_TAPOS-TAPOS
                                                          EF_CALCV_UOM   = LS_TAPOS-TAPOS_UOM ).
      if LS_TAPOS-TAPOS gt LS_SHTWI-SHTWI.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      endif.
    endloop.



*** Add corresponding Message
    if IR_MESSAGE is bound.
      if LF_INITIAL  ne 0 or
         LF_NEGATIVE ne 0.
***     One or more Tapes have a negative/initial Positon.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '420' ).
      elseif LS_TAPOS-TAPOS gt LS_SHTWI-SHTWI.
***     Sum of Tape Positions exceed Sheet Width.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '422' ).

      else.
***     Each Tape has a Positon > 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '421' ).

      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Score adjust Mode
    ME->INIT_SADMO( ).

*** To be redefined. Set Product Style Type - F_TPRST

  endmethod.
  method DEL_ALL_SCORES.

    data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
    data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

*** Get all Scores
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE = ABAP_TRUE ).

*** Free all
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
method DELETE_SCORE.

  check IR_GATE is bound.
  IR_GATE->DO_FREE( ).

  check IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORE_DELETED ).

endmethod.
method GET_BOXPA.

*** To be redefined.
  return.

endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.

    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_CADLS = LR_PR_CADIF_ONEUP->GET_CADLS( ).

  endmethod.
method GET_CURR_SCORES.

  data: LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.
  field-symbols: <S_SCORE>          type        ZVCXI_PXSS_S_SCORE.

***--------------------------------------------------------------------------------------
*** Get all Scores
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = IF_SORTED ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
        check LR_PR_SCORE is bound.
        append initial line to RT_SCORE assigning <S_SCORE>.

***     Get Score Number and Count
        LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = <S_SCORE>-CSCOR
                                          EF_NSCOR = <S_SCORE>-NSCOR ).

        <S_SCORE>-S_SCORP = LR_PR_SCORE->GET_SCORP( ).
        <S_SCORE>-TSCOR   = LR_PR_SCORE->GET_TSCOR( ).
        <S_SCORE>-FSLIN   = LR_PR_SCORE->GET_FSLIN( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_CUST_SCORES.

    data: LF_PANOR type ZVCXI_P0SS_PANOR,
          LF_WERKS type WERKS_D,
          LF_PTYPE type ZVCXI_P0S_PTYPE,
          LF_JOIPO type ZVCXI_P0S_JOIPO,
          LF_BOXPA type ZVCXI_P0SS_BOXPA,
          LF_DCONF type DATS.
    data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT,
          LT_SCORE   type ZVCXI_P0SS_TT_SCORE.
    field-symbols: <S_SCORE> type ZVCXI_PXSS_S_SCORE.


    if ME->R_CUST_PRSTY is not bound.
      move ABAP_TRUE to EF_CHANGED.
      exit.
    endif.

***----------------------------------------------------------------------------
*** Collect generall Data
    LF_PANOR = ME->GET_PANOR( ).
    LF_WERKS = ME->GET_WERKS( ).
    LF_BOXPA = ME->GET_BOXPA( ).

*** Joint Position and Product Type
    LF_JOIPO = ME->GET_JOIPO( ).
    LF_PTYPE = ME->GET_PTYPE( ).
    LF_DCONF = ME->GET_DCONF( ).

*** Collect Elements
    LT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ).

***----------------------------------------------------------------------------
*** Request Scores
    ME->R_CUST_PRSTY->GET_PRSTY_SCORES( exporting IF_BOXPA   = LF_BOXPA
                                                  IF_PANOR   = LF_PANOR
                                                  IT_ELEMENT = LT_ELEMENT
                                                  IF_WERKS   = LF_WERKS
                                                  IF_PTYPE   = LF_PTYPE
                                                  IF_JOIPO   = LF_JOIPO
                                                  IF_DATE    = LF_DCONF
                                        importing ET_SCORE   = LT_SCORE
                                                  EF_CHANGED = EF_CHANGED ).

    move-corresponding LT_SCORE to ET_SCORE.

*** Get Slot Indicators of each Score
    loop at ET_SCORE assigning <S_SCORE>.
      <S_SCORE>-FSLIN = ME->R_CUST_PRSTY->GET_FSLIN( IF_CSCOR = <S_SCORE>-CSCOR
                                                     IF_NSCOR = <S_SCORE>-NSCOR ).
    endloop.

***----------------------------------------------------------------------------
*** Identify change
    if ET_SCORE ne ME->T_SCORE.
      EF_CHANGED = ABAP_TRUE.
    endif.

  endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_JOIPO.

*** To be redefinde
  move C_JOIPO_NONE to RF_JOIPO.

endmethod.
  method GET_PANOR.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

***----------------------------------------------------------------------------
*** Get Leading Ojbect
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move LS_LEOKY-LEOKY      to RF_PANOR.
    move LS_LEOKY-SETBY      to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PANOR_DESCR( IF_PANOR = RF_PANOR ).
    endif.

  endmethod.
method GET_PRSTY.

*** To be redefined.
  return.

endmethod.
method GET_PRSTY_ELEMENTS.

*** To be redefined.
  return.

endmethod.
  method GET_PRVDR_CADIF_ONEUP.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get CAD Integration provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get CAD Integration Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_CADIF_ONEUP.
          check RR_PR_CADIF_ONEUP is bound.
          move LR_GATE to ER_GATE_CADIF_ONEUP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CADIF_ONEUP, ER_GATE_CADIF_ONEUP.
      endtry.
    endloop.

  endmethod.
method GET_PTYPE.

*** Hardcoded until own Customizing
  break HARDCODED.
  RF_PTYPE = '-'.
  return.

endmethod.
  method GET_SCORE_COM.

    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.


*** Get Gates of Score
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at ET_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.

***       Add Score Definition
          append value #( ISCOR   = LR_PR_SCORE->GET_ISCOR( )
                          S_SCORP = LR_PR_SCORE->GET_SCORP( )
                          TSCOR   = LR_PR_SCORE->GET_TSCOR( )
                          FSLIN   = LR_PR_SCORE->GET_FSLIN( )
                        ) to RT_SCORE.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    sort RT_SCORE by ISCOR.

  endmethod.
  method GET_SHT_DIM.

    data: LF_CSCOR_L type        ZVCXI_P0SS_CSCOR,
          LF_CSCOR_C type        ZVCXI_P0SS_CSCOR,
          LF_CSCOR   type        ZVCXI_P0SS_CSCOR.
    data: LS_SCORP type        ZVCXI_P0SS_S_SCORP.
    data: LT_GATE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.


*** Get Score Category for Length and Width
    LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    LF_CSCOR_C = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).

***--------------------------------------------------------------------------------------
*** Get Gates of Score
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE  = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.

      try.
          clear: LR_PR_SCORE, LF_CSCOR, LS_SCORP.

          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.

***       Score Position
          LS_SCORP = LR_PR_SCORE->GET_SCORP( ).

***       Get Score Category
          LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = LF_CSCOR ).

***--------------------------------------------------------------------------------------
***       Add Score Position to Sheet Size
          case LF_CSCOR.
            when LF_CSCOR_L.
              if ES_SHTLE is initial.
                ES_SHTLE-SHTLE     = LS_SCORP-SCORP.
                ES_SHTLE-SHTLE_UOM = LS_SCORP-SCORP_UOM.
              else.
                ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORP-SCORP
                                                                    IF_CALCV_UOM_1 = LS_SCORP-SCORP_UOM
                                                                    IF_CALCV_2     = ES_SHTLE-SHTLE
                                                                    IF_CALCV_UOM_2 = ES_SHTLE-SHTLE_UOM
                                                                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                    IF_UOM         = ES_SHTLE-SHTLE_UOM
                                                          importing EF_CALCV       = ES_SHTLE-SHTLE
                                                                    EF_CALCV_UOM   = ES_SHTLE-SHTLE_UOM ).
              endif.

            when LF_CSCOR_C.
              if ES_SHTWI is initial.
                ES_SHTWI-SHTWI     = LS_SCORP-SCORP.
                ES_SHTWI-SHTWI_UOM = LS_SCORP-SCORP_UOM.
              else.
                ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORP-SCORP
                                                                    IF_CALCV_UOM_1 = LS_SCORP-SCORP_UOM
                                                                    IF_CALCV_2     = ES_SHTWI-SHTWI
                                                                    IF_CALCV_UOM_2 = ES_SHTWI-SHTWI_UOM
                                                                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                    IF_UOM         = ES_SHTWI-SHTWI_UOM
                                                          importing EF_CALCV       = ES_SHTWI-SHTWI
                                                                    EF_CALCV_UOM   = ES_SHTWI-SHTWI_UOM ).
              endif.
          endcase.


        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***--------------------------------------------------------------------------------------
*** No Negative Sheet Dimension
    ES_SHTLE-SHTLE = cond #( when ES_SHTLE-SHTLE lt 0 then 0 else ES_SHTLE-SHTLE ).
    ES_SHTWI-SHTWI = cond #( when ES_SHTWI-SHTWI lt 0 then 0 else ES_SHTWI-SHTWI ).

  endmethod.
  method GET_SSCOR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SSCOR ).
    move LS_PARAM-ATWRT to RF_SSCOR.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_INFO( IF_SSCOR = RF_SSCOR )-SSCOR_DESCR.
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Product Style Customizing
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CUST_PRSTY( ) ).

***----------------------------------------------------------------------------
*** Check Score Status
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SSCOR( ) ).

*** Check Panel Orientation is filled
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PANOR( ) ).

*** Check Scores and Score Position
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SCORP( ) ).

*** Check Tape Positions
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TAPOS( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Product Style Customizing
    ME->CHECK_CUST_PRSTY( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Score Status
    ME->CHECK_SSCOR( IR_MESSAGE = IR_MESSAGE ).

*** Check Panel Orientation
    ME->CHECK_PANOR( IR_MESSAGE = IR_MESSAGE ).

*** Check Scores and Score Position
    ME->CHECK_SCORP( IR_MESSAGE = IR_MESSAGE ).

*** Check Tape Positions
    ME->CHECK_TAPOS( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TAPE_COM.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_TAPE type ref to ZCL_VCXI_PXSS_PR_TAPE.


*** Get Gates of Tapes
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_TAPE=>C_IPRVT_PX_TAPE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_TAPE.
      check LR_PR_TAPE is bound.

      append value #( DIMEN   = LR_PR_TAPE->GET_DIMEN( )
                      TTAPE   = LR_PR_TAPE->GET_TTAPE( )
                      S_TAPOS = LR_PR_TAPE->GET_TAPOS( )
                    ) to RT_TAPE_COM.
    endloop.

  endmethod.
  method GET_TSCOR_DEFAULT.

    check ME->R_CUST_PRSTY is bound.
    RF_TSCOR = ME->R_CUST_PRSTY->GET_TSCOR_DEFAULT( IF_CSCOR = IF_CSCOR
                                                    IF_NSCOR = IF_NSCOR
                                                    IF_PANOR = cond #( when IF_PANOR is supplied then IF_PANOR
                                                                                                 else ME->GET_PANOR( ) )
                                                    IF_BOXPA = cond #( when IF_BOXPA is supplied then IF_BOXPA
                                                                                                 else ME->GET_BOXPA( ) ) ).

  endmethod.
  method GET_WERKS.

    case type of ME->R_GATE->GET_PARENT( )->R_CLSPR.
***   Finished Good
      when type ZCL_VCXI_PXSS_PR_XFG into data(LR_PR_XFG).
        RF_WERKS = LR_PR_XFG->GET_WERKS( ).

***   Part
      when type ZCL_VCXI_PXSS_PR_XPART into data(LR_PR_XPART).
        RF_WERKS = LR_PR_XPART->GET_WERKS( ).

***   Others (e.g. Procurement Detail)
      when others.
        RF_WERKS =  ME->R_GATE->GET_APPDATA( )->F_WERKS.

    endcase.

  endmethod.
  method HANDLE_ADJUST_SCORES.

    data: LF_ISCOR type        ZVCXI_P0SS_ISCOR,
          LF_INDEX type        I.
    data: LS_SCORP_DIFF    type        ZVCXI_P0SS_S_SCORP,
          LS_SCORP         type        ZVCXI_P0SS_S_SCORP,
          LS_SCORE_CHANGED type        ZVCXI_PXSS_S_SCORE.
    data: LT_SCORE_CHANGED type        ZVCXI_PXSS_TT_SCORE,
          LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.
    field-symbols: <S_SCORE>          type        ZVCXI_PXSS_S_SCORE.


    check ME->R_CUST_PRSTY is bound.

    ME->HANDLE_INIT_SCORE_ADJUST( ).

*** Check Score Status Calculation Method -> half automatic -> adjust
    if ME->F_SCORE_ADJ eq ABAP_UNDEFINED.

      move IT_GATE to LT_GATE.

***   Sort Incomming Changes
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

***   Collect Changes
      loop at LT_GATE into LR_GATE.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
            check LR_PR_SCORE is bound.
            append initial line to LT_SCORE_CHANGED assigning <S_SCORE>.

***         Get Score Number and Count
            LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = <S_SCORE>-CSCOR
                                              EF_NSCOR = <S_SCORE>-NSCOR ).

            LS_SCORP = LR_PR_SCORE->GET_SCORP( ).
            move-corresponding LS_SCORP to <S_SCORE>.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   Adjust Current Scores
      loop at ME->T_SCORE assigning <S_SCORE>.
        LF_INDEX = SY-TABIX.
        read table LT_SCORE_CHANGED into LS_SCORE_CHANGED
          with key CSCOR = <S_SCORE>-CSCOR
                   NSCOR = <S_SCORE>-NSCOR.

***     Score has changed
        if SY-SUBRC        eq 0                      and
           <S_SCORE>-SCORP ne LS_SCORE_CHANGED-SCORP.
          LS_SCORP_DIFF-SCORP = LS_SCORP_DIFF-SCORP + ( <S_SCORE>-SCORP - LS_SCORE_CHANGED-SCORP ).

***       Save new Score Position
          <S_SCORE>-SCORP = LS_SCORE_CHANGED-SCORP.

***     Score has not really changed
        elseif SY-SUBRC        eq 0                      and
               <S_SCORE>-SCORP eq LS_SCORE_CHANGED-SCORP.
          continue.

***     Score is not changed -> but we have something to adjust.
        elseif SY-SUBRC            ne 0           and
               LS_SCORP_DIFF-SCORP is not initial.

***       Check if we have to adjust last or next
          if ME->F_SADMO eq C_SADMO_LAST.
            clear: LF_ISCOR.
            concatenate <S_SCORE>-CSCOR <S_SCORE>-NSCOR into LF_ISCOR.
            check ME->CHECK_LAST_SCORE( IF_ISCOR = LF_ISCOR ) eq ABAP_TRUE.
          endif.

***       Save Adjusted one
          <S_SCORE>-SCORP = <S_SCORE>-SCORP + LS_SCORP_DIFF-SCORP.
          clear: LS_SCORP_DIFF-SCORP.

***       Set changes to Score
          ME->SET_SCORE( IS_SCORE = <S_SCORE>
                         IF_INDEX = LF_INDEX ).

        endif.

      endloop.

    endif.

*** Check Score Status Calculation Method -> not automatic
    if ME->F_SCORE_ADJ ne ABAP_FALSE.

*** Adjust Score Number's (Add delete Score)
      ME->ADJUST_SCORE_NUMBER( ).

    endif.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORES_CHANGED ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_CUST_PRSTY.
        ME->HANDLE_INIT_CUST_PRSTY( ).

      when C_IEVNT_I_INIT_SCORES.
        ME->HANDLE_INIT_SCORES( IT_GATE = IT_GATE_PROVIDER ).
      when C_IEVNT_I_INIT_SCORE_ADJUST.
        ME->HANDLE_INIT_SCORE_ADJUST( ).

      when C_IEVNT_I_ADJUST_SCORES.
        ME->HANDLE_ADJUST_SCORES( IT_GATE = IT_GATE_PROVIDER ).
      when C_IEVNT_I_RECALC_SCORES.
        ME->HANDLE_RECALC_SCORES( ).

      when C_IEVNT_I_REQ_SCORES_CHANGED.
        ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORES_CHANGED ).
      when C_IEVNT_I_REQ_TAPES_CHANGED.
        ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TAPES_CHANGED ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_PRSTY.

    data: LF_OWNER type /VCXI/CKX_STRING,
          LF_SYSOM type /VCXI/VKS_SYSOM.
    data: LS_PRSTY type ZVCXI_P0SSC_S_PRSTY.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


    ME->GET_PRSTY( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    if LR_CUST_PRSTY is bound.
      LS_PRSTY = LR_CUST_PRSTY->GET_PRSTY( ).
    endif.

    LF_OWNER = ME->R_GATE->F_GATKY.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_SYSOM = LF_SYSOM ).

*** Reload Scores from scratch on change of Product Style with automatic calculation logic (reset defaults)
    if ME->R_CUST_PRSTY is bound and
       ME->R_CUST_PRSTY->F_PRSTY ne LS_PRSTY-PRSTY and
       ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = ME->GET_SSCOR( ) ) eq '1'.  "Automatic
      ME->DEL_ALL_SCORES( ).
      clear: ME->T_SCORE.
    endif.

*** Check if Customizing is the right one
    if ME->R_CUST_PRSTY is not bound or
       ME->R_CUST_PRSTY->F_PRSTY ne LS_PRSTY-PRSTY or
       ME->R_CUST_PRSTY->F_OWNER ne LF_OWNER or
       ME->R_CUST_PRSTY->F_SYSOM ne LF_SYSOM.

      free: ME->R_CUST_PRSTY.

      if LS_PRSTY-PRSTY is not initial.
        try.
            ME->R_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LS_PRSTY-TPRST
                                                                       IF_PRSTY = LS_PRSTY-PRSTY
                                                                       IF_OWNER = LF_OWNER
                                                                       IF_SYSOM = LF_SYSOM ).

          catch /VCXI/CX_CKX.
            free: ME->R_CUST_PRSTY.
        endtry.
      endif.
    endif.

  endmethod.
  method HANDLE_INIT_SCORE_ADJUST.

    data: LF_SSCOR  type  ZVCXI_P0SS_SSCOR.

*** Start negativ
    move ABAP_FALSE to ME->F_SCORE_ADJ.

    LF_SSCOR = ME->GET_SSCOR( ).

*** Check Score Status Calculation Method -> half automatic -> adjust
    case  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ).
      when '1'.
***     No Adjust
        move ABAP_FALSE to ME->F_SCORE_ADJ.

      when '2'.
***     Adjust allowed half
        move ABAP_UNDEFINED to ME->F_SCORE_ADJ.

      when '3'.
***     Adjust allowed totally
        move ABAP_TRUE to ME->F_SCORE_ADJ.

      when '4'.
***     No Adjust
        move ABAP_FALSE to ME->F_SCORE_ADJ.

      when others.
***     No Adjust
        move ABAP_FALSE to ME->F_SCORE_ADJ.

    endcase.

  endmethod.
method HANDLE_INIT_SCORES.

  move ABAP_FALSE to ME->F_INIT_SCORES.

endmethod.
  method HANDLE_RECALC_SCORES.

    data: LF_SSCOR   type ZVCXI_P0SS_SSCOR.
    data: LF_CHANGED type ABAP_BOOL.

    ME->HANDLE_INIT_CUST_PRSTY( ).

    if ME->R_CUST_PRSTY is not bound .
***   Delete all Scores if the Product Style not instantiated
      ME->DEL_ALL_SCORES( ).
      clear: ME->T_SCORE.
      exit.
    endif.

    LF_SSCOR = ME->GET_SSCOR( ).
    if LF_SSCOR is initial.
***   Delete all Scores if the Score Calculation logic is initial
      ME->DEL_ALL_SCORES( ).
      clear: ME->T_SCORE.
      exit.
    endif.

*** Check Score Status Calculation Method -> only automatic -> recalc
    if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) eq '1'.
***   Get Scores
      ME->GET_CUST_SCORES( importing ET_SCORE   = ME->T_SCORE
                                     EF_CHANGED = LF_CHANGED ).

    elseif ME->R_CUST_PRSTY          is bound   and
           ME->R_CUST_PRSTY->F_TPRST is initial and
           ME->R_CUST_PRSTY->F_PRSTY is initial.
***   No Consistent Productstyle Customizing
      clear: ME->T_SCORE.
      LF_CHANGED = ABAP_TRUE.
    endif.

*** Update Scores if they are changed
    check LF_CHANGED eq ABAP_TRUE.

    if ME->T_SCORE is initial.
***   Delete all Scores
      ME->DEL_ALL_SCORES( ).
    else.
      ME->UPDATE_SCORES( ).
    endif.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORES_CHANGED ).

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_SADMO.

  data:          LS_ATTRI         type        /VCXI/VKS_S_ATTRI.

***----------------------------------------------------------------------------
*** Get Score Adjust mode (by Attribute)
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SADMO ).
    catch /VCXI/CX_CKX.
      clear LS_ATTRI.
  endtry.

  if LS_ATTRI is not initial.
    condense LS_ATTRI-ATTVA no-gaps.
    move LS_ATTRI-ATTVA to ME->F_SADMO.
  endif.

endmethod.
method SET_PANOR.

  data:  LF_CHANGED type  ABAP_BOOL.
  data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.

  if IF_PANOR is not initial.
    move IF_PANOR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.
  else.
    clear LS_LEOKY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PANOR_CHANGED ).
  endif.

endmethod.
  method SET_SCORE.

    data: LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.


***--------------------------------------------------------------------------------------
*** Get all Scores if we are not in create mode
    if IF_CREATE eq ABAP_FALSE and
       IF_INDEX  is supplied.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                       IF_INUSE  = ABAP_TRUE
                                       IF_SORTED = ABAP_TRUE ).
      read table LT_GATE into CR_GATE index IF_INDEX.
      check SY-SUBRC eq 0.
    endif.

*** Create Score
    if IF_CREATE eq ABAP_TRUE.
      CR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE ).

      if CR_GATE->IS_INUSE( ) ne ABAP_TRUE.
        CR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.
    endif.

*** Get Score Reference
    check CR_GATE is bound.
    move CR_GATE->R_CLSPR ?to LR_PR_SCORE.
    check LR_PR_SCORE is bound.

***--------------------------------------------------------------------------------------
*** Set Score Categorie and Number
    LR_PR_SCORE->SET_ISCOR( IF_CSCOR = IS_SCORE-CSCOR
                            IF_NSCOR = IS_SCORE-NSCOR ).

    if IF_SETBY is supplied.
***   Set Score Position
      LR_PR_SCORE->SET_SCORP( IS_SCORP = IS_SCORE-S_SCORP
                              IF_SETBY = IF_SETBY ).
***   Set Score Type
      LR_PR_SCORE->SET_TSCOR( IF_TSCOR = IS_SCORE-TSCOR
                              IF_SETBY = IF_SETBY ).
***   Set Slot Indicator
      LR_PR_SCORE->SET_FSLIN( IF_FSLIN = IS_SCORE-FSLIN
                              IF_SETBY = IF_SETBY ).
    else.
      if IF_CALCM eq '1'.    "Automatic is set by CALC
***     Set Score Position
        LR_PR_SCORE->SET_SCORP( IS_SCORP = IS_SCORE-S_SCORP
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
***     Set Slot Indicator
        LR_PR_SCORE->SET_FSLIN( IF_FSLIN = IS_SCORE-FSLIN
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      else.
***     Set Score Position
        LR_PR_SCORE->SET_SCORP( IS_SCORP = IS_SCORE-S_SCORP ).
***     Set Slot Indicator
        LR_PR_SCORE->SET_FSLIN( IF_FSLIN = IS_SCORE-FSLIN ).
      endif.
***   Note: Score Type is not set, as IS_SCORE might not hold the default score type. This is done through DVC
    endif.

  endmethod.
  method SET_SCORE_COM.

    data: LF_CALCM type CHAR01.


*** Check Score Status Calculation Method is fully manual
    LF_CALCM = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = ME->GET_SSCOR( ) ).
    check LF_CALCM eq '3' or
          LF_CALCM eq '4'.

*** Remove all existing Scores
    ME->DEL_ALL_SCORES( ).
    clear: ME->T_SCORE.

*** Build new Score Definition
    ME->T_SCORE = value #( for LS_SCORE_COM in IT_SCORE_COM ( CSCOR   = LS_SCORE_COM-ISCOR(1)
                                                              NSCOR   = LS_SCORE_COM-ISCOR+1
                                                              S_SCORP = LS_SCORE_COM-S_SCORP
                                                              TSCOR   = LS_SCORE_COM-TSCOR
                                                              FSLIN   = LS_SCORE_COM-FSLIN ) ).
*** Update Scores
    ME->UPDATE_SCORES( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
method SET_SSCOR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SSCOR ).

  move IF_SSCOR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SSCOR_CHANGED ).
  endif.

endmethod.
  method SET_TAPE_COM.

    data: LS_TAPE_COM type ZVCXI_PXSS_S_TAPE_COM.
    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_TAPE type ref to ZCL_VCXI_PXSS_PR_TAPE.


***--------------------------------------------------------------------------------------
*** Get Gates of Tapes
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_TAPE=>C_IPRVT_PX_TAPE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at IT_TAPE_COM into LS_TAPE_COM.
***   Reuse/Create Element
      LR_GATE = value #( LT_GATE[ 1 ] default ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_TAPE=>C_IPRVT_PX_TAPE ) ).
      delete LT_GATE where TABLE_LINE = LR_GATE.

      if LR_GATE->IS_INUSE( ) ne ABAP_TRUE.
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.

      LR_PR_TAPE ?= LR_GATE->R_CLSPR.
      check LR_PR_TAPE is bound.

***   Set Tape Type
      LR_PR_TAPE->SET_TTAPE( IF_TTAPE = LS_TAPE_COM-TTAPE
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
***   Set Tape Position
      LR_PR_TAPE->SET_TAPOS( IS_TAPOS = LS_TAPE_COM-S_TAPOS
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endloop.

***--------------------------------------------------------------------------------------
*** Remove Tapes that are no longer needed
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
  method UPDATE_SCORES.

    data: LF_CALCM type CHAR01.
    data: LS_SCORE type ZVCXI_PXSS_S_SCORE.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


    LF_CALCM = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = ME->GET_SSCOR( ) ).

***--------------------------------------------------------------------------------------
*** Get all Scores
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

*** Update Scores or create new one
    loop at ME->T_SCORE into LS_SCORE.
      read table LT_GATE into LR_GATE index 1.
      if SY-SUBRC eq 0.
***     Update Score
        if IF_SETBY is supplied.
          ME->SET_SCORE( exporting IS_SCORE = LS_SCORE
                                   IF_SETBY = IF_SETBY
                         changing  CR_GATE  = LR_GATE ).
        else.
          ME->SET_SCORE( exporting IS_SCORE = LS_SCORE
                                   IF_CALCM = LF_CALCM
                         changing  CR_GATE  = LR_GATE ).
        endif.

***     Remove from List of available Scores
        delete LT_GATE where TABLE_LINE eq LR_GATE.

      else.
***     Create new Score
        if IF_SETBY is supplied.
          ME->SET_SCORE( IS_SCORE  = LS_SCORE
                         IF_CREATE = ABAP_TRUE
                         IF_SETBY  = IF_SETBY ).
        else.
          ME->SET_SCORE( IS_SCORE  = LS_SCORE
                         IF_CALCM  = LF_CALCM
                         IF_CREATE = ABAP_TRUE ).
        endif.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Remove Scores that are no longer needed
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
