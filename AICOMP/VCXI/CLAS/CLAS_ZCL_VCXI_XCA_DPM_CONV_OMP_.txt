
class ZCL_VCXI_XCA_DPM_CONV_OMP definition
  public
  inheriting from ZCL_VCXI_XCA_DPM_CONV
  create public .

public section.

  constants C_ICVRT_OMP_BOOL type ZVCXI_XCA_DPM_ICVRT value 'OMP_BOOL' ##NO_TEXT.
  constants C_ICVRT_OMP_RELTIME type ZVCXI_XCA_DPM_ICVRT value 'OMP_RELTIME' ##NO_TEXT.
  constants C_ICVRT_OMP_TSTMP type ZVCXI_XCA_DPM_ICVRT value 'OMP_TSTMP' ##NO_TEXT.
  constants C_ICVRT_OMP_UNIT type ZVCXI_XCA_DPM_ICVRT value 'OMP_UNIT' ##NO_TEXT.
  constants C_ICVRT_OMP_PCDIR type ZVCXI_XCA_DPM_ICVRT value 'OMP_PCDIR' ##NO_TEXT.

  methods CONV_TO_OUTPUT
    redefinition .
  methods CONV_TO_INPUT
    redefinition .
protected section.

  methods CONV_OUT_OMP_UNIT
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_OUT_OMP_BOOL
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_OUT_OMP_TSTMP
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_OUT_OMP_RELTIME
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_OUT_OMP_PCDIR
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_IN_OMP_TSTMP
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    changing
      value(CF_VALUE) type ANY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCA_DPM_CONV_OMP definition
class ZCL_VCXI_XCA_DPM_CONV_OMP implementation.
  method CONV_IN_OMP_TSTMP.

    check strlen( IF_VALUE ) eq 19.

*** Convert e.g. “24/11/2022 08:30:00” to 20221124083000
    CF_VALUE = IF_VALUE+6(4)  && IF_VALUE+3(2)  && IF_VALUE+0(2) &&      "Date
               IF_VALUE+11(2) && IF_VALUE+14(2) && IF_VALUE+17(2).       "Time

  endmethod.
  method CONV_OUT_OMP_BOOL.

    RF_VALUE = switch #( IF_VALUE when ABAP_TRUE  then 'Yes'
                                  when ABAP_FALSE then 'No' ).

  endmethod.
  method CONV_OUT_OMP_PCDIR.

    case IF_VALUE.
      when 'A'.
        RF_VALUE = 'lying'.
      when 'B'.
        RF_VALUE = 'standing'.
    endcase.

  endmethod.
  method CONV_OUT_OMP_RELTIME.
*** Convert e.g. 3,5 h to "+ 0w 0d 0h 0m 0s”

    data: LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.


    check IF_VALUE is not initial.

***------------------------------------------------------------------------------------------------
*** Get RTTS Instance and translate References
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA_REF( exporting  P_DATA_REF           = IR_DATA
                                             receiving  P_DESCR_REF          = LR_TYPEDESCR
                                             exceptions REFERENCE_IS_INITIAL = 1 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    cast CL_ABAP_STRUCTDESCR( LR_TYPEDESCR )->GET_DDIC_FIELD_LIST( exporting  P_INCLUDING_SUBSTRUCTRES = ABAP_TRUE
                                                                   receiving  P_FIELD_LIST             = data(LT_DDFIELDS)
                                                                   exceptions NOT_FOUND                = 1
                                                                              NO_DDIC_TYPE             = 2 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Unit using Reference Field
    data(LF_REFFIELD) = value #( LT_DDFIELDS[ FIELDNAME = IS_VALMP-FLDNA ]-REFFIELD optional ).
    check LF_REFFIELD is not initial.

    assign IR_DATA->* to field-symbol(<DATA>).
    assign component IS_VALMP-FLDNA of structure <DATA> to field-symbol(<F_UOM>).

***------------------------------------------------------------------------------------------------
***
    break TBD. " Determine optimized calculation of Relative Time

  endmethod.
  method CONV_OUT_OMP_TSTMP.

    data: LF_TSTAMP type CHAR14.


    check IF_VALUE is not initial.

*** Convert e.g. 20221124083000 to “24/11/2022 08:30:00”
    LF_TSTAMP = |{ IF_VALUE }|.
    RF_VALUE = |{ LF_TSTAMP+6(2) }/{ LF_TSTAMP+4(2) }/{ LF_TSTAMP+0(4) }  { LF_TSTAMP+8(2) }:{ LF_TSTAMP+10(2) }:{ LF_TSTAMP+12(2) }|.

  endmethod.
  method CONV_OUT_OMP_UNIT.

    case IF_VALUE.
      when 'ST'.
        RF_VALUE = 'piece'.
      when 'GM2'.
        RF_VALUE = 'g/m2'.
      when 'KGF'.
        RF_VALUE = 'kg/m2'.
      when others.
        RF_VALUE = TO_LOWER( IF_VALUE ).
    endcase.

  endmethod.
  method CONV_TO_INPUT.

    case IS_VALMP-ICVRT.
***------------------------------------------------------------------------------------------------
****   Convert SAP Unit from OMP's Code
*      when C_ICVRT_OMP_UNIT.
*        ME->CONV_IN_OMP_UNIT( exporting IF_VALUE = IF_VALUE
*                                        IR_DATA  = IR_DATA
*                                        IS_VALMP = IS_VALMP
*                              changing  CF_VALUE = CF_VALUE ).

****   Convert ABAP Boolen to OMP's Values
*      when C_ICVRT_OMP_BOOL.
*        ME->CONV_IN_OMP_BOOL( exporting IF_VALUE = IF_VALUE
*                                        IR_DATA  = IR_DATA
*                                        IS_VALMP = IS_VALMP
*                              changing  CF_VALUE = CF_VALUE ).

***   Convert Timestamp to OMP's Format
      when C_ICVRT_OMP_TSTMP.
        ME->CONV_IN_OMP_TSTMP( exporting IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP
                                changing  CF_VALUE = CF_VALUE ).

****   Convert Duration to OMP's Relative Time
*      when C_ICVRT_OMP_RELTIME.
*         ME->CONV_IN_OMP_RELTIME( exporting IF_VALUE = IF_VALUE
*                                            IR_DATA  = IR_DATA
*                                            IS_VALMP = IS_VALMP
*                                  changing  CF_VALUE = CF_VALUE ).

****   Convert PC Direction to OMP's Board Input
*      when C_ICVRT_OMP_PCDIR.
*         ME->CONV_IN_OMP_PCDIR( exporting IF_VALUE = IF_VALUE
*                                          IR_DATA  = IR_DATA
*                                          IS_VALMP = IS_VALMP
*                                changing  CF_VALUE = CF_VALUE ).

***------------------------------------------------------------------------------------------------
      when others.
        SUPER->CONV_TO_INPUT( exporting IF_VALUE = IF_VALUE
                                        IR_DATA  = IR_DATA
                                        IS_VALMP = IS_VALMP
                              changing  CF_VALUE = CF_VALUE ).
    endcase.

  endmethod.
  method CONV_TO_OUTPUT.

    case IS_VALMP-ICVRT.
***------------------------------------------------------------------------------------------------
***   Convert SAP Unit to OMP's Code
      when C_ICVRT_OMP_UNIT.
        RF_VALUE = ME->CONV_OUT_OMP_UNIT( IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP ).

***   Convert ABAP Boolen to OMP's Values
      when C_ICVRT_OMP_BOOL.
        RF_VALUE = ME->CONV_OUT_OMP_BOOL( IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP ).

***   Convert Timestamp to OMP's Format
      when C_ICVRT_OMP_TSTMP.
        RF_VALUE = ME->CONV_OUT_OMP_TSTMP( IF_VALUE = IF_VALUE
                                           IR_DATA  = IR_DATA
                                           IS_VALMP = IS_VALMP ).

***   Convert Duration to OMP's Relative Time
      when C_ICVRT_OMP_RELTIME.
        RF_VALUE = ME->CONV_OUT_OMP_RELTIME( IF_VALUE = IF_VALUE
                                             IR_DATA  = IR_DATA
                                             IS_VALMP = IS_VALMP ).

***   Convert PC Direction to OMP's Board Input
      when C_ICVRT_OMP_PCDIR.
        RF_VALUE = ME->CONV_OUT_OMP_PCDIR( IF_VALUE = IF_VALUE
                                           IR_DATA  = IR_DATA
                                           IS_VALMP = IS_VALMP ).

***------------------------------------------------------------------------------------------------
      when others.
        RF_VALUE = SUPER->CONV_TO_OUTPUT( IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP ).
    endcase.

  endmethod.
