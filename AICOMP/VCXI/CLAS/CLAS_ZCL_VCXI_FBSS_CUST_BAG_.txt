
class ZCL_VCXI_FBSS_CUST_BAG definition
  public
  create protected .

public section.

  constants C_BPDIM_LENGTH type ZVCXI_FBS_BPDIM value 'L' ##NO_TEXT.
  constants C_BPDIM_WIDTH type ZVCXI_FBS_BPDIM value 'W' ##NO_TEXT.
  constants C_IBDIM_BGHEI type ZVCXI_FBS_IBDIM value 'B_HEI' ##NO_TEXT.
  constants C_IBDIM_BGWID type ZVCXI_FBS_IBDIM value 'B_WID' ##NO_TEXT.
  constants C_IBDIM_FOBOT type ZVCXI_FBS_IBDIM value 'F_BOT' ##NO_TEXT.
  constants C_IBDIM_FOTOP type ZVCXI_FBS_IBDIM value 'F_TOP' ##NO_TEXT.
  constants C_IBDIM_GUBOT type ZVCXI_FBS_IBDIM value 'G_BOT' ##NO_TEXT.
  constants C_IBDIM_GULEF type ZVCXI_FBS_IBDIM value 'G_LEF' ##NO_TEXT.
  constants C_IBDIM_GURIG type ZVCXI_FBS_IBDIM value 'G_RIG' ##NO_TEXT.
  constants C_IBDIM_GUTOP type ZVCXI_FBS_IBDIM value 'G_TOP' ##NO_TEXT.
  constants C_IBDIM_OLWID type ZVCXI_FBS_IBDIM value 'O_OLW' ##NO_TEXT.
  constants C_IBDIM_WILIP type ZVCXI_FBS_IBDIM value 'W_LIP' ##NO_TEXT.
  constants C_ICSTP_WICKET type ZVCXI_FBS_ICSTP value 'CSTEP_WICKET' ##NO_TEXT.
  constants C_ICSTP_WIND type ZVCXI_FBS_ICSTP value 'CSTEP_WIND' ##NO_TEXT.
  constants C_TWICK_SPOOL type ZVCXI_FBS_TWICK value 'SPOOL' ##NO_TEXT.
  constants C_TWICK_WIRE type ZVCXI_FBS_TWICK value 'WIRE' ##NO_TEXT.

  methods CALC_BPDIM
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
      !IT_BGDIM_VALUE type ZVCXI_FBSS_TT_BGDIM_VALUE
    exporting
      !ES_BPLEN type ZVCXI_FBS_S_BPLEN
      !ES_BPWID type ZVCXI_FBS_S_BPWID
    raising
      /VCXI/CX_CKX .
  methods CALC_HNDDIM
    importing
      !IT_BGDIM_VALUE type ZVCXI_FBSS_TT_BGDIM_VALUE
      !IT_BPDIM_VALUE type ZVCXI_FBSS_TT_BPDIM_VALUE
    returning
      value(RS_HNDDIM) type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_BGDIM
    returning
      value(RT_BGDIM) type ZVCXI_FBSSC_TT_BAGTY_BGDIM
    raising
      /VCXI/CX_CKX .
  methods GET_BPART_INFO
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
    exporting
      !EF_ODIRL type ZVCXI_FBS_ODIRL
      !EF_ODIRT type ZVCXI_FBS_ODIRT
      !EF_BPDIR type ZVCXI_FBS_BPDIR
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEP
    returning
      value(RT_CSTEP) type ZVCXI_FBSSC_TT_BAGTY_CSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEP_INFO
    importing
      !IF_ICSTP type ZVCXI_FBS_ICSTP
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_HANDLE
    returning
      value(RT_HANDLE) type /VCXI/CKX_TT_ID
    raising
      /VCXI/CX_CKX .
  methods GET_IBAGT_DESCR
    returning
      value(RT_DESCR) type /VCXI/CKX_TT_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_IBPAR
    returning
      value(RT_IBPAR) type /VCXI/CKX_TT_ID
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FBSS_CUST_BAG
    raising
      /VCXI/CX_CKX .
  methods GET_RECLO
    returning
      value(RT_RECLO) type ZVCXI_FBSSC_TT_BAGTY_RECLO
    raising
      /VCXI/CX_CKX .
  methods GET_VALID
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      IBAGT      type        ZVCXI_FBS_IBAGT,
      R_INSTANCE type ref to ZCL_VCXI_FBSS_CUST_BAG,
    end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .

  data R_BAGTY type ref to ZCL_VCXI_FBSSC_BAGTY .
  class-data T_INSTANCE type YT_INSTANCE .

  methods CONSTRUCTOR
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_CUST_BAG definition
class ZCL_VCXI_FBSS_CUST_BAG implementation.
  method CALC_BPDIM.

    data: LS_BPART        type ZVCXI_FBSSC_S_BAGTY_BPART,
          LS_BPCAL        type ZVCXI_FBSSC_S_BAGTY_BPCAL,
          LS_BGDIM_VALUE  type ZVCXI_FBSS_S_BGDIM_VALUE,
          LS_CALCV_WIDTH  type ZVCXI_XCS_S_CALCV,
          LS_CALCV_LENGTH type ZVCXI_XCS_S_CALCV.
    field-symbols: <S_CALCV> type ZVCXI_XCS_S_CALCV.

    clear: ES_BPLEN,
           ES_BPWID.

    check ME->R_BAGTY is bound.
    read table ME->R_BAGTY->T_BAGTY_BPART into LS_BPART
                                          with key IBPAR = IF_IBPAR.
    try.
        loop at LS_BPART-BPCAL into LS_BPCAL.
***       Find Value
          read table IT_BGDIM_VALUE into LS_BGDIM_VALUE
                                  with key IBDIM = LS_BPCAL-IBDIM.
          check SY-SUBRC eq 0.

***       Identify Dimension
          unassign <S_CALCV>.
          case LS_BPCAL-BPDIM.
            when C_BPDIM_WIDTH.
              assign LS_CALCV_WIDTH  to <S_CALCV>.

            when C_BPDIM_LENGTH.
              assign LS_CALCV_LENGTH to <S_CALCV>.
          endcase.
          check <S_CALCV> is assigned.

***       Adjust Bag Value Dimension by Numinator/Denominator
          LS_BGDIM_VALUE-BVDIM = LS_BGDIM_VALUE-BVDIM * LS_BPCAL-ELEMN / LS_BPCAL-ELEMD.

***       Add to Dimension
          if <S_CALCV> is initial.
            <S_CALCV>-CALCV     = LS_BGDIM_VALUE-BVDIM.
            <S_CALCV>-CALCV_UOM = LS_BGDIM_VALUE-BVDIM_UOM.
          else.

            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_CALCV>-CALCV
                                                                IF_CALCV_UOM_1 = <S_CALCV>-CALCV_UOM
                                                                IF_CALCV_2     = LS_BGDIM_VALUE-BVDIM
                                                                IF_CALCV_UOM_2 = LS_BGDIM_VALUE-BVDIM_UOM
                                                                IF_OPERA       = LS_BPCAL-OPER
                                                                IF_UOM         = <S_CALCV>-CALCV_UOM
                                                      importing EF_CALCV       = <S_CALCV>-CALCV
                                                                EF_CALCV_UOM   = <S_CALCV>-CALCV_UOM ).
          endif.
        endloop.

      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear: LS_CALCV_WIDTH, LS_CALCV_LENGTH.
***     Dimensions of Bag Part &1 couldn't be calculated.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                              IF_MSGTY = 'E'
                                              IF_MSGNO = '601'
                                              IF_MSGV1 = IF_IBPAR ).
    endtry.

***--------------------------------------------------------------------------------------
*** Return Results
    if LS_CALCV_WIDTH-CALCV lt 0.
      move 0 to LS_CALCV_WIDTH-CALCV.
    endif.

    move LS_CALCV_WIDTH-CALCV     to ES_BPWID-BPWID.
    move LS_CALCV_WIDTH-CALCV_UOM to ES_BPWID-BPWID_UOM.

    if LS_CALCV_LENGTH-CALCV lt 0.
      move 0 to LS_CALCV_LENGTH-CALCV.
    endif.

    move LS_CALCV_LENGTH-CALCV     to ES_BPLEN-BPLEN.
    move LS_CALCV_LENGTH-CALCV_UOM to ES_BPLEN-BPLEN_UOM.

  endmethod.
  method CALC_HNDDIM.

    data: LS_BVDIM        type ZVCXI_FBSS_S_BVDIM,
          LS_CALCV_LENGTH type ZVCXI_XCS_S_CALCV,
          LS_CALCV_WIDTH  type ZVCXI_XCS_S_CALCV,
          LS_CALCV_HEIGHT type ZVCXI_XCS_S_CALCV.
    field-symbols: <S_CALCV> type ZVCXI_XCS_S_CALCV.


    check ME->R_BAGTY is bound.

    try.
        loop at ME->R_BAGTY->T_BAGTY_BGHDC into data(LS_BAGTY_BGHDC).
          if LS_BAGTY_BGHDC-IBPAR is initial.
***         Find Value in Bag Dimensions
            LS_BVDIM = value #( IT_BGDIM_VALUE[ IBDIM = LS_BAGTY_BGHDC-IELEM ]-S_BVDIM optional ).
          else.
***         Find Value of Bag Part Dimensions
            LS_BVDIM = value #( IT_BPDIM_VALUE[ IBPAR = LS_BAGTY_BGHDC-IBPAR
                                                IELEM = LS_BAGTY_BGHDC-IELEM ]-S_BVDIM optional ).
          endif.
          if LS_BVDIM-BVDIM_UOM is initial.
            clear: LS_CALCV_LENGTH,
                   LS_CALCV_WIDTH,
                   LS_CALCV_HEIGHT.
            exit.
          endif.

***       Identify Dimension
          unassign <S_CALCV>.
          case LS_BAGTY_BGHDC-HNDDI.
            when 'L'.
              assign LS_CALCV_LENGTH to <S_CALCV>.
            when 'W'.
              assign LS_CALCV_WIDTH  to <S_CALCV>.
            when 'H'.
              assign LS_CALCV_HEIGHT to <S_CALCV>.
          endcase.
          check <S_CALCV> is assigned.

***       Adjust Bag Value Dimension by Numinator/Denominator
          LS_BVDIM-BVDIM = LS_BVDIM-BVDIM * LS_BAGTY_BGHDC-ELEMN / LS_BAGTY_BGHDC-ELEMD.

***       Add to Dimension
          if <S_CALCV> is initial.
            <S_CALCV>-CALCV     = LS_BVDIM-BVDIM.
            <S_CALCV>-CALCV_UOM = LS_BVDIM-BVDIM_UOM.
          else.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_CALCV>-CALCV
                                                                IF_CALCV_UOM_1 = <S_CALCV>-CALCV_UOM
                                                                IF_CALCV_2     = LS_BVDIM-BVDIM
                                                                IF_CALCV_UOM_2 = LS_BVDIM-BVDIM_UOM
                                                                IF_OPERA       = LS_BAGTY_BGHDC-OPER
                                                                IF_UOM         = <S_CALCV>-CALCV_UOM
                                                      importing EF_CALCV       = <S_CALCV>-CALCV
                                                                EF_CALCV_UOM   = <S_CALCV>-CALCV_UOM ).
          endif.
        endloop.

      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear: LS_CALCV_LENGTH, LS_CALCV_WIDTH, LS_CALCV_HEIGHT.
***     Handling Dimensions couldn't be calculated.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                              IF_MSGTY = 'E'
                                              IF_MSGNO = '602' ).
    endtry.

***--------------------------------------------------------------------------------------
*** Validate Results
    LS_CALCV_LENGTH-CALCV = cond #( when LS_CALCV_LENGTH-CALCV lt 0 then 0 else LS_CALCV_LENGTH-CALCV ).
    LS_CALCV_WIDTH-CALCV  = cond #( when LS_CALCV_WIDTH-CALCV  lt 0 then 0 else LS_CALCV_WIDTH-CALCV  ).
    LS_CALCV_HEIGHT-CALCV = cond #( when LS_CALCV_HEIGHT-CALCV lt 0 then 0 else LS_CALCV_HEIGHT-CALCV ).

*** Return Results
    RS_HNDDIM = value #( HNDLE = LS_CALCV_LENGTH-CALCV  HNDLE_UOM = LS_CALCV_LENGTH-CALCV_UOM
                         HNDWI = LS_CALCV_WIDTH-CALCV   HNDWI_UOM = LS_CALCV_WIDTH-CALCV_UOM
                         HNDHE = LS_CALCV_HEIGHT-CALCV  HNDHE_UOM = LS_CALCV_HEIGHT-CALCV_UOM ).

  endmethod.
  method CONSTRUCTOR.

    data: LF_GUID   type        /VCXI/CKX_GUID.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_INSTANCE>   type       YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Get GUID
    LF_GUID = ZCL_VCXI_FBSSC_BAGTY=>ENCRYPT_GUID( IF_IBAGT = IF_IBAGT ).

*** Get Object
    LR_OBJECT = ZCL_VCXI_FBSSC_BAGTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

*** Get Bag Type Customizing object
    try.
        move LR_OBJECT ?to ME->R_BAGTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_BAGTY.
    endtry.

***--------------------------------------------------------------------------------------
*** Add to Instance Buffer
    append initial line to ZCL_VCXI_FBSS_CUST_BAG=>T_INSTANCE assigning <S_INSTANCE>.
    move IF_IBAGT    to <S_INSTANCE>-IBAGT.
    move ME          to <S_INSTANCE>-R_INSTANCE.

  endmethod.
  method GET_BGDIM.

    check ME->R_BAGTY is bound.
    move ME->R_BAGTY->T_BAGTY_BGDIM[] to RT_BGDIM[].

  endmethod.
  method GET_BPART_INFO.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    if EF_ODIRL is requested or EF_ODIRT is requested or EF_BPDIR is requested.
      if ME->R_BAGTY is bound.
        read table ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART
                                              with key IBPAR = IF_IBPAR.
        if SY-SUBRC is initial.
          move: LS_BAGTY_BPART-ODIRL to EF_ODIRL,
                LS_BAGTY_BPART-ODIRT to EF_ODIRT,
                LS_BAGTY_BPART-BPDIR to EF_BPDIR.
        endif.
      endif.
    endif.

    if EF_DESCR is requested.
      move ZCL_VCXI_FBSSC_BAGTY=>GET_IBPAR_DESCR( IF_IBPAR ) to EF_DESCR.
    endif.

  endmethod.
  method GET_CSTEP.

    check ME->R_BAGTY is bound.
    move ME->R_BAGTY->T_BAGTY_CSTEP[] to RT_CSTEP[].

  endmethod.
  method GET_CSTEP_INFO.

    data: LS_TC030T type ZVCXI_FBS_TC030T.

    if EF_DESCR is requested.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T
                                                with key ICSTP = IF_ICSTP.
      check SY-SUBRC is initial.
      move LS_TC030T-DESCR to EF_DESCR.
    endif.

  endmethod.
  method GET_DESCR.

    check ME->R_BAGTY is bound.
    move ME->R_BAGTY->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) to RF_DESCR.

  endmethod.
  method GET_HANDLE.

    data: LS_BAGTY_HANDL type ZVCXI_FBSSC_S_BAGTY_HANDL.
    field-symbols: <F_THNDL> type /VCXI/CKX_ID.

    check ME->R_BAGTY is bound.

    loop at ME->R_BAGTY->T_BAGTY_HANDL into LS_BAGTY_HANDL.
      insert initial line into table RT_HANDLE assigning <F_THNDL>.
      move LS_BAGTY_HANDL-THNDL to <F_THNDL>.
    endloop.

  endmethod.
  method GET_IBAGT_DESCR.

    check ME->R_BAGTY is bound.
    move ME->R_BAGTY->T_DESCR[] to RT_DESCR[].

  endmethod.
  method GET_IBPAR.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.
    field-symbols: <F_IBPAR> type /VCXI/CKX_ID.

    check ME->R_BAGTY is bound.

    loop at ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART.
      insert initial line into table RT_IBPAR assigning <F_IBPAR>.
      move LS_BAGTY_BPART-IBPAR to <F_IBPAR>.
    endloop.

  endmethod.
  method GET_INSTANCE.

    data:  LS_INSTANCE type YS_INSTANCE.

    check IF_IBAGT is not initial.
    read table ZCL_VCXI_FBSS_CUST_BAG=>T_INSTANCE into LS_INSTANCE
                                                  with key IBAGT = IF_IBAGT.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
    else.
      create object RR_INSTANCE
        exporting
          IF_IBAGT = IF_IBAGT.
    endif.

  endmethod.
  method GET_RECLO.

    check ME->R_BAGTY is bound.
    move ME->R_BAGTY->T_BAGTY_RECLO[] to RT_RECLO[].

  endmethod.
  method GET_VALID.

    move ME->R_BAGTY->F_NOTVALID to RF_VALID.

  endmethod.
