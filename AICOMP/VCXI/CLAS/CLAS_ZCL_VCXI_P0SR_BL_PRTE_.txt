
class ZCL_VCXI_P0SR_BL_PRTE definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PRTE
  create public .

public section.

  methods GET_PCDIR_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_PCDIR) type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .
  class-methods IS_SKIPFEED_ACTIVE
    importing
      !IR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RR_ATYPE) type ref to /VCXI/CL_VSMC_ATYPE
    raising
      /VCXI/CX_CKX .
  methods SET_PCDIR_OF_MFI
    importing
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .

  methods CHECK
    redefinition .
  methods CONVERT_TO_MQTYO
    redefinition .
  methods GET_SPVRE_MFMI
    redefinition .
protected section.

  methods CHECK_PCDIR
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    exporting
      !ET_PCDIM_IN type ZVCXI_P0SP_TT_PCDIM
      !ET_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_OF_MFI
    returning
      value(RT_PCDIM) type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
  methods TURN_PCDIM
    importing
      !IS_PCDIM type ZVCXI_P0SP_S_PCDIM
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .

  methods CONV_MQTYO_TO_MQTYI
    redefinition .
  methods GET_RTE_ATYPE
    redefinition .
  methods ROUND_MQTYI
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PRTE definition
class ZCL_VCXI_P0SR_BL_PRTE implementation.
method CHECK.

  SUPER->CHECK( ).

***----------------------------------------------------------------------------
*** Check uncompatible Sheet Directions
  ME->CHECK_PCDIR( ).

***----------------------------------------------------------------------------
*** Set Status
  if ME->R_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                              IF_MSGTY_I = ABAP_FALSE ) is initial.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID   to ME->R_RTE_PRTE->F_RSTAT.
  else.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID to ME->R_RTE_PRTE->F_RSTAT.
  endif.

endmethod.
method CHECK_PCDIR.

  data:          LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_PCDIR_CURR  type ref to ZIF_VCXI_P0SR_PCDIR,
                 LR_PCDIR_PREV  type ref to ZIF_VCXI_P0SR_PCDIR,
                 LR_CX_CKX      type ref to /VCXI/CX_CKX.
  field-symbols: <S_MSG>        type        /VCXI/CKXM_S_MSG.

  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***----------------------------------------------------------------------------
*** Check Mandatory PC Direction
    try.
        ME->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
***     Add Message
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move LR_CX_CKX->F_MSGTY to <S_MSG>-MSGTY.
        move LR_CX_CKX->F_MSGID to <S_MSG>-MSGID.
        move LR_CX_CKX->F_MSGNO to <S_MSG>-MSGNO.
        move LR_CX_CKX->F_MSGV1 to <S_MSG>-MSGV1.
        move LR_CX_CKX->F_MSGV2 to <S_MSG>-MSGV2.
        move LR_CX_CKX->F_MSGV3 to <S_MSG>-MSGV3.
        move LR_CX_CKX->F_MSGV4 to <S_MSG>-MSGV4.
    endtry.

***----------------------------------------------------------------------------
*** Check PC Direction are the same
    clear LR_PCDIR_PREV.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR_CURR->F_PCDIR is initial.
***     PC Directions needs to be specified.
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move 'E'           to <S_MSG>-MSGTY.
        move 'ZVCXI_P0SR'  to <S_MSG>-MSGID.
        move '103'         to <S_MSG>-MSGNO.
      endif.

      if LR_PCDIR_PREV is bound and
         LR_PCDIR_PREV->F_PCDIR ne LR_PCDIR_CURR->F_PCDIR.
***     Different PC Directions on the same Work Center are not allowed.
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move 'E'           to <S_MSG>-MSGTY.
        move 'ZVCXI_P0SR'  to <S_MSG>-MSGID.
        move '102'         to <S_MSG>-MSGNO.
      endif.

      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.
  endloop.

endmethod.
method CONV_MQTYO_TO_MQTYI.

  data:  LF_PCUPS_OUT  type        ZVCXI_P0SP_PCUPS,
         LF_OUTS       type        I.
  data:  LS_PCDIM_IN   type        ZVCXI_P0SP_S_PCDIM,
         LS_PCDIM_OUT  type        ZVCXI_P0SP_S_PCDIM,
         LS_AREADIM    type        ZVCXI_P0SP_S_AREADIM.
  data:  LT_PCDIM_IN   type        ZVCXI_P0SP_TT_PCDIM,
         LT_PCDIM_OUT  type        ZVCXI_P0SP_TT_PCDIM,
         LT_AREADIM    type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_CONV_LTP   type ref to ZIF_VCXI_P0SR_CONV_LTP,
         LR_CONV_ATP   type ref to ZIF_VCXI_P0SR_CONV_ATP.

***----------------------------------------------------------------------------
*** Get PC Dimension
  ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                              importing ET_PCDIM_IN  = LT_PCDIM_IN
                                        ET_PCDIM_OUT = LT_PCDIM_OUT ).

***----------------------------------------------------------------------------
*** Collect Ups of all PC Dimension Outs
  loop at LT_PCDIM_OUT into LS_PCDIM_OUT.
    add LS_PCDIM_OUT-PCUPS to LF_PCUPS_OUT.
    add 1                  to LF_OUTS.
  endloop.
  check SY-SUBRC eq 0.

*** Convert PC Dimension Out to PC Dimensions In
  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
  if SY-SUBRC eq 0.
    if LS_PCDIM_IN-PCUPS ne 0.
      CS_CALCV-CALCV = CS_CALCV-CALCV * ( LF_PCUPS_OUT / LF_OUTS ) / LS_PCDIM_IN-PCUPS.
      ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_IN-PCTYP
                                                 changing  CF_VALUE = CS_CALCV-CALCV ).
    else.
      CS_CALCV-CALCV = 0.
    endif.


***----------------------------------------------------------------------------
*** Convert PC to Length
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_LTP.
          check LR_CONV_LTP is bound.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
    if LR_CONV_LTP is bound.
      CS_CALCV-CALCV     = CS_CALCV-CALCV * LS_PCDIM_IN-PCLEN.
      CS_CALCV-CALCV_UOM = LS_PCDIM_IN-PCLEN_UOM.
    endif.

***----------------------------------------------------------------------------
*** Convert PC to Area
  else.
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_ATP.
          check LR_CONV_ATP is bound.

          LT_AREADIM = LR_CONV_ATP->CONV_PC_TO_AREA( IT_PCDIM = LT_PCDIM_OUT ).
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    read table LT_AREADIM into LS_AREADIM index 1.
    if SY-SUBRC eq 0.
      if LS_AREADIM-PCUPS is not initial.
        CS_CALCV-CALCV     = ( CS_CALCV-CALCV * LF_PCUPS_OUT / LF_OUTS ) * ( LS_AREADIM-PCARE / LS_AREADIM-PCUPS ).
      else.
        CS_CALCV-CALCV     = 0.
      endif.
      CS_CALCV-CALCV_UOM = LS_AREADIM-PCARE_UOM.
    endif.
  endif.

endmethod.
method CONVERT_TO_MQTYO.

  data:  LF_PCUPS_OUT  type        ZVCXI_P0SP_PCUPS,
         LF_OUTS       type        I.
  data:  LS_PCDIM_OUT  type        ZVCXI_P0SP_S_PCDIM.
  data:  LT_PCDIM_OUT  type        ZVCXI_P0SP_TT_PCDIM.

***--------------------------------------------------------------------------------
*** Get PC Dimension
  ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                              importing ET_PCDIM_OUT = LT_PCDIM_OUT ).

*** Collect Ups of all PC Dimension Outs
  loop at LT_PCDIM_OUT into LS_PCDIM_OUT.
    add LS_PCDIM_OUT-PCUPS to LF_PCUPS_OUT.
    add 1 to LF_OUTS.
  endloop.

*** Calculate
  if LF_PCUPS_OUT is not initial.
    CS_CALCV-CALCV = CS_CALCV-CALCV / LF_PCUPS_OUT * LF_OUTS.
    ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_OUT-PCTYP
                                               changing  CF_VALUE = CS_CALCV-CALCV ).
  else.
    clear CS_CALCV-CALCV.
  endif.

endmethod.
method GET_PCDIM_BY_RTE_ARBPL.

  data:  LT_PCDIM      type        ZVCXI_P0SP_TT_PCDIM.
  data:  LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_ADJ_PCDIM  type ref to ZIF_VCXI_P0SR_ADJ_PCDIM.

  free: ET_PCDIM_IN,
        ET_PCDIM_OUT.

*** Get PC Dimensions of Material Flow In
  move ME->GET_PCDIM_OF_MFI( ) to LT_PCDIM.

*** Forward Processing of PC Dimension Changes
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***----------------------------------------------------------------------------
*** Adjust PC Dimension IN
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_PCDIM.
          check LR_ADJ_PCDIM is bound.

          LR_ADJ_PCDIM->CALC_PCDIM_IN( changing CT_PCDIM = LT_PCDIM ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Keep PC Dimension In at requested Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      move LT_PCDIM to ET_PCDIM_IN.
    endif.

***----------------------------------------------------------------------------
*** Calculate PC Out
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_PCDIM.
          check LR_ADJ_PCDIM is bound.

          LR_ADJ_PCDIM->CALC_PCDIM_OUT( changing CT_PCDIM = LT_PCDIM ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Stop calculating at requested Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      move LT_PCDIM to ET_PCDIM_OUT.
      exit.
    endif.
  endloop.

endmethod.
method GET_PCDIM_OF_MFI.

  field-symbols: <T_MFMI>       type standard table,
                 <T_MFSI>       type standard table,
                 <S_MFMI>       type          any,
                 <S_MFSI>       type          any,
                 <S_PCDIM>      type          ZVCXI_P0SP_S_PCDIM.

***----------------------------------------------------------------------------
*** Material Flow Material In Dimensions
  if ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      append initial line to RT_PCDIM assigning <S_PCDIM>.
      move-corresponding <S_MFMI> to <S_PCDIM>.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
  if ME->R_MFSI is bound.
    assign ME->R_MFSI->* to <T_MFSI>.

    loop at <T_MFSI> assigning <S_MFSI>.
      append initial line to RT_PCDIM assigning <S_PCDIM>.
      move-corresponding <S_MFSI> to <S_PCDIM>.
    endloop.
  endif.

endmethod.
method GET_PCDIR_BY_RTE_ARBPL.

  data:  LF_PCDIR_MANDATORY  type        ABAP_BOOL.
  data:  LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR            type ref to ZIF_VCXI_P0SR_PCDIR.

  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.

        if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
          if LF_PCDIR_MANDATORY ne ABAP_TRUE.
            move ABAP_TRUE         to LF_PCDIR_MANDATORY.
            move LR_PCDIR->F_PCDIR to RF_PCDIR.
          else.
            if RF_PCDIR ne LR_PCDIR->F_PCDIR.
***           Mandatory PC Directions are not compatible.
              /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                    IF_MSGID = 'ZVCXI_P0SR'
                                                    IF_MSGNO = '101' ).
            endif.
          endif.
        endif.

***     If no Mandatory
        if LF_PCDIR_MANDATORY ne ABAP_TRUE and
           RF_PCDIR           is initial.
          move LR_PCDIR->F_PCDIR to RF_PCDIR.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_RTE_ATYPE.

  data:          LR_ATYPE       type ref to /VCXI/CL_VSMC_ATYPE.
  field-symbols: <S_RTE_ATYPE>  type        /VCXI/VSMR_S_RTE_ATYPE.

  RT_RTE_ATYPE = SUPER->GET_RTE_ATYPE( IR_RTE_CMACH = IR_RTE_CMACH
                                       IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Special handling for Skipfeed
  LR_ATYPE = ME->IS_SKIPFEED_ACTIVE( IR_RTE_CMACH = IR_RTE_CMACH
                                     IR_RTE_ARBPL = IR_RTE_ARBPL ).
  if LR_ATYPE is bound.
    append initial line to RT_RTE_ATYPE assigning <S_RTE_ATYPE>.
    move LR_ATYPE to <S_RTE_ATYPE>-R_ATYPE.
  endif.

endmethod.
method GET_SPVRE_MFMI.

  data:          LS_MFMI_P      type          ZVCXI_P0SR_S_MFMI_P,
                 LS_LEOKY       type          /VCXI/VKSR_S_LEOKY,
                 LS_PARAM       type          /VCXI/VKSR_S_PARAM.
  data:          LR_SPVCE       type ref to   /VCXI/CL_VKSC_SPVCE,
                 LR_SPVRE_MFMI  type ref to   /VCXI/CL_VKSR_SPVRE.
  field-symbols: <T_MFMI>       type standard table,
                 <S_MFMI>       type          any.

  check ME->R_MFMI is bound.
  assign ME->R_MFMI->* to <T_MFMI>.

  loop at <T_MFMI> assigning <S_MFMI>.
    move-corresponding <S_MFMI> to LS_MFMI_P.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMI
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMI to CT_SPVRE.
    move   ABAP_TRUE     to CF_MFI.

*** Set In Use
    LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Leading Object
    move LS_MFMI_P-MATNR                                   to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
    LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Set Component Scrap
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_KAUSF              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-KAUSF                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-KAUSF_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Setup Percentage for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-MFISP                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-MFISP_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-MFICF                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor Per for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-MFICP                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Purchase Flag
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PURCH                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Costing Relevant
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_SANKA              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-SANKA                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Text
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-TEXT                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Vendor Number
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-LIFNR                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICE              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PRICE                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PRICE_CURR                              to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price Unit
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICP_P            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PRICP                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PRICP_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCTYP            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCTYP                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Length
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCLEN            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCLEN                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCLEN_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Width
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCWID            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCWID                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCWID_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Height
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCHEI            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCHEI                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-PCHEI_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Ups
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCUPS            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCUPS                                   to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCDIR            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI_P-PCDIR                                   to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Base Weight
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGT            to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-BAWGT                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-BAWGT_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Base Weight Per
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGP_A          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI_P-BAWGP                                   to LS_PARAM-ATFLV.
    move LS_MFMI_P-BAWGP_UOM                               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Price Scale Manager
    IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                            IT_PSCALE       = LS_MFMI_P-T_PSCALE
                                  changing  CT_SPVRE        = CT_SPVRE ).

  endloop.

endmethod.
method IS_SKIPFEED_ACTIVE.

  data:  LF_GLDIK      type        /VCXI/VSMC_GLDIK,
         LF_GLTYP      type        /VCXI/VSMC_GLTYP.
  data:  LS_RTE_LDIM   type        /VCXI/VSMR_S_RTE_LDIM,
         LS_LDIM       type        /VCXI/VSMC_S_LDIM.
  data:  LT_ATYPE      type        /VCXI/CKX_TT_OBJECT,
         LT_LTYPE      type        /VCXI/CKX_TT_OBJECT.
  data:  LR_ATYPE      type ref to /VCXI/CL_VSMC_ATYPE,
         LR_LTYPE      type ref to /VCXI/CL_VSMC_LTYPE,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

  LT_ATYPE = IR_RTE_CMACH->R_MGRPV_LIMIT->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).
  loop at LT_ATYPE into LR_OBJECT.
    try.
        move LR_OBJECT ?to LR_ATYPE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    check LR_ATYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'P0_AT_SKIPFEED'.

*** Get Guid for Limit Dimension Key
    move IR_RTE_CMACH->R_MGRPV_LIMIT->GET_GLDIK_BY_ATYPE( IR_ATYPE = LR_ATYPE ) to LF_GLDIK.

    LT_LTYPE = LR_ATYPE->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      move LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GLTYP.

      loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        loop at LR_RTE_PSTEP->T_RTE_LDIM into LS_RTE_LDIM
                                        where R_LTYPE eq LR_LTYPE.
          read table IR_RTE_CMACH->R_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                                         with key GLDIK = LF_GLDIK
                                                                  GLTYP = LF_GLTYP.
          if SY-SUBRC eq 0.
            if LS_RTE_LDIM-LDVAL between LS_LDIM-LDMIN and LS_LDIM-LDMAX.
              move LR_ATYPE to RR_ATYPE.
              exit.
            else.
              clear RR_ATYPE.
            endif.
          endif.
        endloop.
      endloop.
    endloop.

  endloop.

endmethod.
method ROUND_MQTYI.

  data:  LS_PCDIM_IN   type        ZVCXI_P0SP_S_PCDIM.
  data:  LT_PCDIM_IN   type        ZVCXI_P0SP_TT_PCDIM.

***----------------------------------------------------------------------------
*** Get PC Dimension
  ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                              importing ET_PCDIM_IN  = LT_PCDIM_IN ).

***----------------------------------------------------------------------------
*** Round PC Dimension In based on PC Type
  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
  if SY-SUBRC eq 0.
    ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_IN-PCTYP
                                               changing  CF_VALUE = CS_CALCV-CALCV ).
  endif.

endmethod.
method SET_PCDIR_OF_MFI.

  data:          LS_PCDIM       type          ZVCXI_P0SP_S_PCDIM.
  field-symbols: <T_MFMI>       type standard table,
                 <T_MFSI>       type standard table,
                 <S_MFMI>       type          any,
                 <S_MFSI>       type          any.

***----------------------------------------------------------------------------
*** Material Flow Material In Dimensions
  if ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      move-corresponding <S_MFMI> to LS_PCDIM.
      LS_PCDIM = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM
                                 IF_PCDIR = IF_PCDIR ).
      move-corresponding LS_PCDIM to <S_MFMI>.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
  if ME->R_MFSI is bound.
    assign ME->R_MFSI->* to <T_MFSI>.

    loop at <T_MFSI> assigning <S_MFSI>.
      move-corresponding <S_MFSI> to LS_PCDIM.
      LS_PCDIM = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM
                                 IF_PCDIR = IF_PCDIR ).
      move-corresponding LS_PCDIM to <S_MFSI>.
    endloop.
  endif.

endmethod.
method TURN_PCDIM.

*** Keep everything else
  move IS_PCDIM           to RS_PCDIM.

  if IF_PCDIR ne IS_PCDIM-PCDIR.
*** Set new Direction
    move IF_PCDIR           to RS_PCDIM-PCDIR.

*** Turn
    move IS_PCDIM-PCLEN     to RS_PCDIM-PCWID.
    move IS_PCDIM-PCLEN_UOM to RS_PCDIM-PCWID_UOM.

    move IS_PCDIM-PCWID     to RS_PCDIM-PCLEN.
    move IS_PCDIM-PCWID_UOM to RS_PCDIM-PCLEN_UOM.
  endif.

endmethod.
