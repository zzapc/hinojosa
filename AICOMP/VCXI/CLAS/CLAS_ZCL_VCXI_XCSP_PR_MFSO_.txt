
class ZCL_VCXI_XCSP_PR_MFSO definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MF
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFO .
  interfaces ZIF_VCXI_XCSP_MFS .
  interfaces ZIF_VCXI_XCSP_MFSO .

  aliases C_IPRVT_XCS_MFO
    for ZIF_VCXI_XCSP_MFO~C_IPRVT_XCS_MFO .
  aliases DO_BACKWARD
    for ZIF_VCXI_XCSP_MFSO~DO_BACKWARD .
  aliases GET_DISST
    for ZIF_VCXI_XCSP_MFS~GET_DISST .
  aliases GET_NOOUT
    for ZIF_VCXI_XCSP_MFO~GET_NOOUT .
  aliases IS_ACTIVE_BY_CSPLIT
    for ZIF_VCXI_XCSP_MFSO~IS_ACTIVE_BY_CSPLIT .
  aliases SET_DISST
    for ZIF_VCXI_XCSP_MFS~SET_DISST .
  aliases SET_NOOUT
    for ZIF_VCXI_XCSP_MFO~SET_NOOUT .

  data F_MFSI_ORGLC type ABAP_BOOL read-only .
  constants C_PARID_MFCSP type /VCXI/VKS_PARID value 'ZVCXI_XC_MFCSP' ##NO_TEXT.

  class-methods CONV_TO_MFCSP
    importing
      !IT_ICSPL type ZVCXI_XCSP_TT_ICSPL
    returning
      value(RF_STRNG) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  class-methods CONV_FROM_MFCSP
    importing
      !IF_STRNG type /VCXI/CKX_STRING
    returning
      value(RT_ICSPL) type ZVCXI_XCSP_TT_ICSPL
    raising
      /VCXI/CX_CKX .
  methods IS_FIRST_MFO
    returning
      value(RF_FIRST) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_REQUEST_BACKWARD
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_I_REQUEST_BACKWARD .
  aliases C_IEVNT_I_REQUEST_FORWARD
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_I_REQUEST_FORWARD .
  aliases C_IEVNT_I_REQ_OP_BACKWARD
    for ZIF_VCXI_XCSP_MFO~C_IEVNT_I_REQ_OP_BACKWARD .
  aliases C_IEVNT_O_BACKWARD_REQUESTED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_BACKWARD_REQUESTED .
  aliases C_IEVNT_O_DISST_CHANGED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_DISST_CHANGED .
  aliases C_IEVNT_O_FORWARD_REQUESTED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_FORWARD_REQUESTED .
  aliases C_IEVNT_O_NOOUT_CHANGED
    for ZIF_VCXI_XCSP_MFO~C_IEVNT_O_NOOUT_CHANGED .
  aliases C_IEVNT_O_OP_BACKWARD_REQ
    for ZIF_VCXI_XCSP_MFO~C_IEVNT_O_OP_BACKWARD_REQ .
  aliases C_PARID_DISST
    for ZIF_VCXI_XCSP_MFS~C_PARID_DISST .
  aliases C_PARID_NOOUT
    for ZIF_VCXI_XCSP_MFO~C_PARID_NOOUT .

  methods CALC_MFRAT
    importing
      !IR_MFSI type ref to ZIF_VCXI_XCSP_MFSI
    returning
      value(RF_MFRAT) type ZVCXI_XCSP_MFRAT
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_CONSU
    importing
      !IR_MFSI type ref to ZIF_VCXI_XCSP_MFSI
    changing
      !CS_CONSU type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MFSO definition
class ZCL_VCXI_XCSP_PR_MFSO implementation.
method CALC_MFRAT.

  data:  LF_MFRAT   type        ZVCXI_XCSP_MFRAT,
         LF_MFICF   type        ZVCXI_XCSP_MFICF,
         LF_MFICP   type        ZVCXI_XCSP_MFICP.
  data:  LR_PR_MFSI type ref to ZCL_VCXI_XCSP_PR_MFSI.

*** Default is 1
  move 1 to RF_MFRAT.

*** Cast to MF Class
  try.
      move IR_MFSI ?to LR_PR_MFSI.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.
  check LR_PR_MFSI is bound.

*** Get Ratio and Factor of MFSI
  move LR_PR_MFSI->GET_MFRAT( )                   to LF_MFRAT.
  move LR_PR_MFSI->ZIF_VCXI_XCSP_MFI~GET_MFICF( ) to LF_MFICF.
  move LR_PR_MFSI->ZIF_VCXI_XCSP_MFI~GET_MFICP( ) to LF_MFICP.

  if LF_MFICP ne 0.
    RF_MFRAT = ceil( LF_MFRAT * LF_MFICF / LF_MFICP ).
  else.
    clear RF_MFRAT.
  endif.

endmethod.
  method CONV_FROM_MFCSP.

    check IF_STRNG is not initial.

    call transformation ID
         source xml IF_STRNG
         result T_ICSPL = RT_ICSPL.

  endmethod.
  method CONV_TO_CONSU.

*** Last MFSO if MFSI is Organizer
    check ME->F_MFSI_ORGLC eq ABAP_TRUE.

*** Check Reference exists
    if ME->R_PR_MFMGR is not bound.
      ME->HANDLE_INIT_MFMGR( ).
    endif.
    check ME->R_PR_MFMGR is bound.

***----------------------------------------------------------------------------
*** Multiply by Quantity Factor of Material Flow Out
    CS_CONSU-CONSU *= ME->R_PR_MFMGR->GET_MFO_QFACT( IR_GATE_MFO = ME->R_GATE ).

  endmethod.
  method CONV_TO_MFCSP.

    check IT_ICSPL is not initial.

    call transformation ID
         source T_ICSPL = IT_ICSPL
         result xml RF_STRNG.

  endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_REQUEST_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BACKWARD_REQUESTED ).
    when C_IEVNT_I_REQUEST_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FORWARD_REQUESTED ).
    when C_IEVNT_I_REQ_OP_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OP_BACKWARD_REQ ).
  endcase.

endmethod.
  method IS_FIRST_MFO.

    data: LF_DISST         type        /VCXI/VKC_DISST,
          LF_DISST_HIGHEST type        /VCXI/VKC_DISST.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_HIGHEST type ref to /VCXI/CL_VKSR_GATE,
          LR_MFSO         type ref to ZIF_VCXI_XCSP_MFSO.

*** Get all MFOs
    LT_GATE = ME->R_PR_MFMGR->ZIF_VCXI_XCSP_MFMGR~GET_MFO( ).
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Prefer highest Low-Level Code
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_MFSO.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Filter MFSOs which are disabled by Cost Split
      check LR_MFSO->IS_ACTIVE_BY_CSPLIT( ) ne 2.

***   Use first as starting Point
      if LR_GATE_HIGHEST is not bound.
        move LR_GATE               to LR_GATE_HIGHEST.
        move LR_MFSO->GET_DISST( ) to LF_DISST_HIGHEST.
        continue.
      endif.

***   Check if next MFSO has a higher Low-Level Code
      move LR_MFSO->GET_DISST( ) to LF_DISST.
      if LF_DISST gt LF_DISST_HIGHEST.
        move LR_GATE  to LR_GATE_HIGHEST.
        move LF_DISST to LF_DISST_HIGHEST.
      endif.
    endloop.

*** Check if current Gate is the "best fitting" Gate
    if LR_GATE_HIGHEST eq ME->R_GATE.
      move ABAP_TRUE to RF_FIRST.
    endif.

  endmethod.
method ZIF_VCXI_XCSP_MFO~GET_CONSU.

  move ME->GET_CONSU( ) to RS_CONSU.

endmethod.
method ZIF_VCXI_XCSP_MFO~GET_NOOUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_XCSP_MFO~C_PARID_NOOUT ).
  move LS_PARAM-ATFLV to RF_NOOUT.

endmethod.
method ZIF_VCXI_XCSP_MFO~GET_WERKS.

  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.

  check ME->R_PR_MFMGR is bound.
  move ME->R_PR_MFMGR->GET_WERKS( ) to RF_WERKS.

endmethod.
method ZIF_VCXI_XCSP_MFO~SET_CONSU.

  ME->SET_CONSU( IS_CONSU = IS_CONSU ).

endmethod.
method ZIF_VCXI_XCSP_MFO~SET_NOOUT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).

  move IF_NOOUT  to LS_PARAM-ATFLV.
  move IF_SETBY  to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOOUT_CHANGED ).
  endif.

endmethod.
  method ZIF_VCXI_XCSP_MFSO~DO_BACKWARD.

    data: LS_CONSU    type        ZVCXI_XCSP_S_CONSU.
    data: LF_MATNR type        MATNR,
          LF_DISST type        /VCXI/VKC_DISST,
          LF_MFRAT type        ZVCXI_XCSP_MFRAT.

    clear ME->F_MFSI_ORGLC.
    if IR_MFSI is bound.
***   Move Material Number, Low-Level Code and Consumption
      LF_MATNR = IR_MFSI->GET_MATNR( ).
      LF_DISST = IR_MFSI->GET_DISST( ).
      LF_MFRAT = ME->CALC_MFRAT( IR_MFSI = IR_MFSI ).
      LS_CONSU = IR_MFSI->GET_CONSU( ).

      ME->F_MFSI_ORGLC = IR_MFSI->F_ORGLC.

      ME->CONV_TO_CONSU( exporting IR_MFSI  = IR_MFSI
                         changing  CS_CONSU = LS_CONSU ).
    endif.

    ME->SET_MATNR( IF_MATNR = LF_MATNR ).
    ME->SET_DISST( IF_DISST = LF_DISST ).
    ME->SET_MFRAT( IF_MFRAT = LF_MFRAT ).
    ME->SET_CONSU( IS_CONSU = LS_CONSU ).

  endmethod.
  method ZIF_VCXI_XCSP_MFSO~GET_ICSPL.

    data: LF_ICSPL type ZVCXI_XCSP_ICSPL.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_GATE_MFO type /VCXI/VKSR_TT_GATE.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFCSP ).
    if LS_PARAM-SETBY is not initial.
***   Convert from "MF relevant CSplit IDs"
      RT_ICSPL = CONV_FROM_MFCSP( IF_STRNG = LS_PARAM-STRNG ).
    else.
***   Get relevant CostSplit ID by counter
      if ME->R_PR_MFMGR is not bound.
        ME->HANDLE_INIT_MFMGR( ).
      endif.
      check ME->R_PR_MFMGR is bound.

***   Get all Flow Outs
      LT_GATE_MFO = ME->R_PR_MFMGR->GET_MFO( ).
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_MFO ).

***   Find the matching Material Flow Out
      read table LT_GATE_MFO with key TABLE_LINE = ME->R_GATE
                             transporting no fields.
      check SY-SUBRC eq 0.
      move SY-TABIX to LF_ICSPL.
      shift LF_ICSPL left deleting leading SPACE.
      append LF_ICSPL to RT_ICSPL.
    endif.

  endmethod.
method ZIF_VCXI_XCSP_MFSO~GET_KAUSF.

  data:  LF_NOOUT           type        ZVCXI_XCS_NOOUT,
         LF_NOOUT_TOTAL     type        ZVCXI_XCS_NOOUT.
  data:  LS_MQTYO           type        ZVCXI_XCSP_S_MQTYO,
         LS_CONSU           type        ZVCXI_XCSP_S_CONSU.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_MFO             type ref to ZIF_VCXI_XCSP_MFO.

  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.

***------------------------------------------------------------------
*** Get all MFSO
  check ME->R_PR_MFMGR is bound.
  LT_GATE = ME->R_PR_MFMGR->ZIF_VCXI_XCSP_MFMGR~GET_MFO( ).

*** If only one -> No Component Scrap
  if lines( LT_GATE ) le 1.
    move '%' to RS_KAUSF-KAUSF_UOM.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Get Material Flow Out Consumption
  loop at LT_GATE into LR_GATE.
    try.
        clear: LR_MFO.
        move LR_GATE->R_CLSPR ?to LR_MFO.
        check LR_MFO is bound.

        LS_CONSU = LR_MFO->GET_CONSU( ).
        LF_NOOUT = LR_MFO->GET_NOOUT( ).

***     Take Number of Outs into account
        if LF_NOOUT ne 0.
          LS_CONSU-CONSU = LS_CONSU-CONSU / LF_NOOUT.
        else.
          LS_CONSU-CONSU = 0.
        endif.
        add LF_NOOUT to LF_NOOUT_TOTAL.

***     Use maximum Quantity
        if LS_CONSU-CONSU gt LS_MQTYO-MQTYO.
          move LS_CONSU-CONSU     to LS_MQTYO-MQTYO.
          move LS_CONSU-CONSU_UOM to LS_MQTYO-MQTYO_UOM.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_MFO.
    endtry.
  endloop.

***----------------------------------------------------------------------------
*** Get Consumption and Number Out
  LS_CONSU = ME->GET_CONSU( ).
  LF_NOOUT = ME->GET_NOOUT( ).

*** Take Number of Outs into account
  if LF_NOOUT ne 0.
    LS_CONSU-CONSU = LS_CONSU-CONSU / LF_NOOUT.
  else.
    LS_CONSU-CONSU = 0.
  endif.

***----------------------------------------------------------------------------
*** Calculate Component Scrap
  try.
      if LS_CONSU-CONSU is not initial.
        RS_KAUSF-KAUSF = ( LS_MQTYO-MQTYO - LS_CONSU-CONSU ) / LS_CONSU-CONSU * 100.
      else.
        clear RS_KAUSF-KAUSF.
      endif.
      if RS_KAUSF-KAUSF lt 0.
        clear RS_KAUSF-KAUSF.
      endif.
    catch CX_SY_ARITHMETIC_OVERFLOW.
      move '999.99' to RS_KAUSF-KAUSF.
  endtry.
  move '%' to RS_KAUSF-KAUSF_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFSO~IS_ACTIVE_BY_CSPLIT.
*** 0 = Cost Split not used
*** 1 = Active by Cost Split
*** 2 = Not Active by Cost Split

  data:  LF_ICSPA         type        ZVCXI_XCSP_ICSPA.
  data:  LS_DCSPL         type        ZVCXI_XCSP_S_DCSPL.
  data:  LT_ICSPL         type        ZVCXI_XCSP_TT_ICSPL,
         LT_GATE_MFO      type        /VCXI/VKSR_TT_GATE.


***----------------------------------------------------------------------------
*** Get Material Flow Manager reference
  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.
  check ME->R_PR_MFMGR is bound.

***----------------------------------------------------------------------------
*** Cost Split using Material Flow Manager
  ME->R_PR_MFMGR->GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                                        ES_DCSPL = LS_DCSPL ).
*** Check for active Cost Split
  check LF_ICSPA is not initial.

*** Get my relevant Cost Split IDs
  move ME->ZIF_VCXI_XCSP_MFSO~GET_ICSPL( ) to LT_ICSPL.

***----------------------------------------------------------------------------
*** Start negative
  move 2 to RF_RETURN.  " Mark as NOT ACTIVE

*** For more than one Material Flow Out
  LT_GATE_MFO = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE_MFO ) gt 1.
*** Check if Cost Split is the active one
    read table LT_ICSPL with key TABLE_LINE = LF_ICSPA
                        transporting no fields.
    check SY-SUBRC eq 0.
  endif.

*** Check if active Cost Split carries any costs
  if LS_DCSPL-DCSPL gt 0.
    move 1 to RF_RETURN.  " Mark as ACTIVE
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_DISST.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISST ).
  move LS_PARAM-ATFLV to RF_DISST.

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_MATNR.

  RF_MATNR = ME->GET_MATNR( ).

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_DISST.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISST ).

  clear LS_PARAM-ATWRT.

  move IF_DISST                            to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSP_MFS~C_IEVNT_O_DISST_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_MATNR.

  ME->SET_MATNR( IF_MATNR = IF_MATNR ).

endmethod.
