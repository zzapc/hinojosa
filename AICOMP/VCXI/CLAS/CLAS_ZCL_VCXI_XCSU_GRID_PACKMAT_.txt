
class ZCL_VCXI_XCSU_GRID_PACKMAT definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  types YS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF .
  types:
    begin of YS_PRVDR_OV.
          include type        YS_PRVDR_DEF.
  types:  INDEX   type I,
          SEQUE   type        ZVCXI_XCSU_SEQUE,
          R_GATE  type ref to /VCXI/CL_VKSR_GATE,
          end of YS_PRVDR_OV .
  types:
    YT_PRVDR_OV type standard table of YS_PRVDR_OV .

  data F_NO_CPM type ABAP_BOOL .
  data F_SCALE_ACTIVE type ABAP_BOOL .
  data T_PRVDR_OV type YT_PRVDR_OV .
  data T_PRVDR_DEF_G type /VCXI/VKSR_TT_PRVDR_DEF .
  constants C_ICON_CAUTION type ICON_D value '@09@'. "#EC NOTEXT
  constants C_ICON_OKAY type ICON_D value '@08@'. "#EC NOTEXT

  methods GET_CPM_VIS
    importing
      !IR_PR_CPM type ref to ZCL_VCXI_XCSU_PR_CPM
    returning
      value(RS_CPM_VIS) type ZVCXI_XCSU_S_CPM_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_PACKMAT_VIS
    importing
      !IR_PR_PACKMAT type ref to ZCL_VCXI_XCSU_PR_PACKMAT
    returning
      value(RS_PACKMAT_VIS) type ZVCXI_XCSU_S_PACKMAT_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_VCPMC
    returning
      value(RT_VCPMC) type ZVCXI_XCSU_TT_VCPMC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods PMATY_DISABLED
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods INIT_PRVDR_OV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_QTY
    importing
      !IF_ID type /VCXI/CKX_ID
      !IF_CHECK_DETAIL type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_QTY) type NUMC3
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods CHANGE_STYLE_CPM
    importing
      !IF_FOVRR_CONSC type ABAP_BOOL
      !IF_FOVRR_PMQTY type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_PACKMAT
    importing
      !IF_PURCH type ABAP_BOOL
      !IF_FOVRR_CONSC type ABAP_BOOL
      !IF_FOVRR_PMQTY type ABAP_BOOL
      !IF_DUMMY type ABAP_BOOL
      !IF_SCALE_ACTIVE type ABAP_BOOL
      !IF_SCALE type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods SET_PRVDR_POS
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_PRVDR_POS_OLD
    importing
      !IF_ID type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods CHECK_PRVDR_ADD
    redefinition .
  methods CHECK_PRVDR_DEL
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
  methods SET_EVENT
    redefinition .
  methods CHECK_PRVDR_IRRELEVANT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSU_GRID_PACKMAT definition
class ZCL_VCXI_XCSU_GRID_PACKMAT implementation.
method ADD_PRVDR.

  data: LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data: LF_ID              type        /VCXI/CKX_ID,
        LF_ID_IMP          type        /VCXI/CKX_ID,
        LF_PMATY           type        ZVCXI_XCSU_PMATY,
        LF_SEQUE_C         type        STRING.
  data: LR_PR_PACKMAT      type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
        LR_PR_CPM          type ref to ZCL_VCXI_XCSU_PR_CPM.

*** If we have onle one Provider
  if IF_ID is initial and
     lines( ME->T_PRVDR_DEF ) le 1.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
    if SY-SUBRC = 0.
      move LS_PRVDR_DEF-ID to LF_ID_IMP.
    endif.
  else.
    move IF_ID to LF_ID_IMP.
  endif.

  read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID_IMP.
  check SY-SUBRC = 0.

  move LS_PRVDR_DEF-IPRVT        to LF_ID.
  split LS_PRVDR_DEF-ID at '@' into LF_PMATY LF_SEQUE_C.

  RR_GATE = SUPER->ADD_PRVDR( IF_ID = LF_ID ).

*** Set right posid.
  ME->SET_PRVDR_POS( IF_ID   = LF_ID_IMP
                     IR_GATE = RR_GATE ).

  try.
      move RR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_PACKMAT.
  endtry.

  if LR_PR_PACKMAT is bound.
    LR_PR_PACKMAT->SET_PMATY( IF_PMATY = LF_PMATY ).
    LR_PR_PACKMAT->INIT_PMATY( ).
  else.

    try.
        move RR_GATE->R_CLSPR ?to LR_PR_CPM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_CPM.
        RR_GATE->DO_FREE( ).
***     It is not possible to add Provider &1.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_XCS'
            IF_MSGNO = '012'
            IF_MSGV1 = LS_PRVDR_DEF-IPRVT ).
    endtry.

    if LR_PR_CPM is bound.
      LR_PR_CPM->SET_PMATY( IF_PMATY = LF_PMATY ).
      LR_PR_CPM->INIT_PMATY( ).
    endif.
  endif.

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->R_GATE->RAISE_EVENTS( ).

*** Init Provider Overview
  ME->INIT_PRVDR_OV( ).

endmethod.
method CHANGE_STYLE_CPM.

  data: LF_STYLE_HOTSPOT          type RAW4,
        LF_STYLE_HOTSPOT_NO       type RAW4.

***------------------------------------------------------------------
*** Hotspot Styles
  if ME->F_STYLE_ENABLED = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
*** Editable
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  else.
*** Not Editable
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
  endif.
  LF_STYLE_HOTSPOT_NO = ME->F_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.

***------------------------------------------------------------------
  free CT_STYL.
*** Set General Styles
*** Set PackMat Type = Disabled
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMATY'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set PackMat = Disabled
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMATN'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Variant = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'VCPMC'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Consumption Sheme override = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_CONSC'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Quantity override = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_PMQTY'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Packaging Material Info = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PAMAI'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Text = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TEXT'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Price = Disable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Price Per = Disable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Vendor = Disable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Scaled = Disable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCALE'
                              IF_STYLE     = LF_STYLE_HOTSPOT_NO
                    changing  CT_STYL      = CT_STYL ).

*** Set Purchase = Disable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCH'
                              IF_STYLE     = LF_STYLE_HOTSPOT_NO
                    changing  CT_STYL      = CT_STYL ).

***------------------------------------------------------------------
*** Override Consumption Scheme
  if IF_FOVRR_CONSC ne ABAP_TRUE.
*** Set Consumption Scheme = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CONSC'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  else.
*** Set Consumption Scheme = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CONSC'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

***------------------------------------------------------------------
*** Override Packaging Material Quantity
  if IF_FOVRR_PMQTY ne ABAP_TRUE.
*** Set Packaging Material Quantity = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMQTY'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  else.
*** Set Packaging Material Quantity = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMQTY'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

endmethod.
method CHANGE_STYLE_PACKMAT.

  data: LF_STYLE_HOTSPOT    type RAW4,
        LF_STYLE_HOTSPOT_NO type RAW4.

***------------------------------------------------------------------
*** Hotspot Styles
  if ME->F_STYLE_ENABLED = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
*** Editable
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  else.
*** Not Editable
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
  endif.
  LF_STYLE_HOTSPOT_NO = ME->F_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.

***------------------------------------------------------------------
  free CT_STYL.
*** Set General Styles
*** Set PackMat Type = Disabled
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMATY'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Variant = Disabled
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'VCPMC'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set PackMat = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMATN'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Consumption Sheme override = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_CONSC'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Quantity override = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_PMQTY'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Packaging Material Info = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PAMAI'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Text = Enable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TEXT'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

***------------------------------------------------------------------
*** Purchase Packmat
  case IF_PURCH.
    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
***   Set Vendor = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).

      if IF_SCALE eq ABAP_FALSE.
***     Set Price = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Price Per = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).
      else.
***     Set Price = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Price Per = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
      endif.

    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
***   Set Vendor = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price Per = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).

    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***   Set Vendor = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price Per = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
  endcase.


***------------------------------------------------------------------
*** Scaled Packmat
  if IF_SCALE_ACTIVE eq ABAP_TRUE and
     IF_PURCH        eq ABAP_TRUE.
*** Set Scaled = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCALE'
                                IF_STYLE     = LF_STYLE_HOTSPOT
                      changing  CT_STYL      = CT_STYL ).
  else.
*** Set Scaled = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCALE'
                                IF_STYLE     = LF_STYLE_HOTSPOT_NO
                      changing  CT_STYL      = CT_STYL ).
  endif.

***------------------------------------------------------------------
*** Dummy Packmat
  if IF_DUMMY eq ABAP_TRUE.
*** Set Purchase = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCH'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  else.
*** Set Purchase = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCH'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endif.

***------------------------------------------------------------------
*** Override Consumption Scheme
  if IF_FOVRR_CONSC ne ABAP_TRUE.
*** Set Consumption Scheme = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CONSC'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  else.
*** Set Consumption Scheme = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CONSC'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

***------------------------------------------------------------------
*** Override Packaging Material Quantity
  if IF_FOVRR_PMQTY ne ABAP_TRUE.
*** Set Packaging Material Quantity = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMQTY'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  else.
*** Set Packaging Material Quantity = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PMQTY'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

endmethod.
method CHECK_PRVDR_ADD.

  data:          LF_ACTIV_PRVDR       type        NUMC3,
                 LF_RELEVANT          type        ABAP_BOOL,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.

*** Start negativ
  move ABAP_TRUE to RF_DISABLED.

*** Check provider
  if IF_ID cs '@'.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.
    move ABAP_TRUE to LF_RELEVANT.
  else.
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq IF_ID.
      move ABAP_TRUE to LF_RELEVANT.
      exit.
    endloop.
  endif.

  check LF_RELEVANT eq ABAP_TRUE.
  read table ME->T_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT
                               transporting no fields.
  check SY-SUBRC = 0.

  LF_ACTIV_PRVDR = ME->GET_PRVDR_QTY( IF_ID           = IF_ID
                                      IF_CHECK_DETAIL = ABAP_TRUE ).

*** Check if there are less then maximal Provider
  check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_DEL.

  data:          LF_ACTIV_PRVDR       type        NUMC3,
                 LF_IRRELEVANT        type        ABAP_BOOL,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.

*** Start negativ
  move ABAP_TRUE to RF_DISABLED.
  move ABAP_TRUE to LF_IRRELEVANT.

*** Check if provider is irrelevant
  if IF_ID cs '@'.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.
    clear LF_IRRELEVANT.
  else.
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq IF_ID.
      clear LF_IRRELEVANT.
      exit.
    endloop.
  endif.

*** Irrelevant can be deleted
  if LF_IRRELEVANT eq ABAP_TRUE.
    move ABAP_FALSE to RF_DISABLED.
    exit.
  endif.

*** Check relevant provider can be deleted
  read table ME->T_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT
                               transporting no fields.
  check SY-SUBRC = 0.

  LF_ACTIV_PRVDR = ME->GET_PRVDR_QTY( IF_ID  = IF_ID ).

*** Check if there are more then minimal Provider
  check LF_ACTIV_PRVDR > LS_PRVDR_DEF-QTYMI.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_IRRELEVANT.

  data: LF_PMATY      type        ZVCXI_XCSU_PMATY,
        LF_SEQUE_C    type        STRING,
        LF_ID         type        /VCXI/CKX_ID,
        LF_RELEVANT   type        ABAP_BOOL.
  data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
  data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_PACKMAT type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
        LR_PR_CPM     type ref to ZCL_VCXI_XCSU_PR_CPM.

*** Get Gates of Provider (child)
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        check LR_GATE->GET_PARENT( ) eq ME->R_GATE.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
    clear: LR_PR_PACKMAT, LR_PR_CPM, LF_PMATY, LF_RELEVANT.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.

    if LR_PR_PACKMAT is not bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.
        move LR_PR_CPM->GET_PMATY( ) to LF_PMATY.
      endif.
    else.
      move LR_PR_PACKMAT->GET_PMATY( ) to LF_PMATY.
    endif.

    check LR_PR_PACKMAT is bound or
          LR_PR_CPM is bound.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF
            where IPRVT = LR_GATE->F_ID.

      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq LF_PMATY.
      move ABAP_TRUE to LF_RELEVANT.
      exit.

    endloop.

    check LF_RELEVANT eq ABAP_FALSE.
    move ABAP_TRUE to RF_IRRELEVANT.
    exit.

  endloop.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_XCSU_S_PACKMAT_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

**** Define Provider Type for Button
*  ME->F_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT.

endmethod.
method DEL_PRVDR.

  data:          LF_PMATY        type        ZVCXI_XCSU_PMATY,
                 LF_SHOW_INFO    type        ABAP_BOOL,
                 LF_NOT_DEL(2)   type        C,
                 LF_TOTAL(2)     type        C.
  data:          LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT   type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM       type ref to ZCL_VCXI_XCSU_PR_CPM,
                 LR_CX_CKX       type ref to /VCXI/CX_CKX.

*** Free Selected Gates
  LT_GATE = ME->GET_SELECTED_GATES( ).
  loop at LT_GATE into LR_GATE.
    check LR_GATE is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
        check LR_PR_PACKMAT is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.
      LF_PMATY = LR_PR_PACKMAT->GET_PMATY( ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
          check LR_PR_CPM is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.
        LF_PMATY = LR_PR_CPM->GET_PMATY( ).
      else.
        continue.
      endif.
    endif.

    check ME->CHECK_PRVDR_DEL( IF_ID = LF_PMATY ) eq ABAP_FALSE.

    add 1 to LF_TOTAL.
*** Check if Gate is changeable and can be deleted
    if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
      LR_GATE->DO_FREE( ).
    else.
      add 1 to LF_NOT_DEL.
      LF_SHOW_INFO = ABAP_TRUE.
    endif.

*** Init Overview
    ME->INIT_PRVDR_OV( ).

  endloop.

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->R_GATE->RAISE_EVENTS( ).

*** Init Toolbar
  ME->INIT_TOOLBAR_DEF( ).

*** Show Info Message if Someone want to delete an Packmat of an Packaging code.
  if LF_SHOW_INFO eq ABAP_TRUE.
    try.
***     &1 of &1 Packaging Materials were not deleted (Packaging Code assignment).
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                              IF_MSGID = 'ZVCXI_XCSU'
                                              IF_MSGNO = '030'
                                              IF_MSGV1 = LF_NOT_DEL
                                              IF_MSGV2 = LF_TOTAL ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
    endtry.
  endif.

endmethod.
method GET_CPM_VIS.

  data:            LS_PMQTY             type          ZVCXI_XCSU_S_PMQTY.
  data:            LR_GATE              type ref to   /VCXI/CL_VKSR_GATE.

  move IR_PR_CPM->GET_PMATY( )       to RS_CPM_VIS-PMATY.
  move IR_PR_CPM->GET_VCPMC( )       to LR_GATE.
  if LR_GATE is bound.
    move LR_GATE->F_ID               to RS_CPM_VIS-VCPMC.
  endif.

  IR_PR_CPM->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
  move-corresponding LS_PMQTY        to RS_CPM_VIS.
  move IR_PR_CPM->GET_FOVRR_PMQTY( ) to RS_CPM_VIS-FOVRR_PMQTY.

  IR_PR_CPM->GET_CONSC( importing EF_CONSC = RS_CPM_VIS-CONSC ).
  move IR_PR_CPM->GET_FOVRR_CONSC( ) to RS_CPM_VIS-FOVRR_CONSC.

  move IR_PR_CPM->GET_PAMAI( )       to RS_CPM_VIS-PAMAI.
  move IR_PR_CPM->GET_PAMAI_DESCR( ) to RS_CPM_VIS-PAMAI_DESCR.

  move IR_PR_CPM->GET_TEXT( )        to RS_CPM_VIS-TEXT.

endmethod.
method GET_FIELDCAT.

  data: LF_LOCKED   type /VCXI/CKX_LOCKED,
        LF_INUSE    type /VCXI/VKSR_INUSE,
        LF_LIFNR    type ABAP_BOOL,
        LF_PRICE    type ABAP_BOOL,
        LF_COLPOS   type I,
        LF_DRDN_HDL type INT4.
  data: LS_PACKMAT_GRID type ZVCXI_XCSU_S_PACKMAT_GRID,
        LS_VCPMC        type ZVCXI_XCSU_S_VCPMC.
  data: LT_DROPDOWN type LVC_T_DRAL,
        LT_VCPMC    type ZVCXI_XCSU_TT_VCPMC.
  field-symbols: <T_DATA>     type standard table,
                 <S_DATA>     type          ANY,
                 <S_FCAT>     type          LVC_S_FCAT,
                 <S_DROPDOWN> type          LVC_S_DRAL.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_PACKMAT_GRID.
    case LS_PACKMAT_GRID-PURCH.
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
        LF_LIFNR = ABAP_TRUE.
        LF_PRICE = ABAP_TRUE.
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
        LF_LIFNR = ABAP_TRUE.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL' or
           'PMATY_DESCR' or 'FOVRR_EFFCT' or 'DD_HANDLE_VCPMC'.
        move ABAP_TRUE    to <S_FCAT>-TECH.
        move 0            to <S_FCAT>-COL_POS.

      when 'PMATN' or 'TEXT' or 'PMQTY' or 'PAMAI' or
           'CONSC' or 'PRICE' or 'PRICP' or 'LIFNR' .
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'VCPMC'.
        if ME->F_NO_CPM eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-TECH.
        else.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            add 1 to LF_DRDN_HDL.
            move ABAP_TRUE          to <S_FCAT>-EDIT.
            move ABAP_TRUE          to <S_FCAT>-F4AVAILABL.
            move LF_DRDN_HDL        to <S_FCAT>-DRDN_HNDL.
            move ABAP_TRUE          to <S_FCAT>-DRDN_ALIAS.
            concatenate 'DD_HANDLE_'
                  <S_FCAT>-FIELDNAME into <S_FCAT>-DRDN_FIELD.

            move '!'                to <S_FCAT>-CHECKTABLE.
          endif.
        endif.


      when 'FOVRR_PMQTY' or 'FOVRR_CONSC'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
          move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        endif.

      when 'PURCH'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'SCALE'.
        if ME->F_SCALE_ACTIVE eq ABAP_FALSE.
          move ABAP_TRUE    to <S_FCAT>-TECH.
        else.
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
            move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
          endif.
        endif.
    endcase.

***----------------------------------------------------------------------------
*** Hide Field if not purchase
    if LF_LIFNR ne ABAP_TRUE.
      if <S_FCAT>-FIELDNAME eq 'LIFNR' or
         <S_FCAT>-FIELDNAME eq 'LIFNR_DESCR'.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.
    endif.
    if LF_PRICE ne ABAP_TRUE.
      if <S_FCAT>-FIELDNAME eq 'PRICE' or
         <S_FCAT>-FIELDNAME eq 'PRICE_CURR' or
         <S_FCAT>-FIELDNAME eq 'PRICP' or
         <S_FCAT>-FIELDNAME eq 'PRICP_UOM'.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Add DropDown Handle
    if <S_FCAT>-DRDN_HNDL is not initial and
       <S_FCAT>-TECH      eq ABAP_FALSE.

***   Get all Possible Variants.
      LT_VCPMC = ME->GET_VALID_VCPMC( ).

      loop at LT_VCPMC into LS_VCPMC.
        append initial line to LT_DROPDOWN assigning <S_DROPDOWN>.
        <S_DROPDOWN>-HANDLE = <S_FCAT>-DRDN_HNDL.
        <S_DROPDOWN>-VALUE  = LS_VCPMC-VCPMC.
        <S_DROPDOWN>-INT_VALUE = LS_VCPMC-VCPMC.
      endloop.
    endif.

***----------------------------------------------------------------------------
*** Set Position for each Field
    move 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PMATY'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'VCPMC'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PMATN'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PMATN_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'CONSC'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'FOVRR_CONSC'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PMQTY'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PMQTY_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'FOVRR_PMQTY'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PAMAI'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PAMAI_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PURCH'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'SCALE'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LIFNR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LIFNR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICE'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICE_CURR'.  <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICP'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICP_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'TEXT'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
  endloop.

  check LT_DROPDOWN is not initial.
  ME->R_GRID->SET_DROP_DOWN_TABLE( IT_DROP_DOWN_ALIAS = LT_DROPDOWN ).

endmethod.
method GET_GRID_DATA.

  data:          LF_DUMMY             type          ABAP_BOOL,
                 LF_SCALE_ACTIVE      type          ABAP_BOOL.
  data:          LS_PACKMAT_GRID      type          ZVCXI_XCSU_S_PACKMAT_GRID,
                 LS_PACKMAT_VIS       type          ZVCXI_XCSU_S_PACKMAT_VIS,
                 LS_CPM_VIS           type          ZVCXI_XCSU_S_CPM_VIS.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM          type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT        type ref to   ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM            type ref to   ZCL_VCXI_XCSU_PR_CPM.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  clear: ME->F_SCALE_ACTIVE.
  ME->F_NO_CPM = ABAP_TRUE.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Packaging Material
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_PACKMAT_GRID, LF_DUMMY, LF_SCALE_ACTIVE.

***------------------------------------------------------------------------------------------------
*** Get Data from PR Class
    move LR_GATE->GET_POSID( ) to LS_PACKMAT_GRID-POSID.
    move LR_GATE->F_GATKY      to LS_PACKMAT_GRID-GATKY.
    move LR_GATE               to LS_PACKMAT_GRID-R_GATE.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.

    if LR_PR_PACKMAT is bound.
*** --------------------------------------------------------------------------------------------
***   Get Data of Packaging Material
      LS_PACKMAT_VIS = ME->GET_PACKMAT_VIS( IR_PR_PACKMAT = LR_PR_PACKMAT ).
      move-corresponding LS_PACKMAT_VIS to LS_PACKMAT_GRID.

      move LR_PR_PACKMAT->IS_DUMMY( )        to LF_DUMMY.
      move LR_PR_PACKMAT->IS_SCALE_ACTIVE( ) to LF_SCALE_ACTIVE.
      if LF_SCALE_ACTIVE eq ABAP_TRUE.
        move ABAP_TRUE to ME->F_SCALE_ACTIVE.
      endif.
      move LR_PR_PACKMAT->GET_SCALE( )       to LS_PACKMAT_GRID-SCALE.


*** --------------------------------------------------------------------------------------------
***   Set Style Details
      ME->CHANGE_STYLE_PACKMAT( exporting IF_PURCH        = LS_PACKMAT_GRID-PURCH
                                          IF_FOVRR_CONSC  = LS_PACKMAT_GRID-FOVRR_CONSC
                                          IF_FOVRR_PMQTY  = LS_PACKMAT_GRID-FOVRR_PMQTY
                                          IF_DUMMY        = LF_DUMMY
                                          IF_SCALE_ACTIVE = LF_SCALE_ACTIVE
                                          IF_SCALE        = LS_PACKMAT_GRID-SCALE
                                changing  CT_STYL         = LS_PACKMAT_GRID-T_STYL ).


    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.

      if LR_PR_CPM is bound.
        clear: ME->F_NO_CPM.
*** --------------------------------------------------------------------------------------------
***     Get Data of Configured Packaging Material
        LS_CPM_VIS = ME->GET_CPM_VIS( IR_PR_CPM = LR_PR_CPM ).
        move-corresponding LS_CPM_VIS to LS_PACKMAT_GRID.
        move 1                        to LS_PACKMAT_GRID-DD_HANDLE_VCPMC.

*** --------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_CPM( exporting IF_FOVRR_CONSC  = LS_PACKMAT_GRID-FOVRR_CONSC
                                        IF_FOVRR_PMQTY  = LS_PACKMAT_GRID-FOVRR_PMQTY
                              changing  CT_STYL         = LS_PACKMAT_GRID-T_STYL ).

      endif.
    endif.

*** Call DVC Service - Modify Style
    ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                         changing  CT_STYL = LS_PACKMAT_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_PACKMAT_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_PACKMAT_VIS.

  data:            LS_PMQTY             type          ZVCXI_XCSU_S_PMQTY,
                   LS_PRICE             type          ZVCXI_XCS_S_PRICE,
                   LS_PRICP             type          ZVCXI_XCS_S_PRICP.

  move IR_PR_PACKMAT->GET_PMATY( )       to RS_PACKMAT_VIS-PMATY.
  move IR_PR_PACKMAT->GET_PMATN( )       to RS_PACKMAT_VIS-PMATN.
  move IR_PR_PACKMAT->GET_PMATN_DESCR( ) to RS_PACKMAT_VIS-PMATN_DESCR.

  IR_PR_PACKMAT->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
  move-corresponding LS_PMQTY            to RS_PACKMAT_VIS.
  move IR_PR_PACKMAT->GET_FOVRR_PMQTY( ) to RS_PACKMAT_VIS-FOVRR_PMQTY.

  IR_PR_PACKMAT->GET_CONSC( importing EF_CONSC = RS_PACKMAT_VIS-CONSC ).
  move IR_PR_PACKMAT->GET_FOVRR_CONSC( ) to RS_PACKMAT_VIS-FOVRR_CONSC.

  move IR_PR_PACKMAT->GET_PAMAI( )       to RS_PACKMAT_VIS-PAMAI.
  move IR_PR_PACKMAT->GET_PAMAI_DESCR( ) to RS_PACKMAT_VIS-PAMAI_DESCR.

  move IR_PR_PACKMAT->GET_TEXT( )        to RS_PACKMAT_VIS-TEXT.

  move IR_PR_PACKMAT->GET_PURCH( )       to RS_PACKMAT_VIS-PURCH.
  move IR_PR_PACKMAT->GET_LIFNR( )       to RS_PACKMAT_VIS-LIFNR.
  move IR_PR_PACKMAT->GET_LIFNR_DESCR( ) to RS_PACKMAT_VIS-LIFNR_DESCR.

  move IR_PR_PACKMAT->GET_PRICE( )       to LS_PRICE.
  move-corresponding LS_PRICE            to RS_PACKMAT_VIS.

  move IR_PR_PACKMAT->GET_PRICP( )       to LS_PRICP.
  move-corresponding LS_PRICP            to RS_PACKMAT_VIS.

  move IR_PR_PACKMAT->GET_SCALE( )       to RS_PACKMAT_VIS-SCALE.

endmethod.
method GET_PRVDR_QTY.

  data:          LS_PRVDR_OV          type        YS_PRVDR_OV.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.

  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV.
    check LS_PRVDR_OV-R_GATE is bound.
    check LF_ID eq LS_PRVDR_OV-ID.
    if IF_CHECK_DETAIL eq ABAP_TRUE.
      check LF_SEQUE eq LS_PRVDR_OV-SEQUE.
    endif.

    add 1 to RF_QTY.

  endloop.

endmethod.
method GET_VALID_VCPMC.

  data:          LS_PACKMAT_GRID type          ZVCXI_XCSU_S_PACKMAT_GRID.
  data:          LT_VCPMC        type          ZVCXI_XCSU_TT_VCPMC.
  data:          LR_PR_CPM       type ref to   ZCL_VCXI_XCSU_PR_CPM.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_PACKMAT_GRID.

    try.
        move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_CPM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_CPM.
    endtry.

    check LR_PR_CPM is bound.
    LT_VCPMC = LR_PR_CPM->GET_ALL_VCPMC( ).

    append lines of LT_VCPMC to RT_VCPMC.

  endloop.

  sort RT_VCPMC by VCPMC.
  delete adjacent duplicates from RT_VCPMC.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_ROW_ID            type          I.
  data: LS_PACKMAT_GRID type          ZVCXI_XCSU_S_PACKMAT_GRID,
        LS_MODI         type          LVC_S_MODI,
        LS_PMQTY        type          ZVCXI_XCSU_S_PMQTY,
        LS_PRICE        type          ZVCXI_XCS_S_PRICE,
        LS_PRICP        type          ZVCXI_XCS_S_PRICP.
  data: LR_PR_PACKMAT type ref to   ZCL_VCXI_XCSU_PR_PACKMAT,
        LR_PR_CPM     type ref to   ZCL_VCXI_XCSU_PR_CPM,
        LR_CX_CKX     type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        clear: LR_PR_CPM, LR_PR_PACKMAT.

        move SY-TABIX to LF_ROW_ID.
        read table ET_GOOD_CELLS with key ROW_ID = LF_ROW_ID
                                 transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PACKMAT_GRID.
        check LS_PACKMAT_GRID-R_GATE is bound.

        try.
            move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_PACKMAT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PACKMAT.
        endtry.
        if LR_PR_PACKMAT is not bound.
          try.
              move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_CPM.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_PR_CPM.
          endtry.
        endif.

***     Set Values to PR Class
        loop at ET_GOOD_CELLS into LS_MODI where ROW_ID = LF_ROW_ID.
          case LS_MODI-FIELDNAME.
            when 'PMATY'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_PMATY( IF_PMATY = LS_PACKMAT_GRID-PMATY
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              elseif LR_PR_CPM is bound.
                LR_PR_CPM->SET_PMATY( IF_PMATY = LS_PACKMAT_GRID-PMATY
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PMATN'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_PMATN( IF_PMATN = LS_PACKMAT_GRID-PMATN
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'VCPMC'.
              if LR_PR_CPM is bound.
                LR_PR_CPM->CREATE_VCPMC( IF_VCPMC = LS_PACKMAT_GRID-VCPMC ).
              endif.

            when 'CONSC'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_CONSC( IF_CONSC = LS_PACKMAT_GRID-CONSC
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              elseif LR_PR_CPM is bound.
                LR_PR_CPM->SET_CONSC( IF_CONSC = LS_PACKMAT_GRID-CONSC
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PMQTY'.
              move-corresponding LS_PACKMAT_GRID to LS_PMQTY.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_PMQTY( IS_PMQTY = LS_PMQTY
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              elseif LR_PR_CPM is bound.
                LR_PR_CPM->SET_PMQTY( IS_PMQTY = LS_PMQTY
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PAMAI'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_PAMAI( IF_PAMAI = LS_PACKMAT_GRID-PAMAI
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              elseif LR_PR_CPM is bound.
                LR_PR_CPM->SET_PAMAI( IF_PAMAI = LS_PACKMAT_GRID-PAMAI
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'TEXT'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_TEXT(  IF_TEXT  = LS_PACKMAT_GRID-TEXT
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              elseif LR_PR_CPM is bound.
                LR_PR_CPM->SET_TEXT( IF_TEXT  = LS_PACKMAT_GRID-TEXT
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PURCH'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_PURCH( IF_PURCH = LS_PACKMAT_GRID-PURCH
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'LIFNR'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_LIFNR( IF_LIFNR = LS_PACKMAT_GRID-LIFNR
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PRICE'.
              if LR_PR_PACKMAT is bound.
                move-corresponding LS_PACKMAT_GRID to LS_PRICE.
                LR_PR_PACKMAT->SET_PRICE( IS_PRICE = LS_PRICE
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'PRICP'.
              if LR_PR_PACKMAT is bound.
                move-corresponding LS_PACKMAT_GRID to LS_PRICP.
                LR_PR_PACKMAT->SET_PRICP( IS_PRICP = LS_PRICP
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endif.

            when 'SCALE'.
              if LR_PR_PACKMAT is bound.
                LR_PR_PACKMAT->SET_SCALE( IF_SCALE = LS_PACKMAT_GRID-SCALE ).
              endif.

          endcase.
        endloop.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_PACKMAT_GRID      type          ZVCXI_XCSU_S_PACKMAT_GRID.
  data:          LR_PR_PACKMAT        type ref to   ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM            type ref to   ZCL_VCXI_XCSU_PR_CPM,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.


        move-corresponding <S_DATA> to LS_PACKMAT_GRID.
        check LS_PACKMAT_GRID-R_GATE is bound.

        try.
            move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_PACKMAT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PACKMAT.
        endtry.
        if LR_PR_PACKMAT is not bound.
          try.
              move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_CPM.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_PR_CPM.
          endtry.
        endif.

***     Set Values to PR Class
        case E_COLUMN_ID-FIELDNAME.
          when 'FOVRR_PMQTY'.
            case LS_PACKMAT_GRID-FOVRR_PMQTY.
              when ABAP_TRUE.  move ABAP_FALSE to LS_PACKMAT_GRID-FOVRR_PMQTY.
              when ABAP_FALSE. move ABAP_TRUE  to LS_PACKMAT_GRID-FOVRR_PMQTY.
            endcase.

            if LR_PR_PACKMAT is bound.
              LR_PR_PACKMAT->SET_FOVRR_PMQTY( IF_FOVRR = LS_PACKMAT_GRID-FOVRR_PMQTY ).
            elseif LR_PR_CPM is bound.
              LR_PR_CPM->SET_FOVRR_PMQTY( IF_FOVRR = LS_PACKMAT_GRID-FOVRR_PMQTY ).
            endif.

          when 'FOVRR_CONSC'.
            case LS_PACKMAT_GRID-FOVRR_CONSC.
              when ABAP_TRUE.  move ABAP_FALSE to LS_PACKMAT_GRID-FOVRR_CONSC.
              when ABAP_FALSE. move ABAP_TRUE  to LS_PACKMAT_GRID-FOVRR_CONSC.
            endcase.

            if LR_PR_PACKMAT is bound.
              LR_PR_PACKMAT->SET_FOVRR_CONSC( IF_FOVRR = LS_PACKMAT_GRID-FOVRR_CONSC ).
            elseif LR_PR_CPM is bound.
              LR_PR_CPM->SET_FOVRR_CONSC( IF_FOVRR = LS_PACKMAT_GRID-FOVRR_CONSC ).
            endif.

          when 'SCALE'.
            case LS_PACKMAT_GRID-SCALE.
              when ABAP_TRUE.  move ABAP_FALSE to LS_PACKMAT_GRID-SCALE.
              when ABAP_FALSE. move ABAP_TRUE  to LS_PACKMAT_GRID-SCALE.
            endcase.

            if LR_PR_PACKMAT is bound.
              LR_PR_PACKMAT->SET_SCALE( IF_SCALE = LS_PACKMAT_GRID-SCALE ).
            endif.

          when others.
            exit.
        endcase.


      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method HANDLE_MENU_BUTTON.

  data:  LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_FUNCTION   type        UIATTENTRY.
  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.
  data:  LT_FUNCTIONS  type        UI_FUNCATTR.

  try.
      case E_UCOMM.
        when 'ADD'.

          SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                     E_UCOMM  = E_UCOMM ).

***       Get old Functions
          E_OBJECT->GET_FUNCTIONS( importing FCODES = LT_FUNCTIONS ).
***       Clear all
          E_OBJECT->CLEAR( ).

*** -----------------------------------------
***       Add Additional Data
          loop at LT_FUNCTIONS into LS_FUNCTION.
            read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index SY-TABIX.

***         Set Icon
            case LS_FUNCTION-DISABLED.
              when ABAP_TRUE.
***             Everything is Okay
                LS_FUNCTION-ICON = C_ICON_OKAY.

              when ABAP_FALSE.
***             If there are still some Missing -> Caution
                if ME->GET_PRVDR_QTY( IF_ID           = LS_PRVDR_DEF-ID
                                      IF_CHECK_DETAIL = ABAP_TRUE ) lt LS_PRVDR_DEF-QTYMI.
                  LS_FUNCTION-ICON = C_ICON_CAUTION.
                else.
                  LS_FUNCTION-ICON = C_ICON_OKAY.
                endif.

***             If we have a Packaging code not all Packaging Materials should be enabled.
                if ME->PMATY_DISABLED( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.
                  move ABAP_TRUE to LS_FUNCTION-DISABLED.
                endif.

            endcase.
***         Add Function
            E_OBJECT->ADD_FUNCTION( FCODE    = LS_FUNCTION-FCODE
                                    TEXT     = LS_FUNCTION-TEXT
                                    ICON     = LS_FUNCTION-ICON
                                    DISABLED = LS_FUNCTION-DISABLED ).

          endloop.

        when others.

          SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                     E_UCOMM  = E_UCOMM ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LS_PACKMAT_GRID      type          ZVCXI_XCSU_S_PACKMAT_GRID.
  data:          LR_PR_PACKMAT        type ref to   ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM            type ref to   ZCL_VCXI_XCSU_PR_CPM,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        move-corresponding <S_DATA> to LS_PACKMAT_GRID.
        check LS_PACKMAT_GRID-R_GATE is bound.

        try.
            move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_PACKMAT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PACKMAT.
        endtry.

        if LR_PR_PACKMAT is not bound.
          try.
              move LS_PACKMAT_GRID-R_GATE->R_CLSPR ?to LR_PR_CPM.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_PR_CPM.
          endtry.
        endif.

***     Handle F4 call
        case E_FIELDNAME.
          when 'PMATY'.
            if LR_PR_PACKMAT is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-PMATY = LR_PR_PACKMAT->CALL_SHLP_PMATY( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-PMATY is not initial.
                if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                  LR_PR_PACKMAT->SET_PMATY( IF_PMATY = LS_PACKMAT_GRID-PMATY
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            elseif LR_PR_CPM is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-PMATY = LR_PR_CPM->CALL_SHLP_PMATY( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-PMATY is not initial.
                if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                  LR_PR_CPM->SET_PMATY( IF_PMATY = LS_PACKMAT_GRID-PMATY
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            endif.

          when 'PMATN'.
            if LR_PR_PACKMAT is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-PMATN = LR_PR_PACKMAT->CALL_SHLP_PMATN( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-PMATN is not initial.
                if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                  LR_PR_PACKMAT->SET_PMATN( IF_PMATN = LS_PACKMAT_GRID-PMATN
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            endif.

          when 'CONSC'.
            if LR_PR_PACKMAT is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-CONSC = LR_PR_PACKMAT->CALL_SHLP_CONSC( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-CONSC is not initial.
                if ME->R_GATE->IS_LOCKED( )     eq ABAP_TRUE and
                   LS_PACKMAT_GRID-FOVRR_CONSC  eq ABAP_TRUE.
                  LR_PR_PACKMAT->SET_CONSC( IF_CONSC = LS_PACKMAT_GRID-CONSC
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            elseif LR_PR_CPM is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-CONSC = LR_PR_CPM->CALL_SHLP_CONSC( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-CONSC is not initial.
                if ME->R_GATE->IS_LOCKED( )     eq ABAP_TRUE and
                   LS_PACKMAT_GRID-FOVRR_CONSC  eq ABAP_TRUE.
                  LR_PR_CPM->SET_CONSC( IF_CONSC = LS_PACKMAT_GRID-CONSC
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            endif.

          when 'PAMAI'.
            if LR_PR_PACKMAT is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-PAMAI = LR_PR_PACKMAT->CALL_SHLP_PAMAI( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-PAMAI is not initial.
                if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                  LR_PR_PACKMAT->SET_PAMAI( IF_PAMAI = LS_PACKMAT_GRID-PAMAI
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            elseif LR_PR_CPM is bound.
              ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              LS_PACKMAT_GRID-PAMAI = LR_PR_CPM->CALL_SHLP_PAMAI( IF_DISPLAY = E_DISPLAY ).
              if LS_PACKMAT_GRID-PAMAI is not initial.
                if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                  LR_PR_CPM->SET_PAMAI( IF_PAMAI = LS_PACKMAT_GRID-PAMAI
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                  ME->R_GATE->RAISE_EVENTS( ).
                endif.
              endif.
            endif.
        endcase.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

  if ER_EVENT_DATA->M_EVENT_HANDLED eq ABAP_TRUE.
*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.
  endif.

endmethod.
method INIT_PRVDR_OV.

  data:          LS_PRVDR_OV          type        YS_PRVDR_OV,
                 LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_PRVDR_DEF_G       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_OV          type        YT_PRVDR_OV.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT        type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM            type ref to ZCL_VCXI_XCSU_PR_CPM.
  data:          LF_SEQUE_C           type        STRING.
  field-symbols: <S_PRVDR_OV>         type        YS_PRVDR_OV.

  clear: ME->T_PRVDR_OV.


  loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
    move-corresponding LS_PRVDR_DEF to LS_PRVDR_OV.

    split LS_PRVDR_DEF-ID at '@' into LS_PRVDR_OV-ID LF_SEQUE_C.
    move LF_SEQUE_C to LS_PRVDR_OV-SEQUE.
    move 1 to LS_PRVDR_OV-QTYMA.


    do LS_PRVDR_DEF-QTYMA times.
      if LS_PRVDR_DEF-QTYMI gt '000'.
        subtract 1 from LS_PRVDR_OV-QTYMI.
        move '001' to LS_PRVDR_OV-QTYMI.
      else.
        move '000' to  LS_PRVDR_OV-QTYMI.
      endif.
      add 1 to LS_PRVDR_OV-INDEX.
      append LS_PRVDR_OV to ME->T_PRVDR_OV.
    enddo.

  endloop.

  move ME->T_PRVDR_OV to LT_PRVDR_OV.

  read table ME->T_PRVDR_DEF_G into LS_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT.
  check SY-SUBRC = 0.

*** Get Gates of Provider (child)
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    check LR_GATE->GET_PARENT( ) eq ME->R_GATE.

    loop at ME->T_PRVDR_OV assigning <S_PRVDR_OV> where R_GATE is initial.
      read table LT_PRVDR_OV with key index = <S_PRVDR_OV>-INDEX transporting no fields.
      check SY-SUBRC = 0.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PACKMAT.
      endtry.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.

      if LR_PR_PACKMAT is bound.
        check LR_PR_PACKMAT->GET_PMATY( ) is not initial.

        if LR_PR_PACKMAT->GET_PMATY( ) eq <S_PRVDR_OV>-ID.
          move LR_GATE to <S_PRVDR_OV>-R_GATE.
          delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
          exit.
        else.
          delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
        endif.

      elseif LR_PR_CPM is bound.
        check LR_PR_CPM->GET_PMATY( ) is not initial.

        if LR_PR_CPM->GET_PMATY( ) eq <S_PRVDR_OV>-ID.
          move LR_GATE to <S_PRVDR_OV>-R_GATE.
          delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
          exit.
        else.
          delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
        endif.
      endif.

    endloop.
  endloop.

endmethod.
method INIT_TOOLBAR_DEF.

  data:          LF_SHUNT           type        ZVCXI_XCSU_SHUNT,
                 LF_ISVCE           type        ZVCXI_XCS_ISVCE,
                 LF_INDEX           type        I,
                 LF_SEQUE           type        STRING.
  data:          LR_CUST_SHIPU      type ref to ZCL_VCXI_XCSU_CUST_SHIPU,
                 LR_PR_SHIPUNIT     type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_SHUNT_PMATY     type        ZVCXI_XCS_TC183.
  data:          LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
                 LT_SHUNT_PMATY     type        ZVCXI_XCSU_TT_SHUNT_PMATY,
                 LT_SHUNT_PMATY_TMP type        ZVCXI_XCSU_TT_SHUNT_PMATY.
  field-symbols: <S_SHUNT_PMATY>    type        ZVCXI_XCS_TC183,
                 <S_PRVDR_DEF>      type        /VCXI/VKSR_S_PRVDR_DEF.

*** -----------------------------------------------------------------------------
*** Do Standard Definiton -> only Childs
  clear: ME->T_PRVDR_DEF.

  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
*** Check if provider is used for GRID
    check ME->CHECK_PRVDR_REL( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.

    append LS_PRVDR_DEF to ME->T_PRVDR_DEF.

  endloop.

*** -----------------------------------------------------------------------------
*** Start Special handling
*** Initialize Reference to Shipping & Unitization Cusotmizing
  move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ) to LR_CUST_SHIPU.
  check LR_CUST_SHIPU is bound.

  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      check LR_PR_SHIPUNIT is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  LF_SHUNT = LR_PR_SHIPUNIT->GET_SHUNT( ).

  clear ME->T_PRVDR_DEF_G.
  append lines of ME->T_PRVDR_DEF to ME->T_PRVDR_DEF_G.
  clear: ME->T_PRVDR_DEF.

  LT_SHUNT_PMATY_TMP = LR_CUST_SHIPU->GET_PMATY_SET_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).

  append lines of LT_SHUNT_PMATY_TMP to LT_SHUNT_PMATY.
  sort LT_SHUNT_PMATY by PMATY.
  loop at LT_SHUNT_PMATY assigning <S_SHUNT_PMATY>.
    clear: <S_SHUNT_PMATY>-MNCNT, <S_SHUNT_PMATY>-MXCNT.
    loop at LT_SHUNT_PMATY_TMP into LS_SHUNT_PMATY
      where PMATY = <S_SHUNT_PMATY>-PMATY.
      <S_SHUNT_PMATY>-MNCNT = <S_SHUNT_PMATY>-MNCNT + LS_SHUNT_PMATY-MNCNT.
      <S_SHUNT_PMATY>-MXCNT = <S_SHUNT_PMATY>-MXCNT + LS_SHUNT_PMATY-MXCNT.
    endloop.
  endloop.

  sort LT_SHUNT_PMATY by SEQUE.

  loop at LT_SHUNT_PMATY into LS_SHUNT_PMATY.
    LF_INDEX = SY-TABIX.

    LF_ISVCE = LR_CUST_SHIPU->GET_ISVCE_FOR_PMATY( IF_PMATY = LS_SHUNT_PMATY-PMATY ).
    read table ME->T_PRVDR_DEF_G assigning <S_PRVDR_DEF> with key ID = LF_ISVCE.
    check SY-SUBRC = 0.
*** Set Global Maximum/Minimum Quantity
    if LF_INDEX = 1.
      move LS_SHUNT_PMATY-MNCNT to <S_PRVDR_DEF>-QTYMI.
      move LS_SHUNT_PMATY-MXCNT to <S_PRVDR_DEF>-QTYMA.
    else.
      add LS_SHUNT_PMATY-MNCNT to <S_PRVDR_DEF>-QTYMI.
      add LS_SHUNT_PMATY-MXCNT to <S_PRVDR_DEF>-QTYMA.
    endif.

    move <S_PRVDR_DEF>-ID              to LS_PRVDR_DEF-IPRVT.
    move LS_SHUNT_PMATY-SEQUE          to LF_SEQUE.
    concatenate LS_SHUNT_PMATY-PMATY
                LF_SEQUE             into LS_PRVDR_DEF-ID separated by '@'.
    move LS_SHUNT_PMATY-MNCNT          to LS_PRVDR_DEF-QTYMI.
    move LS_SHUNT_PMATY-MXCNT          to LS_PRVDR_DEF-QTYMA.
    LS_PRVDR_DEF-DESCR = LR_CUST_SHIPU->GET_DESCR_FOR_PMATY( IF_PMATY = LS_SHUNT_PMATY-PMATY ).
    append LS_PRVDR_DEF to ME->T_PRVDR_DEF.
  endloop.

*** -----------------------------------------------------------------------------
*** Define Button
  if lines( ME->T_PRVDR_DEF )      eq 1 and
     ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_FALSE.
*** Only one Provider
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    concatenate 'Delete'(002) LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL separated by SPACE.

  elseif lines( ME->T_PRVDR_DEF )      eq 1 and
         ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_TRUE.
*** one Provider and one or more irrelevant
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  else.
*** multiple provider
*** Set Type of Add Button
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text
    move 'Add'(001)    to ME->F_TEXT_ADD.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  endif.

*** Init Provider Overview
  ME->INIT_PRVDR_OV( ).

endmethod.
method PMATY_DISABLED.

  data: LF_PMATY             type        ZVCXI_XCSU_PMATY,
        LF_SEQUE_C           type        STRING,
        LF_ID                type        /VCXI/CKX_ID,
        LF_CPACK             type        ZVCXI_XCSU_CPACK.
  data: LR_PR_SHIPUNIT       type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPUNIT.
  endtry.

  check LR_PR_SHIPUNIT is bound.
  LR_PR_SHIPUNIT->GET_DETAIL_SHIPMGR( importing EF_CPACK = LF_CPACK ).
  check LF_CPACK is not initial.

*** Get Packaging Material Type
  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_ID to LF_PMATY.

*** Check against Valid Packaging Material Type's of Packaging Codes
  read table ZCL_VCXI_XCSUC_CPACK=>T_PMATY_CPACK_V with key TABLE_LINE = LF_PMATY transporting no fields.
  check SY-SUBRC eq 0.
  move ABAP_TRUE to RF_DISABLED.

endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Hotspot
    set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

*** Search Help
    set handler ME->HANDLE_ONF4              for ME->R_GRID.

  endmethod.
method SET_PRVDR_POS.

  data:          LS_PRVDR_OV          type        YS_PRVDR_OV.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID,
                 LF_INDEX             type        I,
                 LF_INDEX_TMP         type        I,
                 LF_POSID             type        /VCXI/VKSR_POSID,
                 LF_LAST_GATE_BOUND   type        ABAP_BOOL.

  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV
    where SEQUE le LF_SEQUE.
    if LS_PRVDR_OV-R_GATE is not bound.
      if LF_LAST_GATE_BOUND eq ABAP_TRUE.
        move LF_INDEX_TMP to LF_INDEX.
      endif.
    endif.
    add 1 to LF_INDEX_TMP.

*** Get the bound status of last gate
    if LS_PRVDR_OV-R_GATE is bound.
      move ABAP_TRUE to LF_LAST_GATE_BOUND.
    else.
      move ABAP_FALSE to LF_LAST_GATE_BOUND.
    endif.
  endloop.

  read table ME->T_PRVDR_OV into LS_PRVDR_OV index LF_INDEX.
  if LS_PRVDR_OV-R_GATE is bound.
    LF_POSID = LS_PRVDR_OV-R_GATE->GET_POSID( ).
  endif.

*** Add 5 to insert after selected position
  add C_POSID_5 to LF_POSID.
  IR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
  IR_GATE->REORG_POSID( ).

endmethod.
method SET_PRVDR_POS_OLD.

  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_CELL              type        LVC_T_CELL.
  data:          LR_GATE_POS          type ref to /VCXI/CL_VKSR_GATE.
  data:          LS_PRVDR_OV          type        YS_PRVDR_OV,
                 LS_CELL              type        LVC_S_CELL.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID,
                 LF_CHECK             type        ABAP_BOOL,
                 LF_OKAY              type        ABAP_BOOL,
                 LF_INDEX             type        I.

  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
  LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE_POS index 1.
  if LR_GATE_POS is bound.
***  check if Position would be okay
    loop at ME->T_PRVDR_OV into LS_PRVDR_OV.

*** Consider only Positions after selected one
      if LF_CHECK eq ABAP_FALSE.
        if LS_PRVDR_OV-R_GATE eq LR_GATE_POS.
          move ABAP_TRUE to LF_CHECK.
        endif.
        continue.
      endif.

      if LS_PRVDR_OV-SEQUE eq LF_SEQUE and
         LS_PRVDR_OV-R_GATE is not bound.
        LF_OKAY = ABAP_TRUE.
        exit.

      elseif LS_PRVDR_OV-SEQUE lt LF_SEQUE and
             LS_PRVDR_OV-R_GATE is bound.
        exit.
      endif.

    endloop.
  endif.

  check LF_OKAY eq ABAP_FALSE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV
    where SEQUE le LF_SEQUE
      and R_GATE is bound.
    add 1 to LF_INDEX.
  endloop.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).

  read table LT_CELL into LS_CELL index 1.
  LS_CELL-ROW_ID-INDEX     = LF_INDEX.
  clear LT_CELL.
  append LS_CELL to LT_CELL.

*** Set Current Cell
  ME->R_GRID->SET_SELECTED_CELLS( IT_CELLS = LT_CELL ).

endmethod.
