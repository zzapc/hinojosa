
class ZCL_VCXI_XCDC_DVCFILTER definition
  public
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .

  data T_DF_VALID type ZVCXI_XCDC_TT_DF_VALID .
  constants C_TOOBJ_DVCFILTER type /VCXI/CKX_TOOBJ value 'DVCFILTER'. "#EC NOTEXT
  data F_DF_FUICR_CD_EXIT type ZVCXI_XCDC_FUICR read-only .
  data F_DF_ICODE type ZVCXI_XCD_ICODE read-only .
  data F_DF_ICORE type ZVCXI_XCD_ICORE read-only .
  data S_DF_ACTIVE type ZVCXI_XCDC_S_DF_ACTIVE read-only .
  data T_DF_CD_EXIT type ZVCXI_XCDC_TT_CD_EXIT read-only .

  methods SET_DF_FUICR_CD_EXIT
    importing
      !IF_DF_FUICR_CD_EXIT type ZVCXI_XCDC_FUICR
    raising
      /VCXI/CX_CKX .
  methods SET_DF_ICORE
    importing
      !IF_DF_ICORE type ZVCXI_XCD_ICORE
    raising
      /VCXI/CX_CKX .
  methods SET_DF_ICODE
    importing
      !IF_DF_ICODE type ZVCXI_XCD_ICODE
    raising
      /VCXI/CX_CKX .
  methods SET_DF_ACTIVE
    importing
      !IS_DF_ACTIVE type ZVCXI_XCDC_S_DF_ACTIVE
    raising
      /VCXI/CX_CKX .
  methods ADD_DF_VALID
    importing
      !IS_DF_VALID type ZVCXI_XCDC_S_DF_VALID
    raising
      /VCXI/CX_CKX .
  methods ADD_DF_CD_EXIT
    importing
      !IS_DF_CD_EXIT type ZVCXI_XCDC_S_CD_EXIT
    raising
      /VCXI/CX_CKX .
  methods DO_FILTER
    importing
      !IT_OBJECT type /VCXI/CKX_TT_OBJECT
    returning
      value(RT_OBJECT_FILTERED) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_IDVCF type ZVCXI_XCD_IDVCF
    returning
      value(RR_DVCFILTER) type ref to ZCL_VCXI_XCDC_DVCFILTER
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GDVCF type ZVCXI_XCD_GDVCF
    raising
      /VCXI/CX_CKX .
  methods DELETE_DF_VALID
    importing
      !IS_DF_VALID type ZVCXI_XCDC_S_DF_VALID
    raising
      /VCXI/CX_CKX .
  methods DELETE_DF_CD_EXIT
    importing
      !IS_DF_CD_EXIT type ZVCXI_XCDC_S_CD_EXIT
    raising
      /VCXI/CX_CKX .
protected section.

  data F_GDVCF type ZVCXI_XCD_GDVCF .

  methods FILTER_VALID
    changing
      !CT_OBJECT type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods FILTER_ID
    changing
      !CT_OBJECT type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods FILTER_CD_EXIT
    changing
      !CT_OBJECT type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods FILTER_ACTIVE
    changing
      !CT_OBJECT type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
private section.

  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
  data F_IDVCF type ZVCXI_XCD_IDVCF .
endclass. "ZCL_VCXI_XCDC_DVCFILTER definition
class ZCL_VCXI_XCDC_DVCFILTER implementation.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

*** Not yet needed

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

*** Not yet needed

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GDVCF to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_IDVCF to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GDVCF      type        ZVCXI_XCD_GDVCF.
  data:  LS_INSTANCE   type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_DVCFILTER  type ref to ZCL_VCXI_XCDC_DVCFILTER.

*** Check Instances
  read table ZCL_VCXI_XCDC_DVCFILTER=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GDVCF.

*** Get new Instance
    try.
        create object LR_DVCFILTER
          exporting
            IF_GDVCF = LF_GDVCF.
      catch CX_SY_CREATE_OBJECT_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    move LR_DVCFILTER ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

*** Not yet needed

endmethod.
method ADD_DF_CD_EXIT.

  field-symbols: <S_DF_CD_EXIT> type ZVCXI_XCDC_S_CD_EXIT.

*** Make sure that obejct is locked
  read table ME->T_DF_CD_EXIT assigning <S_DF_CD_EXIT> with key IEXIT = IS_DF_CD_EXIT-IEXIT
                                                                FNAME = IS_DF_CD_EXIT-FNAME.

  if SY-SUBRC ne 0.
    append initial line to ME->T_DF_CD_EXIT assigning <S_DF_CD_EXIT>.
    move-corresponding IS_DF_CD_EXIT to <S_DF_CD_EXIT>.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endif.

endmethod.
method ADD_DF_VALID.

  field-symbols: <S_DF_VALID> type ZVCXI_XCDC_S_DF_VALID.

*** Make sure that obejct is locked
  read table ME->T_DF_VALID assigning <S_DF_VALID> with key CMATN = IS_DF_VALID-CMATN
                                                            PRFID = IS_DF_VALID-PRFID
                                                            ICELM = IS_DF_VALID-ICELM.

  if SY-SUBRC ne 0.
    append initial line to ME->T_DF_VALID assigning <S_DF_VALID>.
    move-corresponding IS_DF_VALID to <S_DF_VALID>.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endif.

endmethod.
method CONSTRUCTOR.

  field-symbols:  <S_INSTANCE>       type         /VCXI/CKX_S_OBJECT_INSTANCE.

***------------------------------------------------------------------------------------------------
*** Set Import Parameter to Attributes
  move IF_GDVCF to ME->F_GDVCF.

***------------------------------------------------------------------------------------------------
*** Load DB (saved filter?)
*  ME->LOAD_FROM_DB( ).

***------------------------------------------------------------------------------------------------
*** Define Type of Object
  move C_TOOBJ_DVCFILTER to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
  append initial line to ZCL_VCXI_XCDC_DVCFILTER=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
  move ME                                  ?to <S_INSTANCE>-R_OBJECT.

endmethod.
method CREATE.

  data:  LF_GDVCF                     type        ZVCXI_XCD_GDVCF.
  data:  LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.

***--------------------------------------------------------------------------------------
*** Get GUID
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GDVCF.

*** Create Condition Definition
  try.
      create object RR_DVCFILTER
        exporting
          IF_GDVCF = LF_GDVCF.
    catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
  endtry.

  check RR_DVCFILTER is bound.
  move IF_IDVCF to RR_DVCFILTER->F_IDVCF.

endmethod.
method DELETE_DF_CD_EXIT.

  read table ME->T_DF_CD_EXIT with key IEXIT = IS_DF_CD_EXIT-IEXIT
                                       FNAME = IS_DF_CD_EXIT-FNAME
                              transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_DF_CD_EXIT where IEXIT = IS_DF_CD_EXIT-IEXIT
                              and FNAME = IS_DF_CD_EXIT-FNAME.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endif.


endmethod.
method DELETE_DF_VALID.

  read table ME->T_DF_VALID with key CMATN = IS_DF_VALID-CMATN
                                     PRFID = IS_DF_VALID-PRFID
                                     ICELM = IS_DF_VALID-ICELM
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_DF_VALID where CMATN = IS_DF_VALID-CMATN
                            and PRFID = IS_DF_VALID-PRFID
                            and ICELM = IS_DF_VALID-ICELM.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endif.


endmethod.
method DO_FILTER.

  move IT_OBJECT to RT_OBJECT_FILTERED.

*** Do Filter by ID
  ME->FILTER_ID( changing CT_OBJECT = RT_OBJECT_FILTERED ).

*** Do Filter for Validation Criteria
  ME->FILTER_VALID( changing CT_OBJECT = RT_OBJECT_FILTERED ).

*** Do Filter by active Elements
  ME->FILTER_ACTIVE( changing CT_OBJECT = RT_OBJECT_FILTERED ).

*** Do Filter by Condition Definition Exit
  ME->FILTER_CD_EXIT( changing CT_OBJECT = RT_OBJECT_FILTERED ).

endmethod.
method FILTER_ACTIVE.

  data: LF_VALID       type        ABAP_BOOL,
        LF_GCORE       type        ZVCXI_XCD_GCORE,
        LF_GUID        type        /VCXI/CKX_GUID.
  data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
        LR_SUB_OBJECT  type ref to /VCXI/IF_CKX_OBJECT,
        LR_CONDDEF     type ref to ZCL_VCXI_XCDC_CONDDEF,
        LR_CONDREC     type ref to ZCL_VCXI_XCDC_CONDREC.

  check ME->S_DF_ACTIVE-FLACT is not initial.

  loop at CT_OBJECT into LR_OBJECT.

    clear: LF_VALID.

    case LR_OBJECT->F_TOOBJ.
***   Check Condition Definition by assigned Condition Record
      when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
        move LR_OBJECT ?to LR_CONDDEF.

        loop at LR_CONDDEF->T_GCORE into LF_GCORE.

          move LF_GCORE to LF_GUID.
          LR_SUB_OBJECT = ZCL_VCXI_XCDC_CONDREC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
          move LR_SUB_OBJECT ?to LR_CONDREC.

          if ME->S_DF_ACTIVE-FLSCR    eq ABAP_TRUE     and
           ( LR_CONDREC->T_CR_SIMPACT is not initial   or
             LR_CONDREC->F_OELIU      is not initial ).
            LF_VALID = ABAP_TRUE.
          endif.

          if LF_VALID eq ABAP_FALSE.
            if ME->S_DF_ACTIVE-FLFUN  eq ABAP_TRUE   and
               LR_CONDREC->T_CR_FUNCT is not initial.

              LF_VALID = ABAP_TRUE.
            endif.

            if LF_VALID eq ABAP_FALSE.
              if ME->S_DF_ACTIVE-FLDEF    eq ABAP_TRUE     and
               ( LR_CONDREC->T_CR_DVALUE  is not initial   or
                 LR_CONDREC->T_CR_DEXIT   is not initial ).

                LF_VALID = ABAP_TRUE.
              endif.
            endif.
          endif.

        endloop.

***   Check Condition Record
      when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        move LR_OBJECT ?to LR_CONDREC.

        if ME->S_DF_ACTIVE-FLSCR    eq ABAP_TRUE     and
         ( LR_CONDREC->T_CR_SIMPACT is not initial   or
           LR_CONDREC->F_OELIU      is not initial ).
          LF_VALID = ABAP_TRUE.
        endif.

        if LF_VALID eq ABAP_FALSE.
          if ME->S_DF_ACTIVE-FLFUN  eq ABAP_TRUE   and
             LR_CONDREC->T_CR_FUNCT is not initial.

            LF_VALID = ABAP_TRUE.
          endif.

          if LF_VALID eq ABAP_FALSE.
            if ME->S_DF_ACTIVE-FLDEF    eq ABAP_TRUE     and
             ( LR_CONDREC->T_CR_DVALUE  is not initial   or
               LR_CONDREC->T_CR_DEXIT   is not initial ).

              LF_VALID = ABAP_TRUE.
            endif.
          endif.
        endif.

    endcase.

*** Object is not valid -> deleete it!!
    check LF_VALID eq ABAP_FALSE.
    delete CT_OBJECT.

  endloop.

endmethod.
method FILTER_CD_EXIT.

  data: LF_VALID       type        ABAP_BOOL.
  data: LS_DF_CD_EXIT  type        ZVCXI_XCDC_S_CD_EXIT.
  data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
        LR_CONDDEF     type ref to ZCL_VCXI_XCDC_CONDDEF,
        LR_CONDREC     type ref to ZCL_VCXI_XCDC_CONDREC.


  check ME->T_DF_CD_EXIT is not initial.

  loop at CT_OBJECT into LR_OBJECT.

    clear: LF_VALID.

    case LR_OBJECT->F_TOOBJ.
***   Check Condition Definition
      when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
        move LR_OBJECT ?to LR_CONDDEF.

***     If one of the Exit's are used -> Valid
        loop at ME->T_DF_CD_EXIT into LS_DF_CD_EXIT.
          read table LR_CONDDEF->T_CD_EXIT with key IEXIT = LS_DF_CD_EXIT-IEXIT
                                                    FNAME = LS_DF_CD_EXIT-FNAME
                                           transporting no fields.
          check SY-SUBRC = 0.
          move ABAP_TRUE to LF_VALID.
          exit.
        endloop.

***   Check Condition Record
      when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        check ME->F_DF_FUICR_CD_EXIT is not initial.
        move LR_OBJECT ?to LR_CONDREC.

***     If one of the Exit's are used -> Valid
        loop at ME->T_DF_CD_EXIT into LS_DF_CD_EXIT.
          read table LR_CONDREC->R_CONDDEF->T_CD_EXIT with key IEXIT = LS_DF_CD_EXIT-IEXIT
                                                               FNAME = LS_DF_CD_EXIT-FNAME
                                                      transporting no fields.
          check SY-SUBRC = 0.
          read table LR_CONDREC->T_CR_EXIT with key IEXIT = LS_DF_CD_EXIT-IEXIT
                                           transporting no fields.

          check SY-SUBRC = 0.
          move ABAP_TRUE to LF_VALID.
          exit.
        endloop.

    endcase.

*** Object is not valid -> deleete it!!
    check LF_VALID eq ABAP_FALSE.
    delete CT_OBJECT.

  endloop.

endmethod.
method FILTER_ID.

  data: LF_VALID       type        ABAP_BOOL.
  data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
        LR_CONDDEF     type ref to ZCL_VCXI_XCDC_CONDDEF,
        LR_CONDREC     type ref to ZCL_VCXI_XCDC_CONDREC.

  loop at CT_OBJECT into LR_OBJECT.

    clear: LF_VALID.

    case LR_OBJECT->F_TOOBJ.
***   Check Condition Definition
      when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
        check ME->F_DF_ICODE is not initial.
        move LR_OBJECT ?to LR_CONDDEF.

        if ME->F_DF_ICODE cp '*'.
          if LR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ) cp ME->F_DF_ICODE.
            move ABAP_TRUE to LF_VALID.
          endif.
        else.
          if LR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ME->F_DF_ICODE.
            move ABAP_TRUE to LF_VALID.
          endif.
        endif.

***   Check Condition Record
      when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        check ME->F_DF_ICORE is not initial.
        move LR_OBJECT ?to LR_CONDREC.

        if ME->F_DF_ICORE cp '*'.
          if LR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_ID( ) cp ME->F_DF_ICORE.
            move ABAP_TRUE to LF_VALID.
          endif.
        else.
          if LR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ME->F_DF_ICORE.
            move ABAP_TRUE to LF_VALID.
          endif.
        endif.

    endcase.

*** Object is not valid -> deleete it!!
    check LF_VALID eq ABAP_FALSE.
    delete CT_OBJECT.

  endloop.

endmethod.
method FILTER_VALID.

  data: LF_VALID       type        ABAP_BOOL.
  data: LS_CD_VALID    type        ZVCXI_XCDC_S_CD_VALID,
        LS_CR_FILTER   type        ZVCXI_XCDC_S_CR_FILTER.
  data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
        LR_CONDDEF     type ref to ZCL_VCXI_XCDC_CONDDEF,
        LR_CONDREC     type ref to ZCL_VCXI_XCDC_CONDREC.

  check ME->T_DF_VALID is not initial.

  loop at CT_OBJECT into LR_OBJECT.

    clear: LF_VALID.

    case LR_OBJECT->F_TOOBJ.
***   Check Condition Definition
      when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
        move LR_OBJECT ?to LR_CONDDEF.

        loop at LR_CONDDEF->T_CD_VALID into LS_CD_VALID.
          read table ME->T_DF_VALID with key CMATN = LS_CD_VALID-CMATN
                                             PRFID = LS_CD_VALID-PRFID
                                             ICELM = LS_CD_VALID-ICELM
                                    transporting no fields.

          if SY-SUBRC ne 0.
            read table ME->T_DF_VALID with key CMATN = LS_CD_VALID-CMATN
                                               PRFID = LS_CD_VALID-PRFID
                                               ICELM = '*'
                                      transporting no fields.
          endif.

          if SY-SUBRC = 0.
            LF_VALID = ABAP_TRUE.
          endif.
        endloop.

***   Check Condition Record
      when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        move LR_OBJECT ?to LR_CONDREC.

        if LR_CONDREC->T_CR_FILTER is initial.
***       Check assigned Condition Definition
          loop at LR_CONDREC->R_CONDDEF->T_CD_VALID into LS_CD_VALID.
            read table ME->T_DF_VALID with key CMATN = LS_CD_VALID-CMATN
                                               PRFID = LS_CD_VALID-PRFID
                                               ICELM = LS_CD_VALID-ICELM
                                      transporting no fields.
            if SY-SUBRC ne 0.
              read table ME->T_DF_VALID with key CMATN = LS_CD_VALID-CMATN
                                                 PRFID = LS_CD_VALID-PRFID
                                                 ICELM = '*'
                                        transporting no fields.
            endif.

            if SY-SUBRC eq 0.
              LF_VALID = ABAP_TRUE.
            endif.
          endloop.

        else.
          loop at LR_CONDREC->T_CR_FILTER into LS_CR_FILTER.
            read table ME->T_DF_VALID with key CMATN = LS_CR_FILTER-CMATN
                                               PRFID = LS_CR_FILTER-PRFID
                                               ICELM = LS_CR_FILTER-ICELM
                                      transporting no fields.
            if SY-SUBRC ne 0.
              read table ME->T_DF_VALID with key CMATN = LS_CR_FILTER-CMATN
                                                 PRFID = LS_CR_FILTER-PRFID
                                                 ICELM = '*'
                                        transporting no fields.
            endif.

            if SY-SUBRC eq 0.
              LF_VALID = ABAP_TRUE.
            endif.
          endloop.
        endif.

    endcase.

*** Object is not valid -> deleete it!!
    check LF_VALID eq ABAP_FALSE.
    delete CT_OBJECT.

  endloop.

endmethod.
method SET_DF_ACTIVE.

  move IS_DF_ACTIVE to ME->S_DF_ACTIVE.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_DF_FUICR_CD_EXIT.

  move IF_DF_FUICR_CD_EXIT to ME->F_DF_FUICR_CD_EXIT.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_DF_ICODE.

  move IF_DF_ICODE to ME->F_DF_ICODE.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_DF_ICORE.

  move IF_DF_ICORE to ME->F_DF_ICORE.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
