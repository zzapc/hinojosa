
class ZCL_VCXI_P1SR_BL_PSTEP_LAMI definition
  public
  inheriting from ZCL_VCXI_P1SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_PXSR_ADJ_PCDIM .

  constants C_IPSTP_LAMI_INL type /VCXI/VSMC_IPSTP value 'P1_PS_LAMI_INL' ##NO_TEXT.
  constants C_IPSTP_LAMI_STS type /VCXI/VSMC_IPSTP value 'PX_PS_LAMI_STS' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods ADJ_EVQTY_BY_IMFXC
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_IMFXC
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods REPLACE_MFSI_BY_MFMI
    redefinition .
protected section.

  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .
  data T_MFMI_P type ZVCXI_P0SR_TT_MFMI_P .
  data T_PCDIM_IN type ZVCXI_P0SP_TT_PCDIM .
  data T_XSHT type ZVCXI_PXSR_TT_XSHT .
  data S_MS_LGLUE type ZVCXI_P0SR_S_MS_LGLUE .

  methods GET_GLUEA
    returning
      value(RS_GLUEA) type ZVCXI_P0SP_S_GLUEA
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_XSHT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_LGLUE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_LAMI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_CSTEP_LAMI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_MS_LGLUE
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFMI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CF_MFI type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_MFSI_P
    redefinition .
  methods FILL_SPVRE_ADDON
    redefinition .
  methods GET_PCDIM_IN
    redefinition .
  methods GET_PCDIM_OUT
    redefinition .
  methods GET_XML_DREF
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SR_BL_PSTEP_LAMI definition
class ZCL_VCXI_P1SR_BL_PSTEP_LAMI implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type /VCXI/VSMC_LDUOM,
          LF_LDVAL type /VCXI/VSMR_LDVAL.
    data: LI_LVVAL type /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE type /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***----------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Sheet Length (Outbound)
        when 'P0_LT_DO_SHTLEN'.
          move ME->S_PCDIM_OUT-PCLEN     to LF_LDVAL.
          move ME->S_PCDIM_OUT-PCLEN_UOM to LF_LDUOM.

***     Sheet Width (Outbound)
        when 'P0_LT_DO_SHTWID'.
          move ME->S_PCDIM_OUT-PCWID     to LF_LDVAL.
          move ME->S_PCDIM_OUT-PCWID_UOM to LF_LDUOM.

        when others.
          continue.
      endcase.


***----------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_LGLUE.

    data: LR_SPVCE          type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_LGLUE type ref to /VCXI/CL_VKSR_SPVRE.


***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_LGLUE'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MC_LGLUE
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_MC_LGLUE to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MC_LGLUE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    LR_SPVRE_MC_LGLUE->SET_LEOKY( IS_LEOKY = value #( LEOKY = ME->S_MS_LGLUE-MATNR
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_AVGCO_W
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = ME->S_MS_LGLUE-AVGCO
                                                      UNIT  = ME->S_MS_LGLUE-AVGCO_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Average Consumption Per
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_AVGCP_A
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = ME->S_MS_LGLUE-AVGCP
                                                      UNIT  = ME->S_MS_LGLUE-AVGCP_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Glue Area
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_GLUEA
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = ME->S_MS_LGLUE-GLUEA
                                                      UNIT  = ME->S_MS_LGLUE-GLUEA_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Glue Consumption Factor
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_CONSF
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = ME->S_MS_LGLUE-CONSF
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
    LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PURCH
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = ME->S_MS_LGLUE-PURCH
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    if ME->S_MS_LGLUE-PURCH eq ABAP_TRUE.
***   Set Price
      LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PRICE
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = ME->S_MS_LGLUE-PRICE
                                                        UNIT  = ME->S_MS_LGLUE-PRICE_CURR
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Price Unit
      LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_PRICP_W
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = ME->S_MS_LGLUE-PRICP
                                                        UNIT  = ME->S_MS_LGLUE-PRICP_UOM
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Vendor
      LR_SPVRE_MC_LGLUE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_LGLUE=>C_PARID_LIFNR
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                        ATWRT = ME->S_MS_LGLUE-LIFNR
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

  endmethod.
  method ADD_SPVRE_MFMI_P.

    data: LS_MFMI_P type ZVCXI_P0SR_S_MFMI_P,
          LS_PARAM  type /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMI type ref to /VCXI/CL_VKSR_SPVRE.


    loop at ME->T_MFMI_P into LS_MFMI_P.

***--------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                          IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMI
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMI to CT_SPVRE.
      move   ABAP_TRUE     to CF_MFI.

***   Set In Use
      LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Leading Object
      LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MFMI_P-MATNR
                                                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Component Scrap
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_KAUSF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-KAUSF                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-KAUSF_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Setup Percentage for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFISP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-MFISP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFICF                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor Per for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFICP                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Purchase Flag
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PURCH                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Text
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-TEXT                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Vendor Number
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-LIFNR                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Price
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICE              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PRICE                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PRICE_CURR                              to LS_PARAM-CURKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Price Unit
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICP_P            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PRICP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PRICP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Base Weight
      clear LS_PARAM.
      move ZCL_VCXI_PCSP_PR_MFMI_P=>C_PARID_BAWGT            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-BAWGT                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-BAWGT_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Base Weight Per
      clear LS_PARAM.
      move ZCL_VCXI_PCSP_PR_MFMI_P=>C_PARID_BAWGP_A          to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-BAWGP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-BAWGP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).


***--------------------------------------------------------------------------------------
***   Fill MFMI PC

***   Set PC Type
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCTYP            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCTYP                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Length
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCLEN            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCLEN                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCLEN_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Width
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCWID            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCWID                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCWID_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Height
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCHEI            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCHEI                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCHEI_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Ups
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCUPS            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCUPS                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Direction
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCDIR            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCDIR                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Add Price Scale Manager
      IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                              IT_PSCALE       = LS_MFMI_P-T_PSCALE
                                    changing  CT_SPVRE        = CT_SPVRE ).
    endloop.

  endmethod.
  method ADD_SPVRE_MFSI_P.

    data: LF_TABIX type I,
          LF_IMFXC type ZVCXI_XCSP_IMFXC,
          LF_NEXTL type ZVCXI_XCSP_NEXTL,
          LF_MFICF type  ZVCXI_XCSP_MFICF,
          LF_MFICP type  ZVCXI_XCSP_MFICP.
    data: LS_PCDIM type ZVCXI_P0SP_S_PCDIM.
    data: LT_PCDIM type ZVCXI_P0SP_TT_PCDIM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSI_P type ref to /VCXI/CL_VKSR_SPVRE.


***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Get all PC Dimensions
    LT_PCDIM = ME->ZIF_VCXI_PXSR_PCDIR~GET_PCDIM( ).

    loop at ME->T_IMFXC_IN into LF_IMFXC.
      move SY-TABIX to LF_TABIX.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFSI_P
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFSI_P to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Set MF X-Connect
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_IMFXC
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set "Next Low-Level Code" Flag
      LF_NEXTL = value #( ME->T_NEXTL[ LF_TABIX ] default ABAP_TRUE ).
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_NEXTL
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Consumption Factor for Material Flow In
      ME->GET_MFICF_BY_IMFXC( exporting IF_IMFXC = LF_IMFXC
                              importing EF_MFICF = LF_MFICF
                                        EF_MFICP = LF_MFICP ).
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_MFICF
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = LF_MFICF
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_MFICP
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = LF_MFICP
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set PC Direction
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Supervise Dimensions for "Next Low-Level" SFGs
      if LF_NEXTL eq ABAP_TRUE.
        LS_PCDIM = value #( LT_PCDIM[ LF_TABIX ] optional ).

        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                        ATWRT = LS_PCDIM-PCDIR
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

        if LS_PCDIM-PCTYP is not initial.
          LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCTYP
                                                          PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                          ATWRT = LS_PCDIM-PCTYP
                                                          SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
        endif.
        if LS_PCDIM-S_PCLEN is not initial.
          LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCLEN
                                                          PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                          ATFLV = LS_PCDIM-PCLEN
                                                          UNIT  = LS_PCDIM-PCLEN_UOM
                                                          SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
        endif.
        if LS_PCDIM-S_PCWID is not initial.
          LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCWID
                                                          PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                          ATFLV = LS_PCDIM-PCWID
                                                          UNIT  = LS_PCDIM-PCWID_UOM
                                                          SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
        endif.
        if LS_PCDIM-S_PCHEI is not initial.
          LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCHEI
                                                          PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                          ATFLV = LS_PCDIM-PCHEI
                                                          UNIT  = LS_PCDIM-PCHEI_UOM
                                                          SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
        endif.
        if LS_PCDIM-PCUPS is not initial.
          LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCUPS
                                                          PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                          ATFLV = LS_PCDIM-PCUPS
                                                          SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
        endif.
      endif.

***   No Flute (normal forwarding is suppressed by supervised Flute) for Lamination Sheets
      if LINE_EXISTS( ME->T_XSHT[ IMFXC = LF_IMFXC ] ).
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_PCSP_MF_FLUTE=>C_PARID_FLUTE
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                        ATWRT = SPACE
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
    endloop.

  endmethod.
  method ADJ_EVQTY_BY_IMFXC.

    data: LS_PCDIM_IN type ZVCXI_P0SP_S_PCDIM.


***--------------------------------------------------------------------------------------
    case ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = CS_EVQTY-EVQTY_UOM ).
***   Convert Length to PC
      when 'LENGTH'.
        LS_PCDIM_IN = value #( ME->T_PCDIM_IN[ 1 ] optional ).  "First dimension is used for all conversions

        if LS_PCDIM_IN-PCLEN ne 0.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_EVQTY-EVQTY
                                                              IF_CALCV_UOM_1 = CS_EVQTY-EVQTY_UOM
                                                              IF_CALCV_2     = LS_PCDIM_IN-PCLEN
                                                              IF_CALCV_UOM_2 = LS_PCDIM_IN-PCLEN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                    importing EF_CALCV       = CS_EVQTY-EVQTY ).
          CS_EVQTY-EVQTY_UOM = 'ST'.

***       Round Depending on PC Typ Out
          ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = ME->S_PCDIM_OUT-PCTYP
                                                     changing  CF_VALUE = CS_EVQTY-EVQTY ).

        else.
          clear: CS_EVQTY.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Continue with Standard
    SUPER->ADJ_EVQTY_BY_IMFXC( exporting IF_IMFXC = IF_IMFXC
                               changing  CS_EVQTY = CS_EVQTY ).

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P1SR_BL_PSTEP_LAMI.


*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

*** PC Dimensions
    if ME->T_PCDIM_IN  eq LR_BL_PSTEP_LAMI->T_PCDIM_IN  and
       ME->S_PCDIM_OUT eq LR_BL_PSTEP_LAMI->S_PCDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Sheets
    if ME->T_XSHT     eq LR_BL_PSTEP_LAMI->T_XSHT    and
       ME->T_MFMI_P   eq LR_BL_PSTEP_LAMI->T_MFMI_P.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Glue
    if ME->S_MS_LGLUE eq LR_BL_PSTEP_LAMI->S_MS_LGLUE.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize different Outsourcing Info based on Lamination Type
    ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP = switch #( ME->F_IPSTP when C_IPSTP_LAMI_INL then ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L
                                                                     when C_IPSTP_LAMI_STS then ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P ).
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P1SR_BL_PSTEP_LAMI.


*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_LAMI.

*** PC Dimensions
    LR_BL_PSTEP_LAMI->T_PCDIM_IN  = ME->T_PCDIM_IN.
    LR_BL_PSTEP_LAMI->S_PCDIM_OUT = ME->S_PCDIM_OUT.

*** Sheets
    LR_BL_PSTEP_LAMI->T_XSHT     = ME->T_XSHT.
    LR_BL_PSTEP_LAMI->T_MFMI_P   = ME->T_MFMI_P.

*** Glue
    LR_BL_PSTEP_LAMI->S_MS_LGLUE = ME->S_MS_LGLUE.

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'P0_AT_LAMI'.
        ME->FILL_SPVRE_ADDON_LAMI( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_LAMI.

***------------------------------------------------------------------------------------------------
*** Set PC Type
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCTYP
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = ME->S_PCDIM_OUT-PCTYP
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Length
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCLEN
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCLEN
                                                   UNIT  = ME->S_PCDIM_OUT-PCLEN_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Width
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCWID
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCWID
                                                   UNIT  = ME->S_PCDIM_OUT-PCWID_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Height
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCHEI
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCHEI
                                                   UNIT  = ME->S_PCDIM_OUT-PCHEI_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Number of Ups
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCUPS
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCUPS
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Number of Outs
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_NOOUT
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-NOOUT
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set PC Direction
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ADDON_LAMI=>C_PARID_PCDIR
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = ME->S_PCDIM_OUT-PCDIR
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Lamination Glue
    ME->ADD_SPVRE_MC_LGLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                      IR_SPVRE_PARENT = IR_SPVRE_ADDON
                                      IR_ARBPL        = IR_ARBPL
                            changing  CT_SPVRE        = CT_SPVRE ).


  endmethod.
  method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Overrule existing
    clear: CF_ID_GRP,
           CF_ID_ARBPL.

***------------------------------------------------------------------
*** Different based on Lamination Type
    case ME->F_IPSTP.
***   Inline Lamination
      when C_IPSTP_LAMI_INL.
        CF_ID_ARBPL = cond #( when ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE then 'OUTSO_LTP'
                                                                                   else 'INLLAM' ).

***   Sheet-to-Sheet Lamination
      when C_IPSTP_LAMI_STS.
        CF_ID_ARBPL = cond #( when ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE then 'OUTSO'
                                                                                   else 'CONV' ).

    endcase.

  endmethod.
  method GET_GLUEA.

    data: LS_PCDIM type ZVCXI_P0SP_S_PCDIM.


*** Calculate Glue Area
    read table ME->T_PCDIM_IN into LS_PCDIM index 1.
    check LS_PCDIM-PCLEN_UOM is not initial and
          LS_PCDIM-PCWID_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                        IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                        IF_CALCV_2     = LS_PCDIM-PCWID
                                                        IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = RS_GLUEA-GLUEA
                                                        EF_CALCV_UOM   = RS_GLUEA-GLUEA_UOM ).

  endmethod.
  method GET_IMFXC.

    RT_IMFXC_IN = value #( for LS_XSHT in ME->T_XSHT ( LS_XSHT-IMFXC ) ).

  endmethod.
  method GET_PCDIM_IN.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS,
          LF_PCTYP type ZVCXI_P0SP_PCTYP.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

***------------------------------------------------------------------------------------------------
*** Base of Lamination
    loop at IT_PRVDR into LR_GATE.
      case type of LR_GATE->R_CLSPR.
***     Inline Litho-Lamination
        when type ZCL_VCXI_P1SS_PR_CORR into data(LR_PR_CORR).
***       Get Handling Dimensions based on Corrugated Forward Property (Outbound)
          LR_BL_CRFPROP = LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( ).
          LS_HNDDIM = cond #( when LR_BL_CRFPROP is bound then LR_BL_CRFPROP->S_HNDDIM ).
          LF_NOUPS  = LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( ).
          LF_PCTYP  = ZCL_VCXI_P1SR_PR_RTESPV=>GET_PCTYP_BY_BL_CRBPROP( IR_BL_CRBPROP = LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ) ).

***     Sheet-to-Sheet Lamination
        when type ZCL_VCXI_P1SS_PR_CSTEP_LAMI into data(LR_PR_CSTEP_LAMI).
***       Get Handling Dimensions based on Corrugated Forward Property (Inbound)
          LR_BL_CRFPROP = LR_PR_CSTEP_LAMI->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).
          LS_HNDDIM = cond #( when LR_BL_CRFPROP is bound then LR_BL_CRFPROP->S_HNDDIM ).
          LF_NOUPS  = LR_PR_CSTEP_LAMI->ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS( ).
          LF_PCTYP  = ZCL_VCXI_P1SR_PR_RTESPV=>GET_PCTYP_BY_BL_CRBPROP( IR_BL_CRBPROP = LR_PR_CSTEP_LAMI->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( ) ).

***     Sheet which will be laminated
        when type ZCL_VCXI_PXSS_PR_XSHT into data(LR_PR_XSHT).
          LS_HNDDIM = LR_PR_XSHT->GET_HNDDIM( ).
          LF_NOUPS  = LR_PR_XSHT->GET_NOUPS( ).
          LF_PCTYP  = 'ZVCXI_P0_SHEET'.

        when others.
          continue.
      endcase.


***   Add PC Dimension
      append value #( PCLEN     = LS_HNDDIM-HNDLE
                      PCLEN_UOM = LS_HNDDIM-HNDLE_UOM
                      PCWID     = LS_HNDDIM-HNDWI
                      PCWID_UOM = LS_HNDDIM-HNDWI_UOM
                      PCHEI     = LS_HNDDIM-HNDHE
                      PCHEI_UOM = LS_HNDDIM-HNDHE_UOM
                      PCUPS     = LF_NOUPS
                      NOOUT     = '1'
                      PCDIR     = 'A'
                      PCTYP     = LF_PCTYP
                    ) to RT_PCDIM.

      break HARDCODED_FOR_NOW.
    endloop.

  endmethod.
  method GET_PCDIM_OUT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


*** Filter Provider to relevant for PC Dimension Out
    loop at IT_PRVDR into LR_GATE.
      if LR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_INPUT or
         LR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_LAMI.
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

    RT_PCDIM = SUPER->GET_PCDIM_OUT( IT_PRVDR = LT_PRVDR ).

  endmethod.
  method GET_SPVRE_ACTVY.

    data:  LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***----------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_LAMI'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCTYP
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = ME->S_PCDIM_OUT-PCTYP
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Length
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCLEN
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCLEN
                                                   UNIT  = ME->S_PCDIM_OUT-PCLEN_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Width
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCWID
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCWID
                                                   UNIT  = ME->S_PCDIM_OUT-PCWID_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Height
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCHEI
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCHEI
                                                   UNIT  = ME->S_PCDIM_OUT-PCHEI_UOM
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Number of Ups
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCUPS
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-PCUPS
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set Number of Outs
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_NOOUT
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                   ATFLV = ME->S_PCDIM_OUT-NOOUT
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
*** Set PC Direction
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_ACTVY_LAMI=>C_PARID_PCDIR
                                                   PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                   ATWRT = ME->S_PCDIM_OUT-PCDIR
                                                   SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Lamination Glue
    ME->ADD_SPVRE_MC_LGLUE( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                      IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                                      IR_ARBPL        = IR_ARBPL
                            changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method GET_SPVRE_MF.

*** Add MFSI for existing Input
    if CF_MFI is initial.
      if ME->T_IMFXC_IN is initial.
        append initial line to ME->T_IMFXC_IN.
        append initial line to ME->T_NEXTL.
      endif.
    else.
      delete ME->T_PCDIM_IN index 1.  "Dimensions of base set by Corrugation
    endif.

*** Add SFG Sheets as MFSI
    append lines of ME->GET_IMFXC( ) to ME->T_IMFXC_IN.
    clear CF_MFI.

*** Delay MFO
    move ABAP_TRUE to CF_MFO.

*** Perform Standard to add MFSI as needed
    SUPER->GET_SPVRE_MF( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                   IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                         changing  CT_SPVRE       = CT_SPVRE
                                   CF_MFI         = CF_MFI
                                   CF_MFO         = CF_MFO ).

*** Add Procurement Sheets as MFMI
    ME->ADD_SPVRE_MFMI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE
                                    CF_MFI         = CF_MFI ).

***------------------------------------------------------------------------------------------------
*** Add MFSO PC (replace if needed)
    ME->ADD_SPVRE_MFSO_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE ).
    move ABAP_TRUE to CF_MFO.

  endmethod.
  method GET_XML_DREF.

*** Super References
    RT_DATA = SUPER->GET_XML_DREF( ).

*** Add additional References
    append value #( NAME = 'T_PCDIM_IN'   VALUE = ref #( ME->T_PCDIM_IN  ) ) to RT_DATA.
    append value #( NAME = 'S_PCDIM_OUT'  VALUE = ref #( ME->S_PCDIM_OUT ) ) to RT_DATA.
    append value #( NAME = 'S_MS_LGLUE'   VALUE = ref #( ME->S_MS_LGLUE  ) ) to RT_DATA.
    append value #( NAME = 'T_XSHT'       VALUE = ref #( ME->T_XSHT      ) ) to RT_DATA.
    append value #( NAME = 'T_MFMI_P'     VALUE = ref #( ME->T_MFMI_P    ) ) to RT_DATA.

  endmethod.
  method INIT_BY_CSTEP_LAMI.

    data: LF_SHTDI type ZVCXI_P0SS_SHTDI.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP_LAMI type ref to ZCL_VCXI_P1SS_PR_CSTEP_LAMI.


***--------------------------------------------------------------------------------------
*** Get Reference for CStep Lamination
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CSTEP_LAMI.
      LR_PR_CSTEP_LAMI ?= LR_GATE->R_CLSPR.
      exit.
    endloop.
    check LR_PR_CSTEP_LAMI is bound.


***--------------------------------------------------------------------------------------
*** Sheet Direction
    move LR_PR_CSTEP_LAMI->GET_SHTDI( ) to LF_SHTDI.
    if LF_SHTDI is not initial.
      move LF_SHTDI                               to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR.
      move ZIF_VCXI_PXSR_PCDIR=>C_PCDOP_MANDATORY to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDOP.
    endif.

  endmethod.
  method INIT_BY_MS_LGLUE.

    data: LS_APWGT type ZVCXI_PXS_S_APWGT.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_LGLUE type ref to ZCL_VCXI_PXSS_PR_MS_LGLUE.


***--------------------------------------------------------------------------------------
*** Get Reference for Lamination Glue
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_MS_LGLUE.
      LR_PR_MS_LGLUE ?= LR_GATE->R_CLSPR.
      exit.
    endloop.
    check LR_PR_MS_LGLUE is bound.


***--------------------------------------------------------------------------------------
*** Get Material
    ME->S_MS_LGLUE-MATNR = LR_PR_MS_LGLUE->GET_MATNR( ).

***--------------------------------------------------------------------------------------
*** Calculate Average Consumption by Application Weight
    LS_APWGT = LR_PR_MS_LGLUE->GET_APWGT( ).

    move 1000 to ME->S_MS_LGLUE-AVGCP.
    move 'M2' to ME->S_MS_LGLUE-AVGCP_UOM.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_APWGT-APWGT
                                                        IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
                                                        IF_CALCV_2     = ME->S_MS_LGLUE-AVGCP
                                                        IF_CALCV_UOM_2 = ME->S_MS_LGLUE-AVGCP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = ME->S_MS_LGLUE-AVGCO
                                                        EF_CALCV_UOM   = ME->S_MS_LGLUE-AVGCO_UOM ).

*** Get Glue Area
    ME->S_MS_LGLUE-S_GLUEA = ME->GET_GLUEA( ).

*** Fix Lamination Glue Consumption Factor
    ME->S_MS_LGLUE-CONSF = 1.

***--------------------------------------------------------------------------------------
*** Purchasing Info
    ME->S_MS_LGLUE-PURCH   = LR_PR_MS_LGLUE->GET_PURCH( ).
    ME->S_MS_LGLUE-LIFNR   = LR_PR_MS_LGLUE->GET_LIFNR( ).
    ME->S_MS_LGLUE-S_PRICE = LR_PR_MS_LGLUE->GET_PRICE( ).
    ME->S_MS_LGLUE-S_PRICP = LR_PR_MS_LGLUE->GET_PRICP( ).

  endmethod.
  method INIT_BY_SPEC.

    data: LT_PCDIM type ZVCXI_P0SP_TT_PCDIM.


***--------------------------------------------------------------------------------------
*** Get Inbound PC Dimension
    ME->T_PCDIM_IN = ME->GET_PCDIM_IN( IT_PRVDR = IT_PRVDR ).

*** Get Outbound PC Dimension
    LT_PCDIM = ME->GET_PCDIM_OUT( IT_PRVDR = IT_PRVDR ).
    ME->S_PCDIM_OUT = value #( LT_PCDIM[ 1 ] optional ).

*** Initialize by CStep Lamination
    ME->INIT_BY_CSTEP_LAMI( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

*** Initialize Sheet Information
    ME->INIT_BY_XSHT( IT_PRVDR = IT_PRVDR ).

*** Initialize by Lamination Glue
    ME->INIT_BY_MS_LGLUE( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_XSHT.

    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM,
          LS_BAWGT  type ZVCXI_P0S_S_BAWGT,
          LS_BAWGP  type ZVCXI_P0S_S_BAWGP.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XSHT       type ref to ZCL_VCXI_PXSS_PR_XSHT,
          LR_PR_MS_XPROC   type ref to ZCL_VCXI_PXSS_PR_MS_XPROC,
          LR_GATE_MS_XPROC type ref to /VCXI/CL_VKSR_GATE.


*** Loop at defined Sheets
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XSHT.
      LR_PR_XSHT ?= LR_GATE->R_CLSPR.

***   Get Procurement
      LR_PR_MS_XPROC = LR_PR_XSHT->GET_PRVDR_MS_XPROC( importing ER_GATE = LR_GATE_MS_XPROC ).
      if LR_PR_MS_XPROC is bound.
***     Get Handling Dimensions and Basis Weight
        LS_HNDDIM = LR_PR_XSHT->GET_HNDDIM( ).
        LS_BAWGT  = LR_PR_XSHT->GET_BAWGT( importing ES_BAWGP = LS_BAWGP ).

***     Define as Material Flow Material In
        append value #( MATNR      = LR_PR_MS_XPROC->GET_MATNR( )
                        S_KAUSF    = LR_PR_MS_XPROC->GET_KAUSF( )
                        MFISP      = 100
                        MFISP_UOM  = '%'
                        MFICF      = 1
                        MFICP      = 1
                        SANKA      = LR_PR_MS_XPROC->GET_SANKA( )
                        TEXT       = LR_PR_MS_XPROC->GET_TEXT( )
                        PURCH      = LR_PR_MS_XPROC->GET_PURCH( )
                        LIFNR      = LR_PR_MS_XPROC->GET_LIFNR( )
*                        PRICE      = LR_PR_MS_XPROC->GET_PRICE( )-PRICE
*                        PRICE_CURR = LR_PR_MS_XPROC->GET_PRICE( )-PRICE_CURR
*                        PRICP      = LR_PR_MS_XPROC->GET_PRICP( )-PRICP
*                        PRICP_UOM  = LR_PR_MS_XPROC->GET_PRICP( )-PRICP_UOM
                        T_PSCALE   = ME->GET_PSCALE( IR_GATE_PARENT = LR_GATE_MS_XPROC )
                        PCTYP      = 'ZVCXI_P0_PRODUCT'
                        PCLEN      = LS_HNDDIM-HNDLE
                        PCLEN_UOM  = LS_HNDDIM-HNDLE_UOM
                        PCWID      = LS_HNDDIM-HNDWI
                        PCWID_UOM  = LS_HNDDIM-HNDWI_UOM
                        PCHEI      = LS_HNDDIM-HNDHE
                        PCHEI_UOM  = LS_HNDDIM-HNDHE_UOM
                        PCUPS      = 1
                        NOOUT      = 1
                        PCDIR      = 'A'
                        S_BAWGT    = LS_BAWGT
                        S_BAWGP    = LS_BAWGP
                      ) to ME->T_MFMI_P.

      else.
***     Add Connection
        append value #( IMFXC = LR_PR_XSHT->GET_GXCON( ) ) to ME->T_XSHT.
      endif.

    endloop.

  endmethod.
  method REPLACE_MFSI_BY_MFMI.

    field-symbols: <T_MFMI> type standard table,
                   <S_MFMI> type ANY.


    check IR_MFMI is bound and
          LINE_EXISTS( ME->T_XSHT[ IMFXC = IF_IMFXC ] ).
    assign IR_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      append corresponding #( <S_MFMI> ) to ME->T_MFMI_P.
    endloop.
    delete ME->T_XSHT where IMFXC eq IF_IMFXC.

  endmethod.
  method ZIF_VCXI_PXSR_ADJ_PCDIM~CALC_PCDIM_IN.

    CT_PCDIM = ME->T_PCDIM_IN.

  endmethod.
  method ZIF_VCXI_PXSR_ADJ_PCDIM~CALC_PCDIM_OUT.

    free: CT_PCDIM.
    append ME->S_PCDIM_OUT to CT_PCDIM.

  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~GET_PCDIM.

    RT_PCDIM = ME->T_PCDIM_IN.

  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~SET_PCDIR.

    field-symbols: <S_PCDIM_IN>  type ZVCXI_P0SP_S_PCDIM.


    move IF_PCDIR to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR.

*** Turn PC Dimension IN
    loop at ME->T_PCDIM_IN assigning <S_PCDIM_IN>.
      <S_PCDIM_IN>  = ME->TURN_PCDIM( IS_PCDIM = <S_PCDIM_IN>
                                      IF_PCDIR = IF_PCDIR ).
    endloop.

*** Turn PC Dimension OUT
    ME->S_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_OUT
                                      IF_PCDIR = IF_PCDIR ).

  endmethod.
