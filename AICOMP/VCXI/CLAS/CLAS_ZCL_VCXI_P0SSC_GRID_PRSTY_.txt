
class ZCL_VCXI_P0SSC_GRID_PRSTY definition
  public
  inheriting from ZCL_VCXI_P0SSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data R_UIC_PRSTY type ref to ZCL_VCXI_P0SSC_UIC_PRSTY .
  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  constants C_FUNC_CHA type UI_FUNC value 'CHANGE'. "#EC NOTEXT
  constants C_FUNC_DIS type UI_FUNC value 'DISPLAY'. "#EC NOTEXT
  data F_CCCORACTIV type CCCORACTIV .
  constants C_FUNC_COP type UI_FUNC value 'COPY'. "#EC NOTEXT

  methods CHANGE_STYLE_PRSTY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DETAIL
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_PRSTY
    importing
      !IT_PRSTY type ZVCXI_P0SSC_TT_PRSTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UC_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DISPLAY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SSC_GRID_PRSTY definition
class ZCL_VCXI_P0SSC_GRID_PRSTY implementation.
method CHANGE_STYLE_PRSTY.

*** Set Product Style = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSTY'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Product Style Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSTY_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Custom Design = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FCUSD'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CHECK_SEL_DETAIL.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.
  data: LF_ROW  type I.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Details are only available if one Cells is selected
  if lines( LT_CELL ) eq 1 or
     lines( LT_ROW )  eq 1.
    move ABAP_TRUE to RF_OKAY.

  elseif lines( LT_CELL ) eq 0.
*** Get Current Cell
    ME->R_GRID->GET_CURRENT_CELL( importing E_ROW = LF_ROW ).

    if LF_ROW is not initial.
      move ABAP_TRUE to RF_OKAY.

    else.
      move ABAP_FALSE to RF_OKAY.

    endif.

  else.
    move ABAP_FALSE to RF_OKAY.

  endif.


endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to R_UIC_PRSTY.
    catch CX_SY_MOVE_CAST_ERROR.
***   Product Style Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_P0SSC'
          IF_MSGNO = '101' ).
  endtry.

  move 'Product Styles'(010) to ME->F_DESCR.

***------------------------------------------------------------------------------------------------
*** Get System/Client Parameters
  call function 'TR_SYS_PARAMS'
    importing
      SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
    exceptions
      NO_SYSTEMNAME      = 1
      NO_SYSTEMTYPE      = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method DELETE_PRSTY.

  data:  LF_ANSWER     type C,
         LF_QUESTION   type STRING.
  data:  LS_PRSTY      type ZVCXI_P0SSC_S_PRSTY.

  check lines( IT_PRSTY ) is not initial.

*** PopUp to Confirm
  if lines( IT_PRSTY ) eq 1.
    read table IT_PRSTY into LS_PRSTY index 1.
    concatenate 'Do you really want to delete the following'(101)
                ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR
                ':' LS_PRSTY-PRSTY '?'
           into LF_QUESTION separated by SPACE.
  else.
    concatenate 'Do you really want to delete the selected'(104)
                ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR
                '?'
           into LF_QUESTION separated by SPACE.
  endif.


  call function 'POPUP_TO_CONFIRM'
    exporting
      TITLEBAR       = 'Delete selected Product Styles'(100)
      TEXT_QUESTION  = LF_QUESTION
      DEFAULT_BUTTON = '1'
    importing
      ANSWER         = LF_ANSWER
    exceptions
      TEXT_NOT_FOUND = 1
      others         = 2.
  if SY-SUBRC ne 0 or LF_ANSWER ne '1'.
    exit.
  endif.

*** Delete Selected Product Styles
  check ME->R_UIC_PRSTY is bound.
  ME->R_UIC_PRSTY->DELETE_PRSTY( IT_PRSTY = IT_PRSTY ).

endmethod.
  method GET_FIELDCAT.

    field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'TPRST' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

***     Adjust Field Label of Product Style if needed
        when 'PRSTY'.
          check ME->R_UIC_PRSTY is bound and
          ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR is not initial.
          move ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR to <S_FCAT>-SCRTEXT_L.
          move ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR to <S_FCAT>-SCRTEXT_M.
          move ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR to <S_FCAT>-SCRTEXT_S.
          move ME->R_UIC_PRSTY->S_TPRST-TPRST_DESCR to <S_FCAT>-REPTEXT.

***     Always Checkbox
        when 'FCUSD'.
          move ABAP_TRUE to <S_FCAT>-CHECKBOX.

***     Default Joint Type
        when 'JOITY'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

      endcase.
    endloop.

  endmethod.
method GET_GRID_DATA.

  data:          LS_PRSTY             type          ZVCXI_P0SSC_S_PRSTY,
                 LS_PRSTY_GRID        type          ZVCXI_P0SSC_S_PRSTY_GRID.
  data:          LT_PRSTY             type          ZVCXI_P0SSC_TT_PRSTY.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------------
*** Get Product Style Entries
  LT_PRSTY = ME->R_UIC_PRSTY->GET_ALL_PRSTY( ).

  sort LT_PRSTY ascending by PRSTY.

  loop at LT_PRSTY into LS_PRSTY.
    clear: LS_PRSTY_GRID.

    move-corresponding LS_PRSTY to LS_PRSTY_GRID.

***--------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_PRSTY( changing CT_STYL = LS_PRSTY_GRID-T_STYL ).

***--------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_PRSTY_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LF_PRSTY  type          ZVCXI_P0SS_PRSTY.
  data:          LR_CX_CKX type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>  type standard table,
                 <S_DATA>  type          any,
                 <F_FIELD> type          any.

  try.

***   Get Product Style
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      check SY-SUBRC = 0.

      assign component 'PRSTY' of structure <S_DATA> to <F_FIELD>.
      check SY-SUBRC = 0.

      LF_PRSTY = <F_FIELD>.

***   Open Product Style Customizing - Detail -> kein Change Mode
      check ME->R_UIC_PRSTY is bound.
      ME->R_UIC_PRSTY->OPEN_PRSTY( IF_PRSTY  = LF_PRSTY
                                   IF_CHANGE = ABAP_FALSE ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  if ME->F_CCCORACTIV eq 2.
    LF_DISABLED = ABAP_TRUE.
  endif.

  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add, Delete and Copy
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(001)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(002)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_COP                 to LS_TOOLBAR-FUNCTION.
      move 'Copy'(005)                to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SYSTEM_COPY           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

***   Add Sepeartor
      clear LS_TOOLBAR.
      move '3'                        to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar elements Change and Display
      clear LS_TOOLBAR.
      move C_FUNC_CHA                 to LS_TOOLBAR-FUNCTION.
      move 'Change'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_CHANGE                to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DIS                 to LS_TOOLBAR-FUNCTION.
      move 'Display'(004)             to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DISPLAY               to LS_TOOLBAR-ICON.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_CHANGE.

  data:          LF_PRSTY    type          ZVCXI_P0SS_PRSTY.
  data:          LS_CELL     type          LVC_S_CELL,
                 LS_ROW      type          LVC_S_ROW.
  data:          LT_CELL     type          LVC_T_CELL,
                 LT_ROW      type          LVC_T_ROW.
  field-symbols: <T_DATA>    type standard table,
                 <S_DATA>    type          any,
                 <F_FIELD>   type          any.


*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

  if ME->CHECK_SEL_DETAIL( ) eq ABAP_FALSE.
*** Please Select one Row or navigate via Double Click.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '003'.
  endif.

*** Get selected Product Style
  read table LT_CELL into LS_CELL index 1.
  if SY-SUBRC eq 0.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
  else.
    read table LT_ROW into LS_ROW index 1.
    if SY-SUBRC eq 0.
      read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    endif.
  endif.

  check SY-SUBRC = 0.

  assign component 'PRSTY' of structure <S_DATA> to <F_FIELD>.
  check SY-SUBRC = 0.

  LF_PRSTY = <F_FIELD>.

*** Open Product Style Customizing - Detail -> Change Mode
  check ME->R_UIC_PRSTY is bound.
  ME->R_UIC_PRSTY->OPEN_PRSTY( IF_PRSTY  = LF_PRSTY
                               IF_CHANGE = ABAP_TRUE ).

endmethod.
method HANDLE_UC_COPY.

  data:          LF_PRSTY    type          ZVCXI_P0SS_PRSTY.
  data:          LS_CELL     type          LVC_S_CELL,
                 LS_ROW      type          LVC_S_ROW.
  data:          LT_CELL     type          LVC_T_CELL,
                 LT_ROW      type          LVC_T_ROW.
  field-symbols: <T_DATA>    type standard table,
                 <S_DATA>    type          any,
                 <F_FIELD>   type          any.


*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

  if ME->CHECK_SEL_DETAIL( ) eq ABAP_FALSE.
*** Please Select one Row or navigate via Double Click.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '003'.
  endif.

*** Get selected Product Style
  read table LT_CELL into LS_CELL index 1.
  if SY-SUBRC eq 0.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
  else.
    read table LT_ROW into LS_ROW index 1.
    if SY-SUBRC eq 0.
      read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    endif.
  endif.

  check SY-SUBRC = 0.

  assign component 'PRSTY' of structure <S_DATA> to <F_FIELD>.
  check SY-SUBRC = 0.

  LF_PRSTY = <F_FIELD>.

*** Open Product Style Customizing - Detail -> Change Mode
  check ME->R_UIC_PRSTY is bound.
  ME->R_UIC_PRSTY->COPY_PRSTY( IF_PRSTY = LF_PRSTY ).

endmethod.
method HANDLE_UC_DELETE.

  data:          LS_CELL   type          LVC_S_CELL,
                 LS_ROW    type          LVC_S_ROW.
  data:          LT_CELL   type          LVC_T_CELL,
                 LT_ROW    type          LVC_T_ROW,
                 LT_PRSTY  type          ZVCXI_P0SSC_TT_PRSTY.
  field-symbols: <T_DATA>  type standard table,
                 <S_PRSTY> type          ZVCXI_P0SSC_S_PRSTY,
                 <S_DATA>  type          any.


*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete Product Styles
  if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
*** No Row Selected. Please Select all Row's you wanna Delete.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '002'.
  endif.

*** Get Selected Product Style's
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY assigning <S_PRSTY>.
    move-corresponding <S_DATA> to <S_PRSTY>.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY assigning <S_PRSTY>.
    move-corresponding <S_DATA> to <S_PRSTY>.
  endloop.

*** PopUp to Confirm with all Product Style's and
*** Delete Selected Product Style's
  ME->DELETE_PRSTY( IT_PRSTY = LT_PRSTY ).

endmethod.
method HANDLE_UC_DISPLAY.

  data:          LF_PRSTY    type          ZVCXI_P0SS_PRSTY.
  data:          LS_CELL     type          LVC_S_CELL,
                 LS_ROW      type          LVC_S_ROW.
  data:          LT_CELL     type          LVC_T_CELL,
                 LT_ROW      type          LVC_T_ROW.
  field-symbols: <T_DATA>    type standard table,
                 <S_DATA>    type          any,
                 <F_FIELD>   type          any.


*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

  if ME->CHECK_SEL_DETAIL( ) eq ABAP_FALSE.
*** Please Select one Row or navigate via Double Click.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '003'.
  endif.

*** Get selected Product Style
  read table LT_CELL into LS_CELL index 1.
  if SY-SUBRC eq 0.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
  else.
    read table LT_ROW into LS_ROW index 1.
    if SY-SUBRC eq 0.
      read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    endif.
  endif.

  check SY-SUBRC = 0.

  assign component 'PRSTY' of structure <S_DATA> to <F_FIELD>.
  check SY-SUBRC = 0.

  LF_PRSTY = <F_FIELD>.

*** Open Product Style Customizing - Detail -> Display Mode
  check ME->R_UIC_PRSTY is bound.
  ME->R_UIC_PRSTY->OPEN_PRSTY( IF_PRSTY  = LF_PRSTY
                               IF_CHANGE = ABAP_FALSE ).

endmethod.
method HANDLE_USER_COMMAND.

  data:          LR_CX_CKX type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>  type standard table.

  try.

***   Get Product Style Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      case E_UCOMM.

        when C_FUNC_ADD.
***     Create new Product Style
          check ME->R_UIC_PRSTY is bound.
          ME->R_UIC_PRSTY->ADD_PRSTY( ).

        when C_FUNC_DEL.
          ME->HANDLE_UC_DELETE( ).

        when C_FUNC_CHA.
          ME->HANDLE_UC_CHANGE( ).

        when C_FUNC_DIS.
          ME->HANDLE_UC_DISPLAY( ).

        when C_FUNC_COP.
          ME->HANDLE_UC_COPY( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
