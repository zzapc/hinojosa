
class ZCL_VCXI_XCSS_GRID_MULTIQTY definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSS_S_MULTIQTY_GRID'
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  types YS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF .
  types:
    begin of YS_PRVDR_OV.
          include type        YS_PRVDR_DEF.
  types:  INDEX   type I,
          CMQTY   type        ZVCXI_XCSS_CMQTY,
          R_GATE  type ref to /VCXI/CL_VKSR_GATE,
          end of YS_PRVDR_OV .
  types:
    YT_PRVDR_OV type standard table of YS_PRVDR_OV .

  data R_PR_MULTIQTY_MGR type ref to ZCL_VCXI_XCSS_PR_MULTIQTY_MGR .
  constants C_ICON_CAUTION type ICON_D value '@09@'. "#EC NOTEXT
  constants C_ICON_OKAY type ICON_D value '@08@'. "#EC NOTEXT

  methods CHANGE_STYLE_MQ
    importing
      !IF_FOVRR_QITEM type ZVCXI_XCS_FOVRR
      !IF_FOVRR_QCALC type ZVCXI_XCS_FOVRR
      !IF_FOVRR_QPOLS type ZVCXI_XCS_FOVRR
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_QTY
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_CMQTY) type ZVCXI_XCSS_CMQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .

  methods ADD_PRVDR
    redefinition .
  methods CHECK_PRVDR_ADD
    redefinition .
  methods CHECK_PRVDR_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_GRID_MULTIQTY definition
class ZCL_VCXI_XCSS_GRID_MULTIQTY implementation.
method ADD_PRVDR.

  data:  LF_CMQTY          type        ZVCXI_XCSS_CMQTY,
         LF_ID             type        /VCXI/CKX_ID,
         LF_POSID          type        /VCXI/VKSR_POSID.
  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_PR_MULTIQTY    type ref to ZCL_VCXI_XCSS_PR_MULTIQTY,
         LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


  read table ME->T_PRVDR_DEF with key ID = IF_ID
                             transporting no fields.
  check SY-SUBRC = 0.

  split IF_ID at '@' into LF_ID LF_CMQTY.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
  LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if LR_GATE is bound.
    LF_POSID = LR_GATE->GET_POSID( ).
  endif.

*** Add 5 to insert after selected position
  add C_POSID_5 to LF_POSID.

***----------------------------------------------------------------------------
*** Create Provider
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
  if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.
  RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

  try.
      move RR_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
      check LR_PR_MULTIQTY is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      RR_GATE->DO_FREE( ).
*** It is not possible to add Provider &1.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '012'
          IF_MSGV1 =  ZCL_VCXI_XCSS_PR_MULTIQTY=>C_IPRVT_XCS_MULTIQTY ).
  endtry.

*** Set Counter of Multiqty
  LR_PR_MULTIQTY->SET_CMQTY( IF_CMQTY = LF_CMQTY ).

*** Reorg position ID's
  RR_GATE->REORG_POSID( ).

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method CHANGE_STYLE_MQ.

  data: LF_LVC_STYLE      type   LVC_STYLE.

  free CT_STYL.

***----------------------------------------------------------------------------
*** Item Quantity
  if IF_FOVRR_QITEM ne ABAP_TRUE.
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'QITEM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

*** Add Style for Override Flag
  clear: LF_LVC_STYLE.
  LF_LVC_STYLE = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_QITEM'
                              IF_STYLE     = LF_LVC_STYLE
                    changing  CT_STYL      = CT_STYL ).


***----------------------------------------------------------------------------
*** Calculation Quantity
  if IF_FOVRR_QCALC ne ABAP_TRUE.
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'QCALC'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

*** Add Style for Override Flag
  clear: LF_LVC_STYLE.
  LF_LVC_STYLE = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_QCALC'
                              IF_STYLE     = LF_LVC_STYLE
                    changing  CT_STYL      = CT_STYL ).


***----------------------------------------------------------------------------
*** Production Order Quantity
  if IF_FOVRR_QPOLS ne ABAP_TRUE.
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'QPOLS'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

*** Add Style for Override Flag
  clear: LF_LVC_STYLE.
  LF_LVC_STYLE = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_QPOLS'
                              IF_STYLE     = LF_LVC_STYLE
                    changing  CT_STYL      = CT_STYL ).


***----------------------------------------------------------------------------
*** Add Style for Use Flag
  clear: LF_LVC_STYLE.
  LF_LVC_STYLE = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MMUSE'
                              IF_STYLE     = LF_LVC_STYLE
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_PRVDR_ADD.

  data:          LF_CMQTY         type        ZVCXI_XCSS_CMQTY.
  data:          LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MULTIQTY   type ref to ZCL_VCXI_XCSS_PR_MULTIQTY.

  move ABAP_FALSE to RF_DISABLED.

  read table ME->T_PRVDR_DEF with key ID = IF_ID
                             transporting no fields.
  check SY-SUBRC = 0.

*** Get Quantity
  LF_CMQTY = ME->GET_PRVDR_QTY( IF_ID = IF_ID ).

*** Check if Quantity already exists
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MULTIQTY=>C_IPRVT_XCS_MULTIQTY
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
        check LR_PR_MULTIQTY is bound.

        if LR_PR_MULTIQTY->GET_CMQTY( ) eq LF_CMQTY.
          move ABAP_TRUE to RF_DISABLED.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MULTIQTY.
    endtry.
  endloop.

endmethod.
method CHECK_PRVDR_DEL.

  read table ME->T_PRVDR_DEF with key ID = IF_ID
                             transporting no fields.
  check SY-SUBRC = 0.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_XCSS_PR_MULTIQTY=>C_IPRVT_XCS_MULTIQTY.

  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_MULTIQTY_MGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear ME->R_PR_MULTIQTY_MGR.
  endtry.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED        type          /VCXI/CKX_LOCKED,
                 LF_INUSE         type          /VCXI/VKSR_INUSE,
                 LF_FOVRR_QITEM   type          ABAP_BOOL,
                 LF_FOVRR_QCALC   type          ABAP_BOOL,
                 LF_FOVRR_QPOLS   type          ABAP_BOOL.
  data:          LS_MULTIQTY_GRID type          ZVCXI_XCSS_S_MULTIQTY_GRID.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any,
                 <S_FCAT>         type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_MULTIQTY_GRID.

    if LS_MULTIQTY_GRID-FOVRR_QITEM eq ABAP_TRUE.
      move ABAP_TRUE to LF_FOVRR_QITEM.
    endif.

    if LS_MULTIQTY_GRID-FOVRR_QCALC eq ABAP_TRUE.
      move ABAP_TRUE to LF_FOVRR_QCALC.
    endif.

    if LS_MULTIQTY_GRID-FOVRR_QPOLS eq ABAP_TRUE.
      move ABAP_TRUE to LF_FOVRR_QPOLS.
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.

    case <S_FCAT>-FIELDNAME.

      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
        move ABAP_TRUE    to <S_FCAT>-TECH.
        move 0            to <S_FCAT>-COL_POS.

      when 'FOVRR_QITEM' or 'FOVRR_QCALC' or
           'FOVRR_QPOLS'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
          move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        endif.

      when 'QITEM'.
        if LF_LOCKED      eq ABAP_TRUE and
           LF_INUSE       eq ABAP_TRUE and
           LF_FOVRR_QITEM eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'QCALC'.
        if LF_LOCKED      eq ABAP_TRUE and
           LF_INUSE       eq ABAP_TRUE and
           LF_FOVRR_QCALC eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'QPOLS'.
        if LF_LOCKED      eq ABAP_TRUE and
           LF_INUSE       eq ABAP_TRUE and
           LF_FOVRR_QPOLS eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'MMUSE'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
          move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        endif.

    endcase.

  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_MULTIQTY_GRID     type          ZVCXI_XCSS_S_MULTIQTY_GRID,
                 LS_QITEM             type          ZVCXI_XCSS_S_QITEM,
                 LS_QCALC             type          ZVCXI_XCSS_S_QCALC,
                 LS_QPOLS             type          ZVCXI_XCSS_S_QPOLS.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_MULTIQTY       type ref to   ZCL_VCXI_XCSS_PR_MULTIQTY.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Multi Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY=>C_IPRVT_XCS_MULTIQTY
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_MULTIQTY_GRID.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
        check LR_PR_MULTIQTY is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( )            to LS_MULTIQTY_GRID-POSID.
        move LR_GATE->F_GATKY                 to LS_MULTIQTY_GRID-GATKY.
        move LR_GATE                          to LS_MULTIQTY_GRID-R_GATE.

        LR_PR_MULTIQTY->GET_QITEM( importing ES_QITEM = LS_QITEM ).
        LR_PR_MULTIQTY->GET_QCALC( importing ES_QCALC = LS_QCALC ).
        LR_PR_MULTIQTY->GET_QPOLS( importing ES_QPOLS = LS_QPOLS ).

        move-corresponding LS_QITEM             to LS_MULTIQTY_GRID.
        move-corresponding LS_QCALC             to LS_MULTIQTY_GRID.
        move-corresponding LS_QPOLS             to LS_MULTIQTY_GRID.

        move LR_PR_MULTIQTY->GET_DESCR( )       to LS_MULTIQTY_GRID-CMQTY_DESCR.
        move LR_PR_MULTIQTY->GET_FOVRR_QITEM( ) to LS_MULTIQTY_GRID-FOVRR_QITEM.
        move LR_PR_MULTIQTY->GET_FOVRR_QCALC( ) to LS_MULTIQTY_GRID-FOVRR_QCALC.
        move LR_PR_MULTIQTY->GET_FOVRR_QPOLS( ) to LS_MULTIQTY_GRID-FOVRR_QPOLS.
        LR_PR_MULTIQTY->GET_MMUSE( importing EF_MMUSE = LS_MULTIQTY_GRID-MMUSE ).

*** --------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_MQ( exporting IF_FOVRR_QITEM    = LS_MULTIQTY_GRID-FOVRR_QITEM
                                       IF_FOVRR_QCALC    = LS_MULTIQTY_GRID-FOVRR_QCALC
                                       IF_FOVRR_QPOLS    = LS_MULTIQTY_GRID-FOVRR_QPOLS
                             changing  CT_STYL           = LS_MULTIQTY_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_MULTIQTY_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_MULTIQTY_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MULTIQTY.
    endtry.
  endloop.

endmethod.
method GET_PRVDR_QTY.

  data:          LF_CMQTY_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.

  split IF_ID at '@' into LF_ID LF_CMQTY_C.
  move LF_CMQTY_C to RF_CMQTY.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_ROW_ID            type          I.
  data:          LS_MULTIQTY_GRID     type          ZVCXI_XCSS_S_MULTIQTY_GRID,
                 LS_MODI              type          LVC_S_MODI,
                 LS_QITEM             type          ZVCXI_XCSS_S_QITEM,
                 LS_QCALC             type          ZVCXI_XCSS_S_QCALC,
                 LS_QPOLS             type          ZVCXI_XCSS_S_QPOLS.
  data:          LR_PR_MULTIQTY       type ref to   ZCL_VCXI_XCSS_PR_MULTIQTY,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        move SY-TABIX to LF_ROW_ID.
        read table ET_GOOD_CELLS with key ROW_ID = LF_ROW_ID
                                 transporting no fields.
        check SY-SUBRC eq 0.

        try.
            move-corresponding <S_DATA> to LS_MULTIQTY_GRID.
            check LS_MULTIQTY_GRID-R_GATE is bound.

            move LS_MULTIQTY_GRID-R_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
            check LR_PR_MULTIQTY is bound.

***         Set Values to PR Class
            loop at ET_GOOD_CELLS into LS_MODI where ROW_ID = LF_ROW_ID.
              case LS_MODI-FIELDNAME.

                when 'FOVRR_QITEM'.
                  LR_PR_MULTIQTY->SET_FOVRR_QITEM( IF_FOVRR = ABAP_TRUE ).

                when 'FOVRR_QCALC'.
                  LR_PR_MULTIQTY->SET_FOVRR_QCALC( IF_FOVRR = ABAP_TRUE ).

                when 'FOVRR_QPOLS'.
                  LR_PR_MULTIQTY->SET_FOVRR_QPOLS( IF_FOVRR = ABAP_TRUE ).

                when 'QITEM'.
                  move-corresponding LS_MULTIQTY_GRID to LS_QITEM.
                  LR_PR_MULTIQTY->SET_QITEM( IS_QITEM = LS_QITEM
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'QCALC'.
                  move-corresponding LS_MULTIQTY_GRID to LS_QCALC.
                  LR_PR_MULTIQTY->SET_QCALC( IS_QCALC = LS_QCALC
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'QPOLS'.
                  move-corresponding LS_MULTIQTY_GRID to LS_QPOLS.
                  LR_PR_MULTIQTY->SET_QPOLS( IS_QPOLS = LS_QPOLS
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'MMUSE'.
                  LR_PR_MULTIQTY->SET_MMUSE( IF_MMUSE = LS_MULTIQTY_GRID-MMUSE
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_MULTIQTY.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_MULTIQTY_GRID     type          ZVCXI_XCSS_S_MULTIQTY_GRID.
  data:          LR_PR_MULTIQTY       type ref to   ZCL_VCXI_XCSS_PR_MULTIQTY,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.

        try.
            move-corresponding <S_DATA> to LS_MULTIQTY_GRID.

            check LS_MULTIQTY_GRID-R_GATE is bound.
            move LS_MULTIQTY_GRID-R_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
            check LR_PR_MULTIQTY is bound.

***         Set Values to PR Class
            case E_COLUMN_ID-FIELDNAME.
              when 'FOVRR_QITEM'.
                case LS_MULTIQTY_GRID-FOVRR_QITEM.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_MULTIQTY_GRID-FOVRR_QITEM.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_MULTIQTY_GRID-FOVRR_QITEM.
                endcase.
                LR_PR_MULTIQTY->SET_FOVRR_QITEM( IF_FOVRR = LS_MULTIQTY_GRID-FOVRR_QITEM ).

              when 'FOVRR_QCALC'.
                case LS_MULTIQTY_GRID-FOVRR_QCALC.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_MULTIQTY_GRID-FOVRR_QCALC.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_MULTIQTY_GRID-FOVRR_QCALC.
                endcase.
                LR_PR_MULTIQTY->SET_FOVRR_QCALC( IF_FOVRR = LS_MULTIQTY_GRID-FOVRR_QCALC ).

              when 'FOVRR_QPOLS'.
                case LS_MULTIQTY_GRID-FOVRR_QPOLS.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_MULTIQTY_GRID-FOVRR_QPOLS.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_MULTIQTY_GRID-FOVRR_QPOLS.
                endcase.
                LR_PR_MULTIQTY->SET_FOVRR_QPOLS( IF_FOVRR = LS_MULTIQTY_GRID-FOVRR_QPOLS ).

              when 'MMUSE'.
                case LS_MULTIQTY_GRID-MMUSE.
                  when ABAP_TRUE.
                    move ABAP_FALSE to LS_MULTIQTY_GRID-MMUSE.
                  when ABAP_FALSE.
                    move ABAP_TRUE  to LS_MULTIQTY_GRID-MMUSE.
                endcase.
                LR_PR_MULTIQTY->SET_MMUSE( IF_MMUSE = LS_MULTIQTY_GRID-MMUSE
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
            endcase.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_MULTIQTY.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method HANDLE_MENU_BUTTON.

  data:  LF_ACTION         type        STRING,
         LF_ID             type        STRING.
  data:  LS_PRVDR_DEF      type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_FUNCTION       type        UIATTENTRY.
  data:  LT_FUNCTIONS      type        UI_FUNCATTR.
  data:  LR_CX_CKX         type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when 'ADD'.

          SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                     E_UCOMM  = E_UCOMM ).

***       Get old Functions
          E_OBJECT->GET_FUNCTIONS( importing FCODES = LT_FUNCTIONS ).
***       Clear all
          E_OBJECT->CLEAR( ).

*** -----------------------------------------
***       Add Additional Data
          loop at LT_FUNCTIONS into LS_FUNCTION.
***         Split Function Code
            split LS_FUNCTION-FCODE at '@' into LF_ACTION LF_ID.

            clear LS_PRVDR_DEF.
            read table ME->T_PRVDR_DEF into LS_PRVDR_DEF
                                       with key ID = LF_ID.

***         Set Icon
            case LS_FUNCTION-DISABLED.
              when ABAP_TRUE.
***             Everything is Okay
                LS_FUNCTION-ICON = C_ICON_OKAY.

              when ABAP_FALSE.
***             If there are still some Missing -> Caution
***             Get Gates of Multi Quantity
                if LS_PRVDR_DEF-QTYMI eq 1.
                  LS_FUNCTION-ICON = C_ICON_CAUTION.
                else.
                  LS_FUNCTION-ICON = C_ICON_OKAY.
                endif.

              when others.

                SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                           E_UCOMM  = E_UCOMM ).
            endcase.

***         ADD FUNCTION
            E_OBJECT->ADD_FUNCTION( FCODE    = LS_FUNCTION-FCODE
                                    TEXT     = LS_FUNCTION-TEXT
                                    ICON     = LS_FUNCTION-ICON
                                    DISABLED = LS_FUNCTION-DISABLED ).
          endloop.

      endcase.
    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method INIT_TOOLBAR_DEF.

  data:           LF_CMQTY            type         ZVCXI_XCSS_CMQTY.
  data:           LS_MQDEF            type         ZVCXI_XCSS_S_MQDEF,
                  LS_PRVDR_DEF        type         /VCXI/VKSR_S_PRVDR_DEF.
  field-symbols:  <S_PRVDR_DEF>       type        /VCXI/VKSR_S_PRVDR_DEF.


*** Load the general Provider Definitions
  SUPER->INIT_TOOLBAR_DEF( ).

*** Initialize Reference to PR Multiqty and MQ Cusotmizing
  check ME->R_PR_MULTIQTY_MGR->R_CUST_MULTIQTY is bound.

*** Get Original Provider Definition
  read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
  if SY-SUBRC eq 0.
*** Replace
    delete ME->T_PRVDR_DEF index 1.

    loop at ME->R_PR_MULTIQTY_MGR->R_CUST_MULTIQTY->T_MQDEF into LS_MQDEF.
      append initial line to ME->T_PRVDR_DEF assigning <S_PRVDR_DEF>.

      move LS_PRVDR_DEF-IPRVT              to <S_PRVDR_DEF>-IPRVT.
      move LS_PRVDR_DEF-TPRVR              to <S_PRVDR_DEF>-TPRVR.
      move LS_MQDEF-CMQTY                  to LF_CMQTY.
      concatenate 'MULTIQTY'
                   LF_CMQTY              into <S_PRVDR_DEF>-ID separated by '@'.
      move LS_MQDEF-DESCR                  to <S_PRVDR_DEF>-DESCR.

      if LS_MQDEF-OBLIG eq ABAP_TRUE.
        move 1 to <S_PRVDR_DEF>-QTYMI.
      endif.
      move 1 to <S_PRVDR_DEF>-QTYMA.
    endloop.
  endif.

  if lines( ME->T_PRVDR_DEF ) eq 1.
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    concatenate 'Delete'(002) LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL separated by SPACE.

  else.
*** Set Type of Add Button
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text
    move 'Add'(001)    to ME->F_TEXT_ADD.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  endif.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Hotspot
  set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

endmethod.
