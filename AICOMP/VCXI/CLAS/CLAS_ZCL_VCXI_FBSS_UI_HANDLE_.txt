
class ZCL_VCXI_FBSS_UI_HANDLE definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  data S_HANDLE_VIS type ZVCXI_FBSS_S_HANDLE_VIS .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_HN_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_HANDLE_VIS
    importing
      !IS_HANDLE_VIS type ZVCXI_FBSS_S_HANDLE_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
protected section.

  data R_PR_HANDLE type ref to ZCL_VCXI_FBSS_PR_HANDLE .
  data R_TOOLBAR type ref to ZCL_VCXI_FBSS_TOOLBAR_HPART .

  methods ADJUST_SCREEN_BY_OELMN
    importing
      !IF_OELMN type ZVCXI_FBS_OELMN
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_LCOUT
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_HANDLE definition
class ZCL_VCXI_FBSS_UI_HANDLE implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_HANDLE_BIND'
      exporting
        IR_UI_HANDLE  = ME
      importing
        ES_DYNP       = ME->S_DYNP
        EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.

*** Create Handle Part Toolbar
    create object ME->R_TOOLBAR
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_HPART_TOOLBAR'.

  endmethod.
  method ADJUST_SCREEN_BY_OELMN.

    case IF_OELMN.
      when 'O'.
      when 'M'.
        move 2 to CS_SCREEN-REQUIRED.
      when 'N'.
        move 1 to CS_SCREEN-INVISIBLE.
        move 0 to CS_SCREEN-ACTIVE.
    endcase.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_HANDLE.
      catch CX_SY_MOVE_CAST_ERROR.

***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.

    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->DO_FREE( ).
      clear ME->R_TOOLBAR.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LS_TC110    type        ZVCXI_FBS_TC110.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***     Get Handle Type Options
        read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110 into LS_TC110 with key THNDL = ME->S_HANDLE_VIS-THNDL.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

          if LF_LOCKED eq ABAP_TRUE or
             LF_INUSE  eq ABAP_TRUE.

            case SCREEN-GROUP1.
              when 'OHC'.

                ME->ADJUST_SCREEN_BY_OELMN( exporting IF_OELMN  = LS_TC110-OHNCO
                                            changing  CS_SCREEN = SCREEN ).

            endcase.

          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    data: LT_PRVDR_SELECTED type /VCXI/VKSR_TT_GATE.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Initialize Toolbar and provide active tab as Selected Provider (for inserting/deletion)
    append ME->R_OLD_GATE to LT_PRVDR_SELECTED.
    ME->R_TOOLBAR->REFRESH_TOOLBAR( IT_PRVDR_SELECTED = LT_PRVDR_SELECTED ).

*** Define DropDown Values for Cutout Location
    ME->SET_DDVAL_LCOUT( ).

  endmethod.
  method DO_UPDATE_HANDLE_VIS.

    check ME->R_PR_HANDLE is bound.

*** Handle Type
    if ME->S_HANDLE_VIS-THNDL ne IS_HANDLE_VIS-THNDL.
      ME->R_PR_HANDLE->SET_THNDL( IF_THNDL = IS_HANDLE_VIS-THNDL
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
    endif.

*** Cutout Location
    if ME->S_HANDLE_VIS-LCOUT ne IS_HANDLE_VIS-LCOUT.
      ME->R_PR_HANDLE->SET_LCOUT( IF_LCOUT = IS_HANDLE_VIS-LCOUT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Handle Location
    if ME->S_HANDLE_VIS-LHNDL ne IS_HANDLE_VIS-LHNDL.
      ME->R_PR_HANDLE->SET_LHNDL( IF_LHNDL = IS_HANDLE_VIS-LHNDL
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Cutout Area
    if ME->S_HANDLE_VIS-S_COARE ne IS_HANDLE_VIS-S_COARE.
      ME->R_PR_HANDLE->SET_COARE( IS_COARE = IS_HANDLE_VIS-S_COARE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_HANDLE.

  endmethod.
  method INIT_VIS.

    free: ME->S_HANDLE_VIS.
    check ME->R_PR_HANDLE is bound.

***--------------------------------------------------------------------------------------
*** Handle Type
    ME->R_PR_HANDLE->GET_THNDL( importing EF_THNDL = ME->S_HANDLE_VIS-THNDL ).

*** Handle Type Description
    move ME->R_PR_HANDLE->GET_DESCR( ) to ME->S_HANDLE_VIS-THNDL_DESCR .

*** Cutout Location
    ME->R_PR_HANDLE->GET_LCOUT( importing EF_LCOUT = ME->S_HANDLE_VIS-LCOUT ).

*** Handle Location
    ME->R_PR_HANDLE->GET_LHNDL( importing EF_LHNDL = ME->S_HANDLE_VIS-LHNDL ).

*** Cutout Area
    ME->R_PR_HANDLE->GET_COARE( importing ES_COARE = ME->S_HANDLE_VIS-S_COARE ).

*** Handle Weight
    ME->R_PR_HANDLE->GET_HNWGT( importing ES_HNWGT = ME->S_HANDLE_VIS-S_HNWGT ).

*** Handle Area
    ME->R_PR_HANDLE->GET_HNARE( importing ES_HNARE = ME->S_HANDLE_VIS-S_HNARE ).

  endmethod.
  method SET_DDVAL_LCOUT.

    data: LF_ID    type VRM_ID,
          LF_IBPAR type ZVCXI_FBS_IBPAR.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_VALUE type VRM_VALUES.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_BMAKE type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BPART   type ref to ZCL_VCXI_FBSS_PR_BPART.
    field-symbols: <S_VALUE> type VRM_VALUE.


*** Get Bag Make Gate
    LR_GATE_BMAKE = ME->R_GATE->GET_PARENT( ).
    check LR_GATE_BMAKE is bound.

*** Get all Bag Parts
    LT_GATE = LR_GATE_BMAKE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                            IF_INUSE = ABAP_TRUE ).
*** Add to search help structure
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_BPART.
      check LR_PR_BPART is bound.

      LR_PR_BPART->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).

      append initial line to LT_VALUE assigning <S_VALUE>.

      move LF_IBPAR to  <S_VALUE>-KEY .
      <S_VALUE>-TEXT = LR_PR_BPART->GET_DESCR( ).

    endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
    move 'ZVCXI_FBSS_S_HANDLE_VIS-LCOUT' to LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUE.

  endmethod.
