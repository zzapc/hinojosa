
class ZCL_VCXI_FBSSC_GRID_BAGTY definition
  public
  inheriting from ZCL_VCXI_FBSSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data R_UIC_BAGTY type ref to ZCL_VCXI_FBSSC_UIC_BAGTY .
  data F_CCCORACTIV type CCCORACTIV .

  methods HANDLE_UC_CHANGE
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DISPLAY
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods LOAD_BAGTY
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_BAGTY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods DELETE_BAGTY
    importing
      !IT_BAGTY type ZVCXI_FBSSC_TT_BAGTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DETAIL
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSSC_GRID_BAGTY definition
class ZCL_VCXI_FBSSC_GRID_BAGTY implementation.
  method CHANGE_STYLE_BAGTY.

*** Set Bag Type = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IBAGT'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Bag Type Description = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IBAGT_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHECK_SEL_DELETE.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
    if LINES( LT_CELL ) gt 0 or
       LINES( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.

  endmethod.
  method CHECK_SEL_DETAIL.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.
    data: LF_ROW  type I.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Details are only available if one Cells is selected
    if LINES( LT_CELL ) eq 1 or
       LINES( LT_ROW )  eq 1.
      move ABAP_TRUE to RF_OKAY.

    elseif LINES( LT_CELL ) eq 0.
*** Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing E_ROW = LF_ROW ).

      if LF_ROW is not initial.
        move ABAP_TRUE to RF_OKAY.

      else.
        move ABAP_FALSE to RF_OKAY.

      endif.

    else.
      move ABAP_FALSE to RF_OKAY.

    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME ).

*** Try to Assign Customizing Reference
    try.
        move IR_CUSTOMIZING ?to ME->R_UIC_BAGTY.
      catch CX_SY_MOVE_CAST_ERROR.
***     Bag Type Customizing Reference can't be assigned.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_FBSSC'
            IF_MSGNO = '101' ).
    endtry.

***--------------------------------------------------------------------------------------
*** Get System/Client Parameters
    call function 'TR_SYS_PARAMS'
      importing
        SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
      exceptions
        NO_SYSTEMNAME      = 1
        NO_SYSTEMTYPE      = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method DELETE_BAGTY.

    data: LF_ANSWER   type C,
          LF_QUESTION type STRING.
    data: LS_BAGTY    type ZVCXI_FBSSC_S_BAGTY.

    check LINES( IT_BAGTY ) is not initial.

*** PopUp to Confirm
    if LINES( IT_BAGTY ) eq 1.
      read table IT_BAGTY into LS_BAGTY index 1.
      move: text-Q01 to LF_QUESTION.
      replace first occurrence of '&' in LF_QUESTION with LS_BAGTY-IBAGT.
    else.
      move text-Q02 to LF_QUESTION.
    endif.

    call function 'POPUP_TO_CONFIRM'
      exporting
        TITLEBAR       = text-T01
        TEXT_QUESTION  = LF_QUESTION
        DEFAULT_BUTTON = '1'
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC is not initial or LF_ANSWER ne '1'.
      return.
    endif.

*** Delete Selected Bag Types
    check ME->R_UIC_BAGTY is bound.
    ME->R_UIC_BAGTY->DELETE_BAGTY( IT_BAGTY = IT_BAGTY ).

  endmethod.
  method GET_FIELDCAT.

    field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

***     Adjust Field Label of Bag Type
        when 'IBAGT'.
          move text-B01 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.
          move 'A' to <S_FCAT>-COL_OPT.

        when 'IBAGT_DESCR'.
          move text-D01 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.
          move 'A' to <S_FCAT>-COL_OPT.

      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_BAGTY      type          ZVCXI_FBSSC_S_BAGTY,
          LS_BAGTY_GRID type          ZVCXI_FBSSC_S_BAGTY_GRID.
    data: LT_BAGTY      type          ZVCXI_FBSSC_TT_BAGTY.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Bag Type Entries
    LT_BAGTY = ME->R_UIC_BAGTY->GET_ALL_BAGTY( ).

    sort LT_BAGTY by IBAGT.

    loop at LT_BAGTY into LS_BAGTY.
      clear: LS_BAGTY_GRID.

      move: LS_BAGTY-IBAGT to LS_BAGTY_GRID-IBAGT,
            LS_BAGTY-IBAGT_DESCR to LS_BAGTY_GRID-IBAGT_DESCR.

***--------------------------------------------------------------------------------------
***   Set Style Details
      ME->CHANGE_STYLE_BAGTY( changing CT_STYL = LS_BAGTY_GRID-T_STYL ).

***--------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_BAGTY_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
    move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
    move 'A'        to RS_LAYOUT-SEL_MODE.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data:          LF_BAGTY  type          ZVCXI_FBS_IBAGT.
    data:          LR_CX_CKX type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type          ANY,
                   <F_FIELD> type          ANY.

    try.

***     Get Bag Type
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
        check SY-SUBRC = 0.

        assign component 'IBAGT' of structure <S_DATA> to <F_FIELD>.
        check SY-SUBRC = 0.

        LF_BAGTY = <F_FIELD>.

***     Open Bag Type Customizing - Detail -> no Change Mode
        check ME->R_UIC_BAGTY is bound.
        ME->R_UIC_BAGTY->OPEN_BAGTY( IF_IBAGT  = LF_BAGTY
                                     IF_CHANGE = ABAP_FALSE ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LF_DISABLED     type        ABAP_BOOL.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR> type STB_BUTTON.

*** If Customizing in this client cannot be changed
    if ME->F_CCCORACTIV eq 2.
      LF_DISABLED = ABAP_TRUE.
    endif.

    try.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements Add, Delete and Copy
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_ADD               to <S_TOOLBAR>-FUNCTION,
              text-T02                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_INSERT_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DELETE            to <S_TOOLBAR>-FUNCTION,
              text-T03                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DELETE_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_COPY              to <S_TOOLBAR>-FUNCTION,
              text-T04                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_SYSTEM_COPY          to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move C_BTYPE_SEPARATOR          to <S_TOOLBAR>-BUTN_TYPE.

***     Insert Toolbar elements Change and Display
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_CHANGE            to <S_TOOLBAR>-FUNCTION,
              text-T05                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_CHANGE               to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DISPLAY           to <S_TOOLBAR>-FUNCTION,
              text-T06                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DISPLAY              to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_CHANGE.

    ME->LOAD_BAGTY( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_UC_COPY.

    ME->LOAD_BAGTY( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_UC_DELETE.

    data: LS_CELL  type          LVC_S_CELL,
          LS_ROW   type          LVC_S_ROW.
    data: LT_CELL  type          LVC_T_CELL,
          LT_ROW   type          LVC_T_ROW,
          LT_BAGTY type          ZVCXI_FBSSC_TT_BAGTY.
    field-symbols: <T_DATA>  type standard table,
                   <S_BAGTY> type          ZVCXI_FBSSC_S_BAGTY,
                   <S_DATA>  type          ANY.

*** Get Bag Types Data
    assign ME->R_DATA->* to <T_DATA>.
    free: <T_DATA>.
    ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete Bag Types
    if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***   No rows selected. Please select all rows you want to delete.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = 'ZVCXI_FBSSC'
          F_MSGNO = '056'.
    endif.

*** Get Selected Bag Types
    loop at LT_CELL into LS_CELL.
      read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
      check SY-SUBRC = 0.

      append initial line to LT_BAGTY assigning <S_BAGTY>.
      move-corresponding <S_DATA> to <S_BAGTY>.
    endloop.

    loop at LT_ROW into LS_ROW.
      read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
      check SY-SUBRC = 0.

      append initial line to LT_BAGTY assigning <S_BAGTY>.
      move-corresponding <S_DATA> to <S_BAGTY>.
    endloop.

*** Delete Selected Bag Types
    ME->DELETE_BAGTY( IT_BAGTY = LT_BAGTY ).

  endmethod.
  method HANDLE_UC_DISPLAY.

    ME->LOAD_BAGTY( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_USER_COMMAND.

    data:          LR_CX_CKX type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>  type standard table.

    try.

***     Get Bag Type Data
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        case E_UCOMM.

          when C_FCODE_ADD.
***         Create new Bag Type
            check ME->R_UIC_BAGTY is bound.
            ME->R_UIC_BAGTY->ADD_BAGTY( ).

          when C_FCODE_DELETE.
            ME->HANDLE_UC_DELETE( ).

          when C_FCODE_CHANGE.
            ME->HANDLE_UC_CHANGE( IF_UCOMM = E_UCOMM ).

          when C_FCODE_DISPLAY.
            ME->HANDLE_UC_DISPLAY( IF_UCOMM = E_UCOMM ).

          when C_FCODE_COPY.
            ME->HANDLE_UC_COPY( IF_UCOMM = E_UCOMM ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method LOAD_BAGTY.

    data: LF_IBAGT  type          ZVCXI_FBS_IBAGT,
          LF_CHANGE type        ABAP_BOOL.
    data: LS_CELL type          LVC_S_CELL,
          LS_ROW  type          LVC_S_ROW.
    data: LT_CELL type          LVC_T_CELL,
          LT_ROW  type          LVC_T_ROW.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type          ANY,
                   <F_FIELD> type          ANY.

*** Get Bag Type Data
    assign ME->R_DATA->* to <T_DATA>.
    free: <T_DATA>.
    ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

    if ME->CHECK_SEL_DETAIL( ) eq ABAP_FALSE.
***   Please select at least one row or navigate via Double Click.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = 'ZVCXI_FBSSC'
          F_MSGNO = '057'.
    endif.

*** Get selected Bag Type
    read table LT_CELL into LS_CELL index 1.
    if SY-SUBRC eq 0.
      read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    else.
      read table LT_ROW into LS_ROW index 1.
      if SY-SUBRC eq 0.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
      endif.
    endif.

    check SY-SUBRC is initial.

    assign component 'IBAGT' of structure <S_DATA> to <F_FIELD>.
    check SY-SUBRC is initial.

    LF_IBAGT = <F_FIELD>.

    check ME->R_UIC_BAGTY is bound.

    case IF_UCOMM.
      when C_FCODE_DISPLAY.
***     Change Mode OFF
        move ABAP_FALSE to LF_CHANGE.

      when C_FCODE_CHANGE.
***     Change Mode ON
        move ABAP_TRUE to LF_CHANGE.

      when C_FCODE_COPY.
        ME->R_UIC_BAGTY->COPY_BAGTY( IF_IBAGT = LF_IBAGT ).
        return.

    endcase.

*** Open Bag Type Customizing - Detail
    ME->R_UIC_BAGTY->OPEN_BAGTY( IF_IBAGT  = LF_IBAGT
                                 IF_CHANGE = LF_CHANGE ).

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
    set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.
    set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

  endmethod.
