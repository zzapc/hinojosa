
class ZCL_VCXI_XCSR_PR_RTESPV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_XCS_RTESPV type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSR_RTESPV' ##NO_TEXT.
  constants C_IRANK_MQTYI type /VCXI/VSMR_IRANK value 'MQTYI' ##NO_TEXT.
  constants C_IRANK_TIME type /VCXI/VSMR_IRANK value 'TIME' ##NO_TEXT.
  constants C_PARID_RELCO type /VCXI/VKS_PARID value 'ZVCXI_XC_RELCO' ##NO_TEXT.
  constants C_PARID_RTEOP type /VCXI/VKS_PARID value 'ZVCXI_XC_RTEOP' ##NO_TEXT.
  constants C_PARID_RTERD type /VCXI/VKS_PARID value 'ZVCXI_XC_RTERD' ##NO_TEXT.
  constants C_RTEOP_AUTO type ZVCXI_XCSR_RTEOP value 'A' ##NO_TEXT.
  constants C_RTEOP_CHOSEN type ZVCXI_XCSR_RTEOP value 'C' ##NO_TEXT.
  constants C_RTEOP_FIXED type ZVCXI_XCSR_RTEOP value 'F' ##NO_TEXT.
  constants C_RTERD_MACHCUST type ZVCXI_XCSR_RTERD value 'MACHCUST' ##NO_TEXT.
  constants C_RTERD_NONE type ZVCXI_XCSR_RTERD value 'NONE' ##NO_TEXT.
  constants C_RTERD_PREDEF type ZVCXI_XCSR_RTERD value 'PREDEF' ##NO_TEXT.
  data F_DATE type DATS read-only .
  data R_RTESEL type ref to ZCL_VCXI_XCSR_BL_PRTE read-only .
  data T_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP read-only .
  data T_RTEALT type ZVCXI_XCSR_TT_BL_PRTE read-only .
  data T_RTEHID type ZVCXI_XCSR_TT_BL_PRTE read-only .
  data T_RTEINV type ZVCXI_XCSR_TT_BL_PRTE read-only .
  data T_RTE_DEF type ZVCXI_XCSR_TT_RTE_DEF read-only .

  events BL_PRTE_EVALUATED .

  methods CHECK_PROD_FILL
    exporting
      value(EF_RETURN) type I
    changing
      !CT_GATE_IGNORE type /VCXI/VKSR_TT_GATE optional
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
  methods CREATE_BL_PRTE
    importing
      !IR_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE optional
    returning
      value(RR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods CREATE_BL_PSTEP_MANU
    returning
      value(RR_BL_PSTEP) type ref to ZCL_VCXI_XCSR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods CREATE_BL_PSTEP_OUTSO
    returning
      value(RR_BL_PSTEP) type ref to ZCL_VCXI_XCSR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods DELETE_BL_PRTE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods EVALUATE_BL_PRTE
    importing
      !IT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods FILL_PROD
    raising
      /VCXI/CX_CKX .
  methods FIND_BL_PRTE
    importing
      !IT_ARBPL type /VCXI/CKX_TT_OBJECT
    returning
      value(RR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY
    returning
      value(RS_EVQTY) type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_BY_IMFXC
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    returning
      value(RS_EVQTY) type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods GET_EXQTY
    returning
      value(RS_EXQTY) type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
  methods GET_LCVAL
    returning
      value(RF_LCVAL) type /VCXI/VSMC_LCVAL
    raising
      /VCXI/CX_CKX .
  methods GET_RANK_DEF
    returning
      value(RT_RANK_DEF) type ZVCXI_XCSR_TT_RANK_DEF .
  methods GET_RELCO
    returning
      value(RF_RELCO) type ZVCXI_XCSR_RELCO
    raising
      /VCXI/CX_CKX .
  methods GET_RTEOP
    returning
      value(RF_RTEOP) type ZVCXI_XCSR_RTEOP
    raising
      /VCXI/CX_CKX .
  methods GET_RTERD
    returning
      value(RF_RTERD) type ZVCXI_XCSR_RTERD
    raising
      /VCXI/CX_CKX .
  methods IS_BL_PRTE_CHANGEABLE
    returning
      value(RF_CHANGEABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_FILL_PROD_ALLOWED
    exporting
      value(EF_ALLOWED) type ABAP_BOOL
    changing
      !CT_GATE_IGNORE type /VCXI/VKSR_TT_GATE optional
    raising
      /VCXI/CX_CKX .
  methods REFRESH_AUTO
    importing
      !IF_FORCE type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods SET_RELCO
    importing
      !IF_RELCO type ZVCXI_XCSR_RELCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RTEOP
    importing
      !IF_RTEOP type ZVCXI_XCSR_RTEOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RTERD
    importing
      !IF_RTERD type ZVCXI_XCSR_RTERD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RTESEL
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BL_PRTE
    importing
      !IT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  types:
    begin of YS_XML_BL_PRTE,
      GUID_BL_PRTE type /VCXI/CKX_GUID,
      XML          type STRING,
    end   of YS_XML_BL_PRTE .
  types:
    YT_XML_BL_PRTE type standard table of YS_XML_BL_PRTE with default key .
  types:
    begin of YS_XML_RTE_PSEQ,
      GPSEQ                 type /VCXI/CKX_GUID,
      IPSEQ                 type /VCXI/VSMC_IPSEQ,
      GUID_RTE_PSEQ         type /VCXI/CKX_GUID,
      GUID_RTE_PSEQ_PARENT  type /VCXI/CKX_GUID,
    end   of YS_XML_RTE_PSEQ .
  types:
    YT_XML_RTE_PSEQ type standard table of YS_XML_RTE_PSEQ with default key .
  types:
    begin of YS_MAP_RTE_PSEQ,
      GUID_RTE_PSEQ type        /VCXI/CKX_GUID,
      R_RTE_PSEQ    type ref to /VCXI/CL_VSMR_RTE_PSEQ,
    end   of YS_MAP_RTE_PSEQ .
  types:
    YT_MAP_RTE_PSEQ type standard table of YS_MAP_RTE_PSEQ with default key .
  types:
    begin of YS_XML_RTE_PSTEP,
      IPSTP           type /VCXI/VSMC_IPSTP,
      GUID_PSTEP      type /VCXI/CKX_GUID,
      GUID_RTE_PSEQ   type /VCXI/CKX_GUID,
      BL_PSTEP_CLSNA  type STRING,
      BL_PSTEP_XML    type STRING,
    end   of YS_XML_RTE_PSTEP .
  types:
    YT_XML_RTE_PSTEP type standard table of YS_XML_RTE_PSTEP with default key .
  types:
    begin of YS_XML_RTE_DEF,
      GPRTE                 type /VCXI/VSMC_GPRTE,
      IPRTE                 type /VCXI/VSMC_IPRTE,
      T_XML_RTE_PSEQ        type YT_XML_RTE_PSEQ,
      T_XML_RTE_COMBI_PSTEP type table of /VCXI/CKX_TT_GUID with default key,
    end   of YS_XML_RTE_DEF .
  types:
    YT_XML_RTE_DEF type standard table of YS_XML_RTE_DEF with default key .

  constants C_ATTID_LIFNR_REQ type /VCXI/VKS_ATTID value 'LIFNR_REQUIRED' ##NO_TEXT.
  constants C_IEVNT_I_DESERIALIZE type /VCXI/VKSC_IEVNT value 'DESERIALIZE' ##NO_TEXT.
  constants C_IEVNT_I_DETERMINE_RTE_DEF type /VCXI/VKSC_IEVNT value 'DETERMINE_RTE_DEF' ##NO_TEXT.
  constants C_IEVNT_I_INIT_EVQTY type /VCXI/VKSC_IEVNT value 'INIT_EVQTY' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_REBUILD_BL_PSTEP type /VCXI/VKSC_IEVNT value 'REBUILD_BL_PSTEP' ##NO_TEXT.
  constants C_IEVNT_I_REEVALUATE type /VCXI/VKSC_IEVNT value 'REEVALUATE' ##NO_TEXT.
  constants C_IEVNT_I_REFRESH_RTESEL type /VCXI/VKSC_IEVNT value 'REFRESH_RTESEL' ##NO_TEXT.
  constants C_IEVNT_I_SERIALIZE type /VCXI/VKSC_IEVNT value 'SERIALIZE' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_I_UPDATE_RTE_DEF type /VCXI/VKSC_IEVNT value 'UPDATE_RTE_DEF' ##NO_TEXT.
  constants C_IEVNT_O_BL_PRTE_CHANGED type /VCXI/VKSC_IEVNT value 'BL_PRTE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BL_PSTEP_CHANGED type /VCXI/VKSC_IEVNT value 'BL_PSTEP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_EVQTY_CHANGED type /VCXI/VKSC_IEVNT value 'EVQTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROD_FILLED type /VCXI/VKSC_IEVNT value 'PROD_FILLED' ##NO_TEXT.
  constants C_IEVNT_O_RELCO_CHANGED type /VCXI/VKSC_IEVNT value 'RELCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RTEOP_CHANGED type /VCXI/VKSC_IEVNT value 'RTEOP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RTESEL_CHANGED type /VCXI/VKSC_IEVNT value 'RTESEL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STRUC_CHANGED type /VCXI/VKSC_IEVNT value 'STRUC_CHANGED' ##NO_TEXT.
  constants C_IFUNC_BL_PRTE_CHANGEABLE type ZVCXI_XCD_IFUNC value 'BL_PRTE_CHANGEABLE' ##NO_TEXT.
  constants C_PARID_EVQTY_A type /VCXI/VKS_PARID value 'ZVCXI_XC_EVQTY_A' ##NO_TEXT.
  constants C_PARID_EVQTY_L type /VCXI/VKS_PARID value 'ZVCXI_XC_EVQTY_L' ##NO_TEXT.
  constants C_PARID_EVQTY_P type /VCXI/VKS_PARID value 'ZVCXI_XC_EVQTY_P' ##NO_TEXT.
  constants C_PARID_EVQTY_W type /VCXI/VKS_PARID value 'ZVCXI_XC_EVQTY_W' ##NO_TEXT.
  constants C_PARID_RTEDA type /VCXI/VKS_PARID value 'ZVCXI_XC_RTEDA' ##NO_TEXT.
  data F_FILL_PROD_REQ type ABAP_BOOL .
  data F_LIFNR_REQ type ABAP_BOOL .
  data F_MFMI_MATNR type MATNR .
  data F_PARID_EVQTY type /VCXI/VKS_PARID .
  data F_REDETERMINATION_REQ type ABAP_BOOL .
  data R_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV .
  data R_MFMI type ref to DATA .
  data R_MFSI type ref to DATA .
  data T_CSPLIT type ZVCXI_XCSR_TT_CSPLIT .

  events PROD_FILLED
    exporting
      value(IR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE .

  methods BUILD_RTE_COMBI_PSTEP
    importing
      !IR_PRTE type ref to /VCXI/CL_VSMC_PRTE
      !IT_RTE_PSTEP type /VCXI/VSMR_TT_RTE_PSTEP
    returning
      value(RT_RTE_COMBI_PSTEP) type /VCXI/VSMR_TT_RTE_COMBI_PSTEP
    raising
      /VCXI/CX_CKX .
  methods BUILD_RTE_PSTEP
    importing
      !IR_PRTE type ref to /VCXI/CL_VSMC_PRTE
      !IT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
      !IR_RTE_PSEQ type ref to /VCXI/CL_VSMR_RTE_PSEQ optional
    returning
      value(RT_RTE_PSTEP) type /VCXI/VSMR_TT_RTE_PSTEP
    raising
      /VCXI/CX_CKX .
  methods CHECK_EVQTY
    exporting
      !EF_RETURN type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PSEQ_OF_RTE_PSEQ_MATCH
    importing
      !IR_RTE_PSEQ_1 type ref to /VCXI/CL_VSMR_RTE_PSEQ
      !IR_RTE_PSEQ_2 type ref to /VCXI/CL_VSMR_RTE_PSEQ
    returning
      value(RF_MATCH) type ABAP_BOOL .
  methods CHECK_RTEHID
    importing
      !IT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods CHECK_RTESEL
    exporting
      !EF_RETURN type I
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP
    returning
      value(RT_BL_PSTEP) type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_BY_IMFXC
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RR_BL_PSTEP) type ref to ZCL_VCXI_XCSR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    returning
      value(RT_CSPLIT) type ZVCXI_XCSR_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods GET_MFMI
    returning
      value(RR_MFMI) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_MFSI
    returning
      value(RR_MFSI) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_STRICT_LIMITS
    importing
      !IT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    exporting
      !ET_RTE_LDIM type /VCXI/VSMR_TT_RTE_LDIM
      !ET_RTE_LVAL type /VCXI/VSMR_TT_RTE_LVAL
    returning
      value(RT_RTE_PSTEP) type /VCXI/VSMR_TT_RTE_PSTEP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DESERIALIZE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DETERMINE_RTE_DEF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_EVQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_PROD_FILLED
    for event PROD_FILLED of ZCL_VCXI_XCSR_PR_RTESPV
    importing
      !IR_BL_PRTE .
  methods HANDLE_REBUILD_BL_PSTEP
    importing
      !IT_GATE_PROVIDER type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REEVALUATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REFRESH_RTESEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SERIALIZE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UPDATE_RTE_DEF
    raising
      /VCXI/CX_CKX .
  methods IS_IN_LINE_RTESPV
    importing
      !IR_PRVDR type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR_RTESPV type /VCXI/VKSR_TT_GATE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods MERGE_RERUNS
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods MERGE_RTE_ARBPL
    importing
      !IT_RTE_ARBPL type /VCXI/VSMR_TT_RTE_ARBPL
    returning
      value(RR_RTE_ARBPL) type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods REDETERMINE_MACHCUST
    raising
      /VCXI/CX_CKX .
  methods REDETERMINE_PREDEF
    raising
      /VCXI/CX_CKX .
  methods REFRESH_RANK
    raising
      /VCXI/CX_CKX .
  methods REFRESH_RELCO
    changing
      !CT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods SET_EVQTY
    importing
      !IS_EVQTY type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods SPLIT_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP
      !IT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP optional
    returning
      value(RT_RTE_ARBPL) type /VCXI/VSMR_TT_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BL_PRTE_BY_RTE_DEF
    importing
      !IT_RTE_DEF_OLD type ZVCXI_XCSR_TT_RTE_DEF optional
      !IT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE optional
    preferred parameter IT_RTE_DEF_OLD
    raising
      /VCXI/CX_CKX .
  methods VALIDATE
    changing
      !CT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  data R_RTEFIL type ref to ZCL_VCXI_XCSR_BL_PRTE .

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
  methods INIT_MFMI_MATNR
    raising
      /VCXI/CX_CKX .
  methods INIT_PARID_EVQTY
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSR_PR_RTESPV definition
class ZCL_VCXI_XCSR_PR_RTESPV implementation.
method BUILD_RTE_COMBI_PSTEP.
endmethod.
method BUILD_RTE_PSTEP.

  data:  LF_LCVAL         type        /VCXI/VSMC_LCVAL.
  data:  LS_PSEQL         type        /VCXI/VSMC_S_PSEQL.
  data:  LT_PSEQ          type        /VCXI/CKX_TT_OBJECT,
         LT_BL_PSTEP      type        ZVCXI_XCSR_TT_BL_PSTEP,
         LT_RTE_PSTEP     type        /VCXI/VSMR_TT_RTE_PSTEP.
  data:  LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_PSEQ          type ref to /VCXI/CL_VSMC_PSEQ,
         LR_PRTE          type ref to /VCXI/CL_VSMC_PRTE,
         LR_PSTEP         type ref to /VCXI/CL_VSMC_PSTEP,
         LR_RTE_PSEQ      type ref to /VCXI/CL_VSMR_RTE_PSEQ,
         LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.

  check IR_PRTE is bound.

***--------------------------------------------------------------------------------------
*** Assignment based on Sequence Links
  if IR_PRTE->F_PSEQD ne ABAP_TRUE.
    move IT_BL_PSTEP to LT_BL_PSTEP.

*** Get Production Steps Sorted
    loop at IR_PRTE->T_PSEQL into LS_PSEQL.
      collect LS_PSEQL-R_PSEQ_PREV into LT_PSEQ.
      collect LS_PSEQL-R_PSEQ_NEXT into LT_PSEQ.
    endloop.

*** Create required Production Steps
    loop at LT_PSEQ into LR_OBJECT.
      move LR_OBJECT ?to LR_PSEQ.

      case LR_PSEQ->R_OBJECT->F_TOOBJ.
***--------------------------------------------------------------------------------------
        when /VCXI/CL_VSMC_PRTE=>C_TOOBJ_PRTE.
          move LR_PSEQ->R_OBJECT ?to LR_PRTE.

          create object LR_RTE_PSEQ
            exporting
              IR_PSEQ     = LR_PSEQ
              IR_RTE_PSEQ = IR_RTE_PSEQ.

          LT_RTE_PSTEP = ME->BUILD_RTE_PSTEP( IT_BL_PSTEP = LT_BL_PSTEP
                                              IR_PRTE     = LR_PRTE
                                              IR_RTE_PSEQ = LR_RTE_PSEQ ).
          loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
            append LR_RTE_PSTEP to RT_RTE_PSTEP.
            delete LT_BL_PSTEP where TABLE_LINE eq LR_RTE_PSTEP->R_BLOBJ.
          endloop.

***--------------------------------------------------------------------------------------
        when /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP.
          move LR_PSEQ->R_OBJECT ?to LR_PSTEP.

          read table LT_BL_PSTEP into LR_BL_PSTEP
                                 with key TABLE_LINE->R_PSTEP = LR_PSTEP.
          if SY-SUBRC ne 0.
            continue.
          endif.

***       Check Sequence ID
          if LR_BL_PSTEP->I_IPSEQ is not initial and
             LR_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( ) not in LR_BL_PSTEP->I_IPSEQ.
            continue.
          endif.

***       Mark as 'assigned'
          delete LT_BL_PSTEP index SY-TABIX.

***       Create Production Sequence
          create object LR_RTE_PSEQ
            exporting
              IR_PSEQ     = LR_PSEQ
              IR_RTE_PSEQ = IR_RTE_PSEQ.

          append LR_RTE_PSEQ->R_RTE_PSTEP to RT_RTE_PSTEP.
          move LR_BL_PSTEP to LR_RTE_PSEQ->R_RTE_PSTEP->R_BLOBJ.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Assignment based on Dynamic Route
  else.
    move IR_PRTE->T_PSEQ to LT_PSEQ.
    loop at IT_BL_PSTEP into LR_BL_PSTEP.
      clear LR_RTE_PSEQ.

***   Look for match in PSteps
      loop at LT_PSEQ into LR_OBJECT.
        move LR_OBJECT ?to LR_PSEQ.

***     Routes as Sequence Steps are not supported when using Dynamic Sequence.
        check LR_PSEQ->R_OBJECT->F_TOOBJ eq /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP and
              LR_PSEQ->R_OBJECT          eq LR_BL_PSTEP->R_PSTEP.

***     Check Sequence ID
        if LR_BL_PSTEP->I_IPSEQ is not initial and
           LR_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( ) not in LR_BL_PSTEP->I_IPSEQ.
          continue.
        endif.

***     Create Production Sequence
        create object LR_RTE_PSEQ
          exporting
            IR_PSEQ     = LR_PSEQ
            IR_RTE_PSEQ = IR_RTE_PSEQ.

        append LR_RTE_PSEQ->R_RTE_PSTEP to RT_RTE_PSTEP.
        move LR_BL_PSTEP to LR_RTE_PSEQ->R_RTE_PSTEP->R_BLOBJ.

***     Mark as 'assigned'
        delete LT_PSEQ.
        exit.
      endloop.

***   If no Match was found don't return anything
      if LR_RTE_PSEQ is not bound.
        free: RT_RTE_PSTEP.
        return.
      endif.
    endloop.
  endif.


***--------------------------------------------------------------------------------------
*** Top Level Actions
  if IR_RTE_PSEQ is not bound.
*** If not all where Assigned -> Don't return anything
    if LT_BL_PSTEP is not initial.
      free: RT_RTE_PSTEP.
    endif.

*** Determine Link Context Value
    LF_LCVAL = ME->GET_LCVAL( ).

    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.
***   Set Link Context Value
      LR_RTE_PSTEP->F_LCVAL = LF_LCVAL.

      check LR_RTE_PSTEP->R_BLOBJ is bound.
***   Add Limits and Aspects
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
      LR_BL_PSTEP->ADD_LIMITS_TO_RTE_PSTEP(  IR_RTE_PSTEP = LR_RTE_PSTEP ).
      LR_BL_PSTEP->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).
    endloop.
  endif.

endmethod.
method CHECK_EVQTY.
*** 0 = Evaluation Quantity was determined.
*** 1 = No Evaluation Quantity was determined.

  data: LS_EVQTY type ZVCXI_XCSR_S_EVQTY.

  move ME->GET_EVQTY( ) to LS_EVQTY.
  if LS_EVQTY-EVQTY is not initial.
    move 0 to EF_RETURN.
  else.
    move 1 to EF_RETURN.
  endif.

endmethod.
method CHECK_PROD_FILL.
*** 0 = Production is filled correctly
*** 1 = Not yet filled
*** 2 = Fill is required, but not allowed
*** 3 = Refill needed
*** 4 = Refill is required, but not allowed
*** 5 = Related Supervisor requires fill
*** 6 = Related Supervisor requires fill, but not allowed

  data: LF_FILL_PROD_ALLOWED type        ABAP_BOOL,
        LF_RETURN            type        I.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV.
  data: LT_GATE        type        /VCXI/VKSR_TT_GATE,
        LT_GATE_IGNORE type        /VCXI/VKSR_TT_GATE.


*** Find Provider for Routing Supervisor
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                   IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Check if Production is filled
  if ME->R_RTEFIL is not bound.
*** Is Fill allowed
    move CT_GATE_IGNORE to LT_GATE_IGNORE.
    append lines of LT_GATE to LT_GATE_IGNORE.  "Only check own level
    ME->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = LF_FILL_PROD_ALLOWED
                              changing  CT_GATE_IGNORE = LT_GATE_IGNORE ).

    if LF_FILL_PROD_ALLOWED eq ABAP_TRUE.
      move 1 to EF_RETURN.
    else.
      move 2 to EF_RETURN.
      exit.
    endif.
  else.
*** Find Selected Route in Alternatives
    read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                            transporting no fields.
    if SY-SUBRC ne 0.
      move 4 to EF_RETURN.
    endif.

    if ME->R_RTEFIL->COMPARE( IR_BL_PRTE = ME->R_RTESEL ) ne ABAP_TRUE.
***   Is Fill allowed
      move CT_GATE_IGNORE to LT_GATE_IGNORE.
      append lines of LT_GATE to LT_GATE_IGNORE.  "Only check own level
      ME->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = LF_FILL_PROD_ALLOWED
                                changing  CT_GATE_IGNORE = LT_GATE_IGNORE ).

      if LF_FILL_PROD_ALLOWED eq ABAP_TRUE.
        move 3 to EF_RETURN.
      else.
        move 4 to EF_RETURN.
        exit.
      endif.
    endif.
  endif.

*** Check Components if Main is okay
  check EF_RETURN ne 2 and   "Fill is required, but not allowed
        EF_RETURN ne 4.      "Refill is required, but not allowed

***------------------------------------------------------------------------------------------------
*** Also ignore own Element for Routing Supervisor check
  append ME->R_GATE to CT_GATE_IGNORE.

  loop at LT_GATE into LR_GATE.
*** Check Routing Supervisor is not ignored
    read table CT_GATE_IGNORE with key TABLE_LINE = LR_GATE transporting no fields.
    check SY-SUBRC ne 0.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_RTESPV.
        check LR_PR_RTESPV is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Check Component Routing Supervisor
    LR_PR_RTESPV->CHECK_PROD_FILL( importing EF_RETURN      = LF_RETURN
                                   changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).

    case LF_RETURN.
      when 0.      "Production is filled correctly
        continue.
      when 1.      "Not yet filled
        if EF_RETURN is initial.
          move 5 to EF_RETURN.
        endif.
      when 2.      "Fill is required, but not allowed
        if EF_RETURN ne 2.
          move 6 to EF_RETURN.
        endif.
      when 3.      "Refill needed
        if EF_RETURN eq 0.
          move 5 to EF_RETURN.
        endif.
      when 4.      "Refill is required, but not allowed
        if EF_RETURN ne 2 and
           EF_RETURN ne 4.
          move 6 to EF_RETURN.
        endif.
      when 5.      "Related Supervisor requires fill
        if EF_RETURN ne 2 and
           EF_RETURN ne 4 and
           EF_RETURN ne 6.
          move LF_RETURN to EF_RETURN.
        endif.
      when 6.      "Related Supervisor requires fill, but not allowed
        if EF_RETURN ne 2 and
           EF_RETURN ne 4.
          move LF_RETURN to EF_RETURN.
        endif.
    endcase.
  endloop.

endmethod.
method CHECK_PSEQ_OF_RTE_PSEQ_MATCH.

***--------------------------------------------------------------------------------------
*** No Sequences -> Not really a Match
  if IR_RTE_PSEQ_1 is not bound and
     IR_RTE_PSEQ_2 is not bound.
    move ABAP_FALSE to RF_MATCH.
    exit.

***--------------------------------------------------------------------------------------
*** Only one Sequence -> Mismatch
  elseif ( IR_RTE_PSEQ_1 is     bound and
           IR_RTE_PSEQ_2 is not bound ) or
         ( IR_RTE_PSEQ_1 is not bound and
           IR_RTE_PSEQ_2 is     bound ).
    move ABAP_FALSE to RF_MATCH.
    exit.

***--------------------------------------------------------------------------------------
*** Two Sequences -> Keeq checking
  elseif IR_RTE_PSEQ_1 is bound and
         IR_RTE_PSEQ_2 is bound.

    if IR_RTE_PSEQ_1->R_PSEQ ne IR_RTE_PSEQ_2->R_PSEQ.
      move ABAP_FALSE to RF_MATCH.
      exit.
    else.
      if IR_RTE_PSEQ_1->R_RTE_PSEQ eq IR_RTE_PSEQ_2->R_RTE_PSEQ.
        move ABAP_TRUE to RF_MATCH.
        exit.
      else.
        RF_MATCH = ME->CHECK_PSEQ_OF_RTE_PSEQ_MATCH( IR_RTE_PSEQ_1 = IR_RTE_PSEQ_1->R_RTE_PSEQ
                                                     IR_RTE_PSEQ_2 = IR_RTE_PSEQ_2->R_RTE_PSEQ ).

      endif.
    endif.
  endif.

endmethod.
method CHECK_RTEHID.

  data:  LF_FOUND        type        ABAP_BOOL.
  data:  LT_RTEHID       type        ZVCXI_XCSR_TT_BL_PRTE,
         LT_BL_PRTE      type        ZVCXI_XCSR_TT_BL_PRTE.
  data:  LR_BL_PRTE1     type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_BL_PRTE2     type ref to ZCL_VCXI_XCSR_BL_PRTE.

***----------------------------------------------------------------------------
*** Buffer old Hidden Routes
  append lines of ME->T_RTEHID to LT_RTEHID.

***----------------------------------------------------------------------------
*** Combine Alternative and Invalid
  clear LT_BL_PRTE.
  append lines of ME->T_RTEALT to LT_BL_PRTE.
  append lines of ME->T_RTEINV to LT_BL_PRTE.

*** Move Routes to Hidden
  loop at IT_BL_PRTE into LR_BL_PRTE1.
*** Hide Machine Customizing Routes by other Routes
    loop at LT_BL_PRTE into LR_BL_PRTE2.
***   Try to hide Route 2
      if ( LR_BL_PRTE1->R_RTE_PRTE->F_RSRCE ne /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST and
           LR_BL_PRTE2->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST ) or
         ( LR_BL_PRTE1->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF and
           LR_BL_PRTE2->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF ).
***     Compare before Hide
        if LR_BL_PRTE2->COMPARE( IR_BL_PRTE = LR_BL_PRTE1 ) eq ABAP_TRUE.
          delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE2.
          delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE2.
          append LR_BL_PRTE2 to ME->T_RTEHID.
        endif.
      endif.

***   Try to hide Route 1
      if ( LR_BL_PRTE2->R_RTE_PRTE->F_RSRCE ne /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST and
           LR_BL_PRTE1->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST ) or
         ( LR_BL_PRTE2->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF and
           LR_BL_PRTE1->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF ).
***     Compare before Hide
        if LR_BL_PRTE1->COMPARE( IR_BL_PRTE = LR_BL_PRTE2 ) eq ABAP_TRUE.
          delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE1.
          delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE1.
          append LR_BL_PRTE1 to ME->T_RTEHID.
        endif.
      endif.
    endloop.
  endloop.

  sort ME->T_RTEHID.
  delete adjacent duplicates from ME->T_RTEHID.

***----------------------------------------------------------------------------
*** Combine Alternative and Invalid
  clear LT_BL_PRTE.
  append lines of ME->T_RTEALT to LT_BL_PRTE.
  append lines of ME->T_RTEINV to LT_BL_PRTE.

*** Re-Evaluate Hidden Route to unhide if needed
  loop at LT_RTEHID into LR_BL_PRTE1.
    move ABAP_FALSE to LF_FOUND.
    loop at LT_BL_PRTE into LR_BL_PRTE2.
      if LR_BL_PRTE2->COMPARE( IR_BL_PRTE = LR_BL_PRTE1 ) eq ABAP_TRUE.
        move ABAP_TRUE to LF_FOUND.
        exit.
      endif.
    endloop.

    if LF_FOUND eq ABAP_TRUE.
      delete LT_RTEHID.
    else.
      delete ME->T_RTEHID where TABLE_LINE eq LR_BL_PRTE1.
    endif.
  endloop.

*** Reevaluate all Routes for correct Relevancy
  if LT_RTEHID is not initial.
    free: LT_BL_PRTE.
    append lines of ME->T_RTEALT to LT_BL_PRTE.
    append lines of ME->T_RTEINV to LT_BL_PRTE.
    append lines of LT_RTEHID    to LT_BL_PRTE.

    ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).
  endif.

endmethod.
method CHECK_RTESEL.
*** 0 = Selected Route is defined and valid.
*** 1 = No Selected Route defined.
*** 2 = Selected Route is not a valid route.

  data: LS_EVQTY type ZVCXI_XCSR_S_EVQTY.

  if ME->R_RTESEL is bound.
    read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                            transporting no fields.
    if SY-SUBRC eq 0.
      move 0 to EF_RETURN.
    else.
      move 2 to EF_RETURN.
    endif.
  else.
    move 1 to EF_RETURN.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Parameter ID for Evaluation Quantity
  ME->INIT_PARID_EVQTY( ).

*** Initialize Attribute
  ME->INIT_ATTRI( ).

*** Initialize Material Flow In - Material Number
  ME->INIT_MFMI_MATNR( ).

*** Create BL Supervisor Instance
  if IR_BL_RTESPV is bound.
    move IR_BL_RTESPV to ME->R_BL_RTESPV.
  else.
    create object ME->R_BL_RTESPV
      exporting
        IR_GATE = IR_GATE.
  endif.

*** Set Configuration Date
  ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = ME->F_DATE ).

  set handler ME->HANDLE_PROD_FILLED for ME.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    exporting
      IR_RTE_PRTE  = LR_RTE_PRTE
      IR_MFMI      = ME->R_MFMI
      IR_MFSI      = ME->R_MFSI
      IT_CSPLIT    = ME->T_CSPLIT
      IF_DATE      = ME->F_DATE
      IF_LIFNR_REQ = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_XCSR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_XCSR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method DELETE_BL_PRTE.

  data:  LT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE.

*** Remove from Alternative and Invalid Routes
  delete ME->T_RTEALT where TABLE_LINE eq IR_BL_PRTE.
  delete ME->T_RTEINV where TABLE_LINE eq IR_BL_PRTE.

*** Remove from Selected Route if needed
  if IR_BL_PRTE eq ME->R_RTESEL.
    clear ME->R_RTESEL.
  endif.

*** Check Hidden Routes
  append IR_BL_PRTE to LT_BL_PRTE.
  ME->CHECK_RTEHID( IT_BL_PRTE = LT_BL_PRTE ).

endmethod.
  method EVALUATE_BL_PRTE.

    data: LF_RELCO         type        ZVCXI_XCSR_RELCO,
          LF_REFRESH_RELCO type        ABAP_BOOL.
    data: LS_EVQTY        type        ZVCXI_XCSR_S_EVQTY.
    data: LT_BL_PRTE      type        ZVCXI_XCSR_TT_BL_PRTE,
          LT_BL_PRTE_EVAL type        ZVCXI_XCSR_TT_BL_PRTE.
    data: LR_BL_PRTE      type ref to ZCL_VCXI_XCSR_BL_PRTE.

    check IT_BL_PRTE is not initial.

    move ME->GET_EVQTY( ) to LS_EVQTY.
    move ME->GET_RELCO( ) to LF_RELCO.

***--------------------------------------------------------------------------------------
*** Check Hidden Routes
    ME->CHECK_RTEHID( IT_BL_PRTE = IT_BL_PRTE ).

*** Process Routes which are not hidden.
    loop at IT_BL_PRTE into LR_BL_PRTE.
      read table ME->T_RTEHID with key TABLE_LINE = LR_BL_PRTE
                              transporting no fields.
      if SY-SUBRC ne 0.
        append LR_BL_PRTE to LT_BL_PRTE.
      endif.
    endloop.

*** Refresh Relevance Code for Routes
    ME->REFRESH_RELCO( changing CT_BL_PRTE = LT_BL_PRTE ).

***--------------------------------------------------------------------------------------
*** Collect Routes for Evaluation
    loop at LT_BL_PRTE into LR_BL_PRTE.
      delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE.

***   Evaluate valid Routes with correoct Relevancy Code
      if LR_BL_PRTE->R_RTE_PRTE->F_RSTAT eq /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID  and
         LR_BL_PRTE->F_DECIS             ne ZCL_VCXI_XCSR_BL_PRTE=>C_DECIS_DISCARD and
         LR_BL_PRTE->GET_RELCO( ) le LF_RELCO.
        append LR_BL_PRTE to LT_BL_PRTE_EVAL.
      endif.
    endloop.

*** Blulk Evaluation of Routes
    ME->R_BL_RTESPV->EVALUATE_PRTE( IS_EVQTY   = ME->GET_EVQTY( )
                                    IT_BL_PRTE = LT_BL_PRTE_EVAL ).

*** Redermine Relevance Code as something has changed on the Status of the Route
    loop at LT_BL_PRTE_EVAL into LR_BL_PRTE
                           where TABLE_LINE->R_RTE_PRTE->F_RSTAT ne /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID
                            or   TABLE_LINE->F_DECIS             eq ZCL_VCXI_XCSR_BL_PRTE=>C_DECIS_DISCARD.
      move ABAP_TRUE to LF_REFRESH_RELCO.
      exit.
    endloop.

*** Assign Routes to Alternatives or Invalid
    loop at LT_BL_PRTE into LR_BL_PRTE.
      if LR_BL_PRTE->R_RTE_PRTE->F_RSTAT eq /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID  and
         LR_BL_PRTE->F_DECIS             ne ZCL_VCXI_XCSR_BL_PRTE=>C_DECIS_DISCARD and
         LR_BL_PRTE->GET_RELCO( ) le LF_RELCO.
        append LR_BL_PRTE to ME->T_RTEALT.
      else.
        append LR_BL_PRTE to ME->T_RTEINV.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Re-Refresh Relevance Code by re-evaluating Alternatives
    if LF_REFRESH_RELCO eq ABAP_TRUE.
      ME->EVALUATE_BL_PRTE( IT_BL_PRTE = ME->T_RTEALT ).
    endif.

*** Refresh Ranking
    ME->REFRESH_RANK( ).

    raise event BL_PRTE_EVALUATED.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BL_PRTE_CHANGED ).

  endmethod.
method FILL_PROD.

  data:  LS_EXQTY    type        /VCXI/VKCR_S_EXQTY.
  data:  LR_RTEFIL   type ref to ZCL_VCXI_XCSR_BL_PRTE.

  check ME->R_BL_RTESPV is bound.

  if ME->R_RTESEL is not bound.
*** No Selected Route defined.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSR'
                                          IF_MSGNO = '310' ).
  endif.

*** Get Explosion Quantity
  move ME->GET_EXQTY( )   to LS_EXQTY.

*** Copy Selected Route to Filled Route
  move ME->R_RTESEL->COPY( ) to LR_RTEFIL.
  ME->R_BL_RTESPV->SET_BL_PRTE( IR_BL_PRTE = LR_RTEFIL
                                IS_EXQTY   = LS_EXQTY ).

  raise event PROD_FILLED exporting IR_BL_PRTE = LR_RTEFIL.

endmethod.
method FIND_BL_PRTE.

  data: LF_INDEX           type        I,
        LF_FOUND           type        ABAP_BOOL.
  data: LT_PRTE            type        ZVCXI_XCSR_TT_BL_PRTE.
  data: LR_BL_PRTE         type ref to ZCL_VCXI_XCSR_BL_PRTE,
        LR_RTE_ARBPL       type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_ARBPL_S         type ref to /VCXI/CL_VSMC_ARBPL,
        LR_OBJECT_ARBPL_S  type ref to /VCXI/IF_CKX_OBJECT.

*** Collect all Routings
  append lines of ME->T_RTEALT to LT_PRTE.
  append lines of ME->T_RTEINV to LT_PRTE.

***---------------------------------------------------------------------
*** Search First for Valid Route
  loop at LT_PRTE into LR_BL_PRTE.

***---------------------------------------------------------------------
*** First of all -> we need the same number of Workcenters
    check lines( LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ) eq lines( IT_ARBPL ).

*** Start Positiv.
    LF_FOUND = ABAP_TRUE.

    loop at IT_ARBPL into LR_OBJECT_ARBPL_S.
      move SY-TABIX to LF_INDEX.

***---------------------------------------------------------------------
***   Get Workcenter Object of Searched one
      try.
          move LR_OBJECT_ARBPL_S ?to LR_ARBPL_S.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_ARBPL_S.
      endtry.

      if LR_ARBPL_S          is not bound or
         LR_ARBPL_S->R_WERKS is not bound.
***     Not valid Combination -> exit
        LF_FOUND = ABAP_FALSE.
        exit.
      endif.

***---------------------------------------------------------------------
***   Get X. Workcenter of Comparing Route
      read table LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index LF_INDEX.
      if SY-SUBRC                       ne 0         or
         LR_RTE_ARBPL->R_ARBPL          is not bound or
         LR_RTE_ARBPL->R_ARBPL->R_WERKS is not bound.
***     Not valid Combination -> exit
        LF_FOUND = ABAP_FALSE.
        exit.
      endif.

***---------------------------------------------------------------------
***   Do Compare
      check LR_ARBPL_S ne LR_RTE_ARBPL->R_ARBPL.

***   Not valid Combination -> no exit
      LF_FOUND = ABAP_FALSE.
      exit.

    endloop.

    check LF_FOUND eq ABAP_TRUE.

*** Workcenter was found -> Exit
    move LR_BL_PRTE to RR_BL_PRTE.
    exit.

  endloop.

endmethod.
method GET_BL_PSTEP.


endmethod.
  method GET_BL_PSTEP_BY_IMFXC.

    data: LT_IMFXC     type        ZVCXI_XCSP_TT_IMFXC.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

    check IR_BL_PRTE is bound.

*** Loop at Work Center and their Production Steps
    loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.

        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_BL_PSTEP.
        endtry.
        check LR_BL_PSTEP is bound.

***     Get X-Connect IDs consumed by this PStep
        LT_IMFXC = LR_BL_PSTEP->GET_IMFXC( ).

***     Look for a match with the requested ID
        if LINE_EXISTS( LT_IMFXC[ TABLE_LINE = IF_IMFXC ] ).
          move LR_BL_PSTEP to RR_BL_PSTEP.
          exit.
        endif.
      endloop.
      if RR_BL_PSTEP is bound.
        exit.
      endif.
    endloop.

  endmethod.
method GET_CSPLIT.
endmethod.
method GET_EVQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = F_PARID_EVQTY ).

  move LS_PARAM-ATFLV to RS_EVQTY-EVQTY.
  move LS_PARAM-UNIT  to RS_EVQTY-EVQTY_UOM.

endmethod.
  method GET_EVQTY_BY_IMFXC.

    data: LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Process new Events
    ME->R_GATE->RAISE_EVENTS( ).

*** Refresh Auto. Routes
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***------------------------------------------------------------------------------------------------
    try.
        move ME->R_RTESEL ?to LR_BL_PRTE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_BL_PRTE.
    endtry.

    if LR_BL_PRTE is bound.
***   Start with own Evaluation Quantity (outbound)
      RS_EVQTY = ME->GET_EVQTY( ).

***   Consider MF Consumption Factor based on Production Steps
      LR_BL_PSTEP = ME->GET_BL_PSTEP_BY_IMFXC( IF_IMFXC   = IF_IMFXC
                                               IR_BL_PRTE = LR_BL_PRTE ).

***   Conversion of Evaluation Quantity Out to In (at point of Production Step)
      LR_BL_PRTE->GET_EVQTY_IN( exporting IR_BL_RTESPV = ME->R_BL_RTESPV
                                          IR_BL_PSTEP  = LR_BL_PSTEP
                               changing   CS_EVQTY     = RS_EVQTY ).

      if LR_BL_PSTEP is bound.
        LR_BL_PSTEP->ADJ_EVQTY_BY_IMFXC( exporting IF_IMFXC = IF_IMFXC
                                         changing  CS_EVQTY = RS_EVQTY ).
      endif.

    else.
***   No Inbound Evaluation Quantity could be determined.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGID = 'ZVCXI_F0SR'
          F_MSGNO = '051'
          F_MSGTY = 'E'.
    endif.

  endmethod.
method GET_EXQTY.

  data:  LS_EVQTY        type        ZVCXI_XCSR_S_EVQTY.

*** Get Explosion Quantity
  move ME->GET_EVQTY( )   to LS_EVQTY.
  move LS_EVQTY-EVQTY     to RS_EXQTY-EXQTY.
  move LS_EVQTY-EVQTY_UOM to RS_EXQTY-EXQTY_UOM.

endmethod.
  method GET_LCVAL.

    try.
***     Get Attribute Value for Link Context Value
        RF_LCVAL = ME->R_GATE->GET_ATTRI( IF_ATTID = 'LCVAL' )-ATTVA.
      catch /VCXI/CX_CKX.
        clear RF_LCVAL.
    endtry.

  endmethod.
method GET_MFMI.
endmethod.
method GET_MFSI.
endmethod.
method GET_RANK_DEF.

  field-symbols: <S_RANK_DEF>   type ZVCXI_XCSR_S_RANK_DEF.

  append initial line to RT_RANK_DEF assigning <S_RANK_DEF>.
  move C_IRANK_TIME       to <S_RANK_DEF>-IRANK.
  move 'ZVCXI_XCSR_RVTIM' to <S_RANK_DEF>-ROLLNAME.

  append initial line to RT_RANK_DEF assigning <S_RANK_DEF>.
  move C_IRANK_MQTYI       to <S_RANK_DEF>-IRANK.
  move 'ZVCXI_XCSR_RVWAS'  to <S_RANK_DEF>-ROLLNAME.

endmethod.
method GET_RELCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELCO ).
  move LS_PARAM-ATFLV to RF_RELCO.

endmethod.
method GET_RTEOP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTEOP ).
  move LS_PARAM-ATWRT to RF_RTEOP.

endmethod.
method GET_RTERD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTERD ).
  move LS_PARAM-ATWRT to RF_RTERD.

endmethod.
method GET_STATUS.

  data: LF_RETURN  type I.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Evaluation Quantity
  ME->CHECK_EVQTY( importing EF_RETURN = LF_RETURN ).
  if LF_RETURN eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Selected Route
  ME->CHECK_RTESEL( importing EF_RETURN = LF_RETURN ).
  if LF_RETURN eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Fill Production is not required
  ME->CHECK_PROD_FILL( importing EF_RETURN = LF_RETURN ).
  if LF_RETURN eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Redetermination is not required
  if ME->F_REDETERMINATION_REQ ne ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:  LF_RETURN type I.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Evaluation Quantity
  ME->CHECK_EVQTY( importing EF_RETURN = LF_RETURN ).
  if LF_RETURN eq 0.
*** Evaluation Quantity was determined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '301' ).
  else.
*** No Evaluation Quantity was determined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '302' ).
  endif.

***------------------------------------------------------------------
*** Check Selected Route
  ME->CHECK_RTESEL( importing EF_RETURN = LF_RETURN ).
  case LF_RETURN.
    when 0.
***   Selected Route is defined
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '309' ).
    when 1.
***   No Selected Route defined
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '310' ).
    when 2.
***   Selected Route is not a valid route.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '311' ).
  endcase.

***------------------------------------------------------------------
*** Fill Production is not required
  ME->CHECK_PROD_FILL( importing EF_RETURN = LF_RETURN ).
  case LF_RETURN.
    when 0.
***   Production is filled correctly.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '320' ).
    when 1.
***   Production is not yet filled.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '321' ).
    when 2.
***   Fill is required, but not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '322' ).
    when 3.
***   Refill of Production needed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '323' ).
    when 4.
***   Refill of Production is required, but not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '324' ).
    when 5.
***   Related Supervisor requires fill of Production.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '325' ).
    when 6.
***   Related Supervisor requires fill of Production, but not allowed.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '326' ).
  endcase.

***------------------------------------------------------------------
*** Redetermination is not required
  if ME->F_REDETERMINATION_REQ ne ABAP_TRUE.
*** Redeterminationn is not required
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '303' ).
  else.
*** Redetermination is required
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSR'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '304' ).
  endif.

endmethod.
  method GET_STRICT_LIMITS.

    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP.


    loop at IT_BL_PSTEP into data(LR_BL_PSTEP).
      LR_RTE_PSTEP = new #( IR_PSTEP = LR_BL_PSTEP->R_PSTEP ).
      LR_BL_PSTEP->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).
      append LR_RTE_PSTEP to RT_RTE_PSTEP.

      loop at LR_RTE_PSTEP->T_RTE_LDIM into data(LS_RTE_LDIM)
                                      where R_LTYPE->F_FLSTR eq ABAP_TRUE.
        append LS_RTE_LDIM to ET_RTE_LDIM.
      endloop.
      loop at LR_RTE_PSTEP->T_RTE_LVAL into data(LS_RTE_LVAL)
                                      where R_LTYPE->F_FLSTR eq ABAP_TRUE.
        append LS_RTE_LVAL to ET_RTE_LVAL.
      endloop.
    endloop.

  endmethod.
method HANDLE_DESERIALIZE.

  data:  LF_XML            type        STRING,
         LF_GUID_RTESEL    type        /VCXI/CKX_GUID,
         LF_XML_RTEFIL     type        STRING.
  data:  LS_XML_BL_PRTE    type        YS_XML_BL_PRTE,
         LS_PARAM          type        /VCXI/VKSR_S_PARAM,
         LS_EVQTY          type        ZVCXI_XCSR_S_EVQTY.
  data:  LT_XML_BL_PRTE    type        YT_XML_BL_PRTE,
         LT_BL_PRTE        type        ZVCXI_XCSR_TT_BL_PRTE.
  data:  LR_BL_PRTE        type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA,
         LR_CX_CKX         type ref to /VCXI/CX_CKX.

***------------------------------------------------------------------------------------------------
*** Ensure all Events were processed before unpack the XML
  ME->R_GATE->RAISE_EVENTS( ).

*** Get Parameter
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTEDA ).
  move LS_PARAM-STRNG to LF_XML.
  check LF_XML is not initial.

  call transformation ID
       source xml LF_XML
       result T_XML_BL_PRTE  = LT_XML_BL_PRTE
              F_GUID_RTESEL  = LF_GUID_RTESEL
              F_XML_RTEFIL   = LF_XML_RTEFIL
              S_EVQTY        = LS_EVQTY.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*{   INSERT         SX2K900503                                        1
*** Prefix to VCPP 03.04. - Delete User Routes
*** Remove current User Routes
    delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    if ME->R_RTESEL is bound and
       ( ME->R_RTESEL->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER ).
      clear ME->R_RTESEL.
    endif.

*** Check Hidden Routes
    ME->CHECK_RTEHID( IT_BL_PRTE = value #( ) ).

*}   INSERT
***------------------------------------------------------------------------------------------------
*** Deserialize Route used to fill Production
  if LF_XML_RTEFIL is not initial and
     ME->GET_EVQTY( ) eq LS_EVQTY.
    try.
        ME->R_RTEFIL = ZCL_VCXI_XCSR_BL_PRTE=>DESERIALIZE( IF_XML     = LF_XML_RTEFIL
                                                           IR_APPDATA = LR_APPDATA ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        clear ME->R_RTEFIL.
    endtry.
  else.
    clear ME->R_RTEFIL.
  endif.

***------------------------------------------------------------------------------------------------
*** Deserialize all Routes
  loop at LT_XML_BL_PRTE into LS_XML_BL_PRTE.
    try.
        LR_BL_PRTE = ZCL_VCXI_XCSR_BL_PRTE=>DESERIALIZE( IF_XML     = LS_XML_BL_PRTE-XML
                                                         IR_APPDATA = LR_APPDATA ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        clear LR_BL_PRTE.
    endtry.
    check LR_BL_PRTE is bound.

    append LR_BL_PRTE to LT_BL_PRTE.

    if LS_XML_BL_PRTE-GUID_BL_PRTE eq LF_GUID_RTESEL.
      move LR_BL_PRTE to ME->R_RTESEL.
    endif.
  endloop.

*** Update all Routes with new Production Steps
  ME->UPDATE_BL_PRTE_BY_RTE_DEF( IT_BL_PRTE = LT_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Rebuild Auto Routes
  ME->REFRESH_AUTO( ).

endmethod.
method HANDLE_DETERMINE_RTE_DEF.

  data: LT_PSTEP type /VCXI/CKX_TT_OBJECT,
        LT_PRTE  type /VCXI/CKX_TT_OBJECT.
  data: LR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_RTE_DEF>   type ZVCXI_XCSR_S_RTE_DEF.


***----------------------------------------------------------------------------
*** Reset Chosen to Autoamtic if Selecte Route existed (due to deserialization)
  if ME->R_RTESEL is bound and
     ME->GET_RTEOP( ) eq C_RTEOP_CHOSEN.
    ME->SET_RTEOP( IF_RTEOP = C_RTEOP_AUTO ).
  endif.

***----------------------------------------------------------------------------
*** Structure Changed -> New Definition
  free: ME->T_RTE_DEF,
        ME->T_RTEALT,
        ME->T_RTEINV,
        ME->T_RTEHID,
        ME->R_RTESEL.

***----------------------------------------------------------------------------
*** Get Production Routes by Production Steps
  loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
    append LR_BL_PSTEP->R_PSTEP to LT_PSTEP.
  endloop.
  LT_PRTE = /VCXI/CL_VSMC_PRTE=>GET_PRTE_BY_PSTEP( IT_PSTEP = LT_PSTEP ).

***----------------------------------------------------------------------------
  loop at LT_PRTE into LR_OBJECT.
    append initial line to ME->T_RTE_DEF assigning <S_RTE_DEF>.
    move LR_OBJECT ?to <S_RTE_DEF>-R_PRTE.

*** Build Routing Production Step
    <S_RTE_DEF>-T_RTE_PSTEP = ME->BUILD_RTE_PSTEP( IT_BL_PSTEP = ME->T_BL_PSTEP
                                                   IR_PRTE     = <S_RTE_DEF>-R_PRTE ).

    <S_RTE_DEF>-T_RTE_COMBI_PSTEP = ME->BUILD_RTE_COMBI_PSTEP( IR_PRTE      = <S_RTE_DEF>-R_PRTE
                                                               IT_RTE_PSTEP = <S_RTE_DEF>-T_RTE_PSTEP ).
  endloop.

*** Remove Definitions w/o Steps
  delete ME->T_RTE_DEF where T_RTE_PSTEP is initial.

*** Request Auto Redetermination
  move ABAP_TRUE to ME->F_REDETERMINATION_REQ.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_REBUILD_BL_PSTEP.
      ME->HANDLE_REBUILD_BL_PSTEP( IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    when C_IEVNT_I_DETERMINE_RTE_DEF.
      ME->HANDLE_DETERMINE_RTE_DEF( ).

    when C_IEVNT_I_UPDATE_RTE_DEF.
      ME->HANDLE_UPDATE_RTE_DEF( ).

    when C_IEVNT_I_REFRESH_RTESEL.
      ME->HANDLE_REFRESH_RTESEL( ).


    when C_IEVNT_I_INIT_EVQTY.
      ME->HANDLE_INIT_EVQTY( ).


    when C_IEVNT_I_REEVALUATE.
      ME->HANDLE_REEVALUATE( ).


    when C_IEVNT_I_DESERIALIZE.
      ME->HANDLE_DESERIALIZE( ).

    when C_IEVNT_I_SERIALIZE.
      ME->HANDLE_SERIALIZE( ).

  endcase.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  set handler ME->HANDLE_PROD_FILLED for ME activation ABAP_FALSE.

  free: ME->R_BL_RTESPV.

endmethod.
method HANDLE_INIT_EVQTY.

  data:  LF_UMREZ         type        UMREZ.
  data:  LS_QCALC         type        ZVCXI_XCSS_S_QCALC,
         LS_EVQTY         type        ZVCXI_XCSR_S_EVQTY.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = LS_QCALC
                                   EF_UMREZ      = LF_UMREZ ).
*** Use Base and multiply by Numerator
    LS_EVQTY-EVQTY     = LS_QCALC-QCALC * LF_UMREZ.
    LS_EVQTY-EVQTY_UOM = LS_QCALC-QCALC_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to LS_EVQTY-EVQTY.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to LS_EVQTY-EVQTY_UOM.
  endif.

***--------------------------------------------------------------------------------------
*** Set Evaluation Quantity
  ME->SET_EVQTY( IS_EVQTY = LS_EVQTY ).

endmethod.
method HANDLE_INIT_REFERENCES.
endmethod.
method HANDLE_PROD_FILLED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      check ME->R_GATE is bound.

      move IR_BL_PRTE to ME->R_RTEFIL.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_FILLED ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
  method HANDLE_REBUILD_BL_PSTEP.

    data: LF_SIMILAR      type          ABAP_BOOL.
    data: LT_BL_PSTEP_NEW type          ZVCXI_XCSR_TT_BL_PSTEP,
          LT_PSTEP_OLD    type          /VCXI/CKX_TT_OBJECT,
          LT_PSTEP_NEW    type          /VCXI/CKX_TT_OBJECT,
          LT_IPSEQ_OLD    type table of ZVCXI_XCSR_TT_RANGE_IPSEQ,
          LT_IPSEQ_NEW    type table of ZVCXI_XCSR_TT_RANGE_IPSEQ,
          LT_RTE_LDIM_OLD type          /VCXI/VSMR_TT_RTE_LDIM,
          LT_RTE_LVAL_OLD type          /VCXI/VSMR_TT_RTE_LVAL,
          LT_RTE_LDIM_NEW type          /VCXI/VSMR_TT_RTE_LDIM,
          LT_RTE_LVAL_NEW type          /VCXI/VSMR_TT_RTE_LVAL,
          LT_CSPLIT_NEW   type          ZVCXI_XCSR_TT_CSPLIT.
    data: LR_BL_PSTEP     type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_PSTEP_OLD type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_PSTEP_NEW type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_MFMI_NEW     type ref to   DATA,
          LR_MFSI_NEW     type ref to   DATA.
    field-symbols: <T_MFMI_OLD> type standard table,
                   <T_MFMI_NEW> type standard table,
                   <T_MFSI_OLD> type standard table,
                   <T_MFSI_NEW> type standard table.

***------------------------------------------------------------------
*** Get Production Steps of old BL PSteps
    loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
      append LR_BL_PSTEP->R_PSTEP to LT_PSTEP_OLD.
      append LR_BL_PSTEP->I_IPSEQ to LT_IPSEQ_OLD.
    endloop.
    ME->GET_STRICT_LIMITS( exporting IT_BL_PSTEP = ME->T_BL_PSTEP
                           importing ET_RTE_LDIM = LT_RTE_LDIM_OLD
                                     ET_RTE_LVAL = LT_RTE_LVAL_OLD ).

*** Get new BL PSteps
    LT_BL_PSTEP_NEW = ME->GET_BL_PSTEP( ).

*** Get Production Steps of new BL PSteps
    loop at LT_BL_PSTEP_NEW into LR_BL_PSTEP.
      append LR_BL_PSTEP->R_PSTEP to LT_PSTEP_NEW.
      append LR_BL_PSTEP->I_IPSEQ to LT_IPSEQ_NEW.
    endloop.
    ME->GET_STRICT_LIMITS( exporting IT_BL_PSTEP = LT_BL_PSTEP_NEW
                           importing ET_RTE_LDIM = LT_RTE_LDIM_NEW
                                     ET_RTE_LVAL = LT_RTE_LVAL_NEW ).

*** Be positiv
    move ABAP_TRUE to LF_SIMILAR.

***------------------------------------------------------------------
*** Compare Strict Limits
    if LT_RTE_LDIM_OLD ne LT_RTE_LDIM_NEW or
       LT_RTE_LVAL_OLD ne LT_RTE_LVAL_NEW.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***------------------------------------------------------------------
*** Get Material Flow Material In
    LR_MFMI_NEW = ME->GET_MFMI( ).

    if ( ME->R_MFMI is     bound and LR_MFMI_NEW is     bound ) or
       ( ME->R_MFMI is not bound and LR_MFMI_NEW is not bound ).
      if ME->R_MFMI is bound and LR_MFMI_NEW is bound.
        assign ME->R_MFMI->*  to <T_MFMI_OLD>.
        assign LR_MFMI_NEW->* to <T_MFMI_NEW>.
        if <T_MFMI_OLD> ne <T_MFMI_NEW>.
          move ABAP_FALSE to LF_SIMILAR.
        endif.
      endif.
    else.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***------------------------------------------------------------------
*** Get Material Flow SFG In
    LR_MFSI_NEW = ME->GET_MFSI( ).

    if ( ME->R_MFSI is     bound and LR_MFSI_NEW is     bound ) or
       ( ME->R_MFSI is not bound and LR_MFSI_NEW is not bound ).
      if ME->R_MFSI is bound and LR_MFSI_NEW is bound.
        assign ME->R_MFSI->*  to <T_MFSI_OLD>.
        assign LR_MFSI_NEW->* to <T_MFSI_NEW>.
        if <T_MFSI_OLD> ne <T_MFSI_NEW>.
          move ABAP_FALSE to LF_SIMILAR.
        endif.
      endif.
    else.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***------------------------------------------------------------------
*** Compare Cost Split if similar
    LT_CSPLIT_NEW = ME->GET_CSPLIT( ).
    if ME->T_CSPLIT ne LT_CSPLIT_NEW.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***------------------------------------------------------------------
*** Compare Production Steps if similar
    if LF_SIMILAR eq ABAP_TRUE.
      if LT_PSTEP_OLD eq LT_PSTEP_NEW and
         LT_IPSEQ_OLD eq LT_IPSEQ_NEW.
        loop at ME->T_BL_PSTEP into LR_BL_PSTEP_OLD.
          read table LT_BL_PSTEP_NEW into LR_BL_PSTEP_NEW index SY-TABIX.

          if LR_BL_PSTEP_OLD->COMPARE( IR_BL_PSTEP = LR_BL_PSTEP_NEW ) ne ABAP_TRUE.
            move ABAP_FALSE to LF_SIMILAR.
            exit.
          endif.
        endloop.
      else.
        move ABAP_FALSE to LF_SIMILAR.
      endif.
    endif.

    check LF_SIMILAR ne ABAP_TRUE.

***------------------------------------------------------------------
*** Use new BL PSteps
    move LR_MFMI_NEW     to ME->R_MFMI.
    move LR_MFSI_NEW     to ME->R_MFSI.
    move LT_CSPLIT_NEW   to ME->T_CSPLIT.
    move LT_BL_PSTEP_NEW to ME->T_BL_PSTEP.

    if LT_PSTEP_OLD    ne LT_PSTEP_NEW    or
       LT_IPSEQ_OLD    ne LT_IPSEQ_NEW    or
       LT_RTE_LDIM_OLD ne LT_RTE_LDIM_NEW or
       LT_RTE_LVAL_OLD ne LT_RTE_LVAL_NEW.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STRUC_CHANGED ).
    else.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BL_PSTEP_CHANGED ).
    endif.

  endmethod.
method HANDLE_REEVALUATE.

  data:  LT_BL_PRTE type ZVCXI_XCSR_TT_BL_PRTE.

*** Evaluate all Routes
  append lines of ME->T_RTEALT to LT_BL_PRTE.
  append lines of ME->T_RTEINV to LT_BL_PRTE.

*** Validate Routes
  ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Evaluate Routes
  ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

endmethod.
method HANDLE_REFRESH_RTESEL.

  data:  LT_BL_PRTE   type        ZVCXI_XCSR_TT_BL_PRTE.
  data:  LR_RTESEL    type ref to ZCL_VCXI_XCSR_BL_PRTE.

  move ME->R_RTESEL to LR_RTESEL.

***------------------------------------------------------------------
  if ME->GET_RTEOP( ) eq C_RTEOP_AUTO.
*** Find best Route
    clear ME->R_RTESEL.
    read table ME->T_RTEALT into ME->R_RTESEL index 1.

***------------------------------------------------------------------
  else.
*** Set Selected Route to receive Sourec "User"
    if ME->R_RTESEL is bound and
       ME->R_RTESEL->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
      move ME->R_RTESEL->COPY( )               to ME->R_RTESEL.
      move ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER to ME->R_RTESEL->R_RTE_PRTE->F_RSRCE.

***   Initialize Relevancy Points
      ME->R_RTESEL->INIT_RELPO( ).

***   Check Production Route
      ME->R_RTESEL->CHECK( ).

***   Evaluate
      append ME->R_RTESEL to LT_BL_PRTE.
      ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).
    endif.
  endif.

***------------------------------------------------------------------
  if ME->R_RTESEL ne LR_RTESEL.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RTESEL_CHANGED ).
  endif.

endmethod.
method HANDLE_SERIALIZE.

  data:          LF_GUID22         type        GUID_22,
                 LF_GUID_RTESEL    type        /VCXI/CKX_GUID,
                 LF_XML_RTEFIL     type        STRING,
                 LF_XML            type        STRING.
  data:          LS_PARAM          type        /VCXI/VKSR_S_PARAM,
                 LS_EVQTY          type        ZVCXI_XCSR_S_EVQTY.
  data:          LT_BL_PRTE        type        ZVCXI_XCSR_TT_BL_PRTE,
                 LT_XML_BL_PRTE    type        YT_XML_BL_PRTE.
  data:          LR_BL_PRTE        type ref to ZCL_VCXI_XCSR_BL_PRTE.
  field-symbols: <S_XML_BL_PRTE>   type        YS_XML_BL_PRTE.

***------------------------------------------------------------------------------------------------
*** Serialize all Routes
  append lines of ME->T_RTEALT to LT_BL_PRTE.
  append lines of ME->T_RTEINV to LT_BL_PRTE.

*** Don't serialize Machine Customizing
  delete LT_BL_PRTE where TABLE_LINE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.

*** Serialize all Routes and assign a GUID
  loop at LT_BL_PRTE into LR_BL_PRTE.
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = LF_GUID22.

    append initial line to LT_XML_BL_PRTE assigning <S_XML_BL_PRTE>.
    move LF_GUID22                to <S_XML_BL_PRTE>-GUID_BL_PRTE.
    move LR_BL_PRTE->SERIALIZE( ) to <S_XML_BL_PRTE>-XML.

    if LR_BL_PRTE eq ME->R_RTESEL.
      move <S_XML_BL_PRTE>-GUID_BL_PRTE to LF_GUID_RTESEL.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Serialize Route used to fill the Production
  if ME->R_RTEFIL is bound.
    move ME->R_RTEFIL->SERIALIZE( ) to LF_XML_RTEFIL.
  else.
    clear LF_XML_RTEFIL.
  endif.

  LS_EVQTY = ME->GET_EVQTY( ).

***------------------------------------------------------------------------------------------------
*** Create XML
  call transformation ID
       source T_XML_BL_PRTE  = LT_XML_BL_PRTE
              F_GUID_RTESEL  = LF_GUID_RTESEL
              F_XML_RTEFIL   = LF_XML_RTEFIL
              S_EVQTY        = LS_EVQTY
       result xml LF_XML.

*** Set Parameter
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTEDA ).
  move LF_XML                           to LS_PARAM-STRNG.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.
  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method HANDLE_UPDATE_RTE_DEF.

  data:          LF_FILTER_CHANGED type        ABAP_BOOL.
  data:          LT_RTE_DEF_OLD    type        ZVCXI_XCSR_TT_RTE_DEF,
                 LT_PSTEP          type        /VCXI/CKX_TT_OBJECT,
                 LT_PRTE           type        /VCXI/CKX_TT_OBJECT.
  data:          LS_RTE_DEF_OLD    type        ZVCXI_XCSR_S_RTE_DEF.
  data:          LR_BL_PSTEP       type ref to ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_RTE_PSTEP_OLD  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_RTE_DEF>       type        ZVCXI_XCSR_S_RTE_DEF.

***----------------------------------------------------------------------------
*** Buffer Old Production Route Definition
  move ME->T_RTE_DEF to LT_RTE_DEF_OLD.
  free: ME->T_RTE_DEF.

***----------------------------------------------------------------------------
*** Get Production Routes by Production Steps
  loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
    append LR_BL_PSTEP->R_PSTEP to LT_PSTEP.
  endloop.
  LT_PRTE = /VCXI/CL_VSMC_PRTE=>GET_PRTE_BY_PSTEP( IT_PSTEP = LT_PSTEP ).

*** Build new Production Route Definition
  loop at LT_PRTE into LR_OBJECT.
    append initial line to ME->T_RTE_DEF assigning <S_RTE_DEF>.
    move LR_OBJECT ?to <S_RTE_DEF>-R_PRTE.

*** Build Routing Production Step
    <S_RTE_DEF>-T_RTE_PSTEP = ME->BUILD_RTE_PSTEP( IT_BL_PSTEP = ME->T_BL_PSTEP
                                                   IR_PRTE     = <S_RTE_DEF>-R_PRTE ).

    <S_RTE_DEF>-T_RTE_COMBI_PSTEP = ME->BUILD_RTE_COMBI_PSTEP( IR_PRTE      = <S_RTE_DEF>-R_PRTE
                                                               IT_RTE_PSTEP = <S_RTE_DEF>-T_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Compare Filter of RTE Production Steps
    check LF_FILTER_CHANGED eq ABAP_FALSE.
    read table LT_RTE_DEF_OLD into LS_RTE_DEF_OLD with key R_PRTE = <S_RTE_DEF>-R_PRTE.
    check SY-SUBRC = 0.

    loop at <S_RTE_DEF>-T_RTE_PSTEP into LR_RTE_PSTEP.
      read table LS_RTE_DEF_OLD-T_RTE_PSTEP into LR_RTE_PSTEP_OLD index SY-TABIX.
      check SY-SUBRC eq 0.

***   Check Plant and workcenter
      if LR_RTE_PSTEP->I_WERKS ne LR_RTE_PSTEP_OLD->I_WERKS or
         LR_RTE_PSTEP->T_ARBPL ne LR_RTE_PSTEP_OLD->T_ARBPL.
        move ABAP_TRUE to LF_FILTER_CHANGED.
        exit.
      endif.
    endloop.
  endloop.

*** Remove Definitions w/o Steps
  delete ME->T_RTE_DEF where T_RTE_PSTEP is initial.

***----------------------------------------------------------------------------
*** Update all Routes
  ME->UPDATE_BL_PRTE_BY_RTE_DEF( IT_RTE_DEF_OLD = LT_RTE_DEF_OLD ).

***----------------------------------------------------------------------------
*** Filter changed -> Request Auto Redetermination
  check LF_FILTER_CHANGED eq ABAP_TRUE.
  if ME->GET_RTERD( ) is not initial.
    move ABAP_TRUE to ME->F_REDETERMINATION_REQ.
  endif.

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.
  data:  LT_ATTRI       type /VCXI/VKS_TT_ATTRI.

*** -------------------------------------------------------------------------------------------------
*** Init Vendor Number Required
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_LIFNR_REQ.
  if SY-SUBRC = 0.
    ME->F_LIFNR_REQ = LS_ATTRI-ATTVA.
  endif.

endmethod.
method INIT_MFMI_MATNR.

*** Get Material Flow In Material
  ME->F_MFMI_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE  = ME->R_GATE ).


endmethod.
method INIT_PARID_EVQTY.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_EVQTY_A or
                          PARID eq C_PARID_EVQTY_L or
                          PARID eq C_PARID_EVQTY_P or
                          PARID eq C_PARID_EVQTY_W ).
    move LS_PARAM-PARID to ME->F_PARID_EVQTY.
    exit.
  endloop.

endmethod.
method IS_BL_PRTE_CHANGEABLE.

  if ME->R_GATE->IS_LOCKED( ) eq ABAP_FALSE.
    move ABAP_FALSE to RF_CHANGEABLE.
  else.
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                  IF_IFUNC = C_IFUNC_BL_PRTE_CHANGEABLE ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_CHANGEABLE.
    else.
      move ABAP_FALSE to RF_CHANGEABLE.
    endif.
  endif.

endmethod.
method IS_FILL_PROD_ALLOWED.

  data:  LT_PRVDR type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Refresh Auto and get Selected Route
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
  read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Be positive
    move ABAP_TRUE to EF_ALLOWED.

*** Check Status of all Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR into LR_PRVDR.
***   Only check PR Class Status if Provider is in line
      if LR_PRVDR->IS_IN_LINE( IR_GATE = ME->R_GATE ) eq ABAP_TRUE.
        if LR_PRVDR->R_CLSPR is bound and
           LR_PRVDR->R_CLSPR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      else.
        if LR_PRVDR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      endif.
    endloop.
  endif.

endmethod.
method IS_IN_LINE_RTESPV.

  data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE.

  loop at IT_PRVDR_RTESPV into LR_PRVDR.
    check IR_PRVDR->IS_IN_LINE( IR_GATE = LR_PRVDR ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_RETURN.
    exit.
  endloop.

endmethod.
method MERGE_RERUNS.

  data:  LF_INDEX_START     type        I,
         LF_INDEX_END       type        I,
         LF_LAST_PSTEP      type        I.
  data:  LT_RTE_ARBPL       type        /VCXI/VSMR_TT_RTE_ARBPL.
  data:  LR_RTE_ARBPL_CURR  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_ARBPL_NEXT  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP_LAST  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_RTE_PSTEP_FIRST type ref to /VCXI/CL_VSMR_RTE_PSTEP.

  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL_CURR.
    move SY-TABIX to LF_INDEX_START.
    move SY-TABIX to LF_INDEX_END.

    check LR_RTE_ARBPL_CURR->T_RTE_PSTEP is not initial.

    free LT_RTE_ARBPL.
    append LR_RTE_ARBPL_CURR to LT_RTE_ARBPL.

    move LR_RTE_ARBPL_CURR to LR_RTE_ARBPL_NEXT.
    do.
***   Get last Production Step
      move lines( LR_RTE_ARBPL_NEXT->T_RTE_PSTEP ) to LF_LAST_PSTEP.
      read table LR_RTE_ARBPL_NEXT->T_RTE_PSTEP into  LR_RTE_PSTEP_LAST
                                                index LF_LAST_PSTEP.

***   Read next Work Center
      add 1 to LF_INDEX_END.
      read table IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into  LR_RTE_ARBPL_NEXT
                                                     index LF_INDEX_END.
      if SY-SUBRC ne 0.
        exit.
      endif.

***   Get first Production Step
      read table LR_RTE_ARBPL_NEXT->T_RTE_PSTEP into  LR_RTE_PSTEP_FIRST
                                                index 1.
      if SY-SUBRC ne 0.
        exit.
      endif.

***   Check for Match
      if ME->CHECK_PSEQ_OF_RTE_PSEQ_MATCH( IR_RTE_PSEQ_1 = LR_RTE_PSTEP_LAST->R_RTE_PSEQ
                                           IR_RTE_PSEQ_2 = LR_RTE_PSTEP_FIRST->R_RTE_PSEQ ) eq ABAP_TRUE.
        append LR_RTE_ARBPL_NEXT to LT_RTE_ARBPL.
      else.
        exit.
      endif.
    enddo.

    if lines( LT_RTE_ARBPL ) gt 1.
      LR_RTE_ARBPL_CURR = ME->MERGE_RTE_ARBPL( IT_RTE_ARBPL = LT_RTE_ARBPL ).

      subtract 1 from LF_INDEX_END.
      delete IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL from LF_INDEX_START to LF_INDEX_END.

      insert LR_RTE_ARBPL_CURR into  IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL
                               index LF_INDEX_START.
    endif.
  endloop.

endmethod.
method MERGE_RTE_ARBPL.

  data:  LF_INDEX           type        I.
  data:  LR_RTE_ARBPL       type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP_CURR  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_RTE_PSTEP_NEXT  type ref to /VCXI/CL_VSMR_RTE_PSTEP.

***------------------------------------------------------------------------------------------------
*** Check merge will work

***------------------------------------------------------------------------------------------------
*** Collect Production Steps in new Work Center
  loop at IT_RTE_ARBPL into LR_RTE_ARBPL.

    if RR_RTE_ARBPL is not bound.
***   Create new Work Center
      create object RR_RTE_ARBPL
        exporting
          IR_ARBPL = LR_RTE_ARBPL->R_ARBPL
          IF_LCVAL = LR_RTE_ARBPL->F_LCVAL.
    endif.

*** Collect Production Steps
    append lines of LR_RTE_ARBPL->T_RTE_PSTEP to RR_RTE_ARBPL->T_RTE_PSTEP.

  endloop.

***------------------------------------------------------------------------------------------------
*** Remove Duplicate Production Sequences
  move 1 to LF_INDEX.
  do.
    read table RR_RTE_ARBPL->T_RTE_PSTEP into  LR_RTE_PSTEP_CURR
                                         index LF_INDEX.
    if SY-SUBRC ne 0.
      exit.
    endif.

*** Find Next
    add 1 to LF_INDEX.
    do.
      read table RR_RTE_ARBPL->T_RTE_PSTEP into  LR_RTE_PSTEP_NEXT
                                           index LF_INDEX.
      if SY-SUBRC ne 0.
        exit.
      endif.

***   Compare
      if ME->CHECK_PSEQ_OF_RTE_PSEQ_MATCH( IR_RTE_PSEQ_1 = LR_RTE_PSTEP_CURR->R_RTE_PSEQ
                                           IR_RTE_PSEQ_2 = LR_RTE_PSTEP_NEXT->R_RTE_PSEQ ) eq ABAP_TRUE.
***     Remove if they are the same
        delete RR_RTE_ARBPL->T_RTE_PSTEP index LF_INDEX.
      else.
        exit.
      endif.
    enddo.
  enddo.

endmethod.
method REDETERMINE_MACHCUST.

  data: LS_RTE_DEF  type        ZVCXI_XCSR_S_RTE_DEF.
  data: LT_RTE_PRTE type        /VCXI/VSMR_TT_RTE_PRTE,
        LT_BL_PRTE  type        ZVCXI_XCSR_TT_BL_PRTE.
  data: LR_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE,
        LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE.

***----------------------------------------------------------------------------
*** Remove all Machien Customizing Routes
  delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
  delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
  delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.

***----------------------------------------------------------------------------
*** Get Production Routes by Production Steps
  loop at ME->T_RTE_DEF into LS_RTE_DEF.
*** Get Production Routes
    LT_RTE_PRTE = /VCXI/CL_VSMR_RTE_MGR=>GET_RTE_PRTE( IT_RTE_PSTEP       = LS_RTE_DEF-T_RTE_PSTEP
                                                       IT_RTE_COMBI_PSTEP = LS_RTE_DEF-T_RTE_COMBI_PSTEP
                                                       IF_DATE            = ME->F_DATE
                                                       IF_KEEP_CHECKING   = ABAP_TRUE ).
*** Create BL Production Routes
    loop at LT_RTE_PRTE into LR_RTE_PRTE.
      LR_BL_PRTE = ME->CREATE_BL_PRTE( IR_RTE_PRTE = LR_RTE_PRTE ).

***   Copy to clear shared references
      LR_BL_PRTE = LR_BL_PRTE->COPY( ).
      move /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST to LR_BL_PRTE->R_RTE_PRTE->F_RSRCE.

***   Set Technical Checks to On
      LR_BL_PRTE->SET_TECHC( IF_TECHC = ABAP_TRUE ).

      append LR_BL_PRTE to LT_BL_PRTE.
    endloop.
  endloop.

*** Validate Routes
  ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Run Evaluation if within Relevance Scope
  ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

endmethod.
method REDETERMINE_PREDEF.

  data:  LF_GUID       type        /VCXI/CKX_GUID.
  data:  LS_RTE_DEF    type        ZVCXI_XCSR_S_RTE_DEF.
  data:  LT_RTE_PRTE   type        /VCXI/VSMR_TT_RTE_PRTE,
         LT_BL_PRTE    type        ZVCXI_XCSR_TT_BL_PRTE.
  data:  LR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_RTE_PRTE   type ref to /VCXI/CL_VSMR_RTE_PRTE,
         LR_BL_PRTE    type ref to ZCL_VCXI_XCSR_BL_PRTE.

***----------------------------------------------------------------------------
*** Remove all Machien Customizing Routes
  delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.
  delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.
  delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.

***----------------------------------------------------------------------------
*** Get Production Routes by Production Steps
  loop at ME->T_RTE_DEF into LS_RTE_DEF.
    move LS_RTE_DEF-R_PRTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.
    LR_PREDEF_RTE ?= ZCL_VCXI_XCSRC_PREDEF_RTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

*** Get Production Routes
    LT_RTE_PRTE = LR_PREDEF_RTE->GET_RTE_PRTE( IT_RTE_PSTEP       = LS_RTE_DEF-T_RTE_PSTEP
                                               IT_RTE_COMBI_PSTEP = LS_RTE_DEF-T_RTE_COMBI_PSTEP
                                               IF_DATE            = ME->F_DATE
                                               IF_LCVAL           = ME->GET_LCVAL( )
                                               IF_KEEP_CHECKING   = ABAP_TRUE ).
*** Create BL Production Routes
    loop at LT_RTE_PRTE into LR_RTE_PRTE.
      LR_BL_PRTE = ME->CREATE_BL_PRTE( IR_RTE_PRTE = LR_RTE_PRTE ).

***   Copy to clear shared references
      LR_BL_PRTE = LR_BL_PRTE->COPY( ).
      move ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF to LR_BL_PRTE->R_RTE_PRTE->F_RSRCE.

***   Set Technical Checks to On
      LR_BL_PRTE->SET_TECHC( IF_TECHC = ABAP_TRUE ).

      append LR_BL_PRTE to LT_BL_PRTE.
    endloop.

*** Validate Routes
    ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Run Evaluation if within Relevance Scope
    ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

  endloop.

endmethod.
method REFRESH_AUTO.

***----------------------------------------------------------------------------
*** Checks prior to Refresh
  if IF_FORCE ne ABAP_TRUE.
    check ME->F_REDETERMINATION_REQ eq ABAP_TRUE.
  endif.
  move ABAP_FALSE to ME->F_REDETERMINATION_REQ.

***----------------------------------------------------------------------------
*** Determine based on Routing Redetermination Setting
  case ME->GET_RTERD( ).
    when C_RTERD_MACHCUST.
      ME->REDETERMINE_MACHCUST( ).

    when C_RTERD_PREDEF.
      ME->REDETERMINE_PREDEF( ).

  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BL_PRTE_CHANGED ).

endmethod.                    "REFRESH_AUTO
method REFRESH_RANK.

  types: begin of YS_EVALU,
           R_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE,
           S_TIME     type        ZVCXI_XCS_S_CALCV,
           S_MQTYI    type        ZVCXI_XCSP_S_MQTYI,
           RELPO      type        ZVCXI_XCSR_RELPO,
         end   of YS_EVALU,
         YT_EVALU type standard table of YS_EVALU with default key.

  data:          LF_RANKV        type        /VCXI/VSMR_RANKV.
  data:          LS_TIME         type        ZVCXI_XCS_S_CALCV,
                 LS_MQTYI        type        ZVCXI_XCSP_S_MQTYI.
  data:          LT_EVALU        type        YT_EVALU.
  data:          LR_BL_PRTE      type ref to ZCL_VCXI_XCSR_BL_PRTE.
  field-symbols: <S_EVALU>       type        YS_EVALU.


***------------------------------------------------------------------------------------------------
*** Collect Ranking Evaluation Information
  loop at ME->T_RTEALT into LR_BL_PRTE.
    append initial line to LT_EVALU assigning <S_EVALU>.
    move LR_BL_PRTE  to <S_EVALU>-R_BL_PRTE.

*** Set Base Unit for Time
    move 'MIN' to <S_EVALU>-S_TIME-CALCV_UOM.

*** Calculate total Setup Time
    if LR_BL_PRTE->S_MSSTI is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                          IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                          IF_CALCV_2     = LR_BL_PRTE->S_MSSTI-MSSTI
                                                          IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSSTI-MSSTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                          EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
    endif.

*** Calculate total Run Time
    if LR_BL_PRTE->S_MSRTI is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                          IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                          IF_CALCV_2     = LR_BL_PRTE->S_MSRTI-MSRTI
                                                          IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSRTI-MSRTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                          EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
    endif.

*** Calculate total Teardown Time
    if LR_BL_PRTE->S_MSTTI is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                          IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                          IF_CALCV_2     = LR_BL_PRTE->S_MSTTI-MSTTI
                                                          IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSTTI-MSTTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                          EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
    endif.

*** Operation Quantity in on First Machine
    move LR_BL_PRTE->S_MQTYI to <S_EVALU>-S_MQTYI.

*** Get Relevancy Points
    move LR_BL_PRTE->GET_RELPO( ) to <S_EVALU>-RELPO.

  endloop.


***------------------------------------------------------------------------------------------------
*** Sort Alternative Routes by Time, Waste and Relevancy Points
  free: ME->T_RTEALT.
  sort LT_EVALU by S_TIME  ascending
                   S_MQTYI ascending
                   RELPO   ascending.
  loop at LT_EVALU assigning <S_EVALU>.
    append <S_EVALU>-R_BL_PRTE to ME->T_RTEALT.
  endloop.

*** Assign Ranking by Time
  free: LF_RANKV.
  sort LT_EVALU by S_TIME ascending.
  loop at LT_EVALU assigning <S_EVALU>.
    if <S_EVALU>-S_TIME ne LS_TIME.
      add 1 to LF_RANKV.
      move <S_EVALU>-S_TIME to LS_TIME.
    endif.
    <S_EVALU>-R_BL_PRTE->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_TIME
                                                   IF_RANKV = LF_RANKV ).
  endloop.

*** Assign Ranking by Time
  free: LF_RANKV.
  sort LT_EVALU by S_MQTYI ascending.
  loop at LT_EVALU assigning <S_EVALU>.
    if <S_EVALU>-S_MQTYI ne LS_MQTYI.
      add 1 to LF_RANKV.
      move <S_EVALU>-S_MQTYI to LS_MQTYI.
    endif.
    <S_EVALU>-R_BL_PRTE->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_MQTYI
                                                   IF_RANKV = LF_RANKV ).
  endloop.

endmethod.
method REFRESH_RELCO.

  types: begin of YS_EVALU,
           R_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE,
           RELPO      type        ZVCXI_XCSR_RELPO,
           RELCO      type        ZVCXI_XCSR_RELCO,
         end   of YS_EVALU,
         YT_EVALU type standard table of YS_EVALU with default key.

  data:          LF_TABIX        type        I,
                 LF_RELPO_LAST   type        ZVCXI_XCSR_RELPO.
  data:          LS_RELGP        type        ZVCXI_XCSR_S_RELGP.
  data:          LT_RTEALT       type        ZVCXI_XCSR_TT_BL_PRTE,
                 LT_EVALU        type        YT_EVALU,
                 LT_RELGP        type        ZVCXI_XCSR_TT_RELGP.
  data:          LR_APPDATA      type ref to /VCXI/CL_VKSR_APPDATA,
                 LR_BL_PRTE      type ref to ZCL_VCXI_XCSR_BL_PRTE.
  field-symbols: <S_EVALU>       type        YS_EVALU.

*** Get Application Data
  LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).

***--------------------------------------------------------------------------------------
*** Set Relevancy Code for Hidden Routes
  loop at ME->T_RTEHID into LR_BL_PRTE.
    LR_BL_PRTE->SET_RELCO( IF_RELCO = SPACE ).
  endloop.

***--------------------------------------------------------------------------------------
*** Keep all current Alternatives
  move ME->T_RTEALT to LT_RTEALT.

*** Add new alternative Routes
  loop at CT_BL_PRTE into LR_BL_PRTE.
    read table ME->T_RTEHID with key TABLE_LINE = LR_BL_PRTE
                            transporting no fields.
    check SY-SUBRC ne 0.
    if LR_BL_PRTE->R_RTE_PRTE->F_RSTAT eq /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID  and
       LR_BL_PRTE->F_DECIS             ne ZCL_VCXI_XCSR_BL_PRTE=>C_DECIS_DISCARD.
      collect LR_BL_PRTE into LT_RTEALT.
    else.
      LR_BL_PRTE->SET_RELCO( IF_RELCO = SPACE ).
    endif.
  endloop.

  check LT_RTEALT is not initial.

***--------------------------------------------------------------------------------------
*** Build List for Sort
  loop at LT_RTEALT into LR_BL_PRTE.
    append initial line to LT_EVALU assigning <S_EVALU>.
    move LR_BL_PRTE               to <S_EVALU>-R_BL_PRTE.
    move LR_BL_PRTE->GET_RELPO( ) to <S_EVALU>-RELPO.
    move LR_BL_PRTE->GET_RELCO( ) to <S_EVALU>-RELCO.
  endloop.

*** Sort
  sort LT_EVALU by RELPO.

***--------------------------------------------------------------------------------------
*** Get Relevancy Group
  LT_RELGP = ZCL_VCXI_XCSR_CUST_RELCO=>GET_RELGP( IF_WERKS = LR_APPDATA->F_WERKS ).

*** Assign Relevance Code
  loop at LT_RELGP into LS_RELGP.
    clear LF_TABIX.
    loop at LT_EVALU assigning <S_EVALU>.
      add 1 to LF_TABIX.
      if LF_TABIX gt LS_RELGP-RTECT.
        if LF_RELPO_LAST ne <S_EVALU>-RELPO.
          exit.
        endif.
      endif.

      if LS_RELGP-RELCO ne <S_EVALU>-RELCO.
***     Set Relevance Code
        <S_EVALU>-R_BL_PRTE->SET_RELCO( IF_RELCO = LS_RELGP-RELCO ).
        collect <S_EVALU>-R_BL_PRTE into CT_BL_PRTE.
      endif.

***   Buffer last Route Score and remove from list
      move <S_EVALU>-RELPO to LF_RELPO_LAST.
      delete LT_EVALU.
    endloop.
  endloop.

*** Set Relevance Code for the "undefined" Group
  if LT_EVALU is not initial.
    add 1 to LS_RELGP-RELCO.
    loop at LT_EVALU assigning <S_EVALU> where RELCO ne LS_RELGP-RELCO.
***   Set Relevance Code
      <S_EVALU>-R_BL_PRTE->SET_RELCO( IF_RELCO = LS_RELGP-RELCO ).
      collect <S_EVALU>-R_BL_PRTE into CT_BL_PRTE.
    endloop.
  endif.

endmethod.
method SET_EVQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = F_PARID_EVQTY ).

  move IS_EVQTY-EVQTY                   to LS_PARAM-ATFLV.
  move IS_EVQTY-EVQTY_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Request new Fill of Production
    clear ME->R_RTEFIL.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EVQTY_CHANGED ).
  endif.

endmethod.
method SET_RELCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELCO ).

  move IF_RELCO  to LS_PARAM-ATFLV.
  move IF_SETBY  to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELCO_CHANGED ).
  endif.

endmethod.
method SET_RTEOP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTEOP ).

  move IF_RTEOP  to LS_PARAM-ATWRT.
  move IF_SETBY  to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RTEOP_CHANGED ).
  endif.

endmethod.
method SET_RTERD.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RTERD ).

  move IF_RTERD  to LS_PARAM-ATWRT.
  move IF_SETBY  to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
***----------------------------------------------------------------------------
*** Remove all Machien Customizing Routes
    delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
    delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
    delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.

*** Remove all Predefined Routes
    delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.
    delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.
    delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSRC_PREDEF_RTE=>C_RSRCE_PREDEF.

*** Request Auto Redetermination
    if IF_RTERD is not initial.
      move ABAP_TRUE to ME->F_REDETERMINATION_REQ.
    endif.
  endif.

endmethod.
method SET_RTESEL.

  data:  LF_CHANGED   type        ABAP_BOOL.
  data:  LT_BL_PRTE   type        ZVCXI_XCSR_TT_BL_PRTE.

*** Is BL Production Route changeable
  check ME->IS_BL_PRTE_CHANGEABLE( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
  if IR_BL_PRTE is bound and
     IR_BL_PRTE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    move IR_BL_PRTE->COPY( )                 to ME->R_RTESEL.
    move ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER to ME->R_RTESEL->R_RTE_PRTE->F_RSRCE.

*** Initialize Relevancy Points
    ME->R_RTESEL->INIT_RELPO( ).

*** Check Production Route
    ME->R_RTESEL->CHECK( ).

*** Evaluate
    append ME->R_RTESEL to LT_BL_PRTE.
    ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

*** Mark change
    move ABAP_TRUE  to LF_CHANGED.

***----------------------------------------------------------------------------
  else.
    if IR_BL_PRTE ne ME->R_RTESEL.
      move IR_BL_PRTE to ME->R_RTESEL.
      move ABAP_TRUE  to LF_CHANGED.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Set Routing Option to chosen
  ME->SET_RTEOP( IF_RTEOP = C_RTEOP_CHOSEN
                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RTESEL_CHANGED ).
  endif.

endmethod.
method SPLIT_RTE_ARBPL.

  data: LT_RTE_PSTEP type        /VCXI/VSMR_TT_RTE_PSTEP.
  data: LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSEQ  type ref to /VCXI/CL_VSMR_RTE_PSEQ,
        LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP.

  move IR_RTE_ARBPL->T_RTE_PSTEP to LT_RTE_PSTEP.

  if IT_BL_PSTEP is not initial.
    loop at IT_BL_PSTEP into LR_BL_PSTEP.
***   Create new Work Center
      create object LR_RTE_ARBPL
        exporting
          IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
          IF_LCVAL = IR_RTE_ARBPL->F_LCVAL.
      append LR_RTE_ARBPL to RT_RTE_ARBPL.

***----------------------------------------------------------------------------
      at first.
***     Append Production Steps prior to the Split
        loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
          delete LT_RTE_PSTEP.
          if LR_RTE_PSTEP->R_BLOBJ ne IR_RTE_PSTEP->R_BLOBJ.
            append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
          else.
            exit.
          endif.
        endloop.
      endat.

***----------------------------------------------------------------------------
***   Create new Routing Production Step
      if IR_RTE_PSTEP->R_RTE_PSEQ is bound.
        create object LR_RTE_PSEQ
          exporting
            IR_PSEQ     = IR_RTE_PSTEP->R_RTE_PSEQ->R_PSEQ
            IR_RTE_PSEQ = IR_RTE_PSTEP->R_RTE_PSEQ->R_RTE_PSEQ.
        move LR_RTE_PSEQ->R_RTE_PSTEP to LR_RTE_PSTEP.
      else.
        create object LR_RTE_PSTEP
          exporting
            IR_PSTEP = IR_RTE_PSTEP->R_PSTEP.
      endif.
      append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
      move LR_BL_PSTEP           to LR_RTE_PSTEP->R_BLOBJ.
      move IR_RTE_PSTEP->F_LCVAL to LR_RTE_PSTEP->F_LCVAL.

***----------------------------------------------------------------------------
      at last.
***     Append Production Steps after to the Split
        loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
          append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
        endloop.
      endat.
    endloop.


***----------------------------------------------------------------------------
*** Clean Split (no new Steps)
  else.
*** Create new Work Center (prior)
    create object LR_RTE_ARBPL
      exporting
        IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
        IF_LCVAL = IR_RTE_ARBPL->F_LCVAL.
    append LR_RTE_ARBPL to RT_RTE_ARBPL.

*** Append Production Steps prior to the Split
    loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
      if LR_RTE_PSTEP->R_BLOBJ ne IR_RTE_PSTEP->R_BLOBJ.
        append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
        delete LT_RTE_PSTEP.
      else.
        exit.
      endif.
    endloop.


*** Create new Work Center (after)
    create object LR_RTE_ARBPL
      exporting
        IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
        IF_LCVAL = IR_RTE_ARBPL->F_LCVAL.
    append LR_RTE_ARBPL to RT_RTE_ARBPL.

*** Append Production Steps after to the Split
    loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
      append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
    endloop.
  endif.

endmethod.
method UPDATE_BL_PRTE.

  ME->UPDATE_BL_PRTE_BY_RTE_DEF( IT_BL_PRTE = IT_BL_PRTE ).

endmethod.
method UPDATE_BL_PRTE_BY_RTE_DEF.

  data:  LF_COUNT          type        I.
  data: LS_RTE_DEF_NEW type        ZVCXI_XCSR_S_RTE_DEF,
        LS_RTE_DEF_OLD type        ZVCXI_XCSR_S_RTE_DEF.
  data: LT_BL_PRTE       type        ZVCXI_XCSR_TT_BL_PRTE,
        LT_RTE_PSTEP_NEW type        /VCXI/VSMR_TT_RTE_PSTEP,
        LT_RTE_DEF_OLD   type        ZVCXI_XCSR_TT_RTE_DEF.
  data: LR_BL_PRTE        type ref to ZCL_VCXI_XCSR_BL_PRTE,
        LR_PRTE           type ref to /VCXI/CL_VSMC_PRTE,
        LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSTEP_CURR type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_RTE_PSTEP_OLD  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_RTE_PSTEP_NEW  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_NEW   type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_BL_PSTEP_CURR  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
  if IT_RTE_DEF_OLD is supplied.
    move IT_RTE_DEF_OLD to LT_RTE_DEF_OLD.
  else.
    move ME->T_RTE_DEF  to LT_RTE_DEF_OLD.
  endif.

  if IT_BL_PRTE is supplied.
    move IT_BL_PRTE to LT_BL_PRTE.
  else.
    append lines of ME->T_RTEALT to LT_BL_PRTE.
    append lines of ME->T_RTEINV to LT_BL_PRTE.
    append lines of ME->T_RTEHID to LT_BL_PRTE.
  endif.

***------------------------------------------------------------------------------------------------
  loop at LT_BL_PRTE into LR_BL_PRTE.
*** Get Production Route
    LR_PRTE = LR_BL_PRTE->R_RTE_PRTE->GET_PRTE( ).

*** Find matching old Definition
    read table LT_RTE_DEF_OLD into LS_RTE_DEF_OLD with key R_PRTE = LR_PRTE.
    if SY-SUBRC ne 0.
***   Remove Route if no definition was found
      delete LT_BL_PRTE   where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEHID where TABLE_LINE eq LR_BL_PRTE.
      if LR_BL_PRTE eq ME->R_RTESEL.
        clear ME->R_RTESEL.
      endif.
      continue.
    endif.

*** Find matching new Definition
    read table ME->T_RTE_DEF into LS_RTE_DEF_NEW with key R_PRTE = LR_PRTE.
    if SY-SUBRC ne 0.
***   Remove Route if no definition was found
      delete LT_BL_PRTE   where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEHID where TABLE_LINE eq LR_BL_PRTE.
      if LR_BL_PRTE eq ME->R_RTESEL.
        clear ME->R_RTESEL.
      endif.
      continue.
    endif.

***------------------------------------------------------------------------------------------------
*** Merge Reruns
    ME->MERGE_RERUNS( IR_BL_PRTE = LR_BL_PRTE ).

*** Check Number of Production Steps
    clear LF_COUNT.
    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_CURR
                                       where TABLE_LINE->R_RTE_PSEQ is bound.
        add 1 to LF_COUNT.
      endloop.
    endloop.
    if LF_COUNT ne LINES( LS_RTE_DEF_NEW-T_RTE_PSTEP ).
***   Remove Route if no definition was found
      delete LT_BL_PRTE   where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEALT where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEINV where TABLE_LINE eq LR_BL_PRTE.
      delete ME->T_RTEHID where TABLE_LINE eq LR_BL_PRTE.
      if LR_BL_PRTE eq ME->R_RTESEL.
        clear ME->R_RTESEL.
      endif.
      continue.
    endif.

***------------------------------------------------------------------------------------------------
*** Update Date
    LR_BL_PRTE->SET_DATE( IF_DATE = ME->F_DATE ).

*** Update Vendor required
    LR_BL_PRTE->SET_LIFNR_REQ( IF_LIFNR_REQ = ME->F_LIFNR_REQ ).

*** Update Material Flow Material In
    LR_BL_PRTE->SET_MFMI( IR_MFMI = ME->R_MFMI ).

*** Update Material Flow SFG In
    LR_BL_PRTE->SET_MFSI( IR_MFSI = ME->R_MFSI ).

*** Update Cost Split
    LR_BL_PRTE->SET_CSPLIT( IT_CSPLIT = ME->T_CSPLIT ).

*** Perform Update
    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      clear: LT_RTE_PSTEP_NEW.

      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_CURR.
        clear: LR_RTE_PSTEP_NEW.

***------------------------------------------------------------------------------------------------
***     Find old (direkt match)
        read table LS_RTE_DEF_OLD-T_RTE_PSTEP with key TABLE_LINE = LR_RTE_PSTEP_CURR
                                              transporting no fields.
        if SY-SUBRC eq 0.
***       Find new (at same index)
          read table LS_RTE_DEF_NEW-T_RTE_PSTEP into LR_RTE_PSTEP_NEW
                                                index SY-TABIX.
          if SY-SUBRC ne 0.
            raise exception type /VCXI/CX_CKX.
          endif.

***------------------------------------------------------------------------------------------------
        else.
***       Adjusted Production Steps -> Find Match based on Sequence
          if LR_RTE_PSTEP_CURR->R_RTE_PSEQ is bound.
            loop at LS_RTE_DEF_OLD-T_RTE_PSTEP into LR_RTE_PSTEP_OLD.
              if ME->CHECK_PSEQ_OF_RTE_PSEQ_MATCH( IR_RTE_PSEQ_1 = LR_RTE_PSTEP_CURR->R_RTE_PSEQ
                                                   IR_RTE_PSEQ_2 = LR_RTE_PSTEP_OLD->R_RTE_PSEQ  ) eq ABAP_TRUE.
***             Find new (at same index)
                read table LS_RTE_DEF_NEW-T_RTE_PSTEP into LR_RTE_PSTEP_NEW
                                                      index SY-TABIX.
                if SY-SUBRC ne 0.
                  raise exception type /VCXI/CX_CKX.
                endif.

***             Get current BL PStep
                try.
                    move LR_RTE_PSTEP_CURR->R_BLOBJ ?to LR_BL_PSTEP_CURR.
                  catch CX_SY_MOVE_CAST_ERROR.
                    clear: LR_BL_PSTEP_CURR.
                endtry.
                check LR_BL_PSTEP_CURR is bound.

***             Create new BL PStep
                try.
                    move LR_RTE_PSTEP_NEW->R_BLOBJ ?to LR_BL_PSTEP_NEW.
                  catch CX_SY_MOVE_CAST_ERROR.
                    clear: LR_BL_PSTEP_NEW.
                endtry.
                check LR_BL_PSTEP_NEW is bound.

                move LR_BL_PSTEP_NEW->COPY( ) to LR_BL_PSTEP_NEW.

***             Restore on Update (only for User Routes)
                if LR_BL_PRTE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
                  LR_BL_PSTEP_NEW->RESTORE_ON_UPDATE( IR_BL_PSTEP = LR_BL_PSTEP_CURR ).
                endif.

***             Set new BL PStep and keep updated Production Step as new
                move LR_BL_PSTEP_NEW   to LR_RTE_PSTEP_CURR->R_BLOBJ.
                move LR_RTE_PSTEP_CURR to LR_RTE_PSTEP_NEW.

                exit.
              endif.
            endloop.
          endif.
        endif.

***------------------------------------------------------------------------------------------------
***     No new found
        if LR_RTE_PSTEP_NEW is not bound.
***       Keep Production Step
          move LR_RTE_PSTEP_CURR to LR_RTE_PSTEP_NEW.
        endif.

***------------------------------------------------------------------------------------------------
***     Add to List
        append LR_RTE_PSTEP_NEW to LT_RTE_PSTEP_NEW.

      endloop.

***   Update Work Center
      move LT_RTE_PSTEP_NEW to LR_RTE_ARBPL->T_RTE_PSTEP.

    endloop.
  endloop.

*** Validate Routes
  ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Evaluate Routes
  ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

endmethod.
  method VALIDATE.

    data: LF_MANWC type ZVCXI_XCSR_MANWC,
          LF_OUTSO type ZVCXI_XCSR_OUTSO.
    data: LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_BL_MANU  type ref to ZIF_VCXI_XCSR_BL_MANU,
          LR_BL_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO.

*** Process Routes
    loop at CT_BL_PRTE into LR_BL_PRTE.

***------------------------------------------------------------------------------------------------
***   Validate Manual/Outsourcing Flag on Combined Production Steps
      check LR_BL_PRTE->R_RTE_PRTE is bound.
      loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into data(LR_RTE_ARBPL).
        clear: LF_MANWC, LF_OUTSO.
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into data(LR_RTE_PSTEP).
***       First Step
          if SY-TABIX eq 1.
            if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_MANU.
              LF_MANWC = cast ZIF_VCXI_XCSR_BL_MANU( LR_RTE_PSTEP->R_BLOBJ )->F_MANWC.
            endif.
            if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_OUTSO.
              LF_OUTSO = cast ZIF_VCXI_XCSR_BL_OUTSO( LR_RTE_PSTEP->R_BLOBJ )->F_OUTSO.
            endif.

***       Combined Steps
          else.
            if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_MANU.
              LR_BL_MANU ?= LR_RTE_PSTEP->R_BLOBJ.
              clear: LR_BL_MANU->F_TEXT,
                     LR_BL_MANU->S_MSRS-MSRSR,
                     LR_BL_MANU->S_MSRS-MSRST,
                     LR_BL_MANU->S_SCRAP-SCRAP.
              LR_BL_MANU->F_MANWC = LF_MANWC.
            endif.
            if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_OUTSO.
              LR_BL_OUTSO ?= LR_RTE_PSTEP->R_BLOBJ.
              clear: LR_BL_OUTSO->F_TEXT,
                     LR_BL_OUTSO->S_SCRAP-SCRAP,
                     LR_BL_OUTSO->F_LIFNR,
                     LR_BL_OUTSO->S_PRICE-PRICE,
                     LR_BL_OUTSO->S_PRICP-PRICP.
              LR_BL_OUTSO->F_OUTSO = LF_OUTSO.
            endif.
          endif.
        endloop.
      endloop.

***------------------------------------------------------------------------------------------------
***   Perform Check (Extanded)
      LR_BL_PRTE->CHECK( ).
    endloop.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    check ME->R_RTESEL is bound.

*** Add component as Group
    data(LF_GROUP_KEY) = CR_NETGRAPH_JSON->ADD_GROUP( IF_TITLE = 'Route' ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_GROUP_KEY ).

*** Fill Group by Selected Route
    ME->R_RTESEL->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY    = LF_GROUP_KEY
                                           changing CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).

  endmethod.
