
class ZCL_VCXI_XCSP_PR_MANU definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_OPERATION .

  aliases C_IPRVT_XCS_OPERATION
    for ZIF_VCXI_XCSP_OPERATION~C_IPRVT_XCS_OPERATION .
  aliases R_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~R_PR_MFMGR .
  aliases CONV_TO_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI .
  aliases CONV_TO_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO .
  aliases GET_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYI .
  aliases GET_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYO .
  aliases GET_WERKS
    for ZIF_VCXI_XCSP_OPERATION~GET_WERKS .
  aliases SET_QTYO
    for ZIF_VCXI_XCSP_OPERATION~SET_MQTYO .

  constants C_PARID_HELPN type /VCXI/VKS_PARID value 'ZVCXI_XC_HELPN'. "#EC NOTEXT
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR'. "#EC NOTEXT
  constants C_PARID_MSRSR_A type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRSR_A'. "#EC NOTEXT
  constants C_PARID_MSRSR_L type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRSR_L'. "#EC NOTEXT
  constants C_PARID_MSRSR_P type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRSR_P'. "#EC NOTEXT
  constants C_PARID_MSRSR_W type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRSR_W'. "#EC NOTEXT
  constants C_PARID_MSRST type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRST'. "#EC NOTEXT
  constants C_PARID_MSRTI type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRTI'. "#EC NOTEXT
  constants C_PARID_MSRWA_A type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_A'. "#EC NOTEXT
  constants C_PARID_MSRWA_L type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_L'. "#EC NOTEXT
  constants C_PARID_MSRWA_P type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_P'. "#EC NOTEXT
  constants C_PARID_MSRWA_W type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWA_W'. "#EC NOTEXT
  constants C_PARID_MSRWF type /VCXI/VKS_PARID value 'ZVCXI_XC_MSRWF'. "#EC NOTEXT
  constants C_PARID_TEXT type /VCXI/VKS_PARID value 'ZVCXI_XC_TEXT'. "#EC NOTEXT
  data F_PARID_MSRSR type /VCXI/VKS_PARID .
  data F_PARID_MSRWA type /VCXI/VKS_PARID .

  methods GET_HELPN
    returning
      value(RF_HELPN) type ZVCXI_XCSP_HELPN
    raising
      /VCXI/CX_CKX .
  methods GET_MSRS
    returning
      value(RS_MSRS) type /VCXI/VSM_S_MSRS
    raising
      /VCXI/CX_CKX .
  methods GET_MSRTI
    returning
      value(RS_MSRTI) type /VCXI/VSM_S_MSRTI
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWA
    returning
      value(RS_MSRWA) type /VCXI/VSM_S_MSRWA
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWF
    returning
      value(RS_MSRWF) type /VCXI/VSM_S_MSRWF
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    returning
      value(RF_TEXT) type TEXT30
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS_ARBPL
    exporting
      !EF_WERKS type WERKS_D
      !EF_ARBPL type ARBPL
    raising
      /VCXI/CX_CKX .
  methods SET_MSRS
    importing
      !IS_MSRS type /VCXI/VSM_S_MSRS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MSRWF
    importing
      !IS_MSRWF type /VCXI/VSM_S_MSRWF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_TEXT type TEXT30
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS_ARBPL
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_I_INIT_PR_MFMGR .
  aliases C_IEVNT_O_MQTYI_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYI_CHANGED .
  aliases C_IEVNT_O_MQTYO_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYO_CHANGED .
  aliases C_IEVNT_O_MQTY_CONV_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTY_CONV_CHANGED .
  aliases C_PARID_MQTYI_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_A .
  aliases C_PARID_MQTYI_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_L .
  aliases C_PARID_MQTYI_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_P .
  aliases C_PARID_MQTYI_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_W .
  aliases C_PARID_MQTYO_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_A .
  aliases C_PARID_MQTYO_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_L .
  aliases C_PARID_MQTYO_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_P .
  aliases C_PARID_MQTYO_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_W .
  aliases F_PARID_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYI .
  aliases F_PARID_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYO .
  aliases HANDLE_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR .

  constants C_IEVNT_I_RECALC_HELPN type /VCXI/VKSC_IEVNT value 'RECALC_HELPN'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_TIME type /VCXI/VKSC_IEVNT value 'RECALC_TIME'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WASTE type /VCXI/VKSC_IEVNT value 'RECALC_WASTE'. "#EC NOTEXT
  constants C_IEVNT_O_ARBPL_CHANGED type /VCXI/VKSC_IEVNT value 'ARBPL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MSRWF_CHANGED type /VCXI/VKSC_IEVNT value 'MSRWF_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_SPEED_CHANGED type /VCXI/VKSC_IEVNT value 'SPEED_CHANGED'. "#EC NOTEXT

  methods CALC_MQTYI
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRTI
    raising
      /VCXI/CX_CKX .
  methods CALC_MSRWA
    raising
      /VCXI/CX_CKX .
  methods CHECK_WERKS_ARBPL
    returning
      value(RF_SUBRC) type SY-SUBRC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HELPN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TIME
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WASTE
    raising
      /VCXI/CX_CKX .
  methods SET_HELPN
    importing
      !IF_HELPN type ZVCXI_XCSP_HELPN
    raising
      /VCXI/CX_CKX .
  methods SET_MQTYI
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
  methods SET_MSRTI
    importing
      !IS_MSRTI type /VCXI/VSM_S_MSRTI
    raising
      /VCXI/CX_CKX .
  methods SET_MSRWA
    importing
      !IS_MSRWA type /VCXI/VSM_S_MSRWA
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MANU definition
class ZCL_VCXI_XCSP_PR_MANU implementation.
method CALC_MQTYI.

  data:  LS_MQTYO   type        ZVCXI_XCSP_S_MQTYO,
         LS_QTY     type        ZVCXI_XCSP_S_QTY,
         LS_MSRWA   type        /VCXI/VSM_S_MSRWA,
         LS_MQTYI   type        ZVCXI_XCSP_S_MQTYI.

  move ME->GET_MQTYO( ) to LS_MQTYO.

  move LS_MQTYO-MQTYO     to LS_QTY-QTY.
  move LS_MQTYO-MQTYO_UOM to LS_QTY-QTY_UOM.

  LS_MQTYI = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY ).

  move ME->GET_MSRWA( ) to LS_MSRWA.

  if LS_MQTYI-MQTYI is not initial.
    add LS_MSRWA-MSRWA to LS_MQTYI-MQTYI.
  endif.

  ME->SET_MQTYI( IS_MQTYI = LS_MQTYI ).

endmethod.
method CALC_MSRTI.

  data:  LS_MQTYI        type        ZVCXI_XCSP_S_MQTYI,
         LS_MSRS        type         /VCXI/VSM_S_MSRS,
         LS_MSRTI       type         /VCXI/VSM_S_MSRTI.

***---------------------------------------------------------------------
*** Get Machine Quantity IN (without Setup Waste)
  LS_MQTYI           = ME->GET_MQTYI( ).

  if LS_MQTYI-MQTYI gt 0.
*** Get Machine Speed
    LS_MSRS         = ME->GET_MSRS( ).

***---------------------------------------------------------------------
*** Calculate
    if LS_MSRS-MSRSR is not initial.
      LS_MSRTI-MSRTI     = LS_MSRS-MSRST * LS_MQTYI-MQTYI / LS_MSRS-MSRSR.
      LS_MSRTI-MSRTI_UOM = LS_MSRS-MSRST_UOM.
    endif.
  endif.

***---------------------------------------------------------------------
*** Set Machine Run Time
  ME->SET_MSRTI( IS_MSRTI = LS_MSRTI ).

endmethod.
method CALC_MSRWA.

  data:  LF_DIMID     type         DIMID.
  data:  LS_MSRWF     type         /VCXI/VSM_S_MSRWF,
         LS_MSRWA     type         /VCXI/VSM_S_MSRWA,
         LS_MQTYO     type         ZVCXI_XCSP_S_MQTYO,
         LS_MQTYI     type         ZVCXI_XCSP_S_MQTYI,
         LS_QTY       type         ZVCXI_XCSP_S_QTY.

  try.
***   Get Run Waste Factor
      LS_MSRWF = ME->GET_MSRWF( ).

***   Get Outbound Quantity and convert it depending to Inbound
      LS_MQTYO       = ME->GET_MQTYO( ).
      move LS_MQTYO-MQTYO     to LS_QTY-QTY.
      move LS_MQTYO-MQTYO_UOM to LS_QTY-QTY_UOM.
      LS_MQTYI = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY  ).
      move LS_MQTYI-MQTYI     to LS_QTY-QTY.
      move LS_MQTYI-MQTYI_UOM to LS_QTY-QTY_UOM.


      if LS_QTY-QTY_UOM is not initial.
***     Calculate the Waste
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_QTY-QTY
                                                            IF_CALCV_UOM_1 = LS_QTY-QTY_UOM
                                                            IF_CALCV_2     = LS_MSRWF-MSRWF
                                                            IF_CALCV_UOM_2 = LS_MSRWF-MSRWF_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_MSRWA-MSRWA
                                                            EF_CALCV_UOM   = LS_MSRWA-MSRWA_UOM ).

***     In Case of PC adjust upwards
***     Get Dimensions of Unit
        if LS_MSRWA-MSRWA_UOM is not initial.
          call function 'DIMENSION_GET_FOR_UNIT'
            exporting
              UNIT           = LS_MSRWA-MSRWA_UOM
            importing
              DIMENSION      = LF_DIMID
            exceptions
              UNIT_NOT_FOUND = 1
              others         = 2.
          if SY-SUBRC <> 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

          if LF_DIMID eq 'AAAADL'.
            LS_MSRWA-MSRWA = ceil( LS_MSRWA-MSRWA ).
          endif.
        endif.
      endif.

    catch CX_SY_ARITHMETIC_OVERFLOW.
      clear LS_MSRWA.
  endtry.

*** Set Machine Run Waste
  ME->SET_MSRWA( IS_MSRWA = LS_MSRWA ).

endmethod.
method CHECK_WERKS_ARBPL.

  data:  LF_WERKS type WERKS_D,
         LF_ARBPL type ARBPL,
         LF_COUNT type I.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS
                                 EF_ARBPL = LF_ARBPL ).

  if LF_WERKS is initial or
     LF_ARBPL is initial.
    move 1 to RF_SUBRC.
  else.
*** Check Plant and Work Center Combination
    select count(*)
           into LF_COUNT
           from CRHD
          where WERKS eq LF_WERKS
           and  ARBPL eq LF_ARBPL.
    if SY-SUBRC ne 0.
      move 2 to RF_SUBRC.
    else.
      move 0 to RF_SUBRC.
    endif.
  endif.

endmethod.
method GET_HELPN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HELPN ).
  move LS_PARAM-ATFLV to RF_HELPN.

endmethod.
method GET_MSRS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRSR ).
  move LS_PARAM-ATFLV to RS_MSRS-MSRSR.
  move LS_PARAM-UNIT  to RS_MSRS-MSRSR_UOM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRST ).
  move LS_PARAM-ATFLV to RS_MSRS-MSRST.
  move LS_PARAM-UNIT  to RS_MSRS-MSRST_UOM.

endmethod.
method GET_MSRTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRTI ).
  move LS_PARAM-ATFLV to RS_MSRTI-MSRTI.
  move LS_PARAM-UNIT  to RS_MSRTI-MSRTI_UOM.

endmethod.
method GET_MSRWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRWA ).
  move LS_PARAM-ATFLV to RS_MSRWA-MSRWA.
  move LS_PARAM-UNIT  to RS_MSRWA-MSRWA_UOM.

endmethod.
method GET_MSRWF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRWF ).
  move LS_PARAM-ATFLV to RS_MSRWF-MSRWF.
  move LS_PARAM-UNIT  to RS_MSRWF-MSRWF_UOM.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  if ME->CHECK_WERKS_ARBPL( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  case ME->CHECK_WERKS_ARBPL( ).
    when 0.
***   Plant and Work Center maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '001' ).
    when 1.
***   Plant and Work Center not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '002' ).
    when 2.
***   Maintained Plant and Work Center combination not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '003' ).
  endcase.

endmethod.
method GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.

endmethod.
method GET_WERKS_ARBPL.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY+0(4) to EF_WERKS.
  move LS_LEOKY-LEOKY+4(8) to EF_ARBPL.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_PR_MFMGR.
      ME->HANDLE_INIT_PR_MFMGR( ).
    when C_IEVNT_I_RECALC_WASTE.
      ME->HANDLE_RECALC_WASTE( ).
    when C_IEVNT_I_RECALC_TIME.
      ME->HANDLE_RECALC_TIME( ).
    when C_IEVNT_I_RECALC_HELPN.
      ME->HANDLE_RECALC_HELPN( ).
  endcase.

endmethod.
method HANDLE_RECALC_HELPN.

  data:  LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data:  LF_HELPN       type        ZVCXI_XCSP_HELPN,
         LF_HELPN_TOTAL type        ZVCXI_XCSP_HELPN.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_HELPER   type ref to ZCL_VCXI_XCSP_PR_HELPER.

***------------------------------------------------------------------
*** Get all Helpers
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_HELPER=>C_IPRVT_XCS_HELPER
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_HELPER.
        check LR_PR_HELPER is bound.

        LF_HELPN = LR_PR_HELPER->GET_HELPN( ).
        add  LF_HELPN to LF_HELPN_TOTAL.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set new Number of Helpers
  ME->SET_HELPN( IF_HELPN = LF_HELPN_TOTAL ).

endmethod.
method HANDLE_RECALC_TIME.

***------------------------------------------------------------------
*** Calculate Run Time
  ME->CALC_MSRTI( ).

endmethod.
method HANDLE_RECALC_WASTE.

***------------------------------------------------------------------
*** Calculate Run Waste
  ME->CALC_MSRWA( ).

***------------------------------------------------------------------
*** Calculate Machine Quantity In
  ME->CALC_MQTYI( ).


endmethod.
method SET_HELPN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HELPN ).

  check IF_HELPN ne LS_PARAM-ATFLV.

***--------------------------------------------------------------------------------------
  if IF_HELPN is not initial.
    move IF_HELPN                         to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

***--------------------------------------------------------------------------------------
*** Set Parameter
  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MQTYI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).

  move IS_MQTYI-MQTYI                   to LS_PARAM-ATFLV.
  move IS_MQTYI-MQTYI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYI_CHANGED ).
  endif.

endmethod.
method SET_MSRS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRSR ).

  move IS_MSRS-MSRSR     to LS_PARAM-ATFLV.
  move IS_MSRS-MSRSR_UOM to LS_PARAM-UNIT.
  move IF_SETBY          to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SPEED_CHANGED ).
  endif.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRST ).

  move IS_MSRS-MSRST     to LS_PARAM-ATFLV.
  move IS_MSRS-MSRST_UOM to LS_PARAM-UNIT.
  move IF_SETBY          to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SPEED_CHANGED ).
  endif.

endmethod.
method SET_MSRTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRTI ).

  move IS_MSRTI-MSRTI                   to LS_PARAM-ATFLV.
  move IS_MSRTI-MSRTI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSRWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MSRWA ).

  move IS_MSRWA-MSRWA                   to LS_PARAM-ATFLV.
  move IS_MSRWA-MSRWA_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MSRWF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSRWF ).

  move IS_MSRWF-MSRWF     to LS_PARAM-ATFLV.
  move IS_MSRWF-MSRWF_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MSRWF_CHANGED ).
  endif.

endmethod.
method SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WERKS_ARBPL.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_WERKS to LS_LEOKY-LEOKY+0(4).
  move IF_ARBPL to LS_LEOKY-LEOKY+4(8).
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ARBPL_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

  RS_MQTYI-MQTYI     = IS_QTY-QTY.
  RS_MQTYI-MQTYI_UOM = IS_QTY-QTY_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

  RS_MQTYO-MQTYO     = IS_QTY-QTY.
  RS_MQTYO-MQTYO_UOM = IS_QTY-QTY_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.
  if lines( LT_GATE ) gt 1.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  read table LT_GATE into LR_GATE index 1.
  move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get ID of active Cost Split
  move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
  check EF_ICSPA is not initial.

*** Get active Cost Splits
  move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
  move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).
  move LS_PARAM-ATFLV to RS_MQTYI-MQTYI.
  move LS_PARAM-UNIT  to RS_MQTYI-MQTYI_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).
  move LS_PARAM-ATFLV to RS_MQTYO-MQTYO.
  move LS_PARAM-UNIT  to RS_MQTYO-MQTYO_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_WERKS.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = RF_WERKS ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get all Machine Quantity and Setup Waste
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: ME->R_PR_MFMGR.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_MFMGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_MFMGR.
    endtry.
  endif.

  check ME->R_PR_MFMGR is not bound.
*** Provider &1 is not available for &2.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
      IF_MSGTY = 'E'
      IF_MSGID = 'ZVCXI_XCS'
      IF_MSGNO = '010'
      IF_MSGV1 = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
      IF_MSGV2 = ME->R_GATE->F_ID ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~SET_MQTYO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).

  move IS_MQTYO-MQTYO                   to LS_PARAM-ATFLV.
  move IS_MQTYO-MQTYO_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYO_CHANGED ).
  endif.

endmethod.
