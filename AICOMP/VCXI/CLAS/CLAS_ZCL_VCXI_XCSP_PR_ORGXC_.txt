
class ZCL_VCXI_XCSP_PR_ORGXC definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFI .
  interfaces ZIF_VCXI_XCSP_MFS .
  interfaces ZIF_VCXI_XCSP_MFSI .

  aliases C_IPRVT_XCS_MFI
    for ZIF_VCXI_XCSP_MFI~C_IPRVT_XCS_MFI .
  aliases F_ORGLC
    for ZIF_VCXI_XCSP_MFI~F_ORGLC .

  constants C_PARID_EXQTY_A type /VCXI/VKS_PARID value 'ZVCXI_XC_EXQTY_A' ##NO_TEXT.
  constants C_PARID_EXQTY_L type /VCXI/VKS_PARID value 'ZVCXI_XC_EXQTY_L' ##NO_TEXT.
  constants C_PARID_EXQTY_P type /VCXI/VKS_PARID value 'ZVCXI_XC_EXQTY_P' ##NO_TEXT.
  constants C_PARID_EXQTY_W type /VCXI/VKS_PARID value 'ZVCXI_XC_EXQTY_W' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_EXQTY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_EXQTY) type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
  methods SET_EXQTY
    importing
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_REQUEST_BACKWARD
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_I_REQUEST_BACKWARD .
  aliases C_IEVNT_O_BACKWARD_REQUESTED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_BACKWARD_REQUESTED .

  types:
    begin of YS_CONNECT,
                POS            type        NUMC3,
                IMFXC          type        ZVCXI_XCSP_IMFXC,
                R_GATE_MFSO    type ref to /VCXI/CL_VKSR_GATE,
                R_GATE_MFSI    type ref to /VCXI/CL_VKSR_GATE,
         end of YS_CONNECT .
  types:
    YT_CONNECT type standard table of YS_CONNECT with default key .

  constants C_IEVNT_I_DO_BACKWARD type /VCXI/VKSC_IEVNT value 'DO_BACKWARD'. "#EC NOTEXT
  constants C_IEVNT_I_DO_FORWARD type /VCXI/VKSC_IEVNT value 'DO_FORWARD'. "#EC NOTEXT
  constants C_IEVNT_I_REORG_CONNECTIONS type /VCXI/VKSC_IEVNT value 'REORG_CONNECTIONS'. "#EC NOTEXT
  constants C_IEVNT_O_EXQTY_CHANGED type /VCXI/VKSC_IEVNT value 'EXQTY_CHANGED'. "#EC NOTEXT
  data F_PARID_EXQTY type /VCXI/VKS_PARID .
  data T_CONNECT type YT_CONNECT .

  methods DO_BACKWARD
    importing
      !IS_CONNECT type YS_CONNECT
    raising
      /VCXI/CX_CKX .
  methods DO_FORWARD
    importing
      !IS_CONNECT type YS_CONNECT
    raising
      /VCXI/CX_CKX .
  methods GET_ACTUAL_CONNECTIONS
    returning
      value(RT_CONNECT) type YT_CONNECT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_BACKWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_FORWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REORG_CONNECTIONS
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_PARID_EXQTY
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSP_PR_ORGXC definition
class ZCL_VCXI_XCSP_PR_ORGXC implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).
  ME->F_ORGLC = ABAP_TRUE.

*** Initialize Parameter ID for Explosion Quantity
  ME->INIT_PARID_EXQTY( ).

endmethod.
method DO_BACKWARD.

  data: LR_MFSO        type ref to ZIF_VCXI_XCSP_MFSO,
        LR_MFSI        type ref to ZIF_VCXI_XCSP_MFSI.

  check IS_CONNECT-R_GATE_MFSO is bound.
***----------------------------------------------------------------------------
*** Get MFSO
  try.
      move IS_CONNECT-R_GATE_MFSO->R_CLSPR ?to LR_MFSO.
      check LR_MFSO is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_MFSO.
  endtry.

*** Get MFSI
  try.
      if IS_CONNECT-R_GATE_MFSI is bound.
        move IS_CONNECT-R_GATE_MFSI->R_CLSPR ?to LR_MFSI.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_MFSI.
  endtry.

***----------------------------------------------------------------------------
*** Perform actual Backwarding
  LR_MFSO->DO_BACKWARD( IR_MFSI = LR_MFSI ).

endmethod.
method DO_FORWARD.

  data: LR_MFSO        type ref to ZIF_VCXI_XCSP_MFSO,
        LR_MFSI        type ref to ZIF_VCXI_XCSP_MFSI.

  check IS_CONNECT-R_GATE_MFSI is bound.

***----------------------------------------------------------------------------
*** Get MFSI
  try.
      move IS_CONNECT-R_GATE_MFSI->R_CLSPR ?to LR_MFSI.
      check LR_MFSI is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_MFSI.
  endtry.

*** Get MFSO
  try.
      if IS_CONNECT-R_GATE_MFSO is bound.
        move IS_CONNECT-R_GATE_MFSO->R_CLSPR ?to LR_MFSO.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_MFSO.
  endtry.

***----------------------------------------------------------------------------
*** Perform actual Forwarding
  LR_MFSI->DO_FORWARD( IR_MFSO = LR_MFSO ).

endmethod.
method GET_ACTUAL_CONNECTIONS.

  data: LF_IMFXC     type        ZVCXI_XCSP_IMFXC,
        LF_INDEX     type        I,
        LF_NONLINEAR type        ABAP_BOOL.
  data: LT_GATE_MFSI type        /VCXI/VKSR_TT_GATE,
        LT_GATE_MFSO type        /VCXI/VKSR_TT_GATE,
        LT_GATE_ALL  type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MF type ref to ZCL_VCXI_XCSP_PR_MF,
        LR_MFSO  type ref to ZIF_VCXI_XCSP_MFSO,
        LR_MFSI  type ref to ZIF_VCXI_XCSP_MFSI.
  field-symbols: <S_CONNECT>      type        YS_CONNECT.

***------------------------------------------------------------------------------------------------
*** Get all Material Flow In's
  LT_GATE_MFSI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSP_MFSI=>C_IPRVT_XCS_MFSI
                                        IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE_MFSI to LT_GATE_ALL.

***------------------------------------------------------------------------------------------------
*** Get all Material Flow Out's
  LT_GATE_MFSO = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSP_MFSO=>C_IPRVT_XCS_MFSO
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).
  append lines of LT_GATE_MFSO to LT_GATE_ALL.

*** Sort all Gates:
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_ALL ).


***------------------------------------------------------------------------------------------------
*** Get Connections
  loop at LT_GATE_MFSO into LR_GATE.
    clear: LF_IMFXC,
           LR_MFSO,
           LR_MFSI.
    try.
        if LR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSP_PR_MF.
          move LR_GATE->R_CLSPR ?to LR_PR_MF.
          check LR_PR_MF is bound.
          move LR_PR_MF->GET_IMFXC( ) to LF_IMFXC.
        endif.

***     Create new Connection
        move LR_GATE->R_CLSPR ?to LR_MFSO.
        check LR_MFSO is bound.

        append initial line to RT_CONNECT assigning <S_CONNECT>.
        move LF_IMFXC to <S_CONNECT>-IMFXC.
        move LR_GATE  to <S_CONNECT>-R_GATE_MFSO.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

***------------------------------------------------------------------------------------------------
    if LF_IMFXC is initial.
      clear LF_NONLINEAR.
***   Find next MFSI (linear)
      read table LT_GATE_ALL with key TABLE_LINE = LR_GATE
                             transporting no fields.
      LF_INDEX = SY-TABIX + 1.

      loop at LT_GATE_ALL into LR_GATE from LF_INDEX.
        try.
            if not LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFSI.
***           If we have another MFSO in between -> no linear connection possible
              try.
                  move LR_GATE->R_CLSPR ?to LR_MFSO.
                  if LR_MFSO is bound and
                   ( not LR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSP_PR_MF or
                     cast ZCL_VCXI_XCSP_PR_MF( LR_GATE->R_CLSPR )->GET_IMFXC( ) eq SPACE ).
***                 It's non linear, but that's okay if all are connected to "Organizer"
                    LF_NONLINEAR = ABAP_TRUE.
                    continue.
                  endif.
                catch CX_SY_MOVE_CAST_ERROR.
                  clear: LR_MFSO.
              endtry.
            else.
              if LF_NONLINEAR eq ABAP_TRUE and
                 cast ZIF_VCXI_XCSP_MFI( LR_GATE->R_CLSPR )->F_ORGLC ne ABAP_TRUE.
                exit.
              endif.
            endif.

            move LR_GATE->R_CLSPR ?to LR_MFSI.
            check LR_MFSI is bound.
            if not LR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSP_PR_MF or
               cast ZCL_VCXI_XCSP_PR_MF( LR_GATE->R_CLSPR )->GET_IMFXC( ) eq SPACE.
              move LR_GATE to <S_CONNECT>-R_GATE_MFSI.
            endif.
            exit.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   All open Ends are linked to the Organizer
      if <S_CONNECT>-R_GATE_MFSI is initial.
        move ME->R_GATE to <S_CONNECT>-R_GATE_MFSI.
      endif.

***------------------------------------------------------------------------------------------------
    else.
      loop at LT_GATE_MFSI into LR_GATE.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_MF.
            check LR_PR_MF is bound and
                  LR_PR_MF->GET_IMFXC( ) eq LF_IMFXC.

            move LR_GATE->R_CLSPR ?to LR_MFSI.
            check LR_MFSI is bound.
            move LR_GATE to <S_CONNECT>-R_GATE_MFSI.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.
  endloop.

endmethod.
method GET_EXQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = F_PARID_EXQTY ).
  move LS_PARAM-ATFLV to RS_EXQTY-EXQTY.
  move LS_PARAM-UNIT  to RS_EXQTY-EXQTY_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method HANDLE_DO_BACKWARD.

  data: LS_CONNECT  type        YS_CONNECT.
  data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE.


  loop at IT_GATE into LR_GATE.
***--------------------------------------------------------------------------------------
*** If Request comes from a MFO
    if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFO.
      loop at ME->T_CONNECT into LS_CONNECT
                           where R_GATE_MFSO eq LR_GATE.
***     Perform Backward
        ME->DO_BACKWARD( IS_CONNECT = LS_CONNECT ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** If Request comes from a MFI
    if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFI.
      loop at ME->T_CONNECT into LS_CONNECT
                           where R_GATE_MFSI eq LR_GATE.
***     Perform Backward
        ME->DO_BACKWARD( IS_CONNECT = LS_CONNECT ).
      endloop.
    endif.
  endloop.

endmethod.
method HANDLE_DO_FORWARD.

  data: LS_CONNECT  type        YS_CONNECT.
  data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE.


  loop at IT_GATE into LR_GATE.
***--------------------------------------------------------------------------------------
*** If Request comes from a MFO
    if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFO.
      loop at ME->T_CONNECT into LS_CONNECT
                           where R_GATE_MFSO eq LR_GATE.
***     Perform Forward
        ME->DO_FORWARD( IS_CONNECT = LS_CONNECT ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** If Request comes from a MFI
    if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSP_MFI.
      loop at ME->T_CONNECT into LS_CONNECT
                           where R_GATE_MFSI eq LR_GATE.
***     Perform Forward
        ME->DO_FORWARD( IS_CONNECT = LS_CONNECT ).
      endloop.
    endif.
  endloop.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
*** Reorganize Connections
    when C_IEVNT_I_REORG_CONNECTIONS.
      ME->HANDLE_REORG_CONNECTIONS( ).

*** Backward Processing
    when C_IEVNT_I_DO_BACKWARD.
      ME->HANDLE_DO_BACKWARD( IT_GATE = IT_GATE_PROVIDER ).
*** Forward Processing
    when C_IEVNT_I_DO_FORWARD.
      ME->HANDLE_DO_FORWARD( IT_GATE = IT_GATE_PROVIDER ).
  endcase.

endmethod.
method HANDLE_REORG_CONNECTIONS.

  data: LS_CONNECT          type        YS_CONNECT.
  data: LT_CONNECT_OLD      type        YT_CONNECT.

***--------------------------------------------------------------------------------------
*** Get Actual Connections (Completely New)
  if ME->T_CONNECT is initial.

    ME->T_CONNECT = ME->GET_ACTUAL_CONNECTIONS( ).

*** Set Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BACKWARD_REQUESTED ).


***--------------------------------------------------------------------------------------
*** Compare Actual Connections with Saved one
  else.

*** Get acutal Connections
    move ME->T_CONNECT to LT_CONNECT_OLD.
    ME->T_CONNECT = ME->GET_ACTUAL_CONNECTIONS( ).
    check ME->T_CONNECT ne LT_CONNECT_OLD.

*** Find Differents
    loop at ME->T_CONNECT into LS_CONNECT.
      read table LT_CONNECT_OLD with key R_GATE_MFSO = LS_CONNECT-R_GATE_MFSO
                                         R_GATE_MFSI = LS_CONNECT-R_GATE_MFSI
                                transporting no fields.
      if SY-SUBRC eq 0.
        delete LT_CONNECT_OLD index SY-TABIX.
      else.
***     Do Complete Forward and Backward Calculation
        ME->DO_FORWARD(  IS_CONNECT = LS_CONNECT ).
        ME->DO_BACKWARD( IS_CONNECT = LS_CONNECT ).
      endif.
    endloop.
  endif.

endmethod.
method INIT_PARID_EXQTY.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_EXQTY_A or
                          PARID eq C_PARID_EXQTY_L or
                          PARID eq C_PARID_EXQTY_P or
                          PARID eq C_PARID_EXQTY_W ).
    move LS_PARAM-PARID to ME->F_PARID_EXQTY.
    exit.
  endloop.

endmethod.
method SET_EXQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_EXQTY ).

  move IS_EXQTY-EXQTY                   to LS_PARAM-ATFLV.
  move IS_EXQTY-EXQTY_UOM               to LS_PARAM-UNIT.
  move IF_SETBY                         to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EXQTY_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~CALC_CONSU.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CONSU.

  data: LS_EXQTY type /VCXI/VKCR_S_EXQTY.

  LS_EXQTY = ME->GET_EXQTY( ).

  RS_CONSU-CONSU     = LS_EXQTY-EXQTY.
  RS_CONSU-CONSU_UOM = LS_EXQTY-EXQTY_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CSPLIT.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_KAUSF.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICF.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICP.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFISP.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFICF.
endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFISP.
endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICF.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICP.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFISP.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFSI~DO_FORWARD.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFSI~GET_NEXTL.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFSI~SET_NEXTL.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_DISST.

*** Last "MFSI" always holds low level 0
  move 0 to RF_DISST.

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_MATNR.

  data:          LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  try.
      move ME->R_GATE->GET_APPDATA( ) ?to LR_APPDATA.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_APPDATA.
  endtry.
  check LR_APPDATA is bound.

*** Use Configurable Material as Material Number
  move LR_APPDATA->S_CMPRK-CMATN to RF_MATNR.

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_DISST.

*** Not needed for Organizer

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_MATNR.

*** Not needed for Organizer

endmethod.
