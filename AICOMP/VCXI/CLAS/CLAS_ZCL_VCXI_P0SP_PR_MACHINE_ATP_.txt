
class ZCL_VCXI_P0SP_PR_MACHINE_ATP definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_AREADIM
    returning
      value(RS_AREADIM) type ZVCXI_P0SP_S_AREADIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_PCDIM
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
  methods GET_FEATURE
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_PCDIM type /VCXI/VKSC_IEVNT value 'RECALC_PCDIM' ##NO_TEXT.

  methods GET_CONV_ATP
    returning
      value(RR_CONV_ATP) type ref to ZIF_VCXI_P0SP_CONV_ATP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PCDIM
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_PCDIM
    importing
      !IT_PCDIM type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SP_PR_MACHINE_ATP definition
class ZCL_VCXI_P0SP_PR_MACHINE_ATP implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDS's
  move C_PARID_MQTYI_A to ME->F_PARID_MQTYI.
  move C_PARID_MQTYO_P to ME->F_PARID_MQTYO.
  move C_PARID_MSRWA_A to ME->F_PARID_MSRWA.
  move C_PARID_MSSWA_A to ME->F_PARID_MSSWA.
  move 'SURFAC'        to ME->F_DIMNI.
  move 'AAAADL'        to ME->F_DIMNO.

endmethod.
method GET_CONV_ATP.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_CONV_ATP  type ref to ZIF_VCXI_P0SP_CONV_ATP.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SP_CONV_ATP=>C_IPRVT_P0_CONV_ATP
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CONV_ATP.
        check LR_CONV_ATP is bound.

        move LR_CONV_ATP to RR_CONV_ATP.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_FEATURE.

    data: LF_RATIO type F.
    data: LS_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM.


*** Get Super Features
    if IT_GATE_ADDON is supplied.
      RT_FEATURE = SUPER->GET_FEATURE( IT_GATE_ADDON = IT_GATE_ADDON ).
    else.
      RT_FEATURE = SUPER->GET_FEATURE( ).
    endif.

***------------------------------------------------------------------------------------------------
*** PC Dimension Out
    LS_PCDIM_OUT = ME->GET_MFO_PCDIM( ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutLength'     FTVAL = LS_PCDIM_OUT-PCLEN )
                                      changing  CT_FEATURE = RT_FEATURE ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutWidth'      FTVAL = LS_PCDIM_OUT-PCWID )
                                      changing  CT_FEATURE = RT_FEATURE ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutHeight'     FTVAL = LS_PCDIM_OUT-PCHEI )
                                      changing  CT_FEATURE = RT_FEATURE ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutNumberOut'  FTVAL = LS_PCDIM_OUT-NOOUT )
                                      changing  CT_FEATURE = RT_FEATURE ).

    if LS_PCDIM_OUT-PCLEN is not initial and
       LS_PCDIM_OUT-PCWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM_OUT-PCLEN
                                                          IF_CALCV_UOM_1 = LS_PCDIM_OUT-PCLEN_UOM
                                                          IF_CALCV_2     = LS_PCDIM_OUT-PCWID
                                                          IF_CALCV_UOM_2 = LS_PCDIM_OUT-PCWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_RATIO ).
    else.
      clear LF_RATIO.
    endif.
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutRatio'      FTVAL = LF_RATIO )
                                      changing  CT_FEATURE = RT_FEATURE ).

  endmethod.
method GET_MFI_AREADIM.

  data:  LS_PCDIM     type        ZVCXI_P0SP_S_PCDIM.
  data:  LT_PCDIM     type        ZVCXI_P0SP_TT_PCDIM,
         LT_AREADIM   type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATP  type ref to ZIF_VCXI_P0SP_CONV_ATP.

*** Get PC Out
  LS_PCDIM = ME->GET_MFO_PCDIM( ).

*** Get Area to PC Conversion
  LR_CONV_ATP = ME->GET_CONV_ATP( ).

***------------------------------------------------------------------------------------------------
  if LR_CONV_ATP is not bound.
*** Convert it To Machine Quantity In
    if LS_PCDIM-PCLEN is not initial and
       LS_PCDIM-PCWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                          IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                          IF_CALCV_2     = LS_PCDIM-PCWID
                                                          IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = RS_AREADIM-PCARE
                                                          EF_CALCV_UOM   = RS_AREADIM-PCARE_UOM ).
      move LS_PCDIM-PCUPS to RS_AREADIM-PCUPS.
    endif.

***------------------------------------------------------------------------------------------------
  else.
    append LS_PCDIM to LT_PCDIM.
    LT_AREADIM = LR_CONV_ATP->CONV_PC_TO_AREA( IT_PCDIM = LT_PCDIM ).
    read table LT_AREADIM into RS_AREADIM index 1.
  endif.


endmethod.
method GET_MFO_PCDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MFP       type ref to ZIF_VCXI_P0SP_MFP.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne 1.
*** No Material Flow Out available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '209' ).
  endif.

*** Get Dimensions of first
  read table LT_GATE into LR_GATE index 1.
  try.
      move LR_GATE->R_CLSPR ?to LR_MFP.
      check LR_MFP is bound.
      RS_PCDIM = LR_MFP->GET_PCDIM( ).
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_PCDIM.
      ME->HANDLE_RECALC_PCDIM( ).
  endcase.

endmethod.
method HANDLE_RECALC_PCDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
        LT_PCDIM     type        ZVCXI_P0SP_TT_PCDIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_PCDIM type ref to ZIF_VCXI_P0SP_ADJ_PCDIM.

  if ME->R_PR_MFMGR is not bound.
    ME->ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR( ).
  endif.
  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the PC Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SP_ADJ_PCDIM=>C_IPRVT_P0_ADJ_PCDIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_PCDIM.
        check LR_ADJ_PCDIM is bound.
        LR_ADJ_PCDIM->CALC_PCDIM_OUT( changing CT_PCDIM = LT_PCDIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set new PC Dimension of Material Flow
  ME->SET_MFO_PCDIM( IT_PCDIM = LT_PCDIM ).

endmethod.
method SET_MFO_PCDIM.

  data: LS_PCDIM     type        ZVCXI_P0SP_S_PCDIM,
        LS_PCDIM_OLD type        ZVCXI_P0SP_S_PCDIM.
  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MFP       type ref to ZIF_VCXI_P0SP_MFP.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne lines( IT_PCDIM ).
*** Requested Material Flow Out not available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '211' ).
  endif.

*** Set Dimensions to first
  loop at LT_GATE into LR_GATE.
    clear LS_PCDIM.
    read table IT_PCDIM into LS_PCDIM index SY-TABIX.
    try.
        move LR_GATE->R_CLSPR ?to LR_MFP.
        check LR_MFP is bound.
        move LR_MFP->GET_PCDIM( ) to LS_PCDIM_OLD.
        LR_MFP->SET_PCDIM( IS_PCDIM = LS_PCDIM ).

***     Check if Conversion for Machine Quantity changed
        if LS_PCDIM-PCLEN ne LS_PCDIM_OLD-PCLEN or
           LS_PCDIM-PCWID ne LS_PCDIM_OLD-PCWID or
           LS_PCDIM-PCUPS ne LS_PCDIM_OLD-PCUPS.
***       Send Event
          ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

  data: LS_PCDIM   type        ZVCXI_P0SP_S_PCDIM,
        LS_AREADIM type        ZVCXI_P0SP_S_AREADIM.
  data: LT_PCDIM   type        ZVCXI_P0SP_TT_PCDIM,
        LT_AREADIM type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATP  type ref to ZIF_VCXI_P0SP_CONV_ATP.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions of Material Flow Out
  check ME->R_PR_MFMGR is bound.

*** Get Quantity to receive UOM
  RS_MQTYI = ME->GET_MQTYI( ).

*** No Quantity will always end in 0
  if IS_QTY-QTY eq 0.
    clear RS_MQTYI-MQTYI.
    exit.
  endif.

*** Get PC Out
  LS_PCDIM = ME->GET_MFO_PCDIM( ).

*** Get Area to PC Conversion
  LR_CONV_ATP = ME->GET_CONV_ATP( ).

***------------------------------------------------------------------------------------------------
  if LR_CONV_ATP is not bound.
*** Convert it To Machine Quantity In
    if LS_PCDIM-PCLEN is not initial and
       LS_PCDIM-PCWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                          IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                          IF_CALCV_2     = LS_PCDIM-PCWID
                                                          IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = RS_MQTYI-MQTYI_UOM
                                                importing EF_CALCV       = LS_AREADIM-PCARE
                                                          EF_CALCV_UOM   = LS_AREADIM-PCARE_UOM ).
      move LS_PCDIM-PCUPS to LS_AREADIM-PCUPS.
    endif.

***------------------------------------------------------------------------------------------------
  else.
    append LS_PCDIM to LT_PCDIM.
    LT_AREADIM = LR_CONV_ATP->CONV_PC_TO_AREA( IT_PCDIM = LT_PCDIM ).
    read table LT_AREADIM into LS_AREADIM index 1.
  endif.

***------------------------------------------------------------------------------------------------
*** Calculate
  if LS_AREADIM-PCUPS is not initial.
    RS_MQTYI-MQTYI     = ( IS_QTY-QTY * LS_PCDIM-PCUPS ) * ( LS_AREADIM-PCARE / LS_AREADIM-PCUPS ).
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_MQTYI-MQTYI
                                                       IF_UOM_IN    = LS_AREADIM-PCARE_UOM
                                                       IF_UOM_OUT   = RS_MQTYI-MQTYI_UOM
                                             importing EF_VALUE_OUT = RS_MQTYI-MQTYI
                                                       EF_UOM_OUT   = RS_MQTYI-MQTYI_UOM ).
  else.
    RS_MQTYI-MQTYI     = 0.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.
*** IS_QTY is the M2 Operation Quantity

  data: LS_PCDIM_OUT type        ZVCXI_P0SP_S_PCDIM,
        LS_PCDIM_IN  type        ZVCXI_P0SP_S_PCDIM,
        LS_PCAREA    type        ZVCXI_XCSP_S_QTY.
  data: LT_PCDIM   type        ZVCXI_P0SP_TT_PCDIM,
        LT_AREADIM type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATP  type ref to ZIF_VCXI_P0SP_CONV_ATP.

*** Get PC Dimensions of Material Flow Out
  check ME->R_PR_MFMGR is bound.

*** Get Quantity to receive UOM
  RS_MQTYO = ME->GET_MQTYO( ).

*** No Quantity will always end in 0
  if IS_QTY-QTY eq 0.
    clear RS_MQTYO-MQTYO.
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Get Material Flow Out
  LS_PCDIM_OUT = ME->GET_MFO_PCDIM( ).

***------------------------------------------------------------------------------------------------
*** Get Area to PC Conversion
  LR_CONV_ATP = ME->GET_CONV_ATP( ).

  if LR_CONV_ATP is not bound.
*** Use Material Flow Out as In
    move LS_PCDIM_OUT to LS_PCDIM_IN.
  else.
    LT_PCDIM = LR_CONV_ATP->CONV_AREA_TO_PC( IT_AREADIM = LT_AREADIM ).
    read table LT_PCDIM into LS_PCDIM_IN index 1.
  endif.

***------------------------------------------------------------------------------------------------
*** Convert it To Machine Quantity Out
  if LS_PCDIM_IN-PCUPS ne 0.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM_IN-PCLEN
                                                        IF_CALCV_UOM_1 = LS_PCDIM_IN-PCLEN_UOM
                                                        IF_CALCV_2     = LS_PCDIM_IN-PCWID
                                                        IF_CALCV_UOM_2 = LS_PCDIM_IN-PCWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = IS_QTY-QTY_UOM
                                              importing EF_CALCV       = LS_PCAREA-QTY
                                                        EF_CALCV_UOM   = LS_PCAREA-QTY_UOM ).
    if LS_PCAREA-QTY ne 0.
      RS_MQTYO-MQTYO  = ( IS_QTY-QTY * LS_PCDIM_IN-PCUPS ) / ( LS_PCAREA-QTY * LS_PCDIM_OUT-PCUPS ).
    else.
      RS_MQTYO-MQTYO  = 0.
    endif.
  else.
    RS_MQTYO-MQTYO  = 0.
  endif.


*** Round Depending on PC Typ Out
  ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_OUT-PCTYP
                                              changing CF_VALUE = RS_MQTYO-MQTYO ).

endmethod.
