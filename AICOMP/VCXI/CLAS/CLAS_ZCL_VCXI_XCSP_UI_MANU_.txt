
class ZCL_VCXI_XCSP_UI_MANU definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  data S_MANU_VIS type ZVCXI_XCSP_S_MANU_VIS .
  data F_ACTIVE_TAB type STRING .
  data S_MANU_TAB type ZVCXI_XCSP_S_TAB_DESCR .
  data F_ACTIVE_TAB_OLD type STRING .
  data R_DEFAULT_GATE type ref to /VCXI/CL_VKSR_GATE .
  data F_CURSOR type SCRFNAME .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_MANU_VIS
    importing
      !IS_MANU_VIS type ZVCXI_XCSP_S_MANU_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PR_MANU type ref to ZCL_VCXI_XCSP_PR_MANU .
  constants C_TAB type STRING value 'TAB'. "#EC NOTEXT
  constants C_TABNAME type STRING value '0100S_TAB-TAB'. "#EC NOTEXT
  type-pools ABAP .
  data F_TAB_LIST_REFRESH_REQ type ABAP_BOOL .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_XCSP_TT_TAB_LIST .
  data F_ALREADY_OPEN type ABAP_BOOL .
  data R_OLD_GATE type ref to /VCXI/CL_VKSR_GATE .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_ACTIVE_TAB
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSP_UI_MANU definition
class ZCL_VCXI_XCSP_UI_MANU implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.


endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI to ME->R_REGISTERED_UI.


endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_XCSP_UI_MANU_BIND'
    exporting
      IR_UI_MANU   = ME
    importing
      ES_DYNP       = ME->S_DYNP
      EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->ACTIVATE( ).
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_MANU.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Request Init List for Tabs
  move ABAP_TRUE to ME->F_TAB_LIST_REFRESH_REQ.

*** Initialize Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

  clear: ME->F_ALREADY_OPEN.

endmethod.
method DISPLAY_ACTIVE_TAB.

  data:  LS_TAB_LIST    type        ZVCXI_XCSP_S_TAB_LIST.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  check ME->F_ACTIVE_TAB cs C_TABNAME.

  check ME->F_ACTIVE_TAB   ne ME->F_ACTIVE_TAB_OLD
     or ME->F_ALREADY_OPEN eq ABAP_FALSE.

  read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
  if SY-SUBRC eq 0.
    move LS_TAB_LIST-R_GATE to LR_GATE.
  endif.

  R_OLD_GATE = LR_GATE.

  ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                               IF_DYNNR = IF_DYNNR ).

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***   Modify Scree using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

      loop at screen.
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

      loop at screen.
***         Set the Tabs which aren't in use as invisible.
        if SCREEN-NAME cs C_TABNAME.
          read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
          if SY-SUBRC ne 0.
            move 1 to SCREEN-INVISIBLE.
          endif.
        endif.
        modify screen.
      endloop.

      loop at screen.
***     Set tabs back to input
        if SCREEN-NAME cs C_TABNAME.
          move 1 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

*** Check if the PR Class is bound
  check ME->R_PR_MANU is bound.

  if ME->F_ACTIVE_TAB ne ME->F_ACTIVE_TAB_OLD.
    move ME->F_ACTIVE_TAB to ME->F_ACTIVE_TAB_OLD.
    clear: ME->F_ALREADY_OPEN.
  endif.

  ME->INIT_VIS( ).
  ME->INIT_TAB_LIST( ).
  ME->DISPLAY_ACTIVE_TAB( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_MANU_VIS.

  data: LS_MSRS  type /VCXI/VSM_S_MSRS,
        LS_MSRWF type /VCXI/VSM_S_MSRWF.

*** Set Workcenter
  if ME->S_MANU_VIS-WERKS ne IS_MANU_VIS-WERKS or
      ME->S_MANU_VIS-ARBPL ne IS_MANU_VIS-ARBPL.
    ME->R_PR_MANU->SET_WERKS_ARBPL( IF_WERKS = IS_MANU_VIS-WERKS
                                    IF_ARBPL = IS_MANU_VIS-ARBPL
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_MANU_VIS-TEXT ne IS_MANU_VIS-TEXT.
    ME->R_PR_MANU->SET_TEXT( IF_TEXT = IS_MANU_VIS-TEXT
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Machine Speed and Run Waste Factor
  move-corresponding IS_MANU_VIS to: LS_MSRS,
                                     LS_MSRWF.

  if ME->S_MANU_VIS-MSRST ne IS_MANU_VIS-MSRST or
     ME->S_MANU_VIS-MSRSR ne IS_MANU_VIS-MSRSR.
    ME->R_PR_MANU->SET_MSRS(  IS_MSRS  = LS_MSRS
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_MANU_VIS-MSRWF ne IS_MANU_VIS-MSRWF.
    ME->R_PR_MANU->SET_MSRWF( IS_MSRWF = LS_MSRWF
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if IF_UCOMM cs C_TABNAME.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

  move IF_UCOMM to LF_UCOMM.
  ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_MANU.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method INIT_TAB_LIST.

  data:           LF_TAB             type         NUMC3,
                  LF_FNAME           type         STRING.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_GATE_CHILDS     type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF.
  field-symbols:  <S_TAB_LIST>       type         ZVCXI_XCSP_S_TAB_LIST,
                  <F_DESCR>          type         /VCXI/CKX_DESCR.

  free: ME->T_TAB_LIST,
        ME->S_MANU_TAB,
        LF_TAB.

***------------------------------------------------------------------
*** Get all Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = 'CHILD' ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE to LT_GATE_CHILDS.

  endloop.

*** Sort Childs
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILDS ).

  loop at LT_GATE_CHILDS into LR_GATE.

    check LR_GATE->GET_CLSUI( ) is not initial.

    append initial line to ME->T_TAB_LIST assigning <S_TAB_LIST>.
    add 1 to LF_TAB.
    concatenate C_TABNAME LF_TAB into <S_TAB_LIST>-TABNAME.
    move LR_GATE                   to <S_TAB_LIST>-R_GATE.

*** Set Activ Tab if it was set by default Gate
    if ME->R_DEFAULT_GATE is bound.
      if LR_GATE eq ME->R_DEFAULT_GATE or
         ME->R_DEFAULT_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
        if LR_GATE ne ME->R_OLD_GATE.
          move ABAP_FALSE to ME->F_ALREADY_OPEN.
        endif.
      endif.
*** Default gate is not bound but Gate of Activ Tab do not match
    else.
      if ME->F_ACTIVE_TAB eq <S_TAB_LIST>-TABNAME and
         ME->R_OLD_GATE   ne LR_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
    endif.

    concatenate C_TAB LF_TAB into LF_FNAME.
    assign component LF_FNAME of structure ME->S_MANU_TAB to <F_DESCR>.
    if SY-SUBRC eq 0.
      if <S_TAB_LIST>-R_GATE->R_CLSPR is bound.
        move <S_TAB_LIST>-R_GATE->R_CLSPR->GET_DESCR( ) to <F_DESCR>.
      else.
        move <S_TAB_LIST>-R_GATE->GET_DESCR( ) to <F_DESCR>.
      endif.
    endif.
  endloop.

*** Clear Default gate
  clear: ME->R_DEFAULT_GATE.

*** Check Active Tab exists
  if ME->F_ACTIVE_TAB cs C_TABNAME.
    read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                              transporting no fields.
    if SY-SUBRC ne 0.
      read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
      if SY-SUBRC eq 0.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      else.
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.
  endif.

endmethod.
method INIT_VIS.

  data: LS_MQTYI type ZVCXI_XCSP_S_MQTYI,
        LS_MQTYO type ZVCXI_XCSP_S_MQTYO,
        LS_MSRS  type /VCXI/VSM_S_MSRS,
        LS_MSRWF type /VCXI/VSM_S_MSRWF,
        LS_MSRTI type /VCXI/VSM_S_MSRTI,
        LS_MSRWA type /VCXI/VSM_S_MSRWA.

  free: ME->S_MANU_VIS.

*** Get Workcenter and Text
  ME->R_PR_MANU->GET_WERKS_ARBPL( importing EF_WERKS = ME->S_MANU_VIS-WERKS
                                            EF_ARBPL = ME->S_MANU_VIS-ARBPL ).
  ME->S_MANU_VIS-ARBPL_DESCR = ME->R_PR_MANU->GET_DESCR( ).
  move ME->R_PR_MANU->GET_TEXT( ) to ME->S_MANU_VIS-TEXT.

*** Get Machine Speed
  LS_MSRS = ME->R_PR_MANU->GET_MSRS( ).
  move-corresponding LS_MSRS to ME->S_MANU_VIS.

*** Get Operations Quantity and Machine Run Waste Factor
  LS_MQTYI = ME->R_PR_MANU->GET_MQTYI( ).
  move-corresponding LS_MQTYI to ME->S_MANU_VIS.
  LS_MQTYO = ME->R_PR_MANU->GET_MQTYO( ).
  move-corresponding LS_MQTYO to ME->S_MANU_VIS.
  LS_MSRWF = ME->R_PR_MANU->GET_MSRWF( ).
  move-corresponding LS_MSRWF to ME->S_MANU_VIS.

*** Get Run Time and Run Waste
  LS_MSRTI = ME->R_PR_MANU->GET_MSRTI( ).
  move-corresponding LS_MSRTI to ME->S_MANU_VIS.
  LS_MSRWA = ME->R_PR_MANU->GET_MSRWA( ).
  move-corresponding LS_MSRWA to ME->S_MANU_VIS.

*** Helper
  move ME->R_PR_MANU->GET_HELPN( ) to ME->S_MANU_VIS-HELPN.

endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
    ME->F_ALREADY_OPEN = ABAP_TRUE.
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
