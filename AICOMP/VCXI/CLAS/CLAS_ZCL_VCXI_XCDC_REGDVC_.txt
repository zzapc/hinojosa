
class ZCL_VCXI_XCDC_REGDVC definition
  public
  inheriting from /VCXI/CL_CKR_REGELMNT
  create public .

public section.

  interfaces ZIF_VCXI_XCDC_REGDVC_DEFAU .
  interfaces ZIF_VCXI_XCDC_REGDVC_FUNCT .
  interfaces ZIF_VCXI_XCDC_REGDVC_SCRGR .

  constants C_CDOCL_REGDVC type CDOBJECTCL value 'ZVCXI_XCD_RDVC' ##NO_TEXT.
  constants C_CDOID_REGDVC type CDOBJECTV value 'REGDVC' ##NO_TEXT.

  methods DO_CHECK
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GREGE type /VCXI/CKR_GREGE
      !IR_ELMTY type ref to /VCXI/CL_CKR_ELMTY
    raising
      /VCXI/CX_CKX .

  methods /VCXI/IF_CKX_OBJECT_WHEREUSED~GET_WHEREUSED
    redefinition .
  methods CHECK
    redefinition .
protected section.

  methods CHECK_VEXIT_FNAME
    importing
      !IF_FNAME type FUNCNAME
    raising
      /VCXI/CX_CKX .
  methods CHECK_DEXIT_FNAME
    importing
      !IF_FNAME type FUNCNAME
    raising
      /VCXI/CX_CKX .
  methods INIT_DEFAU
    raising
      /VCXI/CX_CKX .
  methods INIT_FUNCT
    raising
      /VCXI/CX_CKX .
  methods INIT_SCRGR
    raising
      /VCXI/CX_CKX .

  methods HANDLE_COPY
    redefinition .
  methods HANDLE_SAVE
    redefinition .
private section.

  methods BUILD_TC120T
    returning
      value(RT_TC120T) type ZVCXI_XCD_TT_TC120T
    raising
      /VCXI/CX_CKX .
  methods BUILD_TC110T
    returning
      value(RT_TC110T) type ZVCXI_XCD_TT_TC110T
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FUNCT_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_FUNCT .
  methods HANDLE_SCRGR_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_SCRGR .
  methods HANDLE_DEFAU_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_DEFAU .
endclass. "ZCL_VCXI_XCDC_REGDVC definition
class ZCL_VCXI_XCDC_REGDVC implementation.
method /VCXI/IF_CKX_OBJECT_WHEREUSED~GET_WHEREUSED.

  data:  LF_GREGE    type                   /VCXI/CKX_GUID,
         LF_GCODE    type                   ZVCXI_XCD_GCODE,
         LF_GUID     type                   /VCXI/CKX_GUID.
  data:  LT_GCODE    type standard table of ZVCXI_XCD_GCODE.
  data:  LR_CONDDEF  type ref to            ZCL_VCXI_XCDC_CONDDEF.

  RT_OBJECT = SUPER->/VCXI/IF_CKX_OBJECT_WHEREUSED~GET_WHEREUSED( ).

*** Get GUID of Registry Element
  LF_GREGE = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Select all current Condition definitions that ues this Registry Element
  select GCODE
         into table LT_GCODE
         from ZVCXI_XCD_TC200
        where GREGE eq LF_GREGE.

  loop at LT_GCODE into LF_GCODE.
*** Get GUID
    move LF_GCODE to LF_GUID.

**** Get Condition definition Elements to return
    LR_CONDDEF ?= ZCL_VCXI_XCDC_CONDDEF=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    append LR_CONDDEF to RT_OBJECT.
  endloop.

endmethod.
method BUILD_TC110T.

  data:          LS_REGDVC_SCRGR type ZVCXI_XCDC_S_REGDVC_SCRGR.
  field-symbols: <S_TC110T>      type ZVCXI_XCD_TC110T.

  loop at ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR into LS_REGDVC_SCRGR.
    append initial line to RT_TC110T assigning <S_TC110T>.
    move SY-MANDT                      to <S_TC110T>-MANDT.
    move ME->F_GREGE                   to <S_TC110T>-GREGE.
    move SY-LANGU                      to <S_TC110T>-LANGU.
    move-corresponding LS_REGDVC_SCRGR to <S_TC110T>.
  endloop.

endmethod.
method BUILD_TC120T.

  data:          LS_REGDVC_FUNCT type ZVCXI_XCDC_S_REGDVC_FUNCT.
  field-symbols: <S_TC120T>      type ZVCXI_XCD_TC120T.

  loop at ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT into LS_REGDVC_FUNCT.
    append initial line to RT_TC120T assigning <S_TC120T>.
    move SY-MANDT                      to <S_TC120T>-MANDT.
    move ME->F_GREGE                   to <S_TC120T>-GREGE.
    move SY-LANGU                      to <S_TC120T>-LANGU.
    move-corresponding LS_REGDVC_FUNCT to <S_TC120T>.
  endloop.

endmethod.
  method CHECK.

*** Perform Super Check
    SUPER->CHECK( ).

*** Perform DVC specific checks
    ME->DO_CHECK( ).

  endmethod.
method CHECK_DEXIT_FNAME.

  data:  LF_FUNCNAME          type                   RS38L-NAME,
         LF_EXCEPTION_CLASSES type                   ENLFDIR-EXTEN3.
  data:  LS_RSEXC             type                   RSEXC,
         LS_RSIMP             type                   RSIMP,
         LS_RSEXP             type                   RSEXP.
  data:  LT_RSEXC             type standard table of RSEXC,
         LT_RSIMP             type standard table of RSIMP,
         LT_RSEXP             type standard table of RSEXP,
         LT_RSCHA             type standard table of RSCHA,
         LT_RSTBL             type standard table of RSTBL.

  check IF_FNAME is not initial.

***----------------------------------------------------------------------------
*** Get Function Module Interface Definition
  move IF_FNAME to LF_FUNCNAME.
  call function 'FUNCTION_IMPORT_INTERFACE'
    exporting
      FUNCNAME           = LF_FUNCNAME
    importing
      EXCEPTION_CLASSES  = LF_EXCEPTION_CLASSES
    tables
      EXCEPTION_LIST     = LT_RSEXC
      IMPORT_PARAMETER   = LT_RSIMP
      EXPORT_PARAMETER   = LT_RSEXP
      CHANGING_PARAMETER = LT_RSCHA
      TABLES_PARAMETER   = LT_RSTBL
    exceptions
      ERROR_MESSAGE      = 1
      FUNCTION_NOT_FOUND = 2
      INVALID_NAME       = 3
      others             = 4.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Check Exception
  if LT_RSEXC is not initial.
*** Only Class-based Exceptions
    if LF_EXCEPTION_CLASSES ne ABAP_TRUE.
***   Function Module &1: Only class-based Exceptions are supported.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '107'
                                            IF_MSGV1 = LF_FUNCNAME ).
    endif.
*** Only supported Exceptions
    loop at LT_RSEXC into LS_RSEXC where EXCEPTION ne '/VCXI/CX_CKX'.
***   Function Module &1: Class-based Exception &2 is not supported.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '108'
                                            IF_MSGV1 = LF_FUNCNAME
                                            IF_MSGV2 = LS_RSEXC-EXCEPTION ).
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Check Importing Parameter
  loop at LT_RSIMP into LS_RSIMP.
    case LS_RSIMP-PARAMETER.
      when 'IR_GATE'.
        if LS_RSIMP-TYP ne 'REF TO /VCXI/CL_VKSR_GATE'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSIMP-PARAMETER
                                                IF_MSGV3 = 'ABAP_BOOL' ).
        endif.
      when others.
***     Other Parameters have to be optional
        if LS_RSIMP-OPTIONAL ne ABAP_TRUE.
***       Function Module &1: Parameter &2 is only supported if optional.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '106'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSIMP-PARAMETER ).
        endif.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Check Exporting Parameter
  loop at LT_RSEXP into LS_RSEXP.
    case LS_RSEXP-PARAMETER.
      when others.
***     Function Module &1: Parameter &1 is not supported.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCDC'
                                              IF_MSGNO = '104'
                                              IF_MSGV1 = LF_FUNCNAME
                                              IF_MSGV2 = LS_RSEXP-PARAMETER ).
    endcase.
  endloop.

endmethod.
method CHECK_VEXIT_FNAME.

  data:  LF_FUNCNAME          type                   RS38L-NAME,
         LF_EXCEPTION_CLASSES type                   ENLFDIR-EXTEN3.
  data:  LS_RSEXC             type                   RSEXC,
         LS_RSIMP             type                   RSIMP,
         LS_RSEXP             type                   RSEXP,
         LS_RSCHA             type                   RSCHA.
  data:  LT_RSEXC             type standard table of RSEXC,
         LT_RSIMP             type standard table of RSIMP,
         LT_RSEXP             type standard table of RSEXP,
         LT_RSCHA             type standard table of RSCHA,
         LT_RSTBL             type standard table of RSTBL.

  check IF_FNAME is not initial.

***----------------------------------------------------------------------------
*** Get Function Module Interface Definition
  move IF_FNAME to LF_FUNCNAME.
  call function 'FUNCTION_IMPORT_INTERFACE'
    exporting
      FUNCNAME           = LF_FUNCNAME
    importing
      EXCEPTION_CLASSES  = LF_EXCEPTION_CLASSES
    tables
      EXCEPTION_LIST     = LT_RSEXC
      IMPORT_PARAMETER   = LT_RSIMP
      EXPORT_PARAMETER   = LT_RSEXP
      CHANGING_PARAMETER = LT_RSCHA
      TABLES_PARAMETER   = LT_RSTBL
    exceptions
      ERROR_MESSAGE      = 1
      FUNCTION_NOT_FOUND = 2
      INVALID_NAME       = 3
      others             = 4.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Check Exception
  if LT_RSEXC is not initial.
*** Only Class-based Exceptions
    if LF_EXCEPTION_CLASSES ne ABAP_TRUE.
***   Function Module &1: Only class-based Exceptions are supported.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '107'
                                            IF_MSGV1 = LF_FUNCNAME ).
    endif.
*** Only supported Exceptions
    loop at LT_RSEXC into LS_RSEXC where EXCEPTION ne '/VCXI/CX_CKX'.
***   Function Module &1: Class-based Exception &2 is not supported.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '108'
                                            IF_MSGV1 = LF_FUNCNAME
                                            IF_MSGV2 = LS_RSEXC-EXCEPTION ).
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Check Importing Parameter
  loop at LT_RSIMP into LS_RSIMP.
    case LS_RSIMP-PARAMETER.
      when 'IR_GATE'.
        if LS_RSIMP-TYP ne 'REF TO /VCXI/CL_VKSR_GATE'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSIMP-PARAMETER
                                                IF_MSGV3 = 'REF TO /VCXI/CL_VKSR_GATE' ).
        endif.
      when 'IF_PARID'.
        if LS_RSIMP-TYP ne '/VCXI/VKS_PARID'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSIMP-PARAMETER
                                                IF_MSGV3 = '/VCXI/VKS_PARID' ).
        endif.
      when others.
***     Other Parameters have to be optional
        if LS_RSIMP-OPTIONAL ne ABAP_TRUE.
***       Function Module &1: Parameter &2 is only supported if optional.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '106'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSIMP-PARAMETER ).
        endif.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Check Changing Parameter
  loop at LT_RSCHA into LS_RSCHA.
    case LS_RSCHA-PARAMETER.
      when 'CF_VALUE'.
        if LS_RSCHA-TYP ne 'ANY'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSCHA-PARAMETER
                                                IF_MSGV3 = 'ANY' ).
        endif.
      when 'CF_VALUE_UOM'.
        if LS_RSCHA-TYP ne 'UNIT'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSCHA-PARAMETER
                                                IF_MSGV3 = 'UNIT' ).
        endif.
      when 'CF_VALUE_CURR'.
        if LS_RSCHA-TYP ne 'WAERS'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSCHA-PARAMETER
                                                IF_MSGV3 = 'UNIT' ).
        endif.
      when 'CF_SETBY'.
        if LS_RSCHA-TYP ne '/VCXI/VKSR_SETBY'.
***       Function Module &1: Parameter &2 requires 'TYPE &3'.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '105'
                                                IF_MSGV1 = LF_FUNCNAME
                                                IF_MSGV2 = LS_RSCHA-PARAMETER
                                                IF_MSGV3 = '/VCXI/VKSR_SETBY' ).
        endif.
      when others.
***     Function Module &1: Parameter &1 is not supported.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCDC'
                                              IF_MSGNO = '104'
                                              IF_MSGV1 = LF_FUNCNAME
                                              IF_MSGV2 = LS_RSCHA-PARAMETER ).
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Check Exporting Parameter
  loop at LT_RSEXP into LS_RSEXP.
    case LS_RSEXP-PARAMETER.
      when others.
***     Function Module &1: Parameter &1 is not supported.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCDC'
                                              IF_MSGNO = '104'
                                              IF_MSGV1 = LF_FUNCNAME
                                              IF_MSGV2 = LS_RSEXP-PARAMETER ).
    endcase.
  endloop.

endmethod.
method CONSTRUCTOR.

***------------------------------------------------------------------------------------------------
  SUPER->CONSTRUCTOR( IF_GREGE = IF_GREGE
                      IR_ELMTY = IR_ELMTY ).

***------------------------------------------------------------------------------------------------
*** Load DB
  ME->LOAD_FROM_DB( ).

  set handler ME->HANDLE_SCRGR_CHANGED for ME.
  set handler ME->HANDLE_FUNCT_CHANGED for ME.
  set handler ME->HANDLE_DEFAU_CHANGED for ME.

endmethod.
method DO_CHECK.

  data: LF_GUID             type         /VCXI/CKX_GUID.
  data: LS_REGDVC_DEFAUEL   type         ZVCXI_XCDC_S_REGDVC_DEFAUEL,
        LS_REGDVC_DEFAUELEX type         ZVCXI_XCDC_S_REGDVC_DEFAUELEX,
        LS_REGDVC_DEFAUEX   type         ZVCXI_XCDC_S_REGDVC_DEFAUEX.

  check ME->F_DELETED ne ABAP_TRUE.

*** Do Check of Default Elements
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL into LS_REGDVC_DEFAUEL.

*** Check DataElement
    call function 'DDIF_FIELDLABEL_GET'
      exporting
        TABNAME        = LS_REGDVC_DEFAUEL-DATEL
        LANGU          = SY-LANGU
        LFIELDNAME     = ' '
      exceptions
        NOT_FOUND      = 1
        INTERNAL_ERROR = 2
        others         = 3.
    if SY-SUBRC <> 0.
***   DataElement &1 is not Valid. Please check
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '040'
                                            IF_MSGV1 = LS_REGDVC_DEFAUEL-DATEL ).
    endif.

*** Check Parameter ID
    if LS_REGDVC_DEFAUEL-PARID ne 'LEOKY'.
      move LS_REGDVC_DEFAUEL-PARID to LF_GUID.
      /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    endif.
  endloop.

*** Do Check of Default Value Exit Entries
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX into LS_REGDVC_DEFAUELEX.

*** Check Function Name
    ME->CHECK_VEXIT_FNAME( IF_FNAME = LS_REGDVC_DEFAUELEX-FNAME ).

  endloop.

*** Do Check of Default Exit Entries
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX into LS_REGDVC_DEFAUEX.

*** Check Function Name
    ME->CHECK_DEXIT_FNAME( IF_FNAME = LS_REGDVC_DEFAUEX-FNAME ).

  endloop.

endmethod.
method HANDLE_COPY.

  data:  LR_REGDVC     type ref to ZCL_VCXI_XCDC_REGDVC.

  RR_REGELMNT = SUPER->HANDLE_COPY( ).

  try.
      move RR_REGELMNT ?to LR_REGDVC.

***   Copy diretly: Screen Groups
      move ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR.
      move ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF.

***   Copy diretly: Functions
      move ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT.

***   Copy diretly: Defaults
      move ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL.
      move ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX.
      move ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX
        to LR_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX.

    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_REGDVC.
  endtry.

endmethod.
method HANDLE_DEFAU_CHANGED .

*** Change Events
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FUNCT_CHANGED .

*** Change Events
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_SAVE.

  data: LT_TC110T type  ZVCXI_XCD_TT_TC110T,
        LT_TC120T type  ZVCXI_XCD_TT_TC120T.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Call Super Save
  SUPER->HANDLE_SAVE( ).

***----------------------------------------------------------------------------
*** Get Description Tables
  LT_TC110T = ME->BUILD_TC110T( ).
  LT_TC120T = ME->BUILD_TC120T( ).

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.

*** Save DynamicVC Registry Element
    call function 'ZVCXI_XCDC_DB_SAVE_REGDVC'
      in update task
      exporting
        IF_GREGE            = ME->F_GREGE
        IT_REGDVC_SCRGR     = ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR
        IT_REGDVC_SCRGRDEF  = ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
        IT_REGDVC_FUNCT     = ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT
        IT_REGDVC_DEFAUEL   = ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL
        IT_REGDVC_DEFAUELEX = ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX
        IT_REGDVC_DEFAUEX   = ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX
        IT_TC110T           = LT_TC110T
        IT_TC120T           = LT_TC120T.
  else.
*** Delete DynamicV Registry Element
    call function 'ZVCXI_XCDC_DB_DEL_REGDVC'
      in update task
      exporting
        IF_GREGE = ME->F_GREGE.
  endif.

endmethod.
method HANDLE_SCRGR_CHANGED .

*** Change Events
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_DEFAU.

  data:           LT_TC130             type table of ZVCXI_XCD_TC130,
                  LT_TC131             type table of ZVCXI_XCD_TC131,
                  LT_TC140             type table of ZVCXI_XCD_TC140.
  field-symbols:  <S_TC130>            type          ZVCXI_XCD_TC130,
                  <S_REGDVC_DEFAUEL>   type          ZVCXI_XCDC_S_REGDVC_DEFAUEL,
                  <S_TC131>            type          ZVCXI_XCD_TC131,
                  <S_REGDVC_DEFAUELEX> type          ZVCXI_XCDC_S_REGDVC_DEFAUELEX,
                  <S_TC140>            type          ZVCXI_XCD_TC140,
                  <S_REGDVC_DEFAUEX>   type          ZVCXI_XCDC_S_REGDVC_DEFAUEX.

***------------------------------------------------------------------------------------------------
*** Default Element
  free: ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL.

  select * into table LT_TC130
           from ZVCXI_XCD_TC130
          where GREGE eq ME->F_GREGE.

  loop at LT_TC130 assigning <S_TC130>.
    append initial line to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL assigning <S_REGDVC_DEFAUEL>.
    move-corresponding <S_TC130> to <S_REGDVC_DEFAUEL>.
  endloop.


***------------------------------------------------------------------------------------------------
*** Default Element Exit
  free: ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX.

  select * into table LT_TC131
           from ZVCXI_XCD_TC131
          where GREGE eq ME->F_GREGE.

  loop at LT_TC131 assigning <S_TC131>.
    append initial line to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX assigning <S_REGDVC_DEFAUELEX>.
    move-corresponding <S_TC131> to <S_REGDVC_DEFAUELEX>.
  endloop.


***------------------------------------------------------------------------------------------------
*** Verify Default Element Exit
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX assigning <S_REGDVC_DEFAUELEX>.
*** Verify Default Element
    read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL with key PARID = <S_REGDVC_DEFAUELEX>-PARID
                                                             transporting no fields.
    if SY-SUBRC ne 0.
      delete ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX.
      continue.
    endif.

  endloop.

***------------------------------------------------------------------------------------------------
*** Default Exit
  free: ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX.

  select * into table LT_TC140
           from ZVCXI_XCD_TC140
          where GREGE eq ME->F_GREGE.

  loop at LT_TC140 assigning <S_TC140>.
    append initial line to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX assigning <S_REGDVC_DEFAUEX>.
    move-corresponding <S_TC140> to <S_REGDVC_DEFAUEX>.
  endloop.

endmethod.
method INIT_FUNCT.

  data:           LS_TC120T            type          ZVCXI_XCD_TC120T.
  data:           LT_TC120             type table of ZVCXI_XCD_TC120,
                  LT_TC120T            type table of ZVCXI_XCD_TC120T.
  field-symbols:  <S_TC120>            type          ZVCXI_XCD_TC120,
                  <S_REGDVC_FUNCT>     type          ZVCXI_XCDC_S_REGDVC_FUNCT.

***------------------------------------------------------------------------------------------------
*** Screen Group
  free: ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT.

  select * into table LT_TC120
           from ZVCXI_XCD_TC120
          where GREGE eq ME->F_GREGE.

  select * into table LT_TC120T
           from ZVCXI_XCD_TC120T
          where GREGE eq ME->F_GREGE
            and LANGU eq SY-LANGU.

  loop at LT_TC120 assigning <S_TC120>.
    append initial line to ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT assigning <S_REGDVC_FUNCT>.
    move-corresponding <S_TC120> to <S_REGDVC_FUNCT>.

    read table LT_TC120T into LS_TC120T with key GREGE = ME->F_GREGE
                                                 IFUNC = <S_REGDVC_FUNCT>-IFUNC.
    if SY-SUBRC = 0.
      move LS_TC120T-DESCR to <S_REGDVC_FUNCT>-DESCR.
    endif.

  endloop.

endmethod.
method INIT_SCRGR.

  field-symbols:  <S_REGDVC_SCRGRDEF>  type          ZVCXI_XCDC_S_REGDVC_SCRGRDEF.

***------------------------------------------------------------------------------------------------
*** Screen Group
  free: ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR.

  select ZVCXI_XCD_TC110~ISCGR ZVCXI_XCD_TC110T~DESCR
         into table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR
         from ZVCXI_XCD_TC110
         left outer join ZVCXI_XCD_TC110T
          on  ZVCXI_XCD_TC110T~GREGE eq ZVCXI_XCD_TC110~GREGE
          and ZVCXI_XCD_TC110T~ISCGR eq ZVCXI_XCD_TC110~ISCGR
          and ZVCXI_XCD_TC110T~LANGU eq SY-LANGU
        where ZVCXI_XCD_TC110~GREGE  eq ME->F_GREGE.

***------------------------------------------------------------------------------------------------
*** Screen Group Definition
  free: ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF.

  select * into corresponding fields of table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
           from ZVCXI_XCD_TC111
          where GREGE eq ME->F_GREGE.

***------------------------------------------------------------------------------------------------
*** Verify Screen Group Definition
  loop at ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF assigning <S_REGDVC_SCRGRDEF>.
*** Verify Screen Group
    read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR with key ISCGR = <S_REGDVC_SCRGRDEF>-ISCGR
                                                             transporting no fields.
    if SY-SUBRC ne 0.
      delete ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF.
      continue.
    endif.

  endloop.

endmethod.
method LOAD_FROM_DB.

  data:  LF_COUNT   type I.

*** Load Header
  select count(*)
         into LF_COUNT
         from ZVCXI_XCD_TC100
        where GREGE eq ME->F_GREGE.
  check SY-SUBRC eq 0.

*** Load Screen Groups
  ME->INIT_SCRGR( ).

*** Load Functions
  ME->INIT_FUNCT( ).

*** Load Defaults
  ME->INIT_DEFAU( ).

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~ADD_ELMNT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_DEFAUEL-PARID is initial.
*** Default Element without ID can not be added.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '020' ).
  endif.

*** Check for duplicates
  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL with key PARID = IS_REGDVC_DEFAUEL-PARID
                                                             transporting no fields.

  if SY-SUBRC eq 0.
*** Default Element & already exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '021'
                                          IF_MSGV1 = IS_REGDVC_DEFAUEL-PARID ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Add Default Element
  append IS_REGDVC_DEFAUEL to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Default Element
  raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~ADD_ELMNTEXIT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX with key PARID  = IS_REGDVC_DEFAUELEX-PARID
                                                                        IEXIT  = IS_REGDVC_DEFAUELEX-IEXIT
                                                               transporting no fields.

  if SY-SUBRC eq 0.
*** Default Element & Exit & already exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '022'
                                          IF_MSGV1 = IS_REGDVC_DEFAUELEX-PARID
                                          IF_MSGV2 = IS_REGDVC_DEFAUELEX-IEXIT ).
  endif.

  append IS_REGDVC_DEFAUELEX to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Screen Group
  raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~ADD_EXIT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_DEFAUEX-IEXIT is initial.
*** Default Exit without ID can not be added.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '023' ).
  endif.

*** Check for duplicates
  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX with key IEXIT = IS_REGDVC_DEFAUEX-IEXIT
                                                             transporting no fields.

  if SY-SUBRC eq 0.
*** Default Exit & already exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '024'
                                          IF_MSGV1 = IS_REGDVC_DEFAUEX-IEXIT ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Add Default Element
  append IS_REGDVC_DEFAUEX to ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Default Element
  raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGE_ELMNT.

  field-symbols: <S_REGDVC_DEFAUEL> type ZVCXI_XCDC_S_REGDVC_DEFAUEL.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_DEFAUEL-PARID is initial.
*** Default Element without ID can not be changed.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '027' ).
  endif.

*** Read right Entry
  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL assigning <S_REGDVC_DEFAUEL>
    with key PARID = IS_REGDVC_DEFAUEL-PARID.

  if SY-SUBRC ne 0.
*** Default Element & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '025'
                                          IF_MSGV1 = IS_REGDVC_DEFAUEL-PARID ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Change Default Element
  check IS_REGDVC_DEFAUEL ne <S_REGDVC_DEFAUEL>.
  move-corresponding IS_REGDVC_DEFAUEL to <S_REGDVC_DEFAUEL>.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Default Element
  raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.


endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGE_EXIT.

  field-symbols: <S_REGDVC_DEFAUEX> type ZVCXI_XCDC_S_REGDVC_DEFAUEX.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_DEFAUEX-IEXIT is initial.
*** Default Exit without ID can not be changed.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '028' ).
  endif.

*** Check for duplicates
  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX assigning <S_REGDVC_DEFAUEX>
    with key IEXIT = IS_REGDVC_DEFAUEX-IEXIT.

  if SY-SUBRC ne 0.
*** Default Exit & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '026'
                                          IF_MSGV1 = IS_REGDVC_DEFAUEX-IEXIT ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Change Default Element
  check IS_REGDVC_DEFAUEX ne <S_REGDVC_DEFAUEX>.
  move-corresponding IS_REGDVC_DEFAUEX to <S_REGDVC_DEFAUEX>.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Default Element
  raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~DELETE_ELMNT.

  data:  LS_REGDVC_DEFAUELEX  type ZVCXI_XCDC_S_REGDVC_DEFAUELEX.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL with key PARID = IF_PARID
                                                             transporting no fields.

  if SY-SUBRC ne 0.
*** Default Element & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '025'
                                          IF_MSGV1 = IF_PARID ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Delete Default Element from all Default Element Definitions
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX into LS_REGDVC_DEFAUELEX
    where PARID eq IF_PARID.
    ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~DELETE_ELMNTEXIT( IS_REGDVC_DEFAUELEX = LS_REGDVC_DEFAUELEX ).
  endloop.

***---------------------------------------------------------------------------------------------------------------
*** Delete Default Element itself
  delete ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL where PARID = IF_PARID.
  if SY-SUBRC eq 0.
*** Raise Change Default Element
    raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.
  else.
*** Default Element & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '025'
                                          IF_MSGV1 = IF_PARID ).
  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~DELETE_ELMNTEXIT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  delete ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX where PARID eq IS_REGDVC_DEFAUELEX-PARID
                                                             and IEXIT eq IS_REGDVC_DEFAUELEX-IEXIT.

  if SY-SUBRC eq 0.
*** Raise Change Screen Group
    raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.
  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~DELETE_EXIT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX with key IEXIT = IF_IEXIT
                                                             transporting no fields.

  if SY-SUBRC ne 0.
*** Default Exit & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '026'
                                          IF_MSGV1 = IF_IEXIT ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Delete Default Exit itself
  delete ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX where IEXIT = IF_IEXIT.
  if SY-SUBRC eq 0.
*** Raise Change Default Exit
    raise event ZIF_VCXI_XCDC_REGDVC_DEFAU~CHANGED.
  else.
*** Default Exit & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '026'
                                          IF_MSGV1 = IF_IEXIT ).
  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~DO_CHECK.

  data: LF_GUID             type         /VCXI/CKX_GUID.
  data: LS_REGDVC_DEFAUEL   type         ZVCXI_XCDC_S_REGDVC_DEFAUEL,
        LS_REGDVC_DEFAUELEX type         ZVCXI_XCDC_S_REGDVC_DEFAUELEX,
        LS_REGDVC_DEFAUEX   type         ZVCXI_XCDC_S_REGDVC_DEFAUEX.

  check ME->F_DELETED ne ABAP_TRUE.

*** Do Check of Default Elements
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL into LS_REGDVC_DEFAUEL.

*** Check DataElement
    call function 'DDIF_FIELDLABEL_GET'
      exporting
        TABNAME        = LS_REGDVC_DEFAUEL-DATEL
        LANGU          = SY-LANGU
        LFIELDNAME     = ' '
      exceptions
        NOT_FOUND      = 1
        INTERNAL_ERROR = 2
        others         = 3.
    if SY-SUBRC <> 0.
***   DataElement &1 is not Valid. Please check
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCDC'
                                            IF_MSGNO = '040'
                                            IF_MSGV1 = LS_REGDVC_DEFAUEL-DATEL ).
    endif.

*** Check Parameter ID
    if LS_REGDVC_DEFAUEL-PARID ne 'LEOKY'.
      move LS_REGDVC_DEFAUEL-PARID to LF_GUID.
      /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    endif.
  endloop.

*** Do Check of Default Value Exit Entries
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX into LS_REGDVC_DEFAUELEX.

*** Check Function Name
    ME->CHECK_VEXIT_FNAME( IF_FNAME = LS_REGDVC_DEFAUELEX-FNAME ).

  endloop.

*** Do Check of Default Exit Entries
  loop at ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX into LS_REGDVC_DEFAUEX.

*** Check Function Name
    ME->CHECK_DEXIT_FNAME( IF_FNAME = LS_REGDVC_DEFAUEX-FNAME ).

  endloop.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~GET_ACTIONS_ELMNT.

  data:  LF_PARID_FOUND      type        ABAP_BOOL,
         LF_DISABLED         type        CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IF_PARID is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL
         with key PARID = IF_PARID
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_PARID_FOUND.
    else.
      move ABAP_FALSE   to LF_PARID_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Default Element
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_ELMNT
                         TEXT        = 'Add Default Element'(F41)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_PARID_FOUND eq ABAP_TRUE.
*** Change Default Element
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_CHANGE_ELMNT
                           TEXT        = 'Change Default Element'(F43)
                           DISABLED    = LF_DISABLED ).

*** Delete Default Element
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_ELMNT
                           TEXT        = 'Delete Default Element'(F42)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~GET_ACTIONS_ELMNTEXIT.

  data:  LF_SCRGRDEF_FOUND    type ABAP_BOOL,
         LF_DISABLED          type CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IS_REGDVC_DEFAUELEX is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX
         with key PARID = IS_REGDVC_DEFAUELEX-PARID
                  IEXIT = IS_REGDVC_DEFAUELEX-IEXIT
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_SCRGRDEF_FOUND.
    else.
      move ABAP_FALSE   to LF_SCRGRDEF_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Default Element Exit
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_ELMNTEXIT
                         TEXT        = 'Add Default Element Exit'(F51)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_SCRGRDEF_FOUND eq ABAP_TRUE.
*** Delete Default Element Exit
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_ELMNTEXIT
                           TEXT        = 'Delete Default Element Exit'(F52)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_DEFAU~GET_ACTIONS_EXIT.

  data:  LF_IEXIT_FOUND      type        ABAP_BOOL,
         LF_DISABLED         type        CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IF_IEXIT is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX
         with key IEXIT = IF_IEXIT
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_IEXIT_FOUND.
    else.
      move ABAP_FALSE   to LF_IEXIT_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Default Exit
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_EXIT
                         TEXT        = 'Add Default Exit'(F61)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_IEXIT_FOUND eq ABAP_TRUE.
*** Delete Default Exit
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_EXIT
                           TEXT        = 'Delete Default Exit'(F62)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_FUNCT~ADD.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_FUNCT-IFUNC is initial.
*** Function without ID can not be added.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '010' ).
  endif.

*** Check for duplicates
  read table ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT with key IFUNC = IS_REGDVC_FUNCT-IFUNC
                                                           transporting no fields.

  if SY-SUBRC eq 0.
*** Function & already exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '011'
                                          IF_MSGV1 = IS_REGDVC_FUNCT-IFUNC ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Add Function
  append IS_REGDVC_FUNCT to ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Function
  raise event ZIF_VCXI_XCDC_REGDVC_FUNCT~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_FUNCT~CHANGE.

  field-symbols: <S_REGDVC_FUNCT> type ZVCXI_XCDC_S_REGDVC_FUNCT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_FUNCT-IFUNC is initial.
*** Function without ID can not be changed.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '013' ).
  endif.

*** Read right Entry
  read table ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT assigning <S_REGDVC_FUNCT>
    with key IFUNC = IS_REGDVC_FUNCT-IFUNC.

  if SY-SUBRC ne 0.
*** Function & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '012'
                                          IF_MSGV1 = IS_REGDVC_FUNCT-IFUNC ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Change Function
  check IS_REGDVC_FUNCT ne <S_REGDVC_FUNCT>.
  move-corresponding IS_REGDVC_FUNCT to <S_REGDVC_FUNCT>.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Function
  raise event ZIF_VCXI_XCDC_REGDVC_FUNCT~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_FUNCT~DELETE.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT with key IFUNC = IF_IFUNC
                                                           transporting no fields.

  if SY-SUBRC ne 0.
*** Function & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '012'
                                          IF_MSGV1 = IF_IFUNC ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Delete Function
  delete ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT where IFUNC = IF_IFUNC.
  if SY-SUBRC eq 0.
*** Raise Change Function
    raise event ZIF_VCXI_XCDC_REGDVC_FUNCT~CHANGED.
  else.
*** Function & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '012'
                                          IF_MSGV1 = IF_IFUNC ).
  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_FUNCT~GET_ACTIONS_FUNCT.

  data:  LF_IFUNC_FOUND      type        ABAP_BOOL,
         LF_DISABLED         type        CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IF_IFUNC is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT
         with key IFUNC = IF_IFUNC
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_IFUNC_FOUND.
    else.
      move ABAP_FALSE   to LF_IFUNC_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Function
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_ADD
                         TEXT        = 'Add Function'(F31)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_IFUNC_FOUND eq ABAP_TRUE.
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.
*** Delete Function

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_DEL
                           TEXT        = 'Delete Function'(F32)
                           DISABLED    = LF_DISABLED ).

*** Change Function
    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_CHANGE
                           TEXT        = 'Change Function'(F33)
                           DISABLED    = LF_DISABLED ).

*** Switch Function Active
    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_SWITCH_ACTIVE
                           TEXT        = 'Switch Function Active'(F34)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_FUNCT~SWITCH_ACTIVE.

  field-symbols: <S_REGDVC_FUNCT>    type ZVCXI_XCDC_S_REGDVC_FUNCT.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT
    assigning <S_REGDVC_FUNCT>
    with key IFUNC = IF_IFUNC.

  if SY-SUBRC ne 0.
*** Function & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '012'
                                          IF_MSGV1 = IF_IFUNC ).
  endif.

  move IF_FUNAC to <S_REGDVC_FUNCT>-FUNAC.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Function
  raise event ZIF_VCXI_XCDC_REGDVC_FUNCT~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~ADD.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_SCRGR-ISCGR is initial.
*** Screen Group without ID can not be added.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '001' ).
  endif.

*** Check for duplicates
  read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR with key ISCGR = IS_REGDVC_SCRGR-ISCGR
                                                           transporting no fields.

  if SY-SUBRC eq 0.
*** Screen Group & already exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '002'
                                          IF_MSGV1 = IS_REGDVC_SCRGR-ISCGR ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Add Screen Group
  append IS_REGDVC_SCRGR to ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Screen Group
  raise event ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~ADD_SCRGRDEF.

  data: LF_ISCGR           type        ZVCXI_XCD_ISCGR.
  data: LT_REGDVC_SCRGRDEF type        ZVCXI_XCDC_TT_REGDVC_SCRGRDEF.
  data: LS_REGDVC_SCRGRDEF type        ZVCXI_XCDC_S_REGDVC_SCRGRDEF.
  data: LR_CX_CKX          type ref to /VCXI/CX_CKX.

  move IT_REGDVC_SCRGRDEF to LT_REGDVC_SCRGRDEF.
  delete LT_REGDVC_SCRGRDEF where ISCGR is initial.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  loop at LT_REGDVC_SCRGRDEF into LS_REGDVC_SCRGRDEF.
    move LS_REGDVC_SCRGRDEF-ISCGR to LF_ISCGR.

    try.
        read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF with key ISCGR  = LS_REGDVC_SCRGRDEF-ISCGR
                                                                             TSDEF  = LS_REGDVC_SCRGRDEF-TSDEF
                                                                             ISDEF  = LS_REGDVC_SCRGRDEF-ISDEF
                                                                      transporting no fields.

        if SY-SUBRC eq 0.
***       Screen Group & definition & : & already exists.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCDC'
                                                IF_MSGNO = '003'
                                                IF_MSGV1 = LS_REGDVC_SCRGRDEF-ISCGR
                                                IF_MSGV2 = LS_REGDVC_SCRGRDEF-TSDEF
                                                IF_MSGV3 = LS_REGDVC_SCRGRDEF-ISDEF ).
        endif.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        delete LT_REGDVC_SCRGRDEF.
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
    endtry.

  endloop.

  sort ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF by ISCGR CSDEF.
  append lines of LT_REGDVC_SCRGRDEF to ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF.

*** Reorg Screen Group definition
  ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~REORG_SCRGRDEF( IF_ISCGR = LF_ISCGR ).

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Screen Group
  raise event ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGE.

  field-symbols: <S_REGDVC_SCRGR> type ZVCXI_XCDC_S_REGDVC_SCRGR.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check mandatory Info
  if IS_REGDVC_SCRGR-ISCGR is initial.
*** Screen Group without ID can not be changed.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '005' ).
  endif.

*** Read right Entry
  read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR assigning <S_REGDVC_SCRGR>
    with key ISCGR = IS_REGDVC_SCRGR-ISCGR.

  if SY-SUBRC ne 0.
*** Screen Group & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '004'
                                          IF_MSGV1 = IS_REGDVC_SCRGR-ISCGR ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Change Screen Group
  check IS_REGDVC_SCRGR ne <S_REGDVC_SCRGR>.
  move-corresponding IS_REGDVC_SCRGR to <S_REGDVC_SCRGR>.

***---------------------------------------------------------------------------------------------------------------
*** Raise Change Screen Group
  raise event ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGED.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~DELETE.

  data:  LS_REGDVC_SCRGRDEF type ZVCXI_XCDC_S_REGDVC_SCRGRDEF.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR with key ISCGR = IF_ISCGR
                                                           transporting no fields.

  if SY-SUBRC ne 0.
*** Screen Group & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '004'
                                          IF_MSGV1 = IF_ISCGR ).
  endif.

***---------------------------------------------------------------------------------------------------------------
*** Delete Screen Group from all Screen Group Definitions
  loop at ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF into LS_REGDVC_SCRGRDEF
    where ISCGR eq IF_ISCGR.
    ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~DELETE_SCRGRDEF( IS_REGDVC_SCRGRDEF = LS_REGDVC_SCRGRDEF ).
  endloop.

***---------------------------------------------------------------------------------------------------------------
*** Delete Screen Group itself
  delete ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR where ISCGR = IF_ISCGR.
  if SY-SUBRC eq 0.
*** Raise Change Screen Group
    raise event ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGED.
  else.
*** Screen Group & does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCDC'
                                          IF_MSGNO = '004'
                                          IF_MSGV1 = IF_ISCGR ).
  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~DELETE_SCRGRDEF.

***---------------------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  delete ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF where ISCGR eq IS_REGDVC_SCRGRDEF-ISCGR
                                                            and TSDEF eq IS_REGDVC_SCRGRDEF-TSDEF
                                                            and CSDEF eq IS_REGDVC_SCRGRDEF-CSDEF.

  if SY-SUBRC eq 0.
*** Raise Change Screen Group
    raise event ZIF_VCXI_XCDC_REGDVC_SCRGR~CHANGED.
  endif.

*** Reorg Screen Group definition
  ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~REORG_SCRGRDEF( IF_ISCGR = IS_REGDVC_SCRGRDEF-ISCGR ).

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~GET_ACTIONS_SCRGR.

  data:  LF_ISCGR_FOUND      type        ABAP_BOOL,
         LF_DISABLED         type        CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IF_ISCGR is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGR
         with key ISCGR = IF_ISCGR
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_ISCGR_FOUND.
    else.
      move ABAP_FALSE   to LF_ISCGR_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Screen Group
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD
                         TEXT        = 'Add new Screen Group'(F11)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_ISCGR_FOUND eq ABAP_TRUE.
*** Delete Screen Group
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_DEL
                           TEXT        = 'Delete Screen Group'(F12)
                           DISABLED    = LF_DISABLED ).


*** Change Screen Group
    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_CHANGE
                           TEXT        = 'Change Screen Group'(F13)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~GET_ACTIONS_SCRGRDEF.

  data:  LF_SCRGRDEF_FOUND    type ABAP_BOOL,
         LF_DISABLED          type CUA_ACTIVE.

***--------------------------------------------------------------------------------------
  if IS_REGDVC_SCRGRDEF is not initial.
    read table ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
         with key ISCGR = IS_REGDVC_SCRGRDEF-ISCGR
                  TSDEF = IS_REGDVC_SCRGRDEF-TSDEF
                  ISDEF = IS_REGDVC_SCRGRDEF-ISDEF
         transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE    to LF_SCRGRDEF_FOUND.
    else.
      move ABAP_FALSE   to LF_SCRGRDEF_FOUND.
    endif.
  endif.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Add Screen Group Definition
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

*** Single Add
  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF
                         TEXT        = 'Add Screen Group Definition'(F21)
                         DISABLED    = LF_DISABLED ).

*** Multi Add
  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF_MULTI
                         TEXT        = 'Add Screen Group Definition (multi)'(F23)
                         DISABLED    = LF_DISABLED ).

*** Multi Add Screen Fiels
  RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF_SF
                         TEXT        = 'Add Screen Group Definition (Scr Fields)'(F24)
                         DISABLED    = LF_DISABLED ).

***--------------------------------------------------------------------------------------
  if LF_SCRGRDEF_FOUND eq ABAP_TRUE.
*** Delete Screen Group Definition
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      move ABAP_FALSE to LF_DISABLED.
    else.
      move ABAP_TRUE  to LF_DISABLED.
    endif.

    RR_MENU->ADD_FUNCTION( FCODE       = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_DEL_DEF
                           TEXT        = 'Delete Screen Group Definition'(F22)
                           DISABLED    = LF_DISABLED ).

  endif.

endmethod.
method ZIF_VCXI_XCDC_REGDVC_SCRGR~REORG_SCRGRDEF.

  data:          LF_CSDEF            type ZVCXI_XCD_CSDEF.
  field-symbols: <S_REGDVC_SCRGRDEF> type ZVCXI_XCDC_S_REGDVC_SCRGRDEF.

  move ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~C_CSDEF_NULL to LF_CSDEF.

  loop at ME->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF assigning <S_REGDVC_SCRGRDEF>
  where ISCGR = IF_ISCGR.
    add 1 to LF_CSDEF.
*** Change Counter
    move LF_CSDEF to <S_REGDVC_SCRGRDEF>-CSDEF.
  endloop.

endmethod.
