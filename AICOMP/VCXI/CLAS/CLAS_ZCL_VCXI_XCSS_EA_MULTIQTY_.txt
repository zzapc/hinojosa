
class ZCL_VCXI_XCSS_EA_MULTIQTY definition
  public
  inheriting from /VCXI/CL_VKSR_CLSEA
  create public .

public section.

  interfaces /VCXI/IF_VKCR_EXPL_BOM .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CMQTY
    returning
      value(RF_CMQTY) type ZVCXI_XCSS_CMQTY
    raising
      /VCXI/CX_CKX .
  methods GET_QCALC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_QCALC type ZVCXI_XCSS_S_QCALC
    raising
      /VCXI/CX_CKX .
  methods GET_QITEM
    exporting
      value(ES_QITEM) type ZVCXI_XCSS_S_QITEM
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_QPOLS
    exporting
      !ES_QPOLS type ZVCXI_XCSS_S_QPOLS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_MMUSE
    returning
      value(RF_MMUSE) type ZVCXI_XCSS_MMUSE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods SET_QCALC
    importing
      !IS_QCALC type ZVCXI_XCSS_S_QCALC
      !IF_SETBY type /VCXI/VKSR_SETBY
      !IF_RAISE_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods SET_QITEM
    importing
      !IS_QITEM type ZVCXI_XCSS_S_QITEM
      !IF_SETBY type /VCXI/VKSR_SETBY
      !IF_RAISE_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods SET_QPOLS
    importing
      !IS_QPOLS type ZVCXI_XCSS_S_QPOLS
      !IF_SETBY type /VCXI/VKSR_SETBY
      !IF_RAISE_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods SET_MMUSE
    importing
      !IF_MMUSE type ZVCXI_XCSS_MMUSE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_RAISE_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_MULTIQTY type ref to ZCL_VCXI_XCSS_PR_MULTIQTY .
private section.
endclass. "ZCL_VCXI_XCSS_EA_MULTIQTY definition
class ZCL_VCXI_XCSS_EA_MULTIQTY implementation.
method /VCXI/IF_VKCR_EXPL_BOM~FILTER_CPBRG.

  data: LF_MMUSE type        ZVCXI_XCSS_MMUSE,
        LF_COUNT type        I.
  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MULTIQTY type ref to ZCL_VCXI_XCSS_PR_MULTIQTY,
        LR_APPDATA     type ref to ZCL_VCXI_XCS_APPDATA.

***------------------------------------------------------------------------------------------------
*** No Explosion if not used
  ME->R_PR_MULTIQTY->GET_MMUSE( importing EF_MMUSE = LF_MMUSE ).
  if LF_MMUSE ne ABAP_TRUE.
    free CT_CPBRG.
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Check Application Environment: Multi Quantity Explosion Allowed
  try.
      LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_APPDATA.
  endtry.
  if LR_APPDATA is bound.
    if not LINE_EXISTS( LR_APPDATA->T_APPE[ IAPPE = 'MQTY_EXPL_ALLOWED' ] ).
      free CT_CPBRG.
      exit.
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** No Explosion for first used Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY=>C_IPRVT_XCS_MULTIQTY
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    move LR_GATE->R_CLSPR ?to LR_PR_MULTIQTY.
    check LR_PR_MULTIQTY is bound.

*** Count used Quantities
    LR_PR_MULTIQTY->GET_MMUSE( importing EF_MMUSE = LF_MMUSE ).
    check LF_MMUSE eq ABAP_TRUE.
    add 1 to LF_COUNT.

*** Stop if own Quantity is reached.
    if LR_PR_MULTIQTY eq ME->R_PR_MULTIQTY.
      exit.
    endif.
  endloop.

*** Don't explode first used Quantity
  if LF_COUNT eq 1.
    free CT_CPBRG.
    exit.
  endif.

endmethod.
method /VCXI/IF_VKCR_EXPL_BOM~GET_BOM.

  data:  LS_QITEM     type ZVCXI_XCSS_S_QITEM.

*** Get Item Quantity
  ME->R_PR_MULTIQTY->GET_QITEM( importing ES_QITEM = LS_QITEM ).

*** BOM Consumption
  move LS_QITEM-QITEM               to RS_EXBOM-MENGE.
  move ABAP_TRUE                    to RS_EXBOM-MENGE_X.
  move LS_QITEM-QITEM_UOM           to RS_EXBOM-MEINS.
  move ABAP_TRUE                    to RS_EXBOM-MEINS_X.

*** Make it a FIX Quantity
  move ABAP_TRUE                    to RS_EXBOM-FMENG.
  move ABAP_TRUE                    to RS_EXBOM-FMENG_X.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
  try.
      move ME->R_GATE->R_CLSPR ?to ME->R_PR_MULTIQTY.
    catch CX_SY_MOVE_CAST_ERROR.
***   Element API ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '804'.
  endtry.

endmethod.
method GET_CMQTY.

  RF_CMQTY = ME->R_PR_MULTIQTY->GET_CMQTY( ).

endmethod.
method GET_MMUSE.

  ME->R_PR_MULTIQTY->GET_MMUSE( importing EF_MMUSE = RF_MMUSE ).

endmethod.
method GET_QCALC.

  ME->R_PR_MULTIQTY->GET_QCALC( importing ES_QCALC = ES_QCALC
                                          EF_SETBY = EF_SETBY ).

endmethod.
method GET_QITEM.

  ME->R_PR_MULTIQTY->GET_QITEM( importing ES_QITEM = ES_QITEM
                                          EF_SETBY = EF_SETBY ).

endmethod.
method GET_QPOLS.

  ME->R_PR_MULTIQTY->GET_QPOLS( importing ES_QPOLS = ES_QPOLS
                                          EF_SETBY = EF_SETBY ).

endmethod.
method SET_MMUSE.

  check ME->R_PR_MULTIQTY        is bound     and
        ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
  if IF_MMUSE is not initial.
    ME->R_PR_MULTIQTY->SET_MMUSE( exporting IF_MMUSE = IF_MMUSE
                                            IF_SETBY = IF_SETBY ).
  endif.

***----------------------------------------------------------------------------
*** Process Events
  if IF_RAISE_EVENTS eq ABAP_TRUE.
    ME->R_GATE->RAISE_EVENTS( ).
  endif.

endmethod.
method SET_QCALC.

  check ME->R_PR_MULTIQTY        is bound     and
        ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
  if IS_QCALC-QCALC is not initial.
    ME->R_PR_MULTIQTY->SET_QCALC( exporting IS_QCALC = IS_QCALC
                                            IF_SETBY = IF_SETBY ).
  endif.

***----------------------------------------------------------------------------
*** Process Events
  if IF_RAISE_EVENTS eq ABAP_TRUE.
    ME->R_GATE->RAISE_EVENTS( ).
  endif.

endmethod.
method SET_QITEM.

  check ME->R_PR_MULTIQTY        is bound     and
        ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
  if IS_QITEM-QITEM is not initial.
    ME->R_PR_MULTIQTY->SET_QITEM( exporting IS_QITEM = IS_QITEM
                                            IF_SETBY = IF_SETBY ).
  endif.

***----------------------------------------------------------------------------
*** Process Events
  if IF_RAISE_EVENTS eq ABAP_TRUE.
    ME->R_GATE->RAISE_EVENTS( ).
  endif.

endmethod.
method SET_QPOLS.

  check ME->R_PR_MULTIQTY        is bound     and
        ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***----------------------------------------------------------------------------
  if IS_QPOLS-QPOLS is not initial.
    ME->R_PR_MULTIQTY->SET_QPOLS( exporting IS_QPOLS = IS_QPOLS
                                            IF_SETBY = IF_SETBY ).
  endif.

***----------------------------------------------------------------------------
*** Process Events
  if IF_RAISE_EVENTS eq ABAP_TRUE.
    ME->R_GATE->RAISE_EVENTS( ).
  endif.

endmethod.
