
class ZCL_VCXI_FFSR_BL_PSTEP_STERI definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_STERI type /VCXI/VSMC_IPSTP value 'FF_PS_STERI' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_STERI
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data F_TSTER type ZVCXI_FFS_TSTER .
  data S_FIDIM_IN type ZVCXI_FFSP_S_FIDIM .
  data S_FIDIM_OUT type ZVCXI_FFSP_S_FIDIM .
  data S_WIDIM_IN type ZVCXI_FFSR_S_WIDIM .
  data S_WIDIM_OUT type ZVCXI_FFSR_S_WIDIM .

  methods FILL_SPVRE_ADDON_STERI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_STERI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_STERI) type ref to ZCL_VCXI_FFSS_PR_CSTEP_STERI
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_STERI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_STERI definition
class ZCL_VCXI_FFSR_BL_PSTEP_STERI implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

    data:          LS_RTE_SAVAL type /VCXI/VSMR_S_RTE_SAVAL.
    field-symbols: <S_AVVAL>    type /VCXI/VSMR_S_RTE_RANGE_AVVAL.

***--------------------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Aspect - Sterilization Type
    try.
        append initial line to LS_RTE_SAVAL-I_AVVAL assigning <S_AVVAL>.
        move 'I'            to <S_AVVAL>-SIGN.
        move 'EQ'           to <S_AVVAL>-OPTION.
        move ME->F_TSTER    to <S_AVVAL>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAVAL( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_STERI=>C_IAATY_TSTER
                                     II_AVVAL  = LS_RTE_SAVAL-I_AVVAL ).

      catch /VCXI/CX_CKX.                               "#EC NO_HANDLER

    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM         type        /VCXI/VSMC_LDUOM,
          LF_LDVAL         type        /VCXI/VSMR_LDVAL.
    data: LI_LVVAL         type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE         type        /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE         type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_LVVAL> type /VCXI/VSMR_S_RTE_RANGE_LVVAL.

    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***--------------------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).

***     Sterilization Type
        when 'FF_LT_VP_TSTER'.
          append initial line to LI_LVVAL assigning <S_LVVAL>.
          move 'I'                            to <S_LVVAL>-SIGN.
          move 'EQ'                           to <S_LVVAL>-OPTION.
          move ME->F_TSTER                    to <S_LVVAL>-LOW.

***     Winding Width( Inbound )
        when 'F0_LT_DI_WIWID'.
          move ME->S_WIDIM_IN-WIWID           to LF_LDVAL.
          move ME->S_WIDIM_IN-WIWID_UOM       to LF_LDUOM.

***     Winding Width( Outbound )
        when 'FF_LT_DO_WIWID'.
          move ME->S_WIDIM_OUT-WIWID          to LF_LDVAL.
          move ME->S_WIDIM_OUT-WIWID_UOM      to LF_LDUOM.

        when others.
          continue.
      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_STERI type ref to ZCL_VCXI_FFSR_BL_PSTEP_STERI.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_STERI.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->S_FIDIM_IN  eq LR_BL_PSTEP_STERI->S_FIDIM_IN and
       ME->S_FIDIM_OUT eq LR_BL_PSTEP_STERI->S_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_OUT eq LR_BL_PSTEP_STERI->S_WIDIM_OUT and
       ME->S_WIDIM_IN  eq LR_BL_PSTEP_STERI->S_WIDIM_IN.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Sterilization Type
    if ME->F_TSTER eq LR_BL_PSTEP_STERI->F_TSTER.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_STERI type ref to ZCL_VCXI_FFSR_BL_PSTEP_STERI.

*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_STERI.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->S_FIDIM_IN    to LR_BL_PSTEP_STERI->S_FIDIM_IN.
    move ME->S_FIDIM_OUT   to LR_BL_PSTEP_STERI->S_FIDIM_OUT.

*** Winding Dimensions
    move ME->S_WIDIM_OUT   to LR_BL_PSTEP_STERI->S_WIDIM_OUT.
    move ME->S_WIDIM_IN    to LR_BL_PSTEP_STERI->S_WIDIM_IN.

***--------------------------------------------------------------------------------------
*** Sterilization Type
    move ME->F_TSTER       to LR_BL_PSTEP_STERI->F_TSTER.

  endmethod.
  method DESERIALIZE.

    data: LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML   = LF_XML

                S_FIDIM_IN  = ME->S_FIDIM_IN
                S_FIDIM_OUT = ME->S_FIDIM_OUT
                S_WIDIM_OUT = ME->S_WIDIM_OUT
                S_WIDIM_IN  = ME->S_WIDIM_IN

                F_TSTER     = ME->F_TSTER.

*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'FF_AT_STERI'.
        ME->FILL_SPVRE_ADDON_STERI( exporting  IR_BL_RTESPV   = IR_BL_RTESPV
                                               IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                               IR_ARBPL       = IR_ARBPL
                                     changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_STERI.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.

*** Set Sterilization Type
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_STERI=>C_PARID_TSTER  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move ME->F_TSTER                                  to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method GET_ARBPL_INFO.

***--------------------------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***--------------------------------------------------------------------------------------
*** Standard
    move 'GRP_CONV'   to CF_ID_GRP.
    move 'ARBPL_CONV' to CF_ID_ARBPL.

***--------------------------------------------------------------------------------------
*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'GRP_CONV'       to CF_ID_GRP.
      move 'ARBPL_OUTSO'    to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_PRVDR_STERI.

    data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

*** Get Reference
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_STERI.
          if RR_PR_STERI is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LS_PARAM       type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element for Activity
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_STERI'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Sterilization Type
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_STERI=>C_PARID_TSTER  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move ME->F_TSTER                                  to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method INIT_BY_SPEC.


    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

*** Initialize Sterilization Data
    ME->INIT_BY_SPEC_STERI( IR_GATE  = IR_GATE
                            IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    data: LR_PR_STERI   type ref to ZCL_VCXI_FFSS_PR_CSTEP_STERI,
          LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Provider - Sterilization
    move ME->GET_PRVDR_STERI( IT_PRVDR = IT_PRVDR ) to LR_PR_STERI.
    check LR_PR_STERI is bound.

***--------------------------------------------------------------------------------------
*** Inbound Dimensions
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_IN-S_FIWID ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_IN-S_FITIN ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_IN-S_FITEX ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_IN-S_SURWT ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_IN-NOUPS ).

*** Get Winding Dimension Inbound
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width
      ME->S_WIDIM_IN-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_IN-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_IN-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_FITIN = ME->S_FIDIM_IN-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_IN-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_IN-S_SURWT
                                                         IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_WIWID = ME->S_WIDIM_IN-S_WIWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Outbound Dimensions
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_OUT-S_FITEX ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_OUT-S_SURWT ).
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_OUT-NOUPS ).
    move 1 to ME->S_FIDIM_OUT-NOOUT.

*** Get Winding Dimension Outbound
    free LR_BL_FIFPROP.
    LR_PR_STERI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.

***   Get Winding Width
      ME->S_WIDIM_OUT-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_OUT-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_OUT-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_OUT-S_SURWT
                                                          IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_WIWID = ME->S_WIDIM_OUT-S_WIWID ).
    endif.

  endmethod.
  method INIT_BY_SPEC_STERI.

    data: LR_PR_STERI type ref to ZCL_VCXI_FFSS_PR_CSTEP_STERI.

***--------------------------------------------------------------------------------------
*** Get Provider - Sterilization
    move ME->GET_PRVDR_STERI( IT_PRVDR = IT_PRVDR ) to LR_PR_STERI.
    check LR_PR_STERI is bound.

***--------------------------------------------------------------------------------------
*** Sterilization Type
    LR_PR_STERI->GET_TSTER( importing EF_TSTER = ME->F_TSTER ).

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Serialize
    call transformation ID
         source SUPER_XML   = RF_XML

                S_FIDIM_IN  = ME->S_FIDIM_IN
                S_FIDIM_OUT = ME->S_FIDIM_OUT
                S_WIDIM_OUT = ME->S_WIDIM_OUT
                S_WIDIM_IN  = ME->S_WIDIM_IN

                F_TSTER     = ME->F_TSTER

         result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append ME->S_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    if ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL is not initial.
      ME->S_FIDIM_OUT-S_RLETA = ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL[ 1 ]-S_RLETA.
    endif.

  endmethod.
