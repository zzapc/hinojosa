
class ZCL_VCXI_XCSU_GRID_PALOP_OPTI definition
  public
  create public .

public section.

  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_BL_PALOP type ref to ZCL_VCXI_XCSU_BL_PALOP
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods CHECK_CHANGED_DATA
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_ICON_E_BT type ICON_D value '@2G@'. "#EC NOTEXT
  constants C_ICON_E_CP type ICON_D value '@2I@'. "#EC NOTEXT
  constants C_ICON_E_EQ type ICON_D value '@2A@'. "#EC NOTEXT
  constants C_ICON_E_GE type ICON_D value '@2E@'. "#EC NOTEXT
  constants C_ICON_E_GT type ICON_D value '@2C@'. "#EC NOTEXT
  constants C_ICON_E_LE type ICON_D value '@2F@'. "#EC NOTEXT
  constants C_ICON_E_LT type ICON_D value '@2D@'. "#EC NOTEXT
  constants C_ICON_E_NB type ICON_D value '@2H@'. "#EC NOTEXT
  constants C_ICON_E_NE type ICON_D value '@2B@'. "#EC NOTEXT
  constants C_ICON_E_NP type ICON_D value '@2J@'. "#EC NOTEXT
  constants C_ICON_I_BT type ICON_D value '@26@'. "#EC NOTEXT
  constants C_ICON_I_CP type ICON_D value '@28@'. "#EC NOTEXT
  constants C_ICON_I_EQ type ICON_D value '@20@'. "#EC NOTEXT
  constants C_ICON_I_GE type ICON_D value '@24@'. "#EC NOTEXT
  constants C_ICON_I_GT type ICON_D value '@22@'. "#EC NOTEXT
  constants C_ICON_I_LE type ICON_D value '@25@'. "#EC NOTEXT
  constants C_ICON_I_LT type ICON_D value '@23@'. "#EC NOTEXT
  constants C_ICON_I_NB type ICON_D value '@27@'. "#EC NOTEXT
  constants C_ICON_I_NE type ICON_D value '@21@'. "#EC NOTEXT
  constants C_ICON_I_NP type ICON_D value '@29@'. "#EC NOTEXT
  data F_CONTAINER_NAME type SCRFNAME .
  data F_TABNAME type TABNAME .
  data R_BL_PALOP type ref to ZCL_VCXI_XCSU_BL_PALOP .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .
  data S_ROW_NO type LVC_S_ROID .

  methods GET_SEL_FIRST_LINE
    importing
      !IR_RANGE type ref to DATA
    changing
      !CS_OPTI_GRID type ZVCXI_XCSU_S_PALOP_OPTI_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods SET_EVENT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods GET_TOOLBAR_EXCLUDING
    returning
      value(RT_TOOLBAR_EXCLUDING) type UI_FUNCTIONS
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
private section.

  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
endclass. "ZCL_VCXI_XCSU_GRID_PALOP_OPTI definition
class ZCL_VCXI_XCSU_GRID_PALOP_OPTI implementation.
method CHANGE_STYLE.

  data:          LS_STYL              type          LVC_S_STYL.
  data:          LT_STYL              type table of LVC_S_STYL.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
*** Get Style Table
  move CT_STYL to LT_STYL.
  clear CT_STYL.

*** Set Fieldname and Style
  clear LS_STYL.
  LS_STYL-FIELDNAME   = IF_FIELDNAME.
  LS_STYL-STYLE       = IF_STYLE.
  append LS_STYL      to LT_STYL.

*** Add Style Table
  sort LT_STYL.
  CT_STYL[] = LT_STYL[].

endmethod.
method CHECK_CHANGED_DATA.

  check ME->R_GRID is bound.
  ME->R_GRID->CHECK_CHANGED_DATA( ).

endmethod.
method CONSTRUCTOR.

  move IF_TABNAME        to ME->F_TABNAME.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.
  move IR_BL_PALOP       to ME->R_BL_PALOP.

*** Create Data Reference to Grid Data
  create data ME->R_DATA type table of (ME->F_TABNAME).

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.

*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT> type LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'T_STYL' or 'IELOP' or 'R_RANGE'.
        move ABAP_TRUE to <S_FCAT>-TECH.

      when 'FOPTI'.
        move ABAP_TRUE    to <S_FCAT>-EDIT.
        move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.

      when 'OPT_ICON'.
        clear: <S_FCAT>-COLTEXT, <S_FCAT>-SCRTEXT_L,
         <S_FCAT>-SCRTEXT_M, <S_FCAT>-SCRTEXT_S.

      when 'SEL_ICON'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON to <S_FCAT>-STYLE.

        clear: <S_FCAT>-COLTEXT, <S_FCAT>-SCRTEXT_L,
               <S_FCAT>-SCRTEXT_M, <S_FCAT>-SCRTEXT_S.

      when 'LOW'.
        move 'Fixed Value from'(T01) to <S_FCAT>-COLTEXT.
        move 'Fixed Value from'(T01) to <S_FCAT>-SCRTEXT_L.
        move 'Fixed Value from'(T01) to <S_FCAT>-SCRTEXT_M.
        move 'Fixed Value from'(T01) to <S_FCAT>-SCRTEXT_S.

      when 'HIGH'.
        move 'Fixed Value to'(T02) to <S_FCAT>-COLTEXT.
        move 'Fixed Value to'(T02) to <S_FCAT>-SCRTEXT_L.
        move 'Fixed Value to'(T02) to <S_FCAT>-SCRTEXT_M.
        move 'Fixed Value to'(T02) to <S_FCAT>-SCRTEXT_S.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_STYLE_HOTSPOT     type          RAW4.
  data:          LS_OPTI              type          ZVCXI_XCSU_S_PALOP_OPTI,
                 LS_OPTI_GRID         type          ZVCXI_XCSU_S_PALOP_OPTI_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Ingoing Dimension
  loop at ME->R_BL_PALOP->T_OPTI into LS_OPTI.
    clear LS_OPTI_GRID.
    move-corresponding LS_OPTI to LS_OPTI_GRID.
    free: LS_OPTI_GRID-T_STYL.
    clear: LF_STYLE_HOTSPOT.

***------------------------------------------------------------------------------------------------
*** Change Style of Optimization Flag
    if LS_OPTI_GRID-ISOUR ne ZCL_VCXI_XCSU_DFLT_SHIPU=>C_ISOUR_CPACK.
      LF_STYLE_HOTSPOT = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
    else.
      LF_STYLE_HOTSPOT = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
    endif.
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOPTI'
                                IF_STYLE     = LF_STYLE_HOTSPOT
                      changing  CT_STYL      = LS_OPTI_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
*** Convert Data Range and show first line
    ME->GET_SEL_FIRST_LINE( exporting IR_RANGE     = LS_OPTI-R_RANGE
                            changing  CS_OPTI_GRID = LS_OPTI_GRID ).

***------------------------------------------------------------------------------------------------
*** Do Material Conversion Output
    if LS_OPTI-IELOP eq ZCL_VCXI_XCSU_BL_PALOP=>C_IELOP_PPMAT.

      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = LS_OPTI_GRID-LOW
        importing
          OUTPUT = LS_OPTI_GRID-LOW.

      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = LS_OPTI_GRID-HIGH
        importing
          OUTPUT = LS_OPTI_GRID-HIGH.

    endif.

***------------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_OPTI_GRID to <S_DATA>.
  endloop.

endmethod.
method GET_LAYOUT.

  move ABAP_TRUE to RS_LAYOUT-NO_TOOLBAR.
  move ABAP_TRUE to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'  to RS_LAYOUT-STYLEFNAME.
*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''       to RS_LAYOUT-EDIT.

endmethod.
method GET_SEL_FIRST_LINE.

  data:          LF_ICON_NAME   type          FIELDNAME value 'C_ICON',
                 LF_STRING      type          STRING.
  field-symbols: <I_RANGE>      type standard table,
                 <S_RANGE>      type          any,
                 <F_FIELD>      type          any.

  assign IR_RANGE->* to <I_RANGE>.
  check SY-SUBRC = 0.

  if <I_RANGE> is initial.
*** No Value Assigned -> Everything is initial.
*** Add Enter More
    move ICON_ENTER_MORE to CS_OPTI_GRID-SEL_ICON.
    exit.
  else.
*** Value Assigned ->
    if lines( <I_RANGE> ) = 1.
*** only One Entry find
*** Add Enter More
      move ICON_ENTER_MORE to CS_OPTI_GRID-SEL_ICON.
    else.
*** more tan 1 Entry found.
*** Add Display More
      move ICON_DISPLAY_MORE to CS_OPTI_GRID-SEL_ICON.
    endif.

*** Get Value to show
    read table <I_RANGE> assigning <S_RANGE> index 1.

*** read Sign
    assign component 'SIGN' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to LF_STRING.
      concatenate LF_ICON_NAME LF_STRING into LF_ICON_NAME separated by '_'.
    endif.

*** read Option
    assign component 'OPTION' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to LF_STRING.
      concatenate LF_ICON_NAME LF_STRING into LF_ICON_NAME separated by '_'.
    endif.

*** assign Icon
    assign ZCL_VCXI_XCSU_GRID_PALOP_OPTI=>(LF_ICON_NAME) to <F_FIELD>.
    if SY-SUBRC = 0.
      move <F_FIELD> to CS_OPTI_GRID-OPT_ICON.
    endif.

*** read Low
    assign component 'LOW' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to CS_OPTI_GRID-LOW.
    endif.

*** read High
    assign component 'HIGH' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      if <F_FIELD> is not initial.
        move <F_FIELD> to CS_OPTI_GRID-HIGH.
      endif.
    endif.

  endif.

endmethod.
method GET_TOOLBAR_EXCLUDING.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to RT_TOOLBAR_EXCLUDING.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LF_DISPLAY           type          ABAP_BOOL,
                 LF_NO_INTERVAL_CHECK type          ABAP_BOOL,
                 LF_JUST_INCL         type          ABAP_BOOL,
                 LF_HELP_FIELD        type          RSSCR_DBFI,
                 LF_MSGV1             type          SYMSGV.
  data:          LS_OPTI              type          ZVCXI_XCSU_S_PALOP_OPTI,
                 LS_OPTI_GRID         type          ZVCXI_XCSU_S_PALOP_OPTI_GRID,
                 LS_OPTI_CUST         type          ZCL_VCXI_XCSU_BL_PALOP=>YS_OPTI_CUST,
                 LS_SHLP              type          SHLP_DESCR_T,
                 LS_EXCLUDED_OPTIONS  type          RSOPTIONS.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <I_RANGE>            type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.

*** --------------------------------------------------------------------------------------------
***   Get Range and Call Searchhelp
      move-corresponding <S_DATA> to LS_OPTI_GRID.
      read table ME->R_BL_PALOP->T_OPTI into LS_OPTI
                                        with key IELOP = LS_OPTI_GRID-IELOP.
      assign LS_OPTI-R_RANGE->* to <I_RANGE>.

***   Get Description of DataElement and Uom.
      read table ME->R_BL_PALOP->T_OPTI_CUST into LS_OPTI_CUST
                                             with key IELOP = LS_OPTI-IELOP.

***   Range can't be build. Check DataElement of Optimization Element &1.
      if <I_RANGE> is not assigned.
        move LS_OPTI-IELOP to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
          exporting F_MSGTY = 'E'
                    F_MSGID = 'ZVCXI_XCSU'
                    F_MSGNO = '620'
                    F_MSGV1 = LF_MSGV1.
      endif.

***   Get Search Help
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_OPTI_CUST-DATEL
          FIELDNAME         = SPACE
        importing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.
      if SY-SUBRC         ne 0    or
         LS_SHLP-SHLPTYPE eq 'FV'.
        move LS_SHLP-SHLPNAME to LF_HELP_FIELD.
        clear LS_SHLP.
      endif.

*** Display only if no change of fixed Values are allowed
      if LS_OPTI-FOPTI eq ABAP_TRUE or
         LS_OPTI-ISOUR eq ZCL_VCXI_XCSU_DFLT_SHIPU=>C_ISOUR_CPACK.
        LF_DISPLAY = ABAP_TRUE.
      endif.

      if LS_SHLP-SHLPNAME is initial.
        move ABAP_TRUE  to LF_NO_INTERVAL_CHECK.
        move ABAP_TRUE  to LF_JUST_INCL.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-BT.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-CP.
        move ABAP_FALSE to LS_EXCLUDED_OPTIONS-EQ.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-GE.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-GT.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-LE.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-LT.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-NB.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-NE.
        move ABAP_TRUE  to LS_EXCLUDED_OPTIONS-NP.
      endif.

***   Call Select Options
      call function 'COMPLEX_SELECTIONS_DIALOG'
        exporting
          TITLE             = 'Select Values'(S01)
          HELP_FIELD        = LF_HELP_FIELD
          SEARCH_HELP       = LS_SHLP-SHLPNAME
          JUST_DISPLAY      = LF_DISPLAY
          EXCLUDED_OPTIONS  = LS_EXCLUDED_OPTIONS
          NO_INTERVAL_CHECK = LF_NO_INTERVAL_CHECK
          JUST_INCL         = LF_JUST_INCL
        tables
          RANGE             = <I_RANGE>
        exceptions
          NO_RANGE_TAB      = 1
          CANCELLED         = 2
          INTERNAL_ERROR    = 3
          INVALID_FIELDNAME = 4
          others            = 5.
      if SY-SUBRC ne 0 and
         SY-SUBRC ne 2.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      check SY-SUBRC eq 0.
      ME->R_BL_PALOP->UPDATE_OPTI( IS_OPTI = LS_OPTI ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_OPTI              type          ZVCXI_XCSU_S_PALOP_OPTI,
                 LS_OPTI_GRID         type          ZVCXI_XCSU_S_PALOP_OPTI_GRID.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.

        move-corresponding <S_DATA> to LS_OPTI_GRID.
        read table ME->R_BL_PALOP->T_OPTI into LS_OPTI
                                          with key IELOP = LS_OPTI_GRID-IELOP.
***     Set Values to BL Class
        case E_COLUMN_ID-FIELDNAME.
          when 'FOPTI'.
            case LS_OPTI_GRID-FOPTI.
              when ABAP_TRUE.
                move ABAP_FALSE to LS_OPTI-FOPTI.
              when ABAP_FALSE.
                move ABAP_TRUE to LS_OPTI-FOPTI.
            endcase.
            ME->R_BL_PALOP->UPDATE_OPTI( IS_OPTI = LS_OPTI ).
        endcase.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

    ME->SET_EVENT( ).

*** Register F4-Fields
    ME->REGISTER_F4_FIELDS( ).

  endif.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type          LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS,
                 LT_FCAT              type          LVC_T_FCAT.
  field-symbols: <T_DATA>             type standard table.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

*** Initialize if needed
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).

*** Get Grid Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT( )          to LT_FCAT.
  move ME->GET_LAYOUT( )            to LS_LAYOUT.
  move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = <T_DATA>
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL
                                       IS_ROW_NO    = ME->S_ROW_NO ).

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Catalog
  LT_FCAT = ME->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.

      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_FCAT-DOMNAME
          FIELDNAME         = SPACE
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-REF_TABLE
            FIELDNAME         = LS_FCAT-FIELDNAME
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

      endif.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method SET_EVENT.

*** Set Button Click
  set handler ME->HANDLE_BUTTON_CLICK          for ME->R_GRID.

*** Set Hotspot
  set handler ME->HANDLE_HOTSPOT_CLICK         for ME->R_GRID.

endmethod.
