
class ZCL_VCXI_PXE_CAD_OUTB definition
  public
  abstract
  create protected .

public section.

  methods CONSTRUCTOR
    importing
      !IF_NREXT type BALNREXT
      !IF_UNAME type UNAME default SY-UNAME
    raising
      /VCXI/CX_CKX .
  methods SEND
  abstract
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BAL type ref to /VCXI/CL_CKX_BAL .

  methods GET_CADIF_PRJ
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    exporting
      !ER_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_EA_CADIF_PRJ) type ref to ZCL_VCXI_PXSS_EA_CADIF_PRJ
    raising
      /VCXI/CX_CKX .
  methods CALL_HTTP
    importing
      !IF_OWNER type STRING
      !IF_BODY type XSTRING
      !IF_CONTENT_TYPE type STRING default IF_REST_MEDIA_TYPE=>GC_APPL_XML
      !IF_RFCDEST type RFCDEST
    exporting
      !EF_CODE type SYSUBRC
      !EF_MSG type STRING
    returning
      value(RF_SUBRC) type SYSUBRC
    raising
      /VCXI/CX_CKX .
  methods BUILD_IDAT
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IF_POSNR type POSNR optional
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXE_CAD_OUTB definition
class ZCL_VCXI_PXE_CAD_OUTB implementation.
  method BUILD_IDAT.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC,
          LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.


*** Build Integration Data Service
    LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = IR_SVC->S_CMPRK
                                                 IF_IEALI = 'X_IDATSPV' ).

*** Fill by CAD Interface - Project
    loop at IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'CADIF_PRJ' ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.
      LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = LR_IDAT_SVC->R_CUPRFL
                                                        IF_ID     = LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).

***   Fill by SmartVC Element
      LR_IDAT_SVC->FILL_BY_SVCEL( IF_IPARE      = value #( )
                                  IF_CPARE      = value #( )
                                  IR_SVC        = IR_SVC
                                  IR_SVCEL      = LR_SVCEL
                                  IR_CUELMNT    = LR_CUELMNT
                                  IF_WITH_LEVEL = ABAP_TRUE
                                  IF_DEPTH      = 0 ).
    endloop.

*** Set Integradion Data Number to Buffer for later processing
    call function 'ZVCXI_XCC_IDAT_SET_NIDAT'
      exporting
        IF_POSNR = IF_POSNR
        IF_NIDAT = conv ZVCXI_XCI_NIDAT( LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ).

  endmethod.
  method CALL_HTTP.

    data: LR_HTTP_CLIENT type ref to IF_HTTP_CLIENT.


***------------------------------------------------------------------------------------------------
*** Creating the HTTP Client based on HTTP RFC Connection (SM59)
    CL_HTTP_CLIENT=>CREATE_BY_DESTINATION( exporting  DESTINATION = IF_RFCDEST
                                           importing  CLIENT      = LR_HTTP_CLIENT
                                           exceptions others      = 9 ).

    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set HTTP Version and Method
    LR_HTTP_CLIENT->REQUEST->SET_VERSION( IF_HTTP_REQUEST=>CO_PROTOCOL_VERSION_1_0 ).
    LR_HTTP_CLIENT->REQUEST->SET_METHOD( IF_HTTP_REQUEST=>CO_REQUEST_METHOD_POST ).

***------------------------------------------------------------------------------------------------
*** Set Payload or Body (JSON or XML)
    LR_HTTP_CLIENT->REQUEST->SET_CONTENT_TYPE( CONTENT_TYPE = IF_CONTENT_TYPE ).
    LR_HTTP_CLIENT->REQUEST->SET_DATA( DATA = IF_BODY ).

*** Add Application Log by BAPI Return Structure
    ME->R_BAL->ADD_BAL_BY_BAPIRET2( IS_BAPIRET2 = value #( TYPE       = 'I'
                                                           ID         = '/VCXI/CKX'
                                                           NUMBER     = '000'
                                                           MESSAGE_V1 = IF_OWNER
                                                           MESSAGE_V2 = |: Start HTTP Call at { SY-UZEIT time = iso }| ) ).

*** Send
    LR_HTTP_CLIENT->SEND( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      LR_HTTP_CLIENT->GET_LAST_ERROR( importing CODE    = EF_CODE
                                                MESSAGE = EF_MSG ).
      exit.
    endif.

***------------------------------------------------------------------------------------------------
*** Get Response
    LR_HTTP_CLIENT->RECEIVE( exceptions others = 9 ).

    if SY-SUBRC ne 0.
      LR_HTTP_CLIENT->GET_LAST_ERROR( importing CODE    = EF_CODE
                                                MESSAGE = EF_MSG ).
    else.
      EF_CODE = LR_HTTP_CLIENT->RESPONSE->GET_HEADER_FIELD( '~status_code' ).
      EF_MSG  = LR_HTTP_CLIENT->RESPONSE->GET_HEADER_FIELD( '~status_reason' ).
    endif.

*** Process Return Code
    if EF_CODE eq '200'.
      RF_SUBRC = 0.
    else.
      RF_SUBRC = 4.
    endif.

*** Add Application Log by BAPI Return Structure
    ME->R_BAL->ADD_BAL_BY_BAPIRET2( IS_BAPIRET2   = value #( TYPE       = cond #( when RF_SUBRC eq 0 then 'S' else 'E' )
                                                             ID         = '/VCXI/CKX'
                                                             NUMBER     = '000'
                                                             MESSAGE_V1 = IF_OWNER
                                                             MESSAGE_V2 = |: End HTTP Call at { SY-UZEIT time = iso } with|
                                                             MESSAGE_V3 = | { EF_CODE }|
                                                             MESSAGE_V4 = | { EF_MSG }| )
                                    IF_BALPROBCL  = switch #( RF_SUBRC when '4' then /VCXI/CL_CKX_BAL=>C_BALPROBCL_IMP
                                                                                else /VCXI/CL_CKX_BAL=>C_BALPROBCL_INFO ) ).

  endmethod.
  method CONSTRUCTOR.

*** Create Application Log Handle
    ME->R_BAL = /VCXI/CL_CKX_BAL=>CREATE_BAL( IF_OBJECT    = 'ZVCXI_PXE_CAD'
                                              IF_SUBOBJECT = 'OUTB'
                                              IF_NREXT     = IF_NREXT
                                              IF_UNAME     = IF_UNAME ).
  endmethod.
  method GET_CADIF_PRJ.

    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT.


    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'CADIF_PRJ' ).
    check LT_SVCEL is not initial.

    ER_SVCEL = cast /VCXI/CL_VKSRA_SVC_ELEMENT( LT_SVCEL[ 1 ] ).
    RR_EA_CADIF_PRJ ?= ER_SVCEL->GET_CLSEA( ).

  endmethod.
