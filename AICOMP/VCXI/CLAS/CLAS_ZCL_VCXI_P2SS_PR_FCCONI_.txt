
class ZCL_VCXI_P2SS_PR_FCCONI definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XCONI
  create public .

public section.

  interfaces ZIF_VCXI_P2SS_COMM_PREV .
  interfaces ZIF_VCXI_P2SS_COMM_NEXT .

  constants C_IPRVT_P2_FCCONI type /VCXI/VKSC_IPRVT value 'ZVCXI_P2SS_FCCONI' ##NO_TEXT.

  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods IS_XCONO_COMPATIBLE
    redefinition .
protected section.

  constants C_IEVNT_O_FCBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FCBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FCFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FCFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_FCBPX type /VCXI/VKS_PARID value 'ZVCXI_P2_FCBPX' ##NO_TEXT.
  constants C_PARID_FCFPX type /VCXI/VKS_PARID value 'ZVCXI_P2_FCFPX' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.

  methods SET_FCBPX
    importing
      !IF_FCBPX type ZVCXI_P2S_FCBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FCFPX
    importing
      !IF_FCFPX type ZVCXI_P2S_FCFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_PR_FCCONI definition
class ZCL_VCXI_P2SS_PR_FCCONI implementation.
  method IS_XCONO_COMPATIBLE.

    check SUPER->IS_XCONO_COMPATIBLE( IR_GATE_XCONO = IR_GATE_XCONO ).

    if IR_GATE_XCONO is bound and
       IR_GATE_XCONO->R_CLSPR is instance of ZIF_VCXI_P2SS_COMM_NEXT.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method SET_FCBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCBPX ).

    move IF_FCBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FCBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FCFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCFPX ).

    move IF_FCFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FCFPX_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCBPX ).
    move LS_PARAM-STRNG to EF_FCBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Folding Carton Backward Property Instance
    if RR_BL_FCBPROP is requested.
      RR_BL_FCBPROP = ZCL_VCXI_P2SS_BL_FCBPROP=>FACTORY( IF_FCBPX = EF_FCBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX.

*** Get Folding Carton Forward Property (Inbound)
    RR_BL_FCFPROP = ME->ZIF_VCXI_P2SS_COMM_PREV~GET_FCFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_FCFPX is requested.
      EF_FCFPX = RR_BL_FCFPROP->GET_FCFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM.

    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI
                                                                    EF_GRADI = EF_GRADI ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P2SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_FCBPX.

***--------------------------------------------------------------------------------------
*** Get Folding Carton Backward Property (Outbound)
    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( importing EF_FCBPX = EF_FCBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Folding Carton Backward Property Instance
    if RR_BL_FCBPROP is requested.
      RR_BL_FCBPROP = ZCL_VCXI_P2SS_BL_FCBPROP=>FACTORY( IF_FCBPX = EF_FCBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_FCFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCFPX ).
    move LS_PARAM-STRNG to EF_FCFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Folding Carton Forward Property Instance
    if RR_BL_FCFPROP is requested.
      RR_BL_FCFPROP = ZCL_VCXI_P2SS_BL_FCFPROP=>FACTORY( IF_FCFPX = EF_FCFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_SHTDIM.

    ME->ZIF_VCXI_P2SS_COMM_PREV~GET_FCBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI
                                                                    EF_GRADI = EF_GRADI ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P2SS_COMM_PREV,
          LR_BL_FCBPROP type ref to ZCL_VCXI_P2SS_BL_FCBPROP.

**------------------------------------------------------------------------------------------------
*** Create new Folding Carton Backward Property Instance
    LR_BL_FCBPROP = ZCL_VCXI_P2SS_BL_FCBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Number of Ups
      LF_NOUPS = LR_COMM_PREV->GET_NOUPS( ).

***   Combine Folding Carton Backward Property
      LR_BL_FCBPROP->MERGE( IR_BL_FCBPROP = LR_COMM_PREV->GET_FCBPX( ) ).
    endloop.

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Folding Carton Backward Property XML
    ME->SET_FCBPX( IF_FCBPX = LR_BL_FCBPROP->GET_FCBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P2SS_COMM_NEXT,
          LR_BL_FCFPROP      type ref to ZCL_VCXI_P2SS_BL_FCFPROP,
          LR_BL_FCFPROP_NEXT type ref to ZCL_VCXI_P2SS_BL_FCFPROP.

*** Super
    SUPER->ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD( IT_GATE = IT_GATE ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Get Surface Weight
      LS_SURWT = LR_COMM_NEXT->GET_SURWT( ).

***   Combine Folding Carton Forward Property
      LR_BL_FCFPROP_NEXT = LR_COMM_NEXT->GET_FCFPX( ).
      if LR_BL_FCFPROP is not bound.
        move LR_BL_FCFPROP_NEXT to LR_BL_FCFPROP.
      else.
        LR_BL_FCFPROP->MERGE( IR_BL_FCFPROP = LR_BL_FCFPROP_NEXT ).
      endif.

    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Folding Carton Forward Property XML
    if LR_BL_FCFPROP is bound.
      ME->SET_FCFPX( IF_FCFPX = LR_BL_FCFPROP->GET_FCFPX( ) ).
    else.
      ME->SET_FCFPX( IF_FCFPX = SPACE ).
    endif.

  endmethod.
