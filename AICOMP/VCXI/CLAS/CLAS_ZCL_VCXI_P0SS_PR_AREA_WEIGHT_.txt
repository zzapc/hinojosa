
class ZCL_VCXI_P0SS_PR_AREA_WEIGHT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_P0_AREA_WEIGHT type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_AREA_WEIGHT'. "#EC NOTEXT
  constants C_PARID_ACOWA type /VCXI/VKS_PARID value 'ZVCXI_P0_ACOWA'. "#EC NOTEXT
  constants C_TDIVI_SAW type ZVCXI_P0SS_TDIVI value 'S'. "#EC NOTEXT
  data F_CALC_GBA type /VCXI/VKS_ATTVA .
  data F_CALC_SBA type /VCXI/VKS_ATTVA .
  data F_CALC_TA type /VCXI/VKS_ATTVA .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAG
    returning
      value(RS_ABLAG) type ZVCXI_P0SS_S_ABLAG
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAN
    returning
      value(RS_ABLAN) type ZVCXI_P0SS_S_ABLAN
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAS
    returning
      value(RS_ABLAS) type ZVCXI_P0SS_S_ABLAS
    raising
      /VCXI/CX_CKX .
  methods GET_ACOWA
    returning
      value(RS_ACOWA) type ZVCXI_P0SS_S_ACOWA
    raising
      /VCXI/CX_CKX .
  methods GET_AREAO
    returning
      value(RS_AREAO) type ZVCXI_P0SS_S_AREAO
    raising
      /VCXI/CX_CKX .
  methods GET_ATRIM
    returning
      value(RS_ATRIM) type ZVCXI_P0SS_S_ATRIM
    raising
      /VCXI/CX_CKX .
  methods GET_CUWAS
    returning
      value(RS_CUWAS) type ZVCXI_P0SS_S_CUWAS
    raising
      /VCXI/CX_CKX .
  methods GET_WDRGO
    returning
      value(RS_WDRGO) type ZVCXI_P0SS_S_WDRGO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRGP
    returning
      value(RS_WDRGP) type ZVCXI_P0SS_S_WDRGP
    raising
      /VCXI/CX_CKX .
  methods GET_WDRNO
    returning
      value(RS_WDRNO) type ZVCXI_P0SS_S_WDRNO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRNP
    returning
      value(RS_WDRNP) type ZVCXI_P0SS_S_WDRNP
    raising
      /VCXI/CX_CKX .
  methods GET_WDRSO
    returning
      value(RS_WDRSO) type ZVCXI_P0SS_S_WDRSO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRSP
    returning
      value(RS_WDRSP) type ZVCXI_P0SS_S_WDRSP
    raising
      /VCXI/CX_CKX .
  methods GET_WWEGO
    returning
      value(RS_WWEGO) type ZVCXI_P0SS_S_WWEGO
    raising
      /VCXI/CX_CKX .
  methods GET_WWEGP
    returning
      value(RS_WWEGP) type ZVCXI_P0SS_S_WWEGP
    raising
      /VCXI/CX_CKX .
  methods GET_WWENO
    returning
      value(RS_WWENO) type ZVCXI_P0SS_S_WWENO
    raising
      /VCXI/CX_CKX .
  methods GET_WWENP
    returning
      value(RS_WWENP) type ZVCXI_P0SS_S_WWENP
    raising
      /VCXI/CX_CKX .
  methods GET_WWESO
    returning
      value(RS_WWESO) type ZVCXI_P0SS_S_WWESO
    raising
      /VCXI/CX_CKX .
  methods GET_WWESP
    returning
      value(RS_WWESP) type ZVCXI_P0SS_S_WWESP
    raising
      /VCXI/CX_CKX .
  methods SET_ACOWA
    importing
      value(IS_ACOWA) type ZVCXI_P0SS_S_ACOWA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WASTE type /VCXI/VKSC_IEVNT value 'RECALC_WASTE'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WDRYW type /VCXI/VKSC_IEVNT value 'RECALC_WDRYW'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WWETW type /VCXI/VKSC_IEVNT value 'RECALC_WWETW'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAG_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAG_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAN_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAN_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAS_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ACOWA_CHANGED type /VCXI/VKSC_IEVNT value 'ACOWA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AREAO_CHANGED type /VCXI/VKSC_IEVNT value 'AREAO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ATRIM_CHANGED type /VCXI/VKSC_IEVNT value 'ATRIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CUWAS_CHANGED type /VCXI/VKSC_IEVNT value 'CUWAS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRNO_CHANGED type /VCXI/VKSC_IEVNT value 'WDRNO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRNP_CHANGED type /VCXI/VKSC_IEVNT value 'WDRNP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WWENO_CHANGED type /VCXI/VKSC_IEVNT value 'WWENO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WWENP_CHANGED type /VCXI/VKSC_IEVNT value 'WWENP_CHANGED'. "#EC NOTEXT
  constants C_PARID_ABLAG type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAG'. "#EC NOTEXT
  constants C_PARID_ABLAN type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAN'. "#EC NOTEXT
  constants C_PARID_ABLAS type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAS'. "#EC NOTEXT
  constants C_PARID_AREAO type /VCXI/VKS_PARID value 'ZVCXI_P0_AREAO'. "#EC NOTEXT
  constants C_PARID_ATRIM type /VCXI/VKS_PARID value 'ZVCXI_P0_ATRIM'. "#EC NOTEXT
  constants C_PARID_CUWAS type /VCXI/VKS_PARID value 'ZVCXI_P0_CUWAS'. "#EC NOTEXT
  constants C_PARID_WDRGO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRGO'. "#EC NOTEXT
  constants C_PARID_WDRGP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRGP'. "#EC NOTEXT
  constants C_PARID_WDRNO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRNO'. "#EC NOTEXT
  constants C_PARID_WDRNP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRNP'. "#EC NOTEXT
  constants C_PARID_WDRSO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRSO'. "#EC NOTEXT
  constants C_PARID_WDRSP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRSP'. "#EC NOTEXT
  constants C_PARID_WWEGO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWEGO'. "#EC NOTEXT
  constants C_PARID_WWEGP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWEGP'. "#EC NOTEXT
  constants C_PARID_WWENO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWENO'. "#EC NOTEXT
  constants C_PARID_WWENP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWENP'. "#EC NOTEXT
  constants C_PARID_WWESO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWESO'. "#EC NOTEXT
  constants C_PARID_WWESP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWESP'. "#EC NOTEXT
  data R_PR_COMP_AS type ref to ZCL_VCXI_P0SS_PR_COMP_AS .
  data R_PR_COMP_SE type ref to ZCL_VCXI_P0SS_PR_COMP_SE .
  data R_PR_SHEET type ref to ZCL_VCXI_P0SS_PR_SHEET .
  constants C_CALC_1 type /VCXI/VKS_ATTVA value '1'. "#EC NOTEXT
  constants C_CALC_2 type /VCXI/VKS_ATTVA value '2'. "#EC NOTEXT

  methods CALC_WDRGO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRGP
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRSO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRSP
    raising
      /VCXI/CX_CKX .
  methods CALC_WWEGO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WWEGP
    raising
      /VCXI/CX_CKX .
  methods CALC_WWESO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WWESP
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SHEET
    exporting
      !ES_ABLAS type ZVCXI_P0SS_S_ABLAS
      !ES_ATRIM type ZVCXI_P0SS_S_ATRIM
      !ES_ABLAG type ZVCXI_P0SS_S_ABLAG
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_WDRYW
    importing
      !IS_WDRYA type ZVCXI_P0SS_S_WDRYA
    returning
      value(RS_WDRYW) type ZVCXI_P0SS_S_WDRYW
    raising
      /VCXI/CX_CKX .
  methods GET_WWETW
    importing
      !IS_WWETA type ZVCXI_P0SS_S_WWETA
    returning
      value(RS_WWETW) type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AREA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WASTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WDRYW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WWETW
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAG
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAG type ZVCXI_P0SS_S_ABLAG
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAN
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAN type ZVCXI_P0SS_S_ABLAN
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAS
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAS type ZVCXI_P0SS_S_ABLAS
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_AREAO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AREAO type ZVCXI_P0SS_S_AREAO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ATRIM
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_ATRIM type ZVCXI_P0SS_ATRIM
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_CUWAS
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_CUWAS type ZVCXI_P0SS_S_CUWAS
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRGO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRGO type ZVCXI_P0SS_S_WDRGO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRGP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRGP type ZVCXI_P0SS_S_WDRGP
    raising
      /VCXI/CX_CKX .
  methods SET_WDRNO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRNO type ZVCXI_P0SS_S_WDRNO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRNP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRNP type ZVCXI_P0SS_S_WDRNP
    raising
      /VCXI/CX_CKX .
  methods SET_WDRSO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRSO type ZVCXI_P0SS_S_WDRSO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRSP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRSP type ZVCXI_P0SS_S_WDRSP
    raising
      /VCXI/CX_CKX .
  methods SET_WWEGO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWEGO type ZVCXI_P0SS_S_WWEGO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWEGP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWEGP type ZVCXI_P0SS_S_WWEGP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWENO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWENO type ZVCXI_P0SS_S_WWENO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWENP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWENP type ZVCXI_P0SS_S_WWENP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWESO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWESO type ZVCXI_P0SS_S_WWESO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWESP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWESP type ZVCXI_P0SS_S_WWESP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL
    returning
      value(RR_DIECUT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_PR_AREA_WEIGHT definition
class ZCL_VCXI_P0SS_PR_AREA_WEIGHT implementation.
method CALC_WDRGO.

  data: LS_WDRGP     type ZVCXI_P0SS_S_WDRGP,
        LS_WDRGO     type ZVCXI_P0SS_S_WDRGO.

  LS_WDRGP = ME->GET_WDRGP( ).

  LS_WDRGO-WDRGO     = IS_OPQTY-OPQTY * LS_WDRGP-WDRGP.
  LS_WDRGO-WDRGO_UOM = LS_WDRGP-WDRGP_UOM.

  ME->SET_WDRGO( IS_WDRGO = LS_WDRGO ).

endmethod.
method CALC_WDRGP.

  data: LS_WDRGP     type ZVCXI_P0SS_S_WDRGP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_ABLAG     type ZVCXI_P0SS_S_ABLAG,
        LS_WDRYA     type ZVCXI_P0SS_S_WDRYA.

*** Get Unit of Net Weight
  LS_WDRGP = ME->GET_WDRGP( ).
  LS_ABLAG = ME->GET_ABLAG( ).

**** Get Weight of Gross Blank Area
  LS_WDRYA-WDRYA     = LS_ABLAG-ABLAG.
  LS_WDRYA-WDRYA_UOM = LS_ABLAG-ABLAG_UOM.
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_WDRYA ).

  LS_WDRGP-WDRGP     = LS_WDRYW-WDRYW.
  LS_WDRGP-WDRGP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRGP( IS_WDRGP = LS_WDRGP ).

endmethod.
method CALC_WDRSO.

  data: LS_WDRSP     type ZVCXI_P0SS_S_WDRSP,
        LS_WDRSO     type ZVCXI_P0SS_S_WDRSO.

  LS_WDRSP = ME->GET_WDRSP( ).

  LS_WDRSO-WDRSO     = IS_OPQTY-OPQTY * LS_WDRSP-WDRSP.
  LS_WDRSO-WDRSO_UOM = LS_WDRSP-WDRSP_UOM.

  ME->SET_WDRSO( IS_WDRSO = LS_WDRSO ).

endmethod.
method CALC_WDRSP.

  data: LS_WDRSP     type ZVCXI_P0SS_S_WDRSP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_ABLAS     type ZVCXI_P0SS_S_ABLAS,
        LS_WDRYA     type ZVCXI_P0SS_S_WDRYA.

*** Get Unit of Net Weight
  LS_WDRSP = ME->GET_WDRSP( ).
  LS_ABLAS = ME->GET_ABLAS( ).

**** Get Weight of Sold Blank Area
  LS_WDRYA-WDRYA     = LS_ABLAS-ABLAS.
  LS_WDRYA-WDRYA_UOM = LS_ABLAS-ABLAS_UOM.
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_WDRYA ).

  LS_WDRSP-WDRSP     = LS_WDRYW-WDRYW.
  LS_WDRSP-WDRSP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRSP( IS_WDRSP = LS_WDRSP ).

endmethod.
method CALC_WWEGO.

  data: LS_WWEGP     type ZVCXI_P0SS_S_WWEGP,
        LS_WWEGO     type ZVCXI_P0SS_S_WWEGO.

  LS_WWEGP = ME->GET_WWEGP( ).

  LS_WWEGO-WWEGO     = IS_OPQTY-OPQTY * LS_WWEGP-WWEGP.
  LS_WWEGO-WWEGO_UOM = LS_WWEGP-WWEGP_UOM.

  ME->SET_WWEGO( IS_WWEGO = LS_WWEGO ).

endmethod.
method CALC_WWEGP.

  data: LS_ABLAG     type ZVCXI_P0SS_S_ABLAG,
        LS_WWETA     type ZVCXI_P0SS_S_WWETA,
        LS_WWEGP     type ZVCXI_P0SS_S_WWEGP,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Gross Blank Area
  LS_ABLAG = ME->GET_ABLAG( ).

*** Get Wet Weight Gross Blank Area
  LS_WWETA-WWETA      = LS_ABLAG-ABLAG.
  LS_WWETA-WWETA_UOM  = LS_ABLAG-ABLAG_UOM.
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_WWETA ).

*** Get Gross Weight per Piece
  LS_WWEGP-WWEGP     = LS_WWETW-WWETW.
  LS_WWEGP-WWEGP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWEGP( IS_WWEGP = LS_WWEGP ).

endmethod.
method CALC_WWESO.

  data: LS_WWESP     type ZVCXI_P0SS_S_WWESP,
        LS_WWESO     type ZVCXI_P0SS_S_WWESO.

  LS_WWESP = ME->GET_WWESP( ).

  LS_WWESO-WWESO     = IS_OPQTY-OPQTY * LS_WWESP-WWESP.
  LS_WWESO-WWESO_UOM = LS_WWESP-WWESP_UOM.

  ME->SET_WWESO( IS_WWESO = LS_WWESO ).

endmethod.
method CALC_WWESP.

  data: LS_ABLAS     type ZVCXI_P0SS_S_ABLAS,
        LS_WWESP     type ZVCXI_P0SS_S_WWESP,
        LS_WWETA     type ZVCXI_P0SS_S_WWETA,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Sold Blank Area
  LS_ABLAS = ME->GET_ABLAS( ).

*** Get Wet Weight Sold Blank Area
  LS_WWETA-WWETA      = LS_ABLAS-ABLAS.
  LS_WWETA-WWETA_UOM  = LS_ABLAS-ABLAS_UOM.
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_WWETA ).

*** Get Sold Weight per Piece
  LS_WWESP-WWESP     = LS_WWETW-WWETW.
  LS_WWESP-WWESP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWESP( IS_WWESP = LS_WWESP ).

endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_PARID        type        /VCXI/VKS_PARID,
         LF_CHECK        type        CHAR30,
         LF_INVALID      type        ABAP_BOOL,
         LF_MSGV1        type        SYMSGV.
  data:  LR_DIECUT_TOOL  type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET       type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA        type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC        type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM        type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN        type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT        type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID        type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT        type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool
  LR_DIECUT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Die Cut Tool
  check LR_DIECUT_TOOL is bound.
  append ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO to LT_SETID.
  LR_DIECUT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Die Cut Tool Mapping Mapping
  read table LR_DIECUT_TOOL->T_MAPSET into LS_MAPSET with key SETID = ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq ZCL_VCXI_P0SS_PR_SHEET=>C_CHECK_TOOL and
          LF_PARID is not initial.


    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method GET_ABLAG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).
  move LS_PARAM-ATFLV to RS_ABLAG-ABLAG.
  move LS_PARAM-UNIT  to RS_ABLAG-ABLAG_UOM.

endmethod.
method GET_ABLAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).
  move LS_PARAM-ATFLV to RS_ABLAN-ABLAN.
  move LS_PARAM-UNIT  to RS_ABLAN-ABLAN_UOM.

endmethod.
method GET_ABLAS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAS ).
  move LS_PARAM-ATFLV to RS_ABLAS-ABLAS.
  move LS_PARAM-UNIT  to RS_ABLAS-ABLAS_UOM.

endmethod.
method GET_ACOWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACOWA ).
  move LS_PARAM-ATFLV to RS_ACOWA-ACOWA.
  move LS_PARAM-UNIT  to RS_ACOWA-ACOWA_UOM.

endmethod.
method GET_AREAO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).
  move LS_PARAM-ATFLV to RS_AREAO-AREAO.
  move LS_PARAM-UNIT  to RS_AREAO-AREAO_UOM.

endmethod.
method GET_ATRIM.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ATRIM ).
  move LS_PARAM-ATFLV to RS_ATRIM-ATRIM.
  move LS_PARAM-UNIT  to RS_ATRIM-ATRIM_UOM.

endmethod.
method GET_CUWAS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUWAS ).
  move LS_PARAM-ATFLV to RS_CUWAS-CUWAS.
  move LS_PARAM-UNIT  to RS_CUWAS-CUWAS_UOM.

endmethod.
method GET_DETAIL_SHEET.

  data: LS_SHTPL     type ZVCXI_P0SS_S_SHTPL,
        LS_SHTPW     type ZVCXI_P0SS_S_SHTPW,
        LS_SHTNW     type ZVCXI_P0SS_S_SHTNW,
        LS_SHTNL     type ZVCXI_P0SS_S_SHTNL,
        LS_SHTGW     type ZVCXI_P0SS_S_SHTGW,
        LS_SHTGL     type ZVCXI_P0SS_S_SHTGL,
        LS_ATRIM_N   type ZVCXI_P0SS_S_ATRIM,
        LS_ATRIM_G   type ZVCXI_P0SS_S_ATRIM,
        LS_CALCV_1   type ZVCXI_XCS_S_CALCV,
        LS_CALCV_2   type ZVCXI_XCS_S_CALCV.
  data: LF_NOUPT     type ZVCXI_P0SS_NOUPT,
        LF_DUPSL     type ZVCXI_P0SS_DUPSL,
        LF_DUPSW     type ZVCXI_P0SS_DUPSW,
        LF_NEG_TRIM  type ABAP_BOOL.

  check ME->R_PR_SHEET is bound.

***--------------------------------------------------------------------------------------
*** Get Product Sheet Dimensions
  LS_SHTPL = ME->R_PR_SHEET->GET_SHTPL( ).
  LS_SHTPW = ME->R_PR_SHEET->GET_SHTPW( ).

*** Get Net Sheet Dimensions
  ME->R_PR_SHEET->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
  ME->R_PR_SHEET->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).

*** Get Gross Sheet Dimensions
  LS_SHTGL = ME->R_PR_SHEET->GET_SHTGL( ).
  LS_SHTGW = ME->R_PR_SHEET->GET_SHTGW( ).

*** Number Ups
  ME->R_PR_SHEET->GET_NOUPT( importing EF_NOUPT = LF_NOUPT ).

*** If we have division acitv -> Take it into account!
  if ME->R_PR_SHEET->GET_TDIVI( ) is not initial.
    LF_DUPSL = ME->R_PR_SHEET->GET_DUPSL( ).
    LF_DUPSW = ME->R_PR_SHEET->GET_DUPSW( ).

*** Consider Number ups of Division
    if LF_DUPSW is not initial.
      LF_NOUPT = LF_NOUPT * LF_DUPSW.
    endif.
    if LF_DUPSL is not initial.
      LF_NOUPT = LF_NOUPT * LF_DUPSL.
    endif.

*** If we have division acitv -> Take it into account!
    LS_SHTNL-SHTNL = LS_SHTNL-SHTNL * LF_DUPSL.
    LS_SHTNW-SHTNW = LS_SHTNW-SHTNW * LF_DUPSW.

  endif.

*** Initialize Exporting Values
  ES_ABLAS = ME->GET_ABLAS( ).
  ES_ATRIM = ME->GET_ATRIM( ).
  ES_ABLAG = ME->GET_ABLAG( ).

  clear: ES_ABLAS-ABLAS, ES_ABLAG-ABLAG, ES_ATRIM-ATRIM.

***--------------------------------------------------------------------------------------
*** Start Calculation
*** Calculate Gross Blank Area in Case of Calculation Variant 2.
  if ME->F_CALC_GBA eq C_CALC_2 and
     ES_ABLAG is requested.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_SHTGL-SHTGL
        IF_CALCV_UOM_1 = LS_SHTGL-SHTGL_UOM
        IF_CALCV_2     = LS_SHTGW-SHTGW
        IF_CALCV_UOM_2 = LS_SHTGW-SHTGW_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
        IF_UOM         = ES_ABLAG-ABLAG_UOM
      importing
        EF_CALCV       = ES_ABLAG-ABLAG
        EF_CALCV_UOM   = ES_ABLAG-ABLAG_UOM ).

    ES_ABLAG-ABLAG = ES_ABLAG-ABLAG / LF_NOUPT.

  endif.

***--------------------------------------------------------------------------------------
*** Calculate Sold Blank Area
  if ES_ABLAS is requested.
    case F_CALC_SBA.
***   Calculation Variant 1
      when C_CALC_1.

        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting
            IF_CALCV_1     = LS_SHTPL-SHTPL
            IF_CALCV_UOM_1 = LS_SHTPL-SHTPL_UOM
            IF_CALCV_2     = LS_SHTPW-SHTPW
            IF_CALCV_UOM_2 = LS_SHTPW-SHTPW_UOM
            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
            IF_UOM         = ES_ABLAS-ABLAS_UOM
          importing
            EF_CALCV       = ES_ABLAS-ABLAS
            EF_CALCV_UOM   = ES_ABLAS-ABLAS_UOM ).

***   Calculation Variant 2
      when C_CALC_2.

        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting
            IF_CALCV_1     = LS_SHTNL-SHTNL
            IF_CALCV_UOM_1 = LS_SHTNL-SHTNL_UOM
            IF_CALCV_2     = LS_SHTNW-SHTNW
            IF_CALCV_UOM_2 = LS_SHTNW-SHTNW_UOM
            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
            IF_UOM         = ES_ABLAS-ABLAS_UOM
          importing
            EF_CALCV       = ES_ABLAS-ABLAS
            EF_CALCV_UOM   = ES_ABLAS-ABLAS_UOM ).

        ES_ABLAS-ABLAS = ES_ABLAS-ABLAS / LF_NOUPT.


***   Attribute for Sold Blank Area Calculation is not maintained.
      when SPACE.
        ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '504' ).
    endcase.
  endif.

***--------------------------------------------------------------------------------------
*** Calculate Trim Area
  if ES_ATRIM is requested.

    case F_CALC_TA.
***   Calculation Variant 1
      when C_CALC_1.

***     Gross Trim
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_SHTGL-SHTGL
          IF_CALCV_UOM_1 = LS_SHTGL-SHTGL_UOM
          IF_CALCV_2     = LS_SHTGW-SHTGW
          IF_CALCV_UOM_2 = LS_SHTGW-SHTGW_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
          IF_UOM         = ES_ATRIM-ATRIM_UOM
        importing
          EF_CALCV       = LS_ATRIM_G-ATRIM
          EF_CALCV_UOM   = LS_ATRIM_G-ATRIM_UOM ).

***     Net Trim
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_SHTNL-SHTNL
          IF_CALCV_UOM_1 = LS_SHTNL-SHTNL_UOM
          IF_CALCV_2     = LS_SHTNW-SHTNW
          IF_CALCV_UOM_2 = LS_SHTNW-SHTNW_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
          IF_UOM         = ES_ATRIM-ATRIM_UOM
        importing
          EF_CALCV       = LS_ATRIM_N-ATRIM
          EF_CALCV_UOM   = LS_ATRIM_N-ATRIM_UOM ).

        if LF_NOUPT is not initial.
          ES_ATRIM-ATRIM = ( LS_ATRIM_G-ATRIM - LS_ATRIM_N-ATRIM ) / LF_NOUPT.
        else.
          ES_ATRIM-ATRIM = 0.
        endif.

***   Calculation Variant 2
      when C_CALC_2.

        LS_CALCV_1-CALCV     = ES_ABLAG-ABLAG.
        LS_CALCV_1-CALCV_UOM = ES_ABLAG-ABLAG_UOM.
        LS_CALCV_2-CALCV     = ES_ABLAS-ABLAS.
        LS_CALCV_2-CALCV_UOM = ES_ABLAS-ABLAS_UOM.

        if ES_ABLAG-ABLAG is not initial and
           ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE( IS_CALCV_1 = LS_CALCV_1
                                               IS_CALCV_2 = LS_CALCV_2
                                               IF_OPERA   = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.


          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting
            IF_CALCV_1     = ES_ABLAG-ABLAG
            IF_CALCV_UOM_1 = ES_ABLAG-ABLAG_UOM
            IF_CALCV_2     = ES_ABLAS-ABLAS
            IF_CALCV_UOM_2 = ES_ABLAS-ABLAS_UOM
            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
            IF_UOM         = ES_ATRIM-ATRIM_UOM
          importing
            EF_CALCV       = ES_ATRIM-ATRIM
            EF_CALCV_UOM   = ES_ATRIM-ATRIM_UOM ).


        else.
          clear: ES_ATRIM-ATRIM.
          LF_NEG_TRIM = ABAP_TRUE.
        endif.

***   Attribute for Trim Area Calculation is not maintained.
      when SPACE.
        ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '505' ).
    endcase.
  endif.

***--------------------------------------------------------------------------------------
*** Calculate Gross Blank Area at last in Case of Calculation Variant 1
  if ME->F_CALC_GBA eq C_CALC_1 and
     ES_ABLAG is requested.

    if LF_NEG_TRIM eq ABAP_FALSE.
      ES_ABLAG-ABLAG = ES_ABLAS-ABLAS + ES_ATRIM-ATRIM.
    endif.
  elseif ME->F_CALC_GBA is initial and
     ES_ABLAG is requested.
***  Attribute for Gross Blank Area Calculation is not maintained.
    ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '506' ).
  endif.

endmethod.
method GET_OPQTY.

  data:  LS_QITEM         type        ZVCXI_XCSS_S_QITEM.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QITEM( importing ES_QITEM_SELF = LS_QITEM ).
    move LS_QITEM-QITEM     to RS_OPQTY-OPQTY.
    move LS_QITEM-QITEM_UOM to RS_OPQTY-OPQTY_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY to RS_OPQTY.
  endif.

endmethod.
method GET_STATUS.


  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_WDRNP        type        ZVCXI_P0SS_S_WDRNP,
         LS_WWENP        type        ZVCXI_P0SS_S_WWENP.

  RF_ELMST = SUPER->GET_STATUS( ).

  try.

***---------------------------------------------------------------------------------------------
***   Check Net Blank Area
      LS_ABLAN = ME->GET_ABLAN( ).
      if LS_ABLAN-ABLAN is initial
      or LS_ABLAN-ABLAN le 0.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Dry Weight per Piece
      LS_WDRNP = ME->GET_WDRNP( ).
      if LS_WDRNP-WDRNP is initial.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Wet Weight per Piece
      LS_WWENP = ME->GET_WWENP( ).
      if LS_WWENP-WWENP is initial.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

    catch /VCXI/CX_CKX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_E ).
  endtry.


***---------------------------------------------------------------------------------------------
*** Check Tools
  case ME->CHECK_TOOL_VALUES( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_WDRNP        type        ZVCXI_P0SS_S_WDRNP,
         LS_WWENP        type        ZVCXI_P0SS_S_WWENP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***-----------------------------------------------------------------------------------
**Check Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  if LS_ABLAN-ABLAN is initial.

*** Check Sheet Dimensions. Field Net Blank Area can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '501'
                             IF_MSGV1 = 'Sheet Dimensions'(001)
                             IF_MSGV2 = 'Net Blank Area'(011) ).

  elseif LS_ABLAN-ABLAN le 0.
*** Check Cut Out Waste Area. Field Net Blank Area is smaller than Cut Out!
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '502' ).

  else.
*** Field Net Blank Area calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '503'
                             IF_MSGV1 = 'Net Blank Area'(011) ).
  endif.

***-----------------------------------------------------------------------------------
**Check Dry Weight
  LS_WDRNP = ME->GET_WDRNP( ).
  if LS_WDRNP-WDRNP is initial.

*** Check Paper/Medium/Purchased Sheet. Field Dry Weight can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '501'
                             IF_MSGV1 = 'Paper/Medium/Purchased Sheet/Starch'(002)
                             IF_MSGV2 = 'Dry Weight'(013) ).
  else.
*** Field Dry Weight calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '503'
                             IF_MSGV1 = 'Dry Weight'(013) ).
  endif.

***-----------------------------------------------------------------------------------
**Check Wet Weight
  LS_WWENP = ME->GET_WWENP( ).
  if LS_WWENP-WWENP is initial.

*** Check Paper/Medium/Purchased Sheet. Field Wet Weight can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '501'
                             IF_MSGV1 = 'Paper/Medium/Purchased Sheet/Starch'(002)
                             IF_MSGV2 = 'Wet Weight'(014) ).
  else.
*** Field Wet Weight calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '503'
                             IF_MSGV1 = 'Wet Weight'(014) ).
  endif.

***-----------------------------------------------------------------------------------
*** Check Tool Values
  ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).

endmethod.
method GET_TOOL.

  data:  LT_PRVDR          type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR          type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA,
         LR_PR_SHEET       type ref to ZCL_VCXI_P0SS_PR_SHEET.
  data:  LF_DCUTT          type        ZVCXI_P0SS_DCUTT,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SHEET.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SHEET.
  endtry.

  check LR_PR_SHEET is bound.
  move LR_PR_SHEET->GET_DCUTT( ) to LF_DCUTT.

*** Get Die Cut Tool Customizing Instance
  RR_DIECUT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_DCUTT
                                                          IF_WERKS = LF_WERKS ).

endmethod.
method GET_WDRGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGO ).
  move LS_PARAM-ATFLV to RS_WDRGO-WDRGO.
  move LS_PARAM-UNIT  to RS_WDRGO-WDRGO_UOM.

endmethod.
method GET_WDRGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGP ).
  move LS_PARAM-ATFLV to RS_WDRGP-WDRGP.
  move LS_PARAM-UNIT  to RS_WDRGP-WDRGP_UOM.

endmethod.
method GET_WDRNO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNO ).
  move LS_PARAM-ATFLV to RS_WDRNO-WDRNO.
  move LS_PARAM-UNIT  to RS_WDRNO-WDRNO_UOM.

endmethod.
method GET_WDRNP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNP ).
  move LS_PARAM-ATFLV to RS_WDRNP-WDRNP.
  move LS_PARAM-UNIT  to RS_WDRNP-WDRNP_UOM.

endmethod.
method GET_WDRSO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSO ).
  move LS_PARAM-ATFLV to RS_WDRSO-WDRSO.
  move LS_PARAM-UNIT  to RS_WDRSO-WDRSO_UOM.

endmethod.
method GET_WDRSP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSP ).
  move LS_PARAM-ATFLV to RS_WDRSP-WDRSP.
  move LS_PARAM-UNIT  to RS_WDRSP-WDRSP_UOM.

endmethod.
method GET_WDRYW.

  data:  LS_WDRYW           type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYW_P         type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA           type        ZVCXI_P0SS_S_WDRYA,
         LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
         LS_BAWGP           type        ZVCXI_P0S_S_BAWGP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        if LR_WEIGHT is bound.
        clear: LS_WDRYW, LS_WDRYA.
          LR_WEIGHT->GET_WDRYW( importing ES_WDRYW = LS_WDRYW
                                          ES_WDRYA = LS_WDRYA ).

          check LS_WDRYW-WDRYW is not initial.

***       Weights per Area
          if LS_WDRYA-WDRYA is not initial.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_WDRYA-WDRYA_UOM
                                                               IF_UOM_IN    = LS_WDRYA-WDRYA_UOM
                                                               IF_VALUE_IN  = LS_WDRYA-WDRYA
                                                     importing EF_VALUE_OUT = LS_WDRYA-WDRYA
                                                               EF_UOM_OUT   = LS_WDRYA-WDRYA_UOM ).


            if RS_WDRYW-WDRYW is not initial.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WDRYW-WDRYW_UOM
                                                                 IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                                 IF_VALUE_IN  = LS_WDRYW-WDRYW
                                                       importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                                 EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

              RS_WDRYW-WDRYW     = RS_WDRYW-WDRYW + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA ).

            else.
              RS_WDRYW-WDRYW = ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA.

            endif.

            RS_WDRYW-WDRYW_UOM = LS_WDRYW-WDRYW_UOM.

***       Weights per Piece
          else.

            if LS_WDRYW_P is initial.
              move-corresponding LS_WDRYW to LS_WDRYW_P.
            else.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WDRYW-WDRYW
                                                                  IF_CALCV_UOM_1 = LS_WDRYW-WDRYW_UOM
                                                                  IF_CALCV_2     = LS_WDRYW_P-WDRYW
                                                                  IF_CALCV_UOM_2 = LS_WDRYW_P-WDRYW_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_WDRYW_P-WDRYW_UOM
                                                        importing EF_CALCV       = LS_WDRYW_P-WDRYW
                                                                  EF_CALCV_UOM   = LS_WDRYW_P-WDRYW_UOM ).
            endif.



          endif.
        endif.

      endloop.

***------------------------------------------------------------------------------------------------
***   Get Component SE
      if ME->R_PR_COMP_SE is bound.
        LS_BAWGT = ME->R_PR_COMP_SE->GET_BAWGT( ).
        LS_BAWGP = ME->R_PR_COMP_SE->GET_BAWGP( ).

        LS_WDRYW-WDRYW     = LS_BAWGT-BAWGT.
        LS_WDRYW-WDRYW_UOM = LS_BAWGT-BAWGT_UOM.
        LS_WDRYA-WDRYA     = LS_BAWGP-BAWGP.
        LS_WDRYA-WDRYA_UOM = LS_BAWGP-BAWGP_UOM.

        if RS_WDRYW-WDRYW is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WDRYW-WDRYW_UOM
                                                             IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                             IF_VALUE_IN  = LS_WDRYW-WDRYW
                                                   importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                             EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

          RS_WDRYW-WDRYW     = RS_WDRYW-WDRYW + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA ).

        else.
          RS_WDRYW-WDRYW = ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * IS_WDRYA-WDRYA.

        endif.
        RS_WDRYW-WDRYW_UOM = LS_WDRYW-WDRYW_UOM.

      endif.


***   Add PC Weights to Area Weight if needed
      if LS_WDRYW_P-WDRYW is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WDRYW-WDRYW
                                                            IF_CALCV_UOM_1 = RS_WDRYW-WDRYW_UOM
                                                            IF_CALCV_2     = LS_WDRYW_P-WDRYW
                                                            IF_CALCV_UOM_2 = LS_WDRYW_P-WDRYW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WDRYW-WDRYW_UOM
                                                  importing EF_CALCV       = RS_WDRYW-WDRYW
                                                            EF_CALCV_UOM   = RS_WDRYW-WDRYW_UOM ).
      endif.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method GET_WWEGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGO ).
  move LS_PARAM-ATFLV to RS_WWEGO-WWEGO.
  move LS_PARAM-UNIT  to RS_WWEGO-WWEGO_UOM.

endmethod.
method GET_WWEGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGP ).
  move LS_PARAM-ATFLV to RS_WWEGP-WWEGP.
  move LS_PARAM-UNIT  to RS_WWEGP-WWEGP_UOM.

endmethod.
method GET_WWENO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENO ).
  move LS_PARAM-ATFLV to RS_WWENO-WWENO.
  move LS_PARAM-UNIT  to RS_WWENO-WWENO_UOM.

endmethod.
method GET_WWENP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENP ).
  move LS_PARAM-ATFLV to RS_WWENP-WWENP.
  move LS_PARAM-UNIT  to RS_WWENP-WWENP_UOM.

endmethod.
method GET_WWESO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESO ).
  move LS_PARAM-ATFLV to RS_WWESO-WWESO.
  move LS_PARAM-UNIT  to RS_WWESO-WWESO_UOM.


endmethod.
method GET_WWESP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESP ).
  move LS_PARAM-ATFLV to RS_WWESP-WWESP.
  move LS_PARAM-UNIT  to RS_WWESP-WWESP_UOM.

endmethod.
method GET_WWETW.

  data:  LS_WWETW           type        ZVCXI_P0SS_S_WWETW,
         LS_WWETW_P         type        ZVCXI_P0SS_S_WWETW,
         LS_WWETA           type        ZVCXI_P0SS_S_WWETA,
         LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
         LS_BAWGP           type        ZVCXI_P0S_S_BAWGP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        if LR_WEIGHT is bound.
          clear: LS_WWETW, LS_WWETA.
          LR_WEIGHT->GET_WWETW( importing ES_WWETW = LS_WWETW
                                          ES_WWETA = LS_WWETA ).

          check LS_WWETW-WWETW is not initial.

***       Weights per Area
          if LS_WWETA-WWETA is not initial.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_WWETA-WWETA_UOM
                                                               IF_UOM_IN    = LS_WWETA-WWETA_UOM
                                                               IF_VALUE_IN  = LS_WWETA-WWETA
                                                     importing EF_VALUE_OUT = LS_WWETA-WWETA
                                                               EF_UOM_OUT   = LS_WWETA-WWETA_UOM ).


            if RS_WWETW-WWETW is not initial.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WWETW-WWETW_UOM
                                                                 IF_UOM_IN    = LS_WWETW-WWETW_UOM
                                                                 IF_VALUE_IN  = LS_WWETW-WWETW
                                                       importing EF_VALUE_OUT = LS_WWETW-WWETW
                                                                 EF_UOM_OUT   = LS_WWETW-WWETW_UOM ).

              RS_WWETW-WWETW     = RS_WWETW-WWETW + ( ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA ).

            else.
              RS_WWETW-WWETW = ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA.

            endif.

            RS_WWETW-WWETW_UOM = LS_WWETW-WWETW_UOM.

***       Weights per Piece
          else.

            if LS_WWETW_P is initial.
              move-corresponding LS_WWETW to LS_WWETW_P.
            else.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WWETW-WWETW
                                                                  IF_CALCV_UOM_1 = LS_WWETW-WWETW_UOM
                                                                  IF_CALCV_2     = LS_WWETW_P-WWETW
                                                                  IF_CALCV_UOM_2 = LS_WWETW_P-WWETW_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_WWETW_P-WWETW_UOM
                                                        importing EF_CALCV       = LS_WWETW_P-WWETW
                                                                  EF_CALCV_UOM   = LS_WWETW_P-WWETW_UOM ).
            endif.



          endif.
        endif.

      endloop.


***------------------------------------------------------------------------------------------------
***   Get Component SE
      if ME->R_PR_COMP_SE is bound.
        LS_BAWGT = ME->R_PR_COMP_SE->GET_BAWGT( ).
        LS_BAWGP = ME->R_PR_COMP_SE->GET_BAWGP( ).

        LS_WWETW-WWETW     = LS_BAWGT-BAWGT.
        LS_WWETW-WWETW_UOM = LS_BAWGT-BAWGT_UOM.
        LS_WWETA-WWETA     = LS_BAWGP-BAWGP.
        LS_WWETA-WWETA_UOM = LS_BAWGP-BAWGP_UOM.

        if RS_WWETW-WWETW is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_WWETW-WWETW_UOM
                                                             IF_UOM_IN    = LS_WWETW-WWETW_UOM
                                                             IF_VALUE_IN  = LS_WWETW-WWETW
                                                   importing EF_VALUE_OUT = LS_WWETW-WWETW
                                                             EF_UOM_OUT   = LS_WWETW-WWETW_UOM ).

          RS_WWETW-WWETW     = RS_WWETW-WWETW + ( ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA ).

        else.
          RS_WWETW-WWETW = ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * IS_WWETA-WWETA.
        endif.

        RS_WWETW-WWETW_UOM = LS_WWETW-WWETW_UOM.
      endif.


***------------------------------------------------------------------------------------------------
***   Add PC Weights to Area Weight if needed
      if LS_WWETW_P-WWETW is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WWETW-WWETW
                                                            IF_CALCV_UOM_1 = RS_WWETW-WWETW_UOM
                                                            IF_CALCV_2     = LS_WWETW_P-WWETW
                                                            IF_CALCV_UOM_2 = LS_WWETW_P-WWETW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WWETW-WWETW_UOM
                                                  importing EF_CALCV       = RS_WWETW-WWETW
                                                            EF_CALCV_UOM   = RS_WWETW-WWETW_UOM ).
      endif.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_AREA.
      ME->HANDLE_RECALC_AREA( ).

    when C_IEVNT_I_RECALC_WASTE.
      ME->HANDLE_RECALC_WASTE( ).

    when C_IEVNT_I_RECALC_WDRYW.
      ME->HANDLE_RECALC_WDRYW( ).

    when C_IEVNT_I_RECALC_WWETW.
      ME->HANDLE_RECALC_WWETW( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_SHEET.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if ME->R_PR_SHEET is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Comp AS Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_COMP_AS.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Comp SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_COMP_SE.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.


endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_RECALC_AREA.

  data:          LS_ATRIM      type        ZVCXI_P0SS_S_ATRIM,
                 LS_ABLAS      type        ZVCXI_P0SS_S_ABLAS,
                 LS_ABLAG      type        ZVCXI_P0SS_S_ABLAG,
                 LS_ABLAN      type        ZVCXI_P0SS_S_ABLAN,
                 LS_ACOWA      type        ZVCXI_P0SS_S_ACOWA,
                 LS_AREAO      type        ZVCXI_P0SS_S_AREAO,
                 LS_OPQTY      type        /VCXI/VSMR_S_OPQTY.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_AREAO>     type        ZVCXI_P0SS_AREAO.

***--------------------------------------------------------------------------------------
*** Get Sheet Details
  ME->GET_DETAIL_SHEET( importing ES_ABLAS = LS_ABLAS
                                  ES_ATRIM = LS_ATRIM
                                  ES_ABLAG = LS_ABLAG ).

***--------------------------------------------------------------------------------------
*** Set Trim Area
  ME->SET_ATRIM( IF_ATRIM = LS_ATRIM-ATRIM ).

***--------------------------------------------------------------------------------------
*** Set Sold Blank Area
  ME->SET_ABLAS( IS_ABLAS = LS_ABLAS ).

***--------------------------------------------------------------------------------------
*** Set Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  LS_ACOWA = ME->GET_ACOWA( ).
  LS_ABLAN-ABLAN = LS_ABLAS-ABLAS - LS_ACOWA-ACOWA.

*** Make sure we do not get a negative value
  if LS_ABLAN-ABLAN < 0.
    move 0 to LS_ABLAN-ABLAN.
  endif.

  ME->SET_ABLAN( IS_ABLAN = LS_ABLAN ).

***--------------------------------------------------------------------------------------
*** Set Gross Blank Area
  ME->SET_ABLAG( IS_ABLAG = LS_ABLAG ).

***--------------------------------------------------------------------------------------
*** Set Area per Order
  LS_AREAO = ME->GET_AREAO( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_AREAO-AREAO = LS_OPQTY-OPQTY * LS_ABLAN-ABLAN.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_AREAO-AREAO ).
      assign LR_DATA->* to <F_AREAO>.
      LS_AREAO-AREAO = <F_AREAO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_AREAO-AREAO < 0.
    move 0 to LS_AREAO-AREAO.
  endif.

  ME->SET_AREAO( IS_AREAO = LS_AREAO ).

endmethod.
method HANDLE_RECALC_WASTE.

  data: LS_CUWAS   type ZVCXI_P0SS_S_CUWAS,
        LS_ACOWA   type ZVCXI_P0SS_S_ACOWA,
        LS_WDRYW   type ZVCXI_P0SS_S_WDRYW,
        LS_WDRYA   type ZVCXI_P0SS_S_WDRYA.

*** Get Customer Waste
  LS_CUWAS = ME->GET_CUWAS( ).

*** Get Cut Out Waste Area
  LS_ACOWA = ME->GET_ACOWA( ).

  LS_WDRYA-WDRYA     = LS_ACOWA-ACOWA.
  LS_WDRYA-WDRYA_UOM = LS_ACOWA-ACOWA_UOM.

*** Get Dry Weight per Cut Out Waste Area
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_WDRYA ).

  LS_CUWAS-CUWAS     = LS_WDRYW-WDRYW.
  LS_CUWAS-CUWAS_UOM = LS_WDRYW-WDRYW_UOM.

*** Set Customer Waste (Weight)
  ME->SET_CUWAS( IS_CUWAS = LS_CUWAS ).

endmethod.
method HANDLE_RECALC_WDRYW.

  data: LS_WDRNP     type ZVCXI_P0SS_S_WDRNP,
        LS_WDRNO     type ZVCXI_P0SS_S_WDRNO,
        LS_ABLAN     type ZVCXI_P0SS_S_ABLAN,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Dry Weight per Piece
  LS_WDRNP = ME->GET_WDRNP( ).
  LS_ABLAN = ME->GET_ABLAN( ).

*** Get Net Dry Weight per Net Blank Area
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_ABLAN ).

  LS_WDRNP-WDRNP     = LS_WDRYW-WDRYW.
  LS_WDRNP-WDRNP_UOM = LS_WDRYW-WDRYW_UOM.

*** Make sure we do not have a negative value
  if LS_WDRNP-WDRNP < 0.
    move 0 to LS_WDRNP-WDRNP.
  endif.

*** Set Net Dry Weight per Piece
  ME->SET_WDRNP( IS_WDRNP = LS_WDRNP ).

*** 2. Step: Set Dry Weight per Order
  LS_WDRNO = ME->GET_WDRNO( ).

***   Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

  if LS_WDRNP-WDRNP > 0.
*** Get Net Dry Weight per Order
    LS_WDRNO-WDRNO = LS_OPQTY-OPQTY * LS_WDRNP-WDRNP.
  else.
    move 0 to LS_WDRNO-WDRNO.
  endif.

*** Set Net Dry Weight per Order
  ME->SET_WDRNO( IS_WDRNO = LS_WDRNO ).

*** Calc/Set Sold Dry Weight per Piece/Order
  ME->CALC_WDRSP( ).
  ME->CALC_WDRSO( IS_OPQTY = LS_OPQTY ).

*** Calc/Set Gross Dry Weight per Piece/Order
  ME->CALC_WDRGP( ).
  ME->CALC_WDRGO( IS_OPQTY = LS_OPQTY ).

endmethod.
method HANDLE_RECALC_WWETW.

  data: LS_WWENP     type ZVCXI_P0SS_S_WWENP,
        LS_WWENO     type ZVCXI_P0SS_S_WWENO,
        LS_ABLAN     type ZVCXI_P0SS_S_ABLAN,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Wet Weight per Piece
  LS_WWENP = ME->GET_WWENP( ).
  LS_ABLAN = ME->GET_ABLAN( ).

*** Get Wet Weight per Net Blank Area
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_ABLAN ).

  LS_WWENP-WWENP     = LS_WWETW-WWETW.
  LS_WWENP-WWENP_UOM = LS_WWETW-WWETW_UOM.

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP < 0.
    move 0 to LS_WWENP-WWENP.
  endif.

*** Set Net Wet Weight per Piece
  ME->SET_WWENP( IS_WWENP = LS_WWENP ).

*** 2. Step: Wet Weight per Order
  LS_WWENO = ME->GET_WWENO( ).

*** Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP > 0.
    LS_WWENO-WWENO = LS_OPQTY-OPQTY * LS_WWENP-WWENP.
  else.
    move 0 to LS_WWENO-WWENO.
  endif.

*** Set Net Wet Weight per Order
  ME->SET_WWENO( IS_WWENO = LS_WWENO ).

*** Calc/Set Sold Dry Weight per Piece/Order
  ME->CALC_WWESP( ).
  ME->CALC_WWESO( IS_OPQTY = LS_OPQTY ).

*** Calc/Set Gross Dry Weight per Piece/Order
  ME->CALC_WWEGP( ).
  ME->CALC_WWEGO( IS_OPQTY = LS_OPQTY ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.

  try.
*** -------------------------------------------------------------------------------------------------
***   Get Calculation Variant for Sold Blank Area
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'CALC_SBA' ).
      ME->F_CALC_SBA = LS_ATTRI-ATTVA.

    catch /VCXI/CX_CKX.
***   Attribute is not maintained. Set to initial.
      clear: ME->F_CALC_SBA.
  endtry.

  clear: LS_ATTRI.

  try.
*** -------------------------------------------------------------------------------------------------
***   Get Calculation Variant for Trim Area
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'CALC_TA' ).
      ME->F_CALC_TA = LS_ATTRI-ATTVA.

    catch /VCXI/CX_CKX.
***   Attribute is not maintained. Set to initial.
      clear: ME->F_CALC_TA.
  endtry.

  clear: LS_ATTRI.

  try.
*** -------------------------------------------------------------------------------------------------
***   Get Calculation Variant for Gross Blank Area
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'CALC_GBA' ).
      ME->F_CALC_GBA = LS_ATTRI-ATTVA.

    catch /VCXI/CX_CKX.
***   Attribute is not maintained. Set to initial.
      clear: ME->F_CALC_GBA.
  endtry.

endmethod.
method SET_ABLAG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).

  move IS_ABLAG-ABLAG     to LS_PARAM-ATFLV.
  move IS_ABLAG-ABLAG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAG_CHANGED ).
  endif.

endmethod.
method SET_ABLAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).

  move IS_ABLAN-ABLAN     to LS_PARAM-ATFLV.
  move IS_ABLAN-ABLAN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAN_CHANGED ).
  endif.

endmethod.
method SET_ABLAS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAS ).

  move IS_ABLAS-ABLAS     to LS_PARAM-ATFLV.
  move IS_ABLAS-ABLAS_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAS_CHANGED ).
  endif.

endmethod.
method SET_ACOWA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACOWA ).

  move IS_ACOWA-ACOWA     to LS_PARAM-ATFLV.
  move IS_ACOWA-ACOWA_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ACOWA_CHANGED ).
  endif.

endmethod.
method SET_AREAO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).

  move IS_AREAO-AREAO     to LS_PARAM-ATFLV.
  move IS_AREAO-AREAO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREAO_CHANGED ).
  endif.

endmethod.
method SET_ATRIM.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ATRIM ).

  move IF_ATRIM to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ATRIM_CHANGED ).
  endif.

endmethod.
method SET_CUWAS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUWAS ).

  move IS_CUWAS-CUWAS     to LS_PARAM-ATFLV.
  move IS_CUWAS-CUWAS_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CUWAS_CHANGED ).
  endif.

endmethod.
method SET_WDRGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGO ).

  move IS_WDRGO-WDRGO     to LS_PARAM-ATFLV.
  move IS_WDRGO-WDRGO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGP ).

  move IS_WDRGP-WDRGP     to LS_PARAM-ATFLV.
  move IS_WDRGP-WDRGP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRNO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNO ).

  move IS_WDRNO-WDRNO     to LS_PARAM-ATFLV.
  move IS_WDRNO-WDRNO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRNO_CHANGED ).
  endif.

endmethod.
method SET_WDRNP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNP ).

  move IS_WDRNP-WDRNP     to LS_PARAM-ATFLV.
  move IS_WDRNP-WDRNP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRNP_CHANGED ).
  endif.

endmethod.
method SET_WDRSO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSO ).

  move IS_WDRSO-WDRSO     to LS_PARAM-ATFLV.
  move IS_WDRSO-WDRSO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRSP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSP ).

  move IS_WDRSP-WDRSP     to LS_PARAM-ATFLV.
  move IS_WDRSP-WDRSP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWEGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGO ).

  move IS_WWEGO-WWEGO     to LS_PARAM-ATFLV.
  move IS_WWEGO-WWEGO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWEGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGP ).

  move IS_WWEGP-WWEGP     to LS_PARAM-ATFLV.
  move IS_WWEGP-WWEGP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWENO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENO ).

  move IS_WWENO-WWENO     to LS_PARAM-ATFLV.
  move IS_WWENO-WWENO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWENO_CHANGED ).
  endif.

endmethod.
method SET_WWENP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENP ).

  move IS_WWENP-WWENP     to LS_PARAM-ATFLV.
  move IS_WWENP-WWENP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWENP_CHANGED ).
  endif.

endmethod.
method SET_WWESO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESO ).

  move IS_WWESO-WWESO     to LS_PARAM-ATFLV.
  move IS_WWESO-WWESO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWESP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESP ).

  move IS_WWESP-WWESP     to LS_PARAM-ATFLV.
  move IS_WWESP-WWESP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
