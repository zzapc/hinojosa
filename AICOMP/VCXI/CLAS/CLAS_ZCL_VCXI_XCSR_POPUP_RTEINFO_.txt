
class ZCL_VCXI_XCSR_POPUP_RTEINFO definition
  public
  create protected .

public section.

  data S_RTEINFO_VIS type ZVCXI_XCSR_S_RTEINFO_VIS read-only .

  class-methods START
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_PROTOCOL type SYUCOMM value 'PROTOCOL'. "#EC NOTEXT
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_GRID_BL_PSTEP type ref to ZCL_VCXI_XCSR_GRID_BL_PSTEP .
  data R_GRID_RTE_DEF type ref to ZCL_VCXI_XCSR_GRID_RTE_DEF .
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PROTOCOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSR_POPUP_RTEINFO definition
class ZCL_VCXI_XCSR_POPUP_RTEINFO implementation.
method CONSTRUCTOR.

  move IR_GATE   to ME->R_GATE.
  move IR_UIGATE to ME->R_UIGATE.

*** Assign th RP Class to the UI Class
  try.
      move ME->R_GATE->R_CLSPR ?to ME->R_PR_RTESPV.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_FREE.

  if ME->R_GRID_BL_PSTEP is bound.
    ME->R_GRID_BL_PSTEP->DO_FREE( ).
    clear ME->R_GRID_BL_PSTEP.
  endif.

  if ME->R_GRID_RTE_DEF is bound.
    ME->R_GRID_RTE_DEF->DO_FREE( ).
    clear ME->R_GRID_RTE_DEF.
  endif.

endmethod.
method DO_PBO.

***------------------------------------------------------------------
*** Set PF-Status
  set pf-status '0100' of program 'SAPLZVCXI_XCSR_POPUP_RTEINFO'.

*** Initialize Visualization Structure
  ME->INIT_VIS( ).

***------------------------------------------------------------------
*** BL PStep
  if ME->R_GRID_BL_PSTEP is not bound.
*** Create Grid
    create object ME->R_GRID_BL_PSTEP
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_BL_PSTEP'.
  endif.
*** Refresh
  ME->R_GRID_BL_PSTEP->REFRESH_GRID( ).

***------------------------------------------------------------------
*** Routing Definition
  if ME->R_GRID_RTE_DEF is not bound.
*** Create Grid
    create object ME->R_GRID_RTE_DEF
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_RTE_DEF'.
  endif.
*** Refresh
  ME->R_GRID_RTE_DEF->REFRESH_GRID( ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when C_UC_PROTOCOL.
      ME->HANDLE_UC_PROTOCOL( ).

    when C_UC_CANCEL.
      ME->HANDLE_UC_CANCEL( ).

  endcase.

endmethod.
method HANDLE_UC_CANCEL.

  leave to screen 0.

endmethod.
  method HANDLE_UC_PROTOCOL.

    types: begin of YS_PROTOCOL,
             ARBPL type ARBPL,
             WERKS type WERKS.
             include type ZVCXI_XCSR_S_EVTRC as S_EVTRC.
    types: end of YS_PROTOCOL.

    data: LT_PROTOCOL type table of YS_PROTOCOL.
    data: LR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_SALV    type ref to CL_SALV_TABLE.


*** Evaluate all alternatives (to ensure evaluation data is filled)
    ME->R_PR_RTESPV->EVALUATE_BL_PRTE( IT_BL_PRTE = ME->R_PR_RTESPV->T_RTEALT ).

***----------------------------------------------------------------------------
*** Prepare Output
    loop at ME->R_PR_RTESPV->T_RTEALT into LR_BL_PRTE.
      if SY-TABIX ne 1.
***     Separator Line
        append initial line to LT_PROTOCOL.
      endif.
***   Add Protocol Entry for each Work Center
      loop at LR_BL_PRTE->T_EVTRC into data(LS_EVTRC).
        append value #( S_EVTRC = LS_EVTRC ) to LT_PROTOCOL assigning field-symbol(<S_PROTOCOL>).
        if <S_PROTOCOL>-R_RTE_ARBPL is bound and
           <S_PROTOCOL>-R_RTE_ARBPL->R_ARBPL is bound.
          <S_PROTOCOL>-ARBPL = <S_PROTOCOL>-R_RTE_ARBPL->R_ARBPL->F_ARBPL.
          <S_PROTOCOL>-WERKS = <S_PROTOCOL>-R_RTE_ARBPL->R_ARBPL->GET_WERKS( ).
        endif.
      endloop.
    endloop.

***----------------------------------------------------------------------------
*** Display as Simple ALV Popup
    try.
        CL_SALV_TABLE=>FACTORY( importing R_SALV_TABLE = LR_SALV
                                changing  T_TABLE      = LT_PROTOCOL ).
        LR_SALV->SET_SCREEN_POPUP( START_COLUMN = 1
                                   END_COLUMN   = 140
                                   START_LINE   = 1
                                   END_LINE     = 30 ).
        LR_SALV->GET_COLUMNS( )->GET_COLUMN( 'R_RTE_ARBPL' )->SET_TECHNICAL( ABAP_TRUE ).
        LR_SALV->GET_COLUMNS( )->SET_OPTIMIZE( ).
        LR_SALV->DISPLAY( ).

      catch CX_SALV_ERROR into data(LR_CX_SALV_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SALV_ERROR ).
    endtry.

  endmethod.
method INIT_VIS.

  clear ME->S_RTEINFO_VIS.

  check ME->R_PR_RTESPV is bound.

  move ME->R_PR_RTESPV->GET_EVQTY( ) to ME->S_RTEINFO_VIS-S_EVQTY.
  move ME->R_PR_RTESPV->GET_EXQTY( ) to ME->S_RTEINFO_VIS-S_EXQTY.
  move ME->R_PR_RTESPV->GET_LCVAL( ) to ME->S_RTEINFO_VIS-LCVAL.

endmethod.
method START.

  data:  LR_POPUP_RTEINFO type ref to ZCL_VCXI_XCSR_POPUP_RTEINFO.

*** Create Instance
  create object LR_POPUP_RTEINFO
    exporting
      IR_GATE   = IR_GATE
      IR_UIGATE = IR_UIGATE.

*** Call Popup
  call function 'ZVCXI_XCSR_POPUP_RTEINFO_START'
    exporting
      IR_POPUP_RTEINFO = LR_POPUP_RTEINFO.

*** Free the Popup
  LR_POPUP_RTEINFO->DO_FREE( ).

endmethod.
