
class ZCL_VCXI_XCI_BOB_PRODORD definition
  public
  create public .

public section.

  types:
    YT_COMPONENT type table of BAPI_ORDER_COMPONENT with default key .
  types:
    YT_ITEM type table of BAPI_ORDER_ITEM with default key .
  types:
    YT_OPERATION type table of BAPI_ORDER_OPERATION1 with default key .
  types:
    YT_PROD_REL_TOOLS type table of BAPI_ORDER_PROD_REL_TOOLS with default key .
  types:
    YT_SEQUENCE type table of BAPI_ORDER_SEQUENCE with default key .

  data S_HEADER type BAPI_ORDER_HEADER1 .
  data T_COMPONENT type YT_COMPONENT .
  data T_ITEM type YT_ITEM .
  data T_OPERATION type YT_OPERATION .
  data T_PROD_REL_TOOL type YT_PROD_REL_TOOLS .
  data T_SEQUENCE type YT_SEQUENCE .

  methods CHANGE
    importing
      !IS_CHANGE type BAPI_PP_ORDER_CHANGE
      !IS_CHANGEX type BAPI_PP_ORDER_CHANGEX
    raising
      /VCXI/CX_CKX .
  methods CLOSE
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods COMPLETE_TECH
    importing
      !IF_SCOPE type CO_TECO_EXPLODE_NET default '1'
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_AUFNR type AUFNR
      !IS_ORDER_OBJECTS type BAPI_PP_ORDER_OBJECTS
      !IF_WAIT type I optional
    raising
      /VCXI/CX_CKX .
  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods PREPARE_TT
    importing
      !IF_PLNFOLGE type PLNFOLGE default '000000'
      !IF_VORNR type VORNR
      !IS_PROPOSE type BAPI_PP_CONF_PROP optional
      !IF_INCL_NON_BACKFLUSH type ABAP_BOOL default ABAP_TRUE
    exporting
      !ET_GOODSMOVEMENTS type BAPI2017_GM_ITEM_CREATE_T
      !ET_LINK_CONF_GOODSMOV type BAPI_LINK_CONF_GOODSMOV_TT
    returning
      value(RS_TIMETICKET) type BAPI_PP_TIMETICKET
    raising
      /VCXI/CX_CKX .
  methods RELEASE
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods REVOKE_STATUS
    importing
      !IF_STATUS type P_TXT04
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods SET_DELETION_FLAG
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods SET_STATUS
    importing
      !IF_STSMA type CO_STSMA_HDR optional
      !IF_STATUS type P_TXT04
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
protected section.

  data T_JSTAT type TTJSTAT .
  data F_STSMA type CO_STSMA_HDR .

  class-methods CONV_DETAIL_RETURN_TO_MSG
    importing
      !IT_DETAIL_RETURN type YHP_BAPI_ORDER_RETURN_TT
    returning
      value(RR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods INIT_STATUS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_PRODORD definition
class ZCL_VCXI_XCI_BOB_PRODORD implementation.
  method CHANGE.

    data: LS_BAPIRET2   type BAPIRET2.


    call function 'BAPI_PRODORD_CHANGE'
      exporting
        NUMBER     = ME->S_HEADER-ORDER_NUMBER
        ORDERDATA  = IS_CHANGE
        ORDERDATAX = IS_CHANGEX
      importing
        RETURN     = LS_BAPIRET2
*       ORDER_TYPE =
*       ORDER_STATUS           =
*       MASTER_DATA_READ       =
      .

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

  endmethod.
  method CLOSE.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER         type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).

    call function 'BAPI_PRODORD_CLOSE'
      importing
        RETURN        = LS_BAPIRET2
      tables
        ORDERS        = LT_ORDER
        DETAIL_RETURN = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

  endmethod.
  method COMPLETE_TECH.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER         type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).

    call function 'BAPI_PRODORD_COMPLETE_TECH'
      exporting
        SCOPE_COMPL_TECH = IF_SCOPE
      importing
        RETURN           = LS_BAPIRET2
      tables
        ORDERS           = LT_ORDER
        DETAIL_RETURN    = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LF_CHECK type I.
    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_HEADER type table of BAPI_ORDER_HEADER1.


***--------------------------------------------------------------------------------------
*** Check if Production Order exists and wait if needed as commit is not completed
    while LF_CHECK < IF_WAIT.
      clear LS_BAPIRET2.
      call function 'BAPI_PRODORD_EXIST_CHECK'
        exporting
          NUMBER = IF_AUFNR
        importing
          RETURN = LS_BAPIRET2.

      if LS_BAPIRET2 is not initial.
        LF_CHECK = LF_CHECK + 1.
        wait up to 1 seconds.
      else.
        exit.
      endif.
    endwhile.

***--------------------------------------------------------------------------------------
*** Get Details
    clear LS_BAPIRET2.
    call function 'BAPI_PRODORD_GET_DETAIL'
      exporting
        NUMBER        = IF_AUFNR
        ORDER_OBJECTS = IS_ORDER_OBJECTS
      importing
        RETURN        = LS_BAPIRET2
      tables
        HEADER        = LT_HEADER
        POSITION      = ME->T_ITEM
        SEQUENCE      = ME->T_SEQUENCE
        OPERATION     = ME->T_OPERATION
        COMPONENT     = ME->T_COMPONENT
        PROD_REL_TOOL = ME->T_PROD_REL_TOOL.
    if LS_BAPIRET2-TYPE eq 'E'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

*** Fill Attributes with loaded Information
    ME->S_HEADER = value #( LT_HEADER[ 1 ] optional ).

*** Read Status
    ME->INIT_STATUS( ).

  endmethod.
  method CONV_DETAIL_RETURN_TO_MSG.

    check IT_DETAIL_RETURN is not initial.

    RR_MSG = new #( ).

    loop at IT_DETAIL_RETURN into data(LS_DETAIL_RETURN).
      RR_MSG->ADD_MESSAGE( IF_MSGID = LS_DETAIL_RETURN-ID
                           IF_MSGTY = LS_DETAIL_RETURN-TYPE
                           IF_MSGNO = LS_DETAIL_RETURN-NUMBER
                           IF_MSGV1 = LS_DETAIL_RETURN-MESSAGE_V1
                           IF_MSGV2 = LS_DETAIL_RETURN-MESSAGE_V2
                           IF_MSGV3 = LS_DETAIL_RETURN-MESSAGE_V3
                           IF_MSGV4 = LS_DETAIL_RETURN-MESSAGE_V4 ).
    endloop.

  endmethod.
  method DEQUEUE.

    call function 'DEQUEUE_ESORDER'
      exporting
        MANDT = SY-MANDT
        AUFNR = ME->S_HEADER-ORDER_NUMBER.

  endmethod.
  method ENQUEUE.

*** Lock Production Order
    call function 'ENQUEUE_ESORDER'
      exporting
        MANDT          = SY-MANDT
        AUFNR          = ME->S_HEADER-ORDER_NUMBER
        _WAIT          = ABAP_TRUE
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.

    if SY-SUBRC is not initial.
***   Order & is already being processed by &
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'CO'
                                                      IF_MSGNO = '469'
                                                      IF_MSGV1 = ME->S_HEADER-ORDER_NUMBER
                                                      IF_MSGV2 = SY-MSGV1
                                                      IF_TEMP  = ABAP_TRUE ).
    endif.

  endmethod.
  method INIT_STATUS.

*** Get all status of order
    call function 'STATUS_READ'
      exporting
        OBJNR            = conv J_OBJNR( 'OR' && ME->S_HEADER-ORDER_NUMBER )
        ONLY_ACTIVE      = ABAP_TRUE
      importing
        STSMA            = ME->F_STSMA
      tables
        STATUS           = ME->T_JSTAT
      exceptions
        OBJECT_NOT_FOUND = 1
        others           = 2.

  endmethod.
  method PREPARE_TT.

    data: LS_BAPIRET1 type BAPIRET1,
          LS_ITEM     type BAPI_ORDER_ITEM.
    data: LT_TIMETICKETS   type table of BAPI_PP_TIMETICKET,
          LT_DETAIL_RETURN type TY_T_BAPI_CORU_RETURN.


***--------------------------------------------------------------------------------------
*** Define requested Proposal
    data(LS_PROPOSE) = cond #( when IS_PROPOSE is supplied then IS_PROPOSE
                               else value #( QUANTITY      = ABAP_TRUE
                                             ACTIVITY      = ABAP_TRUE
                                             DATE_AND_TIME = ABAP_TRUE
                                             PERSONNEL     = ABAP_TRUE
                                             GOODSMOVEMENT = ABAP_TRUE ) ).

*** Define Time Ticket
    LT_TIMETICKETS = value #( ( ORDERID   = ME->S_HEADER-ORDER_NUMBER
                                SEQUENCE  = IF_PLNFOLGE
                                OPERATION = IF_VORNR ) ).

***--------------------------------------------------------------------------------------
*** Receive Proposal
    call function 'BAPI_PRODORDCONF_GET_TT_PROP'
      exporting
        PROPOSE            = LS_PROPOSE
      importing
        RETURN             = LS_BAPIRET1
      tables
        TIMETICKETS        = LT_TIMETICKETS
        GOODSMOVEMENTS     = ET_GOODSMOVEMENTS
        LINK_CONF_GOODSMOV = ET_LINK_CONF_GOODSMOV
        DETAIL_RETURN      = LT_DETAIL_RETURN.

    check LT_TIMETICKETS is not initial.
    RS_TIMETICKET = LT_TIMETICKETS[ 1 ].

***--------------------------------------------------------------------------------------
    if IF_INCL_NON_BACKFLUSH eq ABAP_TRUE.
***   Get related Item Information for single-item Order
      if LINES( ME->T_ITEM ) eq 1.
        LS_ITEM = ME->T_ITEM[ 1 ].
      endif.

***   Add proposal for materials, which are not backflushed
      loop at ME->T_COMPONENT into data(LS_COMPONENT)
                              where SEQUENCE  eq IF_PLNFOLGE
                               and  OPERATION eq IF_VORNR
                               and  BACKFLUSH ne ABAP_TRUE.

        append value #( MATERIAL         = LS_COMPONENT-MATERIAL
                        MATERIAL_LONG    = LS_COMPONENT-MATERIAL_LONG
                        PLANT            = LS_COMPONENT-PROD_PLANT
                        STGE_LOC         = LS_COMPONENT-STORAGE_LOCATION
                        BATCH            = LS_COMPONENT-BATCH
                        MOVE_TYPE        = LS_COMPONENT-MOVEMENT_TYPE
                        SPEC_STOCK       = LS_COMPONENT-SPECIAL_STOCK
                        SALES_ORD        = LS_ITEM-SALES_ORDER
                        S_ORD_ITEM       = LS_ITEM-SALES_ORDER_ITEM
                        ENTRY_QNT        = LS_COMPONENT-ENTRY_QUANTITY
                        ENTRY_UOM        = LS_COMPONENT-ENTRY_UOM
                        ORDERID          = LS_COMPONENT-ORDER_NUMBER
                        ORDER_ITNO       = LS_ITEM-ORDER_ITEM_NUMBER
                        RESERV_NO        = LS_COMPONENT-RESERVATION_NUMBER
                        RES_ITEM         = LS_COMPONENT-RESERVATION_ITEM
                        RES_TYPE         = LS_COMPONENT-RESERVATION_TYPE
                        WITHDRAWN        = ABAP_TRUE
                        DELIV_ITEM       = LS_COMPONENT-ITEM_NUMBER
                        QUANTITY         = LS_COMPONENT-REQ_QUAN
                        BASE_UOM         = LS_COMPONENT-BASE_UOM
                      ) to ET_GOODSMOVEMENTS.

***     Link Goods Issue to Time Ticket
        append value #( INDEX_CONFIRM = 1
                        INDEX_GOODSMOV = LINES( ET_GOODSMOVEMENTS )
                      ) to ET_LINK_CONF_GOODSMOV.
      endloop.
    endif.

  endmethod.
  method RELEASE.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER         type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).

    call function 'BAPI_PRODORD_RELEASE'
      importing
        RETURN        = LS_BAPIRET2
      tables
        ORDERS        = LT_ORDER
        DETAIL_RETURN = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

  endmethod.
  method REVOKE_STATUS.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER         type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).

*** Revoke Status
    call function 'BAPI_PRODORD_REVOKEUSERSTATUS'
      exporting
        STATUS_PROFILE = ME->F_STSMA
        STATUS         = IF_STATUS
      importing
        RETURN         = LS_BAPIRET2
      tables
        ORDERS         = LT_ORDER
        DETAIL_RETURN  = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

*** Read Status again to have latest values
    ME->INIT_STATUS( ).

  endmethod.
  method SET_DELETION_FLAG.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).

*** Set Deletion Flag
    call function 'BAPI_PRODORD_SET_DELETION_FLAG'
      importing
        RETURN        = LS_BAPIRET2
      tables
        ORDERS        = LT_ORDER
        DETAIL_RETURN = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

  endmethod.
  method SET_STATUS.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LT_ORDER         type table of BAPI_ORDER_KEY,
          LT_DETAIL_RETURN type BAPI_ORDER_RETURN_TT.


    LT_ORDER = value #( ( ORDER_NUMBER = ME->S_HEADER-ORDER_NUMBER ) ).


*** Set Status
    call function 'BAPI_PRODORD_SETUSERSTATUS'
      exporting
        STATUS_PROFILE = cond #( when IF_STSMA is supplied then IF_STSMA
                                                           else ME->F_STSMA )
        STATUS         = IF_STATUS
      importing
        RETURN         = LS_BAPIRET2
      tables
        ORDERS         = LT_ORDER
        DETAIL_RETURN  = LT_DETAIL_RETURN.

    if LS_BAPIRET2-TYPE ca 'EAX'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

    if ER_MSG is requested.
      ER_MSG = CONV_DETAIL_RETURN_TO_MSG( IT_DETAIL_RETURN = LT_DETAIL_RETURN ).
    endif.

*** Read Status again to have latest values
    ME->INIT_STATUS( ).

  endmethod.
