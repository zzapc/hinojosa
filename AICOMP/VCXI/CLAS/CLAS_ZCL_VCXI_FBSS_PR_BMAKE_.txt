
class ZCL_VCXI_FBSS_PR_BMAKE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_NEXT .
  interfaces ZIF_VCXI_FBSS_COMM_NEXT .
  interfaces ZIF_VCXI_XCS_NGREP .
  interfaces ZIF_VCXI_F0S_LTEXT .

  constants C_IPRVT_BMAKE type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_BMAKE' ##NO_TEXT.
  constants C_PARID_BGHEI type /VCXI/VKS_PARID value 'ZVCXI_FB_BGHEI' ##NO_TEXT.
  constants C_PARID_BGWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWID' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDWI' ##NO_TEXT.

  methods GET_BGDIM_VALUE
    returning
      value(RT_BGDIM_VALUE) type ZVCXI_FBSS_TT_BGDIM_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_BPDIM_VALUE
    returning
      value(RT_BPDIM_VALUE) type ZVCXI_FBSS_TT_BPDIM_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_BGFPX
    exporting
      !EF_BGFPX type ZVCXI_FBS_BGFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_BGWGT
    exporting
      !ES_BGWGT type ZVCXI_FBS_S_BGWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_BAG
    returning
      value(RR_CUST_BAG) type ref to ZCL_VCXI_FBSS_CUST_BAG
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_NOUPS type ZVCXI_F0S_NOUPS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_F0S_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_BGFPX type /VCXI/VKSC_IEVNT value 'RECALC_BGFPX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_BGWGT type /VCXI/VKSC_IEVNT value 'RECALC_BGWGT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_NOUPS type /VCXI/VKSC_IEVNT value 'RECALC_NOUPS' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_I_INIT_HANDLE type /VCXI/VKSC_IEVNT value 'INIT_HANDLE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_BPART type /VCXI/VKSC_IEVNT value 'INIT_BPART' ##NO_TEXT.
  constants C_IEVNT_O_BGBPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGFPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGHEI_CHANGED type /VCXI/VKSC_IEVNT value 'BGHEI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BGWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWID_CHANGED type /VCXI/VKSC_IEVNT value 'BGWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBAGT_CHANGED type /VCXI/VKSC_IEVNT value 'IBAGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_PARID_BGBPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGBPX' ##NO_TEXT.
  constants C_PARID_BGFPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGFPX' ##NO_TEXT.
  constants C_PARID_BGWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWGT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.

  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_F0S_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_F0S_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_F0S_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods GET_ID_BY_IPRVT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_IPRVT type /VCXI/VKSC_IPRVT
    returning
      value(RF_ID) type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BPART
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_HANDLE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BGFPX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BGWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUPS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_BGBPX
    importing
      !IF_BGBPX type ZVCXI_FBS_BGBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGHEI
    importing
      !IS_BGHEI type ZVCXI_FBS_S_BGHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWGT
    importing
      !IS_BGWGT type ZVCXI_FBS_S_BGWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWID
    importing
      !IS_BGWID type ZVCXI_FBS_S_BGWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_F0S_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_F0S_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_F0S_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_IBAGT
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_BMAKE definition
class ZCL_VCXI_FBSS_PR_BMAKE implementation.
  method GET_BGDIM_VALUE.

    data: LS_BGWID type ZVCXI_FBS_S_BGWID,
          LS_BGHEI type ZVCXI_FBS_S_BGHEI.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.
    field-symbols: <S_BGDIM_VALUE>  type ZVCXI_FBSS_S_BGDIM_VALUE.

***--------------------------------------------------------------------------------------
*** Bag Width
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_BGWID ).
    if LS_BGWID-BGWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGWID to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGWID-BGWID                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGWID-BGWID_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Bag Height
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_BGHEI ).
    if LS_BGHEI-BGHEI is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGHEI to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGHEI-BGHEI                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGHEI-BGHEI_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).

***--------------------------------------------------------------------------------------
*** Overlap Dimension
    if LR_BL_BGBPROP->S_OLDIM-OLWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_OLDIM-OLWID          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_OLDIM-OLWID_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Gusset Dimension
    if LR_BL_BGBPROP->S_GUDIM-GULEF is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_GUDIM-GULEF          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_GUDIM-GULEF_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    if LR_BL_BGBPROP->S_GUDIM-GURIG is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_GUDIM-GURIG          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_GUDIM-GURIG_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    if LR_BL_BGBPROP->S_GUDIM-GUTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_GUDIM-GUTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_GUDIM-GUTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    if LR_BL_BGBPROP->S_GUDIM-GUBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_GUDIM-GUBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_GUDIM-GUBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Fold Dimension
    if LR_BL_BGBPROP->S_FODIM-FOTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_FODIM-FOTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_FODIM-FOTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    if LR_BL_BGBPROP->S_FODIM-FOBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_FODIM-FOBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_FODIM-FOBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Wicket Lip
    if LR_BL_BGBPROP->S_WIDIM-WILIP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_WILIP to <S_BGDIM_VALUE>-IBDIM.
      move LR_BL_BGBPROP->S_WIDIM-WILIP          to <S_BGDIM_VALUE>-BVDIM.
      move LR_BL_BGBPROP->S_WIDIM-WILIP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

  endmethod.
  method GET_BGFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).
    move LS_PARAM-STRNG to EF_BGFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method GET_BGWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).
    move LS_PARAM-ATFLV to ES_BGWGT-BGWGT.
    move LS_PARAM-UNIT  to ES_BGWGT-BGWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPDIM_VALUE.

***--------------------------------------------------------------------------------------
*** Collect from existing Bag Parts
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      append lines of cast ZCL_VCXI_FBSS_PR_BPART( LR_GATE->R_CLSPR )->GET_BPDIM_VALUE( ) to RT_BPDIM_VALUE.
    endloop.

  endmethod.
  method GET_CUST_BAG.

    data:  LF_IBAGT type ZVCXI_FBS_IBAGT.

*** Get Bag Customizing
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    RR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = cond #( "when <no calculation> ne ABAP_TRUE then ABAP_UNDEFINED
                       when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_ID_BY_IPRVT.

    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = IF_IPRVT ).

    read table LT_PRVDR_DEF into LS_PRVDR_DEF
                            with key IPRVT = IF_IPRVT.
    if SY-SUBRC eq 0.
      move LS_PRVDR_DEF-ID to RF_ID.
    else.
***   Provider Type &1 not defined for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_F0SS'
                                            IF_MSGNO = '107'
                                            IF_MSGV1 = IF_IPRVT
                                            IF_MSGV2 = IR_GATE->F_ID ).
    endif.

  endmethod.
  method GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_BGWGT.
        ME->HANDLE_RECALC_BGWGT( ).
      when C_IEVNT_I_RECALC_BGFPX.
        ME->HANDLE_RECALC_BGFPX( ).

      when C_IEVNT_I_RECALC_NOUPS.
        ME->HANDLE_RECALC_NOUPS( ).

      when C_IEVNT_I_INIT_BPART.
        ME->HANDLE_INIT_BPART( ).

      when C_IEVNT_I_INIT_HANDLE.
        ME->HANDLE_INIT_HANDLE( ).

      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_BPART.

    data: LF_IBPAR       type ZVCXI_FBS_IBPAR,
          LF_POSID       type /VCXI/VKSR_POSID,
          LF_ID          type /VCXI/CKX_ID,
          LF_IBPAR_DEF   type ZVCXI_FBS_IBPAR,
          LF_ICELM_BPART type /VCXI/CKX_ID,
          LF_ICELM_BFILM type /VCXI/CKX_ID.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_IBPAR type /VCXI/CKX_TT_ID.
    data: LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    move ME->GET_CUST_BAG( ) to LR_CUST_BAG.

    check LR_CUST_BAG is bound.

*** Get defined Bag Parts
    LT_IBPAR = LR_CUST_BAG->GET_IBPAR( ).

***--------------------------------------------------------------------------------------
*** Get existing Bag Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                     IF_INUSE = ABAP_TRUE ).

*** Create used Parts
    loop at LT_IBPAR into LF_ID.
      clear LR_GATE.

      move LF_ID to LF_IBPAR_DEF.

***   Find existing
      loop at LT_GATE into LR_GATE.
        move LR_GATE->R_CLSPR ?to LR_PR_BPART.
        check LR_PR_BPART is bound.

        LR_PR_BPART->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).
        if LF_IBPAR eq LF_IBPAR_DEF.
          exit.
        else.
          clear LR_GATE.
        endif.
      endloop.

      if LR_GATE is not bound.
***     Create new Bag Part
        if LF_ICELM_BPART is initial.
          LF_ICELM_BPART = ME->GET_ID_BY_IPRVT( IR_GATE  = ME->R_GATE
                                                IF_IPRVT =  ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART ).
        endif.
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ICELM_BPART ).
        check LR_GATE is bound.
        if LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
          LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.

        move LR_GATE->R_CLSPR ?to LR_PR_BPART.

        check LR_PR_BPART is bound.

***     Set Part ID
        LR_PR_BPART->SET_IBPAR( IF_IBPAR = LF_IBPAR_DEF ).

***     Create Bag Film
        if LF_ICELM_BFILM is initial.
          LF_ICELM_BFILM = ME->GET_ID_BY_IPRVT( IR_GATE  = LR_GATE
                                                IF_IPRVT = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM ).
        endif.
        LR_GATE = LR_GATE->CREATE_ELEMENT( IF_ID = LF_ICELM_BFILM ).
        if LR_GATE is bound and
           LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
          LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.

      else.
***     Update Bag Part
        move LR_GATE->R_CLSPR ?to LR_PR_BPART.
        check LR_PR_BPART is bound.
      endif.

    endloop.

***--------------------------------------------------------------------------------------
*** Adjust Position used Parts
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_BPART.
      check LR_PR_BPART is bound.

      LR_PR_BPART->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).

      read table LT_IBPAR with key TABLE_LINE = LF_IBPAR transporting no fields.
      if SY-SUBRC eq 0.
***     Set Position
        move SY-TABIX to LF_POSID.
        LR_GATE->SET_POSID( IF_POSID = LF_POSID ).

***     Mark as used
        delete LT_GATE.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Free not used Parts
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
  method HANDLE_INIT_HANDLE.

    data: LF_THNDL     type ZVCXI_FBS_THNDL,
          LF_ID        type /VCXI/CKX_ID,
          LF_THNDL_DEF type ZVCXI_FBS_THNDL.
    data: LT_GATE   type /VCXI/VKSR_TT_GATE,
          LT_HANDLE type /VCXI/CKX_TT_ID.
    data: LR_CUST_BAG  type ref to ZCL_VCXI_FBSS_CUST_BAG,
          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_HANDLE type ref to ZCL_VCXI_FBSS_PR_HANDLE.


*** Get Bag Customizing
    move ME->GET_CUST_BAG( ) to LR_CUST_BAG.

    check LR_CUST_BAG is bound.

*** Get defined Handle Types
    LT_HANDLE = LR_CUST_BAG->GET_HANDLE( ).

*** Get existing Handles
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE
                                     IF_INUSE = ABAP_TRUE ).

*** Keep Bag Type defined Handle Types
    loop at LT_HANDLE into LF_ID.

      move LF_ID to LF_THNDL_DEF.

***   Remove not allowed Handle Types
      loop at LT_GATE into LR_GATE.
        move LR_GATE->R_CLSPR ?to LR_PR_HANDLE.
        check LR_PR_HANDLE is bound.

        LR_PR_HANDLE->GET_THNDL( importing EF_THNDL = LF_THNDL ).
        if LF_THNDL eq LF_THNDL_DEF.
          delete LT_GATE.
        else.
          clear LR_GATE.
        endif.
      endloop.

    endloop.

*** Free not used Handle Types
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
  method HANDLE_RECALC_BGFPX.

    data: LT_GATE   type /VCXI/VKSR_TT_GATE,
          LT_BPINFO type ZVCXI_FBSS_TT_BPINFO.
    data: LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BPART   type ref to ZCL_VCXI_FBSS_PR_BPART.
    field-symbols: <S_BPINFO> type ZVCXI_FBSS_S_BPINFO.


***--------------------------------------------------------------------------------------
*** Create fresh instance of Bag Forward Property
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Get Bag Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_BPART.

      append initial line to LT_BPINFO assigning <S_BPINFO>.
      LR_PR_BPART->GET_IBPAR( importing EF_IBPAR = <S_BPINFO>-IBPAR ).
      LR_PR_BPART->GET_BPARE( importing ES_BPARE = <S_BPINFO>-S_BPARE ).
      LR_PR_BPART->GET_SURWT( importing ES_SURWT = <S_BPINFO>-S_SURWT ).

    endloop.
    LR_BL_BGFPROP->SET_BPINFO( IT_BPINFO = LT_BPINFO ).

*** Handling Dimensions
    LR_BL_BGFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

***--------------------------------------------------------------------------------------
*** Set Bag Forward Property XML (Inbound)
    ME->SET_BGFPX( IF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ) ).

  endmethod.
  method HANDLE_RECALC_BGWGT.

    data: LS_BPWGT type ZVCXI_FBS_S_BPWGT,
          LS_BGWGT type ZVCXI_FBS_S_BGWGT,
          LS_HNWGT type ZVCXI_FBS_S_HNWGT.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BPART  type ref to ZCL_VCXI_FBSS_PR_BPART,
          LR_PR_HANDLE type ref to ZCL_VCXI_FBSS_PR_HANDLE.


***--------------------------------------------------------------------------------------
*** Get Bag Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_BPART.

***   Get Sum of Bag Part Weight
      LR_PR_BPART->GET_BPWGT( importing ES_BPWGT = LS_BPWGT ).
      if LS_BGWGT is initial.
        move LS_BPWGT-BPWGT     to LS_BGWGT-BGWGT.
        move LS_BPWGT-BPWGT_UOM to LS_BGWGT-BGWGT_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPWGT-BPWGT
                                                            IF_CALCV_UOM_1 = LS_BPWGT-BPWGT_UOM
                                                            IF_CALCV_2     = LS_BGWGT-BGWGT
                                                            IF_CALCV_UOM_2 = LS_BGWGT-BGWGT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                  importing EF_CALCV       = LS_BGWGT-BGWGT
                                                            EF_CALCV_UOM   = LS_BGWGT-BGWGT_UOM ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Handles
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_HANDLE.

***   Get Sum of Handle Weight
      LR_PR_HANDLE->GET_HNWGT( importing ES_HNWGT = LS_HNWGT ).
      if LS_BGWGT is initial.
        move LS_HNWGT-HNWGT     to LS_BGWGT-BGWGT.
        move LS_HNWGT-HNWGT_UOM to LS_BGWGT-BGWGT_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_HNWGT-HNWGT
                                                            IF_CALCV_UOM_1 = LS_HNWGT-HNWGT_UOM
                                                            IF_CALCV_2     = LS_BGWGT-BGWGT
                                                            IF_CALCV_UOM_2 = LS_BGWGT-BGWGT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                  importing EF_CALCV       = LS_BGWGT-BGWGT
                                                            EF_CALCV_UOM   = LS_BGWGT-BGWGT_UOM ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Bag Weight (Inbound)
    ME->SET_BGWGT( IS_BGWGT = LS_BGWGT ).

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.


***--------------------------------------------------------------------------------------
*** Do only recalculate Handling Dimensions if they are not overridden
    ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing ER_CUST_BAG = data(LR_CUST_BAG) ).
    if LR_CUST_BAG is bound.
***   Calculate Bag Handling Dimensions
      data(LS_HNDDIM) = LR_CUST_BAG->CALC_HNDDIM( IT_BGDIM_VALUE = ME->GET_BGDIM_VALUE( )
                                                  IT_BPDIM_VALUE = ME->GET_BPDIM_VALUE( ) ).

***   Ensure no negative Values have been calculated
      LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
      LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
      LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

***   Set new Handling Dimensions
      ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).
    else.
***   Reset Handling Dimensions
      ME->SET_HNDDIM( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_NOUPS.

    data: LF_NOUPS       type ZVCXI_F0S_NOUPS.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART.

    move 0 to LF_NOUPS.

***--------------------------------------------------------------------------------------
*** Get existing Bag Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                     IF_INUSE = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC is initial.

    try .
        move LR_GATE->R_CLSPR ?to LR_PR_BPART.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_BPART.
    endtry.

    check LR_PR_BPART is bound.

*** Get already calculated Number of Ups from first Bag Part
    LR_PR_BPART->GET_NOUPS( importing EF_NOUPS = LF_NOUPS ).

***--------------------------------------------------------------------------------------
*** Set Bag Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_BGBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).

    move IF_BGBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGBPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).

    move IF_BGFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGFPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGHEI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).

    move IS_BGHEI-BGHEI     to LS_PARAM-ATFLV.
    move IS_BGHEI-BGHEI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGHEI_CHANGED ).
    endif.

  endmethod.
  method SET_BGWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).

    move IS_BGWGT-BGWGT     to LS_PARAM-ATFLV.
    move IS_BGWGT-BGWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BGWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).

    move IS_BGWID-BGWID     to LS_PARAM-ATFLV.
    move IS_BGWID-BGWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWID_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_IBAGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).

    move IF_IBAGT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBAGT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LF_IBAGT      type        ZVCXI_FBS_IBAGT,
          LF_IBAGT_PREV type        ZVCXI_FBS_IBAGT.
    data: LS_BGWID      type        ZVCXI_FBS_S_BGWID,
          LS_BGWID_PREV type        ZVCXI_FBS_S_BGWID,
          LS_BGHEI      type        ZVCXI_FBS_S_BGHEI,
          LS_BGHEI_PREV type        ZVCXI_FBS_S_BGHEI.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FBSS_COMM_PREV,
          LR_BL_BGBPROP      type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGBPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Bag Backward Property Instance
    LR_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get first defined Bag Type
      LR_COMM_PREV->GET_IBAGT( importing EF_IBAGT = LF_IBAGT_PREV ).
      if LF_IBAGT is initial.
        move LF_IBAGT_PREV to LF_IBAGT.
      endif.

***   Get first defined Bag Width
      LR_COMM_PREV->GET_BGWID( importing ES_BGWID = LS_BGWID_PREV ).
      if LS_BGWID-BGWID is initial.
        move LS_BGWID_PREV to LS_BGWID.
      endif.

***   Get first defined Bag Height
      LR_COMM_PREV->GET_BGHEI( importing ES_BGHEI = LS_BGHEI_PREV ).
      if LS_BGHEI-BGHEI is initial.
        move LS_BGHEI_PREV to LS_BGHEI.
      endif.

***   Combine Bag Forward Property
      LR_COMM_PREV->GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
      LR_BL_BGBPROP->MERGE( IR_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Bag Type
    ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).

*** Backward Bag Width
    ME->SET_BGWID( IS_BGWID = LS_BGWID ).

*** Backward Bag Height
    ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).

*** Backward Bag Backward Property XML
    ME->SET_BGBPX( IF_BGBPX = LR_BL_BGBPROP->GET_BGBPX( ) ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).
    move LS_PARAM-STRNG to EF_BGBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property XML (Inbound)
    ME->GET_BGFPX( importing EF_BGFPX = EF_BGFPX
                             EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT.

*** Get Bag Weight (Inbound)
    ME->GET_BGWGT( importing ES_BGWGT = ES_BGWGT
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT.

    data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

    clear EF_DESCR.
    check EF_IBAGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    if ER_CUST_BAG is requested or
       EF_DESCR    is requested.
      ER_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
    endif.

*** Get Description
    if ER_CUST_BAG is bound and
       EF_DESCR    is requested.
      move ER_CUST_BAG->GET_DESCR( ) to EF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Attribute Data
    ME->GET_NOUPS( importing EF_NOUPS = data(LF_NOUPS) ).        "Number of Ups
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = LF_NOUPS
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_ICON      = 'sap-icon://retail-store-manager'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***--------------------------------------------------------------------------------------
*** Get Bag Parts
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
***   Delegate Fill to Bag Parts
      cast ZIF_VCXI_XCS_NGREP( LR_GATE->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                         changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).

***   Add Line
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( ME->R_GATE ) ).

    endloop.

*** Get Handles
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
***   Delegate Fill to Bag Parts
      cast ZIF_VCXI_XCS_NGREP( LR_GATE->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                         changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).

***   Add Line
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( ME->R_GATE ) ).

    endloop.

  endmethod.
