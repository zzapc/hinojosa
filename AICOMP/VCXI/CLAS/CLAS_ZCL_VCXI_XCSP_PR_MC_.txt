
class ZCL_VCXI_XCSP_PR_MC definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_IPRVT_XCS_MC type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSP_MC' ##NO_TEXT.
  constants C_PARID_AVGCO_A type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_A' ##NO_TEXT.
  constants C_PARID_AVGCO_L type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_L' ##NO_TEXT.
  constants C_PARID_AVGCO_P type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_P' ##NO_TEXT.
  constants C_PARID_AVGCO_W type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_W' ##NO_TEXT.
  constants C_PARID_AVGCP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_A' ##NO_TEXT.
  constants C_PARID_AVGCP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_L' ##NO_TEXT.
  constants C_PARID_AVGCP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_P' ##NO_TEXT.
  constants C_PARID_AVGCP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_W' ##NO_TEXT.
  constants C_PARID_CONSU_A type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_A' ##NO_TEXT.
  constants C_PARID_CONSU_L type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_L' ##NO_TEXT.
  constants C_PARID_CONSU_P type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_P' ##NO_TEXT.
  constants C_PARID_CONSU_W type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_W' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_PRICE type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICE' ##NO_TEXT.
  constants C_PARID_PRICP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_A' ##NO_TEXT.
  constants C_PARID_PRICP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_L' ##NO_TEXT.
  constants C_PARID_PRICP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_P' ##NO_TEXT.
  constants C_PARID_PRICP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_W' ##NO_TEXT.
  constants C_PARID_PURCH type /VCXI/VKS_PARID value 'ZVCXI_XC_PURCH' ##NO_TEXT.
  constants C_PARID_TEXT type /VCXI/VKS_PARID value 'ZVCXI_XC_TEXT' ##NO_TEXT.
  constants C_PURCH_DIRECT type ZVCXI_XCS_PURCH value 'D' ##NO_TEXT.
  constants C_PURCH_DIRECT_PRICE type ZVCXI_XCS_PURCH value 'X' ##NO_TEXT.
  constants C_PURCH_STOCK type ZVCXI_XCS_PURCH value SPACE ##NO_TEXT.
  data F_MATNR_DUMMY type MATNR .
  data F_PARID_AVGCO type /VCXI/VKS_PARID read-only .
  data F_PARID_AVGCP type /VCXI/VKS_PARID read-only .
  data F_PARID_CONSU type /VCXI/VKS_PARID read-only .
  data F_PARID_PRICP type /VCXI/VKS_PARID read-only .

  methods CALC_CONSU
  abstract
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CONSU
    returning
      value(RS_CONSU) type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    exporting
      !EF_ICSPA type ZVCXI_XCSP_ICSPA
      !ES_DCSPL type ZVCXI_XCSP_S_DCSPL
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR_DESCR
    returning
      value(RF_LIFNR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRICE
    returning
      value(RS_PRICE) type ZVCXI_XCS_S_PRICE
    raising
      /VCXI/CX_CKX .
  methods GET_PRICP
    returning
      value(RS_PRICP) type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    returning
      value(RF_TEXT) type TEXT30
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MR) type ref to ZCL_VCXI_XCSP_PR_MR
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICE
    importing
      !IS_PRICE type ZVCXI_XCS_S_PRICE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICP
    importing
      !IS_PRICP type ZVCXI_XCS_S_PRICP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PURCH
    importing
      !IF_PURCH type ZVCXI_XCS_PURCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_TEXT type TEXT30
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PRICE type /VCXI/VKSC_IEVNT value 'INIT_PRICE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRICE type /VCXI/VKSC_IEVNT value 'RECALC_PRICE' ##NO_TEXT.
  constants C_IEVNT_O_CONSU_CHANGED type /VCXI/VKSC_IEVNT value 'CONSU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_INIT_CUST_MATNR_REQ type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR_REQUESTED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RECALC_CONSU_REQ type /VCXI/VKSC_IEVNT value 'RECALC_CONSU_REQUESTED' ##NO_TEXT.
  data R_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR .
  data R_PR_ADDON type ref to ZCL_VCXI_XCSP_PR_ADDON .

  methods CHECK_CONSU
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods GET_UOMCF
    returning
      value(RT_UOMCF) type ZVCXI_XCS_TT_UOMCF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRICE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRICE
    raising
      /VCXI/CX_CKX .
  methods INIT_MATNR_DUMMY
    raising
      /VCXI/CX_CKX .
  methods SET_CONSU
    importing
      !IS_CONSU type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MC definition
class ZCL_VCXI_XCSP_PR_MC implementation.
  method CHECK_CONSU.

    data(LF_MATNR) = ME->GET_MATNR( ).
    data(LS_CONSU) = ME->GET_CONSU( ).


***--------------------------------------------------------------------------------------
    if LS_CONSU-CONSU is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Consumption has been calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '251' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Consumption has not been calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '252' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if LF_MATNR is not initial.
      if ZCL_VCXI_XCS_SERVICE_UNIT=>IS_MATNR_UNIT( IF_MATNR = LF_MATNR
                                                   IF_UOM   = LS_CONSU-CONSU_UOM ) ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Quantities cannot be converted for the material &.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'MM'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '328'
                                   IF_MSGV1 = LF_MATNR ).
        endif.
      endif.
    endif.

  endmethod.
method CHECK_MATNR.

*** Check Material Number is maintained
  if ME->GET_MATNR( ) is initial.
    move 1 to RF_RESULT.
    exit.
  endif.

*** Check Material Instance was created
  if ME->R_CUST_MATNR is not bound.
    move 2 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid
  if ME->R_CUST_MATNR->F_CHECK_MATNR ne ABAP_TRUE.
    move 3 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid in Plant
  if ME->R_CUST_MATNR->F_CHECK_MAT_MARC ne ABAP_TRUE.
    move 4 to RF_RESULT.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Material Dummy
  ME->INIT_MATNR_DUMMY( ).

endmethod.
method GET_CONSU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_CONSU ).
  move LS_PARAM-ATFLV to RS_CONSU-CONSU.
  move LS_PARAM-UNIT  to RS_CONSU-CONSU_UOM.

endmethod.
method GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_OPERATION      type ref to ZIF_VCXI_XCSP_OPERATION,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  if LT_GATE is initial.
***--------------------------------------------------------------------------------------
*** Get via Operation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC = 0.
    move LR_GATE->R_CLSPR ?to LR_OPERATION.
    check LR_OPERATION is bound.
    LR_OPERATION->GET_CSPLIT( importing EF_ICSPA = EF_ICSPA
                                        ES_DCSPL = ES_DCSPL ).

***--------------------------------------------------------------------------------------
  else.
    if lines( LT_GATE ) gt 1.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    read table LT_GATE into LR_GATE index 1.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

*** Get ID of active Cost Split
    move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
    check EF_ICSPA is not initial.

*** Get active Cost Splits
    move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.
  endif.

endmethod.
method GET_DESCR.

  data: LF_MATNR type MATNR,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_MATNR = ME->GET_MATNR( ).

  if LF_MATNR is not initial.
*** Convert Material Number to Output
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_MATNR
      importing
        OUTPUT = LF_MATNR.
*** Get Material Description
    LF_DESCR = ME->GET_MATNR_DESCR( ).

    concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.

endmethod.
method GET_LIFNR_DESCR.

  data: LF_LIFNR       type LIFNR,
        LF_LIFNR_DESCR type /VCXI/CKX_DESCR.

  LF_LIFNR = ME->GET_LIFNR( ).
  check LF_LIFNR is not initial.

  select single NAME1
         from LFA1
         into LF_LIFNR_DESCR
        where LIFNR eq LF_LIFNR.

  if SY-SUBRC = 0.
    move LF_LIFNR_DESCR to RF_LIFNR_DESCR.
  endif.

endmethod.
method GET_MATNR.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_MATNR.

endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).
  move LS_PARAM-ATFLV to RS_PRICE-PRICE.
  move LS_PARAM-CURKY to RS_PRICE-PRICE_CURR.

endmethod.
method GET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).
  move LS_PARAM-ATFLV to RS_PRICP-PRICP.
  move LS_PARAM-UNIT  to RS_PRICP-PRICP_UOM.

endmethod.
  method GET_PRVDR_MR.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Material Return
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MR=>C_IPRVT_XCS_MR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_MR.

  endmethod.
method GET_PURCH.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
  move LS_PARAM-ATWRT to RF_PURCH.

endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

*** Check Material
    if ME->CHECK_MATNR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Consumption
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CONSU( ) ).

  endmethod.
  method GET_STATUS_MSG.

    data: LF_WERKS type WERKS_D.


    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Material
    case ME->CHECK_MATNR( ).
      when 1.
***     Material Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '204' ).
      when 2.
***     Material Instance was not created.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      when 3.
***     Material Number is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '206' ).
      when 4.
***     Material Number is not valid in Plant.
        if ME->R_CUST_MATNR is bound.
          move ME->R_CUST_MATNR->F_WERKS to LF_WERKS.
        endif.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '207'
                                 IF_MSGV1 = LF_WERKS ).
      when others.
***     Material is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '208' ).
    endcase.

*** Check Consumption
    ME->CHECK_CONSU( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
method GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.

endmethod.
method GET_UOMCF.
endmethod.
method GET_WERKS.

  data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
        LR_OPERATION  type ref to ZIF_VCXI_XCSP_OPERATION.

***------------------------------------------------------------------
*** Get Plant of Machine
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_OPERATION=>C_IPRVT_XCS_OPERATION
                                   IF_INUSE = ABAP_TRUE ).


  read table LT_GATE into LR_GATE index 1.

  if SY-SUBRC = 0.

    clear: LR_OPERATION.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPERATION.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_OPERATION.
    endtry.
    if LR_OPERATION is bound.
      RF_WERKS = LR_OPERATION->GET_WERKS( ).
    endif.

  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_CUST_MATNR.
      ME->HANDLE_INIT_CUST_MATNR( ).

    when C_IEVNT_I_RECALC_PRICE.
      ME->HANDLE_RECALC_PRICE( ).

    when C_IEVNT_I_INIT_PURCH.
      ME->HANDLE_INIT_PURCH( ).

    when C_IEVNT_I_INIT_PRICE.
      ME->HANDLE_INIT_PRICE( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR   type        MATNR,
         LF_WERKS   type        WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

  if ME->R_CUST_MATNR          is bound    and
     ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
     ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

*** Catch Error while Material Customizing Instanziation
  try.
      clear ME->R_CUST_MATNR.

*** Load the Customizing
      ME->R_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_MATNR
                                                                IF_WERKS = LF_WERKS
                                                                IF_DATE  = SY-DATUM ).

    catch /VCXI/CX_CKX.
*** In Production it is not needed to handle Exception
      exit.
  endtry.

endmethod.
method HANDLE_INIT_PRICE.

  data: LS_PRICE type ZVCXI_XCS_S_PRICE,
        LS_PRICP type ZVCXI_XCS_S_PRICP.


  if ME->GET_PURCH( ) ne ZCL_VCXI_XCSP_PR_MC=>C_PURCH_DIRECT_PRICE.
*** Clear Price Data
    ME->SET_PRICE( IS_PRICE = LS_PRICE
                   IF_SETBY = SPACE ).
    ME->SET_PRICP( IS_PRICP = LS_PRICP
                   IF_SETBY = SPACE ).

*** Clear Vendor
    ME->SET_LIFNR( IF_LIFNR = SPACE
                   IF_SETBY = SPACE ).

*** Default only if it is initial.
  else.
    LS_PRICE = ME->GET_PRICE( ).

    if LS_PRICE-PRICE is initial and
       ME->R_CUST_MATNR is bound.
      ME->SET_PRICE( IS_PRICE = ME->R_CUST_MATNR->S_PRICE ).
    endif.

    LS_PRICP = ME->GET_PRICP( ).
    if LS_PRICP-PRICP is initial and
       ME->R_CUST_MATNR is bound.
***   Do Material Conversion
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_UOM_OUT   = LS_PRICP-PRICP_UOM
                                                               IF_UOM_IN    = ME->R_CUST_MATNR->S_PRICP-PRICP_UOM
                                                               IF_VALUE_IN  = ME->R_CUST_MATNR->S_PRICP-PRICP
                                                               IF_MATNR     = ME->GET_MATNR( )
                                                     importing EF_VALUE_OUT = LS_PRICP-PRICP
                                                               EF_UOM_OUT   = LS_PRICP-PRICP_UOM ).


      ME->SET_PRICP( IS_PRICP = LS_PRICP ).
    endif.
  endif.

endmethod.
method HANDLE_INIT_PURCH.

*** Is Matrial a Dummy -> Set "Direct Procurement & Price"
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = ME->GET_MATNR( ) ) eq ABAP_TRUE.
    ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSP_PR_MC=>C_PURCH_DIRECT_PRICE ).
  else.
    ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSP_PR_MC=>C_PURCH_STOCK ).
  endif.

endmethod.
method HANDLE_RECALC_PRICE.

  data: LS_CONSU type        ZVCXI_XCSP_S_CONSU,
        LS_PSQTY type        ZVCXI_XCS_S_PSQTY,
        LS_PRICE type        ZVCXI_XCS_S_PRICE,
        LS_PRICP type        ZVCXI_XCS_S_PRICP.
  data: LT_GATE  type        /VCXI/VKSR_TT_GATE,
        LT_UOMCF type        ZVCXI_XCS_TT_UOMCF.
  data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
        LR_PSCALE_MGR type ref to ZIF_VCXI_XCS_PSCALE_MGR.

***------------------------------------------------------------------
*** Do only Recalculate Price for "Direct Procurement & Price"
  check ME->GET_PURCH( ) eq ZCL_VCXI_XCSP_PR_MC=>C_PURCH_DIRECT_PRICE.

***------------------------------------------------------------------
*** If we are connect to a Scale Manager -> Request Price depending on Consumption
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCS_PSCALE_MGR=>C_IPRVT_XCS_PSCALE_MGR
                                   IF_INUSE = ABAP_TRUE ).

*** Assign Reference of Price Scale Manager
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PSCALE_MGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PSCALE_MGR.
    endtry.
  endif.

  check LR_PSCALE_MGR is bound.

***----------------------------------------------------------------------------
*** Get Consumption and request new Price Scale
  LS_CONSU = ME->GET_CONSU( ).
  LS_PSQTY-PSQTY     = LS_CONSU-CONSU.
  LS_PSQTY-PSQTY_UOM = LS_CONSU-CONSU_UOM.

  LT_UOMCF = ME->GET_UOMCF( ).

  LR_PSCALE_MGR->GET_PSCALE( exporting IS_PSQTY = LS_PSQTY
                                       IT_UOMCF = LT_UOMCF
                             importing ES_PRICE = LS_PRICE
                                       ES_PRICP = LS_PRICP ).

*** Set new Price
  ME->SET_PRICE( IS_PRICE = LS_PRICE ).
  ME->SET_PRICP( IS_PRICP = LS_PRICP ).

endmethod.
method INIT_MATNR_DUMMY.

*** Get Dummy Material
  ME->F_MATNR_DUMMY = ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE  = ME->R_GATE ).

endmethod.
method IS_DUMMY.

  data: LF_MATNR type MATNR.

  move ME->GET_MATNR( ) to LF_MATNR.

*** Is Matrial a Dummy -> Set Purchase Flag!
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = LF_MATNR   ) eq ABAP_TRUE.
    RF_RETURN = ABAP_TRUE.
  else.
    RF_RETURN = ABAP_FALSE.
  endif.

endmethod.
method SET_CONSU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_CONSU ).

  move IS_CONSU-CONSU                      to LS_PARAM-ATFLV.
  move IS_CONSU-CONSU_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONSU_CHANGED ).
  endif.

endmethod.
method SET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MATNR.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_MATNR to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
  endif.

endmethod.
method SET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).

  move IS_PRICE-PRICE      to LS_PARAM-ATFLV.
  move IS_PRICE-PRICE_CURR to LS_PARAM-CURKY.
  move IF_SETBY            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).

  move IS_PRICP-PRICP     to LS_PARAM-ATFLV.
  move IS_PRICP-PRICP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PURCH.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

  move IF_PURCH to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
  endif.

endmethod.
method SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
