
class ZCL_VCXI_PXSS_UI_SBH definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  types:
    YT_UCOMM type table of SYUCOMM with default key .

  data S_SBH_VIS type ZVCXI_PXSS_S_SBH_VIS .
  data F_CURSOR type SCRFNAME .
  constants C_UC_FOVRR_MAKTX type SYUCOMM value 'FOVRR_MAKTX' ##NO_TEXT.
  constants C_UC_FOVRR_PRODH type SYUCOMM value 'FOVRR_PRODH' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UCOMM
    returning
      value(RT_UCOMM) type YT_UCOMM.

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_SBH type ref to ZCL_VCXI_PXSS_PR_SBH .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_UI_SBH definition
class ZCL_VCXI_PXSS_UI_SBH implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_PXSS_UI_SBH_BIND'
      exporting
        IR_UI_SBH = ME
      importing
        ES_DYNP   = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_SBH.
      catch CX_SY_MOVE_CAST_ERROR.

***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.


    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME cp '*-FOVRR_MAKTX' and
             ME->S_SBH_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.
***       Disable Material Description if generated
          if SCREEN-NAME cp '*-MAKTX' and
             ME->S_SBH_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Disable Product Hierarchy if not overwritten
          if SCREEN-NAME cp '*-PRODH' and
             ME->S_SBH_VIS-FOVRR_PRODH eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_SBH_VIS  type ZVCXI_PXSS_S_SBH_VIS.


    check ME->R_PR_SBH is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_SBH_VIS.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if ME->S_SBH_VIS-MAKTX        ne LS_SBH_VIS-MAKTX or
       ME->S_SBH_VIS-FOVRR_MAKTX  ne LS_SBH_VIS-FOVRR_MAKTX.
      if LS_SBH_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        ME->R_PR_SBH->SET_MAKTX( IF_MAKTX = LS_SBH_VIS-MAKTX
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_SBH->SET_MAKTX( IF_MAKTX = LS_SBH_VIS-MAKTX
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Material Belonging to the Customer
    if ME->S_SBH_VIS-KDMAT ne LS_SBH_VIS-KDMAT.
      ME->R_PR_SBH->SET_KDMAT( IF_KDMAT = LS_SBH_VIS-KDMAT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Customer Description of Material
    if ME->S_SBH_VIS-KDPTX ne LS_SBH_VIS-KDPTX.
      ME->R_PR_SBH->SET_KDPTX( IF_KDPTX = LS_SBH_VIS-KDPTX
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Hierarchy if it is "Overwriten"
    if ME->S_SBH_VIS-FOVRR_PRODH eq ABAP_TRUE and
       ME->S_SBH_VIS-PRODH ne LS_SBH_VIS-PRODH.
      ME->R_PR_SBH->SET_PRODH( IF_PRODH = LS_SBH_VIS-PRODH
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag Overwrite for Product Hierarchy
    if ME->S_SBH_VIS-FOVRR_PRODH ne LS_SBH_VIS-FOVRR_PRODH.
      ME->R_PR_SBH->SET_PRODH( IF_FOVRR = LS_SBH_VIS-FOVRR_PRODH ).
    endif.

  endmethod.
  method GET_REGISTERED_UCOMM.

    RT_UCOMM = value #( ( C_UC_FOVRR_MAKTX )
                        ( C_UC_FOVRR_PRODH ) ).

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_SBH.

  endmethod.
  method INIT_VIS.

    free: ME->S_SBH_VIS.
    check ME->R_PR_SBH is bound.

***------------------------------------------------------------------------------------------------
*** Get Material Description
    ME->S_SBH_VIS-MAKTX = ME->R_PR_SBH->GET_MAKTX( importing EF_FOVRR = ME->S_SBH_VIS-FOVRR_MAKTX ).

*** Get Material Belonging to the Customer
    ME->S_SBH_VIS-KDMAT = ME->R_PR_SBH->GET_KDMAT( ).

*** Get Customer Description of Material
    ME->S_SBH_VIS-KDPTX = ME->R_PR_SBH->GET_KDPTX( ).

*** Get Product Hierarchy
    ME->S_SBH_VIS-PRODH = ME->R_PR_SBH->GET_PRODH( importing EF_FOVRR = ME->S_SBH_VIS-FOVRR_PRODH
                                                             EF_DESCR = ME->S_SBH_VIS-PRODH_DESCR ).

  endmethod.
