
class ZCL_VCXI_P1SS_PR_CSTEP_CHOP definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_SCORES_AP .
  interfaces ZIF_VCXI_PXSS_CHOP .

  constants C_DIMEN_LENGTH type ZVCXI_PXS_DIMEN value 'L' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_PXS_DIMEN value 'W' ##NO_TEXT.
  constants C_PARID_DIMEN type /VCXI/VKS_PARID value 'ZVCXI_PX_DIMEN' ##NO_TEXT.
  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.
  constants C_PARID_TRBOT type /VCXI/VKS_PARID value 'ZVCXI_PX_TRBOT' ##NO_TEXT.
  constants C_PARID_TRCHO type /VCXI/VKS_PARID value 'ZVCXI_PX_TRCHO' ##NO_TEXT.
  constants C_PARID_TRTOP type /VCXI/VKS_PARID value 'ZVCXI_PX_TRTOP' ##NO_TEXT.

  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_NOUTL type ZVCXI_PXS_NOUTL
      !EF_NOUTW type ZVCXI_PXS_NOUTW
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods SET_DIMEN
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRBOT
    importing
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRCHO
    importing
      !IS_TRCHO type ZVCXI_PXS_S_TRCHO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRTOP
    importing
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_O_DIMEN_CHANGED type /VCXI/VKSC_IEVNT value 'DIMEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUTT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUTT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRBOT_CHANGED type /VCXI/VKSC_IEVNT value 'TRBOT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRCHO_CHANGED type /VCXI/VKSC_IEVNT value 'TRCHO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRTOP_CHANGED type /VCXI/VKSC_IEVNT value 'TRTOP_CHANGED' ##NO_TEXT.

  methods CHECK_CHOP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIMEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRCHO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_DIMEN_DESCR
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CSTEP_CHOP definition
class ZCL_VCXI_P1SS_PR_CSTEP_CHOP implementation.
  method CHECK_CHOP.

*** Check Chopping is done
    if ME->GET_NOUTT( )                          le 1 and
       ME->ZIF_VCXI_PXSS_CHOP~GET_TRCHO( )-TRCHO is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Define multiple outs or a trim.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '331' ).
      endif.
    endif.

  endmethod.
  method CHECK_DIMEN.

*** Check Dimension
    if ME->ZIF_VCXI_PXSS_CHOP~GET_DIMEN( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Dimension is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '301' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Dimension is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '302' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUTT.

*** Check Number of Outs
    if ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '309' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '310' ).
      endif.
    endif.

  endmethod.
  method CHECK_TRCHO.

    data: LS_TRCHO     type ZVCXI_PXS_S_TRCHO,
          LS_TRCHO_SUM type ZVCXI_PXS_S_TRCHO,
          LS_TRTOP     type ZVCXI_PXS_S_TRTOP,
          LS_TRBOT     type ZVCXI_PXS_S_TRBOT.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRCHO = ME->ZIF_VCXI_PXSS_CHOP~GET_TRCHO( ).
    LS_TRTOP = ME->ZIF_VCXI_PXSS_CHOP~GET_TRTOP( ).
    LS_TRBOT = ME->ZIF_VCXI_PXSS_CHOP~GET_TRBOT( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRCHO-TRCHO_UOM
                                              importing EF_CALCV       = LS_TRCHO_SUM-TRCHO
                                                        EF_CALCV_UOM   = LS_TRCHO_SUM-TRCHO_UOM ).


***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRCHO-TRCHO eq LS_TRCHO_SUM-TRCHO.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Slotting correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '303' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Slotting not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '304' ).
      endif.
    endif.

  endmethod.
  method GET_DIMEN_DESCR.

    data:      LT_D07V    type standard table of DD07V.

*** Identify Description
    call function 'DD_DOMVALUES_GET'
      exporting
        DOMNAME   = 'ZVCXI_PXS_DIMEN'
        TEXT      = 'X'
        LANGU     = SY-LANGU
      tables
        DD07V_TAB = LT_D07V.
    RF_DESCR = value #( LT_D07V[ DOMVALUE_L = IF_DIMEN ]-DDTEXT optional ).

  endmethod.
  method GET_NOUTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_NOUTL is requested or
       EF_NOUTW is requested.
***   Get Division
      case ME->ZIF_VCXI_PXSS_CHOP~GET_DIMEN( ).
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH.
          EF_NOUTL = ME->GET_NOUTT( ).
          EF_NOUTW = 1.
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH.
          EF_NOUTL = 1.
          EF_NOUTW = ME->GET_NOUTT( ).
      endcase.
    endif.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Chopping is needed
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CHOP( ) ).

*** Check Dimension
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DIMEN( ) ).

*** Check Number of Outs
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUTT( ) ).

*** Check Trim on Chopping
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRCHO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Chopping is needed
    ME->CHECK_CHOP( IR_MESSAGE = IR_MESSAGE ).

*** Check Dimension
    ME->CHECK_DIMEN( IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs
    ME->CHECK_NOUTT( IR_MESSAGE = IR_MESSAGE ).

*** Check Trim on Chopping
    ME->CHECK_TRCHO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method SET_DIMEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_DIMEN ).

    move IF_DIMEN           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_CHOP~C_IEVNT_O_DIMEN_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUTT_CHANGED ).
    endif.

  endmethod.
  method SET_TRBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRBOT ).

    move IS_TRBOT-TRBOT     to LS_PARAM-ATFLV.
    move IS_TRBOT-TRBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_CHOP~C_IEVNT_O_TRBOT_CHANGED ).
    endif.

  endmethod.
  method SET_TRCHO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRCHO ).

    move IS_TRCHO-TRCHO     to LS_PARAM-ATFLV.
    move IS_TRCHO-TRCHO_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_CHOP~C_IEVNT_O_TRCHO_CHANGED ).
    endif.

  endmethod.
  method SET_TRTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRTOP ).

    move IS_TRTOP-TRTOP     to LS_PARAM-ATFLV.
    move IS_TRTOP-TRTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_CHOP~C_IEVNT_O_TRTOP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


*** Super
    RR_BL_CRFPROP = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Use Sheet Dimension as Handling Dimension
    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                    HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                    HNDWI     = LS_SHTWI-SHTWI
                                                    HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                    HNDHE     = RR_BL_CRFPROP->S_CALIP-CALIP
                                                    HNDHE_UOM = RR_BL_CRFPROP->S_CALIP-CALIP_UOM ) ).

*** Consider Outs in Forward Properties
    RR_BL_CRFPROP->APPLY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


*** Call SUPER
    RR_BL_CRBPROP = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Update Scores/Tapes
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM
                                                         ET_TAPE_COM  = LT_TAPE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM, LT_TAPE_COM.
    endtry.
    RR_BL_CRBPROP->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    RR_BL_CRBPROP->SET_TAPE_COM( IT_TAPE_COM = LT_TAPE_COM ).

*** Consider Outs in Cut Out Area
    RR_BL_CRBPROP->SET_COUAR( IS_COUAR = value #( COUAR     = RR_BL_CRBPROP->S_COUAR-COUAR * ME->GET_NOUTT( )
                                                  COUAR_UOM = RR_BL_CRBPROP->S_COUAR-COUAR_UOM ) ).

*** Apply Number of Outs to Cost Split
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS.

*** Call SUPER
    RF_NOUPS = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number Outs (total)
    RF_NOUPS = RF_NOUPS * ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_CHOP~GET_DIMEN.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_DIMEN ).
    move LS_PARAM-ATWRT to RF_DIMEN.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_DIMEN is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ME->GET_DIMEN_DESCR( IF_DIMEN = RF_DIMEN ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_CHOP~GET_TRBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRBOT ).
    move LS_PARAM-ATFLV to RS_TRBOT-TRBOT.
    move LS_PARAM-UNIT  to RS_TRBOT-TRBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_CHOP~GET_TRCHO.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRCHO ).
    move LS_PARAM-ATFLV to RS_TRCHO-TRCHO.
    move LS_PARAM-UNIT  to RS_TRCHO-TRCHO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = 'Trim on & (Chopping)'(001).
      LF_DESCR = ME->GET_DIMEN_DESCR( IF_DIMEN = ME->ZIF_VCXI_PXSS_CHOP~GET_DIMEN( ) ).
      replace '&' in EF_DESCR with LF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_CHOP~GET_TRTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_CHOP~C_PARID_TRTOP ).
    move LS_PARAM-ATFLV to RS_TRTOP-TRTOP.
    move LS_PARAM-UNIT  to RS_TRTOP-TRTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

    data: LF_DIMEN type ZVCXI_PXS_DIMEN,
          LF_NOUTL type ZVCXI_PXS_NOUPL,
          LF_NOUTW type ZVCXI_PXS_NOUPW.


***--------------------------------------------------------------------------------------
*** Get Counter-Dimension based on Dimension (to "map" Top/Bottom)
    LF_DIMEN = switch #( ME->ZIF_VCXI_PXSS_CHOP~GET_DIMEN( ) when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH  then ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                                             when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH then ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).

*** Get Number of Outs
    ME->GET_NOUTT( importing EF_NOUTL = LF_NOUTL
                             EF_NOUTW = LF_NOUTW ).

***--------------------------------------------------------------------------------------
*** Get applied Scores table based on Score Communication (Outbound)
    ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_SCORE
                                                     IT_TAPE_COM       = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_TAPE_COM
                                                     IF_DIMEN_TRIM     = LF_DIMEN
                                                     IF_NOUPL          = LF_NOUTL
                                                     IF_NOUPW          = LF_NOUTW
                                                     IS_TRTOP          = ME->ZIF_VCXI_PXSS_CHOP~GET_TRTOP( )
                                                     IS_TRBOT          = ME->ZIF_VCXI_PXSS_CHOP~GET_TRBOT( )
                                           importing ET_SCORE_AP       = ET_SCORE_AP
                                                     ET_TAPE_AP        = ET_TAPE_AP
                                                     ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

    RF_SSCOR = 'A'.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.
  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->ZIF_VCXI_PXSS_CHOP~GET_DIMEN( )    "Dimension
                                changing  CT_ATTR      = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->GET_NOUTT( )                       "No. of Outs
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://scissors'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
