
class ZCL_VCXI_P0SSC_GRID_MANTU definition
  public
  inheriting from ZCL_VCXI_P0SSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
      !IR_PART_MANTU type ref to ZCL_VCXI_P0SSC_PS_PART_MANTU
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  types:
    YT_SVAL type standard table of SVAL with default key .

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_COP type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .
  data R_PART_MANTU type ref to ZCL_VCXI_P0SSC_PS_PART_MANTU .

  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_KEY
    importing
      !IT_SVAL type YT_SVAL
    exporting
      !EF_EXIT type ABAP_BOOL
      !ES_PRSTY_MANTU type ZVCXI_P0SSC_S_PRSTY_MANTU
      !ER_S_PRSTY_MANTU_E type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_MANTU
    importing
      !IT_GMATU type ZVCXI_P0SSC_TT_GMATU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SSC_GRID_MANTU definition
class ZCL_VCXI_P0SSC_GRID_MANTU implementation.
method BUILD_DYN_TABLE.

  data:          LF_IDX_DYN            type        NUMC5,
                 LF_NAME               type        STRING.
  data:          LS_PRSTY_SCORE        type        ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_COMPONENT_MANTU_E  type        CL_ABAP_STRUCTDESCR=>COMPONENT,
                 LS_COMPONENT_SCORE    type        CL_ABAP_STRUCTDESCR=>COMPONENT.
  data:          LT_COMPONENT          type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE,
                 LT_COMPONENT_MANTU_E  type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE,
                 LT_COMPONENT_SCORE    type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_STRUCTDESCR        type ref to CL_ABAP_STRUCTDESCR,
                 LR_TABLEDESCR         type ref to CL_ABAP_TABLEDESCR,
                 LR_TYPEDESCR          type ref to CL_ABAP_TYPEDESCR,
                 LR_PRSTY_MANTU_E      type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E.
  field-symbols: <S_COMPONENT>         type        CL_ABAP_STRUCTDESCR=>COMPONENT.

*** Double check if values are valid
  read table ME->R_PRSTY->T_PRSTY_SCORE with key PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
                                                 BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA
                                        transporting no fields.

  check SY-SUBRC = 0.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = F_TABNAME
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  move LR_TYPEDESCR ?to LR_STRUCTDESCR.
  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).

  LF_IDX_DYN = lines( LT_COMPONENT ).

***--------------------------------------------------------------------------------------
*** Add Manual Take-up Extended Key
  if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
    try.
        move ME->R_PRSTY->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PRSTY_MANTU_E.
    endtry.
    if LR_PRSTY_MANTU_E is bound.
      LT_COMPONENT_MANTU_E = LR_PRSTY_MANTU_E->GET_COMPONENT( ).
    endif.

    if LT_COMPONENT_MANTU_E is not initial.
      loop at LT_COMPONENT_MANTU_E into LS_COMPONENT_MANTU_E.

        insert LS_COMPONENT_MANTU_E into LT_COMPONENT index LF_IDX_DYN.
        add 1 to LF_IDX_DYN.
      endloop.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get dynamic Columns for Scores
  loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE
       where PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
         and BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA.
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_P0SS_FOTAU'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Manual Take-up Grid
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '103' ).
    endif.

    concatenate LS_PRSTY_SCORE-CSCOR LS_PRSTY_SCORE-NSCOR into LF_NAME separated by '_'.

    append initial line to LT_COMPONENT_SCORE assigning <S_COMPONENT>.
    move LF_NAME       to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.
  endloop.

  if LT_COMPONENT_SCORE is not initial.
    loop at LT_COMPONENT_SCORE into LS_COMPONENT_SCORE.

      insert LS_COMPONENT_SCORE into LT_COMPONENT index LF_IDX_DYN.
      add 1 to LF_IDX_DYN.
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Create data type for table
  try.
      LR_STRUCTDESCR = CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ).
      LR_TABLEDESCR  = CL_ABAP_TABLEDESCR=>CREATE(  P_LINE_TYPE  = LR_STRUCTDESCR ).

    catch CX_SY_TYPE_CREATION.
***   Error generating dynamic Manual Take-up Grid
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '103' ).
  endtry.

  create data ME->R_DATA type handle LR_TABLEDESCR.

endmethod.
method CHECK_KEY.

  data:          LS_PRSTY_MANTU       type                   ZVCXI_P0SSC_S_PRSTY_MANTU.
  data:          LT_GMATU             type                   ZVCXI_P0SSC_TT_GMATU.
  data:          LR_PRSTY_MANTU_E     type ref to            ZIF_VCXI_P0SSC_PRSTY_MANTU_E.
  field-symbols: <S_FIELD>            type                   SVAL.

***----------------------------------------------------------------------
*** Read standard fields
  read table IT_SVAL assigning <S_FIELD> with key FIELDNAME = 'BOXPA'.
  if SY-SUBRC = 0.
    move <S_FIELD>-VALUE to ES_PRSTY_MANTU-BOXPA.
  endif.

  read table IT_SVAL assigning <S_FIELD> with key FIELDNAME = 'PANOR'.
  if SY-SUBRC = 0.
    move <S_FIELD>-VALUE to ES_PRSTY_MANTU-PANOR.
  endif.

  read table IT_SVAL assigning <S_FIELD> with key FIELDNAME = 'VALFR'.
  if SY-SUBRC = 0.
    move <S_FIELD>-VALUE to ES_PRSTY_MANTU-VALFR.
  endif.

  read table IT_SVAL assigning <S_FIELD> with key FIELDNAME = 'WERKS'.
  if SY-SUBRC = 0.
    move <S_FIELD>-VALUE to ES_PRSTY_MANTU-WERKS.
  endif.

  read table IT_SVAL assigning <S_FIELD> with key FIELDNAME = 'FOTAU_UOM'.
  if SY-SUBRC = 0.
    move <S_FIELD>-VALUE to ES_PRSTY_MANTU-FOTAU_UOM.
  endif.


***----------------------------------------------------------------------
*** Check mandetory Fields
  read table IT_SVAL with key FIELD_OBL = ABAP_TRUE
                              VALUE     = ''
                     transporting no fields.

  if SY-SUBRC = 0.
*** Please Maintain all mandatory Fields.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                          IF_MSGID = 'ZVCXI_P0SSC'
                                          IF_MSGNO = '104' ).

  else.

***----------------------------------------------------------------------
*** Check Plant
    if ME->R_PART_MANTU->S_PS_MANTU_VIS-WERKS is not initial and
       ES_PRSTY_MANTU-WERKS                   is not initial and
       ES_PRSTY_MANTU-WERKS ne ME->R_PART_MANTU->S_PS_MANTU_VIS-WERKS.
***   Plant Value do not match Filter Criteria.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '106' ).
    endif.

    if ES_PRSTY_MANTU-WERKS is not initial.
      call function 'PLANT_GET_DETAIL'
        exporting
          PLANT                    = ES_PRSTY_MANTU-WERKS
        exceptions
          NOT_FOUND                = 1
          NO_COMPANY_CODE_FOUND    = 2
          NO_APPLICATION_SYSTEM    = 3
          WRONG_APPLICATION_SYSTEM = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

***----------------------------------------------------------------------
*** Check Key - No Double Entrie allowed
    read table ME->R_PRSTY->T_PRSTY_MANTU into LS_PRSTY_MANTU
                                          with key BOXPA     = ES_PRSTY_MANTU-BOXPA
                                                   PANOR     = ES_PRSTY_MANTU-PANOR
                                                   VALFR     = ES_PRSTY_MANTU-VALFR
                                                   WERKS     = ES_PRSTY_MANTU-WERKS
                                                   FOTAU_UOM = ES_PRSTY_MANTU-FOTAU_UOM.

    if SY-SUBRC ne 0.
      EF_EXIT = ABAP_TRUE.
    endif.
*** Do extended Check
    if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
      try.
          move ME->R_PRSTY->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.

***     Collect all Relevant GUID's
        loop at ME->R_PRSTY->T_PRSTY_MANTU into LS_PRSTY_MANTU
                                           where BOXPA     = ES_PRSTY_MANTU-BOXPA
                                             and PANOR     = ES_PRSTY_MANTU-PANOR
                                             and VALFR     = ES_PRSTY_MANTU-VALFR
                                             and WERKS     = ES_PRSTY_MANTU-WERKS
                                             and FOTAU_UOM = ES_PRSTY_MANTU-FOTAU_UOM.
          append LS_PRSTY_MANTU-GMATU to LT_GMATU.
        endloop.

***     Do the Check
        LR_PRSTY_MANTU_E->CHECK_KEY( exporting IF_NO_CHECK        = EF_EXIT
                                               IT_GMATU           = LT_GMATU
                                               IT_SVAL            = IT_SVAL
                                     importing ER_S_PRSTY_MANTU_E = ER_S_PRSTY_MANTU_E ).
      endif.
      EF_EXIT = ABAP_TRUE.
      exit.
    else.
***   There is already one Entrie with specified Key. Please Change.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '105' ).

    endif.

  endif.
endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_PRSTY.
    catch CX_SY_MOVE_CAST_ERROR.
***   Product Style Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_P0SSC'
          IF_MSGNO = '101' ).
  endtry.

*** Get Part Reference
  move IR_PART_MANTU to ME->R_PART_MANTU.

  move 'Manual Take-up'(001) to ME->F_DESCR.

  check ME->R_PRSTY is bound.
  ME->F_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

endmethod.
method DELETE_MANTU.

  data:  LF_GMATU type ZVCXI_P0SSC_GMATU.

*** Process Result
  loop at IT_GMATU into LF_GMATU.

*** Delete Product Type
    ME->R_PRSTY->DELETE_MANTU( IF_GMATU = LF_GMATU ).

  endloop.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED       type        /VCXI/CKX_LOCKED,
                 LF_INDEX        type        I,
                 LF_NAME(10)     type        C.
  data:          LS_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT,
                 LS_DFIES        type        DFIES.
  data:          LT_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_TABLEDESCR   type ref to CL_ABAP_TABLEDESCR,
                 LR_STRUCTDESCR  type ref to CL_ABAP_STRUCTDESCR,
                 LR_ELEMDESCR    type ref to CL_ABAP_ELEMDESCR.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Standard Field Cat
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
  LF_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

*** Change Field catalog attributes
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'GMATU' or 'T_STYL' or 'PRSTY' or 'TPRST'
        or 'PANOR' or 'BOXPA'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Dynamic Field Catalog
  check ME->R_DATA is bound.
  LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ).
  LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).

  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).
  loop at LT_COMPONENT into LS_COMPONENT.
    move SY-TABIX to LF_INDEX.
    read table RT_FCAT assigning <S_FCAT>
                       with key FIELDNAME = LS_COMPONENT-NAME.
    if SY-SUBRC ne 0.
***   Append new entrie
      try.
          move LS_COMPONENT-TYPE ?to LR_ELEMDESCR.
          LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

          append initial line to RT_FCAT assigning <S_FCAT>.
          move-corresponding LS_DFIES to <S_FCAT>.
          move LS_COMPONENT-NAME to <S_FCAT>-FIELDNAME.
          move LF_INDEX          to <S_FCAT>-COL_POS.
          if LS_DFIES-ROLLNAME eq 'ZVCXI_P0SS_FOTAU'.
            move LS_COMPONENT-NAME to LF_NAME.
            replace all occurrences of '_' in LF_NAME with ''.
            move LF_NAME to <S_FCAT>-DFIELDNAME.
            move LF_NAME to <S_FCAT>-SCRTEXT_L.
            move LF_NAME to <S_FCAT>-SCRTEXT_M.
            move LF_NAME to <S_FCAT>-SCRTEXT_S.
            if LF_LOCKED eq ABAP_TRUE.
              move ABAP_TRUE    to <S_FCAT>-EDIT.
            endif.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    else.
***   update Pos
      move LF_INDEX to <S_FCAT>-COL_POS.
    endif.
  endloop.


endmethod.
method GET_GRID_DATA.

  data:          LF_FNAME             type          STRING.
  data:          LS_PRSTY_MANTU       type          ZVCXI_P0SSC_S_PRSTY_MANTU,
                 LS_PRSTY_MANTU_F     type          ZVCXI_P0SSC_S_PRSTY_MANTU_F,
                 LS_PRSTY_MANTU_GRID  type          ZVCXI_P0SSC_S_PRSTY_MANTU_GRID,
                 LS_PRSTY_SCORE       type          ZVCXI_P0SSC_S_PRSTY_SCORE.
  data:          LR_PRSTY_MANTU_E     type ref to   ZIF_VCXI_P0SSC_PRSTY_MANTU_E.
  field-symbols: <T_DATA>             type standard table,
                 <T_MANTU_E>          type standard table,
                 <S_DATA>             type          any,
                 <S_MANTU_E>          type          any,
                 <F_FIELD>            type          any.

*** Do only Generate Table if we have all mandatory values
*** Double check if values are valid
  read table ME->R_PRSTY->T_PRSTY_SCORE with key PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
                                                 BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA
                                        transporting no fields.

  check SY-SUBRC = 0.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get Product Style - Manual Take-up Entries
  loop at ME->R_PRSTY->T_PRSTY_MANTU into LS_PRSTY_MANTU
    where PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
      and BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA.
    clear: LS_PRSTY_MANTU_GRID.

    if ME->R_PART_MANTU->S_PS_MANTU_VIS-WERKS is not initial.
      check LS_PRSTY_MANTU-WERKS eq ME->R_PART_MANTU->S_PS_MANTU_VIS-WERKS.
    endif.

*** --------------------------------------------------------------------------------------------
*** Get Fixed Standard
    move-corresponding LS_PRSTY_MANTU to LS_PRSTY_MANTU_GRID.

*** --------------------------------------------------------------------------------------------
*** Set Scores and append Entry
    loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE
         where PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
           and BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA.

*** --------------------------------------------------------------------------------------------
***   Add Entry
      if <S_DATA> is not assigned.
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_PRSTY_MANTU_GRID to <S_DATA>.
      endif.
      concatenate LS_PRSTY_SCORE-CSCOR LS_PRSTY_SCORE-NSCOR into LF_FNAME separated by '_'.

      assign component LF_FNAME of structure <S_DATA> to <F_FIELD>.
      check SY-SUBRC = 0.

***   Set Factor
      read table ME->R_PRSTY->T_PRSTY_MANTU_F into LS_PRSTY_MANTU_F
                                              with key GMATU = LS_PRSTY_MANTU-GMATU
                                                       CSCOR = LS_PRSTY_SCORE-CSCOR
                                                       NSCOR = LS_PRSTY_SCORE-NSCOR.
      if SY-SUBRC = 0.
        move LS_PRSTY_MANTU_F-FOTAU to <F_FIELD>.
      endif.
      unassign <F_FIELD>.
    endloop.

*** --------------------------------------------------------------------------------------------
*** Get Extended Key
    if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
      assign ME->R_PRSTY->R_PRSTY_MANTU_E->('T_MANTU_E') to <T_MANTU_E>.

      loop at <T_MANTU_E> assigning <S_MANTU_E>.
        assign component 'GMATU' of structure <S_MANTU_E> to <F_FIELD>.
        if <F_FIELD> is assigned and
           <F_FIELD> eq LS_PRSTY_MANTU-GMATU.
          move-corresponding <S_MANTU_E> to <S_DATA>.
          unassign <F_FIELD>.
          exit.
        endif.
        unassign <F_FIELD>.
      endloop.

    endif.

    unassign <S_DATA>.
  endloop.

*** --------------------------------------------------------------------------------------------
*** Sort by Extended Key
  if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
    try.
        move ME->R_PRSTY->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PRSTY_MANTU_E.
    endtry.
    if LR_PRSTY_MANTU_E is bound.
      LR_PRSTY_MANTU_E->SORT_DATA( IR_DATA = IR_DATA ).
    endif.
  else.
    sort <T_DATA> by ('VALFR') ('WERKS').
  endif.
endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_GMATU             type          ZVCXI_P0SSC_GMATU,
                 LF_FNAME             type          FIELDNAME.
  data:          LS_PRSTY_MANTU_F     type          ZVCXI_P0SSC_S_PRSTY_MANTU_F.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        assign component 'GMATU' of structure <S_DATA> to <F_FIELD>.
        check <F_FIELD> is assigned and
              <F_FIELD> is not initial.
        move <F_FIELD> to LF_GMATU.
        unassign <F_FIELD>.
        loop at ME->R_PRSTY->T_PRSTY_MANTU_F into LS_PRSTY_MANTU_F
         where GMATU = LF_GMATU.
          concatenate LS_PRSTY_MANTU_F-CSCOR LS_PRSTY_MANTU_F-NSCOR into LF_FNAME separated by '_'.

***       Get Take-up Factor
          assign component LF_FNAME of structure <S_DATA> to <F_FIELD>.
          check <F_FIELD> is assigned.
          move <F_FIELD> to LS_PRSTY_MANTU_F-FOTAU.
          unassign <F_FIELD>.
***       Update Take-up Factor
          ME->R_PRSTY->UPDATE_MANTU( IS_PRSTY_MANTU_F = LS_PRSTY_MANTU_F ).
        endloop.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_PRSTY->IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      else.
***     Double check if values are valid
        read table ME->R_PRSTY->T_PRSTY_SCORE with key PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
                                                       BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA
                                              transporting no fields.
        if SY-SUBRC ne 0.
          move ABAP_TRUE to LF_DISABLED.
        endif.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add, Copy and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.
      clear LS_TOOLBAR.

      move C_FUNC_COP                 to LS_TOOLBAR-FUNCTION.
      move 'Copy'(004)                to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_COPY_OBJECT           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD.

  data:          LF_RETURN            type                   ABAP_BOOL,
                 LF_EXIT              type                   ABAP_BOOL,
                 LF_ADD               type                   ABAP_BOOL.
  data:          LS_PRSTY_MANTU       type                   ZVCXI_P0SSC_S_PRSTY_MANTU.
  data:          LT_SVAL              type standard table of SVAL,
                 LT_SVAL_E            type standard table of SVAL.
  data:          LR_PRSTY_MANTU_E     type ref to            ZIF_VCXI_P0SSC_PRSTY_MANTU_E,
                 LR_S_PRSTY_MANTU_E   type ref to            DATA,
                 LR_CX_CKX            type ref to            /VCXI/CX_CKX.
  field-symbols: <S_FIELD>            type                   SVAL,
                 <S_PRSTY_MANTU_E>    type                   any.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
*** Fixed Part
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
  <S_FIELD>-FIELDNAME  = 'BOXPA'.
  <S_FIELD>-VALUE      = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA.
  <S_FIELD>-FIELD_ATTR = '02'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
  <S_FIELD>-FIELDNAME  = 'PANOR'.
  <S_FIELD>-VALUE      = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR.
  <S_FIELD>-FIELD_ATTR = '02'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
  <S_FIELD>-FIELDNAME  = 'VALFR'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
  <S_FIELD>-FIELDNAME  = 'WERKS'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
  <S_FIELD>-FIELDNAME  = 'FOTAU_UOM'.
  <S_FIELD>-VALUE      = 'MM'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.

*** Add Dynamic fields..
***--------------------------------------------------------------------------------------
*** Add Manual Take-up Extended Key
  if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
    try.
        move ME->R_PRSTY->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PRSTY_MANTU_E.
    endtry.
    if LR_PRSTY_MANTU_E is bound.
      LT_SVAL_E = LR_PRSTY_MANTU_E->GET_FIELDS( ).
    endif.

    append lines of LT_SVAL_E to LT_SVAL.
  endif.

***--------------------------------------------------------------------------------------
*** Call PopUP
  do.
    try.
        clear: LS_PRSTY_MANTU.

        call function 'POPUP_GET_VALUES'
          exporting
            POPUP_TITLE     = 'Add Manual Take-up - Define Key'(100)
          importing
            RETURNCODE      = LF_RETURN
          tables
            FIELDS          = LT_SVAL
          exceptions
            ERROR_IN_FIELDS = 1
            others          = 2.
        if SY-SUBRC ne 0 or
          LF_RETURN eq 'A'.
          clear LT_SVAL.
          LF_EXIT = ABAP_TRUE.
          exit.
        endif.

        check LT_SVAL is not initial.
        ME->CHECK_KEY( exporting IT_SVAL            = LT_SVAL
                       importing ES_PRSTY_MANTU     = LS_PRSTY_MANTU
                                 ER_S_PRSTY_MANTU_E = LR_S_PRSTY_MANTU_E
                                 EF_EXIT            = LF_ADD ).

        if LF_ADD = ABAP_TRUE.
          exit.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
        continue.
    endtry.

  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.
***--------------------------------------------------------------------------------------
*** Add new Entry
  if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
    assign LR_S_PRSTY_MANTU_E->* to <S_PRSTY_MANTU_E>.
    ME->R_PRSTY->ADD_MANTU( IS_PRSTY_MANTU   = LS_PRSTY_MANTU
                            IS_PRSTY_MANTU_E = <S_PRSTY_MANTU_E> ).
  else.
    ME->R_PRSTY->ADD_MANTU( IS_PRSTY_MANTU   = LS_PRSTY_MANTU ).
  endif.

endmethod.
method HANDLE_UC_COPY.

  data:          LF_RETURN            type                   ABAP_BOOL,
                 LF_EXIT              type                   ABAP_BOOL,
                 LF_ADD               type                   ABAP_BOOL,
                 LF_FNAME             type                   STRING,
                 LF_GMATU             type                   ZVCXI_P0SSC_GMATU.
  data:          LS_PRSTY_MANTU       type                   ZVCXI_P0SSC_S_PRSTY_MANTU,
                 LS_PRSTY_MANTU_F     type                   ZVCXI_P0SSC_S_PRSTY_MANTU_F,
                 LS_PRSTY_SCORE       type                   ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_CELL              type                   LVC_S_CELL,
                 LS_ROW               type                   LVC_S_ROW.
  data:          LT_SVAL              type standard table of SVAL,
                 LT_SVAL_E            type standard table of SVAL,
                 LT_CELL              type                   LVC_T_CELL,
                 LT_ROW               type                   LVC_T_ROW,
                 LT_GMATU             type                   ZVCXI_P0SSC_TT_GMATU.
  data:          LR_PRSTY_MANTU_E     type ref to            ZIF_VCXI_P0SSC_PRSTY_MANTU_E,
                 LR_S_PRSTY_MANTU_E   type ref to            DATA,
                 LR_CX_CKX            type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard          table,
                 <S_FIELD>            type                   SVAL,
                 <S_PRSTY_MANTU_E>    type                   any,
                 <S_DATA>             type                   any,
                 <F_FIELD>            type                   any,
                 <F_FIELD_COPY>       type                   any.

*** Get Manual Take-up Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Get Selected Joint Type
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.
    assign component 'GMATU' of structure <S_DATA> to <F_FIELD>.
    check <F_FIELD> is assigned.
    move <F_FIELD> to LF_GMATU.
    collect LF_GMATU into LT_GMATU.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.
    assign component 'GMATU' of structure <S_DATA> to <F_FIELD>.
    check <F_FIELD> is assigned.
    move <F_FIELD> to LF_GMATU.
    collect LF_GMATU into LT_GMATU.
  endloop.


  check <T_DATA> is not initial.

  loop at <T_DATA> assigning <S_DATA>.
    assign component 'GMATU' of structure <S_DATA> to <F_FIELD>.
    check <F_FIELD> is assigned.
    move <F_FIELD> to LF_GMATU.
    read table LT_GMATU with key TABLE_LINE = LF_GMATU transporting no fields.
    check SY-SUBRC = 0.
***----------------------------------------------------------------------
*** Create PopUp for User-Entry
*** Fixed Part
    clear: LT_SVAL.
    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
    <S_FIELD>-FIELDNAME  = 'BOXPA'.
    <S_FIELD>-FIELD_ATTR = '02'.
    assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
    if <F_FIELD_COPY> is assigned.
      <S_FIELD>-VALUE      = <F_FIELD_COPY>.
      unassign <F_FIELD_COPY>.
    endif.

    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
    <S_FIELD>-FIELDNAME  = 'PANOR'.
    <S_FIELD>-FIELD_ATTR = '02'.
    <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
    assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
    if <F_FIELD_COPY> is assigned.
      <S_FIELD>-VALUE      = <F_FIELD_COPY>.
      unassign <F_FIELD_COPY>.
    endif.

    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
    <S_FIELD>-FIELDNAME  = 'VALFR'.
    <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
    assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
    if <F_FIELD_COPY> is assigned.
      <S_FIELD>-VALUE      = <F_FIELD_COPY>.
      unassign <F_FIELD_COPY>.
    endif.

    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
    <S_FIELD>-FIELDNAME  = 'WERKS'.
    assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
    if <F_FIELD_COPY> is assigned.
      <S_FIELD>-VALUE      = <F_FIELD_COPY>.
      unassign <F_FIELD_COPY>.
    endif.

    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_MANTU'.
    <S_FIELD>-FIELDNAME  = 'FOTAU_UOM'.
    <S_FIELD>-VALUE      = 'MM'.
    <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
    assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
    if <F_FIELD_COPY> is assigned.
      <S_FIELD>-VALUE      = <F_FIELD_COPY>.
      unassign <F_FIELD_COPY>.
    endif.

*** Add Dynamic fields.
***--------------------------------------------------------------------------------------
*** Add Manual Take-up Extended Key
    if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
      try.
          move ME->R_PRSTY->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.
        LT_SVAL_E = LR_PRSTY_MANTU_E->GET_FIELDS( ).
      endif.

      loop at LT_SVAL_E assigning <S_FIELD>.
***     Default Copy Value
        assign component <S_FIELD>-FIELDNAME of structure <S_DATA> to <F_FIELD_COPY>.
        if <F_FIELD_COPY> is assigned.
          <S_FIELD>-VALUE      = <F_FIELD_COPY>.
          unassign <F_FIELD_COPY>.
        endif.
      endloop.

      append lines of LT_SVAL_E to LT_SVAL.
    endif.

***--------------------------------------------------------------------------------------
*** Call PopUP
    do.
      try.
          clear: LS_PRSTY_MANTU.

          call function 'POPUP_GET_VALUES'
            exporting
              POPUP_TITLE     = 'Copy Manual Take-up - Define Key Fields'(101)
            importing
              RETURNCODE      = LF_RETURN
            tables
              FIELDS          = LT_SVAL
            exceptions
              ERROR_IN_FIELDS = 1
              others          = 2.
          if SY-SUBRC ne 0 or
            LF_RETURN eq 'A'.
            clear LT_SVAL.
            LF_EXIT = ABAP_TRUE.
            exit.
          endif.

          check LT_SVAL is not initial.
          ME->CHECK_KEY( exporting IT_SVAL            = LT_SVAL
                         importing ES_PRSTY_MANTU     = LS_PRSTY_MANTU
                                   ER_S_PRSTY_MANTU_E = LR_S_PRSTY_MANTU_E
                                   EF_EXIT            = LF_ADD ).


          if LF_ADD = ABAP_TRUE.
            exit.
          endif.

        catch /VCXI/CX_CKX into LR_CX_CKX.
          LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
          continue.
      endtry.

    enddo.

    if LF_EXIT = ABAP_TRUE.
      exit.
    endif.
***--------------------------------------------------------------------------------------
*** Add new Entry
    if ME->R_PRSTY->R_PRSTY_MANTU_E is bound.
      assign LR_S_PRSTY_MANTU_E->* to <S_PRSTY_MANTU_E>.
      LF_GMATU = ME->R_PRSTY->ADD_MANTU( IS_PRSTY_MANTU   = LS_PRSTY_MANTU
                             IS_PRSTY_MANTU_E = <S_PRSTY_MANTU_E> ).
    else.
      LF_GMATU = ME->R_PRSTY->ADD_MANTU( IS_PRSTY_MANTU   = LS_PRSTY_MANTU ).
    endif.

*** Update Scores with old values
    loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE
         where PANOR = ME->R_PART_MANTU->S_PS_MANTU_VIS-PANOR
           and BOXPA = ME->R_PART_MANTU->S_PS_MANTU_VIS-BOXPA.

      concatenate LS_PRSTY_SCORE-CSCOR LS_PRSTY_SCORE-NSCOR into LF_FNAME separated by '_'.

      assign component LF_FNAME of structure <S_DATA> to <F_FIELD>.
      check SY-SUBRC = 0.

***   Set Factor
      read table ME->R_PRSTY->T_PRSTY_MANTU_F into LS_PRSTY_MANTU_F
                                              with key GMATU = LF_GMATU
                                                       CSCOR = LS_PRSTY_SCORE-CSCOR
                                                       NSCOR = LS_PRSTY_SCORE-NSCOR.
      if SY-SUBRC = 0.
        move <F_FIELD> to LS_PRSTY_MANTU_F-FOTAU.
      endif.
      unassign <F_FIELD>.

      ME->R_PRSTY->UPDATE_MANTU( IS_PRSTY_MANTU_F = LS_PRSTY_MANTU_F ).

    endloop.
  endloop.
endmethod.
method HANDLE_UC_DELTE.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_GMATU        type          ZVCXI_P0SSC_TT_GMATU.
  field-symbols: <T_DATA>        type standard table,
                 <S_GMATU>       type          ZVCXI_P0SSC_GMATU,
                 <S_DATA>        type          any.

*** Get Manual Take-up
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete Manual Take-up
  if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
*** No Row Selected. Please Select all Row's you wanna Delete.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '002'.
  endif.

*** Get Selected Manual Take-up
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.

    assign component 'GMATU' of structure <S_DATA> to <S_GMATU>.
    append <S_GMATU> to LT_GMATU.
    unassign <S_GMATU>.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

    assign component 'GMATU' of structure <S_DATA> to <S_GMATU>.
    append <S_GMATU> to LT_GMATU.
    unassign <S_GMATU>.
  endloop.

*** Delete Selected Manual Take-up
  ME->DELETE_MANTU( IT_GMATU = LT_GMATU ).

endmethod.
method HANDLE_USER_COMMAND.

  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      case E_UCOMM.

        when C_FUNC_ADD.
          ME->HANDLE_UC_ADD( ).

        when C_FUNC_DEL.
          ME->HANDLE_UC_DELTE( ).

        when C_FUNC_COP.
          ME->HANDLE_UC_COPY( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method REFRESH_GRID.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.

*** Build Dynamic Table with columns for Manual Take Up
  if ME->F_REFRESH_ALL_REQ eq ABAP_TRUE.
    clear: ME->F_REFRESH_ALL_REQ.
    ME->BUILD_DYN_TABLE( ).
  endif.

  SUPER->REFRESH_GRID( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
