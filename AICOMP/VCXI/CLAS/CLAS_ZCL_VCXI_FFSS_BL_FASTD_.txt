
class ZCL_VCXI_FFSS_BL_FASTD definition
  public
  inheriting from ZCL_VCXI_F0SS_BL_FASTD
  create public .

public section.

  constants C_LASTR_PARALLEL type ZVCXI_FFS_LASTR value 'P' ##NO_TEXT.
  constants C_LASTR_SEQUENTIAL type ZVCXI_FFS_LASTR value 'S' ##NO_TEXT.
  constants C_TINPU_EMAT type ZVCXI_FFS_TINPU value 'C' ##NO_TEXT.
  constants C_TINPU_EXTR type ZVCXI_FFS_TINPU value 'E' ##NO_TEXT.
  constants C_TINPU_FPROC type ZVCXI_FFS_TINPU value 'P' ##NO_TEXT.
  data F_LASTR type ZVCXI_FFS_LASTR read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_BY_OUTPUT
    importing
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !ET_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !ET_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !EF_SFDAT type ZVCXI_F0SS_SFDAT
      !EF_NOOUT type ZVCXI_XCS_NOOUT
      !ES_TRWID type ZVCXI_F0S_S_TRWID
      !EF_SETBY_TRWID type /VCXI/VKSR_SETBY
      !EF_FOPSL type ZVCXI_FFS_FOPSL
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_BY_OUT
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !ET_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !ET_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !EF_SFDAT type ZVCXI_F0SS_SFDAT
      !EF_NOOUT type ZVCXI_XCS_NOOUT
      !EF_SETBY_NOOUT type /VCXI/VKSR_SETBY
      !ES_TRWID type ZVCXI_F0S_S_TRWID
      !EF_SETBY_TRWID type /VCXI/VKSR_SETBY
      !EF_FOPSL type ZVCXI_FFS_FOPSL
    raising
      /VCXI/CX_CKX .
  methods GET_GATE_FFG
    exporting
      !ER_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !ER_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
      !EF_SFDAT type ZVCXI_F0SS_SFDAT
      !ET_FFG_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_FASTD_BY_OUT
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IF_NOOUT type ZVCXI_XCS_NOOUT optional
      !IF_SETBY_NOOUT type /VCXI/VKSR_SETBY optional
      !IS_TRWID type ZVCXI_F0S_S_TRWID optional
      !IF_SETBY_TRWID type /VCXI/VKSR_SETBY optional
      !IT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !IT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !IT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods SET_FASTD_BY_OUTPUT
    importing
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !IS_TRWID type ZVCXI_F0S_S_TRWID optional
      !IF_SETBY_TRWID type /VCXI/VKSR_SETBY optional
      !IT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !IT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !IT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE optional
    raising
      /VCXI/CX_CKX .
  methods SET_NOFIL
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IF_NOFIL type ZVCXI_FFS_NOFIL
      !IF_NOOUT type ZVCXI_XCS_NOOUT optional
      !IS_TRWID type ZVCXI_F0S_S_TRWID optional
    raising
      /VCXI/CX_CKX .
  methods ADD_FCOMP
    exporting
      !ER_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
protected section.

  data F_FSPCO type ZVCXI_FFS_FSPCO .
  data F_TIDFL type ZVCXI_FFS_TIDFL .

  methods GET_NOOUT_BY_OUTPUT
    importing
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE optional
    returning
      value(RF_NOOUT) type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods REMOVE_OLD_SPVRE
    importing
      !IT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !IR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods SET_FASTD
    importing
      !IR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
      !IT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !IT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CT_XCON_SPVRE type YT_XCON_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_CSTEP
    importing
      !IT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP
    changing
      !CR_SPVRE_FCOMP_IN type ref to /VCXI/CL_VKSR_SPVRE optional
      !CR_SPVRE_FCOMP_OUT type ref to /VCXI/CL_VKSR_SPVRE optional
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CT_XCON_SPVRE type YT_XCON_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_EXTR
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_GATE_INP type /VCXI/VKSR_TT_GATE
    exporting
      !ER_SPVRE_EXTR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_MS_GLUE
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_GATE_INP type /VCXI/VKSR_TT_GATE
    exporting
      !ER_SPVRE_MS_GLUE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods SPLIT_FCOMP
    importing
      !IR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
    exporting
      value(ER_SPVRE_FCOMP_BEFORE) type ref to /VCXI/CL_VKSR_SPVRE
      value(ER_SPVRE_FCOMP_AFTER) type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CT_XCON_SPVRE type YT_XCON_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_MS_EMAT
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_GATE_INP type /VCXI/VKSR_TT_GATE
    exporting
      !ER_SPVRE_EMAT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_MS_FPROC
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_GATE_INP type /VCXI/VKSR_TT_GATE
    exporting
      !ER_SPVRE_FPROC type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CONV
    importing
      !IR_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE optional
      !IS_FASTD_LAINP type ZVCXI_FFSS_S_FASTD_LAINP
    changing
      !CT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP
      !CF_SFDAT type ZVCXI_F0SS_SFDAT optional
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP
    importing
      !IR_SPVRE_CSTEP type ref to /VCXI/CL_VKSR_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IF_FIBCS type ZVCXI_FFSS_FIBCS
    changing
      !CT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP
      !CF_SFDAT type ZVCXI_F0SS_SFDAT
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SPEC
    importing
      !IR_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IF_LEVEL type I
    changing
      !CF_SFDAT type ZVCXI_F0SS_SFDAT optional
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_OUTPUT
    importing
      !IR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IF_LEVEL type I
    changing
      !CF_SFDAT type ZVCXI_F0SS_SFDAT optional
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_FCOMP
    importing
      !IR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    exporting
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_FCONI type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_INPUT
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP
      !IS_FASTD_LAINP type ZVCXI_FFSS_S_FASTD_LAINP
      !IF_LEVEL type I
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !CT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !CF_SFDAT type ZVCXI_F0SS_SFDAT
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_FCONI
    importing
      !IR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP optional
      !IS_FASTD_LAINP type ZVCXI_FFSS_S_FASTD_LAINP
      !IF_LEVEL type I
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !CT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE optional
      !CF_SFDAT type ZVCXI_F0SS_SFDAT
    raising
      /VCXI/CX_CKX .
  methods FREE_LASTP_RENUM
    importing
      !IF_LASTP type ZVCXI_FFS_LASTP
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD
    importing
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !IS_FASTD_LAINP type ZVCXI_FFSS_S_FASTD_LAINP
      !IT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP optional
      !IF_LEVEL type I
    exporting
      !ER_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
      !CT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE
      !CF_SFDAT type ZVCXI_F0SS_SFDAT
    raising
      /VCXI/CX_CKX .
  methods PREPARE_XCON
    importing
      !IR_SPVRE_FCOMP_FROM type ref to /VCXI/CL_VKSR_SPVRE
      !IR_SPVRE_FCOMP_TO type ref to /VCXI/CL_VKSR_SPVRE
      !IS_FASTD_LAINP type ZVCXI_FFSS_S_FASTD_LAINP optional
    exporting
      !ER_SPVRE_XCONO type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_XCONI type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CT_XCON_SPVRE type YT_XCON_SPVRE
    raising
      /VCXI/CX_CKX .
  methods REORG_LASTP
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
    raising
      /VCXI/CX_CKX .
  methods SET_NOFIL_PARALLEL
    importing
      !IF_NOFIL type ZVCXI_FFS_NOFIL
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
    raising
      /VCXI/CX_CKX .
  methods SET_NOFIL_SEQUENTIAL
    importing
      !IF_NOFIL type ZVCXI_FFS_NOFIL
    changing
      !CT_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP
      !CT_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_BL_FASTD definition
class ZCL_VCXI_FFSS_BL_FASTD implementation.
  method ADD_CSTEP.

    data: LS_FASTD_CSTEP type        ZVCXI_FFSS_S_FASTD_CSTEP.
    data: LT_FASTD_CSTEP type        ZVCXI_FFSS_TT_FASTD_CSTEP,
          LT_SPVRE_FCOMP type        /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV  type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Keep Input Film Component stable and change Output
    if CR_SPVRE_FCOMP_OUT is supplied.
      move CR_SPVRE_FCOMP_OUT to LR_SPVRE_FCOMP.

***   Keep Source as well to fill later IN/OUT
      append LR_SPVRE_FCOMP to LT_SPVRE_FCOMP.
      append initial line to LT_FASTD_CSTEP.

***   Add CSteps (ignore inbound CSteps) and create new Film Componets if needed
      append lines of IT_FASTD_CSTEP to LT_FASTD_CSTEP.
      delete LT_FASTD_CSTEP where FIBCS eq ABAP_TRUE.
      loop at LT_FASTD_CSTEP into LS_FASTD_CSTEP
                            where ICSTP is not initial.
        if LS_FASTD_CSTEP-FSPCO eq ABAP_TRUE or
           ( LS_FASTD_CSTEP-FSPCO eq ABAP_UNDEFINED and ME->F_FSPCO eq ABAP_TRUE ).
***       Split Film Component if needed
          ME->SPLIT_FCOMP( exporting IR_SPVRE_FCOMP       = LR_SPVRE_FCOMP
                           importing ER_SPVRE_FCOMP_AFTER = LR_SPVRE_FCOMP
                           changing  CT_SPVRE             = CT_SPVRE
                                     CT_XCON_SPVRE        = CT_XCON_SPVRE ).
        endif.

        append LR_SPVRE_FCOMP to LT_SPVRE_FCOMP.
      endloop.

***--------------------------------------------------------------------------------------
*** Keep Output Film Component stable and change Input
    elseif CR_SPVRE_FCOMP_IN is supplied.
      move CR_SPVRE_FCOMP_IN  to LR_SPVRE_FCOMP.

***   Keep Source as well to fill later IN/OUT
      append LR_SPVRE_FCOMP to LT_SPVRE_FCOMP.
      append initial line to LT_FASTD_CSTEP.

***   Add CSteps (ignore inbound CSteps) and create new Film Componets if needed (processing backwards)
      append lines of IT_FASTD_CSTEP to LT_FASTD_CSTEP.
      delete LT_FASTD_CSTEP where FIBCS eq ABAP_TRUE.

      do LINES( LT_FASTD_CSTEP ) times.
***     Get Conversion Steps (processing bottom up)
        read table LT_FASTD_CSTEP into LS_FASTD_CSTEP index LINES( LT_FASTD_CSTEP ) + 1 - SY-INDEX.
        check LS_FASTD_CSTEP-ICSTP is not initial.

        if LS_FASTD_CSTEP-FSPCO eq ABAP_TRUE or
           ( LS_FASTD_CSTEP-FSPCO eq ABAP_UNDEFINED and ME->F_FSPCO eq ABAP_TRUE ).
***       Split Film Component if needed
          ME->SPLIT_FCOMP( exporting IR_SPVRE_FCOMP        = LR_SPVRE_FCOMP
                           importing ER_SPVRE_FCOMP_BEFORE = LR_SPVRE_FCOMP
                           changing  CT_SPVRE              = CT_SPVRE
                                     CT_XCON_SPVRE         = CT_XCON_SPVRE ).
        endif.
        insert LR_SPVRE_FCOMP into LT_SPVRE_FCOMP index 1.
      enddo.

***--------------------------------------------------------------------------------------
*** No changable Film Component defined
    else.
      raise exception type /VCXI/CX_CKX.
    endif.


***--------------------------------------------------------------------------------------
*** Add Conversion Steps to corresponding Film Components
    loop at LT_FASTD_CSTEP into LS_FASTD_CSTEP.
***   Get corresponding Film Component and Gate
      read table LT_SPVRE_FCOMP into LR_SPVRE_FCOMP index SY-TABIX.

      if LS_FASTD_CSTEP-ICSTP is not initial.
***     Analyze Film Component
        ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = LR_SPVRE_FCOMP
                                     IT_SPVRE        = CT_SPVRE
                           importing ER_SPVRE_CONV   = LR_SPVRE_CONV ).

        if LS_FASTD_CSTEP-R_GATE is bound.
***       Copy based on existing Gate
          ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LS_FASTD_CSTEP-R_GATE
                                           IR_SPVRE_PARENT  = LR_SPVRE_CONV
                                           IF_COPY_CHILDREN = ABAP_TRUE
                                 changing  CT_SPVRE         = CT_SPVRE ).
        else.
***       Add Conversion Step based on ID
          ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_CONV
                                   IF_ID           = LS_FASTD_CSTEP-ICSTP
                         changing  CT_SPVRE        = CT_SPVRE ).
        endif.
      endif.

***   Change references
      at first.
        move LR_SPVRE_FCOMP to CR_SPVRE_FCOMP_IN.
      endat.
      at last.
        move LR_SPVRE_FCOMP to CR_SPVRE_FCOMP_OUT.
      endat.
    endloop.

  endmethod.
  method ADD_EXTR.

    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Search for existing Gate
    read table IT_GATE_INP into LR_GATE index 1.
    if SY-SUBRC eq 0.
***   Copy based on existing Gate
      ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                       IR_SPVRE_PARENT  = IR_SPVRE_INPUT
                                       IF_COPY_CHILDREN = ABAP_TRUE
                             importing ER_SPVRE         = ER_SPVRE_EXTR
                             changing  CT_SPVRE         = CT_SPVRE ).
    else.
***   Add Extrusion Elements
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_INPUT
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_EXTR=>C_IPRVT_EXTR )
                     importing ER_SPVRE        = ER_SPVRE_EXTR
                     changing  CT_SPVRE        = CT_SPVRE ).
    endif.

  endmethod.
  method ADD_FCOMP.

    data: LR_SPVRE_XCONMGR type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Find Root Element
    ME->GET_SPVRE( exporting IF_ID    = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV )
                   importing ER_SPVRE = LR_SPVRE_XCONMGR
                   changing  CT_SPVRE = CT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Create Film Component
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCONMGR
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCOMP=>C_IPRVT_FF_FCOMP )
                   importing ER_SPVRE        = ER_SPVRE_FCOMP
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Create Specification of Film
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_FCOMP
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC )
                   importing ER_SPVRE        = ER_SPVRE_SPEC
                   changing  CT_SPVRE        = CT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Create Input
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT )
                   importing ER_SPVRE        = ER_SPVRE_INPUT
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Create Conversion
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                             IF_ID           = 'CONV'
                   importing ER_SPVRE        = ER_SPVRE_CONV
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Create Output
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT )
                   importing ER_SPVRE        = ER_SPVRE_OUTPUT
                   changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method ADD_MS_EMAT.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Search for existing Gate
    read table IT_GATE_INP into LR_GATE index 1.
    if SY-SUBRC eq 0.

***   Copy based on existing Gate
      ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                       IR_SPVRE_PARENT  = IR_SPVRE_INPUT
                                       IF_COPY_CHILDREN = ABAP_TRUE
                             importing ER_SPVRE         = ER_SPVRE_EMAT
                             changing  CT_SPVRE         = CT_SPVRE ).
    else.

***   Add Estimation Material Elements
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_INPUT
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_IPRVT_MS_EMAT )
                     importing ER_SPVRE        = ER_SPVRE_EMAT
                     changing  CT_SPVRE        = CT_SPVRE ).
    endif.

  endmethod.
  method ADD_MS_FPROC.

    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Search for existing Gate
    read table IT_GATE_INP into LR_GATE index 1.
    if SY-SUBRC eq 0.
***   Copy based on existing Gate
      ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                       IR_SPVRE_PARENT  = IR_SPVRE_INPUT
                                       IF_COPY_CHILDREN = ABAP_TRUE
                             importing ER_SPVRE         = ER_SPVRE_FPROC
                             changing  CT_SPVRE         = CT_SPVRE ).
    else.
***   Add Film Procurement Elements
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_INPUT
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_IPRVT_MS_FPROC )
                     importing ER_SPVRE        = ER_SPVRE_FPROC
                     changing  CT_SPVRE        = CT_SPVRE ).
    endif.

  endmethod.
  method ADD_MS_GLUE.

    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Search for existing Gate
    read table IT_GATE_INP into LR_GATE index 1.
    if SY-SUBRC eq 0.
***   Copy based on existing Gate
      ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                       IR_SPVRE_PARENT  = IR_SPVRE_INPUT
                                       IF_COPY_CHILDREN = ABAP_TRUE
                             importing ER_SPVRE         = ER_SPVRE_MS_GLUE
                             changing  CT_SPVRE         = CT_SPVRE ).
    else.
***   Add Glue Elements
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_INPUT
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_GLUE=>C_IPRVT_MS_GLUE )
                     importing ER_SPVRE        = ER_SPVRE_MS_GLUE
                     changing  CT_SPVRE        = CT_SPVRE ).
    endif.

*** Set Position between the two Inputs
    ER_SPVRE_MS_GLUE->SET_POSID( IF_POSID = 15 ).

  endmethod.
  method ANALYZE_CONV.

    data: LF_FIBCS type ZVCXI_FFSS_FIBCS.
    data: LR_SPVRE_CSTEP type ref to /VCXI/CL_VKSR_SPVRE.

*** Define Status of Inbound Conversion Step
    if IS_FASTD_LAINP-LASTP ne 0.
      LF_FIBCS = ABAP_FALSE.      " It's not an Inbound Conversion Step
    else.
      LF_FIBCS = ABAP_UNDEFINED.  " Inbound is not supported
    endif.

*** Analyze Conversion Step backwards (Navigate down)
    do lines( IT_SPVRE ) times.
      LR_SPVRE_CSTEP = IT_SPVRE[ lines( IT_SPVRE ) - SY-INDEX + 1 ].
      check LR_SPVRE_CSTEP->R_PARENT eq IR_SPVRE_CONV.

      ME->ANALYZE_CSTEP( exporting IR_SPVRE_CSTEP = LR_SPVRE_CSTEP
                                   IT_PRVDR       = IT_PRVDR
                                   IF_FIBCS       = LF_FIBCS
                         changing  CT_FASTD_CSTEP = CT_FASTD_CSTEP
                                   CF_SFDAT       = CF_SFDAT ).
    enddo.

  endmethod.
  method ANALYZE_CSTEP.

    data: LR_GATE_PRINT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FOLD  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_CSTEP> type ZVCXI_FFSS_S_FASTD_CSTEP.

***--------------------------------------------------------------------------------------
*** Checks before adding the Conversion Step
    case IR_SPVRE_CSTEP->GET_ID( ).
***   Printing
      when ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_IPRVT_CSTEP_PRINT ).
***     Check for duplicates of Print as this would be non-standard
        if LINE_EXISTS( CT_FASTD_CSTEP[ ICSTP = IR_SPVRE_CSTEP->GET_ID( ) ] ).
          move C_SFDAT_NONSTANDARD to CF_SFDAT.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Add to Conversion Steps
    insert initial line into CT_FASTD_CSTEP assigning <S_FASTD_CSTEP> index 1.
    try.
        <S_FASTD_CSTEP>-R_GATE = ME->GET_GATE_BY_SPVRE( IR_SPVRE = IR_SPVRE_CSTEP
                                                        IT_PRVDR = IT_PRVDR ).
      catch /VCXI/CX_CKX.
        clear <S_FASTD_CSTEP>-R_GATE.
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
    endtry.
    <S_FASTD_CSTEP>-ICSTP = IR_SPVRE_CSTEP->GET_ID( ).
    <S_FASTD_CSTEP>-FSPCO = ABAP_UNDEFINED.
    <S_FASTD_CSTEP>-FIBCS = IF_FIBCS.

***--------------------------------------------------------------------------------------
    case <S_FASTD_CSTEP>-ICSTP.
***   Printing
      when ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_IPRVT_CSTEP_PRINT ).

***   Folding
      when ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_CSTEP_FOLD=>C_IPRVT_CSTEP_FOLD ).
***     Fold shouldn't be "stand-alone"
        <S_FASTD_CSTEP>-FSPCO = ABAP_FALSE.

***   Any other Conversion Step
      when others.
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
    endcase.

  endmethod.
  method ANALYZE_FCOMP.


***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Element of Specification
    ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_FCOMP
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC )
                             IT_SPVRE        = IT_SPVRE
                   importing ER_SPVRE        = ER_SPVRE_SPEC ).

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Element of Input
    if ER_SPVRE_INPUT is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT )
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_INPUT ).
    endif.

*** Get Supervised Runtime Element of Conversion
    if ER_SPVRE_CONV is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'CONV'
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_CONV ).
    endif.

*** Get Supervised Runtime Element of Output
    if ER_SPVRE_OUTPUT is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT )
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_OUTPUT ).
    endif.

  endmethod.
  method ANALYZE_FCONI.

    data: LS_FASTD_LAINP type        ZVCXI_FFSS_S_FASTD_LAINP,
          LS_XCONR       type        ZVCXI_F0SS_S_XCONR.
    data: LT_FASTD_CSTEP type        ZVCXI_FFSS_TT_FASTD_CSTEP,
          LT_XCONR       type        ZVCXI_F0SS_TT_XCONR,
          LT_PARAM       type        /VCXI/VKSR_TT_PARAM.
    data: LR_SPVRE_FCONI type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CSTEP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_PR_SOV      type ref to ZCL_VCXI_F0SS_PR_SOV,
          LR_SPVRE_FCOMP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Supervised Element to Gate
    LR_SPVRE_FCONI = ME->GET_SPVRE_BY_GATE( IR_GATE  = IR_GATE_XCONI
                                            IT_SPVRE = IT_SPVRE ).

*** Use provided Lamination Input
    LS_FASTD_LAINP = IS_FASTD_LAINP.

*** Keep provided Conversion Steps
    LT_FASTD_CSTEP = IT_FASTD_CSTEP.
*** Analyze Inbound Conversion Step backwards
    do lines( IT_SPVRE ) times.
      LR_SPVRE_CSTEP = IT_SPVRE[ lines( IT_SPVRE ) - SY-INDEX + 1 ].
      check LR_SPVRE_CSTEP->R_PARENT eq LR_SPVRE_FCONI.
      ME->ANALYZE_CSTEP( exporting IR_SPVRE_CSTEP = LR_SPVRE_CSTEP
                                   IT_PRVDR       = IT_PRVDR
                                   IF_FIBCS       = ABAP_TRUE
                         changing  CT_FASTD_CSTEP = LT_FASTD_CSTEP
                                   CF_SFDAT       = CF_SFDAT ).
    enddo.

***--------------------------------------------------------------------------------------
*** Get Specification Overview
    ME->GET_PRVDR_SOV( importing ER_PR_SOV = LR_PR_SOV ).
    check LR_PR_SOV is bound.

*** Get Connections
    move LR_PR_SOV->GET_XCONR( ) to LT_XCONR.

*** Find Connector Out
    read table LT_XCONR into LS_XCONR with key R_GATE_IN = IR_GATE_XCONI.
    check SY-SUBRC eq 0.

*** Get Parent
    move LS_XCONR-R_GATE_OUT->GET_PARENT( ) to LR_GATE_OUTPUT.

*** Cascading Call to get Fast Data Information
    ME->GET_FASTD( exporting IT_SPVRE       = IT_SPVRE
                             IT_PRVDR       = IT_PRVDR
                             IR_GATE_OUTPUT = LR_GATE_OUTPUT
                             IS_FASTD_LAINP = LS_FASTD_LAINP
                             IT_FASTD_CSTEP = LT_FASTD_CSTEP
                             IF_LEVEL       = IF_LEVEL + 1
                   importing ER_SPVRE_FCOMP = LR_SPVRE_FCOMP
                   changing  CT_FASTD_INP   = CT_FASTD_INP
                             CT_FASTD_LAMI  = CT_FASTD_LAMI
                             CT_SPVRE_FCOMP = CT_SPVRE_FCOMP
                             CF_SFDAT       = CF_SFDAT ).

*** Collect all Film Components below the Starting Point
    append LR_SPVRE_FCOMP to CT_SPVRE_FCOMP.

***--------------------------------------------------------------------------------------
*** Check for non-standard values on Connection In
    LT_PARAM = LS_XCONR-R_GATE_IN->GET_PARAM_ALL( ).

*** Check for parameter that were set by User
    read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                        transporting no fields.
    if SY-SUBRC eq 0.
      move C_SFDAT_NONSTANDARD to CF_SFDAT.
    endif.

***--------------------------------------------------------------------------------------
*** Check for non-standard values on Connection Out
    LT_PARAM = LS_XCONR-R_GATE_OUT->GET_PARAM_ALL( ).

*** Check for parameter that were set by User
    read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                        transporting no fields.
    if SY-SUBRC eq 0.
      move C_SFDAT_NONSTANDARD to CF_SFDAT.
    endif.

  endmethod.
  method ANALYZE_INPUT.

    data: LF_COUNT type        I,
          LF_GLUES type        I,
          LF_FCONI type        I,
          LF_LASTP type        ZVCXI_FFS_LASTP.
    data: LS_PRVDR_DEF   type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_FASTD_INP   type        ZVCXI_FFSS_S_FASTD_INP,
          LS_FASTD_LAINP type        ZVCXI_FFSS_S_FASTD_LAINP.
    data: LT_FASTD_CSTEP  type      ZVCXI_FFSS_TT_FASTD_CSTEP.
    data: LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE_CHILD  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_LAMI> type        ZVCXI_FFSS_S_FASTD_LAMI.

***--------------------------------------------------------------------------------------
*** Buffer Conversion Steps
    move IT_FASTD_CSTEP to LT_FASTD_CSTEP.

***--------------------------------------------------------------------------------------
*** Count Input
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT = IR_SPVRE_INPUT.
      add 1 to LF_COUNT.
    endloop.

    if LF_COUNT gt 1.
***   Determine next Lamination Step Counter
      if IS_FASTD_LAINP-LASTP eq 0.
        move 99 to LS_FASTD_LAINP-LASTP.
      else.
        LS_FASTD_LAINP-LASTP = IS_FASTD_LAINP-LASTP - 1.
***     Ensure that the new Lamination can be inserted directly before IF_LASTP
        ME->FREE_LASTP_RENUM( exporting IF_LASTP      = LS_FASTD_LAINP-LASTP
                              changing  CT_FASTD_INP  = CT_FASTD_INP
                                        CT_FASTD_LAMI = CT_FASTD_LAMI ).
      endif.

***   Add new Lamination
      append initial line to CT_FASTD_LAMI assigning <S_FASTD_LAMI>.
      <S_FASTD_LAMI>-S_FASTD_LAINP = IS_FASTD_LAINP.
      <S_FASTD_LAMI>-LASTP         = LS_FASTD_LAINP-LASTP.

***   Assign Conversion Steps (and forget for lower levels)
      move LT_FASTD_CSTEP to <S_FASTD_LAMI>-T_FASTD_CSTEP.
      clear LT_FASTD_CSTEP.

    else.
***   Keep Lamination Input
      move IS_FASTD_LAINP to LS_FASTD_LAINP.
    endif.

***--------------------------------------------------------------------------------------
*** Loop at Children of Input
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT = IR_SPVRE_INPUT.
      clear LS_FASTD_INP.
      try.
          LR_GATE_CHILD = ME->GET_GATE_BY_SPVRE( IR_SPVRE = LR_SPVRE_CHILD
                                                 IT_PRVDR = IT_PRVDR ).
        catch /VCXI/CX_CKX.
***       Unknown Provider Types lead to Non-Standard VC
          move C_SFDAT_NONSTANDARD to CF_SFDAT.
          continue.
      endtry.

***   Assign to Lamination
      if <S_FASTD_LAMI> is assigned.
        LS_FASTD_LAINP-LAPOS = LR_SPVRE_CHILD->F_POSID.
        clear LS_FASTD_LAINP-S_REDUW.
      endif.
      move LS_FASTD_LAINP to LS_FASTD_INP-S_FASTD_LAINP.

***   Assign Conversion Steps
      move LT_FASTD_CSTEP to LS_FASTD_INP-T_FASTD_CSTEP.

***   Get Provider Type of Child Element
      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF
                                 with key ID = LR_SPVRE_CHILD->GET_ID( ).
      case LS_PRVDR_DEF-IPRVT.
***     Extrusion
        when ZCL_VCXI_FFSS_PR_EXTR=>C_IPRVT_EXTR.
          if <S_FASTD_LAMI> is assigned.
***         Check for non-standard Configuration, but still add the Extrusion
            move C_SFDAT_NONSTANDARD to CF_SFDAT.
****         Get Reduction on Width
*            cast ZCL_VCXI_FFSS_PR_EXTR( LR_GATE_CHILD->R_CLSPR )->GET_REDUW( importing ES_REDUW = LS_FASTD_INP-S_FASTD_LAINP-S_REDUW ).
          endif.

          append LR_GATE_CHILD to LS_FASTD_INP-T_GATE_INP.
          move   C_TINPU_EXTR  to LS_FASTD_INP-TINPU.
          append LS_FASTD_INP  to CT_FASTD_INP.

***     Film Procurement
        when ZCL_VCXI_FFSS_PR_MS_FPROC=>C_IPRVT_MS_FPROC.
          if <S_FASTD_LAMI> is assigned.
***         Check for non-standard Configuration, but still add Film Procurement
            move C_SFDAT_NONSTANDARD to CF_SFDAT.
***         Get Reduction on Width
            cast ZCL_VCXI_FFSS_PR_MS_FPROC( LR_GATE_CHILD->R_CLSPR )->GET_REDUW( importing ES_REDUW = LS_FASTD_INP-S_FASTD_LAINP-S_REDUW ).
          endif.

          append LR_GATE_CHILD to LS_FASTD_INP-T_GATE_INP.
          move   C_TINPU_FPROC to LS_FASTD_INP-TINPU.
          append LS_FASTD_INP  to CT_FASTD_INP.

***     Estimation Material
        when ZCL_VCXI_FFSS_PR_MS_EMAT=>C_IPRVT_MS_EMAT.
          if <S_FASTD_LAMI> is assigned.
***         Check for non-standard Configuration, but still add Estimation Material
            move C_SFDAT_NONSTANDARD to CF_SFDAT.
***         Get Reduction on Width
            cast ZCL_VCXI_FFSS_PR_MS_EMAT( LR_GATE_CHILD->R_CLSPR )->GET_REDUW( importing ES_REDUW = LS_FASTD_INP-S_FASTD_LAINP-S_REDUW ).
          endif.

          append LR_GATE_CHILD to LS_FASTD_INP-T_GATE_INP.
          move   C_TINPU_EMAT  to LS_FASTD_INP-TINPU.
          append LS_FASTD_INP  to CT_FASTD_INP.

***     Connection In
        when ZCL_VCXI_FFSS_PR_FCONI=>C_IPRVT_FF_FCONI.
          if <S_FASTD_LAMI> is assigned.
***         Get Reduction on Width
            cast ZCL_VCXI_FFSS_PR_FCONI( LR_GATE_CHILD->R_CLSPR )->GET_REDUW( importing ES_REDUW = LS_FASTD_LAINP-S_REDUW ).
          endif.
          ME->ANALYZE_FCONI( exporting IR_GATE_XCONI  = LR_GATE_CHILD
                                       IT_SPVRE       = IT_SPVRE
                                       IT_PRVDR       = IT_PRVDR
                                       IT_FASTD_CSTEP = LT_FASTD_CSTEP
                                       IS_FASTD_LAINP = LS_FASTD_LAINP
                                       IF_LEVEL       = IF_LEVEL
                             changing  CT_FASTD_INP   = CT_FASTD_INP
                                       CT_FASTD_LAMI  = CT_FASTD_LAMI
                                       CT_SPVRE_FCOMP = CT_SPVRE_FCOMP
                                       CF_SFDAT       = CF_SFDAT ).

          if <S_FASTD_LAMI> is assigned.
            add 1 to LF_FCONI.
            if LF_FCONI gt 2.
              move C_SFDAT_NONSTANDARD to CF_SFDAT.
            endif.
          endif.

***     Glue
        when ZCL_VCXI_FFSS_PR_MS_GLUE=>C_IPRVT_MS_GLUE.
          check <S_FASTD_LAMI> is assigned.
          append LR_GATE_CHILD to <S_FASTD_LAMI>-T_GATE_INP.

          add 1 to LF_GLUES.
          if LF_GLUES gt 1.
            move C_SFDAT_NONSTANDARD to CF_SFDAT.
          endif.
      endcase.
    endloop.

  endmethod.
  method ANALYZE_OUTPUT.

    data: LF_COUNT       type        I.
    data: LT_PARAM       type        /VCXI/VKSR_TT_PARAM.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Check for multiple Out Elements
    loop at IT_SPVRE transporting no fields
                    where TABLE_LINE->R_PARENT = IR_SPVRE_OUTPUT.
      add 1 to LF_COUNT.
    endloop.
    if LF_COUNT ne 1.
      move C_SFDAT_NONSTANDARD to CF_SFDAT.
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Check for parameter that were set by User
    if IF_LEVEL ne 0.
      LR_GATE = ME->GET_GATE_BY_SPVRE( IR_SPVRE = IR_SPVRE_OUTPUT
                                       IT_PRVDR = IT_PRVDR ).
      if LR_GATE is bound.
        LT_PARAM = LR_GATE->GET_PARAM_ALL( ).
        read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                            transporting no fields.
        if SY-SUBRC eq 0.
          move C_SFDAT_NONSTANDARD to CF_SFDAT.
        endif.
      endif.
    endif.

  endmethod.
  method ANALYZE_SPEC.

    data: LT_PARAM       type        /VCXI/VKSR_TT_PARAM.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Check for parameter that were set by User
    LR_GATE = ME->GET_GATE_BY_SPVRE( IR_SPVRE = IR_SPVRE_SPEC
                                     IT_PRVDR = IT_PRVDR ).
    if LR_GATE is bound.
      LT_PARAM = LR_GATE->GET_PARAM_ALL( ).
      read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                          transporting no fields.
      if SY-SUBRC eq 0.
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Load Fast Data Settings
    select single LASTR TIDFL FSPCO
           into ( ME->F_LASTR, ME->F_TIDFL, ME->F_FSPCO )
           from ZVCXI_FFS_TC010
          where WERKS eq LR_APPDATA->F_WERKS.
    if SY-SUBRC ne 0.
      select single LASTR TIDFL FSPCO
             into ( ME->F_LASTR, ME->F_TIDFL, ME->F_FSPCO )
             from ZVCXI_FFS_TC010
            where WERKS eq SPACE.
    endif.

  endmethod.
  method FREE_LASTP_RENUM.

    field-symbols: <S_FASTD_INP>   type        ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI>  type        ZVCXI_FFSS_S_FASTD_LAMI.

    check IF_LASTP ne 0.

***--------------------------------------------------------------------------------------
*** For each Input
    loop at CT_FASTD_INP assigning <S_FASTD_INP>.
***   Reduce if current Lamination Step is equal or less requested one
      if <S_FASTD_INP>-S_FASTD_LAINP-LASTP le IF_LASTP and
         <S_FASTD_INP>-S_FASTD_LAINP-LASTP ne 0.
        subtract 1 from <S_FASTD_INP>-S_FASTD_LAINP-LASTP.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** For each Lamination
    loop at CT_FASTD_LAMI assigning <S_FASTD_LAMI>.
***   Reduce if current Lamination Step is equal or less requested one
      if <S_FASTD_LAMI>-LASTP le IF_LASTP and
         <S_FASTD_LAMI>-LASTP ne 0.
        subtract 1 from <S_FASTD_LAMI>-LASTP.
      endif.
      if <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP le IF_LASTP and
         <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP ne 0.
        subtract 1 from <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP.
      endif.
    endloop.

  endmethod.
  method GET_FASTD.

    data: LT_FASTD_CSTEP type        ZVCXI_FFSS_TT_FASTD_CSTEP.
    data: LR_SPVRE_SPEC   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV   type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Film Component of Gate Output
    ER_SPVRE_FCOMP = ME->GET_SPVRE_BY_GATE( IR_GATE  = IR_GATE_OUTPUT
                                            IT_SPVRE = IT_SPVRE ).
*** Get Grand-Parent (Output -> Spec -> Film Component)
    move ER_SPVRE_FCOMP->R_PARENT->R_PARENT to ER_SPVRE_FCOMP.

*** Analyze Film Component
    ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = ER_SPVRE_FCOMP
                                 IT_SPVRE        = IT_SPVRE
                       importing ER_SPVRE_SPEC   = LR_SPVRE_SPEC
                                 ER_SPVRE_INPUT  = LR_SPVRE_INPUT
                                 ER_SPVRE_CONV   = LR_SPVRE_CONV
                                 ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT ).

***--------------------------------------------------------------------------------------
*** Analyze Specification Element
    ME->ANALYZE_SPEC( exporting IR_SPVRE_SPEC = LR_SPVRE_SPEC
                                IT_SPVRE      = IT_SPVRE
                                IT_PRVDR      = IT_PRVDR
                                IF_LEVEL      = IF_LEVEL
                      changing  CF_SFDAT      = CF_SFDAT ).

***--------------------------------------------------------------------------------------
*** Analyze Output Element
    ME->ANALYZE_OUTPUT( exporting IR_SPVRE_OUTPUT = LR_SPVRE_OUTPUT
                                  IT_SPVRE        = IT_SPVRE
                                  IT_PRVDR        = IT_PRVDR
                                  IF_LEVEL        = IF_LEVEL
                        changing  CF_SFDAT        = CF_SFDAT ).

***--------------------------------------------------------------------------------------
*** Take provided Conversion Steps
    move IT_FASTD_CSTEP to LT_FASTD_CSTEP.

*** Analyze Conversion Element
    ME->ANALYZE_CONV( exporting IR_SPVRE_CONV   = LR_SPVRE_CONV
                                IR_SPVRE_INPUT  = LR_SPVRE_INPUT
                                IT_SPVRE        = IT_SPVRE
                                IT_PRVDR        = IT_PRVDR
                                IS_FASTD_LAINP  = IS_FASTD_LAINP
                      changing  CT_FASTD_CSTEP  = LT_FASTD_CSTEP
                                CF_SFDAT        = CF_SFDAT ).

***--------------------------------------------------------------------------------------
*** Analyze Input Element
    ME->ANALYZE_INPUT( exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                 IT_SPVRE       = IT_SPVRE
                                 IT_PRVDR       = IT_PRVDR
                                 IT_FASTD_CSTEP = LT_FASTD_CSTEP
                                 IS_FASTD_LAINP = IS_FASTD_LAINP
                                 IF_LEVEL       = IF_LEVEL
                       changing  CT_FASTD_INP   = CT_FASTD_INP
                                 CT_FASTD_LAMI  = CT_FASTD_LAMI
                                 CT_SPVRE_FCOMP = CT_SPVRE_FCOMP
                                 CF_SFDAT       = CF_SFDAT ).

  endmethod.
  method GET_FASTD_BY_OUT.

    data: LT_PRVDR       type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO    type ref to ZCL_VCXI_FFSS_PR_FCONO.


    free: ET_FASTD_INP,
          ET_FASTD_LAMI,
          EF_SFDAT.

    check IR_GATE_OUT is bound.

***--------------------------------------------------------------------------------------
*** Get all Provider
    move ME->R_GATE->GET_PRVDR( ) to LT_PRVDR.

*** Get Output Provider to Outbound Gate (FFG or FCONO)
    loop at LT_PRVDR into LR_PRVDR.
      if LR_PRVDR->IS_PARENT( IR_GATE_CHILD = IR_GATE_OUT ) eq ABAP_TRUE.
        move LR_PRVDR to LR_GATE_OUTPUT.
        exit.
      endif.
    endloop.

*** Get Fast Data Information by Output Gate
    ME->GET_FASTD_BY_OUTPUT( exporting IR_GATE_OUTPUT = LR_GATE_OUTPUT
                             importing ET_FASTD_INP   = ET_FASTD_INP
                                       ET_FASTD_LAMI  = ET_FASTD_LAMI
                                       ET_SPVRE_FCOMP = ET_SPVRE_FCOMP
                                       EF_SFDAT       = EF_SFDAT
                                       ES_TRWID       = ES_TRWID
                                       EF_SETBY_TRWID = EF_SETBY_TRWID
                                       EF_FOPSL       = EF_FOPSL  ).

***--------------------------------------------------------------------------------------
*** Get Number of Outs
    if EF_NOOUT       is requested or
       EF_SETBY_NOOUT is requested.
      try.
          move IR_GATE_OUT->R_CLSPR ?to LR_PR_FFG.
          if LR_PR_FFG is bound.
            EF_NOOUT = LR_PR_FFG->GET_NOOUT( importing EF_SETBY = EF_SETBY_NOOUT ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.
      try.
          move IR_GATE_OUT->R_CLSPR ?to LR_PR_FCONO.
          if LR_PR_FCONO is bound.
            EF_NOOUT = LR_PR_FCONO->GET_NOOUT( importing EF_SETBY = EF_SETBY_NOOUT ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONO.
      endtry.
    endif.

  endmethod.
  method GET_FASTD_BY_OUTPUT.

    data: LT_SPVRE      type        /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR      type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_OUTPUT  type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
          LR_GATE_CSTEP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_INP>  type        ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI> type        ZVCXI_FFSS_S_FASTD_LAMI.

    free: ET_FASTD_INP,
          ET_FASTD_LAMI,
          EF_SFDAT.

***--------------------------------------------------------------------------------------
*** Get current Supervised Elements
    move ME->R_GATE->GET_SPVRE( ) to LT_SPVRE.

*** Get all Provider
    move ME->R_GATE->GET_PRVDR( ) to LT_PRVDR.

*** Start as standard Configuration
    move C_SFDAT_STANDARD to EF_SFDAT.

***--------------------------------------------------------------------------------------
*** Get Number of Outs
    if EF_NOOUT       is requested or
       EF_SFDAT       is requested.
      EF_NOOUT = ME->GET_NOOUT_BY_OUTPUT( IR_GATE_OUTPUT = IR_GATE_OUTPUT
                                          IT_PRVDR       = LT_PRVDR ).
    endif.

*** Get Trim on Width
    if ES_TRWID       is requested or
       EF_SETBY_TRWID is requested or
       EF_SFDAT       is requested.
      try.
          move IR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
          if LR_PR_OUTPUT is bound.
            LR_PR_OUTPUT->GET_TRWID( importing ES_TRWID = ES_TRWID
                                               EF_SETBY = EF_SETBY_TRWID ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OUTPUT.
      endtry.
    endif.

*** Optimized Slitting
    if EF_FOPSL is requested.
      try.
          move IR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
          if LR_PR_OUTPUT is bound.
            LR_PR_OUTPUT->GET_FOPSL( importing EF_FOPSL = EF_FOPSL ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OUTPUT.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Get Data using "generic" method
    ME->GET_FASTD( exporting IT_SPVRE       = LT_SPVRE
                             IT_PRVDR       = LT_PRVDR
                             IR_GATE_OUTPUT = IR_GATE_OUTPUT
                             IS_FASTD_LAINP = value ZVCXI_FFSS_S_FASTD_LAINP( LASTP = 0 )
                             IF_LEVEL       = 0
                   changing  CT_FASTD_INP   = ET_FASTD_INP
                             CT_FASTD_LAMI  = ET_FASTD_LAMI
                             CT_SPVRE_FCOMP = ET_SPVRE_FCOMP
                             CF_SFDAT       = EF_SFDAT ).

    if EF_SFDAT is requested and
       ET_FASTD_INP is not initial and
       ET_SPVRE_FCOMP is initial and
       ( EF_NOOUT gt 1 or ES_TRWID-TRWID gt 0 ).
      move C_SFDAT_NONSTANDARD to EF_SFDAT.
    endif.

***--------------------------------------------------------------------------------------
*** Reorganize Lamination Step Number
    ME->REORG_LASTP( changing CT_FASTD_INP  = ET_FASTD_INP
                              CT_FASTD_LAMI = ET_FASTD_LAMI ).

  endmethod.
  method GET_GATE_FFG.

    data: LT_SPVRE        type        /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR        type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR        type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE.

    clear ER_GATE_FFG.

***--------------------------------------------------------------------------------------
*** Get Film Finished Good Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG ).
    read table LT_PRVDR into LR_PRVDR index 1.
    if SY-SUBRC eq 0.
      move LR_PRVDR to ER_GATE_FFG.
    endif.

*** Mark it as non-standard if more than one provider can be found
    if LINES( LT_PRVDR ) gt 1.
      move C_SFDAT_NONSTANDARD to EF_SFDAT.
    else.
      move C_SFDAT_STANDARD to EF_SFDAT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Output Provider to Finished Good
    if ER_GATE_FFG is bound.
      LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT ).
      loop at LT_PRVDR into LR_PRVDR.
        if LR_PRVDR->IS_PARENT( IR_GATE_CHILD = ER_GATE_FFG ) eq ABAP_TRUE.
          move LR_PRVDR to ER_GATE_OUTPUT.
          exit.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** If no Finished Good found -> Create new
    if ER_GATE_FFG is not bound.
***   Get current Supervised Elements
      move ME->R_GATE->GET_SPVRE( ) to LT_SPVRE.

***   Create new Film Component
      ME->ADD_FCOMP( importing ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT
                     changing  CT_SPVRE        = LT_SPVRE ).
***   Create new FFG
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_OUTPUT
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG )
                     changing  CT_SPVRE        = LT_SPVRE ).

***   Set via Supervisor
      ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE ).

***   Try Again
      ME->GET_GATE_FFG( importing ER_GATE_OUTPUT = ER_GATE_OUTPUT
                                  ER_GATE_FFG    = ER_GATE_FFG
                                  EF_SFDAT       = EF_SFDAT ).
    endif.

  endmethod.
  method GET_NOOUT_BY_OUTPUT.

    data: LT_PRVDR    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE.


*** Get all Provider
    if IT_PRVDR is supplied.
      move IT_PRVDR                 to LT_PRVDR.
    else.
      move ME->R_GATE->GET_PRVDR( ) to LT_PRVDR.
    endif.

*** Find Children of Output and collect Number of Outs
    loop at LT_PRVDR into LR_GATE_OUT.
      check IR_GATE_OUTPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE_OUT ) eq ABAP_TRUE.
      case type of LR_GATE_OUT->R_CLSPR.
        when type ZCL_VCXI_FFSS_PR_FFG.
          RF_NOOUT += cast ZCL_VCXI_FFSS_PR_FFG( LR_GATE_OUT->R_CLSPR )->GET_NOOUT( ).
        when type ZCL_VCXI_FFSS_PR_FCONO.
          RF_NOOUT += cast ZCL_VCXI_FFSS_PR_FCONO( LR_GATE_OUT->R_CLSPR )->GET_NOOUT( ).
      endcase.
    endloop.

  endmethod.
  method PREPARE_XCON.

    data: LF_POSID        type        /VCXI/VKSR_POSID.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE        type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_XCON_SPVRE>     type        YS_XCON_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Output of FROM Film Component
    ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = IR_SPVRE_FCOMP_FROM
                                 IT_SPVRE        = CT_SPVRE
                       importing ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT ).

*** Add Connection Out Elements
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_OUTPUT
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCONO=>C_IPRVT_FF_FCONO )
                   importing ER_SPVRE        = ER_SPVRE_XCONO
                   changing  CT_SPVRE        = CT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Get Input of TO Film Component
    ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP = IR_SPVRE_FCOMP_TO
                                 IT_SPVRE       = CT_SPVRE
                       importing ER_SPVRE_INPUT = LR_SPVRE_INPUT ).

*** Add Connection In Elements
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_INPUT
                             IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCONI=>C_IPRVT_FF_FCONI )
                   importing ER_SPVRE        = ER_SPVRE_XCONI
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Identify Position
    if IS_FASTD_LAINP is supplied.
      move IS_FASTD_LAINP-LAPOS to LF_POSID.
    else.
      loop at CT_SPVRE into LR_SPVRE
                       where TABLE_LINE->R_PARENT eq LR_SPVRE_INPUT.
        check LR_SPVRE->GET_ID( ) eq ER_SPVRE_XCONI->GET_ID( ).
        add 10 to LF_POSID.
      endloop.
    endif.
    ER_SPVRE_XCONI->SET_POSID( IF_POSID = LF_POSID ).

*** Set Reduction on Width
    if IS_FASTD_LAINP is supplied.
      clear LS_PARAM.
      LS_PARAM-PARID = ZCL_VCXI_FFSS_PR_FCONI=>C_PARID_REDUW.
      LS_PARAM-PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC.
      LS_PARAM-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      LS_PARAM-ATFLV = IS_FASTD_LAINP-S_REDUW-REDUW.
      LS_PARAM-UNIT  = IS_FASTD_LAINP-S_REDUW-REDUW_UOM.
      ER_SPVRE_XCONI->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

***--------------------------------------------------------------------------------------
*** Add Connection between Connection Out and Connection In
    append initial line to CT_XCON_SPVRE assigning <S_XCON_SPVRE>.
    move ER_SPVRE_XCONO to <S_XCON_SPVRE>-R_SPVRE_XCONO.
    move ER_SPVRE_XCONI to <S_XCON_SPVRE>-R_SPVRE_XCONI.

  endmethod.
  method REMOVE_OLD_SPVRE.

    data: LR_SPVRE_INPUT     type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV      type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE           type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove old Film Components from List
    loop at IT_SPVRE_FCOMP into LR_SPVRE.
      delete CT_SPVRE where TABLE_LINE->F_GATKY eq LR_SPVRE->F_GATKY.
    endloop.

*** Get Input and Conversion
    ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = IR_SPVRE_FCOMP
                                 IT_SPVRE        = CT_SPVRE
                       importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT
                                 ER_SPVRE_CONV   = LR_SPVRE_CONV ).

*** Remove all old Ins
    loop at CT_SPVRE into LR_SPVRE
                    where ( TABLE_LINE->R_PARENT eq LR_SPVRE_INPUT or
                            TABLE_LINE->R_PARENT eq LR_SPVRE_CONV )
                     and  TABLE_LINE->F_GATKY  is not initial.
      delete CT_SPVRE.
    endloop.

  endmethod.
  method REORG_LASTP.

    data:          LS_FASTD_LAMI  type        ZVCXI_FFSS_S_FASTD_LAMI.
    data:          LF_LASTP_OLD   type        ZVCXI_FFS_LASTP,
                   LF_LASTP_NEW   type        ZVCXI_FFS_LASTP.
    field-symbols: <S_FASTD_INP>  type        ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI> type        ZVCXI_FFSS_S_FASTD_LAMI.

***--------------------------------------------------------------------------------------
*** Sort Result
    sort CT_FASTD_LAMI by LASTP.

***--------------------------------------------------------------------------------------
*** Adjust Lamination Counter
    loop at CT_FASTD_LAMI into LS_FASTD_LAMI.
      move LS_FASTD_LAMI-LASTP to LF_LASTP_OLD.
      add 1 to LF_LASTP_NEW.

***   Correct Lamination Step Counter in Input
      loop at CT_FASTD_INP assigning <S_FASTD_INP>
                           where S_FASTD_LAINP-LASTP eq LF_LASTP_OLD.
        move LF_LASTP_NEW to <S_FASTD_INP>-S_FASTD_LAINP-LASTP.
      endloop.

***   Correct Lamination Step Counter in Lamination as Next
      loop at CT_FASTD_LAMI assigning <S_FASTD_LAMI>
                            where S_FASTD_LAINP-LASTP eq LF_LASTP_OLD.
        move LF_LASTP_NEW to <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP.
      endloop.

***   Correct Lamination Step Counter in Lamination as Counter
      loop at CT_FASTD_LAMI assigning <S_FASTD_LAMI>
                            where LASTP eq LF_LASTP_OLD.
        move LF_LASTP_NEW to <S_FASTD_LAMI>-LASTP.
      endloop.
    endloop.

  endmethod.
  method SET_FASTD.

    data: LF_INDEX           type        I.
    data: LS_FASTD_INP   type        ZVCXI_FFSS_S_FASTD_INP,
          LS_FASTD_LAMI  type        ZVCXI_FFSS_S_FASTD_LAMI,
          LS_FASTD_CSTEP type        ZVCXI_FFSS_S_FASTD_CSTEP,
          LS_BUFFER      type        YS_BUFFER.
    data: LT_BUFFER_INP  type        YT_BUFFER,
          LT_BUFFER_LAMI type        YT_BUFFER.
    data: LR_SPVRE_FCOMP_OUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_FCOMP_IN  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT     type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_XCONI     type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_BUFFER>         type        YS_BUFFER.

    check IR_SPVRE_FCOMP is bound.

***--------------------------------------------------------------------------------------
*** Add Films for stand-alone Input
    loop at IT_FASTD_INP into LS_FASTD_INP.
      move SY-TABIX to LF_INDEX.
      append initial line to LT_BUFFER_INP assigning <S_BUFFER>.
      move LF_INDEX to <S_BUFFER>-TABIX.

***--------------------------------------------------------------------------------------
***   Define Film Component for Input Film
      if LINES( IT_FASTD_INP ) gt 1.
***     Add Film Component
        ME->ADD_FCOMP( importing ER_SPVRE_FCOMP = <S_BUFFER>-R_SPVRE_FCOMP_IN
                       changing  CT_SPVRE       = CT_SPVRE ).
      else.
***     Use provided Film Component
        move IR_SPVRE_FCOMP to <S_BUFFER>-R_SPVRE_FCOMP_IN.
      endif.
      move <S_BUFFER>-R_SPVRE_FCOMP_IN to <S_BUFFER>-R_SPVRE_FCOMP_OUT.

***--------------------------------------------------------------------------------------
***   Add Conversion Steps
      ME->ADD_CSTEP( exporting IT_FASTD_CSTEP    = LS_FASTD_INP-T_FASTD_CSTEP
                     changing  CR_SPVRE_FCOMP_IN = <S_BUFFER>-R_SPVRE_FCOMP_IN
                               CT_SPVRE          = CT_SPVRE
                               CT_XCON_SPVRE     = CT_XCON_SPVRE ).

***--------------------------------------------------------------------------------------
***   Analyze Film Component
      ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = <S_BUFFER>-R_SPVRE_FCOMP_IN
                                   IT_SPVRE        = CT_SPVRE
                         importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT ).

***   Add Input Films
      case LS_FASTD_INP-TINPU.
        when C_TINPU_EXTR.
***       Add Extrusion
          ME->ADD_EXTR( exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                  IT_GATE_INP    = LS_FASTD_INP-T_GATE_INP
                        changing  CT_SPVRE       = CT_SPVRE ).
        when C_TINPU_FPROC.
****      Add Procurement
          ME->ADD_MS_FPROC( exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                      IT_GATE_INP    = LS_FASTD_INP-T_GATE_INP
                            changing  CT_SPVRE       = CT_SPVRE ).
        when C_TINPU_EMAT.
****      Add Estimation Material
          ME->ADD_MS_EMAT(  exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                      IT_GATE_INP    = LS_FASTD_INP-T_GATE_INP
                            changing  CT_SPVRE       = CT_SPVRE ).
      endcase.

    endloop.



***--------------------------------------------------------------------------------------
*** Add Film Components for for Laminations
    loop at IT_FASTD_LAMI into LS_FASTD_LAMI.
***   Add Buffer Entry
      move SY-TABIX to LF_INDEX.
      append initial line to LT_BUFFER_LAMI assigning <S_BUFFER>.
      move LS_FASTD_LAMI-LASTP to <S_BUFFER>-TABIX.

***--------------------------------------------------------------------------------------
***   Define Film Component for Lamination Film
      if LF_INDEX ne LINES( IT_FASTD_LAMI ).
***     Add Film Component
        ME->ADD_FCOMP( importing ER_SPVRE_FCOMP = <S_BUFFER>-R_SPVRE_FCOMP_IN
                       changing  CT_SPVRE       = CT_SPVRE ).
      else.
***     Use Provided Film Component
        move IR_SPVRE_FCOMP to <S_BUFFER>-R_SPVRE_FCOMP_IN.
      endif.
      move <S_BUFFER>-R_SPVRE_FCOMP_IN to <S_BUFFER>-R_SPVRE_FCOMP_OUT.

***--------------------------------------------------------------------------------------
***   Add Conversion Steps
      ME->ADD_CSTEP( exporting IT_FASTD_CSTEP     = LS_FASTD_LAMI-T_FASTD_CSTEP
                     changing  CR_SPVRE_FCOMP_IN  = <S_BUFFER>-R_SPVRE_FCOMP_IN
                               CT_SPVRE           = CT_SPVRE
                               CT_XCON_SPVRE      = CT_XCON_SPVRE ).

***--------------------------------------------------------------------------------------
***   Analyze Film Component
      ME->ANALYZE_FCOMP( exporting IR_SPVRE_FCOMP  = <S_BUFFER>-R_SPVRE_FCOMP_IN
                                   IT_SPVRE        = CT_SPVRE
                         importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT ).

***   Add Glue
      ME->ADD_MS_GLUE( exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                 IT_GATE_INP    = LS_FASTD_LAMI-T_GATE_INP
                       changing  CT_SPVRE       = CT_SPVRE ).

    endloop.



***--------------------------------------------------------------------------------------
*** Prepare connections between Laminations
    loop at LT_BUFFER_LAMI into LS_BUFFER.
***   Use OUT of current
      move LS_BUFFER-R_SPVRE_FCOMP_OUT to LR_SPVRE_FCOMP_OUT.

***   Find IN next Film
      read table IT_FASTD_LAMI into LS_FASTD_LAMI ##WARN_OK
                               with key LASTP = LS_BUFFER-TABIX.
      check LS_FASTD_LAMI-S_FASTD_LAINP-LASTP is not initial.
      read table LT_BUFFER_LAMI into LS_BUFFER with key TABIX = LS_FASTD_LAMI-S_FASTD_LAINP-LASTP.
      check SY-SUBRC eq 0.
      move LS_BUFFER-R_SPVRE_FCOMP_IN to LR_SPVRE_FCOMP_IN.

***   Create Connection
      ME->PREPARE_XCON( exporting IR_SPVRE_FCOMP_FROM = LR_SPVRE_FCOMP_OUT
                                  IR_SPVRE_FCOMP_TO   = LR_SPVRE_FCOMP_IN
                                  IS_FASTD_LAINP      = LS_FASTD_LAMI-S_FASTD_LAINP
                        importing ER_SPVRE_XCONI      = LR_SPVRE_XCONI
                        changing  CT_SPVRE            = CT_SPVRE
                                  CT_XCON_SPVRE       = CT_XCON_SPVRE ).

***   Add Inbound Conversion Steps
      loop at LS_FASTD_LAMI-T_FASTD_CSTEP into LS_FASTD_CSTEP
                                         where FIBCS eq ABAP_TRUE.
        if LS_FASTD_CSTEP-R_GATE is bound.
***       Copy based on existing Gate
          ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LS_FASTD_CSTEP-R_GATE
                                           IR_SPVRE_PARENT  = LR_SPVRE_XCONI
                                           IF_COPY_CHILDREN = ABAP_TRUE
                                 changing  CT_SPVRE         = CT_SPVRE ).
        else.
***       Add Conversion Step based on ID
          ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCONI
                                   IF_ID           = LS_FASTD_CSTEP-ICSTP
                         changing  CT_SPVRE        = CT_SPVRE ).
        endif.
      endloop.

    endloop.

***--------------------------------------------------------------------------------------
*** Assign Inputs
    if LINES( IT_FASTD_INP ) gt 1.
      loop at IT_FASTD_INP into LS_FASTD_INP.
        move SY-TABIX to LF_INDEX.

***     Input has own Film
        read table LT_BUFFER_INP into LS_BUFFER with key TABIX = LF_INDEX.
        check SY-SUBRC eq 0.
        move LS_BUFFER-R_SPVRE_FCOMP_OUT to LR_SPVRE_FCOMP_OUT.

***     Get Film Component of Lamination
        read table LT_BUFFER_LAMI into LS_BUFFER with key TABIX = LS_FASTD_INP-S_FASTD_LAINP-LASTP.
        check SY-SUBRC eq 0.
        move LS_BUFFER-R_SPVRE_FCOMP_IN to LR_SPVRE_FCOMP_IN.

***     Create Connection
        ME->PREPARE_XCON( exporting IR_SPVRE_FCOMP_FROM = LR_SPVRE_FCOMP_OUT
                                    IR_SPVRE_FCOMP_TO   = LR_SPVRE_FCOMP_IN
                                    IS_FASTD_LAINP      = LS_FASTD_INP-S_FASTD_LAINP
                          importing ER_SPVRE_XCONI      = LR_SPVRE_XCONI
                          changing  CT_SPVRE            = CT_SPVRE
                                    CT_XCON_SPVRE       = CT_XCON_SPVRE ).
***     Add Inbound Conversion Steps
        loop at LS_FASTD_INP-T_FASTD_CSTEP into LS_FASTD_CSTEP
                                           where FIBCS eq ABAP_TRUE.
          if LS_FASTD_CSTEP-R_GATE is bound.
***       Copy based on existing Gate
            ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LS_FASTD_CSTEP-R_GATE
                                             IR_SPVRE_PARENT  = LR_SPVRE_XCONI
                                             IF_COPY_CHILDREN = ABAP_TRUE
                                   changing  CT_SPVRE         = CT_SPVRE ).
          else.
***       Add Conversion Step based on ID
            ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCONI
                                     IF_ID           = LS_FASTD_CSTEP-ICSTP
                           changing  CT_SPVRE        = CT_SPVRE ).
          endif.
        endloop.

      endloop.
    endif.

  endmethod.
  method SET_FASTD_BY_OUT.

    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LT_SPVRE        type        /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE_OUT    type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE_OUTPUT  type ref to /VCXI/CL_VKSR_GATE.


*** Get current Supervised Elements
    move ME->R_GATE->GET_SPVRE( ) to LT_SPVRE.

***--------------------------------------------------------------------------------------
    if IF_NOOUT is supplied.
***   Get Film Component of Gate Out (FFG/FCONO)
      LR_SPVRE_OUT = ME->GET_SPVRE_BY_GATE( IR_GATE  = IR_GATE_OUT
                                            IT_SPVRE = LT_SPVRE ).

***   Set Number of Outs
      LS_PARAM = LR_SPVRE_OUT->GET_PARAM( IF_PARID = ZCL_VCXI_FFSS_PR_FFG=>C_PARID_NOOUT ).
      move IF_NOOUT       to LS_PARAM-ATFLV.
      move IF_SETBY_NOOUT to LS_PARAM-SETBY.
      LR_SPVRE_OUT->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Output of out (FFG/FCONO)
    LR_GATE_OUTPUT = IR_GATE_OUT->GET_PARENT( ).

*** Set Fast Data Information by Output Gate
    ME->SET_FASTD_BY_OUTPUT( IR_GATE_OUTPUT = LR_GATE_OUTPUT
                             IS_TRWID       = IS_TRWID
                             IF_SETBY_TRWID = IF_SETBY_TRWID
                             IT_FASTD_INP   = IT_FASTD_INP
                             IT_FASTD_LAMI  = IT_FASTD_LAMI
                             IT_SPVRE_FCOMP = IT_SPVRE_FCOMP
                             IT_SPVRE       = LT_SPVRE ).

  endmethod.
  method SET_FASTD_BY_OUTPUT.

    data: LF_NOOUT       type ZVCXI_XCS_NOOUT,
          LF_FOPSL       type ZVCXI_FFS_FOPSL,
          LF_FOPSL_SETBY type /VCXI/VKSR_SETBY.
    data: LS_PARAM       type /VCXI/VKSR_S_PARAM.
    data: LT_SPVRE      type /VCXI/VKSR_TT_SPVRE,
          LT_XCON_SPVRE type YT_XCON_SPVRE.
    data: LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_SPEC   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_FCOMP  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_PR_OUTPUT    type ref to ZCL_VCXI_FFSS_PR_OUTPUT.


***--------------------------------------------------------------------------------------
*** Get current Supervised Elements
    if IT_SPVRE is supplied.
      LT_SPVRE = IT_SPVRE.
    else.
      LT_SPVRE = ME->R_GATE->GET_SPVRE( ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Film Component of Gate Out (Output)
    LR_SPVRE_OUTPUT = ME->GET_SPVRE_BY_GATE( IR_GATE  = IR_GATE_OUTPUT
                                             IT_SPVRE = LT_SPVRE ).
*** Set Trim on Width
    LS_PARAM = LR_SPVRE_OUTPUT->GET_PARAM( IF_PARID = ZCL_VCXI_FFSS_PR_OUTPUT=>C_PARID_TRWID ).
    move IS_TRWID-TRWID     to LS_PARAM-ATFLV.
    move IS_TRWID-TRWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY_TRWID     to LS_PARAM-SETBY.
    LR_SPVRE_OUTPUT->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Get Specification
    move LR_SPVRE_OUTPUT->R_PARENT to LR_SPVRE_SPEC.  "Output -> Specification

*** Get Film Component
    move LR_SPVRE_SPEC->R_PARENT  to LR_SPVRE_FCOMP.  "Specification -> Film Component

***--------------------------------------------------------------------------------------
*** Buffer Optimization Flag (as reset until Connections are recreated)
    try.
        move IR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_OUTPUT.
    endtry.
    if LR_PR_OUTPUT is bound.
      LR_PR_OUTPUT->GET_FOPSL( importing EF_FOPSL = LF_FOPSL
                                         EF_SETBY = LF_FOPSL_SETBY ).
    endif.

***--------------------------------------------------------------------------------------
*** Remove old Runtime Elements (Film Components etc.)
    ME->REMOVE_OLD_SPVRE( exporting IT_SPVRE_FCOMP = IT_SPVRE_FCOMP
                                    IR_SPVRE_FCOMP = LR_SPVRE_FCOMP
                          changing  CT_SPVRE       = LT_SPVRE ).

*** Spilt Slitting from rest, if requested
    if ME->F_FSPCO eq ABAP_TRUE.
      LF_NOOUT = ME->GET_NOOUT_BY_OUTPUT( IR_GATE_OUTPUT = IR_GATE_OUTPUT ).

      if LF_NOOUT       gt 1 or
         IS_TRWID-TRWID gt 0.
        ME->SPLIT_FCOMP( exporting IR_SPVRE_FCOMP        = LR_SPVRE_FCOMP
                         importing ER_SPVRE_FCOMP_BEFORE = LR_SPVRE_FCOMP
                         changing  CT_SPVRE              = LT_SPVRE
                                   CT_XCON_SPVRE         = LT_XCON_SPVRE ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Fast Data Information
    ME->SET_FASTD( exporting IR_SPVRE_FCOMP = LR_SPVRE_FCOMP
                             IT_FASTD_INP   = IT_FASTD_INP
                             IT_FASTD_LAMI  = IT_FASTD_LAMI
                   changing  CT_SPVRE       = LT_SPVRE
                             CT_XCON_SPVRE  = LT_XCON_SPVRE ).

***--------------------------------------------------------------------------------------
*** Set via Supervisor
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE ).

*** Create Connections between Film Components
    ME->CREATE_XCON( IT_XCON_SPVRE = LT_XCON_SPVRE ).

***--------------------------------------------------------------------------------------
*** Reset Optimization Flag once Connections are recreated
    if LR_PR_OUTPUT is bound.
      LR_PR_OUTPUT->SET_FOPSL( IF_FOPSL = LF_FOPSL
                               IF_SETBY = LF_FOPSL_SETBY ).
    endif.

  endmethod.
  method SET_NOFIL.

    data: LF_NOOUT       type        ZVCXI_XCS_NOOUT,
          LF_SETBY_NOOUT type        /VCXI/VKSR_SETBY,
          LF_SETBY_TRWID type        /VCXI/VKSR_SETBY,
          LF_FOPSL       type        ZVCXI_FFS_FOPSL.
    data: LS_TRWID       type        ZVCXI_F0S_S_TRWID.
    data: LT_FASTD_INP   type ZVCXI_FFSS_TT_FASTD_INP,
          LT_FASTD_LAMI  type ZVCXI_FFSS_TT_FASTD_LAMI,
          LT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE.

***--------------------------------------------------------------------------------------
*** Get current Values
    ME->GET_FASTD_BY_OUT( exporting IR_GATE_OUT    = IR_GATE_OUT
                          importing ET_FASTD_INP   = LT_FASTD_INP
                                    ET_FASTD_LAMI  = LT_FASTD_LAMI
                                    ET_SPVRE_FCOMP = LT_SPVRE_FCOMP
                                    EF_NOOUT       = LF_NOOUT
                                    EF_SETBY_NOOUT = LF_SETBY_NOOUT
                                    ES_TRWID       = LS_TRWID
                                    EF_SETBY_TRWID = LF_SETBY_TRWID
                                    EF_FOPSL       = LF_FOPSL ).

***--------------------------------------------------------------------------------------
*** Check Number of Films has changed
    if LINES( LT_FASTD_INP ) ne IF_NOFIL.
      case ME->F_LASTR.
        when C_LASTR_PARALLEL.
          ME->SET_NOFIL_PARALLEL( exporting IF_NOFIL      = IF_NOFIL
                                  changing  CT_FASTD_INP  = LT_FASTD_INP
                                            CT_FASTD_LAMI = LT_FASTD_LAMI ).
        when C_LASTR_SEQUENTIAL.
          ME->SET_NOFIL_SEQUENTIAL( exporting IF_NOFIL      = IF_NOFIL
                                    changing  CT_FASTD_INP  = LT_FASTD_INP
                                              CT_FASTD_LAMI = LT_FASTD_LAMI ).
      endcase.
    endif.

***--------------------------------------------------------------------------------------
    if LF_FOPSL ne ABAP_TRUE.
***   Adjust Number of Outs
      if IF_NOOUT is supplied and
         IF_NOOUT ne LF_NOOUT.
        move IF_NOOUT                         to LF_NOOUT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_USER to LF_SETBY_NOOUT.
      endif.

***   Ajdust Trim on Width
      if IS_TRWID is supplied and
         IS_TRWID ne LS_TRWID.
        move IS_TRWID                         to LS_TRWID.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_USER to LF_SETBY_TRWID.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set new Structure
    ME->SET_FASTD_BY_OUT( exporting IR_GATE_OUT    = IR_GATE_OUT
                                    IF_NOOUT       = LF_NOOUT
                                    IF_SETBY_NOOUT = LF_SETBY_NOOUT
                                    IS_TRWID       = LS_TRWID
                                    IF_SETBY_TRWID = LF_SETBY_TRWID
                                    IT_FASTD_INP   = LT_FASTD_INP
                                    IT_FASTD_LAMI  = LT_FASTD_LAMI
                                    IT_SPVRE_FCOMP = LT_SPVRE_FCOMP ).

  endmethod.
  method SET_NOFIL_PARALLEL.

    data: LF_INDEX type        I,
          LF_LASTP type        ZVCXI_FFS_LASTP,
          LF_LAPOS type        /VCXI/VKSR_POSID.
    data: LS_FASTD_LAMI type ZVCXI_FFSS_S_FASTD_LAMI.
    data: LT_LASTP      type table of ref to ZVCXI_FFS_LASTP,
          LT_LASTP_NEXT type table of ref to ZVCXI_FFS_LASTP.
    data:          LR_LASTP       type ref to ZVCXI_FFS_LASTP.
    field-symbols: <F_LASTP>      type        ZVCXI_FFS_LASTP,
                   <S_FASTD_INP>  type ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI> type ZVCXI_FFSS_S_FASTD_LAMI.

***--------------------------------------------------------------------------------------
*** Remove existing Films
    if LINES( CT_FASTD_INP ) gt IF_NOFIL.
      LF_INDEX = IF_NOFIL + 1.
***   Adjust List of Input
      delete CT_FASTD_INP from LF_INDEX.

*** Add new Extrusion Films
    else.
      LF_INDEX = IF_NOFIL - LINES( CT_FASTD_INP ).
      do LF_INDEX times.
        append initial line to CT_FASTD_INP assigning <S_FASTD_INP>.
        move ME->F_TIDFL to <S_FASTD_INP>-TINPU.
      enddo.
    endif.

***--------------------------------------------------------------------------------------
*** Prepare Input Films for Lamination by collecting References that need a Lamination
    clear LF_LASTP.
    loop at CT_FASTD_INP assigning <S_FASTD_INP>.
***   No Lamination needed
      if LINES( CT_FASTD_INP ) eq 1.
        clear <S_FASTD_INP>-S_FASTD_LAINP-LASTP.
        exit.
      endif.

***   Collect References
      get reference of <S_FASTD_INP>-S_FASTD_LAINP-LASTP into LR_LASTP.
      append LR_LASTP to LT_LASTP.
    endloop.

***--------------------------------------------------------------------------------------
*** Build pair as long as there are more than two that need to be paired up
    clear LF_LASTP.
    do.
***   Process all Films that need to be paired
      loop at LT_LASTP into LR_LASTP.
***     Check if Film is first of a pair
        LF_INDEX = SY-TABIX mod 2.
        if LF_INDEX ne 0.
          if SY-TABIX eq LINES( LT_LASTP ).
***         Forward single film to next round
            append LR_LASTP to LT_LASTP_NEXT.
            exit.
          endif.
***       Define new Lamination
          add 1 to LF_LASTP.
        endif.

***     Assign new Lamination Step to Film
        assign LR_LASTP->* to <F_LASTP>.
        move LF_LASTP to <F_LASTP>.

***     Identify/create Lamination entry according to Lamination Step
        read table CT_FASTD_LAMI assigning <S_FASTD_LAMI> with key LASTP = LF_LASTP.
        if SY-SUBRC ne 0.
          append initial line to CT_FASTD_LAMI assigning <S_FASTD_LAMI>.
          move LF_LASTP to <S_FASTD_LAMI>-LASTP.
        endif.

***     Assign Film resulting of Lamination to next round
        if LF_INDEX ne 0.
          get reference of <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP into LR_LASTP.
          append LR_LASTP to LT_LASTP_NEXT.
        endif.
      endloop.

***   After pairing all films introduce the next round
      move LT_LASTP_NEXT to LT_LASTP.
      free LT_LASTP_NEXT.
      if LINES( LT_LASTP ) lt 2.
        exit.
      endif.
    enddo.

***--------------------------------------------------------------------------------------
*** Remove unneeded Laminations
    delete CT_FASTD_LAMI where LASTP gt LF_LASTP.

***--------------------------------------------------------------------------------------
*** Define Lamination Position
    loop at CT_FASTD_LAMI into LS_FASTD_LAMI.
      clear LF_LAPOS.
      loop at CT_FASTD_LAMI assigning <S_FASTD_LAMI> where S_FASTD_LAINP-LASTP eq LS_FASTD_LAMI-LASTP.
        add 10 to LF_LAPOS.
        move LF_LAPOS to <S_FASTD_LAMI>-S_FASTD_LAINP-LAPOS.
      endloop.
      loop at CT_FASTD_INP assigning <S_FASTD_INP> where S_FASTD_LAINP-LASTP eq LS_FASTD_LAMI-LASTP.
        add 10 to LF_LAPOS.
        move LF_LAPOS to <S_FASTD_INP>-S_FASTD_LAINP-LAPOS.
      endloop.
    endloop.

  endmethod.
  method SET_NOFIL_SEQUENTIAL.

    data: LF_INDEX type        I,
          LF_LASTP type        ZVCXI_FFS_LASTP,
          LF_LAPOS type        /VCXI/VKSR_POSID.
    data: LS_FASTD_LAMI type ZVCXI_FFSS_S_FASTD_LAMI.
    field-symbols: <S_FASTD_INP>  type ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI> type ZVCXI_FFSS_S_FASTD_LAMI.

***--------------------------------------------------------------------------------------
*** Remove existing Films
    if LINES( CT_FASTD_INP ) gt IF_NOFIL.
      LF_INDEX = IF_NOFIL + 1.
***   Adjust List of Input
      delete CT_FASTD_INP from LF_INDEX.

*** Add new Extrusion Films
    else.
      LF_INDEX = IF_NOFIL - LINES( CT_FASTD_INP ).
      do LF_INDEX times.
        append initial line to CT_FASTD_INP assigning <S_FASTD_INP>.
        move ME->F_TIDFL to <S_FASTD_INP>-TINPU.
      enddo.
    endif.

***--------------------------------------------------------------------------------------
*** Define Connections
    clear LF_LASTP.
    loop at CT_FASTD_INP assigning <S_FASTD_INP>.
***   No Lamination needed
      if LINES( CT_FASTD_INP ) eq 1.
        clear <S_FASTD_INP>-S_FASTD_LAINP-LASTP.
***   First 2 on same Lamination Step
      elseif SY-TABIX eq 2.
        move 1 to LF_LASTP.
      else.
        add 1 to LF_LASTP.
      endif.
      move LF_LASTP to <S_FASTD_INP>-S_FASTD_LAINP-LASTP.
    endloop.

*** Adjust Laminations
    delete CT_FASTD_LAMI where LASTP gt LF_LASTP.
    do LF_LASTP times.
***   Connect to next
      if <S_FASTD_LAMI> is assigned.
        move SY-INDEX to <S_FASTD_LAMI>-S_FASTD_LAINP-LASTP.
      endif.

***   Find Lamination
      read table CT_FASTD_LAMI assigning <S_FASTD_LAMI> with key LASTP = SY-INDEX ##WARN_OK.
      if SY-SUBRC ne 0.
        append initial line to CT_FASTD_LAMI assigning <S_FASTD_LAMI>.
        move SY-TABIX to <S_FASTD_LAMI>-LASTP.
      endif.
    enddo.

***--------------------------------------------------------------------------------------
*** Define Lamination Position
    loop at CT_FASTD_LAMI into LS_FASTD_LAMI.
      clear LF_LAPOS.
      loop at CT_FASTD_LAMI assigning <S_FASTD_LAMI> where S_FASTD_LAINP-LASTP eq LS_FASTD_LAMI-LASTP.
        add 10 to LF_LAPOS.
        move LF_LAPOS to <S_FASTD_LAMI>-S_FASTD_LAINP-LAPOS.
      endloop.
      loop at CT_FASTD_INP assigning <S_FASTD_INP> where S_FASTD_LAINP-LASTP eq LS_FASTD_LAMI-LASTP.
        add 10 to LF_LAPOS.
        move LF_LAPOS to <S_FASTD_INP>-S_FASTD_LAINP-LAPOS.
      endloop.
    endloop.

  endmethod.
  method SPLIT_FCOMP.


***--------------------------------------------------------------------------------------
    if ER_SPVRE_FCOMP_BEFORE is requested.
***   Add Film Component
      ME->ADD_FCOMP( importing ER_SPVRE_FCOMP = ER_SPVRE_FCOMP_BEFORE
                     changing  CT_SPVRE       = CT_SPVRE ).

***   Create Connection
      ME->PREPARE_XCON( exporting IR_SPVRE_FCOMP_FROM = ER_SPVRE_FCOMP_BEFORE
                                  IR_SPVRE_FCOMP_TO   = IR_SPVRE_FCOMP
                        changing  CT_SPVRE            = CT_SPVRE
                                  CT_XCON_SPVRE       = CT_XCON_SPVRE ).
    endif.

***--------------------------------------------------------------------------------------
    if ER_SPVRE_FCOMP_AFTER is requested.
***   Add Film Component
      ME->ADD_FCOMP( importing ER_SPVRE_FCOMP = ER_SPVRE_FCOMP_AFTER
                     changing  CT_SPVRE       = CT_SPVRE ).

***   Create Connection
      ME->PREPARE_XCON( exporting IR_SPVRE_FCOMP_FROM = IR_SPVRE_FCOMP
                                  IR_SPVRE_FCOMP_TO   = ER_SPVRE_FCOMP_AFTER
                        changing  CT_SPVRE            = CT_SPVRE
                                  CT_XCON_SPVRE       = CT_XCON_SPVRE ).
    endif.

  endmethod.
