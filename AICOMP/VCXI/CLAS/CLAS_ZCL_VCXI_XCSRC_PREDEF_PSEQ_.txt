
class ZCL_VCXI_XCSRC_PREDEF_PSEQ definition
  public
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .

  data R_PSEQ type ref to /VCXI/CL_VSMC_PSEQ read-only .
  data R_PREDEF_PSEQ type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ read-only .
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE'. "#EC NOTEXT

  methods IS_OPSEQ
    returning
      value(RF_OPSEQ) type /VCXI/VSMC_OPSEQ
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_PSEQ type ref to /VCXI/CL_VSMC_PSEQ
      !IR_PREDEF_PSEQ type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ
    raising
      /VCXI/CX_CKX .
  class-methods GET_PREDEF_PSEQ
    importing
      !IR_PRTE type ref to /VCXI/CL_VSMC_PRTE
      !IR_PREDEF_PSEQ type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ optional
    returning
      value(RT_PREDEF_PSEQ) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL .

  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
private section.

  data F_GPRES type ZVCXI_XCSRC_GPRES .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
endclass. "ZCL_VCXI_XCSRC_PREDEF_PSEQ definition
class ZCL_VCXI_XCSRC_PREDEF_PSEQ implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.

    when ZCL_VCXI_XCSRC_PREDEF_PSEQ=>C_FCODE_SAVE.
      ME->HANDLE_SAVE( ).

  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  move ME->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) to RF_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  move ME->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ) to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GPRES to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( ) to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.

  check IF_GUID is not initial.

  read table ZCL_VCXI_XCSRC_PREDEF_PSEQ=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
*** No longer valid
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.
endmethod.
method CONSTRUCTOR.

  data:          LF_GPSEQ      type        /VCXI/VSMC_GPSEQ,
                 LF_GPPRS      type        ZVCXI_XCSRC_GPRES.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

***------------------------------------------------------------------------------------------------
  move IR_PSEQ        to ME->R_PSEQ.
  move IR_PREDEF_PSEQ to ME->R_PREDEF_PSEQ.

***------------------------------------------------------------------------------------------------
  move ME->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( )          to LF_GPSEQ.
  if ME->R_PREDEF_PSEQ is bound.
    move ME->R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GPPRS.
  endif.

*** Get GUID from DB
  select single GPRES
         into ME->F_GPRES
         from ZVCXI_XCS_TD610
        where GPPRS = LF_GPPRS
         and  GPSEQ = LF_GPSEQ.

  if SY-SUBRC ne 0.
*** Get new GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = ME->F_GPRES.
    move ABAP_TRUE to ME->F_CHANGED.
  endif.

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
  append initial line to ZCL_VCXI_XCSRC_PREDEF_PSEQ=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
  move ME                                  ?to <S_INSTANCE>-R_OBJECT.


endmethod.
method GET_PREDEF_PSEQ.

  data: LS_PSEQL       type        /VCXI/VSMC_S_PSEQL.
  data: LT_PSEQ        type        /VCXI/CKX_TT_OBJECT,
        LT_PREDEF_PSEQ type        /VCXI/CKX_TT_OBJECT.
  data: LR_PSEQ        type ref to /VCXI/CL_VSMC_PSEQ,
        LR_PREDEF_PSEQ type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
        LR_PRTE        type ref to /VCXI/CL_VSMC_PRTE,
        LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

  if IR_PRTE->F_PSEQD ne ABAP_TRUE.
*** Build list of Production Sequences by Sorte Link List
    loop at IR_PRTE->T_PSEQL into LS_PSEQL.
      collect LS_PSEQL-R_PSEQ_PREV into LT_PSEQ.
      collect LS_PSEQL-R_PSEQ_NEXT into LT_PSEQ.
    endloop.
  else.
    LT_PSEQ = IR_PRTE->T_PSEQ.
    /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                        changing  CT_OBJECT     = LT_PSEQ ).
  endif.

*** Create Predefined Production Sequence (deep)
  loop at LT_PSEQ into LR_OBJECT.
    move LR_OBJECT ?to LR_PSEQ.

    create object LR_PREDEF_PSEQ
      exporting
        IR_PSEQ        = LR_PSEQ
        IR_PREDEF_PSEQ = IR_PREDEF_PSEQ.

    append LR_PREDEF_PSEQ to RT_PREDEF_PSEQ.

    case LR_PSEQ->R_OBJECT->F_TOOBJ.
***   Production Step
      when /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP.

***   Production Route
      when /VCXI/CL_VSMC_PRTE=>C_TOOBJ_PRTE.
        move LR_PSEQ->R_OBJECT ?to LR_PRTE.
        LT_PREDEF_PSEQ = ZCL_VCXI_XCSRC_PREDEF_PSEQ=>GET_PREDEF_PSEQ( IR_PRTE        = LR_PRTE
                                                                      IR_PREDEF_PSEQ = LR_PREDEF_PSEQ ).
        append lines of LT_PREDEF_PSEQ to RT_PREDEF_PSEQ.

      when others.
        raise exception type /VCXI/CX_CKX.
    endcase.

  endloop.

endmethod.
method HANDLE_SAVE.

  data:  LF_GPSEQ      type        /VCXI/VSMC_GPSEQ,
         LF_GPPRS      type        ZVCXI_XCSRC_GPRES.

  if ME->F_CHANGED eq ABAP_TRUE.
    move ME->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( )          to LF_GPSEQ.
    if ME->R_PREDEF_PSEQ is bound.
      move ME->R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GPPRS.
    endif.

    call function 'ZVCXI_XCSRC_DB_SAVE_PSEQ'
      in update task
      exporting
        IF_GPRES = ME->F_GPRES
        IF_GPPRS = LF_GPPRS
        IF_GPSEQ = LF_GPSEQ.
  endif.

  if ME->R_PREDEF_PSEQ is bound.
    ME->R_PREDEF_PSEQ->HANDLE_SAVE( ).
  endif.

endmethod.
method IS_OPSEQ.

  check ME->R_PSEQ is bound.

  move ME->R_PSEQ->F_OPSEQ to RF_OPSEQ.

  if RF_OPSEQ eq ABAP_FALSE and
     ME->R_PREDEF_PSEQ is bound.
    RF_OPSEQ = ME->R_PREDEF_PSEQ->IS_OPSEQ( ).
  endif.

endmethod.
