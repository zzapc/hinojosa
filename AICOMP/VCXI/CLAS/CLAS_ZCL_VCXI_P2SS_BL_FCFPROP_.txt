
class ZCL_VCXI_P2SS_BL_FCFPROP definition
  public
  create protected .

public section.

  interfaces ZIF_VCXI_PXSS_PRINT_COM .

  data F_FASLO type ZVCXI_PXS_FASLO read-only .
  data F_PAPGR type ZVCXI_PFSS_PAPGR read-only .
  data F_PRODH type PRODH_D read-only .
  data S_ADDWT type ZVCXI_PXS_S_ADDWT .
  data S_CALIP type ZVCXI_P0SS_S_CALIP read-only .
  data S_GRAMM type ZVCXI_P0SS_S_GRAMM read-only .
  data S_HNDDIM type ZVCXI_PXS_S_HNDDIM read-only .
  data T_JOITY type ZVCXI_PXS_TT_JOITY read-only .
  data T_PRINT type ZVCXI_PXSS_TT_PRINT_COM read-only .

  class-methods DET_GRADI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
    returning
      value(RF_GRADI) type ZVCXI_P2S_GRADI
    raising
      /VCXI/CX_CKX .
  methods DET_PRODH
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_FCFPX type ZVCXI_P2S_FCFPX optional
    returning
      value(RR_BL_FCFPROP) type ref to ZCL_VCXI_P2SS_BL_FCFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_FCFPX
    returning
      value(RF_FCFPX) type ZVCXI_P2S_FCFPX
    raising
      /VCXI/CX_CKX .
  methods GET_TFOLD
    returning
      value(RF_TFOLD) type ZVCXI_P0SS_TFOLD
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_BL_FCFPROP type ref to ZCL_VCXI_P2SS_BL_FCFPROP
    raising
      /VCXI/CX_CKX .
  methods MERGE_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods MERGE_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods MERGE_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods MERGE_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods SET_FASLO
    importing
      !IF_FASLO type ZVCXI_PXS_FASLO
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods SET_FCFPX
    importing
      !IF_FCFPX type ZVCXI_P2S_FCFPX
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IT_JOITY type ZVCXI_PXS_TT_JOITY
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT
    importing
      !IT_PRINT type ZVCXI_PXSS_TT_PRINT_COM
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods APPLY_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
protected section.

  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_BL_FCFPROP definition
class ZCL_VCXI_P2SS_BL_FCFPROP implementation.
  method APPLY_NOUTT.

    check IF_NOUTT ne 0.

*** Consider Outs in Additional Weight
    ME->SET_ADDWT( IS_ADDWT = value #( ADDWT     = ME->S_ADDWT-ADDWT / IF_NOUTT
                                       ADDWT_UOM = ME->S_ADDWT-ADDWT_UOM ) ).

  endmethod.
  method DET_GRADI.

    check IS_SHTWI-SHTWI is not initial and
          IS_SHTLE-SHTLE is not initial.


    if IS_SHTWI-SHTWI le IS_SHTLE-SHTLE.
      RF_GRADI = 'LG'.
    else.
      RF_GRADI = 'SG'.
    endif.

  endmethod.
  method DET_PRODH.

    data: LS_PRODHS type PRODHS.


    check IR_GATE          is bound and
          IR_GATE->R_CLSPR is bound.

*** Convert previous Production Hierarchy to Structure
    LS_PRODHS = ME->F_PRODH.

*** Determine adjusted Hierarchy based on provided Gate (e.g. CStep)
ENHANCEMENT-SECTION DET_PRODH SPOTS ZVCXI_P2SS_ES_BL_FCFPROP .
*    case type of IR_GATE->R_CLSPR.
*      when type ZCL_VCXI_P2SS_PR_CSTEP_PRINT into data(LR_PR_CSTEP_PRINT).
*        "Custom-Specific
*    endcase.
END-ENHANCEMENT-SECTION.

*** Return Production Hierarchy based on Structure
    RF_PRODH = LS_PRODHS.

  endmethod.
  method FACTORY.

*** Create BL Reference
ENHANCEMENT-SECTION FACTORY SPOTS ZVCXI_P2SS_ES_BL_FCFPROP .
    create object RR_BL_FCFPROP.
end-enhancement-section.

*** Set Folding Carton Forward Property XML
    RR_BL_FCFPROP->SET_FCFPX( IF_FCFPX = IF_FCFPX ).

  endmethod.
  method GET_FCFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_FCFPX.

  endmethod.
  method GET_TFOLD.

    data: LF_JOITY type ZVCXI_P0S_JOITY.

    loop at ME->T_JOITY into LF_JOITY.
      RF_TFOLD = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_TFOLD( IF_JOITY = LF_JOITY ).
      if RF_TFOLD eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'F_PAPGR'   VALUE = ref #( ME->F_PAPGR  ) )
                       ( NAME = 'S_GRAMM'   VALUE = ref #( ME->S_GRAMM  ) )
                       ( NAME = 'S_ADDWT'   VALUE = ref #( ME->S_ADDWT  ) )
                       ( NAME = 'S_CALIP'   VALUE = ref #( ME->S_CALIP  ) )
                       ( NAME = 'S_HNDDIM'  VALUE = ref #( ME->S_HNDDIM ) )
                       ( NAME = 'T_JOITY'   VALUE = ref #( ME->T_JOITY  ) )
                       ( NAME = 'T_PRINT'   VALUE = ref #( ME->T_PRINT  ) )
                       ( NAME = 'F_PRODH'   VALUE = ref #( ME->F_PRODH  ) )
                     ).

  endmethod.
  method MERGE.

    check IR_BL_FCFPROP is bound.

*** Paper Grade and Grammage
    ME->SET_PAPGR( IF_PAPGR = IR_BL_FCFPROP->F_PAPGR ).
    ME->SET_GRAMM( IS_GRAMM = IR_BL_FCFPROP->S_GRAMM ).

*** Additional Weight
    ME->MERGE_ADDWT( IS_ADDWT = IR_BL_FCFPROP->S_ADDWT ).

*** Caliper
    ME->MERGE_CALIP( IS_CALIP = IR_BL_FCFPROP->S_CALIP ).

*** Slot Activity
    ME->SET_FASLO( IF_FASLO = IR_BL_FCFPROP->F_FASLO ).

*** Handling Dimension and Joint Types
    ME->MERGE_HNDDIM( IS_HNDDIM = IR_BL_FCFPROP->S_HNDDIM ).
    ME->SET_JOITY( IT_JOITY = IR_BL_FCFPROP->T_JOITY ).

*** Print Information
    ME->SET_PRINT( IT_PRINT = IR_BL_FCFPROP->T_PRINT ).

*** Product Hierarchy
    ME->MERGE_PRODH( IF_PRODH = IR_BL_FCFPROP->F_PRODH ).

  endmethod.
  method MERGE_ADDWT.

    data: LS_ADDWT type ZVCXI_PXS_S_ADDWT.


    check IS_ADDWT is not initial.

***----------------------------------------------------------------------------
    if ME->S_ADDWT is not initial.
***   Summarize Additional Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_ADDWT-ADDWT
                                                          IF_CALCV_UOM_1 = ME->S_ADDWT-ADDWT_UOM
                                                          IF_CALCV_2     = IS_ADDWT-ADDWT
                                                          IF_CALCV_UOM_2 = IS_ADDWT-ADDWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_ADDWT-ADDWT_UOM
                                                importing EF_CALCV       = LS_ADDWT-ADDWT
                                                          EF_CALCV_UOM   = LS_ADDWT-ADDWT_UOM ).
    else.
***   Use provided Additional Weight
      LS_ADDWT = IS_ADDWT.
    endif.

***----------------------------------------------------------------------------
*** Set new Additional Weight
    ME->SET_ADDWT( IS_ADDWT = LS_ADDWT ).

  endmethod.
  method MERGE_CALIP.

    data: LS_CALIP type ZVCXI_P0SS_S_CALIP.


    check IS_CALIP is not initial.

***----------------------------------------------------------------------------
    if ME->S_CALIP is not initial.
***   Summarize Caliper
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_CALIP-CALIP
                                                          IF_CALCV_UOM_1 = ME->S_CALIP-CALIP_UOM
                                                          IF_CALCV_2     = IS_CALIP-CALIP
                                                          IF_CALCV_UOM_2 = IS_CALIP-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_CALIP-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP-CALIP_UOM ).
    else.
***   Use provided Caliper
      LS_CALIP = IS_CALIP.
    endif.

***----------------------------------------------------------------------------
*** Set new Caliper
    ME->SET_CALIP( IS_CALIP = LS_CALIP ).

  endmethod.
  method MERGE_HNDDIM.

    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.


    check IS_HNDDIM is not initial.

***----------------------------------------------------------------------------
    if ME->S_HNDDIM is not initial.
***   Use lager Length
      if ME->S_HNDDIM-S_HNDLE is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = ME->S_HNDDIM-HNDLE
                                                      IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDLE_UOM
                                                      IF_CALCV_2     = IS_HNDDIM-HNDLE
                                                      IF_CALCV_UOM_2 = IS_HNDDIM-HNDLE_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        LS_HNDDIM-S_HNDLE = ME->S_HNDDIM-S_HNDLE.
      else.
        LS_HNDDIM-S_HNDLE = IS_HNDDIM-S_HNDLE.
      endif.

***   Use lager Width
      if ME->S_HNDDIM-S_HNDWI is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = ME->S_HNDDIM-HNDWI
                                                      IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDWI_UOM
                                                      IF_CALCV_2     = IS_HNDDIM-HNDWI
                                                      IF_CALCV_UOM_2 = IS_HNDDIM-HNDWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        LS_HNDDIM-S_HNDWI = ME->S_HNDDIM-S_HNDWI.
      else.
        LS_HNDDIM-S_HNDWI = IS_HNDDIM-S_HNDWI.
      endif.

***   Summarize Height
      if IS_HNDDIM-HNDHE_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_HNDDIM-HNDHE
                                                            IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDHE_UOM
                                                            IF_CALCV_2     = IS_HNDDIM-HNDHE
                                                            IF_CALCV_UOM_2 = IS_HNDDIM-HNDHE_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ME->S_HNDDIM-HNDHE_UOM
                                                  importing EF_CALCV       = LS_HNDDIM-HNDHE
                                                            EF_CALCV_UOM   = LS_HNDDIM-HNDHE_UOM ).
      endif.
    else.
***   Use provided Handling Dimension
      LS_HNDDIM = IS_HNDDIM.
    endif.

***----------------------------------------------------------------------------
*** Set new Handling Dimension
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method MERGE_PRODH.

    data: LF_PRODH type PRODH_D.


    check IF_PRODH is not initial.

***----------------------------------------------------------------------------
    if ME->F_PRODH is not initial.
***   Summarize Product Hierarchy
ENHANCEMENT-SECTION MERGE_PRODH SPOTS ZVCXI_P2SS_ES_BL_FCFPROP .
      LF_PRODH = ME->F_PRODH.
END-ENHANCEMENT-SECTION.
    else.
***   Use provided Product Hierarchy
      LF_PRODH = IF_PRODH.
    endif.

***----------------------------------------------------------------------------
*** Set new Product Hierarchy
    ME->SET_PRODH( IF_PRODH = LF_PRODH ).

  endmethod.
  method SET_ADDWT.

    move IS_ADDWT to ME->S_ADDWT.

  endmethod.
  method SET_CALIP.

    move IS_CALIP to ME->S_CALIP.

  endmethod.
  method SET_FASLO.

    ME->F_FASLO = IF_FASLO.

  endmethod.
  method SET_FCFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_FCFPX is not initial.

***   Get Data References for XML Serialize/Deserialize
      LT_DATA = ME->GET_XML_DREF( ).

***   Open XML
      call transformation ID
           source xml IF_FCFPX
           result (LT_DATA).

    endif.

  endmethod.
  method SET_GRAMM.

    move IS_GRAMM to ME->S_GRAMM.

  endmethod.
  method SET_HNDDIM.

    move IS_HNDDIM to ME->S_HNDDIM.

  endmethod.
  method SET_JOITY.

    ME->T_JOITY = IT_JOITY.

  endmethod.
  method SET_PAPGR.

    move IF_PAPGR to ME->F_PAPGR.

  endmethod.
  method SET_PRINT.

    ME->T_PRINT = IT_PRINT.

  endmethod.
  method SET_PRODH.

    ME->F_PRODH = IF_PRODH.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    RT_PRINT_COM = ME->T_PRINT.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = ABAP_FALSE.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    ME->T_PRINT = IT_PRINT_COM.

  endmethod.
