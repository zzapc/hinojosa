
class ZCL_VCXI_XCA_MWB_UIFW definition
  public
  create protected .

public section.

  constants C_UC_CSNEXT type SYUCOMM value 'CSNEXT' ##NO_TEXT.
  constants C_UC_CSPREV type SYUCOMM value 'CSPREV' ##NO_TEXT.
  constants C_UC_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UC_SAVE type SYUCOMM value 'SAVE' ##NO_TEXT.
  constants C_UC_CREATE type SYUCOMM value 'CREATE' ##NO_TEXT.
  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  constants C_UC_OPEN_SVC type SYUCOMM value 'OPEN_SVC' ##NO_TEXT.
  constants C_UC_MAINT_TMPL type SYUCOMM value 'MAINT_TMPL' ##NO_TEXT.
  constants C_UC_FULLSCREEN type SYUCOMM value 'FULLSCREEN' ##NO_TEXT.
  constants C_UC_REFRESH type SYUCOMM value 'REFRESH' ##NO_TEXT.
  constants C_UC_COPY type SYUCOMM value 'COPY' ##NO_TEXT.

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_CLDUI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY .
  methods HANDLE_UC_REFRESH
    raising
      /VCXI/CX_CKX .
  methods OPEN_NEW_DUI
    importing
      value(IR_CLMAT) type ref to ZCL_VCXI_XCA_MWB_CLMAT
    raising
      /VCXI/CX_CKX .
  methods REGISTER_CLDUI
    importing
      !IR_CLDUI type ref to ZCL_VCXI_XCA_MWB_CLDUI
    raising
      /VCXI/CX_CKX .
  class-methods START_UI
    importing
      !IR_CLQRY type ref to ZCL_VCXI_XCA_MWB_CLQRY
      !IF_GREGE type /VCXI/CKR_GREGE
      !IF_FULLSCREEN type ABAP_BOOL default ABAP_FALSE
      !IR_CLMAT type ref to ZCL_VCXI_XCA_MWB_CLMAT optional
    raising
      /VCXI/CX_CKX .
  methods UNREGISTER_CLDUI
    importing
      !IR_CLDUI type ref to ZCL_VCXI_XCA_MWB_CLDUI
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_NODE,
      NODEKEY  type TV_NODEKEY,
      RELATKEY type TV_NODEKEY,
      MATNR    type MATNR,
      ID       type /VCXI/CKX_ID,
      DESCR    type /VCXI/CKX_DESCR,
      T_CLMAT  type table of ref to ZCL_VCXI_XCA_MWB_CLMAT with default key,
    end   of YS_NODE .
  types:
    YT_NODE type standard table of YS_NODE with default key .

  constants C_COLUMN_DESCR type TV_ITMNAME value 'DESCR' ##NO_TEXT.
  constants C_COLUMN_ID type TV_ITMNAME value 'ID' ##NO_TEXT.
  data F_REFRESH_REQ type ABAP_BOOL .
  data R_CLQRY type ref to ZCL_VCXI_XCA_MWB_CLQRY .
  data R_DOCNT type ref to CL_GUI_DOCKING_CONTAINER .
  data R_TREE type ref to CL_GUI_COLUMN_TREE .
  data T_NODE type YT_NODE .
  data R_REGMDL type ref to ZCL_VCXI_XCA_MWB_REGMDL .
  data T_CSNEXT type /VCXI/CKX_TT_OBJECT .
  data T_CSPREV type /VCXI/CKX_TT_OBJECT .
  data F_DOCNT_VISIBLE type ABAP_BOOL .

  methods HANDLE_CLMAT_FREED
    for event FREED of ZCL_VCXI_XCA_MWB_CLMAT
    importing
      !SENDER .
  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_CLQRY type ref to ZCL_VCXI_XCA_MWB_CLQRY
      !IF_GREGE type /VCXI/CKR_GREGE
    raising
      /VCXI/CX_CKX .
  methods GET_CLMAT_BY_NODEKEY
    importing
      !IF_NODEKEY type TV_NODEKEY
    returning
      value(RR_CLMAT) type ref to ZCL_VCXI_XCA_MWB_CLMAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_GUI_COLUMN_TREE
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_GUI_COLUMN_TREE
    importing
      !NODE_KEY .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CREATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSNEXT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSPREV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FULLSCREEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MAINT_TMPL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods INIT_DOCNT
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods OPEN_DUI
    importing
      !IR_UIFW type ref to ZCL_VCXI_XCA_MWB_UIFW
      !IR_CLMAT type ref to ZCL_VCXI_XCA_MWB_CLMAT
    returning
      value(RR_CLDUI) type ref to ZCL_VCXI_XCA_MWB_CLDUI
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_T_NODE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
private section.

  data F_SELECTED_NODEKEY type TV_NODEKEY .
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .
  data R_CLDUI type ref to ZCL_VCXI_XCA_MWB_CLDUI .
endclass. "ZCL_VCXI_XCA_MWB_UIFW definition
class ZCL_VCXI_XCA_MWB_UIFW implementation.
  method CHECK_FOR_CHANGES.

    data: LF_ANSWER type C.


    check ME->R_CLDUI is bound and
          ME->R_CLDUI->R_CLMAT is bound and
          ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

*** If Changes are allowed
    if ME->R_CLDUI->R_CLMAT->F_CHANGED eq ABAP_TRUE.
***   Confirm data loss
      call function 'POPUP_TO_CONFIRM'
        exporting
          TEXT_QUESTION  = text-Q01
          POPUP_TYPE     = 'ICON_MESSAGE_WARNING'
        importing
          ANSWER         = LF_ANSWER
        exceptions
          TEXT_NOT_FOUND = 1
          others         = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      case LF_ANSWER.
        when '1'.
***       Save and than go on
          ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCA_MWB_CLMAT=>C_FC_SAVE ).
          move ABAP_FALSE to RF_CANCELED.
        when '2'.
***       Do nothing but go on
          move ABAP_FALSE to RF_CANCELED.
        when 'A'.
***       Cancel
          move ABAP_TRUE to RF_CANCELED.
      endcase.
    endif.

  endmethod.
  method CONSTRUCTOR.

    move IR_CLQRY to ME->R_CLQRY.

    try.
        ME->R_REGMDL ?= ZCL_VCXI_XCA_MWB_REGMDL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( IF_GREGE ) ).
      catch CX_SY_MOVE_CAST_ERROR.
***     Registry Element GUID is not compatible with the Workbench Model.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = 'ZVCXI_XCA_MWB'
            F_MSGNO = '030'.
    endtry.

    set handler ME->HANDLE_CLMAT_FREED for all instances.

  endmethod.
  method DO_PBO.

*** Refresh Tree
    ME->REFRESH_TREE( ).

*** Set PF-Status
    ME->SET_PFSTATUS( ).

*** Set Title
    ME->SET_TITLE( ).

  endmethod.
  method DO_USER_COMMAND.

*** Handling the user command in the Detail UI
    if ME->R_CLDUI is bound.
      ME->R_CLDUI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
    endif.

*** Handling the user command of the UI Framework
    case CF_UCOMM.
      when C_UC_BACK.
        ME->HANDLE_UC_BACK( ).
      when C_UC_EXIT.
        ME->HANDLE_UC_EXIT( ).
      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).
      when C_UC_CSNEXT.
        ME->HANDLE_UC_CSNEXT( ).
      when C_UC_CSPREV.
        ME->HANDLE_UC_CSPREV( ).
      when C_UC_REFRESH.
        ME->HANDLE_UC_REFRESH( ).
      when C_UC_TOGGLE.
        ME->HANDLE_UC_TOGGLE( ).
      when C_UC_CREATE.
        ME->HANDLE_UC_CREATE( ).
      when C_UC_FULLSCREEN.
        ME->HANDLE_UC_FULLSCREEN( ).
      when C_UC_MAINT_TMPL.
        ME->HANDLE_UC_MAINT_TMPL( ).
      when C_UC_COPY.
        ME->HANDLE_UC_COPY( ).

      when C_UC_SAVE.
***     Perform Refresh after Save
        ME->HANDLE_UC_REFRESH( ).
    endcase.

    clear CF_UCOMM.

  endmethod.
  method GET_CLDUI_INFO.

    if ME->R_CLDUI is bound.
      RS_DYNP = ME->R_CLDUI->S_DYNP.
    endif.

    if RS_DYNP-REPID is initial or
       RS_DYNP-DYNNR is initial.
      RS_DYNP-REPID = ME->S_DYNP-REPID.
      RS_DYNP-DYNNR = '9999'.
    endif.

  endmethod.
  method GET_CLMAT_BY_NODEKEY.

    data: LS_NODE type YS_NODE.


    LS_NODE = value #( ME->T_NODE[ NODEKEY = IF_NODEKEY ] optional ).
    check SY-SUBRC eq 0.

    if LINES( LS_NODE-T_CLMAT ) gt 1.
***   Call popup
      RR_CLMAT = ZCL_VCXI_XCA_MWB_POPUP_ORGDATA=>START_POPUP( IT_CLMAT = LS_NODE-T_CLMAT ).
    else.
      RR_CLMAT = value #( LS_NODE-T_CLMAT[ 1 ] optional ).
    endif.

  endmethod.
  method HANDLE_CLMAT_FREED.

    try.
        if ME->R_CLDUI is bound and
           ME->R_CLDUI->R_CLMAT eq SENDER.
          ME->HANDLE_UC_CSPREV( ).
          delete ME->T_CSNEXT where TABLE_LINE eq SENDER.
          delete ME->T_CSPREV where TABLE_LINE eq SENDER.
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_ITEM_DOUBLE_CLICK.

    ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

  endmethod.
  method HANDLE_NODE_DOUBLE_CLICK.

    data: LR_CLMAT type ref to ZCL_VCXI_XCA_MWB_CLMAT.


    try.
        LR_CLMAT = ME->GET_CLMAT_BY_NODEKEY( IF_NODEKEY = NODE_KEY ).
        check LR_CLMAT is bound and
              ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

        ME->OPEN_NEW_DUI( IR_CLMAT = LR_CLMAT ).

***     Set selected Node Key
        ME->F_SELECTED_NODEKEY = NODE_KEY.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_BACK.

    if LINES( ME->T_CSPREV ) gt 1.
***   Navigate Back in Callstack
      ME->HANDLE_UC_CSPREV( ).
    else.
***   Check for changes and ask user to save them
      if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
***     Leave Screen
        if ME->R_DOCNT is bound.
          ME->R_DOCNT->SET_VISIBLE( VISIBLE = CL_GUI_CONTROL=>VISIBLE_FALSE ).
          ME->F_DOCNT_VISIBLE = ABAP_FALSE.
        endif.
        leave to screen 0.
      endif.
    endif.

  endmethod.
  method HANDLE_UC_CANCEL.

*** Check for changes and ask user to save them
    if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
      if ME->R_DOCNT is bound.
        ME->R_DOCNT->SET_VISIBLE( VISIBLE = CL_GUI_CONTROL=>VISIBLE_FALSE ).
        move ABAP_FALSE to ME->F_DOCNT_VISIBLE.
      endif.
      leave to screen 0.
    endif.

  endmethod.
  method HANDLE_UC_COPY.

    data: LR_COPYMAT type ref to ZCL_VCXI_XCA_MWB_CLMAT.


***--------------------------------------------------------------------------------------
*** Check for changes and ask user to save them, if the material is in change mode
    if ME->R_CLDUI is bound and
       ME->R_CLDUI->R_CLMAT is bound and
       ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_FALSE.
***   Check for changes and ask user to save them
      check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

***   Unlock Object
      ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
    endif.

***--------------------------------------------------------------------------------------
*** Create material copy
    move ME->R_CLDUI->R_CLMAT->CREATE_COPY( ) to LR_COPYMAT.

*** Create new instance of Detail UI based on defined Class of Model
    check LR_COPYMAT is bound.
    ME->OPEN_NEW_DUI( IR_CLMAT = LR_COPYMAT ).

  endmethod.
  method HANDLE_UC_CREATE.

    data: LR_CLMAT type ref to ZCL_VCXI_XCA_MWB_CLMAT.


***--------------------------------------------------------------------------------------
*** Check for changes and ask user to save them, if the material is in change mode
    if ME->R_CLDUI is bound and
       ME->R_CLDUI->R_CLMAT is bound and
       ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_FALSE.
***   Check for changes and ask user to save them
      check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

***   Unlock Object
      ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
    endif.

***--------------------------------------------------------------------------------------
*** Create new Material via Template
    LR_CLMAT = ZCL_VCXI_XCA_MWB_POPUP_TMPL=>START_POPUP( IR_CLQRY = ME->R_CLQRY ).
*** Open new Material Detail UI
    check LR_CLMAT is bound.
    ME->OPEN_NEW_DUI( IR_CLMAT = LR_CLMAT ).

  endmethod.
  method HANDLE_UC_CSNEXT.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_CLMAT  type ref to ZCL_VCXI_XCA_MWB_CLMAT.


*** Check for changes and ask user to save them
    check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

*** Delete current Object
    delete ME->T_CSNEXT index 1.

*** Read next Object from Callstack
    read table ME->T_CSNEXT into LR_OBJECT index 1.
    if SY-SUBRC eq 0.
***   Set current object to Callstack PREV
      insert LR_OBJECT into ME->T_CSPREV index 1.

***   Cast to Material Object
      move LR_OBJECT ?to LR_CLMAT.
      check LR_CLMAT is bound.

***   Create new instance of Detail UI based on defined Class of Model
      ME->OPEN_DUI( IR_UIFW  = ME
                    IR_CLMAT = LR_CLMAT ).
    endif.

  endmethod.
  method HANDLE_UC_CSPREV.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_CLMAT  type ref to ZCL_VCXI_XCA_MWB_CLMAT.


*** Check for changes and ask user to save them
    check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

*** Delete current Object
    delete ME->T_CSPREV index 1.

*** Read next Object from Callstack
    read table ME->T_CSPREV into LR_OBJECT index 1.
    if SY-SUBRC eq 0.
***   Set current object to Callstack PREV
      insert LR_OBJECT into ME->T_CSNEXT index 1.

***   Cast to Material Object
      move LR_OBJECT ?to LR_CLMAT.
      check LR_CLMAT is bound.

***   Create new instance of Detail UI based on defined Class of Model
      ME->OPEN_DUI( IR_UIFW  = ME
                    IR_CLMAT = LR_CLMAT ).
    else.
***   Nothing to show anymore
      if ME->R_CLDUI is bound.
        ME->R_CLDUI->DO_FREE( ).
      endif.
    endif.

  endmethod.
  method HANDLE_UC_EXIT.

*** Check for changes and ask user to save them
    if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
      if ME->R_DOCNT is bound.
        ME->R_DOCNT->SET_VISIBLE( VISIBLE = CL_GUI_CONTROL=>VISIBLE_FALSE ).
        move ABAP_FALSE to ME->F_DOCNT_VISIBLE.
      endif.
      leave to screen 0.
    endif.

  endmethod.
  method HANDLE_UC_FULLSCREEN.

***----------------------------------------------------------------------------
*** Only works if container is available
    if ME->R_DOCNT is not bound.
      move ABAP_TRUE to ME->F_DOCNT_VISIBLE.
    else.
      if ME->F_DOCNT_VISIBLE eq ABAP_TRUE.
        ME->R_DOCNT->SET_VISIBLE( VISIBLE = CL_GUI_CONTROL=>VISIBLE_FALSE ).
        move ABAP_FALSE to ME->F_DOCNT_VISIBLE.
      else.
        ME->R_DOCNT->SET_VISIBLE( VISIBLE = CL_GUI_CONTROL=>VISIBLE_TRUE ).
        move ABAP_TRUE to ME->F_DOCNT_VISIBLE.
      endif.
    endif.

  endmethod.
  method HANDLE_UC_MAINT_TMPL.

    data: LT_SELLIST type table of VIMSELLIST.


    LT_SELLIST = value #( ( VIEWFIELD = 'IREGE'
                            OPERATOR  = 'EQ'
                            VALUE     = ME->R_REGMDL->/VCXI/IF_CKX_OBJECT~GET_ID( ) ) ).

    call function 'VIEW_MAINTENANCE_CALL'
      exporting
        ACTION                       = 'S'
        VIEW_NAME                    = 'ZVCXI_XCA_VM110'
      tables
        DBA_SELLIST                  = LT_SELLIST
      exceptions
        CLIENT_REFERENCE             = 1
        FOREIGN_LOCK                 = 2
        INVALID_ACTION               = 3
        NO_CLIENTINDEPENDENT_AUTH    = 4
        NO_DATABASE_FUNCTION         = 5
        NO_EDITOR_FUNCTION           = 6
        NO_SHOW_AUTH                 = 7
        NO_TVDIR_ENTRY               = 8
        NO_UPD_AUTH                  = 9
        ONLY_SHOW_ALLOWED            = 10
        SYSTEM_FAILURE               = 11
        UNKNOWN_FIELD_IN_DBA_SELLIST = 12
        VIEW_NOT_FOUND               = 13
        MAINTENANCE_PROHIBITED       = 14
        others                       = 15.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method HANDLE_UC_REFRESH.

*** When Fullscreen is ON (the Tree is hidden) don`t do the refresh
    if ME->F_DOCNT_VISIBLE eq ABAP_TRUE.
      move ABAP_TRUE to ME->F_REFRESH_REQ.
    endif.

  endmethod.
  method HANDLE_UC_TOGGLE.

***----------------------------------------------------------------------------
*** Only works if object is open
    check ME->R_CLDUI is bound and
          ME->R_CLDUI->R_CLMAT is bound.

    if ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_FALSE.
***   Check for changes and ask user to save them
      check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

***   Unlock Object
      ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
    else.
***   Lock Object
      ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
    endif.

  endmethod.
  method INIT_DOCNT.

    if ME->R_DOCNT is bound.
      ME->R_DOCNT->FREE( ).
    endif.

    if ME->F_DOCNT_VISIBLE is not initial.
***   Create the Docking Container Instance
      create object ME->R_DOCNT
        exporting
          REPID     = ME->S_DYNP-REPID
          DYNNR     = ME->S_DYNP-DYNNR
          SIDE      = ME->R_DOCNT->DOCK_AT_LEFT
          EXTENSION = 300.

      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      else.
        move ABAP_TRUE to ME->F_DOCNT_VISIBLE.
      endif.
    endif.

  endmethod.
  method INIT_TREE.

    data:   LS_HIERARCHY_HEADER type TREEV_HHDR.


    check ME->R_DOCNT is bound.

*** Get the Hierarchy Column
    LS_HIERARCHY_HEADER-HEADING = text-C01.
    LS_HIERARCHY_HEADER-WIDTH   = '60'.

*** Create the Tree Instance
    create object ME->R_TREE
      exporting
        LIFETIME                    = CL_GUI_COLUMN_TREE=>LIFETIME_DYNPRO
        PARENT                      = ME->R_DOCNT
        NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
        ITEM_SELECTION              = 'X'
        HIERARCHY_COLUMN_NAME       = C_COLUMN_ID
        HIERARCHY_HEADER            = LS_HIERARCHY_HEADER
      exceptions
        ILLEGAL_NODE_SELECTION_MODE = 1
        ILLEGAL_COLUMN_NAME         = 2
        others                      = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Columns
    ME->R_TREE->ADD_COLUMN( exporting
                              NAME                = C_COLUMN_DESCR
                              WIDTH               = '60'
                              HEADER_TEXT         = text-C02
                            exceptions
                              COLUMN_EXISTS       = 1
                              ILLEGAL_COLUMN_NAME = 2
                              TOO_MANY_COLUMNS    = 3
                              ILLEGAL_ALIGNMENT   = 4
                              others              = 5 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Register the Tree Events
    ME->REGISTER_TREE_EVENTS( ).

    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method OPEN_DUI.

    check ME->R_REGMDL is bound.

    try.
***     Create new instance of Detail UI based on defined Class of Model
        create object RR_CLDUI
          type
            (ME->R_REGMDL->S_CLDUI-CLDUI)
          exporting
            IR_UIFW  = IR_UIFW
            IR_CLMAT = IR_CLMAT.

      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method OPEN_NEW_DUI.

    data: LR_CLDUI       type ref to ZCL_VCXI_XCA_MWB_CLDUI,
          LR_OBJECT_PREV type ref to /VCXI/IF_CKX_OBJECT.


*** Create new instance of Detail UI based on defined Class of Model
    LR_CLDUI = ME->OPEN_DUI( IR_UIFW  = ME
                             IR_CLMAT = IR_CLMAT ).

***---------------------------------------------------------------------
*** Maintain Callstack
    read table ME->T_CSPREV into LR_OBJECT_PREV index 1.
    if SY-SUBRC ne 0 or
       LR_OBJECT_PREV ne IR_CLMAT.
      insert IR_CLMAT into ME->T_CSPREV index 1.
    endif.

    free ME->T_CSNEXT.
    insert IR_CLMAT into ME->T_CSNEXT index 1.

  endmethod.
  method REFRESH_T_NODE.

    data: LF_MATNR type MATNR,
          LF_MAKTX type MAKTX.
    data: LT_RESULT type /VCXI/CKX_TT_OBJECT.
    data: LR_CLMAT  type ref to ZCL_VCXI_XCA_MWB_CLMAT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_NODE>   type YS_NODE.


    free: ME->T_NODE.

*** Get query result data
    if ME->R_CLQRY is bound.
      LT_RESULT = ME->R_CLQRY->EXECUTE( ).
    endif.

*** Add a node for each result object
    loop at LT_RESULT into LR_OBJECT.
      LR_CLMAT ?= LR_OBJECT.
      check LR_CLMAT is bound.
      LF_MATNR = LR_CLMAT->GET_MATNR( importing EF_MAKTX = LF_MAKTX ).

      read table ME->T_NODE assigning <S_NODE> with key MATNR = LF_MATNR.
      if SY-SUBRC is not initial.
        insert value #( MATNR = LF_MATNR
                        DESCR = LF_MAKTX
                      ) into table ME->T_NODE assigning <S_NODE>.

***     Convert material into external format
        call function 'CONVERSION_EXIT_MATN1_OUTPUT'
          exporting
            INPUT  = LF_MATNR
          importing
            OUTPUT = <S_NODE>-ID.
      endif.
      append LR_CLMAT to <S_NODE>-T_CLMAT.
    endloop.

*** Sort by Material Number
    sort ME->T_NODE by MATNR.

*** Dynamic assignment of Node Keys based on Index
    loop at ME->T_NODE assigning <S_NODE>.
      <S_NODE>-NODEKEY = SY-TABIX.
    endloop.

  endmethod.
  method REFRESH_TREE.

    data: LS_NODE type YS_NODE.
    data: LT_NTAB type TREEV_NTAB,
          LT_ITAB type table of MTREEITM.


***------------------------------------------------------------------
*** Initialize Tree if needed
    if ME->R_TREE is not bound.
      ME->INIT_DOCNT( ).
      ME->INIT_TREE( ).
    endif.

***------------------------------------------------------------------
    check ME->F_REFRESH_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ.

*** Get selected Node if not already defined
    if ME->F_SELECTED_NODEKEY is initial.
      ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = ME->F_SELECTED_NODEKEY ).
    endif.

*** Delete all Nodes
    ME->R_TREE->DELETE_ALL_NODES( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Refresh Node Table
    ME->REFRESH_T_NODE( ).

    loop at ME->T_NODE into LS_NODE.
***   Node
      append value #( NODE_KEY  = LS_NODE-NODEKEY
                      RELATKEY  = LS_NODE-RELATKEY
                      RELATSHIP = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
                      ISFOLDER  = ABAP_FALSE
                      N_IMAGE  = cond #( when LINES( LS_NODE-T_CLMAT ) gt 1 then ICON_GRADUATE
                                                                            else ICON_MATERIAL )
                    ) to LT_NTAB.

***   Items
      append value #( NODE_KEY  = LS_NODE-NODEKEY
                      ITEM_NAME = C_COLUMN_ID
                      CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_TEXT
                      TEXT      = LS_NODE-ID
                    ) to LT_ITAB.
      append value #( NODE_KEY  = LS_NODE-NODEKEY
                      ITEM_NAME = C_COLUMN_DESCR
                      CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_TEXT
                      TEXT      = LS_NODE-DESCR
                    ) to LT_ITAB.
    endloop.

***------------------------------------------------------------------
*** Add new Nodes and Items
    ME->R_TREE->ADD_NODES_AND_ITEMS( exporting  NODE_TABLE                = LT_NTAB
                                                ITEM_TABLE                = LT_ITAB
                                                ITEM_TABLE_STRUCTURE_NAME = 'MTREEITM'
                                     exceptions others                    = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Selected Node
    if ME->F_SELECTED_NODEKEY is not initial.
      ME->R_TREE->SET_SELECTED_NODE( NODE_KEY = ME->F_SELECTED_NODEKEY ).
      clear ME->F_SELECTED_NODEKEY.
    endif.

*** Dynamically ajdust Width
    ME->R_TREE->ADJUST_COLUMN_WIDTH( exporting  ALL_COLUMNS     = ABAP_TRUE
                                                INCLUDE_HEADING = ABAP_TRUE
                                     exceptions others          = 7 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method REGISTER_CLDUI.

***------------------------------------------------------------------
*** Unregister existing DUI if needed
    do.
      if ME->R_CLDUI is not bound.
        exit.
      endif.
      ME->R_CLDUI->DO_FREE( ).
    enddo.

***------------------------------------------------------------------
*** Set new Detail UI
    move IR_CLDUI to ME->R_CLDUI.

  endmethod.
  method REGISTER_TREE_EVENTS.

    data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
    field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK       to <S_EVENT>-EVENTID.
    move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_COLUMN_TREE=>EVENTID_ITEM_DOUBLE_CLICK       to <S_EVENT>-EVENTID.
    move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

    ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                         EVENTS                    = LT_EVENT
                                       exceptions
                                         CNTL_ERROR                = 1
                                         CNTL_SYSTEM_ERROR         = 2
                                         ILLEGAL_EVENT_COMBINATION = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
    set handler ME->HANDLE_NODE_DOUBLE_CLICK   for ME->R_TREE.
    set handler ME->HANDLE_ITEM_DOUBLE_CLICK   for ME->R_TREE.

  endmethod.
  method SET_PFSTATUS.

    data LT_EXCLUDE  type standard table of SYUCOMM.


***--------------------------------------------------------------------------------------
*** If no Object
    if ME->R_CLDUI          is not bound or
       ME->R_CLDUI->R_CLMAT is not bound.
***   No Toggle, Save, Copy, SmartVC or Fullscreen
      append C_UC_TOGGLE     to LT_EXCLUDE.
      append C_UC_SAVE       to LT_EXCLUDE.
      append C_UC_COPY       to LT_EXCLUDE.
      append C_UC_OPEN_SVC   to LT_EXCLUDE.
      append C_UC_FULLSCREEN to LT_EXCLUDE.

***--------------------------------------------------------------------------------------
    else.
***   No SmartVC if Material is not configured
      if ME->R_CLDUI->R_CLMAT->IS_CONFIGURABLE( ) ne ABAP_TRUE.
        append C_UC_OPEN_SVC to LT_EXCLUDE.
      endif.
***   No Save as long as the material is not in Change Mode
      if ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
        append C_UC_SAVE  to LT_EXCLUDE.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Exclude CSPREV - When Callstack PREV not filled
    if LINES( ME->T_CSPREV ) lt 2.
      append C_UC_CSPREV to LT_EXCLUDE.
    endif.
*** Exclude CSNEXT - When Callstack NEXT not filled
    if LINES( ME->T_CSNEXT ) lt 2.
      append C_UC_CSNEXT to LT_EXCLUDE.
    endif.

***--------------------------------------------------------------------------------------
*** Set Status and deactivate excluded functions
    set pf-status 'S0100' of program ME->S_DYNP-REPID excluding LT_EXCLUDE.

  endmethod.
  method SET_TITLE.

    data: LF_MATNR type MATNR,
          LF_MAKTX type MAKTX.


    if ME->R_CLDUI is not bound or
       ME->R_CLDUI->R_CLMAT is not bound.
***   Generic Title
      set titlebar 'T0100' of program ME->S_DYNP-REPID.

    else.
      LF_MATNR = ME->R_CLDUI->R_CLMAT->GET_MATNR( importing EF_MAKTX = LF_MAKTX ).
***   Convert material into external format
      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = LF_MATNR
        importing
          OUTPUT = LF_MATNR.

      if ME->R_CLDUI->R_CLMAT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
***     Display Material & (&)
        set titlebar 'T0103' of program ME->S_DYNP-REPID
                             with LF_MATNR LF_MAKTX.
      elseif ME->R_CLDUI->R_CLMAT->F_CREAMODE eq ABAP_TRUE.
***     Create Material & (&)
        set titlebar 'T0101' of program ME->S_DYNP-REPID
                             with LF_MATNR LF_MAKTX.
      else.
***     Change Material & (&)
        set titlebar 'T0102' of program ME->S_DYNP-REPID
                             with LF_MATNR LF_MAKTX.
      endif.
    endif.

  endmethod.
  method START_UI.

    data LR_UIFW  type ref to ZCL_VCXI_XCA_MWB_UIFW.


*** Create local UI Framework Instance
    create object LR_UIFW
      exporting
        IF_GREGE = IF_GREGE
        IR_CLQRY = IR_CLQRY.

*** Register Default UI
    if IR_CLMAT is bound.
      LR_UIFW->OPEN_NEW_DUI( IR_CLMAT = IR_CLMAT ).
    endif.

*** Display UI in fullscreen
    if IF_FULLSCREEN is initial.
      move ABAP_TRUE to LR_UIFW->F_DOCNT_VISIBLE.
    endif.

*** Start UI Framework
    call function 'ZVCXI_XCA_MWB_UIFW_START'
      exporting
        IR_UIFW = LR_UIFW
      changing
        CS_DYNP = LR_UIFW->S_DYNP.

  endmethod.
  method UNREGISTER_CLDUI.

    if IR_CLDUI eq ME->R_CLDUI.
      clear ME->R_CLDUI.
    endif.

  endmethod.
