
class ZCL_VCXI_XCS_TEXTEDIT_TOOLBAR definition
  public
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_TEXTEDIT type ref to ZCL_VCXI_XCS_TEXTEDIT
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    importing
      !IR_CONTAINER type ref to CL_GUI_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_EDIT_MODE
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods SET_EDIT_MODE
    importing
      !IF_MODE type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .
  data R_CONTAINER type ref to CL_GUI_CONTAINER .
  data R_TEXTEDIT type ref to ZCL_VCXI_XCS_TEXTEDIT .
  data F_READONLY type ABAP_BOOL .
  constants C_BTYPE_BUTTON type TB_BTYPE value 0 ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value 3 ##NO_TEXT.
  constants C_FCODE_CUT type UI_FUNC value 'CUT' ##NO_TEXT.
  constants C_FCODE_COPY type UI_FUNC value 'COPY' ##NO_TEXT.
  constants C_FCODE_PASTE type UI_FUNC value 'PASTE' ##NO_TEXT.
  constants C_FCODE_INS_SO10 type UI_FUNC value 'INS_SO10' ##NO_TEXT.
  constants C_FCODE_REM_SO10 type UI_FUNC value 'REM_SO10' ##NO_TEXT.
  constants C_FCODE_PREVIEW type UI_FUNC value 'PREVIEW' ##NO_TEXT.

  methods HANDLE_FUNCTION_SELECTED
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
private section.
endclass. "ZCL_VCXI_XCS_TEXTEDIT_TOOLBAR definition
class ZCL_VCXI_XCS_TEXTEDIT_TOOLBAR implementation.
  method CONSTRUCTOR.

    move IR_GATE      to ME->R_GATE.
    move IR_UIGATE    to ME->R_UIGATE.
    move IR_TEXTEDIT  to ME->R_TEXTEDIT.

  endmethod.
  method DO_FREE.

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                           CNTL_ERROR        = 1
                           CNTL_SYSTEM_ERROR = 2 ).

      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

  endmethod.
  method HANDLE_FUNCTION_SELECTED.

    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        case FCODE.

          when C_FCODE_CUT.
            ME->R_TEXTEDIT->COPY( IF_CUT = ABAP_TRUE ).

          when C_FCODE_COPY.
            ME->R_TEXTEDIT->COPY( IF_CUT = ABAP_FALSE ).

          when C_FCODE_PASTE.
            ME->R_TEXTEDIT->PASTE( ).

          when C_FCODE_INS_SO10.
            ME->R_TEXTEDIT->INSERT_SO10_TEXT( ).

          when C_FCODE_REM_SO10.
            ME->R_TEXTEDIT->REMOVE_SO10_TEXT( ).

          when C_FCODE_PREVIEW.
            ME->R_TEXTEDIT->PREVIEW( ).

          when others.
        endcase.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER.

    move IR_CONTAINER to ME->R_CONTAINER.

  endmethod.
  method INIT_EDIT_MODE.

    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE or
       ME->R_GATE->IS_INUSE( )  ne ABAP_TRUE.
      move ABAP_TRUE to ME->F_READONLY.
    endif.

  endmethod.
  method INIT_TOOLBAR.

    data: LS_EVENT type line of CNTL_SIMPLE_EVENTS.
    data: LT_EVENT type         CNTL_SIMPLE_EVENTS.

*** Object Creation
    if ME->R_TOOLBAR is not bound.
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Event Handler
      LS_EVENT-EVENTID = CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED.
      append LS_EVENT to LT_EVENT.
      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( LT_EVENT ).
      set handler ME->HANDLE_FUNCTION_SELECTED for ME->R_TOOLBAR.

***   Cut Button
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_CUT
                                 ICON        = ICON_SYSTEM_CUT
                                 QUICKINFO   = text-B01
                                 IS_DISABLED = ME->F_READONLY
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).

***   Copy Button
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_COPY
                                 ICON        = ICON_SYSTEM_COPY
                                 QUICKINFO   = text-B02
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).

***   Paste Button
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_PASTE
                                 ICON        = ICON_SYSTEM_PASTE
                                 QUICKINFO   = text-B03
                                 IS_DISABLED = ME->F_READONLY
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).

***   Separator
      ME->R_TOOLBAR->ADD_BUTTON( FCODE     = ''
                                 ICON      = ''
                                 BUTN_TYPE = C_BTYPE_SEPARATOR ).

***   Insert SO10 Button
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_INS_SO10
                                 ICON        = ICON_PLANNING_IN
                                 TEXT        = text-B04
                                 IS_DISABLED = ME->F_READONLY
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).

***   Remove SO10 Button
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_REM_SO10
                                 ICON        = ICON_PLANNING_OUT
                                 TEXT        = text-B05
                                 IS_DISABLED = ME->F_READONLY
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).

***   Separator
      ME->R_TOOLBAR->ADD_BUTTON( FCODE     = ''
                                 ICON      = ''
                                 BUTN_TYPE = C_BTYPE_SEPARATOR ).

***   Print Preview
      ME->R_TOOLBAR->ADD_BUTTON( FCODE       = C_FCODE_PREVIEW
                                 ICON        = ICON_LAYOUT_CONTROL
                                 QUICKINFO   = text-B06
                                 IS_DISABLED = ME->F_READONLY
                                 BUTN_TYPE   = C_BTYPE_BUTTON ).
    endif.

  endmethod.
  method SET_EDIT_MODE.

    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE or
       ME->R_GATE->IS_INUSE( )  ne ABAP_TRUE.
      move ABAP_TRUE to ME->F_READONLY.
    else.
***   Set Readonly Mode by Input
      if IF_MODE eq ABAP_TRUE.
        move ABAP_FALSE to ME->F_READONLY.
      else.
        move ABAP_TRUE to ME->F_READONLY.
      endif.
      ME->R_TOOLBAR->SET_ENABLE( ENABLE = IF_MODE ).
    endif.

  endmethod.
