
class ZCL_VCXI_P0SS_PR_SCORE_MGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_SCORES_CHANGED type /VCXI/VKSC_IEVNT value 'SCORES_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P0_SCORE_MGR type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SCORE_MGR' ##NO_TEXT.
  constants C_PARID_PSCOC type /VCXI/VKS_PARID value 'ZVCXI_P0_PSCOC' ##NO_TEXT.
  constants C_PARID_PSCOL type /VCXI/VKS_PARID value 'ZVCXI_P0_PSCOL' ##NO_TEXT.
  constants C_PARID_SSCOR type /VCXI/VKS_PARID value 'ZVCXI_P0_SSCOR' ##NO_TEXT.
  data F_SCORE_ADJ type ABAP_BOOL read-only .

  methods IS_MS_TAPE_ACTIVE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_PRSTY
    returning
      value(RR_CUST_PRSTY) type ref to ZCL_VCXI_P0SS_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_AUTO_CALC_SHTP
    returning
      value(RF_AUTO_CALC) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_LAST_SCORE
    importing
      !IF_ISCOR type ZVCXI_P0SS_ISCOR
    returning
      value(RF_LAST_SCORE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_SCORE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FCUSD
    returning
      value(RF_FCUSD) type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods GET_PANOR
    returning
      value(RF_PANOR) type ZVCXI_P0SS_PANOR
    raising
      /VCXI/CX_CKX .
  methods GET_PANOR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PSCOC
    returning
      value(RF_PSCOC) type ZVCXI_P0SS_PSCOC
    raising
      /VCXI/CX_CKX .
  methods GET_PSCOC_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PSCOL
    returning
      value(RF_PSCOL) type ZVCXI_P0SS_PSCOL
    raising
      /VCXI/CX_CKX .
  methods GET_PSCOL_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SSCOR
    returning
      value(RF_SSCOR) type ZVCXI_P0SS_SSCOR
    raising
      /VCXI/CX_CKX .
  methods GET_SSCOR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SUM_CSCOR
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_UOM_OUT type UNIT
    returning
      value(RS_SCORP) type ZVCXI_P0SS_S_SCORP
    raising
      /VCXI/CX_CKX .
  methods SET_PANOR
    importing
      !IF_PANOR type ZVCXI_P0SS_PANOR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PSCOC
    importing
      !IF_PSCOC type ZVCXI_P0SS_PSCOC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PSCOL
    importing
      !IF_PSCOL type ZVCXI_P0SS_PSCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SSCOR
    importing
      !IF_SSCOR type ZVCXI_P0SS_SSCOR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST_PRSTY
    exporting
      !EF_TPRST type ZVCXI_P0SS_TPRST
      !EF_PRSTY type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_SADMO type /VCXI/VKS_ATTID value 'SCORE_ADJUST_MODE' ##NO_TEXT.
  constants C_IEVNT_I_ADJUST_SCORES type /VCXI/VKSC_IEVNT value 'ADJUST_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SCORES type /VCXI/VKSC_IEVNT value 'INIT_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SCORE_ADJUST type /VCXI/VKSC_IEVNT value 'INIT_SCORE_ADJUST' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SCORES type /VCXI/VKSC_IEVNT value 'RECALC_SCORES' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_PANOR_CHANGED type /VCXI/VKSC_IEVNT value 'PANOR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SCORE_DELETED type /VCXI/VKSC_IEVNT value 'SCORE_DELETED' ##NO_TEXT.
  constants C_IEVNT_O_SSCOR_CHANGED type /VCXI/VKSC_IEVNT value 'SSCOR_CHANGED' ##NO_TEXT.
  data F_INIT_SCORES type ABAP_BOOL .
  data R_CUST_PRSTY type ref to ZCL_VCXI_P0SS_CUST_PRSTY .
  data R_CUST_PRSTY_TMP type ref to ZCL_VCXI_P0SS_CUST_PRSTY .
  data R_PR_CLOS type ref to ZCL_VCXI_P0SS_PR_CLOS .
  data R_PR_SHEET type ref to ZCL_VCXI_P0SS_PR_SHEET .
  data R_PR_SPEC type ref to ZCL_VCXI_P0SS_PR_SPEC .
  data T_SCORE type ZVCXI_P0SS_TT_SCORE .
  constants C_IEVNT_O_PSCOR_CHANGED type /VCXI/VKSC_IEVNT value 'PSCOR_CHANGED' ##NO_TEXT.
  data F_SADMO type ZVCXI_P0SS_SADMO .
  constants C_SADMO_LAST type ZVCXI_P0SS_SADMO value 'L' ##NO_TEXT.

  methods INIT_SADMO
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SCORE_NUMBER
    raising
      /VCXI/CX_CKX .
  methods CHECK_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO_PANOR
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PANOR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORP
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SSCOR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PSCOR
    exporting
      !EF_RETURN_CROSS type I
      !EF_RETURN_LENGTH type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SUM_TAPE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOTAL_SCORP
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DEL_ALL_SCORES
    raising
      /VCXI/CX_CKX .
  methods GET_CURR_SCORES
    importing
      !IF_SORTED type ABAP_BOOL default ABAP_TRUE
    returning
      value(RT_SCORE) type ZVCXI_P0SS_TT_SCORE
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_SCORES_CUST
    exporting
      !ET_SCORE type ZVCXI_P0SS_TT_SCORE
      !EF_CHANGED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_SUM_TAPES
    importing
      !IF_UOM_OUT type UNIT
    returning
      value(RS_TAPOS) type ZVCXI_P0SS_S_TAPOS
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_SCORES
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SCORES
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SCORE_ADJUST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SCORES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IS_SCORE type ZVCXI_P0SS_S_SCORE
      !IF_CREATE type ABAP_BOOL default ABAP_FALSE
      !IS_SCORE_OLD type ZVCXI_P0SS_S_SCORE optional
      !IF_INDEX type I optional
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SCORES
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SCORE_MGR definition
class ZCL_VCXI_P0SS_PR_SCORE_MGR implementation.
method ADJUST_SCORE_NUMBER.

  data:          LF_INDEX           type        I,
                 LF_NSCOR_NEW       type        ZVCXI_P0SS_NSCOR,
                 LF_CSCOR_PREV      type        ZVCXI_P0SS_CSCOR,
                 LF_ISCOR           type        ZVCXI_P0SS_ISCOR,
                 LF_ADJUST          type        ABAP_BOOL.
  data:          LS_SCORE_DEL       type        ZVCXI_P0SS_S_SCORE.
  data:          LT_SCORE           type        ZVCXI_P0SS_TT_SCORE.
  field-symbols: <S_SCORE>          type        ZVCXI_P0SS_S_SCORE.

  LT_SCORE = ME->GET_CURR_SCORES( ).

*** Check score was deleted
  if ME->F_SCORE_ADJ eq ABAP_UNDEFINED.
    loop at ME->T_SCORE into LS_SCORE_DEL.
      read table LT_SCORE with key CSCOR = LS_SCORE_DEL-CSCOR
                                   NSCOR = LS_SCORE_DEL-NSCOR
                          transporting no fields.
      if SY-SUBRC ne 0.
        exit.
      else.
        clear: LS_SCORE_DEL.
      endif.
    endloop.
  endif.

*** -----------------------------------------------------------
*** Adjust Current one
  loop at LT_SCORE assigning <S_SCORE>.

    add 1 to LF_INDEX.

*** Adjust Score Number
    if LF_CSCOR_PREV ne <S_SCORE>-CSCOR and
       <S_SCORE>-CSCOR is not initial.
      clear: LF_NSCOR_NEW.
    endif.
    add 1 to LF_NSCOR_NEW.
    move LF_NSCOR_NEW to <S_SCORE>-NSCOR.

*** Set Score Category for new one
    if <S_SCORE>-CSCOR is initial.
      move LF_CSCOR_PREV to <S_SCORE>-CSCOR.
    endif.

*** Set changes to Score
    ME->SET_SCORE( IS_SCORE = <S_SCORE>
                   IF_INDEX = LF_INDEX ).

*** -----------------------------------------------------------
*** Do we need to adjust Score Position
    if LS_SCORE_DEL-SCORP is not initial and
       LS_SCORE_DEL-CSCOR eq <S_SCORE>-CSCOR.

***   Set Adjustment if we have the same score
      if LS_SCORE_DEL-NSCOR eq <S_SCORE>-NSCOR.
        LF_ADJUST = ABAP_TRUE.
      endif.
****  Check if we have to adjust last or next
      if ME->F_SADMO eq C_SADMO_LAST.
        clear: LF_ISCOR.
        concatenate <S_SCORE>-CSCOR <S_SCORE>-NSCOR into LF_ISCOR.
        LF_ADJUST = ME->CHECK_LAST_SCORE( IF_ISCOR = LF_ISCOR ).
      endif.

      if LF_ADJUST = ABAP_TRUE.
        <S_SCORE>-SCORP = <S_SCORE>-SCORP + LS_SCORE_DEL-SCORP.
        clear: LS_SCORE_DEL-SCORP.

***     Set changes to Score
        ME->SET_SCORE( IS_SCORE = <S_SCORE>
                       IF_INDEX = LF_INDEX ).
      endif.

    endif.

*** -----------------------------------------------------------
*** Set Previous Score Category
    move <S_SCORE>-CSCOR to LF_CSCOR_PREV.

  endloop.

*** -----------------------------------------------------------
*** Save Adjusted one
  clear: ME->T_SCORE.
  move LT_SCORE to ME->T_SCORE.

endmethod.
method CHECK_AUTO_CALC_SHTP.

  data: LF_SSCOR   type ZVCXI_P0SS_SSCOR.

  ME->CHECK_CUST_PRSTY( ).

  LF_SSCOR = ME->GET_SSCOR( ).

*** Check Score Status Calculation Method -> only automatic -> recalc
  check ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) eq '1' or
        ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) eq '3' .

  RF_AUTO_CALC = ABAP_TRUE.

endmethod.
method CHECK_CUST_PRSTY.

  data: LF_TPRST  type        ZVCXI_P0SS_TPRST,
        LF_PRSTY  type        ZVCXI_P0SS_PRSTY,
        LF_OWNER  type        /VCXI/CKX_STRING,
        LF_SYSOM  type        /VCXI/VKS_SYSOM.

  ME->GET_TPRST_PRSTY( importing EF_TPRST = LF_TPRST
                                 EF_PRSTY = LF_PRSTY ).

  move ME->R_GATE->F_GATKY to LF_OWNER.
  ME->R_GATE->GET_CONFIG_INFO( importing EF_SYSOM = LF_SYSOM ).

*** Check if Customizing is the right one
  if ME->R_CUST_PRSTY is not bound or
     ME->R_CUST_PRSTY->F_TPRST ne LF_TPRST or
     ME->R_CUST_PRSTY->F_PRSTY ne LF_PRSTY or
     ME->R_CUST_PRSTY->F_OWNER ne LF_OWNER or
     ME->R_CUST_PRSTY->F_SYSOM ne LF_SYSOM.

    free: ME->R_CUST_PRSTY.

    if LF_TPRST is not initial and
       LF_PRSTY is not initial.

      try.

          ME->R_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LF_TPRST
                                                                     IF_PRSTY = LF_PRSTY
                                                                     IF_OWNER = LF_OWNER
                                                                     IF_SYSOM = LF_SYSOM ).

        catch /VCXI/CX_CKX.
***       Product Style Customizing Reference can't be assigned.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
              IF_MSGTY = 'E'
              IF_MSGID = 'ZVCXI_P0SSC'
              IF_MSGNO = '101' ).
      endtry.
    endif.
  endif.

endmethod.
method CHECK_JOIPO_PANOR.

  data: LF_PANOR type ZVCXI_P0SS_PANOR,
        LF_JOIPO type ZVCXI_P0S_JOIPO.

  LF_PANOR = ME->GET_PANOR( ).
  LF_JOIPO = ME->GET_JOIPO( ).

  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PANOR_JOIPO( exporting IF_PANOR = LF_PANOR
                                                       IF_JOIPO = LF_JOIPO
                                             importing EF_EXIST = RF_OKAY ).

endmethod.
method CHECK_LAST_SCORE.

  data: LT_SCORE     type ZVCXI_P0SS_TT_SCORE.
  data: LS_SCORE     type ZVCXI_P0SS_S_SCORE,
        LS_SCORE_TMP type ZVCXI_P0SS_S_SCORE.
  data: LF_CSCOR     type ZVCXI_P0SS_CSCOR,
        LF_NSCOR     type ZVCXI_P0SS_NSCOR.

  move IF_ISCOR+0(1) to LF_CSCOR.
  move IF_ISCOR+1(2) to LF_NSCOR.

  LT_SCORE = ME->GET_CURR_SCORES( ).

  loop at LT_SCORE into LS_SCORE.
    move LS_SCORE to LS_SCORE_TMP.

*** At last Score Categorie -> check if it match the requested one
    at end of CSCOR.
      check LS_SCORE_TMP-CSCOR eq LF_CSCOR and
            LS_SCORE_TMP-NSCOR eq LF_NSCOR.
      move ABAP_TRUE to RF_LAST_SCORE.
      exit.
    endat.

  endloop.

endmethod.
method CHECK_PANOR.

***  0 Panel Orientation is maintained and valid.
***  1 Panel Orientation is maintained but not valid.
***  2 Panel Orientation is not maintained.

  data: LF_PANOR type ZVCXI_P0SS_PANOR.
  data: LT_PANOR type ZVCXI_P0SS_TT_PANOR.

  LF_PANOR = ME->GET_PANOR( ).
  if LF_PANOR is initial.
    RF_RESULT = 2.
    exit.
  endif.

  if ME->R_CUST_PRSTY is bound.
    LT_PANOR = ME->R_CUST_PRSTY->GET_VALID_PANOR( ).

*** Check if Panel Orientation is Valid for that Product Style
    if LF_PANOR in LT_PANOR.
      RF_RESULT = 0.
    else.
      RF_RESULT = 1.
    endif.

  else.
*** If we have no Customizing we can't figure out if we have a valid Panel Orientation
    RF_RESULT = 1.
    exit.
  endif.


endmethod.
method CHECK_PSCOR.

***  0 Score Pressure is maintained and valid.
***  1 Score Pressure is maintained but not valid.
***  2 Score Pressure is not maintained.

  data: LF_PSCOC type ZVCXI_P0SS_PSCOC,
        LF_PSCOL type ZVCXI_P0SS_PSCOL.


  LF_PSCOC = ME->GET_PSCOC( ).
  if LF_PSCOC is initial.
    move 2 to EF_RETURN_CROSS.
  endif.

  LF_PSCOL = ME->GET_PSCOL( ).
  if LF_PSCOL is initial.
    move 2 to EF_RETURN_LENGTH.
  endif.

  if EF_RETURN_CROSS ne 2.
    read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC333 with key PSCOR = LF_PSCOC transporting no fields.
    if SY-SUBRC = 0.
      move 0 to EF_RETURN_CROSS.
    else.
      move 1 to EF_RETURN_CROSS.
    endif.
  endif.

  if EF_RETURN_LENGTH ne 2.
    read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC333 with key PSCOR = LF_PSCOL transporting no fields.
    if SY-SUBRC = 0.
      move 0 to EF_RETURN_LENGTH.
    else.
      move 1 to EF_RETURN_LENGTH.
    endif.
  endif.

endmethod.
method CHECK_SCORP.
*** 0 - All Scores Positiobs are Positiv
*** 1 - One or more Scores are initial
*** 2 - One or more Scores are negativ
*** 3 - Two or more Scores are initial/negativ.

  data: LT_SCORE type ZVCXI_P0SS_TT_SCORE.
  data: LS_SCORE type ZVCXI_P0SS_S_SCORE.

*** Start Positiv
  move 0 to RF_RESULT.

*** Check for Initial Scores
  LT_SCORE = ME->GET_CURR_SCORES( IF_SORTED = ABAP_FALSE ).

  loop at LT_SCORE into LS_SCORE.
    if LS_SCORE-SCORP eq 0.
      if RF_RESULT is not initial.
        move 3 to RF_RESULT.
      else.
        move 1 to RF_RESULT.
      endif.
    elseif LS_SCORE-SCORP lt 0.
      if RF_RESULT is not initial.
        move 3 to RF_RESULT.
      else.
        move 2 to RF_RESULT.
      endif.
    endif.
  endloop.

endmethod.
method CHECK_SSCOR.

***  0 Score Status is maintained and valid.
***  1 Score Status is maintained but not valid.
***  2 Score Status is not maintained.

  data: LF_SSCOR type ZVCXI_P0SS_SSCOR.


  LF_SSCOR = ME->GET_SSCOR( ).
  if LF_SSCOR is initial.
    move 2 to RF_RETURN.
    exit.
  endif.

  if ME->R_CUST_PRSTY is bound and
     ME->R_CUST_PRSTY->GET_SSCOR_INFO( IF_SSCOR = LF_SSCOR ) is not initial.
    move 0 to RF_RETURN.
  else.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_SUM_TAPE.

  data: LS_SHTPW   type ZVCXI_P0SS_S_SHTPW,
        LS_TAPOS   type ZVCXI_P0SS_S_TAPOS.

  check ME->R_PR_SHEET is bound.

*** Start Postiv
  move ABAP_TRUE to RF_OKAY.

*** Check against Product Sheet Width
  LS_SHTPW = ME->R_PR_SHEET->GET_SHTPW( ).
  LS_TAPOS = ME->GET_SUM_TAPES( IF_UOM_OUT = LS_SHTPW-SHTPW_UOM ).
*** Tape positions lower equal Product Sheet Width
  if LS_TAPOS-TAPOS gt LS_SHTPW-SHTPW.
    RF_OKAY = ABAP_FALSE.
  endif.

endmethod.
method CHECK_TOTAL_SCORP.

  data: LS_SHTPW   type ZVCXI_P0SS_S_SHTPW,
        LS_SHTPL   type ZVCXI_P0SS_S_SHTPL,
        LS_SCORP_L type ZVCXI_P0SS_S_SCORP,
        LS_SCORP_C type ZVCXI_P0SS_S_SCORP.

  check ME->R_PR_SHEET is bound.

*** Start Postiv
  move ABAP_TRUE to RF_OKAY.

*** Check against Product Sheet Dimension
  LS_SHTPW = ME->R_PR_SHEET->GET_SHTPW( ).
  LS_SHTPL = ME->R_PR_SHEET->GET_SHTPL( ).

  LS_SCORP_L = ME->GET_SUM_CSCOR( IF_CSCOR   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                                  IF_UOM_OUT = LS_SHTPW-SHTPW_UOM ).
  LS_SCORP_C = ME->GET_SUM_CSCOR( IF_CSCOR   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS
                                  IF_UOM_OUT = LS_SHTPL-SHTPL_UOM ).

*** Check Length Scores
  if ( LS_SCORP_L-SCORP ne LS_SHTPW-SHTPW ) or
***  Check Cross Scores
     ( LS_SCORP_C-SCORP ne LS_SHTPL-SHTPL ).
    RF_OKAY = ABAP_FALSE.
  endif.

endmethod.
method CONSTRUCTOR.

*** Do super
  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Score adjust Mode
  ME->INIT_SADMO( ).

endmethod.
method DEL_ALL_SCORES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Scores
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                   IF_INUSE = ABAP_TRUE ).

*** Free all
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

endmethod.
method DELETE_SCORE.

  check IR_GATE is bound.
  IR_GATE->DO_FREE( ).

  check IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORE_DELETED ).

endmethod.
method GET_BOXPA.

*** Will be implemented in special manager

endmethod.
method GET_CURR_SCORES.

  data:          LS_SCORP           type        ZVCXI_P0SS_S_SCORP.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SCORE        type ref to ZCL_VCXI_P0SS_PR_SCORE.
  field-symbols: <S_SCORE>          type        ZVCXI_P0SS_S_SCORE.

***------------------------------------------------------------------------------------------------
*** Get all Scores
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = IF_SORTED ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
        check LR_PR_SCORE is bound.
        append initial line to RT_SCORE assigning <S_SCORE>.

***     Get Score Number and Count
        LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = <S_SCORE>-CSCOR
                                          EF_NSCOR = <S_SCORE>-NSCOR ).

        LS_SCORP = LR_PR_SCORE->GET_SCORP( ).
        move-corresponding LS_SCORP to <S_SCORE>.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_CUST_PRSTY.

    if ME->R_CUST_PRSTY is not bound.
      ME->HANDLE_INIT_REFERENCES( ).
    endif.

    RR_CUST_PRSTY = ME->R_CUST_PRSTY.

  endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FCUSD.

  if ME->R_CUST_PRSTY is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_CUST_PRSTY is bound.
*** Get Custom Design from Product Style Customizing
  move ME->R_CUST_PRSTY->CHECK_CUST_DESIGN( ) to RF_FCUSD.

endmethod.
method GET_JOIPO.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOIPO = RF_JOIPO ).

endmethod.
method GET_PANOR.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY      to RF_PANOR.

endmethod.
method GET_PANOR_DESCR.

  data: LF_PANOR type ZVCXI_P0SS_PANOR.

  LF_PANOR = ME->GET_PANOR( ).

  RF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PANOR_DESCR( IF_PANOR = LF_PANOR ).

endmethod.
method GET_PSCOC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSCOC ).
  move LS_PARAM-ATWRT to RF_PSCOC.

endmethod.
method GET_PSCOC_DESCR.

  data: LF_PSCOC      type ZVCXI_P0SS_PSCOC.
  data: LS_TC333T     type ZVCXI_P0S_TC333T.

  LF_PSCOC = ME->GET_PSCOC( ).

*** Get Score Pressure Description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC333T into LS_TC333T
                                                with key PSCOR = LF_PSCOC
                                                         LANGU = SY-LANGU.
  check SY-SUBRC eq 0.
  move LS_TC333T-DESCR to RF_DESCR.

endmethod.
method GET_PSCOL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSCOL ).
  move LS_PARAM-ATWRT to RF_PSCOL.

endmethod.
method GET_PSCOL_DESCR.

  data: LF_PSCOL      type ZVCXI_P0SS_PSCOL.
  data: LS_TC333T     type ZVCXI_P0S_TC333T.

  LF_PSCOL = ME->GET_PSCOL( ).

*** Get Score Pressure Description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC333T into LS_TC333T
                                                with key PSCOR = LF_PSCOL
                                                         LANGU = SY-LANGU.
  check SY-SUBRC eq 0.
  move LS_TC333T-DESCR to RF_DESCR.

endmethod.
method GET_PTYPE.

*** Will be redefined.

endmethod.
method GET_SCORES_CUST.

  data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT.
  data: LF_PANOR   type ZVCXI_P0SS_PANOR,
        LF_WERKS   type WERKS_D,
        LF_PTYPE   type ZVCXI_P0S_PTYPE,
        LF_JOIPO   type ZVCXI_P0S_JOIPO,
        LF_BOXPA   type ZVCXI_P0SS_BOXPA,
        LF_DCONF   type DATS.

  if ME->R_CUST_PRSTY is not bound.
    move ABAP_TRUE to EF_CHANGED.
    exit.
  endif.

*** Collect generall Data
  LF_PANOR = ME->GET_PANOR( ).
  LF_WERKS = ME->GET_WERKS( ).
  LF_BOXPA = ME->GET_BOXPA( ).

*** Joint Position and Product Type
  LF_JOIPO = ME->GET_JOIPO( ).
  LF_PTYPE = ME->GET_PTYPE( ).
  LF_DCONF = ME->GET_DCONF( ).

*** Collect Elements
  LT_ELEMENT = ME->R_PR_SPEC->GET_PRSTY_ELEMENTS( ).

  ME->R_CUST_PRSTY->GET_PRSTY_SCORES( exporting IF_BOXPA   = LF_BOXPA
                                                IF_PANOR   = LF_PANOR
                                                IT_ELEMENT = LT_ELEMENT
                                                IF_WERKS   = LF_WERKS
                                                IF_PTYPE   = LF_PTYPE
                                                IF_JOIPO   = LF_JOIPO
                                                IF_DATE    = LF_DCONF
                                      importing ET_SCORE   = ET_SCORE
                                                EF_CHANGED = EF_CHANGED ).

  if ET_SCORE ne ME->T_SCORE.
    EF_CHANGED = ABAP_TRUE.
  endif.

endmethod.
method GET_SSCOR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SSCOR ).
  move LS_PARAM-ATWRT to RF_SSCOR.

endmethod.
method GET_SSCOR_DESCR.

  data: LF_SSCOR      type ZVCXI_P0SS_SSCOR.
  data: LS_SSCOR_INFO type ZVCXI_P0SS_S_SSCOR_INFO.

  LF_SSCOR = ME->GET_SSCOR( ).

*** Get Score Status Description
  LS_SSCOR_INFO = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_INFO( IF_SSCOR = LF_SSCOR ).
  RF_DESCR = LS_SSCOR_INFO-SSCOR_DESCR.

endmethod.
method GET_STATUS.

  data:          LF_RETURN_PSCOC type I,
                 LF_RETURN_PSCOL type I.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Score Status
  if ME->CHECK_SSCOR( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Panel Orientation is filled
  if ME->CHECK_PANOR( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Score Pressure is filled
  ME->CHECK_PSCOR( importing EF_RETURN_CROSS  = LF_RETURN_PSCOC
                             EF_RETURN_LENGTH = LF_RETURN_PSCOL ).

  if LF_RETURN_PSCOC = 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

  if LF_RETURN_PSCOL = 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Scores are not initial
  if ME->GET_CURR_SCORES( IF_SORTED = ABAP_FALSE ) is not initial.
*** Do further Checks
*** Check no Score Positon
    case ME->CHECK_SCORP( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

*** Check Sum of Scores against Sheet Dimensions
    if ME->CHECK_TOTAL_SCORP( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Joint Position Panel Orientation Combi
  if ME->CHECK_JOIPO_PANOR( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Add Product Style Customizing Messages
  if ME->R_CUST_PRSTY is bound and
     ME->R_CUST_PRSTY->R_MSG->T_MSG is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Sum of Tapes
  if ME->CHECK_SUM_TAPE( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:          LF_RETURN_PSCOC type I,
                 LF_RETURN_PSCOL type I,
                 LF_MSGV1        type SYMSGV.
  data:          LS_MSG          type /VCXI/CKXM_S_MSG.
  field-symbols: <S_MSG>         type /VCXI/CKXM_S_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Score Status is filled
  case ME->CHECK_SSCOR( ).
    when 0.
***   Score Status is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '125' ).
    when 1.
***   Score Status is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '126' ).
    when 2.
***   Score Status is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '127' ).
  endcase.

*** Check Panel Orientation is filled
  case ME->CHECK_PANOR( ).
    when 0.
***   Panel Orientation is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '101' ).
    when 1.
***   Panel Orientation is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '117' ).
    when 2.
***   Panel Orientation is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '102' ).
  endcase.

*** Check Score Pressure is filled
  ME->CHECK_PSCOR( importing EF_RETURN_CROSS  = LF_RETURN_PSCOC
                             EF_RETURN_LENGTH = LF_RETURN_PSCOL ).

  LF_MSGV1 = 'Cross'(200).
  case LF_RETURN_PSCOC.
    when 0.
***   &1 Score Pressure is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '133'
                               IF_MSGV1 = LF_MSGV1 ).
    when 1.
***   &1 Score Pressure is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '134'
                               IF_MSGV1 = LF_MSGV1 ).
    when 2.
***   &1 Score Pressure is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '135'
                               IF_MSGV1 = LF_MSGV1 ).
  endcase.


  LF_MSGV1 = 'Length'(201).
  case LF_RETURN_PSCOL.
    when 0.
***   &1 Score Pressure is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '133'
                               IF_MSGV1 = LF_MSGV1 ).
    when 1.
***   &1 Score Pressure is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '134'
                               IF_MSGV1 = LF_MSGV1 ).
    when 2.
***   &1 Score Pressure is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '135'
                               IF_MSGV1 = LF_MSGV1 ).
  endcase.


*** Check Scores are not initial
  if ME->GET_CURR_SCORES( IF_SORTED = ABAP_FALSE ) is not initial.
*** Scores are maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '103' ).
*** Do further Checks
*** Check no Score Positon
    case ME->CHECK_SCORP( ).
      when 0.
***     Each Score has a Score Positon > 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '105' ).
      when 1.
***     One ore more Scores have a Score Positon = 0.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '106' ).
      when 2.
***     One ore more Scores have a negative Score Positon.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '130' ).
      when 3.
***     Two ore more Scores have a negative/initial Score Positon.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '131' ).
    endcase.

*** Check Sum of Scores against Sheet Dimensions
    if ME->CHECK_TOTAL_SCORP( ) eq ABAP_TRUE.
***   Sum of Scores match the Sheet Dimenions.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '107' ).
    else.
***   Sum of Scores do not match the Sheet Dimenions.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '108' ).
    endif.

  else.
*** No Scores are maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '104' ).
  endif.

***------------------------------------------------------------------
*** Check Joint Position Panel Orientation Combi
  if ME->CHECK_JOIPO_PANOR( ) eq ABAP_TRUE.
*** Combination of Joint Position and Joint Type is valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '109' ).
  else.
*** Combination of Joint Position and Joint Type is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '110' ).
  endif.

***------------------------------------------------------------------
*** Add Product Style Customizing Messages
  if ME->R_CUST_PRSTY is bound and
     ME->R_CUST_PRSTY->R_MSG->T_MSG is not initial.
    loop at ME->R_CUST_PRSTY->R_MSG->T_MSG into LS_MSG.
      append initial line to IR_MESSAGE->T_MSG assigning <S_MSG>.
      move-corresponding LS_MSG to <S_MSG>.
    endloop.
  elseif ME->R_CUST_PRSTY is not bound.
*** Product Style Customizing Reference can't be assigned.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SSC'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '101' ).
  endif.

***------------------------------------------------------------------
*** Check Sum of Tapes
  if ME->CHECK_SUM_TAPE( ) eq ABAP_TRUE.
*** Sum of Tapes do match Product Sheet Width.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '115' ).
  else.
*** Sum of Tapes do not match Product Sheet Width.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '116' ).
  endif.

endmethod.
method GET_SUM_CSCOR.

  data:          LT_SCORE       type ZVCXI_P0SS_TT_SCORE.
  data:          LS_SCORE       type ZVCXI_P0SS_S_SCORE.
  field-symbols: <F_VALUE>      type any,
                 <F_VALUE_UOM>  type any.

*** Get current scores (but don't sort them)
  LT_SCORE = ME->GET_CURR_SCORES( IF_SORTED = ABAP_FALSE ).

  loop at LT_SCORE into LS_SCORE
                  where CSCOR = IF_CSCOR.

*** Get Sum of Calculated one
    if RS_SCORP-SCORP     is initial and
       RS_SCORP-SCORP_UOM is initial.
      move-corresponding LS_SCORE to RS_SCORP.
      continue.
    endif.
    assign RS_SCORP-SCORP     to <F_VALUE>.
    assign RS_SCORP-SCORP_UOM to <F_VALUE_UOM>.

*** Add Score Position
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <F_VALUE>
                                                        IF_CALCV_UOM_1 = <F_VALUE_UOM>
                                                        IF_CALCV_2     = LS_SCORE-SCORP
                                                        IF_CALCV_UOM_2 = LS_SCORE-SCORP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = <F_VALUE_UOM>
                                              importing EF_CALCV       = <F_VALUE>
                                                        EF_CALCV_UOM   = <F_VALUE_UOM> ).
  endloop.

*** Convert Scores to needed Unit
  call function 'UNIT_CONVERSION_SIMPLE'
    exporting
      INPUT    = RS_SCORP-SCORP
      UNIT_IN  = RS_SCORP-SCORP_UOM
      UNIT_OUT = IF_UOM_OUT
    importing
      OUTPUT   = RS_SCORP-SCORP
    exceptions
      others   = 9.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  else.
    move IF_UOM_OUT to RS_SCORP-SCORP_UOM.
  endif.

endmethod.
method GET_SUM_TAPES.

  data:          LS_TAPOS           type        ZVCXI_P0SS_S_TAPOS.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_TAPE      type ref to ZCL_VCXI_P0SS_PR_MS_TAPE.
  field-symbols: <F_VALUE>          type        any,
                 <F_VALUE_UOM>      type        any.

***------------------------------------------------------------------------------------------------
*** Get all Tapes
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_TAPE=>C_IPRVT_P0_MS_TAPE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_TAPE.
        check LR_PR_MS_TAPE is bound.

***     Add Tape Position
        LS_TAPOS = LR_PR_MS_TAPE->GET_TAPOS( ).

***     Get Sum of Calculated one
        if RS_TAPOS-TAPOS     is initial and
           RS_TAPOS-TAPOS_UOM is initial.
          move-corresponding LS_TAPOS to RS_TAPOS.
          continue.
        endif.
        assign RS_TAPOS-TAPOS     to <F_VALUE>.
        assign RS_TAPOS-TAPOS_UOM to <F_VALUE_UOM>.


        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting IF_CALCV_1     = <F_VALUE>
                    IF_CALCV_UOM_1 = <F_VALUE_UOM>
                    IF_CALCV_2     = LS_TAPOS-TAPOS
                    IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                    IF_UOM         = <F_VALUE_UOM>
          importing EF_CALCV       = <F_VALUE>
                    EF_CALCV_UOM   = <F_VALUE_UOM> ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.


*** Convert Tape Position to needed Unit
  call function 'UNIT_CONVERSION_SIMPLE'
    exporting
      INPUT    = RS_TAPOS-TAPOS
      UNIT_IN  = RS_TAPOS-TAPOS_UOM
      UNIT_OUT = IF_UOM_OUT
    importing
      OUTPUT   = RS_TAPOS-TAPOS
    exceptions
      others   = 9.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  else.
    move IF_UOM_OUT to RS_TAPOS-TAPOS_UOM.
  endif.

endmethod.
method GET_TPRST_PRSTY.

  check ME->R_PR_SPEC is bound.
  EF_TPRST = ME->R_PR_SPEC->GET_TPRST( ).
  EF_PRSTY = ME->R_PR_SPEC->GET_PRSTY( ).

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_ADJUST_SCORES.

  data:          LF_SSCOR           type        ZVCXI_P0SS_SSCOR,
                 LF_ISCOR           type        ZVCXI_P0SS_ISCOR,
                 LF_INDEX           type        I.
  data:          LS_SCORP_DIFF      type        ZVCXI_P0SS_S_SCORP,
                 LS_SCORP           type        ZVCXI_P0SS_S_SCORP,
                 LS_SCORE_CHANGED   type        ZVCXI_P0SS_S_SCORE.
  data:          LT_SCORE_CHANGED   type        ZVCXI_P0SS_TT_SCORE,
                 LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SCORE        type ref to ZCL_VCXI_P0SS_PR_SCORE.

  field-symbols: <S_SCORE>          type        ZVCXI_P0SS_S_SCORE.

  ME->CHECK_CUST_PRSTY( ).

  LF_SSCOR = ME->GET_SSCOR( ).

*** Check Score Status Calculation Method -> half automatic -> adjust
  if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) eq '2'.

    move IT_GATE to LT_GATE.

*** Sort Incomming Changes
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Collect Changes
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.
          append initial line to LT_SCORE_CHANGED assigning <S_SCORE>.

***       Get Score Number and Count
          LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = <S_SCORE>-CSCOR
                                            EF_NSCOR = <S_SCORE>-NSCOR ).

          LS_SCORP = LR_PR_SCORE->GET_SCORP( ).
          move-corresponding LS_SCORP to <S_SCORE>.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***  Adjust Current Scores
    loop at ME->T_SCORE assigning <S_SCORE>.
      LF_INDEX = SY-TABIX.
      read table LT_SCORE_CHANGED into LS_SCORE_CHANGED
        with key CSCOR = <S_SCORE>-CSCOR
                 NSCOR = <S_SCORE>-NSCOR.

***   Score has changed
      if SY-SUBRC        eq 0                      and
         <S_SCORE>-SCORP ne LS_SCORE_CHANGED-SCORP.
        LS_SCORP_DIFF-SCORP = LS_SCORP_DIFF-SCORP + ( <S_SCORE>-SCORP - LS_SCORE_CHANGED-SCORP ).

***     Save new Score Position
        <S_SCORE>-SCORP = LS_SCORE_CHANGED-SCORP.

***   Score has not really changed
      elseif SY-SUBRC        eq 0                      and
             <S_SCORE>-SCORP eq LS_SCORE_CHANGED-SCORP.
        continue.

***   Score is not changed -> but we have something to adjust.
      elseif SY-SUBRC            ne 0           and
             LS_SCORP_DIFF-SCORP is not initial.

***     Check if we have to adjust last or next
        if ME->F_SADMO eq C_SADMO_LAST.
          clear: LF_ISCOR.
          concatenate <S_SCORE>-CSCOR <S_SCORE>-NSCOR into LF_ISCOR.
          check ME->CHECK_LAST_SCORE( IF_ISCOR = LF_ISCOR ) eq ABAP_TRUE.
        endif.

***     Save Adjusted one
        <S_SCORE>-SCORP = <S_SCORE>-SCORP + LS_SCORP_DIFF-SCORP.
        clear: LS_SCORP_DIFF-SCORP.

***     Set changes to Score
        ME->SET_SCORE( IS_SCORE = <S_SCORE>
                       IF_INDEX = LF_INDEX ).

      endif.

    endloop.

  endif.

*** Check Score Status Calculation Method -> not automatic
  if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) ne '1'.
*** Adjust Score Number's (Add delete Score)
    ME->ADJUST_SCORE_NUMBER( ).
  endif.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORES_CHANGED ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_RECALC_SCORES.
      ME->HANDLE_RECALC_SCORES( ).
    when C_IEVNT_I_ADJUST_SCORES.
      ME->HANDLE_ADJUST_SCORES( IT_GATE = IT_GATE_PROVIDER ).
    when C_IEVNT_I_INIT_SCORE_ADJUST.
      ME->HANDLE_INIT_SCORE_ADJUST( ).
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).
    when C_IEVNT_I_INIT_SCORES.
      ME->HANDLE_INIT_SCORES( IT_GATE = IT_GATE_PROVIDER ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE        is bound and
       LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PR_SPEC.
  endtry.

  if  ME->R_PR_SPEC is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
       LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SHEET.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PR_SHEET.
  endtry.

  if ME->R_PR_SHEET is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Closure
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_CLOS.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_CLOS.
    endtry.
  endloop.

  if ME->R_PR_CLOS is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** The Standard check and load Customizing
  ME->CHECK_CUST_PRSTY( ).

endmethod.
method HANDLE_INIT_SCORE_ADJUST.

  data:          LF_SSCOR           type        ZVCXI_P0SS_SSCOR.

*** Start negativ
  move ABAP_FALSE to ME->F_SCORE_ADJ.

  ME->CHECK_CUST_PRSTY( ).

  LF_SSCOR = ME->GET_SSCOR( ).

*** Check Score Status Calculation Method -> half automatic -> adjust
  case  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ).
    when '1'.
***   No Adjust
      move ABAP_FALSE to ME->F_SCORE_ADJ.

    when '2'.
***   Adjust allowed half
      move ABAP_UNDEFINED to ME->F_SCORE_ADJ.

    when '3'.
***   Adjust allowed totally
      move ABAP_TRUE to ME->F_SCORE_ADJ.

    when others.
***   No Adjust
      move ABAP_FALSE to ME->F_SCORE_ADJ.

  endcase.

endmethod.
method HANDLE_INIT_SCORES.

*** Check if Score Manager is Activated -> and should have scores
  read table IT_GATE with key TABLE_LINE = ME->R_GATE
                     transporting no fields.
  check SY-SUBRC = 0 or
        ME->F_INIT_SCORES eq ABAP_TRUE.

  if ME->F_INIT_SCORES eq ABAP_FALSE.
    move ABAP_TRUE to ME->F_INIT_SCORES.
  endif.

*** Get current Scores
  ME->T_SCORE = ME->GET_CURR_SCORES( ).

  check lines( IT_GATE ) ge lines( ME->T_SCORE ).
  move ABAP_FALSE to ME->F_INIT_SCORES.

endmethod.
method HANDLE_RECALC_SCORES.

  data: LF_SSCOR   type ZVCXI_P0SS_SSCOR.
  data: LF_CHANGED type ABAP_BOOL.

*** Check Product Style Customizing is valid
  ME->CHECK_CUST_PRSTY( ).

  LF_SSCOR = ME->GET_SSCOR( ).

  if LF_SSCOR is initial.
*** Delete all Scores if the Score Calculation logic is initial
    ME->DEL_ALL_SCORES( ).
    clear: ME->T_SCORE.
    exit.
  endif.

*** Check Score Status Calculation Method -> only automatic -> recalc
  if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = LF_SSCOR ) eq '1'.

*** Get Scores
    ME->GET_SCORES_CUST( importing ET_SCORE   = ME->T_SCORE
                                   EF_CHANGED = LF_CHANGED ).

  elseif ME->R_CUST_PRSTY          is bound   and
         ME->R_CUST_PRSTY->F_TPRST is initial and
         ME->R_CUST_PRSTY->F_PRSTY is initial.
*** No Consistent Productstyle Customizing
    clear: ME->T_SCORE.
    LF_CHANGED = ABAP_TRUE.
  endif.

*** Update Scores if they are changed
  check LF_CHANGED eq ABAP_TRUE.

  if ME->T_SCORE is initial.
*** Delete all Scores
    ME->DEL_ALL_SCORES( ).
  else.
    ME->UPDATE_SCORES( ).
  endif.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORES_CHANGED ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_SADMO.

  data:          LS_ATTRI         type        /VCXI/VKS_S_ATTRI.

***----------------------------------------------------------------------------
*** Get Score Adjust mode (by Attribute)
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SADMO ).
    catch /VCXI/CX_CKX.
      clear LS_ATTRI.
  endtry.

  if LS_ATTRI is not initial.
    condense LS_ATTRI-ATTVA no-gaps.
    move LS_ATTRI-ATTVA to ME->F_SADMO.
  endif.

endmethod.
method IS_MS_TAPE_ACTIVE.

  data:          LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definition
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

*** Check if Tape is defined
  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    check LS_PRVDR_DEF-IPRVT = ZCL_VCXI_P0SS_PR_MS_TAPE=>C_IPRVT_P0_MS_TAPE.
    move ABAP_TRUE to RF_RETURN.
    exit.
  endloop.

endmethod.
method SET_PANOR.

  data:  LF_CHANGED type  ABAP_BOOL.
  data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.

  if IF_PANOR is not initial.
    move IF_PANOR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.
  else.
    clear LS_LEOKY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PANOR_CHANGED ).
  endif.

endmethod.
method SET_PSCOC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSCOC ).

  move IF_PSCOC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PSCOR_CHANGED ).
  endif.

endmethod.
method SET_PSCOL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSCOL ).

  move IF_PSCOL to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PSCOR_CHANGED ).
  endif.

endmethod.
method SET_SCORE.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_SCORP           type        ZVCXI_P0SS_S_SCORP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SCORE        type ref to ZCL_VCXI_P0SS_PR_SCORE.

***------------------------------------------------------------------------------------------------
*** Get all Scores if we are not in create mode
  if IF_CREATE eq ABAP_FALSE or
     IF_INDEX  is supplied.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index IF_INDEX.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCORE.
    endtry.

  endif.

***------------------------------------------------------------------------------------------------
*** Create Score
  if LR_GATE     is not bound and
     LR_PR_SCORE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    if LR_GATE->IS_INUSE( ) ne ABAP_TRUE.
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Get Score Reference
    move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
  endif.

***------------------------------------------------------------------------------------------------
*** Set Score Defintion
  if IF_CREATE eq ABAP_TRUE or
     IF_INDEX  is supplied.

    check LR_PR_SCORE is bound.

*** Set Score Categorie and Number
    LR_PR_SCORE->SET_ISCOR( IF_CSCOR = IS_SCORE-CSCOR
                            IF_NSCOR = IS_SCORE-NSCOR ).

  endif.

*** Set Score Position
  move-corresponding IS_SCORE to LS_SCORP.
  LR_PR_SCORE->SET_SCORP( IS_SCORP = LS_SCORP ).

endmethod.
method SET_SSCOR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SSCOR ).

  move IF_SSCOR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SSCOR_CHANGED ).
  endif.

endmethod.
method UPDATE_SCORES.

  data:  LS_SCORE           type        ZVCXI_P0SS_S_SCORE,
         LS_SCORP           type        ZVCXI_P0SS_S_SCORP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SCORE        type ref to ZCL_VCXI_P0SS_PR_SCORE.

***------------------------------------------------------------------------------------------------
*** Get all Scores
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SCORE=>C_IPRVT_P0_SCORE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

*** Uupdate Scores or create new one
  loop at ME->T_SCORE into LS_SCORE.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Update Score
      LR_PR_SCORE->SET_ISCOR( IF_CSCOR = LS_SCORE-CSCOR
                              IF_NSCOR = LS_SCORE-NSCOR ).

***   Set Score Position
      move-corresponding LS_SCORE to LS_SCORP.
      LR_PR_SCORE->SET_SCORP( IS_SCORP = LS_SCORP ).

***   Remvoe from List of available Scores
      delete LT_GATE where TABLE_LINE eq LR_GATE.

    else.
***   Create new Score
      ME->SET_SCORE( IS_SCORE  = LS_SCORE
                     IF_CREATE = ABAP_TRUE ).
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Remove Scores that are no longer needed
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

endmethod.
