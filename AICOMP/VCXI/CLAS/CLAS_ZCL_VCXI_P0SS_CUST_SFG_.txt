
class ZCL_VCXI_P0SS_CUST_SFG definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_FLPRI type ZVCXI_P0SS_FLPRI read-only .
  data F_FLPRO type ZVCXI_P0SS_FLPRO read-only .
  data F_FPRFI type ZVCXI_P0SS_FPRFS read-only .
  data F_FPRFO type ZVCXI_P0SS_FPRFS read-only .
  data F_MCOPR type ZVCXI_P0SS_MCOPR read-only .
  data F_NOCOI type ZVCXI_P0S_NOCOL read-only .
  data F_NOCOO type ZVCXI_P0S_NOCOL read-only .
  data F_PRCAI type ZVCXI_P0SS_PRCAN read-only .
  data F_PRCAO type ZVCXI_P0SS_PRCAN read-only .
  data F_PRTYI type ZVCXI_P0SS_PRTYI read-only .
  data F_PRTYO type ZVCXI_P0SS_PRTYO read-only .
  data F_USEIN type ZVCXI_P0SS_USEIN read-only .
  data S_BAWGP type ZVCXI_PCS_S_BAWGP read-only .
  data S_BAWGT type ZVCXI_PCS_S_BAWGT read-only .
  data S_CALIP type ZVCXI_P0SS_S_CALIP read-only .
  data T_SP_INK_I type ZVCXI_P0SS_TT_SP_INK read-only .
  data T_SP_INK_O type ZVCXI_P0SS_TT_SP_INK read-only .
  data T_SP_MARK_I type ZVCXI_P0SS_TT_SP_MARK read-only .
  data T_SP_MARK_O type ZVCXI_P0SS_TT_SP_MARK read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_P0_SFG
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P0SS_CUST_SFG
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SETID_P0S_SFG type /VCXI/CKXC_SETID value 'ZVCXI_P0S_SFG'. "#EC NOTEXT
private section.

  methods INIT_SP_INK_MARK
    importing
      !IT_SETVA type /VCXI/CKXC_TT_SETVA
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_CUST_SFG definition
class ZCL_VCXI_P0SS_CUST_SFG implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC     type        /VCXI/CKXC_S_MAPVC,
         LS_MAPVN     type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Component SFG Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_SFG
                                               IF_OBJNUM = LF_OBJNUM ).
***   Check if Classification is active
      read table LT_SETVA into LS_SETVA index 1.
      if  LS_SETVA-ATNAM is initial.
        clear: LF_OBJNUM.
        concatenate ME->F_MATNR ME->F_WERKS into LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_SFG
                                                 IF_OBJNUM = LF_OBJNUM ).
      endif.

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVC,
               LS_MAPVN.

        case LS_SETVA-MAPID.
***       Print Inside
          when 'FLPRI'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FLPRI.

          when 'PRTYI'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PRTYI.

          when 'NOCOI'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_NOCOI.

          when 'FPRFI'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FPRFI.

          when 'PRCAI'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PRCAI.

***       Print Outside
          when 'FLPRO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FLPRO.

          when 'PRTYO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PRTYO.

          when 'NOCOO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_NOCOO.

          when 'FPRFO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FPRFO.

          when 'PRCAO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PRCAO.

***       Basic Informations
          when 'BAWGT'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_BAWGT-BAWGT.
            move LS_MAPVN-ATFLV_UOM to ME->S_BAWGT-BAWGT_UOM.

          when 'BAWGP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_BAWGP-BAWGP.
            move LS_MAPVN-ATFLV_UOM to ME->S_BAWGP-BAWGP_UOM.

          when 'CALIP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_CALIP-CALIP.
            move LS_MAPVN-ATFLV_UOM to ME->S_CALIP-CALIP_UOM.

          when 'MCOPR'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_MCOPR.

          when 'USEIN'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_USEIN.

        endcase.
      endloop.

***   Initialize Ink/Marking Information
      ME->INIT_SP_INK_MARK( IT_SETVA = LT_SETVA ).

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_P0_SFG.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
method INIT_SP_INK_MARK.

  data:          LF_TYPE       type STRING,
                 LF_PRSID      type ZVCXI_P0S_PRSID,
                 LF_INDEX      type NUMC2,
                 LF_FIELD      type STRING.
  data:          LS_SETVA      type /VCXI/CKXC_S_SETVA,
                 LS_MAPVN      type /VCXI/CKXC_S_MAPVN,
                 LS_MAPVC      type /VCXI/CKXC_S_MAPVC.
  data:          LT_SETVA      type /VCXI/CKXC_TT_SETVA.
  field-symbols: <S_SP_INK>    type ZVCXI_P0SS_S_SP_INK,
                 <S_SP_MARK>   type ZVCXI_P0SS_S_SP_MARK.

  move IT_SETVA to LT_SETVA.
  sort LT_SETVA by MAPID.

  loop at LT_SETVA into LS_SETVA where MAPID cp 'INK/*/*/*'
                                   or  MAPID cp 'MARK/*/*/*'.
*** Split into its parts
    split LS_SETVA-MAPID at '/' into LF_TYPE LF_PRSID LF_INDEX LF_FIELD.

*** Get Line
    case LF_TYPE.
      when 'INK'.
        case LF_PRSID.
          when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
            read table ME->T_SP_INK_I index LF_INDEX assigning <S_SP_INK>.
            if SY-SUBRC ne 0.
              append initial line to ME->T_SP_INK_I assigning <S_SP_INK>.
            endif.
          when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
            read table ME->T_SP_INK_O index LF_INDEX assigning <S_SP_INK>.
            if SY-SUBRC ne 0.
              append initial line to ME->T_SP_INK_O assigning <S_SP_INK>.
            endif.
        endcase.
      when 'MARK'.
        case LF_PRSID.
          when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
            read table ME->T_SP_MARK_I index LF_INDEX assigning <S_SP_MARK>.
            if SY-SUBRC ne 0.
              append initial line to ME->T_SP_MARK_I assigning <S_SP_MARK>.
            endif.
          when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
            read table ME->T_SP_MARK_O index LF_INDEX assigning <S_SP_MARK>.
            if SY-SUBRC ne 0.
              append initial line to ME->T_SP_MARK_O assigning <S_SP_MARK>.
            endif.
        endcase.
    endcase.

    read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
    read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.

*** Set Value
    case LF_TYPE.
      when 'INK'.
        case LF_FIELD.
***       Color Code
          when 'COLCO'.
            move LS_MAPVC-VAMAP     to <S_SP_INK>-COLCO.

***       Coverage
          when 'COVRG'.
            move LS_MAPVN-ATFLV     to <S_SP_INK>-COVRG.
            move LS_MAPVN-ATFLV_UOM to <S_SP_INK>-COVRG_UOM.
        endcase.

      when 'MARK'.
        case LF_FIELD.
***       Marking Type
          when 'TMARK'.
            move LS_MAPVC-VAMAP     to <S_SP_MARK>-TMARK.

***       Marking Position
          when 'MARKP'.
            move LS_MAPVC-VAMAP     to <S_SP_MARK>-MARKP.

***       Number Print for Markings
          when 'NUMPR'.
            move LS_MAPVC-VAMAP     to <S_SP_MARK>-NUMPR.

***       Assigned Color Number
          when 'ACONO'.
            move LS_MAPVC-VAMAP     to <S_SP_MARK>-ACONO.

***       Coverage
          when 'COVRG'.
            move LS_MAPVN-ATFLV     to <S_SP_MARK>-COVRG.
            move LS_MAPVN-ATFLV_UOM to <S_SP_MARK>-COVRG_UOM.

        endcase.
    endcase.
  endloop.

endmethod.
