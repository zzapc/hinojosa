
class ZCL_VCXI_XCE_MM_MMEXT definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .

  data F_CHANGED type ABAP_BOOL read-only .
  data F_CNTXT type ZVCXI_XCE_MM_CNTXT read-only .
  data F_MATNR type MATNR read-only .
  data F_WERKS type WERKS_D read-only .

  methods CHECK_CNTXT
    importing
      !IF_CNTXT type ZVCXI_XCE_MM_CNTXT
    raising
      /VCXI/CX_CKX .
  methods COPY
    importing
      !IF_MATNR type MATNR optional
      !IF_WERKS type WERKS_D optional
    returning
      value(RR_MMEXT) type ref to ZCL_VCXI_XCE_MM_MMEXT
    raising
      /VCXI/CX_CKX .
  class-methods DECRYPT_GUID
    importing
      value(IF_GUID) type /VCXI/CKX_GUID
    exporting
      !EF_MATNR type MATNR
      !EF_WERKS type WERKS_D
      !EF_CNTXT type ZVCXI_XCE_MM_CNTXT
    raising
      /VCXI/CX_CKX .
  class-methods ENCRYPT_GUID
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CNTXT type ZVCXI_XCE_MM_CNTXT optional
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  class-methods GET_MCOPR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    exporting
      !ER_CNTXT_MGR type ref to ZCL_VCXI_XCE_MM_CNTXT_MGR
      !ER_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  class-methods MATERIAL_BUCHEN
    changing
      !CS_MARA type MARA
      !CS_MARC type MARC
      !CT_KTEXT type MAT_KTEXT optional
      !CT_MEINH type MAT_MEINH optional
      !CT_MERRDAT type MERRDAT_TT optional
    raising
      /VCXI/CX_CKX .
  methods SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_EXTVAL
    importing
      !IS_EXTVAL type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D optional
    raising
      /VCXI/CX_CKX .
  class-methods TRIGGER_COPRODUCT
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D .
  methods UPDATE_BY_FG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
protected section.

  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods CALC_VOLUME
    changing
      !CS_MEINH type SMEINH
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GUID type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_GUID type /VCXI/CKX_GUID
    returning
      value(RR_MMEXT) type ref to ZCL_VCXI_XCE_MM_MMEXT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods HANDLE_CREATED
    for event CREATED of /VCXI/IF_CKX_OBJECT .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods UPDATE_KTEXT
    importing
      !IS_MARA type MARA
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CT_KTEXT type MAT_KTEXT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MARA
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CS_MARA type MARA
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MARC
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CS_MARC type MARC
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MEINH
    importing
      !IS_MARA type MARA
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CT_MEINH type MAT_MEINH
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SAP
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_UPDATE_KTEXT type ABAP_BOOL
      !IF_UPDATE_MEINH type ABAP_BOOL
    changing
      !CS_MARA type MARA
      !CS_MARC type MARC
      !CT_KTEXT type MAT_KTEXT
      !CT_MEINH type MAT_MEINH
      !CT_MERRDAT type MERRDAT_TT
    raising
      /VCXI/CX_CKX .
private section.

  types:
    begin of YS_GUID_KEY,
           MATNR type MATNR,
           WERKS type WERKS_D,
           CNTXT type ZVCXI_XCE_MM_CNTXT,
         end of YS_GUID_KEY .

  class-methods ENHANCE_GUID
    importing
      !IF_GUID type /VCXI/CKX_GUID
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCE_MM_MMEXT definition
class ZCL_VCXI_XCE_MM_MMEXT implementation.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_GUID.

    RF_GUID = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                                   IF_WERKS = ME->F_WERKS ).

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

    data: LF_GUID  type /VCXI/CKX_GUID.

*** Enhance GUID with Context
    LF_GUID = ENHANCE_GUID( IF_GUID ).

    if LINE_EXISTS( T_INSTANCE[ GUID = LF_GUID ] ).
      RR_OBJECT = T_INSTANCE[ GUID = LF_GUID ]-R_OBJECT.
    else.
      RR_OBJECT = ZCL_VCXI_XCE_MM_MMEXT=>FACTORY( IF_GUID = LF_GUID ).
      if RR_OBJECT is bound.
        cast ZCL_VCXI_XCE_MM_MMEXT( RR_OBJECT )->LOAD_FROM_DB( ).
      endif.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_LOG.

    RS_LOG = ME->S_LOG.

  endmethod.
  method CALC_VOLUME.

    data: LS_CALCV_AREA   type ZVCXI_XCS_S_CALCV,
          LS_CALCV_VOLUME type ZVCXI_XCS_S_CALCV.


    check CS_MEINH-LAENG is not initial and
          CS_MEINH-BREIT is not initial and
          CS_MEINH-HOEHE is not initial and
          CS_MEINH-VOLUM is     initial.

***--------------------------------------------------------------------------------------
*** Calculate Area (in SI Unit)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_MEINH-LAENG
                                                        IF_CALCV_UOM_1 = CS_MEINH-MEABM
                                                        IF_CALCV_2     = CS_MEINH-BREIT
                                                        IF_CALCV_UOM_2 = CS_MEINH-MEABM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_AREA-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_AREA-CALCV_UOM ).

*** Calculate Volume (in SI Unit)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_AREA-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_AREA-CALCV_UOM
                                                        IF_CALCV_2     = CS_MEINH-HOEHE
                                                        IF_CALCV_UOM_2 = CS_MEINH-MEABM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_VOLUME-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_VOLUME-CALCV_UOM ).

***--------------------------------------------------------------------------------------
*** Set Volume based on given Unit
    if CS_MEINH-VOLEH is not initial.
      try.
***       Convert Unit
          ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = CS_MEINH-VOLEH
                                                   changing  CS_CALCV = LS_CALCV_VOLUME ).
***       Set Volume
          CS_MEINH-VOLUM = LS_CALCV_VOLUME-CALCV.
        catch CX_SY_CONVERSION_OVERFLOW.
          clear CS_MEINH-VOLUM.
      endtry.

    else.
***   Determine Unit and Set Value
      call function 'UNIT_QUANTITY_SWITCH'
        exporting
          IMP_VALUE         = LS_CALCV_VOLUME-CALCV
          IMP_UNIT          = LS_CALCV_VOLUME-CALCV_UOM
        importing
          EXP_VALUE         = CS_MEINH-VOLUM
*         OVERFLOW          = LF_OVERFLOW
        changing
          EXP_UNIT          = CS_MEINH-VOLEH
        exceptions
          UNIT_NOT_FOUND    = 1
          OUTPUT_NOT_TYPE_P = 2
          others            = 3.
    endif.

  endmethod.
  method CHECK_CNTXT.

    if IF_CNTXT ne ME->F_CNTXT.
***   Material Extension Context &1 is not &2 as expected.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '101'
                                            IF_MSGV1 = IF_CNTXT
                                            IF_MSGV2 = ME->F_CNTXT ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    ZCL_VCXI_XCE_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                         importing EF_MATNR = ME->F_MATNR
                                                   EF_WERKS = ME->F_WERKS
                                                   EF_CNTXT = ME->F_CNTXT ).
*** Set Event Handler
    set handler ME->HANDLE_CREATED for ME.
    set handler ME->HANDLE_CHANGED for ME.

  endmethod.
  method COPY.

*** Create new Instance
    RR_MMEXT = ZCL_VCXI_XCE_MM_MMEXT=>FACTORY( IF_GUID = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = IF_MATNR
                                                                                              IF_WERKS = IF_WERKS
                                                                                              IF_CNTXT = ME->F_CNTXT ) ).

  endmethod.
  method DECRYPT_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    LS_GUID_KEY = IF_GUID.

    EF_MATNR = LS_GUID_KEY-MATNR.
    EF_WERKS = LS_GUID_KEY-WERKS.
    EF_CNTXT = LS_GUID_KEY-CNTXT.

  endmethod.
  method ENCRYPT_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    LS_GUID_KEY-MATNR = IF_MATNR.
    LS_GUID_KEY-WERKS = IF_WERKS.
    LS_GUID_KEY-CNTXT = IF_CNTXT.

    RF_GUID = LS_GUID_KEY.

  endmethod.
  method ENHANCE_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    ZCL_VCXI_XCE_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                         importing EF_MATNR = LS_GUID_KEY-MATNR
                                                   EF_WERKS = LS_GUID_KEY-WERKS
                                                   EF_CNTXT = LS_GUID_KEY-CNTXT ).
    if LS_GUID_KEY-CNTXT is initial.
      select single CNTXT
             into LS_GUID_KEY-CNTXT
             from ZVCXI_XCE_TD100
            where MATNR eq LS_GUID_KEY-MATNR
             and  WERKS eq LS_GUID_KEY-WERKS.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( IF_STRING = |Context couldn't be identified| ).
      endif.
    endif.

    RF_GUID = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = LS_GUID_KEY-MATNR
                                                   IF_WERKS = LS_GUID_KEY-WERKS
                                                   IF_CNTXT = LS_GUID_KEY-CNTXT ).

  endmethod.
  method FACTORY.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_CNTXT type ZVCXI_XCE_MM_CNTXT,
          LF_CLSNA type SEOCLSNAME.


*** Decrypt GUID to identify Context
    ZCL_VCXI_XCE_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                         importing EF_MATNR = LF_MATNR
                                                   EF_WERKS = LF_WERKS
                                                   EF_CNTXT = LF_CNTXT ).

*** Get Class Name based on registered Contexts
    ZCL_VCXI_XCE_MM_CNTXT_MGR=>GET_CNTXT_INFO( exporting IF_CNTXT = LF_CNTXT
                                               importing EF_CLSNA = LF_CLSNA ).


    try.
***     Dynamic Create of Material Extend
        create object RR_MMEXT
          type
            (LF_CLSNA)
          exporting
            IF_GUID = IF_GUID.

***   Catch Creation Errors
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

*** Add to Instance Buffer (if fully qualified)
    if LF_MATNR is not initial and
       LF_WERKS is not initial.
      append value #( GUID     = IF_GUID
                      R_OBJECT = RR_MMEXT ) to T_INSTANCE.
    endif.

  endmethod.
  method GET_MCOPR.

    data: LF_MATNR type MATNR.
    data: LT_MATNR type table of MATNR,
          LT_MAKZ  type table of MAKZ.


***--------------------------------------------------------------------------------------
*** Search for Leading Co-Product
    select MATNR into table LT_MATNR
                 from MAKZ
                where WERKS eq IF_WERKS
                 and  KUPPL eq IF_MATNR.
    check SY-SUBRC eq 0.
    sort LT_MATNR.
    delete adjacent duplicates from LT_MATNR.

*** Check if Cost-Split is valid
    loop at LT_MATNR into LF_MATNR.
      clear LT_MAKZ.
      call function 'MATERIAL_COSTS_SPLIT_READ'
        exporting
          MATNR                 = LF_MATNR
          WERKS                 = IF_WERKS
          DATUM                 = IF_DATE
        tables
          TMAKZ                 = LT_MAKZ
        exceptions
          COSTS_SPLIT_NOT_FOUND = 1
          others                = 2.
      if SY-SUBRC ne 0.
        delete LT_MATNR.
        exit.
      endif.

      read table LT_MAKZ with key KUPPL = IF_MATNR
                         transporting no fields.
      if SY-SUBRC ne 0.
        delete LT_MATNR.
        exit.
      endif.
    endloop.

    RF_MATNR = value #( LT_MATNR[ 1 ] optional ).
    check RF_MATNR is not initial.

***--------------------------------------------------------------------------------------
*** Get Main-Co Product Infos
    select single STDPD, CUOBJ
           into @data(LS_MARC)
           from MARC
          where MATNR eq @RF_MATNR
           and  WERKS eq @IF_WERKS.
    check SY-SUBRC eq 0 and
          LS_MARC-STDPD is not initial.

*** Get Context Manager for Configuration
    ER_CNTXT_MGR = ZCL_VCXI_XCE_MM_CNTXT_MGR=>GET_INSTANCE( IF_CMATN = LS_MARC-STDPD ).
    check ER_CNTXT_MGR is bound.

*** Get SmartVC Configuration
    try.
        ER_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LS_MARC-CUOBJ ) ).
      catch /VCXI/CX_CKX.
        clear ER_SVC.
    endtry.
    check ER_SVC is bound.

  endmethod.
method HANDLE_CHANGED.

  try.
***   Write Change Log Entry
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CREATED.

  try.
***   Write Create Log Entry
      move SY-UNAME     to ME->S_LOG-CREBY.
      get time stamp field ME->S_LOG-CREAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method LOAD_FROM_DB.

    data: LS_TD100 type ZVCXI_XCE_TD100.

*** Load basic Material Master Extension
    select single *
           into LS_TD100
           from ZVCXI_XCE_TD100
          where MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS.
    if SY-SUBRC eq 0.
***   Load current values
      ME->S_LOG   = LS_TD100-S_LOG.
    else.
***   New
      raise event /VCXI/IF_CKX_OBJECT~CREATED.
    endif.

  endmethod.
  method MATERIAL_BUCHEN.

    data: LF_MATNR type MATNR,
          LF_CNTXT type ZVCXI_XCE_MM_CNTXT.
    data: LS_RMMG2 type RMMG2,
          LS_MARA  type MARA.
    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT,
          LT_KTEXT type MAT_KTEXT,
          LT_MEINH type MAT_MEINH.
    data: LR_CNTXT_MGR type ref to ZCL_VCXI_XCE_MM_CNTXT_MGR,
          LR_MMEXT     type ref to ZCL_VCXI_XCE_MM_MMEXT,
          LR_SVC       type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.

    try.
***------------------------------------------------------------------------------------------------
        if CS_MARC-KZKUP eq ABAP_TRUE and CS_MARC-STDPD is initial.
***       Get Infos of Main Co-Product
          GET_MCOPR( exporting IF_MATNR     = CS_MARC-MATNR
                               IF_WERKS     = CS_MARC-WERKS
                     importing ER_CNTXT_MGR = LR_CNTXT_MGR
                               ER_SVC       = LR_SVC ).
          check LR_CNTXT_MGR is bound.

        else.
***------------------------------------------------------------------------------------------------
***       Get Context Manager for Configuration
          LR_CNTXT_MGR = ZCL_VCXI_XCE_MM_CNTXT_MGR=>GET_INSTANCE( IF_CMATN = CS_MARC-STDPD ).
          check LR_CNTXT_MGR is bound.

***------------------------------------------------------------------------------------------------
***       Check if Configuration number is in place
          if CS_MARC-CUOBJ is initial.
***       If not read the New Instance
            call function 'MAIN_PARAMETER_GET_RMMG2'
              importing
                WRMMG2 = LS_RMMG2.
            move LS_RMMG2-NEW_INST to CS_MARC-CUOBJ.
          endif.
          check CS_MARC-CUOBJ is not initial.

***       Get SmartVC Configuration
          try.
              LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = CS_MARC-CUOBJ ) ).
            catch /VCXI/CX_CKX.
              clear LR_SVC.
          endtry.
        endif.

        check LR_SVC is bound.

***------------------------------------------------------------------------------------------------
***     Get Finished Goods which are marked as Multi Quantity Components
        LT_SVCEL = LR_CNTXT_MGR->GET_FG( IR_SVC = LR_SVC ).
        loop at LT_SVCEL into LR_OBJECT.
          LR_SVCEL ?= LR_OBJECT.

***       Get Finished Good Information
          LR_CNTXT_MGR->GET_FG_INFO( exporting IR_SVCEL_FG = LR_SVCEL
                                     importing EF_MATNR    = LF_MATNR
                                               EF_CNTXT    = LF_CNTXT ).
          check LF_CNTXT is not initial.
          if LF_MATNR is initial.
            LF_MATNR = CS_MARC-MATNR.
          endif.

***       Get Material Extension
          try.
              LR_MMEXT ?= ZCL_VCXI_XCE_MM_MMEXT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ENCRYPT_GUID( IF_MATNR = LF_MATNR
                                                                                                           IF_WERKS = CS_MARC-WERKS
                                                                                                           IF_CNTXT = LF_CNTXT ) ).
            catch /VCXI/CX_CKX.
              clear LR_MMEXT.
          endtry.
          check LR_MMEXT is bound.

***       Update by Finished Good
          LR_MMEXT->UPDATE_BY_FG( IR_SVCEL = LR_SVCEL ).

***       Save Material Extension
          LR_MMEXT->SAVE( ).

***------------------------------------------------------------------------------------------------
***       Update SAP Standard
          if LF_MATNR eq CS_MARC-MATNR.
            LR_MMEXT->UPDATE_SAP( exporting IR_SVC          = LR_SVC
                                            IR_SVCEL        = LR_SVCEL
                                            IF_UPDATE_KTEXT = cond #( when CT_KTEXT is supplied then ABAP_TRUE )
                                            IF_UPDATE_MEINH = cond #( when CT_MEINH is supplied then ABAP_TRUE )
                                  changing  CS_MARA         = CS_MARA
                                            CS_MARC         = CS_MARC
                                            CT_KTEXT        = CT_KTEXT
                                            CT_MEINH        = CT_MEINH
                                            CT_MERRDAT      = CT_MERRDAT ).
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        append value #( MSGID = LR_CX_CKX->F_MSGID
                        MSGTY = LR_CX_CKX->F_MSGTY
                        MSGNO = LR_CX_CKX->F_MSGNO
                        MSGV1 = LR_CX_CKX->F_MSGV1
                        MSGV2 = LR_CX_CKX->F_MSGV2
                        MSGV3 = LR_CX_CKX->F_MSGV3
                        MSGV4 = LR_CX_CKX->F_MSGV4
                      ) to CT_MERRDAT.
        raise exception LR_CX_CKX.
    endtry.

  endmethod.
  method SAVE.

    data: LS_TD100 type ZVCXI_XCE_TD100.


*** Pre-Check
    if ME->F_MATNR is initial or
       ME->F_WERKS is initial.
      raise exception type /VCXI/CX_CKX.
    endif.

***----------------------------------------------------------------------------
*** Save basic Material Master Extension
    LS_TD100 = value #( MATNR   = ME->F_MATNR
                        WERKS   = ME->F_WERKS
                        CNTXT   = ME->F_CNTXT
                        S_LOG   = ME->S_LOG ).
    modify ZVCXI_XCE_TD100 from LS_TD100.

  endmethod.
  method SET_EXTVAL.

*    data: LS_EXTVAL type ZVCXI_XCE_MM_S_EXTVAL.
*
**** "Cast" Extension Values
*    LS_EXTVAL = corresponding #( IS_EXTVAL ).

  endmethod.
  method SET_MATNR.

*** Pre-Check
    if ME->F_MATNR is not initial.
      raise exception type /VCXI/CX_CKX.
    endif.

    if IF_WERKS is supplied and
       ( ME->F_WERKS is not initial and
         ME->F_WERKS ne IF_WERKS ).
      raise exception type /VCXI/CX_CKX.
    endif.

***------------------------------------------------------------------------------------------------
*** Update Key Fields
    ME->F_MATNR = IF_MATNR.

    if IF_WERKS is supplied.
      ME->F_WERKS = IF_WERKS.
    endif.

***------------------------------------------------------------------------------------------------
*** Update Instance Buffer
    delete T_INSTANCE where R_OBJECT = ME.
    append value #( GUID     = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                                                    IF_WERKS = ME->F_WERKS
                                                                    IF_CNTXT = ME->F_CNTXT )
                    R_OBJECT = ME ) to T_INSTANCE.

  endmethod.
  method TRIGGER_COPRODUCT.

    data: LS_HEADDATA   type BAPIMATHEAD,
          LS_PLANTDATA  type BAPI_MARC,
          LS_PLANTDATAX type BAPI_MARCX.
    data: LT_MAKZ   type table of MAKZ,
          LT_RETMSG type table of BAPI_MATRETURN2.


    check IF_MATNR is not initial and
          IF_WERKS is not initial.

    call function 'MATERIAL_COSTS_SPLIT_READ'
      exporting
        MATNR                 = IF_MATNR
        WERKS                 = IF_WERKS
      tables
        TMAKZ                 = LT_MAKZ
      exceptions
        COSTS_SPLIT_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      exit.  "No Co-Products defined.
    endif.

    loop at LT_MAKZ into data(LS_MAKZ) where KUPPL ne IF_MATNR.
      LS_HEADDATA = value #( MATERIAL = LS_MAKZ-KUPPL
                             MRP_VIEW = ABAP_TRUE ).
      LS_PLANTDATA  = value #( PLANT = LS_MAKZ-WERKS ).
      LS_PLANTDATAX = value #( PLANT = LS_MAKZ-WERKS ).

      call function 'BAPI_MATERIAL_SAVEDATA'
        destination 'NONE'
        exporting
          HEADDATA       = LS_HEADDATA
          PLANTDATA      = LS_PLANTDATA
          PLANTDATAX     = LS_PLANTDATAX
        tables
          RETURNMESSAGES = LT_RETMSG.

    endloop.

  endmethod.
  method UPDATE_BY_FG.
  endmethod.
  method UPDATE_KTEXT.
  endmethod.
  method UPDATE_MARA.
  endmethod.
  method UPDATE_MARC.
  endmethod.
  method UPDATE_MEINH.

    data: LF_MEINH_IDX type I.
    field-symbols: <S_MEINH>    type SMEINH.


***--------------------------------------------------------------------------------------
*** Verify/Update all Conversions
    loop at CT_MEINH assigning <S_MEINH>.
      LF_MEINH_IDX = SY-TABIX.    "Index of entries that should be ignored

***   Get Denominator/Numerator from customizing or previous MARM entries
      call function 'DIMENSIONCHECK_DIMENSIONLESS'
        exporting
          MEINH                       = <S_MEINH>-MEINH
        exceptions
          DIMENSION_NOT_DIMENSIONLESS = 1
          others                      = 2.
      if SY-SUBRC eq 1.
        call function 'DIMENSIONCHECK_CONVERTABLE'
          exporting
            P_BAS_MEINH      = IS_MARA-MEINS
            P_ALT_MEINH      = <S_MEINH>-MEINH
            P_ZAEHLER        = LF_MEINH_IDX
          importing
            P_UMREZ          = <S_MEINH>-UMREZ
            P_UMREN          = <S_MEINH>-UMREN
          tables
            MEINH            = CT_MEINH
          exceptions
            NOT_CONVERTABLE  = 0  "ignore
            OVERFLOW         = 2
            UNIT_NOT_ALLOWED = 3
            others           = 4.
        if SY-SUBRC ne 0.
          clear: <S_MEINH>-UMREZ, <S_MEINH>-UMREN.
        endif.
      endif.

***   Use Weight and Volumen of MARA
      if <S_MEINH>-MEINH eq IS_MARA-MEINS.
        <S_MEINH>-BRGEW = IS_MARA-BRGEW.
        <S_MEINH>-VOLUM = IS_MARA-VOLUM.
        <S_MEINH>-VOLEH = IS_MARA-VOLEH.
      endif.

***   Calculate Volume
      ME->CALC_VOLUME( changing CS_MEINH = <S_MEINH> ).

    endloop.

*** Remove invalid Conversions
    delete CT_MEINH where UMREZ eq 0
                     or   UMREN eq 0.

  endmethod.
  method UPDATE_SAP.

    data: LS_MARA  type MARA,
          LS_MARC  type MARC.
    data: LT_KTEXT type MAT_KTEXT,
          LT_MEINH type MAT_MEINH.


***------------------------------------------------------------------------------------------------
*** Update Material Client Data
    LS_MARA = CS_MARA.
    ME->UPDATE_MARA( exporting IR_SVC   = IR_SVC
                               IR_SVCEL = IR_SVCEL
                     changing  CS_MARA  = LS_MARA ).
    if LS_MARA ne CS_MARA.
      CS_MARA = LS_MARA.
      call function 'MARA_SET_DATA'
        exporting
          WMARA = CS_MARA.
    endif.

***------------------------------------------------------------------------------------------------
*** Update Description
    if IF_UPDATE_KTEXT eq ABAP_TRUE.
      LT_KTEXT = CT_KTEXT.
      ME->UPDATE_KTEXT( exporting IS_MARA  = CS_MARA
                                  IR_SVC   = IR_SVC
                                  IR_SVCEL = IR_SVCEL
                        changing  CT_KTEXT = LT_KTEXT ).

***   If something changed then update the table
      if LT_KTEXT[] ne CT_KTEXT[].
        CT_KTEXT[] = LT_KTEXT[].
        call function 'MAKT_SET_DATA'
          exporting
            MATNR  = CS_MARA-MATNR
          tables
            WKTEXT = CT_KTEXT.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Update Alternative Units of Measure
    if IF_UPDATE_MEINH eq ABAP_TRUE.
      LT_MEINH = CT_MEINH.
      ME->UPDATE_MEINH( exporting IS_MARA  = CS_MARA
                                  IR_SVC   = IR_SVC
                                  IR_SVCEL = IR_SVCEL
                        changing  CT_MEINH = LT_MEINH ).

***   If something changed then update the table
      if LT_MEINH[] ne CT_MEINH[].
        CT_MEINH[] = LT_MEINH[].
        call function 'MARM_SET_DATA'
          exporting
            MATNR  = CS_MARA-MATNR
          tables
            WMEINH = CT_MEINH.
      endif.
    endif.


***------------------------------------------------------------------------------------------------
*** Update Material Plant Data
    LS_MARC = CS_MARC.
    ME->UPDATE_MARC( exporting IR_SVC   = IR_SVC
                               IR_SVCEL = IR_SVCEL
                     changing  CS_MARC  = LS_MARC ).
    if LS_MARC ne CS_MARC.
      CS_MARC = LS_MARC.
      call function 'MARC_SET_DATA'
        exporting
          WMARC = CS_MARC.
    endif.

  endmethod.
