
class ZCL_VCXI_XCSU_GRID_SHIPUNIT definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  types YS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF .
  types:
    begin of YS_PRVDR_OV.
  include     type        YS_PRVDR_DEF.
  types:  INDEX       type        I,
          SEQUE       type        ZVCXI_XCSU_SEQUE,
          R_GATE      type ref to /VCXI/CL_VKSR_GATE,
          end of YS_PRVDR_OV .
  types:
    YT_PRVDR_OV type standard table of YS_PRVDR_OV .

  data T_PRVDR_OV type YT_PRVDR_OV .
  constants C_ICON_CAUTION type ICON_D value '@09@' ##NO_TEXT.
  constants C_ICON_OKAY type ICON_D value '@08@' ##NO_TEXT.
  data T_PRVDR_DEF_G type /VCXI/VKSR_TT_PRVDR_DEF .

  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods INIT_PRVDR_OV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_QTY
    importing
      !IF_ID type /VCXI/CKX_ID
      !IF_CHECK_DETAIL type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_QTY) type NUMC3
    raising
      /VCXI/CX_CKX .
  methods SET_PRVDR_POS
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_PRVDR_POS_OLD
    importing
      !IF_ID type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods CHANGE_STYLE_SHIPUNIT
    importing
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods CHECK_PRVDR_ADD
    redefinition .
  methods CHECK_PRVDR_DEL
    redefinition .
  methods CHECK_PRVDR_IRRELEVANT
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSU_GRID_SHIPUNIT definition
class ZCL_VCXI_XCSU_GRID_SHIPUNIT implementation.
method ADD_PRVDR.

  data: LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data: LF_ID              type        /VCXI/CKX_ID,
        LF_ID_IMP          type        /VCXI/CKX_ID,
        LF_SHUTY           type        ZVCXI_XCSU_SHUTY,
        LF_SEQUE_C         type        STRING.
  data: LR_PR_SHIPUNIT     type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

*** If we have only one Provider
  if IF_ID is initial and
     lines( ME->T_PRVDR_DEF ) le 1.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
    if SY-SUBRC = 0.
      move LS_PRVDR_DEF-ID to LF_ID_IMP.
    endif.
  else.
    move IF_ID to LF_ID_IMP.
  endif.

  read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID_IMP.

  move  LS_PRVDR_DEF-IPRVT       to LF_ID.
  split LS_PRVDR_DEF-ID at '@' into LF_SHUTY LF_SEQUE_C.

  RR_GATE = SUPER->ADD_PRVDR( IF_ID = LF_ID ).

*** Set right posid.
  ME->SET_PRVDR_POS( IF_ID   = LF_ID_IMP
                     IR_GATE = RR_GATE ).

  try.
      move RR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      check LR_PR_SHIPUNIT is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      RR_GATE->DO_FREE( ).
***   It is not possible to add Provider &1.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '012'
          IF_MSGV1 = LS_PRVDR_DEF-IPRVT ).
  endtry.

  LR_PR_SHIPUNIT->SET_SHUTY( IF_SHUTY = LF_SHUTY ).
  LR_PR_SHIPUNIT->INIT_SHUTY( ).

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->R_GATE->RAISE_EVENTS( ).

*** Init Overview
  ME->INIT_PRVDR_OV( ).

endmethod.
  method CHANGE_STYLE_SHIPUNIT.

    data: LF_STYLE_HOTSPOT type RAW4.
    data: LS_SHIPUNIT_GRID type ZVCXI_XCSU_S_SHIPUNIT_GRID.


*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_SHIPUNIT_GRID.

***--------------------------------------------------------------------------------------
*** Editable
    if ME->F_STYLE_ENABLED = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
      LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
*** Not Editable
    else.
      LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
    endif.


    free CT_STYL.
*** Set General Styles
*** Set Shipping Unit Type = Disabled
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHUTY'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Shipping Unit = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHUNT'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Packaging Pattern override = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_PACKP'
                                IF_STYLE     = LF_STYLE_HOTSPOT "ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Previouse Quantity override = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_PRQTY'
                                IF_STYLE     = LF_STYLE_HOTSPOT "ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Sample Position = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SAPOS'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Sample Base Quantity = Enable
    if LS_SHIPUNIT_GRID-SAPOS is initial.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SAQTY'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
    else.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SAQTY'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

***------------------------------------------------------------------
*** Override Packing Pattern
    if LS_SHIPUNIT_GRID-FOVRR_PACKP ne ABAP_TRUE.
***   Set Packing Pattern = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PACKP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

***------------------------------------------------------------------
*** Override Previouse Quantity
    if LS_SHIPUNIT_GRID-FOVRR_PRQTY ne ABAP_TRUE.
***   Set Previouse Quantity = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRQTY'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

  endmethod.
method CHECK_PRVDR_ADD.

  data:          LF_ACTIV_PRVDR       type        NUMC3,
                 LF_RELEVANT          type        ABAP_BOOL,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.

*** Start negativ
  move ABAP_TRUE to RF_DISABLED.

*** Check provider
  if IF_ID cs '@'.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.
    move ABAP_TRUE to LF_RELEVANT.
  else.
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq IF_ID.
      move ABAP_TRUE to LF_RELEVANT.
      exit.
    endloop.
  endif.

  check LF_RELEVANT eq ABAP_TRUE.
  read table ME->T_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT
                               transporting no fields.
  check SY-SUBRC = 0.

  LF_ACTIV_PRVDR = ME->GET_PRVDR_QTY( IF_ID           = IF_ID
                                      IF_CHECK_DETAIL = ABAP_TRUE ).

*** Check if there are less then maximal Provider
  check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_DEL.

  data:          LF_ACTIV_PRVDR       type        NUMC3,
                 LF_IRRELEVANT        type        ABAP_BOOL,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.

*** Start negativ
  move ABAP_TRUE to RF_DISABLED.
  move ABAP_TRUE to LF_IRRELEVANT.

*** Check if provider is irrelevant
  if IF_ID cs '@'.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.
    clear LF_IRRELEVANT.
  else.
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq IF_ID.
      clear LF_IRRELEVANT.
      exit.
    endloop.
  endif.
*** Irrelevant can be deleted
  if LF_IRRELEVANT eq ABAP_TRUE.
    move ABAP_FALSE to RF_DISABLED.
    exit.
  endif.

*** Check relevant provider can be deleted
  read table ME->T_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT
                               transporting no fields.
  check SY-SUBRC = 0.

  LF_ACTIV_PRVDR = ME->GET_PRVDR_QTY( IF_ID  = IF_ID ).

*** Check if there are more then minimal Provider
  check LF_ACTIV_PRVDR > LS_PRVDR_DEF-QTYMI.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_IRRELEVANT.

  data: LF_SHUTY        type        ZVCXI_XCSU_PMATY,
        LF_SEQUE_C      type        STRING,
        LF_ID           type        /VCXI/CKX_ID,
        LF_RELEVANT     type        ABAP_BOOL.
  data: LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.
  data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT  type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

*** Get Gates of Provider (child)
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        check LR_GATE->GET_PARENT( ) eq ME->R_GATE.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
    clear: LR_PR_SHIPUNIT, LF_SHUTY, LF_RELEVANT.


    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
    if LR_PR_SHIPUNIT is bound.
      move LR_PR_SHIPUNIT->GET_SHUTY( ) to LF_SHUTY.
    endif.

    check LR_PR_SHIPUNIT is bound.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF
            where IPRVT = LR_GATE->F_ID.

      split LS_PRVDR_DEF-ID at '@' into LF_ID LF_SEQUE_C.
      check LF_ID eq LF_SHUTY.
      move ABAP_TRUE to LF_RELEVANT.
      exit.

    endloop.

    check LF_RELEVANT eq ABAP_FALSE.
    move ABAP_TRUE to RF_IRRELEVANT.
    exit.

  endloop.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_XCSU_S_SHIPUNIT_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT.

endmethod.
method DEL_PRVDR.

  data:          LF_SHUTY        type        ZVCXI_XCSU_SHUTY.
  data:          LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT  type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

*** Free Selected Gates
  LT_GATE = ME->GET_SELECTED_GATES( ).
  loop at LT_GATE into LR_GATE.
    check LR_GATE is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    LF_SHUTY = LR_PR_SHIPUNIT->GET_SHUTY( ).
    check ME->CHECK_PRVDR_DEL( IF_ID = LF_SHUTY ) eq ABAP_FALSE.

*** Check if Gate is changeable and can be deleted
    if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
      LR_GATE->DO_FREE( IF_REORG_POSID = ABAP_TRUE ).
    endif.

*** Init Overview
    ME->INIT_PRVDR_OV( ).

  endloop.

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->R_GATE->RAISE_EVENTS( ).


*** Init Toolbar
  ME->INIT_TOOLBAR_DEF( ).

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED        type          /VCXI/CKX_LOCKED,
                 LF_INUSE         type          /VCXI/VKSR_INUSE.
  field-symbols: <T_DATA>         type standard table,
                 <S_FCAT>         type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL' or
           'SHUTY_DESCR' or 'SHUNT_DESCR' or
           'FOVRR_DIMEN' or 'FOVRR_LIMIT'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'SHUNT' or 'PACKP' or 'PRQTY' or 'SAPOS' or 'SAQTY'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'FOVRR_PACKP' or 'FOVRR_PRQTY'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
          move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        endif.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_SHIPUNIT_GRID     type          ZVCXI_XCSU_S_SHIPUNIT_GRID.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT       type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Packaging Material
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    clear LS_SHIPUNIT_GRID.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( ) to LS_SHIPUNIT_GRID-POSID.
        move LR_GATE->F_GATKY      to LS_SHIPUNIT_GRID-GATKY.
        move LR_GATE               to LS_SHIPUNIT_GRID-R_GATE.

        move LR_PR_SHIPUNIT->GET_SHUTY( )       to LS_SHIPUNIT_GRID-SHUTY.
        move LR_PR_SHIPUNIT->GET_SHUNT( )       to LS_SHIPUNIT_GRID-SHUNT.

        LR_PR_SHIPUNIT->GET_PRQTY( importing ES_PRQTY = LS_SHIPUNIT_GRID-S_PRQTY ).
        move LR_PR_SHIPUNIT->GET_FOVRR_PRQTY( ) to LS_SHIPUNIT_GRID-FOVRR_PRQTY.

        LR_PR_SHIPUNIT->GET_PACKP( importing EF_PACKP = LS_SHIPUNIT_GRID-PACKP ).
        move LR_PR_SHIPUNIT->GET_FOVRR_PACKP( ) to LS_SHIPUNIT_GRID-FOVRR_PACKP.

        LS_SHIPUNIT_GRID-SAPOS   = LR_PR_SHIPUNIT->GET_SAPOS( ).
        LS_SHIPUNIT_GRID-S_SAQTY = LR_PR_SHIPUNIT->GET_SAQTY( ).

        LS_SHIPUNIT_GRID-S_TBQTY = LR_PR_SHIPUNIT->GET_TBQTY( ).

*** --------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_SHIPUNIT( exporting IS_DATA = LS_SHIPUNIT_GRID
                                   changing  CT_STYL = LS_SHIPUNIT_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_SHIPUNIT_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_SHIPUNIT_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
  endloop.

endmethod.
method GET_PRVDR_QTY.

  data:          LS_PRVDR_OV          type        YS_PRVDR_OV.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID.

  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV.
    check LS_PRVDR_OV-R_GATE is bound.
      check LF_ID eq LS_PRVDR_OV-ID.
    if IF_CHECK_DETAIL eq ABAP_TRUE.
      check LF_SEQUE eq LS_PRVDR_OV-SEQUE.
    endif.

    add 1 to RF_QTY.

  endloop.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_ROW_ID            type          I.
  data:          LS_SHIPUNIT_GRID     type          ZVCXI_XCSU_S_SHIPUNIT_GRID,
                 LS_MODI              type          LVC_S_MODI.
  data:          LR_PR_SHIPUNIT       type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        move SY-TABIX to LF_ROW_ID.
        read table ET_GOOD_CELLS with key ROW_ID = LF_ROW_ID
                                 transporting no fields.
        check SY-SUBRC eq 0.

        try.
            move-corresponding <S_DATA> to LS_SHIPUNIT_GRID.
            check LS_SHIPUNIT_GRID-R_GATE is bound.

            move LS_SHIPUNIT_GRID-R_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
            check LR_PR_SHIPUNIT is bound.

***         Set Values to PR Class
            loop at ET_GOOD_CELLS into LS_MODI where ROW_ID = LF_ROW_ID.
              case LS_MODI-FIELDNAME.
                when 'SHUTY'.
                  LR_PR_SHIPUNIT->SET_SHUTY( IF_SHUTY = LS_SHIPUNIT_GRID-SHUTY
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'SHUNT'.
                  LR_PR_SHIPUNIT->SET_SHUNT( IF_SHUNT = LS_SHIPUNIT_GRID-SHUNT
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'PACKP'.
                  LR_PR_SHIPUNIT->SET_PACKP( IF_PACKP = LS_SHIPUNIT_GRID-PACKP
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'PRQTY'.
                  LR_PR_SHIPUNIT->SET_PRQTY( IS_PRQTY = LS_SHIPUNIT_GRID-S_PRQTY
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

                when 'SAPOS'.
                  LR_PR_SHIPUNIT->SET_SAPOS( IF_SAPOS = LS_SHIPUNIT_GRID-SAPOS
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'SAQTY'.
                  LR_PR_SHIPUNIT->SET_SAQTY( IS_SAQTY = LS_SHIPUNIT_GRID-S_SAQTY
                                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

              endcase.
            endloop.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SHIPUNIT.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_SHIPUNIT_GRID     type          ZVCXI_XCSU_S_SHIPUNIT_GRID.
  data:          LR_PR_SHIPUNIT       type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.

        try.
            move-corresponding <S_DATA> to LS_SHIPUNIT_GRID.
            check LS_SHIPUNIT_GRID-R_GATE is bound.

            move LS_SHIPUNIT_GRID-R_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
            check LR_PR_SHIPUNIT is bound.

***         Set Values to PR Class
            case E_COLUMN_ID-FIELDNAME.
              when 'FOVRR_PRQTY'.
                case LS_SHIPUNIT_GRID-FOVRR_PRQTY.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_SHIPUNIT_GRID-FOVRR_PRQTY.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_SHIPUNIT_GRID-FOVRR_PRQTY.
                endcase.
                LR_PR_SHIPUNIT->SET_FOVRR_PRQTY( IF_FOVRR = LS_SHIPUNIT_GRID-FOVRR_PRQTY ).

              when 'FOVRR_PACKP'.
                case LS_SHIPUNIT_GRID-FOVRR_PACKP.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_SHIPUNIT_GRID-FOVRR_PACKP.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_SHIPUNIT_GRID-FOVRR_PACKP.
                endcase.
                LR_PR_SHIPUNIT->SET_FOVRR_PACKP( IF_FOVRR = LS_SHIPUNIT_GRID-FOVRR_PACKP ).
            endcase.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SHIPUNIT.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_MENU_BUTTON.

  data:  LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_FUNCTION   type        UIATTENTRY.
  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.
  data:  LT_FUNCTIONS  type        UI_FUNCATTR.

  try.
      case E_UCOMM.
        when 'ADD'.

          SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                     E_UCOMM  = E_UCOMM ).

***       Get old Functions
          E_OBJECT->GET_FUNCTIONS( importing FCODES = LT_FUNCTIONS ).
***       Clear all
          E_OBJECT->CLEAR( ).

*** -----------------------------------------
***       Add Additional Data
          loop at LT_FUNCTIONS into LS_FUNCTION.
            read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index SY-TABIX.

***         Set Icon
            case LS_FUNCTION-DISABLED.
              when ABAP_TRUE.
***             Everything is Okay
                LS_FUNCTION-ICON = C_ICON_OKAY.

              when ABAP_FALSE.
***             If there are still some Missing -> Caution
                if ME->GET_PRVDR_QTY( IF_ID           = LS_PRVDR_DEF-ID
                                      IF_CHECK_DETAIL = ABAP_TRUE ) lt LS_PRVDR_DEF-QTYMI.
                  LS_FUNCTION-ICON = C_ICON_CAUTION.
                else.
                  LS_FUNCTION-ICON = C_ICON_OKAY.
                endif.

            endcase.
***         Add Function
            E_OBJECT->ADD_FUNCTION( FCODE    = LS_FUNCTION-FCODE
                                    TEXT     = LS_FUNCTION-TEXT
                                    ICON     = LS_FUNCTION-ICON
                                    DISABLED = LS_FUNCTION-DISABLED ).

          endloop.

        when others.

          SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                     E_UCOMM  = E_UCOMM ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LS_SHIPUNIT_GRID     type          ZVCXI_XCSU_S_SHIPUNIT_GRID.
  data:          LR_PR_SHIPUNIT       type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        try.
            move-corresponding <S_DATA> to LS_SHIPUNIT_GRID.
            check LS_SHIPUNIT_GRID-R_GATE is bound.

            move LS_SHIPUNIT_GRID-R_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
            check LR_PR_SHIPUNIT is bound.

***         Handle F4 call
            case E_FIELDNAME.
              when 'SHUTY'.
                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
                LS_SHIPUNIT_GRID-SHUTY = LR_PR_SHIPUNIT->CALL_SHLP_SHUTY( IF_DISPLAY = E_DISPLAY ).
                if LS_SHIPUNIT_GRID-SHUTY is not initial.
                  if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                    LR_PR_SHIPUNIT->SET_SHUTY( IF_SHUTY = LS_SHIPUNIT_GRID-SHUTY
                                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                    ME->R_GATE->RAISE_EVENTS( ).
                  endif.
                endif.
              when 'SHUNT'.
                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
                LS_SHIPUNIT_GRID-SHUNT = LR_PR_SHIPUNIT->CALL_SHLP_SHUNT( IF_DISPLAY = E_DISPLAY ).
                if LS_SHIPUNIT_GRID-SHUNT is not initial.
                  if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                    LR_PR_SHIPUNIT->SET_SHUNT( IF_SHUNT = LS_SHIPUNIT_GRID-SHUNT
                                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                    ME->R_GATE->RAISE_EVENTS( ).
                  endif.
                endif.
              when 'PACKP'.
                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
                LS_SHIPUNIT_GRID-PACKP = LR_PR_SHIPUNIT->CALL_SHLP_PACKP( IF_DISPLAY = E_DISPLAY ).
                if LS_SHIPUNIT_GRID-PACKP is not initial.
                  if ME->R_GATE->IS_LOCKED( )     eq ABAP_TRUE and
                     LS_SHIPUNIT_GRID-FOVRR_PACKP eq ABAP_TRUE.
                    LR_PR_SHIPUNIT->SET_PACKP( IF_PACKP = LS_SHIPUNIT_GRID-PACKP
                                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                    ME->R_GATE->RAISE_EVENTS( ).
                  endif.
                endif.
            endcase.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SHIPUNIT.
        endtry.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.


  if ER_EVENT_DATA->M_EVENT_HANDLED eq ABAP_TRUE.
*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.
  endif.

endmethod.
method INIT_PRVDR_OV.

  data:          LF_SEQUE_C           type        STRING.
  data:          LS_PRVDR_OV          type        YS_PRVDR_OV,
                 LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_PRVDR_DEF_G       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_OV          type        YT_PRVDR_OV.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT       type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
  field-symbols: <S_PRVDR_OV>         type        YS_PRVDR_OV.

  clear: ME->T_PRVDR_OV.

  loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
    move-corresponding LS_PRVDR_DEF to LS_PRVDR_OV.

    split LS_PRVDR_DEF-ID at '@' into LS_PRVDR_OV-ID LF_SEQUE_C.
    move LF_SEQUE_C to LS_PRVDR_OV-SEQUE.
    move 1 to LS_PRVDR_OV-QTYMA.


    do LS_PRVDR_DEF-QTYMA times.
      if LS_PRVDR_DEF-QTYMI gt '000'.
        subtract 1 from LS_PRVDR_OV-QTYMI.
        move '001' to LS_PRVDR_OV-QTYMI.
      else.
        move '000' to  LS_PRVDR_OV-QTYMI.
      endif.
      add 1 to LS_PRVDR_OV-INDEX.
      append LS_PRVDR_OV to ME->T_PRVDR_OV.
    enddo.

  endloop.

  move ME->T_PRVDR_OV to LT_PRVDR_OV.

  read table ME->T_PRVDR_DEF_G into LS_PRVDR_DEF_G with key ID = LS_PRVDR_DEF-IPRVT.
  check SY-SUBRC = 0.

*** Get Gates of Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = LS_PRVDR_DEF_G-IPRVT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.

    loop at ME->T_PRVDR_OV assigning <S_PRVDR_OV>
      where R_GATE is initial.
      read table LT_PRVDR_OV with key index = <S_PRVDR_OV>-INDEX transporting no fields.
      check SY-SUBRC = 0.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      check LR_PR_SHIPUNIT->GET_SHUTY( ) is not initial.

      if LR_PR_SHIPUNIT               is bound and
         LR_PR_SHIPUNIT->GET_SHUTY( ) eq <S_PRVDR_OV>-ID.
        move LR_GATE to <S_PRVDR_OV>-R_GATE.
        delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
        exit.
      else.
        delete LT_PRVDR_OV where INDEX = <S_PRVDR_OV>-INDEX.
      endif.

    endloop.
  endloop.

endmethod.
method INIT_TOOLBAR_DEF.

  data:          LF_SHSCH           type        ZVCXI_XCSU_SHSCH,
                 LF_INDEX           type        I,
                 LF_SEQUE           type        STRING.
  data:          LR_CUST_SHIPU      type ref to ZCL_VCXI_XCSU_CUST_SHIPU,
                 LR_PR_SHIPMGR      type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.
  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
                 LS_SHSCH_SHUTY     type        ZVCXI_XCS_TC162.
  data:          LT_SHSCH_SHUTY     type        ZVCXI_XCSU_TT_SHSCH_SHUTY,
                 LT_SHSCH_SHUTY_TMP type        ZVCXI_XCSU_TT_SHSCH_SHUTY.
  field-symbols: <S_SHSCH_SHUTY>    type        ZVCXI_XCS_TC162,
                 <S_PRVDR_DEF>      type        /VCXI/VKSR_S_PRVDR_DEF.

*** Load the general Provider Definitions
  SUPER->INIT_TOOLBAR_DEF( ).

*** Initialize Reference to Shipping & Unitization Cusotmizing
  move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ) to LR_CUST_SHIPU.
  check LR_CUST_SHIPU is bound.

  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
      check LR_PR_SHIPMGR is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPMGR.
  endtry.

  check LR_PR_SHIPMGR is bound.
  LF_SHSCH = LR_PR_SHIPMGR->GET_SHSCH( ).

  clear ME->T_PRVDR_DEF_G.
  append lines of ME->T_PRVDR_DEF to ME->T_PRVDR_DEF_G.
  clear: ME->T_PRVDR_DEF.

  LT_SHSCH_SHUTY_TMP = LR_CUST_SHIPU->GET_SHUTY_SET_FOR_SHSCH( IF_SHSCH = LF_SHSCH ).

  append lines of LT_SHSCH_SHUTY_TMP to LT_SHSCH_SHUTY.
  sort LT_SHSCH_SHUTY by SHUTY.
  loop at LT_SHSCH_SHUTY assigning <S_SHSCH_SHUTY>.
    clear: <S_SHSCH_SHUTY>-MNCNT, <S_SHSCH_SHUTY>-MXCNT.
    loop at LT_SHSCH_SHUTY_TMP into LS_SHSCH_SHUTY
      where SHUTY = <S_SHSCH_SHUTY>-SHUTY.
      <S_SHSCH_SHUTY>-MNCNT = <S_SHSCH_SHUTY>-MNCNT + LS_SHSCH_SHUTY-MNCNT.
      <S_SHSCH_SHUTY>-MXCNT = <S_SHSCH_SHUTY>-MXCNT + LS_SHSCH_SHUTY-MXCNT.
    endloop.
  endloop.

  sort LT_SHSCH_SHUTY by SEQUE.

  loop at LT_SHSCH_SHUTY into LS_SHSCH_SHUTY.
    LF_INDEX = SY-TABIX.
    read table ME->T_PRVDR_DEF_G assigning <S_PRVDR_DEF> index 1.
    check SY-SUBRC = 0.
*** Set Global Maximum/Minimum Quantity
    if LF_INDEX = 1.
      move LS_SHSCH_SHUTY-MNCNT to <S_PRVDR_DEF>-QTYMI.
      move LS_SHSCH_SHUTY-MXCNT to <S_PRVDR_DEF>-QTYMA.
    else.
      add LS_SHSCH_SHUTY-MNCNT to <S_PRVDR_DEF>-QTYMI.
      add LS_SHSCH_SHUTY-MXCNT to <S_PRVDR_DEF>-QTYMA.
    endif.

    move <S_PRVDR_DEF>-ID              to LS_PRVDR_DEF-IPRVT.
    move LS_SHSCH_SHUTY-SEQUE          to LF_SEQUE.
    concatenate LS_SHSCH_SHUTY-SHUTY
                LF_SEQUE             into LS_PRVDR_DEF-ID separated by '@'.
    move LS_SHSCH_SHUTY-MNCNT          to LS_PRVDR_DEF-QTYMI.
    move LS_SHSCH_SHUTY-MXCNT          to LS_PRVDR_DEF-QTYMA.
    LS_PRVDR_DEF-DESCR = LR_CUST_SHIPU->GET_DESCR_FOR_SHUTY( IF_SHUTY = LS_SHSCH_SHUTY-SHUTY ).
    append LS_PRVDR_DEF to ME->T_PRVDR_DEF.
  endloop.

  if lines( ME->T_PRVDR_DEF ) eq 1 and
     ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_FALSE.
*** one provider
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    concatenate 'Delete'(002) LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL separated by SPACE.

  elseif lines( ME->T_PRVDR_DEF ) eq 1 and
         ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_TRUE.
*** one provider and one or more irrelevant
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  else.
*** multiple provider
*** Set Type of Add Button
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text
    move 'Add'(001)    to ME->F_TEXT_ADD.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  endif.

*** Init Provider Overview
  ME->INIT_PRVDR_OV( ).

endmethod.
method SET_EVENT.

  data:          LF_LOCKED        type        /VCXI/CKX_LOCKED,
                 LF_INUSE         type        /VCXI/VKSR_INUSE.

  SUPER->SET_EVENT( ).

*** Set Hotspot
  set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).
  if LF_LOCKED eq ABAP_TRUE and
     LF_INUSE  eq ABAP_TRUE.
    set handler ME->HANDLE_ONF4              for ME->R_GRID.
  endif.

endmethod.
method SET_PRVDR_POS.

  data:          LS_PRVDR_OV          type        YS_PRVDR_OV.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID,
                 LF_INDEX             type        I,
                 LF_INDEX_TMP         type        I,
                 LF_POSID             type        /VCXI/VKSR_POSID,
                 LF_LAST_GATE_BOUND   type        ABAP_BOOL.

*** Init Overview
  ME->INIT_PRVDR_OV( ).

*** Start Doing
  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV
    where SEQUE le LF_SEQUE.
    if LS_PRVDR_OV-R_GATE is not bound.
      if LF_LAST_GATE_BOUND eq ABAP_TRUE.
        move LF_INDEX_TMP to LF_INDEX.
      endif.
    endif.
    add 1 to LF_INDEX_TMP.

*** Get the bound status of last gate
    if LS_PRVDR_OV-R_GATE is bound.
      move ABAP_TRUE to LF_LAST_GATE_BOUND.
    else.
      move ABAP_FALSE to LF_LAST_GATE_BOUND.
    endif.
  endloop.

  read table ME->T_PRVDR_OV into LS_PRVDR_OV index LF_INDEX.
  if LS_PRVDR_OV-R_GATE is bound.
    LF_POSID = LS_PRVDR_OV-R_GATE->GET_POSID( ).
  endif.

*** Add 5 to insert after selected position
  add C_POSID_5 to LF_POSID.
  IR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
  IR_GATE->REORG_POSID( ).

endmethod.
method SET_PRVDR_POS_OLD.

  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE,
                 LT_CELL              type        LVC_T_CELL.
  data:          LR_GATE_POS          type ref to /VCXI/CL_VKSR_GATE.
  data:          LS_PRVDR_OV          type        YS_PRVDR_OV,
                 LS_CELL              type        LVC_S_CELL.
  data:          LF_SEQUE             type        ZVCXI_XCSU_SEQUE,
                 LF_SEQUE_C           type        STRING,
                 LF_ID                type        /VCXI/CKX_ID,
                 LF_CHECK             type        ABAP_BOOL,
                 LF_OKAY              type        ABAP_BOOL,
                 LF_INDEX             type        I.

  split IF_ID at '@' into LF_ID LF_SEQUE_C.
  move LF_SEQUE_C to LF_SEQUE.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
  LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE_POS index 1.
  if LR_GATE_POS is bound.
***  check if Position would be okay
    loop at ME->T_PRVDR_OV into LS_PRVDR_OV.

*** Consider only Positions after selected one
      if LF_CHECK eq ABAP_FALSE.
        if LS_PRVDR_OV-R_GATE eq LR_GATE_POS.
          move ABAP_TRUE to LF_CHECK.
        endif.
        continue.
      endif.

      if LS_PRVDR_OV-SEQUE eq LF_SEQUE and
         LS_PRVDR_OV-R_GATE is not bound.
        LF_OKAY = ABAP_TRUE.
        exit.

      elseif LS_PRVDR_OV-SEQUE lt LF_SEQUE and
             LS_PRVDR_OV-R_GATE is bound.
        exit.
      endif.

    endloop.
  endif.

  check LF_OKAY eq ABAP_FALSE.

  loop at ME->T_PRVDR_OV into LS_PRVDR_OV
    where SEQUE le LF_SEQUE
      and R_GATE is bound.
    add 1 to LF_INDEX.
  endloop.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).

  read table LT_CELL into LS_CELL index 1.
  LS_CELL-ROW_ID-INDEX     = LF_INDEX.
  clear LT_CELL.
  append LS_CELL to LT_CELL.

*** Set Current Cell
  ME->R_GRID->SET_SELECTED_CELLS( IT_CELLS = LT_CELL ).

endmethod.
