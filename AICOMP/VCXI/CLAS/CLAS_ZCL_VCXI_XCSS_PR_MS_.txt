
class ZCL_VCXI_XCSS_PR_MS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRICE_CHANGED type /VCXI/VKSC_IEVNT value 'PRICE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XCS_MS type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSS_MS' ##NO_TEXT.
  constants C_PARID_FPTOS type /VCXI/VKS_PARID value 'ZVCXI_XC_FPTOS' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_PURCH type /VCXI/VKS_PARID value 'ZVCXI_XC_PURCH' ##NO_TEXT.
  constants C_PARID_TEXT type /VCXI/VKS_PARID value 'ZVCXI_XC_TEXT' ##NO_TEXT.
  constants C_PURCH_DIRECT type ZVCXI_XCS_PURCH value 'D' ##NO_TEXT.
  constants C_PURCH_DIRECT_PRICE type ZVCXI_XCS_PURCH value 'X' ##NO_TEXT.
  constants C_PURCH_STOCK type ZVCXI_XCS_PURCH value SPACE ##NO_TEXT.
  data F_MATNR_DUMMY type MATNR read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FPTOS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPTOS) type ZVCXI_XCS_FPTOS
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR_DESCR
    returning
      value(RF_LIFNR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_WERTU type WERTU
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRICE
    returning
      value(RS_PRICE) type ZVCXI_XCS_S_PRICE
    raising
      /VCXI/CX_CKX .
  methods GET_PRICP
    returning
      value(RS_PRICP) type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_SANKA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SANKA) type SANKA
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_TEXT) type TEXT30
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FPTOS
    importing
      !IF_FPTOS type ZVCXI_XCS_FPTOS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICE
    importing
      !IS_PRICE type ZVCXI_XCS_S_PRICE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICP
    importing
      !IS_PRICP type ZVCXI_XCS_S_PRICP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PURCH
    importing
      !IF_PURCH type ZVCXI_XCS_PURCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_TEXT type TEXT30
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PRICE type /VCXI/VKSC_IEVNT value 'INIT_PRICE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_PARID_AVGCO_A type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_A' ##NO_TEXT.
  constants C_PARID_AVGCO_L type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_L' ##NO_TEXT.
  constants C_PARID_AVGCO_P type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_P' ##NO_TEXT.
  constants C_PARID_AVGCO_W type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_W' ##NO_TEXT.
  constants C_PARID_AVGCP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_A' ##NO_TEXT.
  constants C_PARID_AVGCP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_L' ##NO_TEXT.
  constants C_PARID_AVGCP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_P' ##NO_TEXT.
  constants C_PARID_AVGCP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_W' ##NO_TEXT.
  constants C_PARID_PRICE type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICE' ##NO_TEXT.
  constants C_PARID_PRICP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_A' ##NO_TEXT.
  constants C_PARID_PRICP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_L' ##NO_TEXT.
  constants C_PARID_PRICP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_P' ##NO_TEXT.
  constants C_PARID_PRICP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_W' ##NO_TEXT.
  data F_PARID_AVGCO type /VCXI/VKS_PARID .
  data F_PARID_AVGCP type /VCXI/VKS_PARID .
  data F_PARID_PRICP type /VCXI/VKS_PARID .
  data R_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR .

  methods CHECK_LIFNR
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PURCH
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRICE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods INIT_MATNR_DUMMY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSS_PR_MS definition
class ZCL_VCXI_XCSS_PR_MS implementation.
method CHECK_LIFNR.
*** 0 - No Check
*** 1 - Vendor is maintained and correct
*** 2 - Vendor is not maintained.   (not in use)
*** 3 - Vendor is not correct.

  data: LF_LIFNR type        LIFNR,
        LF_WERKS type        WERKS_D.
  data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

***----------------------------------------------------------------------------
*** Not for Stock Items
  check ME->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.

***----------------------------------------------------------------------------
*** Get Vendor and check if maintained
  move ME->GET_LIFNR( ) to LF_LIFNR.
  if LF_LIFNR is initial.
    move 0 to RF_RETURN.    " No Check
    exit.
  endif.

***----------------------------------------------------------------------------
*** Get Plant
  move ME->GET_WERKS( ) to LF_WERKS.

***----------------------------------------------------------------------------
*** Perform Check
  try.
      ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = LF_LIFNR
                                         IF_WERKS = LF_WERKS ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      move 3 to RF_RETURN.
      if IR_MSG is bound.
        IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      endif.
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Check was successful
  move 1 to RF_RETURN.
  if IR_MSG is bound.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                         IF_MSGTY = 'S'
                         IF_MSGNO = '008' ).
  endif.

endmethod.
method CHECK_MATNR.

*** Check Material Number is maintained
  if ME->GET_MATNR( ) is initial.
    move 1 to RF_RESULT.
    exit.
  endif.

*** Check Material Instance was created
  if ME->R_CUST_MATNR is not bound.
    move 2 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid
  if ME->R_CUST_MATNR->F_CHECK_MATNR ne ABAP_TRUE.
    move 3 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid in Plant
  if ME->R_CUST_MATNR->F_CHECK_MAT_MARC ne ABAP_TRUE.
    move 4 to RF_RESULT.
    exit.
  endif.

endmethod.
  method CHECK_PRICE.
*** 0 - No Check
*** 1 - Price is maintained
*** 2 - Price is not maintained.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE type ref to ZCL_VCXI_XCS_PR_PSCALE.


*** Only for Direct Procurement & Price
    check ME->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.

***--------------------------------------------------------------------------------------
*** Check standard Price Parameters
    if ME->GET_PRICE( )-PRICE is not initial and
       ME->GET_PRICP( )-PRICP is not initial.
      move 1 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.

***--------------------------------------------------------------------------------------
*** Check Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***       Get Price Scale
          if LR_PR_PSCALE->GET_PRICE( )-PRICE is not initial and
             LR_PR_PSCALE->GET_PRICP( )-PRICP is not initial.
            move 1 to RF_RETURN.
          else.
            move 2 to RF_RETURN.
            exit.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method CHECK_PURCH.

    check ME->R_CUST_MATNR is bound.

*** Non-Valuated Material
    if ME->R_CUST_MATNR->F_WERTU ne ABAP_TRUE.
***   Check Procurement Option
      case ME->GET_PURCH( ).
***     Direct Procurement & Price
        when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          if IR_MESSAGE is bound.
***         Procurement Option is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '009' ).
          endif.
      endcase.
    endif.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Material Dummy
  ME->INIT_MATNR_DUMMY( ).

endmethod.
method GET_DESCR.

  data: LF_MATNR type MATNR,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_MATNR = ME->GET_MATNR( ).

  if LF_MATNR is not initial.
*** Convert Material Number to Output
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_MATNR
      importing
        OUTPUT = LF_MATNR.
*** Get Material Description
    LF_DESCR = ME->GET_MATNR_DESCR( ).

    concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_FPTOS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPTOS ).
  move LS_PARAM-ATWRT to RF_FPTOS.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
  method GET_LIFNR_DESCR.

    data: LF_LIFNR type LIFNR.

    LF_LIFNR = ME->GET_LIFNR( ).
    check LF_LIFNR is not initial.

    RF_LIFNR_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_LIFNR_NAME1( IF_LIFNR = LF_LIFNR ).

  endmethod.
  method GET_MATNR.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move LS_LEOKY-LEOKY to RF_MATNR.
    move LS_LEOKY-SETBY to EF_SETBY.

    check RF_MATNR is not initial.

***------------------------------------------------------------------------------------------------
    if EF_WERTU is requested.
      EF_WERTU = cond #( when ME->R_CUST_MATNR is bound then ME->R_CUST_MATNR->F_WERTU ).
    endif.

  endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).
  move LS_PARAM-ATFLV to RS_PRICE-PRICE.
  move LS_PARAM-CURKY to RS_PRICE-PRICE_CURR.

endmethod.
method GET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).
  move LS_PARAM-ATFLV to RS_PRICP-PRICP.
  move LS_PARAM-UNIT  to RS_PRICP-PRICP_UOM.

endmethod.
method GET_PURCH.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
  move LS_PARAM-ATWRT to RF_PURCH.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
  method GET_SANKA.

    if ME->R_CUST_MATNR is not bound.
***   Initialize Material Customizing to ensure we don't have a sequencing issue
      ME->HANDLE_INIT_CUST_MATNR( ).
    endif.
    check ME->R_CUST_MATNR is bound.

*** Costing Relevant based on Value Updating in Material Master
    RF_SANKA = ME->R_CUST_MATNR->F_WERTU.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

*** Check Material
    if ME->CHECK_MATNR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Procurement Option
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PURCH( ) ).

*** Check Price
    case ME->CHECK_PRICE( ).
      when 0.  " No Check
      when 1.  " Price is maintained
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.


*** Check Vendor
    case ME->CHECK_LIFNR( ).
      when 0.  " No Check
      when 1.  " Vendor is maintained and correct
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
method GET_STATUS_MSG.

  data: LF_WERKS type WERKS_D.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Material
  case ME->CHECK_MATNR( ).
    when 1.
***   Material Number is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '001' ).
    when 2.
***   Material Instance was not created.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '002' ).
    when 3.
***   Material Number is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '003' ).
    when 4.
***   Material Number is not valid in Plant.
      LF_WERKS = ME->GET_WERKS( ).
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '004'
                               IF_MSGV1 = LF_WERKS ).
    when others.
***   Material is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '005' ).
  endcase.


***------------------------------------------------------------------
*** Check Procurement Option
    ME->CHECK_PURCH( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Price - only for Purchased Material
  if ME->CHECK_PRICE( ) eq 1.
***   Price is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '006' ).
  elseif ME->CHECK_PRICE( ) eq 2.
***   Please check Price.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '007' ).

  endif.

***------------------------------------------------------------------
*** Check Vendor - only for Purchased Material
  ME->CHECK_LIFNR( IR_MSG = IR_MESSAGE ).

endmethod.
method GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_CUST_MATNR.
      ME->HANDLE_INIT_CUST_MATNR( ).

    when C_IEVNT_I_INIT_PURCH.
      ME->HANDLE_INIT_PURCH( ).

    when C_IEVNT_I_INIT_PRICE.
      ME->HANDLE_INIT_PRICE( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

*** Only load Customizing with insert Materialnumber
  check LF_MATNR is not initial and
        LF_WERKS is not initial.

  if ME->R_CUST_MATNR          is bound    and
     ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
     ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear ME->R_CUST_MATNR.

*** Catch Error while Material Customizing Instanziation
  try.
***   Load the Customizing
      ME->R_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_MATNR
                                                                IF_WERKS = LF_WERKS
                                                                IF_DATE  = SY-DATUM ).

    catch /VCXI/CX_CKX.
***   It is not needed to handle Exception
      exit.
  endtry.

endmethod.
  method HANDLE_INIT_PRICE.

    data: LS_PRICE type ZVCXI_XCS_S_PRICE,
          LS_PRICP type ZVCXI_XCS_S_PRICP.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Different behavior based on Procurement Option
    case ME->GET_PURCH( ).

***------------------------------------------------------------------------------------------------
***   Stock Items
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***     Clear Price Data
        ME->SET_PRICE( IF_SETBY = SPACE ).
        ME->SET_PRICP( IF_SETBY = SPACE ).

***     Free Price Scale
        loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                       IF_INUSE = ABAP_TRUE ) into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

***     Clear Vendor
        ME->SET_LIFNR( IF_LIFNR = SPACE
                       IF_SETBY = SPACE ).

***------------------------------------------------------------------------------------------------
***  Direct Procurement
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
***     Clear Price Data
        ME->SET_PRICE( IF_SETBY = SPACE ).
        ME->SET_PRICP( IF_SETBY = SPACE ).

***     Free Price Scale
        loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                       IF_INUSE = ABAP_TRUE ) into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

***------------------------------------------------------------------------------------------------
***  Direct Procurement & Price
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
***     Check if we have the Material Instance
        check ME->R_CUST_MATNR is bound.

        move ME->GET_PRICE( ) to LS_PRICE.
        if LS_PRICE-PRICE is initial.
          ME->SET_PRICE( IS_PRICE = ME->R_CUST_MATNR->S_PRICE ).
        endif.

        move ME->GET_PRICP( ) to LS_PRICP.
        if LS_PRICP-PRICP is initial.
          if LS_PRICP-PRICP_UOM is not initial and
             ME->R_CUST_MATNR->S_PRICP-PRICP_UOM is not initial.
***         Do Material Conversion
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_UOM_OUT   = LS_PRICP-PRICP_UOM
                                                                     IF_UOM_IN    = ME->R_CUST_MATNR->S_PRICP-PRICP_UOM
                                                                     IF_VALUE_IN  = ME->R_CUST_MATNR->S_PRICP-PRICP
                                                                     IF_MATNR     = ME->GET_MATNR( )
                                                           importing EF_VALUE_OUT = LS_PRICP-PRICP
                                                                     EF_UOM_OUT   = LS_PRICP-PRICP_UOM ).
          else.
***         Can't be converted
            clear LS_PRICP-PRICP.
          endif.

          ME->SET_PRICP( IS_PRICP = LS_PRICP ).
        endif.
    endcase.

  endmethod.
  method HANDLE_INIT_PURCH.

*** Is Matrial a Dummy
    if ME->IS_DUMMY( ) eq ABAP_TRUE.
***   Ensure correct instance has been loaded
      if ME->R_CUST_MATNR is not bound or
         ME->R_CUST_MATNR->F_MATNR ne ME->GET_MATNR( ).
        ME->HANDLE_INIT_CUST_MATNR( ).
      endif.

      if ME->R_CUST_MATNR is not bound or
         ME->R_CUST_MATNR->F_WERTU eq ABAP_TRUE.
***     Valuated Material -> Set "Direct Procurement & Price"
        ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ).
      else.
***     Non-Valuated Material -> Set "Direct Procurement"
        ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
      endif.
    else.
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK ).
    endif.

*** Reset Procurement to Stock Flag
    ME->SET_FPTOS( IF_SETBY = SPACE ).

  endmethod.
method INIT_MATNR_DUMMY.

*** Get Dummy Material
  ME->F_MATNR_DUMMY = ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE  = ME->R_GATE ).

endmethod.
  method IS_DUMMY.

*** Is Matrial a Dummy
    RF_RETURN = ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                                         IF_MATNR = ME->GET_MATNR( ) ).

  endmethod.
method SET_FPTOS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPTOS ).

  if IF_FPTOS is supplied.
    LS_PARAM-ATWRT = IF_FPTOS.
  endif.

  LS_PARAM-SETBY = IF_SETBY.
  if LS_PARAM-SETBY is initial.
    clear LS_PARAM-ATWRT.
  endif.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_LIFNR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIFNR_CHANGED ).
  endif.

endmethod.
method SET_MATNR.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_MATNR to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
  endif.

endmethod.
  method SET_PRICE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).

    if IS_PRICE is supplied.
      LS_PARAM-ATFLV = IS_PRICE-PRICE.
      LS_PARAM-CURKY = IS_PRICE-PRICE_CURR.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRICE_CHANGED ).
    endif.

  endmethod.
  method SET_PRICP.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).

    if IS_PRICP is supplied.
      LS_PARAM-ATFLV = IS_PRICP-PRICP.
      LS_PARAM-UNIT = IS_PRICP-PRICP_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRICE_CHANGED ).
    endif.

  endmethod.
method SET_PURCH.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

  move IF_PURCH to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
  endif.

endmethod.
method SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
