
class ZCL_VCXI_FFSR_BL_RTESPV definition
  public
  inheriting from ZCL_VCXI_F0SR_BL_RTESPV
  create public .

public section.
protected section.

  methods ADD_SPVRE_MC_CORE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RHNDL type ref to ZIF_VCXI_FFSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_ACTVY_RWIND
    importing
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RHNDL type ref to ZIF_VCXI_FFSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_ADDON_RWIND
    importing
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RHNDL type ref to ZIF_VCXI_FFSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .

  methods PROCESS_RTE_ARBPL
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_RTESPV definition
class ZCL_VCXI_FFSR_BL_RTESPV implementation.
  method ADD_ACTVY_RWIND.

    data: LS_PARAM type        /VCXI/VKSR_S_PARAM,
          LS_RHNDL type        ZVCXI_FFSR_S_RHNDL.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_RWIND type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'ACTVY_RWIND'
                              IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_RWIND
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_RWIND to CT_SPVRE.

*** Set in Use
    LR_SPVRE_RWIND->SET_INUSE( IF_INUSE = ABAP_TRUE ).

    check IR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Use first Roll Handling Information
    read table IR_RHNDL->T_RHNDL into LS_RHNDL index 1.
    if SY-SUBRC eq 0.
***   Set Roll Winding Side
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ACTVY_RWIND=>C_PARID_RWSID to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-RWSID                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Roll Winding Direction
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ACTVY_RWIND=>C_PARID_RWDIR to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-RWDIR                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Eyemark Position
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ACTVY_RWIND=>C_PARID_EYEMP to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-EYEMP                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Core
    ME->ADD_SPVRE_MC_CORE( exporting IR_SPVRE_PARENT = LR_SPVRE_RWIND
                                     IR_RHNDL        = IR_RHNDL
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method ADD_ADDON_RWIND.

    data: LS_PARAM type        /VCXI/VKSR_S_PARAM,
          LS_RHNDL type        ZVCXI_FFSR_S_RHNDL.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_RWIND type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'FF_AT_RWIND'
                              IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_RWIND
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_RWIND to CT_SPVRE.

*** Set in Use
    LR_SPVRE_RWIND->SET_INUSE( IF_INUSE = ABAP_TRUE ).

    check IR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Use first Roll Handling Information
    read table IR_RHNDL->T_RHNDL into LS_RHNDL index 1.
    if SY-SUBRC eq 0.
***   Set Roll Winding Side
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ADDON_RWIND=>C_PARID_RWSID to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-RWSID                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Roll Winding Direction
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ADDON_RWIND=>C_PARID_RWDIR to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-RWDIR                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Eyemark Position
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_ADDON_RWIND=>C_PARID_EYEMP to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_RHNDL-EYEMP                              to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Core
    ME->ADD_SPVRE_MC_CORE( exporting IR_SPVRE_PARENT = LR_SPVRE_RWIND
                                     IR_RHNDL        = IR_RHNDL
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method ADD_SPVRE_MC_CORE.

    data: LF_COFAC      type F,
          LF_COFAC_SHCO type F.
    data: LS_RHNDL      type        ZVCXI_FFSR_S_RHNDL,
          LS_RHNDL_SHCO type        ZVCXI_FFSR_S_RHNDL,
          LS_LEOKY      type        /VCXI/VKSR_S_LEOKY,
          LS_PARAM      type        /VCXI/VKSR_S_PARAM.
    data: LT_RHNDL         type        ZVCXI_FFSR_TT_RHNDL.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_CORE type ref to /VCXI/CL_VKSR_SPVRE.

    check IR_RHNDL is bound.

*** Get Unique Cores list
    move IR_RHNDL->T_RHNDL to LT_RHNDL.
    delete LT_RHNDL where ISHCO is not initial.

*** Add Cores
    loop at LT_RHNDL into LS_RHNDL.
      check LS_RHNDL-S_MS_CORE-MATNR is not initial.

      clear: LR_SPVCE, LR_SPVRE_MC_CORE.

***--------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'MC_CORE'
                                IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_CORE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_CORE to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_CORE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Material Number
      clear LS_LEOKY.
      move LS_RHNDL-S_MS_CORE-MATNR                    to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
      LR_SPVRE_MC_CORE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***--------------------------------------------------------------------------------------
***   Use Shared Core Consumption, if it would lead to highest consumption
      if LS_RHNDL-S_MS_CORE-ICORE is not initial.
        loop at IR_RHNDL->T_RHNDL into LS_RHNDL_SHCO where ISHCO eq LS_RHNDL-S_MS_CORE-ICORE.
          check LS_RHNDL-S_MS_CORE-AVGCP      ne 0 and
                LS_RHNDL_SHCO-S_MS_CORE-AVGCP ne 0.
          LF_COFAC      = LS_RHNDL-S_MS_CORE-AVGCO      / ( LS_RHNDL-S_MS_CORE-AVGCP      * LS_RHNDL-ROPCO ).
          LF_COFAC_SHCO = LS_RHNDL_SHCO-S_MS_CORE-AVGCO / ( LS_RHNDL_SHCO-S_MS_CORE-AVGCP * LS_RHNDL_SHCO-ROPCO ).

          if LF_COFAC lt LF_COFAC_SHCO.
            move LS_RHNDL_SHCO-S_MS_CORE-S_AVGCO to LS_RHNDL-S_MS_CORE-S_AVGCO.
            move LS_RHNDL_SHCO-S_MS_CORE-S_AVGCP to LS_RHNDL-S_MS_CORE-S_AVGCP.
            move LS_RHNDL_SHCO-S_MS_CORE-ROPCO   to LS_RHNDL-S_MS_CORE-ROPCO.
          endif.
        endloop.
      endif.

***   Set Average Consumption
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_CORE=>C_PARID_AVGCO_P   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_RHNDL-S_MS_CORE-AVGCO                    to LS_PARAM-ATFLV.
      move LS_RHNDL-S_MS_CORE-AVGCO_UOM                to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Average Consumption Per
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_CORE=>C_PARID_AVGCP_L   to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_RHNDL-S_MS_CORE-AVGCP                    to LS_PARAM-ATFLV.
      move LS_RHNDL-S_MS_CORE-AVGCP_UOM                to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Rolls/Core
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_CORE=>C_PARID_ROPCO     to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_RHNDL-S_MS_CORE-ROPCO                    to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = LS_PARAM ).

    endloop.

  endmethod.
  method PROCESS_RTE_ARBPL.

    data: LF_MANWC type        ZVCXI_XCSR_MANWC,
          LF_OUTSO type        ZVCXI_XCSR_OUTSO.
    data: LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL_LAST type ref to ZIF_VCXI_FFSR_RHNDL.


***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                        IR_RTE_ARBPL   = IR_RTE_ARBPL
                                        IR_BL_PRTE     = IR_BL_PRTE
                              importing ER_SPVRE_ARBPL = ER_SPVRE_ARBPL
                              changing  CT_SPVRE       = CT_SPVRE ).

    check ER_SPVRE_ARBPL is bound.

***--------------------------------------------------------------------------------------
*** Get last Roll Handing Information of all Production Step
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
           where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_FFSR_RHNDL.
      LR_RHNDL_LAST ?= LR_RTE_PSTEP->R_BLOBJ.
    endloop.

***--------------------------------------------------------------------------------------
*** Roll Handling
    if LR_RHNDL_LAST is bound.
***   Check for Manual Work Center
      if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_MANU.
        LF_MANWC = cast ZIF_VCXI_XCSR_BL_MANU( LR_RTE_PSTEP->R_BLOBJ )->F_MANWC.
      endif.

***   Check for Outsourcing
      if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_XCSR_BL_OUTSO.
        LF_OUTSO = cast ZIF_VCXI_XCSR_BL_OUTSO( LR_RTE_PSTEP->R_BLOBJ )->F_OUTSO.
      endif.

      if LF_MANWC ne ABAP_TRUE and
         LF_OUTSO ne ABAP_TRUE.
***     Add Add-on Rewinding
        ME->ADD_ADDON_RWIND( exporting IR_SPVRE_ARBPL = ER_SPVRE_ARBPL
                                       IR_RHNDL       = LR_RHNDL_LAST
                             changing  CT_SPVRE       = CT_SPVRE ).
      else.
***     Add Activity Rewinding
        ME->ADD_ACTVY_RWIND( exporting IR_SPVRE_ARBPL = ER_SPVRE_ARBPL
                                       IR_RHNDL       = LR_RHNDL_LAST
                             changing  CT_SPVRE       = CT_SPVRE ).
      endif.
    endif.

  endmethod.
