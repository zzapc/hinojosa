
class ZCL_VCXI_F0SS_ND definition
  public
  create public .

public section.

  types:
    begin of YS_FCODE,
        FCODE type SYUCOMM,
        TEXT  type NETVALSVAL,
      end   of YS_FCODE .
  types:
    YT_FCODE type standard table of YS_FCODE .
  types:
    begin of YS_NVALS,
        FL  type NETVALSFL,
        VAL type NETVALSVAL,
      end   of YS_NVALS .
  types:
    YT_NVALS type standard table of YS_NVALS .

  data F_ASSIGN type CHAR1 read-only .
  data F_EXPANDABLE type ABAP_BOOL read-only .
  data F_EXPANDED type ABAP_BOOL read-only .
  data F_NETTYPE type NETTYPE read-only .
  data T_NVALS type YT_NVALS read-only .
  constants C_ROOT_ASSIGN type CHAR1 value 'R' ##NO_TEXT.
  constants C_PARENT_ASSIGN type CHAR1 value 'P' ##NO_TEXT.
  constants C_NONE_ASSIGN type CHAR1 value 'N' ##NO_TEXT.
  constants C_UC_MSG type SYUCOMM value 'MSG' ##NO_TEXT.
  constants C_UC_BLANK type SYUCOMM value 'BLANK' ##NO_TEXT.
  constants C_TEXT_SEP type STRING value '---------------------------' ##NO_TEXT.
  constants C_UC_SPLIT type SYUCOMM value 'SPLIT' ##NO_TEXT.
  constants C_UC_MERGE type SYUCOMM value 'MERGE' ##NO_TEXT.

  methods ADD_NVALS
    importing
      !IT_NVALS type NVALS_TAB
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_ND) type ref to ZCL_VCXI_F0SS_ND
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DOUBLE_CLICK
    raising
      /VCXI/CX_CKX .
  methods SET_EXPAND
    importing
      !IF_EXPAND type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FCODE
    exporting
      !ET_FCODE type YT_FCODE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_POPUP_SEL
    importing
      !IF_FCODE type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_GATE
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
         R_GATE    type ref to /VCXI/CL_VKSR_GATE,
         R_ND      type ref to ZCL_VCXI_F0SS_ND,
       end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE .

  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .
  class-data T_INSTANCE type YT_INSTANCE .

  methods HANDLE_UC_SHOW_MSG
    raising
      /VCXI/CX_CKX .
  methods CONV_ANY_TO_VAL
    importing
      !IF_VALUE type ANY
      !IF_UOM type /VCXI/CKX_UOM
    returning
      value(RF_VAL) type NETVALSVAL
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods INIT_NODE
    raising
      /VCXI/CX_CKX .
  methods OPEN_UI_CHILD
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_SELECT type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods OPEN_UI_SELF
    importing
      !IF_SELECT type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods SET_STATUS_ICON
    raising
      /VCXI/CX_CKX .
private section.

  methods HANDLE_GATE_FREED
    for event GATE_FREED of /VCXI/CL_VKSR_GATE .
  methods HANDLE_UIGATE_FREED
    for event FREED of /VCXI/CL_VKSRU_UIGATE .
  methods REMOVE_INSTANCE
    importing
      !IS_INSTANCE type YS_INSTANCE
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_F0SS_ND definition
class ZCL_VCXI_F0SS_ND implementation.
  method ADD_NVALS.

    data:           LS_NVALS  type NET_NVALS.
    field-symbols:  <S_NVALS> type YS_NVALS.

    loop at IT_NVALS into LS_NVALS.
***   Create entry
      append initial line to ME->T_NVALS assigning <S_NVALS>.

***   Set values
      move LS_NVALS-FL  to <S_NVALS>-FL.
      move LS_NVALS-VAL to <S_NVALS>-VAL.
    endloop.

  endmethod.
  method CONSTRUCTOR.

    move: IR_UIGATE  to ME->R_UIGATE,
          IR_GATE    to ME->R_GATE.

*** Listen to Free Events
    set handler HANDLE_GATE_FREED   for ME->R_GATE.
    set handler HANDLE_UIGATE_FREED for ME->R_UIGATE.

*** Assign to cluster - Root
    move C_ROOT_ASSIGN to ME->F_ASSIGN.

*** Set Node as default not expandable
    move ABAP_FALSE to ME->F_EXPANDABLE.

  endmethod.
  method CONV_ANY_TO_VAL.

    data: LF_VALUE type CHAR30,
          LF_UNIT  type CHAR6.

*** Convert Value
    write IF_VALUE to LF_VALUE unit IF_UOM.
    condense LF_VALUE.

*** Convert Unit
    call function 'CONVERSION_EXIT_LUNIT_OUTPUT'
      exporting
        INPUT          = IF_UOM
        LANGUAGE       = SY-LANGU
      importing
        OUTPUT         = LF_UNIT
      exceptions
        UNIT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC is not initial.
      move IF_UOM to LF_UNIT.
    endif.

*** Combine to Output
    concatenate LF_VALUE LF_UNIT into RF_VAL separated by SPACE.

  endmethod.
  method DO_FREE.

*** Free current Instance
    if ME->R_GATE is bound.
***   Un-Register Event Handler
      set handler HANDLE_GATE_FREED for ME->R_GATE activation ABAP_FALSE.
      clear: ME->R_GATE.
    endif.

*** Free current Instance
    if ME->R_UIGATE is bound.
***   Un-Register Event Handler
      set handler HANDLE_UIGATE_FREED for ME->R_UIGATE activation ABAP_FALSE.
      clear: ME->R_UIGATE.
    endif.

  endmethod.
  method GET_FCODE.

    field-symbols:  <S_FCODE>     type      YS_FCODE.

***--------------------------------------------------------------------------------------
*** Create Popup Menu Entries for Node
*** Show Messages
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_MSG       to <S_FCODE>-FCODE.
    move text-M01       to <S_FCODE>-TEXT.

  endmethod.
  method GET_GATE.

    move ME->R_GATE to RR_GATE.

  endmethod.
  method GET_INSTANCE.

    data: LS_PRPTY type /VCXI/CKX_S_PRPTY,
          LS_PRPVA type /VCXI/CKX_S_PRPVA.
    data: LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.
    field-symbols: <S_INSTANCE> type YS_INSTANCE.


    try.
        check IR_GATE is bound.

        read table T_INSTANCE assigning <S_INSTANCE> with key R_GATE = IR_GATE.
        if SY-SUBRC eq 0.
          move <S_INSTANCE>-R_ND to RR_ND.
        else.
          try.
***           Get Class Name from Property Set (Property CLSND)
              LS_PRPTY = IR_GATE->GET_PRPTY( IF_PRPID        = 'CLSND'
                                             IF_INCL_COMMENT = ABAP_FALSE ).

***           Read first entry in property value table
              read table LS_PRPTY-T_PRPVA into LS_PRPVA index 1.

            catch /VCXI/CX_CKX.
              clear: LS_PRPVA.
          endtry.

          if LS_PRPVA-PRPVA is not initial.
***         Create special Instance
            create object RR_ND
              type
              (LS_PRPVA-PRPVA)
              exporting
                IR_GATE   = IR_GATE
                IR_UIGATE = IR_UIGATE.
          else.
****         Create standard Instance
*            create object RR_ND
*              exporting
*                IR_GATE   = IR_GATE
*                IR_UIGATE = IR_UIGATE.
            return.
          endif.

***       Add to Buffer
          append initial line to T_INSTANCE assigning <S_INSTANCE>.
          move IR_GATE    to <S_INSTANCE>-R_GATE.
          move RR_ND      to <S_INSTANCE>-R_ND.
        endif.

***     Refresh Values
        RR_ND->INIT_NODE( ).

***   Catch Creation Errors
      catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method HANDLE_GATE_FREED.

    data: LS_INSTANCE type YS_INSTANCE.

    move ME->R_GATE to LS_INSTANCE-R_GATE.
    move ME         to LS_INSTANCE-R_ND.

    try.
***     Remove current Instance from Instance Buffer
        REMOVE_INSTANCE( IS_INSTANCE = LS_INSTANCE ).

***     Free Instance
        ME->DO_FREE( ).

      catch /VCXI/CX_CKX.                               "#EC NO_HANDLER
    endtry.

  endmethod.
  method HANDLE_UC_DOUBLE_CLICK.

***----------------------------------------------------------------------------
*** Open own UI
    ME->OPEN_UI_SELF( IF_SELECT = ABAP_TRUE ).

  endmethod.
  method HANDLE_UC_POPUP_SEL.

    case IF_FCODE.
      when C_UC_MSG.
        ME->HANDLE_UC_SHOW_MSG( ).

    endcase.

  endmethod.
  method HANDLE_UC_SHOW_MSG.

    data:  LR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE.

    check ME->R_GATE is bound.

    LR_MESSAGE = ME->R_GATE->GET_STATUS_MSG( IF_LSMSG = 0 ).
    if LR_MESSAGE is bound.
      LR_MESSAGE->DISPLAY_MSG( IF_SHOW_INITIAL = ABAP_TRUE ).
    endif.

  endmethod.
  method HANDLE_UIGATE_FREED.

    data: LS_INSTANCE type YS_INSTANCE.

    move ME->R_GATE to LS_INSTANCE-R_GATE.
    move ME         to LS_INSTANCE-R_ND.

    try.
***     Remove current Instance from Instance Buffer
        REMOVE_INSTANCE( IS_INSTANCE = LS_INSTANCE ).

***     Free Instance
        ME->DO_FREE( ).

      catch /VCXI/CX_CKX.                               "#EC NO_HANDLER
    endtry.

  endmethod.
  method INIT_NODE.

***--------------------------------------------------------------------------------------
*** Initialize Node Values from Gate
    free: ME->T_NVALS.

    move 0 to ME->F_NETTYPE.

  endmethod.
  method OPEN_UI_CHILD.

    check IR_GATE is bound and
          IR_GATE->GET_CLSUI( ) is not initial.

    ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = IR_GATE ).

*** Open Tree Node
    ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = IR_GATE->F_GATKY ).

*** Highlight Node
    if IF_SELECT eq ABAP_TRUE.
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = IR_GATE->F_GATKY ).
    endif.

  endmethod.
  method OPEN_UI_SELF.

    check ME->R_GATE is bound and
        ME->R_GATE->GET_CLSUI( ) is not initial.
    ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = ME->R_GATE ).

*** Open Tree Node
    ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = ME->R_GATE->F_GATKY ).

*** Highlight Node
    if IF_SELECT eq ABAP_TRUE.
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = ME->R_GATE->F_GATKY ).
    endif.

  endmethod.
  method REMOVE_INSTANCE.

*** Remove current Instance from Instance Buffer
    delete T_INSTANCE
      where R_GATE eq IS_INSTANCE-R_GATE
        and R_ND   eq IS_INSTANCE-R_ND.

  endmethod.
  method SET_EXPAND.

    check ME->F_EXPANDABLE eq ABAP_TRUE.

    move IF_EXPAND to ME->F_EXPANDED.

  endmethod.
  method SET_STATUS_ICON.

    data: LF_STATUS type        /VCXI/VKSR_ELMST,
          LF_VAL    type        NETVALSVAL.
    field-symbols:  <S_NVAL>            type        YS_NVALS.

    LF_STATUS = ME->R_GATE->GET_STATUS( ).
    case LF_STATUS.
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.  " Green
        move 'l_s_tl_g.bmp' to LF_VAL.
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y.  " Yellow
        move 'l_s_tl_y.bmp' to LF_VAL.
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.  " Red
        move 'l_s_tl_r.bmp' to LF_VAL.
    endcase.

    read table ME->T_NVALS assigning <S_NVAL> with key FL = '@'.
    if SY-SUBRC ne 0.
      append initial line to ME->T_NVALS assigning <S_NVAL>.
    endif.

    check <S_NVAL> is assigned.
*** Set Status Icon
    move '@'                  to <S_NVAL>-FL.
    concatenate '9/' LF_VAL into <S_NVAL>-VAL.

  endmethod.
