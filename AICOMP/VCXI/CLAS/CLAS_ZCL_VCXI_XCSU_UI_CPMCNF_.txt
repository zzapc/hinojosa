
class ZCL_VCXI_XCSU_UI_CPMCNF definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  data F_CURSOR type SCRFNAME .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_CLSUI_SUB type ref to /VCXI/CL_VKSRU_CLSUI .
  data R_PR_CPMCNF type ref to ZCL_VCXI_XCSU_PR_CPMCNF .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .

  methods DISPLAY_SUB
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSU_UI_CPMCNF definition
class ZCL_VCXI_XCSU_UI_CPMCNF implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.


endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI ?to ME->R_REGISTERED_UI.

endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_XCSU_UI_CPMCNF_BIND'
    exporting
      IR_UI_CPMCNF = ME
    importing
      ES_DYNP      = ME->S_DYNP.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->ACTIVATE( ).
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign the RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_CPMCNF.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Initialize Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

endmethod.
method DISPLAY_SUB.

  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE.

  check ME->R_CLSUI_SUB is not bound.

***------------------------------------------------------------------
*** Get first ANY with UI
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = 'ZVCXI_XCS_ANY_WITH_UI'
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  ME->R_CLSUI_SUB = ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  check IF_REPID eq ME->S_DYNP-REPID and
        IF_DYNNR eq ME->S_DYNP-DYNNR.

  try.
      SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                               IF_DYNNR = IF_DYNNR ).

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***   Lock everything if not in change mode
      loop at screen.
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

***   Modify Screen using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->DISPLAY_SUB( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  move IF_UCOMM to LF_UCOMM.
  ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_CPMCNF, ME->R_CLSUI_SUB.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
