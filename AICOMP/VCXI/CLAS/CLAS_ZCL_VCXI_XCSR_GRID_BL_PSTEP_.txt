
class ZCL_VCXI_XCSR_GRID_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data T_MGRPV type /VCXI/CKX_TT_OBJECT .
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .

  methods GET_MGRPV_FOR_PSTEP
    importing
      !IR_PSTEP type ref to /VCXI/CL_VSMC_PSTEP
      !IF_MMGRP type /VCXI/VSMC_MMGRP
    returning
      value(RT_MGRPV) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods INIT_MGRPV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSR_GRID_BL_PSTEP definition
class ZCL_VCXI_XCSR_GRID_BL_PSTEP implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_XCSR_S_BL_PSTEP_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_RTESPV.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

***--------------------------------------------------------------------------------------
*** Initialize List of Machine Group Versions
  ME->INIT_MGRPV( ).

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Standard Field Cat
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Change Field catalog attributes
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Information Button
      when 'BTN_INFO'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON  to <S_FCAT>-STYLE.
        move ABAP_TRUE                         to <S_FCAT>-ICON.
        move 'C'                               to <S_FCAT>-JUST.
        move 'Info'(C01)                       to <S_FCAT>-REPTEXT.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data: LF_LCVAL type /VCXI/VSMC_LCVAL,
        LF_WERKS type WERKS_D.
  data: LS_BL_PSTEP_GRID type ZVCXI_XCSR_S_BL_PSTEP_GRID,
        LS_LINK          type /VCXI/VSMC_S_LINK.
  data: LT_MGRPV       type /VCXI/CKX_TT_OBJECT,
        LT_ARBPL       type /VCXI/VSMC_TT_LINK,
        LT_ARBPL_LIMIT type /VCXI/CKX_TT_OBJECT,
        LT_ARBPL_SPEED type /VCXI/CKX_TT_OBJECT,
        LT_RTE_ARBPL   type /VCXI/VSMR_TT_RTE_ARBPL.
  data: LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_MGRPV     type ref to /VCXI/CL_VSMC_MGRPV,
        LR_ARBPL     type ref to /VCXI/CL_VSMC_ARBPL,
        LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Determine Link Context Value
  LF_LCVAL = ME->R_PR_RTESPV->GET_LCVAL( ).


  loop at ME->R_PR_RTESPV->T_BL_PSTEP into LR_BL_PSTEP.
    free: LT_ARBPL_LIMIT,
          LT_ARBPL_SPEED.

*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.

*** Fill Data
    clear: LS_BL_PSTEP_GRID.

*** Production Step Data
    move LR_BL_PSTEP                                            to LS_BL_PSTEP_GRID-R_BL_PSTEP.
    move LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( )    to LS_BL_PSTEP_GRID-IPSTP.
    move LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) to LS_BL_PSTEP_GRID-DESCR.

***------------------------------------------------------------------------------------------------
*** Create Production Step
    create object LR_RTE_PSTEP
      exporting
        IR_PSTEP = LR_BL_PSTEP->R_PSTEP.

    LR_RTE_PSTEP->R_BLOBJ = LR_BL_PSTEP.
    LR_RTE_PSTEP->F_LCVAL = LF_LCVAL.

*** Add Limits to Routing Production Step
    LR_BL_PSTEP->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).

    if LR_BL_PSTEP->R_PSTEP->F_MPSEA eq /VCXI/CL_VSMC_PSTEP=>C_MPSEA_STANDARD.
***------------------------------------------------------------------------------------------------
***   Limit Machine Group Version
      LT_MGRPV = ME->GET_MGRPV_FOR_PSTEP( IR_PSTEP = LR_BL_PSTEP->R_PSTEP
                                          IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).
      move LINES( LT_MGRPV ) to LS_BL_PSTEP_GRID-CMGVL.
      move LT_MGRPV          to LS_BL_PSTEP_GRID-T_MGVL.

***   Limit Work Center
      loop at LT_MGRPV into LR_OBJECT.
        move LR_OBJECT ?to LR_MGRPV.
        LT_ARBPL = LR_MGRPV->R_MGRP->/VCXI/IF_VSMC_LINK_ARBPL~GET_LINKED_ARBPL( IF_DATE  = ME->R_PR_RTESPV->F_DATE
                                                                                IF_LCVAL = LR_RTE_PSTEP->F_LCVAL ).
        loop at LT_ARBPL into LS_LINK.
          collect LS_LINK-R_OBJECT into LT_ARBPL_LIMIT.
        endloop.
      endloop.

***------------------------------------------------------------------------------------------------
***   Speed Machine Group Version
      LT_MGRPV = ME->GET_MGRPV_FOR_PSTEP( IR_PSTEP = LR_BL_PSTEP->R_PSTEP
                                          IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_SPEED ).
      move LINES( LT_MGRPV ) to LS_BL_PSTEP_GRID-CMGVS.
      move LT_MGRPV          to LS_BL_PSTEP_GRID-T_MGVS.

***   Speed Work Center
      loop at LT_MGRPV into LR_OBJECT.
        move LR_OBJECT ?to LR_MGRPV.
        LT_ARBPL = LR_MGRPV->R_MGRP->/VCXI/IF_VSMC_LINK_ARBPL~GET_LINKED_ARBPL( IF_DATE  = ME->R_PR_RTESPV->F_DATE
                                                                                IF_LCVAL = LR_RTE_PSTEP->F_LCVAL ).
        loop at LT_ARBPL into LS_LINK.
          collect LS_LINK-R_OBJECT into LT_ARBPL_SPEED.
        endloop.
      endloop.

***------------------------------------------------------------------------------------------------
***   Filter Work Center
      if LR_RTE_PSTEP->T_ARBPL is not initial or
         LR_RTE_PSTEP->I_WERKS is not initial.
***     Filter Limit Work Center
        loop at LT_ARBPL_LIMIT into LR_OBJECT.
          move LR_OBJECT ?to LR_ARBPL.
          if LR_RTE_PSTEP->T_ARBPL is not initial.
            read table LR_RTE_PSTEP->T_ARBPL with key TABLE_LINE = LR_ARBPL
                                             transporting no fields.
            if SY-SUBRC ne 0.
              delete LT_ARBPL_LIMIT.
              continue.
            endif.
          endif.
          if LR_RTE_PSTEP->I_WERKS is not initial.
            move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.
            if LF_WERKS not in LR_RTE_PSTEP->I_WERKS.
              delete LT_ARBPL_LIMIT.
            endif.
          endif.
        endloop.

***     Filter Speed Work Center
        loop at LT_ARBPL_SPEED into LR_OBJECT.
          move LR_OBJECT ?to LR_ARBPL.
          if LR_RTE_PSTEP->T_ARBPL is not initial.
            read table LR_RTE_PSTEP->T_ARBPL with key TABLE_LINE = LR_ARBPL
                                             transporting no fields.
            if SY-SUBRC ne 0.
              delete LT_ARBPL_SPEED.
              continue.
            endif.
          endif.
          if LR_RTE_PSTEP->I_WERKS is not initial.
            move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.
            if LF_WERKS not in LR_RTE_PSTEP->I_WERKS.
              delete LT_ARBPL_SPEED.
            endif.
          endif.
        endloop.
      endif.

***------------------------------------------------------------------------------------------------
***   Count Work Center
      move LINES( LT_ARBPL_LIMIT ) to LS_BL_PSTEP_GRID-CARBL.
      move LT_ARBPL_LIMIT          to LS_BL_PSTEP_GRID-T_ARBL.
      move LINES( LT_ARBPL_SPEED ) to LS_BL_PSTEP_GRID-CARBS.
      move LT_ARBPL_SPEED          to LS_BL_PSTEP_GRID-T_ARBS.

***   Valid Work Center (Limit & Speed)
      loop at LT_ARBPL_LIMIT into LR_OBJECT.
        read table LT_ARBPL_SPEED with key TABLE_LINE = LR_OBJECT
                                  transporting no fields.
        if SY-SUBRC eq 0.
          add 1            to LS_BL_PSTEP_GRID-CARBV.
          append LR_OBJECT to LS_BL_PSTEP_GRID-T_ARBV.
        endif.
      endloop.

    else.
***   Exit Explosion of Production Steps
      LT_RTE_ARBPL = /VCXI/CL_VSMR_RTE_MGR=>EXPLODE_PSTEP_EXIT( IF_DATE      = ME->R_PR_RTESPV->F_DATE
                                                                IT_RTE_PSTEP = value #( ( LR_RTE_PSTEP ) ) ).
      LS_BL_PSTEP_GRID-CARBV  = LINES( LT_RTE_ARBPL ).
      LS_BL_PSTEP_GRID-T_ARBV = value #( for LR_RTE_ARBPL in LT_RTE_ARBPL ( LR_RTE_ARBPL->R_ARBPL ) ).
    endif.

***------------------------------------------------------------------------------------------------
*** Info Icon
    move ICON_INFORMATION                      to LS_BL_PSTEP_GRID-BTN_INFO.

    move-corresponding LS_BL_PSTEP_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_MGRPV_FOR_PSTEP.

  data:  LT_MGRPV           type        /VCXI/CKX_TT_OBJECT,
         LT_MTYPE           type        /VCXI/CKX_TT_OBJECT,
         LT_ATYPE           type        /VCXI/CKX_TT_OBJECT,
         LT_ATYPE_MGRPV     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_MGRPV           type ref to /VCXI/CL_VSMC_MGRPV,
         LR_ATYPE           type ref to /VCXI/CL_VSMC_ATYPE,
         LR_OBJECT          type ref to /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Get all Linked Machine Types and Add-ons Types
  LT_MTYPE = IR_PSTEP->/VCXI/IF_VSMC_LINK_MTYPE~GET_LINKED_MTYPE( ).
  LT_ATYPE = IR_PSTEP->/VCXI/IF_VSMC_LINK_ATYPE~GET_LINKED_ATYPE( ).

***--------------------------------------------------------------------------------------
  loop at ME->T_MGRPV into LR_OBJECT.
    move LR_OBJECT ?to LR_MGRPV.

*** Only Machine Group Mode
    check LR_MGRPV->R_MGRP->F_MMGRP eq IF_MMGRP.

*** Filter by Machine Types
    if LT_MTYPE is not initial.
      read table LT_MTYPE with key TABLE_LINE = LR_MGRPV->R_MGRP->R_MTYPE
                          transporting no fields.
      if SY-SUBRC ne 0.
        clear LR_MGRPV.
      endif.
    endif.

    check LR_MGRPV is bound.
    append LR_MGRPV to LT_MGRPV.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Machine Group Versions
  loop at LT_MGRPV into LR_OBJECT.
    move LR_OBJECT ?to LR_MGRPV.

    if LT_ATYPE is not initial.
***   Check Add-ons are used
      LT_ATYPE_MGRPV = LR_MGRPV->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).

      loop at LT_ATYPE into LR_OBJECT.
        move LR_OBJECT ?to LR_ATYPE.

        read table LT_ATYPE_MGRPV with key TABLE_LINE = LR_ATYPE
                                  transporting no fields.
        if SY-SUBRC ne 0.
          clear LR_MGRPV.
          exit.
        endif.
      endloop.
    endif.

*** If Machine Group Version is valid
    if LR_MGRPV is bound.
      append LR_MGRPV to RT_MGRPV.
    endif.
  endloop.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LS_BL_PSTEP_GRID type          ZVCXI_XCSR_S_BL_PSTEP_GRID.
  data:          LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_BL_PSTEP_GRID.

***   Start Popup
      if LS_BL_PSTEP_GRID-R_BL_PSTEP is bound.
        ZCL_VCXI_XCSR_POPUP_BLPINFO=>START( IR_BL_PSTEP = LS_BL_PSTEP_GRID-R_BL_PSTEP ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_BL_PSTEP_GRID type          ZVCXI_XCSR_S_BL_PSTEP_GRID.
  data:          LT_OBJECT        type          /VCXI/CKX_TT_OBJECT.
  data:          LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_BL_PSTEP_GRID.

***   Identify List of Objects
      case E_COLUMN-FIELDNAME.
        when 'CMGVL'.
          move LS_BL_PSTEP_GRID-T_MGVL to LT_OBJECT.
        when 'CARBL'.
          move LS_BL_PSTEP_GRID-T_ARBL to LT_OBJECT.
        when 'CMGVS'.
          move LS_BL_PSTEP_GRID-T_MGVS to LT_OBJECT.
        when 'CARBS'.
          move LS_BL_PSTEP_GRID-T_ARBS to LT_OBJECT.
        when 'CARBV'.
          move LS_BL_PSTEP_GRID-T_ARBV to LT_OBJECT.
      endcase.
      check LT_OBJECT is not initial.

***   Start Popup
      call function '/VCXI/CKX_OBJECT_POPUP_START'
        exporting
          IT_OBJECT_ALL          = LT_OBJECT.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_MGRPV.

  data:  LT_MGRP     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_MACHCUST type ref to /VCXI/CL_VSMC_MACHCUST,
         LR_MGRP     type ref to /VCXI/CL_VSMC_MGRP,
         LR_MGRPV    type ref to /VCXI/CL_VSMC_MGRPV,
         LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.

*** Get all Machine Groups
  LR_MACHCUST = /VCXI/CL_VSMC_MACHCUST=>GET_INSTANCE( ).
  LT_MGRP = LR_MACHCUST->GET_REGISTERED_OBJECT( IF_TOOBJ = /VCXI/CL_VSMC_MGRP=>C_TOOBJ_MGRP ).

*** Apply some Filter
  loop at LT_MGRP into LR_OBJECT.
    move LR_OBJECT ?to LR_MGRP.

*** Filter to active Machine Group Versions
    try.
        LR_MGRPV = LR_MGRP->GET_MGRPV_BY_DATE( IF_DATE = ME->R_PR_RTESPV->F_DATE ).
        if LR_MGRPV is bound.
          append LR_MGRPV to ME->T_MGRPV.
        endif.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
  endloop.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

  set handler ME->HANDLE_BUTTON_CLICK for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
