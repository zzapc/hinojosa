
class ZCL_VCXI_P0SS_PR_SPEC definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_ICONT .
  interfaces ZIF_VCXI_P0SS_PRALLOC .

  aliases C_ICONT_PROD
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_PROD .
  aliases C_ICONT_SALES
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_SALES .
  aliases C_IEVNT_O_ICONT_CHANGED
    for ZIF_VCXI_P0SS_ICONT~C_IEVNT_O_ICONT_CHANGED .
  aliases C_IPRVT_P0_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_IPRVT_P0_ICONT .
  aliases C_PARID_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_PARID_ICONT .
  aliases GET_ICONT
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT .
  aliases GET_ICONT_DESCR
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR .
  aliases SET_ICONT
    for ZIF_VCXI_P0SS_ICONT~SET_ICONT .

  constants C_IPRVT_P0_SPEC type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SPEC'. "#EC NOTEXT
  constants C_PARID_BOXPA type /VCXI/VKS_PARID value 'ZVCXI_P0_BOXPA'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE'. "#EC NOTEXT
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE'. "#EC NOTEXT
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI'. "#EC NOTEXT
  constants C_PARID_PRSTY type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSTY'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT

  methods GET_VALID_TLAGC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_TLAGC) type ZVCXI_P0SS_TT_TLAGC
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TLAMI
    returning
      value(RT_TLAMI) type ZVCXI_P0SS_TT_TLAMI
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_BOXPA
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_BOXPA_REQ
    returning
      value(RF_DEFINED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_ELEMENT_REQ
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SALES_ACTIV
    returning
      value(RF_SALES_ACTIV) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_STITCH_REQ
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CREATE_VLASH_I
    importing
      !IF_VLASH type ZVCXI_P0SS_VLASH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CREATE_VLASH_O
    importing
      !IF_VLASH type ZVCXI_P0SS_VLASH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VLASH_I
    returning
      value(RT_VLASH) type ZVCXI_P0SS_TT_VLASH
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VLASH_O
    returning
      value(RT_VLASH) type ZVCXI_P0SS_TT_VLASH
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    importing
      !IF_POOTI type ZVCXI_P0S_POOTI
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_FSHTP
    returning
      value(RF_FSHTP) type ZVCXI_P0SS_FSHTP
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM_I
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM_O
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_JOILE
    returning
      value(RS_JOILE) type ZVCXI_P0S_S_JOILE
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO_DESCR
    returning
      value(RF_JOIPO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    returning
      value(RF_JOITY) type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY_DESCR
    returning
      value(RF_JOITY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    returning
      value(RS_JOIWI) type ZVCXI_P0S_S_JOIWI
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_I
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_O
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOI
    returning
      value(RF_NOCOI) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOO
    returning
      value(RF_NOCOO) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOSTI
    returning
      value(RF_NOSTI) type ZVCXI_P0SS_NOSTI
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR_I
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR_O
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_PRALI
    returning
      value(RF_PRALL) type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_PRALL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RT_PRALL) type ZVCXI_P0SS_TT_PRALL
    raising
      /VCXI/CX_CKX .
  methods GET_PRALLOC
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRALL type ZVCXI_P0SS_PRALL optional
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRALO
    returning
      value(RF_PRALL) type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods GET_PRODI_DESCR
    returning
      value(RF_PRODI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_DESCR
    returning
      value(RF_PRSTY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_ELEMENTS
    returning
      value(RT_ELEMENT) type ZVCXI_P0SS_TT_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI
    returning
      value(RF_PRTYI) type ZVCXI_P0SS_PRTYI
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI_DESCR
    returning
      value(RF_PRTYI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO
    returning
      value(RF_PRTYO) type ZVCXI_P0SS_PRTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO_DESCR
    returning
      value(RF_PRTYO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_STITP
    returning
      value(RS_STITP) type ZVCXI_P0SS_S_STITP
    raising
      /VCXI/CX_CKX .
  methods GET_TILAM
    returning
      value(RF_TILAM) type ZVCXI_P0SS_TILAM
    raising
      /VCXI/CX_CKX .
  methods GET_TOLAM
    returning
      value(RF_TOLAM) type ZVCXI_P0SS_TOLAM
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    raising
      /VCXI/CX_CKX .
  methods GET_VLASH_I
    returning
      value(RR_VLASH) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_VLASH_O
    returning
      value(RR_VLASH) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_LAMI_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_EDITABLE_I
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_EDITABLE_O
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_VISIBLE_I
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SBINFO_VISIBLE_O
    exporting
      !EF_MATNR type ABAP_BOOL
      !EF_SBINFO type ABAP_BOOL
      !EF_CALIP type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FSHTP
    importing
      !IF_FSHTP type ZVCXI_P0SS_FSHTP
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM_I
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM_O
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR_I
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR_O
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOI
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOO
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_NOSTI
    importing
      !IF_NOSTI type ZVCXI_P0SS_NOSTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR_I
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR_O
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRALI
    importing
      !IF_PRALL type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods SET_PRALO
    importing
      !IF_PRALL type ZVCXI_P0SS_PRALL
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTY
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYI
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYO
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_STITP
    importing
      !IS_STITP type ZVCXI_P0SS_S_STITP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    preferred parameter IS_STITP
    raising
      /VCXI/CX_CKX .
  methods SET_TILAM
    importing
      !IF_TILAM type ZVCXI_P0SS_TILAM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TOLAM
    importing
      !IF_TOLAM type ZVCXI_P0SS_TOLAM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_TPRST type /VCXI/VKS_ATTID value 'TPRST'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_BOXPA_CHANGED type /VCXI/VKSC_IEVNT value 'BOXPA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PROD_DIM_CHANGED type /VCXI/VKSC_IEVNT value 'PROD_DIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PRSTY_CHANGED type /VCXI/VKSC_IEVNT value 'PRSTY_CHANGED'. "#EC NOTEXT
  constants C_JOIPO_N type ZVCXI_P0S_JOIPO value 'N'. "#EC NOTEXT
  data F_TPRST type ZVCXI_P0SS_TPRST .
  data R_PR_CLOS type ref to ZCL_VCXI_P0SS_PR_CLOS .
  data R_PR_SHEET type ref to ZCL_VCXI_P0SS_PR_SHEET .

  methods MOVE_PRALLOC_SP_PRINT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_PRINT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_MS_SHTPR
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMP_SE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOINT
    returning
      value(RF_SUBRC) type SY-SUBRC
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO_JOITY
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRSTY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRSTY_JOITY
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PTYPE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PTYPE_PRSTY
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLAMI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CREATE_SHTPR
    returning
      value(RR_GATE_SHTPR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_LAMI
    importing
      !IF_LASID type ZVCXI_P0SS_LASID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL
    returning
      value(RR_DIECUT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods REMOVE_EMPTY_LAMI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods REMOVE_EMPTY_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_PR_SPEC definition
class ZCL_VCXI_P0SS_PR_SPEC implementation.
method CHECK_BOXPA.

  data: LF_TPRST      type        ZVCXI_P0SS_TPRST,
        LF_PRSTY      type        ZVCXI_P0SS_PRSTY,
        LF_BOXPA      type        ZVCXI_P0SS_BOXPA.
  data: LT_BOXPA      type        ZVCXI_P0SS_TT_BOXPA.
  data: LR_CUST_PRSTY type ref to ZCL_VCXI_P0SS_CUST_PRSTY.

  LF_TPRST = ME->GET_TPRST( ).
  LF_PRSTY = ME->GET_PRSTY( ).
  LF_BOXPA = ME->GET_BOXPA( ).

  if LF_TPRST is not initial and
     LF_PRSTY is not initial.

    try.
        LR_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LF_TPRST
                                                                IF_PRSTY = LF_PRSTY ).
      catch /VCXI/CX_CKX.
***     Product Style Customizing Reference can't be assigned.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_P0SSC'
            IF_MSGNO = '101' ).
    endtry.
  endif.

  check LR_CUST_PRSTY is bound.

  move LR_CUST_PRSTY->CHECK_SCORE_MULTI_BOXPA( ) to LT_BOXPA.
  read table LT_BOXPA with key TABLE_LINE = LF_BOXPA transporting no fields.
  check SY-SUBRC = 0.
  move ABAP_TRUE to RF_OKAY.

endmethod.
method CHECK_BOXPA_REQ.

  data: LF_PRSTY type             ZVCXI_P0SS_PRSTY,
        LF_TPRST type             ZVCXI_P0SS_TPRST.
  data: LT_BOXPA type             ZVCXI_P0SS_TT_BOXPA.
  data: LR_CUST_PRSTY type ref to ZCL_VCXI_P0SS_CUST_PRSTY.

  LF_TPRST = ME->GET_TPRST( ).
  LF_PRSTY = ME->GET_PRSTY( ).

  if LF_TPRST is not initial and
     LF_PRSTY is not initial.

    try.
        LR_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LF_TPRST
                                                                IF_PRSTY = LF_PRSTY ).
      catch /VCXI/CX_CKX.
***     Product Style Customizing Reference can't be assigned.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_P0SSC'
            IF_MSGNO = '101' ).
    endtry.
  endif.

  check LR_CUST_PRSTY is bound.

  move LR_CUST_PRSTY->CHECK_SCORE_MULTI_BOXPA( ) to LT_BOXPA.
  check lines( LT_BOXPA ) gt 1.

  move ABAP_TRUE to RF_DEFINED.

endmethod.
method CHECK_COMP_SE.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_COMP_SE      type ref to ZCL_VCXI_P0SS_PR_COMP_SE.

***------------------------------------------------------------------------------------------------
*** Get Component SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
  endloop.

  check LR_PR_COMP_SE is bound.
  move ABAP_TRUE to RF_RETURN.

endmethod.
method CHECK_ELEMENT_REQ.

  data: LF_PRSTY type             ZVCXI_P0SS_PRSTY,
        LF_TPRST type             ZVCXI_P0SS_TPRST.
  data: LR_CUST_PRSTY type ref to ZCL_VCXI_P0SS_CUST_PRSTY.

  LF_TPRST = ME->GET_TPRST( ).
  LF_PRSTY = ME->GET_PRSTY( ).

  if LF_TPRST is not initial and
     LF_PRSTY is not initial.

    try.
        LR_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LF_TPRST
                                                                IF_PRSTY = LF_PRSTY ).
      catch /VCXI/CX_CKX.
***     Product Style Customizing Reference can't be assigned.
        exit.
    endtry.
  endif.

  check LR_CUST_PRSTY is bound and
        LR_CUST_PRSTY->CHECK_SCORE_ELEMENT( IF_IELEM = IF_IELEM ) eq ABAP_TRUE.
  move ABAP_TRUE to RF_REQUIRED.

endmethod.
method CHECK_JOINT.

  data: LF_JOITY     type ZVCXI_P0S_JOITY.
  data: LS_JOITY_DEF type ZVCXI_P0S_TC340,
        LS_JOIWI     type ZVCXI_P0S_S_JOIWI.

*** Start Positiv
  move 0 to RF_SUBRC.
  LF_JOITY = ME->GET_JOITY( ).
  LS_JOITY_DEF = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ).

  if ME->GET_JOIPO( ) eq C_JOIPO_N.
*** Joint Type needs to be maintained
    if LF_JOITY is initial.
      move 1 to RF_SUBRC.
    endif.

  else.
    LS_JOIWI = ME->GET_JOIWI( ).
*** Joint Type needs to be maintained
    if ME->GET_JOITY( )   is initial and
     ( LS_JOIWI-JOIWI     is not initial or
       LS_JOITY_DEF-FRJWI eq ABAP_FALSE ).
      move 1 to RF_SUBRC.

*** Joint Width needs to be maintained
    elseif ME->GET_JOITY( ) is not initial and
         ( LS_JOIWI-JOIWI   is initial     and
           LS_JOITY_DEF-FRJWI eq ABAP_TRUE ).
      move 2 to RF_SUBRC.

*** Joint Type and Width needs to be maintained
    elseif ME->GET_JOITY( )   is initial and
         ( LS_JOIWI-JOIWI     is initial     and
           LS_JOITY_DEF-FRJWI eq ABAP_TRUE ).
      move 3 to RF_SUBRC.
    endif.
  endif.

endmethod.
method CHECK_JOIPO_JOITY.

  data: LF_JOIPO type ZVCXI_P0S_JOIPO,
        LF_JOITY type ZVCXI_P0S_JOITY.

  LF_JOIPO = ME->GET_JOIPO( ).
  LF_JOITY = ME->GET_JOITY( ).

  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_JOIPO( exporting IF_JOITY = LF_JOITY
                                                       IF_JOIPO = LF_JOIPO
                                             importing EF_EXIST = RF_OKAY ).

endmethod.
method CHECK_PRSTY.

*** 0 Product Style is maintained and valid.
*** 1 Product Style is maintained and not valid.
*** 2 Product Style is not maintained.

  data: LF_PRSTY      type        ZVCXI_P0SS_PRSTY.

  LF_PRSTY = ME->GET_PRSTY( ).
  if LF_PRSTY is initial.
    move 2 to RF_RETURN.
    exit.
  endif.

  case ZCL_VCXI_P0SS_CUST_PRSTY=>CHECK_PRSTY_EXIST( IF_PRSTY = LF_PRSTY ).
    when ABAP_TRUE.
      move 0 to RF_RETURN.
    when others.
      move 1 to RF_RETURN.
  endcase.

endmethod.
method CHECK_PRSTY_JOITY.

  data: LF_TPRST type ZVCXI_P0SS_TPRST,
        LF_PRSTY type ZVCXI_P0SS_PRSTY,
        LF_JOITY type ZVCXI_P0S_JOITY,
        LF_COUNT type I.

  LF_TPRST = ME->GET_TPRST( ).
  LF_PRSTY = ME->GET_PRSTY( ).
  LF_JOITY = ME->GET_JOITY( ).

  select count(*)
         into LF_COUNT
         from ZVCXI_P0S_TC204
        where TPRST eq LF_TPRST
         and  PRSTY eq LF_PRSTY
         and  JOITY eq LF_JOITY.

  check SY-SUBRC = 0.
  move ABAP_TRUE to RF_OKAY.

endmethod.
method CHECK_PTYPE.

*** 0 Product Type is maintained and valid.
*** 1 Product Type is maintained and not valid.
*** 2 Product type is not maintained.

  data: LF_PTYPE      type        ZVCXI_P0S_PTYPE.

  LF_PTYPE = ME->GET_PTYPE( ).
  if LF_PTYPE is initial.
    move 2 to RF_RETURN.
    exit.
  endif.

  case ZCL_VCXI_P0SS_CUST_PRSTY=>CHECK_PTYPE_EXIST( IF_PTYPE = LF_PTYPE ).
    when ABAP_TRUE.
      move 0 to RF_RETURN.
    when others.
      move 1 to RF_RETURN.
  endcase.

endmethod.
method CHECK_PTYPE_PRSTY.

  data: LF_TPRST type ZVCXI_P0SS_TPRST,
        LF_PRSTY type ZVCXI_P0SS_PRSTY,
        LF_PTYPE type ZVCXI_P0S_PTYPE,
        LF_COUNT type I.

  LF_TPRST = ME->GET_TPRST( ).
  LF_PRSTY = ME->GET_PRSTY( ).
  LF_PTYPE = ME->GET_PTYPE( ).

  select count(*)
         into LF_COUNT
         from ZVCXI_P0S_TC203
        where TPRST eq LF_TPRST
         and  PRSTY eq LF_PRSTY
         and  PTYPE eq LF_PTYPE.

  check SY-SUBRC = 0.
  move ABAP_TRUE to RF_OKAY.

endmethod.
method CHECK_SALES_ACTIV.

  if ME->GET_ICONT( ) eq ZCL_VCXI_P0SS_PR_SPEC=>C_ICONT_SALES.
    RF_SALES_ACTIV = ABAP_TRUE.
  endif.

endmethod.
method CHECK_STITCH_REQ.

  data: LF_JOITY type                   ZVCXI_P0S_JOITY.

  move ME->GET_JOITY( ) to LF_JOITY.

  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_MCONSU( exporting IF_JOITY = LF_JOITY
                                                        IF_ISVCE = 'MC_JSTITCH'
                                              importing EF_EXIST = RF_REQUIRED ).

endmethod.
method CHECK_TLAMI.

*** 0 No Lamination at all.
*** 1 Lamination Type(s) are maintained correctly.
*** 2 Inline Lamination is maintained twice.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get all Lamination
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        check LR_PR_LAMI is bound and
              LR_PR_LAMI->GET_TLAMI( ) eq ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_RTS.
        add 1 to RF_RETURN.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_PARID        type        /VCXI/VKS_PARID,
         LF_CHECK        type        CHAR30,
         LF_INVALID      type        ABAP_BOOL,
         LF_MSGV1        type        SYMSGV.
  data:  LR_DIECUT_TOOL  type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET       type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA        type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC        type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM        type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN        type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT        type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID        type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT        type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool
  LR_DIECUT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Die Cut Tool
  check LR_DIECUT_TOOL is bound.
  append ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO to LT_SETID.
  LR_DIECUT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Die Cut Tool Mapping Mapping
  read table LR_DIECUT_TOOL->T_MAPSET into LS_MAPSET with key SETID = ZCL_VCXI_P0SS_PR_SHEET=>C_SETID_DCTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq ZCL_VCXI_P0SS_PR_SHEET=>C_CHECK_TOOL and
          LF_PARID is not initial.


    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method CREATE_SHTPR.

  data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

*** Get Sheet Procurement Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  if lines( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Create Sheet Procurement
  RR_GATE_SHTPR = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

  if RR_GATE_SHTPR              is bound     and
     RR_GATE_SHTPR->IS_INUSE( ) ne ABAP_TRUE.
    RR_GATE_SHTPR->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.

endmethod.
method CREATE_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Laminating Sheet Variant
  if IF_VLASH is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

***--------------------------------------------------------------------------------------
*** Clear Laminating Sheet Variant
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method CREATE_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Laminating Sheet Variant
  if IF_VLASH is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

***--------------------------------------------------------------------------------------
*** Clear Laminating Sheet Variant
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->CREATE_VLASH( IF_VLASH = IF_VLASH ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method GET_ALL_PRALL.

  data:          LF_LASID         type        ZVCXI_P0SS_LASID,
                 LF_CHANGEABLE    type        ABAP_BOOL.
  data:          LT_GATE          type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_PRALLOC  type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_PRALLOC  type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_CURR     type ref to /VCXI/CL_VKSR_GATE,
                 LR_PRALLOC       type ref to ZIF_VCXI_P0SS_PRALLOC.
  field-symbols: <S_PRALL>        type        ZVCXI_P0SS_S_PRALL.

***--------------------------------------------------------------------------------------
*** Get current Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = IF_PRSID ).

***--------------------------------------------------------------------------------------
*** Check "Specification"
  append ME->R_GATE to LT_GATE_PRALLOC.

*** Check Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

*** Check Lamination
  case IF_PRSID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O to LF_LASID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I to LF_LASID.
  endcase.
  LR_GATE = ME->GET_LAMI( IF_LASID  = LF_LASID
                          IF_CREATE = ABAP_FALSE ).
  if LR_GATE is bound.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

***--------------------------------------------------------------------------------------
*** Process all potential Print Allocations
  loop at LT_GATE_PRALLOC into LR_GATE_PRALLOC.
    try.
        move LR_GATE_PRALLOC->R_CLSPR ?to LR_PRALLOC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PRALLOC.
    endtry.
    check LR_PRALLOC is bound.

*** Reduce to possible
    if LR_GATE_PRALLOC ne LR_GATE_CURR.
      LR_PRALLOC->GET_PRINFO( exporting IF_PRSID      = IF_PRSID
                                        IF_CREATE     = ABAP_FALSE
                              importing EF_CHANGEABLE = LF_CHANGEABLE ).
      check LF_CHANGEABLE eq ABAP_TRUE.
    endif.

*** Build Allocation List
    append initial line to RT_PRALL assigning <S_PRALL>.
    move LR_GATE_PRALLOC->F_ID         to <S_PRALL>-PRALL.
    move LR_GATE_PRALLOC->GET_DESCR( ) to <S_PRALL>-DESCR.
  endloop.

endmethod.
method GET_ALL_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  RT_VLASH = LR_PR_LAMI->GET_ALL_VLASH( ).

endmethod.
method GET_ALL_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  RT_VLASH = LR_PR_LAMI->GET_ALL_VLASH( ).

endmethod.
method GET_BOXPA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).
  move LS_PARAM-ATWRT to RF_BOXPA.

endmethod.
method GET_BOXPA_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_BOXPA'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_BOXPA   type                   ZVCXI_P0SS_BOXPA.

  LF_BOXPA = ME->GET_BOXPA( ).

*** Return BOXPA description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_BOXPA into LS_D07V.
  check SY-SUBRC eq 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_CALIP.

  data:  LS_CALIP     type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
         LR_CALIP     type ref to ZIF_VCXI_P0SS_CALIP.

***------------------------------------------------------------------------------------------------
*** Get Caliper Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_CALIP=>C_IPRVT_P0_CALIP
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CALIP.
        check LR_CALIP is bound.
        clear: LS_CALIP.
        LS_CALIP = LR_CALIP->GET_CALIP( IF_POOTI = IF_POOTI ).
        check LS_CALIP-CALIP is not initial.


        if RS_CALIP-CALIP is initial.
          move LS_CALIP to RS_CALIP.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_CALIP-CALIP
                                                              IF_CALCV_UOM_1 = RS_CALIP-CALIP_UOM
                                                              IF_CALCV_2     = LS_CALIP-CALIP
                                                              IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = RS_CALIP-CALIP_UOM
                                                    importing EF_CALCV       = RS_CALIP-CALIP
                                                              EF_CALCV_UOM   = RS_CALIP-CALIP_UOM ).
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CALIP.
    endtry.
  endloop.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FSHTP.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***------------------------------------------------------------------------------------------------
*** Get Flag if Sheet Procurement is there
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
  endloop.

  check LR_PR_MS_SHTPR is bound.
  move ABAP_TRUE to RF_FSHTP.

endmethod.
method GET_GRAMM_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_GRAMM( ) to RS_GRAMM.

endmethod.
method GET_GRAMM_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_GRAMM( ) to RS_GRAMM.

endmethod.
method GET_JOILE.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing ES_JOILE = RS_JOILE ).

endmethod.
method GET_JOIPO.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOIPO = RF_JOIPO ).

endmethod.
method GET_JOIPO_DESCR.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOIPO_DESCR = RF_JOIPO_DESCR ).

endmethod.
method GET_JOITY.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOITY = RF_JOITY ).

endmethod.
method GET_JOITY_DESCR.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOITY_DESCR = RF_JOITY_DESCR ).

endmethod.
method GET_JOIWI.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing ES_JOIWI = RS_JOIWI ).

endmethod.
method GET_LAMI.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get all Lamination
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
        check LR_PR_LAMI is bound and
              LR_PR_LAMI->GET_LASID( ) eq IF_LASID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Lamination Side
    move RR_GATE->R_CLSPR ?to LR_PR_LAMI.
    LR_PR_LAMI->SET_LASID( IF_LASID = IF_LASID ).

  endif.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_MATNR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_MATNR( ) to RF_MATNR.

endmethod.
method GET_MATNR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_MATNR( ) to RF_MATNR.

endmethod.
method GET_NOCOI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                    IF_CREATE = ABAP_FALSE
                          importing EF_NOCOL  = RF_NOCOI ).

endmethod.
method GET_NOCOO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                    IF_CREATE = ABAP_FALSE
                          importing EF_NOCOL  = RF_NOCOO ).

endmethod.
method GET_NOSTI.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_NOSTI = RF_NOSTI ).

endmethod.
method GET_PAPGR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_PAPGR( ) to RF_PAPGR.

endmethod.
method GET_PAPGR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_PAPGR( ) to RF_PAPGR.

endmethod.
method GET_PRALI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

*** Return
  move LR_GATE->F_ID to RF_PRALL.

endmethod.
method GET_PRALLOC.

  data:  LF_CREATE        type        ABAP_BOOL,
         LF_LASID         type        ZVCXI_P0SS_LASID.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PRALLOC  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PRALLOC  type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_INFO     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC       type ref to ZIF_VCXI_P0SS_PRALLOC.

***--------------------------------------------------------------------------------------
*** Check "Specification"
  append ME->R_GATE to LT_GATE_PRALLOC.

*** Check Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

*** Check Lamination
  case IF_PRSID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O to LF_LASID.
    when ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I.
      move ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I to LF_LASID.
  endcase.
  LR_GATE = ME->GET_LAMI( IF_LASID  = LF_LASID
                          IF_CREATE = ABAP_FALSE ).
  if LR_GATE is bound.
    append LR_GATE to LT_GATE_PRALLOC.
  endif.

***--------------------------------------------------------------------------------------
*** Search for Print Allocation
  loop at LT_GATE_PRALLOC into LR_GATE_PRALLOC.
    try.
        move LR_GATE_PRALLOC->R_CLSPR ?to LR_PRALLOC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PRALLOC.
    endtry.
    check LR_PRALLOC is bound.

*** Verify Allocation ID
    clear LF_CREATE.
    if IF_PRALL is supplied.
      if IF_PRALL eq LR_GATE_PRALLOC->F_ID or
         IF_PRALL is initial.
***     Ensure Print exists if requested
        move ABAP_TRUE to LF_CREATE.
      else.
***     Not the one
        continue.
      endif.
    endif.

*** Check "Specification"
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IF_PRSID
                                      IF_CREATE = LF_CREATE
                            importing ER_GATE   = LR_GATE_INFO ).
    if LR_GATE_INFO is bound.
      move LR_GATE_PRALLOC to RR_GATE.
      exit.
    endif.
  endloop.

endmethod.
method GET_PRALO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

*** Return
  move LR_GATE->F_ID to RF_PRALL.

endmethod.
method GET_PRINT.

  data:  LS_PRVDR_DEF       TYPE        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       TYPE        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT        type ref to ZCL_VCXI_P0SS_PR_PRINT.

***------------------------------------------------------------------------------------------------
*** Get all Prints
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        check LR_PR_PRINT is bound and
              LR_PR_PRINT->GET_PRSID( ) eq IF_PRSID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Print Side
    move RR_GATE->R_CLSPR ?to LR_PR_PRINT.
    LR_PR_PRINT->SET_PRSID( IF_PRSID = IF_PRSID ).

  endif.

endmethod.
method GET_PRODI_DESCR.

*** Return only Product Dimensions
  RF_PRODI_DESCR = 'Product Dim.'(001).

endmethod.
method GET_PROHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
  move LS_PARAM-ATFLV to RS_PROHE-PROHE.
  move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.

endmethod.
method GET_PROLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
  move LS_PARAM-ATFLV to RS_PROLE-PROLE.
  move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.

endmethod.
method GET_PROWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
  move LS_PARAM-ATFLV to RS_PROWI-PROWI.
  move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.

endmethod.
method GET_PRSTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).
  move LS_PARAM-ATWRT to RF_PRSTY.

endmethod.
method GET_PRSTY_DESCR.

  data: LF_PRSTY        type        ZVCXI_P0SS_PRSTY,
        LF_TPRST        type        ZVCXI_P0SS_TPRST.

  LF_PRSTY = ME->GET_PRSTY( ).
  LF_TPRST = ME->GET_TPRST( ).

  RF_PRSTY_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PRSTY_DESCR( IF_TPRST = LF_TPRST
                                                              IF_PRSTY = LF_PRSTY ).

endmethod.
method GET_PRSTY_ELEMENTS.

  data:          LS_PROLE   type ZVCXI_P0S_S_PROLE,
                 LS_PROWI   type ZVCXI_P0S_S_PROWI,
                 LS_PROHE   type ZVCXI_P0S_S_PROHE,
                 LS_JOIWI   type ZVCXI_P0S_S_JOIWI,
                 LS_FEXTT   type ZVCXI_P0SS_S_FEXTT,
                 LS_FEXTB   type ZVCXI_P0SS_S_FEXTB,
                 LS_FGAPT   type ZVCXI_P0SS_S_FGAPT,
                 LS_FGAPB   type ZVCXI_P0SS_S_FGAPB,
                 LS_SHTNL   type ZVCXI_P0SS_S_SHTNL,
                 LS_SHTNW   type ZVCXI_P0SS_S_SHTNW,
                 LS_PCALI   type ZVCXI_P0SS_S_PCALI,
                 LS_SHTPL   type ZVCXI_P0SS_S_SHTPL,
                 LS_SHTPW   type ZVCXI_P0SS_S_SHTPW.

  field-symbols: <S_ELEMENT> type ZVCXI_P0SS_S_ELEMENT.

***------------------------------------------------------------------------------------------------
*** Product Length
  LS_PROLE = ME->GET_PROLE( ).
  if LS_PROLE-PROLE is not initial.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH.
    <S_ELEMENT>-ELEMV     = LS_PROLE-PROLE.
    <S_ELEMENT>-ELEMV_UOM = LS_PROLE-PROLE_UOM.
  endif.

*** Product Width
  LS_PROWI = ME->GET_PROWI( ).
  if LS_PROWI-PROWI is not initial.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH.
    <S_ELEMENT>-ELEMV     = LS_PROWI-PROWI.
    <S_ELEMENT>-ELEMV_UOM = LS_PROWI-PROWI_UOM.
  endif.

*** Product Height
  LS_PROHE = ME->GET_PROHE( ).
  if LS_PROHE-PROHE is not initial.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT.
    <S_ELEMENT>-ELEMV     = LS_PROHE-PROHE.
    <S_ELEMENT>-ELEMV_UOM = LS_PROHE-PROHE_UOM.
  endif.

***------------------------------------------------------------------------------------------------
*** Get joint Width
  move ME->GET_JOIWI( ) to LS_JOIWI.
  append initial line to RT_ELEMENT assigning <S_ELEMENT>.
  <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_JOIWI.
  <S_ELEMENT>-ELEMV     = LS_JOIWI-JOIWI.
  <S_ELEMENT>-ELEMV_UOM = LS_JOIWI-JOIWI_UOM.
  unassign <S_ELEMENT>.


  if ME->R_PR_SHEET is bound.

***------------------------------------------------------------------------------------------------
*** Get Product Sheet Dimensions
    move ME->R_PR_SHEET->GET_SHTPL( ) to LS_SHTPL.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPL.
    <S_ELEMENT>-ELEMV     = LS_SHTPL-SHTPL.
    <S_ELEMENT>-ELEMV_UOM = LS_SHTPL-SHTPL_UOM.
    unassign <S_ELEMENT>.

    move ME->R_PR_SHEET->GET_SHTPW( ) to LS_SHTPW.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPW.
    <S_ELEMENT>-ELEMV     = LS_SHTPW-SHTPW.
    <S_ELEMENT>-ELEMV_UOM = LS_SHTPW-SHTPW_UOM.
    unassign <S_ELEMENT>.

***------------------------------------------------------------------------------------------------
*** Get Product Caliper
    move ME->R_PR_SHEET->GET_PCALI( ) to LS_PCALI.
    append initial line to RT_ELEMENT assigning <S_ELEMENT>.
    <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_CALIP.
    <S_ELEMENT>-ELEMV     = LS_PCALI-PCALI.
    <S_ELEMENT>-ELEMV_UOM = LS_PCALI-PCALI_UOM.
    unassign <S_ELEMENT>.

***------------------------------------------------------------------------------------------------
*** Gap in Flap Top
    LS_FGAPT = ME->R_PR_SHEET->GET_FGAPT( ).
    if LS_FGAPT-FGAPT is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_T.
      <S_ELEMENT>-ELEMV     = LS_FGAPT-FGAPT.
      <S_ELEMENT>-ELEMV_UOM = LS_FGAPT-FGAPT_UOM.
    endif.
*** Gap in Flap Bottom
    LS_FGAPB = ME->R_PR_SHEET->GET_FGAPB( ).
    if LS_FGAPB-FGAPB is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_GAP_FLAP_B.
      <S_ELEMENT>-ELEMV     = LS_FGAPB-FGAPB.
      <S_ELEMENT>-ELEMV_UOM = LS_FGAPB-FGAPB_UOM.
    endif.

*** Flap Extension Top
    LS_FEXTT = ME->R_PR_SHEET->GET_FEXTT( ).
    if LS_FEXTT-FEXTT is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FLAP_EXT_T.
      <S_ELEMENT>-ELEMV     = LS_FEXTT-FEXTT.
      <S_ELEMENT>-ELEMV_UOM = LS_FEXTT-FEXTT_UOM.
    endif.
*** Flap Extension Bottom
    LS_FEXTB = ME->R_PR_SHEET->GET_FEXTB( ).
    if LS_FEXTB-FEXTB is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FLAP_EXT_B.
      <S_ELEMENT>-ELEMV     = LS_FEXTB-FEXTB.
      <S_ELEMENT>-ELEMV_UOM = LS_FEXTB-FEXTB_UOM.
    endif.

***------------------------------------------------------------------------------------------------
*** Net Sheet Length
    ME->R_PR_SHEET->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
    if LS_SHTNL-SHTNL is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTNL.
      <S_ELEMENT>-ELEMV     = LS_SHTNL-SHTNL.
      <S_ELEMENT>-ELEMV_UOM = LS_SHTNL-SHTNL_UOM.
    endif.

*** Net Sheet Width
    ME->R_PR_SHEET->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).
    if LS_SHTNW-SHTNW is not initial.
      append initial line to RT_ELEMENT assigning <S_ELEMENT>.
      <S_ELEMENT>-IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTNW.
      <S_ELEMENT>-ELEMV     = LS_SHTNW-SHTNW.
      <S_ELEMENT>-ELEMV_UOM = LS_SHTNW-SHTNW_UOM.
    endif.
  endif.

endmethod.
method GET_PRTYI.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                    IF_CREATE = ABAP_FALSE
                          importing EF_PRTYP  = RF_PRTYI ).

endmethod.
method GET_PRTYI_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYI( ).
  RF_PRTYI_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_PRTYO.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC    type ref to ZIF_VCXI_P0SS_PRALLOC.

*** Get Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PRALLOC.
  check LR_PRALLOC is bound.

*** Return
  LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                    IF_CREATE = ABAP_FALSE
                          importing EF_PRTYP  = RF_PRTYO ).

endmethod.
method GET_PRTYO_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYO( ).
  RF_PRTYO_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_PTYPE_DESCR.

endmethod.
method GET_STATUS.

  data:  LS_PROLE   type ZVCXI_P0S_S_PROLE,
         LS_PROWI   type ZVCXI_P0S_S_PROWI,
         LS_PROHE   type ZVCXI_P0S_S_PROHE,
         LS_STITP   type ZVCXI_P0SS_S_STITP.
  data:  LT_FUNCT   type ZVCXI_XCDC_TT_CR_FUNCT.

*** Super Status
  RF_ELMST = SUPER->GET_STATUS( ).

*** Get all Active Functions at once
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).


***------------------------------------------------------------------
*** Check Product Type is Maintained
  if ME->CHECK_PTYPE( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Product Style is Maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PRSTY'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->CHECK_PRSTY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Length is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROLE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Width is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROWI'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Height is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROHE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.


***------------------------------------------------------------------
*** Check Joint Informations
  case ME->CHECK_JOINT( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Product Style Product Type Combi
  if ME->CHECK_PTYPE_PRSTY( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Fefco Joint Type Combi
  if ME->CHECK_PRSTY_JOITY( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Joint Position Joint Type Combi
  if ME->CHECK_JOIPO_JOITY( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Stitching Required and if it is filled
  if ME->CHECK_STITCH_REQ( ) eq ABAP_TRUE.
    LS_STITP = ME->GET_STITP( ).
    if ME->GET_NOSTI( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
    if LS_STITP-STITP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Part of Box Required and if it is filled and correct
  if ME->CHECK_BOXPA_REQ( ) eq ABAP_TRUE.
    if ME->CHECK_BOXPA( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  read table LT_FUNCT with key IFUNC = 'CHECK_MATDE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Tools
  case ME->CHECK_TOOL_VALUES( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Lamination Type
  case ME->CHECK_TLAMI( ).
    when 0 or 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  data:  LS_PROLE type ZVCXI_P0S_S_PROLE,
         LS_PROWI type ZVCXI_P0S_S_PROWI,
         LS_PROHE type ZVCXI_P0S_S_PROHE,
         LS_STITP type ZVCXI_P0SS_S_STITP.
  data:  LT_FUNCT   type ZVCXI_XCDC_TT_CR_FUNCT.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Get all Active Functions at once
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------
*** Check Product Type is Maintained
  case ME->CHECK_PTYPE( ).
    when 0.
***   Product Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '051' ).
    when 1.
***   Product Type is maintained and not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '052' ).
    when 2.
***   Product Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '053' ).
  endcase.

***------------------------------------------------------------------
*** Check Product Style is Maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PRSTY'
                      transporting no fields.
  if SY-SUBRC eq 0.
    case ME->CHECK_PRSTY( ).
      when 0.
***   Product Style is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '079' ).
      when 1.
***   Product Style is maintained and not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '080' ).
      when 2.
***   Product Style is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '081' ).
    endcase.
  endif.

***------------------------------------------------------------------
*** Check Product Length is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROLE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
***   Product Length is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '055' ).
    else.
***   Product Length is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '056' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Width is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROWI'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
***   Product Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '057' ).
    else.
***   Product Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '058' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Height is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROHE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
***   Product Height is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '059' ).
    else.
***   Product Height is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '060' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Joint Informations
  case ME->CHECK_JOINT( ).
    when 0.
***   Joint Informations completely maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '061' ).
    when 1.
***   Joint Informations not completely maintained. Check Joint Type.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '062' ).
    when 2.
***   Joint Informations not completely maintained. Check Joint Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '063' ).
    when 3.
***   Joint Informations not completely maintained. Check Joint Type and Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '064' ).
  endcase.

***------------------------------------------------------------------
*** Check Product Style Product Type Combi
  if ME->CHECK_PTYPE_PRSTY( ) eq ABAP_TRUE.
*** Combination of Product Type and Fefco is valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '065' ).
  else.
***   Combination of Product Type and Fefco is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '066' ).
  endif.

***------------------------------------------------------------------
*** Check Product Style Joint Type Combi
  if ME->CHECK_PRSTY_JOITY( ) eq ABAP_TRUE.
*** Combination of Fefco and Joint Type is valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '067' ).
  else.
*** Combination of Fefco and Joint Type is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '068' ).
  endif.

***------------------------------------------------------------------
*** Check Joint Position Joint Type Combi
  if ME->CHECK_JOIPO_JOITY( ) eq ABAP_TRUE.
*** Combination of Joint Position and Joint Type is valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '069' ).
  else.
*** Combination of Joint Position and Joint Type is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '070' ).
  endif.

***------------------------------------------------------------------
*** Check Stitching Required and if it is filled
  if ME->CHECK_STITCH_REQ( ) eq ABAP_TRUE.
    LS_STITP = ME->GET_STITP( ).
    if ME->GET_NOSTI( ) is not initial.
***   Number of Stiches is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '071' ).
    else.
***   Number of Stiches is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '072' ).
    endif.
    if LS_STITP-STITP is not initial.
***   Stitch per is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '073' ).
    else.
***   Stitch per is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '074' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Part of Box Required and if it is filled and correct
  if ME->CHECK_BOXPA_REQ( ) eq ABAP_TRUE.
    if ME->CHECK_BOXPA( ) eq ABAP_TRUE.
***   Part of Box is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '075' ).
    else.
***   Part of Box is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '076' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  read table LT_FUNCT with key IFUNC = 'CHECK_MATDE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

***----------------------------------------------------------------------------
*** Check Tool Values
  ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Lamination Type
  if ME->CHECK_TLAMI( ) eq 1.
*** Lamination Type(s) are maintained correctly.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '083' ).
  elseif ME->CHECK_TLAMI( ) eq 2.
*** Inline Lamination is maintained twice.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '084' ).
  endif.

endmethod.
method GET_STITP.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->GET_MAIN_JOINT( importing ES_STITP = RS_STITP ).

endmethod.
method GET_TILAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_TLAMI( ) to RF_TILAM.

endmethod.
method GET_TOLAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_TLAMI( ) to RF_TOLAM.

endmethod.
method GET_TOOL.

  data:  LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.
  data:  LF_DCUTT          type        ZVCXI_P0SS_DCUTT,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

  check ME->R_PR_SHEET is bound.
  move ME->R_PR_SHEET->GET_DCUTT( ) to LF_DCUTT.

*** Get Die Cut Tool Customizing Instance
  RR_DIECUT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_DCUTT
                                                          IF_WERKS = LF_WERKS ).

endmethod.
method GET_TPRST.

  RF_TPRST = ME->F_TPRST.

endmethod.
method GET_VALID_TLAGC.

*** Lamination Glue Consumption Type Whole Surface is always allowed.
  append ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAGC_WHOLE to RT_TLAGC.

endmethod.
method GET_VALID_TLAMI.

*** Lamination Type STS is always allowed.
  append ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_STS to RT_TLAMI.

endmethod.
method GET_VLASH_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_VLASH( ) to RR_VLASH.

endmethod.
method GET_VLASH_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

  move LR_PR_LAMI->GET_VLASH( ) to RR_VLASH.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

    when C_IEVNT_I_REQ_CALIP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_PR_SHEET,
        ME->R_PR_CLOS.

  check ME->R_GATE->IS_INUSE( ) eq ABAP_TRUE.

***------------------------------------------------------------------
*** Get Sheet Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SHEET.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_SHEET.
    endtry.
  endif.

  if ME->R_PR_SHEET is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------
*** Get Closure Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_CLOS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_CLOS.
    endtry.
  endif.

  if ME->R_PR_CLOS is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.
  data:  LT_ATTRI       type /VCXI/VKS_TT_ATTRI.

*** -------------------------------------------------------------------------------------------------
*** Init Product Style Type
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_TPRST.
  if SY-SUBRC = 0.
    ME->F_TPRST = LS_ATTRI-ATTVA.
  endif.

endmethod.
method IS_LAMI_ACTIVE.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definitions
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  check lines( LT_PRVDR_DEF ) is not initial.
  move ABAP_TRUE to RF_ACTIVE.

endmethod.
method IS_SBINFO_EDITABLE_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_EDITABLE( importing EF_MATNR  = EF_MATNR
                                            EF_SBINFO = EF_SBINFO
                                            EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_EDITABLE_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_EDITABLE( importing EF_MATNR  = EF_MATNR
                                            EF_SBINFO = EF_SBINFO
                                            EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_VISIBLE_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Inside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_VISIBLE( importing EF_MATNR  = EF_MATNR
                                           EF_SBINFO = EF_SBINFO
                                           EF_CALIP  = EF_CALIP ).

endmethod.
method IS_SBINFO_VISIBLE_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

*** Get Outside Lamination
  LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                          IF_CREATE   = ABAP_FALSE ).
  check LR_GATE is bound.

  move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
  LR_PR_LAMI->IS_SBINFO_VISIBLE( importing EF_MATNR  = EF_MATNR
                                           EF_SBINFO = EF_SBINFO
                                           EF_CALIP  = EF_CALIP ).

endmethod.
method MOVE_PRALLOC_MS_SHTPR.

  data:  LF_PRTYP                type        ZVCXI_P0S_PRTYP,
         LF_NOCOL                type        ZVCXI_P0S_NOCOL.
  data:  LR_PR_PRINT_SELF        type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_MS_SHTPR_SOURCE   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Sheet Procurement PR Class
 try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_SHTPR_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SOURCE.
  endtry.
  check LR_PR_MS_SHTPR_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Sheet Procurement
  move LR_PR_MS_SHTPR_SOURCE->GET_PRTYP( IF_PRSID = IF_PRSID ) to LF_PRTYP.
  move LR_PR_MS_SHTPR_SOURCE->GET_NOCOL( IF_PRSID = IF_PRSID ) to LF_NOCOL.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).

endmethod.
method MOVE_PRALLOC_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRTON               type        ZVCXI_P0SS_PRTON,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_MATNR               type        MATNR,
         LF_TEXT                type        TEXT30,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_VARNI               type        ZVCXI_P0S_VARNI,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           TYPE        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_PRINT_SELF       type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_PRINT_SOURCE     type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MS_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SOURCE.
  endtry.
  check LR_PR_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_PRINT_SOURCE->GET_PRTON( ) to LF_PRTON.
  move LR_PR_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_PRINT_SELF->SET_PRTON( IF_PRTON = LF_PRTON ).
  LR_PR_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                            IF_INUSE = ABAP_TRUE ).
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                              IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MS_INK_SELF.

*** Copy Material Number
    move LR_PR_MS_INK_SOURCE->GET_MATNR( ) to LF_MATNR.
    LR_PR_MS_INK_SELF->SET_MATNR( IF_MATNR = LF_MATNR ).

*** Copy Text
    move LR_PR_MS_INK_SOURCE->GET_TEXT( ) to LF_TEXT.
    LR_PR_MS_INK_SELF->SET_TEXT( IF_TEXT = LF_TEXT ).

*** Copy Color Code
    LR_PR_MS_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MS_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

*** Copy Varnish Flag
    LR_PR_MS_INK_SOURCE->GET_VARNI( importing EF_VARNI = LF_VARNI
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_VARNI( IF_VARNI = LF_VARNI
                                  IF_SETBY = LF_SETBY ).
  endloop.


***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.

endmethod.
method MOVE_PRALLOC_SP_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           type        /VCXI/VKSR_TT_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LR_PR_PRINT_SELF       type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_SP_PRINT_SOURCE  type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_SP_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Printing PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SP_PRINT_SOURCE.
  endtry.
  check LR_PR_SP_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_SP_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_SP_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_SP_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_SP_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

  LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                            IF_INUSE = ABAP_TRUE ).
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                              IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MS_INK_SELF.

*** Copy Color Code
    LR_PR_SP_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_SP_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_MS_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

  endloop.

***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.

endmethod.
method REMOVE_EMPTY_LAMI.

  data:  LR_PR_LAMI type ref to ZCL_VCXI_P0SS_PR_LAMI.

  move IR_GATE->R_CLSPR ?to LR_PR_LAMI.

  if LR_PR_LAMI->GET_TLAMI( ) is initial.
    IR_GATE->DO_FREE( ).
  endif.

endmethod.
method REMOVE_EMPTY_PRINT.

  data:  LR_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT.

  move IR_GATE->R_CLSPR ?to LR_PR_PRINT.

  if LR_PR_PRINT->GET_PRTYP( ) is initial and
     LR_PR_PRINT->GET_NOCOL( ) is initial.
    IR_GATE->DO_FREE( ).
  endif.

endmethod.
method SET_BOXPA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).

  move IF_BOXPA to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOXPA_CHANGED ).
  endif.

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_FSHTP.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***------------------------------------------------------------------------------------------------
*** Set Flag if Sheet Procurement is there
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
  endloop.

*** Free Sheet Procurement
  if IF_FSHTP is initial.
    if LR_PR_MS_SHTPR is bound.
      LR_PR_MS_SHTPR->DO_FREE( ).
      free: LR_PR_MS_SHTPR.
    endif.
  else.

*** Set Sheet Procurement
    if LR_PR_MS_SHTPR is not bound.
***   Create Sheet Procurement
      ME->CREATE_SHTPR( ).

    endif.
  endif.

endmethod.
method SET_GRAMM_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Grammage
  if IS_GRAMM-GRAMM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Grammage
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_GRAMM_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Grammage
  if IS_GRAMM-GRAMM is not initial.
*** Get Outside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Grammage
  else.
*** Get existing Outside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_GRAMM( IS_GRAMM = IS_GRAMM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_JOIPO.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->SET_MAIN_JOINT( IF_JOIPO = IF_JOIPO
                                 IF_SETBY = IF_SETBY ).

endmethod.
method SET_JOITY.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->SET_MAIN_JOINT( IF_JOITY = IF_JOITY
                                 IF_SETBY = IF_SETBY ).

endmethod.
method SET_JOIWI.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->SET_MAIN_JOINT( IS_JOIWI = IS_JOIWI
                                 IF_SETBY = IF_SETBY ).

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_MATNR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Material
  if IF_MATNR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Material
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_MATNR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Material
  if IF_MATNR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Material
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_MATNR( IF_MATNR = IF_MATNR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_NOCOI.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                          IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_NOCOO.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                          IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_NOSTI.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->SET_MAIN_JOINT( IF_NOSTI = IF_NOSTI
                                 IF_SETBY = IF_SETBY ).

endmethod.
method SET_PAPGR_I.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Paper Grade
  if IF_PAPGR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Paper Grade
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_PAPGR_O.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_PFSS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Paper Grade
  if IF_PAPGR is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Paper Grade
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_PAPGR( IF_PAPGR = IF_PAPGR
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_PRALI.

  data:  LF_CHANGEABLE      type        ABAP_BOOL.
  data:  LR_GATE_CURR       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_CURR    type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_NEW        type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_NEW     type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_INFO       type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  check LR_GATE_CURR is bound.
  move LR_GATE_CURR->R_CLSPR ?to LR_PRALLOC_CURR.

*** Get current Information
  LR_PRALLOC_CURR->GET_PRINFO( exporting IF_PRSID      = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                         IF_CREATE     = ABAP_FALSE
                               importing ER_GATE       = LR_GATE_INFO
                                         EF_CHANGEABLE = LF_CHANGEABLE ).
  check LF_CHANGEABLE eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get new Inside Print Allocation
  LR_GATE_NEW = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                                 IF_PRALL = IF_PRALL ).
  check LR_GATE_NEW is bound.
  move LR_GATE_NEW->R_CLSPR ?to LR_PRALLOC_NEW.

***----------------------------------------------------------------------------
*** Move Information to new Print Allocation
  LR_PRALLOC_NEW->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                              IR_GATE  = LR_GATE_INFO ).

*** Delete Information from current Print Allocation
  clear LR_GATE_INFO.
  LR_PRALLOC_CURR->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IR_GATE  = LR_GATE_INFO ).

endmethod.
method SET_PRALO.

  data:  LF_CHANGEABLE      type        ABAP_BOOL.
  data:  LR_GATE_CURR       type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_CURR    type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_NEW        type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC_NEW     type ref to ZIF_VCXI_P0SS_PRALLOC,
         LR_GATE_INFO       type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE_CURR = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  check LR_GATE_CURR is bound.
  move LR_GATE_CURR->R_CLSPR ?to LR_PRALLOC_CURR.

*** Get current Information
  LR_PRALLOC_CURR->GET_PRINFO( exporting IF_PRSID      = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                         IF_CREATE     = ABAP_FALSE
                               importing ER_GATE       = LR_GATE_INFO
                                         EF_CHANGEABLE = LF_CHANGEABLE ).
  check LF_CHANGEABLE eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get new Outside Print Allocation
  LR_GATE_NEW = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                                 IF_PRALL = IF_PRALL ).
  check LR_GATE_NEW is bound.
  move LR_GATE_NEW->R_CLSPR ?to LR_PRALLOC_NEW.

***----------------------------------------------------------------------------
*** Move Information to new Print Allocation
  LR_PRALLOC_NEW->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                              IR_GATE  = LR_GATE_INFO ).

*** Delete Information from current Print Allocation
  clear LR_GATE_INFO.
  LR_PRALLOC_CURR->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IR_GATE  = LR_GATE_INFO ).

endmethod.
method SET_PROHE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

  move IS_PROHE-PROHE     to LS_PARAM-ATFLV.
  move IS_PROHE-PROHE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROLE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

  move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
  move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

  move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
  move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PRSTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).

  move IF_PRSTY to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRSTY_CHANGED ).
  endif.

endmethod.
method SET_PRTYI.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Inside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                               IF_PRALL = SPACE ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_I
                          IF_PRTYP = IF_PRTYP
                          IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRTYO.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PRALLOC  type ref to ZIF_VCXI_P0SS_PRALLOC.

***----------------------------------------------------------------------------
*** Get current Outside Print Allocation
  LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O ).
  if LR_GATE is not bound.
    LR_GATE = ME->GET_PRALLOC( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                               IF_PRALL = ME->R_GATE->F_ID ).
  endif.
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***----------------------------------------------------------------------------
*** Set new Number of Colors
  LR_PRALLOC->SET_PRINFO( IF_PRSID = ZCL_VCXI_P0SS_PR_PRINT=>C_PRSID_O
                          IF_PRTYP = IF_PRTYP
                          IF_SETBY = IF_SETBY ).

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
method SET_STITP.

  check ME->R_PR_CLOS is bound.
  ME->R_PR_CLOS->SET_MAIN_JOINT( IS_STITP = IS_STITP
                                 IF_SETBY = IF_SETBY ).

endmethod.
method SET_TILAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Lamination Type
  if IF_TILAM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TILAM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Lamination Type
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_I
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TILAM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method SET_TOLAM.

  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

***--------------------------------------------------------------------------------------
*** Set Lamination Type
  if IF_TOLAM is not initial.
*** Get Inside Lamination
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_TRUE ).

    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TOLAM
                           IF_SETBY = IF_SETBY ).

***--------------------------------------------------------------------------------------
*** Clear Lamination Type
  else.
*** Get existing Inside Lamiantion, but don't create one
    LR_GATE = ME->GET_LAMI( IF_LASID    = ZCL_VCXI_P0SS_CUST_LAMI=>C_LASID_O
                            IF_CREATE   = ABAP_FALSE ).
    check LR_GATE is bound.
    move LR_GATE->R_CLSPR ?to LR_PR_LAMI.

    LR_PR_LAMI->SET_TLAMI( IF_TLAMI = IF_TOLAM
                           IF_SETBY = IF_SETBY ).

    ME->REMOVE_EMPTY_LAMI( IR_GATE = LR_GATE ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).
  move LS_PARAM-ATWRT to RF_ICONT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_ICONT'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_ICONT   type                   ZVCXI_P0S_ICONT.

  LF_ICONT = ME->GET_ICONT( ).

*** Return Kontext ID description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_ICONT into LS_D07V.
  check SY-SUBRC = 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~SET_ICONT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).

  move IF_ICONT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICONT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~GET_PRINFO.

  data:  LR_PR_PRINT   type ref to ZCL_VCXI_P0SS_PR_PRINT.

***--------------------------------------------------------------------------------------
*** Always changeable
  move ABAP_TRUE to EF_CHANGEABLE.

***--------------------------------------------------------------------------------------
*** Get Printing Gate
  ER_GATE = ME->GET_PRINT( IF_PRSID  = IF_PRSID
                           IF_CREATE = IF_CREATE ).
  check ER_GATE is bound.
  try.
      move ER_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT.
  endtry.
  check LR_PR_PRINT is bound.

***--------------------------------------------------------------------------------------
*** Print Type
  if EF_PRTYP is requested.
    move LR_PR_PRINT->GET_PRTYP( ) to EF_PRTYP.
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if EF_NOCOL is requested.
    move LR_PR_PRINT->GET_NOCOL( ) to EF_NOCOL.
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~SET_PRINFO.

  data:  LR_GATE_SELF     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT_SELF type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_PRINT      type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_SP_PRINT   type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_PR_MS_SHTPR   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Get own Printing Gate / PR Class
  LR_GATE_SELF = ME->GET_PRINT( IF_PRSID  = IF_PRSID
                                IF_CREATE = ABAP_TRUE ).
  check LR_GATE_SELF is bound.
  try.
      move LR_GATE_SELF->R_CLSPR ?to LR_PR_PRINT_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SELF.
  endtry.
  check LR_PR_PRINT_SELF is bound.

***--------------------------------------------------------------------------------------
*** Print Type
  if IF_PRTYP is supplied.
    LR_PR_PRINT_SELF->SET_PRTYP( IF_PRTYP = IF_PRTYP
                                 IF_SETBY = IF_SETBY ).
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if IF_NOCOL is supplied.
    LR_PR_PRINT_SELF->SET_NOCOL( IF_NOCOL = IF_NOCOL ).
  endif.

***--------------------------------------------------------------------------------------
*** Print Gate
  if IR_GATE is supplied.
    if IR_GATE is not bound.
***   Remove Print
      LR_GATE_SELF->DO_FREE( ).

    else.
***   Move Information from Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_PRINT.
      endtry.
      if LR_PR_PRINT is bound.
        ME->MOVE_PRALLOC_PRINT( IR_GATE_SOURCE = IR_GATE
                                IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SP_PRINT.
      endtry.
      if LR_PR_SP_PRINT is bound.
        ME->MOVE_PRALLOC_SP_PRINT( IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_SHTPR.
      endtry.
      if LR_PR_MS_SHTPR is bound.
        ME->MOVE_PRALLOC_MS_SHTPR( IF_PRSID       = IF_PRSID
                                   IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = LR_GATE_SELF ).
      endif.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Remove empty Print
  if LR_GATE_SELF->F_FREED          ne ABAP_TRUE and
     LR_PR_PRINT_SELF->GET_PRTYP( ) is initial   and
     LR_PR_PRINT_SELF->GET_NOCOL( ) is initial.
    LR_GATE_SELF->DO_FREE( ).
  endif.

endmethod.
