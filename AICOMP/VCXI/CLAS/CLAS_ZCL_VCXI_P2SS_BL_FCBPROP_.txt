
class ZCL_VCXI_P2SS_BL_FCBPROP definition
  public
  inheriting from ZCL_VCXI_PXSS_BL_XBPROP
  create protected .

public section.

  data F_ECMA type ZVCXI_PFSS_ECMA read-only .
  data F_GCADO type ZVCXI_PXS_GCADO read-only .
  data F_GRAIO type ZVCXI_PFSS_GRAIO read-only .
  data S_COUAR type ZVCXI_PXS_S_COUAR read-only .
  data S_FOLDIM type ZVCXI_PXS_S_FOLDIM read-only .
  data S_JOIDIM type ZVCXI_PXS_S_JOIDIM read-only .
  data S_PRODIM type ZVCXI_PXS_S_PRODIM read-only .
  data T_SCORE type ZVCXI_PXSS_TT_SCORE_COM read-only .

  class-methods FACTORY
    importing
      !IF_FCBPX type ZVCXI_P2S_FCBPX optional
    returning
      value(RR_BL_FCBPROP) type ref to ZCL_VCXI_P2SS_BL_FCBPROP
    raising
      /VCXI/CX_CKX .
  methods GET_FCBPX
    returning
      value(RF_FCBPX) type ZVCXI_P2S_FCBPX
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDIM
    exporting
      !ES_SHTLE type ZVCXI_P0SS_S_SHTLE
      !ES_SHTWI type ZVCXI_P0SS_S_SHTWI
      !EF_GRADI type ZVCXI_P2S_GRADI
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_BL_FCBPROP type ref to ZCL_VCXI_P2SS_BL_FCBPROP
    raising
      /VCXI/CX_CKX .
  methods SET_COUAR
    importing
      !IS_COUAR type ZVCXI_PXS_S_COUAR
    raising
      /VCXI/CX_CKX .
  methods SET_ECMA
    importing
      !IF_ECMA type ZVCXI_PFSS_ECMA
    raising
      /VCXI/CX_CKX .
  methods SET_ECMA_SHEET
    importing
      !IF_RESET type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods SET_FCBPX
    importing
      !IF_FCBPX type ZVCXI_P2S_FCBPX
    raising
      /VCXI/CX_CKX .
  methods SET_FOLDIM
    importing
      !IS_FOLDIM type ZVCXI_PXS_S_FOLDIM
    raising
      /VCXI/CX_CKX .
  methods SET_GCADO
    importing
      !IF_GCADO type ZVCXI_PXS_GCADO
    raising
      /VCXI/CX_CKX .
  methods SET_GRAIO
    importing
      !IF_GRAIO type ZVCXI_PFSS_GRAIO
    raising
      /VCXI/CX_CKX .
  methods SET_JOIDIM
    importing
      !IS_JOIDIM type ZVCXI_PXS_S_JOIDIM
    raising
      /VCXI/CX_CKX .
  methods SET_PRODIM
    importing
      !IS_PRODIM type ZVCXI_PXS_S_PRODIM
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IT_SCORE type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
protected section.

  methods MERGE_SCORE
    importing
      !IT_SCORE type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .

  methods GET_XML_DREF
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SS_BL_FCBPROP definition
class ZCL_VCXI_P2SS_BL_FCBPROP implementation.
  method FACTORY.

*** Create BL Reference
ENHANCEMENT-SECTION FACTORY SPOTS ZVCXI_P2SS_ES_BL_FCBPROP .
    create object RR_BL_FCBPROP.
end-enhancement-section.

*** Set Folding Carton Backward Property XML
    RR_BL_FCBPROP->SET_FCBPX( IF_FCBPX = IF_FCBPX ).

  endmethod.
  method GET_FCBPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_FCBPX.

  endmethod.
  method GET_SHTDIM.

    ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = ME->T_SCORE
                                        importing ES_SHTLE     = ES_SHTLE
                                                  ES_SHTWI     = ES_SHTWI ).

    if EF_GRADI is requested.
      EF_GRADI = ZCL_VCXI_P2SS_BL_FCFPROP=>DET_GRADI( IS_SHTWI = ES_SHTWI
                                                      IS_SHTLE = ES_SHTLE ).
    endif.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = SUPER->GET_XML_DREF( ).

    append value #( NAME = 'F_ECMA'     VALUE = ref #( ME->F_ECMA     ) ) to RT_DATA.
    append value #( NAME = 'S_PRODIM'   VALUE = ref #( ME->S_PRODIM   ) ) to RT_DATA.
    append value #( NAME = 'F_GRAIO'    VALUE = ref #( ME->F_GRAIO    ) ) to RT_DATA.
    append value #( NAME = 'S_JOIDIM'   VALUE = ref #( ME->S_JOIDIM   ) ) to RT_DATA.
    append value #( NAME = 'T_SCORE'    VALUE = ref #( ME->T_SCORE    ) ) to RT_DATA.
*    append value #( NAME = 'T_TAPE_COM' VALUE = ref #( ME->T_TAPE_COM ) ) to RT_DATA.
    append value #( NAME = 'S_FOLDIM'   VALUE = ref #( ME->S_FOLDIM   ) ) to RT_DATA.
    append value #( NAME = 'S_COUAR'    VALUE = ref #( ME->S_COUAR    ) ) to RT_DATA.
    append value #( NAME = 'F_GCADO'    VALUE = ref #( ME->F_GCADO    ) ) to RT_DATA.

  endmethod.
  method MERGE.

***--------------------------------------------------------------------------------------
*** Cost Split Distribution
    ME->MERGE_CSPLIT( IT_CSPLIT = IR_BL_FCBPROP->T_CSPLIT ).

***--------------------------------------------------------------------------------------
*** ECMA
    ME->SET_ECMA( IF_ECMA = IR_BL_FCBPROP->F_ECMA ).

*** Product Dimension & Grain Orentation
    ME->SET_PRODIM( IS_PRODIM = IR_BL_FCBPROP->S_PRODIM ).
    ME->SET_GRAIO(  IF_GRAIO  = IR_BL_FCBPROP->F_GRAIO ).

*** Cut Out Area
    ME->SET_COUAR( IS_COUAR = IR_BL_FCBPROP->S_COUAR ).

*** Joint Dimension
    ME->SET_JOIDIM( IS_JOIDIM = IR_BL_FCBPROP->S_JOIDIM ).

*** Folding Dimension
    ME->SET_FOLDIM( IS_FOLDIM = IR_BL_FCBPROP->S_FOLDIM ).

*** Scores
    ME->MERGE_SCORE( IT_SCORE = IR_BL_FCBPROP->T_SCORE ).

*** OneUp GUID
    ME->SET_GCADO( IF_GCADO = IR_BL_FCBPROP->F_GCADO ).

  endmethod.
  method MERGE_SCORE.

    if ME->T_SCORE is initial.
**    Use given Scores
      ME->T_SCORE = IT_SCORE.
    else.
***   Add Empty Edge Scores w/o Position, as an automatic merging is not possible
      ME->T_SCORE = value #( ( ISCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS  && '01' )
                             ( ISCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH && '01' ) ).
    endif.

  endmethod.
  method SET_COUAR.

    move IS_COUAR to ME->S_COUAR.

  endmethod.
  method SET_ECMA.

    move IF_ECMA to ME->F_ECMA.

  endmethod.
  method SET_ECMA_SHEET.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


*** Set Sheet ECMA
ENHANCEMENT-SECTION SET_ECMA_SHEET SPOTS ZVCXI_P2SS_ES_BL_FCBPROP .
    ME->SET_ECMA( IF_ECMA = '0110' ).
END-ENHANCEMENT-SECTION.

    if IF_RESET eq ABAP_TRUE.
***   Initialize Product Dimension
      ME->GET_SHTDIM( importing ES_SHTWI = LS_SHTWI
                                ES_SHTLE = LS_SHTLE ).
      ME->SET_PRODIM( IS_PRODIM = value #( PROLE     = LS_SHTLE-SHTLE
                                           PROLE_UOM = LS_SHTLE-SHTLE_UOM
                                           PROWI     = LS_SHTWI-SHTWI
                                           PROWI_UOM = LS_SHTWI-SHTWI_UOM ) ).

***   Initialize Grain Orientation
      ME->SET_GRAIO( IF_GRAIO = ZCL_VCXI_PFSS_CUST_ECMA=>C_GRAIO_VERTICAL ).

***   Initialize Cut Out Area
      ME->SET_COUAR( IS_COUAR = value #( COUAR_UOM = ME->S_COUAR-COUAR_UOM ) ).

***   Initialize Joint Informamtion
      ME->SET_JOIDIM( IS_JOIDIM = value #( JOIPO     = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE
                                           JOIWI_UOM = ME->S_JOIDIM-JOIWI_UOM
                                           JOILE_UOM = ME->S_JOIDIM-JOILE_UOM
                                           JEXTT_UOM = ME->S_JOIDIM-JEXTT_UOM
                                           JEXTB_UOM = ME->S_JOIDIM-JEXTB_UOM ) ).
***   Initialize Folding Informamtion
      ME->SET_FOLDIM( IS_FOLDIM = value #( FOLLE_UOM = ME->S_FOLDIM-FOLLE_UOM
                                           FOLWI_UOM = ME->S_FOLDIM-FOLWI_UOM
                                           FOLHE_UOM = ME->S_FOLDIM-FOLHE_UOM ) ).
***   Initialize OneUp GUID
      ME->SET_GCADO( IF_GCADO = value #( ) ).
    endif.

  endmethod.
  method SET_FCBPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_FCBPX is not initial.

***   Get Data References for XML Serialize/Deserialize
      LT_DATA = ME->GET_XML_DREF( ).

***   Open XML
      call transformation ID
           source xml IF_FCBPX
           result (LT_DATA).

    endif.

  endmethod.
  method SET_FOLDIM.

    move IS_FOLDIM to ME->S_FOLDIM.

  endmethod.
  method SET_GCADO.

    move IF_GCADO to ME->F_GCADO.

  endmethod.
  method SET_GRAIO.

    move IF_GRAIO to ME->F_GRAIO.

  endmethod.
  method SET_JOIDIM.

    move IS_JOIDIM to ME->S_JOIDIM.

  endmethod.
  method SET_PRODIM.

    move IS_PRODIM to ME->S_PRODIM.

  endmethod.
  method SET_SCORE.

    move IT_SCORE to ME->T_SCORE.

  endmethod.
