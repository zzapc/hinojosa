
class ZCL_VCXI_P1SS_PR_MS_PAPER definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_P1_MS_PAPER type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_MS_PAPER' ##NO_TEXT.
  constants C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGP_A' ##NO_TEXT.
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGT' ##NO_TEXT.
  constants C_PARID_BPAID type /VCXI/VKS_PARID value 'ZVCXI_PC_BPAID' ##NO_TEXT.
  constants C_PARID_BPFAC type /VCXI/VKS_PARID value 'ZVCXI_PC_BPFAC' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_SUBPA type /VCXI/VKS_PARID value 'ZVCXI_PC_SUBPA' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_BAWGP) type ZVCXI_PCS_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_BAWGT) type ZVCXI_PCS_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_BPAID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_BPAID) type ZVCXI_PCS_BPAID
    raising
      /VCXI/CX_CKX .
  methods GET_BPFAC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BPFAC) type ZVCXI_PCSS_BPFAC
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_F_LOCKED
    returning
      value(RF_LOCKED) type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods GET_FPRPR
    exporting
      !EF_SBSTR type ZVCXI_P5S_SBSTR
    returning
      value(RF_FPRPR) type ZVCXI_PCSS_FPRPR
    raising
      /VCXI/CX_CKX .
  methods GET_SUBPA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SUBPA) type ZVCXI_PCSS_SUBPA
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    importing
      !IF_UOM type /VCXI/CKX_UOM optional
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_PCS_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_PCS_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPAID
    importing
      !IF_BPAID type ZVCXI_PCS_BPAID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPFAC
    importing
      !IF_BPFAC type ZVCXI_PCSS_BPFAC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_F_LOCKED
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods SET_SUBPA
    importing
      !IF_SUBPA type ZVCXI_PCSS_SUBPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_SUBPA_MATNR type /VCXI/VKSC_IEVNT value 'INIT_SUBPA_MATNR' ##NO_TEXT.
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPFAC_CHANGED type /VCXI/VKSC_IEVNT value 'BPFAC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SUBPA_CHANGED type /VCXI/VKSC_IEVNT value 'SUBPA_CHANGED' ##NO_TEXT.
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data R_CUST_PAPER type ref to ZCL_VCXI_PCSS_CUST_PAPER .

  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
  methods CHECK_BAWGP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRPLIN
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_PRPLIN) type ref to ZCL_VCXI_P1SS_PR_PRPLIN
    raising
      /VCXI/CX_CKX .
  methods CHECK_BAWGT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_BPAID
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_BPFAC
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_CALIP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SUBPA_MATNR
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_MS_PAPER definition
class ZCL_VCXI_P1SS_PR_MS_PAPER implementation.
  method CHECK_BAWGP.

*** Check Basis Weight Per
    if ME->GET_BAWGP( )-BAWGP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Basis Weight Per is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '037' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Basis Weight Per is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '038' ).
      endif.
    endif.

  endmethod.
  method CHECK_BAWGT.

*** Check Basis Weight
    if ME->GET_BAWGT( )-BAWGT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Basis Weight is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '035' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Basis Weight is not maintained .
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '036' ).
      endif.
    endif.

  endmethod.
  method CHECK_BPAID.

*** Check Paper ID
    if ME->GET_BPAID( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Paper ID is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '039' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Paper ID is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '040' ).
      endif.
    endif.

  endmethod.
  method CHECK_BPFAC.

*** Check Paper Factor
    if ME->GET_BPFAC( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Paper Factor is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '041' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Paper Factor is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '042' ).
      endif.
    endif.

  endmethod.
  method CHECK_CALIP.

*** Check Caliper
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '043' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper can't be read from Paper Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '044' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method GET_BAWGP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
    move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
    move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BAWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
    move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
    move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPAID.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.
    data: LT_D07V   type standard table of DD07V.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).
    move LS_PARAM-ATWRT to RF_BPAID.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_BPAID is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Paper ID Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_PCS_BPAID'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_BPAID ]-DDTEXT optional ).
    endif.

  endmethod.
  method GET_BPFAC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPFAC ).
    move LS_PARAM-ATFLV to RF_BPFAC.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CALIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
    move LS_PARAM-ATFLV to RS_CALIP-CALIP.
    move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
method GET_F_LOCKED.

  move ME->F_LOCKED to RF_LOCKED .

endmethod.
  method GET_FPRPR.

*** Preprint would be marked as undefined
    check ME->GET_SUBPA( ) eq ABAP_UNDEFINED.

*** Get Preprint Liner
    data(LR_PR_PRPLIN) = ME->GET_PRVDR_PRPLIN( ).
    check LR_PR_PRPLIN is bound.
    RF_FPRPR = ABAP_TRUE.

*** Substrate
    if EF_SBSTR is requested.
      data(LR_BL_RLFPROP) = LR_PR_PRPLIN->GET_RLFPX( ).
      if LR_BL_RLFPROP is bound.
        EF_SBSTR = LR_BL_RLFPROP->GET_SBSTR( ).
      endif.
    endif.

  endmethod.
  method GET_PRVDR_PRPLIN.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_PRPLIN.

*** Get Paper ID
    data(LF_BPAID) = ME->GET_BPAID( ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Preprint Liner
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      if cast ZCL_VCXI_P1SS_PR_PRPLIN( LR_GATE->R_CLSPR )->GET_BPAID( ) eq LF_BPAID.
        ER_GATE = LR_GATE.
        RR_PR_PRPLIN ?= ER_GATE->R_CLSPR.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Paper ID
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BPAID( ) ).

*** Check Basis Weight and Base Weight Per
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BAWGT( ) ).
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BAWGP( ) ).

*** Check Paper Factor
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BPFAC( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Paper ID
    ME->CHECK_BPAID( IR_MESSAGE = IR_MESSAGE ).

*** Check Base Weight and Base Weight Per
    ME->CHECK_BAWGT( IR_MESSAGE = IR_MESSAGE ).
    ME->CHECK_BAWGP( IR_MESSAGE = IR_MESSAGE ).

*** Check Paper Factor
    ME->CHECK_BPFAC( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SUBPA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBPA ).
    move LS_PARAM-ATWRT to RF_SUBPA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SURWT.

    data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
          LS_BAWGP type ZVCXI_PCS_S_BAWGP.

*** Get Basis Weight and Basis Weight Per
    LS_BAWGT = ME->GET_BAWGT( ).
    LS_BAWGP = ME->GET_BAWGP( ).

*** Calculate Surface Weight
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BAWGT-BAWGT
                                                          IF_CALCV_UOM_1 = LS_BAWGT-BAWGT_UOM
                                                          IF_CALCV_2     = LS_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BAWGT-BAWGT
                                                          IF_CALCV_UOM_1 = LS_BAWGT-BAWGT_UOM
                                                          IF_CALCV_2     = LS_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    endif.

*** Apply Paper Factor
    RS_SURWT-SURWT = RS_SURWT-SURWT * ME->GET_BPFAC( ).

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_INIT_SUBPA_MATNR.
        ME->HANDLE_INIT_SUBPA_MATNR( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D.


    move ME->GET_MATNR( )            to LF_MATNR.
    move ME->GET_WERKS( )            to LF_WERKS.

    if ME->R_CUST_PAPER          is bound    and
       ME->R_CUST_PAPER->F_MATNR eq LF_MATNR and
       ME->R_CUST_PAPER->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.

    clear:  ME->R_CUST_MATNR, ME->R_CUST_PAPER.

*** Load the Customizing
    ME->R_CUST_PAPER = ZCL_VCXI_PCSS_CUST_PAPER=>GET_INSTANCE_PAPER( IF_MATNR = LF_MATNR
                                                                     IF_WERKS = LF_WERKS
                                                                     IF_DATE  = SY-DATUM ).

*** Get Caliper only from Real Board Paper
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
      ME->SET_CALIP( IS_CALIP = ME->R_CUST_PAPER->S_CALIP ).
      ME->SET_BAWGT( IS_BAWGT = ME->R_CUST_PAPER->S_BAWGT ).
      ME->SET_BAWGP( IS_BAWGP = ME->R_CUST_PAPER->S_BAWGP ).
    endif.

    move ME->R_CUST_PAPER to ME->R_CUST_MATNR.

  endmethod.
  method HANDLE_INIT_SUBPA_MATNR.

    check ME->GET_SUBPA( ) eq ABAP_TRUE.

    ME->SET_MATNR( IF_MATNR = ME->F_MATNR_DUMMY ).

  endmethod.
  method INIT_DIM_PARAM.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
    data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.


    LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Price Per
    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_PRICP_A or
                            PARID eq C_PARID_PRICP_L or
                            PARID eq C_PARID_PRICP_P or
                            PARID eq C_PARID_PRICP_W ).
      move LS_PARAM-PARID to ME->F_PARID_PRICP.
      exit.
    endloop.

  endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BPAID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).

  move IF_BPAID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_BPFAC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPFAC ).

  move IF_BPFAC     to LS_PARAM-ATFLV.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPFAC_CHANGED ).
  endif.

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_F_LOCKED.

  move IF_LOCKED to ME->F_LOCKED.

endmethod.
method SET_SUBPA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBPA ).
  if IF_SUBPA is not initial.
    move IF_SUBPA to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATWRT,
           LS_PARAM-SETBY.
  endif.
  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SUBPA_CHANGED ).
  endif.

endmethod.
