
class ZCL_VCXI_FFSS_CUST_EMAT definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data T_MATNR type ZVCXI_F0S_TT_MATNR read-only .

  methods GET_AMAT
    returning
      value(RT_AMAT) type ZVCXI_FFSS_TT_AMAT
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_INSTANCE_EMAT
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_EMAT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_EMAT type /VCXI/CKXC_MAPID value 'EMAT' ##NO_TEXT.
  constants C_SETID_AOO type /VCXI/CKXC_SETID value 'ZVCXI_FFSS_AOO' ##NO_TEXT.
  class-data T_ALLOCLIST type TT_BAPI1003_ALLOC_LIST .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_CUST_EMAT definition
class ZCL_VCXI_FFSS_CUST_EMAT implementation.
  method CLASS_CONSTRUCTOR.

    data:           LT_CLASSNUMRANGE  type table of BAPI1003_CLASS_NUM_RANGE,
                    LT_RETURN         type table of BAPIRET2.
    field-symbols:  <S_CLASSNUMRANGE> type          BAPI1003_CLASS_NUM_RANGE.

    append initial line to LT_CLASSNUMRANGE assigning <S_CLASSNUMRANGE>.
    move 'I'          to <S_CLASSNUMRANGE>-SIGN.
    move 'EQ'         to <S_CLASSNUMRANGE>-OPTION.
    move 'VCXI_AOO'   to <S_CLASSNUMRANGE>-LOW.

    call function 'BAPI_OBJCL_GETOBJECTS'
      exporting
        CLASSTYPE     = '001'
        MAXROWS       = 0
      tables
        CLASSNUMRANGE = LT_CLASSNUMRANGE
        ALLOCLIST     = T_ALLOCLIST
        RETURN        = LT_RETURN.

  endmethod.
  method CONSTRUCTOR.

    try.
        SUPER->CONSTRUCTOR( exporting IF_MATNR = IF_MATNR
                                      IF_WERKS = IF_WERKS
                                      IF_DATE  = IF_DATE ).

***     Load by Cross Classification Mapping
        ME->LOAD_BY_CCM( ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_AMAT.

    data: LF_MATNR      type        MATNR.
    data: LR_CUST_FPROC type ref to ZCL_VCXI_FFSS_CUST_FPROC.
    field-symbols:  <S_AMAT>      type        ZVCXI_FFSS_S_AMAT.

***--------------------------------------------------------------------------------------
*** Get Assigned Material List
    loop at ME->T_MATNR into LF_MATNR.

      clear LR_CUST_FPROC.
      try.
          LR_CUST_FPROC = ZCL_VCXI_FFSS_CUST_FPROC=>GET_INSTANCE_FPROC( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = ME->F_WERKS
                                                                        IF_DATE  = ME->F_DATE ).
        catch /VCXI/CX_CKX.
          clear LR_CUST_FPROC.
      endtry.
      check LR_CUST_FPROC is bound.

      append initial line to RT_AMAT assigning <S_AMAT>.
      move  LF_MATNR                 to  <S_AMAT>-AMAT.
      move  LR_CUST_FPROC->S_FIWID   to  <S_AMAT>-S_FIWID.
      move  LR_CUST_FPROC->S_LOTMI   to  <S_AMAT>-S_LOTMI.
    endloop.

  endmethod.
  method GET_INSTANCE_EMAT.

    data:  LS_INSTANCE  type  YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE  into LS_INSTANCE
                                                    with key MATNR = IF_MATNR
                                                             WERKS = IF_WERKS
                                                             DATE  = IF_DATE.

    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
ENHANCEMENT-SECTION GET_INSTANCE_EMAT SPOTS ZVCXI_FFSS_ES_CUST_EMAT .
          create object RR_INSTANCE
            exporting
              IF_MATNR = IF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE.
END-ENHANCEMENT-SECTION.
        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM,
          LF_EMAT   type  MATNR.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC.
    data:           LT_SETVA        type  /VCXI/CKXC_TT_SETVA.
    field-symbols:  <S_ALLOCLIST>   type  BAPI1003_ALLOC_LIST.

    loop at ME->T_ALLOCLIST assigning <S_ALLOCLIST>.

***   Get AOO Info
      move <S_ALLOCLIST>-OBJECT to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_AOO
                                               IF_OBJNUM = LF_OBJNUM
                                               IF_MCTXT  = 'SVC' ).

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVC.

        case LS_SETVA-MAPID.
          when C_MAPID_EMAT.

***         Check Estimation Material
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            call function 'CONVERSION_EXIT_MATN1_INPUT'
              exporting
                INPUT        = LS_MAPVC-ATWTB
              importing
                OUTPUT       = LF_EMAT
              exceptions
                LENGTH_ERROR = 1
                others       = 2.
            if SY-SUBRC <> 0.
              exit.
            endif.

            if LF_EMAT eq ME->F_MATNR.
              append <S_ALLOCLIST>-OBJECT to ME->T_MATNR.
              exit.
            endif.

        endcase.
      endloop.

    endloop.

  endmethod.
