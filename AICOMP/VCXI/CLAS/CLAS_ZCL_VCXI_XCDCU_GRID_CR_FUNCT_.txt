
class ZCL_VCXI_XCDCU_GRID_CR_FUNCT definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC .
  constants C_ICON_ACTIVE type ICON_D value '@3C@'. "#EC NOTEXT
  constants C_ICON_INACTIVE type ICON_D value '@8I@'. "#EC NOTEXT

  methods ADD_FUNCT
    raising
      /VCXI/CX_CKX .
  methods DELETE_FUNCT
    importing
      !IT_CR_FUNCT type ZVCXI_XCDC_TT_CR_FUNCT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_CR_FUNCT definition
class ZCL_VCXI_XCDCU_GRID_CR_FUNCT implementation.
method ADD_FUNCT.

  data:          LS_RETURN         type                   DDSHRETVAL,
                 LS_CD_FUNCT       type                   ZVCXI_XCDC_S_REGDVC_FUNCT,
                 LS_CR_FUNCT       type                   ZVCXI_XCDC_S_CR_FUNCT.
  data:          LT_RETURN         type standard table of DDSHRETVAL,
                 LT_CD_FUNCT_SHLP  type standard table of ZVCXI_XCDCU_S_CD_FUNCT_SHLP.
  field-symbols: <S_CD_FUNCT_SHLP> type                   ZVCXI_XCDCU_S_CD_FUNCT_SHLP.

  check ME->R_CONDREC                      is bound and
        ME->R_CONDREC->R_CONDDEF           is bound.
  loop at ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_FUNCT~T_REGDVC_FUNCT into LS_CD_FUNCT.
*** Show only Functionss which are not already used.
    read table ME->R_CONDREC->T_CR_FUNCT with key IFUNC = LS_CD_FUNCT-IFUNC
    transporting no fields.
    check SY-SUBRC ne 0.

    append initial line to LT_CD_FUNCT_SHLP assigning <S_CD_FUNCT_SHLP>.
    move-corresponding LS_CD_FUNCT to <S_CD_FUNCT_SHLP>.

  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_CD_FUNCT_SHLP'
      RETFIELD        = 'IFUNC'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_CD_FUNCT_SHLP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.
    clear: LS_CR_FUNCT-IFUNC.
    move  LS_RETURN-FIELDVAL to LS_CR_FUNCT-IFUNC.

*** Add Default Element
    ME->R_CONDREC->ADD_CR_FUNCT( IS_CR_FUNCT = LS_CR_FUNCT ).

  endloop.

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_CR_FUNCT_GRID'
                      IF_CONTAINER_NAME = '0120CC_GRID_FUNCT'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).


*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CONDREC.
    catch CX_SY_MOVE_CAST_ERROR.
***   Condition Record Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDC'
          IF_MSGNO = '252' ).
  endtry.

  check ME->R_CONDREC is bound.
  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method DELETE_FUNCT.

  data: LS_CR_FUNCT type ZVCXI_XCDC_S_CR_FUNCT.

  loop at IT_CR_FUNCT into LS_CR_FUNCT.
*** Delete by ID
    ME->R_CONDREC->DELETE_CR_FUNCT( IS_CR_FUNCT = LS_CR_FUNCT ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'FUNAC'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'ACTIV_ICON'.
        move 'C'           to <S_FCAT>-JUST.
        move CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT to <S_FCAT>-STYLE.
        move 'Active'(C01) to <S_FCAT>-COLTEXT.
        move 'Active'(C01) to <S_FCAT>-SCRTEXT_L.
        move 'Active'(C01) to <S_FCAT>-SCRTEXT_M.
        move 'Active'(C01) to <S_FCAT>-SCRTEXT_S.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CR_FUNCT_GRID     type          ZVCXI_XCDCU_S_CR_FUNCT_GRID,
                 LS_CR_FUNCT          type          ZVCXI_XCDC_S_CR_FUNCT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition FUNCTs
  loop at ME->R_CONDREC->T_CR_FUNCT into LS_CR_FUNCT.
    clear: LS_CR_FUNCT_GRID.

    move-corresponding LS_CR_FUNCT to LS_CR_FUNCT_GRID.

*** Get Active Icon of Function active Flag
    if LS_CR_FUNCT_GRID-FUNAC eq ABAP_TRUE.
      move C_ICON_ACTIVE to LS_CR_FUNCT_GRID-ACTIV_ICON.
    else.
      move C_ICON_INACTIVE to LS_CR_FUNCT_GRID-ACTIV_ICON.
    endif.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CR_FUNCT_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_CR_FUNCT          type          ZVCXI_XCDC_S_CR_FUNCT.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  try.

      check ME->F_LOCKED eq ABAP_TRUE.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.

***   Do only Hotspotclick for Active Icon
      case E_COLUMN_ID-FIELDNAME.
        when 'ACTIV_ICON'.

          assign component 'FUNAC' of structure <S_DATA> to <F_FIELD>.
          check SY-SUBRC = 0.

          if <F_FIELD> = ABAP_TRUE.
            move ABAP_FALSE to <F_FIELD>.
          else.
            move ABAP_TRUE to <F_FIELD>.
          endif.

          move-corresponding <S_DATA> to LS_CR_FUNCT.
          ME->R_CONDREC->UPDATE_CR_FUNCT( IS_CR_FUNCT = LS_CR_FUNCT ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_CR_FUNCT     type          ZVCXI_XCDC_TT_CR_FUNCT.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_CR_FUNCT>    type          ZVCXI_XCDC_S_CR_FUNCT,
                 <S_DATA>        type          any.

  try.

***   Get FUNCT Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***       Add new Function
          ME->ADD_FUNCT( ).

        when C_FUNC_DEL.
***       Delete Function
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Function's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_FUNCT assigning <S_CR_FUNCT>.
            move-corresponding <S_DATA> to <S_CR_FUNCT>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_FUNCT assigning <S_CR_FUNCT>.
            move-corresponding <S_DATA> to <S_CR_FUNCT>.
          endloop.

***       Delete Function's
          ME->DELETE_FUNCT( IT_CR_FUNCT = LT_CR_FUNCT ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Hotspot Click if it is locked
  if ME->F_LOCKED eq ABAP_TRUE.
    set handler ME->HANDLE_HOTSPOT_CLICK for ME->R_GRID.
  endif.

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
