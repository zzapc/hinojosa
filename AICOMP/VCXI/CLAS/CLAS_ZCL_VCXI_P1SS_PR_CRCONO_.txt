
class ZCL_VCXI_P1SS_PR_CRCONO definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XCONO
  create public .

public section.

  interfaces ZIF_VCXI_P1SS_COMM_PREV .
  interfaces ZIF_VCXI_P1SS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .

  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P1_CRCONO type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_CRCONO' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.

  methods GET_FOVRR_PRINT
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRINT
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .

  methods GET_CSPLIT
    redefinition .
  methods GET_NOUPS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods IS_XCONI_COMPATIBLE
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_PRINT type /VCXI/VKSC_IEVNT value 'RECALC_PRINT' ##NO_TEXT.
  constants C_IEVNT_O_CRBPX_CHANGED type /VCXI/VKSC_IEVNT value 'CRBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRFPX_CHANGED type /VCXI/VKSC_IEVNT value 'CRFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_CRBPX type /VCXI/VKS_PARID value 'ZVCXI_P1_CRBPX' ##NO_TEXT.
  constants C_PARID_CRFPX type /VCXI/VKS_PARID value 'ZVCXI_P1_CRFPX' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods HANDLE_RECALC_PRINT
    raising
      /VCXI/CX_CKX .
  methods SET_CRBPX
    importing
      !IF_CRBPX type ZVCXI_P1S_CRBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRFPX
    importing
      !IF_CRFPX type ZVCXI_P1S_CRFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_DIKEY
    redefinition .
  methods HANDLE_RECALC_PRODH
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CRCONO definition
class ZCL_VCXI_P1SS_PR_CRCONO implementation.
  method GET_CSPLIT.

    RT_CSPLIT = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( )->T_CSPLIT.

  endmethod.
  method GET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

    RF_FOVRR = switch #( LF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                  when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC then ABAP_FALSE
                                                                        else ABAP_UNDEFINED ).

  endmethod.
  method GET_NOUPS.

    RF_NOUPS = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_PRINT.
        ME->HANDLE_RECALC_PRINT( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_NOUTT  type ZVCXI_PXS_NOUTT,
          LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY             type ZVCXI_P0SS_S_DIKEY,
          LS_SHTLE             type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI             type ZVCXI_P0SS_S_SHTWI,
          LS_CALCV_SBLAR       type ZVCXI_XCS_S_CALCV,
          LS_CALCV_SBLAR_TOTAL type ZVCXI_XCS_S_CALCV,
          LS_CALCV_SBLAR_SELF  type ZVCXI_XCS_S_CALCV.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CRCONO type ref to ZCL_VCXI_P1SS_PR_CRCONO,
          LR_PR_CFG    type ref to ZCL_VCXI_P1SS_PR_CFG.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.


***------------------------------------------------------------------------------------------------
    if LINES( LT_GATE ) eq 1.     " not only me
      LF_FACTOR = 1.
    else.
***   Loop through all siblings and collect total Sold Blank Area
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_P1SS_PR_CRCONO into LR_PR_CRCONO.
            LF_NOUTT = LR_PR_CRCONO->GET_NOUTT( ).
            LR_PR_CRCONO->ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                                        ES_SHTWI = LS_SHTWI ).
          when type ZCL_VCXI_P1SS_PR_CFG into LR_PR_CFG.
            LF_NOUTT = LR_PR_CFG->GET_NOUTT( ).
            LR_PR_CFG->ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                                     ES_SHTWI = LS_SHTWI ).
          when others.
            continue.
        endcase.
        check LS_SHTLE-SHTLE_UOM is not initial and
              LS_SHTWI-SHTWI_UOM is not initial.

***     Calculate Sold Blank Area (considering Number of Outs)
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                            IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                            IF_CALCV_2     = LS_SHTWI-SHTWI
                                                            IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_CALCV_SBLAR-CALCV
                                                            EF_CALCV_UOM   = LS_CALCV_SBLAR-CALCV_UOM ).
        LS_CALCV_SBLAR-CALCV = LS_CALCV_SBLAR-CALCV * LF_NOUTT.

***     Keep own Area for determination of Factor
        if LR_GATE eq ME->R_GATE.
          LS_CALCV_SBLAR_SELF = LS_CALCV_SBLAR.
        endif.

***     Calculate Total Area
        if LS_CALCV_SBLAR_TOTAL is initial.
          LS_CALCV_SBLAR_TOTAL = LS_CALCV_SBLAR.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_SBLAR-CALCV
                                                              IF_CALCV_UOM_1 = LS_CALCV_SBLAR-CALCV_UOM
                                                              IF_CALCV_2     = LS_CALCV_SBLAR_TOTAL-CALCV
                                                              IF_CALCV_UOM_2 = LS_CALCV_SBLAR_TOTAL-CALCV_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                    importing EF_CALCV       = LS_CALCV_SBLAR_TOTAL-CALCV
                                                              EF_CALCV_UOM   = LS_CALCV_SBLAR_TOTAL-CALCV_UOM ).
        endif.
      endloop.

***   Determine Factor based on Area
      if LS_CALCV_SBLAR_TOTAL-CALCV gt 0.
        LF_FACTOR = LS_CALCV_SBLAR_SELF-CALCV / LS_CALCV_SBLAR_TOTAL-CALCV.
      else.
        LF_FACTOR = 0.
      endif.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_PRINT.

    data: LF_SETBY  type /VCXI/VKSR_SETBY.


***------------------------------------------------------------------------------------------------
*** Get Setby
    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

*** Get all sibling provider
    if LINES( ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ) ) le 1.
      LF_SETBY = SPACE.  "No Print Definition if Separation is not active
    else.
      LF_SETBY = switch #( LF_SETBY when SPACE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                               else LF_SETBY ).
    endif.

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

***------------------------------------------------------------------------------------------------
*** Set forwarded Print Definition
    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IT_PRINT_COM = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->T_PRINT
                                               IF_SETBY     = LF_SETBY ).

  endmethod.
  method HANDLE_RECALC_PRODH.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.


    ME->GET_PRODH( importing EF_SETBY = LF_SETBY ).

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Set Forwarded Product Hierarchy
    LR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).
    if LR_BL_CRFPROP is bound.
      ME->SET_PRODH( IF_PRODH = LR_BL_CRFPROP->F_PRODH ).
    endif.

  endmethod.
  method IS_XCONI_COMPATIBLE.

    check SUPER->IS_XCONI_COMPATIBLE( IR_GATE_XCONI = IR_GATE_XCONI ).

    if IR_GATE_XCONI is bound and
       IR_GATE_XCONI->R_CLSPR is instance of ZIF_VCXI_P1SS_COMM_PREV.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method SET_CRBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).

    move IF_CRBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRBPX_CHANGED ).
    endif.

  endmethod.
  method SET_CRFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRFPX ).

    move IF_CRFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


    LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE  then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                  when ABAP_FALSE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                  else SPACE ).

    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IF_SETBY = LF_SETBY ).

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).
    move LS_PARAM-STRNG to EF_CRBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property Instance
    if RR_BL_CRBPROP is requested.
      RR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( IF_CRBPX = EF_CRBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LT_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM.


*** Get Corrugator Forward Property (Inbound)
    RR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Use Sheet Dimension as Handling Dimension if Handling Dimensions are initial
    if RR_BL_CRFPROP->S_HNDDIM is initial.
      ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                        ES_SHTWI = LS_SHTWI ).
      RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                      HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                      HNDWI     = LS_SHTWI-SHTWI
                                                      HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                      HNDHE     = RR_BL_CRFPROP->S_CALIP-CALIP
                                                      HNDHE_UOM = RR_BL_CRFPROP->S_CALIP-CALIP_UOM ) ).
    endif.

*** Get Print Definition (in case of Separation)
    LT_PRINT_COM = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is not initial.
      RR_BL_CRFPROP->SET_PRINT( IT_PRINT = LT_PRINT_COM ).
    endif.

*** Product Hierarchy
    RR_BL_CRFPROP->SET_PRODH( IF_PRODH = ME->GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM.

    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property (Outbound)
    RR_BL_CRBPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Apply Distribution Key to Cost Split
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_DIKEY( IS_DIKEY = ME->GET_DIKEY( ) ).

*** Apply Number of Outs to Cost Split
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRFPX ).
    move LS_PARAM-STRNG to EF_CRFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Corrugator Forward Property Instance
    if RR_BL_CRFPROP is requested.
      RR_BL_CRFPROP = ZCL_VCXI_P1SS_BL_CRFPROP=>FACTORY( IF_CRFPX = EF_CRFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RF_NOUPS *= ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM.

    ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P1SS_COMM_PREV,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


*** Super
    SUPER->ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD( IT_GATE = IT_GATE ).

***------------------------------------------------------------------------------------------------
*** Create new Corrugator Backward Property Instance
    LR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Number of Ups
      LF_NOUPS = LR_COMM_PREV->GET_NOUPS( ).

***   Combine Corrugator Backward Property
      LR_BL_CRBPROP->MERGE( IR_BL_CRBPROP = LR_COMM_PREV->GET_CRBPX( ) ).
    endloop.

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Corrugator Backward Property XML
    ME->SET_CRBPX( IF_CRBPX = LR_BL_CRBPROP->GET_CRBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P1SS_COMM_NEXT,
          LR_BL_CRFPROP      type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRFPROP_NEXT type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.


***   Get Surface Weight
      LS_SURWT = LR_COMM_NEXT->GET_SURWT( ).

***   Combine Corrugator Forward Property
      LR_BL_CRFPROP_NEXT = LR_COMM_NEXT->GET_CRFPX( ).
      if LR_BL_CRFPROP is not bound.
        move LR_BL_CRFPROP_NEXT to LR_BL_CRFPROP.
      else.
        LR_BL_CRFPROP->MERGE( IR_BL_CRFPROP = LR_BL_CRFPROP_NEXT ).
      endif.

    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Corrugator Forward Property XML
    if LR_BL_CRFPROP is bound.
      ME->SET_CRFPX( IF_CRFPX = LR_BL_CRFPROP->GET_CRFPX( ) ).
    else.
      ME->SET_CRFPX( IF_CRFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.
    EF_SETBY = LS_PARAM-SETBY.


***--------------------------------------------------------------------------------------
*** Fallback in case of no Separation
    if EF_SETBY eq SPACE.
      RT_PRINT_COM = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->T_PRINT.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->GET_FOVRR_PRINT( ) when ABAP_TRUE then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
