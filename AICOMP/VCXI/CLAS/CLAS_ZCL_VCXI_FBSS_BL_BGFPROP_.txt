
class ZCL_VCXI_FBSS_BL_BGFPROP definition
  public
  create protected .

public section.

  types:
    YT_TC120T type standard table of ZVCXI_FFS_TC120T .

  data T_BPINFO type ZVCXI_FBSS_TT_BPINFO read-only .
  data T_BGICS type ZVCXI_FBSS_TT_BGICS read-only .
  data S_HNDDIM type ZVCXI_F0S_S_HNDDIM read-only .
  data S_ADDWT type ZVCXI_F0S_S_ADDWT read-only .

  methods ADD_BGICS
    importing
      !IF_ICSTP type ZVCXI_FBS_ICSTP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX optional
    returning
      value(RR_BL_BGFPROP) type ref to ZCL_VCXI_FBSS_BL_BGFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_BGFPX
    returning
      value(RF_BGFPX) type ZVCXI_FBS_BGFPX
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP
    raising
      /VCXI/CX_CKX .
  methods MERGE_ADDWT
    importing
      !IS_ADDWT type ZVCXI_F0S_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods MERGE_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_F0S_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
    raising
      /VCXI/CX_CKX .
  methods SET_BGICS
    importing
      !IT_BGICS type ZVCXI_FBSS_TT_BGICS
    raising
      /VCXI/CX_CKX .
  methods SET_BPINFO
    importing
      !IT_BPINFO type ZVCXI_FBSS_TT_BPINFO
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_TC110 type standard table of ZVCXI_FFS_TC110 .
  types:
    YT_TC120 type standard table of ZVCXI_FFS_TC120 .

  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_BL_BGFPROP definition
class ZCL_VCXI_FBSS_BL_BGFPROP implementation.
  method ADD_BGICS.

    field-symbols: <S_BGICS> type ZVCXI_FBSS_S_BGICS.

    read table ME->T_BGICS assigning <S_BGICS> with key ICSTP = IF_ICSTP.
    if SY-SUBRC is initial.
      add 1 to <S_BGICS>-CCSTP.
    else.

      append initial line to ME->T_BGICS assigning <S_BGICS>.
      move: IF_ICSTP  to <S_BGICS>-ICSTP,
            1         to <S_BGICS>-CCSTP.

    endif.

  endmethod.
  method FACTORY.

*** Create BL Reference
enhancement-section FACTORY spots ZVCXI_FBSS_ES_BL_BGFPROP .
    create object RR_BL_BGFPROP.
end-enhancement-section.

*** Set Bag Forward Property XML
    RR_BL_BGFPROP->SET_BGFPX( IF_BGFPX = IF_BGFPX ).

  endmethod.
  method GET_BGFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_BGFPX.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'T_BPINFO'  VALUE = ref #( ME->T_BPINFO ) )
                       ( NAME = 'T_BGICS'   VALUE = ref #( ME->T_BGICS  ) )
                       ( NAME = 'S_HNDDIM'  VALUE = ref #( ME->S_HNDDIM ) )
                       ( NAME = 'S_ADDWT'   VALUE = ref #( ME->S_ADDWT  ) )
                     ).

  endmethod.
  method MERGE.

    data: LT_BPINFO type ZVCXI_FBSS_TT_BPINFO,
          LT_BGICS  type ZVCXI_FBSS_TT_BGICS.

    check IR_BL_BGFPROP is bound.

*** Bag Part Information
    append lines of ME->T_BPINFO            to LT_BPINFO.
    append lines of IR_BL_BGFPROP->T_BPINFO to LT_BPINFO.
    ME->SET_BPINFO( IT_BPINFO = LT_BPINFO ).

*** Bag Included Conv. Steps
    append lines of ME->T_BGICS            to LT_BGICS.
    append lines of IR_BL_BGFPROP->T_BGICS to LT_BGICS.
    ME->SET_BGICS( IT_BGICS = LT_BGICS ).

*** Handling Dimension
    ME->MERGE_HNDDIM( IS_HNDDIM = IR_BL_BGFPROP->S_HNDDIM ).

*** Additional Weight
    ME->MERGE_ADDWT( IS_ADDWT = IR_BL_BGFPROP->S_ADDWT ).

  endmethod.
  method MERGE_ADDWT.

    data: LS_ADDWT type ZVCXI_F0S_S_ADDWT.


    check IS_ADDWT is not initial.

***----------------------------------------------------------------------------
    if ME->S_ADDWT is not initial.
***   Summarize Additional Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_ADDWT-ADDWT
                                                          IF_CALCV_UOM_1 = ME->S_ADDWT-ADDWT_UOM
                                                          IF_CALCV_2     = IS_ADDWT-ADDWT
                                                          IF_CALCV_UOM_2 = IS_ADDWT-ADDWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_ADDWT-ADDWT_UOM
                                                importing EF_CALCV       = LS_ADDWT-ADDWT
                                                          EF_CALCV_UOM   = LS_ADDWT-ADDWT_UOM ).
    else.
***   Use provided Additional Weight
      LS_ADDWT = IS_ADDWT.
    endif.

***----------------------------------------------------------------------------
*** Set new Additional Weight
    ME->SET_ADDWT( IS_ADDWT = LS_ADDWT ).

  endmethod.
  method MERGE_HNDDIM.

    data: LS_HNDDIM type ZVCXI_F0S_S_HNDDIM.


    check IS_HNDDIM is not initial.

***----------------------------------------------------------------------------
    if ME->S_HNDDIM is not initial.
***   Use lager Length
      if ME->S_HNDDIM-S_HNDLE is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = ME->S_HNDDIM-HNDLE
                                                      IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDLE_UOM
                                                      IF_CALCV_2     = IS_HNDDIM-HNDLE
                                                      IF_CALCV_UOM_2 = IS_HNDDIM-HNDLE_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        LS_HNDDIM-S_HNDLE = ME->S_HNDDIM-S_HNDLE.
      else.
        LS_HNDDIM-S_HNDLE = IS_HNDDIM-S_HNDLE.
      endif.

***   Use lager Width
      if ME->S_HNDDIM-S_HNDWI is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = ME->S_HNDDIM-HNDWI
                                                      IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDWI_UOM
                                                      IF_CALCV_2     = IS_HNDDIM-HNDWI
                                                      IF_CALCV_UOM_2 = IS_HNDDIM-HNDWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        LS_HNDDIM-S_HNDWI = ME->S_HNDDIM-S_HNDWI.
      else.
        LS_HNDDIM-S_HNDWI = IS_HNDDIM-S_HNDWI.
      endif.

***   Summarize Height
      if IS_HNDDIM-HNDHE_UOM is not initial.
        if ME->S_HNDDIM-HNDHE_UOM is not initial.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_HNDDIM-HNDHE
                                                              IF_CALCV_UOM_1 = ME->S_HNDDIM-HNDHE_UOM
                                                              IF_CALCV_2     = IS_HNDDIM-HNDHE
                                                              IF_CALCV_UOM_2 = IS_HNDDIM-HNDHE_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = ME->S_HNDDIM-HNDHE_UOM
                                                    importing EF_CALCV       = LS_HNDDIM-HNDHE
                                                              EF_CALCV_UOM   = LS_HNDDIM-HNDHE_UOM ).
        else.
          LS_HNDDIM-S_HNDHE = IS_HNDDIM-S_HNDHE.
        endif.
      endif.
    else.
***   Use provided Handling Dimension
      LS_HNDDIM = IS_HNDDIM.
    endif.

***----------------------------------------------------------------------------
*** Set new Handling Dimension
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method SET_ADDWT.

    ME->S_ADDWT = IS_ADDWT.

  endmethod.
  method SET_BGFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_BGFPX is not initial.

***   Get Data References for XML Serialize/Deserialize
      LT_DATA = ME->GET_XML_DREF( ).

***   Open XML
      call transformation ID
           source xml IF_BGFPX
           result (LT_DATA).

    endif.

  endmethod.
  method SET_BGICS.

    move IT_BGICS to ME->T_BGICS.

  endmethod.
  method SET_BPINFO.

    move IT_BPINFO to ME->T_BPINFO.

  endmethod.
  method SET_HNDDIM.

    ME->S_HNDDIM = IS_HNDDIM.

  endmethod.
