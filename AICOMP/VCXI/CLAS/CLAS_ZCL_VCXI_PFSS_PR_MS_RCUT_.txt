
class ZCL_VCXI_PFSS_PR_MS_RCUT definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_CALIP .
  interfaces ZIF_VCXI_XCS_PSCALE_MGR .

  constants C_IPRVT_PF_MS_RCUT type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_MS_RCUT' ##NO_TEXT.
  constants C_IEVNT_O_REWID_CHANGED type /VCXI/VKSC_IEVNT value 'REWID_CHANGED' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_FPSMO
    returning
      value(RF_FPSMO) type ZVCXI_P0SS_FPSMO
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_PSCALE
    importing
      !IS_PSQTY type ZVCXI_XCS_S_PSQTY
    exporting
      !ES_PRICE type ZVCXI_XCS_S_PRICE
      !ES_PRICP type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_REWID
    returning
      value(RS_REWID) type ZVCXI_P0SS_S_REWID
    raising
      /VCXI/CX_CKX .
  methods GET_SIDRU
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPSMO
    importing
      !IF_FPSMO type ZVCXI_P0SS_FPSMO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_REWID
    importing
      !IS_REWID type ZVCXI_P0SS_S_REWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SIDRU
    importing
      !IS_SIDRU type ZVCXI_P0SS_S_SIDRU
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SIDRU type /VCXI/VKSC_IEVNT value 'RECALC_SIDRU' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPSMO_CHANGED type /VCXI/VKSC_IEVNT value 'FPSMO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PAPGR_CHANGED type /VCXI/VKSC_IEVNT value 'PAPGR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SIDRU_CHANGED type /VCXI/VKSC_IEVNT value 'SIDRU_CHANGED' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_FPSMO type /VCXI/VKS_PARID value 'ZVCXI_P0_FPSMO' ##NO_TEXT.
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM' ##NO_TEXT.
  constants C_PARID_PAPGR type /VCXI/VKS_PARID value 'ZVCXI_PF_PAPGR' ##NO_TEXT.
  constants C_PARID_REWID type /VCXI/VKS_PARID value 'ZVCXI_P0_REWID' ##NO_TEXT.
  constants C_PARID_SIDRU type /VCXI/VKS_PARID value 'ZVCXI_P0_SIDRU' ##NO_TEXT.
  data R_CUST_PF_REEL type ref to ZCL_VCXI_PFSS_CUST_REEL .
  data R_ICONT type ref to ZIF_VCXI_P0SS_ICONT .
  data R_PR_SPEC_UCB type ref to ZCL_VCXI_PFSS_PR_SPEC_UCB .

  methods CHECK_GRAMM
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PAPGR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SIDRU
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SIDRU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSS_PR_MS_RCUT definition
class ZCL_VCXI_PFSS_PR_MS_RCUT implementation.
method CHECK_GRAMM.

*** 0 - Grammage is maintained and valid.
*** 1 - Grammage is not maintained.
*** 2 - Grammage is maintained but do not fit to Specifcation.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM.

*** Get Grammage
  LS_GRAMM = ME->GET_GRAMM( ).
  if LS_GRAMM-GRAMM is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    move 2 to RF_RETURN.
  endif.

*** Check against Specification
  check ME->R_PR_SPEC_UCB is bound and
        ME->R_PR_SPEC_UCB->GET_GRAMM( ) eq LS_GRAMM.

  move 0 to RF_RETURN.

endmethod.
method CHECK_PAPGR.

*** 0 - Paper Grade is maintained and valid.
*** 1 - Paper Grade is not maintained.
*** 2 - Paper Grade is maintained but do not fit to Specifcation.

  data: LF_PAPGR type ZVCXI_PFSS_PAPGR.

*** Get Paper Grade
  LF_PAPGR = ME->GET_PAPGR( ).
  if LF_PAPGR is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    move 2 to RF_RETURN.
  endif.

*** Check against Specification
  check ME->R_PR_SPEC_UCB is bound and
        ME->R_PR_SPEC_UCB->GET_PAPGR( ) eq LF_PAPGR.

  move 0 to RF_RETURN.


endmethod.
method CHECK_SIDRU.

*** 0 - Side Run can be calculated.
*** 1 - Side Run can't be calculated.

  data: LF_NOUPS type ZVCXI_P0SS_NOUPS.
  data: LS_REWID type ZVCXI_P0SS_S_REWID,
        LS_AGGRA type ZVCXI_PFSS_S_AGGRA,
        LS_CALCV type ZVCXI_XCS_S_CALCV.

  LS_REWID = ME->GET_REWID( ).

*** ------------------------------------------------------------------------
*** Calculate Side Run with longest side of Specification (Against/In Grain)
  check ME->R_PR_SPEC_UCB is bound       and
        LS_REWID-REWID    is not initial.

*** Get Side Dimensions of Specification
  LS_AGGRA = ME->R_PR_SPEC_UCB->GET_AGGRA( ).
  move LS_AGGRA-AGGRA     to LS_CALCV-CALCV.
  move LS_AGGRA-AGGRA_UOM to LS_CALCV-CALCV_UOM.

*** ------------------------------------------------------------------------
*** Calculate Side Run
  if LS_CALCV-CALCV is not initial.
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_REWID-REWID_UOM
                                                       IF_UOM_IN    = LS_CALCV-CALCV_UOM
                                                       IF_VALUE_IN  = LS_CALCV-CALCV
                                             importing EF_VALUE_OUT = LS_CALCV-CALCV
                                                       EF_UOM_OUT   = LS_CALCV-CALCV_UOM ).

    LF_NOUPS = floor( LS_REWID-REWID / LS_CALCV-CALCV ).
    if LF_NOUPS is initial.
      move 1 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.
  else.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_W.

endmethod.
method DO_FREE.

  ME->R_GATE->DO_FREE( ).

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FPSMO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).
  move LS_PARAM-ATWRT to RF_FPSMO.

endmethod.
method GET_GRAMM.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
  move LS_PARAM-ATFLV to RS_GRAMM-GRAMM.
  move LS_PARAM-UNIT  to RS_GRAMM-GRAMM_UOM.

endmethod.
method GET_ICONT.

  check ME->R_ICONT is bound.

*** Return Context
  RF_ICONT = ME->R_ICONT->GET_ICONT( ).

endmethod.
method GET_PAPGR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).
  move LS_PARAM-ATWRT to RF_PAPGR.

endmethod.
method GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

endmethod.
method GET_REWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REWID ).
  move LS_PARAM-ATFLV to RS_REWID-REWID.
  move LS_PARAM-UNIT  to RS_REWID-REWID_UOM.

endmethod.
method GET_SIDRU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).
  move LS_PARAM-ATFLV to RS_SIDRU-SIDRU.
  move LS_PARAM-UNIT  to RS_SIDRU-SIDRU_UOM.

endmethod.
method GET_STATUS.

  data:  LS_CALIP type ZVCXI_P0SS_S_CALIP,
         LS_REWID type ZVCXI_P0SS_S_REWID.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Paper Grade against Specification
  if ME->CHECK_PAPGR( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Grammage against Specification
  if ME->CHECK_GRAMM( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Caliper
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Reel Width
  LS_REWID = ME->GET_REWID( ).
  if LS_REWID-REWID is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Side Run
  if ME->CHECK_SIDRU( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:  LS_CALIP type ZVCXI_P0SS_S_CALIP,
         LS_REWID type ZVCXI_P0SS_S_REWID.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Paper Grade against Specification
  case ME->CHECK_PAPGR( ).
    when 0.
***   Paper Grade is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '051' ).
    when 1.
***   Paper Grade is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '052' ).
    when 2.
***   Paper Grade is maintained but do not fit to Specifcation.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '053' ).
  endcase.

*** Check Grammage against Specification
  case ME->CHECK_GRAMM( ).
    when 0.
***   Grammage is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '054' ).
    when 1.
***   Grammage is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '055' ).
    when 2.
***   Grammage is maintained but do not fit to Specifcation.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '056' ).
  endcase.

*** Check Caliper
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
*** Caliper is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '615' ).
  else.
*** Caliper is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '616' ).
  endif.

*** Check Reel Width
  LS_REWID = ME->GET_REWID( ).
  if LS_REWID-REWID is not initial.
*** Reel Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '057' ).
  else.
*** Reel Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '058' ).
  endif.

*** Check Side Run
  if ME->CHECK_SIDRU( ) eq 0.
*** Side Run can be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '059' ).
  else.
*** Side Run can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '060' ).
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_RECALC_SIDRU.
      ME->HANDLE_RECALC_SIDRU( ).

  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D,
         LF_DCONF type DATS.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.
  move ME->GET_DCONF( )            to LF_DCONF.

  if ME->R_CUST_PF_REEL          is bound    and
     ME->R_CUST_PF_REEL->F_MATNR eq LF_MATNR and
     ME->R_CUST_PF_REEL->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_PF_REEL.

*** Load the Customizing
  ME->R_CUST_PF_REEL = ZCL_VCXI_PFSS_CUST_REEL=>GET_INSTANCE_PF_REEL( IF_MATNR = LF_MATNR
                                                                      IF_WERKS = LF_WERKS
                                                                      IF_DATE  = LF_DCONF ).

  check ME->R_CUST_PF_REEL is bound.

*** Get Reel Cutting Info's for Non-Dummy Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_PAPGR( IF_PAPGR = ME->R_CUST_PF_REEL->F_PAPGR ).
    ME->SET_GRAMM( IS_GRAMM = ME->R_CUST_PF_REEL->S_GRAMM ).
    ME->SET_REWID( IS_REWID = ME->R_CUST_PF_REEL->S_REWID ).
    ME->SET_CALIP( IS_CALIP = ME->R_CUST_PF_REEL->S_CALIP ).
  endif.

  try.
      move ME->R_CUST_PF_REEL ?to ME->R_CUST_MATNR.
    catch CX_SY_MOVE_CAST_ERROR.
***   Material Customizing Reference of &1 do not match to Global Customizing.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '011'
          IF_MSGV1 = ME->R_GATE->F_ID ).
  endtry.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Context Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_ICONT=>C_IPRVT_P0_ICONT
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_ICONT.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_ICONT.
  endtry.

  if ME->R_ICONT is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZIF_VCXI_P0SS_ICONT=>C_IPRVT_P0_ICONT
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC_UCB.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PR_SPEC_UCB.
  endtry.

  if ME->R_PR_SPEC_UCB is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_RECALC_SIDRU.

  data: LF_NOUPS type ZVCXI_P0SS_NOUPS.
  data: LS_REWID type ZVCXI_P0SS_S_REWID,
        LS_AGGRA type ZVCXI_PFSS_S_AGGRA,
        LS_SIDRU type ZVCXI_P0SS_S_SIDRU,
        LS_CALCV type ZVCXI_XCS_S_CALCV.

  LS_REWID = ME->GET_REWID( ).
  LS_SIDRU = ME->GET_SIDRU( ).
  clear: LS_SIDRU-SIDRU.

*** ------------------------------------------------------------------------
*** Calculate Side Run with longest side of Specification (Against/In Grain)
  check ME->R_PR_SPEC_UCB is bound       and
        LS_REWID-REWID    is not initial.

*** Get Side Dimensions of Specification
  LS_AGGRA = ME->R_PR_SPEC_UCB->GET_AGGRA( ).
  move LS_AGGRA-AGGRA     to LS_CALCV-CALCV.
  move LS_AGGRA-AGGRA_UOM to LS_CALCV-CALCV_UOM.

*** ------------------------------------------------------------------------
*** Calculate Side Run
  if LS_CALCV-CALCV is not initial.
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_REWID-REWID_UOM
                                                       IF_UOM_IN    = LS_CALCV-CALCV_UOM
                                                       IF_VALUE_IN  = LS_CALCV-CALCV
                                             importing EF_VALUE_OUT = LS_CALCV-CALCV
                                                       EF_UOM_OUT   = LS_CALCV-CALCV_UOM ).

    LF_NOUPS = floor( LS_REWID-REWID / LS_CALCV-CALCV ).
    if LF_NOUPS is not initial.
      LS_CALCV-CALCV = LS_CALCV-CALCV * LF_NOUPS.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_REWID-REWID
                                                          IF_CALCV_UOM_1 = LS_REWID-REWID_UOM
                                                          IF_CALCV_2     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                importing EF_CALCV       = LS_SIDRU-SIDRU
                                                          EF_CALCV_UOM   = LS_SIDRU-SIDRU_UOM ).
    endif.
  endif.

*** ------------------------------------------------------------------------
*** Set Side Run
  ME->SET_SIDRU( IS_SIDRU = LS_SIDRU ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_FPSMO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).

  move IF_FPSMO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPSMO_CHANGED ).
  endif.

endmethod.
method SET_GRAMM.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

  move IS_GRAMM-GRAMM     to LS_PARAM-ATFLV.
  move IS_GRAMM-GRAMM_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
  endif.

endmethod.
method SET_PAPGR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).

  move IF_PAPGR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAPGR_CHANGED ).
  endif.

endmethod.
method SET_REWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REWID ).

  move IS_REWID-REWID     to LS_PARAM-ATFLV.
  move IS_REWID-REWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REWID_CHANGED ).
  endif.

endmethod.
method SET_SIDRU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).

  move IS_SIDRU-SIDRU     to LS_PARAM-ATFLV.
  move IS_SIDRU-SIDRU_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SIDRU_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_CALIP~GET_CALIP.

  data: LF_POOTI    type          ZVCXI_P0S_POOTI,
        LF_CONTINUE type          ABAP_BOOL.
  data: LT_POOTI    type table of ZVCXI_P0S_POOTI.

  split IF_POOTI at ZIF_VCXI_P0SS_CALIP~C_POOTI_SEP into table LT_POOTI.

  loop at LT_POOTI into LF_POOTI.
    condense LF_POOTI.
    check LF_POOTI eq '*'     or
          LF_POOTI eq 'BASE'.

    LF_CONTINUE = ABAP_TRUE.
    exit.
  endloop.

  check LF_CONTINUE eq ABAP_TRUE.

  RS_CALIP = ME->GET_CALIP( ).

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY,
                 LS_UOMCF             type        ZVCXI_XCS_S_UOMCF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***     Convert Price Scale Quantity if needed
        if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
          read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
          LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
          if LS_UOMCF-UOMCF is not initial.
            LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
          else.
            clear: LS_PSQTY-PSQTY.
          endif.
        endif.

***     Check conversion was successful
        check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***     Compare
        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PSCALE.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
  if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
    read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
    ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
    if LS_UOMCF-UOMCF is not initial.
      ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
    endif.
  endif.

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Changeable depending on Flag - Price Scale modified
  RF_CHANGEABLE = ME->GET_FPSMO( ).

endmethod.
