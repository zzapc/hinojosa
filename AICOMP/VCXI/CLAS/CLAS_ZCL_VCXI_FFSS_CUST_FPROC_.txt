
class ZCL_VCXI_FFSS_CUST_FPROC definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_CUOBJ type CUOBJ read-only .
  data F_FISTX type ZVCXI_FFS_FISTX read-only .
  data F_FISTY type ZVCXI_FFS_FISTY read-only .
  data F_TFILM type ZVCXI_F0S_TFILM read-only .
  data F_TFOLD type ZVCXI_FFS_TFOLD read-only .
  data F_WRK02 type WERKS_D read-only .
  data S_CMPRK type /VCXI/VKC_S_CMPRK read-only .
  data S_FITEX type ZVCXI_FFS_S_FITEX read-only .
  data S_FITHI type ZVCXI_F0S_S_FITHI read-only .
  data S_FITIN type ZVCXI_FFS_S_FITIN read-only .
  data S_FIWID type ZVCXI_F0S_S_FIWID read-only .
  data S_GULEF type ZVCXI_F0S_S_GULEF read-only .
  data S_GURIG type ZVCXI_F0S_S_GURIG read-only .
  data S_LOTMI type ZVCXI_F0S_S_LOTMI read-only .
  data S_PFWID type ZVCXI_FFS_S_PFWID read-only .
  data S_PTRQW type ZVCXI_FFS_S_PTRQW read-only .
  data S_RDITA type ZVCXI_FFS_S_RDITA read-only .
  data S_RELEN type ZVCXI_FFS_S_RELEN read-only .
  data S_SURWT type ZVCXI_F0S_S_SURWT read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_FPROC
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_FPROC
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_KAUSF,
      MATNR   type MATNR,
      WERKS   type WERKS_D,
      DATE    type DATS,
      S_EVQTY type ZVCXI_XCSR_S_EVQTY,
      S_KAUSF type ZVCXI_XCSP_S_KAUSF,
    end   of YS_KAUSF .
  types:
    YT_KAUSF type standard table of YS_KAUSF .

  constants C_MAPID_LOTMI type /VCXI/CKXC_MAPID value 'LOTMI' ##NO_TEXT.
  constants C_SETID_AOO type /VCXI/CKXC_SETID value 'ZVCXI_FFSS_AOO' ##NO_TEXT.
  class-data T_KAUSF type YT_KAUSF .

  methods LOAD_BY_MM
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_CUST_FPROC definition
class ZCL_VCXI_FFSS_CUST_FPROC implementation.
  method CONSTRUCTOR.

    data: LS_MARC type MARC.

    try.
        SUPER->CONSTRUCTOR( exporting IF_MATNR = IF_MATNR
                                      IF_WERKS = IF_WERKS
                                      IF_DATE  = IF_DATE ).

***--------------------------------------------------------------------------------------
***     Get Material Plant Data
        call function 'MARC_SINGLE_READ'
          exporting
            MATNR     = ME->F_MATNR
            WERKS     = ME->F_WERKS
          importing
            WMARC     = LS_MARC
          exceptions
            NOT_FOUND = 4
            others    = 5.
        if SY-SUBRC <> 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Consider Special Procurement Type
        if LS_MARC-BESKZ eq 'F' and
           LS_MARC-SOBSL is not initial.
          select single WRK02
                 into ME->F_WRK02
                 from T460A
                where WERKS eq LS_MARC-WERKS
                 and  SOBSL eq LS_MARC-SOBSL.
          if ME->F_WRK02 is initial.
            move ME->F_WERKS to ME->F_WRK02.
          endif.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.
        else.
          move ME->F_WERKS to ME->F_WRK02.
        endif.

***--------------------------------------------------------------------------------------
***     Get Configuration Info
        call function 'MARC_SINGLE_READ'
          exporting
            MATNR  = ME->F_MATNR
            WERKS  = ME->F_WRK02
          importing
            WMARC  = LS_MARC
          exceptions
            others = 0.

        if LS_MARC-CUOBJ is not initial.
          move LS_MARC-CUOBJ to ME->F_CUOBJ.
          move LS_MARC-STDPD to ME->S_CMPRK-CMATN.
        endif.

***--------------------------------------------------------------------------------------
***     Load by Cross Classification Mapping
        ME->LOAD_BY_CCM( ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_INSTANCE_FPROC.

    data:  LS_INSTANCE type YS_INSTANCE.


***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
*** Wait for OPSDVCPP-139 for improved handling
    break WAIT_FOR_OPSDVCPP-139.

    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
ENHANCEMENT-SECTION GET_INSTANCE_FPROC SPOTS ZVCXI_FFSS_ES_CUST_FPROC .
         create object RR_INSTANCE
           exporting
             IF_MATNR = IF_MATNR
             IF_WERKS = IF_WERKS
             IF_DATE  = IF_DATE.
END-ENHANCEMENT-SECTION.

          RR_INSTANCE->LOAD_BY_MM( ).
        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC,
          LS_MAPVN type  /VCXI/CKXC_S_MAPVN.
    data: LT_SETVA type  /VCXI/CKXC_TT_SETVA.

*** Get AOO Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_AOO
                                             IF_OBJNUM = LF_OBJNUM
                                             IF_MCTXT  = 'SVC' ).

    loop at LT_SETVA into LS_SETVA.
      clear: LS_MAPVC,
             LS_MAPVN.

      case LS_SETVA-MAPID.
***     Solid Content
        when C_MAPID_LOTMI.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_LOTMI-LOTMI.
            move LS_MAPVN-ATFLV_UOM to ME->S_LOTMI-LOTMI_UOM.
          endif.

      endcase.
    endloop.

  endmethod.
  method LOAD_BY_MM.

    data: LR_MMEXT type ref to ZCL_VCXI_FFE_MM_MMEXT.


*** Load MM Extension
    LR_MMEXT ?= ZCL_VCXI_XCE_MM_MMEXT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                                                                                                        IF_WERKS = ME->F_WRK02
                                                                                                                        IF_CNTXT = ZCL_VCXI_FFE_MM_MMEXT=>C_CNTXT_FF ) ).
    check LR_MMEXT is bound.

    ME->S_FIWID = LR_MMEXT->S_MMEXT-S_FIWID.
    ME->S_PFWID = LR_MMEXT->S_MMEXT-S_FIWID.
    ME->S_RELEN = LR_MMEXT->S_MMEXT-S_RELEN.
    ME->S_FITIN = LR_MMEXT->S_MMEXT-S_FITIN.
    ME->S_FITEX = LR_MMEXT->S_MMEXT-S_FITEX.
    ME->S_FITHI = LR_MMEXT->S_MMEXT-S_FITEX.
    ME->S_PTRQW = LR_MMEXT->S_MMEXT-S_TREQW.
    ME->S_SURWT = LR_MMEXT->S_MMEXT-S_SURWT.
    ME->F_TFILM = LR_MMEXT->S_MMEXT-TFILM.
    ME->F_FISTX = LR_MMEXT->S_MMEXT-FISTX.
    ME->F_FISTY = LR_MMEXT->S_MMEXT-FISTY.
    ME->S_GULEF = LR_MMEXT->S_MMEXT-S_GULEF.
    ME->S_GURIG = LR_MMEXT->S_MMEXT-S_GURIG.
    ME->F_TFOLD = LR_MMEXT->S_MMEXT-TFOLD.
    ME->S_RDITA = LR_MMEXT->S_MMEXT-S_RDITA.

  endmethod.
