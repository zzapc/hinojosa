
class ZCL_VCXI_P0SS_GRID_MARK definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  methods CHANGE_STYLE_MARK
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .

  methods GET_DISABLED_ADD
    redefinition .
  methods GET_DISABLED_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_MARK definition
class ZCL_VCXI_P0SS_GRID_MARK implementation.
method CHANGE_STYLE_MARK.

  free CT_STYL.

*** Set Marking Type = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TMARK'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Marking Type Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TMARK_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Marking Position = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MARKP'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Marking Position Descripton = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MARKP_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Number Print = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NUMPR'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Assigned Color Number = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ACONO'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Coverage = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Coverage Unit = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_P0SS_S_MARK_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK.

endmethod.
method GET_DISABLED_ADD.

  data: LF_PRTYP    type        ZVCXI_P0S_PRTYP.
  data: LS_ATTRI    type        /VCXI/VKS_S_ATTRI.
  data: LR_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT.

  RF_DISABLED = SUPER->GET_DISABLED_ADD( ).

  check RF_DISABLED eq ABAP_FALSE.

*** Check if Marking is "Calculated"
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_TRUE.
        move ABAP_TRUE to RF_DISABLED.
      endif.
    catch /VCXI/CX_CKX.
      clear: RF_DISABLED.
  endtry.

*** Check additionally Printing Customizing
  check RF_DISABLED eq ABAP_FALSE.

  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_PRINT.
  endtry.

*** Check if Marking Type is Valid for Print Type
  check LR_PR_PRINT is bound.

  LF_PRTYP = LR_PR_PRINT->GET_PRTYP( ).

*** Check by Customizing
  check ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_TMARK_BY_PRTYP( IF_PRTYP = LF_PRTYP ) eq ABAP_FALSE.

  move ABAP_TRUE to RF_DISABLED.

endmethod.
method GET_DISABLED_DEL.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

  RF_DISABLED = SUPER->GET_DISABLED_DEL( ).

  check RF_DISABLED eq ABAP_FALSE.

*** Check if Marking is "Calculated"
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_TRUE.
        move ABAP_TRUE to RF_DISABLED.
      endif.
    catch /VCXI/CX_CKX.
      clear: RF_DISABLED.
  endtry.

endmethod.
method GET_FIELDCAT.

  data:          LS_ATTRI        type          /VCXI/VKS_S_ATTRI.
  data:          LF_LOCKED       type          /VCXI/CKX_LOCKED,
                 LF_INUSE        type          /VCXI/VKSR_INUSE,
                 LF_EDIT         type          ABAP_BOOL.
  field-symbols: <T_DATA>        type standard table,
                 <S_FCAT>        type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Read Attribute Calculated
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_FALSE.
        move ABAP_TRUE to LF_EDIT.
      endif.
    catch /VCXI/CX_CKX.
      move ABAP_TRUE to LF_EDIT.
  endtry.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
        move ABAP_TRUE  to <S_FCAT>-TECH.
        move 0          to <S_FCAT>-COL_POS.

      when 'TMARK' or 'MARKP' or 'NUMPR' or 'ACONO' or 'COVRG'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move LF_EDIT  to <S_FCAT>-EDIT.
        endif.

      when 'TMARK_DESCR'.
        move 'Marking Type Descr.'(001)       to <S_FCAT>-COLTEXT.

      when 'MARKP_DESCR'.
        move 'Marking Position Descr.'(002)   to <S_FCAT>-COLTEXT.

    endcase.
  endloop.
endmethod.
method GET_GRID_DATA.

  data:          LS_MARK_GRID         type          ZVCXI_P0SS_S_MARK_GRID,
                 LS_COVRG             type          ZVCXI_P0S_S_COVRG.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_MARK           type ref to   ZCL_VCXI_P0SS_PR_MARK.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Marking
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_MARK_GRID.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MARK.
        check LR_PR_MARK is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( )          to LS_MARK_GRID-POSID.
        move LR_GATE->F_GATKY               to LS_MARK_GRID-GATKY.
        move LR_GATE                        to LS_MARK_GRID-R_GATE.

        LR_PR_MARK->GET_TMARK( importing EF_TMARK = LS_MARK_GRID-TMARK ).
        move LR_PR_MARK->GET_TMARK_DESCR( ) to LS_MARK_GRID-TMARK_DESCR.

        LR_PR_MARK->GET_MARKP( importing EF_MARKP = LS_MARK_GRID-MARKP ).
        move LR_PR_MARK->GET_MARKP_DESCR( ) to LS_MARK_GRID-MARKP_DESCR.

        LR_PR_MARK->GET_NUMPR( importing EF_NUMPR = LS_MARK_GRID-NUMPR ).

        LR_PR_MARK->GET_ACONO( importing EF_ACONO = LS_MARK_GRID-ACONO ).

        LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
        move-corresponding LS_COVRG         to LS_MARK_GRID.

***------------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_MARK( changing CT_STYL = LS_MARK_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_MARK_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_MARK_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_ROW_ID            type          I.
  data:          LS_MARK_GRID         type          ZVCXI_P0SS_S_MARK_GRID,
                 LS_MODI              type          LVC_S_MODI,
                 LS_COVRG             type          ZVCXI_P0S_S_COVRG.
  data:          LR_PR_MARK           type ref to   ZCL_VCXI_P0SS_PR_MARK,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        move SY-TABIX to LF_ROW_ID.
        read table ET_GOOD_CELLS with key ROW_ID = LF_ROW_ID
                                 transporting no fields.
        check SY-SUBRC eq 0.

        try.
            move-corresponding <S_DATA> to LS_MARK_GRID.
            check LS_MARK_GRID-R_GATE is bound.

            move LS_MARK_GRID-R_GATE->R_CLSPR ?to LR_PR_MARK.
            check LR_PR_MARK is bound.

***         Set Values to PR Class
            loop at ET_GOOD_CELLS into LS_MODI where ROW_ID = LF_ROW_ID.
              case LS_MODI-FIELDNAME.
                when 'TMARK'.
                  LR_PR_MARK->SET_TMARK( IF_TMARK = LS_MARK_GRID-TMARK
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'MARKP'.
                  LR_PR_MARK->SET_MARKP( IF_MARKP = LS_MARK_GRID-MARKP
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'NUMPR'.
                  LR_PR_MARK->SET_NUMPR( IF_NUMPR = LS_MARK_GRID-NUMPR
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'ACONO'.
                  LR_PR_MARK->SET_ACONO( IF_ACONO = LS_MARK_GRID-ACONO
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'COVRG'.
                  move-corresponding LS_MARK_GRID to LS_COVRG.
                  LR_PR_MARK->SET_COVRG( IS_COVRG = LS_COVRG
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
