class LCL_FISTRUCT_USROBJ definition.
  public section.
    data: F_NODEKEY type TM_NODEKEY,
          F_TFSDA   type ZVCXI_FFSS_TFSDA,
          F_FLDNAME type NAME_KOMP.
    methods:
      CONSTRUCTOR importing IF_TFSDA   type ZVCXI_FFSS_TFSDA optional
                            IF_FLDNAME type NAME_KOMP optional.
endclass.
class LCL_FISTRUCT_USROBJ implementation.
  method CONSTRUCTOR.
    move: IF_TFSDA    to ME->F_TFSDA,
          IF_FLDNAME  to ME->F_FLDNAME.
  endmethod.
endclass.

class ZCL_VCXI_FFSS_POPUP_FISTRUCT definition
  public
  create protected .

public section.

  constants C_BTYPE_BUTTON type TB_BTYPE value 0 ##NO_TEXT.
  constants C_BTYPE_MENU type TB_BTYPE value 2 ##NO_TEXT.
  constants C_BTYPE_MENU_BTN type TB_BTYPE value 1 ##NO_TEXT.
  constants C_BTYPE_MENU_ENTRY type TB_BTYPE value 6 ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value 3 ##NO_TEXT.
  constants C_FCODE_ADD_FILM type UI_FUNC value 'ADD_FILM' ##NO_TEXT.
  constants C_FCODE_ADD_PRINT type UI_FUNC value 'ADD_PRINT' ##NO_TEXT.
  constants C_FCODE_ADD_GLUE type UI_FUNC value 'ADD_GLUE' ##NO_TEXT.
  constants C_FCODE_ADD_LAYER type UI_FUNC value 'ADD_LAYER' ##NO_TEXT.
  constants C_FCODE_COL_ALL type UI_FUNC value 'COL_ALL' ##NO_TEXT.
  constants C_FCODE_EXP_ALL type UI_FUNC value 'EXP_ALL' ##NO_TEXT.
  constants C_FCODE_MOVEDOWN type UI_FUNC value 'MOVE_DOWN' ##NO_TEXT.
  constants C_FCODE_MOVEUP type UI_FUNC value 'MOVE_UP' ##NO_TEXT.
  constants C_FCODE_NODEDEL type UI_FUNC value 'NODE_DEL' ##NO_TEXT.
  constants C_FLAVOR_LAY2FILM_MOVE type CNDD_FLAVOR value 'LAY2FILM_MOVE' ##NO_TEXT.
  constants C_FLAVOR_ROOT_MOVE type CNDD_FLAVOR value 'ROOT_MOVE' ##NO_TEXT.
  constants C_SIDE_A type ZVCXI_FFS_SIDE value 'A' ##NO_TEXT.
  constants C_SIDE_B type ZVCXI_FFS_SIDE value 'B' ##NO_TEXT.
  constants C_TFSDA_FILM type ZVCXI_FFSS_TFSDA value 'FILM' ##NO_TEXT.
  constants C_TFSDA_PRINT type ZVCXI_FFSS_TFSDA value 'PRINT' ##NO_TEXT.
  constants C_TFSDA_GLUE type ZVCXI_FFSS_TFSDA value 'GLUE' ##NO_TEXT.
  constants C_TFSDA_LAYER type ZVCXI_FFSS_TFSDA value 'LAYER' ##NO_TEXT.
  constants C_TFSDA_SIDE type ZVCXI_FFSS_TFSDA value 'SIDE' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_DEFAULT type SYUCOMM value '/_' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_DRAGDROP_FILM type INT2 read-only .
  data F_DRAGDROP_LAYER type INT2 read-only .
  data F_DRAGDROP_ROOT type INT2 read-only .
  data F_EXP_NODE type ABAP_BOOL read-only .
  data F_REFRESH_REQ type ABAP_BOOL read-only .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR read-only .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL read-only .
  data T_EXP_NODE type TREEMNOTAB read-only .
  data T_ITEM type TREEMCITAC read-only .
  data T_NODE type TREEMCNOTA read-only .
  constants C_KOMP_LRCOL type NAME_KOMP value 'LRCOL' ##NO_TEXT.
  constants C_KOMP_TLAYR type NAME_KOMP value 'TLAYR' ##NO_TEXT.
  constants C_KOMP_TTREA type NAME_KOMP value 'TTREA' ##NO_TEXT.
  constants C_KOMP_SUPRO type NAME_KOMP value 'SUPRO' ##NO_TEXT.
  constants C_KOMP_TGLUE type NAME_KOMP value 'TGLUE' ##NO_TEXT.
  constants C_KOMP_TINK type NAME_KOMP value 'TINK' ##NO_TEXT.

  class-methods CLASS_CONSTRUCTOR .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TOOLBAR
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
      !IF_LOCKED type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_TOOLBAR_BUTTON,
      FCODE       type UI_FUNC,
      ICON        type ICON_D,
      IS_DISABLED type FLAG,
      BUTN_TYPE   type TB_BTYPE,
      TEXT        type TEXT40,
      QUICKINFO   type ICONQUICK,
      IS_CHECKED  type FLAG,
    end   of YS_TOOLBAR_BUTTON .
  types:
    YT_TOOLBAR_BUTTON type standard table of YS_TOOLBAR_BUTTON with default key .
  types:
    YT_TC110T type standard table of ZVCXI_FRS_TC110T .
  types:
    YT_TC120T type standard table of ZVCXI_FRS_TC120T .
  types:
    YT_TC130T type standard table of ZVCXI_FFS_TC130T .
  types:
    YT_TC230T type standard table of ZVCXI_FFS_TC230T .
  types:
    YT_TC310T type standard table of ZVCXI_FFS_TC310T .
  types:
    YT_TC150T type standard table of ZVCXI_FFS_TC150T .

  constants C_FLAVOR_LAYER_MOVE type CNDD_FLAVOR value 'LAYER_MOVE' ##NO_TEXT.
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data R_BL_FISTRUCT_NEW type ref to ZCL_VCXI_FFSS_BL_FISTRUCT .
  data R_BL_FISTRUCT_ORG type ref to ZCL_VCXI_FFSS_BL_FISTRUCT .
  data R_CONTAINER_TOOLBAR type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_TREE type ref to CL_GUI_CUSTOM_CONTAINER .
  data T_TOOLBAR_BUTTON type YT_TOOLBAR_BUTTON .
  data F_NODEKEY type NUMC4 .
  class-data T_TC110T type YT_TC110T .
  class-data T_TC120T type YT_TC120T .
  class-data T_TC130T type YT_TC130T .
  class-data T_TC230T type YT_TC230T .
  class-data T_TC310T type YT_TC310T .
  class-data T_TC150T type YT_TC150T .

  methods CONSTRUCTOR
    importing
      !IR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods EDIT_ITEM
    importing
      !IF_NODEKEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_BY_ENTRY
    importing
      !IF_FISTRUCT type ANY
      !IF_TFSDA type ZVCXI_FFSS_TFSDA
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_BY_FILM
    importing
      !IS_FSFILM type ZVCXI_FFSS_S_FSFILM
      !IF_RELATKEY type TM_NODEKEY optional
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_BY_GLUE
    importing
      !IS_FSGLUE type ZVCXI_FFSS_S_FSGLUE
      !IF_RELATKEY type TM_NODEKEY optional
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_BY_PRINT
    importing
      !IF_RELATKEY type TM_NODEKEY optional
      !IS_FSPRINT type ZVCXI_FFSS_S_FSPRINT
    changing
      !CT_ITEM type TREEMCITAC
      !CT_NODE type TREEMCNOTA
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_LAYER
    importing
      !IF_RELATKEY type TM_NODEKEY
      !IS_FSFLAYER type ZVCXI_FFSS_S_FSFLAYER
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_SIDE
    importing
      !IF_RELATKEY type TM_NODEKEY optional
      !IS_FSFSIDE type ZVCXI_FFSS_S_FSFSIDE
      !IF_ITEMTXT type TM_ITEMTXT
      !IF_SIDE type ZVCXI_FFS_SIDE
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_BY_DATA
    importing
      !IF_DATA type ANY
    returning
      value(RF_DESCR) type TM_ITEMTXT
    raising
      /VCXI/CX_CKX .
  methods GET_NODEKEY_NEXT
    returning
      value(RF_NODEKEY) type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods GET_SEL_NODE_INDEX
    importing
      !IF_NODEKEY type TM_NODEKEY
    exporting
      !EF_INDEX_ROOT type I
      !EF_INDEX_SUB_SEL type I
      !EF_LIST_LENGTH type I
      !EF_TFSDA type ZVCXI_FFSS_TFSDA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_NODE_CONTEXT_REQ
    for event NODE_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !MENU .
  methods HANDLE_NODE_CONTEXT_SEL
    for event NODE_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_ADD_FILM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_GLUE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_LAYER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_PRINT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL .
  methods HANDLE_UC_COL_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DRAG
    for event DRAG of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !DRAG_DROP_OBJECT .
  methods HANDLE_UC_DROP
    for event DROP of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !DRAG_DROP_OBJECT .
  methods HANDLE_UC_EXP_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MOVEDOWN
    importing
      !IF_NODEKEY type TM_NODEKEY optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MOVEUP
    importing
      !IF_NODEKEY type TM_NODEKEY optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_NODEDEL
    importing
      !IF_NODEKEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOOLBAR
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods INIT_CONTAINER_TOOLBAR
    importing
      !IF_CONTAINER_NAME type C default '0100CC_TOOLBAR'
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_TREE
    importing
      !IF_CONTAINER_NAME type C default '0100CC_TREE'
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR_DEF .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS .
  methods CREATE_USROBJ
    importing
      !IF_FLDNAME type NAME_KOMP optional
      !IF_TFSDA type ZVCXI_FFSS_TFSDA optional
    returning
      value(RR_USEROBJECT) type TM_OBJECT .
private section.

  methods BUILD_FSFILM
    importing
      !IF_NODEKEY type TM_NODEKEY
    returning
      value(RS_FSFILM) type ZVCXI_FFSS_S_FSFILM
    raising
      /VCXI/CX_CKX .
  methods BUILD_FSGLUE
    importing
      !IF_NODEKEY type TM_NODEKEY
    returning
      value(RS_FSGLUE) type ZVCXI_FFSS_S_FSGLUE
    raising
      /VCXI/CX_CKX .
  methods BUILD_FSPRINT
    importing
      !IF_NODEKEY type TM_NODEKEY
    returning
      value(RS_FSPRINT) type ZVCXI_FFSS_S_FSPRINT
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_FFSS_POPUP_FISTRUCT definition
class ZCL_VCXI_FFSS_POPUP_FISTRUCT implementation.
  method BUILD_FSFILM.

    data: LF_SIDE_IDX         type        I.
    data: LS_NODE_SUB   type        TREEMCNODT,
          LS_NODE       type        TREEMCNODT,
          LS_ITEM       type        TREEMCITEN,
          LS_ITEM_VALUE type        TREEMCITEN.
    data: LR_USEROBJECT    type ref to LCL_FISTRUCT_USROBJ,
          LR_CX_CAST_ERROR type ref to CX_SY_MOVE_CAST_ERROR.

    field-symbols: <S_LAYER> type   ZVCXI_FFSS_S_FSFLAYER,
                   <S_SIDE>  type   ZVCXI_FFSS_S_FSFSIDE.

*** Get child nodes for given node
    loop at ME->T_NODE into LS_NODE_SUB where RELATKEY eq IF_NODEKEY.

***   Get user object
      try.
          move LS_NODE_SUB-USEROBJECT ?to LR_USEROBJECT.
        catch CX_SY_MOVE_CAST_ERROR into LR_CX_CAST_ERROR.
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CAST_ERROR ).
      endtry.

      check LR_USEROBJECT is bound.

***   Get sub node item info
      read table ME->T_ITEM with key NODE_KEY = LS_NODE_SUB-NODE_KEY
                                     ITEM_NAME = 'ID' transporting no fields.

      check SY-SUBRC = 0.
      case LR_USEROBJECT->F_TFSDA.

        when C_TFSDA_SIDE.
          add 1 to LF_SIDE_IDX.
          case LF_SIDE_IDX.
            when 1.
              assign RS_FSFILM-S_SIDEA to <S_SIDE>.
            when 2.
              assign RS_FSFILM-S_SIDEB to <S_SIDE>.
            when others.
              unassign <S_SIDE>.
          endcase.
          check <S_SIDE> is assigned.

***       Go through sub nodes of side
          loop at ME->T_NODE into LS_NODE
            where RELATKEY eq LS_NODE_SUB-NODE_KEY.

***         Get all Items for each sub node
            loop at ME->T_ITEM into LS_ITEM
              where NODE_KEY  eq LS_NODE-NODE_KEY
                and ITEM_NAME eq 'ID'.

***           Get item value entry
              read table ME->T_ITEM into LS_ITEM_VALUE with key NODE_KEY  = LS_NODE-NODE_KEY
                                                                ITEM_NAME = 'VALUE'.
              check SY-SUBRC = 0.
              case LS_ITEM-TEXT.
                when ME->GET_DESCR_BY_DATA( IF_DATA = <S_SIDE>-SUPRO ).
                  move LS_ITEM_VALUE-TEXT to <S_SIDE>-SUPRO.

                when ME->GET_DESCR_BY_DATA( IF_DATA = <S_SIDE>-TTREA ).
                  move LS_ITEM_VALUE-TEXT to <S_SIDE>-TTREA.

              endcase.

            endloop.
          endloop.

        when C_TFSDA_LAYER.

          append initial line to RS_FSFILM-T_LAYER assigning <S_LAYER>.

***       Go through sub nodes of layer
          loop at ME->T_NODE into LS_NODE
            where RELATKEY eq LS_NODE_SUB-NODE_KEY.

***         Get all items for each sub node
            loop at ME->T_ITEM into LS_ITEM
              where NODE_KEY  eq LS_NODE-NODE_KEY
                and ITEM_NAME eq 'ID'.

***           Get item value entry
              read table ME->T_ITEM into LS_ITEM_VALUE with key NODE_KEY  = LS_NODE-NODE_KEY
                                                                ITEM_NAME = 'VALUE'.
              check SY-SUBRC = 0.
              case LS_ITEM-TEXT.
                when ME->GET_DESCR_BY_DATA( IF_DATA = <S_LAYER>-TLAYR ).
                  move LS_ITEM_VALUE-TEXT to <S_LAYER>-TLAYR.

                when ME->GET_DESCR_BY_DATA( IF_DATA = <S_LAYER>-LRCOL ).
                  move LS_ITEM_VALUE-TEXT to <S_LAYER>-LRCOL.
              endcase.

            endloop.
          endloop.

      endcase.
    endloop.

  endmethod.
  method BUILD_FSGLUE.

    data: LS_NODE           type        TREEMCNODT,
          LS_ITEM           type        TREEMCITEN,
          LS_ITEM_VALUE     type        TREEMCITEN.

*** Get child nodes for given node
    loop at ME->T_NODE into LS_NODE
      where RELATKEY eq IF_NODEKEY.

***   Get all items for each sub node
      loop at ME->T_ITEM into LS_ITEM
        where NODE_KEY eq LS_NODE-NODE_KEY.

***     Get item value entry
        read table ME->T_ITEM into LS_ITEM_VALUE with key NODE_KEY  = LS_NODE-NODE_KEY
                                                          ITEM_NAME = 'VALUE'.
        case LS_ITEM-TEXT.

          when ME->GET_DESCR_BY_DATA( IF_DATA = RS_FSGLUE-TGLUE ).
            move LS_ITEM_VALUE-TEXT to RS_FSGLUE-TGLUE.

        endcase.
      endloop.
    endloop.

  endmethod.
  method BUILD_FSPRINT.

    data: LF_TINK       type        ZVCXI_FFS_TINK.
    data: LS_NODE       type        TREEMCNODT,
          LS_ITEM       type        TREEMCITEN,
          LS_ITEM_VALUE type        TREEMCITEN.
    data: LT_TINK       type        ZVCXI_FFS_TT_TINK.

*** Get Child nodes for given node
    loop at ME->T_NODE into LS_NODE where RELATKEY eq IF_NODEKEY.

***   Get all Items for each sub node
      loop at ME->T_ITEM into LS_ITEM
        where NODE_KEY eq LS_NODE-NODE_KEY.

***     Get Item Value Entry
        read table ME->T_ITEM into LS_ITEM_VALUE with key NODE_KEY  = LS_NODE-NODE_KEY
                                                          ITEM_NAME = 'VALUE'.
        case LS_ITEM-TEXT.

          when ME->GET_DESCR_BY_DATA( IF_DATA = RS_FSPRINT-NOCOL ).
            move LS_ITEM_VALUE-TEXT to RS_FSPRINT-NOCOL.

          when ME->GET_DESCR_BY_DATA( IF_DATA = LF_TINK ).
            split LS_ITEM_VALUE-TEXT at ',' into table LT_TINK.
            append lines of LT_TINK to RS_FSPRINT-T_TINK.

          when ME->GET_DESCR_BY_DATA( IF_DATA = RS_FSPRINT-TPRIN ).
            move LS_ITEM_VALUE-TEXT to RS_FSPRINT-TPRIN.

        endcase.

      endloop.
    endloop.

  endmethod.
  method CLASS_CONSTRUCTOR.

    select * from ZVCXI_FRS_TC110T
      into table T_TC110T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

    select * from ZVCXI_FRS_TC120T
      into table T_TC120T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

    select * from ZVCXI_FFS_TC130T
      into table T_TC130T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

    select * from ZVCXI_FFS_TC230T
      into table T_TC230T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

    select * from ZVCXI_FFS_TC310T
      into table T_TC310T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

    select * from ZVCXI_FFS_TC150T
      into table T_TC150T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

  endmethod.
  method CONSTRUCTOR.

    data: LF_FISTX type ZVCXI_FFS_FISTX,
          LF_I     type I.
    data: LR_DRAGDROP_ROOT  type ref to CL_DRAGDROP,
          LR_DRAGDROP_LAYER type ref to CL_DRAGDROP,
          LR_DRAGDROP_FILM  type ref to CL_DRAGDROP.

    move: IF_LOCKED to ME->F_LOCKED.

*** Request Toolbar Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Hold Original Film Structure and create a copy for editing
    move IR_BL_FISTRUCT                      to ME->R_BL_FISTRUCT_ORG.
    ME->R_BL_FISTRUCT_ORG->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    move ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( exporting IF_FISTX = LF_FISTX ) to ME->R_BL_FISTRUCT_NEW.

*** Create DragDrop for Root Elements
    if ME->F_LOCKED eq ABAP_TRUE.
      create object LR_DRAGDROP_ROOT.
      LR_DRAGDROP_ROOT->ADD( FLAVOR     = C_FLAVOR_ROOT_MOVE
                             DRAGSRC    = 'X'
                             DROPTARGET = 'X'
                             EFFECT     = CL_DRAGDROP=>MOVE ).
      LR_DRAGDROP_ROOT->GET_HANDLE( importing HANDLE = LF_I ).
      move LF_I to ME->F_DRAGDROP_ROOT.
    endif.

*** Create DragDrop for Layer Elements
    if ME->F_LOCKED eq ABAP_TRUE.
      create object LR_DRAGDROP_LAYER.
      LR_DRAGDROP_LAYER->ADD( FLAVOR     = C_FLAVOR_LAYER_MOVE
                              DRAGSRC     = 'X'
                              DROPTARGET  = 'X'
                              EFFECT      = CL_DRAGDROP=>MOVE ).
      LR_DRAGDROP_LAYER->ADD( FLAVOR     = ME->C_FLAVOR_LAY2FILM_MOVE
                              DRAGSRC     = 'X'
                              DROPTARGET  = ''
                              EFFECT      = CL_DRAGDROP=>MOVE ).
      LR_DRAGDROP_LAYER->GET_HANDLE( importing HANDLE = LF_I ).
      move LF_I to ME->F_DRAGDROP_LAYER.
    endif.

*** Create DragDrop for Film Elements
    if ME->F_LOCKED eq ABAP_TRUE.
      create object LR_DRAGDROP_FILM.
      LR_DRAGDROP_FILM->ADD( FLAVOR     = C_FLAVOR_ROOT_MOVE
                             DRAGSRC    = 'X'
                             DROPTARGET = 'X'
                             EFFECT     = CL_DRAGDROP=>MOVE ).
      LR_DRAGDROP_FILM->ADD( FLAVOR     = C_FLAVOR_LAY2FILM_MOVE
                             DRAGSRC     = ''
                             DROPTARGET  = 'X'
                             EFFECT      = CL_DRAGDROP=>MOVE ).
      LR_DRAGDROP_FILM->GET_HANDLE( importing HANDLE = LF_I ).
      move LF_I to ME->F_DRAGDROP_FILM.
    endif.

  endmethod.
  method CREATE_USROBJ.

*** Create User Object
    create object RR_USEROBJECT
      type LCL_FISTRUCT_USROBJ
      exporting
        IF_FLDNAME = IF_FLDNAME
        IF_TFSDA   = IF_TFSDA.

  endmethod.
  method DO_FREE.

***--------------------------------------------------------------------------------------
*** Free Tree
    if ME->R_TREE is bound.
      clear ME->R_TREE.
    endif.

***--------------------------------------------------------------------------------------
*** Free Tree Container
    if ME->R_CONTAINER_TREE is bound.
      ME->R_CONTAINER_TREE->FREE( exceptions CNTL_ERROR        = 1
                                             CNTL_SYSTEM_ERROR = 2
                                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER_TREE.
    endif.

***--------------------------------------------------------------------------------------
*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      clear ME->R_TOOLBAR.
    endif.

***--------------------------------------------------------------------------------------
*** Free Toolbar Container
    if ME->R_CONTAINER_TOOLBAR is bound.
      ME->R_CONTAINER_TOOLBAR->FREE( exceptions CNTL_ERROR        = 1
                                                CNTL_SYSTEM_ERROR = 2
                                                others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      clear ME->R_CONTAINER_TOOLBAR.
      move ABAP_TRUE to ME->F_REFRESH_REQ.
    endif.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Set PF-Status
    ME->SET_PF_STATUS( ).

***--------------------------------------------------------------------------------------
*** Refresh Toolbar
    ME->REFRESH_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Refresh Toolbar
    ME->REFRESH_TREE( ).

  endmethod.
  method DO_USER_COMMAND.

    case IF_UCOMM.

      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).

      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).

    endcase.

  endmethod.
  method EDIT_ITEM.

    data: LF_INDEX   type        SYINDEX,
          LF_NODEKEY type        TM_NODEKEY,
          LF_TFSDA   type        ZVCXI_FFSS_TFSDA.
    data: LS_NODE        type        TREEMCNODT,
          LS_NODE_PARENT type        TREEMCNODT,
          LS_ITEM        type        TREEMCITEN,
          LS_FSREF       type        ZCL_VCXI_FFSS_BL_FISTRUCT=>YS_FSREF,
          LS_FSFILM      type        ZVCXI_FFSS_S_FSFILM,
          LS_FSGLUE      type        ZVCXI_FFSS_S_FSGLUE,
          LS_FSPRINT     type        ZVCXI_FFSS_S_FSPRINT.
    data: LT_NODES  type        TREEMNOTAB,
          LT_VALUES type        ZCL_VCXI_FFSS_POPUP_FSEDIT=>YT_DREF.
    data: LR_USEROBJECT    type ref to LCL_FISTRUCT_USROBJ,
          LR_DATA          type ref to DATA,
          LR_DVAL          type ref to DATA,
          LR_CX_CAST_ERROR type ref to CX_SY_MOVE_CAST_ERROR.
    field-symbols: <S_ANY>     type        ANY,
                   <S_FSFILM>  type        ZVCXI_FFSS_S_FSFILM,
                   <S_FSGLUE>  type        ZVCXI_FFSS_S_FSGLUE,
                   <S_FSPRINT> type        ZVCXI_FFSS_S_FSPRINT,
                   <S_DVAL>    type        ANY,
                   <S_VALUE>   type        ANY,
                   <S_ITEM>    type        TREEMCITEN.

*** Get Node and Userobject
    read table ME->T_NODE into LS_NODE with key NODE_KEY = IF_NODEKEY.
    check SY-SUBRC eq 0.
    try.
        move LS_NODE-USEROBJECT ?to LR_USEROBJECT.
      catch CX_SY_MOVE_CAST_ERROR into LR_CX_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CAST_ERROR ).
    endtry.

    check LR_USEROBJECT is bound.

*** Get Parent Node
    if LS_NODE-RELATKEY is not initial.
      move LS_NODE-RELATKEY to LS_NODE_PARENT-RELATKEY.

      while LS_NODE_PARENT-RELATKEY is not initial.
***   Get Parent Node if available
        read table ME->T_NODE into LS_NODE_PARENT with key NODE_KEY = LS_NODE_PARENT-RELATKEY.
      endwhile.
      move LS_NODE_PARENT-NODE_KEY to LF_NODEKEY.
    else.
      move IF_NODEKEY to LF_NODEKEY.
    endif.

*** Get all root nodes
    check ME->R_TREE is bound.
    ME->R_TREE->GET_ROOT_NODES( importing NODE_KEY_TABLE = LT_NODES ).

*** Find selected one to get index
    read table LT_NODES transporting no fields with key TABLE_LINE = LF_NODEKEY.
    move SY-TABIX to LF_INDEX.

*** Transfer the double-clicked value to the Edit-Popup
    insert initial line into table LT_VALUES assigning <S_VALUE>.
    create data LR_DVAL type STRING.
    assign LR_DVAL->* to <S_DVAL>.
    if <S_DVAL> is assigned.
      read table ME->T_ITEM into LS_ITEM with key NODE_KEY = IF_NODEKEY
                                                  ITEM_NAME = 'VALUE'.
      if SY-SUBRC is initial.
        move LS_ITEM-TEXT to <S_DVAL>.
      endif.
    endif.

    if <S_VALUE> is assigned.
      move LR_DVAL to <S_VALUE>.
    endif.

*** Call Edit-Popup to change value
    ZCL_VCXI_FFSS_POPUP_FSEDIT=>START( exporting IF_FLDNAME = LR_USEROBJECT->F_FLDNAME
                                       changing CT_VALUES   = LT_VALUES ).
*** If there is something to be changed
    check LINES( LT_VALUES ) is not initial.

*** Transfer back the values that come from the Edit-Popup
    read table LT_VALUES assigning <S_VALUE> index 1.
    if SY-SUBRC is initial.
      assign <S_VALUE>->* to <S_DVAL>.

      if <S_DVAL> is assigned.
        read table ME->T_ITEM assigning <S_ITEM> with key NODE_KEY = IF_NODEKEY
                                                          ITEM_NAME = 'VALUE'.
        if SY-SUBRC is initial.
          move <S_DVAL> to <S_ITEM>-TEXT.
        endif.
      endif.
    endif.

*** Get Entry from Film Structure
    ME->R_BL_FISTRUCT_NEW->GET_ENTRY( exporting IF_INDEX = LF_INDEX
                                      importing EF_TFSDA = LF_TFSDA
                                                ER_DATA  = LR_DATA ).
    assign LR_DATA->* to <S_ANY>.
    check <S_ANY> is assigned.


    case LF_TFSDA.
      when C_TFSDA_FILM.
**      Rebuild Film from Tree
        LS_FSFILM = ME->BUILD_FSFILM( IF_NODEKEY = LF_NODEKEY ).

***     Create own reference
        create data LS_FSREF-R_DATA type ZVCXI_FFSS_S_FSFILM.
        assign LS_FSREF-R_DATA->* to <S_FSFILM>.

***     Fill Reference
        move LS_FSFILM to <S_FSFILM>.

      when C_TFSDA_GLUE.
***     Rebuild Glue from Tree
        LS_FSGLUE = ME->BUILD_FSGLUE( IF_NODEKEY = LF_NODEKEY ).

***     Create own reference
        create data LS_FSREF-R_DATA type ZVCXI_FFSS_S_FSGLUE.
        assign LS_FSREF-R_DATA->* to <S_FSGLUE>.

***     Fill Reference
        move LS_FSGLUE to <S_FSGLUE>.

      when C_TFSDA_PRINT.
***     Rebuild Print from Tree
        LS_FSPRINT = ME->BUILD_FSPRINT( IF_NODEKEY = LF_NODEKEY ).

***     Create own reference
        create data LS_FSREF-R_DATA type ZVCXI_FFSS_S_FSPRINT.
        assign LS_FSREF-R_DATA->* to <S_FSPRINT>.

***     Fill Reference
        move LS_FSPRINT to <S_FSPRINT>.

    endcase.

*** Do Update Film Structure Entry
    if LF_TFSDA is not initial.

***   Update Data Type
      move LF_TFSDA to LS_FSREF-TFSDA.

***   Update Entry in Film Structure
      ME->R_BL_FISTRUCT_NEW->SET_ENTRY( exporting IF_INDEX = LF_INDEX
                                                  IS_FSREF = LS_FSREF ).
    endif.

    ME->DO_FREE( ).

  endmethod.
  method FILL_TREE.

    data: LF_TFSDA          type        ZVCXI_FFSS_TFSDA.
    data: LT_NODE           type        TREEMCNOTA,
          LT_ITEM           type        TREEMCITAC.
    data: LR_DATA           type ref to DATA.
    field-symbols: <S_ANY>  type ANY.

    free: ME->F_NODEKEY,
          ME->T_ITEM,
          ME->T_NODE.

***--------------------------------------------------------------------------------------
*** Process all Entries
    do.
      clear LF_TFSDA.
      ME->R_BL_FISTRUCT_NEW->GET_ENTRY( exporting IF_INDEX = SY-INDEX
                                        importing EF_TFSDA = LF_TFSDA
                                                  ER_DATA  = LR_DATA ).

      if LF_TFSDA is initial.
        exit.
      else.
        assign LR_DATA->* to <S_ANY>.
        check <S_ANY> is assigned.
        ME->FILL_TREE_BY_ENTRY( exporting IF_TFSDA       = LF_TFSDA
                                          IF_FISTRUCT    = <S_ANY>
                                changing  CT_NODE        = LT_NODE
                                          CT_ITEM        = LT_ITEM ).
      endif.
    enddo.

    move LT_NODE to ME->T_NODE.
    move LT_ITEM to ME->T_ITEM.

***--------------------------------------------------------------------------------------
*** Add Nodes and Items
    ME->R_TREE->ADD_NODES( exporting  NODE_TABLE          = LT_NODE
                           exceptions ERROR_IN_NODE_TABLE = 1
                                      others              = 2 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    ME->R_TREE->ADD_ITEMS( exporting  ITEM_TABLE          = LT_ITEM
                           exceptions NODE_NOT_FOUND      = 1
                                      ERROR_IN_ITEM_TABLE = 2
                                      others              = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Expand
    if ME->F_EXP_NODE eq ABAP_TRUE.
      ME->R_TREE->EXPAND_NODES( exporting NODE_KEY_TABLE = ME->T_EXP_NODE ).
    else.
      if F_LOCKED = ABAP_TRUE.
        ME->R_TREE->EXPAND_ROOT_NODES( exporting EXPAND_SUBTREE = ABAP_TRUE ).
      else.
        ME->R_TREE->EXPAND_ROOT_NODES( exporting EXPAND_SUBTREE = ABAP_FALSE ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Clear Expanded Nodes
    clear ME->T_EXP_NODE.
    clear ME->F_EXP_NODE.

  endmethod.
  method FILL_TREE_BY_ENTRY.

    data: LS_FSFILM  type ZVCXI_FFSS_S_FSFILM,
          LS_FSGLUE  type ZVCXI_FFSS_S_FSGLUE,
          LS_FSPRINT type ZVCXI_FFSS_S_FSPRINT.

    case IF_TFSDA.
      when ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_FILM.
        move-corresponding IF_FISTRUCT to LS_FSFILM.
        ME->FILL_TREE_BY_FILM( exporting IS_FSFILM     = LS_FSFILM
                               changing  CT_NODE       = CT_NODE
                                         CT_ITEM       = CT_ITEM ).

      when ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_GLUE.
        move-corresponding IF_FISTRUCT to LS_FSGLUE.
        ME->FILL_TREE_BY_GLUE( exporting IS_FSGLUE     = LS_FSGLUE
                               changing  CT_NODE       = CT_NODE
                                         CT_ITEM       = CT_ITEM ).

      when ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_PRINT.
        move-corresponding IF_FISTRUCT to LS_FSPRINT.
        ME->FILL_TREE_BY_PRINT( exporting IS_FSPRINT    = LS_FSPRINT
                                changing  CT_NODE       = CT_NODE
                                          CT_ITEM       = CT_ITEM ).
    endcase.

  endmethod.
  method FILL_TREE_BY_FILM.

    data: LF_NODEKEY type        TM_NODEKEY,
          LF_SIDE    type        TM_ITEMTXT.
    data: LS_FSFLAYER       type        ZVCXI_FFSS_S_FSFLAYER.
    field-symbols: <S_NODE> type        TREEMCNODT,
                   <S_ITEM> type        TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Film
    move ME->GET_NODEKEY_NEXT( )  to LF_NODEKEY.
    append initial line to CT_NODE assigning <S_NODE>.
    move LF_NODEKEY                                       to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-ISFOLDER.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_TFSDA = ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_FILM ).
    move ICON_PROTOCOL                                    to <S_NODE>-N_IMAGE.
    move ICON_PROTOCOL                                    to <S_NODE>-EXP_IMAGE.
    move ME->F_DRAGDROP_FILM                              to <S_NODE>-DRAGDROPID.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move text-FLM                                         to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.

    loop at IS_FSFILM-T_LAYER into LS_FSFLAYER.
      at new TLAYR.
        concatenate <S_ITEM>-TEXT LS_FSFLAYER-TLAYR into <S_ITEM>-TEXT separated by '-'.
      endat.
    endloop.
    shift <S_ITEM>-TEXT left deleting leading '-'.

***--------------------------------------------------------------------------------------
*** Side A
    move text-SDA to LF_SIDE.
    ME->FILL_TREE_SIDE( exporting IF_RELATKEY   = LF_NODEKEY
                                  IS_FSFSIDE    = IS_FSFILM-S_SIDEA
                                  IF_ITEMTXT    = LF_SIDE
                                  IF_SIDE       = C_SIDE_A
                        changing  CT_NODE       = CT_NODE
                                  CT_ITEM       = CT_ITEM ).

***--------------------------------------------------------------------------------------
*** Layer
    loop at IS_FSFILM-T_LAYER into LS_FSFLAYER.
      ME->FILL_TREE_LAYER( exporting IF_RELATKEY    = LF_NODEKEY
                                     IS_FSFLAYER    = LS_FSFLAYER
                           changing  CT_NODE        = CT_NODE
                                     CT_ITEM        = CT_ITEM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Side B
    move text-SDB to LF_SIDE.
    ME->FILL_TREE_SIDE( exporting IF_RELATKEY   = LF_NODEKEY
                                  IS_FSFSIDE    = IS_FSFILM-S_SIDEB
                                  IF_ITEMTXT    = LF_SIDE
                                  IF_SIDE       = C_SIDE_B
                        changing  CT_NODE       = CT_NODE
                                  CT_ITEM       = CT_ITEM ).

  endmethod.
  method FILL_TREE_BY_GLUE.

    data: LF_NODEKEY        type        TM_NODEKEY.
    data: LS_TC310T         type        ZVCXI_FFS_TC310T.
    field-symbols: <S_NODE> type        TREEMCNODT,
                   <S_ITEM> type        TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Load Customizing upfront
    read table T_TC310T into LS_TC310T with key TGLUE = IS_FSGLUE-TGLUE.

***--------------------------------------------------------------------------------------
*** Glue
    move ME->GET_NODEKEY_NEXT( )  to LF_NODEKEY.
    append initial line to CT_NODE assigning <S_NODE>.
    move LF_NODEKEY                                       to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-ISFOLDER.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_TFSDA = ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_GLUE ).
    move ICON_MATERIAL                                    to <S_NODE>-N_IMAGE.
    move ICON_MATERIAL                                    to <S_NODE>-EXP_IMAGE.
    move ME->F_DRAGDROP_ROOT                              to <S_NODE>-DRAGDROPID.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move text-GLU                                         to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSGLUE-TGLUE                                  to <S_ITEM>-TEXT.

***--------------------------------------------------------------------------------------
*** Glue Type
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = 'TGLUE' ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSGLUE-TGLUE ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSGLUE-TGLUE                                  to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LS_TC310T-DESCR                                  to <S_ITEM>-TEXT.

  endmethod.
  method FILL_TREE_BY_PRINT.

    data: LF_NODEKEY type        TM_NODEKEY,
          LF_TINK    type        ZVCXI_FFS_TINK,
          LF_DESCR   type        TM_ITEMTXT.
    data: LS_TC230T  type        ZVCXI_FFS_TC230T.
    field-symbols: <S_NODE> type        TREEMCNODT,
                   <S_ITEM> type        TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Print
    move ME->GET_NODEKEY_NEXT( )  to LF_NODEKEY.
    append initial line to CT_NODE assigning <S_NODE>.
    move LF_NODEKEY                                       to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-ISFOLDER.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_TFSDA = ZCL_VCXI_FFSS_BL_FISTRUCT=>C_TFSDA_PRINT ).
    move ICON_PRINT                                       to <S_NODE>-N_IMAGE.
    move ICON_PRINT                                       to <S_NODE>-EXP_IMAGE.
    move ME->F_DRAGDROP_ROOT                              to <S_NODE>-DRAGDROPID.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move text-PRT                                         to <S_ITEM>-TEXT.

***--------------------------------------------------------------------------------------
*** Print Type
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = 'TPRIN' ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSPRINT-TPRIN ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSPRINT-TPRIN                                 to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    select single DESCR
           into <S_ITEM>-TEXT
           from ZVCXI_FFS_TC210T
          where TPRIN eq IS_FSPRINT-TPRIN
            and LANGU eq SY-LANGU.

***--------------------------------------------------------------------------------------
*** Number of Colors
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = 'NOCOL' ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSPRINT-NOCOL ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSPRINT-NOCOL                                 to <S_ITEM>-TEXT.

***--------------------------------------------------------------------------------------
*** Ink Type
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = 'TINK' ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = LF_TINK ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.

    loop at IS_FSPRINT-T_TINK into LF_TINK.
      read table T_TC230T into LS_TC230T with key TINK = LF_TINK.

      if <S_ITEM>-TEXT is initial.
        move: LF_TINK to <S_ITEM>-TEXT,
              LS_TC230T-DESCR to LF_DESCR.
      else.
        concatenate <S_ITEM>-TEXT LF_TINK into <S_ITEM>-TEXT separated by ','.
        concatenate LF_DESCR LS_TC230T-DESCR into LF_DESCR separated by ','.
      endif.
    endloop.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LF_DESCR                                         to <S_ITEM>-TEXT.

  endmethod.
  method FILL_TREE_LAYER.

    data: LF_NODEKEY type        TM_NODEKEY,
          LS_TC110T  type        ZVCXI_FRS_TC110T,
          LS_TC120T  type        ZVCXI_FRS_TC120T.
    field-symbols: <S_NODE> type        TREEMCNODT,
                   <S_ITEM> type        TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Load Customizing upfront
    read table T_TC110T into LS_TC110T with key TLAYR = IS_FSFLAYER-TLAYR.
    read table T_TC120T into LS_TC120T with key LRCOL = IS_FSFLAYER-LRCOL.

***--------------------------------------------------------------------------------------
*** Layer
    move ME->GET_NODEKEY_NEXT( )  to LF_NODEKEY.
    append initial line to CT_NODE assigning <S_NODE>.
    move LF_NODEKEY                                       to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-ISFOLDER.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_TFSDA = C_TFSDA_LAYER ).
    move ICON_CREATE                                      to <S_NODE>-N_IMAGE.
    move ICON_CREATE                                      to <S_NODE>-EXP_IMAGE.
    move ME->F_DRAGDROP_LAYER                             to <S_NODE>-DRAGDROPID.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move text-LAY                                          to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSFLAYER-TLAYR                                to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
*** Concatenate Layer Type and Layer Color Description
    concatenate IS_FSFLAYER-TLAYR LS_TC120T-DESCR into <S_ITEM>-TEXT separated by SPACE.

***--------------------------------------------------------------------------------------
*** Layer Type
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = C_KOMP_TLAYR ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSFLAYER-TLAYR ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSFLAYER-TLAYR                                to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LS_TC110T-DESCR                                  to <S_ITEM>-TEXT.

***--------------------------------------------------------------------------------------
*** Layer Color
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = C_KOMP_LRCOL ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSFLAYER-LRCOL ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSFLAYER-LRCOL                                to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LS_TC120T-DESCR                                  to <S_ITEM>-TEXT.

  endmethod.
  method FILL_TREE_SIDE.

    data: LF_NODEKEY type        TM_NODEKEY,
          LS_TC130T  type        ZVCXI_FFS_TC130T,
          LS_TC150T  type        ZVCXI_FFS_TC150T.
    field-symbols: <S_NODE> type        TREEMCNODT,
                   <S_ITEM> type        TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Side
    move ME->GET_NODEKEY_NEXT( )  to LF_NODEKEY.
    append initial line to CT_NODE assigning <S_NODE>.
    move LF_NODEKEY                                       to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-ISFOLDER.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_TFSDA = C_TFSDA_SIDE ).

    if IF_SIDE = C_SIDE_B.
      move ICON_SET_B                                     to <S_NODE>-N_IMAGE.
      move ICON_SET_B                                     to <S_NODE>-EXP_IMAGE.
    else.
      move ICON_SET_A                                     to <S_NODE>-N_IMAGE.
      move ICON_SET_A                                     to <S_NODE>-EXP_IMAGE.
    endif.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IF_ITEMTXT                                       to <S_ITEM>-TEXT.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.

***--------------------------------------------------------------------------------------
*** Surface Property
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = C_KOMP_SUPRO ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSFSIDE-SUPRO ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSFSIDE-SUPRO                                 to <S_ITEM>-TEXT.

    read table T_TC130T into LS_TC130T with key SUPRO = IS_FSFSIDE-SUPRO.
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LS_TC130T-DESCR                                  to <S_ITEM>-TEXT.

***--------------------------------------------------------------------------------------
*** Treatment Type
    append initial line to CT_NODE assigning <S_NODE>.
    move ME->GET_NODEKEY_NEXT( )                          to <S_NODE>-NODE_KEY.
    move LF_NODEKEY                                       to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.

    <S_NODE>-USEROBJECT = ME->CREATE_USROBJ( IF_FLDNAME = C_KOMP_TTREA ).
    move ICON_PARAMETER                                   to <S_NODE>-N_IMAGE.
    move ICON_PARAMETER                                   to <S_NODE>-EXP_IMAGE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ID'                                             to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    <S_ITEM>-TEXT = ME->GET_DESCR_BY_DATA( IF_DATA = IS_FSFSIDE-TTREA ).

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'VALUE'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_FSFSIDE-TTREA                                 to <S_ITEM>-TEXT.

    read table T_TC150T into LS_TC150T with key TTREA = IS_FSFSIDE-TTREA.
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'DESCR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LS_TC150T-DESCR                                  to <S_ITEM>-TEXT.

  endmethod.
  method GET_DESCR_BY_DATA.

    data:  LS_DFIES        type        DFIES.
    data:  LR_ELEMDESCR    type ref to CL_ABAP_ELEMDESCR.

***--------------------------------------------------------------------------------------
*** Get Runtime Type Services
    try.
        LR_ELEMDESCR ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( P_DATA = IF_DATA ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_ELEMDESCR.
    endtry.
    check LR_ELEMDESCR is bound.

***--------------------------------------------------------------------------------------
*** Get DDIC Description
    LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

    move LS_DFIES-SCRTEXT_M to RF_DESCR.

  endmethod.
  method GET_NODEKEY_NEXT.

    add 1 to ME->F_NODEKEY.
    move ME->F_NODEKEY to RF_NODEKEY.

  endmethod.
  method GET_SEL_NODE_INDEX.

    data: LF_NODEKEY        type        TM_NODEKEY,
          LF_FOUND          type        ABAP_BOOL.
    data: LS_SEL_NODE       type        TREEMCNODT,
          LS_REL_NODE       type        TREEMCNODT,
          LS_NODE           type        TREEMCNODT.
    data: LT_NODES          type        TREEMNOTAB.
    data: LR_USEROBJECT_SEL type ref to LCL_FISTRUCT_USROBJ,
          LR_USEROBJECT     type ref to LCL_FISTRUCT_USROBJ,
          LR_CX_CAST_ERROR  type ref to CX_SY_MOVE_CAST_ERROR.

*** Get selected node
    read table ME->T_NODE into LS_SEL_NODE with key NODE_KEY = IF_NODEKEY.

*** Get User Object of Selected node
    try.
        move LS_SEL_NODE-USEROBJECT ?to LR_USEROBJECT_SEL.
      catch CX_SY_MOVE_CAST_ERROR into LR_CX_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CAST_ERROR ).
    endtry.
    if LR_USEROBJECT_SEL is bound.
      EF_TFSDA = LR_USEROBJECT_SEL->F_TFSDA.
    endif.

*** Get related node
    read table ME->T_NODE into LS_REL_NODE with key NODE_KEY = LS_SEL_NODE-RELATKEY.

***----------------------------------------------------------------------------
    if LS_SEL_NODE-RELATKEY is initial.
***   Root node selected - Get all root nodes
      ME->R_TREE->GET_ROOT_NODES( importing NODE_KEY_TABLE = LT_NODES ).
      move LINES( LT_NODES ) to EF_LIST_LENGTH.

***   Find selected one to get index
      read table LT_NODES transporting no fields with key TABLE_LINE = LS_SEL_NODE-NODE_KEY.
      move SY-TABIX to EF_INDEX_ROOT.
      clear EF_INDEX_SUB_SEL.
    else.
***----------------------------------------------------------------------------
***   No root Node selected - Get all root nodes
      ME->R_TREE->GET_ROOT_NODES( importing NODE_KEY_TABLE = LT_NODES ).

***   Find related one
      read table LT_NODES transporting no fields with key TABLE_LINE = LS_REL_NODE-NODE_KEY.
      move SY-TABIX to EF_INDEX_ROOT.

***   Get index of selected
      ME->R_TREE->NODE_GET_CHILDREN( exporting NODE_KEY       = LS_REL_NODE-NODE_KEY
                                     importing NODE_KEY_TABLE = LT_NODES ).

***   Get index of selected one
***   We need to count the number of children of the same node type since in the tree they can be mixed up with others (side/layer)
      clear EF_INDEX_SUB_SEL.
      move ABAP_FALSE to LF_FOUND.
      loop at LT_NODES into LF_NODEKEY.
        read table ME->T_NODE into LS_NODE with key NODE_KEY = LF_NODEKEY.
        check SY-SUBRC = 0.

***   Get User Object
        clear LR_USEROBJECT.
        try.
            move LS_NODE-USEROBJECT ?to LR_USEROBJECT.
          catch CX_SY_MOVE_CAST_ERROR into LR_CX_CAST_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CAST_ERROR ).
        endtry.

        if LR_USEROBJECT is bound
***     Count nodes with matching type
          and LR_USEROBJECT->F_TFSDA eq LR_USEROBJECT_SEL->F_TFSDA.
          add 1 to EF_LIST_LENGTH.
          if LF_FOUND eq ABAP_FALSE.
            add 1 to EF_INDEX_SUB_SEL.
          endif.
***     Stop counting at selected node
          if LS_NODE-NODE_KEY eq LS_SEL_NODE-NODE_KEY.
            move ABAP_TRUE to LF_FOUND.
          endif.
        endif.
      endloop.

    endif.

  endmethod.
  method HANDLE_NODE_CONTEXT_REQ.

    data: LF_TEXT               type        GUI_TEXT.
    data: LS_NODE               type        TREEMCNODT.
    data: LT_FCODES             type        UI_FUNCTIONS.
    data: LR_MENU               type ref to CL_CTMENU,
          LR_USEROBJECT         type ref to LCL_FISTRUCT_USROBJ,
          LR_CX_VCXI            type ref to /VCXI/CX_CKX,
          LR_CX_CAST_ERROR      type ref to CX_SY_MOVE_CAST_ERROR.
    field-symbols:  <F_FCODES>  type UI_FUNC.

    try.
***----------------------------------------------------------------------------
***     Create instance for menu
        create object LR_MENU.

***     Check if this is a root node
        read table ME->T_NODE into LS_NODE with key NODE_KEY = NODE_KEY.
        try.
            move LS_NODE-USEROBJECT ?to LR_USEROBJECT.
          catch CX_SY_MOVE_CAST_ERROR into LR_CX_CAST_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CAST_ERROR ).
        endtry.

        if LS_NODE-RELATKEY is initial or
          ( LR_USEROBJECT          is bound
           and LR_USEROBJECT->F_TFSDA = C_TFSDA_LAYER ).

***       Add allowed Actions to menu
          move text-NEX to LF_TEXT.
          LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_MOVEUP
                                 TEXT  = LF_TEXT ).

          move text-DOW to LF_TEXT.
          LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_MOVEDOWN
                                 TEXT  = LF_TEXT ).

          move text-DEL to LF_TEXT.
          LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_NODEDEL
                                 TEXT  = LF_TEXT ).
        endif.

***----------------------------------------------------------------------------
***     Disable functions if we are in display mode or not a dummy
        if ME->F_LOCKED eq ABAP_FALSE.

          append initial line to LT_FCODES assigning <F_FCODES>.
          <F_FCODES> = C_FCODE_MOVEUP.

          append initial line to LT_FCODES assigning <F_FCODES>.
          <F_FCODES> = C_FCODE_MOVEDOWN.

          append initial line to LT_FCODES assigning <F_FCODES>.
          <F_FCODES> = C_FCODE_NODEDEL.

          LR_MENU->DISABLE_FUNCTIONS( FCODES = LT_FCODES ).
        endif.

***----------------------------------------------------------------------------
***     Add menu
        if LR_MENU is bound.
          MENU->ADD_MENU( MENU = LR_MENU ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_VCXI.
        LR_CX_VCXI->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_NODE_CONTEXT_SEL.

    data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.

    try.
***----------------------------------------------------------------------------
***     Handled by UI after Backend
        case FCODE.
          when C_FCODE_MOVEDOWN.
            ME->HANDLE_UC_MOVEDOWN( IF_NODEKEY = NODE_KEY ).

          when C_FCODE_MOVEUP.
            ME->HANDLE_UC_MOVEUP( IF_NODEKEY = NODE_KEY ).

          when C_FCODE_NODEDEL.
            ME->HANDLE_UC_NODEDEL( IF_NODEKEY = NODE_KEY ).
        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_NODE_DOUBLE_CLICK.

    data: LR_CX_CKX     type ref to /VCXI/CX_CKX.

***----------------------------------------------------------------------------
*** Check if edit is allowed
    check ME->F_LOCKED eq ABAP_TRUE.

    try.
***     Check if this is a leaf node
        read table ME->T_NODE with key RELATKEY = NODE_KEY transporting no fields.
        check SY-SUBRC ne 0.

        ME->EDIT_ITEM( IF_NODEKEY = NODE_KEY ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD_FILM.

    data: LF_NODEKEY type TM_NODEKEY,
          LF_INDEX   type I.
    data: LS_FSFILM  type ZVCXI_FFSS_S_FSFILM.

    check ME->R_TREE is bound.

*** get POSITION to insert
    ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODEKEY ).
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY    = LF_NODEKEY
                            importing EF_INDEX_ROOT = LF_INDEX ).

*** Add empty layer entry
    append initial line to LS_FSFILM-T_LAYER.

*** Add Film
    ME->R_BL_FISTRUCT_NEW->ADD_ENTRY( IS_FISTRUCT = LS_FSFILM
                                      IF_TFSDA    = C_TFSDA_FILM
                                      IF_INDEX    = LF_INDEX ).

    ME->DO_FREE( ).
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = C_UC_DEFAULT ).

  endmethod.
  method HANDLE_UC_ADD_GLUE.

    data: LF_NODEKEY type TM_NODEKEY,
          LF_INDEX   type I.
    data: LS_FSGLUE  type ZVCXI_FFSS_S_FSGLUE.

    check ME->R_TREE is bound.

*** Get Position to insert
    ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODEKEY ).
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY    = LF_NODEKEY
                            importing EF_INDEX_ROOT = LF_INDEX ).


*** Add Glue
    ME->R_BL_FISTRUCT_NEW->ADD_ENTRY( IS_FISTRUCT = LS_FSGLUE
                                      IF_TFSDA    = C_TFSDA_GLUE
                                      IF_INDEX    = LF_INDEX ).

    ME->DO_FREE( ).
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = C_UC_DEFAULT ).

  endmethod.
  method HANDLE_UC_ADD_LAYER.

    data: LF_NODEKEY            type TM_NODEKEY,
          LF_INDEX              type        I,
          LF_INDEX_SUB          type        I,
          LF_TFSDA              type ZVCXI_FFSS_TFSDA,
          LF_SUB_TDSDA          type ZVCXI_FFSS_TFSDA.
    data: LS_FSREF              type ZCL_VCXI_FFSS_BL_FISTRUCT=>YS_FSREF.
    data: LR_DATA               type ref to DATA.
    field-symbols: <S_FSFILM>   type ZVCXI_FFSS_S_FSFILM.

    check ME->R_TREE is bound.

*** Get position to insert
    ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY   = LF_NODEKEY ).
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY        = LF_NODEKEY
                            importing EF_INDEX_ROOT     = LF_INDEX
                                      EF_INDEX_SUB_SEL  = LF_INDEX_SUB
                                      EF_TFSDA          = LF_SUB_TDSDA ).

*** Check if selected root node is a film
    ME->R_BL_FISTRUCT_NEW->GET_ENTRY( exporting IF_INDEX = LF_INDEX
                                      importing EF_TFSDA = LF_TFSDA
                                                ER_DATA  = LR_DATA ).
    check LF_TFSDA eq C_TFSDA_FILM.

*** Fill the Type
    move: LF_TFSDA to LS_FSREF-TFSDA.

*** Check if selected Sub-Node is a Layer
    if LF_INDEX_SUB is not initial.
      check LF_SUB_TDSDA eq C_TFSDA_LAYER.
    endif.

*** The assign will always work because LF_TDSDA = FILM
    assign LR_DATA->* to <S_FSFILM>.
    check <S_FSFILM> is assigned.

*** Add empty layer entry
    if LF_INDEX_SUB is initial.
      append initial line to <S_FSFILM>-T_LAYER.
    else.
      insert initial line into <S_FSFILM>-T_LAYER index LF_INDEX_SUB.
    endif.

    move LR_DATA to LS_FSREF-R_DATA.

*** Add Film
    ME->R_BL_FISTRUCT_NEW->SET_ENTRY( IS_FSREF = LS_FSREF
                                      IF_INDEX = LF_INDEX ).

    ME->DO_FREE( ).
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = C_UC_DEFAULT ).

  endmethod.
  method HANDLE_UC_ADD_PRINT.

    data: LF_NODEKEY type TM_NODEKEY,
          LF_INDEX   type I.
    data: LS_FSPRINT  type ZVCXI_FFSS_S_FSPRINT.

    check ME->R_TREE is bound.

*** Get Position to insert
    ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODEKEY ).
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY    = LF_NODEKEY
                            importing EF_INDEX_ROOT = LF_INDEX ).


*** Add Print
    ME->R_BL_FISTRUCT_NEW->ADD_ENTRY( IS_FISTRUCT = LS_FSPRINT
                                      IF_TFSDA    = C_TFSDA_PRINT
                                      IF_INDEX    = LF_INDEX ).

    ME->DO_FREE( ).
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = C_UC_DEFAULT ).

  endmethod.
  method HANDLE_UC_CANCEL.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_COL_ALL.

    check ME->R_TREE is bound.
    ME->R_TREE->COLLAPSE_ALL_NODES( ).

  endmethod.
  method HANDLE_UC_DRAG.

    data: LR_CX_CKX         type ref to /VCXI/CX_CKX,
          LR_USEROBJECT     type ref to LCL_FISTRUCT_USROBJ.
    field-symbols: <S_NODE> type TREEMCNODT.

    try.
***     Get Node Object
        read table ME->T_NODE assigning <S_NODE> with key NODE_KEY = NODE_KEY.
        if <S_NODE> is assigned.
          move: <S_NODE>-USEROBJECT ?to LR_USEROBJECT.
          if LR_USEROBJECT is bound.
            move <S_NODE>-NODE_KEY to LR_USEROBJECT->F_NODEKEY.
            move LR_USEROBJECT     to DRAG_DROP_OBJECT->OBJECT.
          endif.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_DROP.

    data: LF_IDX_SRC_ROOT type I,
          LF_IDX_SRC_SUBS type I,
          LF_IDX_DST_ROOT type I,
          LF_IDX_DST_SUBS type I.
    data: LR_USEROBJ      type ref to LCL_FISTRUCT_USROBJ,
          LR_CX_CKX       type ref to /VCXI/CX_CKX.

    try.
***     Get Node Key of Source
        LR_USEROBJ ?= DRAG_DROP_OBJECT->OBJECT.

***     Get Index Values Source
        ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY       = LR_USEROBJ->F_NODEKEY
                                importing EF_INDEX_ROOT    = LF_IDX_SRC_ROOT
                                          EF_INDEX_SUB_SEL = LF_IDX_SRC_SUBS ).

***     Get Index Values Destination
        ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY       = NODE_KEY
                                importing EF_INDEX_ROOT    = LF_IDX_DST_ROOT
                                          EF_INDEX_SUB_SEL = LF_IDX_DST_SUBS ).

        case DRAG_DROP_OBJECT->FLAVOR.
          when C_FLAVOR_ROOT_MOVE.
**          Move of Root Elements
            ME->R_BL_FISTRUCT_NEW->MOVE_ENTRY( IF_INDEX1 = LF_IDX_SRC_ROOT
                                               IF_INDEX2 = LF_IDX_DST_ROOT ).
            ME->REFRESH_TREE( ).
          when C_FLAVOR_LAYER_MOVE or
               C_FLAVOR_LAY2FILM_MOVE.
*           Move of Layer Elements
            ME->R_BL_FISTRUCT_NEW->MOVE_FILM_LAYER( IF_INDEX_FISTRUCT1 = LF_IDX_SRC_ROOT
                                                    IF_INDEX_LAYER1    = LF_IDX_SRC_SUBS
                                                    IF_INDEX_FISTRUCT2 = LF_IDX_DST_ROOT
                                                    IF_INDEX_LAYER2    = LF_IDX_DST_SUBS ).
            ME->REFRESH_TREE( ).
          when others.
            DRAG_DROP_OBJECT->ABORT( ).
        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_EXP_ALL.

    check ME->R_TREE is bound.
    ME->R_TREE->EXPAND_ROOT_NODES( EXPAND_SUBTREE = ABAP_TRUE ).

  endmethod.
  method HANDLE_UC_MOVEDOWN.

    data: LF_NODEKEY       type TM_NODEKEY,
          LF_INDEX_ROOT    type SYINDEX,
          LF_INDEX_SUB_SEL type SYINDEX,
          LF_LIST_LENGTH   type SYINDEX,
          LF_TFSDA         type ZVCXI_FFSS_TFSDA,
          LF_INEXT         type I.

    move IF_NODEKEY to LF_NODEKEY.
    if IF_NODEKEY is initial.
      if ME->R_TREE is bound.
        ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODEKEY ).
      endif.
    endif.

*** Get Selection Index
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY       = LF_NODEKEY
                            importing EF_INDEX_ROOT    = LF_INDEX_ROOT
                                      EF_INDEX_SUB_SEL = LF_INDEX_SUB_SEL
                                      EF_TFSDA         = LF_TFSDA
                                      EF_LIST_LENGTH   = LF_LIST_LENGTH ).

    if LF_INDEX_SUB_SEL is initial.
***   Move Down only possible if not already last item
      check LF_INDEX_ROOT lt LF_LIST_LENGTH.

***   Switch entries in Film Structure
      LF_INEXT = LF_INDEX_ROOT + 1.
      ME->R_BL_FISTRUCT_NEW->SWITCH_ENTRY( exporting IF_INDEX1 = LF_INDEX_ROOT
                                                     IF_INDEX2 = LF_INEXT ).
    else.
      case LF_TFSDA.
***     Switch Layer
        when C_TFSDA_LAYER.
          check LF_INDEX_SUB_SEL lt LF_LIST_LENGTH.

          LF_INEXT = LF_INDEX_SUB_SEL + 1.
          ME->R_BL_FISTRUCT_NEW->SWITCH_FILM_LAYER( exporting IF_INDEX_FSTRC  = LF_INDEX_ROOT
                                                              IF_INDEX_LAYER1 = LF_INDEX_SUB_SEL
                                                              IF_INDEX_LAYER2 = LF_INEXT ).
      endcase.
    endif.

    ME->REFRESH_TREE( ).

  endmethod.
  method HANDLE_UC_MOVEUP.

    data: LF_NODEKEY       type      TM_NODEKEY,
          LF_INDEX_ROOT    type      SYINDEX,
          LF_INDEX_SUB_SEL type      SYINDEX,
          LF_TFSDA         type      ZVCXI_FFSS_TFSDA,
          LF_INDEX         type I.

    move IF_NODEKEY to LF_NODEKEY.
    if IF_NODEKEY is initial.
      if ME->R_TREE is bound.
        ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODEKEY ).
      endif.
    endif.

*** Get Selection Index
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY       = LF_NODEKEY
                            importing EF_INDEX_ROOT    = LF_INDEX_ROOT
                                      EF_INDEX_SUB_SEL = LF_INDEX_SUB_SEL
                                      EF_TFSDA         = LF_TFSDA ).

    if LF_INDEX_SUB_SEL is initial.
***   Move Up only possible if not already first item
      check LF_INDEX_ROOT gt 1.

***   Switch entries in Film Structure
      LF_INDEX = LF_INDEX_ROOT - 1.
      ME->R_BL_FISTRUCT_NEW->SWITCH_ENTRY( exporting IF_INDEX1 = LF_INDEX
                                                     IF_INDEX2 = LF_INDEX_ROOT ).
    else.
      case LF_TFSDA.
***     Switch Layer
        when C_TFSDA_LAYER.
          check LF_INDEX_SUB_SEL gt 1.

          LF_INDEX = LF_INDEX_SUB_SEL - 1.
          ME->R_BL_FISTRUCT_NEW->SWITCH_FILM_LAYER( exporting IF_INDEX_FSTRC  = LF_INDEX_ROOT
                                                              IF_INDEX_LAYER1 = LF_INDEX
                                                              IF_INDEX_LAYER2 = LF_INDEX_SUB_SEL ).
      endcase.
    endif.

    ME->REFRESH_TREE( ).

  endmethod.
  method HANDLE_UC_NODEDEL.

    data: LF_INDEX_ROOT    type      SYINDEX,
          LF_INDEX_SUB_SEL type      SYINDEX,
          LF_TFSDA         type      ZVCXI_FFSS_TFSDA.

*** Get Selection Index
    ME->GET_SEL_NODE_INDEX( exporting IF_NODEKEY       = IF_NODEKEY
                            importing EF_INDEX_ROOT    = LF_INDEX_ROOT
                                      EF_INDEX_SUB_SEL = LF_INDEX_SUB_SEL
                                      EF_TFSDA         = LF_TFSDA ).

    if LF_INDEX_SUB_SEL is initial.
***   Delete Node from Film Structure
      ME->R_BL_FISTRUCT_NEW->DELETE_ENTRY( exporting IF_INDEX = LF_INDEX_ROOT ).
    else.
      case LF_TFSDA.
***     Delete Layer
        when C_TFSDA_LAYER.
          ME->R_BL_FISTRUCT_NEW->DEL_FILM_LAYER( exporting IF_INDEX_FISTRUCT = LF_INDEX_ROOT
                                                           IF_INDEX_LAYER    = LF_INDEX_SUB_SEL ).

      endcase.
    endif.

    ME->DO_FREE( ).
    ME->REFRESH_TOOLBAR( ).
    ME->REFRESH_TREE( ).

  endmethod.
  method HANDLE_UC_OKAY.

    data:  LF_FISTX   type ZVCXI_FFS_FISTX.

    check ME->F_LOCKED eq ABAP_TRUE.

*** Get adjusted Film Structure XML
    ME->R_BL_FISTRUCT_NEW->GET_FISTX( importing EF_FISTX = LF_FISTX ).

*** Set ajdusted Values to Original Film Structure
    ME->R_BL_FISTRUCT_ORG->SET_FISTX( exporting IF_FISTX = LF_FISTX ).

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_TOOLBAR.

    data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
        case FCODE.
          when C_FCODE_COL_ALL.
            ME->HANDLE_UC_COL_ALL( ).

          when C_FCODE_EXP_ALL.
            ME->HANDLE_UC_EXP_ALL( ).

          when C_FCODE_MOVEUP.
            ME->HANDLE_UC_MOVEUP( ).

          when C_FCODE_MOVEDOWN.
            ME->HANDLE_UC_MOVEDOWN( ).

          when C_FCODE_ADD_FILM.
            ME->HANDLE_UC_ADD_FILM( ).

          when C_FCODE_ADD_LAYER.
            ME->HANDLE_UC_ADD_LAYER( ).

          when C_FCODE_ADD_GLUE.
            ME->HANDLE_UC_ADD_GLUE( ).

          when C_FCODE_ADD_PRINT.
            ME->HANDLE_UC_ADD_PRINT( ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER_TOOLBAR.

    if ME->R_CONTAINER_TOOLBAR is not bound.
      create object ME->R_CONTAINER_TOOLBAR
        exporting
          CONTAINER_NAME              = IF_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_CONTAINER_TREE.

    if ME->R_CONTAINER_TREE is not bound.
      create object ME->R_CONTAINER_TREE
        exporting
          CONTAINER_NAME = IF_CONTAINER_NAME
        exceptions
          others         = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TOOLBAR.

    data: LT_EVENT                type        CNTL_SIMPLE_EVENTS.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.

    check ME->R_TOOLBAR is not bound.

***--------------------------------------------------------------------------------------
*** Create Toolbar
    create object ME->R_TOOLBAR
      exporting
        PARENT             = ME->R_CONTAINER_TOOLBAR
      exceptions
        CNTL_INSTALL_ERROR = 1
        CNTL_ERROR         = 2
        CNTB_WRONG_VERSION = 3
        others             = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.

    ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS           = LT_EVENT
                                          exceptions CNTL_ERROR       = 1
                                            CNTL_SYSTEM_ERROR         = 2
                                            ILLEGAL_EVENT_COMBINATION = 3
                                            others                    = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event Handler
    set handler ME->HANDLE_UC_TOOLBAR  for ME->R_TOOLBAR.

  endmethod.
  method INIT_TOOLBAR_DEF.

    data: LF_DISABLE type FLAG.
    field-symbols: <S_TT> type YS_TOOLBAR_BUTTON.

    if ME->F_LOCKED eq ABAP_FALSE.
      move ABAP_TRUE to LF_DISABLE.
    endif.

    refresh ME->T_TOOLBAR_BUTTON.

*** Add Move Up
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          ICON_NEXT_VALUE   to <S_TT>-ICON,
          text-NEX          to <S_TT>-QUICKINFO,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_MOVEUP    to <S_TT>-FCODE.

*** Add Move Down
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON      to <S_TT>-BUTN_TYPE,
          ICON_PREVIOUS_VALUE to <S_TT>-ICON,
          text-DOW            to <S_TT>-QUICKINFO,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_MOVEDOWN    to <S_TT>-FCODE.

*** Add Separator Line
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_SEPARATOR to <S_TT>-BUTN_TYPE.

*** Add Collapse All
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          ICON_COLLAPSE_ALL to <S_TT>-ICON,
          text-COL          to <S_TT>-QUICKINFO,
          ABAP_FALSE        to <S_TT>-IS_DISABLED,
          C_FCODE_COL_ALL   to <S_TT>-FCODE.

*** Add Expand All
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          ICON_EXPAND_ALL   to <S_TT>-ICON,
          text-EXP          to <S_TT>-QUICKINFO,
          ABAP_FALSE        to <S_TT>-IS_DISABLED,
          C_FCODE_EXP_ALL   to <S_TT>-FCODE.

*** Add Separator Line
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_SEPARATOR to <S_TT>-BUTN_TYPE.

*** Add Film
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          text-ADF          to <S_TT>-TEXT,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_ADD_FILM  to <S_TT>-FCODE.

*** Add Layer
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          text-ADL          to <S_TT>-TEXT,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_ADD_LAYER  to <S_TT>-FCODE.

*** Add Glue
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          text-ADG          to <S_TT>-TEXT,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_ADD_GLUE  to <S_TT>-FCODE.

*** add Print
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          text-ADP          to <S_TT>-TEXT,
          LF_DISABLE        to <S_TT>-IS_DISABLED,
          C_FCODE_ADD_PRINT to <S_TT>-FCODE.

  endmethod.
  method INIT_TREE.

    data:   LS_HHDR   type  TREEMHHDR.

    check ME->R_TREE is not bound.

*** Get the Hierarchy Column
    move text-ELM    to LS_HHDR-HEADING.
    move 30          to LS_HHDR-WIDTH.

*** Create the Tree Instance
    create object ME->R_TREE
      exporting
        NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
        ITEM_SELECTION              = ' '
        HIERARCHY_COLUMN_NAME       = 'ID'
        HIERARCHY_HEADER            = LS_HHDR
      exceptions
        ILLEGAL_NODE_SELECTION_MODE = 1
        ILLEGAL_COLUMN_NAME         = 2
        others                      = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check ME->R_CONTAINER_TREE is bound.
*** Create the Tree Control
    ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                       PARENT                       = ME->R_CONTAINER_TREE
                                     exceptions
                                       LIFETIME_ERROR               = 1
                                       CNTL_SYSTEM_ERROR            = 2
                                       CREATE_ERROR                 = 3
                                       FAILED                       = 4
                                       TREE_CONTROL_ALREADY_CREATED = 5
                                       others                       = 6 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    ME->R_TREE->HIERARCHY_HEADER_SET_WIDTH( 40 ).

*** Add Column for Value
    ME->R_TREE->ADD_COLUMN( exporting
                              NAME                = 'VALUE'
                              WIDTH               = 30
                              HEADER_TEXT         = text-VAL
                            exceptions
                              COLUMN_EXISTS       = 1
                              ILLEGAL_COLUMN_NAME = 2
                              TOO_MANY_COLUMNS    = 3
                              ILLEGAL_ALIGNMENT   = 4
                              others              = 5 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Column for Description
    ME->R_TREE->ADD_COLUMN( exporting
                              NAME                = 'DESCR'
                              WIDTH               = 70
                              HEADER_TEXT         = text-DES
                            exceptions
                              COLUMN_EXISTS       = 1
                              ILLEGAL_COLUMN_NAME = 2
                              TOO_MANY_COLUMNS    = 3
                              ILLEGAL_ALIGNMENT   = 4
                              others              = 5 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Register the Tree Events
    ME->REGISTER_TREE_EVENTS( ).

  endmethod.
  method REFRESH_TOOLBAR.

    data: LS_TT type YS_TOOLBAR_BUTTON.

***--------------------------------------------------------------------------------------
*** Only if Refresh Requested needed
    check ME->F_REFRESH_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
*** Initialize if needed
    ME->INIT_CONTAINER_TOOLBAR( ).
    ME->INIT_TOOLBAR_DEF( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Delete All Buttons
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( ).

    loop at ME->T_TOOLBAR_BUTTON into LS_TT.

      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = LS_TT-FCODE
                                            ICON             = LS_TT-ICON
                                            IS_DISABLED      = LS_TT-IS_DISABLED
                                            BUTN_TYPE        = LS_TT-BUTN_TYPE
                                            TEXT             = LS_TT-TEXT
                                            QUICKINFO        = LS_TT-QUICKINFO
                                 exceptions CNTL_ERROR       = 1
                                            CNTB_BTYPE_ERROR = 2
                                            CNTB_ERROR_FCODE = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    endloop.

  endmethod.
  method REFRESH_TREE.

***--------------------------------------------------------------------------------------
*** Get Expanded Nodes
    if ME->R_TREE is bound.
      ME->R_TREE->GET_EXPANDED_NODES( importing NODE_KEY_TABLE = ME->T_EXP_NODE ).
      move ABAP_TRUE to ME->F_EXP_NODE.
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Tree
    ME->INIT_CONTAINER_TREE( ).
    ME->INIT_TREE( ).

***--------------------------------------------------------------------------------------
*** Delete all Nodes
    ME->R_TREE->DELETE_ALL_NODES( ).

***--------------------------------------------------------------------------------------
*** Fill Tree
    ME->FILL_TREE( ).

  endmethod.
  method REGISTER_TREE_EVENTS.

    data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
    field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.

***--------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_COLUMN_TREE_MODEL=>EVENTID_DEF_CONTEXT_MENU_REQ  to <S_EVENT>-EVENTID.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
    move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

    ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                         EVENTS                    = LT_EVENT
                                       exceptions
                                         ILLEGAL_EVENT_COMBINATION = 1
                                         UNKNOWN_EVENT             = 2
                                         others                    = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Event Handler
    set handler ME->HANDLE_NODE_CONTEXT_REQ       for ME->R_TREE.
    set handler ME->HANDLE_NODE_CONTEXT_SEL       for ME->R_TREE.
    set handler ME->HANDLE_UC_DRAG                for ME->R_TREE.
    set handler ME->HANDLE_UC_DROP                for ME->R_TREE.
    set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE.

  endmethod.
  method SET_PF_STATUS.

    data:  LT_EXCLUDE  type table of SYUCOMM.

    if ME->F_LOCKED ne ABAP_TRUE.
      append C_UC_OKAY to LT_EXCLUDE.
    endif.

    set pf-status '0100' of program 'SAPLZVCXI_FFSS_POPUP_FISTRUCT'
                         excluding LT_EXCLUDE.

  endmethod.
  method START.

    data: LR_POPUP_FISTRUCT type ref to ZCL_VCXI_FFSS_POPUP_FISTRUCT.

enhancement-section START spots ZVCXI_FFSS_ES_POPUP_FISTRUCT .
*** Create Instance
    create object LR_POPUP_FISTRUCT
      exporting
        IR_BL_FISTRUCT = IR_BL_FISTRUCT
        IF_LOCKED      = IF_LOCKED.

*** Call Popup
    call function 'ZVCXI_FFSS_POPUP_FISTRUCT_STRT'
      exporting
        IR_POPUP_FISTRUCT = LR_POPUP_FISTRUCT.
end-enhancement-section.

*** Free the Popup
    LR_POPUP_FISTRUCT->DO_FREE( ).

  endmethod.
