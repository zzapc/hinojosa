
class ZCL_VCXI_FBSSC_GRID_BGDIM definition
  public
  inheriting from ZCL_VCXI_FBSSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BAGTY type ref to ZCL_VCXI_FBSSC_BAGTY .

  methods ADD_BGDIM
    raising
      /VCXI/CX_CKX .
  methods CHECK_POPUP_DELETE_BGDIM_BPCAL
    importing
      !IF_IBDIM type ZVCXI_FBS_IBDIM
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_BGDIM
    importing
      !IF_NOMOD type FLAG optional
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods DELETE_BGDIM
    importing
      !IT_BAGTY_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSSC_GRID_BGDIM definition
class ZCL_VCXI_FBSSC_GRID_BGDIM implementation.
  method ADD_BGDIM.

    data: LS_RETURN      type          DDSHRETVAL,
          LS_BAGTY_BGDIM type          ZVCXI_FBSSC_S_BAGTY_BGDIM.
    data: LT_RETURN      type table of DDSHRETVAL.

    call function 'F4IF_FIELD_VALUE_REQUEST'
      exporting
        TABNAME           = 'ZVCXI_FBS_TC010'
        FIELDNAME         = 'IBDIM'
        MULTIPLE_CHOICE   = 'X'
      tables
        RETURN_TAB        = LT_RETURN
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3
        NO_VALUES_FOUND   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Process Result
    loop at LT_RETURN into LS_RETURN.
      move ME->R_BAGTY->F_IBAGT to LS_BAGTY_BGDIM-IBAGT.
      move  LS_RETURN-FIELDVAL  to LS_BAGTY_BGDIM-IBDIM.

***   Init Optional value
      move 'O' to LS_BAGTY_BGDIM-OBDIM.

***   Add Dimension
      ME->R_BAGTY->ADD_BGDIM( IS_BAGTY_BGDIM = LS_BAGTY_BGDIM ).
    endloop.

  endmethod.
  method CHANGE_STYLE_BGDIM.

    data: LF_STYLE type LVC_STYLE.

*** Set Bag Type = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IBDIM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** If the field doesn`t accept modification => disable
    if IF_NOMOD eq ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to LF_STYLE.
    else.
      move ME->F_STYLE_ENABLED to LF_STYLE.
    endif.

*** Set Bag Type Description = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'OBDIM'
                                IF_STYLE     = LF_STYLE
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHECK_POPUP_DELETE_BGDIM_BPCAL.

*** 0 Delete Bag Dimensions and related Usage.
*** 1 Don't delete Bag Dimensions and related Usage.

    data: LF_ANSWER   type C,
          LF_QUESTION type /VCXI/CKX_DESCR.
    data: LS_TC010T   type ZVCXI_FBS_TC010T .

    move 1 to RF_RETURN.

*** Get Bag Dimension Description
    read table ZCL_VCXI_FBSSC_BAGTY=>T_TC010T into LS_TC010T with key IBDIM = IF_IBDIM.
    if SY-SUBRC ne 0.
      move IF_IBDIM to LS_TC010T-DESCR.
    endif.

*** Set Question
    move text-004 to LF_QUESTION.
    replace '&1' in LF_QUESTION with LS_TC010T-DESCR.

*** Call Popup
    call function 'POPUP_TO_CONFIRM'
      exporting
        TITLEBAR              = 'Delete Bag Dimension'(001)
        TEXT_QUESTION         = LF_QUESTION
        TEXT_BUTTON_1         = 'Delete'(002)
        ICON_BUTTON_1         = 'ICON_PREVIOUS_HIERARCHY_LEVEL'
        TEXT_BUTTON_2         = 'Cancel'(003)
        ICON_BUTTON_2         = 'ICON_CANCEL'
        DEFAULT_BUTTON        = '1'
        DISPLAY_CANCEL_BUTTON = ' '
        START_COLUMN          = 60
        START_ROW             = 4
        POPUP_TYPE            = 'ICON_MESSAGE_WARNING'
      importing
        ANSWER                = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND        = 1
        others                = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LF_ANSWER eq '1'.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_SEL_DELETE.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
    if LINES( LT_CELL ) gt 0 or
       LINES( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME ).

*** Try to Assign Customizing Reference
    try.
        move IR_CUSTOMIZING ?to ME->R_BAGTY.
      catch CX_SY_MOVE_CAST_ERROR.
***     Bag Type Customizing Reference can't be assigned.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_FBSSC'
            IF_MSGNO = '101' ).
    endtry.

    check ME->R_BAGTY is bound.
    ME->F_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

  endmethod.
  method DELETE_BGDIM.

    data: LS_BAGTY_BGDIM type ZVCXI_FBSSC_S_BAGTY_BGDIM,
          LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART,
          LS_BAGTY_BPCAL type ZVCXI_FBSSC_S_BAGTY_BPCAL.

*** Process Result
    loop at IT_BAGTY_BGDIM into LS_BAGTY_BGDIM.

***   Get Dimension usage
      clear LS_BAGTY_BPCAL.
      loop at ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART.
        read table LS_BAGTY_BPART-BPCAL into LS_BAGTY_BPCAL with key IBDIM = LS_BAGTY_BGDIM-IBDIM.
        check SY-SUBRC eq 0.
        exit.
      endloop.

      if LS_BAGTY_BPCAL is initial.

***     Delete Dimension Only
        ME->R_BAGTY->DELETE_BGDIM( IS_BAGTY_BGDIM = LS_BAGTY_BGDIM ).

      else.
        if CHECK_POPUP_DELETE_BGDIM_BPCAL( exporting IF_IBDIM = LS_BAGTY_BGDIM-IBDIM ) eq 0.

***       Delete Dimensions from related Bag Part Calculations
          loop at ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART.
            clear LS_BAGTY_BPCAL.
            loop at LS_BAGTY_BPART-BPCAL into LS_BAGTY_BPCAL where IBDIM = LS_BAGTY_BGDIM-IBDIM.

***           Delete Bag Part - Calculation
              ME->R_BAGTY->DELETE_BPCAL( IF_IBPAR       = LS_BAGTY_BPART-IBPAR
                                         IS_BAGTY_BPCAL = LS_BAGTY_BPCAL ).

            endloop.
          endloop.

***       Delete Dimension
          ME->R_BAGTY->DELETE_BGDIM( IS_BAGTY_BGDIM = LS_BAGTY_BGDIM ).

        endif.
      endif.

    endloop.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED   type /VCXI/CKX_LOCKED.
    data: LS_TC0110T type ZVCXI_FBS_TC010T,
          LS_D07V    type DD07V,
          LS_DRAL    type LVC_S_DRAL,
          LS_BGDIM   type ZVCXI_FBSSC_S_BAGTY_BGDIM.
    data: LT_DRAL type LVC_T_DRAL,
          LT_D07V type standard table of DD07V.
    field-symbols: <S_DRAL> type LVC_S_DRAL,
                   <S_FCAT> type LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
    LF_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL' or 'IBAGT' or 'DD_HANDLE_IBDIM' or
             'DD_HANDLE_OBDIM' or 'NOMOD'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

        when 'IBDIM'.
          move text-D02 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.

          move 'DD_HANDLE_IBDIM'   to <S_FCAT>-DRDN_FIELD.
          move 1                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move 'A'                 to <S_FCAT>-COL_OPT.
          move 'ZFB02'             to <S_FCAT>-CONVEXIT.

        when 'OBDIM'.
          move text-D03 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.

          move 'DD_HANDLE_OBDIM'   to <S_FCAT>-DRDN_FIELD.
          move 2                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move 'A'                 to <S_FCAT>-COL_OPT.
          move 'ZFB01'             to <S_FCAT>-CONVEXIT.

          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

      endcase.

***   DropDown Handle Logic
      check <S_FCAT>-DRDN_HNDL is not initial.

***   Get special values for ID of Bag Dimension
      if <S_FCAT>-FIELDNAME eq 'IBDIM'.

        loop at ME->R_BAGTY->T_TC010T into LS_TC0110T.
          insert initial line into table LT_DRAL assigning <S_DRAL>.
          move: <S_FCAT>-DRDN_HNDL to <S_DRAL>-HANDLE,
                LS_TC0110T-IBDIM   to <S_DRAL>-INT_VALUE.

          concatenate LS_TC0110T-IBDIM LS_TC0110T-DESCR into <S_DRAL>-VALUE separated by SPACE.
        endloop.

        break ADD_DELETED_BAG_DIMENSIONS.
        loop at ME->R_BAGTY->T_BAGTY_BGDIM into LS_BGDIM.
          read table LT_DRAL into LS_DRAL with key INT_VALUE = LS_BGDIM-IBDIM.
          if SY-SUBRC ne 0.
            insert initial line into table LT_DRAL assigning <S_DRAL>.
            move: <S_FCAT>-DRDN_HNDL to <S_DRAL>-HANDLE,
                  LS_BGDIM-IBDIM     to <S_DRAL>-INT_VALUE,
                  LS_BGDIM-IBDIM     to <S_DRAL>-VALUE.
          endif.
        endloop.

***   Get Fix Value Domain
      else.

***     Get Domain Values
        call function 'DD_DOMVALUES_GET'
          exporting
            DOMNAME   = <S_FCAT>-DOMNAME
            TEXT      = 'X'
            LANGU     = SY-LANGU
          tables
            DD07V_TAB = LT_D07V.

        loop at LT_D07V into LS_D07V.
          insert initial line into table LT_DRAL assigning <S_DRAL>.
          move: <S_FCAT>-DRDN_HNDL  to <S_DRAL>-HANDLE,
                LS_D07V-DOMVALUE_L  to <S_DRAL>-INT_VALUE.

          concatenate LS_D07V-DOMVALUE_L LS_D07V-DDTEXT into <S_DRAL>-VALUE separated by SPACE.
        endloop.
      endif.

    endloop.

    check LINES( LT_DRAL ) is not initial.
    ME->R_GRID->SET_DROP_DOWN_TABLE( exporting IT_DROP_DOWN_ALIAS = LT_DRAL ).

  endmethod.
  method GET_GRID_DATA.

    data: LF_NOMOD      type ABAP_BOOL.
    data: LS_BGDIM      type ZVCXI_FBSSC_S_BAGTY_BGDIM,
          LS_BGDIM_GRID type ZVCXI_FBSSC_S_BAGTY_BGDIM_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Bag Type - Dimensions
    loop at ME->R_BAGTY->T_BAGTY_BGDIM into LS_BGDIM.
      clear: LS_BGDIM_GRID.

      move: LS_BGDIM-IBAGT to LS_BGDIM_GRID-IBAGT,
            LS_BGDIM-IBDIM to LS_BGDIM_GRID-IBDIM,
            LS_BGDIM-OBDIM to LS_BGDIM_GRID-OBDIM.

      move: 1 to LS_BGDIM_GRID-DD_HANDLE_IBDIM,
            2 to LS_BGDIM_GRID-DD_HANDLE_OBDIM.

      move ABAP_FALSE to LF_NOMOD.
      case LS_BGDIM_GRID-IBDIM.
        when ME->R_BAGTY->C_BGDIM_BGHEI or
             ME->R_BAGTY->C_BGDIM_BGWID.
          move ABAP_TRUE to LF_NOMOD.
      endcase.

***--------------------------------------------------------------------------------------
***   Set Style Details
      ME->CHANGE_STYLE_BGDIM( exporting IF_NOMOD = LF_NOMOD
                              changing CT_STYL = LS_BGDIM_GRID-T_STYL ).

***--------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_BGDIM_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
    move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
    move 'A'        to RS_LAYOUT-SEL_MODE.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_BAGTY_BGDIM      type          ZVCXI_FBSSC_S_BAGTY_BGDIM,
          LS_BAGTY_BGDIM_GRID type          ZVCXI_FBSSC_S_BAGTY_BGDIM_GRID.
    data: LR_CX_CKX            type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.

        SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                       ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.

          read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
          check SY-SUBRC eq 0.

          move-corresponding <S_DATA> to LS_BAGTY_BGDIM_GRID.
          move-corresponding LS_BAGTY_BGDIM_GRID to LS_BAGTY_BGDIM.
          move ME->R_BAGTY->F_IBAGT to LS_BAGTY_BGDIM-IBAGT.

***       Update
          ME->R_BAGTY->UPDATE_BGDIM( IS_BAGTY_BGDIM = LS_BAGTY_BGDIM ).

        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LF_DISABLED     type        ABAP_BOOL.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR> type STB_BUTTON.

    try.

        if ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements Add, Delete
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_ADD               to <S_TOOLBAR>-FUNCTION,
              text-T02                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_INSERT_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DELETE            to <S_TOOLBAR>-FUNCTION,
              text-T03                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DELETE_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_USER_COMMAND.

    data: LS_CELL type          LVC_S_CELL,
          LS_ROW  type          LVC_S_ROW.
    data: LT_CELL        type          LVC_T_CELL,
          LT_ROW         type          LVC_T_ROW,
          LT_BAGTY_BGDIM type          ZVCXI_FBSSC_TT_BAGTY_BGDIM.
    data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>        type standard table,
                   <S_BAGTY_BGDIM> type          ZVCXI_FBSSC_S_BAGTY_BGDIM,
                   <S_DATA>        type          ANY,
                   <S_VALUE>       type          ANY.

    try.
***     Get Dimensions
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
        ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

        case E_UCOMM.
          when C_FCODE_ADD.
***         Add new Dimension
            ME->ADD_BGDIM( ).

          when C_FCODE_DELETE.
***         Delete Dimension
            if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***           No rows selected. Please select all rows you want to delete.
              raise exception type /VCXI/CX_CKX
                exporting
                  F_MSGTY = 'E'
                  F_MSGID = 'ZVCXI_FBSSC'
                  F_MSGNO = '056'.
            endif.

***         Get Selected Dimensions
            loop at LT_CELL into LS_CELL.
              read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
              check SY-SUBRC = 0.

              assign component 'IBDIM' of structure <S_DATA> to <S_VALUE>.
              if <S_VALUE> is assigned.
                case <S_VALUE>.
                  when ZCL_VCXI_FBSSC_BAGTY=>C_BGDIM_BGHEI or
                       ZCL_VCXI_FBSSC_BAGTY=>C_BGDIM_BGWID.
                    continue.
                endcase.
              endif.

              insert initial line into table LT_BAGTY_BGDIM assigning <S_BAGTY_BGDIM>.
              move-corresponding <S_DATA> to <S_BAGTY_BGDIM>.
            endloop.

            loop at LT_ROW into LS_ROW.
              read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
              check SY-SUBRC = 0.

              assign component 'IBDIM' of structure <S_DATA> to <S_VALUE>.
              if <S_VALUE> is assigned.
                case <S_VALUE>.
                  when ZCL_VCXI_FBSSC_BAGTY=>C_BGDIM_BGHEI or
                       ZCL_VCXI_FBSSC_BAGTY=>C_BGDIM_BGWID.
                    continue.
                endcase.
              endif.

              insert initial line into table LT_BAGTY_BGDIM assigning <S_BAGTY_BGDIM>.
              move-corresponding <S_DATA> to <S_BAGTY_BGDIM>.
            endloop.

***         Delete Selected Dimensions
            ME->DELETE_BGDIM( IT_BAGTY_BGDIM = LT_BAGTY_BGDIM ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Add Event for UserCommand and Toolbar
    set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

  endmethod.
