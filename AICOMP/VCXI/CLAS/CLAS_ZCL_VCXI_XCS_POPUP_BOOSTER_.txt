
class ZCL_VCXI_XCS_POPUP_BOOSTER definition
  public
  final
  create protected .

public section.

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK optional
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RR_BOOSTER) type ref to ZCL_VCXI_XCS_BOOSTER
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_EXP_NODE type ABAP_BOOL .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_TREE type ref to CL_SIMPLE_TREE_MODEL .
  data S_CMPRK type /VCXI/VKC_S_CMPRK .
  data T_BOOSTER type /VCXI/CKX_TT_OBJECT .
  data T_EXP_NODE type TREEMNOTAB .
  data R_BOOSTER type ref to ZCL_VCXI_XCS_BOOSTER .

  methods ADD_NODES
    importing
      !IF_NODE_KEY type TM_NODEKEY
      !IT_NODE type TREEMSNOTA optional
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK optional
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE
    raising
      /VCXI/CX_CKX .
  methods GET_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_SIMPLE_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    importing
      !IF_CONTAINER_NAME type C default '0100CC_TREE'
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
  methods REMOVE_EMPTY_NODES
    importing
      !IF_NODE_KEY type TM_NODEKEY
    changing
      !CT_NODE type TREEMSNOTA
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_POPUP_BOOSTER definition
class ZCL_VCXI_XCS_POPUP_BOOSTER implementation.
method ADD_NODES.

  data: LF_IMAGE    type        TV_IMAGE,
        LF_EXPANDER type        ABAP_BOOL.
  data: LT_CHILDREN type        /VCXI/CKX_TT_OBJECT.
  data: LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_OBJECT_H type ref to /VCXI/IF_CKX_OBJECT_H,
        LR_BOOSTER  type ref to ZCL_VCXI_XCS_BOOSTER.


*** Get Userobject
  LR_OBJECT = cast ZCL_VCXI_XCS_BOOSTER( IT_NODE[ NODE_KEY = IF_NODE_KEY ]-USEROBJECT ).


***------------------------------------------------------------------------------------------------
*** Only add Node if not already added
  if ME->R_TREE->NODE_KEY_IN_TREE( NODE_KEY = IF_NODE_KEY ) ne ABAP_TRUE.

*** Add Node
    ME->R_TREE->ADD_NODE( exporting  NODE_KEY                = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-NODE_KEY
                                     RELATIVE_NODE_KEY       = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-RELATKEY
                                     RELATIONSHIP            = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-RELATSHIP
                                     ISFOLDER                = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-ISFOLDER
                                     EXPANDER                = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-EXPANDER
                                     IMAGE                   = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-N_IMAGE
                                     EXPANDED_IMAGE          = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-EXP_IMAGE
                                     TEXT                    = |{ LR_OBJECT->GET_ID( ) } - { LR_OBJECT->GET_DESCR( ) }|
                                     USER_OBJECT             = IT_NODE[ NODE_KEY = IF_NODE_KEY ]-USEROBJECT
                          exceptions NODE_KEY_EXISTS         = 1
                                     NODE_KEY_EMPTY          = 2
                                     ILLEGAL_RELATIONSHIP    = 3
                                     RELATIVE_NODE_NOT_FOUND = 4
                                     others                  = 6 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endif.

***------------------------------------------------------------------------------------------------
*** Add Sub Nodes not if expander is defined
  loop at IT_NODE into data(LS_NODE) where RELATKEY eq IF_NODE_KEY.
    ME->ADD_NODES( IF_NODE_KEY = LS_NODE-NODE_KEY
                   IT_NODE     = IT_NODE ).
  endloop.

endmethod.
  method CONSTRUCTOR.

    if IR_GATE  is initial and
       IS_CMPRK is initial.
***   Missing Importing Parameter
      /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( 'Missing Import Parameter' ).
    endif.

    move IR_GATE  to ME->R_GATE.
    move IS_CMPRK to ME->S_CMPRK.

    if ME->S_CMPRK is initial.
      ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = ME->S_CMPRK ).
    endif.

  endmethod.
  method DO_FREE.

***--------------------------------------------------------------------------------------
*** Free Tree
    if ME->R_TREE is bound.
      clear ME->R_TREE.
    endif.

***--------------------------------------------------------------------------------------
*** Free Tree Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions CNTL_ERROR        = 1
                                        CNTL_SYSTEM_ERROR = 2
                                        others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Get Data
    ME->GET_DATA( ).

***--------------------------------------------------------------------------------------
*** Set PF-Status
    ME->SET_PF_STATUS( ).

***--------------------------------------------------------------------------------------
*** Refresh Toolbar
    ME->REFRESH_TREE( ).

  endmethod.
  method DO_USER_COMMAND.

    case IF_UCOMM.

      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).

      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).

    endcase.

  endmethod.
  method FILL_TREE.

    data: LT_NODE type TREEMSNOTA.

***--------------------------------------------------------------------------------------
*** Create Nodes for Booster
    loop at ME->T_BOOSTER into data(LR_OBJECT).

      check LR_OBJECT is instance of ZCL_VCXI_XCS_BOOSTER.
      data(LR_BOOSTER) = cast ZCL_VCXI_XCS_BOOSTER( LR_OBJECT ).
      check LR_BOOSTER is bound.

      append value #( NODE_KEY   = LR_BOOSTER->F_GBSTR
                      RELATKEY   = LR_BOOSTER->F_GPBST
                      RELATSHIP  = CL_SIMPLE_TREE_MODEL=>RELAT_LAST_CHILD
                      ISFOLDER   = switch #( LR_BOOSTER->F_NIDAT when 0 then ABAP_TRUE else ABAP_FALSE )
                      EXPANDER   = switch #( LR_BOOSTER->F_NIDAT when 0 then ABAP_TRUE else ABAP_FALSE )
                      N_IMAGE    = switch #( LR_BOOSTER->F_NIDAT when 0 then ICON_FOLDER else ICON_CONFIGURATION )
                      EXP_IMAGE  = switch #( LR_BOOSTER->F_NIDAT when 0 then ICON_FOLDER else ICON_CONFIGURATION )
                      TEXT       = |{ LR_OBJECT->GET_ID( ) } - { LR_OBJECT->GET_DESCR( ) }|
                      USEROBJECT = LR_OBJECT ) to LT_NODE.

    endloop.
    check LT_NODE is not initial.

*** Remove empty Nodes (start with root nodes)
    loop at LT_NODE into data(LS_NODE) where RELATKEY is initial.
      ME->REMOVE_EMPTY_NODES( exporting IF_NODE_KEY = LS_NODE-NODE_KEY
                              changing  CT_NODE     = LT_NODE ).
    endloop.

***--------------------------------------------------------------------------------------
*** Add Nodes
    loop at LT_NODE into LS_NODE where RELATKEY is initial.
      ME->ADD_NODES( exporting IF_NODE_KEY = LS_NODE-NODE_KEY
                               IT_NODE     = LT_NODE ).
    endloop.


***--------------------------------------------------------------------------------------
*** Expand
    if ME->F_EXP_NODE eq ABAP_TRUE.
      ME->R_TREE->EXPAND_NODES( exporting NODE_KEY_TABLE = ME->T_EXP_NODE ).
    else.
      ME->R_TREE->EXPAND_ROOT_NODES( exporting EXPAND_SUBTREE = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
*** Clear Expanded Nodes
    clear ME->T_EXP_NODE.
    clear ME->F_EXP_NODE.

  endmethod.
  method GET_DATA.

    check ME->T_BOOSTER is initial.

*** Load Data from DB
    data(LT_BOOSTER) = ZCL_VCXI_XCS_BOOSTER=>LOAD_ALL( ).

    loop at LT_BOOSTER into data(LR_BOOSTER).
***   Add all Nodes and Booster that match current Model
      if cast ZCL_VCXI_XCS_BOOSTER( LR_BOOSTER )->F_NIDAT is initial or
         cast ZCL_VCXI_XCS_BOOSTER( LR_BOOSTER )->GET_CMPRK( ) eq ME->S_CMPRK.
        append LR_BOOSTER to ME->T_BOOSTER.
      endif.
    endloop.

  endmethod.
  method HANDLE_NODE_DOUBLE_CLICK.

    try.
        ME->HANDLE_UC_OKAY( ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_CANCEL.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_OKAY.

    data: LF_NODE_KEY type TM_NODEKEY.
    data: LR_USER_OBJECT type ref to OBJECT.


    ME->R_TREE->GET_SELECTED_NODE( importing NODE_KEY = LF_NODE_KEY ).
    check LF_NODE_KEY is not initial.

    ME->R_TREE->NODE_GET_USER_OBJECT( exporting NODE_KEY    = LF_NODE_KEY
                                      importing USER_OBJECT = LR_USER_OBJECT ).

    check LR_USER_OBJECT is instance of ZCL_VCXI_XCS_BOOSTER.

*** Consider only Booster as selectable, not Nodes
    check cast ZCL_VCXI_XCS_BOOSTER( LR_USER_OBJECT )->F_NIDAT is not initial.

    ME->R_BOOSTER = cast ZCL_VCXI_XCS_BOOSTER( LR_USER_OBJECT ).

*** If Gate is available, try to Update Integration Data
    if ME->R_GATE is bound.
***   Get Integration Data from Booster
      data(LR_IDAT_SVC) = ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( ME->R_BOOSTER->F_NIDAT ) ).

***   Get Provider for Integration Data
      data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_IDATSPV=>C_IPRVT_IDATSPV ).
      loop at LT_GATE into data(LR_GATE).
        if LR_GATE->R_CLSPR is instance of ZCL_VCXI_XCS_PR_IDATSPV.
          cast ZCL_VCXI_XCS_PR_IDATSPV( LR_GATE->R_CLSPR )->SET_IDAT( cast ZCL_VCXI_XCI_IDAT_SVC( LR_IDAT_SVC ) ).
        endif.
      endloop.
    endif.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME = IF_CONTAINER_NAME
        exceptions
          others         = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TREE.

    check ME->R_TREE is not bound.

*** Create the Tree Instance
    create object ME->R_TREE
      exporting
        NODE_SELECTION_MODE         = CL_GUI_SIMPLE_TREE=>NODE_SEL_MODE_SINGLE
      exceptions
        ILLEGAL_NODE_SELECTION_MODE = 1
        others                      = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check ME->R_CONTAINER is bound.

*** Create the Tree Control
    ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                       PARENT                       = ME->R_CONTAINER
                                     exceptions
                                       LIFETIME_ERROR               = 1
                                       CNTL_SYSTEM_ERROR            = 2
                                       CREATE_ERROR                 = 3
                                       FAILED                       = 4
                                       TREE_CONTROL_ALREADY_CREATED = 5
                                       others                       = 6 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
    field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_SIMPLE_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
    move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

    ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                         EVENTS                    = LT_EVENT
                                       exceptions
                                         ILLEGAL_EVENT_COMBINATION = 1
                                         UNKNOWN_EVENT             = 2
                                         others                    = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event Handler
    set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE.

  endmethod.
  method REFRESH_TREE.

***--------------------------------------------------------------------------------------
*** Get Expanded Nodes
    if ME->R_TREE is bound.
      ME->R_TREE->GET_EXPANDED_NODES( importing NODE_KEY_TABLE = ME->T_EXP_NODE ).
      move ABAP_TRUE to ME->F_EXP_NODE.
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Tree
    ME->INIT_CONTAINER( ).
    ME->INIT_TREE( ).

***--------------------------------------------------------------------------------------
*** Delete all Nodes
    ME->R_TREE->DELETE_ALL_NODES( ).

***--------------------------------------------------------------------------------------
*** Fill Tree
    ME->FILL_TREE( ).

  endmethod.
  method REMOVE_EMPTY_NODES.

    data: LT_NODE type TREEMSNOTA.


*** Loop on current children
    loop at CT_NODE into data(LS_NODE) where RELATKEY eq IF_NODE_KEY.

      ME->REMOVE_EMPTY_NODES( exporting IF_NODE_KEY = LS_NODE-NODE_KEY
                              changing  CT_NODE     = CT_NODE ).

    endloop.

*** Delete Node if there are no further children and it is a folder
    if not LINE_EXISTS( CT_NODE[ RELATKEY = IF_NODE_KEY ] ).
      delete CT_NODE where NODE_KEY eq IF_NODE_KEY
                       and ISFOLDER eq ABAP_TRUE.
    endif.

  endmethod.
  method SET_PF_STATUS.

    set pf-status '0100' of program 'SAPLZVCXI_XCS_POPUP_BOOSTER'.

  endmethod.
  method START.

    data: LR_POPUP_BOOSTER type ref to ZCL_VCXI_XCS_POPUP_BOOSTER.

    create object LR_POPUP_BOOSTER
      exporting
        IR_GATE  = IR_GATE
        IS_CMPRK = IS_CMPRK.

*** Call Popup
    call function 'ZVCXI_XCS_POPUP_BOOSTER_START'
      exporting
        IR_POPUP_BOOSTER = LR_POPUP_BOOSTER.

*** Return selected Booster
    RR_BOOSTER = LR_POPUP_BOOSTER->R_BOOSTER.

*** Free the Popup
    LR_POPUP_BOOSTER->DO_FREE( ).

  endmethod.
