
class ZCL_VCXI_XCSS_GRID_MRP_AREA definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSS_S_MRP_AREA_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  methods CHANGE_STYLE_MRP_AREA
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_MRP_AREA_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_MRP_AREA_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods ADD_PRVDR
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_GRID_MRP_AREA definition
class ZCL_VCXI_XCSS_GRID_MRP_AREA implementation.
  method ADD_PRVDR.

    data: LF_ID type /VCXI/CKX_ID.
    data: LS_SHLP type SHLP_DESCR.
    data: LT_RESULT type table of DDSHRETVAL.


***----------------------------------------------------------------------------
*** Find ID for Provider
    move IF_ID to LF_ID.

    if LF_ID is initial and
       LINES( ME->T_PRVDR_DEF ) gt 1.
***   No Provider Type available to add
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '013' ).

    elseif LF_ID is initial and
           LINES( ME->T_PRVDR_DEF ) le 1.
      LF_ID = value #( ME->T_PRVDR_DEF[ 1 ]-ID optional ).
      if LF_ID is initial.
***     No Provider Type available to add
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '013' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Determine Search Help for MRP Area
    call function 'F4IF_DETERMINE_SEARCHHELP'
      exporting
        TABNAME           = 'ZVCXI_XCSS_S_MRP_AREA_GRID'
        FIELDNAME         = 'BERID'
      importing
        SHLP              = LS_SHLP
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3.

*** Adjust Search Help
    LS_SHLP-SELOPT = value #( ( SHLPNAME  = LS_SHLP-SHLPNAME
                                SHLPFIELD = 'WERZG'
                                SIGN = 'I'  OPTION = 'EQ'  LOW = cast ZCL_VCXI_XCSS_PR_MRP( ME->R_GATE->R_CLSPR )->GET_WERKS( ) )
                              ( SHLPNAME  = LS_SHLP-SHLPNAME
                                SHLPFIELD = 'BERTY'
                                SIGN = 'I'  OPTION = 'EQ'  LOW = '2' )
                            ).
    LS_SHLP-FIELDPROP[ FIELDNAME = 'WERZG' ]-SHLPSELDIS = ABAP_TRUE.
    LS_SHLP-FIELDPROP[ FIELDNAME = 'BERTY' ]-SHLPSELDIS = ABAP_TRUE.

*** Call Search Help
    call function 'F4IF_START_VALUE_REQUEST'
      exporting
        SHLP          = LS_SHLP
        MULTISEL      = ABAP_TRUE
      tables
        RETURN_VALUES = LT_RESULT.

***----------------------------------------------------------------------------
*** Get existing MPR Areas
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP_AREA=>C_IPRVT_XCS_MRP_AREA
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      delete LT_RESULT where FIELDNAME eq 'BERID'
                        and  FIELDVAL  eq cast ZCL_VCXI_XCSS_PR_MRP_AREA( LR_GATE->R_CLSPR )->GET_BERID( ).
    endloop.

***----------------------------------------------------------------------------
*** Process selected MRP Area
    loop at LT_RESULT into data(LS_RESULT)
                     where FIELDNAME eq 'BERID'.
***   Add Standard Provider
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
      if LR_GATE->IS_INUSE( ) eq ABAP_FALSE.
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.

***   Add MRP Area to Provider
      cast ZCL_VCXI_XCSS_PR_MRP_AREA( LR_GATE->R_CLSPR )->SET_BERID( IF_BERID = conv #( LS_RESULT-FIELDVAL ) ).
    endloop.

  endmethod.
  method CHANGE_STYLE_MRP_AREA.

    data: LS_MRP_AREA_VIS type ZVCXI_XCSS_S_MRP_AREA_VIS.
    data: LR_PR_MRP_AREA type ref to ZCL_VCXI_XCSS_PR_MRP_AREA.

    free CT_STYL.

***--------------------------------------------------------------------------------------
*** Get PR Class
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_MRP_AREA.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_PR_MRP_AREA is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_MRP_AREA_VIS.

***--------------------------------------------------------------------------------------
*** Enable Fields in MRP Procedure
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISMM'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISPO'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Enable Fields in Lot Size Data
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISLS'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTMI'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTMA'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTFE'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'EISBE'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type
    ME->F_IPRVT = ZCL_VCXI_XCSS_PR_MRP_AREA=>C_IPRVT_XCS_MRP_AREA.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE.
    field-symbols: <S_FCAT> type LVC_S_FCAT.


***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

*        when 'WERKS'.
*          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
*          move 0            to <S_FCAT>-COL_POS.

***     Editable Fields in MRP Procedure
        when 'DISMM' or 'DISPO'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

***     Editable Fields in Lot Size Data
        when 'DISLS' or 'BSTMI' or 'BSTMA'
                     or 'BSTFE' or 'EISBE'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT type LVC_S_LAYO.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <T_STYL> type          LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ME->F_IPRVT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
***   Add Line with Gate Key Data
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_XCSS_S_MRP_AREA_GRID( POSID  = LR_GATE->GET_POSID( )
                                                           GATKY  = LR_GATE->F_GATKY
                                                           R_GATE = LR_GATE
                                                         ) to <S_DATA>.

***   Get Visualization Data
      ME->GET_MRP_AREA_VIS( exporting IR_GATE = LR_GATE
                            changing  CS_DATA = <S_DATA> ).

***   Set Style Details
      if LS_LAYOUT-STYLEFNAME is not initial.
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_MRP_AREA( exporting IR_GATE = LR_GATE
                                               IS_DATA = <S_DATA>
                                      changing CT_STYL = <T_STYL> ).
***       Call DVC Servcie - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endif.
    endloop.

  endmethod.
  method GET_MRP_AREA_VIS.

    data: LS_MRP_AREA_VIS type ZVCXI_XCSS_S_MRP_AREA_GRID.
    data: LR_PR_MRP_AREA  type ref to ZCL_VCXI_XCSS_PR_MRP_AREA.


***--------------------------------------------------------------------------------------
*** Get PR Class
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_MRP_AREA.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_PR_MRP_AREA is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_MRP_AREA_VIS.

***--------------------------------------------------------------------------------------
*** MRP Area
    LS_MRP_AREA_VIS-BERID = LR_PR_MRP_AREA->GET_BERID( importing EF_BERTX = LS_MRP_AREA_VIS-BERTX
                                                                 EF_WERKS = LS_MRP_AREA_VIS-WERKS ).

***--------------------------------------------------------------------------------------
*** MRP Type
    LS_MRP_AREA_VIS-DISMM = LR_PR_MRP_AREA->GET_DISMM( importing EF_DIBEZ = LS_MRP_AREA_VIS-DIBEZ ).

*** MRP Controller
    LS_MRP_AREA_VIS-DISPO = LR_PR_MRP_AREA->GET_DISPO( ).

***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    LS_MRP_AREA_VIS-DISLS = LR_PR_MRP_AREA->GET_DISLS( importing EF_LOSLT = LS_MRP_AREA_VIS-LOSLT ).

*** Minimum/Maximum/Fixed Lot Size
    LS_MRP_AREA_VIS-S_BSTMI = LR_PR_MRP_AREA->GET_BSTMI( ).
    LS_MRP_AREA_VIS-S_BSTMA = LR_PR_MRP_AREA->GET_BSTMA( ).
    LS_MRP_AREA_VIS-S_BSTFE = LR_PR_MRP_AREA->GET_BSTFE( ).

*** Safety Stock
    LS_MRP_AREA_VIS-S_EISBE = LR_PR_MRP_AREA->GET_EISBE( ).

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_MRP_AREA_VIS to CS_DATA.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_MRP_AREA_GRID type ZVCXI_XCSS_S_MRP_AREA_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          move-corresponding <S_DATA> to LS_MRP_AREA_GRID.

          check LS_MRP_AREA_GRID-R_GATE is bound and
                LS_MRP_AREA_GRID-R_GATE->F_FREED is initial.

***       Set Values to PR Class
          ME->SET_MRP_AREA_VIS( IR_GATE = LS_MRP_AREA_GRID-R_GATE
                                IS_DATA = <S_DATA> ).

        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method SET_MRP_AREA_VIS.

    data: LS_MRP_AREA_VIS_OLD type        ZVCXI_XCSS_S_MRP_AREA_VIS,
          LS_MRP_AREA_VIS_NEW type        ZVCXI_XCSS_S_MRP_AREA_VIS.
    data: LR_PR_MRP_AREA  type ref to ZCL_VCXI_XCSS_PR_MRP_AREA.


***--------------------------------------------------------------------------------------
*** Get PR Class
    check IR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSS_PR_MRP_AREA.
    LR_PR_MRP_AREA ?= IR_GATE->R_CLSPR.
    check LR_PR_MRP_AREA is bound.

*** Get old Values
    ME->GET_MRP_AREA_VIS( exporting IR_GATE = IR_GATE
                       changing  CS_DATA = LS_MRP_AREA_VIS_OLD ).
*** Get new Values
    move-corresponding IS_DATA to LS_MRP_AREA_VIS_NEW.

***--------------------------------------------------------------------------------------
*** MRP Type
    if LS_MRP_AREA_VIS_OLD-DISMM ne LS_MRP_AREA_VIS_NEW-DISMM.
      LR_PR_MRP_AREA->SET_DISMM( IF_DISMM = LS_MRP_AREA_VIS_NEW-DISMM
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** MRP Controller
    if LS_MRP_AREA_VIS_OLD-DISPO ne LS_MRP_AREA_VIS_NEW-DISPO.
      LR_PR_MRP_AREA->SET_DISPO( IF_DISPO = LS_MRP_AREA_VIS_NEW-DISPO
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    if LS_MRP_AREA_VIS_OLD-DISLS ne LS_MRP_AREA_VIS_NEW-DISLS.
      LR_PR_MRP_AREA->SET_DISLS( IF_DISLS = LS_MRP_AREA_VIS_NEW-DISLS
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Minimum Lot Size
    if LS_MRP_AREA_VIS_OLD-S_BSTMI ne LS_MRP_AREA_VIS_NEW-S_BSTMI.
      LR_PR_MRP_AREA->SET_BSTMI( IS_BSTMI = LS_MRP_AREA_VIS_NEW-S_BSTMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Maximum Lot Size
    if LS_MRP_AREA_VIS_OLD-S_BSTMA ne LS_MRP_AREA_VIS_NEW-S_BSTMA.
      LR_PR_MRP_AREA->SET_BSTMA( IS_BSTMA = LS_MRP_AREA_VIS_NEW-S_BSTMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Fixed Lot Size
    if LS_MRP_AREA_VIS_OLD-S_BSTFE ne LS_MRP_AREA_VIS_NEW-S_BSTFE.
      LR_PR_MRP_AREA->SET_BSTFE( IS_BSTFE = LS_MRP_AREA_VIS_NEW-S_BSTFE
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Safety Stock
    if LS_MRP_AREA_VIS_OLD-S_EISBE ne LS_MRP_AREA_VIS_NEW-S_EISBE.
      LR_PR_MRP_AREA->SET_EISBE( IS_EISBE = LS_MRP_AREA_VIS_NEW-S_EISBE
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
