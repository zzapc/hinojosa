
class ZCL_VCXI_P5SS_PR_RLFG definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XFG
  create public .

public section.

  interfaces ZIF_VCXI_P5SS_COMM_PREV .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .
  interfaces ZIF_VCXI_PXSS_WIDIM .

  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WEBWI_CHANGED type /VCXI/VKSC_IEVNT value 'WEBWI_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P5_RLFG type /VCXI/VKSC_IPRVT value 'ZVCXI_P5SS_RLFG' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_WEBWI type /VCXI/VKS_PARID value 'ZVCXI_PX_WEBWI' ##NO_TEXT.

  methods GET_REPLE
    returning
      value(RS_REPLE) type ZVCXI_PXS_S_REPLE
    raising
      /VCXI/CX_CKX .
  methods GET_WEBWI_TOTAL
    returning
      value(RS_WEBWI) type ZVCXI_PXS_S_WEBWI
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PRINT
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUPS) type ZVCXI_PXS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_RLBPX
    exporting
      !EF_RLBPX type ZVCXI_P5S_RLBPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_RLBPROP) type ref to ZCL_VCXI_P5SS_BL_RLBPROP
    raising
      /VCXI/CX_CKX .
  methods GET_RLFPX
    exporting
      !EF_RLFPX type ZVCXI_P5S_RLFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_RLFPROP) type ref to ZCL_VCXI_P5SS_BL_RLFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_WEBWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WEBWI) type ZVCXI_PXS_S_WEBWI
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRINT
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_WEBWI
    importing
      !IS_WEBWI type ZVCXI_PXS_S_WEBWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FG~GET_HNDDIM
    redefinition .
  methods ZIF_VCXI_PXSS_FG~GET_QFACT
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_PRINT type /VCXI/VKSC_IEVNT value 'RECALC_PRINT' ##NO_TEXT.
  constants C_IEVNT_O_RLFPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_RLFPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLFPX' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods SET_RLFPX
    importing
      !IF_RLFPX type ZVCXI_P5S_RLFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_WEBWI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_DIKEY
    redefinition .
  methods HANDLE_RECALC_PRODH
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SS_PR_RLFG definition
class ZCL_VCXI_P5SS_PR_RLFG implementation.
  method CHECK_WEBWI.

    if ME->GET_WEBWI( )-WEBWI gt 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Web Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Web Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P5SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.
    endif.

  endmethod.
  method GET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

    RF_FOVRR = switch #( LF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                  when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC then ABAP_FALSE
                                                                        else ABAP_UNDEFINED ).

  endmethod.
  method GET_NOUPS.

*** Get fixed Number of Ups
    RF_NOUPS = 1.

  endmethod.
  method GET_REPLE.

    RS_REPLE = ME->GET_RLFPX( )->S_REPLE.

  endmethod.
  method GET_RLBPX.

***--------------------------------------------------------------------------------------
*** Create fresh instance of Roll Backward Property
    RR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( ).

    if RR_BL_RLBPROP is bound.
***   Cost Split Distribution
      RR_BL_RLBPROP->SET_CSPLIT( IT_CSPLIT = ME->ZIF_VCXI_PXSS_FG~GET_CSPLIT( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Return Roll Backward Property XML (Outbound)
    if EF_RLBPX is requested.
      move RR_BL_RLBPROP->GET_RLBPX( ) to EF_RLBPX.
    endif.

  endmethod.
  method GET_RLFPX.

    data: LF_ALLOWED type ABAP_BOOL,
          LF_SETBY   type /VCXI/VKSR_SETBY.
    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LT_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM.


***--------------------------------------------------------------------------------------
*** Get Roll Forward Property (Inbound)
    RR_BL_RLFPROP = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Print Definition (in case of Separation)
    LT_PRINT_COM = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is not initial.
      RR_BL_RLFPROP->SET_PRINT( IT_PRINT = LT_PRINT_COM ).
    endif.

***--------------------------------------------------------------------------------------
*** Get new Roll Forward Property XML
    if EF_RLFPX is requested.
      EF_RLFPX = RR_BL_RLFPROP->GET_RLFPX( ).
    endif.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Web Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WEBWI( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Web Width
    ME->CHECK_WEBWI( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

***--------------------------------------------------------------------------------------
*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_WEBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).
    RS_WEBWI-WEBWI     = LS_PARAM-ATFLV.
    RS_WEBWI-WEBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_WEBWI_TOTAL.

    data: LS_WEBWI type ZVCXI_PXS_S_WEBWI.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get own Web Width as Base (for Unit)
    RS_WEBWI = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI( ).

*** Get all Roll Finished Good Provider
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P5SS_PR_RLFG=>C_IPRVT_P5_RLFG
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      check LR_GATE ne ME->R_GATE.  "arleady added as based

      LS_WEBWI = cast ZCL_VCXI_P5SS_PR_RLFG( LR_GATE->R_CLSPR )->ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WEBWI-WEBWI
                                                          IF_CALCV_UOM_1 = RS_WEBWI-WEBWI_UOM
                                                          IF_CALCV_2     = LS_WEBWI-WEBWI
                                                          IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = RS_WEBWI-WEBWI_UOM
                                                importing EF_CALCV       = RS_WEBWI-WEBWI
                                                          EF_CALCV_UOM   = RS_WEBWI-WEBWI_UOM ).
    endloop.

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY       type ZVCXI_P0SS_S_DIKEY,
          LS_WEBWI_TOTAL type ZVCXI_PXS_S_WEBWI,
          LS_WEBWI       type ZVCXI_PXS_S_WEBWI.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.

***------------------------------------------------------------------------------------------------
*** Determine Factor
    if LINES( LT_GATE ) gt 1.     " not only me
***   Get Output Web Width (Outbound) as Total and own Web Width (Inbound)
      data(LR_PR_OUTPUT) = cast ZCL_VCXI_P5SS_PR_OUTPUT( ME->GET_PRVDR_OUTPUT( ) ).
      if LR_PR_OUTPUT is bound.
        LS_WEBWI_TOTAL = LR_PR_OUTPUT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
      endif.
      LS_WEBWI = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI( ).

***   Determine Factor based on Area
      if LS_WEBWI_TOTAL-WEBWI gt 0.
        LF_FACTOR = LS_WEBWI-WEBWI / LS_WEBWI_TOTAL-WEBWI.
      else.
        LF_FACTOR = 0.
      endif.
    else.
      LF_FACTOR = 1.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_PRODH.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_BL_RLFPROP type ref to ZCL_VCXI_P5SS_BL_RLFPROP.


    ME->ZIF_VCXI_PXSS_FG~GET_PRODH( importing EF_SETBY = LF_SETBY ).

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Set Forwarded Product Hierarchy
    LR_BL_RLFPROP = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( ).
    if LR_BL_RLFPROP is bound.
      ME->ZIF_VCXI_PXSS_FG~SET_PRODH( IF_PRODH = LR_BL_RLFPROP->F_PRODH ).
    endif.

  endmethod.
  method SET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


    LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE  then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                  when ABAP_FALSE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                  else SPACE ).

    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IF_SETBY = LF_SETBY ).

  endmethod.
  method SET_RLFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).

    move IF_RLFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLFPX_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_WEBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).

    LS_PARAM-ATFLV = IS_WEBWI-WEBWI.
    LS_PARAM-UNIT  = IS_WEBWI-WEBWI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEBWI_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RF_NOUPS *= ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLBPX.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property (Outbound)
    RR_BL_RLBPROP = ME->GET_RLBPX( ).

***--------------------------------------------------------------------------------------
*** Apply Distribution Key to Cost Split
    RR_BL_RLBPROP->ADJ_CSPLIT_BY_DIKEY( IS_DIKEY = ME->GET_DIKEY( ) ).

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property Instance
    if EF_RLBPX is requested.
      move RR_BL_RLBPROP->GET_RLBPX( ) to EF_RLBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).
    move LS_PARAM-STRNG to EF_RLFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Forward Property Instance
    if RR_BL_RLFPROP is requested.
      RR_BL_RLFPROP = ZCL_VCXI_P5SS_BL_RLFPROP=>FACTORY( IF_RLFPX = EF_RLFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI.

*** Get Web Width (Outbound)
    RS_WEBWI = ME->GET_WEBWI( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RS_WEBWI-WEBWI *= ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT      type ZVCXI_PXS_S_SURWT,
          LS_SURWT_NEXT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P5SS_COMM_NEXT,
          LR_BL_RLFPROP      type ref to ZCL_VCXI_P5SS_BL_RLFPROP,
          LR_BL_RLFPROP_NEXT type ref to ZCL_VCXI_P5SS_BL_RLFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Get Sum of Surface Weight
      LS_SURWT_NEXT = LR_COMM_NEXT->GET_SURWT( ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Combine Roll Forward Property
      LR_BL_RLFPROP_NEXT = LR_COMM_NEXT->GET_RLFPX( ).
      if LR_BL_RLFPROP is not bound.
        move LR_BL_RLFPROP_NEXT to LR_BL_RLFPROP.
      else.
        LR_BL_RLFPROP->MERGE( IR_BL_RLFPROP = LR_BL_RLFPROP_NEXT ).
      endif.

    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Roll Forward Property XML
    if LR_BL_RLFPROP is bound.
      ME->SET_RLFPX( IF_RLFPX = LR_BL_RLFPROP->GET_RLFPX( ) ).
    else.
      ME->SET_RLFPX( IF_RLFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LR_DATA_SUPER   type ref to DATA.
    field-symbols: <S_FDI_SUPER> type ANY,
                   <S_FDI_RLFG>  type ZVCXI_P5SS_S_FDI_RLFG.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P5SS_S_FDI_RLFG.
    assign RR_DATA->* to <S_FDI_RLFG>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( importing ET_FDMEX = ET_FDMEX ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_RLFG> = corresponding #( <S_FDI_SUPER> ).
    endif.

***--------------------------------------------------------------------------------------
*** Web Width (Outbound)
    <S_FDI_RLFG>-S_WEBWI = ME->GET_WEBWI( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_RLFG_OLD type ZVCXI_P5SS_S_FDI_RLFG,
          LS_FDI_RLFG_NEW type ZVCXI_P5SS_S_FDI_RLFG.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_RLFG_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_RLFG_NEW = corresponding #( <S_DATA> ).
    endif.

*** Set SUPER Data
    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = IR_DATA
                                       IR_DATA_OLD = LR_DATA_OLD
                                       IT_FDMEX    = IT_FDMEX ).


***--------------------------------------------------------------------------------------
*** Set Web Width
    if LS_FDI_RLFG_OLD-S_WEBWI ne LS_FDI_RLFG_NEW-S_WEBWI and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'WEBWI' ] ).
      ME->SET_WEBWI( IS_WEBWI = LS_FDI_RLFG_NEW-S_WEBWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_HNDDIM.

    break TBD.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_QFACT.

*** Get Total Web Width of all FGs
    data(LS_WEBWI_TOTAL) = ME->GET_WEBWI_TOTAL( ).

*** Get Web Width (w/o Number of Outs)
    data(LS_WEBWI_OWN) = ME->GET_WEBWI( ).

*** Determine Factor
    if LS_WEBWI_TOTAL-WEBWI ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WEBWI_OWN-WEBWI
                                                          IF_CALCV_UOM_1 = LS_WEBWI_OWN-WEBWI_UOM
                                                          IF_CALCV_2     = LS_WEBWI_TOTAL-WEBWI
                                                          IF_CALCV_UOM_2 = LS_WEBWI_TOTAL-WEBWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = RF_QFACT ).
    else.
      RF_QFACT = 0.
    endif.

*** Consider Component Ratio
    RF_QFACT *= SUPER->ZIF_VCXI_PXSS_FG~GET_QFACT( ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.
    EF_SETBY = LS_PARAM-SETBY.


***--------------------------------------------------------------------------------------
*** Fallback in case of no Separation
    if EF_SETBY eq SPACE.
      RT_PRINT_COM = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( )->T_PRINT.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->GET_FOVRR_PRINT( ) when ABAP_TRUE then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_RHNDL_DFLT.

    data: LR_APPDATA  type ref to ZCL_VCXI_XCS_APPDATA.


*** Get Default Values
    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    RS_RHNDL_DFLT = ZCL_VCXI_PXSS_BL_RHNDL=>GET_DFLT_FG( IF_WERKS = ME->GET_WERKS( )
                                                         IF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR
                                                         IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR ).

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WISWG.

*** Surface Weight (Outbound)
    RS_WISWG = corresponding #( ME->GET_SURWT( )
                                mapping WISWG     = SURWT
                                        WISWG_UOM = SURWT_UOM ).

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WITHI.

*** Get Caliper of Forward Property XML (Outbound)
    RS_WITHI = corresponding #( ME->GET_RLFPX( )->S_CALIP
                                mapping WITHI     = CALIP
                                        WITHI_UOM = CALIP_UOM ).

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WIWID.

*** Web Width (Outbound)
    RS_WIWID = corresponding #( ME->GET_WEBWI( )
                                mapping WIWID     = WEBWI
                                        WIWID_UOM = WEBWI_UOM ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


***------------------------------------------------------------------------------------------------
*** Get Attribute Data
    data(LS_WEBWI) = ME->GET_WEBWI( ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_WEBWI-WEBWI
                                          IF_UOM   = LS_WEBWI-WEBWI_UOM
                                changing  CT_ATTR  = LT_ATTR ).
    data(LR_BL_RLFPROP) = ME->GET_RLFPX( ).
    if LR_BL_RLFPROP is bound.
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LR_BL_RLFPROP->GET_SBSTR( )    "Substrate
                                  changing  CT_ATTR  = LT_ATTR ).
    endif.

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR     = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON      = 'sap-icon://form'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    data(LR_PR_SHIPMGR) = cast ZCL_VCXI_PXSU_PR_SHIPMGR( ME->GET_PRVDR_SHIPMGR( ) ).
    if LR_PR_SHIPMGR is bound.
      LR_PR_SHIPMGR->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                              changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endif.

  endmethod.
