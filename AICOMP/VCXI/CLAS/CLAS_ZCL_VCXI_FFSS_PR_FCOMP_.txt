
class ZCL_VCXI_FFSS_PR_FCOMP definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_XCOMP
  create public .

public section.

  constants C_IPRVT_FF_FCOMP type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_FCOMP' ##NO_TEXT.

  methods IS_MERGE_ALLOWED
    redefinition .
protected section.

  methods DET_SPVRE_CHILDREN
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_PR_FCOMP definition
class ZCL_VCXI_FFSS_PR_FCOMP implementation.
  method DET_SPVRE_CHILDREN.

    data: LF_TABIX        type        SYTABIX.
    data: LS_PRVDR_CSTEPS type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_XCONR        type        ZVCXI_F0SS_S_XCONR,
          LS_XCONA        type        ZVCXI_F0SS_S_XCONA.
    data: LT_GATE            type        /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILDS_ALL type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR           type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_CSTEPS    type        ZVCXI_F0SS_TT_PRVDR_DEF,
          LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_XCONR           type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE_INPUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CHILD       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_DEST        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FCONI       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CONV        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOURCE_SPEC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_DEST_SPEC   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_INPUT         type ref to ZCL_VCXI_FFSS_PR_INPUT,
          LR_PR_CSTEP         type ref to ZCL_VCXI_F0SS_PR_CSTEP,
          LR_PR_SPEC          type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_SEQ              type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOURCE      type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_SPVRE_CHILD> type ZVCXI_F0SS_S_SPVRE_CHILD.

    refresh ET_SPVRE_CHILD.

*** Buffer Source Gate
    move IR_GATE_SOURCE to LR_GATE_SOURCE.

***--------------------------------------------------------------------------------------
*** Get Selected node --> CSTEPs
    try .
        move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP.
    endtry.
    if LR_PR_CSTEP is bound.
***--------------------------------------------------------------------------------------
***   Get Source Conversion Steps via Specification
      LT_PRVDR = LR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
      read table LT_PRVDR into LR_GATE_SOURCE_SPEC index 1.
      if LR_GATE_SOURCE_SPEC is bound.
        try .
            move LR_GATE_SOURCE_SPEC->R_CLSPR ?to LR_PR_SPEC.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_PR_SPEC.
        endtry.

        if LR_PR_SPEC is bound.
          LR_PR_SPEC->GET_CSTEPS_DEF( exporting IF_NOCHECK = ABAP_TRUE
                                      importing ET_PRVDR_CSTEPS = LT_PRVDR_CSTEPS ).

          read table LT_PRVDR_CSTEPS into LS_PRVDR_CSTEPS with key ID = LR_GATE_SOURCE->F_ID.
          if SY-SUBRC is initial.
***         Get Destination Conversion Gate
            if IR_XCOMP_DEST is bound.
              LT_PRVDR = IR_XCOMP_DEST->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
              read table LT_PRVDR into LR_GATE_DEST_SPEC index 1.
              if LR_GATE_DEST_SPEC is bound.
***             Get childs of Destination Specification
                LT_PRVDR_DEF = LR_GATE_DEST_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
                read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'CONV'.
                if LS_PRVDR_DEF-IPRVT is not initial.
***               Get Gates of Provider
                  LT_GATE = LR_GATE_DEST_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                                          IF_INUSE = ABAP_TRUE ).

                  read table LT_GATE into LR_GATE_CONV with key TABLE_LINE->F_ID = 'CONV'.
                endif.
              endif.
            endif.

***         Set the Destination supervised element parent
            insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
            move LR_GATE_CONV to <S_SPVRE_CHILD>-R_GATE_PARENT.
            move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.

***         Get index of selected Gate
            read table LS_PRVDR_CSTEPS-T_GATE_SEQ with key TABLE_LINE = LR_GATE_SOURCE
                                                  transporting no fields.
            if SY-SUBRC is initial.
              move SY-TABIX to LF_TABIX.
            endif.

            loop at LS_PRVDR_CSTEPS-T_GATE_SEQ into LR_SEQ.
              check SY-TABIX le LF_TABIX.
              append LR_SEQ to <S_SPVRE_CHILD>-T_GATE_CHILDS.
            endloop.
          endif.

***       Collect also Input Of Source Film Component
          LT_PRVDR_DEF = LR_GATE_SOURCE_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
          read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'INPUT'.
          if LS_PRVDR_DEF-IPRVT is not initial.
***         Get Gates of Provider
            LT_GATE = LR_GATE_SOURCE_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                                      IF_INUSE = ABAP_TRUE ).

            read table LT_GATE into LR_GATE_SOURCE with key TABLE_LINE->F_ID = 'INPUT'.
          endif.
        endif.
      else.
***--------------------------------------------------------------------------------------
***     Get Inbound Conversion Steps
        LR_PR_CSTEP->GET_INB_CSTEPS_DEF( exporting IF_NOCHECK = ABAP_TRUE
                                         importing ET_PRVDR_CSTEPS = LT_PRVDR_CSTEPS ).

        read table LT_PRVDR_CSTEPS into LS_PRVDR_CSTEPS with key ID = LR_GATE_SOURCE->F_ID.
        if SY-SUBRC is initial.
***       Determine also possible other children (e.g. Price Scales)
          ME->GET_CHILD_PRVDR( exporting IR_GATE         = LS_PRVDR_CSTEPS-R_PARENT_GATE
                               changing   CT_GATE_CHILDS = LT_GATE_CHILDS_ALL ).
***       Keep all non-inbound conversion steps
          loop at LT_GATE_CHILDS_ALL into LR_GATE_CHILD.
            move SY-TABIX to LF_TABIX.
            read table LS_PRVDR_CSTEPS-T_GATE_SEQ with key TABLE_LINE = LR_GATE_CHILD transporting no fields.
            check SY-SUBRC eq 0.
            delete LT_GATE_CHILDS_ALL index LF_TABIX.
          endloop.
          clear: LF_TABIX.

***       Get Destination Input Supervised Runtime Element
          if IR_XCOMP_DEST is bound.
            LT_GATE  = IR_XCOMP_DEST->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                                 IF_INUSE  = ABAP_TRUE ).
            read table LT_GATE into LR_GATE_INPUT index 1.
            if LR_GATE_INPUT is bound.

              if LINES( LS_PRVDR_CSTEPS-T_GATE_SEQ ) is not initial .
***             Get index of selected Gate
                read table LS_PRVDR_CSTEPS-T_GATE_SEQ with key TABLE_LINE = LR_GATE_SOURCE
                                                      transporting no fields.
                if SY-SUBRC is initial.
                  move SY-TABIX to LF_TABIX.
                endif.

***--------------------------------------------------------------------------------------
***             Create the Destination 'Film Procurement' / 'Film Connection In' Node
                LR_GATE_DEST = LR_GATE_INPUT->CREATE_ELEMENT( IF_ID = LS_PRVDR_CSTEPS-R_PARENT_GATE->F_ID ).
                if LR_GATE_DEST is bound.
***               Set in Use
                  if LR_GATE_DEST->GET_USYNC( ) eq ABAP_FALSE.
                    LR_GATE_DEST->SET_INUSE( IF_INUSE = ABAP_TRUE ).
                  endif.

***               Set the Destination supervised element parent
                  insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
                  move LS_PRVDR_CSTEPS-R_PARENT_GATE to <S_SPVRE_CHILD>-R_GATE_SOURCE.
                  move LR_GATE_DEST to <S_SPVRE_CHILD>-R_GATE_PARENT.
                  move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.

***               Set the children of the Destination Element
                  loop at LS_PRVDR_CSTEPS-T_GATE_SEQ into LR_SEQ.
                    check SY-TABIX le LF_TABIX.
                    append LR_SEQ to <S_SPVRE_CHILD>-T_GATE_CHILDS.
                  endloop.
                endif.

***             Add additional child provider to target
                append lines of LT_GATE_CHILDS_ALL to <S_SPVRE_CHILD>-T_GATE_CHILDS.

***--------------------------------------------------------------------------------------
***             Get Source Gate Input
                LT_GATE = LR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT
                                                     IF_INUSE = ABAP_TRUE ).
                read table LT_GATE into LR_GATE_INPUT index 1.
                if LR_GATE_INPUT is bound.
***               Create the Source Film Connection In Node
                  LR_GATE_FCONI = LR_GATE_INPUT->CREATE_ELEMENT( IF_ID = 'FCONI' ).
                  if LR_GATE_FCONI is bound.
***                 Set in Use
                    if LR_GATE_FCONI->GET_USYNC( ) eq ABAP_FALSE.
                      LR_GATE_FCONI->SET_INUSE( IF_INUSE = ABAP_TRUE ).
                    endif.

***                 Set the Destination supervised element parent
                    insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
                    move LR_GATE_FCONI to <S_SPVRE_CHILD>-R_GATE_PARENT.

***                 Set the remaining children of the Source Element
                    loop at LS_PRVDR_CSTEPS-T_GATE_SEQ into LR_SEQ.
                      check SY-TABIX gt LF_TABIX.

                      append LR_SEQ to <S_SPVRE_CHILD>-T_GATE_CHILDS.
                    endloop.

***                 Get current Connections
                    if IR_PR_SOV is bound.

***                   Get FCONI of FCOMP Destination
                      if IR_XCOMP_DEST is bound.
                        try .
                            move IR_XCOMP_DEST->R_CLSPR ?to LS_XCONA-R_ANCHI.
                          catch CX_SY_MOVE_CAST_ERROR.
                            clear LS_XCONA-R_ANCHI.
                        endtry.
                      endif.

***                   Get current Connections
                      LT_XCONR = IR_PR_SOV->GET_XCONR( ).
                      loop at LT_XCONR into LS_XCONR where R_GATE_IN eq LS_PRVDR_CSTEPS-R_PARENT_GATE.
***                     Found an existent FCONO -> R_GATE_OUT of FCOMP1
                        try .
                            move LS_XCONR-R_GATE_OUT->R_CLSPR ?to LS_XCONA-R_ANCHO.
                          catch CX_SY_MOVE_CAST_ERROR.
                            clear LS_XCONA-R_ANCHO.
                        endtry.

***                     Add Connection Anchorage
                        if LS_XCONA-R_ANCHI is bound and
                           LS_XCONA-R_ANCHO is bound.
                          append LS_XCONA to ET_XCONA.
                        endif.
                      endloop.

                    endif.
                  endif.
                endif.
              endif.
            endif.
          endif.
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Selected node --> INPUT
    try .
        move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.

    if LR_PR_INPUT is bound.
***   Get Destination Input Supervised Runtime Element
      if IR_XCOMP_DEST is bound.
        LT_GATE  = IR_XCOMP_DEST->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                             IF_INUSE  = ABAP_TRUE ).
        read table LT_GATE into LR_GATE_INPUT index 1.
        if LR_GATE_INPUT is bound.
***       Set the Destination supervised element parent
          insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
          move LR_GATE_INPUT to <S_SPVRE_CHILD>-R_GATE_PARENT.
          move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.

***       Get Childs Provider from Source
          ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE_SOURCE
                               changing CT_GATE_CHILDS = <S_SPVRE_CHILD>-T_GATE_CHILDS ).
        endif.
      endif.
    endif.

*** Get All Supervised Runtime Elements
    ET_SPVRE = IR_GATE_SOV->GET_SPVRE( ).

    loop at ET_SPVRE_CHILD assigning <S_SPVRE_CHILD> where R_GATE_PARENT is bound.
***   Get Supervised Runtime Element
      <S_SPVRE_CHILD>-R_SPVRE_PARENT = ME->GET_SPVRE_BY_GATE( IR_GATE  = <S_SPVRE_CHILD>-R_GATE_PARENT
                                                              IT_SPVRE = ET_SPVRE ).
    endloop.

***--------------------------------------------------------------------------------------
*** Get Source Film component
    LT_GATE = IR_GATE_SOV->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FCOMP=>C_IPRVT_FF_FCOMP
                                      IF_INUSE  = ABAP_TRUE
                                      IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into ER_XCOMP_SOURCE.
      check ER_XCOMP_SOURCE->IS_IN_LINE( IR_GATE = LR_GATE_SOURCE ) eq ABAP_TRUE.
      exit.
    endloop.

  endmethod.
  method IS_MERGE_ALLOWED.

    data: LF_NOOUT       type        ZVCXI_XCS_NOOUT.
    data: LS_TRWID       type        ZVCXI_F0S_S_TRWID.
    data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FCONI  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FCONO  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FCONO    type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_PR_OUTPUT   type ref to ZCL_VCXI_FFSS_PR_OUTPUT.

*** First we make sure XCOMP1->FCONO and XCOMP2->FCONI have only 1 child
    if SUPER->IS_MERGE_ALLOWED( exporting IR_XCOMP_OUT = IR_XCOMP_OUT ) ne ABAP_TRUE.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Check --> No inbound CSTEP in FCONI (second XCOMP)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                     IF_INUSE  = ABAP_TRUE ).

    read table LT_GATE into LR_GATE_INPUT index 1.
    if LR_GATE_INPUT is bound.
      LT_GATE = LR_GATE_INPUT->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FCONI=>C_IPRVT_FF_FCONI
                                          IF_INUSE  = ABAP_TRUE ).
      if LINES( LT_GATE ) gt 1.
***     More than 1 Film Connection In
        return.
      else.
        read table LT_GATE into LR_GATE_FCONI index 1.
        if LR_GATE_FCONI is bound.
          LT_GATE = LR_GATE_FCONI->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SS_PR_CSTEP=>C_IPRVT_F0_CSTEP
                                              IF_INUSE  = ABAP_TRUE ).
          if LINES( LT_GATE ) is not initial.
***         Inbound Conversion Step found
            return.
          endif.
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Check --> No Slitting on Output (First XCOMP)
    LT_GATE = IR_XCOMP_OUT->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHO=>C_IPRVT_ANCHO
                                       IF_INUSE  = ABAP_TRUE ).

    read table LT_GATE into LR_GATE_OUTPUT index 1.
    if LR_GATE_OUTPUT is bound.
      try .
          move LR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OUTPUT.
      endtry.
      if LR_PR_OUTPUT is bound.
        LR_PR_OUTPUT->GET_TRWID( importing ES_TRWID = LS_TRWID ).
        if LS_TRWID-TRWID is not initial.
***       Slitting detected -> Not allowed
          return.
        endif.
      endif.

      refresh LT_GATE.
      LT_GATE = LR_GATE_OUTPUT->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FCONO=>C_IPRVT_FF_FCONO
                                           IF_INUSE  = ABAP_TRUE ).
      read table LT_GATE into LR_GATE_FCONO index 1.
      if LR_GATE_FCONO is bound.
        try .
            move LR_GATE_FCONO->R_CLSPR ?to LR_PR_FCONO.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_PR_FCONO.
        endtry.
        if LR_PR_FCONO is bound.
          LF_NOOUT = LR_PR_FCONO->GET_NOOUT( ).
          if LF_NOOUT gt 1.
***         More than 1 Out found
            return.
          endif.
        endif.
      endif.
    endif.

    move ABAP_TRUE to RF_RETURN.

  endmethod.
endclass. "ZCL_VCXI_FFSS_PR_FCOMP implementation
