
class ZCL_VCXI_PXSS_BL_SCORE definition
  public
  create public .

public section.

  constants C_DIMEN_LENGTH type ZVCXI_PXS_DIMEN value 'L' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_PXS_DIMEN value 'W' ##NO_TEXT.
  class-data F_TSCOR_EDGE type ZVCXI_P0SS_TSCOR read-only .
  class-data F_TSCOR_KNIFE type ZVCXI_P0SS_TSCOR read-only .

  class-methods ADD_NOUPS
    importing
      !IF_DIMEN type ZVCXI_P0S_DIMEN
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SPTRN type ZVCXI_PXS_SPTRN optional
    exporting
      !ET_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR
    changing
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
    raising
      /VCXI/CX_CKX .
  class-methods ADD_REDUC
    importing
      !IF_DIMEN type ZVCXI_P0S_DIMEN
      !IS_REDUC_FIRST type ZVCXI_PXS_S_REDUC
      !IS_REDUC_LAST type ZVCXI_PXS_S_REDUC
    changing
      !CT_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR optional
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
    raising
      /VCXI/CX_CKX .
  class-methods ADD_TRIM
    importing
      !IF_DIMEN type ZVCXI_P0S_DIMEN
      !IS_TRIM_FIRST type ZVCXI_PXS_S_TRIM
      !IS_TRIM_LAST type ZVCXI_PXS_S_TRIM
    changing
      !CT_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR optional
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
    raising
      /VCXI/CX_CKX .
  class-methods ADJUST_SPTRN
    importing
      !IF_SPTRN type ZVCXI_PXS_SPTRN
      !IF_NOUPS type ZVCXI_PXS_NOUPS
    returning
      value(RF_SPTRN) type ZVCXI_PXS_SPTRN
    raising
      /VCXI/CX_CKX .
  class-methods ALLOC_REDUC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_PARID_TGT type /VCXI/VKS_PARID
    returning
      value(RS_REDUC) type ZVCXI_PXS_S_REDUC
    raising
      /VCXI/CX_CKX .
  class-methods ALLOC_TRIM
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_PARID_TGT type /VCXI/VKS_PARID
    returning
      value(RS_TRIM) type ZVCXI_PXS_S_TRIM
    raising
      /VCXI/CX_CKX .
  class-methods APPLY_MIRROR
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    changing
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods COUNT_SCORES
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !IF_INCL_EDGE type ABAP_BOOL default ABAP_FALSE
    exporting
      !EF_WIDTH type I
      !EF_LENGTH type I
    raising
      /VCXI/CX_CKX .
  class-methods GET_AP_BY_COM
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !IT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
      !IF_NOUPL type ZVCXI_PXS_NOUPL default 1
      !IF_SPTNL type ZVCXI_PXS_SPTNL optional
      !IF_NOUPW type ZVCXI_PXS_NOUPW default 1
      !IF_SPTNW type ZVCXI_PXS_SPTNW optional
      !IF_DIMEN_TRIM type ZVCXI_PXS_DIMEN optional
      !IS_TRLEF type ZVCXI_PXS_S_TRLEF optional
      !IS_TRRIG type ZVCXI_PXS_S_TRRIG optional
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP optional
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT optional
      !IF_DIMEN_REDUC type ZVCXI_PXS_DIMEN optional
      !IS_RDLEF type ZVCXI_PXS_S_RDLEF optional
      !IS_RDRIG type ZVCXI_PXS_S_RDRIG optional
      !IS_RDTOP type ZVCXI_PXS_S_RDTOP optional
      !IS_RDBOT type ZVCXI_PXS_S_RDBOT optional
      !IF_DIMEN_SCORE type ZVCXI_PXS_DIMEN optional
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
    exporting
      !ET_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP
      !ET_TAPE_AP type ZVCXI_PXSS_TT_TAPE_AP
      !ET_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  class-methods GET_COM_BY_AP
    importing
      !IT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP optional
      !IT_TAPE_AP type ZVCXI_PXSS_TT_TAPE_AP optional
      !IR_SCORES_AP type ref to ZIF_VCXI_PXSS_SCORES_AP optional
    exporting
      !ET_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !ET_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM
    raising
      /VCXI/CX_CKX .
  class-methods GET_COM_BY_SCSTR
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_UOM type /VCXI/CKX_UOM
    exporting
      !ET_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  class-methods GET_DESCR_ISCOR
    importing
      !IF_ISCOR type ZVCXI_P0SS_ISCOR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_EDGE_SCORES
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    exporting
      !EF_ISCOR_C type ZVCXI_P0SS_ISCOR
      !EF_ISCOR_L type ZVCXI_P0SS_ISCOR
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCORE_SHTN
    importing
      !IS_SHTNW type ZVCXI_P0SS_S_SHTNW
      !IS_SHTNL type ZVCXI_P0SS_S_SHTNL
    returning
      value(RT_SCORE_COM) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCSTR_AP
    importing
      !IT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP
      !IT_TAPE_AP type ZVCXI_PXSS_TT_TAPE_AP optional
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCSTR_COM
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !IT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  class-methods GET_SHTDIM
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    exporting
      !ES_SHTLE type ZVCXI_P0SS_S_SHTLE
      !ES_SHTWI type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  class-methods GET_TSCOR_EDGE
    returning
      value(RF_TSCOR) type ZVCXI_P0SS_TSCOR
    raising
      /VCXI/CX_CKX .
  class-methods RECALC_ADJ_SCORES
    importing
      !IS_SHTNW type ZVCXI_P0SS_S_SHTNW
      !IS_SHTNL type ZVCXI_P0SS_S_SHTNL
      !IF_DIMEN_TRIM type ZVCXI_PXS_DIMEN optional
      !IS_TRLEF type ZVCXI_PXS_S_TRLEF optional
      !IS_TRRIG type ZVCXI_PXS_S_TRRIG optional
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP optional
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT optional
    changing
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
    raising
      /VCXI/CX_CKX .
  class-methods REMOVE_TRIM
    importing
      !IF_DIMEN type ZVCXI_P0S_DIMEN
    changing
      !CT_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR optional
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !CT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM optional
    raising
      /VCXI/CX_CKX .
  class-methods TURN_SHTDIM
    changing
      !CS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !CS_SHTLE type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  class-methods REORG_ISCOR
    changing
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_ABPOS,
      ABPOS     type F,               "Absolute Position
      ABPOS_UOM type /VCXI/CKX_UOM,   "Unit of Absolute Position
      INDIC     type STRING,          "Indicator
      FAPPL     type ZVCXI_PXSS_FAPPL,
    end of YS_ABPOS .
  types:
    YT_ABPOS type table of YS_ABPOS with default key .

  class-methods CONV_ABPOS_TO_SCSTR
    importing
      !IT_ABPOS type YT_ABPOS
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  class-methods CONV_AP_TO_ABPOS
    importing
      !IT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP
      !IT_TAPE_AP type ZVCXI_PXSS_TT_TAPE_AP
    returning
      value(RT_ABPOS) type YT_ABPOS
    raising
      /VCXI/CX_CKX .
  class-methods CONV_SCSTR_TO_ABPOS
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_ABPOS_UOM type /VCXI/CKX_UOM
    returning
      value(RT_ABPOS) type YT_ABPOS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_BL_SCORE definition
class ZCL_VCXI_PXSS_BL_SCORE implementation.
  method ADD_NOUPS.

    data: LF_CSCOR      type ZVCXI_P0SS_CSCOR,
          LF_NSCOR_EDGE type ZVCXI_P0SS_NSCOR,
          LF_TSCOR_EDGE type ZVCXI_P0SS_TSCOR,
          LF_EDGE       type F,
          LF_TAPOS      type F.
    data: LS_SCORE_COM type ZVCXI_PXSS_S_SCORE_COM,
          LS_TAPE_COM  type ZVCXI_PXSS_S_TAPE_COM.
    data: LT_SCORE_COM    type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM     type ZVCXI_PXSS_TT_TAPE_COM,
          LT_SCORE_MIRROR type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_MIRROR  type ZVCXI_PXSS_TT_TAPE_COM.
    field-symbols: <S_SCORE_COM> type  ZVCXI_PXSS_S_SCORE_COM,
                   <S_SCORE_TMP> type  ZVCXI_PXSS_S_SCORE_COM.


*** Get Score Type
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = IF_DIMEN ).

***--------------------------------------------------------------------------------------
*** No Scores/Tapes without ups
    if IF_NOUPS lt 1.
      delete CT_SCORE_COM where ISCOR(1) eq LF_CSCOR.
      delete CT_TAPE_COM  where DIMEN eq IF_DIMEN.
      exit.
    endif.

*** Get Edge Scores for Score Category
    loop at CT_SCORE_COM into LS_SCORE_COM where ISCOR(1) eq LF_CSCOR.
      LF_NSCOR_EDGE = LS_SCORE_COM-ISCOR+1.
      LF_TSCOR_EDGE = LS_SCORE_COM-TSCOR.
    endloop.
    check LF_NSCOR_EDGE is not initial.

***--------------------------------------------------------------------------------------
*** Change Score Type of previous Edge Score
    CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR_EDGE ]-TSCOR = F_TSCOR_KNIFE.

***--------------------------------------------------------------------------------------
*** Collect Scores/Tapes with correct Dimension or Score Category
    LT_SCORE_COM = value #( for LS_LINE in CT_SCORE_COM where ( ISCOR(1) = LF_CSCOR ) ( LS_LINE ) ).
    LT_TAPE_COM  = value #( for LS_TAPE in CT_TAPE_COM  where ( DIMEN    = IF_DIMEN ) ( LS_TAPE ) ).

*** Remove old Scores and Tapes before adding the calculated once
    delete CT_SCORE_COM where ISCOR(1) eq LF_CSCOR.
    delete CT_TAPE_COM  where DIMEN eq IF_DIMEN.
    clear LF_NSCOR_EDGE.

*** Deserialze Pattern
    split IF_SPTRN at SPACE into table data(LT_ORIENT).

*** Get Mirrored Definition if needed
    if IF_SPTRN cs 'M'.
      LT_SCORE_MIRROR = LT_SCORE_COM.
      LT_TAPE_MIRROR  = LT_TAPE_COM.
      ZCL_VCXI_PXSS_BL_SCORE=>APPLY_MIRROR( exporting IF_DIMEN     = IF_DIMEN
                                            changing  CT_SCORE_COM = LT_SCORE_MIRROR
                                                      CT_TAPE_COM  = LT_TAPE_MIRROR ).
    endif.

    do IF_NOUPS times.
      data(LF_ORIENT) = value #( LT_ORIENT[ SY-INDEX ] default 'R' ).

***   Add Tapes for each Up
      loop at switch #( LF_ORIENT when 'R' then LT_TAPE_COM
                                  when 'M' then LT_TAPE_MIRROR ) into LS_TAPE_COM.
***     Offset Tape Position of first Tape with last Sheet Edge Position
        if SY-TABIX eq 1.
          LS_TAPE_COM-TAPOS += LF_EDGE.
        endif.
        append LS_TAPE_COM to CT_TAPE_COM.

***     Shift Edge to receive relative Position to last Tape
        LF_EDGE -= LS_TAPE_COM-TAPOS.
      endloop.

***   Add Scores for each Up
      loop at switch #( LF_ORIENT when 'R' then LT_SCORE_COM
                                  when 'M' then LT_SCORE_MIRROR ) into LS_SCORE_COM.
***     Add Score
        add 1 to LF_NSCOR_EDGE.
        LS_SCORE_COM-ISCOR+1 = LF_NSCOR_EDGE.

        append LS_SCORE_COM to CT_SCORE_COM.
        if LS_SCORE_COM-TSCOR eq F_TSCOR_KNIFE.
          append LS_SCORE_COM-ISCOR to ET_ISCOR_DISABLED.    "Disable Cutting Scores
        endif.

***     Buffer absolute Position of Edge as offset for Tapes in next Up
        LF_EDGE += LS_SCORE_COM-S_SCORP-SCORP.
      endloop.
    enddo.

***--------------------------------------------------------------------------------------
*** Change Score Type of new Edge Score back to original Score Type
    CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR_EDGE ]-TSCOR = LF_TSCOR_EDGE.

***--------------------------------------------------------------------------------------
*** Sort once completed
    sort CT_SCORE_COM ascending by ISCOR.

  endmethod.
  method ADD_REDUC.

    data: LF_INDEX type I,
          LF_CSCOR type ZVCXI_P0SS_CSCOR.
    data: LS_REDUC  type ZVCXI_PXS_S_REDUC.
    field-symbols: <F_ISCOR>     type  ZVCXI_P0SS_ISCOR,
                   <S_SCORE_COM> type  ZVCXI_PXSS_S_SCORE_COM,
                   <S_TAPE_COM>  type  ZVCXI_PXSS_S_TAPE_COM.


    check CT_SCORE_COM is not initial.

*** Get Score Type
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = IF_DIMEN ).

***--------------------------------------------------------------------------------------
*** Consider Reduction at Begin of Sheet
    if IS_REDUC_FIRST-REDUC is not initial.
***   Shift Scores
      LS_REDUC = IS_REDUC_FIRST.
      loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR(1) eq LF_CSCOR.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCORE_COM>-S_SCORP-SCORP
                                                            IF_CALCV_UOM_1 = <S_SCORE_COM>-S_SCORP-SCORP_UOM
                                                            IF_CALCV_2     = LS_REDUC-REDUC
                                                            IF_CALCV_UOM_2 = LS_REDUC-REDUC_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = <S_SCORE_COM>-S_SCORP-SCORP_UOM
                                                  importing EF_CALCV       = <S_SCORE_COM>-S_SCORP-SCORP
                                                            EF_CALCV_UOM   = <S_SCORE_COM>-S_SCORP-SCORP_UOM ).
        if <S_SCORE_COM>-S_SCORP-SCORP le 0.
          LS_REDUC-REDUC     = <S_SCORE_COM>-S_SCORP-SCORP * -1. " Update by remaining Reduction
          LS_REDUC-REDUC_UOM = <S_SCORE_COM>-S_SCORP-SCORP_UOM.
          delete CT_ISCOR_DISABLED where TABLE_LINE = <S_SCORE_COM>-ISCOR.
          delete CT_SCORE_COM      where ISCOR      = <S_SCORE_COM>-ISCOR.
        else.
          exit.
        endif.
      endloop.

***   Shift Tapes
      if CT_TAPE_COM is not initial.
        LS_REDUC = IS_REDUC_FIRST.
        loop at CT_TAPE_COM assigning <S_TAPE_COM> where DIMEN eq IF_DIMEN.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              IF_CALCV_UOM_1 = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                              IF_CALCV_2     = LS_REDUC-REDUC
                                                              IF_CALCV_UOM_2 = LS_REDUC-REDUC_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                              IF_UOM         = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                    importing EF_CALCV       = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              EF_CALCV_UOM   = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM ).
          if <S_TAPE_COM>-S_TAPOS-TAPOS le 0.
            LS_REDUC-REDUC     = <S_TAPE_COM>-S_TAPOS-TAPOS * -1. " Update by remaining Reduction
            LS_REDUC-REDUC_UOM = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM.
            delete CT_TAPE_COM.
          else.
            exit.
          endif.
        endloop.
      endif.
    endif.


***--------------------------------------------------------------------------------------
*** Consider Reduction at End of Sheet
    if IS_REDUC_LAST-REDUC is not initial.
***   Shift Scores (starting at last)
      LS_REDUC = IS_REDUC_LAST.
      LF_INDEX = LINES( CT_SCORE_COM ) + 1.
      do LINES( CT_SCORE_COM ) times.
        LF_INDEX -= 1.
        assign CT_SCORE_COM[ LF_INDEX ] to <S_SCORE_COM>.
        check <S_SCORE_COM>-ISCOR(1) eq LF_CSCOR.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCORE_COM>-S_SCORP-SCORP
                                                            IF_CALCV_UOM_1 = <S_SCORE_COM>-S_SCORP-SCORP_UOM
                                                            IF_CALCV_2     = LS_REDUC-REDUC
                                                            IF_CALCV_UOM_2 = LS_REDUC-REDUC_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = <S_SCORE_COM>-S_SCORP-SCORP_UOM
                                                  importing EF_CALCV       = <S_SCORE_COM>-S_SCORP-SCORP
                                                            EF_CALCV_UOM   = <S_SCORE_COM>-S_SCORP-SCORP_UOM ).
        if <S_SCORE_COM>-S_SCORP-SCORP le 0.
          LS_REDUC-REDUC     = <S_SCORE_COM>-S_SCORP-SCORP * -1. " Update by remaining Reduction
          LS_REDUC-REDUC_UOM = <S_SCORE_COM>-S_SCORP-SCORP_UOM.
          delete CT_ISCOR_DISABLED where TABLE_LINE = <S_SCORE_COM>-ISCOR.
          delete CT_SCORE_COM      where ISCOR      = <S_SCORE_COM>-ISCOR.
        else.
          exit.
        endif.
      enddo.

***   Shift Tapes (starting at last)
      if CT_TAPE_COM is not initial.
        LS_REDUC = IS_REDUC_LAST.
        LF_INDEX = LINES( CT_TAPE_COM ) + 1.
        do LINES( CT_TAPE_COM ) times.
          LF_INDEX -= 1.
          assign CT_TAPE_COM[ LF_INDEX ] to <S_TAPE_COM>.
          check <S_TAPE_COM>-DIMEN eq IF_DIMEN.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              IF_CALCV_UOM_1 = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                              IF_CALCV_2     = LS_REDUC-REDUC
                                                              IF_CALCV_UOM_2 = LS_REDUC-REDUC_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                              IF_UOM         = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                    importing EF_CALCV       = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              EF_CALCV_UOM   = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM ).
          if <S_TAPE_COM>-S_TAPOS-TAPOS le 0.
            LS_REDUC-REDUC     = <S_TAPE_COM>-S_TAPOS-TAPOS * -1. " Update by remaining Reduction
            LS_REDUC-REDUC_UOM = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM.
            delete CT_TAPE_COM index LF_INDEX.
          else.
            exit.
          endif.
        enddo.
      endif.
    endif.

  endmethod.
  method ADD_TRIM.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_NSCOR type ZVCXI_P0SS_NSCOR.
    field-symbols: <F_ISCOR>     type  ZVCXI_P0SS_ISCOR,
                   <S_SCORE_COM> type  ZVCXI_PXSS_S_SCORE_COM,
                   <S_TAPE_COM>  type  ZVCXI_PXSS_S_TAPE_COM.


    check CT_SCORE_COM is not initial.

*** Get Score Type
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = IF_DIMEN ).

***--------------------------------------------------------------------------------------
*** Add Trim to Begin of Sheet
    if IS_TRIM_FIRST-TRIM is not initial.
***   Shift Scores
      loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR(1) eq LF_CSCOR.
        <S_SCORE_COM>-ISCOR+1 = conv ZVCXI_P0SS_NSCOR( <S_SCORE_COM>-ISCOR+1 + 1 ).
      endloop.

***   Shift Disabled Score
      loop at CT_ISCOR_DISABLED assigning <F_ISCOR> where TABLE_LINE(1) eq LF_CSCOR.
        <F_ISCOR>+1 = conv ZVCXI_P0SS_NSCOR( <F_ISCOR>+1 + 1 ).
      endloop.

***   Add new Score and disbale it
      LF_NSCOR = 1.
      insert value #( ISCOR     = LF_CSCOR && LF_NSCOR
                      SCORP     = IS_TRIM_FIRST-TRIM
                      SCORP_UOM = IS_TRIM_FIRST-TRIM_UOM
                      TSCOR     = F_TSCOR_KNIFE )
              into CT_SCORE_COM index 1.

      insert LF_CSCOR && LF_NSCOR
             into CT_ISCOR_DISABLED index 1.    "Disable Trim

***   Shift first Tape (others are relative to first)
      if CT_TAPE_COM is not initial.
        if LINE_EXISTS( CT_TAPE_COM[ DIMEN = IF_DIMEN ] ).
          assign CT_TAPE_COM[ DIMEN = IF_DIMEN ] to <S_TAPE_COM>.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              IF_CALCV_UOM_1 = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                              IF_CALCV_2     = IS_TRIM_FIRST-TRIM
                                                              IF_CALCV_UOM_2 = IS_TRIM_FIRST-TRIM_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                    importing EF_CALCV       = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              EF_CALCV_UOM   = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM ).
        endif.
      endif.
    endif.


***--------------------------------------------------------------------------------------
*** Add Trim to End of Sheet
    if IS_TRIM_LAST-TRIM is not initial.
***   Find Edge Score
      loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR(1) eq LF_CSCOR.
        LF_NSCOR = <S_SCORE_COM>-ISCOR+1.
      endloop.

***   Change Score Type of previous Edge Score
      if LINE_EXISTS( CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR ] ).
        CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR ]-TSCOR = F_TSCOR_KNIFE.
        append LF_CSCOR && LF_NSCOR to CT_ISCOR_DISABLED.
      endif.

***   Add new Score and disbale it
      LF_NSCOR = LF_NSCOR + 1.
      append value #( ISCOR     = LF_CSCOR && LF_NSCOR
                      SCORP     = IS_TRIM_LAST-TRIM
                      SCORP_UOM = IS_TRIM_LAST-TRIM_UOM
                      TSCOR     = F_TSCOR_EDGE )
                to CT_SCORE_COM.
      append LF_CSCOR && LF_NSCOR to CT_ISCOR_DISABLED.
    endif.


***--------------------------------------------------------------------------------------
*** Sort once completed
    sort CT_SCORE_COM ascending by ISCOR.

  endmethod.
  method ADJUST_SPTRN.

    check IF_NOUPS ne 0.

*** Deserialize
    split IF_SPTRN at SPACE into table data(LT_ORIENT).

*** Remove excess Orientations
    delete LT_ORIENT from IF_NOUPS + 1.

*** Add missing Orientations
    data(LF_MISSING) = conv I( IF_NOUPS - LINES( LT_ORIENT ) ).
    do LF_MISSING times.
      append 'R' to LT_ORIENT.
    enddo.

*** Build new Pattern
    concatenate lines of LT_ORIENT into RF_SPTRN separated by SPACE.

  endmethod.
  method ALLOC_REDUC.

    data: LF_PARID_SRC type /VCXI/VKS_PARID.
    data: LS_RDPRC type ZVCXI_PXS_S_RDPRC,
          LS_PARAM type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Allocation Percentage
    select single PARID_SRC RDPRC RDPRC_UOM
           into ( LF_PARID_SRC, LS_RDPRC-RDPRC, LS_RDPRC-RDPRC_UOM )
           from ZVCXI_PXS_TC220
          where ID        eq IR_GATE->F_ID
           and  PARID_TGT eq IF_PARID_TGT.
    check SY-SUBRC eq 0.

*** Get Source Parameter
    LS_PARAM = IR_GATE->GET_PARAM( IF_PARID = LF_PARID_SRC ).


***--------------------------------------------------------------------------------------
*** Allocate Reduction by Percenatage
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PARAM-ATFLV
                                                        IF_CALCV_UOM_1 = LS_PARAM-UNIT
                                                        IF_CALCV_2     = LS_RDPRC-RDPRC
                                                        IF_CALCV_UOM_2 = LS_RDPRC-RDPRC_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = LS_PARAM-UNIT
                                              importing EF_CALCV       = RS_REDUC-REDUC
                                                        EF_CALCV_UOM   = RS_REDUC-REDUC_UOM ).

  endmethod.
  method ALLOC_TRIM.

    data: LF_PARID_SRC type /VCXI/VKS_PARID.
    data: LS_TRPRC type ZVCXI_PXS_S_TRPRC,
          LS_PARAM type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Allocation Percentage
    select single PARID_SRC TRPRC TRPRC_UOM
           into ( LF_PARID_SRC, LS_TRPRC-TRPRC, LS_TRPRC-TRPRC_UOM )
           from ZVCXI_PXS_TC210
          where ID        eq IR_GATE->F_ID
           and  PARID_TGT eq IF_PARID_TGT.
    check SY-SUBRC eq 0.

*** Get Source Parameter
    LS_PARAM = IR_GATE->GET_PARAM( IF_PARID = LF_PARID_SRC ).


***--------------------------------------------------------------------------------------
*** Allocate Trim by Percenatage
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PARAM-ATFLV
                                                        IF_CALCV_UOM_1 = LS_PARAM-UNIT
                                                        IF_CALCV_2     = LS_TRPRC-TRPRC
                                                        IF_CALCV_UOM_2 = LS_TRPRC-TRPRC_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = LS_PARAM-UNIT
                                              importing EF_CALCV       = RS_TRIM-TRIM
                                                        EF_CALCV_UOM   = RS_TRIM-TRIM_UOM ).

  endmethod.
  method APPLY_MIRROR.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_INDEX type I.
    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_TAPOS type ZVCXI_P0SS_S_TAPOS.
    data: LT_SCORE_COM        type ZVCXI_PXSS_TT_SCORE_COM,
          LT_SCORE_COM_MIRROR type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM         type ZVCXI_PXSS_TT_TAPE_COM,
          LT_TAPE_COM_MIRROR  type ZVCXI_PXSS_TT_TAPE_COM.


***--------------------------------------------------------------------------------------
*** Get Score Category of Dimension
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN ).

*** Get filtered Table based on Score Category
    LT_SCORE_COM = CT_SCORE_COM.
    delete LT_SCORE_COM where ISCOR+0(1) ne LF_CSCOR.
    delete CT_SCORE_COM where ISCOR+0(1) eq LF_CSCOR.
    check LT_SCORE_COM is not initial.

    LT_TAPE_COM = CT_TAPE_COM.
    delete LT_TAPE_COM where DIMEN ne IF_DIMEN.
    delete CT_TAPE_COM where DIMEN eq IF_DIMEN.

***--------------------------------------------------------------------------------------
*** Mirror Scores (backward loop)
    do LINES( LT_SCORE_COM ) times.
      LF_INDEX = LINES( LT_SCORE_COM ) - SY-INDEX + 1.
      data(LS_SCORE_COM_MIRROR) = value #( LT_SCORE_COM[ LF_INDEX ] ).

***   Get "next" Score alternatively take End of Sheet (last Score)
      data(LS_SCORE_COM_NEXT) = value #( LT_SCORE_COM[ LF_INDEX - 1 ]
                                         default LT_SCORE_COM[ LINES( LT_SCORE_COM ) ] ).
      LS_SCORE_COM_MIRROR-TSCOR = LS_SCORE_COM_NEXT-TSCOR.
      LS_SCORE_COM_MIRROR-FSLIN = LS_SCORE_COM_NEXT-FSLIN.

      append LS_SCORE_COM_MIRROR to LT_SCORE_COM_MIRROR.
    enddo.

***--------------------------------------------------------------------------------------
    if LT_TAPE_COM is not initial.
***   Add Dummy Tape Postion on Edge of Sheet
      ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = LT_SCORE_COM
                                          importing ES_SHTLE     = LS_SHTLE
                                                    ES_SHTWI     = LS_SHTWI ).
      case IF_DIMEN.
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH.
          LS_TAPOS = value #( TAPOS     = LS_SHTWI-SHTWI
                              TAPOS_UOM = LS_SHTWI-SHTWI_UOM ).
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH.
          LS_TAPOS = value #( TAPOS     = LS_SHTLE-SHTLE
                              TAPOS_UOM = LS_SHTLE-SHTLE_UOM ).
      endcase.
      LS_TAPOS-TAPOS = reduce #( init LF_TAPOS = LS_TAPOS-TAPOS for LS_TAPE_COM in LT_TAPE_COM next LF_TAPOS -= LS_TAPE_COM-TAPOS ).
      append value #( DIMEN   = IF_DIMEN
                      S_TAPOS = LS_TAPOS ) to LT_TAPE_COM.

***   Mirror Tapes (backward loop)
      do LINES( LT_TAPE_COM ) times.
        LF_INDEX = LINES( LT_TAPE_COM ) - SY-INDEX + 1.
        data(LS_TAPE_COM_MIRROR) = value #( LT_TAPE_COM[ LF_INDEX ] ).

***     Get "next" Tape alternatively take End of Sheet (last Score)
        data(LS_TAPE_COM_NEXT) = value #( LT_TAPE_COM[ LF_INDEX - 1 ] optional ).
        check LS_TAPE_COM_NEXT is not initial.
        LS_TAPE_COM_MIRROR-TTAPE = LS_TAPE_COM_NEXT-TTAPE.

        append LS_TAPE_COM_MIRROR to LT_TAPE_COM_MIRROR.
      enddo.
    endif.

***--------------------------------------------------------------------------------------
*** Merge new Values back to overall definition
    append lines of LT_SCORE_COM_MIRROR to CT_SCORE_COM.
    append lines of LT_TAPE_COM_MIRROR  to CT_TAPE_COM.

*** Reorganize Score IDs
    ZCL_VCXI_PXSS_BL_SCORE=>REORG_ISCOR( changing CT_SCORE_COM = CT_SCORE_COM ).

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Define Score Type for Edge
    F_TSCOR_EDGE = 'X'.

*** Define Score Type for Knife
    F_TSCOR_KNIFE = 'K'.

  endmethod.
  method CONV_ABPOS_TO_SCSTR.

    data: LF_SCORP type CHAR30,
          LF_ABPOS type F,
          LF_REPOS type ZVCXI_P0SS_SCORP.
    data: LS_ABPOS     type YS_ABPOS.

***--------------------------------------------------------------------------------------
*** Build Score String based on absolut Positions
    loop at IT_ABPOS into LS_ABPOS.
***   Get Relative Position and keep last Absolute Position
      LF_REPOS = LS_ABPOS-ABPOS - LF_ABPOS.
      LF_ABPOS = LS_ABPOS-ABPOS.

      write LF_REPOS to LF_SCORP unit LS_ABPOS-ABPOS_UOM left-justified.
      at last.
        concatenate RF_SCSTR LF_SCORP into RF_SCSTR separated by SPACE.
        exit.
      endat.
      concatenate RF_SCSTR LF_SCORP LS_ABPOS-INDIC into RF_SCSTR separated by SPACE.
    endloop.
    condense RF_SCSTR.

  endmethod.
  method CONV_AP_TO_ABPOS.

    data: LF_ABPOS type F.
    data: LS_SCORE_AP type ZVCXI_PXSS_S_SCORE_AP,
          LS_TAPE_AP  type ZVCXI_PXSS_S_TAPE_AP.


*** Convert Scores to absolute Position
    clear LF_ABPOS.
    loop at IT_SCORE_AP into LS_SCORE_AP.
      LF_ABPOS += LS_SCORE_AP-SCORP.
      append value #( ABPOS     = LF_ABPOS
                      ABPOS_UOM = LS_SCORE_AP-SCORP_UOM
                      INDIC     = LS_SCORE_AP-TSCOR
                      FAPPL     = LS_SCORE_AP-FAPPL ) to RT_ABPOS.
    endloop.

*** Convert Tapes to absolute Position
    clear LF_ABPOS.
    loop at IT_TAPE_AP into LS_TAPE_AP.
      LF_ABPOS += LS_TAPE_AP-TAPOS.
      append value #( ABPOS     = LF_ABPOS
                      ABPOS_UOM = LS_TAPE_AP-TAPOS_UOM
                      INDIC     = LS_TAPE_AP-TTAPE
                      FAPPL     = LS_TAPE_AP-FAPPL ) to RT_ABPOS.
    endloop.

*** Sort by absolut position to merge Scores and Tapes
    sort RT_ABPOS by ABPOS.

  endmethod.
  method CONV_SCSTR_TO_ABPOS.

    data: LF_REPOS type ZVCXI_P0SS_SCORP,
          LF_ABPOS type F.
    field-symbols: <S_ABPOS>     type YS_ABPOS.


*** Split Score String in its Parts
    split CONDENSE( IF_SCSTR ) at SPACE into table data(LT_PART).

*** Allocate parts
    loop at LT_PART into data(LF_PART).

***--------------------------------------------------------------------------------------
      if SY-TABIX mod 2 ne 0.    "Position
***     Get Relative Positioin
        try.
            call function 'RSDS_CONVERT_NUMBER'
              exporting
                INPUT  = LF_PART
                MYDEZI = ' '
              importing
                OUTPUT = LF_REPOS.
          catch CX_ROOT into data(LR_CX_ROOT).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ROOT ).
        endtry.

***     Get Absolute Position
        LF_ABPOS = LF_ABPOS + LF_REPOS.

***     Add entry
        append value #( ABPOS     = LF_ABPOS           " Absolute Position
                        ABPOS_UOM = IF_ABPOS_UOM       " Unit of Absolute Position
                        INDIC     = F_TSCOR_EDGE       " Default Score Type for Edge and replace with next part
                        FAPPL     = ABAP_TRUE
                      ) to RT_ABPOS assigning <S_ABPOS>.

***--------------------------------------------------------------------------------------
      else.  "Score Type / Tape Type
***     Update Indicator
        <S_ABPOS>-INDIC = LF_PART.       "Indicator
      endif.

    endloop.

  endmethod.
  method COUNT_SCORES.

    data: LF_CSCOR_C type ZVCXI_P0SS_CSCOR,
          LF_CSCOR_L type ZVCXI_P0SS_CSCOR.
    data: LS_SCORE_COM type ZVCXI_PXSS_S_SCORE_COM.


    clear: EF_WIDTH, EF_LENGTH.

***--------------------------------------------------------------------------------------
*** Get Score Categories for Length and Cross Score
    LF_CSCOR_C = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_WIDTH ).
    LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_LENGTH ).

***--------------------------------------------------------------------------------------
*** Count Scores
    loop at IT_SCORE_COM into LS_SCORE_COM.
      case LS_SCORE_COM-ISCOR(1).
        when LF_CSCOR_C.
          EF_WIDTH += 1.
        when LF_CSCOR_L.
          EF_LENGTH += 1.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Subtract Edge Scores
    EF_WIDTH  = cond #( when EF_WIDTH  gt 1 then EF_WIDTH - 1  else 0 ).
    EF_LENGTH = cond #( when EF_LENGTH gt 1 then EF_LENGTH - 1 else 0 ).

  endmethod.
  method GET_AP_BY_COM.

    data: LF_DIMEN   type ZVCXI_PXS_DIMEN,
          LF_CSCOR   type ZVCXI_P0SS_CSCOR,
          LF_ISCOR   type ZVCXI_P0SS_ISCOR,
          LF_ISCOR_L type ZVCXI_P0SS_ISCOR,
          LF_ISCOR_C type ZVCXI_P0SS_ISCOR.
    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.
    field-symbols: <S_SCORE_AP> type ZVCXI_PXSS_S_SCORE_AP.


    free: ET_SCORE_AP,
          ET_TAPE_AP,
          ET_ISCOR_DISABLED.

***--------------------------------------------------------------------------------------
*** Get current Score/Tape Definition (Outbound)
    LT_SCORE_COM = IT_SCORE_COM.
    LT_TAPE_COM  = IT_TAPE_COM.

***--------------------------------------------------------------------------------------
*** Apply Division
    if IF_NOUPL is supplied.
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_NOUPS( exporting IF_DIMEN          = C_DIMEN_LENGTH
                                                   IF_NOUPS          = IF_NOUPL
                                                   IF_SPTRN          = IF_SPTNL
                                         importing ET_ISCOR_DISABLED = ET_ISCOR_DISABLED
                                         changing  CT_SCORE_COM      = LT_SCORE_COM
                                                   CT_TAPE_COM       = LT_TAPE_COM ).
    endif.
    if IF_NOUPW is supplied.
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_NOUPS( exporting IF_DIMEN          = C_DIMEN_WIDTH
                                                   IF_NOUPS          = IF_NOUPW
                                                   IF_SPTRN          = IF_SPTNW
                                         importing ET_ISCOR_DISABLED = ET_ISCOR_DISABLED
                                         changing  CT_SCORE_COM      = LT_SCORE_COM
                                                   CT_TAPE_COM       = LT_TAPE_COM ).
    endif.

***--------------------------------------------------------------------------------------
*** Trim
    if IF_DIMEN_TRIM is supplied.
***   Get Counter-Dimension
      LF_DIMEN = switch #( IF_DIMEN_TRIM when C_DIMEN_WIDTH  then C_DIMEN_LENGTH
                                         when C_DIMEN_LENGTH then C_DIMEN_WIDTH ).
***   Apply Trim
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_TRIM( exporting IF_DIMEN          = IF_DIMEN_TRIM
                                                  IS_TRIM_FIRST     = IS_TRLEF
                                                  IS_TRIM_LAST      = IS_TRRIG
                                        changing  CT_SCORE_COM      = LT_SCORE_COM
                                                  CT_TAPE_COM       = LT_TAPE_COM
                                                  CT_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_TRIM( exporting IF_DIMEN          = LF_DIMEN       "Counter-Dimension
                                                  IS_TRIM_FIRST     = IS_TRTOP
                                                  IS_TRIM_LAST      = IS_TRBOT
                                        changing  CT_SCORE_COM      = LT_SCORE_COM
                                                  CT_TAPE_COM       = LT_TAPE_COM
                                                  CT_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
    endif.

***--------------------------------------------------------------------------------------
*** Reduction
    if IF_DIMEN_REDUC is supplied.
***   Get Counter-Dimension
      LF_DIMEN = switch #( IF_DIMEN_REDUC when C_DIMEN_WIDTH  then C_DIMEN_LENGTH
                                          when C_DIMEN_LENGTH then C_DIMEN_WIDTH ).
***   Apply Trim
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_REDUC( exporting IF_DIMEN          = IF_DIMEN_REDUC
                                                   IS_REDUC_FIRST    = IS_RDLEF
                                                   IS_REDUC_LAST     = IS_RDRIG
                                         changing  CT_SCORE_COM      = LT_SCORE_COM
                                                   CT_TAPE_COM       = LT_TAPE_COM
                                                   CT_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_REDUC( exporting IF_DIMEN          = LF_DIMEN       "Counter-Dimension
                                                   IS_REDUC_FIRST    = IS_RDTOP
                                                   IS_REDUC_LAST     = IS_RDBOT
                                         changing  CT_SCORE_COM      = LT_SCORE_COM
                                                   CT_TAPE_COM       = LT_TAPE_COM
                                                   CT_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
    endif.

***--------------------------------------------------------------------------------------
*** Fill Application Table
    move-corresponding LT_SCORE_COM to ET_SCORE_AP.
    move-corresponding LT_TAPE_COM  to ET_TAPE_AP.

*** Get Edge Scores
    ZCL_VCXI_PXSS_BL_SCORE=>GET_EDGE_SCORES( exporting IT_SCORE_COM = LT_SCORE_COM
                                             importing EF_ISCOR_C   = LF_ISCOR_C
                                                       EF_ISCOR_L   = LF_ISCOR_L ).
*** Get Score Category of Dimension
    if IF_DIMEN_SCORE is supplied.
      LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = IF_DIMEN_SCORE ).
    endif.

*** Mark Division/Trim Scores as applied
    loop at ET_ISCOR_DISABLED into LF_ISCOR.
      if LINE_EXISTS( ET_SCORE_AP[ ISCOR = LF_ISCOR ] ).
        ET_SCORE_AP[ ISCOR = LF_ISCOR ]-FAPPL = ABAP_TRUE.
      endif.
      clear LF_ISCOR.
    endloop.

*** Get prviously applied Scores
    loop at ET_SCORE_AP assigning <S_SCORE_AP>.
***   Mark applied Scores
      if LINE_EXISTS( IT_ISCOR[ TABLE_LINE = <S_SCORE_AP>-ISCOR ] ) or
         LINE_EXISTS( IT_ISCOR[ TABLE_LINE = '*' ] ) .
        <S_SCORE_AP>-FAPPL = ABAP_TRUE.
      endif.

***   Edge Score can't be applied
      if <S_SCORE_AP>-ISCOR eq LF_ISCOR_C or
         <S_SCORE_AP>-ISCOR eq LF_ISCOR_L.
        <S_SCORE_AP>-FAPPL = ABAP_FALSE.
        append <S_SCORE_AP>-ISCOR to ET_ISCOR_DISABLED.
      endif.

***   Disable Scores based on Score Category
      if IF_DIMEN_SCORE is supplied and
         <S_SCORE_AP>-ISCOR(1) ne LF_CSCOR.
        if <S_SCORE_AP>-TSCOR ne F_TSCOR_KNIFE.    "Trim removal is allowed
          <S_SCORE_AP>-FAPPL = ABAP_FALSE.
        endif.
        append <S_SCORE_AP>-ISCOR to ET_ISCOR_DISABLED.
      endif.
    endloop.

  endmethod.
  method GET_COM_BY_AP.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR.
    data: LS_SCORE_AP type ZVCXI_PXSS_S_SCORE_AP,
          LS_SCORP    type ZVCXI_P0SS_S_SCORP,
          LS_TAPE_AP  type ZVCXI_PXSS_S_TAPE_AP,
          LS_TAPOS    type ZVCXI_P0SS_S_TAPOS.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    free: ET_SCORE_COM,
          ET_TAPE_COM.

***--------------------------------------------------------------------------------------
*** Determine Score/Tape Application
    if IR_SCORES_AP is bound.
      IR_SCORES_AP->GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                            ET_TAPE_AP  = LT_TAPE_AP ).
    endif.
    if IT_SCORE_AP is supplied.
      LT_SCORE_AP = IT_SCORE_AP.
    endif.
    if IT_TAPE_AP is supplied.
      LT_TAPE_AP = IT_TAPE_AP.
    endif.

***--------------------------------------------------------------------------------------
*** Remove applied Scores
    loop at LT_SCORE_AP into LS_SCORE_AP.
***   Add bufferd Score Positon of previously applied Score
      if LS_SCORP is not initial.
        if LF_CSCOR ne LS_SCORE_AP-ISCOR(1).
***       Score can't be applied
          raise exception type /VCXI/CX_CKX.
        endif.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORE_AP-S_SCORP-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCORE_AP-S_SCORP-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_SCORE_AP-S_SCORP-SCORP_UOM
                                                  importing EF_CALCV       = LS_SCORE_AP-S_SCORP-SCORP
                                                            EF_CALCV_UOM   = LS_SCORE_AP-S_SCORP-SCORP_UOM ).
        clear: LF_CSCOR, LS_SCORP.
      endif.

***   Score was not applied
      if LS_SCORE_AP-FAPPL ne ABAP_TRUE.
        append LS_SCORE_AP-S_SCORE_COM to ET_SCORE_COM.
      else.
        LF_CSCOR = LS_SCORE_AP-ISCOR(1).
        LS_SCORP = LS_SCORE_AP-S_SCORP.
      endif.
    endloop.

*** Reorganize Score IDs per Category
    ZCL_VCXI_PXSS_BL_SCORE=>REORG_ISCOR( changing CT_SCORE_COM = ET_SCORE_COM ).


***--------------------------------------------------------------------------------------
*** Remove applied Tapes
    loop at LT_TAPE_AP into LS_TAPE_AP.
***   Add bufferd Tape Positon of previously applied Tape
      if LS_TAPOS is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TAPE_AP-S_TAPOS-TAPOS
                                                            IF_CALCV_UOM_1 = LS_TAPE_AP-S_TAPOS-TAPOS_UOM
                                                            IF_CALCV_2     = LS_TAPOS-TAPOS
                                                            IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_TAPE_AP-S_TAPOS-TAPOS_UOM
                                                  importing EF_CALCV       = LS_TAPE_AP-S_TAPOS-TAPOS
                                                            EF_CALCV_UOM   = LS_TAPE_AP-S_TAPOS-TAPOS_UOM ).
        clear: LS_TAPOS.
      endif.

***   Tape was not applied
      if LS_TAPE_AP-FAPPL ne ABAP_TRUE.
        append LS_TAPE_AP-S_TAPE_COM to ET_TAPE_COM.
      else.
        LS_TAPOS = LS_TAPE_AP-S_TAPOS.
      endif.
    endloop.

  endmethod.
  method GET_COM_BY_SCSTR.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_ABPOS type F.


    clear: ET_SCORE_COM.

*** Get Score Category of Dimension
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN ).

*** Build absolut Positions based on Score String
    data(LT_ABPOS) = ZCL_VCXI_PXSS_BL_SCORE=>CONV_SCSTR_TO_ABPOS( IF_SCSTR     = IF_SCSTR
                                                                  IF_ABPOS_UOM = IF_UOM ).

*** Build Scores with Relative Position
    loop at LT_ABPOS into data(LS_ABPOS).
      append value #( ISCOR     = LF_CSCOR    "Just Score ID as Numbering follows
                      SCORP     = LS_ABPOS-ABPOS - LF_ABPOS
                      SCORP_UOM = LS_ABPOS-ABPOS_UOM
                      TSCOR     = LS_ABPOS-INDIC
                    ) to ET_SCORE_COM.
      LF_ABPOS = LS_ABPOS-ABPOS.
    endloop.

*** Reorganize Score IDs
    ZCL_VCXI_PXSS_BL_SCORE=>REORG_ISCOR( changing CT_SCORE_COM = ET_SCORE_COM ).

  endmethod.
  method GET_DESCR_ISCOR.

    check IF_ISCOR is not initial.

*** Identify Description
    select single DESCR
           into RF_DESCR
           from ZVCXI_P0S_TC030T
          where CSCOR eq IF_ISCOR+0(1)
           and  LANGU eq SY-LANGU.
    if SY-SUBRC ne 0.
      clear RF_DESCR.
    endif.

    concatenate RF_DESCR IF_ISCOR+1(2) into RF_DESCR separated by SPACE.

  endmethod.
  method GET_EDGE_SCORES.

    data: LF_CSCOR_C type ZVCXI_P0SS_CSCOR,
          LF_CSCOR_L type ZVCXI_P0SS_CSCOR.
    data: LS_SCORE_COM  type ZVCXI_PXSS_S_SCORE_COM.


    clear: EF_ISCOR_C, EF_ISCOR_L.

***--------------------------------------------------------------------------------------
*** Get Score Categories for Length and Cross Score
    LF_CSCOR_C = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_WIDTH ).
    LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_LENGTH ).

***--------------------------------------------------------------------------------------
*** Identify Edge Score
    loop at IT_SCORE_COM into LS_SCORE_COM.
      case LS_SCORE_COM-ISCOR(1).
        when LF_CSCOR_C.
          EF_ISCOR_C = LS_SCORE_COM-ISCOR.
        when LF_CSCOR_L.
          EF_ISCOR_L = LS_SCORE_COM-ISCOR.
      endcase.
    endloop.

  endmethod.
  method GET_SCORE_SHTN.

    constants: LC_NSCOR type ZVCXI_P0SS_NSCOR value 1.


*** Add new Cross Score
    append value #( ISCOR     = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ) && LC_NSCOR
                    SCORP     = IS_SHTNW-SHTNW
                    SCORP_UOM = IS_SHTNW-SHTNW_UOM
                    TSCOR     = F_TSCOR_EDGE )
            to RT_SCORE_COM.

*** Add new Length Score
    append value #( ISCOR     = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ) && LC_NSCOR
                    SCORP     = IS_SHTNL-SHTNL
                    SCORP_UOM = IS_SHTNL-SHTNL_UOM
                    TSCOR     = F_TSCOR_EDGE )
            to RT_SCORE_COM.

    sort RT_SCORE_COM by ISCOR.

  endmethod.
  method GET_SCSTR_AP.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP,
          LT_ABPOS    type YT_ABPOS.


*** Get Score Category
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = IF_DIMEN ).
    check LF_CSCOR is not initial.

*** Get filtered Table based on Score Category
    LT_SCORE_AP = IT_SCORE_AP.
    delete LT_SCORE_AP where ISCOR+0(1) ne LF_CSCOR.
    check LT_SCORE_AP is not initial.

    LT_TAPE_AP = IT_TAPE_AP.
    delete LT_TAPE_AP where DIMEN ne IF_DIMEN.

*** Consider Edge Score as applied
    LT_SCORE_AP[ LINES( LT_SCORE_AP ) ]-FAPPL = ABAP_TRUE.

*** Convert Scores and Tapes to absolute Position
    LT_ABPOS = CONV_AP_TO_ABPOS( IT_SCORE_AP = LT_SCORE_AP
                                 IT_TAPE_AP  = LT_TAPE_AP ).

*** Only consider applied Scores/Tapes
    delete LT_ABPOS where FAPPL ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Build Score String based on absolut Positions
    RF_SCSTR = ZCL_VCXI_PXSS_BL_SCORE=>CONV_ABPOS_TO_SCSTR( IT_ABPOS = LT_ABPOS ).

  endmethod.
  method GET_SCSTR_COM.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR.
    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM,
          LT_ABPOS     type YT_ABPOS.


*** Get Score Category of Dimension
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN ).

*** Get filtered Table based on Score Category
    LT_SCORE_COM = IT_SCORE_COM.
    delete LT_SCORE_COM where ISCOR+0(1) ne LF_CSCOR.
    check LT_SCORE_COM is not initial.

    LT_TAPE_COM = IT_TAPE_COM.
    delete LT_TAPE_COM where DIMEN ne IF_DIMEN.

***--------------------------------------------------------------------------------------
*** Convert Scores and Tapes to absolute Position
    LT_ABPOS = CONV_AP_TO_ABPOS( IT_SCORE_AP = conv #( LT_SCORE_COM )
                                 IT_TAPE_AP  = conv #( LT_TAPE_COM ) ).

***--------------------------------------------------------------------------------------
*** Build Score String based on absolut Positions
    RF_SCSTR = ZCL_VCXI_PXSS_BL_SCORE=>CONV_ABPOS_TO_SCSTR( IT_ABPOS = LT_ABPOS ).

  endmethod.
  method GET_SHTDIM.

    data: LF_CSCOR_C type ZVCXI_P0SS_CSCOR,
          LF_CSCOR_L type ZVCXI_P0SS_CSCOR.
    data: LS_SCORE_COM type ZVCXI_PXSS_S_SCORE_COM.


    clear: ES_SHTLE,
           ES_SHTWI.

***--------------------------------------------------------------------------------------
*** Get Score Categories for Length and Cross Score
    LF_CSCOR_C = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_WIDTH ).
    LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = C_DIMEN_LENGTH ).

***--------------------------------------------------------------------------------------
*** Summarize Scores
    try.
        loop at IT_SCORE_COM into LS_SCORE_COM.
          case LS_SCORE_COM-ISCOR(1).
            when LF_CSCOR_L.
              if ES_SHTLE is initial.
                ES_SHTLE = value #( SHTLE     = LS_SCORE_COM-S_SCORP-SCORP
                                    SHTLE_UOM = LS_SCORE_COM-S_SCORP-SCORP_UOM ).
              else.
                ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORE_COM-S_SCORP-SCORP
                                                                    IF_CALCV_UOM_1 = LS_SCORE_COM-S_SCORP-SCORP_UOM
                                                                    IF_CALCV_2     = ES_SHTLE-SHTLE
                                                                    IF_CALCV_UOM_2 = ES_SHTLE-SHTLE_UOM
                                                                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                    IF_UOM         = ES_SHTLE-SHTLE_UOM
                                                          importing EF_CALCV       = ES_SHTLE-SHTLE
                                                                    EF_CALCV_UOM   = ES_SHTLE-SHTLE_UOM ).
              endif.

            when LF_CSCOR_C.
              if ES_SHTWI is initial.
                ES_SHTWI = value #( SHTWI     = LS_SCORE_COM-S_SCORP-SCORP
                                    SHTWI_UOM = LS_SCORE_COM-S_SCORP-SCORP_UOM ).
              else.
                ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORE_COM-S_SCORP-SCORP
                                                                    IF_CALCV_UOM_1 = LS_SCORE_COM-S_SCORP-SCORP_UOM
                                                                    IF_CALCV_2     = ES_SHTWI-SHTWI
                                                                    IF_CALCV_UOM_2 = ES_SHTWI-SHTWI_UOM
                                                                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                    IF_UOM         = ES_SHTWI-SHTWI_UOM
                                                          importing EF_CALCV       = ES_SHTWI-SHTWI
                                                                    EF_CALCV_UOM   = ES_SHTWI-SHTWI_UOM ).
              endif.
          endcase.
        endloop.

      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear: ES_SHTLE-SHTLE, ES_SHTWI-SHTWI.
    endtry.

***--------------------------------------------------------------------------------------
*** No Negative Sheet Dimension
    ES_SHTLE-SHTLE = cond #( when ES_SHTLE-SHTLE lt 0 then 0 else ES_SHTLE-SHTLE ).
    ES_SHTWI-SHTWI = cond #( when ES_SHTWI-SHTWI lt 0 then 0 else ES_SHTWI-SHTWI ).

  endmethod.
  method GET_TSCOR_EDGE.

    RF_TSCOR = 'X'.

  endmethod.
  method RECALC_ADJ_SCORES.

    data: LF_ISCOR_C type ZVCXI_P0SS_ISCOR,
          LF_ISCOR_L type ZVCXI_P0SS_ISCOR,
          LF_DIMEN   type ZVCXI_PXS_DIMEN.
    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_CALCV type ZVCXI_XCS_S_CALCV.
    field-symbols: <S_SCORE_COM> type ZVCXI_PXSS_S_SCORE_COM.


***--------------------------------------------------------------------------------------
    if CT_SCORE_COM is not initial.
***   Get Sheet Dimension based on Defined Scores
      ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = CT_SCORE_COM
                                          importing ES_SHTLE     = LS_SHTLE
                                                    ES_SHTWI     = LS_SHTWI ).
***   Get Edge Scores
      ZCL_VCXI_PXSS_BL_SCORE=>GET_EDGE_SCORES( exporting IT_SCORE_COM = CT_SCORE_COM
                                               importing EF_ISCOR_C   = LF_ISCOR_C
                                                         EF_ISCOR_L   = LF_ISCOR_L ).
***   Adjust last Cross Score based on Net Sheet
      assign CT_SCORE_COM[ ISCOR = LF_ISCOR_C ] to <S_SCORE_COM>.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
                                                          IF_CALCV_2     = IS_SHTNW-SHTNW
                                                          IF_CALCV_UOM_2 = IS_SHTNW-SHTNW_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = IS_SHTNW-SHTNW_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCORE_COM>-SCORP
                                                          IF_CALCV_UOM_1 = <S_SCORE_COM>-SCORP_UOM
                                                          IF_CALCV_2     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = <S_SCORE_COM>-SCORP_UOM
                                                importing EF_CALCV       = <S_SCORE_COM>-SCORP
                                                          EF_CALCV_UOM   = <S_SCORE_COM>-SCORP_UOM ).
      if <S_SCORE_COM>-SCORP lt 0.
        <S_SCORE_COM>-SCORP = 0.
      endif.

***   Adjust last Length Score based on Net Sheet
      assign CT_SCORE_COM[ ISCOR = LF_ISCOR_L ] to <S_SCORE_COM>.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = IS_SHTNL-SHTNL
                                                          IF_CALCV_UOM_2 = IS_SHTNL-SHTNL_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = IS_SHTNL-SHTNL_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCORE_COM>-SCORP
                                                          IF_CALCV_UOM_1 = <S_SCORE_COM>-SCORP_UOM
                                                          IF_CALCV_2     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = <S_SCORE_COM>-SCORP_UOM
                                                importing EF_CALCV       = <S_SCORE_COM>-SCORP
                                                          EF_CALCV_UOM   = <S_SCORE_COM>-SCORP_UOM ).
      if <S_SCORE_COM>-SCORP lt 0.
        <S_SCORE_COM>-SCORP = 0.
      endif.

    else.
***   Get Net Sheet Scores
      CT_SCORE_COM = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCORE_SHTN( IS_SHTNW = IS_SHTNW
                                                             IS_SHTNL = IS_SHTNL ).

    endif.

***--------------------------------------------------------------------------------------
*** Add Trim as Score
    if IF_DIMEN_TRIM is supplied.
***   Get Counter-Dimension
      LF_DIMEN = switch #( IF_DIMEN_TRIM when C_DIMEN_WIDTH  then C_DIMEN_LENGTH
                                         when C_DIMEN_LENGTH then C_DIMEN_WIDTH ).
***   Apply Trim
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_TRIM( exporting IF_DIMEN          = IF_DIMEN_TRIM
                                                  IS_TRIM_FIRST     = IS_TRLEF
                                                  IS_TRIM_LAST      = IS_TRRIG
                                        changing  CT_SCORE_COM      = CT_SCORE_COM
                                                  CT_TAPE_COM       = CT_TAPE_COM ).
      ZCL_VCXI_PXSS_BL_SCORE=>ADD_TRIM( exporting IF_DIMEN          = LF_DIMEN       "Counter-Dimension
                                                  IS_TRIM_FIRST     = IS_TRTOP
                                                  IS_TRIM_LAST      = IS_TRBOT
                                        changing  CT_SCORE_COM      = CT_SCORE_COM
                                                  CT_TAPE_COM       = CT_TAPE_COM ).
    endif.

  endmethod.
  method REMOVE_TRIM.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_NSCOR type ZVCXI_P0SS_NSCOR.
    data: LS_SCORE_COM type  ZVCXI_PXSS_S_SCORE_COM.
    field-symbols: <F_ISCOR>     type  ZVCXI_P0SS_ISCOR,
                   <S_SCORE_COM> type  ZVCXI_PXSS_S_SCORE_COM,
                   <S_TAPE_COM>  type  ZVCXI_PXSS_S_TAPE_COM.


*** Get Score Type
    LF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = IF_DIMEN ).

***--------------------------------------------------------------------------------------
*** Remove Trim from Begin of Sheet
    LF_NSCOR = 1.
    LS_SCORE_COM = value #( CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR ] optional ).
    if LS_SCORE_COM-TSCOR eq F_TSCOR_KNIFE.
***   Remove Score
      delete CT_SCORE_COM      where ISCOR = LF_CSCOR && LF_NSCOR.
      delete CT_ISCOR_DISABLED where TABLE_LINE = LF_CSCOR && LF_NSCOR.

***   Shift other Scores
      loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR(1) eq LF_CSCOR.
        <S_SCORE_COM>-ISCOR+1 = conv ZVCXI_P0SS_NSCOR( <S_SCORE_COM>-ISCOR+1 - 1 ).
      endloop.

***   Shift Disabled Score
      loop at CT_ISCOR_DISABLED assigning <F_ISCOR> where TABLE_LINE(1) eq LF_CSCOR.
        <F_ISCOR>+1 = conv ZVCXI_P0SS_NSCOR( <F_ISCOR>+1 - 1 ).
      endloop.

***   Shift first Tape (others are relative to first)
      if CT_TAPE_COM is not initial.
        if LINE_EXISTS( CT_TAPE_COM[ DIMEN = IF_DIMEN ] ).
          assign CT_TAPE_COM[ DIMEN = IF_DIMEN ] to <S_TAPE_COM>.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              IF_CALCV_UOM_1 = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                              IF_CALCV_2     = LS_SCORE_COM-SCORP
                                                              IF_CALCV_UOM_2 = LS_SCORE_COM-SCORP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                              IF_UOM         = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM
                                                    importing EF_CALCV       = <S_TAPE_COM>-S_TAPOS-TAPOS
                                                              EF_CALCV_UOM   = <S_TAPE_COM>-S_TAPOS-TAPOS_UOM ).
        endif.
      endif.
    endif.


***--------------------------------------------------------------------------------------
*** Find Edge Score
    loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR(1) eq LF_CSCOR.
      LF_NSCOR = <S_SCORE_COM>-ISCOR+1.
    endloop.

*** Remove Trim from End of Sheet
    LF_NSCOR -= 1. "Get Score before Edge
    LS_SCORE_COM = value #( CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR ] optional ).
    if LS_SCORE_COM-TSCOR eq F_TSCOR_KNIFE.
      CT_SCORE_COM[ ISCOR = LF_CSCOR && LF_NSCOR ]-TSCOR = F_TSCOR_EDGE.
      LF_NSCOR += 1. "Delete Edge
***   Remove Score
      delete CT_SCORE_COM      where ISCOR = LF_CSCOR && LF_NSCOR.
      delete CT_ISCOR_DISABLED where TABLE_LINE = LF_CSCOR && LF_NSCOR.
    endif.

***--------------------------------------------------------------------------------------
*** Sort once completed
    sort CT_SCORE_COM ascending by ISCOR.

  endmethod.
  method REORG_ISCOR.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_NSCOR type ZVCXI_P0SS_NSCOR.
    data: LT_CSCOR    type table of ZVCXI_P0SS_CSCOR.
    field-symbols: <S_SCORE_COM>  type ZVCXI_PXSS_S_SCORE_COM.


*** Collect Score Categories
    LT_CSCOR = value #( for LS_SCORE_COM in CT_SCORE_COM ( LS_SCORE_COM-ISCOR+0(1) ) ).
    sort LT_CSCOR.
    delete adjacent duplicates from LT_CSCOR.

*** Reorganize Score IDs per Category
    loop at LT_CSCOR into LF_CSCOR.
      clear LF_NSCOR.
      loop at CT_SCORE_COM assigning <S_SCORE_COM> where ISCOR+0(1) eq LF_CSCOR.
        add 1 to LF_NSCOR.
        <S_SCORE_COM>-ISCOR = <S_SCORE_COM>-ISCOR+0(1) && LF_NSCOR.
      endloop.
    endloop.

  endmethod.
  method TURN_SHTDIM.

    data: LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_SHTLE type ZVCXI_P0SS_S_SHTLE.

*** Buffer before starting to turn
    LS_SHTWI = CS_SHTWI.
    LS_SHTLE = CS_SHTLE.

*** Assign turned dimensions
    CS_SHTWI = value #( SHTWI     = LS_SHTLE-SHTLE
                        SHTWI_UOM = LS_SHTLE-SHTLE_UOM ).
    CS_SHTLE = value #( SHTLE     = LS_SHTWI-SHTWI
                        SHTLE_UOM = LS_SHTWI-SHTWI_UOM ).

  endmethod.
