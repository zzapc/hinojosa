
class ZCL_VCXI_FRS_PR_VERS_EXTR definition
  public
  inheriting from ZCL_VCXI_FRS_PR_VERS
  create public .

public section.

  constants C_IPRVT_VERS_EXTR type /VCXI/VKSC_IPRVT value 'ZVCXI_FRS_VERS_EXTR' ##NO_TEXT.

  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_SURWT type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_TVERS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TVERS type ZVCXI_FRS_TVERS
    raising
      /VCXI/CX_CKX .
  methods GET_VRCOL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_VRCOL type ZVCXI_FRS_VRCOL
      !EF_VRCOL_DESCR type TEXT255
    raising
      /VCXI/CX_CKX .
  methods GET_VRDEN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_VRDEN type ZVCXI_FRS_S_VRDEN
    raising
      /VCXI/CX_CKX .
  methods GET_VRFAC
    returning
      value(RF_VRFAC) type ZVCXI_FRS_VRFAC
    raising
      /VCXI/CX_CKX .
  methods GET_VRTHI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_VRTHI type ZVCXI_FRS_S_VRTHI
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TVERS type /VCXI/VKSC_IEVNT value 'RECALC_TVERS' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_VRCOL type /VCXI/VKSC_IEVNT value 'RECALC_VRCOL' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_VRDEN type /VCXI/VKSC_IEVNT value 'RECALC_VRDEN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_VRTHI type /VCXI/VKSC_IEVNT value 'RECALC_VRTHI' ##NO_TEXT.
  constants C_IEVNT_O_VRDEN_CHANGED type /VCXI/VKSC_IEVNT value 'VRDEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_VRTHI_CHANGED type /VCXI/VKSC_IEVNT value 'VRTHI_CHANGED' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TVERS type /VCXI/VKS_PARID value 'ZVCXI_FR_TVERS' ##NO_TEXT.
  constants C_PARID_VRCOL type /VCXI/VKS_PARID value 'ZVCXI_FR_VRCOL' ##NO_TEXT.
  constants C_PARID_VRDEN type /VCXI/VKS_PARID value 'ZVCXI_FR_VRDEN' ##NO_TEXT.
  constants C_PARID_VRTHI type /VCXI/VKS_PARID value 'ZVCXI_FR_VRTHI' ##NO_TEXT.

  methods CHECK_NOLAY
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CALC_LRPER
    importing
      !IS_LRTHI type ZVCXI_FRS_S_LRTHI
    exporting
      !ES_LRPER type ZVCXI_FRS_S_LRPER
    raising
      /VCXI/CX_CKX .
  methods CHECK_TVERS
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_VRCOL
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_VRTHI
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TVERS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_VRCOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_VRDEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_VRTHI
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TVERS
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_TVERS type ZVCXI_FRS_TVERS
    raising
      /VCXI/CX_CKX .
  methods SET_VRCOL
    importing
      !IF_VRCOL type ZVCXI_FRS_VRCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_VRDEN
    importing
      !IS_VRDEN type ZVCXI_FRS_S_VRDEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_VRTHI
    importing
      !IS_VRTHI type ZVCXI_FRS_S_VRTHI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FRS_PR_VERS_EXTR definition
class ZCL_VCXI_FRS_PR_VERS_EXTR implementation.
  method CALC_LRPER.

    data: LS_CALCV type        ZVCXI_XCS_S_CALCV,
          LS_VRTHI type        ZVCXI_FRS_S_VRTHI.

    clear: ES_LRPER.

***--------------------------------------------------------------------------------------
*** Get Version Thickness
    ME->GET_VRTHI( importing ES_VRTHI = LS_VRTHI ).
    check LS_VRTHI-VRTHI is not initial.

***--------------------------------------------------------------------------------------
*** Thickness Layer / Overall Thickness
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_LRTHI-LRTHI
                                                        IF_CALCV_UOM_1 = IS_LRTHI-LRTHI_UOM
                                                        IF_CALCV_2     = LS_VRTHI-VRTHI
                                                        IF_CALCV_UOM_2 = LS_VRTHI-VRTHI_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LS_CALCV-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

    ES_LRPER-LRPER     = LS_CALCV-CALCV * 100.
    ES_LRPER-LRPER_UOM = '%'.

  endmethod.
  method CHECK_NOLAY.

*** 0 Number of Layer is valid.
*** 1 Number of Layer is not valid.

    data: LF_NOLAY type        ZVCXI_F0S_NOLAY,
          LF_LINES type        I.
    data: LT_GATE_LAYER type        /VCXI/VKSR_TT_GATE,
          LT_GATE_BDATA type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_LAYER    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_BDATA    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_LAYER      type ref to ZCL_VCXI_FRS_PR_LAYER_EXTR,
          LR_PR_BDATA_EXTR type ref to ZCL_VCXI_FRS_PR_BDATA_EXTR.

***----------------------------------------------------------------------------
*** Find Provider for Basic Data
    LT_GATE_BDATA = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_BDATA_EXTR=>C_IPRVT_BDATA_EXTR
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).
    check LT_GATE_BDATA is not initial.

    read table LT_GATE_BDATA into LR_GATE_BDATA index 1.
    try.
        move LR_GATE_BDATA->R_CLSPR ?to LR_PR_BDATA_EXTR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_BDATA_EXTR.
    endtry.
    check LR_PR_BDATA_EXTR is bound.

*** Get Number of Layer of Basic Data
    LF_NOLAY = LR_PR_BDATA_EXTR->GET_NOLAY( ).

***----------------------------------------------------------------------------
*** Find Provider for Layer of Version
    LT_GATE_LAYER = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).
    check LT_GATE_LAYER is not initial.

    describe table LT_GATE_LAYER lines LF_LINES.

***----------------------------------------------------------------------------
*** Check if Basic Data Number of Layer matches Version Number of Layer
    if LF_NOLAY eq LF_LINES.
      move 0 to RF_RESULT.
    else.
      move 1 to RF_RESULT.
    endif.

  endmethod.
  method CHECK_TVERS.

*** 0 Version Type is maintained and valid.
*** 1 Version Type is maintained but not valid.
*** 2 Version Type is not maintained.

    data: LF_TVERS type        ZVCXI_FRS_TVERS,
          LF_TFILM type        ZVCXI_F0S_TFILM.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BDATA_EXTR type ref to ZCL_VCXI_FRS_PR_BDATA_EXTR.

***----------------------------------------------------------------------------
*** Get Version Type
    ME->GET_TVERS( importing EF_TVERS = LF_TVERS ).

    if LF_TVERS is initial.
*** Version Thickness is not maintained
      move 2 to RF_RESULT.

    else.
*** Get Basic Data Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_BDATA_EXTR=>C_IPRVT_BDATA_EXTR
                                       IF_INUSE = ABAP_TRUE ).
      read table LT_GATE into LR_GATE index 1.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BDATA_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          move 1 to RF_RESULT.
          return.
      endtry.

*** Get Basic Data Film Type
      LR_PR_BDATA_EXTR->GET_TFILM( importing EF_TFILM = LF_TFILM ).

*** Check if Basic Data Film Type is already set
      if LF_TFILM is not initial and
         LF_TFILM ne LF_TVERS.
***   Version Type is not valid
        move 1 to RF_RESULT.
      else.
***   Version Type is valid
        move 0 to RF_RESULT.
      endif.
    endif.

  endmethod.
  method CHECK_VRCOL.

*** 0 Version Color is maintained and valid.
*** 1 Version Color is maintained but not valid.
*** 2 Version Color is not maintained.

    data: LF_VRCOL type        ZVCXI_FRS_VRCOL,
          LF_FICOL type        ZVCXI_F0S_FICOL.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BDATA_EXTR type ref to ZCL_VCXI_FRS_PR_BDATA_EXTR.

***----------------------------------------------------------------------------
*** Get Version Color
    ME->GET_VRCOL( importing EF_VRCOL = LF_VRCOL ).

    if LF_VRCOL is initial.
*** Version Color is not maintained
      move 2 to RF_RESULT.

    else.
*** Get Basic Data Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_BDATA_EXTR=>C_IPRVT_BDATA_EXTR
                                       IF_INUSE = ABAP_TRUE ).
      read table LT_GATE into LR_GATE index 1.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BDATA_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          move 1 to RF_RESULT.
          return.
      endtry.

*** Get Basic Data Film Color
      LR_PR_BDATA_EXTR->GET_FICOL( importing EF_FICOL = LF_FICOL ).

*** Check if Basic Data Film Color is already set
      if LF_FICOL is not initial and
         LF_FICOL ne LF_VRCOL.
***   Version Colo is not valid
        move 1 to RF_RESULT.
      else.
***   Version Color is valid
        move 0 to RF_RESULT.
      endif.
    endif.

  endmethod.
  method CHECK_VRTHI.

*** 0 Version Thickness is maintained and valid.
*** 1 Version Thickness is maintained but not valid.
*** 2 Version Thickness is not maintained.

    data: LS_VRTHI type        ZVCXI_FRS_S_VRTHI,
          LS_FITHI type        ZVCXI_F0S_S_FITHI.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BDATA_EXTR type ref to ZCL_VCXI_FRS_PR_BDATA_EXTR.

***----------------------------------------------------------------------------
*** Get Version Thickness
    ME->GET_VRTHI( importing ES_VRTHI = LS_VRTHI ).

    if LS_VRTHI-VRTHI is initial.
*** Version Thickness is not maintained
      move 2 to RF_RESULT.

    else.
*** Get Basic Data Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_BDATA_EXTR=>C_IPRVT_BDATA_EXTR
                                       IF_INUSE = ABAP_TRUE ).
      read table LT_GATE into LR_GATE index 1.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BDATA_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          move 1 to RF_RESULT.
          return.
      endtry.

*** Get Basic Data Film Thickness
      LR_PR_BDATA_EXTR->GET_FITHI( importing ES_FITHI = LS_FITHI ).

*** Check if Basic Data Thickness is already set
      if LS_FITHI-FITHI is not initial and
         LS_FITHI-FITHI ne LS_VRTHI-VRTHI.
***   Version Thickness is not valid
        move 1 to RF_RESULT.
      else.
***   Version Thickness is valid
        move 0 to RF_RESULT.
      endif.
    endif.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Number of Layer
    if ME->CHECK_NOLAY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Version Thickness
    if ME->CHECK_VRTHI( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Version Type
    if ME->CHECK_TVERS( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Version Color
    if ME->CHECK_VRCOL( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Number of Layer
    case ME->CHECK_NOLAY( ).
      when 0.
***     Number of Layer is valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '102' ).
      when 1.
***     Number of Layer is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '103' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Version Thickness
    case ME->CHECK_VRTHI( ).
      when 0.
***     Version Thickness is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '201' ).
      when 1.
***     Version Thickness is maintained but is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '202' ).
      when 2.
***     Version Thickness is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '203' ).
    endcase.

*** Check Version Type
    case ME->CHECK_TVERS( ).
      when 0.
***     Version Type is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '204' ).
      when 1.
***     Version Type is maintained but is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      when 2.
***     Version Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '206' ).
    endcase.

*** Check Version Color
    case ME->CHECK_VRCOL( ).
      when 0.
***     Version Color is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '207' ).
      when 1.
***     Version Color is maintained but is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '208' ).
      when 2.
***     Version Color is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '209' ).
    endcase.

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TVERS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TVERS ).
    move LS_PARAM-STRNG to EF_TVERS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VRCOL.

    data: LF_LRCOL type ZVCXI_FRS_LRCOL,
          LF_DESCR type /VCXI/CKX_DESCR,
          LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_LAYCO type ZCL_VCXI_FRS_PR_LAYER_EXTR=>YS_LAYCO,
          LT_LRCOL type table of ZVCXI_FRS_LRCOL.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRCOL ).
    move LS_PARAM-STRNG to EF_VRCOL.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
*** Get Description
    if EF_VRCOL_DESCR is requested.
      check EF_VRCOL is not initial.

***   Split Key
      split EF_VRCOL at '-' into table LT_LRCOL.
      check LT_LRCOL is not initial.

***   Build Description based on Layer
      loop at LT_LRCOL into LF_LRCOL.
***     Get Customizing Value for Description
        read table ZCL_VCXI_FRS_PR_LAYER_EXTR=>T_LAYCO into LS_LAYCO with key LRCOL = LF_LRCOL.
        if SY-SUBRC ne 0.
          move LF_LRCOL to LF_DESCR.
        else.
          move LS_LAYCO-DESCR to LF_DESCR.
        endif.
        concatenate EF_VRCOL_DESCR LF_DESCR into EF_VRCOL_DESCR separated by '-'.
      endloop.

***   Remove leading '-'
      shift EF_VRCOL_DESCR left deleting leading '-'.

    endif.

  endmethod.
  method GET_VRDEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRDEN ).
    move LS_PARAM-ATFLV to ES_VRDEN-VRDEN.
    move LS_PARAM-UNIT  to ES_VRDEN-VRDEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VRFAC.

    data: LT_GATE_LAYER     type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_LAYER       type ref to ZCL_VCXI_FRS_PR_LAYER_EXTR.
    field-symbols <R_LAYER> type ref to /VCXI/CL_VKSR_GATE.


*** Get All Layer for this Version
    LT_GATE_LAYER = R_GATE->GET_PRVDR( ).
    loop at LT_GATE_LAYER assigning <R_LAYER>.
      try.
          move <R_LAYER>->R_CLSPR ?to LR_PR_LAYER.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.

***   Calculate Version Factor based on Layer Factor
      RF_VRFAC = RF_VRFAC + LR_PR_LAYER->GET_LRFAC( ).

    endloop.

  endmethod.
  method GET_VRTHI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRTHI ).
    move LS_PARAM-ATFLV to ES_VRTHI-VRTHI.
    move LS_PARAM-UNIT  to ES_VRTHI-VRTHI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_TVERS.
        ME->HANDLE_RECALC_TVERS( ).

      when C_IEVNT_I_RECALC_VRCOL.
        ME->HANDLE_RECALC_VRCOL( ).

      when C_IEVNT_I_RECALC_VRTHI.
        ME->HANDLE_RECALC_VRTHI( ).

      when C_IEVNT_I_RECALC_VRDEN.
        ME->HANDLE_RECALC_VRDEN( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_SURWT type        ZVCXI_F0S_S_SURWT,
          LS_VRTHI type        ZVCXI_FRS_S_VRTHI,
          LS_VRDEN type        ZVCXI_FRS_S_VRDEN.


***----------------------------------------------------------------------------
*** Get Version Density ( for Unit)
    ME->GET_SURWT( importing ES_SURWT = LS_SURWT ).

    clear: LS_SURWT-SURWT.

*** Get Version Density
    ME->GET_VRDEN( importing ES_VRDEN = LS_VRDEN ).

*** Get Version Thickness
    ME->GET_VRTHI( importing ES_VRTHI = LS_VRTHI ).

*** Only calculate if Version values are filled
    check LS_VRDEN-VRDEN is not initial and
          LS_VRTHI-VRTHI is not initial.

    try.
        LS_SURWT-SURWT = LS_VRDEN-VRDEN * LS_VRTHI-VRTHI.
      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear LS_SURWT-SURWT.
    endtry.

***----------------------------------------------------------------------------
*** Set Version Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_RECALC_TVERS.

    data: LF_TLAYR type          ZVCXI_FRS_TLAYR,
          LF_TVERS type          ZVCXI_FRS_TVERS.
    data: LT_GATE  type          /VCXI/VKSR_TT_GATE,
          LT_TLAYR type table of ZVCXI_FRS_TLAYR.
    data: LR_GATE          type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_LAYER_EXTR type ref to   ZCL_VCXI_FRS_PR_LAYER_EXTR.

***----------------------------------------------------------------------------
*** Collect all Layer Types
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_LAYER_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      clear:  LF_TLAYR.

***   Get Layer Type
      LR_PR_LAYER_EXTR->GET_TLAYR( importing EF_TLAYR = LF_TLAYR ).

***   Check Layer Type is filled
      check LF_TLAYR is not initial.

      append LF_TLAYR to LT_TLAYR.

    endloop.

*** Remove adjacent Duplicates and combine as String
    delete adjacent duplicates from LT_TLAYR.
    loop at LT_TLAYR into LF_TLAYR.
      concatenate LF_TVERS LF_TLAYR into LF_TVERS separated by '-'.
    endloop.
    shift LF_TVERS left deleting leading '-'.

***----------------------------------------------------------------------------
*** Set Version Type
    ME->SET_TVERS( IF_TVERS = LF_TVERS ).

  endmethod.
  method HANDLE_RECALC_VRCOL.

    data: LF_LRCOL         type          ZVCXI_FRS_LRCOL,
          LF_VRCOL         type          ZVCXI_FRS_VRCOL,
          LF_NONTR         type          ABAP_BOOL.
    data: LT_GATE          type          /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_LAYER_EXTR type ref to   ZCL_VCXI_FRS_PR_LAYER_EXTR.
    data: LT_LRCOL         type table of ZVCXI_FRS_LRCOL.


***----------------------------------------------------------------------------
*** Collect all Layer Colors
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_LAYER_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Get Layer Color
      LR_PR_LAYER_EXTR->GET_LRCOL( importing EF_LRCOL = LF_LRCOL ).

***   Check Layer Color is filled
      check LF_LRCOL is not initial.

***   Check if there are non-Transparent colors
      read table ZCL_VCXI_FRS_PR_LAYER_EXTR=>T_LAYCO with key LRCOL = LF_LRCOL
                                                              FTRCO = ' ' transporting no fields.
      if SY-SUBRC is initial.
        move ABAP_TRUE to LF_NONTR.
      endif.

      append LF_LRCOL to LT_LRCOL.
    endloop.

***----------------------------------------------------------------------------
*** Remove duplicates
    delete adjacent duplicates from LT_LRCOL.

*** Exclude the Transparent Color values because there is at least one non-Transparent
    if LF_NONTR eq ABAP_TRUE.
      loop at LT_LRCOL into LF_LRCOL.
        read table ZCL_VCXI_FRS_PR_LAYER_EXTR=>T_LAYCO with key LRCOL = LF_LRCOL
                                                                FTRCO = 'X' transporting no fields.
        check SY-SUBRC is initial.
        delete LT_LRCOL where TABLE_LINE eq LF_LRCOL.
      endloop.

***   Remove new duplicates
      delete adjacent duplicates from LT_LRCOL.
    endif.

***----------------------------------------------------------------------------
*** Combine as String
    loop at LT_LRCOL into LF_LRCOL.
      concatenate LF_VRCOL LF_LRCOL into LF_VRCOL separated by '-'.
    endloop.
    shift LF_VRCOL left deleting leading '-'.

*** Set Version Color
    ME->SET_VRCOL( IF_VRCOL = LF_VRCOL ).

  endmethod.
  method HANDLE_RECALC_VRDEN.


    data: LS_LRDEN         type        ZVCXI_FRS_S_LRDEN,
          LS_LRTHI         type        ZVCXI_FRS_S_LRTHI,
          LS_LRPER         type        ZVCXI_FRS_S_LRPER,
          LS_VRDEN         type        ZVCXI_FRS_S_VRDEN,
          LS_CALCV         type        ZVCXI_XCS_S_CALCV,
          LS_CALCV_LAYER   type        ZVCXI_XCS_S_CALCV.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_LAYER_EXTR type ref to ZCL_VCXI_FRS_PR_LAYER_EXTR.

*** Recipe Density:
*** ( ( Thickness Layer 1 / (Overall Thickness / 100) *
*** ( 1 /
***  ( Quantity Raw Material 1 / Density Raw Material 1 +
***    Quantity Raw Material 2 / Density Raw Material 2 +
***    Quantity Raw Material 3 / Density Raw Material 3 )
***    * 100 )
***  / 100 ) +
*** ( ( Thickness Layer 2 / (Overall Thickness / 100) *
*** ( 1 /
***  ( Quantity Raw Material 1 / Density Raw Material 1 +
***    Quantity Raw Material 2 / Density Raw Material 2 +
***    Quantity Raw Material 3 / Density Raw Material 3 )
***    * 100 )
***  / 100 ) +
*** ( ( Thickness Layer 3 / (Overall Thick-ness / 100) *
*** ( 1 /
***   ( Quantity Raw Material 1 / Density Raw Material 1 +
***     Quantity Raw Material 2 / Density Raw Material 2 +
***     Quantity Raw Material 3 / Density Raw Material 3 )
***     * 100 )
***  / 100 )

*** Recipe Density:
*** (Percentage Layer 1 * Density Layer 1) +
*** (Percentage Layer 2 * Density Layer 2) +
*** (Percentage Layer 3 * Density Layer 3)

*** Percentage of Layer:
*** Thickness Layer / (Overall Thickness / 100)

*** Density Layer:
*** 1 / ( (Quantity Raw Material 1 / Density Raw Material 1)
***     + (Quantity Raw Material 2 / Density Raw Material 2)
***     + (Quantity Raw Material 3 / Density Raw Material 3) ) * 100


*** Get Version Density ( for Unit)
    ME->GET_VRDEN( importing ES_VRDEN = LS_VRDEN ).
    move LS_VRDEN-VRDEN_UOM to LS_CALCV-CALCV_UOM.
    clear: LS_VRDEN-VRDEN.

***----------------------------------------------------------------------------
*** Calculate Version Density based on Layer Density
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_LAYER_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      clear:  LS_LRDEN,
              LS_LRTHI.

***   Get Layer Density
      LR_PR_LAYER_EXTR->GET_LRDEN( importing ES_LRDEN = LS_LRDEN ).

***   Get Layer Thickness
      LR_PR_LAYER_EXTR->GET_LRTHI( importing ES_LRTHI = LS_LRTHI ).

      check LS_LRDEN-LRDEN is not initial and
            LS_LRTHI-LRTHI is not initial.

***   Calculate Percentage of Layer
      ME->CALC_LRPER( exporting IS_LRTHI = LS_LRTHI
                      importing ES_LRPER = LS_LRPER ).

*** Calculate Version Density
      LS_CALCV_LAYER-CALCV = LS_LRPER-LRPER * LS_LRDEN-LRDEN / 100.
      add LS_CALCV_LAYER-CALCV to LS_CALCV-CALCV.

    endloop.

***----------------------------------------------------------------------------
*** Set Version Density
    move LS_CALCV-CALCV     to LS_VRDEN-VRDEN.
    move LS_CALCV-CALCV_UOM to LS_VRDEN-VRDEN_UOM.
    ME->SET_VRDEN( IS_VRDEN = LS_VRDEN ).

  endmethod.
  method HANDLE_RECALC_VRTHI.

    data: LS_LRTHI type        ZVCXI_FRS_S_LRTHI,
          LS_VRTHI type        ZVCXI_FRS_S_VRTHI,
          LS_CALCV type        ZVCXI_XCS_S_CALCV.
    data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_LAYER_EXTR type ref to ZCL_VCXI_FRS_PR_LAYER_EXTR.


***----------------------------------------------------------------------------
*** Version Thickness:
*** (Thickness Layer 1 + Thickness Layer 2 + Thickness Layer 3 + ...)

***----------------------------------------------------------------------------
*** Get Version Thickness ( for Unit)
    ME->GET_VRTHI( importing ES_VRTHI = LS_VRTHI ).
    move LS_VRTHI-VRTHI_UOM to LS_CALCV-CALCV_UOM.

    clear: LS_VRTHI-VRTHI.

***----------------------------------------------------------------------------
*** Calculate Version Thickness based on Layer Thickness
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_LAYER_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      clear:  LS_LRTHI.

***   Get Layer Thickness
      LR_PR_LAYER_EXTR->GET_LRTHI( importing ES_LRTHI = LS_LRTHI ).

      check LS_LRTHI-LRTHI is not initial.

***   Calculate temporary sum
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_LRTHI-LRTHI
          IF_CALCV_UOM_1 = LS_LRTHI-LRTHI_UOM
          IF_CALCV_2     = LS_CALCV-CALCV
          IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
          IF_UOM         = LS_VRTHI-VRTHI_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
        importing
          EF_CALCV       = LS_CALCV-CALCV
          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

    endloop.

***----------------------------------------------------------------------------
*** Bring calculated Value to Version Thickness
    try.
        move LS_CALCV-CALCV     to LS_VRTHI-VRTHI.
      catch CX_SY_CONVERSION_OVERFLOW.
        clear LS_VRTHI-VRTHI.
    endtry.
    move LS_CALCV-CALCV_UOM to LS_VRTHI-VRTHI_UOM.

*** Set Version Thickness
    ME->SET_VRTHI( IS_VRTHI = LS_VRTHI ).

  endmethod.
  method SET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_TVERS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TVERS ).

    move IF_TVERS           to LS_PARAM-STRNG.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_VRCOL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRCOL ).

    move IF_VRCOL           to LS_PARAM-STRNG.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_VRDEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRDEN ).

    move IS_VRDEN-VRDEN     to LS_PARAM-ATFLV.
    move IS_VRDEN-VRDEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Version Density Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_VRDEN_CHANGED ).
    endif.

  endmethod.
  method SET_VRTHI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRTHI ).

    move IS_VRTHI-VRTHI     to LS_PARAM-ATFLV.
    move IS_VRTHI-VRTHI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Version Thickness Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_VRTHI_CHANGED ).
    endif.

  endmethod.
