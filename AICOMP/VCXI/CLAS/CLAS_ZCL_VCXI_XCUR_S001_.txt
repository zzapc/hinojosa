
class ZCL_VCXI_XCUR_S001 definition
  public
  inheriting from /VCXI/CL_CKMR_CLSTP
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .

  methods EXECUTE
    redefinition .
protected section.

  data R_DCO_INPUT type ref to ZCL_VCXI_XCUR_DCO_MUROB .
  data R_DCO_OUTPUT type ref to ZCL_VCXI_XCUR_DCO_MUROB .

  methods ADJUST_UNIT
    importing
      !IR_PARAM type ref to /VCXI/CL_VKSC_PARAM
    changing
      !CS_PARAM type /VCXI/VKSR_S_PARAM
    raising
      /VCXI/CX_CKX .
  methods CHECK_MURFE
    importing
      !IR_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL
      !IT_MURFE type ZVCXI_XCUR_TT_MURFE
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_MURFP
    importing
      !IT_MURFP type ZVCXI_XCUR_TT_MURFP
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods APPLY_MURUE
    importing
      !IS_MURUE type ZVCXI_XCUR_S_MURUE
      !IS_MUCUE type ZVCXI_XCUC_S_MUCUE
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods APPLY_MURUP_LEOKY
    importing
      !IS_MURUP type ZVCXI_XCUR_S_MURUP
      !IS_MUCUP type ZVCXI_XCUC_S_MUCUP
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods APPLY_MURUP_PARAM
    importing
      !IS_MURUP type ZVCXI_XCUR_S_MURUP
      !IS_MUCUP type ZVCXI_XCUC_S_MUCUP
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_CUELMNT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_CUELMNT) type ref to /VCXI/CL_VKSC_CUELMNT
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RT_SPVRE) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RS_SVCEL) type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_S001 definition
class ZCL_VCXI_XCUR_S001 implementation.
  method ADJUST_UNIT.

    data: LF_UNIT  type /VCXI/CKX_UOM.


    check IR_PARAM->F_TUORC = /VCXI/CL_VKSC_PARAM=>C_TUORC_U.

*** Adjust unit if needed
    ZCL_VCXI_XCUC_MUCEL=>GET_PARAM_INFO( exporting IR_PARAM = IR_PARAM
                                                   IF_SYSOM = ME->R_DCO_INPUT->F_SYSOM
                                         importing EF_UNIT  = LF_UNIT ).
    if CS_PARAM-UNIT ne LF_UNIT.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = CS_PARAM-ATFLV
                                                         IF_UOM_IN    = CS_PARAM-UNIT
                                                         IF_UOM_OUT   = LF_UNIT
                                               importing EF_VALUE_OUT = CS_PARAM-ATFLV
                                                         EF_UOM_OUT   = CS_PARAM-UNIT ).
    endif.

  endmethod.
  method APPLY_MURUE.

    try.
        check IS_MUCUE-FMEXE is not initial.

***     Dynamic Call of Exit Function Module
        call function IS_MUCUE-FMEXE
          exporting
            IR_SVCEL    = IR_SVCEL
            IR_SVC      = IR_SVC
            IR_DATA     = IS_MURUE-R_DATA
            IR_IDAT_SVC = ME->R_DCO_OUTPUT->R_IDAT_SVC
          changing
            CS_SVCEL    = CS_SVCEL.

      catch CX_SY_DYN_CALL_ERROR into data(LR_CX_SY_DYN_CALL_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_DYN_CALL_ERROR ).
    endtry.

  endmethod.
  method APPLY_MURUP_LEOKY.

    data: LF_MATCH type ABAP_BOOL.
    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_MUMAP type ZVCXI_XCUR_S_MUMAP.
    field-symbols: <I_RANGE_FROM> type TABLE,
                   <F_VALUE_TO>   type ANY.


*** Get current SmartVC Value
    LS_LEOKY = IR_SVCEL->GET_LEOKY( ).

*** Define Setby
    LS_LEOKY-SETBY = IS_MURUP-SETBY.
    if LS_LEOKY-SETBY is initial.
      LS_LEOKY-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    endif.

***------------------------------------------------------------------------------------------------
*** Loop at all defined mappings
    loop at IS_MURUP-T_MUMAP into LS_MUMAP.
***   Dereferencing of Mapping
      assign LS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.
      assign LS_MUMAP-R_VALUE_TO->*   to <F_VALUE_TO>.

***   Map Value
      if LS_LEOKY-LEOKY in <I_RANGE_FROM>.
        LS_LEOKY-LEOKY = <F_VALUE_TO>.
        LF_MATCH = ABAP_TRUE.
        exit.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** If a Match was found
    if LF_MATCH eq ABAP_TRUE.
***   Set new Value
      CS_SVCEL-S_LEOKY = LS_LEOKY.

***   Add Event
      if IS_MUCUP-IEVNT is not initial.
        append value #( IEVNT = IS_MUCUP-IEVNT ) to CS_SVCEL-T_SVCEV.
      endif.
    endif.

  endmethod.
  method APPLY_MURUP_PARAM.

    data: LF_MATCH type ABAP_BOOL.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MUMAP type ZVCXI_XCUR_S_MUMAP,
          LS_SVCPA type ZVCXI_XCI_S_SVCPA.
    field-symbols: <I_RANGE_FROM> type TABLE,
                   <F_VALUE_TO>   type ANY,
                   <S_SVCPA>      type ZVCXI_XCI_S_SVCPA,
                   <S_SVCEV>      type ZVCXI_XCI_S_SVCEV.


*** Get current SmartVC Value
    LS_PARAM = IR_SVCEL->GET_PARAM( IF_PARID = IS_MURUP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).

*** Adjust unit if needed
    ME->ADJUST_UNIT( exporting IR_PARAM = IS_MURUP-R_PARAM
                     changing  CS_PARAM = LS_PARAM ).

*** Identify current Parameter in Integration Data
    LS_SVCPA = value #( CS_SVCEL-T_SVCPA[ PARID = LS_PARAM-PARID ]
                        default value #( PARID = LS_PARAM-PARID ) ).

*** Define Setby
    LS_SVCPA-SETBY = IS_MURUP-SETBY.
    if LS_SVCPA-SETBY is initial.
      LS_SVCPA-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    endif.

***------------------------------------------------------------------------------------------------
*** Loop at all defined mappings
    loop at IS_MURUP-T_MUMAP into LS_MUMAP.
***   Dereferencing of Mapping
      assign LS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.
      assign LS_MUMAP-R_VALUE_TO->*   to <F_VALUE_TO>.

***   Map Character Value
      if IS_MURUP-R_PARAM->F_PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR and
         LS_PARAM-ATWRT in <I_RANGE_FROM>.
        LS_SVCPA-ATWRT = <F_VALUE_TO>.
        LF_MATCH = ABAP_TRUE.
        exit.
      endif.

***   Map Numeric Value
      if IS_MURUP-R_PARAM->F_PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC and
         LS_PARAM-ATFLV in <I_RANGE_FROM>.
        LS_SVCPA-ATFLV = <F_VALUE_TO>.
        LS_SVCPA-UNIT  = LS_PARAM-UNIT.
        LF_MATCH = ABAP_TRUE.
        exit.
      endif.

***   Map String Value
      if IS_MURUP-R_PARAM->F_PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG and
         LS_PARAM-STRNG in <I_RANGE_FROM>.
        LS_SVCPA-STRNG = <F_VALUE_TO>.
        LF_MATCH = ABAP_TRUE.
        exit.
      endif.
    endloop.


***------------------------------------------------------------------------------------------------
*** If a Match was found
    if LF_MATCH eq ABAP_TRUE.
***   Remove old value and add new
      delete CS_SVCEL-T_SVCPA where PARID = LS_PARAM-PARID.
      append LS_SVCPA to CS_SVCEL-T_SVCPA.

***   Add Event
      if IS_MUCUP-IEVNT is not initial.
        append value #( IEVNT = IS_MUCUP-IEVNT ) to CS_SVCEL-T_SVCEV.
      endif.
    endif.

  endmethod.
  method CHECK_MURFE.

    data: LS_MURFE type ZVCXI_XCUR_S_MURFE,
          LS_MUCFE type ZVCXI_XCUC_S_MUCFE.


*** Start positiv
    RF_VALID = ABAP_TRUE.

    loop at IT_MURFE into LS_MURFE.
***   Get Customizing of Exit
      LS_MUCFE = IR_MUCEL->T_MUCFE[ IEXIT = LS_MURFE-IEXIT ].
      check LS_MUCFE-FMEXE is not initial.

      try.
***       Clear Result for next Exit Call
          clear RF_VALID.

***       Dynamic Call of Exit Function Module
          call function LS_MUCFE-FMEXE
            exporting
              IR_SVCEL = IR_SVCEL
              IR_SVC   = IR_SVC
              IR_DATA  = LS_MURFE-R_DATA
            importing
              EF_VALID = RF_VALID.

        catch CX_SY_DYN_CALL_ERROR into data(LR_CX_SY_DYN_CALL_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_DYN_CALL_ERROR ).
      endtry.

***   Stop processing if failed once
      if RF_VALID eq ABAP_FALSE.
        exit.
      endif.
    endloop.

  endmethod.
  method CHECK_MURFP.

    data: LS_MURFP type ZVCXI_XCUR_S_MURFP,
          LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_LEOKY type /VCXI/VKSR_S_LEOKY.
    field-symbols: <I_RANGE> type TABLE.


*** Start positiv
    RF_VALID = ABAP_TRUE.

    loop at IT_MURFP into LS_MURFP.

***   Dereferencing of Mapping
      assign LS_MURFP-R_RANGE->* to <I_RANGE>.

***------------------------------------------------------------------------------------------------
***   Parameter based Filter
      if LS_MURFP-R_PARAM is bound.
***     Get current SmartVC Value
        LS_PARAM = IR_SVCEL->GET_PARAM( IF_PARID = LS_MURFP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).

        case LS_MURFP-R_PARAM->F_PARTY.
***       Check Character Value
          when /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR.
            if not LS_PARAM-ATWRT in <I_RANGE>.
              RF_VALID = ABAP_FALSE.
              exit.
            endif.

***       Check Numeric Value
          when /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC.
***         Adjust unit if needed
            ME->ADJUST_UNIT( exporting IR_PARAM = LS_MURFP-R_PARAM
                             changing  CS_PARAM = LS_PARAM ).

            if not LS_PARAM-ATFLV in <I_RANGE>.
              RF_VALID = ABAP_FALSE.
              exit.
            endif.

***       Check String Value
          when /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG.
            if not LS_PARAM-STRNG in <I_RANGE>.
              RF_VALID = ABAP_FALSE.
              exit.
            endif.
        endcase.

***------------------------------------------------------------------------------------------------
***   Leading Object based Filter
      else.
***     Check Leading Object Value
        if not IR_SVCEL->GET_LEOKY( )-LEOKY in <I_RANGE>.
          RF_VALID = ABAP_FALSE.
          exit.
        endif.
      endif.

***   Stop processing if failed once
      if RF_VALID eq ABAP_FALSE.
        exit.
      endif.
    endloop.

  endmethod.
  method CONSTRUCTOR.

*** Super Constructor
    SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO to Required Input/Output
    ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
    ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

  endmethod.
  method EXECUTE.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL,
          LS_SVCEL type ZVCXI_XCI_S_SVCEL,
          LS_MURUP type ZVCXI_XCUR_S_MURUP,
          LS_MURUE type ZVCXI_XCUR_S_MURUE.
    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT.
    data: LR_SVC     type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.


    try.
***     Get SmartVC Instance
        LR_SVC = ME->R_DCO_INPUT->GET_SVC( ).
        if LR_SVC is not bound.
***       Object has no configuration defined.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCUR'
                                                IF_MSGNO = '411' ).
        endif.

***     Create Integration Data
        ME->R_DCO_OUTPUT->SET_IDAT_SVC( IR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
                                                                                     IF_IEALI = 'X_IDATSPV' ) ).

***------------------------------------------------------------------------------------------------
***     Get Supervised Runtime Elements (SPVRE) based on Integration Data Supervisor (Alias)
        loop at ME->GET_SPVRE( IR_SVC = LR_SVC ) into LR_OBJECT.
          LR_SVCEL ?= LR_OBJECT.
          check LR_SVCEL->F_FREED ne ABAP_TRUE.  "Ignore freed instances (e.g. after free through Exit)

***       Get SmartVC Customizing Element
          LR_CUELMNT = ME->GET_CUELMNT( IR_SVCEL = LR_SVCEL ).

***------------------------------------------------------------------------------------------------
***       Loop at Update Elements of Update Definition
          loop at ME->R_DCO_INPUT->GET_MUREL( ) into LS_MUREL.

***         Check Assigned Customizing Element
            check LINE_EXISTS( LS_MUREL-R_MUCEL->T_MUSCE[ TABLE_LINE = LR_CUELMNT ] ).

***         Check against Paramter-based as well as Exit-based Filter
            check CHECK_MURFP( IT_MURFP = LS_MUREL-T_MURFP
                               IR_SVCEL = LR_SVCEL ).
            check CHECK_MURFE( IR_MUCEL = LS_MUREL-R_MUCEL
                               IT_MURFE = LS_MUREL-T_MURFE
                               IR_SVCEL = LR_SVCEL
                               IR_SVC   = LR_SVC ).

***------------------------------------------------------------------------------------------------
***         Get Update Element of Integration Data
            LS_SVCEL = ME->GET_SVCEL( IR_SVCEL = LR_SVCEL ).

***         Apply Parameter-based Update
            loop at LS_MUREL-T_MURUP into LS_MURUP.
              if LS_MURUP-R_PARAM is bound.
***             For Parameter
                ME->APPLY_MURUP_PARAM( exporting IS_MURUP = LS_MURUP
                                                 IS_MUCUP = LS_MUREL-R_MUCEL->T_MUCUP[ R_PARAM = LS_MURUP-R_PARAM ]
                                                 IR_SVCEL = LR_SVCEL
                                       changing  CS_SVCEL = LS_SVCEL ).
              else.
***             For Leading Object
                ME->APPLY_MURUP_LEOKY( exporting IS_MURUP = LS_MURUP
                                                 IS_MUCUP = LS_MUREL-R_MUCEL->T_MUCUP[ R_PARAM = LS_MURUP-R_PARAM ]
                                                 IR_SVCEL = LR_SVCEL
                                       changing  CS_SVCEL = LS_SVCEL ).
              endif.
            endloop.

***         Update Integration Data Element
            ME->R_DCO_OUTPUT->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

***         Apply Exit-based Updates
            loop at LS_MUREL-T_MURUE into LS_MURUE.
              ME->APPLY_MURUE( exporting IS_MURUE = LS_MURUE
                                         IS_MUCUE = LS_MUREL-R_MUCEL->T_MUCUE[ IEXIT = LS_MURUE-IEXIT ]
                                         IR_SVCEL = LR_SVCEL
                                         IR_SVC   = LR_SVC
                               changing  CS_SVCEL = LS_SVCEL ).
            endloop.

***         Update Integration Data Element
            ME->R_DCO_OUTPUT->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

          endloop.
        endloop.

***------------------------------------------------------------------------------------------------
***     Save Integration Data based on SmartMD Control Setting
        if ME->R_DCO_INPUT->R_SMDCNTRL is bound and
           ME->R_DCO_INPUT->R_SMDCNTRL->F_FSIDA eq ABAP_TRUE.
          ME->R_DCO_OUTPUT->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
***       Integration Data & was saved.
          ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCIU'
                                            IF_MSGTY = 'S'
                                            IF_MSGNO = '101'
                                            IF_MSGV1 = ME->R_DCO_OUTPUT->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ).
        endif.

***------------------------------------------------------------------------------------------------
***     Set Status to Complete
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).

***     Save Status
        ME->R_RPSEG->SAVE_AND_COMMIT( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method GET_CUELMNT.

    data: LF_LEVEL type /VCXI/VKSR_LEVEL.


*** Get Customizing Element using the LEVEL of the Runtime Element
    LF_LEVEL = IR_SVCEL->GET_LEVEL( ).
    RR_CUELMNT ?= /VCXI/CL_VKSC_CUELMNT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LF_LEVEL(22) ) ).

  endmethod.
  method GET_SPVRE.

    data: LT_SVCEL  type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL_IDATSPV type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


*** Get Integration Data Supervisor
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_IEALI = ME->R_DCO_OUTPUT->R_IDAT_SVC->F_IEALI ).
    check LT_SVCEL is not initial.
    LR_SVCEL_IDATSPV ?= LT_SVCEL[ 1 ].

*** Get Runtime Elements which can be Supervised
    RT_SPVRE = cast ZCL_VCXI_XCS_EA_IDATSPV( LR_SVCEL_IDATSPV->GET_CLSEA( ) )->GET_SPVRE( ).

  endmethod.
  method GET_SVCEL.

    data: LF_LEVEL type /VCXI/VKSR_LEVEL.

*** Get Level identifying the SmartVC Element
    LF_LEVEL = IR_SVCEL->GET_LEVEL( ).


    if LINE_EXISTS( ME->R_DCO_OUTPUT->R_IDAT_SVC->T_SVCEL[ LEVEL = LF_LEVEL ] ).
***   Use Existing
      RS_SVCEL = ME->R_DCO_OUTPUT->R_IDAT_SVC->T_SVCEL[ LEVEL = LF_LEVEL ].
    else.
***   Add Update Element to Integration Data
      RS_SVCEL-ISELF = IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      RS_SVCEL-CSELF = ME->R_DCO_OUTPUT->R_IDAT_SVC->ADD_SVCEL( IF_ISELF = RS_SVCEL-ISELF ).
      RS_SVCEL-LEVEL = LF_LEVEL.
    endif.

  endmethod.
