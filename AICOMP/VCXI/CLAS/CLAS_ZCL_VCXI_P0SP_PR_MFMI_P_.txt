
class ZCL_VCXI_P0SP_PR_MFMI_P definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MFMI
  create public .

public section.

  interfaces ZIF_VCXI_P0SP_MFP .

  aliases C_PARID_PCDIR
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCDIR .
  aliases C_PARID_PCHEI
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCHEI .
  aliases C_PARID_PCLEN
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCLEN .
  aliases C_PARID_PCTYP
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCTYP .
  aliases C_PARID_PCUPS
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCUPS .
  aliases C_PARID_PCWID
    for ZIF_VCXI_P0SP_MFP~C_PARID_PCWID .
  aliases GET_PCDIM
    for ZIF_VCXI_P0SP_MFP~GET_PCDIM .
  aliases SET_PCDIM
    for ZIF_VCXI_P0SP_MFP~SET_PCDIM .

  constants C_IPRVT_P0_MFMI_P type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SP_MFMI_P'. "#EC NOTEXT
  constants C_PARID_BAWGP_A type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGP_A'. "#EC NOTEXT
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGT'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_P0S_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_P0S_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  aliases GET_PCDIR
    for ZIF_VCXI_P0SP_MFP~GET_PCDIR .
  aliases GET_PCHEI
    for ZIF_VCXI_P0SP_MFP~GET_PCHEI .
  aliases GET_PCLEN
    for ZIF_VCXI_P0SP_MFP~GET_PCLEN .
  aliases GET_PCTYP
    for ZIF_VCXI_P0SP_MFP~GET_PCTYP .
  aliases GET_PCUPS
    for ZIF_VCXI_P0SP_MFP~GET_PCUPS .
  aliases GET_PCWID
    for ZIF_VCXI_P0SP_MFP~GET_PCWID .
  aliases SET_PCDIR
    for ZIF_VCXI_P0SP_MFP~SET_PCDIR .
  aliases SET_PCHEI
    for ZIF_VCXI_P0SP_MFP~SET_PCHEI .
  aliases SET_PCLEN
    for ZIF_VCXI_P0SP_MFP~SET_PCLEN .
  aliases SET_PCTYP
    for ZIF_VCXI_P0SP_MFP~SET_PCTYP .
  aliases SET_PCUPS
    for ZIF_VCXI_P0SP_MFP~SET_PCUPS .
  aliases SET_PCWID
    for ZIF_VCXI_P0SP_MFP~SET_PCWID .

  constants C_IEVNT_O_PCDIM_CHANGED type /VCXI/VKSC_IEVNT value 'PCDIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED'. "#EC NOTEXT

  methods CONV_TO_CONSU
    redefinition .
  methods GET_UOMCF
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SP_PR_MFMI_P definition
class ZCL_VCXI_P0SP_PR_MFMI_P implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDS's
  move C_PARID_CONSU_P to ME->F_PARID_CONSU.
  move C_PARID_PRICP_P to ME->F_PARID_PRICP.

endmethod.
method CONV_TO_CONSU.

  data: LF_DIMID_C type DIMID,
        LF_DIMID_I type DIMID,
        LF_PCTYP   type ZVCXI_P0SP_PCTYP.
  data: LS_CONSU   type ZVCXI_XCSP_S_CONSU,
        LS_QTY     type ZVCXI_XCSP_S_QTY,
        LS_MQTYO   type ZVCXI_XCSP_S_MQTYO.

*** Get Manager if it is missing
  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.

  LS_CONSU = ME->GET_CONSU( ).

  LF_DIMID_C = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_CONSU-CONSU_UOM ).
  LF_DIMID_I = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = IS_MQTYI-MQTYI_UOM ).

  case LF_DIMID_C.
    when LF_DIMID_I.
***   1:1 Forward
      RS_CONSU-CONSU     = IS_MQTYI-MQTYI.
      RS_CONSU-CONSU_UOM = IS_MQTYI-MQTYI_UOM.

    when 'AAAADL'.
      case LF_DIMID_I.
        when 'LENGTH'.

***       Do Conversion by Manager
          check ME->R_PR_MFMGR is bound.
          LS_QTY-QTY     = IS_MQTYI-MQTYI.
          LS_QTY-QTY_UOM = IS_MQTYI-MQTYI_UOM.

          LS_MQTYO = ME->R_PR_MFMGR->CONV_TO_MQTYO( IS_QTY = LS_QTY ).

          if ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_MQTYO-MQTYO_UOM ) eq LF_DIMID_C.
            RS_CONSU-CONSU     = LS_MQTYO-MQTYO.
            RS_CONSU-CONSU_UOM = LS_MQTYO-MQTYO_UOM.
          else.
            clear: RS_CONSU.
          endif.
      endcase.
  endcase.

*** Round to PC Type
  LF_PCTYP = ME->GET_PCTYP( ).
  ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LF_PCTYP
                                             changing  CF_VALUE = RS_CONSU-CONSU ).

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP_A ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_DESCR.

  data: LF_PCTYP type ZVCXI_P0SP_PCTYP,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_PCTYP = ME->GET_PCTYP( ).
  LF_DESCR = ZCL_VCXI_P0SP_CUST_PCTYP=>GET_PCTYP_DESCR( IF_PCTYP = LF_PCTYP ).
  RF_DESCR = SUPER->GET_DESCR( ).

  if LF_DESCR is not initial.
    concatenate LF_DESCR '-' RF_DESCR into RF_DESCR separated by SPACE.
  endif.

endmethod.
method GET_STATUS.

  data: LS_MFISP type ZVCXI_XCSP_S_MFISP.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Setup Factor
  LS_MFISP = ME->GET_MFISP( ).
  if LS_MFISP-MFISP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Consumption Factor
  if ME->GET_MFICF( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_MFISP type ZVCXI_XCSP_S_MFISP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Setup Factor
  LS_MFISP = ME->GET_MFISP( ).
  if LS_MFISP-MFISP is not initial.
***  Setup Factor is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '101' ).
  else.
***  Setup Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '102' ).
  endif.

***------------------------------------------------------------------
*** Check Consumption Factor
  if ME->GET_MFICF( ) is not initial.
***  Consumption Factor is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '103' ).
  else.
***  Consumption Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '104' ).
  endif.

endmethod.
method GET_UOMCF.

  data:          LS_PCLEN  type ZVCXI_P0SP_S_PCLEN,
                 LS_PCWID  type ZVCXI_P0SP_S_PCWID,
                 LS_BAWGT  type ZVCXI_P0S_S_BAWGT,
                 LS_BAWGP  type ZVCXI_P0S_S_BAWGP,
                 LS_AREA   type ZVCXI_XCS_S_CALCV.
  field-symbols: <S_UOMCF> type ZVCXI_XCS_S_UOMCF.

*** ---------------------------------------------------------------------------------------
*** Add M2 as Conversion Factor
  append initial line to RT_UOMCF assigning <S_UOMCF>.
  LS_PCLEN = ME->ZIF_VCXI_P0SP_MFP~GET_PCLEN( ).
  LS_PCWID = ME->ZIF_VCXI_P0SP_MFP~GET_PCWID( ).

*** Get the Sheet Area
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCLEN-PCLEN
                                                      IF_CALCV_UOM_1 = LS_PCLEN-PCLEN_UOM
                                                      IF_CALCV_2     = LS_PCWID-PCWID
                                                      IF_CALCV_UOM_2 = LS_PCWID-PCWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                      IF_UOM         = 'M2'
                                            importing EF_CALCV       = LS_AREA-CALCV
                                                      EF_CALCV_UOM   = LS_AREA-CALCV_UOM ).

  <S_UOMCF>-UOMCF = LS_AREA-CALCV.
  <S_UOMCF>-UOM   = LS_AREA-CALCV_UOM.

*** ---------------------------------------------------------------------------------------
*** Add KG as Conversion Factor
  append initial line to RT_UOMCF assigning <S_UOMCF>.
  LS_BAWGT = ME->GET_BAWGT( ).
  LS_BAWGP = ME->GET_BAWGP( ).

*** Get Weight per Sheet (Area)
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BAWGP-BAWGP_UOM
                                                     IF_UOM_IN    = LS_AREA-CALCV_UOM
                                                     IF_VALUE_IN  = LS_AREA-CALCV
                                           importing EF_VALUE_OUT = LS_AREA-CALCV
                                                     EF_UOM_OUT   = LS_AREA-CALCV_UOM ).

*** Get Factor for Weight
  if LS_AREA-CALCV ne 0 and LS_BAWGP-BAWGP ne 0.
    <S_UOMCF>-UOMCF = LS_BAWGT-BAWGT / LS_BAWGP-BAWGP * LS_AREA-CALCV.
    <S_UOMCF>-UOM   = LS_BAWGT-BAWGT_UOM.
  endif.

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP_A ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~GET_PCDIM.

  data: LS_PCLEN type ZVCXI_P0SP_S_PCLEN,
        LS_PCWID type ZVCXI_P0SP_S_PCWID,
        LS_PCHEI type ZVCXI_P0SP_S_PCHEI.

***------------------------------------------------------------------
*** PC Type
  move ME->GET_PCTYP( ) to RS_PCDIM-PCTYP.

***------------------------------------------------------------------
*** PC Length
  move ME->GET_PCLEN( ) to LS_PCLEN.
  move-corresponding LS_PCLEN to RS_PCDIM.

*** PC Width
  move ME->GET_PCWID( ) to LS_PCWID.
  move-corresponding LS_PCWID to RS_PCDIM.

*** PC Height
  move ME->GET_PCHEI( ) to LS_PCHEI.
  move-corresponding LS_PCHEI to RS_PCDIM.

***------------------------------------------------------------------
*** PC UPs
  move ME->GET_PCUPS( ) to RS_PCDIM-PCUPS.

*** Number of Outs on MFMI are 1
  move 1                to RS_PCDIM-NOOUT.

***------------------------------------------------------------------
*** PC Direction
  move ME->GET_PCDIR( ) to RS_PCDIM-PCDIR.

endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCDIR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).
    RF_PCDIR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCHEI ).
    RS_PCHEI-PCHEI     = LS_PARAM-ATFLV.
    RS_PCHEI-PCHEI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCLEN ).
    RS_PCLEN-PCLEN     = LS_PARAM-ATFLV.
    RS_PCLEN-PCLEN_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCTYP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).
    RF_PCTYP = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).
    RF_PCUPS = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P0SP_MFP~GET_PCWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCWID ).
    RS_PCWID-PCWID     = LS_PARAM-ATFLV.
    RS_PCWID-PCWID_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCDIM.

  data: LS_PCLEN type ZVCXI_P0SP_S_PCLEN,
        LS_PCWID type ZVCXI_P0SP_S_PCWID,
        LS_PCHEI type ZVCXI_P0SP_S_PCHEI,
        LS_PCDIM type ZVCXI_P0SP_S_PCDIM.

  LS_PCDIM =  ME->GET_PCDIM( ).

***------------------------------------------------------------------
*** Set PC Type
  if IS_PCDIM-PCTYP ne LS_PCDIM-PCTYP.
    ME->SET_PCTYP( IF_PCTYP = IS_PCDIM-PCTYP
                   IF_SETBY = IF_SETBY ).
  endif.

***------------------------------------------------------------------
*** Set PC Length
  if IS_PCDIM-PCLEN ne LS_PCDIM-PCLEN.
    move-corresponding IS_PCDIM to LS_PCLEN.
    ME->SET_PCLEN( IS_PCLEN = LS_PCLEN
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set PC Width
  if IS_PCDIM-PCWID ne LS_PCDIM-PCWID.
    move-corresponding IS_PCDIM to LS_PCWID.
    ME->SET_PCWID( IS_PCWID = LS_PCWID
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set PC Height
  if IS_PCDIM-PCHEI ne LS_PCDIM-PCHEI.
    move-corresponding IS_PCDIM to LS_PCHEI.
    ME->SET_PCHEI( IS_PCHEI = LS_PCHEI
                   IF_SETBY = IF_SETBY ).
  endif.

***------------------------------------------------------------------
*** Set PC Ups
  if IS_PCDIM-PCUPS ne LS_PCDIM-PCUPS.
    ME->SET_PCUPS( IF_PCUPS = IS_PCDIM-PCUPS
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set Number of Outs
  "Value will be ignored

***------------------------------------------------------------------
*** Set PC Direction
  if IS_PCDIM-PCDIR ne LS_PCDIM-PCDIR.
    ME->SET_PCDIR( IF_PCDIR = IS_PCDIM-PCDIR
                   IF_SETBY = IF_SETBY ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCDIR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).

  move IF_PCDIR                            to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCHEI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCHEI ).

  move IS_PCHEI-PCHEI                      to LS_PARAM-ATFLV.
  move IS_PCHEI-PCHEI_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCLEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCLEN ).

  move IS_PCLEN-PCLEN                      to LS_PARAM-ATFLV.
  move IS_PCLEN-PCLEN_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).

  move IF_PCTYP                            to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCUPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).

  move IF_PCUPS                            to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SP_MFP~SET_PCWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCWID ).

  move IS_PCWID-PCWID                      to LS_PARAM-ATFLV.
  move IS_PCWID-PCWID_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCDIM_CHANGED ).
  endif.

endmethod.
