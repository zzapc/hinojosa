
class ZCL_VCXI_XCSP_PR_OVRCNT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_OVRCNT .

  aliases C_IPRVT_XCS_OVRCNT
    for ZIF_VCXI_XCSP_OVRCNT~C_IPRVT_XCS_OVRCNT .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_OARS
    exporting
      !ES_OARS type ZVCXI_XCSP_S_OARS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OARSF
    exporting
      !ES_OARSF type ZVCXI_XCSP_S_OARSF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORRSF
    exporting
      !ES_ORRSF type ZVCXI_XCSP_S_ORRSF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OARWF
    exporting
      !ES_OARWF type ZVCXI_XCSP_S_OARWF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORRWF
    exporting
      !ES_ORRWF type ZVCXI_XCSP_S_ORRWF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OASTI
    exporting
      !ES_OASTI type ZVCXI_XCSP_S_OASTI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OASWA
    exporting
      !ES_OASWA type ZVCXI_XCSP_S_OASWA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OATTI
    exporting
      !ES_OATTI type ZVCXI_XCSP_S_OATTI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORSTI
    exporting
      !ES_ORSTI type ZVCXI_XCSP_S_ORSTI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORRSR
    exporting
      !ES_ORRSR type ZVCXI_XCSP_S_ORRSR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORSWA
    exporting
      !ES_ORSWA type ZVCXI_XCSP_S_ORSWA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ORTTI
    exporting
      !ES_ORTTI type ZVCXI_XCSP_S_ORTTI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  class /VCXI/CL_VKSR_GATE definition load .
  methods SET_OARSF
    importing
      !IS_OARSF type ZVCXI_XCSP_S_OARSF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORRSF
    importing
      !IS_ORRSF type ZVCXI_XCSP_S_ORRSF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_OARWF
    importing
      !IS_OARWF type ZVCXI_XCSP_S_OARWF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORRWF
    importing
      !IS_ORRWF type ZVCXI_XCSP_S_ORRWF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_OARS
    importing
      !IS_OARS type ZVCXI_XCSP_S_OARS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_OASTI
    importing
      !IS_OASTI type ZVCXI_XCSP_S_OASTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORRSR
    importing
      !IS_ORRSR type ZVCXI_XCSP_S_ORRSR optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_OASWA
    importing
      !IS_OASWA type ZVCXI_XCSP_S_OASWA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_OATTI
    importing
      !IS_OATTI type ZVCXI_XCSP_S_OATTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORSTI
    importing
      !IS_ORSTI type ZVCXI_XCSP_S_ORSTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORSWA
    importing
      !IS_ORSWA type ZVCXI_XCSP_S_ORSWA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods SET_ORTTI
    importing
      !IS_ORTTI type ZVCXI_XCSP_S_ORTTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
protected section.

  aliases C_IEVNT_O_TIME_CHANGED
    for ZIF_VCXI_XCSP_OVRCNT~C_IEVNT_O_TIME_CHANGED .
  aliases C_IEVNT_O_WASTE_CHANGED
    for ZIF_VCXI_XCSP_OVRCNT~C_IEVNT_O_WASTE_CHANGED .

  constants C_PARID_OARSF type /VCXI/VKS_PARID value 'ZVCXI_XC_OARSF'. "#EC NOTEXT
  constants C_PARID_OARSR_A type /VCXI/VKS_PARID value 'ZVCXI_XC_OARSR_A'. "#EC NOTEXT
  constants C_PARID_OARSR_L type /VCXI/VKS_PARID value 'ZVCXI_XC_OARSR_L'. "#EC NOTEXT
  constants C_PARID_OARSR_P type /VCXI/VKS_PARID value 'ZVCXI_XC_OARSR_P'. "#EC NOTEXT
  constants C_PARID_OARSR_W type /VCXI/VKS_PARID value 'ZVCXI_XC_OARSR_W'. "#EC NOTEXT
  constants C_PARID_OARST type /VCXI/VKS_PARID value 'ZVCXI_XC_OARST'. "#EC NOTEXT
  constants C_PARID_OARWF type /VCXI/VKS_PARID value 'ZVCXI_XC_OARWF'. "#EC NOTEXT
  constants C_PARID_OASTI type /VCXI/VKS_PARID value 'ZVCXI_XC_OASTI'. "#EC NOTEXT
  constants C_PARID_OASWA_A type /VCXI/VKS_PARID value 'ZVCXI_XC_OASWA_A'. "#EC NOTEXT
  constants C_PARID_OASWA_L type /VCXI/VKS_PARID value 'ZVCXI_XC_OASWA_L'. "#EC NOTEXT
  constants C_PARID_OASWA_P type /VCXI/VKS_PARID value 'ZVCXI_XC_OASWA_P'. "#EC NOTEXT
  constants C_PARID_OASWA_W type /VCXI/VKS_PARID value 'ZVCXI_XC_OASWA_W'. "#EC NOTEXT
  constants C_PARID_OATTI type /VCXI/VKS_PARID value 'ZVCXI_XC_OATTI'. "#EC NOTEXT
  constants C_PARID_ORRSR type /VCXI/VKS_PARID value 'ZVCXI_XC_ORRSR'. "#EC NOTEXT
  constants C_PARID_ORRSF type /VCXI/VKS_PARID value 'ZVCXI_XC_ORRSF'. "#EC NOTEXT
  constants C_PARID_ORRWF type /VCXI/VKS_PARID value 'ZVCXI_XC_ORRWF'. "#EC NOTEXT
  constants C_PARID_ORSTI type /VCXI/VKS_PARID value 'ZVCXI_XC_ORSTI'. "#EC NOTEXT
  constants C_PARID_ORSWA type /VCXI/VKS_PARID value 'ZVCXI_XC_ORSWA'. "#EC NOTEXT
  constants C_PARID_ORTTI type /VCXI/VKS_PARID value 'ZVCXI_XC_ORTTI'. "#EC NOTEXT
  data F_PARID_OARSR type /VCXI/VKS_PARID .
  data F_PARID_OASWA type /VCXI/VKS_PARID .
private section.

  methods INIT_PARID_OARSR
    raising
      /VCXI/CX_CKX .
  methods INIT_PARID_OASWA
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSP_PR_OVRCNT definition
class ZCL_VCXI_XCSP_PR_OVRCNT implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Parameter ID for Setup Waste
  ME->INIT_PARID_OASWA( ).

*** Initialize Parameter ID for Run Speed Rate
  ME->INIT_PARID_OARSR( ).

endmethod.
method GET_OARS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

*** Run Speed Rate
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_OARSR ).
  move LS_PARAM-ATFLV to ES_OARS-OARSR.
  move LS_PARAM-UNIT  to ES_OARS-OARSR_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

*** Run Speed Time
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARST ).
  move LS_PARAM-ATFLV to ES_OARS-OARST.
  move LS_PARAM-UNIT  to ES_OARS-OARST_UOM.

endmethod.
method GET_OARSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARSF ).
  move LS_PARAM-ATFLV to ES_OARSF-OARSF.
  move LS_PARAM-UNIT  to ES_OARSF-OARSF_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_OARWF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARWF ).
  move LS_PARAM-ATFLV to ES_OARWF-OARWF.
  move LS_PARAM-UNIT  to ES_OARWF-OARWF_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_OASTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OASTI ).
  move LS_PARAM-ATFLV to ES_OASTI-OASTI.
  move LS_PARAM-UNIT  to ES_OASTI-OASTI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_OASWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_OASWA ).
  move LS_PARAM-ATFLV to ES_OASWA-OASWA.
  move LS_PARAM-UNIT  to ES_OASWA-OASWA_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_OATTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OATTI ).
  move LS_PARAM-ATFLV to ES_OATTI-OATTI.
  move LS_PARAM-UNIT  to ES_OATTI-OATTI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORRSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRSF ).
  move LS_PARAM-ATFLV to ES_ORRSF-ORRSF.
  move LS_PARAM-UNIT  to ES_ORRSF-ORRSF_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORRSR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRSR ).
  move LS_PARAM-ATFLV to ES_ORRSR-ORRSR.
  move LS_PARAM-UNIT  to ES_ORRSR-ORRSR_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORRWF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRWF ).
  move LS_PARAM-ATFLV to ES_ORRWF-ORRWF.
  move LS_PARAM-UNIT  to ES_ORRWF-ORRWF_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORSTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORSTI ).
  move LS_PARAM-ATFLV to ES_ORSTI-ORSTI.
  move LS_PARAM-UNIT  to ES_ORSTI-ORSTI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORSWA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORSWA ).
  move LS_PARAM-ATFLV to ES_ORSWA-ORSWA.
  move LS_PARAM-UNIT  to ES_ORSWA-ORSWA_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORTTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORTTI ).
  move LS_PARAM-ATFLV to ES_ORTTI-ORTTI.
  move LS_PARAM-UNIT  to ES_ORTTI-ORTTI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method INIT_PARID_OARSR.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_OARSR_A or
                          PARID eq C_PARID_OARSR_L or
                          PARID eq C_PARID_OARSR_P or
                          PARID eq C_PARID_OARSR_W ).
    move LS_PARAM-PARID to ME->F_PARID_OARSR.
    exit.
  endloop.

endmethod.
method INIT_PARID_OASWA.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_OASWA_A or
                          PARID eq C_PARID_OASWA_L or
                          PARID eq C_PARID_OASWA_P or
                          PARID eq C_PARID_OASWA_W ).
    move LS_PARAM-PARID to ME->F_PARID_OASWA.
    exit.
  endloop.

endmethod.
method SET_OARS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Run Speed Rate
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_OARSR ).

  if IF_SETBY is not initial.
    if IS_OARS is supplied.
      move IS_OARS-OARSR                    to LS_PARAM-ATFLV.
      move IS_OARS-OARSR_UOM                to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

***----------------------------------------------------------------------------
*** Run Speed Time
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARST ).

  if IF_SETBY is not initial.
    if IS_OARS is supplied.
      move IS_OARS-OARST                    to LS_PARAM-ATFLV.
      move IS_OARS-OARST_UOM                to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_OARSF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARSF ).

  if IF_SETBY is not initial.
    if IS_OARSF is supplied.
      move IS_OARSF-OARSF                   to LS_PARAM-ATFLV.
      move IS_OARSF-OARSF_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_OARWF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OARWF ).

  if IF_SETBY is not initial.
    if IS_OARWF is supplied.
      move IS_OARWF-OARWF                   to LS_PARAM-ATFLV.
      move IS_OARWF-OARWF_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WASTE_CHANGED ).
  endif.

endmethod.
method SET_OASTI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OASTI ).

  if IF_SETBY is not initial.
    if IS_OASTI is supplied.
      move IS_OASTI-OASTI                   to LS_PARAM-ATFLV.
      move IS_OASTI-OASTI_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.
  if IF_SETBY is not initial.
    if IS_OASTI is supplied.
      move IS_OASTI-OASTI                   to LS_PARAM-ATFLV.
      move IS_OASTI-OASTI_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_OASWA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_OASWA ).

  if IF_SETBY is not initial.
    if IS_OASWA is supplied.
      move IS_OASWA-OASWA                   to LS_PARAM-ATFLV.
      move IS_OASWA-OASWA_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WASTE_CHANGED ).
  endif.

endmethod.
method SET_OATTI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OATTI ).

  if IF_SETBY is not initial.
    if IS_OATTI is supplied.
      move IS_OATTI-OATTI                   to LS_PARAM-ATFLV.
      move IS_OATTI-OATTI_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_ORRSF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRSF ).

  if IF_SETBY is not initial.
    if IS_ORRSF is supplied.
      move IS_ORRSF-ORRSF                   to LS_PARAM-ATFLV.
      move IS_ORRSF-ORRSF_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_ORRSR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRSR ).

  if IF_SETBY is not initial.
    if IS_ORRSR is supplied.
      move IS_ORRSR-ORRSR                   to LS_PARAM-ATFLV.
      move IS_ORRSR-ORRSR_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_ORRWF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORRWF ).

  if IF_SETBY is not initial.
    if IS_ORRWF is supplied.
      move IS_ORRWF-ORRWF                   to LS_PARAM-ATFLV.
      move IS_ORRWF-ORRWF_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WASTE_CHANGED ).
  endif.

endmethod.
method SET_ORSTI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORSTI ).

  if IF_SETBY is not initial.
    if IS_ORSTI is supplied.
      move IS_ORSTI-ORSTI                   to LS_PARAM-ATFLV.
      move IS_ORSTI-ORSTI_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method SET_ORSWA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORSWA ).

  if IF_SETBY is not initial.
    if IS_ORSWA is supplied.
      move IS_ORSWA-ORSWA                   to LS_PARAM-ATFLV.
      move IS_ORSWA-ORSWA_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WASTE_CHANGED ).
  endif.

endmethod.
method SET_ORTTI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ORTTI ).

  if IF_SETBY is not initial.
    if IS_ORTTI is supplied.
      move IS_ORTTI-ORTTI                   to LS_PARAM-ATFLV.
      move IS_ORTTI-ORTTI_UOM               to LS_PARAM-UNIT.
      move IF_SETBY                         to LS_PARAM-SETBY.
    endif.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TIME_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSRS.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORRSR    type ZVCXI_XCSP_S_ORRSR,
         LS_OARS     type ZVCXI_XCSP_S_OARS.

***----------------------------------------------------------------------------
*** Get relative Run Speed
  ME->GET_ORRSR( importing ES_ORRSR = LS_ORRSR
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSRS-MSRSR = CS_MSRS-MSRSR * ( LS_ORRSR-ORRSR / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Run Speed
  ME->GET_OARS( importing ES_OARS  = LS_OARS
                          EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OARS-OARSR     to CS_MSRS-MSRSR.
    move LS_OARS-OARSR_UOM to CS_MSRS-MSRSR_UOM.
    move LS_OARS-OARST     to CS_MSRS-MSRST.
    move LS_OARS-OARST_UOM to CS_MSRS-MSRST_UOM.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSRSF.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORRSF    type ZVCXI_XCSP_S_ORRSF,
         LS_OARSF    type ZVCXI_XCSP_S_OARSF.

***----------------------------------------------------------------------------
*** Get relative Run Slowdown Factor
  ME->GET_ORRSF( importing ES_ORRSF = LS_ORRSF
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSRSF-MSRSF = CS_MSRSF-MSRSF * ( LS_ORRSF-ORRSF / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Run Slowdown Factor
  ME->GET_OARSF( importing ES_OARSF = LS_OARSF
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OARSF-OARSF     to CS_MSRSF-MSRSF.
    move LS_OARSF-OARSF_UOM to CS_MSRSF-MSRSF_UOM.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSRWF.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORRWF    type ZVCXI_XCSP_S_ORRWF,
         LS_OARWF    type ZVCXI_XCSP_S_OARWF.

***----------------------------------------------------------------------------
*** Get relative Run Waste Factor
  ME->GET_ORRWF( importing ES_ORRWF = LS_ORRWF
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSRWF-MSRWF = CS_MSRWF-MSRWF * ( LS_ORRWF-ORRWF / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Run Waste Factor
  ME->GET_OARWF( importing ES_OARWF = LS_OARWF
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OARWF-OARWF     to CS_MSRWF-MSRWF.
    move LS_OARWF-OARWF_UOM to CS_MSRWF-MSRWF_UOM.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSSTI.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORSTI    type ZVCXI_XCSP_S_ORSTI,
         LS_OASTI    type ZVCXI_XCSP_S_OASTI.

***----------------------------------------------------------------------------
*** Get relative Setup Time
  ME->GET_ORSTI( importing ES_ORSTI = LS_ORSTI
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSSTI-MSSTI = CS_MSSTI-MSSTI * ( LS_ORSTI-ORSTI / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Setup Time
  ME->GET_OASTI( importing ES_OASTI = LS_OASTI
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OASTI-OASTI     to CS_MSSTI-MSSTI.
    move LS_OASTI-OASTI_UOM to CS_MSSTI-MSSTI_UOM.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSSWA.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORSWA    type ZVCXI_XCSP_S_ORSWA,
         LS_OASWA    type ZVCXI_XCSP_S_OASWA.

***----------------------------------------------------------------------------
*** Get relative Setup Waste
  ME->GET_ORSWA( importing ES_ORSWA = LS_ORSWA
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSSWA-MSSWA = CS_MSSWA-MSSWA * ( LS_ORSWA-ORSWA / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Setup Waste
  ME->GET_OASWA( importing ES_OASWA = LS_OASWA
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OASWA-OASWA     to CS_MSSWA-MSSWA.
    move LS_OASWA-OASWA_UOM to CS_MSSWA-MSSWA_UOM.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OVRCNT~ADJ_MSTTI.

  data:  LF_SETBY    type /VCXI/VKSR_SETBY.
  data:  LS_ORTTI    type ZVCXI_XCSP_S_ORTTI,
         LS_OATTI    type ZVCXI_XCSP_S_OATTI.

***----------------------------------------------------------------------------
*** Get relative Teardown Time
  ME->GET_ORTTI( importing ES_ORTTI = LS_ORTTI
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    CS_MSTTI-MSTTI = CS_MSTTI-MSTTI * ( LS_ORTTI-ORTTI / 100 ).
  endif.

***----------------------------------------------------------------------------
*** Get absolute Teardown Time
  ME->GET_OATTI( importing ES_OATTI = LS_OATTI
                           EF_SETBY = LF_SETBY ).
  if LF_SETBY is not initial.
    move LS_OATTI-OATTI     to CS_MSTTI-MSTTI.
    move LS_OATTI-OATTI_UOM to CS_MSTTI-MSTTI_UOM.
  endif.

endmethod.
