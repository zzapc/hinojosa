
class ZCL_VCXI_P1SS_PR_CORR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P1SS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_SCORES_AP .
  interfaces ZIF_VCXI_PXSS_LTEXT .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_PXSS_REDUC .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IEVNT_O_ARBPL_CHANGED type /VCXI/VKSC_IEVNT value 'ARBPL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BOARS_CHANGED type /VCXI/VKSC_IEVNT value 'BOARS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SELFD_CHANGED type /VCXI/VKSC_IEVNT value 'SELFD_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P1_CORR type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_CORR' ##NO_TEXT.
  constants C_PARID_ARBPL type /VCXI/VKS_PARID value 'ZVCXI_XC_ARBPL' ##NO_TEXT.
  constants C_PARID_BOARS type /VCXI/VKS_PARID value 'ZVCXI_PC_BOARS' ##NO_TEXT.
  constants C_PARID_ISCAP type /VCXI/VKS_PARID value 'ZVCXI_PX_ISCAP' ##NO_TEXT.
  constants C_PARID_SELFD type /VCXI/VKS_PARID value 'ZVCXI_PC_SELFD' ##NO_TEXT.
  constants C_ATTID_VALID_TBOAR type /VCXI/VKS_ATTID value 'VALID_TBOAR' ##NO_TEXT.

  methods GET_ARBPL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_ARBPL) type ARBPL
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
    returning
      value(RR_PR_BOARD) type ref to ZCL_VCXI_P1SS_PR_BOARD
    raising
      /VCXI/CX_CKX .
  methods GET_BOARS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BOARS) type ZVCXI_PCSS_BOARS
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_FINPR
    returning
      value(RF_FINPR) type ZVCXI_P1S_FINPR
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
      !ER_FLUTE type ref to ZCL_VCXI_PCSSC_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_FPRPR
    returning
      value(RF_FPRPR) type ZVCXI_PCSS_FPRPR
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT_SIDRU
    importing
      !IF_UOM type /VCXI/CKX_UOM
    exporting
      !ES_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU
      !ES_SIDRU_MAX type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUPS) type ZVCXI_PXS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_PRBOA
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRBOA) type ZVCXI_PCSS_PRBOA
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_LAMI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_LAMI) type ref to ZCL_VCXI_P1SS_PR_LAMI
    raising
      /VCXI/CX_CKX .
  methods GET_SABOA
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SABOA) type ZVCXI_PCSS_SABOA
    raising
      /VCXI/CX_CKX .
  methods GET_SELFD
    exporting
      value(EF_SETBY) type /VCXI/VKSR_SETBY
    returning
      value(RF_SELFD) type ZVCXI_PCSS_SELFD
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDIM
    exporting
      !ES_SHTLE type ZVCXI_P0SS_S_SHTLE
      !ES_SHTWI type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TBOAR
    returning
      value(RF_VALID_TBOAR) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_SELFD_REQUIRED
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_ARBPL
    importing
      !IF_ARBPL type ARBPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_BOARS
    importing
      !IF_BOARS type ZVCXI_PCSS_BOARS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FINPR
    importing
      !IF_FINPR type ZVCXI_P1S_FINPR
    raising
      /VCXI/CX_CKX .
  methods SET_FPRPR
    importing
      !IF_FPRPR type ZVCXI_PCSS_FPRPR
    raising
      /VCXI/CX_CKX .
  methods SET_SELFD
    importing
      !IF_SELFD type ZVCXI_PCSS_SELFD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_ADJUST_ISCAP type /VCXI/VKSC_IEVNT value 'ADJUST_ISCAP' ##NO_TEXT.
  constants C_IEVNT_I_INIT_BOARDS type /VCXI/VKSC_IEVNT value 'INIT_BOARDS' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SELFD type /VCXI/VKSC_IEVNT value 'RECALC_SELFD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_CRBPX_CHANGED type /VCXI/VKSC_IEVNT value 'CRBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_ILTYP_DP_CORRTRIM type /VCXI/VSMC_ILTYP value 'PC_LT_DP_CORRTRIM' ##NO_TEXT.
  constants C_PARID_CRBPX type /VCXI/VKS_PARID value 'ZVCXI_P1_CRBPX' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REDUC type /VCXI/VKSC_IEVNT value 'INIT_REDUC' ##NO_TEXT.

  methods CHECK_COLEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RDLET
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RDWIT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WERKS_ARBPL
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_ID_BY_IPRVT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_IPRVT type /VCXI/VKSC_IPRVT
    returning
      value(RF_ID) type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods GET_ISCAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ISCAP type ZVCXI_PXS_ISCAP
      !EF_FAALL type ZVCXI_PXSS_FAALL
    returning
      value(RT_ISCOR) type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PREPR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !EF_ID type /VCXI/CKX_ID
    returning
      value(RR_PR_PREPR) type ref to ZCL_VCXI_P1SS_PR_PREPR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_INLPR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !EF_ID type /VCXI/CKX_ID
    returning
      value(RR_PR_INLPR) type ref to ZCL_VCXI_P1SS_PR_INLPR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_ISCAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BOARDS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REDUC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SELFD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_CRBPX
    importing
      !IF_CRBPX type ZVCXI_P1S_CRBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ISCAP
    importing
      !IF_ISCAP type ZVCXI_PXS_ISCAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
      !IF_FAALL type ZVCXI_PXSS_FAALL optional
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CORR definition
class ZCL_VCXI_P1SS_PR_CORR implementation.
  method CHECK_COLEN.

    data: LF_DESCR type /VCXI/CKX_DESCR.


    data(LR_BL_CRBPROP) = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    check LR_BL_CRBPROP is bound.

*** Only perform check of Corrugation Length is defined
    check LR_BL_CRBPROP->S_COLEN-COLEN is not initial.

***------------------------------------------------------------------------------------------------
*** Check for Length Scores
    if LINE_EXISTS( LR_BL_CRBPROP->T_SCORE[ ISCOR(1) = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ) ] ).
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                         importing EF_DESCR = LF_DESCR ).
***     "&1" scores are allowed if Corrugation Length is used.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '086'
                                 IF_MSGV1 = LF_DESCR ).
      endif.
    endif.

  endmethod.
  method CHECK_RDLET.

    data: LS_RDLET     type ZVCXI_PXS_S_RDLET,
          LS_RDLET_SUM type ZVCXI_PXS_S_RDLET,
          LS_RDTOP     type ZVCXI_PXS_S_RDTOP,
          LS_RDBOT     type ZVCXI_PXS_S_RDBOT,
          LS_SHTLE     type ZVCXI_P0SS_S_SHTLE.


*** Only in case of Lamination
    check ME->GET_PRVDR_LAMI( ) is bound.

***----------------------------------------------------------------------------
*** Get defined Reductions
    LS_RDLET = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLET( ).
    LS_RDTOP = ME->ZIF_VCXI_PXSS_REDUC~GET_RDTOP( ).
    LS_RDBOT = ME->ZIF_VCXI_PXSS_REDUC~GET_RDBOT( ).

*** Sum Reduction and use Unit of defined Total Reduction
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RDTOP-RDTOP
                                                        IF_CALCV_UOM_1 = LS_RDTOP-RDTOP_UOM
                                                        IF_CALCV_2     = LS_RDBOT-RDBOT
                                                        IF_CALCV_UOM_2 = LS_RDBOT-RDBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_RDLET-RDLET_UOM
                                              importing EF_CALCV       = LS_RDLET_SUM-RDLET
                                                        EF_CALCV_UOM   = LS_RDLET_SUM-RDLET_UOM ).

***----------------------------------------------------------------------------
*** Check Reduction Sum
    if LS_RDLET-RDLET eq LS_RDLET_SUM-RDLET.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Reduction on Length correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '551' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Reduction on Length not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '552' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check Reduction against Sheet
    if LS_RDLET-RDLET is not initial.
      ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE ).
      if LS_SHTLE-SHTLE_UOM is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RDLET-RDLET
                                                      IF_CALCV_UOM_1 = LS_RDLET-RDLET_UOM
                                                      IF_CALCV_2     = LS_SHTLE-SHTLE
                                                      IF_CALCV_UOM_2 = LS_SHTLE-SHTLE_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Length greater equal Sheet Length.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '560' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_RDWIT.

    data: LS_RDWIT     type ZVCXI_PXS_S_RDWIT,
          LS_RDWIT_SUM type ZVCXI_PXS_S_RDWIT,
          LS_RDLEF     type ZVCXI_PXS_S_RDLEF,
          LS_RDRIG     type ZVCXI_PXS_S_RDRIG,
          LS_SHTWI     type ZVCXI_P0SS_S_SHTWI.


*** Only in case of Lamination
    check ME->GET_PRVDR_LAMI( ) is bound.

***----------------------------------------------------------------------------
*** Get defined Reductions
    LS_RDWIT = ME->ZIF_VCXI_PXSS_REDUC~GET_RDWIT( ).
    LS_RDLEF = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLEF( ).
    LS_RDRIG = ME->ZIF_VCXI_PXSS_REDUC~GET_RDRIG( ).

*** Sum Reduction and use Unit of defined Total Reduction
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RDLEF-RDLEF
                                                        IF_CALCV_UOM_1 = LS_RDLEF-RDLEF_UOM
                                                        IF_CALCV_2     = LS_RDRIG-RDRIG
                                                        IF_CALCV_UOM_2 = LS_RDRIG-RDRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_RDWIT-RDWIT_UOM
                                              importing EF_CALCV       = LS_RDWIT_SUM-RDWIT
                                                        EF_CALCV_UOM   = LS_RDWIT_SUM-RDWIT_UOM ).

***----------------------------------------------------------------------------
*** Check Reduction Sum
    if LS_RDWIT-RDWIT eq LS_RDWIT_SUM-RDWIT.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Reduction on Width correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '553' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Reduction on Width not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '554' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check Reduction against Sheet
    if LS_RDWIT-RDWIT is not initial.
      ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).
      if LS_SHTWI-SHTWI_UOM is not initial and
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RDWIT-RDWIT
                                                      IF_CALCV_UOM_1 = LS_RDWIT-RDWIT_UOM
                                                      IF_CALCV_2     = LS_SHTWI-SHTWI
                                                      IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Width greater equal Sheet Width.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '561' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_SCORES.

    data: LF_ISCOR_C type ZVCXI_P0SS_ISCOR,
          LF_ISCOR_L type ZVCXI_P0SS_ISCOR.
    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM.

***------------------------------------------------------------------------------------------------
*** Get Remaining Scores
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        endif.
        exit.
    endtry.

*** Get Edge Scores and ignore them
    ZCL_VCXI_PXSS_BL_SCORE=>GET_EDGE_SCORES( exporting IT_SCORE_COM = LT_SCORE_COM
                                             importing EF_ISCOR_C   = LF_ISCOR_C
                                                       EF_ISCOR_L   = LF_ISCOR_L ).
    delete LT_SCORE_COM where ISCOR = LF_ISCOR_C
                         or   ISCOR = LF_ISCOR_L.

***------------------------------------------------------------------------------------------------
*** Check if all Scores were applied
    if LT_SCORE_COM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Not all scores are applied.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '085' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     All scores are applied.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '084' ).
      endif.
    endif.

  endmethod.
  method CHECK_WERKS_ARBPL.

    data: LF_WERKS type WERKS_D,
          LF_ARBPL type ARBPL,
          LF_COUNT type I.


    LF_WERKS = ME->GET_WERKS( ).
    LF_ARBPL = ME->GET_ARBPL( ).

    if LF_ARBPL is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Work Center is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '082' ).
      endif.
    else.
***   Check Plant and Work Center Combination
      select count(*)
             into LF_COUNT
             from CRHD
            where WERKS eq LF_WERKS
             and  ARBPL eq LF_ARBPL.
      if SY-SUBRC ne 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Maintained Work Center and Plant &1 combination not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '083'
                                   IF_MSGV1 = LF_ARBPL
                                   IF_MSGV2 = LF_WERKS ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Work Center is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '081' ).
        endif.
      endif.
    endif.

  endmethod.
  method GET_ARBPL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ARBPL ).
    move LS_PARAM-ATWRT to RF_ARBPL.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_ARBPL is not initial.

***----------------------------------------------------------------------------
*** Get Work Center Reference if requested
    if ER_ARBPL is requested or
       EF_DESCR is requested.
      ER_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = ME->GET_WERKS( )
                                                                                                                      IF_ARBPL = RF_ARBPL ) ).
    endif.

    if ER_ARBPL is bound.
      EF_DESCR = ER_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
    endif.

  endmethod.
  method GET_BOARD.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.

***--------------------------------------------------------------------------------------
*** Get all Boards
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Boards References
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
          check LR_PR_BOARD is bound.

          check LR_PR_BOARD->GET_MBOAR( ) eq IF_MBOAR.
          move LR_PR_BOARD to RR_PR_BOARD.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BOARD.
      endtry.
    endloop.

  endmethod.
  method GET_BOARS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARS ).
    RF_BOARS = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_CALIP.

    data: LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.


*** Always use Production Board values
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    check LR_PR_BOARD is bound.

*** Get Caliper
    RS_CALIP = LR_PR_BOARD->GET_CALIP( ).

  endmethod.
  method GET_FINPR.

    data: LF_ID  type /VCXI/CKX_ID.
    data: LR_PR_INLPR type ref to ZCL_VCXI_P1SS_PR_INLPR.


    LR_PR_INLPR = ME->GET_PRVDR_INLPR( importing EF_ID = LF_ID ).
    RF_FINPR = cond #( when LF_ID is initial     then ABAP_UNDEFINED
                       when LR_PR_INLPR is bound then ABAP_TRUE else ABAP_FALSE ).

  endmethod.
  method GET_FLUTE.

    data: LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.


***----------------------------------------------------------------------------
*** Always use Production Board values
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    check LR_PR_BOARD is bound.

*** Get Flute
    RF_FLUTE = LR_PR_BOARD->GET_FLUTE( ).

    check RF_FLUTE is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_FLUTE_DESCR( IF_FLUTE = RF_FLUTE ).
    endif.

    if ER_FLUTE is requested.
***   Instance of Flute Customizing
      ER_FLUTE ?= ZCL_VCXI_PCSSC_FLUTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( RF_FLUTE ) ).
    endif.

  endmethod.
  method GET_FPRPR.

    data: LF_ID  type /VCXI/CKX_ID.
    data: LR_PR_PREPR type ref to ZCL_VCXI_P1SS_PR_PREPR.


    LR_PR_PREPR = ME->GET_PRVDR_PREPR( importing EF_ID = LF_ID ).
    RF_FPRPR = cond #( when LF_ID is initial     then ABAP_UNDEFINED
                       when LR_PR_PREPR is bound then ABAP_TRUE else ABAP_FALSE ).

  endmethod.
  method GET_ICONT.

    data: LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE,
          LR_ICONT type ref to ZIF_VCXI_PXSS_ICONT.

*** Find Context Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_ICONT=>C_IPRVT_PX_ICONT
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_ICONT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ICONT.
    endtry.

    check LR_ICONT is bound.
    move LR_ICONT->GET_ICONT( ) to RF_ICONT.

  endmethod.
  method GET_ID_BY_IPRVT.

    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = IF_IPRVT ).

    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key IPRVT = IF_IPRVT.
    if SY-SUBRC eq 0.
      move LS_PRVDR_DEF-ID to RF_ID.
    else.
***   Provider Type &1 not defined for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '003'
                                            IF_MSGV1 = IF_IPRVT
                                            IF_MSGV2 = IR_GATE->F_ID ).
    endif.

  endmethod.
  method GET_ISCAP.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).
    move LS_PARAM-STRNG to EF_ISCAP.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_ISCAP is not initial.

***----------------------------------------------------------------------------
*** Apply All
    EF_FAALL = switch #( EF_ISCAP when '*'   then ABAP_TRUE
                                  when SPACE then ABAP_FALSE
                                             else ABAP_UNDEFINED ).

*** Separate Score IDs
    if RT_ISCOR is requested.
      split EF_ISCAP at ',' into table RT_ISCOR.
    endif.

  endmethod.
  method GET_LIMIT_SIDRU.

    data: LF_GLTYP type        /VCXI/VSMC_GLTYP.
    data: LS_LDIM        type        /VCXI/VSMC_S_LDIM.
    data: LT_LTYPE       type        /VCXI/CKX_TT_OBJECT.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
          LR_ARBPL     type ref to /VCXI/CL_VSMC_ARBPL,
          LR_LTYPE     type ref to /VCXI/CL_VSMC_LTYPE.


***--------------------------------------------------------------------------------------
*** Get Work Center
    ME->GET_ARBPL( importing ER_ARBPL = LR_ARBPL ).
    check LR_ARBPL is bound.

*** Get Customizing Instance of Workcenter
    LR_RTE_ARBPL = new #( IR_ARBPL = LR_ARBPL
                          IF_LCVAL = 'PC' ).
    check LR_RTE_ARBPL is bound.

*** Get Customizing Instance of Machine
    try.
        LR_RTE_CMACH = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IR_ARBPL = LR_RTE_ARBPL->R_ARBPL
                                                              IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF
                                                              IF_LCVAL = LR_RTE_ARBPL->F_LCVAL ).
      catch /VCXI/CX_CKX.
***     Ignore Error Messages when looking for the Limit
        clear LR_RTE_CMACH.
    endtry.
    check LR_RTE_CMACH                is bound and
          LR_RTE_CMACH->R_MTYPE       is bound and
          LR_RTE_CMACH->R_MGRPV_LIMIT is bound.

***--------------------------------------------------------------------------------------
*** Get Maximum and Minimum Side Trim Limit
*** Get right Limit GUID
    LT_LTYPE = LR_RTE_CMACH->R_MTYPE->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      try.
          move LR_OBJECT ?to LR_LTYPE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_LTYPE.
          continue.
      endtry.

***   Get Limit PC_LT_DP_CORRTRIM of Corrugator
      check LR_LTYPE is bound and
            LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ILTYP_DP_CORRTRIM.

      LF_GLTYP = LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

      exit.
    endloop.

*** Read Values
    read table LR_RTE_CMACH->R_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                                   with key GLDIK = LR_RTE_CMACH->R_MGRPV_LIMIT->F_GLDIK
                                                            GLTYP = LF_GLTYP.
    check SY-SUBRC = 0.

*** Export Dimension Limits
    move LS_LDIM-LDMIN to ES_SIDRU_MIN-SIDRU.
    move LS_LDIM-LDUOM to ES_SIDRU_MIN-SIDRU_UOM.
    move LS_LDIM-LDMAX to ES_SIDRU_MAX-SIDRU.
    move LS_LDIM-LDUOM to ES_SIDRU_MAX-SIDRU_UOM.

  endmethod.
  method GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Get Production Board
    data(LR_PR_BOARD) = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    check LR_PR_BOARD is bound.

*** Consider Number of Outs on Width
    RF_NOUPS *= LR_PR_BOARD->GET_NOUTW( ).

  endmethod.
  method GET_PRBOA.

    data: LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.

*** Get Production Board
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    check LR_PR_BOARD is bound.
    RF_PRBOA = LR_PR_BOARD->GET_BOARD( ).

    if EF_DESCR is requested.
      LR_PR_BOARD->GET_BOARD_DESCR( importing EF_DESCR = EF_DESCR ).
    endif.

  endmethod.
  method GET_PRVDR_INLPR.

    clear: ER_GATE,
           EF_ID,
           RR_PR_INLPR.

*** Check if Provider exists
    data(LT_PRVDR_DEF) = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P1SS_PR_INLPR=>C_IPRVT_P1_INLPR ).
    EF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID optional ).
    check EF_ID is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Inline Printing
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_INLPR=>C_IPRVT_P1_INLPR
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_INLPR.

  endmethod.
  method GET_PRVDR_LAMI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Litho-Lamination
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_LAMI=>C_IPRVT_P1_LAMI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_LAMI.

  endmethod.
  method GET_PRVDR_PREPR.

    clear: ER_GATE,
           EF_ID,
           RR_PR_PREPR.

*** Check if Provider exists
    data(LT_PRVDR_DEF) = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P1SS_PR_PREPR=>C_IPRVT_P1_PREPR ).
    EF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID optional ).
    check EF_ID is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Preprint
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PREPR=>C_IPRVT_P1_PREPR
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_PREPR.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_SABOA.

    data: LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.

*** Get Sales Board ID
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S ).
    check LR_PR_BOARD is bound.
    RF_SABOA = LR_PR_BOARD->GET_BOARD( ).

    if EF_DESCR is requested.
      LR_PR_BOARD->GET_BOARD_DESCR( importing EF_DESCR = EF_DESCR ).
    endif.

  endmethod.
  method GET_SELFD.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SELFD ).
    RF_SELFD = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SHTDIM.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM.


*** Get Scores
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM.
    endtry.

*** Calculate Sheet Dimension
    ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = LT_SCORE_COM
                                        importing ES_SHTLE     = ES_SHTLE
                                                  ES_SHTWI     = ES_SHTWI ).

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Workcenter
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WERKS_ARBPL( ) ).

*** Check Reduction on Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RDLET( ) ).

*** Check Reduction on Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RDWIT( ) ).

*** Check Scores
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SCORES( ) ).

*** Check Corrugation Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COLEN( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Workcenter
    ME->CHECK_WERKS_ARBPL( IR_MESSAGE = IR_MESSAGE ).

*** Check Reduction on Length
    ME->CHECK_RDLET( IR_MESSAGE = IR_MESSAGE ).

*** Check Reduction on Width
    ME->CHECK_RDWIT( IR_MESSAGE = IR_MESSAGE ).

*** Check Scores
    ME->CHECK_SCORES( IR_MESSAGE = IR_MESSAGE ).

*** Check Corrugation Length
    ME->CHECK_COLEN( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

***--------------------------------------------------------------------------------------
*** Always use Production Board values
    data(LR_PR_BOARD) = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    check LR_PR_BOARD is bound.

*** Get Surface Weight
    RS_SURWT = LR_PR_BOARD->GET_SURWT( importing EF_SETBY = EF_SETBY ).


***--------------------------------------------------------------------------------------
*** Consider Surface Weight of Inline Printing
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_INPLIN=>C_IPRVT_P1_INPLIN
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
***   Get Surface Weight Inline Printed Liner
      data(LS_SURWT_INPLIN) = cast ZCL_VCXI_P1SS_PR_INPLIN( LR_GATE->R_CLSPR )->GET_SURWT( ).

***   Add to total Surface Weight
      if LS_SURWT_INPLIN-SURWT_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_INPLIN-SURWT
                                                            IF_CALCV_UOM_1 = LS_SURWT_INPLIN-SURWT_UOM
                                                            IF_CALCV_2     = RS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = RS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SURWT-SURWT_UOM
                                                  importing EF_CALCV       = RS_SURWT-SURWT
                                                            EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_VALID_TBOAR.

*** Check for Lamination
    data(LR_PR_LAMI) = ME->GET_PRVDR_LAMI( ).

***--------------------------------------------------------------------------------------
    if LR_PR_LAMI is not bound.
***   Get valid Board Types via Attribute
      try.
          RF_VALID_TBOAR = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_VALID_TBOAR )-ATTVA.
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      endtry.

***--------------------------------------------------------------------------------------
    else.
***   Get valid Board Types from Lamination
      RF_VALID_TBOAR = LR_PR_LAMI->GET_VALID_TBOAR( ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_ADJUST_ISCAP.

    data: LF_FAALL    type ZVCXI_PXSS_FAALL.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR    type ZVCXI_PXS_TT_ISCOR.

*** Process other Events first, to ensure Scores have been backwarded correctly
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Don't adjust if all Scores are applied
    ME->GET_ISCAP( importing EF_FAALL = LF_FAALL ).
    check LF_FAALL ne ABAP_TRUE.

*** Get currently applied Scores (scores that are no longer available wouldn't be in the list)
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).
    LT_ISCOR = value #( for S_SCORE_AP in LT_SCORE_AP where ( FAPPL = ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).

*** Update list of applied scores
    ME->SET_ISCAP( IT_ISCOR = LT_ISCOR  ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P1SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P1SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_ADJUST_ISCAP.
        ME->HANDLE_ADJUST_ISCAP( ).

      when C_IEVNT_I_INIT_BOARDS.
        ME->HANDLE_INIT_BOARDS( ).

      when C_IEVNT_I_RECALC_SELFD.
        ME->HANDLE_RECALC_SELFD( ).

      when C_IEVNT_I_INIT_REDUC.
        ME->HANDLE_INIT_REDUC( ).

    endcase.

  endmethod.
  method HANDLE_INIT_BOARDS.

    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.


***--------------------------------------------------------------------------------------
*** Get existing Boards
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                     IF_INUSE = ABAP_TRUE ).
    check LT_GATE is initial.

***--------------------------------------------------------------------------------------
*** Create Board ID Sales
    LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD ).
    check LR_GATE is bound.
    if LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

    move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
    check LR_PR_BOARD is bound.

*** Set Board Grade Mode
    LR_PR_BOARD->SET_MBOAR( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S ).

***--------------------------------------------------------------------------------------
    if ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S ne ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P.
***   Create Board ID Production
      free LR_GATE.
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD ).
      check LR_GATE is bound.
      if LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.

      free LR_PR_BOARD.
      move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
      check LR_PR_BOARD is bound.

***   Set Board Grade Mode
      LR_PR_BOARD->SET_MBOAR( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
    endif.

  endmethod.
  method HANDLE_INIT_REDUC.

    ME->ZIF_VCXI_PXSS_REDUC~SET_RDWIT( IF_SETBY = SPACE ).
    ME->ZIF_VCXI_PXSS_REDUC~SET_RDLEF( IF_SETBY = SPACE ).
    ME->ZIF_VCXI_PXSS_REDUC~SET_RDRIG( IF_SETBY = SPACE ).

    ME->ZIF_VCXI_PXSS_REDUC~SET_RDLET( IF_SETBY = SPACE ).
    ME->ZIF_VCXI_PXSS_REDUC~SET_RDTOP( IF_SETBY = SPACE ).
    ME->ZIF_VCXI_PXSS_REDUC~SET_RDBOT( IF_SETBY = SPACE ).

  endmethod.
  method HANDLE_RECALC_SELFD.

    data: LF_SELFD type ZVCXI_PCSS_SELFD,
          LF_SETBY type /VCXI/VKSR_SETBY.


*** Get current Status
    LF_SELFD = ME->GET_SELFD( importing EF_SETBY = LF_SETBY ).

***--------------------------------------------------------------------------------------
*** Do the Boards require Self Deckling
    if ME->IS_SELFD_REQUIRED( ).
      LF_SELFD = ABAP_TRUE.
      LF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    else.
      if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
        clear LF_SELFD.
      endif.
    endif.

*** Update Self Deckling
    ME->SET_SELFD( IF_SELFD = LF_SELFD
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_SELFD_REQUIRED.

    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.


***--------------------------------------------------------------------------------------
*** Get all Boards
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                     IF_INUSE = ABAP_TRUE ).

*** Check Boards References
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BOARD.
      endtry.
      check LR_PR_BOARD is bound.

      if LR_PR_BOARD->IS_SELFD_REQUIRED( ).
        RF_REQUIRED = ABAP_TRUE.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** In case of Lamination
    if ME->GET_PRVDR_LAMI( ) is bound.
      RF_REQUIRED = ABAP_TRUE.
    endif.

*** In case of Preprint
    if ME->GET_FPRPR( ) eq ABAP_TRUE.
      RF_REQUIRED = ABAP_TRUE.
    endif.

  endmethod.
  method SET_ARBPL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ARBPL ).

    move IF_ARBPL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ARBPL_CHANGED ).
    endif.

  endmethod.
method SET_BOARS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARS ).

  move IF_BOARS  to LS_PARAM-ATWRT.
  move IF_SETBY  to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARS_CHANGED ).
  endif.

endmethod.
  method SET_CRBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).

    move IF_CRBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FINPR.

*** Get Provider for Inline Printing
    ME->GET_PRVDR_INLPR( importing ER_GATE = data(LR_GATE) ).

*** Activate
    if IF_FINPR eq ABAP_TRUE and
       LR_GATE  is not bound.
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_P1SS_PR_INLPR=>C_IPRVT_P1_INLPR ).
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Deactivate
    elseif IF_FINPR ne ABAP_TRUE and
           LR_GATE  is bound.
      LR_GATE->DO_FREE( ).
    endif.

  endmethod.
  method SET_FPRPR.

*** Get Provider for Preprint
    ME->GET_PRVDR_PREPR( importing ER_GATE = data(LR_GATE) ).

*** Activate
    if IF_FPRPR eq ABAP_TRUE and
       LR_GATE  is not bound.
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_P1SS_PR_PREPR=>C_IPRVT_P1_PREPR ).
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Deactivate
    elseif IF_FPRPR ne ABAP_TRUE and
           LR_GATE  is bound.
      LR_GATE->DO_FREE( ).
    endif.

  endmethod.
  method SET_ISCAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).

    if IT_ISCOR is supplied.
      concatenate lines of IT_ISCOR into LS_PARAM-STRNG separated by ','.
    endif.
    if IF_ISCAP is supplied.
      LS_PARAM-STRNG = IF_ISCAP.
    endif.
    if IF_FAALL is supplied and
       IF_FAALL ne ABAP_UNDEFINED.
      LS_PARAM-STRNG = switch #( IF_FAALL when ABAP_TRUE then '*' ).
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISCAP_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_SELFD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SELFD ).

    if IF_SELFD is not initial.
      move IF_SELFD  to LS_PARAM-ATWRT.
      move IF_SETBY  to LS_PARAM-SETBY.
    else.
      clear: LS_PARAM-ATWRT, LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SELFD_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).
    move LS_PARAM-STRNG to EF_CRBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property Instance
    if RR_BL_CRBPROP is requested.
      RR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( IF_CRBPX = EF_CRBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


***--------------------------------------------------------------------------------------
*** Get Corrugator Forward Property (Inbound)
    RR_BL_CRFPROP = ZCL_VCXI_P1SS_BL_CRFPROP=>FACTORY( ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Sales Board ID
    RR_BL_CRFPROP->SET_SABOA( IF_SABOA = ME->GET_SABOA( ) ).

*** Production Board ID
    RR_BL_CRFPROP->SET_PRBOA( IF_PRBOA = ME->GET_PRBOA( ) ).

*** Flute
    RR_BL_CRFPROP->SET_FLUTE( IF_FLUTE = ME->GET_FLUTE( ) ).

*** Caliper
    RR_BL_CRFPROP->SET_CALIP( IS_CALIP = ME->GET_CALIP( ) ).

*** Use Sheet Dimension as Handling Dimension
    ME->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                              ES_SHTWI = LS_SHTWI ).
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                    HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                    HNDWI     = LS_SHTWI-SHTWI
                                                    HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                    HNDHE     = RR_BL_CRFPROP->S_CALIP-CALIP
                                                    HNDHE_UOM = RR_BL_CRFPROP->S_CALIP-CALIP_UOM ) ).

*** Use Determined Product Hierarchy
    RR_BL_CRFPROP->SET_PRODH( IF_PRODH = RR_BL_CRFPROP->DET_PRODH( IR_GATE = ME->R_GATE ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM.

    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT.

    RS_SURWT = ME->GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P1SS_COMM_PREV,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Corrugator Backward Property Instance
    LR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Number of Ups
      LF_NOUPS = LR_COMM_PREV->GET_NOUPS( ).

***   Combine Corrugator Backward Property
      LR_BL_CRBPROP->MERGE( IR_BL_CRBPROP = LR_COMM_PREV->GET_CRBPX( ) ).
    endloop.

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Corrugator Backward Property XML
    ME->SET_CRBPX( IF_CRBPX = LR_BL_CRBPROP->GET_CRBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_CORR> type ZVCXI_P1SS_S_FDI_CORR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FDI_CORR.
    assign RR_DATA->* to <S_FDI_CORR>.


***------------------------------------------------------------------------------------------------
*** Sales/Production Board
    <S_FDI_CORR>-SABOA = ME->GET_SABOA( importing EF_DESCR = <S_FDI_CORR>-SABOA_DESCR ).
    <S_FDI_CORR>-PRBOA = ME->GET_PRBOA( importing EF_DESCR = <S_FDI_CORR>-PRBOA_DESCR ).

*** Flute / Caliper
    <S_FDI_CORR>-FLUTE   = ME->GET_FLUTE( ).
    <S_FDI_CORR>-S_CALIP = ME->GET_CALIP( ).

*** Score Application
    ME->GET_ISCAP( importing EF_FAALL = <S_FDI_CORR>-SCORE_FAALL ).

*** Valid Board Types
    <S_FDI_CORR>-VALID_TBOAR = ME->GET_VALID_TBOAR( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CORR_OLD type ZVCXI_P1SS_S_FDI_CORR,
          LS_FDI_CORR_NEW type ZVCXI_P1SS_S_FDI_CORR.
    data: LR_DATA_OLD type ref to DATA,
          LR_PR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CORR_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CORR_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Sales Board
    if LS_FDI_CORR_OLD-SABOA ne LS_FDI_CORR_NEW-SABOA.
      LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S ).
      if LR_PR_BOARD is bound.
        LR_PR_BOARD->SET_BOARD( IF_BOARD = LS_FDI_CORR_NEW-SABOA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

*** Production Board
    if LS_FDI_CORR_OLD-PRBOA ne LS_FDI_CORR_NEW-PRBOA.
      LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
      if LR_PR_BOARD is bound.
        LR_PR_BOARD->SET_BOARD( IF_BOARD = LS_FDI_CORR_NEW-PRBOA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

*** Score Application
    if LS_FDI_CORR_OLD-SCORE_FAALL ne LS_FDI_CORR_NEW-SCORE_FAALL.
      ME->SET_ISCAP( IF_FAALL = LS_FDI_CORR_NEW-SCORE_FAALL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).
    move LS_PARAM-ATFLV to RS_RDBOT-RDBOT.
    move LS_PARAM-UNIT  to RS_RDBOT-RDBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).
    move LS_PARAM-ATFLV to RS_RDLEF-RDLEF.
    move LS_PARAM-UNIT  to RS_RDLEF-RDLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLET.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).
    move LS_PARAM-ATFLV to RS_RDLET-RDLET.
    move LS_PARAM-UNIT  to RS_RDLET-RDLET_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).
    move LS_PARAM-ATFLV to RS_RDRIG-RDRIG.
    move LS_PARAM-UNIT  to RS_RDRIG-RDRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).
    move LS_PARAM-ATFLV to RS_RDTOP-RDTOP.
    move LS_PARAM-UNIT  to RS_RDTOP-RDTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDWIT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).
    move LS_PARAM-ATFLV to RS_RDWIT-RDWIT.
    move LS_PARAM-UNIT  to RS_RDWIT-RDWIT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).

    if IS_RDBOT is supplied.
      LS_PARAM-ATFLV = IS_RDBOT-RDBOT.
      LS_PARAM-UNIT  = IS_RDBOT-RDBOT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDBOT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).

    if IS_RDLEF is supplied.
      LS_PARAM-ATFLV = IS_RDLEF-RDLEF.
      LS_PARAM-UNIT  = IS_RDLEF-RDLEF_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLEF_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLET.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).

    if IS_RDLET is supplied.
      LS_PARAM-ATFLV = IS_RDLET-RDLET.
      LS_PARAM-UNIT  = IS_RDLET-RDLET_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLET_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).

    if IS_RDRIG is supplied.
      LS_PARAM-ATFLV = IS_RDRIG-RDRIG.
      LS_PARAM-UNIT  = IS_RDRIG-RDRIG_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDRIG_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).

    if IS_RDTOP is supplied.
      LS_PARAM-ATFLV = IS_RDTOP-RDTOP.
      LS_PARAM-UNIT  = IS_RDTOP-RDTOP_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDTOP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDWIT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).

    if IS_RDWIT is supplied.
      LS_PARAM-ATFLV = IS_RDWIT-RDWIT.
      LS_PARAM-UNIT  = IS_RDWIT-RDWIT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDWIT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

    field-symbols: <S_SCORE_AP> type ZVCXI_PXSS_S_SCORE_AP,
                   <S_TAPE_AP>  type ZVCXI_PXSS_S_TAPE_AP.


*** Get applied Scores/Tapes table based on Score Communication (Outbound)
    ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_SCORE
                                                     IT_TAPE_COM       = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_TAPE_COM
                                                     IF_DIMEN_REDUC    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                     IS_RDLEF          = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLEF( )
                                                     IS_RDRIG          = ME->ZIF_VCXI_PXSS_REDUC~GET_RDRIG( )
                                                     IS_RDTOP          = ME->ZIF_VCXI_PXSS_REDUC~GET_RDTOP( )
                                                     IS_RDBOT          = ME->ZIF_VCXI_PXSS_REDUC~GET_RDBOT( )
                                                     IF_DIMEN_SCORE    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                     IT_ISCOR          = ME->GET_ISCAP( )
                                           importing ET_SCORE_AP       = ET_SCORE_AP
                                                     ET_TAPE_AP        = ET_TAPE_AP
                                                     ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).

*** Disable Scores with Slot Indicator
    loop at ET_SCORE_AP assigning <S_SCORE_AP> where FAPPL eq ABAP_TRUE
                                                and  FSLIN eq ABAP_TRUE.
      <S_SCORE_AP>-FAPPL = ABAP_FALSE.
      insert <S_SCORE_AP>-ISCOR into table ET_ISCOR_DISABLED.
    endloop.

*** Mark all Tapes as applied
    loop at ET_TAPE_AP assigning <S_TAPE_AP>.
      <S_TAPE_AP>-FAPPL = ABAP_TRUE.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

    RF_SSCOR = 'A'.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.

    data: LT_ISCOR  type ZVCXI_PXS_TT_ISCOR.


*** Set IDs to Parameter
    if IT_SCORE_AP is supplied.
      LT_ISCOR = value #( for S_SCORE_AP in IT_SCORE_AP where ( FAPPL eq ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).
      ME->SET_ISCAP( IT_ISCOR = LT_ISCOR ).
    endif.

*** Apply all Scores
    if IF_SCORE_FAALL is supplied.
      ME->SET_ISCAP( IF_FAALL = IF_SCORE_FAALL ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.
    data: LR_GATE_LAMI type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Don't show corrugation in case of Inline Lamination (delegate)
    data(LR_PR_LAMI) = ME->GET_PRVDR_LAMI( importing ER_GATE = LR_GATE_LAMI ).
    if LR_PR_LAMI is bound.
***   Fill Lamination
      LR_PR_LAMI->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                           changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
***   Register Corrugated Gate to Lamination
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                          IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_LAMI ) ).
    else.
***   Get Attribute Data
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->GET_PRBOA( )      "Board ID
                                  changing  CT_ATTR  = LT_ATTR ).
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->GET_FLUTE( )      "Flute
                                  changing  CT_ATTR  = LT_ATTR ).
      data(LS_CALIP) = ME->GET_CALIP( ).
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE  = LS_CALIP-CALIP
                                            IF_UOM    = LS_CALIP-CALIP_UOM
                                  changing  CT_ATTR   = LT_ATTR ).

***   Add Node
      data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                      IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                      IF_ICON       = 'sap-icon://tri-state'
                                                      IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                      IF_GROUP_KEY  = IF_GROUP_KEY
                                                      IT_ATTR       = LT_ATTR ).

***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                          IF_NODE_KEY = LF_NODE_KEY ).
    endif.

***--------------------------------------------------------------------------------------
*** Show Preprint
    data(LR_PR_PREPR) = ME->GET_PRVDR_PREPR( ).
    if LR_PR_PREPR is bound.
      LR_PR_PREPR->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                            changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endif.

  endmethod.
