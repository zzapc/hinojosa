
class ZCL_VCXI_P4SS_PR_SPLR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_PSCALE_MGR .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IPRVT_P4_SPLR type /VCXI/VKSC_IPRVT value 'ZVCXI_P4SS_SPLR' ##NO_TEXT.
  constants C_PARID_BSTME type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTME' ##NO_TEXT.
  constants C_PARID_IDNLF type /VCXI/VKS_PARID value 'ZVCXI_XC_IDNLF' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_UMBSN type /VCXI/VKS_PARID value 'ZVCXI_XC_UMBSN' ##NO_TEXT.
  constants C_PARID_UMBSZ type /VCXI/VKS_PARID value 'ZVCXI_XC_UMBSZ' ##NO_TEXT.

  methods GET_BSTME
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BSTME) type BSTME
    raising
      /VCXI/CX_CKX .
  methods GET_IDNLF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_IDNLF) type IDNLF
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    exporting
      !EF_NAME1 type NAME1_GP
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_UMBSN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_UMBSN_UOM type /VCXI/CKX_UOM
    returning
      value(RF_UMBSN) type UMBSN
    raising
      /VCXI/CX_CKX .
  methods GET_UMBSZ
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_UMBSZ_UOM type /VCXI/CKX_UOM
    returning
      value(RF_UMBSZ) type UMBSZ
    raising
      /VCXI/CX_CKX .
  methods SET_BSTME
    importing
      !IF_BSTME type BSTME optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_IDNLF
    importing
      !IF_IDNLF type IDNLF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_UMBSN
    importing
      !IF_UMBSN type UMBSN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_UMBSZ
    importing
      !IF_UMBSZ type UMBSZ optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_BSTME_CHANGED type /VCXI/VKSC_IEVNT value 'BSTME_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IDNLF_CHANGED type /VCXI/VKSC_IEVNT value 'IDNLF_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_UMBSN_CHANGED type /VCXI/VKSC_IEVNT value 'UMBSN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_UMBSZ_CHANGED type /VCXI/VKSC_IEVNT value 'UMBSZ_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SPLR type /VCXI/VKSC_IEVNT value 'INIT_SPLR' ##NO_TEXT.

  methods HANDLE_INIT_SPLR
    raising
      /VCXI/CX_CKX .
  methods CHECK_LIFNR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRFG
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_PRFG) type ref to ZCL_VCXI_P4SS_PR_PRFG
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRPART
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_PRPART) type ref to ZCL_VCXI_P4SS_PR_PRPART
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P4SS_PR_SPLR definition
class ZCL_VCXI_P4SS_PR_SPLR implementation.
  method CHECK_LIFNR.

    data: LF_LIFNR type LIFNR.


***----------------------------------------------------------------------------
*** Get Vendor and check if maintained
    LF_LIFNR =  ME->GET_LIFNR( ).
    if LF_LIFNR is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      exit.
    endif.

***----------------------------------------------------------------------------
*** Perform Check
    try.
        ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = LF_LIFNR
                                           IF_WERKS = ME->GET_WERKS( ) ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        endif.
        exit.
    endtry.

***----------------------------------------------------------------------------
*** Check was successful
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
    if IR_MESSAGE is bound.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '008' ).
    endif.

  endmethod.
  method CHECK_PRICE.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.


*** Only for Direct Procurement & Price
    check ME->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.

***--------------------------------------------------------------------------------------
*** Check Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Price is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '006' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Please check Price.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '007' ).

      endif.
    endif.

  endmethod.
  method GET_BSTME.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BSTME ).
    RF_BSTME = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_IDNLF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IDNLF ).
    RF_IDNLF = LS_PARAM-STRNG.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_LIFNR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
    RF_LIFNR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_LIFNR is not initial.

***----------------------------------------------------------------------------
    if EF_NAME1 is requested.
***   Identify Description
      select single NAME1
             from LFA1
             into EF_NAME1
            where LIFNR eq RF_LIFNR.
      if SY-SUBRC ne 0.
        clear EF_NAME1.
      endif.
    endif.

  endmethod.
  method GET_PRVDR_PRFG.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_PRFG.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_PRFG=>C_IPRVT_P4_PRFG
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_PRFG.

  endmethod.
  method GET_PRVDR_PRPART.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_PRPART.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Part
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_PRPART=>C_IPRVT_P4_PRPART
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_PRPART.

  endmethod.
  method GET_PURCH.

    data: LR_PR_PRFG   type ref to ZCL_VCXI_P4SS_PR_PRFG,
          LR_PR_PRPART type ref to ZCL_VCXI_P4SS_PR_PRPART.


    LR_PR_PRFG = ME->GET_PRVDR_PRFG( ).
    if LR_PR_PRFG is bound.
      RF_PURCH = LR_PR_PRFG->GET_PURCH( importing EF_SETBY = EF_SETBY ).
    endif.

    LR_PR_PRPART = ME->GET_PRVDR_PRPART( ).
    if LR_PR_PRPART is bound.
      RF_PURCH = LR_PR_PRPART->GET_PURCH( importing EF_SETBY = EF_SETBY ).
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Vendor
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_LIFNR( ) ).

*** Check Price
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRICE( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Vendor
    ME->CHECK_LIFNR( IR_MESSAGE = IR_MESSAGE ).

*** Check Price
    ME->CHECK_PRICE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_UMBSN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UMBSN ).
    RF_UMBSN = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.

***----------------------------------------------------------------------------
    if EF_UMBSN_UOM is requested.
      EF_UMBSN_UOM = ME->GET_BSTME( ).
    endif.

  endmethod.
  method GET_UMBSZ.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UMBSZ ).
    RF_UMBSZ = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.

***----------------------------------------------------------------------------
    if EF_UMBSZ_UOM is requested.
      EF_UMBSZ_UOM = 'ST'.
    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_PRFG   type ref to ZCL_VCXI_P4SS_PR_PRFG,
          LR_PR_PRPART type ref to ZCL_VCXI_P4SS_PR_PRPART.


    LR_PR_PRFG = ME->GET_PRVDR_PRFG( ).
    if LR_PR_PRFG is bound.
      RF_WERKS = LR_PR_PRFG->GET_WERKS( ).
    endif.

    LR_PR_PRPART = ME->GET_PRVDR_PRPART( ).
    if LR_PR_PRPART is bound.
      RF_WERKS = LR_PR_PRPART->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_SPLR.
        ME->HANDLE_INIT_SPLR( ).
    endcase.

  endmethod.
  method HANDLE_INIT_SPLR.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Initialize Information that should only be maintained for Direct Procurement & Price
    if ME->GET_PURCH( ) ne ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE.
***   Material Number Used by Supplier
      ME->SET_IDNLF( IF_SETBY = SPACE ).

***   Purchase Order Unit of Measure
      ME->SET_BSTME( IF_SETBY = SPACE ).
      ME->SET_UMBSZ( IF_SETBY = SPACE ).
      ME->SET_UMBSN( IF_SETBY = SPACE ).

***   Price Scales
      loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ) into LR_GATE.
        LR_GATE->DO_FREE( ).
      endloop.
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_BSTME.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BSTME ).

    if IF_BSTME is supplied.
      LS_PARAM-ATWRT = IF_BSTME.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BSTME_CHANGED ).
    endif.

  endmethod.
  method SET_IDNLF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IDNLF ).

    if IF_IDNLF is supplied.
      LS_PARAM-STRNG = IF_IDNLF.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IDNLF_CHANGED ).
    endif.

  endmethod.
  method SET_LIFNR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

    move IF_LIFNR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIFNR_CHANGED ).
    endif.

  endmethod.
  method SET_UMBSN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UMBSN ).

    if IF_UMBSN is supplied.
      LS_PARAM-ATFLV = IF_UMBSN.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_UMBSN_CHANGED ).
    endif.

  endmethod.
  method SET_UMBSZ.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UMBSZ ).

    if IF_UMBSZ is supplied.
      LS_PARAM-ATFLV = IF_UMBSZ.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_UMBSZ_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_SPLR> type ZVCXI_P4SS_S_FDI_SPLR.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P4SS_S_FDI_SPLR.
    assign RR_DATA->* to <S_FDI_SPLR>.


***------------------------------------------------------------------------------------------------
*** Get Vendor
    <S_FDI_SPLR>-LIFNR = ME->GET_LIFNR( ).

*** Material Number Used by Supplier
    <S_FDI_SPLR>-IDNLF = ME->GET_IDNLF( ).

*** Purchase Order Unit of Measure
    <S_FDI_SPLR>-BSTME = ME->GET_BSTME( ).
    <S_FDI_SPLR>-UMBSZ = ME->GET_UMBSZ( importing EF_UMBSZ_UOM = <S_FDI_SPLR>-UMBSZ_UOM ).
    <S_FDI_SPLR>-UMBSN = ME->GET_UMBSN( importing EF_UMBSN_UOM = <S_FDI_SPLR>-UMBSN_UOM ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_SPLR_OLD type ZVCXI_P4SS_S_FDI_SPLR,
          LS_FDI_SPLR_NEW type ZVCXI_P4SS_S_FDI_SPLR.
    data: LR_DATA_OLD   type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_SPLR_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_SPLR_NEW = corresponding #( <S_DATA> ).
    endif.


***--------------------------------------------------------------------------------------
*** Set Vendor
    if LS_FDI_SPLR_OLD-LIFNR ne LS_FDI_SPLR_NEW-LIFNR.
      ME->SET_LIFNR( IF_LIFNR = LS_FDI_SPLR_NEW-LIFNR
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material Number Used by Supplier
    if LS_FDI_SPLR_OLD-IDNLF ne LS_FDI_SPLR_NEW-IDNLF.
      ME->SET_IDNLF( IF_IDNLF = LS_FDI_SPLR_NEW-IDNLF
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Purchase Order Unit of Measure
    if LS_FDI_SPLR_OLD-BSTME ne LS_FDI_SPLR_NEW-BSTME.
      ME->SET_BSTME( IF_BSTME = LS_FDI_SPLR_NEW-BSTME
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    if LS_FDI_SPLR_OLD-UMBSZ ne LS_FDI_SPLR_NEW-UMBSZ.
      ME->SET_UMBSZ( IF_UMBSZ = LS_FDI_SPLR_NEW-UMBSZ
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    if LS_FDI_SPLR_OLD-UMBSN ne LS_FDI_SPLR_NEW-UMBSN.
      ME->SET_UMBSN( IF_UMBSN = LS_FDI_SPLR_NEW-UMBSN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY,
          LS_UOMCF       type ZVCXI_XCS_S_UOMCF.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***       Convert Price Scale Quantity if needed
          if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
            read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
            LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
            if LS_UOMCF-UOMCF is not initial.
              LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
            else.
              clear: LS_PSQTY-PSQTY.
            endif.
          endif.

***       Check conversion was successful
          check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***       Compare
          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PSCALE.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
    if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
      read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
      ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
      if LS_UOMCF-UOMCF is not initial.
        ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

    RF_CHANGEABLE = ABAP_TRUE.

  endmethod.
