
class ZCL_VCXI_FBSS_PR_CSTEP_RECLO definition
  public
  inheriting from ZCL_VCXI_FBSS_PR_CSTEP
  create public .

public section.

  constants C_IPRVT_CSTEP_RECLO type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_CSTEP_RECLO' ##NO_TEXT.
  constants C_PARID_COARE type /VCXI/VKS_PARID value 'ZVCXI_FB_COARE' ##NO_TEXT.
  constants C_PARID_LCOUT type /VCXI/VKS_PARID value 'ZVCXI_FB_LCOUT' ##NO_TEXT.
  constants C_PARID_LRECL type /VCXI/VKS_PARID value 'ZVCXI_FB_LRECL' ##NO_TEXT.
  constants C_PARID_RCWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_RCWGT' ##NO_TEXT.
  constants C_PARID_TRECL type /VCXI/VKS_PARID value 'ZVCXI_FB_TRECL' ##NO_TEXT.
  constants C_IEVNT_O_TRECL_CHANGED type /VCXI/VKSC_IEVNT value 'TRECL_CHANGED' ##NO_TEXT.
  constants C_ICSTP_RECLO type ZVCXI_FBS_ICSTP value 'CSTEP_RECLO' ##NO_TEXT.

  methods GET_COARE
    exporting
      !ES_COARE type ZVCXI_FBS_S_COARE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_COWGT
    exporting
      !ES_COWGT type ZVCXI_FBS_S_COWGT
    raising
      /VCXI/CX_CKX .
  methods GET_LCOUT
    exporting
      !EF_LCOUT type ZVCXI_FBS_LCOUT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LRECL
    exporting
      !EF_LRECL type ZVCXI_FBS_LRECL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RCWGT
    exporting
      !ES_RCWGT type ZVCXI_FBS_S_RCWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TRECL
    exporting
      !EF_TRECL type ZVCXI_FBS_TRECL
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_COARE
    importing
      !IS_COARE type ZVCXI_FBS_S_COARE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_LCOUT
    importing
      !IF_LCOUT type ZVCXI_FBS_LCOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_LRECL
    importing
      !IF_LRECL type ZVCXI_FBS_LRECL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_RCWGT
    importing
      !IS_RCWGT type ZVCXI_FBS_S_RCWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRECL
    importing
      !IF_TRECL type ZVCXI_FBS_TRECL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_RCWGT type /VCXI/VKSC_IEVNT value 'RECALC_RCWGT' ##NO_TEXT.
  constants C_IEVNT_I_INIT_RECLO_PARTS type /VCXI/VKSC_IEVNT value 'INIT_RECLO_PARTS' ##NO_TEXT.
  constants C_IEVNT_O_COARE_CHANGED type /VCXI/VKSC_IEVNT value 'COARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LCOUT_CHANGED type /VCXI/VKSC_IEVNT value 'LCOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LRECL_CHANGED type /VCXI/VKSC_IEVNT value 'LRECL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RCWGT_CHANGED type /VCXI/VKSC_IEVNT value 'RCWGT_CHANGED' ##NO_TEXT.

  methods CHECK_COARE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LCOUT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LRECL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MS_RECLO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRECL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_RECLO_PARTS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RCWGT
    raising
      /VCXI/CX_CKX .

  methods GET_CUTOUT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_PR_CSTEP_RECLO definition
class ZCL_VCXI_FBSS_PR_CSTEP_RECLO implementation.
method CHECK_COARE.
*** 0 - Cutout Area is maintained.
*** 1 - Cutout Area is not maintained.
*** 2 - Do not check.

  data: LF_LCOUT type  ZVCXI_FBS_LCOUT.
  data: LS_COARE type  ZVCXI_FBS_S_COARE.

  move 2 to RF_RETURN.

  ME->GET_COARE( importing ES_COARE = LS_COARE ).
  if LS_COARE-COARE is not initial.
    move 0 to RF_RETURN.
    return.
  endif.

*** Get Cutout Location
  ME->GET_LCOUT( importing EF_LCOUT = LF_LCOUT ).

*** Check if Mandatory
  if LF_LCOUT is not initial and LS_COARE-COARE is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_LCOUT.
*** 0 - Location Cutout is maintained.
*** 1 - Location Cutout is not maintained.
*** 2 - Do not check.

  data: LF_LCOUT type ZVCXI_FBS_LCOUT,
        LS_COARE type ZVCXI_FBS_S_COARE.

  move 2 to RF_RETURN.

  ME->GET_LCOUT( importing EF_LCOUT = LF_LCOUT ).
  if LF_LCOUT is not initial.
    move 0 to RF_RETURN.
    return.
  endif.

*** Get Cutout Area
  ME->GET_COARE( importing ES_COARE = LS_COARE ).

*** Check if Mandatory
  if LS_COARE-COARE is not initial and LF_LCOUT is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_LRECL.

*** 0 - Location Cutout is maintained.
*** 1 - Location Cutout is not maintained.

  data:  LF_LRECL type ZVCXI_FBS_LRECL.

  ME->GET_LRECL( importing EF_LRECL = LF_LRECL ).

  if LF_LRECL is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
  method CHECK_MS_RECLO.
*** 0 - All required Reclosing Material have been defined.
*** 1 - Not all required Reclosing Material have been defined.
*** 2 - Defined Reclosing Material doesn't match customizing.

    data: LF_TRECL type ZVCXI_FBS_TRECL,
          LF_TPRCL type ZVCXI_FBS_TPRCL.
    data: LT_TPRCL type table of ZVCXI_FBS_TC211,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_RECLO type ref to ZCL_VCXI_FBSS_PR_MS_RECLO.
    field-symbols: <S_TPRCL> type ZVCXI_FBS_TC211.


***--------------------------------------------------------------------------------------
*** Get Reclosing Type
    ME->GET_TRECL( importing EF_TRECL = LF_TRECL ).

*** Get Customizing Data
    LT_TPRCL = ZCL_VCXI_FBSSC_BAGTY=>T_TC211.
    delete LT_TPRCL where TRECL ne LF_TRECL.

*** Get defined Reclosing Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_RECLO=>C_IPRVT_MS_RECLO
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Adjust Reclosing Parts definition based on Defined Reclising Parts
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_MS_RECLO.
      check LR_PR_MS_RECLO is bound.

      LR_PR_MS_RECLO->GET_TPRCL( importing EF_TPRCL = LF_TPRCL ).

      read table LT_TPRCL assigning <S_TPRCL>
                          with key TPRCL = LF_TPRCL.
      if SY-SUBRC ne 0 or
         <S_TPRCL>-ICELM ne LR_GATE->F_ID.
***     Defined Reclosing Material doesn't match customizing
        move 2 to RF_RETURN.
        exit.
      endif.

***   Check Maximum
      if <S_TPRCL>-QTYMA eq 0.
***     Defined Reclosing Material doesn't match customizing
        move 2 to RF_RETURN.
        exit.
      endif.

***   Adjust for next Reclosing Material
      subtract 1 from <S_TPRCL>-QTYMI.
      subtract 1 from <S_TPRCL>-QTYMA.
    endloop.

*** Check Minimum
    loop at LT_TPRCL assigning <S_TPRCL> where QTYMI gt 0.
***   Not all required Reclosing Material have been defined.
      move 1 to RF_RETURN.
      exit.
    endloop.

  endmethod.
method CHECK_TRECL.
*** 0 - Reclosing Type is valid
*** 1 - Reclosing Type is not valid.

  data: LF_TRECL type ZVCXI_FBS_TRECL,
        LF_IBAGT type ZVCXI_FBS_IBAGT.

*** Get Reclosing Type
  ME->GET_TRECL( importing EF_TRECL = LF_TRECL ).

*** Get Bag Type
  ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).

*** Check Customizing if Reclosing is allowed for Bag Type
  select count( * )
      from ZVCXI_FBS_TC550
     where IBAGT eq LF_IBAGT
       and TRECL eq LF_TRECL.
  if SY-SUBRC is not initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
  method GET_COARE.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).
    move LS_PARAM-ATFLV to ES_COARE-COARE.
    move LS_PARAM-UNIT  to ES_COARE-COARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COWGT.

    data: LF_LCOUT       type ZVCXI_FBS_LCOUT.
    data: LS_COARE       type ZVCXI_FBS_S_COARE,
          LS_BPINFO_PREV type ZVCXI_FBSS_S_BPINFO,
          LS_BPINFO_NEXT type ZVCXI_FBSS_S_BPINFO,
          LS_BPWGT_PREV  type ZVCXI_FBS_S_BPWGT,
          LS_BPWGT_NEXT  type ZVCXI_FBS_S_BPWGT,
          LS_BPWGT_DIFF  type ZVCXI_FBS_S_BPWGT,
          LS_BGWGT       type ZVCXI_FBS_S_BGWGT.
    data: LR_BL_BGFPROP_PREV type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_BL_BGFPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


*** Get Bag Weight (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = LS_BGWGT ).

*** Get Cutout Area & Location
    ME->GET_CUTOUT( importing ES_COARE = LS_COARE
                              EF_LCOUT = LF_LCOUT ).

    check LS_COARE is not initial
      and LF_LCOUT is not initial.

*** Get Bag Forward Property XML (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_PREV ).
    check LR_BL_BGFPROP_PREV is bound.

*** Get Bag Forward Property XML (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
    check LR_BL_BGFPROP_NEXT is bound.

*** Get Bag Part Info (Previous)
    read table LR_BL_BGFPROP_PREV->T_BPINFO into LS_BPINFO_PREV with key IBPAR = LF_LCOUT.
    if SY-SUBRC eq 0.

***   Calculate Bag Part Weight (Inbound)
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO_PREV-BPARE
                                                          IF_CALCV_UOM_1 = LS_BPINFO_PREV-BPARE_UOM
                                                          IF_CALCV_2     = LS_BPINFO_PREV-SURWT
                                                          IF_CALCV_UOM_2 = LS_BPINFO_PREV-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                importing EF_CALCV       = LS_BPWGT_PREV-BPWGT
                                                          EF_CALCV_UOM   = LS_BPWGT_PREV-BPWGT_UOM ).

    endif.

*** Get Bag Part Info (Next)
    read table LR_BL_BGFPROP_NEXT->T_BPINFO into LS_BPINFO_NEXT with key IBPAR = LF_LCOUT.
    if SY-SUBRC eq 0.

***   Calculate Bag Part Weight (Outbound)
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO_NEXT-BPARE
                                                          IF_CALCV_UOM_1 = LS_BPINFO_NEXT-BPARE_UOM
                                                          IF_CALCV_2     = LS_BPINFO_NEXT-SURWT
                                                          IF_CALCV_UOM_2 = LS_BPINFO_NEXT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                importing EF_CALCV       = LS_BPWGT_NEXT-BPWGT
                                                          EF_CALCV_UOM   = LS_BPWGT_NEXT-BPWGT_UOM ).

    endif.

*** Calculate Bag Part Difference
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPWGT_PREV-BPWGT
                                                        IF_CALCV_UOM_1 = LS_BPWGT_PREV-BPWGT_UOM
                                                        IF_CALCV_2     = LS_BPWGT_NEXT-BPWGT
                                                        IF_CALCV_UOM_2 = LS_BPWGT_NEXT-BPWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = LS_BGWGT-BGWGT_UOM
                                              importing EF_CALCV       = LS_BPWGT_DIFF-BPWGT
                                                        EF_CALCV_UOM   = LS_BPWGT_DIFF-BPWGT_UOM ).

    check LS_BPWGT_DIFF-BPWGT gt 0.

    move LS_BPWGT_DIFF to ES_COWGT.

  endmethod.
  method GET_CUTOUT.

*** Get Cutout Area
    ME->GET_COARE( importing ES_COARE = ES_COARE ).

*** Get Cutout Location
    ME->GET_LCOUT( importing EF_LCOUT = EF_LCOUT ).

  endmethod.
  method GET_DESCR.

    data: LF_TRECL  type ZVCXI_FBS_TRECL.
    data: LS_TC210T type ZVCXI_FBS_TC210T.

    ME->GET_TRECL( importing EF_TRECL = LF_TRECL ).

    if LF_TRECL is initial.
      SUPER->GET_DESCR( receiving RF_DESCR = RF_DESCR ).
    else.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC210T into LS_TC210T
                                                with key TRECL = LF_TRECL.
      check SY-SUBRC is initial.
      move text-RCL to RF_DESCR.
      replace first occurrence of '&' in RF_DESCR with LS_TC210T-DESCR.
    endif.

  endmethod.
  method GET_LCOUT.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LCOUT ).
    move LS_PARAM-ATWRT to EF_LCOUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LRECL.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRECL ).
    move LS_PARAM-ATWRT to EF_LRECL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RCWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCWGT ).
    move LS_PARAM-ATFLV to ES_RCWGT-RCWGT.
    move LS_PARAM-UNIT  to ES_RCWGT-RCWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Reclosing Type
    if ME->CHECK_TRECL( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Reclosing Location
    if ME->CHECK_LRECL( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Cutout Area
    case ME->CHECK_COARE( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      when 2.
        " No Check
    endcase.

*** Check Cutout Location
    case ME->CHECK_LCOUT( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      when 2.
        " No Check
    endcase.

*** Check Reclosing Material
    if ME->CHECK_MS_RECLO( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_TRECL type ZVCXI_FBS_TRECL,
          LF_IBAGT type ZVCXI_FBS_IBAGT.


    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Reclosing Type
    case ME->CHECK_TRECL( ).
      when 1.
***     Get Reclosing Type
        ME->GET_TRECL( importing EF_TRECL = LF_TRECL ).
***     Get Bag Type
        ME->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).

***     Reclosing Type &1 is not allowed for Bag Type &2
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '473'
                                 IF_MSGV1 = LF_TRECL
                                 IF_MSGV2 = LF_IBAGT ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Reclosing Location
    case ME->CHECK_LRECL( ).
      when 0.
***     Reclosing Location is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '461' ).
      when 1.
***     Reclosing Location is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '462' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Cutout Area
    case ME->CHECK_COARE( ).
      when 0.
***     Cutout Area is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '451' ).
      when 1.
***     Cutout Area is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '452' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Cutout Location
    case ME->CHECK_LCOUT( ).
      when 0.
***     Cutout Location is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '459' ).
      when 1.
***     Cutout Location is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '460' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Reclosing Material
    case ME->CHECK_MS_RECLO( ).
      when 0.
***     All required Reclosing Material have been defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '485' ).
      when 1.
***     Not all required Reclosing Material have been defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '486' ).
      when 2.
***     Defined Reclosing Material doesn't match customizing.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '487' ).
    endcase.


  endmethod.
  method GET_TRECL.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM,
          LS_TC210T type ZVCXI_FBS_TC210T.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRECL ).
    move LS_PARAM-ATWRT to EF_TRECL.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_TRECL is not initial.

***--------------------------------------------------------------------------------------
*** Get Description
    if EF_DESCR is requested.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC210T
             into  LS_TC210T
             with key TRECL = EF_TRECL
                      LANGU = SY-LANGU.
      if SY-SUBRC is initial.
        EF_DESCR = LS_TC210T-DESCR.
      endif.
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                     IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
***  Recalculate Reclosing Weight
      when C_IEVNT_I_RECALC_RCWGT.
        ME->HANDLE_RECALC_RCWGT( ).
***  Initialize Reclosing Parts
      when C_IEVNT_I_INIT_RECLO_PARTS.
        ME->HANDLE_INIT_RECLO_PARTS( ).
    endcase.

  endmethod.
  method HANDLE_INIT_RECLO_PARTS.

    data: LF_TRECL type ZVCXI_FBS_TRECL,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_TPRCL type ZVCXI_FBS_TC211,
          LF_TPRCL type ZVCXI_FBS_TPRCL.
    data: LT_PRVDR_DEF type          /VCXI/VKSR_TT_PRVDR_DEF,
          LT_TPRCL     type table of ZVCXI_FBS_TC211,
          LT_GATE      type          /VCXI/VKSR_TT_GATE.
    data: LR_PR_MS_RECLO type ref to ZCL_VCXI_FBSS_PR_MS_RECLO,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Add default Reclosing Parts based on customizing

*** Check if Gates were Initialized
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_MS_RECLO=>C_IPRVT_MS_RECLO
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    check LT_GATE is initial.

*** Get possible child provider definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_RECLO=>C_IPRVT_MS_RECLO
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

*** Get Reclosing Type
    ME->GET_TRECL( importing EF_TRECL = LF_TRECL ).

*** Get Customizing Data
    LT_TPRCL = ZCL_VCXI_FBSSC_BAGTY=>T_TC211.
    delete LT_TPRCL where TRECL ne LF_TRECL.

*** Get Reclosing Parts with minimum 1
    loop at LT_TPRCL into LS_TPRCL.
      read table LT_PRVDR_DEF with key ID = LS_TPRCL-ICELM transporting no fields.
      check SY-SUBRC eq 0.

      if LS_TPRCL-QTYMI gt 0.
        move LS_TPRCL-ICELM to LF_ID.

***--------------------------------------------------------------------------------------
***     Create Provider
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
        if LR_GATE->IS_INUSE( ) eq ABAP_FALSE.
          LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.
***     Reorg position ID's
        LR_GATE->REORG_POSID( ).

***     Check if Gate was succesfully added
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_MS_RECLO.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_MS_RECLO.
            LR_GATE->DO_FREE( ).
***         It is not possible to add Provider &1.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
                IF_MSGTY = 'E'
                IF_MSGID = 'ZVCXI_XCS'
                IF_MSGNO = '012'
                IF_MSGV1 = LS_TPRCL-ICELM ).
        endtry.

***     Set Reclosing Part Type
        if LR_PR_MS_RECLO is bound.
          move LS_TPRCL-TPRCL to LF_TPRCL.
          LR_PR_MS_RECLO->SET_TPRCL( IF_TPRCL = LF_TPRCL ).
        endif.

      endif.
    endloop.

*** Raise Events
    ME->R_GATE->RAISE_EVENTS( ).

  endmethod.
  method HANDLE_RECALC_RCWGT.

    data: LF_FRECL    type ZVCXI_FBS_FRECL.
    data: LS_RCWGT    type ZVCXI_FBS_S_RCWGT,
          LS_RCWGT_MS type ZVCXI_FBS_S_RCWGT.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_RECLO type ref to ZCL_VCXI_FBSS_PR_MS_RECLO.


*** Get Reclosing Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_RECLO=>C_IPRVT_MS_RECLO
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_MS_RECLO.

***   Get Reclosing Weight and Reclosing Factor
      LR_PR_MS_RECLO->GET_RCWGT( importing ES_RCWGT = LS_RCWGT_MS ).
      LR_PR_MS_RECLO->GET_FRECL( importing EF_FRECL = LF_FRECL ).
      move LS_RCWGT_MS-RCWGT_UOM to LS_RCWGT-RCWGT_UOM.

***   Add to Total Weight
      do LF_FRECL times.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RCWGT_MS-RCWGT
                                                            IF_CALCV_UOM_1 = LS_RCWGT_MS-RCWGT_UOM
                                                            IF_CALCV_2     = LS_RCWGT-RCWGT
                                                            IF_CALCV_UOM_2 = LS_RCWGT-RCWGT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_RCWGT_MS-RCWGT_UOM
                                                  importing EF_CALCV       = LS_RCWGT-RCWGT
                                                            EF_CALCV_UOM   = LS_RCWGT-RCWGT_UOM ).
      enddo.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Total Reclosing Weight
    ME->SET_RCWGT( IS_RCWGT = LS_RCWGT ).

  endmethod.
  method SET_COARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).

    move IS_COARE-COARE     to LS_PARAM-ATFLV.
    move IS_COARE-COARE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COARE_CHANGED ).

    endif.

  endmethod.
  method SET_LCOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LCOUT ).

    move IF_LCOUT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LCOUT_CHANGED ).

    endif.

  endmethod.
  method SET_LRECL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRECL ).

    move IF_LRECL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LRECL_CHANGED ).

    endif.

  endmethod.
  method SET_RCWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RCWGT ).

    move IS_RCWGT-RCWGT     to LS_PARAM-ATFLV.
    move IS_RCWGT-RCWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RCWGT_CHANGED ).
    endif.

  endmethod.
  method SET_TRECL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRECL ).

    move IF_TRECL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRECL_CHANGED ).

    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT.

    data: LS_BPWGT_NEXT type        ZVCXI_FBS_S_BPWGT,
          LS_RCWGT      type        ZVCXI_FBS_S_RCWGT.

*** Get Bag Part Weight Outbound
    SUPER->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_BPWGT_NEXT ).

*** Get Total Reclosing Weight
    ME->GET_RCWGT( importing ES_RCWGT = LS_RCWGT ).

*** Get Bag Part Weight Outbound
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RCWGT-RCWGT
                                                        IF_CALCV_UOM_1 = LS_RCWGT-RCWGT_UOM
                                                        IF_CALCV_2     = LS_BPWGT_NEXT-BPWGT
                                                        IF_CALCV_UOM_2 = LS_BPWGT_NEXT-BPWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_BPWGT_NEXT-BPWGT_UOM
                                              importing EF_CALCV       = LS_BPWGT_NEXT-BPWGT
                                                        EF_CALCV_UOM   = LS_BPWGT_NEXT-BPWGT_UOM ).

    move LS_BPWGT_NEXT to ES_BGWGT.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://action'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
