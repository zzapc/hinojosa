
class ZCL_VCXI_PCSR_BL_RTESPV_SE definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_RTESPV
  create public .

public section.

  methods SET_PC_BL_PRTE_SE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL
      !IT_COMP_SE_RTESEL type ZVCXI_P0SR_TT_COMP_SE_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_PCSR_BL_RTESPV_SE definition
class ZCL_VCXI_PCSR_BL_RTESPV_SE implementation.
method SET_PC_BL_PRTE_SE.

  data:          LS_LAMI_RTESEL      type        ZVCXI_P0SR_S_LAMI_RTESEL,
                 LS_COMP_SE_RTESEL   type        ZVCXI_P0SR_S_COMP_SE_RTESEL.
  data:          LT_LAMI_RTESEL      type        ZVCXI_P0SR_TT_LAMI_RTESEL,
                 LT_COMP_SE_RTESEL   type        ZVCXI_P0SR_TT_COMP_SE_RTESEL,
                 LT_SPVRE_NEW        type        /VCXI/VKSR_TT_SPVRE.
  data:          LR_BL_PRTE          type ref to ZCL_VCXI_XCSR_BL_PRTE,
                 LR_SPVRE_ROOT       type ref to /VCXI/CL_VKSR_SPVRE,
                 LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_BL_PSTEP_CUT     type ref to ZCL_VCXI_PCSR_BL_PSTEP_CUT.
  field-symbols: <S_CPM_RTESEL>      type        ZVCXI_P0SR_S_CPM_RTESEL,
                 <S_COMP_RTESEL>     type        ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL>     type        ZVCXI_P0SR_S_LAMI_RTESEL.

  check IR_BL_PRTE is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
  move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.

  loop at IT_LAMI_RTESEL into LS_LAMI_RTESEL.
    if LS_LAMI_RTESEL-R_RTESEL_CB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_CB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_CB.
    endif.
    if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_UCB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_UCB.
    endif.
    append LS_LAMI_RTESEL to LT_LAMI_RTESEL.
  endloop.

  loop at IT_COMP_SE_RTESEL into LS_COMP_SE_RTESEL.
    move LS_COMP_SE_RTESEL-R_RTESEL->COPY( ) to LS_COMP_SE_RTESEL-R_RTESEL.

    loop at LS_COMP_SE_RTESEL-T_CPM_RTESEL assigning <S_CPM_RTESEL>.
      move <S_CPM_RTESEL>-R_RTESEL->COPY( ) to <S_CPM_RTESEL>-R_RTESEL.

      loop at <S_CPM_RTESEL>-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
        move <S_COMP_RTESEL>-R_RTESEL->COPY( ) to <S_COMP_RTESEL>-R_RTESEL.

        loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
          if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
          endif.
          if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
          endif.

        endloop.
      endloop.
    endloop.
    append LS_COMP_SE_RTESEL to LT_COMP_SE_RTESEL.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build Structure
  ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                              IS_EXQTY      = IS_EXQTY
                    importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                    changing  CT_SPVRE      = LT_SPVRE_NEW ).


***------------------------------------------------------------------------------------------------
*** Build Structure of Lamination
  if LT_LAMI_RTESEL is not initial.
    ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                     IT_LAMI_RTESEL  = LT_LAMI_RTESEL
                           changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Lamination for Connection
    ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                             IT_LAMI_RTESEL = LT_LAMI_RTESEL ).
  endif.

***------------------------------------------------------------------------------------------------
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CUT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Set MF X-Connect
    if LR_BL_PSTEP_CUT is bound.
      loop at LT_COMP_SE_RTESEL into LS_COMP_SE_RTESEL.
        append LS_COMP_SE_RTESEL-IMFXC to LR_BL_PSTEP_CUT->T_IMFXC_OUT.
      endloop.
    endif.

*** Process Work Center
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_ROOT
                                     IR_RTE_ARBPL   = LR_RTE_ARBPL
                                     IR_BL_PRTE     = LR_BL_PRTE
                           changing  CT_SPVRE       = LT_SPVRE_NEW ).
  endloop.

  ME->BUILD_STRUCT_COMPO_SE( exporting IR_SPVRE_ROOT     = LR_SPVRE_ROOT
                                       IT_COMP_SE_RTESEL = LT_COMP_SE_RTESEL
                             changing  CT_SPVRE          = LT_SPVRE_NEW ).

***----------------------------------------------------------------------------
*** Set Supervised Runtime Elements
  ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

endmethod.
endclass. "ZCL_VCXI_PCSR_BL_RTESPV_SE implementation
