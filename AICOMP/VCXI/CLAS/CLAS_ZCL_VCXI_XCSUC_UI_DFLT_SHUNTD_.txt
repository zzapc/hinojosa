
class ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD definition
  public
  create public .

public section.

  data F_CURSOR type SCRFNAME .
  data R_DFLT type ref to ZCL_VCXI_XCSUC_DFLT read-only .
  data S_DFLT_SHUNT_VIS type ZVCXI_XCSUC_S_DFLT_SHUNT_VIS .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM .
  methods SET_CURSOR .
  class-methods START_UI
    importing
      !IS_DFLT_SHUNT type ZVCXI_XCSUC_S_DFLT_SHUNT_VIS
      !IR_DFLT type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IS_DFLT_SHUNT type ZVCXI_XCSUC_S_DFLT_SHUNT_VIS
      !IR_DFLT type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_OKAY type SYUCOMM value 'OKAY'. "#EC NOTEXT
  data F_REFRESH_REQ type ABAP_BOOL .
  data R_GRID_DFLT_SL type ref to ZCL_VCXI_XCSUC_GRID_DFLT_SL .
  data R_GRID_DFLT_SP type ref to ZCL_VCXI_XCSUC_GRID_DFLT_SP .

  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
private section.

  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .
endclass. "ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD definition
class ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD implementation.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->R_GRID_DFLT_SL->F_CHANGED eq ABAP_TRUE or
     ME->R_GRID_DFLT_SP->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

  data: LS_DFLT_SHUNT type ZVCXI_XCS_TD430.

*** Bind UI Framework
  call function 'ZVCXI_XCSUC_UI_DFLT_SD_BIND'
    exporting
      IR_UI_DFLT_SHUNTD = ME
    importing
      RS_DYNP           = ME->S_DYNP.


  check IR_DFLT is bound.
  clear: ME->R_DFLT.
  move IR_DFLT to ME->R_DFLT.

  move-corresponding IS_DFLT_SHUNT to ME->S_DFLT_SHUNT_VIS.
  move-corresponding ME->S_DFLT_SHUNT_VIS to LS_DFLT_SHUNT.

***----------------------------------------------------------------------------
  if ME->R_GRID_DFLT_SL is not bound.
*** Create Grid for Shipping Default - Shipping Unit Limit
    create object ME->R_GRID_DFLT_SL
      exporting
        IR_CUSTOMIZING = ME->R_DFLT
        IS_DFLT_SHUNT  = LS_DFLT_SHUNT.
  endif.

  if ME->R_GRID_DFLT_SP is not bound.
*** Create Grid for Shipping Default - Shipping Unit Packaging Material Type
    create object ME->R_GRID_DFLT_SP
      exporting
        IR_CUSTOMIZING = ME->R_DFLT
        IS_DFLT_SHUNT  = LS_DFLT_SHUNT.
  endif.

endmethod.
method DO_FREE.

***------------------------------------------------------------------
*** Free Shipping Default - Shipping Unit Limit Grid
  if ME->R_GRID_DFLT_SL is bound.
    ME->R_GRID_DFLT_SL->DO_FREE( ).
    clear ME->R_GRID_DFLT_SL.
  endif.

*** Free Shipping Default - Shipping Unit Packaging Material Type Grid
  if ME->R_GRID_DFLT_SP is bound.
    ME->R_GRID_DFLT_SP->DO_FREE( ).
    clear ME->R_GRID_DFLT_SP.
  endif.

  clear: ME->R_DFLT.

endmethod.
method DO_PBO.

  data: LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

      ME->SET_PFSTATUS( ).
      ME->SET_TITLE( ).

***   Refresh Grid
      if ME->R_GRID_DFLT_SL is bound.
        if ME->F_REFRESH_REQ eq ABAP_TRUE.
          move ABAP_TRUE to ME->R_GRID_DFLT_SL->F_REFRESH_ALL_REQ.
        endif.
        move ABAP_TRUE to ME->R_GRID_DFLT_SL->F_REFRESH_REQ.
        ME->R_GRID_DFLT_SL->REFRESH_GRID( ).
      endif.

      if ME->R_GRID_DFLT_SP is bound.
        if ME->F_REFRESH_REQ eq ABAP_TRUE.
          move ABAP_TRUE to ME->R_GRID_DFLT_SP->F_REFRESH_ALL_REQ.
        endif.
        move ABAP_TRUE to ME->R_GRID_DFLT_SP->F_REFRESH_REQ.
        ME->R_GRID_DFLT_SP->REFRESH_GRID( ).
      endif.

      move ABAP_FALSE to ME->F_REFRESH_REQ.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method DO_USER_COMMAND .

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

      if ME->R_GRID_DFLT_SL is bound.
        ME->R_GRID_DFLT_SL->CHECK_CHANGED_DATA( ).
      endif.

      if ME->R_GRID_DFLT_SP is bound.
        ME->R_GRID_DFLT_SP->CHECK_CHANGED_DATA( ).
      endif.

      case CF_UCOMM.
        when ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD=>C_UC_CANCEL.
          clear CF_UCOMM.
          ME->HANDLE_UC_CANCEL( ).
        when ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD=>C_UC_OKAY.
          clear CF_UCOMM.
          ME->HANDLE_UC_OKAY( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  clear CF_UCOMM.

endmethod.
method HANDLE_UC_CANCEL .

*** Check for changes and ask user to save them
  if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
    ME->DO_FREE( ).
    leave to screen 0.
  endif.

endmethod.
method HANDLE_UC_OKAY.

*** Directly Save and Go back
  ME->HANDLE_UC_SAVE( ).
  ME->DO_FREE( ).
  leave to screen 0.

endmethod.
method HANDLE_UC_SAVE.

  data:  LS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT,
         LS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT.

*** Save Data of Grid to Default Customizing
*** Shipping Unit Limit
  loop at ME->R_GRID_DFLT_SL->T_DFLT_L_SHUNT into LS_SHUNT_L_DFLT.
    read table ME->R_DFLT->T_SHUNT_L_DFLT with key GLIDF = LS_SHUNT_L_DFLT-GLIDF
                                                   LIMIT = LS_SHUNT_L_DFLT-LIMIT
                                                   DIMEN = LS_SHUNT_L_DFLT-DIMEN
                                          transporting no fields.
*** Update
    if SY-SUBRC = 0.
      ME->R_DFLT->UPDATE_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).

*** Add
    else.
      ME->R_DFLT->ADD_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).

    endif.
  endloop.

*** Shipping Unit Packaging Material Type
  loop at ME->R_GRID_DFLT_SP->T_DFLT_P_SHUNT into LS_SHUNT_P_DFLT.
    read table ME->R_DFLT->T_SHUNT_P_DFLT with key SHUNT = LS_SHUNT_P_DFLT-SHUNT
                                                   PMATY = LS_SHUNT_P_DFLT-PMATY
                                          transporting no fields.
*** Add
    if SY-SUBRC ne 0.
      ME->R_DFLT->ADD_SHUNT_P_DFLT( IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT ).

    endif.
  endloop.

*** Delete Data
*** Shipping Unit Limit
  loop at ME->R_DFLT->T_SHUNT_L_DFLT into LS_SHUNT_L_DFLT
    where GLIDF = ME->S_DFLT_SHUNT_VIS-GLIDF.
    read table ME->R_GRID_DFLT_SL->T_DFLT_L_SHUNT with key GLIDF = LS_SHUNT_L_DFLT-GLIDF
                                                           LIMIT = LS_SHUNT_L_DFLT-LIMIT
                                                           DIMEN = LS_SHUNT_L_DFLT-DIMEN
                                                  transporting no fields.
    if SY-SUBRC ne 0.
      ME->R_DFLT->DELETE_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).
    endif.
  endloop.

*** Shipping Unit Packaging Material Type
  loop at ME->R_DFLT->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT
    where SHUNT = ME->S_DFLT_SHUNT_VIS-SHUNT.
    read table ME->R_GRID_DFLT_SP->T_DFLT_P_SHUNT with key SHUNT = LS_SHUNT_P_DFLT-SHUNT
                                                           PMATY = LS_SHUNT_P_DFLT-PMATY
                                                  transporting no fields.
    if SY-SUBRC ne 0.
      ME->R_DFLT->DELETE_SHUNT_P_DFLT( IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT ).
    endif.
  endloop.

*** Update Data
*** Shipping Unit Packaging Material Type
  loop at ME->R_GRID_DFLT_SP->T_DFLT_P_SHUNT into LS_SHUNT_P_DFLT.
    read table ME->R_DFLT->T_SHUNT_P_DFLT with key SHUNT = LS_SHUNT_P_DFLT-SHUNT
                                                   PMATY = LS_SHUNT_P_DFLT-PMATY
                                          transporting no fields.
*** Change
    if SY-SUBRC eq 0.
      ME->R_DFLT->UPDATE_SHUNT_P_DFLT( IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT ).

    endif.
  endloop.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_PFSTATUS.

***----------------------------------------------------------------------------
*** Set PF-Status
  set pf-status '0150' of program ME->S_DYNP-REPID.

endmethod.
method SET_TITLE.

  data:  LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

  if ME->R_DFLT is bound.
    move ME->R_DFLT ?to LR_OBJECT_LOCKING.

    if LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.
      set titlebar '0150_EDIT' of program ME->S_DYNP-REPID.
    else.
      set titlebar '0150_DISP' of program ME->S_DYNP-REPID.
    endif.
  else.
    set titlebar '0150' of program ME->S_DYNP-REPID.
  endif.

endmethod.
method START_UI.

  data:  LR_UI_DFLT_SHUNTD type ref to ZCL_VCXI_XCSUC_UI_DFLT_SHUNTD.

*** Create Instance of UI
  create object LR_UI_DFLT_SHUNTD
    exporting
      IS_DFLT_SHUNT = IS_DFLT_SHUNT
      IR_DFLT       = IR_DFLT.

*** Call Screen
  call function 'ZVCXI_XCSUC_UI_DFLT_SD_START'.

endmethod.
