
class ZCL_VCXI_P1SS_PR_CSTEP_LAMI definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_REDUC .
  interfaces ZIF_VCXI_PXSS_LAMI .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_SHTDI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTDI_CHANGED' ##NO_TEXT.
  constants C_PARID_SHTDI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTDI' ##NO_TEXT.

  methods GET_SHTDI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SHTDI) type ZVCXI_P0SS_SHTDI
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_SHTDIM type /VCXI/VKSC_IEVNT value 'RECALC_SHTDIM' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.

  methods CHECK_RDLET
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RDWIT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_XSHT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_LGLUE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_LGLUE) type ref to ZCL_VCXI_PXSS_PR_MS_LGLUE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTDIM
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods SET_CRBPX
    redefinition .
  methods SET_CRFPX
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CSTEP_LAMI definition
class ZCL_VCXI_P1SS_PR_CSTEP_LAMI implementation.
  method CHECK_RDLET.

    data: LS_RDLET     type ZVCXI_PXS_S_RDLET,
          LS_RDLET_SUM type ZVCXI_PXS_S_RDLET,
          LS_RDTOP     type ZVCXI_PXS_S_RDTOP,
          LS_RDBOT     type ZVCXI_PXS_S_RDBOT,
          LS_SHTLE     type ZVCXI_P0SS_S_SHTLE.
    data: LR_PR_XSHT type ref to ZCL_VCXI_PXSS_PR_XSHT.


***----------------------------------------------------------------------------
*** Get defined Reductions
    LS_RDLET = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLET( ).
    LS_RDTOP = ME->ZIF_VCXI_PXSS_REDUC~GET_RDTOP( ).
    LS_RDBOT = ME->ZIF_VCXI_PXSS_REDUC~GET_RDBOT( ).

*** Sum Reduction and use Unit of defined Total Reduction
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RDTOP-RDTOP
                                                        IF_CALCV_UOM_1 = LS_RDTOP-RDTOP_UOM
                                                        IF_CALCV_2     = LS_RDBOT-RDBOT
                                                        IF_CALCV_UOM_2 = LS_RDBOT-RDBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_RDLET-RDLET_UOM
                                              importing EF_CALCV       = LS_RDLET_SUM-RDLET
                                                        EF_CALCV_UOM   = LS_RDLET_SUM-RDLET_UOM ).

***----------------------------------------------------------------------------
*** Check Reduction Sum
    if LS_RDLET-RDLET eq LS_RDLET_SUM-RDLET.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Reduction on Length correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '551' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Reduction on Length not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '552' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check for duplicate Reduction
    if LS_RDLET-RDLET is not initial.
      LR_PR_XSHT = ME->ZIF_VCXI_PXSS_LAMI~GET_PRVDR_XSHT( ).
      if LR_PR_XSHT is bound and
         LR_PR_XSHT->ZIF_VCXI_PXSS_REDUC~GET_RDLET( )-RDLET is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Length can't be maintained twice.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '558' ).
        endif.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check Reduction against Sheet
    if LS_RDLET-RDLET is not initial.
      LS_SHTLE = ME->GET_SHTLE( ).
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RDLET-RDLET
                                                      IF_CALCV_UOM_1 = LS_RDLET-RDLET_UOM
                                                      IF_CALCV_2     = LS_SHTLE-SHTLE
                                                      IF_CALCV_UOM_2 = LS_SHTLE-SHTLE_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Length greater equal Sheet Length.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '560' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_RDWIT.

    data: LS_RDWIT     type ZVCXI_PXS_S_RDWIT,
          LS_RDWIT_SUM type ZVCXI_PXS_S_RDWIT,
          LS_RDLEF     type ZVCXI_PXS_S_RDLEF,
          LS_RDRIG     type ZVCXI_PXS_S_RDRIG,
          LS_SHTWI     type ZVCXI_P0SS_S_SHTWI.
    data: LR_PR_XSHT type ref to ZCL_VCXI_PXSS_PR_XSHT.


***----------------------------------------------------------------------------
*** Get defined Reductions
    LS_RDWIT = ME->ZIF_VCXI_PXSS_REDUC~GET_RDWIT( ).
    LS_RDLEF = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLEF( ).
    LS_RDRIG = ME->ZIF_VCXI_PXSS_REDUC~GET_RDRIG( ).

*** Sum Reduction and use Unit of defined Total Reduction
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RDLEF-RDLEF
                                                        IF_CALCV_UOM_1 = LS_RDLEF-RDLEF_UOM
                                                        IF_CALCV_2     = LS_RDRIG-RDRIG
                                                        IF_CALCV_UOM_2 = LS_RDRIG-RDRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_RDWIT-RDWIT_UOM
                                              importing EF_CALCV       = LS_RDWIT_SUM-RDWIT
                                                        EF_CALCV_UOM   = LS_RDWIT_SUM-RDWIT_UOM ).

***----------------------------------------------------------------------------
*** Check Reduction Sum
    if LS_RDWIT-RDWIT eq LS_RDWIT_SUM-RDWIT.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Reduction on Width correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '553' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Reduction on Width not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '554' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check for duplicate Reduction
    if LS_RDWIT-RDWIT is not initial.
      LR_PR_XSHT = ME->ZIF_VCXI_PXSS_LAMI~GET_PRVDR_XSHT( ).
      if LR_PR_XSHT is bound and
         LR_PR_XSHT->ZIF_VCXI_PXSS_REDUC~GET_RDWIT( )-RDWIT is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Width can't be maintained twice.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '559' ).
        endif.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Check Reduction against Sheet
    if LS_RDWIT-RDWIT is not initial.
      LS_SHTWI = ME->GET_SHTWI( ).
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RDWIT-RDWIT
                                                      IF_CALCV_UOM_1 = LS_RDWIT-RDWIT_UOM
                                                      IF_CALCV_2     = LS_SHTWI-SHTWI
                                                      IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reduction on Width greater equal Sheet Width.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '561' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_XSHT.

***----------------------------------------------------------------------------
*** Check exactly one Sheet has been defined
    case LINES( ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT
                                       IF_INUSE = ABAP_TRUE ) ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       The Lamination Sheet is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '555' ).
        endif.

      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       No Lamination Sheet is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '556' ).
        endif.

      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Too many Lamination Sheets are maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '557' ).
        endif.

    endcase.

  endmethod.
  method GET_PRVDR_MS_LGLUE.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MS_LGLUE.

***------------------------------------------------------------------------------------------------
*** Find Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_LGLUE=>C_IPRVT_PX_MS_LGLUE
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_MS_LGLUE.

  endmethod.
  method GET_SHTDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data:  LT_D07V    type standard table of DD07V.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).
    move LS_PARAM-ATWRT to RF_SHTDI.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_P0SS_SHTDI'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_SHTDI ]-DDTEXT optional ).
    endif.

  endmethod.
  method GET_SHTLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
    move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
    move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
    move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
    move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Lamination Sheet
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_XSHT( ) ).

*** Check Reduction on Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RDLET( ) ).

*** Check Reduction on Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RDWIT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Lamination Sheet
    ME->CHECK_XSHT( IR_MESSAGE = IR_MESSAGE ).

*** Check Reduction on Length
    ME->CHECK_RDLET( IR_MESSAGE = IR_MESSAGE ).

*** Check Reduction on Width
    ME->CHECK_RDWIT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_SHTDIM.
        ME->HANDLE_RECALC_SHTDIM( ).
    endcase.

  endmethod.
  method HANDLE_RECALC_SHTDIM.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


***--------------------------------------------------------------------------------------
*** Get Sheet Dimension (Outbound)
    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).

*** Set Sheet Dimensions (Inbound)
    ME->SET_SHTWI( IS_SHTWI = LS_SHTWI ).
    ME->SET_SHTLE( IS_SHTLE = LS_SHTLE ).

  endmethod.
  method SET_CRBPX.

    data: LR_BL_CRBPROP_OLD type ref to ZCL_VCXI_P1SS_BL_CRBPROP,
          LR_BL_CRBPROP_NEW type ref to ZCL_VCXI_P1SS_BL_CRBPROP.

***--------------------------------------------------------------------------------------
*** Buffer old values
    LR_BL_CRBPROP_OLD = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).

*** Perform Update
    SUPER->SET_CRBPX( IF_CRBPX = IF_CRBPX
                      IF_SETBY = IF_SETBY ).

*** Get new Values
    LR_BL_CRBPROP_NEW = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).

***--------------------------------------------------------------------------------------
*** Compare Cost Split and raise event if changed.
    if LR_BL_CRBPROP_OLD->T_CSPLIT ne LR_BL_CRBPROP_NEW->T_CSPLIT.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_LAMI~C_IEVNT_O_CSPLIT_CHANGED ).
    endif.

  endmethod.
  method SET_CRFPX.

    data: LR_BL_CRFPROP_OLD type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRFPROP_NEW type ref to ZCL_VCXI_P1SS_BL_CRFPROP.

***--------------------------------------------------------------------------------------
*** Buffer old values
    LR_BL_CRFPROP_OLD = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).

*** Perform Update
    SUPER->SET_CRFPX( IF_CRFPX = IF_CRFPX
                      IF_SETBY = IF_SETBY ).

*** Get new Values
    LR_BL_CRFPROP_NEW = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).

***--------------------------------------------------------------------------------------
*** Compare Flute and raise event if changed.
    if LR_BL_CRFPROP_OLD->F_FLUTE ne LR_BL_CRFPROP_NEW->F_FLUTE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_LAMI~C_IEVNT_O_LGLCD_CHANGED ).
    endif.

  endmethod.
  method SET_SHTDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).

    move IF_SHTDI  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTDI_CHANGED ).
    endif.

  endmethod.
  method SET_SHTLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

    move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
    move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_LAMI~C_IEVNT_O_SHTDIM_CHANGED ).
    endif.

  endmethod.
  method SET_SHTWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

    move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
    move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_LAMI~C_IEVNT_O_SHTDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LR_PR_XSHT type ref to ZCL_VCXI_PXSS_PR_XSHT.


*** Super
    RR_BL_CRFPROP = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
    LR_PR_XSHT = ME->ZIF_VCXI_PXSS_LAMI~GET_PRVDR_XSHT( ).
    if LR_PR_XSHT is bound.
***   Merge Caliper, Handling Dimensions and Additional Weight
      RR_BL_CRFPROP->MERGE_CALIP(  IS_CALIP  = LR_PR_XSHT->GET_CALIP( )  ).
      RR_BL_CRFPROP->MERGE_HNDDIM( IS_HNDDIM = LR_PR_XSHT->GET_HNDDIM( ) ).
      RR_BL_CRFPROP->MERGE_ADDWT(  IS_ADDWT  = LR_PR_XSHT->GET_ADDWT( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT.

    data: LS_SURWT type ZVCXI_PXS_S_SURWT.
    data: LR_PR_XSHT     type ref to ZCL_VCXI_PXSS_PR_XSHT,
          LR_PR_MS_LGLUE type ref to ZCL_VCXI_PXSS_PR_MS_LGLUE.


***------------------------------------------------------------------------------------------------
*** Get Base Weight
    RS_SURWT = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT( importing EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Consider Sheet
    LR_PR_XSHT = ME->ZIF_VCXI_PXSS_LAMI~GET_PRVDR_XSHT( ).
    if LR_PR_XSHT is bound.
***   Summarize Surface Weight
      LS_SURWT = LR_PR_XSHT->GET_SURWT( ).
      if RS_SURWT is initial.
        RS_SURWT = LS_SURWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                            IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                            IF_CALCV_2     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SURWT-SURWT_UOM
                                                  importing EF_CALCV       = RS_SURWT-SURWT
                                                            EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Consider Lamination Glue
    LR_PR_MS_LGLUE = ME->GET_PRVDR_MS_LGLUE( ).
    if LR_PR_MS_LGLUE is bound.
***   Summarize Surface Weight
      LS_SURWT = LR_PR_MS_LGLUE->GET_SURWT( ).
      if RS_SURWT is initial.
        RS_SURWT = LS_SURWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                            IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                            IF_CALCV_2     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SURWT-SURWT_UOM
                                                  importing EF_CALCV       = RS_SURWT-SURWT
                                                            EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


*** Call SUPER
    RR_BL_CRBPROP = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Update Scores/Tapes
    try.
        LT_SCORE_COM = RR_BL_CRBPROP->T_SCORE.
        LT_TAPE_COM  = RR_BL_CRBPROP->T_TAPE_COM.

***     Apply Reduction
        ZCL_VCXI_PXSS_BL_SCORE=>ADD_REDUC( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                     IS_REDUC_FIRST    = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLEF( )
                                                     IS_REDUC_LAST     = ME->ZIF_VCXI_PXSS_REDUC~GET_RDRIG( )
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
        ZCL_VCXI_PXSS_BL_SCORE=>ADD_REDUC( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                                     IS_REDUC_FIRST    = ME->ZIF_VCXI_PXSS_REDUC~GET_RDTOP( )
                                                     IS_REDUC_LAST     = ME->ZIF_VCXI_PXSS_REDUC~GET_RDBOT( )
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM, LT_TAPE_COM.
    endtry.
    RR_BL_CRBPROP->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    RR_BL_CRBPROP->SET_TAPE_COM( IT_TAPE_COM = LT_TAPE_COM ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_LAMI> type ZVCXI_PXSS_S_FDI_LAMI.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_LAMI.
    assign RR_DATA->* to <S_FDI_LAMI>.


***--------------------------------------------------------------------------------------
*** Description of Lamination
    <S_FDI_LAMI>-DESCR_LAMI = ME->R_GATE->GET_DESCR( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.
  endmethod.
  method ZIF_VCXI_PXSS_LAMI~GET_CSPLIT.

    RT_CSPLIT = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_CSPLIT.

  endmethod.
  method ZIF_VCXI_PXSS_LAMI~GET_LGLCD.

*** Use Flute as Driver
    RF_LGLCD = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->F_FLUTE.

  endmethod.
  method ZIF_VCXI_PXSS_LAMI~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS( ).

  endmethod.
  method ZIF_VCXI_PXSS_LAMI~GET_PRVDR_XSHT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_XSHT.

***------------------------------------------------------------------------------------------------
*** Find Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_XSHT.

  endmethod.
  method ZIF_VCXI_PXSS_LAMI~GET_SHTDIM.

    ES_SHTWI = ME->GET_SHTWI( ).
    ES_SHTLE = ME->GET_SHTLE( ).

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).
    move LS_PARAM-ATFLV to RS_RDBOT-RDBOT.
    move LS_PARAM-UNIT  to RS_RDBOT-RDBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).
    move LS_PARAM-ATFLV to RS_RDLEF-RDLEF.
    move LS_PARAM-UNIT  to RS_RDLEF-RDLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLET.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).
    move LS_PARAM-ATFLV to RS_RDLET-RDLET.
    move LS_PARAM-UNIT  to RS_RDLET-RDLET_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).
    move LS_PARAM-ATFLV to RS_RDRIG-RDRIG.
    move LS_PARAM-UNIT  to RS_RDRIG-RDRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).
    move LS_PARAM-ATFLV to RS_RDTOP-RDTOP.
    move LS_PARAM-UNIT  to RS_RDTOP-RDTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDWIT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).
    move LS_PARAM-ATFLV to RS_RDWIT-RDWIT.
    move LS_PARAM-UNIT  to RS_RDWIT-RDWIT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).

    move IS_RDBOT-RDBOT     to LS_PARAM-ATFLV.
    move IS_RDBOT-RDBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDBOT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).

    move IS_RDLEF-RDLEF     to LS_PARAM-ATFLV.
    move IS_RDLEF-RDLEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLEF_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLET.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).

    move IS_RDLET-RDLET     to LS_PARAM-ATFLV.
    move IS_RDLET-RDLET_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLET_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).

    move IS_RDRIG-RDRIG     to LS_PARAM-ATFLV.
    move IS_RDRIG-RDRIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDRIG_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).

    move IS_RDTOP-RDTOP     to LS_PARAM-ATFLV.
    move IS_RDTOP-RDTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDTOP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDWIT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).

    move IS_RDWIT-RDWIT     to LS_PARAM-ATFLV.
    move IS_RDWIT-RDWIT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDWIT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://combine'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***------------------------------------------------------------------------------------------------
*** Find Provider for X-Sheets
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XSHT=>C_IPRVT_PX_XSHT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
        cast ZIF_VCXI_XCS_NGREP( LR_GATE->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                           changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
      endif.
    endloop.

  endmethod.
