
class ZCL_VCXI_XCDR_CONDITION definition
  public
  final
  create public .

public section.

  type-pools ABAP .
  class-methods CHECK_CONDREC_BY_CONDVAL
    importing
      !IR_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC
      !IT_CONDVAL type ZVCXI_XCDR_TT_CONDVAL
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods GET_CONDDEF
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_CONDDEF) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods GET_CONDREC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_DEFAULT type ABAP_BOOL optional
      !IF_FUNCTION type ABAP_BOOL optional
      !IF_SCREEN type ABAP_BOOL optional
      !IF_INUSE type ABAP_BOOL optional
      !IF_GRID type ABAP_BOOL optional
    returning
      value(RT_CONDREC) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_IEXIT_VALID,
           IEXIT  type ZVCXI_XCD_IEXIT,
           VALID  type ABAP_BOOL,
         end   of YS_IEXIT_VALID .
  types:
    YT_IEXIT_VALID type standard table of YS_IEXIT_VALID .

  class-methods FILTER_CONDREC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF
    changing
      !CT_CONDREC type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods FILTER_CONDREC_BY_CONTEXT
    importing
      !IF_DEFAULT type ABAP_BOOL optional
      !IF_FUNCTION type ABAP_BOOL optional
      !IF_SCREEN type ABAP_BOOL optional
      !IF_INUSE type ABAP_BOOL optional
      !IF_GRID type ABAP_BOOL optional
    changing
      !CT_CONDREC type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods GET_CONDVAL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF
    returning
      value(RT_CONDVAL) type ZVCXI_XCDR_TT_CONDVAL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCDR_CONDITION definition
class ZCL_VCXI_XCDR_CONDITION implementation.
method CHECK_CONDREC_BY_CONDVAL.

  data:          LS_CR_VALUE  type          ZVCXI_XCDC_S_CR_VALUE,
                 LS_CONDVAL   type          ZVCXI_XCDR_S_CONDVAL.
  field-symbols: <I_RANGE>    type standard table,
                 <F_VALUE>    type          any.

  move ABAP_TRUE to RF_VALID.
  loop at IR_CONDREC->T_CR_VALUE into LS_CR_VALUE.
*** Get Condition Value
    read table IT_CONDVAL into LS_CONDVAL
                          with key ICOVA = LS_CR_VALUE-ICOVA.
    if SY-SUBRC ne 0.
      move ABAP_FALSE to RF_VALID.
      exit.
    endif.

*** Check Data is available for Compare
    if LS_CR_VALUE-R_RANGE is not bound or
       LS_CONDVAL-R_VALUE  is not bound.
      move ABAP_FALSE to RF_VALID.
      exit.
    endif.

*** Dereferencing
    assign LS_CR_VALUE-R_RANGE->* to <I_RANGE>.
    assign LS_CONDVAL-R_VALUE->*  to <F_VALUE>.

*** Compare
    if <F_VALUE> not in <I_RANGE>.
      move ABAP_FALSE to RF_VALID.
      exit.
    endif.
  endloop.

endmethod.
method FILTER_CONDREC.

  data:  LF_VALID              type        ABAP_BOOL,
         LF_MSGV1              type        SYMSGV,
         LF_MSGV2              type        SYMSGV.
  data:  LS_CR_EXIT            type        ZVCXI_XCDC_S_CR_EXIT,
         LS_CD_EXIT            type        ZVCXI_XCDC_S_CD_EXIT,
         LS_IEXIT_VALID        type        YS_IEXIT_VALID.
  data:  LT_CONDVAL            type        ZVCXI_XCDR_TT_CONDVAL,
         LT_CD_EXIT            type        ZVCXI_XCDC_TT_CD_EXIT,
         LT_IEXIT_VALID        type        YT_IEXIT_VALID.
  data:  LR_CONDREC            type ref to ZCL_VCXI_XCDC_CONDREC,
         LR_OBJECT             type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
         LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
         LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
         LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.

  check CT_CONDREC is not initial.

***--------------------------------------------------------------------------------------
*** Get Condition Values
  LT_CONDVAL = GET_CONDVAL( IR_GATE    = IR_GATE
                            IR_CONDDEF = IR_CONDDEF ).

***--------------------------------------------------------------------------------------
*** Process Condition Records
  loop at CT_CONDREC into LR_OBJECT.
    move LR_OBJECT ?to LR_CONDREC.

*** Compare Values
    LF_VALID = ZCL_VCXI_XCDR_CONDITION=>CHECK_CONDREC_BY_CONDVAL( IR_CONDREC = LR_CONDREC
                                                                  IT_CONDVAL = LT_CONDVAL ).
    if LF_VALID ne ABAP_TRUE.
      delete CT_CONDREC.
      continue.
    endif.

***--------------------------------------------------------------------------------------
*** Collect Exits
    free: LT_CD_EXIT.
    loop at LR_CONDREC->T_CR_EXIT into LS_CR_EXIT.
      read table LT_IEXIT_VALID into LS_IEXIT_VALID
                                with key IEXIT = LS_CR_EXIT-IEXIT.
      if SY-SUBRC eq 0.
        move LS_IEXIT_VALID-VALID to LF_VALID.
        if LF_VALID ne ABAP_TRUE.
          exit.
        endif.
      else.
        read table IR_CONDDEF->T_CD_EXIT into LS_CD_EXIT
                                         with key IEXIT = LS_CR_EXIT-IEXIT.
        if SY-SUBRC eq 0.
          collect LS_CD_EXIT into LT_CD_EXIT.
        endif.
      endif.
    endloop.

    if LF_VALID ne ABAP_TRUE.
      delete CT_CONDREC.
      continue.
    endif.

*** Sort Exits
    sort LT_CD_EXIT by SEXIT.

*** Process Exit
    loop at LT_CD_EXIT into LS_CD_EXIT.
***   Check if Valid
      try.
          clear LF_VALID.
          call function LS_CD_EXIT-FNAME
            exporting
              IR_GATE  = IR_GATE
            importing
              EF_VALID = LF_VALID.


        catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
          clear LF_VALID.
***       Function Module call failed: Could not call the function &1.
          move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
          IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                IF_MSGID = 'ZVCXI_XCDR'
                                IF_MSGNO = '010'
                                IF_MSGV1 = LF_MSGV1 ).

        catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
          clear LF_VALID.
***       Function Module call failed: Parameter &1 in function &2 missing.
          move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
          IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                IF_MSGID = 'ZVCXI_XCDR'
                                IF_MSGNO = '011'
                                IF_MSGV1 = LF_MSGV1
                                IF_MSGV2 = LF_MSGV2 ).

        catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
          clear LF_VALID.
***       Function Module call failed: Obligatory parameter &2 of &2 not filled.
          move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
          IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                IF_MSGID = 'ZVCXI_XCDR'
                                IF_MSGNO = '012'
                                IF_MSGV1 = LF_MSGV1
                                IF_MSGV2 = LF_MSGV2 ).

        catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
          clear LF_VALID.
***       Function Module call failed: Unknown Error while calling function &1.
          move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
          IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                IF_MSGID = 'ZVCXI_XCDR'
                                IF_MSGNO = '013'
                                IF_MSGV1 = LF_MSGV1 ).


        catch /VCXI/CX_CKX.
          clear LF_VALID.
      endtry.

***   Buffer Result
      clear LS_IEXIT_VALID.
      move LS_CD_EXIT-IEXIT to LS_IEXIT_VALID-IEXIT.
      move LF_VALID to LS_IEXIT_VALID-VALID.
      append LS_IEXIT_VALID to LT_IEXIT_VALID.

      if LF_VALID ne ABAP_TRUE.
        exit.
      endif.
    endloop.

    if LF_VALID ne ABAP_TRUE.
      delete CT_CONDREC.
      continue.
    endif.
  endloop.

endmethod.
method FILTER_CONDREC_BY_CONTEXT.

  data:  LF_VALID         type        ABAP_BOOL.
  data:  LS_CR_SIMPACT    type        ZVCXI_XCDC_S_CR_SIMPACT.
  data:  LR_CONDREC       type ref to ZCL_VCXI_XCDC_CONDREC,
         LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.

  check CT_CONDREC is not initial.

***--------------------------------------------------------------------------------------
*** Process Condition Records
  loop at CT_CONDREC into LR_OBJECT.
    move LR_OBJECT ?to LR_CONDREC.

*** Check if Defaults are assigned
    if IF_DEFAULT eq ABAP_TRUE.
      check LR_CONDREC->T_CR_DVALUE is initial and
            LR_CONDREC->T_CR_DEXIT is initial.

      delete CT_CONDREC.
      continue.
    endif.

*** Check if Functions are assigned
    if IF_FUNCTION eq ABAP_TRUE.
      check LR_CONDREC->T_CR_FUNCT is initial.

      delete CT_CONDREC.
      continue.
    endif.

*** Check if Inuse Option is assigned
    if IF_INUSE eq ABAP_TRUE.
      check LR_CONDREC->F_OELIU is initial.

      delete CT_CONDREC.
      continue.
    endif.

*** Check if Screen is assigned
    if IF_SCREEN eq ABAP_TRUE.
      loop at LR_CONDREC->T_CR_SIMPACT into LS_CR_SIMPACT.
        read table LR_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
              with key ISCGR = LS_CR_SIMPACT-ISCGR
                       TSDEF = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_TSDEF_SF
              transporting no fields.
        check SY-SUBRC = 0.
        LF_VALID = ABAP_TRUE.
        exit.
      endloop.

      check LF_VALID eq ABAP_FALSE.
      delete CT_CONDREC.
      continue.
    endif.

*** Check if Grid is assigned
    if IF_GRID eq ABAP_TRUE.
      loop at LR_CONDREC->T_CR_SIMPACT into LS_CR_SIMPACT.
        read table LR_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
              with key ISCGR = LS_CR_SIMPACT-ISCGR
                       TSDEF = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_TSDEF_AF
              transporting no fields.
        if SY-SUBRC ne 0.
          read table LR_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_SCRGR~T_REGDVC_SCRGRDEF
                with key ISCGR = LS_CR_SIMPACT-ISCGR
                         TSDEF = ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_TSDEF_AS
                transporting no fields.
        endif.
        check SY-SUBRC = 0.
        LF_VALID = ABAP_TRUE.
        exit.
      endloop.

      check LF_VALID eq ABAP_FALSE.
      delete CT_CONDREC.
      continue.
    endif.
  endloop.

endmethod.
method GET_CONDDEF.

  data:  LS_CMPRK         type        /VCXI/VKC_S_CMPRK,
         LS_CD_VALID      type        ZVCXI_XCDC_S_CD_VALID.
  data:  LR_DVCCOND       type ref to ZCL_VCXI_XCDC_DVCCOND.


*** Get DynamicVC
  LR_DVCCOND = ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

***----------------------------------------------------------------------------
*** Get valid Condition Definitions
  IR_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).
  move LS_CMPRK-CMATN to LS_CD_VALID-CMATN.
  move LS_CMPRK-PRFID to LS_CD_VALID-PRFID.
  move IR_GATE->F_ID  to LS_CD_VALID-ICELM.
  RT_CONDDEF = LR_DVCCOND->GET_CONDDEF( IS_CD_VALID = LS_CD_VALID ).

endmethod.
method GET_CONDREC.

  data:  LF_CEALI_LOADED  type        ABAP_BOOL.
  data:  LS_CMPRK         type        /VCXI/VKC_S_CMPRK,
         LS_CEALI         type        /VCXI/VKSR_S_CEALI,
         LS_CR_FILTER     type        ZVCXI_XCDC_S_CR_FILTER.
  data:  LT_CONDDEF       type        /VCXI/CKX_TT_OBJECT,
         LT_CONDREC       type        /VCXI/CKX_TT_OBJECT,
         LT_CEALI         type        /VCXI/VKSR_TT_CEALI,
         LT_IEALI         type        /VCXI/CKX_TT_ID.
  data:  LR_DVCCOND       type ref to ZCL_VCXI_XCDC_DVCCOND,
         LR_CONDDEF       type ref to ZCL_VCXI_XCDC_CONDDEF,
         LR_CONDREC       type ref to ZCL_VCXI_XCDC_CONDREC,
         LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.

***----------------------------------------------------------------------------
*** Get valid Condition Definitions
  LT_CONDDEF = ZCL_VCXI_XCDR_CONDITION=>GET_CONDDEF( IR_GATE = IR_GATE ).
  check LT_CONDDEF is not initial.

*** Get DynamicVC
  LR_DVCCOND = ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

*** Get Config Material and Profile
  IR_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

***----------------------------------------------------------------------------
*** Get valid Condition Records
  loop at LT_CONDDEF into LR_OBJECT.
    move LR_OBJECT ?to LR_CONDDEF.
    check LR_CONDDEF is bound.

    if LF_CEALI_LOADED ne ABAP_TRUE.
***   Get Condition Records without checking the Aliases
      LT_CONDREC = LR_DVCCOND->GET_CONDREC( IR_CONDDEF = LR_CONDDEF
                                            IS_CMPRK   = LS_CMPRK
                                            IF_ICELM   = IR_GATE->F_ID ).

***   Check Aliases are defined as Filter
      loop at LT_CONDREC into LR_OBJECT.
        move LR_OBJECT ?to LR_CONDREC.

        loop at LR_CONDREC->T_CR_FILTER into LS_CR_FILTER
                                       where IEALI is not initial.
***       Get Alias of Element
          LT_CEALI = IR_GATE->GET_CEALI( ).
          loop at LT_CEALI into LS_CEALI.
            append LS_CEALI-IEALI to LT_IEALI.
          endloop.
          move ABAP_TRUE to LF_CEALI_LOADED.
          exit.
        endloop.
        if LF_CEALI_LOADED eq ABAP_TRUE.
          exit.
        endif.
      endloop.
    endif.

    if LF_CEALI_LOADED eq ABAP_TRUE.
***   Get Condition Records with Alias Check
      LT_CONDREC = LR_DVCCOND->GET_CONDREC( IR_CONDDEF = LR_CONDDEF
                                            IS_CMPRK   = LS_CMPRK
                                            IF_ICELM   = IR_GATE->F_ID
                                            IT_IEALI   = LT_IEALI ).
    endif.
    check LT_CONDREC is not initial.

*** Filter by Context
    FILTER_CONDREC_BY_CONTEXT( exporting IF_DEFAULT  = IF_DEFAULT
                                         IF_FUNCTION = IF_FUNCTION
                                         IF_SCREEN   = IF_SCREEN
                                         IF_INUSE    = IF_INUSE
                                         IF_GRID     = IF_GRID
                                changing CT_CONDREC  = LT_CONDREC ).
    check LT_CONDREC is not initial.

*** Filter by Condition
    FILTER_CONDREC( exporting IR_GATE    = IR_GATE
                              IR_CONDDEF = LR_CONDDEF
                    changing  CT_CONDREC = LT_CONDREC ).

*** Collect all Condition Records
    append lines of LT_CONDREC to RT_CONDREC.
  endloop.

***----------------------------------------------------------------------------
*** Sort Condition Records
  ZCL_VCXI_XCDC_SERVICE=>SORT_CONDREC( changing CT_OBJECT = RT_CONDREC ).

endmethod.
method GET_CONDVAL.

  data:          LF_MSGV1              type        SYMSGV,
                 LF_MSGV2              type        SYMSGV.
  data:          LS_CD_VALUE           type        ZVCXI_XCDC_S_CD_VALUE,
                 LS_LEOKY              type        /VCXI/VKSR_S_LEOKY,
                 LS_PARAM              type        /VCXI/VKSR_S_PARAM.
  data:          LT_PRVDR              type        /VCXI/VKSR_TT_GATE,
                 LT_CEALI              type        /VCXI/VKSR_TT_CEALI.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE,
                 LR_PRVDR              type ref to /VCXI/CL_VKSR_GATE,
                 LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_CONDVAL>           type        ZVCXI_XCDR_S_CONDVAL,
                 <F_VALUE>             type        any.

  loop at IR_CONDDEF->T_CD_VALUE into LS_CD_VALUE.
    clear LR_GATE.

*** Add Entry
    append initial line to RT_CONDVAL assigning <S_CONDVAL>.
    move LS_CD_VALUE-ICOVA to <S_CONDVAL>-ICOVA.

*** Create Reference for Value
    create data <S_CONDVAL>-R_VALUE type (LS_CD_VALUE-DATEL).
    assign <S_CONDVAL>-R_VALUE->* to <F_VALUE>.

***----------------------------------------------------------------------------
*** Find SVC Element
    if LS_CD_VALUE-IEALI is initial.
      if LS_CD_VALUE-FEXCO is initial.
***    Get Own Gate
        move IR_GATE to LR_GATE.
      else.
***     Get via Exit definde Gate
***     Check Alias (Relativ) Exit found Gate
        try.
            call function LS_CD_VALUE-FEXCO
              exporting
                IR_GATE = IR_GATE
              importing
                ER_GATE = LR_GATE.

          catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
            clear LR_GATE.
***         Function Module call failed: Could not call the function &1.
            move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
            IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                  IF_MSGID = 'ZVCXI_XCDR'
                                  IF_MSGNO = '010'
                                  IF_MSGV1 = LF_MSGV1 ).

          catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
            clear LR_GATE.
***         Function Module call failed: Parameter &1 in function &2 missing.
            move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
            move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
            IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                  IF_MSGID = 'ZVCXI_XCDR'
                                  IF_MSGNO = '011'
                                  IF_MSGV1 = LF_MSGV1
                                  IF_MSGV2 = LF_MSGV2 ).

          catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
            clear LR_GATE.
***         Function Module call failed: Obligatory parameter &2 of &2 not filled.
            move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
            move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
            IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                  IF_MSGID = 'ZVCXI_XCDR'
                                  IF_MSGNO = '012'
                                  IF_MSGV1 = LF_MSGV1
                                  IF_MSGV2 = LF_MSGV2 ).

          catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
            clear LR_GATE.
***         Function Module call failed: Unknown Error while calling function &1.
            move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
            IR_GATE->ADD_MESSAGE( IF_MSGTY = 'E'
                                  IF_MSGID = 'ZVCXI_XCDR'
                                  IF_MSGNO = '013'
                                  IF_MSGV1 = LF_MSGV1 ).

          catch /VCXI/CX_CKX.
            clear LR_GATE.
        endtry.
      endif.
    else.
***   Get all Provider
      if LT_PRVDR is initial.
        LT_PRVDR = IR_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
        append IR_GATE to LT_PRVDR.
      endif.

***   Find Provider with Alias
      try.
          loop at LT_PRVDR into LR_PRVDR.
            if LR_PRVDR->IS_CEALI( IF_IEALI = LS_CD_VALUE-IEALI ) eq ABAP_TRUE.
              move LR_PRVDR to LR_GATE.
              exit.
            endif.
          endloop.
        catch /VCXI/CX_CKX.
          clear LR_GATE.
      endtry.
    endif.

***----------------------------------------------------------------------------
*** Get Parameter value
    check LR_GATE is bound.
    case LS_CD_VALUE-PARID.
      when 'LEOKY'.
        LS_LEOKY = LR_GATE->GET_LEOKY( ).
        move LS_LEOKY-LEOKY to <F_VALUE>.

      when others.
        LS_PARAM = LR_GATE->GET_PARAM( IF_PARID = LS_CD_VALUE-PARID ).

        case LS_PARAM-PARTY.
          when /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR.
            move LS_PARAM-ATWRT to <F_VALUE>.

          when /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG.
            move LS_PARAM-STRNG to <F_VALUE>.

          when /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC.
            if LS_CD_VALUE-PAVAL_UOM is initial.
              move LS_PARAM-ATFLV to <F_VALUE>.
            else.
***           Unit Conversion
              call function 'UNIT_CONVERSION_SIMPLE'
                exporting
                  INPUT    = LS_PARAM-ATFLV
                  UNIT_IN  = LS_PARAM-UNIT
                  UNIT_OUT = LS_CD_VALUE-PAVAL_UOM
                importing
                  OUTPUT   = <F_VALUE>
                exceptions
                  others   = 9.
              if SY-SUBRC ne 0.
                /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
              endif.
              move LS_CD_VALUE-PAVAL_UOM to <S_CONDVAL>-VALUE_UOM.
            endif.
        endcase.
    endcase.
  endloop.

endmethod.
