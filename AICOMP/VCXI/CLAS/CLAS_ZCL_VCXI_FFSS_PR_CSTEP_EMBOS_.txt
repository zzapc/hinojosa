
class ZCL_VCXI_FFSS_PR_CSTEP_EMBOS definition
  public
  inheriting from ZCL_VCXI_FFSS_PR_CSTEP
  create public .

public section.

  constants C_PARID_EMTIN type /VCXI/VKS_PARID value 'ZVCXI_FF_EMTIN' ##NO_TEXT.
  constants C_PARID_EMTON type /VCXI/VKS_PARID value 'ZVCXI_FF_EMTON' ##NO_TEXT.

  methods GET_EMTIN
    exporting
      !ES_EMTIN type ZVCXI_FFS_S_EMTIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_EMTON
    exporting
      !EF_EMTON type ZVCXI_FFS_EMTON
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_CUST_EMTON type ref to ZCL_VCXI_XCS_CUST_MATNR
      !ES_BAPIRET2 type BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods GET_EMTON_DESCR
    returning
      value(RF_EMTON_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_EMTIN
    importing
      !IS_EMTIN type ZVCXI_FFS_S_EMTIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EMTON
    importing
      !IF_EMTON type ZVCXI_FFS_EMTON
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN
    redefinition .
protected section.

  constants C_IEVNT_O_EMTIN_CHANGED type /VCXI/VKSC_IEVNT value 'EMTIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_EMTON_CHANGED type /VCXI/VKSC_IEVNT value 'EMTON_CHANGED' ##NO_TEXT.

  methods CHECK_EMTON
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_CSTEP_EMBOS definition
class ZCL_VCXI_FFSS_PR_CSTEP_EMBOS implementation.
  method CHECK_EMTON.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_EMTON type ref to ZCL_VCXI_XCS_CUST_MATNR.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_EMTON( importing ER_CUST_EMTON = LR_CUST_EMTON
                             ES_BAPIRET2   = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_EMTON is bound.

  endmethod.
  method GET_EMTIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMTIN ).
    move LS_PARAM-ATFLV to ES_EMTIN-EMTIN.
    move LS_PARAM-UNIT  to ES_EMTIN-EMTIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_EMTON.

    data: LF_WERKS type WERKS_D,
          LF_DCONF type DATS.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMTON ).
    move LS_PARAM-ATWRT to EF_EMTON.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_EMTON is not initial.

    if ER_CUST_EMTON is requested.

***   Get Plant
      move ME->GET_WERKS( ) to LF_WERKS.
      check LF_WERKS is not initial.

***   Get Configuration Date
      ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

***   Get Embossing Tool
      try.
          ER_CUST_EMTON = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = EF_EMTON
                                                                 IF_WERKS = LF_WERKS
                                                                 IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_EMTON.
      endtry.
    endif.

  endmethod.
  method GET_EMTON_DESCR.

    data: LF_EMTON type ZVCXI_FFS_EMTON,
          LS_MAKT  type MAKT.

    ME->GET_EMTON( importing EF_EMTON = LF_EMTON ).

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = LF_EMTON
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_EMTON_DESCR.
    else.
      move LS_MAKT-MAKTX to RF_EMTON_DESCR.
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Embossing Tool Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_EMTON( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Embossing Tool Number
    ME->CHECK_EMTON( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method SET_EMTIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMTIN ).

    move IS_EMTIN-EMTIN     to LS_PARAM-ATFLV.
    move IS_EMTIN-EMTIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EMTIN_CHANGED ).
    endif.

  endmethod.
  method SET_EMTON.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMTON ).

    move IF_EMTON     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EMTON_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

    data: LS_EMTIN type ZVCXI_FFS_S_EMTIN.

*** Get Internal Film Thickness (Inbound)
    SUPER->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                        EF_SETBY = EF_SETBY ).

*** Get Internal Embossing Thickness
    ME->GET_EMTIN( importing ES_EMTIN = LS_EMTIN ).

*** Add to total Internal Thickness
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_EMTIN-EMTIN
                                                        IF_CALCV_UOM_1 = LS_EMTIN-EMTIN_UOM
                                                        IF_CALCV_2     = ES_FITIN-FITIN
                                                        IF_CALCV_UOM_2 = ES_FITIN-FITIN_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = ES_FITIN-FITIN_UOM
                                              importing EF_CALCV       = ES_FITIN-FITIN
                                                        EF_CALCV_UOM   = ES_FITIN-FITIN_UOM ).

  endmethod.
