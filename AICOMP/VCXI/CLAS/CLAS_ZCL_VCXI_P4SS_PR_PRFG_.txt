
class ZCL_VCXI_P4SS_PR_PRFG definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_FG .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_COMPR_CHANGED type /VCXI/VKSC_IEVNT value 'COMPR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WERKS_CHANGED type /VCXI/VKSC_IEVNT value 'WERKS_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P4_PRFG type /VCXI/VKSC_IPRVT value 'ZVCXI_P4SS_PRFG' ##NO_TEXT.
  constants C_PARID_COMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_COMPR' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.
  constants C_PARID_PURCH type /VCXI/VKS_PARID value 'ZVCXI_XC_PURCH' ##NO_TEXT.
  constants C_PARID_WERKS type /VCXI/VKS_PARID value 'ZVCXI_XC_WERKS' ##NO_TEXT.
  constants C_PURCH_DIRECT type ZVCXI_XCS_PURCH value 'D' ##NO_TEXT.
  constants C_PURCH_DIRECT_PRICE type ZVCXI_XCS_PURCH value 'X' ##NO_TEXT.
  constants C_PURCH_STOCK type ZVCXI_XCS_PURCH value SPACE ##NO_TEXT.

  methods GET_PRVDR_PRDTL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PRDTL) type ref to ZIF_VCXI_P4SS_PRDTL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPLR
    importing
      !IF_CREATE type ABAP_BOOL default ABAP_FALSE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPLR) type ref to ZCL_VCXI_P4SS_PR_SPLR
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_PURCH
    importing
      !IF_PURCH type ZVCXI_XCS_PURCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS
    importing
      !IF_WERKS type WERKS_D
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_AREA_WGT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_AREA_WGT) type ref to ZCL_VCXI_P4SS_PR_AREA_WGT
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SPLR type /VCXI/VKSC_IEVNT value 'INIT_SPLR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_COMPR type /VCXI/VKSC_IEVNT value 'RECALC_COMPR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_CSPLIT type /VCXI/VKSC_IEVNT value 'RECALC_CSPLIT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  data R_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR .

  methods GET_BOB_CMIR
    returning
      value(RR_BOB_CMIR) type ref to ZCL_VCXI_XCI_BOB_CMIR
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMPR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_KDMAT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SPLR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_COMPR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.

  data R_BOB_CMIR type ref to ZCL_VCXI_XCI_BOB_CMIR .
endclass. "ZCL_VCXI_P4SS_PR_PRFG definition
class ZCL_VCXI_P4SS_PR_PRFG implementation.
  method CHECK_COMPR.

    data: LF_COMPR   type ZVCXI_P0SS_COMPR,
          LF_ALLOWED type ABAP_BOOL.


*** Get Component Ratio
    LF_COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_ALLOWED = LF_ALLOWED ).

    if LF_ALLOWED eq ABAP_TRUE.
      if LF_COMPR is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Component Ratio is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '035' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Component Ratio is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '036' ).
        endif.
      endif.

    else.
      if LF_COMPR gt 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Component Ratio should not be maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '037' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_KDMAT.

    data: LS_VBAP type VBAP.


*** Only check if Material Number is dummy
    check ME->IS_DUMMY( ).

*** Don't check if item is rejected
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                                                  changing  CS_DATA  = LS_VBAP ).
    check LS_VBAP-ABGRU is initial.

*** Get Customer Material
    data(LF_KDMAT) = ME->ZIF_VCXI_PXSS_FG~GET_KDMAT( ).
    check LF_KDMAT is not initial.

***------------------------------------------------------------------------------------------------
*** Get Instance Business Object - Customer-Material Info Record
    data(LR_BOB_CMIR) = ME->GET_BOB_CMIR( ).
    check LR_BOB_CMIR is bound.

*** Check duplicate entries of Customer Material Number
    data(LS_KNMT) = LR_BOB_CMIR->GET_KNMT( IF_KDMAT = LF_KDMAT ).

    if LS_KNMT-MATNR is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Customer material &1 has already been used in info &2
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'VS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '003'
                                 IF_MSGV1 = LF_KDMAT
                                 IF_MSGV2 = LS_KNMT-MATNR ).
      endif.
    endif.

  endmethod.
  method CHECK_MAKTX.

***------------------------------------------------------------------------------------------------
    if ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '021' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '022' ).
      endif.
    endif.

  endmethod.
  method CHECK_MATNR.

*** Check Material Number
    if ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ) is not initial.
***   Check Material Instance was created
      if ME->R_CUST_MATNR is not bound.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Instance was not created.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '002' ).
        endif.

***   Check Material Number is valid
      elseif ME->R_CUST_MATNR->F_CHECK_MATNR ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Number is not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '003' ).
        endif.

***   Check Material Number is valid in Plant
      elseif ME->R_CUST_MATNR->F_CHECK_MAT_MARC ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Number is not valid in Plant.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '004'
                                   IF_MSGV1 = ME->GET_WERKS( ) ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Material is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '005' ).
        endif.
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '001' ).
      endif.
    endif.

  endmethod.
  method GET_BOB_CMIR.

    if ME->R_BOB_CMIR is not bound.
      data(LR_APPDATA) = cast ZCL_VCXI_XCS_APPDATA( ME->R_GATE->GET_APPDATA( ) ).
      ME->R_BOB_CMIR = new #( IF_KUNNR = LR_APPDATA->S_KNVV_AG-KUNNR
                              IF_VKORG = LR_APPDATA->S_KNVV_AG-VKORG
                              IF_SPART = LR_APPDATA->S_KNVV_AG-SPART
                              IF_VTWEG = LR_APPDATA->S_KNVV_AG-VTWEG ).
    endif.

    RR_BOB_CMIR = ME->R_BOB_CMIR.

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_PRVDR_AREA_WGT.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


    clear: RR_PR_AREA_WGT,
           ER_GATE.

***--------------------------------------------------------------------------------------
*** Get Area & Weight provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_AREA_WGT=>C_IPRVT_P4_AREA_WGT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Area & Weight Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_AREA_WGT.
          check RR_PR_AREA_WGT is bound.
          move LR_GATE to ER_GATE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_AREA_WGT, ER_GATE.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_PRDTL.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PRDTL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P4SS_PRDTL=>C_IPRVT_P4_PRDTL
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PRDTL.

  endmethod.
  method GET_PRVDR_SPLR.

    data: LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    clear: ER_GATE,
           RR_PR_SPLR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Supplier Information
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_SPLR=>C_IPRVT_P4_SPLR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.

***------------------------------------------------------------------------------------------------
    if SY-SUBRC is not initial and
       IF_CREATE eq ABAP_TRUE.
***   Get Provider Definition
      LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P4SS_PR_SPLR=>C_IPRVT_P4_SPLR ).
      check LT_PRVDR_DEF is not initial.

***   Create new Supplier Information
      ER_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LT_PRVDR_DEF[ 1 ]-ID ).
    endif.

***------------------------------------------------------------------------------------------------
*** Return PR Class reference
    check  ER_GATE is bound.
    RR_PR_SPLR ?= ER_GATE->R_CLSPR.


  endmethod.
  method GET_PURCH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
    RF_PURCH = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Component Ratio
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COMPR( ) ).

*** Check Material Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MATNR( ) ).

*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

*** Check Customer Material Number (CMIR)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_KDMAT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Component Ratio
    ME->CHECK_COMPR( IR_MESSAGE = IR_MESSAGE ).

*** Check Material Number
    ME->CHECK_MATNR( IR_MESSAGE = IR_MESSAGE ).

*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

*** Check Customer Material Number (CMIR)
    ME->CHECK_KDMAT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).
    RF_WERKS = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description


    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_CUST_MATNR.
        ME->HANDLE_INIT_CUST_MATNR( ).

      when C_IEVNT_I_INIT_PURCH.
        ME->HANDLE_INIT_PURCH( ).
      when C_IEVNT_I_INIT_SPLR.
        ME->HANDLE_INIT_SPLR( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).
      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

      when C_IEVNT_I_RECALC_COMPR.
        ME->HANDLE_RECALC_COMPR( ).
      when C_IEVNT_I_RECALC_CSPLIT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_CSPLIT_CHANGED ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_CUST_PROC   type ref to ZCL_VCXI_P4SS_CUST_PROC,
          LR_PR_AREA_WGT type ref to ZCL_VCXI_P4SS_PR_AREA_WGT.


    LF_MATNR = ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ).
    LF_WERKS = ME->GET_WERKS( ).
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear ME->R_CUST_MATNR.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          LR_CUST_PROC ?= ZCL_VCXI_P4SS_CUST_PROC=>GET_INSTANCE_PROC( IF_MATNR = LF_MATNR
                                                                      IF_WERKS = LF_WERKS
                                                                      IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          clear LR_CUST_PROC.
      endtry.
    endif.

    ME->R_CUST_MATNR = LR_CUST_PROC.


***--------------------------------------------------------------------------------------
*** Set Values for Real Procurement
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_HNDDIM( IS_HNDDIM = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_HNDDIM )
                      IF_SETBY  = LF_SETBY ).

***   Adjust Area and Weight
      LR_PR_AREA_WGT = ME->GET_PRVDR_AREA_WGT( ).
      if LR_PR_AREA_WGT is bound.
        LR_PR_AREA_WGT->SET_SBLAR( IS_SBLAR = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_SBLAR )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_SBLWT( IS_SBLWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_SBLWT )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_COUAR( IS_COUAR = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_COUAR )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_COUWT( IS_COUWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_COUWT )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_ADDWT( IS_ADDWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_ADDWT )
                                   IF_SETBY  = LF_SETBY ).
      endif.
    endif.

  endmethod.
  method HANDLE_INIT_PURCH.

*** Is Matrial a Dummy -> Set "Direct Procurement & Price"
    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE ).
    else.
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_STOCK ).
    endif.

  endmethod.
  method HANDLE_INIT_SPLR.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


    case ME->GET_PURCH( ).
      when ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_STOCK.
***     Get current Supplier Information
        ME->GET_PRVDR_SPLR( importing ER_GATE = LR_GATE ).
        if LR_GATE is bound.
          LR_GATE->DO_FREE( ).
        endif.

      when ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE or
           ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT.
***     Create Supplier Information if needed
        ME->GET_PRVDR_SPLR( exporting IF_CREATE = ABAP_TRUE ).

    endcase.

  endmethod.
  method HANDLE_RECALC_COMPR.

    data: LF_COMPR   type ZVCXI_P0SS_COMPR,
          LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_ALLOWED type ABAP_BOOL.


***--------------------------------------------------------------------------------------
*** Get Component Ratio and check if the usage of it is allowed
    LF_COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_SETBY   = LF_SETBY
                                                         EF_ALLOWED = LF_ALLOWED ).
    if LF_ALLOWED eq ABAP_TRUE.
***   Only go on if not set by user and not empty
      check   LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
            ( LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
              LF_COMPR eq 0 ).
      LF_COMPR = 1.
    else.
      LF_COMPR = 1.
    endif.

*** Set Component Ratio
    ME->ZIF_VCXI_PXSS_FG~SET_COMPR( IF_COMPR = LF_COMPR ).

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.
    data: LR_PRDET type ref to ZIF_VCXI_P4SS_PRDTL.


***--------------------------------------------------------------------------------------
*** Do only Recalc Folding Dimensions if they are not overridden.
    LS_HNDDIM = ME->ZIF_VCXI_PXSS_FG~GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Get Procurement Details
    LR_PRDET = ME->GET_PRVDR_PRDTL( ).
    if LR_PRDET is bound.
      LS_HNDDIM = LR_PRDET->GET_HNDDIM( ).
    else.
      clear LS_HNDDIM.
    endif.

*** Ensure no negative Values have been calculated
    LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
    LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
    LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->IS_DUMMY( ) ne ABAP_FALSE.
***   Only calcualate if calculation is active
      ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LF_MAKTX ).

    else.
***   Initialize Material Description
      ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_DUMMY.

    data: LF_MATNR      type MATNR,
          LF_OWNER_TYPE type IBOBJTYP.
    data: LS_MARC type MARC.


    LF_MATNR = ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ).

*** Is Matrial a Dummy
    RF_RETURN = ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                                         IF_MATNR = LF_MATNR ).
    check RF_RETURN ne ABAP_TRUE.

*** Special Handling for Procurement Finished Good in its own configuration
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'MARC'
                                                  changing  CS_DATA  = LS_MARC ).
    ME->R_GATE->GET_APPDATA( )->GET_OWNER( importing EF_OWNER_TYPE = LF_OWNER_TYPE ).

    if LS_MARC-MATNR eq LF_MATNR or
       ( LS_MARC is initial and LF_OWNER_TYPE eq 'MARC' ).    "Owner is Material but no MARC provided
      RF_RETURN = ABAP_UNDEFINED.
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_PURCH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

    move IF_PURCH to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
    endif.

  endmethod.
  method SET_WERKS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).

    move IF_WERKS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WERKS_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_PRFG> type ZVCXI_P4SS_S_FDI_PRFG.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P4SS_S_FDI_PRFG.
    assign RR_DATA->* to <S_FDI_PRFG>.


***------------------------------------------------------------------------------------------------
*** Get Material Number
    <S_FDI_PRFG>-MATNR = ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ).

*** Get Material Description
    <S_FDI_PRFG>-MAKTX = ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( importing EF_FOVRR = <S_FDI_PRFG>-FOVRR_MAKTX ).

*** Is Dummy Material
    <S_FDI_PRFG>-DUMMY = ME->IS_DUMMY( ).

*** Get Procurement Option
    <S_FDI_PRFG>-PURCH = ME->GET_PURCH( ).

*** Get Material Belonging to the Customer
    <S_FDI_PRFG>-KDMAT = ME->ZIF_VCXI_PXSS_FG~GET_KDMAT( ).

*** Get Customer Description of Material
    <S_FDI_PRFG>-KDPTX = ME->ZIF_VCXI_PXSS_FG~GET_KDPTX( ).

*** Get Component Ratio
    <S_FDI_PRFG>-COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_ALLOWED = <S_FDI_PRFG>-COMPR_ALLOWED ).

***------------------------------------------------------------------------------------------------
*** Get Handling Dimensions
    <S_FDI_PRFG>-S_HNDDIM = ME->ZIF_VCXI_PXSS_FG~GET_HNDDIM( importing EF_FOVRR = <S_FDI_PRFG>-FOVRR_HNDDIM ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_PRFG_OLD type ZVCXI_P4SS_S_FDI_PRFG,
          LS_FDI_PRFG_NEW type ZVCXI_P4SS_S_FDI_PRFG.
    data: LR_DATA_OLD   type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_PRFG_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_PRFG_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if LS_FDI_PRFG_OLD-MATNR ne LS_FDI_PRFG_NEW-MATNR.
      ME->ZIF_VCXI_PXSS_FG~SET_MATNR( IF_MATNR = LS_FDI_PRFG_NEW-MATNR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Option
    if LS_FDI_PRFG_OLD-PURCH ne LS_FDI_PRFG_NEW-PURCH.
      ME->SET_PURCH( IF_PURCH = LS_FDI_PRFG_NEW-PURCH
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material Description
    if LS_FDI_PRFG_OLD-MAKTX        ne LS_FDI_PRFG_NEW-MAKTX or
       LS_FDI_PRFG_OLD-FOVRR_MAKTX  ne LS_FDI_PRFG_NEW-FOVRR_MAKTX.
      if LS_FDI_PRFG_NEW-FOVRR_MAKTX ne ABAP_FALSE.
        ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LS_FDI_PRFG_NEW-MAKTX
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LS_FDI_PRFG_NEW-MAKTX
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Component Ratio
    if LS_FDI_PRFG_OLD-COMPR_ALLOWED eq ABAP_TRUE and
       LS_FDI_PRFG_OLD-COMPR ne LS_FDI_PRFG_NEW-COMPR.
      ME->ZIF_VCXI_PXSS_FG~SET_COMPR( IF_COMPR = LS_FDI_PRFG_NEW-COMPR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Belonging to the Customer
    if LS_FDI_PRFG_OLD-KDMAT ne LS_FDI_PRFG_NEW-KDMAT.
      ME->ZIF_VCXI_PXSS_FG~SET_KDMAT( IF_KDMAT = LS_FDI_PRFG_NEW-KDMAT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Customer Description of Material
    if LS_FDI_PRFG_OLD-KDPTX ne LS_FDI_PRFG_NEW-KDPTX.
      ME->ZIF_VCXI_PXSS_FG~SET_KDPTX( IF_KDPTX = LS_FDI_PRFG_NEW-KDPTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Handling Dimension
    if LS_FDI_PRFG_OLD-S_HNDDIM     ne LS_FDI_PRFG_NEW-S_HNDDIM or
       LS_FDI_PRFG_OLD-FOVRR_HNDDIM ne LS_FDI_PRFG_NEW-FOVRR_HNDDIM.
      if LS_FDI_PRFG_NEW-FOVRR_HNDDIM ne ABAP_FALSE.
        ME->SET_HNDDIM( IS_HNDDIM = LS_FDI_PRFG_NEW-S_HNDDIM
                        IF_SETBY  = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_HNDDIM( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_COMPR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_COMPR ).
    RF_COMPR = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.


    if EF_ALLOWED is requested.
      EF_ALLOWED = cond #( when LINES( ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                                              IF_INUSE = ABAP_TRUE ) ) gt 1 then ABAP_TRUE
                                                                                            else ABAP_FALSE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_CSPLIT.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_CSPLIT>  type ZVCXI_PXSS_S_CSPLIT.

***--------------------------------------------------------------------------------------
*** Get all Finished Good Provider via Interface
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
***   Including self and sorted the list by Tree Position
      append ME->R_GATE to LT_GATE.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

***   Add an Cost Split entry for each Finished Good
      loop at LT_GATE into LR_GATE.
        append initial line to RT_CSPLIT assigning <S_CSPLIT>.
        move SY-TABIX to <S_CSPLIT>-ICSPL.
        shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
        if LR_GATE eq ME->R_GATE.    " Own Gate carries 100%
          <S_CSPLIT>-S_DCSPL-DCSPL     = 100.
          <S_CSPLIT>-S_DCSPL-DCSPL_UOM = '%'.
          <S_CSPLIT>-COMPR             = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( ).
        else.
          <S_CSPLIT>-S_DCSPL-DCSPL     = 0.
          <S_CSPLIT>-S_DCSPL-DCSPL_UOM = '%'.
        endif.
      endloop.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** No calculation available
    if ME->GET_PRVDR_PRDTL( ) is not bound.
      EF_FOVRR = ABAP_UNDEFINED.
    endif.

*** Don't calculate in case of actual Material
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
      EF_FOVRR = ABAP_UNDEFINED.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_KDMAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDMAT ).
    move LS_PARAM-STRNG to RF_KDMAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_KDPTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDPTX ).
    move LS_PARAM-STRNG to RF_KDPTX.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    if ME->IS_DUMMY( ) ne ABAP_FALSE.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_MAKTX ).
      move LS_PARAM-STRNG to RF_MAKTX.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
***   Use Standard Material Description
      ME->ZIF_VCXI_PXSS_FG~GET_MATNR( importing EF_MAKTX = RF_MAKTX ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_MATNR.

    data: LS_LEOKY type  /VCXI/VKSR_S_LEOKY,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    RF_MATNR = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.

    check RF_MATNR is not initial.

***----------------------------------------------------------------------------
    if EF_MAKTX is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = RF_MATNR
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.

      if SY-SUBRC ne 0.
        clear EF_MAKTX.
      else.
        EF_MAKTX = LS_MAKT-MAKTX.
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_PRODH ).
    move LS_PARAM-ATWRT to RF_PRODH.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_PRVDR_AREA_WGT.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


    clear: RR_PR_AREA_WGT,
           ER_GATE.

***--------------------------------------------------------------------------------------
*** Get Area & Weight provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_AREA_WGT=>C_IPRVT_PX_AREA_WGT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Area & Weight Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_AREA_WGT.
          check RR_PR_AREA_WGT is bound.
          move LR_GATE to ER_GATE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_AREA_WGT, ER_GATE.
      endtry.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_QFACT.

    RF_QFACT = 1 * ME->ZIF_VCXI_PXSS_FG~GET_COMPR( ).

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_COMPR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_COMPR ).

    move IF_COMPR           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_COMPR_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_KDMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDMAT ).

    move IF_KDMAT to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_KDMAT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_KDPTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDPTX ).

    move IF_KDPTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_KDPTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_MATNR.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_MATNR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_MATNR_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_PRODH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_PRODH ).

    move IF_PRODH to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
