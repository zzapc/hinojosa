
class ZCL_VCXI_PFSS_UI_AREA_WGT_UCB definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_AREA_WGT_UCB_VIS type ZVCXI_PFSS_S_AREA_WGT_UCB_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_AREA_WGT_UCB type ref to ZCL_VCXI_PFSS_PR_AREA_WGT_UCB .
  data F_CURSOR type SCRFNAME .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSS_UI_AREA_WGT_UCB definition
class ZCL_VCXI_PFSS_UI_AREA_WGT_UCB implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PFSS_UI_AWGT_UCB_BIND'
    exporting
      IR_UI_AREA_WGT_UCB = ME
    importing
      ES_DYNP            = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_AREA_WGT_UCB.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE .
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_AREA_WGT_UCB.

endmethod.
method INIT_VIS.

  data:  LS_WDRGO    type ZVCXI_P0SS_S_WDRGO,
         LS_WDRGP    type ZVCXI_P0SS_S_WDRGP,
         LS_WDRNO    type ZVCXI_P0SS_S_WDRNO,
         LS_WDRNP    type ZVCXI_P0SS_S_WDRNP,
         LS_WDRSO    type ZVCXI_P0SS_S_WDRSO,
         LS_WDRSP    type ZVCXI_P0SS_S_WDRSP,
         LS_WWEGO    type ZVCXI_P0SS_S_WWEGO,
         LS_WWEGP    type ZVCXI_P0SS_S_WWEGP,
         LS_WWENO    type ZVCXI_P0SS_S_WWENO,
         LS_WWENP    type ZVCXI_P0SS_S_WWENP,
         LS_WWESO    type ZVCXI_P0SS_S_WWESO,
         LS_WWESP    type ZVCXI_P0SS_S_WWESP,
         LS_ABLAG    type ZVCXI_P0SS_S_ABLAG,
         LS_ABLAN    type ZVCXI_P0SS_S_ABLAN,
         LS_ABLAS    type ZVCXI_P0SS_S_ABLAS,
         LS_AREAO    type ZVCXI_P0SS_S_AREAO.

  free: ME->S_AREA_WGT_UCB_VIS.

***--------------------------------------------------------------------------------------
*** Get Gross Dry Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WDRGO( )  to LS_WDRGO.
  move-corresponding LS_WDRGO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Gross Dry Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WDRGP( )  to LS_WDRGP.
  move-corresponding LS_WDRGP               to ME->S_AREA_WGT_UCB_VIS.

*** Get Net Dry Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WDRNO( )  to LS_WDRNO.
  move-corresponding LS_WDRNO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Net Dry Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WDRNP( )  to LS_WDRNP.
  move-corresponding LS_WDRNP               to ME->S_AREA_WGT_UCB_VIS.

*** Get Sold Dry Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WDRSO( )  to LS_WDRSO.
  move-corresponding LS_WDRSO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Sold Dry Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WDRSP( )  to LS_WDRSP.
  move-corresponding LS_WDRSP               to ME->S_AREA_WGT_UCB_VIS.

*** Get Gross Area
  move ME->R_PR_AREA_WGT_UCB->GET_ABLAG( )  to LS_ABLAG.
  move-corresponding LS_ABLAG               to ME->S_AREA_WGT_UCB_VIS.

*** Get Net Area
  move ME->R_PR_AREA_WGT_UCB->GET_ABLAN( )  to LS_ABLAN.
  move-corresponding LS_ABLAN               to ME->S_AREA_WGT_UCB_VIS.

*** Get Sold Area
  move ME->R_PR_AREA_WGT_UCB->GET_ABLAS( )  to LS_ABLAS.
  move-corresponding LS_ABLAS               to ME->S_AREA_WGT_UCB_VIS.

*** Get Area per Order
  move ME->R_PR_AREA_WGT_UCB->GET_AREAO( )  to LS_AREAO.
  move-corresponding LS_AREAO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Gross Wet Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WWEGO( )  to LS_WWEGO.
  move-corresponding LS_WWEGO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Gross Wet Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WWEGP( )  to LS_WWEGP.
  move-corresponding LS_WWEGP               to ME->S_AREA_WGT_UCB_VIS.

*** Get Net Wet Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WWENO( )  to LS_WWENO.
  move-corresponding LS_WWENO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Net Wet Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WWENP( )  to LS_WWENP.
  move-corresponding LS_WWENP               to ME->S_AREA_WGT_UCB_VIS.

*** Get Sold Wet Weight per Order
  move ME->R_PR_AREA_WGT_UCB->GET_WWESO( )  to LS_WWESO.
  move-corresponding LS_WWESO               to ME->S_AREA_WGT_UCB_VIS.

*** Get Sold Wet Weight per Piece
  move ME->R_PR_AREA_WGT_UCB->GET_WWESP( )  to LS_WWESP.
  move-corresponding LS_WWESP               to ME->S_AREA_WGT_UCB_VIS.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
