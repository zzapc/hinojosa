
class ZCL_VCXI_P0SR_BL_PSTEP_CHOP definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P0SR_ADJ_PCDIM .
  interfaces ZIF_VCXI_P0SR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .

  constants C_IPSTP_CHOP type /VCXI/VSMC_IPSTP value 'P0_PS_CHOP'. "#EC NOTEXT
  data F_SHTDI type ZVCXI_P0SS_SHTDI .

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_CHOP
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data S_PCDIM_IN type ZVCXI_P0SP_S_PCDIM .
  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .
  data S_PROLE type ZVCXI_P0S_S_PROLE .
  data S_PROWI type ZVCXI_P0S_S_PROWI .

  methods FILL_SPVRE_ADDON_CHOP
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PCDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PROD_SIZE
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_CHOP definition
class ZCL_VCXI_P0SR_BL_PSTEP_CHOP implementation.
method ADD_LIMITS_TO_RTE_PSTEP.

  data:          LF_LDUOM               type        /VCXI/VSMC_LDUOM,
                 LF_LDVAL               type        /VCXI/VSMR_LDVAL.
  data:          LI_LVVAL               type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE               type        /VCXI/CKX_TT_OBJECT.
  data:          LR_LTYPE               type ref to /VCXI/CL_VSMC_LTYPE,
                 LR_OBJECT              type ref to /VCXI/IF_CKX_OBJECT.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    clear: LF_LDVAL,
           LF_LDUOM,
           LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Sheet Length (Inbound)
      when 'P0_LT_DI_SHTLEN'.
        move ME->S_PCDIM_IN-PCLEN     to LF_LDVAL.
        move ME->S_PCDIM_IN-PCLEN_UOM to LF_LDUOM.

***   Sheet Width (Inbound)
      when 'P0_LT_DI_SHTWID'.
        move ME->S_PCDIM_IN-PCWID     to LF_LDVAL.
        move ME->S_PCDIM_IN-PCWID_UOM to LF_LDUOM.

***   Caliper
      when 'P0_LT_DI_CALIPER'.
        move ME->S_PCDIM_IN-PCHEI     to LF_LDVAL.
        move ME->S_PCDIM_IN-PCHEI_UOM to LF_LDUOM.


***   Box Length
      when 'P0_LT_DI_BOXLENGTH'.
        move ME->S_PROLE-PROLE     to LF_LDVAL.
        move ME->S_PROLE-PROLE_UOM to LF_LDUOM.

***   Box Width
      when 'P0_LT_DI_BOXWIDTH'.
        move ME->S_PROWI-PROWI     to LF_LDVAL.
        move ME->S_PROWI-PROWI_UOM to LF_LDUOM.

      when others.
        continue.
    endcase.


***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_CHOP type ref to ZCL_VCXI_P0SR_BL_PSTEP_CHOP.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_CHOP.

*** PC Dimensions
  if ME->S_PCDIM_IN  eq LR_BL_PSTEP_CHOP->S_PCDIM_IN  and
     ME->S_PCDIM_OUT eq LR_BL_PSTEP_CHOP->S_PCDIM_OUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Product Size
  if ME->S_PROLE eq LR_BL_PSTEP_CHOP->S_PROLE and
     ME->S_PROWI eq LR_BL_PSTEP_CHOP->S_PROWI.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
  move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
  ME->INIT_OUTSO( ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_CHOP type ref to ZCL_VCXI_P0SR_BL_PSTEP_CHOP.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_CHOP.

*** PC Dimensions
  move ME->S_PCDIM_IN    to LR_BL_PSTEP_CHOP->S_PCDIM_IN.
  move ME->S_PCDIM_OUT   to LR_BL_PSTEP_CHOP->S_PCDIM_OUT.

*** Product Size
  move ME->S_PROLE       to LR_BL_PSTEP_CHOP->S_PROLE.
  move ME->S_PROWI       to LR_BL_PSTEP_CHOP->S_PROWI.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN
              S_PCDIM_OUT  = ME->S_PCDIM_OUT

              S_PROLE      = ME->S_PROLE
              S_PROWI      = ME->S_PROWI.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'P0_AT_CHOP'.
      ME->FILL_SPVRE_ADDON_CHOP( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                           IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                 changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_CHOP.

  data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_CHOP=>C_PARID_PCTYP   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCTYP                        to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_CHOP=>C_PARID_PCLEN   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCLEN                        to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCLEN_UOM                    to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_CHOP=>C_PARID_PCWID   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCWID                        to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCWID_UOM                    to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Ups
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_CHOP=>C_PARID_PCUPS   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCUPS                        to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Don't overrule existing
  check CF_ID_GRP   is initial and
        CF_ID_ARBPL is initial.

***------------------------------------------------------------------
*** Standard
  move 'GRP_CONV' to CF_ID_GRP.
  move 'CONV'     to CF_ID_ARBPL.

*** If Outsourcing
  if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
    move 'GRP_CONV' to CF_ID_GRP.
    move 'OUTSO'    to CF_ID_ARBPL.
  endif.

endmethod.
method GET_SPVRE_ACTVY.

  data:  LS_PARAM        type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_ACTVY  type ref to /VCXI/CL_VKSR_SPVRE.

***----------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_CHOP'
                                      IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_ACTVY
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ARBPL.
  append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
  LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_CHOP=>C_PARID_PCTYP   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCTYP                        to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_CHOP=>C_PARID_PCLEN   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCLEN                        to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCLEN_UOM                    to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_CHOP=>C_PARID_PCWID   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCWID                        to LS_PARAM-ATFLV.
  move ME->S_PCDIM_OUT-PCWID_UOM                    to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Ups
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_CHOP=>C_PARID_PCUPS   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_PCDIM_OUT-PCUPS                        to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method INIT_BY_SPEC.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
  ME->INIT_BY_SPEC_PCDIM(     IT_PRVDR = IT_PRVDR ).
  ME->INIT_BY_SPEC_PROD_SIZE( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_PCDIM.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions
  if ( LR_SHTDIM->GET_SDIVI( ) eq 'L' and
       ME->F_SHTDI             eq 'A' ) or
     ( LR_SHTDIM->GET_SDIVI( ) eq 'W' and
       ME->F_SHTDI             eq 'B' ).
    ME->S_PCDIM_IN  = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFDIV ).
    ME->S_PCDIM_OUT = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSDIV ).
  else.
    ME->S_PCDIM_IN  = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSDIV ).
    ME->S_PCDIM_OUT = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NETWT ).
  endif.

*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCTYP = ME->S_PCDIM_OUT-PCTYP
                                                      EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  if ME->F_SHTDI is not initial.
    move ME->F_SHTDI                            to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
    move ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP.
  endif.

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move ME->S_PCDIM_IN-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

endmethod.
method INIT_BY_SPEC_PROD_SIZE.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC        type ref to ZCL_VCXI_P0SS_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
        if LR_PR_SPEC is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Product Length
  ME->S_PROLE = LR_PR_SPEC->GET_PROLE( ).

*** Product Width
  ME->S_PROWI = LR_PR_SPEC->GET_PROWI( ).

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN
              S_PCDIM_OUT  = ME->S_PCDIM_OUT

              S_PROLE      = ME->S_PROLE
              S_PROWI      = ME->S_PROWI

       result xml RF_XML.

endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_IN.
endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_OUT.

  field-symbols: <S_PCDIM> type ZVCXI_P0SP_S_PCDIM.

  loop at CT_PCDIM assigning <S_PCDIM>.
    move ME->S_PCDIM_OUT to <S_PCDIM>.
  endloop.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

*** Turn PC Dimension IN
  ME->S_PCDIM_IN  = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_IN
                                    IF_PCDIR = IF_PCDIR ).

*** Turn PC Dimension OUT
  ME->S_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_OUT
                                    IF_PCDIR = IF_PCDIR ).

endmethod.
