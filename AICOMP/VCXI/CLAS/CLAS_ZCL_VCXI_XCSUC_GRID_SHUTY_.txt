
class ZCL_VCXI_XCSUC_GRID_SHUTY definition
  public
  inheriting from ZCL_VCXI_XCSUC_GRID
  create public .

public section.
  type-pools ABAP .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_ADD_PRIO type UI_FUNC value 'ADD_PRIO'. "#EC NOTEXT
  constants C_FUNC_COPY type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_SHMAP type ref to ZCL_VCXI_XCSUC_SHMAP .

  methods COPY_COMPL_SHUTY_MAP
    importing
      !IT_SHUTY_MAP type ZVCXI_XCSUC_TT_SHUTY_MAP
      !IT_DSRC_MAP type ZVCXI_XCSUC_TT_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods ADD_SHUTY_MAP
    raising
      /VCXI/CX_CKX .
  methods COPY_DSRC_MAP
    importing
      !IT_DSRC_MAP type ZVCXI_XCSUC_TT_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  methods DELETE_DSRC_MAP
    importing
      !IT_DSRC_MAP type ZVCXI_XCSUC_TT_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUTY_MAP
    importing
      !IT_SHUTY_MAP type ZVCXI_XCSUC_TT_SHUTY_MAP
    raising
      /VCXI/CX_CKX .
  methods CHECK_SELECTION
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSUC_GRID_SHUTY definition
class ZCL_VCXI_XCSUC_GRID_SHUTY implementation.
method ADD_SHUTY_MAP.

  data: LS_SHUTY_MAP          type                   ZVCXI_XCSUC_S_SHUTY_MAP,
        LS_DSRC_MAP           type                   ZVCXI_XCSUC_S_DSRC_MAP.

*** Add Shipping Unit Type Mapping
  LS_DSRC_MAP-GDSRC = ME->R_SHMAP->ADD_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).
  ME->R_SHMAP->ADD_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).

endmethod.
method CHECK_SELECTION.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( exporting IF_TABNAME        = 'ZVCXI_XCSUC_S_SHUTY_MAP_GRID'
                                IF_CONTAINER_NAME = '0100CC_SHUTY_GRID'
                                IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_SHMAP.
    catch CX_SY_MOVE_CAST_ERROR.
***   Shipping Information Mapping Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSUC'
          IF_MSGNO = '002' ).
  endtry.

  check ME->R_SHMAP is bound.
  ME->F_LOCKED = ME->R_SHMAP->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method COPY_COMPL_SHUTY_MAP.

  data: LF_GDSRC_OLD type ZVCXI_XCSU_GDSRC,
        LF_GDSRC_NEW type ZVCXI_XCSU_GDSRC.
  data: LS_SHUTY_MAP type ZVCXI_XCSUC_S_SHUTY_MAP,
        LS_DSRC_MAP  type ZVCXI_XCSUC_S_DSRC_MAP.
  data: LT_SHUTY_MAP type ZVCXI_XCSUC_TT_SHUTY_MAP,
        LT_DSRC_MAP  type ZVCXI_XCSUC_TT_DSRC_MAP.


  move IT_SHUTY_MAP to LT_SHUTY_MAP.
  delete adjacent duplicates from LT_SHUTY_MAP comparing GSUTD.

  move IT_DSRC_MAP to LT_DSRC_MAP.
  delete adjacent duplicates from LT_DSRC_MAP comparing GDSRC DPRIO.

  loop at LT_SHUTY_MAP into LS_SHUTY_MAP.
    move LS_SHUTY_MAP-GDSRC to LF_GDSRC_OLD.
    clear: LS_SHUTY_MAP-GSUTD, LS_SHUTY_MAP-GDSRC.
    LF_GDSRC_NEW = ME->R_SHMAP->ADD_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).

*** Copy all Data Source Mapping for defined GUID
    loop at LT_DSRC_MAP into LS_DSRC_MAP
                       where GDSRC eq LF_GDSRC_OLD.
***   Remove Prio if no longer needed
      if reduce I( init COUNT = 0 for WA in LT_DSRC_MAP where ( GDSRC eq LF_GDSRC_OLD ) next COUNT = COUNT + 1 ) eq 1.
        clear LS_DSRC_MAP-DPRIO.
      endif.

***   Adjust GUID
      move LF_GDSRC_NEW to LS_DSRC_MAP-GDSRC.

***   Add new Data Source Mapping
      ME->R_SHMAP->ADD_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
    endloop.
  endloop.

endmethod.
method COPY_DSRC_MAP.

  data: LS_DSRC_MAP     type ZVCXI_XCSUC_S_DSRC_MAP,
        LS_DSRC_MAP_TMP type ZVCXI_XCSUC_S_DSRC_MAP.
  data: LT_DSRC_MAP     type ZVCXI_XCSUC_TT_DSRC_MAP.

  loop at IT_DSRC_MAP into LS_DSRC_MAP.
*** "Standard" Coopy -> add it with the next "highest" Priority
    move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
    delete LT_DSRC_MAP where GDSRC ne LS_DSRC_MAP-GDSRC.
    sort LT_DSRC_MAP by DPRIO descending.
    read table LT_DSRC_MAP into LS_DSRC_MAP_TMP index 1.
    LS_DSRC_MAP-DPRIO = LS_DSRC_MAP_TMP-DPRIO + 1.
    ME->R_SHMAP->ADD_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
  endloop.

endmethod.
method DELETE_DSRC_MAP.

  data: LS_DSRC_MAP type ZVCXI_XCSUC_S_DSRC_MAP.


***----------------------------------------------------------------------------
  loop at IT_DSRC_MAP into LS_DSRC_MAP.
*** Delete by GUID and Prio
    ME->R_SHMAP->DELETE_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
  endloop.

***----------------------------------------------------------------------------
*** Remove Prio of remaining entries if no longer needed
  loop at IT_DSRC_MAP into LS_DSRC_MAP.
    if reduce I( init COUNT = 0 for WA in ME->R_SHMAP->T_DSRC_MAP where ( GDSRC eq LS_DSRC_MAP-GDSRC ) next COUNT = COUNT + 1 ) eq 1.
***   To change Priority delete old entry and add new one
      LS_DSRC_MAP = ME->R_SHMAP->T_DSRC_MAP[ GDSRC = LS_DSRC_MAP-GDSRC ].
      ME->R_SHMAP->DELETE_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
      clear LS_DSRC_MAP-DPRIO.
      ME->R_SHMAP->ADD_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
    endif.
  endloop.

endmethod.
method DELETE_SHUTY_MAP.

  data: LS_SHUTY_MAP type ZVCXI_XCSUC_S_SHUTY_MAP.

  loop at IT_SHUTY_MAP into LS_SHUTY_MAP.
*** Check if there is no more Linked Data Source
    read table ME->R_SHMAP->T_DSRC_MAP with key GDSRC = LS_SHUTY_MAP-GDSRC
                                       transporting no fields.
    check SY-SUBRC ne 0.
*** Delete by GUID
    ME->R_SHMAP->DELETE_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).
  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
*** Set GUID's and Log Data to only technical Fields
      when 'GSUTD' or 'GDSRC' or 'IELSH' or 'CREBY'
        or 'CREAT' or 'CHABY' or 'CHAAT'.
        move ABAP_TRUE to <S_FCAT>-TECH.
      when 'SHUTY' or 'SHUNT' or 'DPRIO'
        or 'FCONV' or 'APDAF' or 'APDAF_UOM' or 'SETID' or 'MAPID'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.

      when 'IELSH_DESCR'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
          move ABAP_TRUE to <S_FCAT>-F4AVAILABL.
        endif.
        move 'Element'(C10) to <S_FCAT>-COLTEXT.
        move 'Element'(C10) to <S_FCAT>-SCRTEXT_L.
        move 'Element'(C10) to <S_FCAT>-SCRTEXT_M.
        move 'Element'(C10) to <S_FCAT>-SCRTEXT_S.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data: LF_NO_EDIT type          ABAP_BOOL,
        LF_TABIX   type          I,
        LF_LINES   type          I.
  data: LS_SHUTY_MAP_GRID type          ZVCXI_XCSUC_S_SHUTY_MAP_GRID,
        LS_SHUTY_MAP      type          ZVCXI_XCSUC_S_SHUTY_MAP,
        LS_DSRC_MAP       type          ZVCXI_XCSUC_S_DSRC_MAP,
        LS_IELSH          type          ZVCXI_XCSUC_S_IELSH,
        LS_LOG            type          /VCXI/CKX_S_LOG,
        LS_LOG_EXT        type          /VCXI/CKX_S_LOG_EXT.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Shipping Unit Type Mappings
  loop at ME->R_SHMAP->T_SHUTY_MAP into LS_SHUTY_MAP.
    clear: LS_SHUTY_MAP_GRID, LF_NO_EDIT, LF_TABIX.

*** Count Entries with same Data Source GUID
    LF_LINES = reduce I( init F_LINES = 0
                         for S_DSRC_MAP in ME->R_SHMAP->T_DSRC_MAP where ( GDSRC = LS_SHUTY_MAP-GDSRC )
                         next F_LINES = F_LINES + 1 ).

    move-corresponding LS_SHUTY_MAP to LS_SHUTY_MAP_GRID.
    loop at ME->R_SHMAP->T_DSRC_MAP into LS_DSRC_MAP
                                    where GDSRC = LS_SHUTY_MAP-GDSRC.
      add 1 to LF_TABIX.
      if LF_TABIX ge 2.
        move ABAP_TRUE to LF_NO_EDIT.
      endif.

      move-corresponding LS_DSRC_MAP to LS_SHUTY_MAP_GRID.

***   Get Element ID Description
      if LS_SHUTY_MAP_GRID-IELSH is not initial.
        read table ME->R_SHMAP->T_IELSH into LS_IELSH with key IELSH = LS_SHUTY_MAP_GRID-IELSH.
        move LS_IELSH-DESCR to LS_SHUTY_MAP_GRID-IELSH_DESCR.
      endif.


***   Get Log Data
      move-corresponding LS_SHUTY_MAP_GRID to LS_LOG.
      LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
      move-corresponding LS_LOG_EXT    to LS_SHUTY_MAP_GRID.

      clear: LS_SHUTY_MAP_GRID-T_STYL.

***   change style if needed
      if LF_NO_EDIT eq ABAP_TRUE.
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHUTY'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = LS_SHUTY_MAP_GRID-T_STYL ).
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHUNT'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = LS_SHUTY_MAP_GRID-T_STYL ).
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IELSH_DESCR'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = LS_SHUTY_MAP_GRID-T_STYL ).
      endif.

***   No Unit Required -> Not Editable
      read table ME->R_SHMAP->T_IELSH with key IELSH = LS_SHUTY_MAP-IELSH
                                               FREQU = ABAP_TRUE
                                      transporting no fields.
      if SY-SUBRC ne 0.
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APDAF_UOM'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = LS_SHUTY_MAP_GRID-T_STYL ).
      endif.

***   Single Entry -> Prio not editable
      if LF_LINES le 1.
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DPRIO'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = LS_SHUTY_MAP_GRID-T_STYL ).

      endif.

***--------------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_SHUTY_MAP_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED.

  data:          LF_INDEX                type          I.
  data:          LS_DSRC_MAP             type          ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SHUTY_MAP_GRID       type          ZVCXI_XCSUC_S_SHUTY_MAP_GRID,
                 LS_GOOD_CELLS           type          LVC_S_MODI.
  data:          LR_CX_CKX               type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>                type standard table,
                 <S_DATA>                type          any.


  try.

      SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                            E_ONF4          = E_ONF4
                                            E_ONF4_BEFORE   = E_ONF4_BEFORE
                                            E_ONF4_AFTER    = E_ONF4_AFTER
                                            E_UCOMM         = E_UCOMM ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        LF_INDEX = SY-TABIX.

        move-corresponding <S_DATA> to LS_SHUTY_MAP_GRID.
        move-corresponding LS_SHUTY_MAP_GRID to LS_DSRC_MAP.

***     Do Standard User-Command
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID = LF_INDEX transporting no fields.
        check SY-SUBRC eq 0.

        loop at ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS
        where ROW_ID = LF_INDEX.
***       If Priority was changed -> Delete old Entry and add new one
          if LS_GOOD_CELLS-FIELDNAME eq 'DPRIO'.
            ME->R_SHMAP->DELETE_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
            move LS_GOOD_CELLS-VALUE to LS_DSRC_MAP-DPRIO.
            ME->R_SHMAP->ADD_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).
          endif.
        endloop.

      endloop.

      ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_SHUTY_MAP         type          ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_SHUTY_MAP_TMP     type          ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_DSRC_MAP          type          ZVCXI_XCSUC_S_DSRC_MAP.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_SHUTY_MAP.
        if LS_SHUTY_MAP ne LS_SHUTY_MAP_TMP.
          ME->R_SHMAP->UPDATE_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).
        endif.

        move-corresponding <S_DATA> to LS_DSRC_MAP.
        ME->R_SHMAP->UPDATE_DSRC_MAP( IS_DSRC_MAP = LS_DSRC_MAP ).

        move LS_SHUTY_MAP to LS_SHUTY_MAP_TMP.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_ONF4.

  data:          LS_GRID        type                   ZVCXI_XCSUC_S_SHUTY_MAP_GRID,
                 LS_SHUTY_MAP   type                   ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_IELSH       type                   ZVCXI_XCSUC_S_IELSH,
                 LS_IELSH_SHLP  type                   ZVCXI_XCSUC_S_IELSH_SHLP,
                 LS_RETURN      type                   DDSHRETVAL.
  data:          LT_IELSH_SHLP  type                   ZVCXI_XCSUC_TT_IELSH_SHLP,
                 LT_RETURN      type standard table of DDSHRETVAL.
  data:          LR_CX_CKX      type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>       type standard          table,
                 <S_DATA>       type                   any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        move-corresponding <S_DATA> to LS_GRID.

***     Handle F4 call
        case E_FIELDNAME.
          when 'SHUNT'.
            move-corresponding LS_GRID to LS_SHUTY_MAP.
            check LS_SHUTY_MAP-SHUTY is not initial.
            LS_SHUTY_MAP-SHUNT = ZCL_VCXI_XCSU_SHLP_SHUNT=>CALL_SHLP( IF_SHUTY = LS_SHUTY_MAP-SHUTY ).
            ME->R_SHMAP->UPDATE_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).
            ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.

          when 'IELSH_DESCR'.
            move-corresponding LS_GRID to LS_SHUTY_MAP.
            loop at ME->R_SHMAP->T_IELSH into LS_IELSH where VALFO eq 'SU'.
              move-corresponding LS_IELSH to LS_IELSH_SHLP.
              append LS_IELSH_SHLP to LT_IELSH_SHLP.
            endloop.

            call function 'F4IF_INT_TABLE_VALUE_REQUEST'
              exporting
                RETFIELD        = 'IELSH'
                VALUE_ORG       = 'S'
              tables
                VALUE_TAB       = LT_IELSH_SHLP
                RETURN_TAB      = LT_RETURN
              exceptions
                PARAMETER_ERROR = 1
                NO_VALUES_FOUND = 2
                others          = 3.

            if SY-SUBRC eq 0.
              read table LT_RETURN index 1 into LS_RETURN.
              if SY-SUBRC eq 0.
                LS_SHUTY_MAP-IELSH = LS_RETURN-FIELDVAL.
                ME->R_SHMAP->UPDATE_SHUTY_MAP( IS_SHUTY_MAP = LS_SHUTY_MAP ).
              endif.
            endif.

            ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
        endcase.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->F_REFRESH_ALL_REQ = ABAP_TRUE.

endmethod.                    "HANDLE_ONF4
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_SHMAP->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add New Entry'(001)       to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Add New Entry'(004)       to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR          to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar elements Copy and Add Prio
      clear LS_TOOLBAR.
      move C_FUNC_COPY                to LS_TOOLBAR-FUNCTION.
      move 'Copy Mapping Entry'(002)  to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SYSTEM_COPY           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_ADD_PRIO            to LS_TOOLBAR-FUNCTION.
      move 'Add New Prio'(003)        to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_COPY_OBJECT           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type               LVC_S_CELL,
                 LS_ROW          type               LVC_S_ROW.
  data:          LT_CELL         type               LVC_T_CELL,
                 LT_ROW          type               LVC_T_ROW,
                 LT_SHUTY_MAP    type               ZVCXI_XCSUC_TT_SHUTY_MAP,
                 LT_DSRC_MAP     type               ZVCXI_XCSUC_TT_DSRC_MAP.
  data:          LR_CX_CKX       type ref to        /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard      table,
                 <S_SHUTY_MAP>   type               ZVCXI_XCSUC_S_SHUTY_MAP,
                 <S_DSRC_MAP>    type               ZVCXI_XCSUC_S_DSRC_MAP,
                 <S_DATA>        type               any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Shipping Unit Type Mapping's and Data Source Mapping
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_SHUTY_MAP assigning <S_SHUTY_MAP>.
        move-corresponding <S_DATA> to <S_SHUTY_MAP>.

        append initial line to LT_DSRC_MAP assigning <S_DSRC_MAP>.
        move-corresponding <S_DATA> to <S_DSRC_MAP>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_SHUTY_MAP assigning <S_SHUTY_MAP>.
        move-corresponding <S_DATA> to <S_SHUTY_MAP>.

        append initial line to LT_DSRC_MAP assigning <S_DSRC_MAP>.
        move-corresponding <S_DATA> to <S_DSRC_MAP>.
      endloop.

*** ---------------------------------------------------------------------------
*** handle UserCommand
      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Shipping Unit Type Mapping
          ME->ADD_SHUTY_MAP( ).

        when C_FUNC_DEL.
***     Delete Shipping Unit Type Mapping
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '003'.
          endif.

***       Delete Data Source Mappings
          ME->DELETE_DSRC_MAP( IT_DSRC_MAP = LT_DSRC_MAP ).

***       Delete Shipping Unit Type Mapping's
          ME->DELETE_SHUTY_MAP( IT_SHUTY_MAP = LT_SHUTY_MAP ).

        when C_FUNC_COPY.
***     Copy Complete Shipping Unit Type Mapping
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Copy.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '005'.
          endif.

          ME->COPY_COMPL_SHUTY_MAP( IT_SHUTY_MAP = LT_SHUTY_MAP
                                    IT_DSRC_MAP  = LT_DSRC_MAP ).


        when C_FUNC_ADD_PRIO.
***     Copy to new Priority Shipping Unit Type Mapping
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Copy.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '005'.
          endif.

***       Add new Priority
          ME->COPY_DSRC_MAP( IT_DSRC_MAP = LT_DSRC_MAP ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.
      ME->F_REFRESH_ALL_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_SHMAP->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for F4Help, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_ONF4         for ME->R_GRID.

endmethod.
