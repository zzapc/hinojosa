
class ZCL_VCXI_XCSUC_DFLT definition
  public
  create private .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_ACTVT_CREATE type ACTIV_AUTH value '01' ##NO_TEXT.
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06' ##NO_TEXT.
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03' ##NO_TEXT.
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02' ##NO_TEXT.
  constants C_CDOCL_DFLT type CDOBJECTCL value 'ZVCXI_XCSU_DFLT' ##NO_TEXT.
  constants C_CDOID_DFLT type CDOBJECTV value 'DFLT' ##NO_TEXT.
  constants C_FCODE_DFLT_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DFLT_COPY type UI_FUNC value 'COPY' ##NO_TEXT.
  constants C_FCODE_DFLT_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_DFLT_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_DFLT_REQ_TR type UI_FUNC value 'REQ_TR' ##NO_TEXT.
  constants C_FCODE_DFLT_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_FCODE_DFLT_SW_SYSOM type UI_FUNC value 'SW_SYSOM' ##NO_TEXT.
  constants C_TOOBJ_DFLT type /VCXI/CKX_TOOBJ value 'DFLT_SHIPU' ##NO_TEXT.
  data F_CCCORACTIV type CCCORACTIV .
  data F_CHANGED type ABAP_BOOL read-only .
  data F_DELETED type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  data F_TRANS_REQ type ABAP_BOOL .
  data S_DFLT type ZVCXI_XCSUC_S_DFLT read-only .
  class-data T_DFLT type ZVCXI_XCSUC_TT_DFLT read-only .
  data T_PMATY_DFLT type ZVCXI_XCSUC_TT_PMATY_DFLT read-only .
  data T_SHSCH_DFLT type ZVCXI_XCSUC_TT_SHSCH_DFLT read-only .
  data T_SHUNT_DFLT type ZVCXI_XCSUC_TT_SHUNT_DFLT read-only .
  data T_SHUNT_L_DFLT type ZVCXI_XCSUC_TT_SHUNT_L_DFLT read-only .
  data T_SHUNT_P_DFLT type ZVCXI_XCSUC_TT_SHUNT_P_DFLT read-only .
  data T_SHUTY_DFLT type ZVCXI_XCSUC_TT_SHUTY_DFLT read-only .
  data T_WERKS type T_WERKS .

  methods ADD_PMATY_DFLT
    importing
      !IS_PMATY_DFLT type ZVCXI_XCSUC_S_PMATY_DFLT
    raising
      /VCXI/CX_CKX .
  methods ADD_SHSCH_DFLT
    importing
      !IS_SHSCH_DFLT type ZVCXI_XCSUC_S_SHSCH_DFLT
    raising
      /VCXI/CX_CKX .
  methods ADD_SHUNT_DFLT
    importing
      !IS_SHUNT_DFLT type ZVCXI_XCSUC_S_SHUNT_DFLT
    returning
      value(RF_GLIDF) type ZVCXI_XCSU_GLIDF
    raising
      /VCXI/CX_CKX .
  methods ADD_SHUNT_L_DFLT
    importing
      !IS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT
    raising
      /VCXI/CX_CKX .
  methods ADD_SHUNT_P_DFLT
    importing
      !IS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT
    raising
      /VCXI/CX_CKX .
  methods ADD_SHUTY_DFLT
    importing
      !IS_SHUTY_DFLT type ZVCXI_XCSUC_S_SHUTY_DFLT
    raising
      /VCXI/CX_CKX .
  methods ASSIGN_TRANSPORT
    importing
      !IF_KORRNR type TRKORR
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods COPY
    importing
      !IF_GDFLT type ZVCXI_XCSU_GDFLT
    returning
      value(RR_DFLT) type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_VKORG type VKORG optional
      !IF_VTWEG type VTWEG optional
      !IF_SPART type SPART optional
      !IF_WERKS type WERKS_D optional
      !IF_KUNNR type KUNNR optional
    returning
      value(RR_DFLT) type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_PMATY_DFLT
    importing
      !IS_PMATY_DFLT type ZVCXI_XCSUC_S_PMATY_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHSCH_DFLT
    importing
      !IS_SHSCH_DFLT type ZVCXI_XCSUC_S_SHSCH_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUNT_DFLT
    importing
      !IS_SHUNT_DFLT type ZVCXI_XCSUC_S_SHUNT_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUNT_L_DFLT
    importing
      !IS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUNT_P_DFLT
    importing
      !IS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUTY_DFLT
    importing
      !IS_SHUTY_DFLT type ZVCXI_XCSUC_S_SHUTY_DFLT
    raising
      /VCXI/CX_CKX .
  methods DO_SAVE
    importing
      !IF_KORRNR type TRKORR optional
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH_FOR_CMPRK
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_CNTXT type ZVCXI_XCS_CNTXT
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods SET_DFLT
    importing
      !IS_DFLT type ZVCXI_XCSUC_S_DFLT
    raising
      /VCXI/CX_CKX .
  methods SET_GDFLT
    importing
      !IF_GDFLT type ZVCXI_XCSU_GDFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_PMATY_DFLT
    importing
      !IS_PMATY_DFLT type ZVCXI_XCSUC_S_PMATY_DFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHSCH_DFLT
    importing
      !IS_SHSCH_DFLT type ZVCXI_XCSUC_S_SHSCH_DFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHUNT_DFLT
    importing
      !IS_SHUNT_DFLT type ZVCXI_XCSUC_S_SHUNT_DFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHUNT_L_DFLT
    importing
      !IS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHUNT_P_DFLT
    importing
      !IS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHUTY_DFLT
    importing
      !IS_SHUTY_DFLT type ZVCXI_XCSUC_S_SHUTY_DFLT
    raising
      /VCXI/CX_CKX .
protected section.

  class-data T_SYSOM type /VCXI/VKSC_TT_SYSOM .
  data F_KORRNR type TRKORR .
  data F_WRITE_TR type ABAP_BOOL .

  methods ADD_VALID_SHUNT_L_DFLT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_GLIDF type ZVCXI_XCSU_GLIDF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_COPY
    returning
      value(RR_DFLT) type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REQ_TR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SW_SYSOM
    returning
      value(RR_DFLT) type ref to ZCL_VCXI_XCSUC_DFLT
    raising
      /VCXI/CX_CKX .
  methods LOAD_SHUNT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type /VCXI/CKX_LOCKED .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods CONSTRUCTOR
    importing
      !IF_GDFLT type ZVCXI_XCSU_GDFLT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCSUC_DFLT .
  methods INIT_LOG
    raising
      /VCXI/CX_CKX .
  methods INIT_SYSOM
    raising
      /VCXI/CX_CKX .
  methods INIT_VALID_PLANTS
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods SET_LOG
    importing
      !IS_LOG type /VCXI/CKX_S_LOG
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSUC_DFLT definition
class ZCL_VCXI_XCSUC_DFLT implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

  data:  LF_DISABLED type CUA_ACTIVE.

*** Create Menu Reference
  create object RR_MENU.

*** Create Packaging Code
  LF_DISABLED = ABAP_FALSE.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_ADD
                         TEXT     = 'Create Default Entry'(001)
                         DISABLED = LF_DISABLED ).

*** Delete Packaging Code
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    LF_DISABLED = ABAP_FALSE.
  else.
    LF_DISABLED = ABAP_TRUE.
  endif.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_DELETE
                         TEXT     = 'Delete Default Entry'(002)
                         DISABLED = LF_DISABLED ).

*** Copy Packaging Code
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    LF_DISABLED = ABAP_FALSE.
  else.
    LF_DISABLED = ABAP_TRUE.
  endif.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCSUC_CPACK=>C_FCODE_CPACK_COPY
                         TEXT     = 'Copy Default Entry'(003)
                         DISABLED = LF_DISABLED ).

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_REQ_TR.
      ME->HANDLE_REQ_TR( ).
    when ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_SW_SYSOM.
      ME->HANDLE_SW_SYSOM( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move ZCL_VCXI_XCSUC_DFLT=>C_CDOCL_DFLT to EF_CDOCL.
  move ZCL_VCXI_XCSUC_DFLT=>C_CDOID_DFLT to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Shipping & Unitization Defaulting is not locked. No changes possible.
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = 'ZVCXI_XCSUC'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK .

*** -------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCSUC_DFLT=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCSUC_DFLT=>C_ACTVT_EDIT ).

***--------------------------------------------------------------------------------------
*** Set DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move ABAP_TRUE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK .

*** Delete DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

  move ABAP_FALSE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED .

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

*** No Descriptions

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

*** No Descriptions

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->S_DFLT-GDFLT to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  concatenate ME->S_DFLT-VKORG
              ME->S_DFLT-VTWEG
              ME->S_DFLT-SPART
              ME->S_DFLT-WERKS
              ME->S_DFLT-KUNNR into RF_ID separated by '/'.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GDFLT    type        ZVCXI_XCSU_GDFLT.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_DFLT     type ref to ZCL_VCXI_XCSUC_DFLT.


*** Check Instances
  read table ZCL_VCXI_XCSUC_DFLT=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GDFLT.

*** Get new Instance
    try.
        create object LR_DFLT
          exporting
            IF_GDFLT = LF_GDFLT.
      catch CX_SY_CREATE_OBJECT_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    move LR_DFLT ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move-corresponding ME->S_DFLT to RS_LOG.

endmethod.
method ADD_PMATY_DFLT.

  field-symbols: <S_PMATY_DFLT> type ZVCXI_XCSUC_S_PMATY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_DFLT assigning <S_PMATY_DFLT> with key PMATY = IS_PMATY_DFLT-PMATY.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PMATY_DFLT assigning <S_PMATY_DFLT>.
    move-corresponding IS_PMATY_DFLT to <S_PMATY_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method ADD_SHSCH_DFLT.

    field-symbols: <S_SHSCH_DFLT> type ZVCXI_XCSUC_S_SHSCH_DFLT.


*** Make sure that obejct is locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check Combination
    read table ME->T_SHSCH_DFLT assigning <S_SHSCH_DFLT> with key CMATN = IS_SHSCH_DFLT-CMATN
                                                                  PRFID = IS_SHSCH_DFLT-PRFID
                                                                  CNTXT = IS_SHSCH_DFLT-CNTXT.
    if SY-SUBRC ne 0.
      append initial line to ME->T_SHSCH_DFLT assigning <S_SHSCH_DFLT>.
      move-corresponding IS_SHSCH_DFLT to <S_SHSCH_DFLT>.
    else.
***   Shipping Scheme combination already exists.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSUC'
                                            IF_MSGNO = '215' ).
    endif.

    sort ME->T_SHSCH_DFLT by CMATN PRFID CNTXT.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method ADD_SHUNT_DFLT.

    field-symbols: <S_SHUNT_DFLT> type ZVCXI_XCSUC_S_SHUNT_DFLT.

*** Make sure that obejct is locked
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

    read table ME->T_SHUNT_DFLT assigning <S_SHUNT_DFLT> with key SHUNT = IS_SHUNT_DFLT-SHUNT.


    if SY-SUBRC ne 0.
      append initial line to ME->T_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding IS_SHUNT_DFLT to <S_SHUNT_DFLT>.

***   Get Guid of Defaulting Entry
      call function 'GUID_CREATE'
        importing
          EV_GUID_22 = <S_SHUNT_DFLT>-GLIDF.

***   Add Valid Shipping Unit Limits (initial)
      ME->ADD_VALID_SHUNT_L_DFLT( IF_SHUNT = <S_SHUNT_DFLT>-SHUNT
                                  IF_GLIDF = <S_SHUNT_DFLT>-GLIDF ).

    endif.

*** Return GUID
    RF_GLIDF = <S_SHUNT_DFLT>-GLIDF.

***----------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method ADD_SHUNT_L_DFLT.

  field-symbols: <S_SHUNT_L_DFLT> type ZVCXI_XCSUC_S_SHUNT_L_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_L_DFLT assigning <S_SHUNT_L_DFLT> with key GLIDF = IS_SHUNT_L_DFLT-GLIDF
                                                                    LIMIT = IS_SHUNT_L_DFLT-LIMIT
                                                                    DIMEN = IS_SHUNT_L_DFLT-DIMEN.

  check SY-SUBRC ne 0.
  append initial line to ME->T_SHUNT_L_DFLT assigning <S_SHUNT_L_DFLT>.
  move-corresponding IS_SHUNT_L_DFLT to <S_SHUNT_L_DFLT>.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_SHUNT_P_DFLT.

  field-symbols: <S_SHUNT_P_DFLT> type ZVCXI_XCSUC_S_SHUNT_P_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_P_DFLT assigning <S_SHUNT_P_DFLT> with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                                                    PMATY = IS_SHUNT_P_DFLT-PMATY.

  if SY-SUBRC ne 0.
    append initial line to ME->T_SHUNT_P_DFLT assigning <S_SHUNT_P_DFLT>.
    move-corresponding IS_SHUNT_P_DFLT to <S_SHUNT_P_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_SHUTY_DFLT.

  field-symbols: <S_SHUTY_DFLT> type ZVCXI_XCSUC_S_SHUTY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_DFLT assigning <S_SHUTY_DFLT> with key SHUTY = IS_SHUTY_DFLT-SHUTY.

  if SY-SUBRC ne 0.
    append initial line to ME->T_SHUTY_DFLT assigning <S_SHUTY_DFLT>.
    move-corresponding IS_SHUTY_DFLT to <S_SHUTY_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_VALID_SHUNT_L_DFLT.

  data: LR_CUST_SHIPU    type ref to            ZCL_VCXI_XCSU_CUST_SHIPU.
  data: LT_LIMIT         type                   ZVCXI_XCSU_TT_SHUTY_LIMIT.
  data: LS_LIMIT         type                   ZVCXI_XCS_TC172,
        LS_SHUNT_L_DFLT  type                   ZVCXI_XCSUC_S_SHUNT_L_DFLT.

  LR_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ).

  check LR_CUST_SHIPU is bound.

  LT_LIMIT = LR_CUST_SHIPU->GET_LIMIT_FOR_SHUNT( IF_SHUNT = IF_SHUNT ).

  loop at LT_LIMIT into LS_LIMIT.
    clear: LS_SHUNT_L_DFLT.
    move-corresponding LS_LIMIT to LS_SHUNT_L_DFLT.
    case ME->S_DFLT-SYSOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LS_LIMIT-UOMME         to LS_SHUNT_L_DFLT-DIMVA_UOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        move LS_LIMIT-UOMIM         to LS_SHUNT_L_DFLT-DIMVA_UOM.
    endcase.
    move IF_GLIDF               to LS_SHUNT_L_DFLT-GLIDF.

    ME->ADD_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).

  endloop.

endmethod.
method ASSIGN_TRANSPORT.

  move IF_KORRNR to ME->F_KORRNR.

endmethod.
method CHECK_AUTH.

  data:  LF_MSGV1  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Check Authority for Shipping & Unitization Default Customizing
    authority-check object 'Z_XC_SHP_D'
             id 'ACTVT'     field IF_ACTVT.

***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

*** No authorization to & Shipping & Unitization Default.
    raise exception type /VCXI/CX_CKX
       exporting
         F_MSGTY = 'E'
         F_MSGID = 'ZVCXI_XCSUC'
         F_MSGNO = '250'
         F_MSGV1 = LF_MSGV1.
  endif.

endmethod.
method CLASS_CONSTRUCTOR.

*** Load all Shipping & Unitizsation Default Entries
  select *
         into corresponding fields of table T_DFLT
         from ZVCXI_XCS_TD400.

*** Load System of measure
  select *
         into corresponding fields of table T_SYSOM
         from ZVCXI_XCS_TC401.

endmethod.
method CONSTRUCTOR.

  field-symbols:  <S_INSTANCE>       type         /VCXI/CKX_S_OBJECT_INSTANCE.

***------------------------------------------------------------------------------------------------
*** Set Import Parameter to Attributes
  move IF_GDFLT to ME->S_DFLT-GDFLT.

***------------------------------------------------------------------------------------------------
*** Load DB
  ME->LOAD_FROM_DB( ).

***------------------------------------------------------------------------------------------------
*** Define Type of Object
  move C_TOOBJ_DFLT to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
  append initial line to ZCL_VCXI_XCSUC_DFLT=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
  move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***------------------------------------------------------------------------------------------------
  set handler ME->HANDLE_CHANGED for ME.

*** Get System/Client Parameters
  call function 'TR_SYS_PARAMS'
    importing
      SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
    exceptions
      NO_SYSTEMNAME      = 1
      NO_SYSTEMTYPE      = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method COPY.

*** ------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCSUC_DFLT=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCSUC_DFLT=>C_ACTVT_CREATE ).

*** Do Copy
  RR_DFLT = ME->HANDLE_COPY( ).

endmethod.
method CREATE.

  data:  LS_DFLT                      type        ZVCXI_XCSUC_S_DFLT.
  data:  LF_GDFLT                     type        ZVCXI_XCSU_GDFLT.
  data:  LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.

*** ------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCSUC_DFLT=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCSUC_DFLT=>C_ACTVT_CREATE ).

*** Get Guid of Defaulting Entry
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GDFLT.

*** Create Defaulting Entry
  try.
      create object RR_DFLT
        exporting
          IF_GDFLT = LF_GDFLT.
    catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
  endtry.

  move LF_GDFLT to LS_DFLT-GDFLT.
  move IF_VKORG to LS_DFLT-VKORG.
  move IF_VTWEG to LS_DFLT-VTWEG.
  move IF_SPART to LS_DFLT-SPART.
  move IF_WERKS to LS_DFLT-WERKS.
  move IF_KUNNR to LS_DFLT-KUNNR.

  RR_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  RR_DFLT->SET_DFLT( IS_DFLT = LS_DFLT ).
  RR_DFLT->INIT_LOG( ).
  RR_DFLT->INIT_SYSOM( ).
  RR_DFLT->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

endmethod.
method DELETE_PMATY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_DFLT with key PMATY = IS_PMATY_DFLT-PMATY
                            transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PMATY_DFLT where PMATY = IS_PMATY_DFLT-PMATY.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHSCH_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHSCH_DFLT with key CMATN = IS_SHSCH_DFLT-CMATN
                                       PRFID = IS_SHSCH_DFLT-PRFID
                                       CNTXT = IS_SHSCH_DFLT-CNTXT
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHSCH_DFLT where CMATN = IS_SHSCH_DFLT-CMATN
                             and  PRFID = IS_SHSCH_DFLT-PRFID
                             and  CNTXT = IS_SHSCH_DFLT-CNTXT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHUNT_DFLT.

  data: LS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT,
        LS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_DFLT with key SHUNT = IS_SHUNT_DFLT-SHUNT
                               transporting no fields.

  if SY-SUBRC eq 0.

***  delete also Corresponding Limits and Packaging Materials
    loop at ME->T_SHUNT_L_DFLT into LS_SHUNT_L_DFLT
    where GLIDF = IS_SHUNT_DFLT-GLIDF.
      ME->DELETE_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).
    endloop.

    loop at ME->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT
    where SHUNT = IS_SHUNT_DFLT-SHUNT.
      ME->DELETE_SHUNT_P_DFLT( IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT ).
    endloop.

    delete ME->T_SHUNT_DFLT where SHUNT = IS_SHUNT_DFLT-SHUNT.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHUNT_L_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_L_DFLT with key GLIDF = IS_SHUNT_L_DFLT-GLIDF
                                         LIMIT = IS_SHUNT_L_DFLT-LIMIT
                                         DIMEN = IS_SHUNT_L_DFLT-DIMEN
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHUNT_L_DFLT where GLIDF = IS_SHUNT_L_DFLT-GLIDF
                                and LIMIT = IS_SHUNT_L_DFLT-LIMIT
                                and DIMEN = IS_SHUNT_L_DFLT-DIMEN.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHUNT_P_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_P_DFLT with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                         PMATY = IS_SHUNT_P_DFLT-PMATY
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHUNT_P_DFLT where SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                and PMATY = IS_SHUNT_P_DFLT-PMATY.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHUTY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_DFLT with key SHUTY = IS_SHUTY_DFLT-SHUTY
                            transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHUTY_DFLT where SHUTY = IS_SHUTY_DFLT-SHUTY.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method DO_SAVE.

    data: LT_E071  type table of E071,
          LT_E071K type table of E071K.


    try.
***     Save only if changed or Transport is required
        check ME->F_TRANS_REQ eq ABAP_TRUE or
              ME->F_CHANGED   eq ABAP_TRUE.

        if ME->F_TRANS_REQ eq ABAP_TRUE.
          if IF_KORRNR is initial.
***         Specify a request
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'TK'
                                                  IF_MSGNO = '136' ).
          endif.

***       Check Transport
          call function 'TRINT_ORDER_CHOICE'
            exporting
              WI_SIMULATION          = 'X'
              WI_CATEGORY            = 'CUST'
              WI_ORDER               = IF_KORRNR
              WI_SUPPRESS_DIALOG     = 'X'
            tables
              WT_E071                = LT_E071
              WT_E071K               = LT_E071K
            exceptions
              NO_CORRECTION_SELECTED = 1
              DISPLAY_MODE           = 2
              OBJECT_APPEND_ERROR    = 3
              RECURSIVE_CALL         = 4
              WRONG_ORDER_TYPE       = 5
              others                 = 6.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

***       Open Transport
          call function 'ZVCXI_XCSUC_DB_OPEN_TRANSPORT'
            in update task
            exporting
              IF_TRKORR = IF_KORRNR.

***       Reset Transport Requested.
          ME->F_TRANS_REQ = ABAP_FALSE.
        endif.

***----------------------------------------------------------------------------
***     Do sort
        sort ME->T_PMATY_DFLT   by PMATY.
        sort ME->T_SHSCH_DFLT   by CMATN PRFID CNTXT SHSCH.
        sort ME->T_SHUNT_DFLT   by SHUNT.
        sort ME->T_SHUNT_L_DFLT by LIMIT DIMEN.
        sort ME->T_SHUNT_P_DFLT by SHUNT PMATY.
        sort ME->T_SHUTY_DFLT   by SHUTY.

***----------------------------------------------------------------------------
        if ME->F_DELETED eq ABAP_FALSE.
***       Save Defaulting Entry
          call function 'ZVCXI_XCSUC_DB_SAVE_DFLT'
            in update task
            exporting
              IS_DFLT     = ME->S_DFLT
              IT_TD410    = ME->T_SHSCH_DFLT
              IT_TD420    = ME->T_SHUTY_DFLT
              IT_TD430    = ME->T_SHUNT_DFLT
              IT_TD431    = ME->T_SHUNT_L_DFLT
              IT_TD432    = ME->T_SHUNT_P_DFLT
              IT_TD440    = ME->T_PMATY_DFLT
              IF_WRITE_TR = ME->F_WRITE_TR.
        else.
***       Delete Defaulting Entry
          call function 'ZVCXI_XCSUC_DB_DEL_DFLT'
            in update task
            exporting
              IF_GDFLT    = ME->S_DFLT-GDFLT
              IF_WRITE_TR = ME->F_WRITE_TR.
        endif.

***------------------------------------------------------------------------------------------------
***     Write Transport
        call function 'ZVCXI_XCSUC_DB_CLOSE_TRANSPORT'
          in update task.

***------------------------------------------------------------------------------------------------
***     All changes are handled
        move ABAP_FALSE to ME->F_CHANGED.
        commit work and wait.

***------------------------------------------------------------------------------------------------
***     Relock
        check ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        rollback work.
        raise exception LR_CX_CKX.
    endtry.

  endmethod.
  method GET_SHSCH_FOR_CMPRK.

    RF_SHSCH = value #( ME->T_SHSCH_DFLT[ CMATN = IS_CMPRK-CMATN
                                          PRFID = IS_CMPRK-PRFID
                                          CNTXT = IF_CNTXT ]-SHSCH
                        default value #( ME->T_SHSCH_DFLT[ CMATN = IS_CMPRK-CMATN
                                                           PRFID = IS_CMPRK-PRFID
                                                           CNTXT = SPACE ]-SHSCH optional ) ).

  endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

***----------------------------------------------------------------------------
***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

***----------------------------------------------------------------------------
***   Set Changed Info to Log
      move SY-UNAME     to ME->S_DFLT-CHABY.
      get time stamp field ME->S_DFLT-CHAAT.

***----------------------------------------------------------------------------
***   Transport
      if ME->F_CCCORACTIV eq '1'.
        move ABAP_TRUE to ME->F_WRITE_TR.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_COPY.

  data:  LF_GLIDF_OLD      type         ZVCXI_XCSU_GLIDF.
  data:  LS_SHSCH_DFLT     type         ZVCXI_XCSUC_S_SHSCH_DFLT,
         LS_SHUTY_DFLT     type         ZVCXI_XCSUC_S_SHUTY_DFLT,
         LS_SHUNT_DFLT     type         ZVCXI_XCSUC_S_SHUNT_DFLT,
         LS_SHUNT_DFLT_NEW type         ZVCXI_XCSUC_S_SHUNT_DFLT,
         LS_SHUNT_L_DFLT   type         ZVCXI_XCSUC_S_SHUNT_L_DFLT,
         LS_SHUNT_P_DFLT   type         ZVCXI_XCSUC_S_SHUNT_P_DFLT,
         LS_PMATY_DFLT     type         ZVCXI_XCSUC_S_PMATY_DFLT,
         LS_PMATY_COMBI    type         ZVCXI_XCSU_S_PMATY_COMBI.
  data:  LT_PMATY_COMBI    type         ZVCXI_XCSU_TT_PMATY_COMBI.
  data:  LR_CUST_SHIPU     type ref to  ZCL_VCXI_XCSU_CUST_SHIPU.

*** --------------------------------------------------------------------------------------------------
*** Get Customizing
  LR_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ).

*** --------------------------------------------------------------------------------------------------
*** Create new Default
  RR_DFLT = ZCL_VCXI_XCSUC_DFLT=>CREATE( ).

*** --------------------------------------------------------------------------------------------------
*** Set Shipping Scheme assignment
  loop at ME->T_SHSCH_DFLT into LS_SHSCH_DFLT.
    RR_DFLT->ADD_SHSCH_DFLT( IS_SHSCH_DFLT = LS_SHSCH_DFLT ).
  endloop.

*** --------------------------------------------------------------------------------------------------
*** Set Shipping Unit Type assignment
  loop at ME->T_SHUTY_DFLT into LS_SHUTY_DFLT.
    RR_DFLT->ADD_SHUTY_DFLT( IS_SHUTY_DFLT = LS_SHUTY_DFLT ).
  endloop.

*** --------------------------------------------------------------------------------------------------
*** Set Shipping Unit assignment
  loop at ME->T_SHUNT_DFLT into LS_SHUNT_DFLT.
    move LS_SHUNT_DFLT-GLIDF to LF_GLIDF_OLD.
    RR_DFLT->ADD_SHUNT_DFLT( IS_SHUNT_DFLT = LS_SHUNT_DFLT ).

    read table RR_DFLT->T_SHUNT_DFLT into LS_SHUNT_DFLT_NEW with key SHUNT = LS_SHUNT_DFLT-SHUNT.

    check SY-SUBRC = 0.

*** Set Shipping Unit Limit assignment
    loop at ME->T_SHUNT_L_DFLT into LS_SHUNT_L_DFLT
                              where GLIDF eq LF_GLIDF_OLD.

      move LS_SHUNT_DFLT_NEW-GLIDF to LS_SHUNT_L_DFLT-GLIDF.
      RR_DFLT->UPDATE_SHUNT_L_DFLT( IS_SHUNT_L_DFLT = LS_SHUNT_L_DFLT ).
    endloop.

*** Set Shipping Unit Packaging Material Type assignment
    loop at ME->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT
                              where SHUNT eq LS_SHUNT_DFLT-SHUNT.

      RR_DFLT->ADD_SHUNT_P_DFLT( IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT ).
    endloop.
  endloop.

*** --------------------------------------------------------------------------------------------------
*** Set Packaging Material Type assignment
  if LR_CUST_SHIPU is bound.
    LT_PMATY_COMBI = LR_CUST_SHIPU->GET_PMATY_COMBI( IF_SYSOM = RR_DFLT->S_DFLT-SYSOM ).
  endif.
  loop at ME->T_PMATY_DFLT into LS_PMATY_DFLT.

*** Convert Packaging Material Quantity
*** Take the first we found!
    read table LT_PMATY_COMBI into LS_PMATY_COMBI
                              with key PMATY = LS_PMATY_DFLT-PMATY.
    if SY-SUBRC = 0.

***   Do Conversion
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PMATY_COMBI-PMQTY_UOM
                                                         IF_UOM_IN    = LS_PMATY_DFLT-PMQTY_UOM
                                                         IF_VALUE_IN  = LS_PMATY_DFLT-PMQTY
                                               importing EF_VALUE_OUT = LS_PMATY_DFLT-PMQTY
                                                         EF_UOM_OUT   = LS_PMATY_DFLT-PMQTY_UOM ).
    endif.


    RR_DFLT->ADD_PMATY_DFLT( IS_PMATY_DFLT = LS_PMATY_DFLT ).
  endloop.

*** --------------------------------------------------------------------------------------------------
*** Save and Free new Packaging Code
  RR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = C_FCODE_DFLT_SAVE ).

endmethod.
method HANDLE_DELETE.

*** -----------------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCSUC_DFLT=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCSUC_DFLT=>C_ACTVT_DELETE ).

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***------------------------------------------------------------------------------------------------
*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE .

  data:  LF_GUID type /VCXI/CKX_GUID.

*** Do Unlock if locked
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
  endif.

*** Clear Instance Table
  LF_GUID = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
  delete ZCL_VCXI_XCSUC_DFLT=>T_INSTANCE where GUID = LF_GUID.

endmethod.
method HANDLE_REQ_TR.

*** Request Transport
  move ABAP_TRUE to ME->F_WRITE_TR.
  move ABAP_TRUE to ME->F_TRANS_REQ.

endmethod.
  method HANDLE_SAVE .

    data: LF_KORRNR type TRKORR.


*** Ask for Transport only if it is required
    if ME->F_TRANS_REQ eq ABAP_TRUE.
      if ME->F_KORRNR is initial.
***     Popup to pick Transport
        call function 'G_TRANS_NUMBER'
          exporting
            CATEGORY  = 'CUST'
          importing
            KORRNR    = LF_KORRNR
          exceptions
            NO_NUMBER = 1
            others    = 2.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
      else.
        move ME->F_KORRNR to LF_KORRNR.
        clear: ME->F_KORRNR.
      endif.
    endif.

*** Save
    ME->DO_SAVE( IF_KORRNR = LF_KORRNR ).

  endmethod.
method HANDLE_SW_SYSOM.

  data:          LF_SHUNT            type                   ZVCXI_XCSU_SHUNT,
                 LF_UNIT             type                   UNIT.
  data:          LS_SHUNT_DFLT       type                   ZVCXI_XCSUC_S_SHUNT_DFLT,
                 LS_LIMIT            type                   ZVCXI_XCS_TC172,
                 LS_PMATY_COMBI      type                   ZVCXI_XCSU_S_PMATY_COMBI.
  data:          LT_LIMIT            type                   ZVCXI_XCSU_TT_SHUTY_LIMIT,
                 LT_PMATY_COMBI      type                   ZVCXI_XCSU_TT_PMATY_COMBI.
  data:          LR_CUST_SHIPU       type ref to            ZCL_VCXI_XCSU_CUST_SHIPU.
  field-symbols: <S_SHUNT_L_DFLT>    type                   ZVCXI_XCSUC_S_SHUNT_L_DFLT,
                 <S_PMATY_DFLT>      type                   ZVCXI_XCSUC_S_PMATY_DFLT.

*** --------------------------------------------------------------------------------------------------
*** Get Customizing
  LR_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ).

*** --------------------------------------------------------------------------------------------------
*** Switch Current System of Measure
  case ME->S_DFLT-SYSOM.
    when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
      move /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL to ME->S_DFLT-SYSOM.
    when others.
      move /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC to ME->S_DFLT-SYSOM.
  endcase.

*** --------------------------------------------------------------------------------------------------
*** Convert Shipping Unit Limit's
  loop at ME->T_SHUNT_DFLT into LS_SHUNT_DFLT.

    if LS_SHUNT_DFLT-SHUNT ne LF_SHUNT.
      move LS_SHUNT_DFLT-SHUNT to LF_SHUNT.
***   Read Limits
      LT_LIMIT = LR_CUST_SHIPU->GET_LIMIT_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).
    endif.

*** Process assigned Limits
    loop at ME->T_SHUNT_L_DFLT assigning <S_SHUNT_L_DFLT>
        where GLIDF = LS_SHUNT_DFLT-GLIDF.

      clear LF_UNIT.

      read table LT_LIMIT into LS_LIMIT with key LIMIT = <S_SHUNT_L_DFLT>-LIMIT
                                                 DIMEN = <S_SHUNT_L_DFLT>-DIMEN.
      check SY-SUBRC = 0.
      case ME->S_DFLT-SYSOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
          move LS_LIMIT-UOMME to LF_UNIT.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
          move LS_LIMIT-UOMIM to LF_UNIT.
      endcase.

***   Do Conversion
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LF_UNIT
                                                         IF_UOM_IN    = <S_SHUNT_L_DFLT>-DIMVA_UOM
                                                         IF_VALUE_IN  = <S_SHUNT_L_DFLT>-DIMVA
                                               importing EF_VALUE_OUT = <S_SHUNT_L_DFLT>-DIMVA
                                                         EF_UOM_OUT   = <S_SHUNT_L_DFLT>-DIMVA_UOM ).

    endloop.
  endloop.

*** --------------------------------------------------------------------------------------------------
*** Convert Packaging Material Type - Packaging Material Quantity
  LT_PMATY_COMBI = LR_CUST_SHIPU->GET_PMATY_COMBI( IF_SYSOM = ME->S_DFLT-SYSOM ).

  loop at ME->T_PMATY_DFLT assigning <S_PMATY_DFLT>.
*** Take the first we found!
    read table LT_PMATY_COMBI into LS_PMATY_COMBI
                              with key PMATY = <S_PMATY_DFLT>-PMATY.

*** Do Conversion
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PMATY_COMBI-PMQTY_UOM
                                                       IF_UOM_IN    = <S_PMATY_DFLT>-PMQTY_UOM
                                                       IF_VALUE_IN  = <S_PMATY_DFLT>-PMQTY
                                             importing EF_VALUE_OUT = <S_PMATY_DFLT>-PMQTY
                                                       EF_UOM_OUT   = <S_PMATY_DFLT>-PMQTY_UOM ).

  endloop.

  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_LOG.

***----------------------------------------------------------------------------
*** Set Created Info to Log
  move SY-UNAME     to ME->S_DFLT-CREBY.
  get time stamp field ME->S_DFLT-CREAT.

*** Set Changed Info to Log
  move SY-UNAME     to ME->S_DFLT-CHABY.
  get time stamp field ME->S_DFLT-CHAAT.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_SYSOM.

  data:  LF_BUKRS   type BUKRS.
  data:  LS_SYSOM   type /VCXI/VKSC_S_SYSOM,
         LS_TVKO    type TVKO.

  clear ME->S_DFLT-SYSOM.

***--------------------------------------------------------------------------------------
*** Get the Company Code
  call function 'CO_RM_COMPANYCODE_FIND'
    exporting
      WERKS    = ME->S_DFLT-WERKS
    importing
      COMPCODE = LF_BUKRS
    exceptions
      NO_ENTRY = 1
      others   = 2.
*** On Error, try to select Company Code by SalesOrg
  if SY-SUBRC ne 0.
    call function 'TVKO_SINGLE_READ'
      exporting
        VKORG     = ME->S_DFLT-VKORG
      importing
        WTVKO     = LS_TVKO
      exceptions
        NOT_FOUND = 1
        others    = 2.
*** On Error, eliminate Company Code
    if SY-SUBRC ne 0.
      clear LF_BUKRS.
    else.
      LF_BUKRS = LS_TVKO-BUKRS.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** By Company Code & Plant
  read table T_SYSOM into LS_SYSOM
                     with key BUKRS = LF_BUKRS
                              WERKS = ME->S_DFLT-WERKS.
  if SY-SUBRC ne 0.
*** By Company Code
    read table T_SYSOM into LS_SYSOM
                       with key BUKRS = LF_BUKRS
                                WERKS = SPACE.

    if SY-SUBRC ne 0.
***   Globally
      read table T_SYSOM into LS_SYSOM
                         with key BUKRS = SPACE
                                  WERKS = SPACE.
    endif.
  endif.

*** Use identified System of Measurement
  move LS_SYSOM-SYSOM to ME->S_DFLT-SYSOM.

*** Default is Metric
  if ME->S_DFLT-SYSOM is initial.
    move /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC to ME->S_DFLT-SYSOM.
  endif.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_VALID_PLANTS.

  clear ME->T_WERKS.

***--------------------------------------------------------------------------------------
*** Set Selected Plant
  if ME->S_DFLT-WERKS is not initial.
    append ME->S_DFLT-WERKS to ME->T_WERKS.

***--------------------------------------------------------------------------------------
*** Get Plants per Sales Organisation and Distribution Channel
  else.
    if  ME->S_DFLT-VKORG is not initial
    and ME->S_DFLT-VTWEG is not initial.
      select WERKS
             from TVKWZ
             into table ME->T_WERKS
             where VKORG eq ME->S_DFLT-VKORG
               and VTWEG eq ME->S_DFLT-VTWEG.

    else.

      select WERKS
             from T001W
             into table ME->T_WERKS.
    endif.
  endif.

endmethod.
method LOAD_FROM_DB .

  data: LS_TD400            type        ZVCXI_XCS_TD400.

*** Load Header Data of Packaging Code
  select single *
         into LS_TD400
         from ZVCXI_XCS_TD400
         where GDFLT = ME->S_DFLT-GDFLT.

  if SY-SUBRC = 0.
    move-corresponding LS_TD400 to ME->S_DFLT.
  endif.

*** Load Default Shipping Scheme assignment
  select *
         into corresponding fields of table ME->T_SHSCH_DFLT
         from ZVCXI_XCS_TD410
         where GDFLT = ME->S_DFLT-GDFLT.

*** Load Default Shipping Unit Type assignment
  select *
         into corresponding fields of table ME->T_SHUTY_DFLT
         from ZVCXI_XCS_TD420
         where GDFLT = ME->S_DFLT-GDFLT.

*** Load Default Shipping Unit assignment
  select *
         into corresponding fields of table ME->T_SHUNT_DFLT
         from ZVCXI_XCS_TD430
         where GDFLT = ME->S_DFLT-GDFLT.

*** Load Default Shipping Unit -Limit- assignment
  if ME->T_SHUNT_DFLT is not initial.
    ME->LOAD_SHUNT_LIMIT( ).
  endif.

*** Load Default Shipping Unit -Packmat Type- assignment
  select *
         into corresponding fields of table ME->T_SHUNT_P_DFLT
         from ZVCXI_XCS_TD432
         where GDFLT = ME->S_DFLT-GDFLT.

*** Load Default Packaging Material Type assignment
  select *
         into corresponding fields of table ME->T_PMATY_DFLT
         from ZVCXI_XCS_TD440
         where GDFLT = ME->S_DFLT-GDFLT.

*** Do sort
  sort ME->T_PMATY_DFLT   by PMATY.
  sort ME->T_SHSCH_DFLT   by CMATN PRFID SHSCH.
  sort ME->T_SHUNT_DFLT   by SHUNT.
  sort ME->T_SHUNT_P_DFLT by SHUNT PMATY.
  sort ME->T_SHUTY_DFLT   by SHUTY.

*** Initialize valid Plants
  ME->INIT_VALID_PLANTS( ).

endmethod.
  method LOAD_SHUNT_LIMIT.

    data: LS_SHUNT_DFLT   type ZVCXI_XCSUC_S_SHUNT_DFLT,
          LS_SHUNT_L_DFLT type ZVCXI_XCSUC_S_SHUNT_L_DFLT.
    data: LT_LIMIT        type ZVCXI_XCSU_TT_SHUTY_LIMIT.
    data: LR_CUST_SHIPU   type ref to ZCL_VCXI_XCSU_CUST_SHIPU.


    free: ME->T_SHUNT_L_DFLT.

***----------------------------------------------------------------------------
*** Get stored values
    select *
           into corresponding fields of table ME->T_SHUNT_L_DFLT
           from ZVCXI_XCS_TD431
           for all entries in ME->T_SHUNT_DFLT
           where GLIDF = ME->T_SHUNT_DFLT-GLIDF.   "#EC CI_NO_TRANSFORM


***----------------------------------------------------------------------------
*** Validation only in change mode
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***   Get Shipping Customizing
      LR_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ).

***   Process Shipping Unit Defaults
      loop at ME->T_SHUNT_DFLT into LS_SHUNT_DFLT.
        free LT_LIMIT.
        if LR_CUST_SHIPU is bound.
          LT_LIMIT = LR_CUST_SHIPU->GET_LIMIT_FOR_SHUNT( IF_SHUNT = LS_SHUNT_DFLT-SHUNT ).
        endif.

***     Add missing Limits
        if LT_LIMIT is not initial.
          ME->ADD_VALID_SHUNT_L_DFLT( IF_SHUNT = LS_SHUNT_DFLT-SHUNT
                                      IF_GLIDF = LS_SHUNT_DFLT-GLIDF ).
        endif.

***     Remove invalid Limits
        loop at ME->T_SHUNT_L_DFLT into LS_SHUNT_L_DFLT
                                   where GLIDF eq LS_SHUNT_DFLT-GLIDF.
          if not LINE_EXISTS( LT_LIMIT[ LIMIT = LS_SHUNT_L_DFLT-LIMIT
                                        DIMEN = LS_SHUNT_L_DFLT-DIMEN ] ).
            delete ME->T_SHUNT_L_DFLT.

***         Raise Change Event
            raise event /VCXI/IF_CKX_OBJECT~CHANGED.
          endif.
        endloop.
      endloop.
    endif.

  endmethod.
method SET_DFLT .

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Default Data
  move IS_DFLT-VKORG to ME->S_DFLT-VKORG.
  move IS_DFLT-VTWEG to ME->S_DFLT-VTWEG.
  move IS_DFLT-SPART to ME->S_DFLT-SPART.
  move IS_DFLT-WERKS to ME->S_DFLT-WERKS.
  move IS_DFLT-KUNNR to ME->S_DFLT-KUNNR.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_GDFLT .

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Default Data
  move IF_GDFLT to ME->S_DFLT-GDFLT.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
***     Write Lock Defaulting Entry
        call function 'ENQUEUE_EZVCXI_XCS_D400E'
          exporting
            GDFLT          = ME->S_DFLT-GDFLT
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
***     Write Lock Defaulting Entrys
        call function 'DEQUEUE_EZVCXI_XCS_D400E'
          exporting
            GDFLT = ME->S_DFLT-GDFLT.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_LOG .

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Default Data
  move-corresponding IS_LOG to ME->S_DFLT.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_PMATY_DFLT.

  field-symbols: <S_PMATY_DFLT> type ZVCXI_XCSUC_S_PMATY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_DFLT assigning <S_PMATY_DFLT> with key PMATY = IS_PMATY_DFLT-PMATY.

  if SY-SUBRC eq 0.
    move-corresponding IS_PMATY_DFLT to <S_PMATY_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHSCH_DFLT.

  field-symbols: <S_SHSCH_DFLT> type ZVCXI_XCSUC_S_SHSCH_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHSCH_DFLT assigning <S_SHSCH_DFLT> with key CMATN = IS_SHSCH_DFLT-CMATN
                                                                PRFID = IS_SHSCH_DFLT-PRFID
                                                                CNTXT = IS_SHSCH_DFLT-CNTXT.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHSCH_DFLT to <S_SHSCH_DFLT>.
  endif.

  sort ME->T_SHSCH_DFLT by CMATN PRFID CNTXT.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHUNT_DFLT.

  field-symbols: <S_SHUNT_DFLT> type ZVCXI_XCSUC_S_SHUNT_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_DFLT assigning <S_SHUNT_DFLT> with key SHUNT = IS_SHUNT_DFLT-SHUNT.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHUNT_DFLT to <S_SHUNT_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHUNT_L_DFLT.

  data:          LS_SHUNT_L_DFLT  type ZVCXI_XCSUC_S_SHUNT_L_DFLT.
  field-symbols: <S_SHUNT_L_DFLT> type ZVCXI_XCSUC_S_SHUNT_L_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_L_DFLT assigning <S_SHUNT_L_DFLT> with key GLIDF = IS_SHUNT_L_DFLT-GLIDF
                                                                    LIMIT = IS_SHUNT_L_DFLT-LIMIT
                                                                    DIMEN = IS_SHUNT_L_DFLT-DIMEN.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHUNT_L_DFLT to LS_SHUNT_L_DFLT.
*** Do unit Conversion
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_SHUNT_L_DFLT>-DIMVA_UOM
                                                       IF_UOM_IN    = LS_SHUNT_L_DFLT-DIMVA_UOM
                                                       IF_VALUE_IN  = LS_SHUNT_L_DFLT-DIMVA
                                             importing EF_VALUE_OUT = LS_SHUNT_L_DFLT-DIMVA
                                                       EF_UOM_OUT   = LS_SHUNT_L_DFLT-DIMVA_UOM ).

*** Set Value
    move-corresponding LS_SHUNT_L_DFLT to <S_SHUNT_L_DFLT>.
  else.
*** Limit unknown
    raise exception type /VCXI/CX_CKX.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHUNT_P_DFLT.

  field-symbols: <S_SHUNT_P_DFLT> type ZVCXI_XCSUC_S_SHUNT_P_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUNT_P_DFLT assigning <S_SHUNT_P_DFLT> with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                                                    PMATY = IS_SHUNT_P_DFLT-PMATY.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHUNT_P_DFLT to <S_SHUNT_P_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHUTY_DFLT.

  field-symbols: <S_SHUTY_DFLT> type ZVCXI_XCSUC_S_SHUTY_DFLT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_DFLT assigning <S_SHUTY_DFLT> with key SHUTY = IS_SHUTY_DFLT-SHUTY.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHUTY_DFLT to <S_SHUTY_DFLT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
