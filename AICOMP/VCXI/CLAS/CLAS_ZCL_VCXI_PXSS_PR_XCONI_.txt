
class ZCL_VCXI_PXSS_PR_XCONI definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_PREV .
  interfaces ZIF_VCXI_PXSS_COMM_NEXT
      abstract methods DO_BACKWARD .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_CONNECTED type /VCXI/VKSC_IEVNT value 'CONNECTED' ##NO_TEXT.
  constants C_IPRVT_XCONI type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XCONI' ##NO_TEXT.

  methods IS_XCONO_COMPATIBLE
    importing
      !IR_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_COMPATIBLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_CONNECTED_GATE
    returning
      value(RR_CONNECT_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_GXCON
    returning
      value(RF_GXCON) type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods MERGE
    raising
      /VCXI/CX_CKX .
  methods IS_MERGE_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_GXCON type /VCXI/VKSC_IEVNT value 'INIT_GXCON' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.

  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_PXSS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_INPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_INPUT) type ref to ZCL_VCXI_PXSS_PR_INPUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPEC) type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_GXCON
    raising
      /VCXI/CX_CKX .
  methods SET_GXCON
    importing
      !IF_GXCON type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_XCONI definition
class ZCL_VCXI_PXSS_PR_XCONI implementation.
  method GET_CONNECTED_GATE.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR.
    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.


*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Get X-Connections as References
    LT_XCONR = LR_PR_SOV->GET_XCONR( IR_GATE_IN = ME->R_GATE ).
    check LT_XCONR is not initial.
    RR_CONNECT_GATE = LT_XCONR[ 1 ]-R_GATE_OUT.

  endmethod.
  method GET_DESCR.

    data: LF_MAKTX type MAKTX.

*** Get Material Description
    LF_MAKTX = ME->GET_MAKTX(  ).

    if LF_MAKTX is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    else.
      move LF_MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_GXCON.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to RF_GXCON.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to RF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_INPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_INPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Input
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_INPUT=>C_IPRVT_PX_INPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_INPUT.

  endmethod.
  method GET_PRVDR_SOV.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SOV ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SPEC.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check If Connection In has a Connection Out
    if ME->GET_CONNECTED_GATE( ) is bound.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check If Connection In has a Connection Out
    if ME->GET_CONNECTED_GATE( ) is bound.
***   Connection In is connected to a Connection Out.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '053' ).
    else.
***   Connection In is not connected to a Connection Out.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '054' ).
    endif.

  endmethod.
  method GET_WERKS.

    data(LR_PR_SPEC) = ME->GET_PRVDR_SPEC( ).
    check LR_PR_SPEC is bound.

    if EF_DESCR is requested.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( importing EF_DESCR = EF_DESCR ).
    else.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_INIT_GXCON.
        ME->HANDLE_INIT_GXCON( ).

*** Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_GXCON.

    data:  LF_GXCON  type ZVCXI_PXSS_GXCON.


    check ME->GET_GXCON( ) is initial.

    try.
        LF_GXCON = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
      catch CX_UUID_ERROR.                              "#EC NO_HANDLER
    endtry.

    ME->SET_GXCON( IF_GXCON = LF_GXCON ).

  endmethod.
  method IS_MERGE_ALLOWED.

*** Is Input provider available (only if child of Input)
    data(LR_PR_INPUT) = ME->GET_PRVDR_INPUT( ).
    check LR_PR_INPUT is bound.

*** Allow Merging
    RF_ALLOWED = ABAP_TRUE.

  endmethod.
  method IS_XCONO_COMPATIBLE.

    if IR_GATE_XCONO is bound and
       IR_GATE_XCONO->R_CLSPR is instance of ZIF_VCXI_PXSS_COMM_NEXT.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method MERGE.

    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.


*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Merge with connected Component
    LR_PR_SOV->MERGE( IR_GATE_XCONI = ME->R_GATE ).

  endmethod.
  method SET_GXCON.

    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_GXCON                         to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_LEOKY-SETBY.

    ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.

***--------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.

***   Get Special Information of Connection Out
      try.
          clear: LR_PR_XCONO.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

      if LR_PR_XCONO is bound.
***     Get Material Description from Connection Out
        ME->SET_MAKTX( IF_MAKTX = LR_PR_XCONO->GET_MAKTX( ) ).
      endif.

    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_XCONI> type ZVCXI_PXSS_S_FDI_XCONI.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_XCONI.
    assign RR_DATA->* to <S_FDI_XCONI>.


***------------------------------------------------------------------------------------------------
*** Get X-Connect GUID
    <S_FDI_XCONI>-GXCON = ME->GET_GXCON( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_XCONI_OLD type ZVCXI_PXSS_S_FDI_XCONI,
          LS_FDI_XCONI_NEW type ZVCXI_PXSS_S_FDI_XCONI.
    data: LR_DATA_OLD   type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_XCONI_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_XCONI_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set X-Connect GUID
    if LS_FDI_XCONI_OLD-GXCON ne LS_FDI_XCONI_NEW-GXCON.
      ME->SET_GXCON( IF_GXCON = LS_FDI_XCONI_NEW-GXCON ).
    endif.

  endmethod.
