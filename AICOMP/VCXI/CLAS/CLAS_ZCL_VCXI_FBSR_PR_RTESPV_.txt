
class ZCL_VCXI_FBSR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_F0SR_PR_RTESPV
  create public .

public section.

  interfaces ZIF_VCXI_FFSR_RTESPV_RHNDL_IN .

  data T_RHNDL_IN type ZVCXI_FFSR_TT_RHNDL read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods EVALUATE_BL_PRTE
    redefinition .
  methods GET_EVQTY_BY_IMFXC
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_DET_RHNDL_IN type /VCXI/VKSC_IEVNT value 'DETERMINE_RHNDL_IN' ##NO_TEXT.

  methods CONVERT_EVQTY_FOR_FCONI
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_EVQTY type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_BMAKE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP
    importing
      !IR_GATE_CSTEP type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_RECLO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_WICKET
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_WIND
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_PERF
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CSTEP
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_PRVDR) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DET_RHNDL_IN
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_BY_BCONO
    importing
      !IR_GATE_BCONO type ref to /VCXI/CL_VKSR_GATE
      !IF_TABIX type I
    exporting
      !ES_EVQTY type ZVCXI_XCSR_S_EVQTY
      !EF_NOOUT type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_BY_BFG
    importing
      !IR_GATE_BFG type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ES_EVQTY type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP_SHIPMGR
    redefinition .
  methods GET_ICELM
    redefinition .
  methods GET_MFMI
    redefinition .
  methods GET_MFSI
    redefinition .
  methods HANDLE_INIT_EVQTY
    redefinition .
  methods VALIDATE
    redefinition .
  methods GET_PRVDR_OUTPUT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSR_PR_RTESPV definition
class ZCL_VCXI_FBSR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_F0SR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CONVERT_EVQTY_FOR_FCONI.

    data: LF_NOUPS type        ZVCXI_F0S_NOUPS,
          LF_NOFIL type        ZVCXI_FBS_NOFIL,
          LF_DIMID type        DIMID.
    data: LS_FILEN type        ZVCXI_F0S_S_FILEN,
          LS_T006D type        T006D,
          LS_CALCV type        ZVCXI_XCS_S_CALCV.
    data: LT_GATE_BFILM type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_BFILM type ref to ZCL_VCXI_FBSS_PR_BFILM,
          LR_PR_FCONI type ref to ZCL_VCXI_FFSS_PR_FCONI,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.

*** Get Bag Films
    LT_GATE_BFILM = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE_BFILM into LR_GATE.
***   Check if Bag film is inline with the XCONI
      check LR_GATE->IS_IN_LINE( IR_GATE_IN ).

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BFILM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_BFILM.
          continue.
      endtry.
      check LR_PR_BFILM is bound.

***   Get Film Length
      LR_PR_BFILM->GET_FILEN( importing ES_FILEN = LS_FILEN ).

***   Get Number of Ups
      LR_PR_BFILM->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = LF_NOUPS ).

***   Get Number of Films
      LR_PR_BFILM->GET_NOFIL( importing EF_NOFIL = LF_NOFIL ).

    endloop.

    if LF_NOUPS is initial or
       LF_NOFIL is initial.
***   No Inbound Evaluation Quantity could be determined.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGID = 'ZVCXI_F0SR'
          F_MSGNO = '051'
          F_MSGTY = 'E'.
    endif.

    break BUILD_GENERIC_CONVERSION_TO_SI_UNIT.

*** Get Dimensions of Unit
    call function 'DIMENSION_GET_FOR_UNIT'
      exporting
        UNIT           = LS_FILEN-FILEN_UOM
      importing
        DIMENSION      = LF_DIMID
      exceptions
        UNIT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Dimensions Info
    call function 'T006D_READ'
      exporting
        DIMID      = LF_DIMID
        FLG_ERROR  = 'X'
        FLG_STRUCT = 'X'
        FLG_TEXT   = ' '
        SPRAS      = SY-LANGU
      importing
        STRUCT     = LS_T006D
      exceptions
        NO_ENTRY   = 1
        NO_TEXT    = 2
        others     = 3.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Calculate Evaluation Quantity
    LS_CALCV-CALCV = CS_EVQTY-EVQTY * LS_FILEN-FILEN * LF_NOFIL.
    LS_CALCV-CALCV_UOM = LS_FILEN-FILEN_UOM.

*** Convert Film Length Unit
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_T006D-MSSIE
                                             changing  CS_CALCV = LS_CALCV ).

    move: LS_CALCV-CALCV     to CS_EVQTY-EVQTY,
          LS_CALCV-CALCV_UOM to CS_EVQTY-EVQTY_UOM.

  endmethod.
  method CREATE_BL_PRTE.

    data: LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

    if IR_RTE_PRTE is bound.
      move IR_RTE_PRTE to LR_RTE_PRTE.
    else.
      create object LR_RTE_PRTE.
    endif.

    create object RR_BL_PRTE
      type
      ZCL_VCXI_FBSR_BL_PRTE
      exporting
        IR_RTE_PRTE  = LR_RTE_PRTE
        IR_MFMI      = ME->R_MFMI
        IR_MFSI      = ME->R_MFSI
        IT_CSPLIT    = ME->T_CSPLIT
        IF_DATE      = ME->F_DATE
        IF_LIFNR_REQ = ABAP_TRUE.

  endmethod.
  method CREATE_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Create Instance based on ID
    case IF_IPSTP.
***   Bag Making
      when ZCL_VCXI_FBSR_BL_PSTEP_BMAKE=>C_IPSTP_BMAKE.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FBSR_BL_PSTEP_BMAKE
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

****   Reclosing
*      when ZCL_VCXI_FBSR_BL_PSTEP_RECLO=>C_IPSTP_RECLO.
*        create object RR_BL_PSTEP
*          type ZCL_VCXI_FBSR_BL_PSTEP_RECLO
*          exporting
*            IF_DATE    = ME->F_DATE
*            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Perforation and Shaping
      when ZCL_VCXI_FBSR_BL_PSTEP_PERF=>C_IPSTP_PERF.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FBSR_BL_PSTEP_PERF
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Wicketing
      when ZCL_VCXI_FBSR_BL_PSTEP_WICKET=>C_IPSTP_WICKET.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FBSR_BL_PSTEP_WICKET
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Winding
      when ZCL_VCXI_FBSR_BL_PSTEP_WIND=>C_IPSTP_WIND.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FBSR_BL_PSTEP_WIND
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).


***   Unitizing
      when ZCL_VCXI_FBSR_BL_PSTEP_UNIT=>C_IPSTP_GRP  or
           ZCL_VCXI_FBSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FBSR_BL_PSTEP_UNIT
          exporting
            IF_IPSTP   = IF_IPSTP
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    endcase.

***------------------------------------------------------------------------------------------------
    if RR_BL_PSTEP is bound.
***   Initialize Production Step
      RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
      RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
      RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = IT_PRVDR ).
    else.
***   Create via SUPER
      RR_BL_PSTEP = SUPER->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                            IT_PRVDR = IT_PRVDR
                                            IF_COMBW = IF_COMBW ).
    endif.

  endmethod.
  method EVALUATE_BL_PRTE.

    SUPER->EVALUATE_BL_PRTE( IT_BL_PRTE = IT_BL_PRTE ).

***--------------------------------------------------------------------------------------
*** Determine the new Roll Handling inbound for the selected route
    read table IT_BL_PRTE with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
    if SY-SUBRC eq 0.
      ME->HANDLE_DET_RHNDL_IN( ).
    endif.

  endmethod.
  method GET_BL_PSTEP.

    data: LT_PRVDR_CSTEP type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SPEC   type ref to /VCXI/CL_VKSR_GATE,
          LR_PRVDR_CSTEP type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Specification
    ME->GET_PRVDR_SPEC( importing ER_GATE = LR_GATE_SPEC ).
    check LR_GATE_SPEC is bound.

*** BL Production Step - Bag Making
    ME->GET_BL_PSTEP_BMAKE( changing CT_BL_PSTEP = RT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get Provider for Conversion (Sorted)
    LT_PRVDR_CSTEP = ME->GET_PRVDR_CSTEP( IR_GATE_SPEC = LR_GATE_SPEC ).
    loop at LT_PRVDR_CSTEP into LR_PRVDR_CSTEP.
      ME->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = LR_PRVDR_CSTEP
                              changing  CT_BL_PSTEP   = RT_BL_PSTEP ).
    endloop.

***--------------------------------------------------------------------------------------
*** Get BL PStep - Shipping Manager
    ME->GET_BL_PSTEP_SHIPMGR( changing CT_BL_PSTEP = RT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_BMAKE.

    data: LT_PRVDR_BMAKE     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_BMAKE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_BPART      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_BFILM      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_HPART_P type        /VCXI/VKSR_TT_GATE,
          LT_GATE_PSCALE     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_XCONI      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_FPROC   type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_EMAT    type        /VCXI/VKSR_TT_GATE.
    data: LR_BL_PSTEP_BMAKE type ref to ZCL_VCXI_FBSR_BL_PSTEP_BMAKE,
          LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***--------------------------------------------------------------------------------------
*** Get Bag Making Element
    LT_GATE_BMAKE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BMAKE=>C_IPRVT_BMAKE
                                           IF_INUSE = ABAP_TRUE ).
    check LT_GATE_BMAKE is not initial.

*** Get Bag Part Element
    LT_GATE_BPART = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                           IF_INUSE = ABAP_TRUE ).
*** Get Bag Film Element
    LT_GATE_BFILM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                           IF_INUSE = ABAP_TRUE ).
*** Get Handle Part Element
    LT_GATE_MS_HPART_P = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_HPART_P=>C_IPRVT_MS_HPART_P
                                                IF_INUSE = ABAP_TRUE ).
*** Get Price Scales
    LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                            IF_INUSE  = ABAP_TRUE ).
*** Get Connection In
    LT_GATE_XCONI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SS_PR_XCONI=>C_IPRVT_XCONI
                                           IF_INUSE  = ABAP_TRUE ).
*** Get Film Procurement
    LT_GATE_MS_FPROC = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_IPRVT_MS_FPROC
                                              IF_INUSE  = ABAP_TRUE ).

*** Get Estimation Material
    LT_GATE_MS_EMAT  = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_IPRVT_MS_EMAT
                                              IF_INUSE  = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Collect all Provider
    refresh LT_PRVDR_BMAKE.
    append lines of  LT_GATE_BMAKE      to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_BPART      to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_BFILM      to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_MS_HPART_P to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_PSCALE     to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_XCONI      to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_MS_FPROC   to LT_PRVDR_BMAKE.
    append lines of  LT_GATE_MS_EMAT    to LT_PRVDR_BMAKE.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_BMAKE ).
    delete adjacent duplicates from LT_PRVDR_BMAKE comparing TABLE_LINE.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    create object LR_BL_PSTEP_BMAKE
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_BMAKE to CT_BL_PSTEP.
    move ME->I_WERKS to LR_BL_PSTEP_BMAKE->I_WERKS.
    LR_BL_PSTEP_BMAKE->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                     IT_PRVDR = LT_PRVDR_BMAKE ).

  endmethod.
  method GET_BL_PSTEP_CSTEP.

*** BL Production Step Conversion Step - Reclosing
    ME->GET_BL_PSTEP_CSTEP_RECLO( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Perforation & Shaping
    ME->GET_BL_PSTEP_CSTEP_PERF( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Wicketing
    ME->GET_BL_PSTEP_CSTEP_WICKET( exporting IR_GATE     = IR_GATE_CSTEP
                                   changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Winding
    ME->GET_BL_PSTEP_CSTEP_WIND( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_PERF.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Perforation
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FBSS_PR_CSTEP_PERF.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FBSR_BL_PSTEP_PERF=>C_IPSTP_PERF
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_RECLO.

    data: LF_IPSTP type          /VCXI/VSMC_IPSTP,
          LF_TPRCL type           ZVCXI_FBS_TPRCL.
    data: LS_TC210 type          ZVCXI_FBS_TC210,
          LS_TC211 type          ZVCXI_FBS_TC211.
    data: LT_GATE_MS_RECLO type          /VCXI/VKSR_TT_GATE,
          LT_TC210         type table of ZVCXI_FBS_TC210,
          LT_TC211         type table of ZVCXI_FBS_TC211,
          LT_IPSTP         type table of /VCXI/VSMC_IPSTP,
          LT_PRVDR_RECLO   type          /VCXI/VKSR_TT_GATE.
    data: LR_GATE_MS_RECLO  type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_MS_RECLO    type ref to   ZCL_VCXI_FBSS_PR_MS_RECLO,
          LR_PR_RECLO       type ref to   ZCL_VCXI_FBSS_PR_CSTEP_RECLO,
          LR_BL_PSTEP_RECLO type ref to   ZCL_VCXI_FBSR_BL_PSTEP_RECLO,
          LR_APPDATA        type ref to   /VCXI/CL_VKSR_APPDATA.

****--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Reclosing
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_RECLO.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_RECLO.
    endtry.

    check LR_PR_RECLO is not initial.

***--------------------------------------------------------------------------------------
**** Find Provider for Reclosing Material
    LT_GATE_MS_RECLO = IR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_RECLO=>C_IPRVT_MS_RECLO
                                           IF_INUSE = ABAP_TRUE ).
    check LT_GATE_MS_RECLO is not initial.

    loop at LT_GATE_MS_RECLO into LR_GATE_MS_RECLO.
      if IR_GATE->IS_PARENT( LR_GATE_MS_RECLO ) = ABAP_FALSE.
        delete LT_GATE_MS_RECLO index SY-TABIX.
      endif.
    endloop.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Get Customizing Data
    LT_TC210 = ZCL_VCXI_FBSSC_BAGTY=>T_TC210.
    LT_TC211 = ZCL_VCXI_FBSSC_BAGTY=>T_TC211.

    loop at LT_TC210 into LS_TC210 where IPSTP is not initial.
      collect LS_TC210-IPSTP into LT_IPSTP.
    endloop.
***--------------------------------------------------------------------------------------
*** Check if Production Step is defined for Reclosing Material
    loop at LT_IPSTP into LF_IPSTP.
      free LT_PRVDR_RECLO.

***   Collect all Reclosing Material Provider matching the Production Step
      loop at LT_GATE_MS_RECLO into LR_GATE_MS_RECLO.
        move LR_GATE_MS_RECLO->R_CLSPR ?to LR_PR_MS_RECLO.
        LR_PR_MS_RECLO->GET_TPRCL( importing EF_TPRCL = LF_TPRCL ).
        read table LT_TC211 into LS_TC211 with key TPRCL = LF_TPRCL.
        check SY-SUBRC eq 0.
        read table LT_TC210 with key TRECL = LS_TC211-TRECL
                                     IPSTP = LF_IPSTP
                                     transporting no fields.
        check SY-SUBRC eq 0.
        append LR_GATE_MS_RECLO to LT_PRVDR_RECLO.
      endloop.
      check LT_PRVDR_RECLO is not initial.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_RECLO ).

***   Get Reclosing Provider
      append IR_GATE to LT_PRVDR_RECLO.

***   Create BL PStep
      create object LR_BL_PSTEP_RECLO
        exporting
          IF_IPSTP   = LF_IPSTP
          IF_DATE    = ME->F_DATE
          IR_APPDATA = LR_APPDATA.
      append LR_BL_PSTEP_RECLO to CT_BL_PSTEP.
      move ME->I_WERKS to LR_BL_PSTEP_RECLO->I_WERKS.

      LR_BL_PSTEP_RECLO->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                       IT_PRVDR = LT_PRVDR_RECLO ).

    endloop.

  endmethod.
  method GET_BL_PSTEP_CSTEP_WICKET.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Wicketing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FBSS_PR_CSTEP_WICKET.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FBSR_BL_PSTEP_WICKET=>C_IPSTP_WICKET
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_WIND.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Winding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FBSS_PR_CSTEP_WIND.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Winding Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_MS_WNMAT=>C_IPRVT_FB_MS_WNMAT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FBSR_BL_PSTEP_WIND=>C_IPSTP_WIND
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_SHIPMGR.

    data: LT_GATE_SHIPMGR  type /VCXI/VKSR_TT_GATE,
          LT_GATE_SHIPUNIT type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SHIPMGR  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPMGR    type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
          LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                             IF_INUSE = ABAP_TRUE ).
    check LT_GATE_SHIPMGR is not initial.
    LR_GATE_SHIPMGR = LT_GATE_SHIPMGR[ 1 ].


*** Find Provider for Shipping Units
    LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                              IF_INUSE = ABAP_TRUE ).

*** Filter by Shipping Manager
    loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
      if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
        delete LT_GATE_SHIPUNIT.
      endif.
    endloop.
    check LT_GATE_SHIPUNIT is not initial.


***------------------------------------------------------------------------------------------------
*** Shipping Units Grouping
    ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                         IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                         IF_ATTID_SHUTY   = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP
                                         IF_IPSTP         = ZCL_VCXI_FBSR_BL_PSTEP_UNIT=>C_IPSTP_GRP
                                         IF_COMBW         = ZCL_VCXI_FBSR_BL_PSTEP_UNIT=>C_COMBW_PREV
                               changing  CT_BL_PSTEP      = CT_BL_PSTEP ).

*** Shipping Units HU
    ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                         IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                         IF_ATTID_SHUTY   = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                         IF_IPSTP         = ZCL_VCXI_FBSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT
                               changing  CT_BL_PSTEP      = CT_BL_PSTEP ).

  endmethod.
  method GET_EVQTY_BY_BCONO.

    data: LF_IMFXC     type ZVCXI_XCSP_IMFXC.
    data: LT_IMFXC_IN  type ZVCXI_XCSP_TT_IMFXC,
          LT_IMFXC_OUT type ZVCXI_XCSP_TT_IMFXC.
    data: LT_GATE_RTESPV type /VCXI/VKSR_TT_GATE.
    data: LR_PR_FCONO    type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV   type ref to ZCL_VCXI_F0SR_PR_RTESPV.


*** Process all Events before further determination of Evaluation Qty
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Get x-Connect based on position of Gate in relation to Output
    ME->GET_IMFXC( importing ET_IMFXC_OUT = LT_IMFXC_OUT ).
    read table LT_IMFXC_OUT into LF_IMFXC index IF_TABIX.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor of Components
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                            IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.

***   Get Information by Routing Supervisor
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_RTESPV.
      endtry.

      check LR_PR_RTESPV is bound.

***   Get Inbound Connections
      refresh LT_IMFXC_IN.
      LR_PR_RTESPV->GET_IMFXC( importing ET_IMFXC_IN = LT_IMFXC_IN ).
      read table LT_IMFXC_IN with key TABLE_LINE = LF_IMFXC
                             transporting no fields.
      check SY-SUBRC is initial.

      try.
          move LR_PR_RTESPV->GET_EVQTY_BY_IMFXC( LF_IMFXC ) to ES_EVQTY.
        catch /VCXI/CX_CKX.
***       Clear all to reset parameter
          clear ES_EVQTY.
      endtry.
    endloop.

  endmethod.
  method GET_EVQTY_BY_BFG.

    data: LF_UMREZ      type        UMREZ.
    data: LS_QCALC      type        ZVCXI_XCSS_S_QCALC.
    data: LT_GATE_OPQTY type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OPQTY type ref to /VCXI/CL_VKSR_GATE,
          LR_OPQTY      type ref to ZIF_VCXI_XCSS_OPQTY,
          LR_APPDATA    type ref to /VCXI/CL_VKSR_APPDATA.


***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
    LT_GATE_OPQTY = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE_OPQTY into LR_GATE_OPQTY index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE_OPQTY->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.

*** Get Operation Quantity of Provider or use Application Data
    if LR_OPQTY is bound.
      LR_OPQTY->GET_QCALC( importing ES_QCALC_SELF = LS_QCALC
                                     EF_UMREZ      = LF_UMREZ ).
*** Use Base and multiply by Numerator
      ES_EVQTY-EVQTY     = LS_QCALC-QCALC * LF_UMREZ.
      ES_EVQTY-EVQTY_UOM = LS_QCALC-QCALC_UOM.
    else.
      LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
      ES_EVQTY-EVQTY     = LR_APPDATA->S_OPQTY-OPQTY.
      ES_EVQTY-EVQTY_UOM = LR_APPDATA->S_OPQTY-OPQTY_UOM.
    endif.

  endmethod.
  method GET_EVQTY_BY_IMFXC.

    data: LF_IMFXC type ZVCXI_XCSP_IMFXC,
          LF_NOUPS type ZVCXI_F0S_NOUPS,
          LF_NOFIL type ZVCXI_FBS_NOFIL,
          LF_DIMID type DIMID.
    data: LS_XCONR type ZVCXI_F0SS_S_XCONR,
          LS_FILEN type ZVCXI_F0S_S_FILEN,
          LS_T006D type T006D,
          LS_CALCV type ZVCXI_XCS_S_CALCV.
    data: LT_XCONR      type ZVCXI_F0SS_TT_XCONR,
          LT_GATE_BFILM type /VCXI/VKSR_TT_GATE.
    data: LR_PR_XCONI type ref to ZCL_VCXI_F0SS_PR_XCONI,
          LR_PR_BFILM type ref to ZCL_VCXI_FBSS_PR_BFILM,
          LR_PR_FCONI type ref to ZCL_VCXI_FFSS_PR_FCONI,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.


    move SUPER->GET_EVQTY_BY_IMFXC( IF_IMFXC = IF_IMFXC ) to RS_EVQTY.

***--------------------------------------------------------------------------------------
*** Get X-Connections (References)
    LT_XCONR = ME->GET_XCONR( ).

    loop at LT_XCONR into LS_XCONR.
      check LS_XCONR-R_GATE_IN is bound.

      try.
          move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_XCONI.
          continue.
      endtry.

      check LR_PR_XCONI is bound.
      move LR_PR_XCONI->GET_GXCON( ) to LF_IMFXC.

      check LF_IMFXC eq IF_IMFXC.
      exit.
    endloop.

    if LS_XCONR-R_GATE_IN is not bound.
***   No Inbound Evaluation Quantity could be determined.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGID = 'ZVCXI_F0SR'
          F_MSGNO = '051'
          F_MSGTY = 'E'.
    endif.

***--------------------------------------------------------------------------------------
*** Convert to Bags to Bag Film Length
    try.
        move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_FCONI.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FCONI.
    endtry.
    if LR_PR_FCONI is bound.
      ME->CONVERT_EVQTY_FOR_FCONI( exporting IR_GATE_IN = LS_XCONR-R_GATE_IN
                                   changing  CS_EVQTY   = RS_EVQTY ).
    endif.

  endmethod.
  method GET_ICELM.

    move 'BAG' to RF_ICELM.

  endmethod.
  method GET_MFMI.

    data: LS_MFMI  type          ZVCXI_FBSR_S_MFMI.
    data: LT_GATE_MS_BPROC type          /VCXI/VKSR_TT_GATE,
          LT_GATE_PSCALE   type          /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to   /VCXI/CL_VKSR_GATE,
          LR_GATE_MS_BPROC type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_MS_BPROC   type ref to   ZCL_VCXI_FBSS_PR_MS_BPROC,
          LR_PR_PSCALE     type ref to   ZCL_VCXI_XCS_PR_PSCALE.
    field-symbols: <T_MFMI>   type standard table.

***--------------------------------------------------------------------------------------
*** Find Provider for Bag Procurement
    LT_GATE_MS_BPROC = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_MS_BPROC=>C_IPRVT_MS_BPROC
                                              IF_INUSE  = ABAP_TRUE
                                              IF_SORTED = ABAP_TRUE ).
    check LT_GATE_MS_BPROC is not initial.

*** Find Provider for Price Scale
    LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
    loop at LT_GATE_MS_BPROC into LR_GATE_MS_BPROC.
      try.
          move LR_GATE_MS_BPROC->R_CLSPR ?to LR_PR_MS_BPROC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_BPROC.
      endtry.

      check LR_PR_MS_BPROC is bound.

***   Create Data Reference
      if RR_MFMI is not bound and
         <T_MFMI> is not assigned.
        create data RR_MFMI type table of ZVCXI_FBSR_S_MFMI.
        assign RR_MFMI->* to <T_MFMI>.
      endif.

      move LR_PR_MS_BPROC->GET_MATNR( ) to LS_MFMI-MATNR.
      move LR_PR_MS_BPROC->GET_PURCH( ) to LS_MFMI-PURCH.

      move 100                          to LS_MFMI-MFISP.
      move '%'                          to LS_MFMI-MFISP_UOM.

      move 1                            to LS_MFMI-MFICF.
      move 1                            to LS_MFMI-MFICP.

      move LR_PR_MS_BPROC->GET_SANKA( ) to LS_MFMI-SANKA.

      move LR_PR_MS_BPROC->GET_LIFNR( ) to LS_MFMI-LIFNR.

****--------------------------------------------------------------------------------------
      LR_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LS_MFMI-IBAGT ).
      LR_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_MFMI-S_BGWGT ).
      LR_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_MFMI-S_BGHEI ).
      LR_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_MFMI-S_BGWID ).

***   Alwasy 1 as Number of Outs and Number Ups
      move 1 to LS_MFMI-NOOUT.
      move 1 to LS_MFMI-NOUPS.

***--------------------------------------------------------------------------------------
***   Add Price Scale
      loop at LT_GATE_PSCALE into LR_GATE.
        try.
***         Check Scale is part of Bag Procurement
            check LR_GATE->GET_PARENT( ) eq LR_GATE_MS_BPROC.
            move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PSCALE.
        endtry.
        check LR_PR_PSCALE is bound.

***     Add Price Scales
        append value #( ISVCE   = LR_GATE->F_ID
                        S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                        S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                        S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                      ) to LS_MFMI-T_PSCALE.
      endloop.

***   Append Material Flow Material to Data Reference
      append LS_MFMI to <T_MFMI>.

    endloop.

  endmethod.
  method GET_MFSI.

    data: LS_MFSI       type          ZVCXI_FBSR_S_MFSI_P.
    data: LT_GATE_BCONI type          /VCXI/VKSR_TT_GATE.
    data: LR_GATE_BCONI type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_BCONI   type ref to   ZCL_VCXI_FBSS_PR_BCONI.
    field-symbols: <T_MFSI>         type standard table.

***--------------------------------------------------------------------------------------
*** Find Provider for Connector In
    LT_GATE_BCONI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BCONI=>C_IPRVT_FB_BCONI
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE_BCONI into LR_GATE_BCONI.
      try.
          move LR_GATE_BCONI->R_CLSPR ?to LR_PR_BCONI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BCONI.
      endtry.
      check LR_PR_BCONI is bound.

***   Create Data Reference
      if RR_MFSI is not bound and
         <T_MFSI> is not assigned.
        create data RR_MFSI type table of ZVCXI_FBSR_S_MFSI_P.
        assign RR_MFSI->* to <T_MFSI>.
      endif.

      move LR_PR_BCONI->GET_GXCON( )    to LS_MFSI-IMFXC.

      move 100                          to LS_MFSI-MFISP.
      move '%'                          to LS_MFSI-MFISP_UOM.

      move 1                            to LS_MFSI-MFICF.
      move 1                            to LS_MFSI-MFICP.

      move ABAP_TRUE                    to LS_MFSI-NEXTL.

***   Get Bag Dimensions
      LR_PR_BCONI->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LS_MFSI-IBAGT ).
      LR_PR_BCONI->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_MFSI-S_BGWGT ).
      LR_PR_BCONI->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_MFSI-S_BGHEI ).
      LR_PR_BCONI->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_MFSI-S_BGWID ).

***   Alwasy 1 as Number of Outs and Number Ups
      move 1 to LS_MFSI-NOOUT.
      move 1 to LS_MFSI-NOUPS.

***   Append Material Flow SFG to Data Reference
      append LS_MFSI to <T_MFSI>.

    endloop.

  endmethod.
  method GET_PRVDR_CSTEP.

    data: LT_GATE_CSTEP type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Find Provider for Conversion Steps
    LT_GATE_CSTEP = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_CSTEP=>C_IPRVT_CSTEP
                                           IF_INUSE  = ABAP_TRUE ).
    append lines of LT_GATE_CSTEP to RT_PRVDR.

***--------------------------------------------------------------------------------------
*** Filter by Specification
    loop at RT_PRVDR into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE = IR_GATE_SPEC ) ne ABAP_TRUE.
        delete RT_PRVDR.
      endif.
    endloop.

*** Sort Resulting Provider
    ME->R_GATE->SORT_GATE( changing CT_GATE = RT_PRVDR ).

  endmethod.
  method GET_PRVDR_OUTPUT.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Get Provider of Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_OUTPUT=>C_IPRVT_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.
    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

***--------------------------------------------------------------------------------------
*** Find Child Provider for Output
    if ET_GATE_CHILD is requested.
      LT_PRVDR_DEF = ER_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        refresh LT_GATE.
        LT_GATE = ER_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                      IF_INUSE = ABAP_TRUE ).
        append lines of LT_GATE to ET_GATE_CHILD.
      endloop.
      sort ET_GATE_CHILD.
      delete adjacent duplicates from ET_GATE_CHILD.
    endif.

  endmethod.
  method HANDLE_DET_RHNDL_IN.

    data:  LT_RHNDL_IN type        ZVCXI_FFSR_TT_RHNDL.
    data:  LR_BL_PRTE  type ref to ZCL_VCXI_FBSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Get Ingoing Roll Handling of Selected Route
    try.
        move ME->R_RTESEL ?to LR_BL_PRTE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_BL_PRTE.
    endtry.
    if LR_BL_PRTE is bound.
      move LR_BL_PRTE->GET_RHNDL_IN( ) to LT_RHNDL_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Roll Handling Dimensions
    if LT_RHNDL_IN ne ME->T_RHNDL_IN.
***   Set new Value
      move LT_RHNDL_IN to ME->T_RHNDL_IN.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSR_RTESPV_RHNDL_IN~C_IEVNT_O_RHNDL_IN_CHANGED ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_DET_RHNDL_IN.
        ME->HANDLE_DET_RHNDL_IN( ).

    endcase.

  endmethod.
  method HANDLE_INIT_EVQTY.

    data: LF_TABIX type        I,
          LF_NOOUT type        ZVCXI_XCS_NOOUT,
          LF_MATNR type        MATNR.
    data: LS_EVQTY       type        ZVCXI_XCSR_S_EVQTY,
          LS_EVQTY_CHILD type        ZVCXI_XCSR_S_EVQTY.
    data: LT_GATE_CHILD  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BFG   type ref to ZCL_VCXI_FBSS_PR_BFG,
          LR_PR_BCONO type ref to ZCL_VCXI_FBSS_PR_BCONO.


***--------------------------------------------------------------------------------------
*** Get Evaluation Quantity
    move ME->GET_EVQTY( ) to LS_EVQTY.
    clear: LS_EVQTY-EVQTY.

*** Get Provider for Output including children
    ME->GET_PRVDR_OUTPUT( importing ET_GATE_CHILD = LT_GATE_CHILD ).

***--------------------------------------------------------------------------------------
*** Loop at all children (but only consider first as Bags don't support separation)
    loop at LT_GATE_CHILD into LR_GATE to 1.
      move SY-TABIX to LF_TABIX.

***   Check Gate is Finished Good
      clear LR_PR_BFG.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BFG.
      endtry.
      if LR_PR_BFG is bound.
***     Get Detials for BFG
        ME->GET_EVQTY_BY_BFG( exporting IR_GATE_BFG = LR_GATE
                              importing ES_EVQTY    = LS_EVQTY ).

      endif.

***   Check Gate is Bag Connection Out
      clear LR_PR_BCONO.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BCONO.
      endtry.
      if LR_PR_BCONO is bound.
***     Get Details for Bag Connection Out
        ME->GET_EVQTY_BY_BCONO( exporting IR_GATE_BCONO = LR_GATE
                                          IF_TABIX      = LF_TABIX
                                importing ES_EVQTY      = LS_EVQTY ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Evaluation Quantity
    ME->SET_EVQTY( IS_EVQTY = LS_EVQTY ).

  endmethod.
  method VALIDATE.

    SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***--------------------------------------------------------------------------------------
*** Determine the new Roll Handling inbound for the selected route
    read table CT_BL_PRTE with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
    if SY-SUBRC eq 0.
      ME->HANDLE_DET_RHNDL_IN( ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSR_RTESPV_RHNDL_IN~GET_RHNDL_IN.

    data: LT_IMFXC_IN         type        ZVCXI_XCSP_TT_IMFXC.

*** Get Inbound Connections
    ME->GET_IMFXC( importing ET_IMFXC_IN = LT_IMFXC_IN ).
    read table LT_IMFXC_IN with key TABLE_LINE = IF_IMFXC
                           transporting no fields.
    check SY-SUBRC eq 0.

*** Get corresponding Roll Handling
    read table ME->T_RHNDL_IN into RS_RHNDL_IN index SY-TABIX.

  endmethod.
