
class ZCL_VCXI_PXSS_PR_XPART definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_PREV
      abstract methods DO_FORWARD .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCS_NGREP .
  interfaces ZIF_VCXI_PXSS_FDSUB .

  constants C_IPRVT_PX_XPART type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XPART' ##NO_TEXT.

  methods GET_PRODH
  abstract
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_GCADO
    returning
      value(RF_GCADO) type ZVCXI_PXS_GCADO
    raising
      /VCXI/CX_CKX .
  methods GET_GXCON
    returning
      value(RF_GXCON) type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
  abstract
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFINFO
    exporting
      !EF_GXCON type ZVCXI_PXSS_GXCON
      !EF_MATNR type MATNR
      !EF_TEXT type TEXT30
      !EF_PURCH type ZVCXI_XCS_PURCH
      !EF_SANKA type SANKA
      !EF_LIFNR type LIFNR
      !ER_GATE_PSCALE_MGR type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PARAT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PARAT) type ZVCXI_PXS_PARAT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CSTEP_ASMBL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CSTEP_ASMBL) type ref to ZCL_VCXI_P3SS_PR_CSTEP_ASMBL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_XPROC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_XPROC) type ref to ZCL_VCXI_PXSS_PR_MS_XPROC
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_XCONI) type ref to ZCL_VCXI_PXSS_PR_XCONI
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_PARAT
    importing
      !IF_PARAT type ZVCXI_PXS_PARAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_AREA_WGT
    exporting
      !ER_GATE_AREA_WGT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_AREA_WGT) type ref to ZCL_VCXI_PXSS_PR_AREA_WGT
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_PARAT_CHANGED type /VCXI/VKSC_IEVNT value 'PARAT_CHANGED' ##NO_TEXT.
  constants C_PARID_PARAT type /VCXI/VKS_PARID value 'ZVCXI_PX_PARAT' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_MFINFO_CHANGED type /VCXI/VKSC_IEVNT value 'MFINFO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MFINFO type /VCXI/VKSC_IEVNT value 'RECALC_MFINFO' ##NO_TEXT.

  methods CHECK_PARAT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    returning
      value(RT_CSPLIT) type ZVCXI_PXSS_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_ONEUP
    exporting
      !ER_GATE_CADIF_ONEUP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_ONEUP) type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_XPART definition
class ZCL_VCXI_PXSS_PR_XPART implementation.
  method CHECK_PARAT.

    if ME->GET_PARAT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Part Ratio is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '501' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Part Ratio is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '502' ).
      endif.
    endif.

  endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.

    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_CADLS = LR_PR_CADIF_ONEUP->GET_CADLS( ).

  endmethod.
  method GET_CSPLIT.

    data: LR_PR_CSTEP_ASMBL type ref to ZCL_VCXI_P3SS_PR_CSTEP_ASMBL,
          LR_BL_ASBPROP     type ref to ZCL_VCXI_P3SS_BL_ASBPROP.


    LR_PR_CSTEP_ASMBL = ME->GET_PRVDR_CSTEP_ASMBL( ).
    check LR_PR_CSTEP_ASMBL is bound.

    LR_BL_ASBPROP = LR_PR_CSTEP_ASMBL->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX( ).
    check LR_BL_ASBPROP is bound.

    RT_CSPLIT = LR_BL_ASBPROP->T_CSPLIT.

  endmethod.
  method GET_DESCR.

    data: LR_PR_XCONI    type ref to ZCL_VCXI_PXSS_PR_XCONI,
          LR_PR_MS_XPROC type ref to ZCL_VCXI_PXSS_PR_MS_XPROC.


    RF_DESCR = SUPER->GET_DESCR( ).

    LR_PR_XCONI = ME->GET_PRVDR_XCONI( ).
    if LR_PR_XCONI is bound.
      RF_DESCR = LR_PR_XCONI->GET_DESCR( ).
    endif.

    LR_PR_MS_XPROC = ME->GET_PRVDR_MS_XPROC( ).
    if LR_PR_MS_XPROC is bound.
      RF_DESCR = LR_PR_MS_XPROC->GET_DESCR( ).
    endif.

  endmethod.
  method GET_GCADO.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.


    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_GCADO = LR_PR_CADIF_ONEUP->GET_GCADO( ).

  endmethod.
  method GET_GXCON.

    data: LR_PR_XCONI type ref to ZCL_VCXI_PXSS_PR_XCONI.


*** Get Connections Inbound
    LR_PR_XCONI = ME->GET_PRVDR_XCONI( ).
    check LR_PR_XCONI is bound.

*** Return its X-Connect GUID
    RF_GXCON = LR_PR_XCONI->GET_GXCON( ).

  endmethod.
  method GET_MFINFO.

    data: LR_PR_MS_XPROC   type ref to ZCL_VCXI_PXSS_PR_MS_XPROC,
          LR_GATE_MS_XPROC type ref to /VCXI/CL_VKSR_GATE.


    clear: EF_GXCON,
           EF_MATNR,
           EF_TEXT,
           EF_PURCH,
           EF_SANKA,
           EF_LIFNR,
           ER_GATE_PSCALE_MGR.

***------------------------------------------------------------------------------------------------
*** Look for Connection In
    EF_GXCON = ME->GET_GXCON( ).
    check EF_GXCON is initial.

***------------------------------------------------------------------------------------------------
*** Get Procurement
    LR_PR_MS_XPROC = ME->GET_PRVDR_MS_XPROC( importing ER_GATE = LR_GATE_MS_XPROC ).
    check LR_PR_MS_XPROC is bound.

*** Define as Material Flow Material In
    EF_MATNR           = LR_PR_MS_XPROC->GET_MATNR( ).
    EF_TEXT            = LR_PR_MS_XPROC->GET_TEXT( ).
    EF_PURCH           = LR_PR_MS_XPROC->GET_PURCH( ).
    EF_SANKA           = LR_PR_MS_XPROC->GET_SANKA( ).
    EF_LIFNR           = LR_PR_MS_XPROC->GET_LIFNR( ).
    ER_GATE_PSCALE_MGR = LR_GATE_MS_XPROC.

  endmethod.
  method GET_PARAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PARAT ).
    move LS_PARAM-ATFLV to RF_PARAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_AREA_WGT.

    data: LT_GATE type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Area & Weight provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_AREA_WGT=>C_IPRVT_PX_AREA_WGT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Area & Weight Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_AREA_WGT.
          check RR_PR_AREA_WGT is bound.
          move LR_GATE to ER_GATE_AREA_WGT.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_AREA_WGT, ER_GATE_AREA_WGT.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_CADIF_ONEUP.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get CAD Integration provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get CAD Integration Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_CADIF_ONEUP.
          check RR_PR_CADIF_ONEUP is bound.
          move LR_GATE to ER_GATE_CADIF_ONEUP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CADIF_ONEUP, ER_GATE_CADIF_ONEUP.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_CSTEP_ASMBL.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_CSTEP_ASMBL.

***------------------------------------------------------------------------------------------------
*** Find Provider for CStep Assembling
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P3SS_PR_CSTEP_ASMBL=>C_IPRVT_P3_CSTEP_ASMBL
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_CSTEP_ASMBL.

  endmethod.
  method GET_PRVDR_MS_XPROC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MS_XPROC.

***------------------------------------------------------------------------------------------------
*** Find Provider for MS Procurement
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_IPRVT_PX_MS_XPROC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_MS_XPROC.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_PRVDR_XCONI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_XCONI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Connection In
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_XCONI.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Part Ratio
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PARAT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Part Ratio
    ME->CHECK_PARAT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.


    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.

    if EF_DESCR is requested.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( importing EF_DESCR = EF_DESCR ).
    else.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Event Backwarding/Forwardin for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_BACKWARD_REQ ).
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).

***   Material Flow Info
      when C_IEVNT_I_RECALC_MFINFO.
        ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFINFO_CHANGED ).

    endcase.

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_PARAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PARAT ).

    move IF_PARAT to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PARAT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_XPART> type ZVCXI_PXSS_S_FDI_XPART.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_XPART.
    assign RR_DATA->* to <S_FDI_XPART>.


***------------------------------------------------------------------------------------------------
*** Get Part Ratio
    <S_FDI_XPART>-PARAT = ME->GET_PARAT( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_XPART_OLD type ZVCXI_PXSS_S_FDI_XPART,
          LS_FDI_XPART_NEW type ZVCXI_PXSS_S_FDI_XPART.
    data: LR_DATA_OLD   type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_XPART_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_XPART_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Part Ratio
    if LS_FDI_XPART_OLD-PARAT ne LS_FDI_XPART_NEW-PARAT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'PARAT' ] ).
      ME->SET_PARAT( IF_PARAT = LS_FDI_XPART_NEW-PARAT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDSUB~GET_PRVDR_MS_XPROC.

    RR_PR_MS_XPROC = ME->GET_PRVDR_MS_XPROC( importing ER_GATE = ER_GATE ).

  endmethod.
  method ZIF_VCXI_PXSS_FDSUB~GET_PRVDR_XCONI.

    RR_PR_XCONI = ME->GET_PRVDR_XCONI( importing ER_GATE = ER_GATE ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LR_GATE_XCONI       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_MS_XPROC    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CSTEP_ASMBL type ref to /VCXI/CL_VKSR_GATE.


*** Get Assembly Conversion Step
    ME->GET_PRVDR_CSTEP_ASMBL( importing ER_GATE = LR_GATE_CSTEP_ASMBL ).

***--------------------------------------------------------------------------------------
*** Get Connection In
    ME->GET_PRVDR_XCONI( importing ER_GATE = LR_GATE_XCONI ).

    if LR_GATE_XCONI is not initial.

***   Register Connection In to Assembly Step
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_XCONI
                                          IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_ASMBL ) ).

    endif.

***--------------------------------------------------------------------------------------
*** Get Procurement
    ME->GET_PRVDR_MS_XPROC( importing ER_GATE = LR_GATE_MS_XPROC ).

    if LR_GATE_MS_XPROC is not initial.

      if LR_GATE_MS_XPROC->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
        cast ZIF_VCXI_XCS_NGREP( LR_GATE_MS_XPROC->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                    changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
      endif.

***   Add Line to Assembly Step
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_MS_XPROC )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_ASMBL ) ).

    endif.

***--------------------------------------------------------------------------------------
*** Handle X-Part itself
    if LR_GATE_XCONI    is initial and
       LR_GATE_MS_XPROC is initial.

***   Add Node for Procurement
      data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = ME->R_GATE->GET_DESCR( )
                                                      IF_DESCR      = ME->R_GATE->GET_DESCR( )
                                                      IF_ICON       = 'sap-icon://blur'
                                                      IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                      IF_GROUP_KEY  = IF_GROUP_KEY ).

***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                          IF_NODE_KEY = LF_NODE_KEY ).

***   Add Line to Assembly Step
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( ME->R_GATE )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_ASMBL ) ).

    endif.

  endmethod.
