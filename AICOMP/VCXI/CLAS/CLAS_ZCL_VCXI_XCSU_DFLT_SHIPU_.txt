
class ZCL_VCXI_XCSU_DFLT_SHIPU definition
  public
  create public .

public section.

  types:
    begin of YS_INSTANCE,
                                KUNNR_WE   type        KUNNR,
                                KUNNR_AG   type        KUNNR,
                                VKORG      type        VKORG,
                                VTWEG      type        VTWEG,
                                SPART      type        SPART,
                                DCONF      type        /VCXI/VKCR_DCONF,
                                WERKS      type        WERKS_D,
                                SHSCH      type        ZVCXI_XCSU_SHSCH,
                                CPACK      type        ZVCXI_XCSU_CPACK,
                                CMATN      type        /VCXI/VKC_CMATN,
                                PRFID      type        /VCXI/VKC_PRFID,
                                R_INSTANCE type ref to ZCL_VCXI_XCSU_DFLT_SHIPU,
                              end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .

  constants C_ISOUR_ALL type ZVCXI_XCSU_ISOUR value 'ALL' ##NO_TEXT.
  constants C_ISOUR_CPACK type ZVCXI_XCSU_ISOUR value 'CPACK' ##NO_TEXT.
  constants C_ISOUR_GLOBAL type ZVCXI_XCSU_ISOUR value 'GLOBL' ##NO_TEXT.
  constants C_ISOUR_PLANT type ZVCXI_XCSU_ISOUR value 'PLANT' ##NO_TEXT.
  constants C_ISOUR_SHIPTO type ZVCXI_XCSU_ISOUR value 'WE' ##NO_TEXT.
  constants C_ISOUR_SOLDTO type ZVCXI_XCSU_ISOUR value 'AG' ##NO_TEXT.
  constants C_ISOUR_STD type ZVCXI_XCSU_ISOUR value 'STD' ##NO_TEXT.
  constants C_ISOUR_USER type ZVCXI_XCSU_ISOUR value 'USER' ##NO_TEXT.
  constants C_IVALU_CONSC type ZVCXI_XCSU_IVALU value 'CONSC' ##NO_TEXT.
  constants C_IVALU_DIMEN type ZVCXI_XCSU_IVALU value 'DIMEN' ##NO_TEXT.
  constants C_IVALU_DIMVA type ZVCXI_XCSU_IVALU value 'DIMVA' ##NO_TEXT.
  constants C_IVALU_LIMIT type ZVCXI_XCSU_IVALU value 'LIMIT' ##NO_TEXT.
  constants C_IVALU_PACKP type ZVCXI_XCSU_IVALU value 'PACKP' ##NO_TEXT.
  constants C_IVALU_PAMAI type ZVCXI_XCSU_IVALU value 'PAMAI' ##NO_TEXT.
  constants C_IVALU_PMATN type ZVCXI_XCSU_IVALU value 'PMATN' ##NO_TEXT.
  constants C_IVALU_PMATY type ZVCXI_XCSU_IVALU value 'PMATY' ##NO_TEXT.
  constants C_IVALU_PMQTY type ZVCXI_XCSU_IVALU value 'PMQTY' ##NO_TEXT.
  constants C_IVALU_PRQTY type ZVCXI_XCSU_IVALU value 'PRQTY' ##NO_TEXT.
  constants C_IVALU_SAQTY type ZVCXI_XCSU_IVALU value 'SAQTY' ##NO_TEXT.
  constants C_IVALU_SHUNT type ZVCXI_XCSU_IVALU value 'SHUNT' ##NO_TEXT.
  constants C_IVALU_SHUTY type ZVCXI_XCSU_IVALU value 'SHUTY' ##NO_TEXT.
  data F_CMATN type /VCXI/VKC_CMATN read-only .
  data F_CNTXT type ZVCXI_XCS_CNTXT read-only .
  data F_DCONF type /VCXI/VKCR_DCONF read-only .
  data F_KUNNR_AG type KUNNR read-only .
  data F_KUNNR_WE type KUNNR read-only .
  data F_PRFID type /VCXI/VKC_PRFID read-only .
  data F_SPART type SPART read-only .
  data F_SYSOM type /VCXI/VKS_SYSOM read-only .
  data F_VKORG type VKORG read-only .
  data F_VTWEG type VTWEG read-only .
  data F_WERKS type WERKS_D read-only .
  data R_APPDATA type ref to OBJECT read-only .
  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU read-only .
  data S_DFLT_SHIP_MGR type ZVCXI_XCSU_S_DFLT_SHIP_MGR read-only .
  data T_DFLT_SHUTY type ZVCXI_XCSU_TT_DFLT_SHUTY read-only .

  methods REDET_DFLT
    importing
      !IT_SHUTY_DFLT_DEF type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF
    returning
      value(RF_CHANGED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_KUNNR_WE type KUNNR
      !IF_VKORG type VKORG
      !IF_VTWEG type VTWEG
      !IF_SPART type SPART
      !IF_KUNNR_AG type KUNNR
      !IF_DCONF type /VCXI/VKCR_DCONF
      !IR_APPDATA type ref to OBJECT
      !IF_WERKS type WERKS_D
      !IF_CPACK type ZVCXI_XCSU_CPACK
      !IF_CMATN type /VCXI/VKC_CMATN
      !IF_PRFID type /VCXI/VKC_PRFID
      !IF_CNTXT type ZVCXI_XCS_CNTXT
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
      !IF_SYSOM type /VCXI/VKS_SYSOM
      !IR_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_IELSH_ACTIV type ZVCXI_XCSU_IELSH value 'ACTIV' ##NO_TEXT.
  constants C_IELSH_CONSC type ZVCXI_XCSU_IELSH value 'CONSC' ##NO_TEXT.
  constants C_IELSH_PACKP type ZVCXI_XCSU_IELSH value 'PACKP' ##NO_TEXT.
  constants C_IELSH_PAMAI type ZVCXI_XCSU_IELSH value 'PAMAI' ##NO_TEXT.
  constants C_IELSH_PMATN type ZVCXI_XCSU_IELSH value 'PMATN' ##NO_TEXT.
  constants C_IELSH_PMQTY type ZVCXI_XCSU_IELSH value 'PMQTY' ##NO_TEXT.
  constants C_IELSH_PMQTY_UOM type ZVCXI_XCSU_IELSH value 'PMQTY_UOM' ##NO_TEXT.
  constants C_IELSH_PRQTY type ZVCXI_XCSU_IELSH value 'PRQTY' ##NO_TEXT.
  constants C_IELSH_SAQTY type ZVCXI_XCSU_IELSH value 'SAQTY' ##NO_TEXT.
  constants C_PRQTY_UOM type UNIT value 'ST' ##NO_TEXT.
  constants C_SAQTY_UOM type UNIT value 'ST' ##NO_TEXT.
  data R_DFLT_AG type ref to ZCL_VCXI_XCSUC_DFLT .
  data R_DFLT_ALL type ref to ZCL_VCXI_XCSUC_DFLT .
  data R_DFLT_GLOBAL type ref to ZCL_VCXI_XCSUC_DFLT .
  data R_DFLT_WE type ref to ZCL_VCXI_XCSUC_DFLT .
  data R_DFLT_WERKS type ref to ZCL_VCXI_XCSUC_DFLT .
  data R_SHMAP type ref to ZCL_VCXI_XCSUC_SHMAP .
  data T_SHUTY_DFLT_DEF type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF .

  methods CHECK_SHUNT_P_DFLT
    importing
      !IF_ISOUR type ZVCXI_XCSU_ISOUR
      !IS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT
    changing
      !CT_SHUNT_P_DFLT type ZVCXI_XCSU_TT_SHUNT_P_DFLT
      !CT_SHUNT_P_EXCL type ZVCXI_XCSU_TT_SHUNT_P_DFLT
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHUTY_DFLT
    importing
      !IF_ISOUR type ZVCXI_XCSU_ISOUR
      !IS_SHUTY_DFLT type ZVCXI_XCSU_S_SHUTY_DFLT
    changing
      !CT_SHUTY_DFLT type ZVCXI_XCSU_TT_SHUTY_DFLT
      !CT_SHUTY_EXCL type ZVCXI_XCSU_TT_SHUTY_DFLT
    raising
      /VCXI/CX_CKX .
  methods SET_SHUTY_DFLT_DEF
    raising
      /VCXI/CX_CKX .
  methods CREATE_SHUTY_DFLT_DEF
    exceptions
      /VCXI/CX_CKX .
  methods SET_PMATY_DFLT_DEF
    raising
      /VCXI/CX_CKX .
  methods ADD_VASRC
    importing
      !IF_IVALU type ZVCXI_XCSU_IVALU
      !IF_ISOUR type ZVCXI_XCSU_ISOUR
    changing
      !CT_VASRC type ZVCXI_XCSU_TT_VASRC
    raising
      /VCXI/CX_CKX .
  methods LOAD_SHUTY_DETAILS
    raising
      /VCXI/CX_CKX .
  methods LOAD_SHUTY
    raising
      /VCXI/CX_CKX .
  methods LOAD_SHUNT_PMATY
    raising
      /VCXI/CX_CKX .
  methods LOAD_PMATY
    raising
      /VCXI/CX_CKX .
  methods LOAD_PMATY_DETAILS
    raising
      /VCXI/CX_CKX .
  methods LOAD_SHUNT_LIMITS
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_IELSH_VALUE
    importing
      !IF_IELSH type ZVCXI_XCSU_IELSH
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    exporting
      !EF_VALUE type ANY
      !EF_UNIT type ANY
      !EF_ISOUR type ZVCXI_XCSU_ISOUR
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH_DFLT
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_DFLT
    returning
      value(RT_SHUTY_DFLT) type ZVCXI_XCSU_TT_SHUTY_DFLT
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_ACTIV
    returning
      value(RT_PMATY_ACTIV) type ZVCXI_XCSU_TT_PMATY_ACTIV_MAP
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_ACTIV
    returning
      value(RT_SHUTY_ACTIV) type ZVCXI_XCSU_TT_SHUTY_ACTIV_MAP
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_P_DFLT
    returning
      value(RT_SHUNT_P_DFLT) type ZVCXI_XCSU_TT_SHUNT_P_DFLT
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_LIMIT_VALUE
    importing
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    exporting
      !EF_ISOUR type ZVCXI_XCSU_ISOUR
      !ES_DIMVA type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_DFLT
    returning
      value(RT_SHUNT_DFLT) type ZVCXI_XCSU_TT_SHUNT_DFLT
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_IELSH_VALUE
    importing
      !IF_IELSH type ZVCXI_XCSU_IELSH
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    exporting
      !EF_VALUE type ANY
      !EF_UNIT type ANY
      !EF_ISOUR type ZVCXI_XCSU_ISOUR
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_DFLT
    returning
      value(RT_PMATY_DFLT) type ZVCXI_XCSU_TT_PMATY_DFLT
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_CPACK
    returning
      value(RT_PMATY_CPACK) type ZVCXI_XCSUC_TT_PMATY_CPACK
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_L_DFLT
    returning
      value(RT_SHUNT_LIM_DFLT) type ZVCXI_XCSU_TT_SHUNT_L_DFLT
    raising
      /VCXI/CX_CKX .
  methods CREATE_DFLT_DATA
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH optional
    preferred parameter IF_SHSCH
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_DFLT_SHIPU definition
class ZCL_VCXI_XCSU_DFLT_SHIPU implementation.
method ADD_VASRC.

  field-symbols: <S_VASRC> type ZVCXI_XCSU_S_VASRC.

*** Get already existing Entry and override Source
  read table CT_VASRC with key IVALU = IF_IVALU assigning <S_VASRC>.

*** Create new Entry
  if SY-SUBRC ne 0.
    append initial line to CT_VASRC assigning <S_VASRC>.
    <S_VASRC>-IVALU = IF_IVALU.
  endif.

*** Update Source
  <S_VASRC>-ISOUR = IF_ISOUR.

endmethod.
method CHECK_SHUNT_P_DFLT.

  field-symbols: <S_SHUNT_P_DFLT> type ZVCXI_XCSU_S_SHUNT_P_DFLT,
                 <S_SHUNT_P_EXCL> type ZVCXI_XCSU_S_SHUNT_P_DFLT.

  case IS_SHUNT_P_DFLT-FEXCL.
    when ABAP_FALSE.
      read table CT_SHUNT_P_DFLT with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                          PMATY = IS_SHUNT_P_DFLT-PMATY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      read table CT_SHUNT_P_EXCL with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                          PMATY = IS_SHUNT_P_DFLT-PMATY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to CT_SHUNT_P_DFLT assigning <S_SHUNT_P_DFLT>.
      move-corresponding IS_SHUNT_P_DFLT to <S_SHUNT_P_DFLT>.
      move IF_ISOUR to <S_SHUNT_P_DFLT>-ISOUR.

    when ABAP_TRUE.
      read table CT_SHUNT_P_DFLT with key SHUNT = IS_SHUNT_P_DFLT-SHUNT
                                          PMATY = IS_SHUNT_P_DFLT-PMATY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to CT_SHUNT_P_EXCL assigning <S_SHUNT_P_EXCL>.
      move-corresponding IS_SHUNT_P_DFLT to <S_SHUNT_P_EXCL>.

  endcase.

endmethod.
method CHECK_SHUTY_DFLT.

  field-symbols: <S_SHUTY_DFLT> type ZVCXI_XCSU_S_SHUTY_DFLT,
                 <S_SHUTY_EXCL> type ZVCXI_XCSU_S_SHUTY_DFLT.

  case IS_SHUTY_DFLT-FEXCL.
    when ABAP_FALSE.
      read table CT_SHUTY_DFLT with key SHUTY = IS_SHUTY_DFLT-SHUTY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      read table CT_SHUTY_EXCL with key SHUTY = IS_SHUTY_DFLT-SHUTY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to CT_SHUTY_DFLT assigning <S_SHUTY_DFLT>.
      move-corresponding IS_SHUTY_DFLT to <S_SHUTY_DFLT>.
      move IF_ISOUR to <S_SHUTY_DFLT>-ISOUR.

    when ABAP_TRUE.
      read table CT_SHUTY_DFLT with key SHUTY = IS_SHUTY_DFLT-SHUTY
                                   transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to CT_SHUTY_EXCL assigning <S_SHUTY_EXCL>.
      move-corresponding IS_SHUTY_DFLT to <S_SHUTY_EXCL>.

  endcase.

endmethod.
method CONSTRUCTOR.

  data:          LF_GUID        type        /VCXI/CKX_GUID.
  data:          LT_DFLT        type        ZVCXI_XCSUC_TT_DFLT.
  data:          LS_DFLT        type        ZVCXI_XCSUC_S_DFLT.
  data:          LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

  move IF_KUNNR_WE   to ME->F_KUNNR_WE.
  move IF_KUNNR_AG   to ME->F_KUNNR_AG.
  move IF_VKORG      to ME->F_VKORG.
  move IF_VTWEG      to ME->F_VTWEG.
  move IF_SPART      to ME->F_SPART.
  move IF_DCONF      to ME->F_DCONF.
  move IF_WERKS      to ME->F_WERKS.
  move IF_CMATN      to ME->F_CMATN.
  move IF_PRFID      to ME->F_PRFID.
  move IF_CNTXT      to ME->F_CNTXT.
  move IF_SYSOM      to ME->F_SYSOM.
  move IF_SHSCH      to ME->S_DFLT_SHIP_MGR-SHSCH.
  move IF_CPACK      to ME->S_DFLT_SHIP_MGR-CPACK.
  move IR_APPDATA    to ME->R_APPDATA.
  move IR_CUST_SHIPU to ME->R_CUST_SHIPU.

***---------------------------------------------------------------------------------
*** Load Shipping Info Mapping
  LR_OBJECT = ZCL_VCXI_XCSUC_SHMAP=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ME->R_CUST_SHIPU->F_OWNER ).
  try.
      move LR_OBJECT ?to   ME->R_SHMAP.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_SHMAP.
  endtry.

*** Load Instance of Defaulting Customizing
  select * from ZVCXI_XCS_TD400 into corresponding fields of table LT_DFLT.
*** load Global
  read table LT_DFLT into LS_DFLT with key VKORG = SPACE
                                           VTWEG = SPACE
                                           SPART = SPACE
                                           WERKS = SPACE
                                           KUNNR = SPACE.

  if SY-SUBRC = 0.
    clear: LF_GUID.
    move LS_DFLT-GDFLT to LF_GUID.
    LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to ME->R_DFLT_GLOBAL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DFLT_GLOBAL.
    endtry.
  endif.

  clear: LS_DFLT.

*** Load overall
  read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                           VTWEG = IF_VTWEG
                                           SPART = IF_SPART
                                           WERKS = SPACE
                                           KUNNR = SPACE.

  if SY-SUBRC = 0.
    clear: LF_GUID.
    move LS_DFLT-GDFLT to LF_GUID.
    LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to ME->R_DFLT_ALL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DFLT_ALL.
    endtry.
  endif.

  clear: LS_DFLT.
*** Load Plant specific
  read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                           VTWEG = IF_VTWEG
                                           SPART = IF_SPART
                                           WERKS = IF_WERKS
                                           KUNNR = SPACE.

  if SY-SUBRC = 0.
    clear: LF_GUID.
    move LS_DFLT-GDFLT to LF_GUID.
    LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to ME->R_DFLT_WERKS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DFLT_WERKS.
    endtry.
  endif.

  clear: LS_DFLT.
*** Load Sold To Specific
  read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                           VTWEG = IF_VTWEG
                                           SPART = IF_SPART
                                           WERKS = IF_WERKS
                                           KUNNR = IF_KUNNR_AG.
  if SY-SUBRC ne 0.
*** Load SoldTo specific without plant
    read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                             VTWEG = IF_VTWEG
                                             SPART = IF_SPART
                                             WERKS = SPACE
                                             KUNNR = IF_KUNNR_AG.
  endif.

  if SY-SUBRC = 0.
    clear: LF_GUID.
    move LS_DFLT-GDFLT to LF_GUID.
    LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to ME->R_DFLT_AG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DFLT_AG.
    endtry.
  endif.

  clear: LS_DFLT.
*** Load ShipTo specific
  read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                           VTWEG = IF_VTWEG
                                           SPART = IF_SPART
                                           WERKS = IF_WERKS
                                           KUNNR = IF_KUNNR_WE.
  if SY-SUBRC ne 0.
*** Load ShipTo specific without plant
    read table LT_DFLT into LS_DFLT with key VKORG = IF_VKORG
                                             VTWEG = IF_VTWEG
                                             SPART = IF_SPART
                                             WERKS = SPACE
                                             KUNNR = IF_KUNNR_WE.
  endif.
  if SY-SUBRC = 0.
    clear: LF_GUID.
    move LS_DFLT-GDFLT to LF_GUID.
    LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to ME->R_DFLT_WE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_DFLT_WE.
    endtry.
  endif.


***---------------------------------------------------------------------------------
*** Start Create Defaulting Data
  if ME->S_DFLT_SHIP_MGR-SHSCH is initial.
    ME->S_DFLT_SHIP_MGR-SHSCH = ME->CREATE_DFLT_DATA( IF_SHSCH = ME->S_DFLT_SHIP_MGR-SHSCH ).
  else.
    ME->CREATE_DFLT_DATA( ).
  endif.

endmethod.
  method CREATE_DFLT_DATA.

***---------------------------------------------------------------------------------
*** Load Shipping Scheme
    if IF_SHSCH is supplied and
       IF_SHSCH is initial.
      RF_SHSCH = ME->GET_SHSCH_DFLT( ).
      if RF_SHSCH is not initial.
        ME->S_DFLT_SHIP_MGR-SHSCH = RF_SHSCH.
      endif.
    endif.

***---------------------------------------------------------------------------------
*** Load Shipping Unit Types Structure
    ME->LOAD_SHUTY( ).

*** Set Shipping Unit Type Default Definition
    ME->SET_SHUTY_DFLT_DEF( ).

***---------------------------------------------------------------------------------
*** Load Shipping Unit Type Details
    ME->LOAD_SHUTY_DETAILS( ).

***---------------------------------------------------------------------------------
*** Load Shipping Unit Limits
    ME->LOAD_SHUNT_LIMITS( ).

***---------------------------------------------------------------------------------
*** Load Shipping Unit Packaging Materials
    ME->LOAD_SHUNT_PMATY( ).

*** Create Default Definition of Shipping Unit Type
    ME->CREATE_SHUTY_DFLT_DEF( ).

  endmethod.
method CREATE_SHUTY_DFLT_DEF.

  data:          LS_DFLT_SHUTY      type ZVCXI_XCSU_S_DFLT_SHUTY,
                 LS_DFLT_PMATY      type ZVCXI_XCSU_S_DFLT_PMATY.
  field-symbols: <S_SHUTY_DFLT_DEF> type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
                 <S_PMATY_DFLT_DEF> type ZVCXI_XCSU_S_PMATY_DFLT_DEF.

  check ME->T_SHUTY_DFLT_DEF is initial.

  loop at ME->T_DFLT_SHUTY into LS_DFLT_SHUTY.
    append initial line to ME->T_SHUTY_DFLT_DEF assigning <S_SHUTY_DFLT_DEF>.
    move-corresponding LS_DFLT_SHUTY to <S_SHUTY_DFLT_DEF>.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to <S_SHUTY_DFLT_DEF>-SETBY.
    loop at LS_DFLT_SHUTY-T_DFLT_PMATY into LS_DFLT_PMATY.
      append initial line to <S_SHUTY_DFLT_DEF>-T_PMATY_DFLT_DEF assigning <S_PMATY_DFLT_DEF>.
      move-corresponding LS_DFLT_PMATY to <S_PMATY_DFLT_DEF>.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to <S_PMATY_DFLT_DEF>-SETBY.
    endloop.
  endloop.

endmethod.
method GET_PMATY_ACTIV.

  data:          LF_OBJNUM              type        OBJNUM,
                 LF_ACTIV               type        ABAP_BOOL,
                 LF_ISOUR               type        ZVCXI_XCSU_ISOUR.
  data:          LS_PMATY_MAP           type        ZVCXI_XCSUC_S_PMATY_MAP,
                 LS_DSRC_MAP            type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SETVA               type        /VCXI/CKXC_S_SETVA,
                 LS_MAPVC               type        /VCXI/CKXC_S_MAPVC.
  data:          LT_DSRC_MAP            type        ZVCXI_XCSUC_TT_DSRC_MAP,
                 LT_SETVA               type        /VCXI/CKXC_TT_SETVA.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_PMATY_ACTIV>        type        ZVCXI_XCSU_S_PMATY_ACTIV_MAP,
                 <F_FIELD>              type        any.

*** -----------------------------------------------------------------------
*** Start only if Mapping is active
  check ME->R_SHMAP is bound.

*** -----------------------------------------------------------------------
*** Start Searching
  loop at ME->R_SHMAP->T_PMATY_MAP into LS_PMATY_MAP
    where IELSH = C_IELSH_ACTIV.

    move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
    sort LT_DSRC_MAP by DPRIO.
    loop at LT_DSRC_MAP into LS_DSRC_MAP
            where GDSRC = LS_PMATY_MAP-GDSRC.

*** -----------------------------------------------------------------------
***   Try to Map Data Field of Application Data if it is not initial.
      if LS_DSRC_MAP-APDAF is not initial.
        assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF) to <F_FIELD>.
        if SY-SUBRC = 0.

***       Do Conversion if we found a conversion Exit Function Module
          if <F_FIELD> is not initial.
            if LS_DSRC_MAP-FCONV is not initial.
              try.
                  call function LS_DSRC_MAP-FCONV
                    exporting
                      IF_VALUE = <F_FIELD>
                    importing
                      EF_VALUE = LF_ACTIV.
                catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
                catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_NOT_FOUND ).
                catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_MISSING ).
                catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_DYN_CALL_ERROR ).
              endtry.
            else.
              move <F_FIELD> to LF_ACTIV.
            endif.
          endif.

          unassign <F_FIELD>.
        endif.
      endif.

***   if we have a value found -> Exit.
      if LF_ACTIV is not initial.
***     Get Source
        if LS_DSRC_MAP-APDAF cp C_ISOUR_SOLDTO.
          move C_ISOUR_SOLDTO to LF_ISOUR.
        else.
          move C_ISOUR_SHIPTO to LF_ISOUR.
        endif.
        exit.
      endif.

*** -----------------------------------------------------------------------
***   Try to Get Value By Mapping Set and Mapping ID if it is not initial
      if LS_DSRC_MAP-SETID is not initial and
         LS_DSRC_MAP-MAPID is not initial.

*** ------------------------------------------------------------------------
***     Get Customer Information 1. Ship-to
        move ME->F_KUNNR_WE to LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                                 IF_OBJNUM = LF_OBJNUM ).

        loop at LT_SETVA into LS_SETVA.
          clear: LS_MAPVC.

          check LS_SETVA-MAPID eq LS_DSRC_MAP-MAPID.
          read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
          move LS_MAPVC-VAMAP         to LF_ACTIV.

        endloop.

***     if we have a value found -> Exit.
        if LF_ACTIV is not initial.
          move C_ISOUR_SHIPTO to LF_ISOUR.
          exit.
        endif.

*** ------------------------------------------------------------------------
***     Get Customer Information 2. Sold-to
        move ME->F_KUNNR_AG to LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                                 IF_OBJNUM = LF_OBJNUM ).

        loop at LT_SETVA into LS_SETVA.
          clear: LS_MAPVC.

          check LS_SETVA-MAPID eq LS_DSRC_MAP-MAPID.
          read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
          move LS_MAPVC-VAMAP         to LF_ACTIV.

        endloop.

      endif.

***   if we have a value found -> Exit.
      if LF_ACTIV is not initial.
        move C_ISOUR_SOLDTO to LF_ISOUR.
        exit.
      endif.

    endloop.

    check LF_ACTIV eq 'Y'.
    append initial line to RT_PMATY_ACTIV assigning <S_PMATY_ACTIV>.
    move-corresponding LS_PMATY_MAP to <S_PMATY_ACTIV>.
    move LF_ISOUR                   to <S_PMATY_ACTIV>-ISOUR.

  endloop.

endmethod.
method GET_PMATY_CPACK.

  data: LS_PMATY_CPACK type        ZVCXI_XCSUC_S_PMATY_CPACK,
        LS_CPACK_SHUTY type        ZVCXI_XCSUC_S_CPACK_SHUTY,
        LS_CPACK_PMATY type        ZVCXI_XCSUC_S_CPACK_PMATY.
  data: LF_GUID        type        /VCXI/CKX_GUID,
        LF_PAMAI       type        ZVCXI_XCSU_PAMAI,
        LF_INDEX       type        I.
  data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
        LR_CPACK       type ref to ZCL_VCXI_XCSUC_CPACK.

*** -----------------------------------------------------------------------
*** Get Packaging Code Customizing Data
  move ME->S_DFLT_SHIP_MGR-CPACK to LF_GUID.
  check LF_GUID is not initial.

  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.

*** -----------------------------------------------------------------------
*** Check Each Packaging Code if it is needed
  loop at LR_CPACK->T_CPACK_SHUTY into LS_CPACK_SHUTY
  where WERKS = ME->F_WERKS or
        WERKS is initial.

    loop at LR_CPACK->T_CPACK_PMATY into LS_CPACK_PMATY
    where GPSUN = LS_CPACK_SHUTY-GPSUN.
      clear: LF_PAMAI, LS_PMATY_CPACK.

*** -----------------------------------------------------------------------
***   Get Packaging Material Information from Shipping Mapping
      ME->GET_PMATY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_PAMAI
                                           IF_PMATY = LS_CPACK_PMATY-PMATY
                                           IF_SHUTY = LS_CPACK_SHUTY-SHUTY
                                           IF_SHUNT = LS_CPACK_SHUTY-SHUNT
                                 importing EF_VALUE = LF_PAMAI ).
      if LF_PAMAI eq LS_CPACK_PMATY-PAMAI.

        move-corresponding LS_CPACK_SHUTY to LS_PMATY_CPACK.
        move-corresponding LS_CPACK_PMATY to LS_PMATY_CPACK.
        collect LS_PMATY_CPACK into RT_PMATY_CPACK.

      endif.

    endloop.
  endloop.

*** -----------------------------------------------------------------------
*** Delete Duplicates
  delete adjacent duplicates from RT_PMATY_CPACK comparing WERKS CPACK SHUTY SHUNT PAMAI PMATY.

*** -----------------------------------------------------------------------
*** Delte all Packaging Code Information which is not specific enough
  loop at RT_PMATY_CPACK into LS_PMATY_CPACK
  where WERKS is not initial.

    clear: LF_INDEX.

    read table RT_PMATY_CPACK with key WERKS = SPACE
                                       CPACK = LS_PMATY_CPACK-CPACK
                                       SHUTY = LS_PMATY_CPACK-SHUTY
                                       SHUNT = LS_PMATY_CPACK-SHUNT
                                       PAMAI = LS_PMATY_CPACK-PAMAI
                                       PMATY = LS_PMATY_CPACK-PMATY
                              transporting no fields.
    move SY-TABIX to LF_INDEX.

    check LF_INDEX is not initial.
    delete RT_PMATY_CPACK index LF_INDEX.

  endloop.

endmethod.
method GET_PMATY_DFLT.

  data:          LS_PMATY_DFLT  type ZVCXI_XCSUC_S_PMATY_DFLT.
  field-symbols: <S_PMATY_DFLT> type ZVCXI_XCSU_S_PMATY_DFLT.

  if ME->R_DFLT_WE is bound.
    loop at ME->R_DFLT_WE->T_PMATY_DFLT into LS_PMATY_DFLT.
      read table RT_PMATY_DFLT with key PMATY = LS_PMATY_DFLT-PMATY
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_PMATY_DFLT assigning <S_PMATY_DFLT>.
      move-corresponding LS_PMATY_DFLT to <S_PMATY_DFLT>.
      move C_ISOUR_SHIPTO to <S_PMATY_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_AG is bound.
    loop at ME->R_DFLT_AG->T_PMATY_DFLT into LS_PMATY_DFLT.
      read table RT_PMATY_DFLT with key PMATY = LS_PMATY_DFLT-PMATY
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_PMATY_DFLT assigning <S_PMATY_DFLT>.
      move-corresponding LS_PMATY_DFLT to <S_PMATY_DFLT>.
      move C_ISOUR_SOLDTO to <S_PMATY_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_WERKS is bound.
    loop at ME->R_DFLT_WERKS->T_PMATY_DFLT into LS_PMATY_DFLT.
      read table RT_PMATY_DFLT with key PMATY = LS_PMATY_DFLT-PMATY
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_PMATY_DFLT assigning <S_PMATY_DFLT>.
      move-corresponding LS_PMATY_DFLT to <S_PMATY_DFLT>.
      move C_ISOUR_PLANT to <S_PMATY_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_ALL is bound.
    loop at ME->R_DFLT_ALL->T_PMATY_DFLT into LS_PMATY_DFLT.
      read table RT_PMATY_DFLT with key PMATY = LS_PMATY_DFLT-PMATY
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_PMATY_DFLT assigning <S_PMATY_DFLT>.
      move-corresponding LS_PMATY_DFLT to <S_PMATY_DFLT>.
      move C_ISOUR_ALL to <S_PMATY_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_GLOBAL is bound.
    loop at ME->R_DFLT_GLOBAL->T_PMATY_DFLT into LS_PMATY_DFLT.
      read table RT_PMATY_DFLT with key PMATY = LS_PMATY_DFLT-PMATY
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_PMATY_DFLT assigning <S_PMATY_DFLT>.
      move-corresponding LS_PMATY_DFLT to <S_PMATY_DFLT>.
      move C_ISOUR_GLOBAL to <S_PMATY_DFLT>-ISOUR.
    endloop.
  endif.

endmethod.
method GET_PMATY_IELSH_VALUE.

  data:          LF_OBJNUM              type        OBJNUM,
                 LF_VALUE               type        ZVCXI_XCSU_DIMVA,
                 LF_UNIT                type        UNIT.
  data:          LS_PMATY_MAP           type        ZVCXI_XCSUC_S_PMATY_MAP,
                 LS_DSRC_MAP            type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SETVA               type        /VCXI/CKXC_S_SETVA,
                 LS_MAPVC               type        /VCXI/CKXC_S_MAPVC,
                 LS_MAPVN               type        /VCXI/CKXC_S_MAPVN.
  data:          LT_DSRC_MAP            type        ZVCXI_XCSUC_TT_DSRC_MAP,
                 LT_SETVA               type        /VCXI/CKXC_TT_SETVA.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <F_VALUE>              type        any,
                 <F_UNIT>               type        any.

*** -----------------------------------------------------------------------
*** Check all is specified and Mapping is activ
  check IF_IELSH is not initial and
        IF_PMATY is not initial.

  check ME->R_SHMAP is bound.

*** -----------------------------------------------------------------------
*** Read with all Data
  read table ME->R_SHMAP->T_PMATY_MAP into LS_PMATY_MAP with key SHUTY = IF_SHUTY
                                                                 SHUNT = IF_SHUNT
                                                                 PMATY = IF_PMATY
                                                                 IELSH = IF_IELSH.

  if SY-SUBRC ne 0.
*** Read only with Optional Shipping Unit Type
    read table ME->R_SHMAP->T_PMATY_MAP into LS_PMATY_MAP with key SHUTY = IF_SHUTY
                                                                   SHUNT = SPACE
                                                                   PMATY = IF_PMATY
                                                                   IELSH = IF_IELSH.


    if SY-SUBRC ne 0.
***   Read without Optional Fields
      read table ME->R_SHMAP->T_PMATY_MAP into LS_PMATY_MAP with key SHUTY = SPACE
                                                                     SHUNT = SPACE
                                                                     PMATY = IF_PMATY
                                                                     IELSH = IF_IELSH.
      if SY-SUBRC ne 0.
***     Nothing Found -> exit
        exit.
      endif.
    endif.
  endif.

*** -----------------------------------------------------------------------
*** Start Working with Mapping Informations
  move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
  sort LT_DSRC_MAP by DPRIO.
  loop at LT_DSRC_MAP into LS_DSRC_MAP
          where GDSRC = LS_PMATY_MAP-GDSRC.

*** -----------------------------------------------------------------------
*** Try to Map Data Field of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF) to <F_VALUE>.
    endif.
    if <F_VALUE> is not assigned.
      assign LF_VALUE to <F_VALUE>.
    endif.

*** -----------------------------------------------------------------------
*** Try to Map Data Field Unit of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF_UOM is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF_UOM) to <F_UNIT>.
    endif.
    if <F_UNIT> is not assigned.
      assign LF_UNIT to <F_UNIT>.
    endif.

***  Get Values with or Without conversion
    if <F_VALUE> is assigned and
       <F_UNIT>  is assigned.
      if LS_DSRC_MAP-FCONV is not initial.
        try.
            call function LS_DSRC_MAP-FCONV
              exporting
                IF_VALUE = <F_VALUE>
                IF_UNIT  = <F_UNIT>
              importing
                EF_VALUE = EF_VALUE
                EF_UNIT  = EF_UNIT.
          catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
          catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_NOT_FOUND ).
          catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_MISSING ).
          catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_DYN_CALL_ERROR ).
        endtry.
      else.
        move <F_VALUE> to EF_VALUE.
        move <F_UNIT>  to EF_UNIT.
      endif.
      unassign: <F_VALUE>, <F_UNIT>.
    endif.

*** if we have a value found -> Exit.
    if EF_VALUE is not initial.
***     Get Source
      if LS_DSRC_MAP-APDAF cp C_ISOUR_SOLDTO.
        move C_ISOUR_SOLDTO to EF_ISOUR.
      else.
        move C_ISOUR_SHIPTO to EF_ISOUR.
      endif.
      exit.
    endif.

*** -----------------------------------------------------------------------
*** Try to Get Value By Mapping Set and Mapping ID if it is not initial
    if LS_DSRC_MAP-SETID is not initial and
       LS_DSRC_MAP-MAPID is not initial.

*** ------------------------------------------------------------------------
***   Get Customer Information 1. Ship-to
      move ME->F_KUNNR_WE to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to EF_VALUE.
          move LS_MAPVN-ATFLV_UOM     to EF_UNIT.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to EF_VALUE.
          continue.
        endif.
      endloop.

***   if we have a value found -> Exit.
      if EF_VALUE is not initial.
        move C_ISOUR_SHIPTO to EF_ISOUR.
        exit.
      endif.

*** ------------------------------------------------------------------------
***   Get Customer Information 2. Sold-to
      move ME->F_KUNNR_AG to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to EF_VALUE.
          move LS_MAPVN-ATFLV_UOM     to EF_UNIT.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to EF_VALUE.
          continue.
        endif.
      endloop.

    endif.

*** if we have a value found -> Exit.
    if EF_VALUE is not initial.
      move C_ISOUR_SOLDTO to EF_ISOUR.
      exit.
    endif.

  endloop.

endmethod.
  method GET_SHSCH_DFLT.

    data: LF_SHSCH type ZVCXI_XCSU_SHSCH.


*** Ship-To Party
    if ME->R_DFLT_WE is bound.
      LF_SHSCH = ME->R_DFLT_WE->GET_SHSCH_FOR_CMPRK( IS_CMPRK = value #( CMATN = ME->F_CMATN
                                                                         PRFID = ME->F_PRFID )
                                                     IF_CNTXT = ME->F_CNTXT ).
      if LF_SHSCH is not initial.
        RF_SHSCH = LF_SHSCH.
      endif.
    endif.
    check RF_SHSCH is initial.

*** Sold-To Party
    if ME->R_DFLT_AG is bound.
      LF_SHSCH = ME->R_DFLT_AG->GET_SHSCH_FOR_CMPRK( IS_CMPRK = value #( CMATN = ME->F_CMATN
                                                                         PRFID = ME->F_PRFID )
                                                     IF_CNTXT = ME->F_CNTXT ).
      if LF_SHSCH is not initial.
        RF_SHSCH = LF_SHSCH.
      endif.
    endif.
    check RF_SHSCH is initial.

*** Plant
    if ME->R_DFLT_WERKS is bound.
      LF_SHSCH = ME->R_DFLT_WERKS->GET_SHSCH_FOR_CMPRK( IS_CMPRK = value #( CMATN = ME->F_CMATN
                                                                            PRFID = ME->F_PRFID )
                                                        IF_CNTXT = ME->F_CNTXT ).
      if LF_SHSCH is not initial.
        RF_SHSCH = LF_SHSCH.
      endif.
    endif.
    check RF_SHSCH is initial.

*** All Plants
    if ME->R_DFLT_ALL is bound.
      LF_SHSCH = ME->R_DFLT_ALL->GET_SHSCH_FOR_CMPRK( IS_CMPRK = value #( CMATN = ME->F_CMATN
                                                                          PRFID = ME->F_PRFID )
                                                      IF_CNTXT = ME->F_CNTXT ).
      if LF_SHSCH is not initial.
        RF_SHSCH = LF_SHSCH.
      endif.
    endif.
    check RF_SHSCH is initial.

*** Global
    if ME->R_DFLT_GLOBAL is bound.
      LF_SHSCH = ME->R_DFLT_GLOBAL->GET_SHSCH_FOR_CMPRK( IS_CMPRK = value #( CMATN = ME->F_CMATN
                                                                             PRFID = ME->F_PRFID )
                                                         IF_CNTXT = ME->F_CNTXT ).
      if LF_SHSCH is not initial.
        RF_SHSCH = LF_SHSCH.
      endif.
    endif.
    check RF_SHSCH is initial.

  endmethod.
method GET_SHUNT_DFLT.

  data:          LS_SHUNT_DFLT  type ZVCXI_XCSUC_S_SHUNT_DFLT.
  field-symbols: <S_SHUNT_DFLT> type ZVCXI_XCSU_S_SHUNT_DFLT.

  if ME->R_DFLT_WE is bound.
    loop at ME->R_DFLT_WE->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      read table RT_SHUNT_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding LS_SHUNT_DFLT to <S_SHUNT_DFLT>.
      move C_ISOUR_SHIPTO to <S_SHUNT_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_AG is bound.
    loop at ME->R_DFLT_AG->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      read table RT_SHUNT_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding LS_SHUNT_DFLT to <S_SHUNT_DFLT>.
      move C_ISOUR_SOLDTO to <S_SHUNT_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_WERKS is bound.
    loop at ME->R_DFLT_WERKS->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      read table RT_SHUNT_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding LS_SHUNT_DFLT to <S_SHUNT_DFLT>.
      move C_ISOUR_PLANT to <S_SHUNT_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_ALL is bound.
    loop at ME->R_DFLT_ALL->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      read table RT_SHUNT_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding LS_SHUNT_DFLT to <S_SHUNT_DFLT>.
      move C_ISOUR_ALL to <S_SHUNT_DFLT>-ISOUR.
    endloop.
  endif.

  if ME->R_DFLT_GLOBAL is bound.
    loop at ME->R_DFLT_GLOBAL->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      read table RT_SHUNT_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                               transporting no fields.
      check SY-SUBRC ne 0.

      append initial line to RT_SHUNT_DFLT assigning <S_SHUNT_DFLT>.
      move-corresponding LS_SHUNT_DFLT to <S_SHUNT_DFLT>.
      move C_ISOUR_GLOBAL to <S_SHUNT_DFLT>-ISOUR.
    endloop.
  endif.

endmethod.
method GET_SHUNT_L_DFLT.

  data:          LS_SHUNT_DFLT      type ZVCXI_XCSUC_S_SHUNT_DFLT,
                 LS_SHUNT_LIM_DFLT  type ZVCXI_XCSUC_S_SHUNT_L_DFLT.
  field-symbols: <S_SHUNT_LIM_DFLT> type ZVCXI_XCSU_S_SHUNT_L_DFLT.

  if ME->R_DFLT_WE is bound.
    loop at ME->R_DFLT_WE->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      loop at ME->R_DFLT_WE->T_SHUNT_L_DFLT into LS_SHUNT_LIM_DFLT
      where GLIDF = LS_SHUNT_DFLT-GLIDF.
        read table RT_SHUNT_LIM_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                                              LIMIT = LS_SHUNT_LIM_DFLT-LIMIT
                                              DIMEN = LS_SHUNT_LIM_DFLT-DIMEN
                                     transporting no fields.
        check SY-SUBRC ne 0.

        append initial line to RT_SHUNT_LIM_DFLT assigning <S_SHUNT_LIM_DFLT>.
        move-corresponding LS_SHUNT_LIM_DFLT to <S_SHUNT_LIM_DFLT>.
        move LS_SHUNT_DFLT-SHUNT to <S_SHUNT_LIM_DFLT>-SHUNT.
        move C_ISOUR_SHIPTO to <S_SHUNT_LIM_DFLT>-ISOUR.
      endloop.
    endloop.
  endif.

  if ME->R_DFLT_AG is bound.
    loop at ME->R_DFLT_AG->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      loop at ME->R_DFLT_AG->T_SHUNT_L_DFLT into LS_SHUNT_LIM_DFLT
      where GLIDF = LS_SHUNT_DFLT-GLIDF.
        read table RT_SHUNT_LIM_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                                              LIMIT = LS_SHUNT_LIM_DFLT-LIMIT
                                              DIMEN = LS_SHUNT_LIM_DFLT-DIMEN
                                     transporting no fields.
        check SY-SUBRC ne 0.

        append initial line to RT_SHUNT_LIM_DFLT assigning <S_SHUNT_LIM_DFLT>.
        move-corresponding LS_SHUNT_LIM_DFLT to <S_SHUNT_LIM_DFLT>.
        move LS_SHUNT_DFLT-SHUNT to <S_SHUNT_LIM_DFLT>-SHUNT.
        move C_ISOUR_SOLDTO to <S_SHUNT_LIM_DFLT>-ISOUR.
      endloop.
    endloop.
  endif.

  if ME->R_DFLT_WERKS is bound.
    loop at ME->R_DFLT_WERKS->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      loop at ME->R_DFLT_WERKS->T_SHUNT_L_DFLT into LS_SHUNT_LIM_DFLT
      where GLIDF = LS_SHUNT_DFLT-GLIDF.
        read table RT_SHUNT_LIM_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                                              LIMIT = LS_SHUNT_LIM_DFLT-LIMIT
                                              DIMEN = LS_SHUNT_LIM_DFLT-DIMEN
                                     transporting no fields.
        check SY-SUBRC ne 0.

        append initial line to RT_SHUNT_LIM_DFLT assigning <S_SHUNT_LIM_DFLT>.
        move-corresponding LS_SHUNT_LIM_DFLT to <S_SHUNT_LIM_DFLT>.
        move LS_SHUNT_DFLT-SHUNT to <S_SHUNT_LIM_DFLT>-SHUNT.
        move C_ISOUR_PLANT to <S_SHUNT_LIM_DFLT>-ISOUR.
      endloop.
    endloop.
  endif.

  if ME->R_DFLT_ALL is bound.
    loop at ME->R_DFLT_ALL->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      loop at ME->R_DFLT_ALL->T_SHUNT_L_DFLT into LS_SHUNT_LIM_DFLT
      where GLIDF = LS_SHUNT_DFLT-GLIDF.
        read table RT_SHUNT_LIM_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                                              LIMIT = LS_SHUNT_LIM_DFLT-LIMIT
                                              DIMEN = LS_SHUNT_LIM_DFLT-DIMEN
                                     transporting no fields.
        check SY-SUBRC ne 0.

        append initial line to RT_SHUNT_LIM_DFLT assigning <S_SHUNT_LIM_DFLT>.
        move-corresponding LS_SHUNT_LIM_DFLT to <S_SHUNT_LIM_DFLT>.
        move LS_SHUNT_DFLT-SHUNT to <S_SHUNT_LIM_DFLT>-SHUNT.
        move C_ISOUR_ALL to <S_SHUNT_LIM_DFLT>-ISOUR.
      endloop.
    endloop.
  endif.

  if ME->R_DFLT_GLOBAL is bound.
    loop at ME->R_DFLT_GLOBAL->T_SHUNT_DFLT into LS_SHUNT_DFLT.
      loop at ME->R_DFLT_GLOBAL->T_SHUNT_L_DFLT into LS_SHUNT_LIM_DFLT
      where GLIDF = LS_SHUNT_DFLT-GLIDF.
        read table RT_SHUNT_LIM_DFLT with key SHUNT = LS_SHUNT_DFLT-SHUNT
                                              LIMIT = LS_SHUNT_LIM_DFLT-LIMIT
                                              DIMEN = LS_SHUNT_LIM_DFLT-DIMEN
                                     transporting no fields.
        check SY-SUBRC ne 0.

        append initial line to RT_SHUNT_LIM_DFLT assigning <S_SHUNT_LIM_DFLT>.
        move-corresponding LS_SHUNT_LIM_DFLT to <S_SHUNT_LIM_DFLT>.
        move LS_SHUNT_DFLT-SHUNT to <S_SHUNT_LIM_DFLT>-SHUNT.
        move C_ISOUR_GLOBAL to <S_SHUNT_LIM_DFLT>-ISOUR.
      endloop.
    endloop.
  endif.

endmethod.
method GET_SHUNT_LIMIT_VALUE.

  data:          LF_OBJNUM              type        OBJNUM,
                 LF_VALUE               type        ZVCXI_XCSU_DIMVA,
                 LF_UNIT                type        UNIT.
  data:          LS_SHULI_MAP           type        ZVCXI_XCSUC_S_SHULI_MAP,
                 LS_DSRC_MAP            type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SETVA               type        /VCXI/CKXC_S_SETVA,
                 LS_MAPVN               type        /VCXI/CKXC_S_MAPVN,
                 LS_MAPVC               type        /VCXI/CKXC_S_MAPVC.
  data:          LT_DSRC_MAP            type        ZVCXI_XCSUC_TT_DSRC_MAP,
                 LT_SETVA               type        /VCXI/CKXC_TT_SETVA.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <F_VALUE>              type        any,
                 <F_UNIT>               type        any.

*** -----------------------------------------------------------------------
*** Start only if all is specified
  check IF_LIMIT is not initial and
        IF_DIMEN is not initial and
        IF_SHUNT is not initial.

*** -----------------------------------------------------------------------
*** Check mapping is active
  check ME->R_SHMAP is bound.

  read table ME->R_SHMAP->T_SHULI_MAP into LS_SHULI_MAP with key LIMIT = IF_LIMIT
                                                                 DIMEN = IF_DIMEN
                                                                 SHUNT = IF_SHUNT.
*** -----------------------------------------------------------------------
*** No Mapping found - Exit
  check SY-SUBRC = 0.

  move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
  sort LT_DSRC_MAP by DPRIO.
  loop at LT_DSRC_MAP into LS_DSRC_MAP
          where GDSRC = LS_SHULI_MAP-GDSRC.

*** -----------------------------------------------------------------------
*** Try to Map Data Field of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF) to <F_VALUE>.
    endif.
    if <F_VALUE> is not assigned.
      assign LF_VALUE to <F_VALUE>.
    endif.

*** -----------------------------------------------------------------------
*** Try to Map Data Field Unit of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF_UOM is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF_UOM) to <F_UNIT>.
    endif.
    if <F_UNIT> is not assigned.
      assign LF_UNIT to <F_UNIT>.
    endif.

***  Get Values with or Without conversion
    if <F_VALUE> is assigned and
       <F_UNIT>  is assigned.
      if LS_DSRC_MAP-FCONV is not initial.
        try.
            call function LS_DSRC_MAP-FCONV
              exporting
                IF_VALUE = <F_VALUE>
                IF_UNIT  = <F_UNIT>
              importing
                EF_VALUE = ES_DIMVA-DIMVA
                EF_UNIT  = ES_DIMVA-DIMVA_UOM.
          catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
          catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_NOT_FOUND ).
          catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_MISSING ).
          catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_DYN_CALL_ERROR ).
        endtry.
      else.
        move <F_VALUE> to ES_DIMVA-DIMVA.
        move <F_UNIT>  to ES_DIMVA-DIMVA_UOM.
      endif.
      unassign: <F_VALUE>, <F_UNIT>.
    endif.

*** if we have a value found -> Exit.
    if ES_DIMVA is not initial.
***   Get Source
      if LS_DSRC_MAP-APDAF cp C_ISOUR_SOLDTO.
        move C_ISOUR_SOLDTO to EF_ISOUR.
      else.
        move C_ISOUR_SHIPTO to EF_ISOUR.
      endif.
      exit.
    endif.

*** -----------------------------------------------------------------------
*** Try to Get Value By Mapping Set and Mapping ID if it is not initial
    if LS_DSRC_MAP-SETID is not initial and
       LS_DSRC_MAP-MAPID is not initial.

*** ------------------------------------------------------------------------
***   Get Customer Information 1. Ship-to
      move ME->F_KUNNR_WE to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to ES_DIMVA-DIMVA.
          move LS_MAPVN-ATFLV_UOM     to ES_DIMVA-DIMVA_UOM.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to ES_DIMVA-DIMVA.
          continue.
        endif.
      endloop.

***   if we have a value found -> Exit.
      if ES_DIMVA is not initial.
        move C_ISOUR_SHIPTO to EF_ISOUR.
        exit.
      endif.

*** ------------------------------------------------------------------------
***   Get Customer Information 2. Sold-to
      move ME->F_KUNNR_AG to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to ES_DIMVA-DIMVA.
          move LS_MAPVN-ATFLV_UOM     to ES_DIMVA-DIMVA_UOM.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to ES_DIMVA-DIMVA.
          continue.
        endif.
      endloop.

***   if we have a value found -> Exit.
      if ES_DIMVA is not initial.
        move C_ISOUR_SOLDTO to EF_ISOUR.
        exit.
      endif.

    endif.
  endloop.

endmethod.
method GET_SHUNT_P_DFLT.

  data:          LS_SHUNT_P_DFLT  type ZVCXI_XCSUC_S_SHUNT_P_DFLT.
  data:          LT_SHUNT_P_EXCL  type ZVCXI_XCSU_TT_SHUNT_P_DFLT.

  if ME->R_DFLT_WE is bound.
    loop at ME->R_DFLT_WE->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT.

      ME->CHECK_SHUNT_P_DFLT( exporting IF_ISOUR        = C_ISOUR_SHIPTO
                                        IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT
                              changing  CT_SHUNT_P_DFLT = RT_SHUNT_P_DFLT
                                        CT_SHUNT_P_EXCL = LT_SHUNT_P_EXCL ).

    endloop.
  endif.

  if ME->R_DFLT_AG is bound.
    loop at ME->R_DFLT_AG->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT.

      ME->CHECK_SHUNT_P_DFLT( exporting IF_ISOUR        = C_ISOUR_SOLDTO
                                        IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT
                              changing  CT_SHUNT_P_DFLT = RT_SHUNT_P_DFLT
                                        CT_SHUNT_P_EXCL = LT_SHUNT_P_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_WERKS is bound.
    loop at ME->R_DFLT_WERKS->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT.

      ME->CHECK_SHUNT_P_DFLT( exporting IF_ISOUR        = C_ISOUR_PLANT
                                        IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT
                              changing  CT_SHUNT_P_DFLT = RT_SHUNT_P_DFLT
                                        CT_SHUNT_P_EXCL = LT_SHUNT_P_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_ALL is bound.
    loop at ME->R_DFLT_ALL->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT.

      ME->CHECK_SHUNT_P_DFLT( exporting IF_ISOUR        = C_ISOUR_ALL
                                        IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT
                              changing  CT_SHUNT_P_DFLT = RT_SHUNT_P_DFLT
                                        CT_SHUNT_P_EXCL = LT_SHUNT_P_EXCL ).

    endloop.
  endif.

  if ME->R_DFLT_GLOBAL is bound.
    loop at ME->R_DFLT_GLOBAL->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT.

      ME->CHECK_SHUNT_P_DFLT( exporting IF_ISOUR        = C_ISOUR_GLOBAL
                                        IS_SHUNT_P_DFLT = LS_SHUNT_P_DFLT
                              changing  CT_SHUNT_P_DFLT = RT_SHUNT_P_DFLT
                                        CT_SHUNT_P_EXCL = LT_SHUNT_P_EXCL ).

    endloop.
  endif.

endmethod.
method GET_SHUTY_ACTIV.

  data:          LF_OBJNUM              type        OBJNUM,
                 LF_ACTIV               type        ABAP_BOOL,
                 LF_ISOUR               type        ZVCXI_XCSU_ISOUR.
  data:          LS_SHUTY_MAP           type        ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_DSRC_MAP            type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SETVA               type        /VCXI/CKXC_S_SETVA,
                 LS_MAPVC               type        /VCXI/CKXC_S_MAPVC.
  data:          LT_DSRC_MAP            type        ZVCXI_XCSUC_TT_DSRC_MAP,
                 LT_SETVA               type        /VCXI/CKXC_TT_SETVA.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_SHUTY_ACTIV>        type        ZVCXI_XCSU_S_SHUTY_ACTIV_MAP,
                 <F_FIELD>              type        any.

*** -----------------------------------------------------------------------
*** Start only if Mapping is active
  check ME->R_SHMAP is bound.

*** -----------------------------------------------------------------------
*** Start Searching
  loop at ME->R_SHMAP->T_SHUTY_MAP into LS_SHUTY_MAP
    where IELSH = C_IELSH_ACTIV.

    move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
    sort LT_DSRC_MAP by DPRIO.
    loop at LT_DSRC_MAP into LS_DSRC_MAP
            where GDSRC = LS_SHUTY_MAP-GDSRC.

*** -----------------------------------------------------------------------
***   Try to Map Data Field of Application Data if it is not initial.
      if LS_DSRC_MAP-APDAF is not initial.
        assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF) to <F_FIELD>.
        if SY-SUBRC = 0.

***       Do Conversion if we found a conversion Exit Function Module
          if <F_FIELD> is not initial.
            if LS_DSRC_MAP-FCONV is not initial.
              try.
                  call function LS_DSRC_MAP-FCONV
                    exporting
                      IF_VALUE = <F_FIELD>
                    importing
                      EF_VALUE = LF_ACTIV.
                catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
                catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_NOT_FOUND ).
                catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_MISSING ).
                catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
                  /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_DYN_CALL_ERROR ).
              endtry.
            else.
              move <F_FIELD> to LF_ACTIV.
            endif.
          endif.

          unassign <F_FIELD>.
        endif.
      endif.

***   if we have a value found -> Exit.
      if LF_ACTIV is not initial.
***     Get Source
        if LS_DSRC_MAP-APDAF cp C_ISOUR_SOLDTO.
          move C_ISOUR_SOLDTO to LF_ISOUR.
        else.
          move C_ISOUR_SHIPTO to LF_ISOUR.
        endif.
        exit.
      endif.

*** -----------------------------------------------------------------------
***   Try to Get Value By Mapping Set and Mapping ID if it is not initial
      if LS_DSRC_MAP-SETID is not initial and
         LS_DSRC_MAP-MAPID is not initial.

*** ------------------------------------------------------------------------
***     Get Customer Information 1. Ship-to
        move ME->F_KUNNR_WE to LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                                 IF_OBJNUM = LF_OBJNUM ).

        loop at LT_SETVA into LS_SETVA.
          clear: LS_MAPVC.

          check LS_SETVA-MAPID eq LS_DSRC_MAP-MAPID.
          read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
          move LS_MAPVC-VAMAP         to LF_ACTIV.

        endloop.

***     if we have a value found -> Exit.
        if LF_ACTIV is not initial.
          move C_ISOUR_SHIPTO to LF_ISOUR.
          exit.
        endif.

*** ------------------------------------------------------------------------
***     Get Customer Information 2. Sold-to
        move ME->F_KUNNR_AG to LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                                 IF_OBJNUM = LF_OBJNUM ).

        loop at LT_SETVA into LS_SETVA.
          clear: LS_MAPVC.

          check LS_SETVA-MAPID eq LS_DSRC_MAP-MAPID.
          read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
          move LS_MAPVC-VAMAP         to LF_ACTIV.

        endloop.

      endif.

***   if we have a value found -> Exit.
      if LF_ACTIV is not initial.
        move C_ISOUR_SOLDTO to LF_ISOUR.
        exit.
      endif.

    endloop.

    check LF_ACTIV eq 'Y'.
    append initial line to RT_SHUTY_ACTIV assigning <S_SHUTY_ACTIV>.
    move-corresponding LS_SHUTY_MAP to <S_SHUTY_ACTIV>.
    move LF_ISOUR                   to <S_SHUTY_ACTIV>-ISOUR.

  endloop.

endmethod.
method GET_SHUTY_DFLT.

  data:          LS_SHUTY_DFLT  type ZVCXI_XCSU_S_SHUTY_DFLT.
  data:          LT_SHUTY_EXCL  type ZVCXI_XCSU_TT_SHUTY_DFLT.

  if ME->R_DFLT_WE is bound.
    loop at ME->R_DFLT_WE->T_SHUTY_DFLT into LS_SHUTY_DFLT.

      ME->CHECK_SHUTY_DFLT( exporting IF_ISOUR      = C_ISOUR_SHIPTO
                                      IS_SHUTY_DFLT = LS_SHUTY_DFLT
                            changing  CT_SHUTY_DFLT = RT_SHUTY_DFLT
                                      CT_SHUTY_EXCL = LT_SHUTY_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_AG is bound.
    loop at ME->R_DFLT_AG->T_SHUTY_DFLT into LS_SHUTY_DFLT.

      ME->CHECK_SHUTY_DFLT( exporting IF_ISOUR      = C_ISOUR_SOLDTO
                                      IS_SHUTY_DFLT = LS_SHUTY_DFLT
                            changing  CT_SHUTY_DFLT = RT_SHUTY_DFLT
                                      CT_SHUTY_EXCL = LT_SHUTY_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_WERKS is bound.
    loop at ME->R_DFLT_WERKS->T_SHUTY_DFLT into LS_SHUTY_DFLT.

      ME->CHECK_SHUTY_DFLT( exporting IF_ISOUR      = C_ISOUR_PLANT
                                      IS_SHUTY_DFLT = LS_SHUTY_DFLT
                            changing  CT_SHUTY_DFLT = RT_SHUTY_DFLT
                                      CT_SHUTY_EXCL = LT_SHUTY_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_ALL is bound.
    loop at ME->R_DFLT_ALL->T_SHUTY_DFLT into LS_SHUTY_DFLT.

      ME->CHECK_SHUTY_DFLT( exporting IF_ISOUR      = C_ISOUR_ALL
                                      IS_SHUTY_DFLT = LS_SHUTY_DFLT
                            changing  CT_SHUTY_DFLT = RT_SHUTY_DFLT
                                      CT_SHUTY_EXCL = LT_SHUTY_EXCL ).
    endloop.
  endif.

  if ME->R_DFLT_GLOBAL is bound.
    loop at ME->R_DFLT_GLOBAL->T_SHUTY_DFLT into LS_SHUTY_DFLT.

      ME->CHECK_SHUTY_DFLT( exporting IF_ISOUR      = C_ISOUR_GLOBAL
                                      IS_SHUTY_DFLT = LS_SHUTY_DFLT
                            changing  CT_SHUTY_DFLT = RT_SHUTY_DFLT
                                      CT_SHUTY_EXCL = LT_SHUTY_EXCL ).
    endloop.
  endif.

endmethod.
method GET_SHUTY_IELSH_VALUE.

  data:          LF_OBJNUM              type        OBJNUM,
                 LF_VALUE               type        ZVCXI_XCSU_DIMVA,
                 LF_UNIT                type        UNIT.
  data:          LS_SHUTY_MAP           type        ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_DSRC_MAP            type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_SETVA               type        /VCXI/CKXC_S_SETVA,
                 LS_MAPVC               type        /VCXI/CKXC_S_MAPVC,
                 LS_MAPVN               type        /VCXI/CKXC_S_MAPVN.
  data:          LT_DSRC_MAP            type        ZVCXI_XCSUC_TT_DSRC_MAP,
                 LT_SETVA               type        /VCXI/CKXC_TT_SETVA.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <F_VALUE>              type        any,
                 <F_UNIT>               type        any.

*** -----------------------------------------------------------------------
*** Start only if all is specified
  check IF_IELSH is not initial and
        IF_SHUTY is not initial and
        IF_SHUNT is not initial.

  check ME->R_SHMAP is bound.

  read table ME->R_SHMAP->T_SHUTY_MAP into LS_SHUTY_MAP with key SHUTY = IF_SHUTY
                                                                 SHUNT = IF_SHUNT
                                                                 IELSH = IF_IELSH.

*** -----------------------------------------------------------------------
*** No Mapping - Exit
  check SY-SUBRC = 0.

  move ME->R_SHMAP->T_DSRC_MAP to LT_DSRC_MAP.
  sort LT_DSRC_MAP by DPRIO.
  loop at LT_DSRC_MAP into LS_DSRC_MAP
          where GDSRC = LS_SHUTY_MAP-GDSRC.

*** -----------------------------------------------------------------------
*** Try to Map Data Field of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF) to <F_VALUE>.
    endif.
    if <F_VALUE> is not assigned.
      assign LF_VALUE to <F_VALUE>.
    endif.
*** -----------------------------------------------------------------------
*** Try to Map Data Field Unit of Application Data if it is not initial.
    if LS_DSRC_MAP-APDAF_UOM is not initial.
      assign ME->R_APPDATA->(LS_DSRC_MAP-APDAF_UOM) to <F_UNIT>.
    endif.
    if <F_UNIT> is not assigned.
      assign LF_UNIT to <F_UNIT>.
    endif.

***  Get Values with or Without conversion
    if <F_VALUE> is assigned and
       <F_UNIT>  is assigned.
      if LS_DSRC_MAP-FCONV is not initial.
        try.
            call function LS_DSRC_MAP-FCONV
              exporting
                IF_VALUE = <F_VALUE>
                IF_UNIT  = <F_UNIT>
              importing
                EF_VALUE = EF_VALUE
                EF_UNIT  = EF_UNIT.
          catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
          catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_NOT_FOUND ).
          catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAM_MISSING ).
          catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_DYN_CALL_ERROR ).
        endtry.
      else.
        move <F_VALUE> to EF_VALUE.
        move <F_UNIT>  to EF_UNIT.
      endif.
      unassign: <F_VALUE>, <F_UNIT>.
    endif.

*** if we have a value found -> Exit.
    if EF_VALUE is not initial.
***   Get Source
      if LS_DSRC_MAP-APDAF cp C_ISOUR_SOLDTO.
        move C_ISOUR_SOLDTO to EF_ISOUR.
      else.
        move C_ISOUR_SHIPTO to EF_ISOUR.
      endif.
      exit.
    endif.

*** -----------------------------------------------------------------------
*** Try to Get Value By Mapping Set and Mapping ID if it is not initial
    if LS_DSRC_MAP-SETID is not initial and
       LS_DSRC_MAP-MAPID is not initial.

*** ------------------------------------------------------------------------
***   Get Customer Information 1. Ship-to
      move ME->F_KUNNR_WE to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to EF_VALUE.
          move LS_MAPVN-ATFLV_UOM     to EF_UNIT.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to EF_VALUE.
          continue.
        endif.
      endloop.

***   if we have a value found -> Exit.
      if EF_VALUE is not initial.
        move C_ISOUR_SHIPTO to EF_ISOUR.
        exit.
      endif.

*** ------------------------------------------------------------------------
***   Get Customer Information 2. Sold-to
      move ME->F_KUNNR_AG to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LS_DSRC_MAP-SETID
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA
                       where MAPID eq LS_DSRC_MAP-MAPID.
        clear: LS_MAPVN, LS_MAPVC.

        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
        if SY-SUBRC = 0.
          move LS_MAPVN-ATFLV         to EF_VALUE.
          move LS_MAPVN-ATFLV_UOM     to EF_UNIT.
          continue.
        endif.

        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if SY-SUBRC = 0.
          move LS_MAPVC-VAMAP         to EF_VALUE.
          continue.
        endif.
      endloop.

    endif.

*** if we have a value found -> Exit.
    if EF_VALUE is not initial.
      move C_ISOUR_SOLDTO to EF_ISOUR.
      exit.
    endif.

  endloop.

endmethod.
method LOAD_PMATY.

  data:          LF_POSID        type /VCXI/VKSR_POSID,
                 LF_PMATN        type ZVCXI_XCSU_PMATN,
                 LF_ISOUR        type ZVCXI_XCSU_ISOUR,
                 LF_ISOUR_MNCNT  type ZVCXI_XCSU_ISOUR.
  data:          LT_SHUNT_PMATY  type ZVCXI_XCSU_TT_SHUNT_PMATY,
                 LT_PMATN        type ZVCXI_XCSU_TT_PMATN,
                 LT_SHUNT_P_DFLT type ZVCXI_XCSU_TT_SHUNT_P_DFLT,
                 LT_PMATY_DFLT   type ZVCXI_XCSU_TT_PMATY_DFLT,
                 LT_PMATY_ACTIV  type ZVCXI_XCSU_TT_PMATY_ACTIV_MAP,
                 LT_PMATY_CPACK  type ZVCXI_XCSUC_TT_PMATY_CPACK.
  data:          LS_SHUNT_PMATY  type ZVCXI_XCS_TC183,
                 LS_PMATN        type ZVCXI_XCSU_S_PMATN,
                 LS_SHUNT_P_DFLT type ZVCXI_XCSU_S_SHUNT_P_DFLT,
                 LS_PMATY_ACTIV  type ZVCXI_XCSU_S_PMATY_ACTIV_MAP,
                 LS_PMATY_DFLT   type ZVCXI_XCSU_S_PMATY_DFLT,
                 LS_PMATY_CPACK  type ZVCXI_XCSUC_S_PMATY_CPACK.
  field-symbols: <S_DFLT_SHUTY>  type ZVCXI_XCSU_S_DFLT_SHUTY,
                 <S_DFLT_PMATY>  type ZVCXI_XCSU_S_DFLT_PMATY.

*** -------------------------------------------------------------------------------
*** Get all Active Packaging Material Type Defaults per Shipping Unit
  LT_SHUNT_P_DFLT = ME->GET_SHUNT_P_DFLT( ).

*** Get all Packaging Material Defaults per Packaging Material Type
  LT_PMATY_DFLT = ME->GET_PMATY_DFLT( ).

*** Add Mapping Information (-> Activation of Packaging Material Types) by Update Standard Structure
  LT_PMATY_ACTIV = ME->GET_PMATY_ACTIV( ).

*** Get all Packaging Material types per Packaging Code
  LT_PMATY_CPACK = ME->GET_PMATY_CPACK( ).

*** -------------------------------------------------------------------------------
*** Start Doing
  loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
    clear: LF_POSID, LS_SHUNT_P_DFLT, LF_ISOUR_MNCNT.

*** -------------------------------------------------------------------------------
*** load Standard Shipping Unit Packaging Materials from Customizing
    check <S_DFLT_SHUTY>-SHUNT is not initial.
    LT_SHUNT_PMATY = ME->R_CUST_SHIPU->GET_PMATY_SET_FOR_SHUNT( IF_SHUNT = <S_DFLT_SHUTY>-SHUNT ).

*** -------------------------------------------------------------------------------
*** Adjust Minimum Count
    sort LT_SHUNT_PMATY by SEQUE.
    loop at LT_SHUNT_PMATY into LS_SHUNT_PMATY.
      if LS_SHUNT_PMATY-MNCNT is initial.
***     Get Active Packaging Material types per Packaging Code
        read table LT_PMATY_CPACK into LS_PMATY_CPACK with key SHUTY = <S_DFLT_SHUTY>-SHUTY
                                                               SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                               PMATY = LS_SHUNT_PMATY-PMATY.
        if SY-SUBRC = 0.
          add 1 to LS_SHUNT_PMATY-MNCNT.
          LF_ISOUR_MNCNT = C_ISOUR_CPACK.
        else.
***       Get Active Packaging Material types by Info Mapping
          read table LT_PMATY_ACTIV into LS_PMATY_ACTIV with key SHUTY = <S_DFLT_SHUTY>-SHUTY
                                                                 SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                                 PMATY = LS_SHUNT_PMATY-PMATY.
          if SY-SUBRC = 0.
            add 1 to LS_SHUNT_PMATY-MNCNT.
            LF_ISOUR_MNCNT = LS_PMATY_ACTIV-ISOUR.
          else.
***         Get Active Packaging Material types per Default Customizing
            read table LT_SHUNT_P_DFLT into LS_SHUNT_P_DFLT with key SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                                     PMATY = LS_SHUNT_PMATY-PMATY.
            if SY-SUBRC = 0.
              add 1 to LS_SHUNT_PMATY-MNCNT.
              LF_ISOUR_MNCNT = LS_SHUNT_P_DFLT-ISOUR.
            endif.
          endif.
        endif.
      endif.

      do LS_SHUNT_PMATY-MNCNT times.
        clear: LS_PMATY_DFLT, LS_PMATN, LS_PMATY_CPACK, LF_PMATN, LF_ISOUR.
        add 10 to LF_POSID.
        append initial line to <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY>.
        move LF_POSID             to <S_DFLT_PMATY>-POSID.
        move LS_SHUNT_PMATY-PMATY to <S_DFLT_PMATY>-PMATY.

        if LF_ISOUR_MNCNT is initial.
          move C_ISOUR_STD to LF_ISOUR_MNCNT.
        endif.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Packaging Material Type
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATY
                                 IF_ISOUR = LF_ISOUR_MNCNT
                       changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---

*** -------------------------------------------------------------------------------
***     Load Standard Packaging Material Number
        LT_PMATN = ME->R_CUST_SHIPU->GET_PMATN_FOR_PMATY( IF_WERKS = ME->F_WERKS
                                                          IF_PMATY = <S_DFLT_PMATY>-PMATY ).
        if lines( LT_PMATN ) eq 1.
          read table LT_PMATN into LS_PMATN index 1.
          move LS_PMATN-PMATN to <S_DFLT_PMATY>-PMATN.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = C_ISOUR_STD
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.

*** -------------------------------------------------------------------------------
***     Load Default Customizing Packaging Material Number
        read table LT_PMATY_DFLT into LS_PMATY_DFLT with key PMATY = <S_DFLT_PMATY>-PMATY.
        if SY-SUBRC = 0.
***       Set Packaging Material
          if LS_PMATY_DFLT-PMATN is not initial.
            move LS_PMATY_DFLT-PMATN to <S_DFLT_PMATY>-PMATN.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***         Add Source Entry - Packaging Material Number
            ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                     IF_ISOUR = LS_PMATY_DFLT-ISOUR
                           changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
          endif.
        endif.

*** -------------------------------------------------------------------------------
***     Load Packaging Code Depending Packaging Material Number
***     Get Active Packaging Material types per Packaging Code
        read table LT_PMATY_CPACK into LS_PMATY_CPACK with key SHUTY = <S_DFLT_SHUTY>-SHUTY
                                                               SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                               PMATY = LS_SHUNT_PMATY-PMATY.
***     With reference to Packaging Material Information
        if LS_PMATY_CPACK is not initial.
***       Set Packaging Material
          if LS_PMATY_CPACK-PMATN is not initial.
            move LS_PMATY_CPACK-PMATN to <S_DFLT_PMATY>-PMATN.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***         Add Source Entry - Packaging Material Number
            ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                     IF_ISOUR = C_ISOUR_CPACK
                           changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
          endif.
        endif.

*** -------------------------------------------------------------------------------
***     Load Packaging Material type Material number from Shipping Information Mapping
***     Packaging Material
        ME->GET_PMATY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_PMATN
                                             IF_PMATY = <S_DFLT_PMATY>-PMATY
                                             IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                             IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                                   importing EF_VALUE = LF_PMATN
                                             EF_ISOUR = LF_ISOUR ).
        if LF_PMATN is not initial.
          move LF_PMATN to <S_DFLT_PMATY>-PMATN.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = LF_ISOUR
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.

      enddo.

    endloop.
  endloop.

endmethod.
method LOAD_PMATY_DETAILS.

  data:          LF_CONSC        type ZVCXI_XCSU_CONSC,
                 LF_PMQTY        type ZVCXI_XCSU_PMQTY,
                 LF_PMQTY_UOM    type UNIT,
                 LF_ISOUR        type ZVCXI_XCSU_ISOUR.
  data:          LT_PMATN        type ZVCXI_XCSU_TT_PMATN,
                 LT_CONSC        type ZVCXI_XCSU_TT_CONSC,
                 LT_PMATY_DFLT   type ZVCXI_XCSU_TT_PMATY_DFLT,
                 LT_PMATY_CPACK  type ZVCXI_XCSUC_TT_PMATY_CPACK.
  data:          LS_SHUNT_PMATY  type ZVCXI_XCS_TC183,
                 LS_PMATN        type ZVCXI_XCSU_S_PMATN,
                 LS_CONSC        type ZVCXI_XCSU_S_CONSC,
                 LS_PMATY_DFLT   type ZVCXI_XCSU_S_PMATY_DFLT,
                 LS_PMATY_CPACK  type ZVCXI_XCSUC_S_PMATY_CPACK.
  field-symbols: <S_DFLT_SHUTY>  type ZVCXI_XCSU_S_DFLT_SHUTY,
                 <S_DFLT_PMATY>  type ZVCXI_XCSU_S_DFLT_PMATY.

*** -------------------------------------------------------------------------------
*** Get all Packaging Material Defaults per Packaging Material Type
  LT_PMATY_DFLT = ME->GET_PMATY_DFLT( ).

*** Get all Packaging Material types per Packaging Code
  LT_PMATY_CPACK = ME->GET_PMATY_CPACK( ).

*** -------------------------------------------------------------------------------
*** Start Doing
  loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
    loop at <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY>.
      clear: LS_PMATY_DFLT, LS_PMATN, LS_PMATY_CPACK, LF_CONSC, LF_PMQTY, LF_PMQTY_UOM, LF_ISOUR.

      if <S_DFLT_PMATY>-PMATN is initial.
*** -------------------------------------------------------------------------------
***     Load Standard Packaging Material Number
        LT_PMATN = ME->R_CUST_SHIPU->GET_PMATN_FOR_PMATY( IF_WERKS = ME->F_WERKS
                                                          IF_PMATY = <S_DFLT_PMATY>-PMATY ).
        if lines( LT_PMATN ) eq 1.
          read table LT_PMATN into LS_PMATN index 1.
          move LS_PMATN-PMATN to <S_DFLT_PMATY>-PMATN.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = C_ISOUR_STD
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.


*** -------------------------------------------------------------------------------
***     Load Default Customizing Packaging Material Number
        read table LT_PMATY_DFLT into LS_PMATY_DFLT with key PMATY = <S_DFLT_PMATY>-PMATY.
        if SY-SUBRC = 0.
***       Set Packaging Material
          if LS_PMATY_DFLT-PMATN is not initial.
            move LS_PMATY_DFLT-PMATN to <S_DFLT_PMATY>-PMATN.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***         Add Source Entry - Packaging Material Number
            ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                     IF_ISOUR = LS_PMATY_DFLT-ISOUR
                           changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
          endif.
        endif.
      endif.

*** -------------------------------------------------------------------------------
***   Load Default Consumption Scheme for Packaging Material if we have a 1:1 assignment
      if ( <S_DFLT_PMATY>-PMATN is not initial   and
           <S_DFLT_PMATY>-PMATY is not initial ) or
           <S_DFLT_PMATY>-PMATY cs '_C'.
        LT_CONSC = ME->R_CUST_SHIPU->GET_CONSC_FOR_PMATY( IF_PMATY = <S_DFLT_PMATY>-PMATY ).
        if lines( LT_CONSC ) eq 1.
          read table LT_CONSC into LS_CONSC index 1.
          move LS_CONSC-CONSC to <S_DFLT_PMATY>-CONSC.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Shipping Unit
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_CONSC
                                   IF_ISOUR = C_ISOUR_STD
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.
      endif.

*** -------------------------------------------------------------------------------
***   Load Default Customizing for Consumption Scheme and Quantity
      read table LT_PMATY_DFLT into LS_PMATY_DFLT with key PMATY = <S_DFLT_PMATY>-PMATY.
      if SY-SUBRC = 0.
***     Set Consumption Scheme
        if LS_PMATY_DFLT-CONSC is not initial.
          move LS_PMATY_DFLT-CONSC to <S_DFLT_PMATY>-CONSC.
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Consumption Scheme
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_CONSC
                                   IF_ISOUR = LS_PMATY_DFLT-ISOUR
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.

***     Set Packaging Material Quantity
        if LS_PMATY_DFLT-PMQTY is not initial.
          move LS_PMATY_DFLT-PMQTY to <S_DFLT_PMATY>-PMQTY.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Quantity
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMQTY
                                   IF_ISOUR = LS_PMATY_DFLT-ISOUR
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.

***     Set Packaging Material Quantity Uom
        if LS_PMATY_DFLT-PMQTY_UOM is not initial.
          move LS_PMATY_DFLT-PMQTY_UOM to <S_DFLT_PMATY>-PMQTY_UOM.
        endif.
      endif.

*** -----------------------------------------------------------------
***   Load Packaging Code Depending Packaging Material Number and Consumption Scheme
***   Get Active Packaging Material types per Packaging Code
      read table LT_PMATY_CPACK into LS_PMATY_CPACK with key SHUTY = <S_DFLT_SHUTY>-SHUTY
                                                             SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                             PMATY = <S_DFLT_PMATY>-PMATY.
***   With reference to Packaging Material Information
      if LS_PMATY_CPACK is not initial.
***     Set Packaging Material Information
        if LS_PMATY_CPACK-PAMAI is not initial.
          move LS_PMATY_CPACK-PAMAI to <S_DFLT_PMATY>-PAMAI.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Information
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PAMAI
                                   IF_ISOUR = C_ISOUR_CPACK
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.
***     Set Packaging Material
        if LS_PMATY_CPACK-PMATN is not initial.
          move LS_PMATY_CPACK-PMATN to <S_DFLT_PMATY>-PMATN.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = C_ISOUR_CPACK
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.
***     Set Consumption Scheme
        if LS_PMATY_CPACK-CONSC is not initial.
          move LS_PMATY_CPACK-CONSC to <S_DFLT_PMATY>-CONSC.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Consumption Scheme
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_CONSC
                                   IF_ISOUR = C_ISOUR_CPACK
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.
      endif.

*** -------------------------------------------------------------------------------
***   Load Packaging Material type Material number/CONSC from Shipping Information Mapping
***   Consumption Scheme
      ME->GET_PMATY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_CONSC
                                           IF_PMATY = <S_DFLT_PMATY>-PMATY
                                           IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                           IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                                 importing EF_VALUE = LF_CONSC
                                           EF_ISOUR = LF_ISOUR ).
      if LF_CONSC is not initial.
        move LF_CONSC to <S_DFLT_PMATY>-CONSC.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Consumption Scheme
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_CONSC
                                 IF_ISOUR = LF_ISOUR
                       changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.

***   Packaging Material Quantity (inc. Unit)
      ME->GET_PMATY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_PMQTY
                                           IF_PMATY = <S_DFLT_PMATY>-PMATY
                                           IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                           IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                                 importing EF_VALUE = LF_PMQTY
                                           EF_UNIT  = LF_PMQTY_UOM
                                           EF_ISOUR = LF_ISOUR ).
      if LF_PMQTY is not initial.
        move LF_PMQTY to <S_DFLT_PMATY>-PMQTY.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Packaging Material Quantity
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMQTY
                                 IF_ISOUR = LF_ISOUR
                       changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.
      if LF_PMQTY_UOM is not initial.
        move LF_PMQTY_UOM to <S_DFLT_PMATY>-PMQTY_UOM.
      endif.

    endloop.
  endloop.

endmethod.
method LOAD_SHUNT_LIMITS.

  data:          LF_ISOUR            type ZVCXI_XCSU_ISOUR.
  data:          LS_DIMVA            type ZVCXI_XCSU_S_DIMVA,
                 LS_SHUTY_LIMIT      type ZVCXI_XCS_TC172,
                 LS_SHUNT_LIM_DFLT   type ZVCXI_XCSU_S_SHUNT_L_DFLT.
  data:          LT_SHUTY_LIMIT      type ZVCXI_XCSU_TT_SHUTY_LIMIT,
                 LT_SHUNT_LIM_DFLT   type ZVCXI_XCSU_TT_SHUNT_L_DFLT.
  field-symbols: <S_DFLT_SHUTY>      type ZVCXI_XCSU_S_DFLT_SHUTY,
                 <S_DFLT_LIMIT>      type ZVCXI_XCSU_S_DFLT_LIMIT.

*** Get Complete List of Shipping Unit Limits per Default Customizing
  LT_SHUNT_LIM_DFLT = ME->GET_SHUNT_L_DFLT( ).

  loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
    clear: LS_DIMVA, LF_ISOUR.
*** -------------------------------------------------------------------------------
*** load Standard Shipping Unit Limits from Customizing
    if <S_DFLT_SHUTY>-SHUNT is not initial.
      LT_SHUTY_LIMIT = ME->R_CUST_SHIPU->GET_LIMIT_FOR_SHUNT( IF_SHUNT = <S_DFLT_SHUTY>-SHUNT ).
    elseif <S_DFLT_SHUTY>-SHUTY is not initial.
      LT_SHUTY_LIMIT = ME->R_CUST_SHIPU->GET_LIMIT_FOR_SHUTY( IF_SHUTY = <S_DFLT_SHUTY>-SHUTY ).
    endif.

*** -----------------------------------------------------------------------
*** Add Limit Informations
    sort LT_SHUTY_LIMIT by SEQUE.
    loop at LT_SHUTY_LIMIT into LS_SHUTY_LIMIT.
      clear: LS_DIMVA, LF_ISOUR.
      append initial line to <S_DFLT_SHUTY>-T_DFLT_LIMIT assigning <S_DFLT_LIMIT>.
      move LS_SHUTY_LIMIT-LIMIT to <S_DFLT_LIMIT>-LIMIT.
      move LS_SHUTY_LIMIT-DIMEN to <S_DFLT_LIMIT>-DIMEN.
      case ME->F_SYSOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
          move LS_SHUTY_LIMIT-UOMME to <S_DFLT_LIMIT>-DIMVA_UOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
          move LS_SHUTY_LIMIT-UOMIM to <S_DFLT_LIMIT>-DIMVA_UOM.
      endcase.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Limit
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_LIMIT
                               IF_ISOUR = C_ISOUR_STD
                     changing  CT_VASRC = <S_DFLT_LIMIT>-T_VASRC ).

***   Add Source Entry - Dimension
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_DIMEN
                               IF_ISOUR = C_ISOUR_STD
                     changing  CT_VASRC = <S_DFLT_LIMIT>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---

*** -----------------------------------------------------------------------
***   Read Shipping Unit Limits from Default Customizing
      read table LT_SHUNT_LIM_DFLT into LS_SHUNT_LIM_DFLT with key SHUNT = <S_DFLT_SHUTY>-SHUNT
                                                                   LIMIT = <S_DFLT_LIMIT>-LIMIT
                                                                   DIMEN = <S_DFLT_LIMIT>-DIMEN.
      if SY-SUBRC = 0.
***     Do Unit Converison
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_DFLT_LIMIT>-DIMVA_UOM
                                                           IF_UOM_IN    = LS_SHUNT_LIM_DFLT-DIMVA_UOM
                                                           IF_VALUE_IN  = LS_SHUNT_LIM_DFLT-DIMVA
                                                 importing EF_VALUE_OUT = <S_DFLT_LIMIT>-DIMVA
                                                           EF_UOM_OUT   = <S_DFLT_LIMIT>-DIMVA_UOM ).




*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Dimension Value
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_DIMVA
                                 IF_ISOUR = LS_SHUNT_LIM_DFLT-ISOUR
                       changing  CT_VASRC = <S_DFLT_LIMIT>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.

*** -----------------------------------------------------------------------
***   Load Shipping Unit Limits from Shipping Information Mapping
      ME->GET_SHUNT_LIMIT_VALUE( exporting IF_LIMIT = <S_DFLT_LIMIT>-LIMIT
                                           IF_DIMEN = <S_DFLT_LIMIT>-DIMEN
                                           IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                                 importing ES_DIMVA = LS_DIMVA
                                           EF_ISOUR = LF_ISOUR ).
      if LS_DIMVA is not initial.
***     Do Unit Converison
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_DFLT_LIMIT>-DIMVA_UOM
                                                           IF_UOM_IN    = LS_DIMVA-DIMVA_UOM
                                                           IF_VALUE_IN  = LS_DIMVA-DIMVA
                                                 importing EF_VALUE_OUT = <S_DFLT_LIMIT>-DIMVA
                                                           EF_UOM_OUT   = <S_DFLT_LIMIT>-DIMVA_UOM ).



*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Dimension Value
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_DIMVA
                                 IF_ISOUR = LF_ISOUR
                       changing  CT_VASRC = <S_DFLT_LIMIT>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.

    endloop.
  endloop.

endmethod.
method LOAD_SHUNT_PMATY.

***---------------------------------------------------------------------------------
*** Load Packaging Material Types Structure
  ME->LOAD_PMATY( ).

*** Set Packaging Material Type Default Definition
  ME->SET_PMATY_DFLT_DEF( ).

*** Load Packaging Material Type Details
  ME->LOAD_PMATY_DETAILS( ).

endmethod.
method LOAD_SHUTY.

  data:          LT_SHUTY         type ZVCXI_XCSU_TT_SHSCH_SHUTY,
                 LT_SHUTY_ACTIV   type ZVCXI_XCSU_TT_SHUTY_ACTIV_MAP,
                 LT_SHUTY_DFLT    type ZVCXI_XCSU_TT_SHUTY_DFLT.
  data:          LS_SHUTY         type ZVCXI_XCS_TC162,
                 LS_SHUTY_DFLT    type ZVCXI_XCSU_S_SHUTY_DFLT,
                 LS_SHUTY_ACTIV   type ZVCXI_XCSU_S_SHUTY_ACTIV_MAP.
  data:          LF_POSID         type /VCXI/VKSR_POSID,
                 LF_INDEX         type I.
  field-symbols: <S_DFLT_SHUTY>   type ZVCXI_XCSU_S_DFLT_SHUTY,
                 <S_SHUTY_DFLT>   type ZVCXI_XCSU_S_SHUTY_DFLT.

*** -----------------------------------------------------------------------
*** Get Standard Information of Shipping&Unitization Customizing
  check ME->R_CUST_SHIPU is bound.
  LT_SHUTY = ME->R_CUST_SHIPU->GET_SHUTY_SET_FOR_SHSCH( IF_SHSCH = ME->S_DFLT_SHIP_MGR-SHSCH ).

*** Add Additional Information of Default Customizing by Update Standard Structure
  LT_SHUTY_DFLT = ME->GET_SHUTY_DFLT( ).

*** Add Mapping Information (-> Activation of Shipping Unit Types/Units) by Update Standard Structure
  LT_SHUTY_ACTIV = ME->GET_SHUTY_ACTIV( ).

*** -----------------------------------------------------------------------
*** Create Structure
  loop at LT_SHUTY into LS_SHUTY.

*** Check Mapping -> Make Unit Types active
    if LS_SHUTY-MNCNT is initial and
       LS_SHUTY-MXCNT is not initial.
      do LS_SHUTY-MXCNT times.
        read table LT_SHUTY_ACTIV into LS_SHUTY_ACTIV with key SHUTY = LS_SHUTY-SHUTY.
        if SY-SUBRC = 0.
          LF_INDEX = SY-TABIX.
          add 10 to LF_POSID.
          append initial line to ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
          move LF_POSID             to <S_DFLT_SHUTY>-POSID.
          move LS_SHUTY-SHUTY       to <S_DFLT_SHUTY>-SHUTY.
          move LS_SHUTY_ACTIV-SHUNT to <S_DFLT_SHUTY>-SHUNT.
          delete LT_SHUTY_ACTIV index LF_INDEX.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Shipping Unit Type
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUTY
                                   IF_ISOUR = LS_SHUTY_ACTIV-ISOUR
                         changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).

***       Add Source Entry - Shipping Unit
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                   IF_ISOUR = LS_SHUTY_ACTIV-ISOUR
                         changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---


        else.
          read table LT_SHUTY_DFLT assigning <S_SHUTY_DFLT> with key SHUTY = LS_SHUTY-SHUTY.
          if SY-SUBRC = 0.
            move <S_SHUTY_DFLT> to LS_SHUTY_DFLT.
            if <S_SHUTY_DFLT>-STCNT eq 0.
              exit.
            endif.
            LF_INDEX = SY-TABIX.
            add 10 to LF_POSID.
            append initial line to ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
            move LF_POSID             to <S_DFLT_SHUTY>-POSID.
            move <S_SHUTY_DFLT>-SHUTY to <S_DFLT_SHUTY>-SHUTY.
            move <S_SHUTY_DFLT>-SHUNT to <S_DFLT_SHUTY>-SHUNT.
            if <S_SHUTY_DFLT>-STCNT eq 1.
              delete LT_SHUTY_DFLT index LF_INDEX.
            else.
              subtract 1 from <S_SHUTY_DFLT>-STCNT.
            endif.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***         Add Source Entry - Shipping Unit Type
            ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUTY
                                     IF_ISOUR = LS_SHUTY_DFLT-ISOUR
                           changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).

***         Add Source Entry - Shipping Unit
            ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                     IF_ISOUR = LS_SHUTY_DFLT-ISOUR
                           changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---

          else.
            exit.
          endif.
        endif.
      enddo.
    else.

*** -----------------------------------------------------------------------
***   Do Standard Count
      do LS_SHUTY-MNCNT times.
        add 10 to LF_POSID.
        append initial line to ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
        move LF_POSID       to <S_DFLT_SHUTY>-POSID.
        move LS_SHUTY-SHUTY to <S_DFLT_SHUTY>-SHUTY.

*** -----------------------------------------------------------------------
***     Try to get Info from Default Customizing
        read table LT_SHUTY_DFLT assigning <S_SHUTY_DFLT> with key SHUTY = LS_SHUTY-SHUTY.
        if SY-SUBRC = 0.
          LF_INDEX = SY-TABIX.
          move <S_SHUTY_DFLT>-SHUTY to <S_DFLT_SHUTY>-SHUTY.
          move <S_SHUTY_DFLT>-SHUNT to <S_DFLT_SHUTY>-SHUNT.
          if <S_SHUTY_DFLT>-STCNT eq 1.
            delete LT_SHUTY_DFLT index LF_INDEX.
          else.
            subtract 1 from <S_SHUTY_DFLT>-STCNT.
          endif.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Shipping Unit Type
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUTY
                                   IF_ISOUR = C_ISOUR_STD
                         changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).

***       Add Source Entry - Shipping Unit
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                   IF_ISOUR = C_ISOUR_STD
                         changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
        endif.
      enddo.
    endif.
  endloop.

endmethod.
method LOAD_SHUTY_DETAILS.

  data:          LF_PACKP        type ZVCXI_XCSU_PACKP,
                 LF_PRQTY        type ZVCXI_XCSU_PRQTY,
                 LF_PRQTY_UOM    type UNIT,
                 LF_SAQTY        type ZVCXI_XCSU_SAQTY,
                 LF_SAQTY_UOM    type UNIT,
                 LF_ISOUR        type ZVCXI_XCSU_ISOUR.
  data:          LT_SHUNT        type ZVCXI_XCSU_TT_SHUNT,
                 LT_PACKP        type ZVCXI_XCSU_TT_PACKP,
                 LT_SHUTY_DFLT   type ZVCXI_XCSU_TT_SHUTY_DFLT,
                 LT_SHUNT_DFLT   type ZVCXI_XCSU_TT_SHUNT_DFLT.
  data:          LS_SHUNT        type ZVCXI_XCSU_S_SHUNT,
                 LS_PACKP        type ZVCXI_XCSU_S_PACKP,
                 LS_SHUTY_DFLT   type ZVCXI_XCSU_S_SHUTY_DFLT,
                 LS_SHUNT_DFLT   type ZVCXI_XCSU_S_SHUNT_DFLT.
  field-symbols: <S_DFLT_SHUTY> type ZVCXI_XCSU_S_DFLT_SHUTY.


*** -----------------------------------------------------------------------
*** Add Additional Information of Default Customizing by Update Standard Structure
  LT_SHUTY_DFLT = ME->GET_SHUTY_DFLT( ).

*** Get Complete Values of Shipping Units per Default Customizing
  LT_SHUNT_DFLT = ME->GET_SHUNT_DFLT( ).

  loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
    clear: LF_PACKP, LF_PRQTY, LF_SAQTY, LS_SHUNT_DFLT, LF_ISOUR.
    if <S_DFLT_SHUTY>-SHUNT is initial.
*** -------------------------------------------------------------------------------
***   Load Default Shipping Unit for Shipping Unit Type if we have a 1:1 assignment
      LT_SHUNT = ME->R_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = <S_DFLT_SHUTY>-SHUTY ).
      if lines( LT_SHUNT ) eq 1.
        read table LT_SHUNT into LS_SHUNT index 1.
        move LS_SHUNT-SHUNT to <S_DFLT_SHUTY>-SHUNT.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Shipping Unit
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                 IF_ISOUR = C_ISOUR_STD
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.

*** -----------------------------------------------------------------------
***   Try to get Info from Default Customizing
      read table LT_SHUTY_DFLT into LS_SHUTY_DFLT with key SHUTY = <S_DFLT_SHUTY>-SHUTY.
      if SY-SUBRC = 0.
        move LS_SHUTY_DFLT-SHUNT to <S_DFLT_SHUTY>-SHUNT.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Shipping Unit
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                 IF_ISOUR = C_ISOUR_STD
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.

*    endif.
*
**** Get Shipping Unit by Default Customizing
*    read table LT_SHUNT_DFLT into LS_SHUNT_DFLT with key SHUNT = <S_DFLT_SHUTY>-SHUNT.
*    if SY-SUBRC eq 0.
*      move LS_SHUNT_DFLT-SHUNT to <S_DFLT_SHUTY>-SHUNT.
*
**** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
****   Add Source Entry - Shipping Unit
*      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
*                               IF_ISOUR = LS_SHUNT_DFLT-ISOUR
*                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
**** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
*    endif.
    endif.
*** -------------------------------------------------------------------------------
*** Load Default Packing Pattern for Shipping Unit Type if we have a 1:1 assignment
    if <S_DFLT_SHUTY>-SHUNT is not initial.
      LT_PACKP = ME->R_CUST_SHIPU->GET_PACKP_FOR_SHUNT( IF_SHUNT = <S_DFLT_SHUTY>-SHUNT ).
      if lines( LT_PACKP ) eq 1.
        read table LT_PACKP into LS_PACKP index 1.
        move LS_PACKP-PACKP to <S_DFLT_SHUTY>-PACKP.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Shipping Unit
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PACKP
                                 IF_ISOUR = C_ISOUR_STD
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
      endif.
    endif.

*** Get Packaging Pattern by Default Customizing
    read table LT_SHUNT_DFLT into LS_SHUNT_DFLT with key SHUNT = <S_DFLT_SHUTY>-SHUNT.
    if LS_SHUNT_DFLT-PACKP is not initial.
      move LS_SHUNT_DFLT-PACKP to <S_DFLT_SHUTY>-PACKP.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Packing Pattern
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PACKP
                               IF_ISOUR = LS_SHUNT_DFLT-ISOUR
                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
    endif.

*** Get Packing Pattern by Shipping Information Mapping
    ME->GET_SHUTY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_PACKP
                                         IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                         IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                               importing EF_VALUE = LF_PACKP
                                         EF_ISOUR = LF_ISOUR ).

    if LF_PACKP is not initial.
      move LF_PACKP to <S_DFLT_SHUTY>-PACKP.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Packing Pattern
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PACKP
                               IF_ISOUR = LF_ISOUR
                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
    endif.

*** -------------------------------------------------------------------------------
*** Get Previous Quantity by Default Customizing
    read table LT_SHUNT_DFLT into LS_SHUNT_DFLT with key SHUNT = <S_DFLT_SHUTY>-SHUNT.
    if LS_SHUNT_DFLT-PRQTY is not initial.
      move LS_SHUNT_DFLT-PRQTY     to <S_DFLT_SHUTY>-PRQTY.
      move LS_SHUNT_DFLT-PRQTY_UOM to <S_DFLT_SHUTY>-PRQTY_UOM.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Previous Quantity
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PRQTY
                               IF_ISOUR = LS_SHUNT_DFLT-ISOUR
                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
    endif.

*** Get Previous Quantity (incl. Unit) by Shipping Information Mapping
    ME->GET_SHUTY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_PRQTY
                                         IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                         IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                               importing EF_VALUE = LF_PRQTY
                                         EF_UNIT  = LF_PRQTY_UOM
                                         EF_ISOUR = LF_ISOUR ).

    if LF_PRQTY is not initial.
      move LF_PRQTY to <S_DFLT_SHUTY>-PRQTY.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Previous Quantity
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PRQTY
                               IF_ISOUR = LF_ISOUR
                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
    endif.
    if LF_PRQTY_UOM is not initial.
      move LF_PRQTY_UOM to <S_DFLT_SHUTY>-PRQTY_UOM.
    endif.

*** -------------------------------------------------------------------------------
*** Get Sample Base Quantity by Shipping Information Mapping
    ME->GET_SHUTY_IELSH_VALUE( exporting IF_IELSH = C_IELSH_SAQTY
                                         IF_SHUTY = <S_DFLT_SHUTY>-SHUTY
                                         IF_SHUNT = <S_DFLT_SHUTY>-SHUNT
                               importing EF_VALUE = LF_SAQTY
                                         EF_UNIT  = LF_SAQTY_UOM
                                         EF_ISOUR = LF_ISOUR ).

    if LF_SAQTY is not initial.
      move LF_SAQTY to <S_DFLT_SHUTY>-SAQTY.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***   Add Source Entry - Sample Base Quantity
      ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SAQTY
                               IF_ISOUR = LF_ISOUR
                     changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
    endif.
    if LF_SAQTY_UOM is not initial.
      move LF_SAQTY_UOM to <S_DFLT_SHUTY>-SAQTY_UOM.
    endif.

  endloop.

endmethod.
method REDET_DFLT.

  data: LS_SHUTY_DFLT_DEF_OLD type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
        LS_SHUTY_DFLT_DEF_NEW type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
        LS_PMATY_DFLT_DEF_OLD type ZVCXI_XCSU_S_PMATY_DFLT_DEF,
        LS_PMATY_DFLT_DEF_NEW type ZVCXI_XCSU_S_PMATY_DFLT_DEF.


***--------------------------------------------------------------------------------------
*** Check for any difference
  check IT_SHUTY_DFLT_DEF ne ME->T_SHUTY_DFLT_DEF.

***--------------------------------------------------------------------------------------
*** Validate the difference
  if lines( IT_SHUTY_DFLT_DEF ) ne lines( ME->T_SHUTY_DFLT_DEF ).
    RF_CHANGED = ABAP_TRUE.
  else.
    loop at ME->T_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF_OLD.
      read table IT_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF_NEW index SY-TABIX.
***   Compare Shipping Units
      if SY-SUBRC ne 0 or
         LS_SHUTY_DFLT_DEF_OLD-POSID ne LS_SHUTY_DFLT_DEF_NEW-POSID or
         LS_SHUTY_DFLT_DEF_OLD-SHUTY ne LS_SHUTY_DFLT_DEF_NEW-SHUTY or
         LS_SHUTY_DFLT_DEF_OLD-SHUNT ne LS_SHUTY_DFLT_DEF_NEW-SHUNT or
         LS_SHUTY_DFLT_DEF_OLD-SETBY ne LS_SHUTY_DFLT_DEF_NEW-SETBY.
        RF_CHANGED = ABAP_TRUE.
        exit. "Don't look any further
      endif.

***   Compare Packing Materials
      if lines( LS_SHUTY_DFLT_DEF_OLD-T_PMATY_DFLT_DEF ) ne lines( LS_SHUTY_DFLT_DEF_NEW-T_PMATY_DFLT_DEF ).
        RF_CHANGED = ABAP_TRUE.
      else.
        loop at LS_SHUTY_DFLT_DEF_OLD-T_PMATY_DFLT_DEF into LS_PMATY_DFLT_DEF_OLD.
          read table LS_SHUTY_DFLT_DEF_NEW-T_PMATY_DFLT_DEF into LS_PMATY_DFLT_DEF_NEW index SY-TABIX.

***       Missing Packaging Material Types are okay (as deleted by user)
          check SY-SUBRC eq 0.

          if LS_PMATY_DFLT_DEF_OLD-POSID ne LS_PMATY_DFLT_DEF_NEW-POSID or
             LS_PMATY_DFLT_DEF_OLD-PMATY ne LS_PMATY_DFLT_DEF_NEW-PMATY or
             LS_PMATY_DFLT_DEF_OLD-PMATN ne LS_PMATY_DFLT_DEF_NEW-PMATN or
             LS_PMATY_DFLT_DEF_OLD-SETBY ne LS_PMATY_DFLT_DEF_NEW-SETBY.
            RF_CHANGED = ABAP_TRUE.
            exit. "Don't look any further
          endif.
        endloop.
      endif.

      if RF_CHANGED eq ABAP_TRUE.
        exit.
      endif.
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Redetermine Defaults
  if RF_CHANGED eq ABAP_TRUE.
    move IT_SHUTY_DFLT_DEF to ME->T_SHUTY_DFLT_DEF.
    clear: ME->T_DFLT_SHUTY.
    ME->CREATE_DFLT_DATA( ).
  endif.

endmethod.
method SET_PMATY_DFLT_DEF.

  data:          LF_POSID          type /VCXI/VKSR_POSID.
  data:          LS_SHUTY_DFLT_DEF type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
                 LS_DFLT_SHUTY     type ZVCXI_XCSU_S_DFLT_SHUTY,
                 LS_PMATY_DFLT_DEF type ZVCXI_XCSU_S_PMATY_DFLT_DEF,
                 LS_DFLT_PMATY     type ZVCXI_XCSU_S_DFLT_PMATY.
  field-symbols: <S_DFLT_SHUTY>    type ZVCXI_XCSU_S_DFLT_SHUTY,
                 <S_DFLT_PMATY>    type ZVCXI_XCSU_S_DFLT_PMATY.

  check ME->T_SHUTY_DFLT_DEF is not initial.
  loop at ME->T_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF.

    check LS_SHUTY_DFLT_DEF-T_PMATY_DFLT_DEF is not initial.

*** Set User values
    loop at LS_SHUTY_DFLT_DEF-T_PMATY_DFLT_DEF into LS_PMATY_DFLT_DEF.
      clear: LF_POSID.

***   Complete Entry Exist
      read table ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY> with key POSID = LS_SHUTY_DFLT_DEF-POSID
                                                                    SHUTY = LS_SHUTY_DFLT_DEF-SHUTY
                                                                    SHUNT = LS_SHUTY_DFLT_DEF-SHUNT.

      check SY-SUBRC = 0.

      read table <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY> with key POSID = LS_PMATY_DFLT_DEF-POSID
                                                                               PMATY = LS_PMATY_DFLT_DEF-PMATY
                                                                               PMATN = LS_PMATY_DFLT_DEF-PMATN.

      if SY-SUBRC eq 0.
        continue.
      else.

***     Packaging Matrial Number was changed
        read table <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY> with key POSID = LS_PMATY_DFLT_DEF-POSID
                                                                                 PMATY = LS_PMATY_DFLT_DEF-PMATY.

        if SY-SUBRC eq 0.
***       Override only if user Changed
          if LS_PMATY_DFLT_DEF-PMATN is not initial.
            move LS_PMATY_DFLT_DEF-PMATN to <S_DFLT_PMATY>-PMATN.
          endif.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = C_ISOUR_USER
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---

        else.
          append initial line to <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY>.
          <S_DFLT_PMATY>-POSID         = LS_PMATY_DFLT_DEF-POSID - 5.
          move LS_PMATY_DFLT_DEF-PMATY to <S_DFLT_PMATY>-PMATY.
          move LS_PMATY_DFLT_DEF-PMATN to <S_DFLT_PMATY>-PMATN.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***       Add Source Entry - Packaging Material Type
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATY
                                   IF_ISOUR = C_ISOUR_USER
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).

***       Add Source Entry - Packaging Material Number
          ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_PMATN
                                   IF_ISOUR = C_ISOUR_USER
                         changing  CT_VASRC = <S_DFLT_PMATY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---


***       Reorg POSID.
          sort <S_DFLT_SHUTY>-T_DFLT_PMATY by POSID.
          loop at <S_DFLT_SHUTY>-T_DFLT_PMATY assigning <S_DFLT_PMATY>.
            add 10 to LF_POSID.
            move LF_POSID to <S_DFLT_PMATY>-POSID.
          endloop.

        endif.
      endif.
    endloop.
  endloop.

*** Delte all Packaging Material Types which are not defined
  loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.

    read table ME->T_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF
                                    with key POSID = LS_DFLT_SHUTY-POSID
                                             SHUTY = LS_DFLT_SHUTY-SHUTY
                                             SHUNT = LS_DFLT_SHUTY-SHUNT.
    check SY-SUBRC eq 0.

    loop at <S_DFLT_SHUTY>-T_DFLT_PMATY into LS_DFLT_PMATY.
      read table LS_SHUTY_DFLT_DEF-T_PMATY_DFLT_DEF with key POSID = LS_DFLT_PMATY-POSID
                                                             PMATY = LS_DFLT_PMATY-PMATY
                                      transporting no fields.

      check SY-SUBRC ne 0.
      delete table <S_DFLT_SHUTY>-T_DFLT_PMATY from LS_DFLT_PMATY.
    endloop.
  endloop.

endmethod.
method SET_SHUTY_DFLT_DEF.

  data:          LF_POSID          type /VCXI/VKSR_POSID.
  data:          LS_SHUTY_DFLT_DEF type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
                 LS_DFLT_SHUTY     type ZVCXI_XCSU_S_DFLT_SHUTY.
  field-symbols: <S_DFLT_SHUTY>    type ZVCXI_XCSU_S_DFLT_SHUTY.

  check ME->T_SHUTY_DFLT_DEF is not initial.

*** Set User values
  loop at ME->T_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF.
    clear: LF_POSID.

*** Complete Entry Exist
    read table ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY> with key POSID = LS_SHUTY_DFLT_DEF-POSID
                                                                  SHUTY = LS_SHUTY_DFLT_DEF-SHUTY
                                                                  SHUNT = LS_SHUTY_DFLT_DEF-SHUNT.
    if SY-SUBRC eq 0.
      continue.
    else.

***   Shipping Unit was changed
      read table ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY> with key POSID = LS_SHUTY_DFLT_DEF-POSID
                                                                    SHUTY = LS_SHUTY_DFLT_DEF-SHUTY.

      if SY-SUBRC eq 0.
***     Override only if user Changed
        if LS_SHUTY_DFLT_DEF-SHUNT is not initial.
          move LS_SHUTY_DFLT_DEF-SHUNT to <S_DFLT_SHUTY>-SHUNT.
        endif.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Shipping Unit
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                 IF_ISOUR = C_ISOUR_USER
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---

      else.
        append initial line to ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
        <S_DFLT_SHUTY>-POSID         = LS_SHUTY_DFLT_DEF-POSID - 5.
        move LS_SHUTY_DFLT_DEF-SHUTY to <S_DFLT_SHUTY>-SHUTY.
        move LS_SHUTY_DFLT_DEF-SHUNT to <S_DFLT_SHUTY>-SHUNT.

*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---
***     Add Source Entry - Shipping Unit Type
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUTY
                                 IF_ISOUR = C_ISOUR_USER
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).

***     Add Source Entry - Shipping Unit
        ME->ADD_VASRC( exporting IF_IVALU = C_IVALU_SHUNT
                                 IF_ISOUR = C_ISOUR_USER
                       changing  CT_VASRC = <S_DFLT_SHUTY>-T_VASRC ).
*** ---...---...---...---...---...---...---...---...---...---...---...---...---...---...---


***     Reorg POSID.
        sort ME->T_DFLT_SHUTY by POSID.
        loop at ME->T_DFLT_SHUTY assigning <S_DFLT_SHUTY>.
          add 10 to LF_POSID.
          move LF_POSID to <S_DFLT_SHUTY>-POSID.
        endloop.

      endif.
    endif.
  endloop.

*** Delte all Shipping Unit Types which are not defined
  loop at ME->T_DFLT_SHUTY into LS_DFLT_SHUTY.
    read table ME->T_SHUTY_DFLT_DEF with key POSID = LS_DFLT_SHUTY-POSID
                                             SHUTY = LS_DFLT_SHUTY-SHUTY
                                    transporting no fields.

    check SY-SUBRC ne 0.
    delete table ME->T_DFLT_SHUTY from LS_DFLT_SHUTY.
  endloop.

endmethod.
