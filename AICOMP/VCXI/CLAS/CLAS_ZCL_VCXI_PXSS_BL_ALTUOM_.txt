
class ZCL_VCXI_PXSS_BL_ALTUOM definition
  public
  create public .

public section.

  data S_CALCV_BASE type ZVCXI_XCS_S_CALCV read-only .
  data T_ALTUOM_DEF type ZVCXI_PXSS_TT_ALTUOM_DEF.

  methods CONSTRUCTOR
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_ISVCE type /VCXI/CKX_ID
      !IF_WERKS type WERKS_D
      !IS_CALCV_BASE type ZVCXI_XCS_S_CALCV optional
    raising
      /VCXI/CX_CKX .
  class-methods CALC_UMREZ_UMREN
    importing
      !IS_CALCV_BASE type ZVCXI_XCS_S_CALCV
      !IS_CALCV_SELF type ZVCXI_XCS_S_CALCV
    exporting
      !EF_UMREZ type UMREZ
      !EF_UMREN type UMREN
    raising
      /VCXI/CX_CKX .
  methods GET_ALTUOM
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
      !IR_MMEXT type ref to ZCL_VCXI_PXE_MM_MMEXT optional
      !IF_LRMEI type LRMEI
    exporting
      !EF_MEINS type MEINS
    returning
      value(RS_ALTUOM) type ZVCXI_PXSS_S_ALTUOM
    raising
      /VCXI/CX_CKX .
protected section.

  methods CALC_VOLUME
    changing
      !CS_ALTUOM type ZVCXI_PXSS_S_ALTUOM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_BL_ALTUOM definition
class ZCL_VCXI_PXSS_BL_ALTUOM implementation.
  method CALC_UMREZ_UMREN.

    data: LF_Z     type F,
          LF_N     type F,
          LF_Z_NEW type F,
          LF_N_NEW type F.

*** Early exit if values are the same
    if IS_CALCV_BASE-CALCV eq IS_CALCV_SELF-CALCV.
      move 1 to EF_UMREN.
      move 1 to EF_UMREZ.
      return.
    endif.

*** Get 5-digit values with the same relation
    call function 'CONVERT_TO_FRACT5'
      exporting
        NOMIN               = IS_CALCV_BASE-CALCV
        DENOMIN             = IS_CALCV_SELF-CALCV
      importing
        NOMOUT              = EF_UMREZ
        DENOMOUT            = EF_UMREN
      exceptions
        CONVERSION_OVERFLOW = 1
        others              = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Find smallest possible 5-digit values
    move EF_UMREZ to LF_Z.
    move EF_UMREN to LF_N.
    call function 'GGT'
      exporting
        Z                         = LF_Z
        N                         = LF_N
      importing
        Z_NEU                     = LF_Z_NEW
        N_NEU                     = LF_N_NEW
      exceptions
        KEINE_NEGAT_WERTE_ERLAUBT = 1
        NULL_NICHT_ERLAUBT        = 2
        others                    = 3.
    if SY-SUBRC eq 0.
      move LF_Z_NEW to EF_UMREZ.
      move LF_N_NEW to EF_UMREN.
    endif.

  endmethod.
  method CALC_VOLUME.

    data: LS_CALCV_AREA   type ZVCXI_XCS_S_CALCV,
          LS_CALCV_VOLUME type ZVCXI_XCS_S_CALCV.


    check CS_ALTUOM-LAENG is not initial and
          CS_ALTUOM-BREIT is not initial and
          CS_ALTUOM-HOEHE is not initial and
          CS_ALTUOM-VOLUM is     initial.

***--------------------------------------------------------------------------------------
*** Calculate Area (in SI Unit)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_ALTUOM-LAENG
                                                        IF_CALCV_UOM_1 = CS_ALTUOM-MEABM
                                                        IF_CALCV_2     = CS_ALTUOM-BREIT
                                                        IF_CALCV_UOM_2 = CS_ALTUOM-MEABM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_AREA-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_AREA-CALCV_UOM ).

*** Calculate Volume (in SI Unit)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_AREA-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_AREA-CALCV_UOM
                                                        IF_CALCV_2     = CS_ALTUOM-HOEHE
                                                        IF_CALCV_UOM_2 = CS_ALTUOM-MEABM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_VOLUME-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_VOLUME-CALCV_UOM ).

***--------------------------------------------------------------------------------------
*** Set Volume based on given Unit
    if CS_ALTUOM-VOLEH is not initial.
      try.
***       Convert Unit
          ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = CS_ALTUOM-VOLEH
                                                   changing  CS_CALCV = LS_CALCV_VOLUME ).
***       Set Volume
          CS_ALTUOM-VOLUM = LS_CALCV_VOLUME-CALCV.
        catch CX_SY_CONVERSION_OVERFLOW.
          clear CS_ALTUOM-VOLUM.
      endtry.

    else.
***   Determine Unit and Set Value
      call function 'UNIT_QUANTITY_SWITCH'
        exporting
          IMP_VALUE         = LS_CALCV_VOLUME-CALCV
          IMP_UNIT          = LS_CALCV_VOLUME-CALCV_UOM
        importing
          EXP_VALUE         = CS_ALTUOM-VOLUM
*         OVERFLOW          = LF_OVERFLOW
        changing
          EXP_UNIT          = CS_ALTUOM-VOLEH
        exceptions
          UNIT_NOT_FOUND    = 1
          OUTPUT_NOT_TYPE_P = 2
          others            = 3.
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL.


***--------------------------------------------------------------------------------------
*** Base Quantity
    if IS_CALCV_BASE is supplied.
      ME->S_CALCV_BASE = IS_CALCV_BASE.
    else.
      ME->S_CALCV_BASE-CALCV = 10000.
      select single MEINS
             into ME->S_CALCV_BASE-CALCV_UOM
             from MARA
            where MATNR = IS_CMPRK-CMATN.
    endif.

***--------------------------------------------------------------------------------------
*** Get System of Measure
    LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = IS_CMPRK ).
    check LR_CUPRFL is bound.

    case LR_CUPRFL->GET_SYSOM_BY_WERKS( IF_WERKS = IF_WERKS ).
***   Get Metric Alternate Unit Customizing
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        select CLINE, DIMID, UOMM as LRMEI, FMAUC
               from ZVCXI_PXS_TC030
               into table @ME->T_ALTUOM_DEF
              where ( CMATN eq @IS_CMPRK-CMATN or CMATN eq @SPACE )
               and  ( PRFID eq @IS_CMPRK-PRFID or PRFID eq @SPACE )
               and  ( ISVCE eq @IF_ISVCE       or ISVCE eq @SPACE )
              order by CLINE.

***   Get Imperial Alternate Unit Customizing
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        select CLINE, DIMID, UOMI as LRMEI, FMAUC
               from ZVCXI_PXS_TC030
               into table @ME->T_ALTUOM_DEF
              where ( CMATN eq @IS_CMPRK-CMATN or CMATN eq @SPACE )
               and  ( PRFID eq @IS_CMPRK-PRFID or PRFID eq @SPACE )
               and  ( ISVCE eq @IF_ISVCE       or ISVCE eq @SPACE )
              order by CLINE.

    endcase.

  endmethod.
  method GET_ALTUOM.

    data: LF_DIMID type DIMID.
    data: LS_ALTUOM_DEF type ZVCXI_PXSS_S_ALTUOM_DEF,
          LS_CALCV_BASE type ZVCXI_XCS_S_CALCV,
          LS_CALCV_SELF type ZVCXI_XCS_S_CALCV.


    check IF_LRMEI is not initial.

***------------------------------------------------------------------------------------------------
*** Get Dimension
    LF_DIMID = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = IF_LRMEI ).

*** Get Calculation Function Name
    read table ME->T_ALTUOM_DEF into LS_ALTUOM_DEF with key DIMID = LF_DIMID
                                                            LRMEI = IF_LRMEI.
    if SY-SUBRC ne 0.
      call function 'DIMENSIONCHECK_DIMENSIONLESS'
        exporting
          MEINH                       = IF_LRMEI
        exceptions
          DIMENSION_NOT_DIMENSIONLESS = 1
          T006D_ENTRY_MISSING         = 2
          T006_ENTRY_MISSING          = 3.
      case SY-SUBRC.
        when 0.
          exit.
        when 1.
***       Check w/o Unit
          read table ME->T_ALTUOM_DEF into LS_ALTUOM_DEF with key DIMID = LF_DIMID.
        when others.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endcase.
    endif.

***------------------------------------------------------------------------------------------------
    try.
***     Calculate Information
        check LS_ALTUOM_DEF-FMAUC is not initial.
        call function LS_ALTUOM_DEF-FMAUC
          exporting
            IR_GATE       = IR_GATE
            IR_MMEXT      = IR_MMEXT
            IF_LRMEI      = IF_LRMEI
            IS_CALCV_BASE = ME->S_CALCV_BASE
          importing
            ES_ALTUOM     = RS_ALTUOM.

        EF_MEINS = ME->S_CALCV_BASE-CALCV_UOM.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC    into data(LR_CX_ILLEGAL_FUNC).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
      catch CX_SY_DYN_CALL_PARAMETER_ERROR into data(LR_CX_PARAMETER_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAMETER_ERROR ).
    endtry.

*** Calculate Volume
    ME->CALC_VOLUME( changing CS_ALTUOM = RS_ALTUOM ).

  endmethod.
