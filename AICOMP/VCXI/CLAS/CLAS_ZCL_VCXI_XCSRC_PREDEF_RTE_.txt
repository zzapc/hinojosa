
class ZCL_VCXI_XCSRC_PREDEF_RTE definition
  public
  final
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_RSRCE_PREDEF type /VCXI/VSMR_RSRCE value 'PREDEF' ##NO_TEXT.
  data T_PREDEF_PSEQ type /VCXI/CKX_TT_OBJECT read-only .
  data R_PRTE type ref to /VCXI/CL_VSMC_PRTE read-only .
  data T_PREDEF_PRTE type /VCXI/CKX_TT_OBJECT .
  constants C_FCODE_CHECK type UI_FUNC value 'CHECK' ##NO_TEXT.
  constants C_FCODE_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.

  methods GET_PSEQD
    returning
      value(RF_PSEQD) type /VCXI/VSMC_PSEQD
    raising
      /VCXI/CX_CKX .
  methods REGISTER_PREDEF_PRTE
    importing
      !IR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE
    raising
      /VCXI/CX_CKX .
  methods GET_RTE_PRTE
    importing
      !IT_RTE_PSTEP type /VCXI/VSMR_TT_RTE_PSTEP
      !IF_DATE type DATS default SY-DATUM
      !IF_LCVAL type /VCXI/VSMC_LCVAL optional
      !IF_KEEP_CHECKING type ABAP_BOOL default ABAP_FALSE
      !IT_RTE_COMBI_PSTEP type /VCXI/VSMR_TT_RTE_COMBI_PSTEP optional
    returning
      value(RT_RTE_PRTE) type /VCXI/VSMR_TT_RTE_PRTE
    raising
      /VCXI/CX_CKX .
protected section.

  data F_CHANGED type ABAP_BOOL .

  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_PRTE type ref to /VCXI/CL_VSMC_PRTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_PSEQ_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCSRC_PREDEF_PSEQ .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
  data F_LOCKED type ABAP_BOOL value ABAP_FALSE. "#EC NOTEXT .
endclass. "ZCL_VCXI_XCSRC_PREDEF_RTE definition
class ZCL_VCXI_XCSRC_PREDEF_RTE implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.

    when ZCL_VCXI_XCSRC_PREDEF_RTE=>C_FCODE_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_XCSRC_PREDEF_RTE=>C_FCODE_FREE.
*      ME->HANDLE_FREE( ).

    when ZCL_VCXI_XCSRC_PREDEF_RTE=>C_FCODE_CHECK.
*      ME->HANDLE_CHECK( ).

  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  move ME->R_PRTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) to RF_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  move ME->R_PRTE->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ) to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->R_PRTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->R_PRTE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LS_INSTANCE   type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_PRTE       type ref to /VCXI/CL_VSMC_PRTE,
         LR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE.

  check IF_GUID is not initial.

  read table ZCL_VCXI_XCSRC_PREDEF_RTE=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    LR_PRTE ?= /VCXI/CL_VSMC_PRTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = IF_GUID ).
*** Get new Instance
    create object LR_PREDEF_RTE
      exporting
        IR_PRTE = LR_PRTE.
    move LR_PREDEF_RTE ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.
endmethod.
method CONSTRUCTOR.

  data:          LF_GUID         type        /VCXI/CKX_GUID.
  data:          LT_GPRER        type        /VCXI/CKX_TT_GUID.
  data:          LR_PREDEF_PSEQ  type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
                 LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_INSTANCE>    type        /VCXI/CKX_S_OBJECT_INSTANCE.

***------------------------------------------------------------------------------------------------
  move IR_PRTE to ME->R_PRTE.

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
  append initial line to ZCL_VCXI_XCSRC_PREDEF_RTE=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
  move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***------------------------------------------------------------------------------------------------
*** Load Predefined Production Sequences
  ME->T_PREDEF_PSEQ = ZCL_VCXI_XCSRC_PREDEF_PSEQ=>GET_PREDEF_PSEQ( IR_PRTE = ME->R_PRTE ).

  loop at ME->T_PREDEF_PSEQ into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PSEQ.
    set handler ME->HANDLE_PSEQ_CHANGED for LR_PREDEF_PSEQ.
  endloop.

*** Load Predefined Production Routes
  select GPRER
         into TABLE LT_GPRER
         from ZVCXI_XCS_TD620
        where GPRTE eq <S_INSTANCE>-GUID.
  loop at LT_GPRER into LF_GUID.
    ZCL_VCXI_XCSRC_PREDEF_PRTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endloop.

endmethod.
method GET_PSEQD.

  data:  LR_PREDEF_PSEQ  type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
         LR_PRTE         type ref to /VCXI/CL_VSMC_PRTE,
         LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.

*** Get Setting of Production Route
  move ME->R_PRTE->F_PSEQD to RF_PSEQD.

*** Get Setting of Sub-Routes
  if RF_PSEQD ne ABAP_TRUE.
    loop at ME->T_PREDEF_PSEQ into LR_OBJECT.
      move LR_OBJECT ?to LR_PREDEF_PSEQ.

***   Check Production Route
      if LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT->F_TOOBJ eq /VCXI/CL_VSMC_PRTE=>C_TOOBJ_PRTE.
        move LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT ?to LR_PRTE.
        if LR_PRTE->F_PSEQD eq ABAP_TRUE.
          move LR_PRTE->F_PSEQD to RF_PSEQD.
          exit.
        endif.
      endif.
    endloop.
  endif.

endmethod.
method GET_RTE_PRTE.

  data:  LF_INVALID           type        ABAP_BOOL,
         LF_WERKS             type        WERKS_D.
  data:  LS_PREDEF_ARBPL      type        ZVCXI_XCSRC_S_PREDEF_ARBPL,
         LS_PREDEF_PSEQ       type        ZVCXI_XCSRC_S_PREDEF_PSEQ.
  data:  LT_RTE_PSTEP         type        /VCXI/VSMR_TT_RTE_PSTEP.
  data:  LR_PREDEF_PRTE       type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE,
         LR_PSTEP             type ref to /VCXI/CL_VSMC_PSTEP,
         LR_RTE_PRTE          type ref to /VCXI/CL_VSMR_RTE_PRTE,
         LR_RTE_ARBPL         type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP         type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_OBJECT            type ref to /VCXI/IF_CKX_OBJECT.

  check IT_RTE_PSTEP is not initial.

***----------------------------------------------------------------------------------------------------------
*** Filter possible Predefined Production Routes
  loop at ME->T_PREDEF_PRTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PRTE.

*** Filter by Link Context Value
    if IF_LCVAL is supplied.
      check LR_PREDEF_PRTE->F_LCVAL eq IF_LCVAL or
            LR_PREDEF_PRTE->F_LCVAL eq SPACE.
    endif.

    clear LF_INVALID.
    move IT_RTE_PSTEP to LT_RTE_PSTEP.

*** Create Routing
    create object LR_RTE_PRTE.
    move C_RSRCE_PREDEF   to LR_RTE_PRTE->F_RSRCE.

*** Add Work Center
    loop at LR_PREDEF_PRTE->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
      create object LR_RTE_ARBPL
        exporting
          IR_ARBPL = LS_PREDEF_ARBPL-R_ARBPL
          IF_LCVAL = IF_LCVAL.

      if LS_PREDEF_ARBPL-R_ARBPL is bound and
         LS_PREDEF_ARBPL-R_ARBPL->R_WERKS is bound.
        move LS_PREDEF_ARBPL-R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.
      endif.

***   Add Production Steps
      loop at LS_PREDEF_ARBPL-T_PREDEF_PSEQ into LS_PREDEF_PSEQ.
        move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->R_PSEQ->R_OBJECT ?to LR_PSTEP.
        read table LT_RTE_PSTEP into LR_RTE_PSTEP index 1.
        if SY-SUBRC              ne 0 or
           LR_RTE_PSTEP->R_PSTEP ne LR_PSTEP.
          if LS_PREDEF_PSEQ-OPSEQ ne ABAP_TRUE.
            move ABAP_TRUE to LF_INVALID.
            exit.
          endif.
        else.
***       Check Plant Filter
          if LR_RTE_PSTEP->I_WERKS is not initial.
            if LF_WERKS not in LR_RTE_PSTEP->I_WERKS.
              move ABAP_TRUE to LF_INVALID.
              exit.
            endif.
          endif.

***       Check Work Center Filter
          if LR_RTE_PSTEP->T_ARBPL is not initial.
            read table LR_RTE_PSTEP->T_ARBPL with key TABLE_LINE = LS_PREDEF_ARBPL-R_ARBPL
                                             transporting no fields.
            if SY-SUBRC ne 0.
              move ABAP_TRUE to LF_INVALID.
              exit.
            endif.
          endif.

          delete LT_RTE_PSTEP index 1.
          append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
        endif.
      endloop.
      if LF_INVALID eq ABAP_TRUE.
        exit.
      endif.
      check LR_RTE_ARBPL->T_RTE_PSTEP is not initial.

***   Add Work Center to Route
      append LR_RTE_ARBPL to LR_RTE_PRTE->T_RTE_ARBPL.
    endloop.

*** Unassigned Production Steps exist
    if LT_RTE_PSTEP is not initial.
      move ABAP_TRUE to LF_INVALID.
    endif.

*** Append new Route
    check LF_INVALID ne ABAP_TRUE.
    append LR_RTE_PRTE to RT_RTE_PRTE.
  endloop.

endmethod.
method HANDLE_PSEQ_CHANGED.

  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
method HANDLE_SAVE.

  data:          LR_PREDEF_PRTE  type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE,
                 LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.

*** Save Predefined Production Routes
  loop at ME->T_PREDEF_PRTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PRTE.
    LR_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_SAVE ).
  endloop.

endmethod.
method REGISTER_PREDEF_PRTE.

  append IR_PREDEF_PRTE to ME->T_PREDEF_PRTE.

endmethod.
method SET_LOCK.

  data:  LR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE,
         LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      loop at ME->T_PREDEF_PRTE into LR_OBJECT.
        move LR_OBJECT ?to LR_PREDEF_PRTE.

        if IF_LOCKED eq ABAP_TRUE.
          LR_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
        else.
          LR_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
        endif.
      endloop.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
