
class ZCL_VCXI_PCSS_PR_MS_PAPER definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PC_MS_PAPER type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_MS_PAPER'. "#EC NOTEXT
  constants C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_PC_BAWGP_A'. "#EC NOTEXT
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_PC_BAWGT'. "#EC NOTEXT
  constants C_PARID_BPAID type /VCXI/VKS_PARID value 'ZVCXI_PC_BPAID'. "#EC NOTEXT
  constants C_PARID_BPFAC type /VCXI/VKS_PARID value 'ZVCXI_PC_BPFAC'. "#EC NOTEXT
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP'. "#EC NOTEXT
  constants C_PARID_SUBPA type /VCXI/VKS_PARID value 'ZVCXI_PC_SUBPA'. "#EC NOTEXT

  type-pools ABAP .
  methods CHECK_CUST_MATNR
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BPAID
    returning
      value(RF_BPAID) type ZVCXI_PCS_BPAID
    raising
      /VCXI/CX_CKX .
  methods GET_BPAID_DESCR
    returning
      value(RF_BPAID_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_BPFAC
    returning
      value(RF_BPFAC) type ZVCXI_PCSS_BPFAC
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_PCS_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_PCS_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_SUBPA
    returning
      value(RF_SUBPA) type ZVCXI_PCSS_SUBPA
    raising
      /VCXI/CX_CKX .
  methods SET_BPAID
    importing
      !IF_BPAID type ZVCXI_PCS_BPAID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_PCS_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_PCS_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SUBPA
    importing
      !IF_SUBPA type ZVCXI_PCSS_SUBPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPFAC
    importing
      !IF_BPFAC type ZVCXI_PCSS_BPFAC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_CHANGE_MATNR type /VCXI/VKSC_IEVNT value 'CHANGE_MATNR'. "#EC NOTEXT
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_BPFAC_CHANGED type /VCXI/VKSC_IEVNT value 'BPFAC_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_INIT_MATNR_REQ type /VCXI/VKSC_IEVNT value 'INIT_MATNR_REQUESTED'. "#EC NOTEXT
  constants C_IEVNT_O_SUBPA_CHANGED type /VCXI/VKSC_IEVNT value 'SUBPA_CHANGED'. "#EC NOTEXT
  data R_CUST_PAPER type ref to ZCL_VCXI_PCSS_CUST_PAPER .

  methods HANDLE_CHANGE_MATNR
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_MS_PAPER definition
class ZCL_VCXI_PCSS_PR_MS_PAPER implementation.
method CHECK_CUST_MATNR.

  check ME->R_CUST_MATNR is bound or
        ME->GET_MATNR( ) is initial.
  move ABAP_TRUE to RF_OKAY.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_W.

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_BPAID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).
  move LS_PARAM-ATWRT to RF_BPAID.

endmethod.
method GET_BPAID_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_PCS_BPAID'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_BPAID   type                   ZVCXI_PCS_BPAID.

  LF_BPAID = ME->GET_BPAID( ).

*** Return Starch Code description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_BPAID into LS_D07V.
  check SY-SUBRC = 0.

  RF_BPAID_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_BPFAC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPFAC ).
  move LS_PARAM-ATFLV to RF_BPFAC.

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_STATUS.

  data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
        LS_BAWGP type ZVCXI_PCS_S_BAWGP.


  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Basis Weight is maintained------------------------
  LS_BAWGT = ME->GET_BAWGT( ).
  if LS_BAWGT-BAWGT is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


*** Check Basis Weight Per is maintained--------------------
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGP-BAWGP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


*** Check Paper ID is maintained----------------------------
  if ME->GET_BPAID( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Paper Factor is maintained------------------------
  if ME->GET_BPFAC( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.


*** Check Caliper is maintained----------------------------
  if ME->GET_CALIP( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:   LS_PRICE type ZVCXI_XCS_S_PRICE,
          LS_PRICP type ZVCXI_XCS_S_PRICP,
          LS_BAWGT type ZVCXI_PCS_S_BAWGT,
          LS_CALIP type ZVCXI_P0SS_S_CALIP,
          LS_BAWGP type ZVCXI_PCS_S_BAWGP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Price
  if ME->GET_SUBPA( ) eq ABAP_TRUE.
    LS_PRICE = ME->GET_PRICE( ).

    if LS_PRICE-PRICE is not initial.
*** Price is maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '201' ).
    else.
*** Price is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '202' ).
    endif.


*** Check Pricp
    LS_PRICP = ME->GET_PRICP( ).
    if LS_PRICP-PRICP is not initial.
*** Price Per is is maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '203' ).

    else.
*** Price Per is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '204' ).
    endif.

  endif.


*** Check Bawgt
  LS_BAWGT = ME->GET_BAWGT( ).
  if LS_BAWGT-BAWGT is not initial.
*** Basis Weight is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '205' ).

  else.
***  Basis Weight is not maintained .
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '206' ).
  endif.


*** Check Bawgp
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGP-BAWGP is not initial.
*** Basis Weight Per is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '207' ).

  else.
*** Basis Weight Per is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '208' ).
  endif.


  if ME->GET_BPAID( ) is not initial.
*** Paper ID is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '211' ).
  else.
*** Paper ID is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '212' ).
  endif.


  if ME->GET_BPFAC( ) is not initial.
*** Paper Factor is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '213' ).
  else.
*** Paper Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '214' ).
  endif.


*** Check Caliper
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
*** Caliper is maintained
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '215' ).
  else.
*** Caliper can't be read from Paper Classification.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '216' ).
  endif.

endmethod.
method GET_SUBPA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBPA ).
  move LS_PARAM-ATWRT to RF_SUBPA.

endmethod.
method HANDLE_CHANGE_MATNR.

  data:  LF_MATNR   type MATNR.
  data:  LS_PRICE   type ZVCXI_XCS_S_PRICE,
         LS_PRICP   type ZVCXI_XCS_S_PRICP.

*** Substitute Flag is Initial -> Clear it and Board have to init Paper Material
  if ME->GET_SUBPA( ) eq ABAP_FALSE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INIT_MATNR_REQ ).

*** Init Matnr
    ME->SET_MATNR( IF_MATNR = LF_MATNR ).

*** Init Price
    ME->SET_PRICE( IS_PRICE = LS_PRICE ).
    ME->SET_PRICP( IS_PRICP = LS_PRICP ).

*** Substitute Paper -> Set new Paper Mat
  else.
    ME->SET_MATNR( IF_MATNR = ME->F_MATNR_DUMMY ).

  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_CHANGE_MATNR.
      ME->HANDLE_CHANGE_MATNR( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

  if ME->R_CUST_PAPER          is bound    and
     ME->R_CUST_PAPER->F_MATNR eq LF_MATNR and
     ME->R_CUST_PAPER->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_PAPER.

*** Load the Customizing
  ME->R_CUST_PAPER = ZCL_VCXI_PCSS_CUST_PAPER=>GET_INSTANCE_PAPER( IF_MATNR = LF_MATNR
                                                                   IF_WERKS = LF_WERKS
                                                                   IF_DATE  = SY-DATUM ).


*** Get Caliper only from Real Board Paper
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_CALIP( IS_CALIP = ME->R_CUST_PAPER->S_CALIP ).
    ME->SET_BAWGT( IS_BAWGT = ME->R_CUST_PAPER->S_BAWGT ).
    ME->SET_BAWGP( IS_BAWGP = ME->R_CUST_PAPER->S_BAWGP ).
  endif.

  move ME->R_CUST_PAPER to ME->R_CUST_MATNR.

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BPAID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).

  move IF_BPAID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_BPFAC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPFAC ).

  move IF_BPFAC     to LS_PARAM-ATFLV.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPFAC_CHANGED ).
  endif.

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_SUBPA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUBPA ).
  if IF_SUBPA is not initial.
    move IF_SUBPA to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATWRT,
           LS_PARAM-SETBY.
  endif.
  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SUBPA_CHANGED ).
  endif.

endmethod.
