
class ZCL_VCXI_XCSUC_GRID_CP_SHUTY definition
  public
  inheriting from ZCL_VCXI_XCSUC_GRID
  create public .

public section.

  events DOUBLE_CLICK
    exporting
      value(IF_GPSUN) type ZVCXI_XCSU_GPSUN .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
      !IR_S_CONTAINER type ref to CL_GUI_CONTAINER optional
    raising
      /VCXI/CX_CKX .
protected section.

  data R_CPACK type ref to ZCL_VCXI_XCSUC_CPACK .

  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods CHECK_SELECTION
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_COPY type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
endclass. "ZCL_VCXI_XCSUC_GRID_CP_SHUTY definition
class ZCL_VCXI_XCSUC_GRID_CP_SHUTY implementation.
method CHECK_SELECTION.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( exporting IF_TABNAME        = 'ZVCXI_XCSUC_S_CPACK_SHUTY_GRID'
                                IF_CONTAINER_NAME = IF_CONTAINER_NAME
                                IR_CUSTOMIZING    = IR_CUSTOMIZING
                                IR_S_CONTAINER    = IR_S_CONTAINER ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
***   Packaging Code Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSUC'
          IF_MSGNO = '102' ).
  endtry.

  check ME->R_CPACK is bound.
  ME->F_LOCKED = ME->R_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Set Packaging Code and GUID to only technical Fields
      when 'CPACK' or 'GPSUN'.
        move ABAP_TRUE to <S_FCAT>-TECH.

      when 'WERKS' or 'SHUTY' or 'SHUNT'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CPACK_SHUTY_GRID  type          ZVCXI_XCSUC_S_CPACK_SHUTY_GRID,
                 LS_CPACK_SHUTY       type          ZVCXI_XCSUC_S_CPACK_SHUTY.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Packaging Code Shipping Units
  loop at ME->R_CPACK->T_CPACK_SHUTY into LS_CPACK_SHUTY.
    clear: LS_CPACK_SHUTY_GRID.

    move-corresponding LS_CPACK_SHUTY to LS_CPACK_SHUTY_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CPACK_SHUTY_GRID to <S_DATA>.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED.

  data:          LF_INDEX                  type          I,
                 LF_DO_CHECK               type          ABAP_BOOL,
                 LF_WERKS                  type          WERKS_D,
                 LF_SHUTY                  type          ZVCXI_XCSU_SHUTY,
                 LF_SHUNT                  type          ZVCXI_XCSU_SHUNT.
  data:          LS_GOOD_CELLS             type          LVC_S_MODI.
  data:          LT_SHUNT                  type          ZVCXI_XCSU_TT_SHUNT,
                 LT_SHUTY                  type          ZVCXI_XCSU_TT_SHUTY.
  data:          LR_CUST_SHIPU             type ref to   ZCL_VCXI_XCSU_CUST_SHIPU,
                 LR_CX_CKX                 type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>                  type standard table,
                 <S_DATA>                  type          any.


  check E_ONF4_AFTER is initial.

  try.

      SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                            E_ONF4          = E_ONF4
                                            E_ONF4_BEFORE   = E_ONF4_BEFORE
                                            E_ONF4_AFTER    = E_ONF4_AFTER
                                            E_UCOMM         = E_UCOMM ).
***   Get Shipping Customizing
      LR_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ).


***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        LF_INDEX = SY-TABIX.

*** ----------------------------------------------------------------------
***     Check Plant if it is not initial
        clear: LS_GOOD_CELLS, LF_DO_CHECK.
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID    = LF_INDEX
                                                           FIELDNAME = 'WERKS'
                                                      into LS_GOOD_CELLS.
        if SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to LF_WERKS.
        endif.

        if LF_WERKS is not initial.
          select single WERKS from T001W
                   into LF_WERKS
                  where WERKS = LF_WERKS.

          if SY-SUBRC ne 0.
***         Add Protocol - Check Plant. It is not Valid.
            ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_XCSUC'
                                                           I_MSGTY     = 'E'
                                                           I_MSGNO     = '103'
                                                           I_FIELDNAME = 'WERKS'
                                                           I_ROW_ID    = LF_INDEX ).

          endif.
        endif.


*** ----------------------------------------------------------------------
***     Check Shipping Unit Type
        clear: LS_GOOD_CELLS, LF_DO_CHECK.
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID    = LF_INDEX
                                                           FIELDNAME = 'SHUTY'
                                                      into LS_GOOD_CELLS.
        if SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to LF_SHUTY.
          move ABAP_TRUE to LF_DO_CHECK.
        endif.

        if LF_DO_CHECK eq ABAP_TRUE.
          LT_SHUTY = LR_CUST_SHIPU->GET_SHUTY_FOR_SHSCH( IF_SHSCH = SPACE ).
          read table LT_SHUTY with key SHUTY = LF_SHUTY transporting no fields.
          if SY-SUBRC ne 0 or
             LF_SHUTY is initial.
***         Add Protocol - Check Shipping Unit Type. Entered Value is not valid.
            ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_XCSUC'
                                                           I_MSGTY     = 'E'
                                                           I_MSGNO     = '104'
                                                           I_FIELDNAME = 'SHUTY'
                                                           I_ROW_ID    = LF_INDEX ).

***         Check next Entry
            continue.
          endif.
        endif.


*** ----------------------------------------------------------------------
***     Check Shipping Unit
        clear: LS_GOOD_CELLS, LF_DO_CHECK.
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID    = LF_INDEX
                                                           FIELDNAME = 'SHUNT'
                                                      into LS_GOOD_CELLS.
        if SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to LF_SHUNT.
          move ABAP_TRUE to LF_DO_CHECK.
        endif.

        if LF_DO_CHECK eq ABAP_TRUE.
          LT_SHUNT = LR_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).
          read table LT_SHUNT with key SHUNT = LF_SHUNT transporting no fields.
          if SY-SUBRC ne 0 or
             LF_SHUNT is initial.
***         Add Protocol - Shipping Unit is not Valid for Shipping Unit Type.
            ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_XCSUC'
                                                           I_MSGTY     = 'E'
                                                           I_MSGNO     = '105'
                                                           I_FIELDNAME = 'SHUNT'
                                                           I_ROW_ID    = LF_INDEX ).
          endif.
        endif.
      endloop.

      ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_CPACK_SHUTY       type          ZVCXI_XCSUC_S_CPACK_SHUTY.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_CPACK_SHUTY.
        ME->R_CPACK->UPDATE_CPACK_SHUTY( IS_CPACK_SHUTY = LS_CPACK_SHUTY ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_CPACK_SHUTY      type               ZVCXI_XCSUC_S_CPACK_SHUTY.
  data:          LR_CX_CKX           type ref to        /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard      table,
                 <S_DATA>            type               any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.
      move-corresponding <S_DATA> to LS_CPACK_SHUTY.

      move ABAP_TRUE to ME->F_REFRESH_REQ.

      raise event DOUBLE_CLICK
        exporting
          IF_GPSUN = LS_CPACK_SHUTY-GPSUN.

      CL_GUI_CFW=>SET_NEW_OK_CODE( 'REFRESH' ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LS_GRID        type          ZVCXI_XCSUC_S_CPACK_SHUTY_GRID,
                 LS_CPACK_SHUTY type          ZVCXI_XCSUC_S_CPACK_SHUTY.
  data:          LR_CX_CKX      type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>       type standard table,
                 <S_DATA>       type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        move-corresponding <S_DATA> to LS_GRID.

***     Handle F4 call
        case E_FIELDNAME.
          when 'SHUNT'.
            move-corresponding LS_GRID to LS_CPACK_SHUTY.
            check LS_CPACK_SHUTY-SHUTY is not initial.
            LS_CPACK_SHUTY-SHUNT = ZCL_VCXI_XCSU_SHLP_SHUNT=>CALL_SHLP( IF_SHUTY = LS_CPACK_SHUTY-SHUTY ).
            ME->R_CPACK->UPDATE_CPACK_SHUTY( IS_CPACK_SHUTY = LS_CPACK_SHUTY ).
            ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.

        endcase.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.                    "HANDLE_ONF4
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CPACK->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add Entry'(001)           to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete Entry'(003)        to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR          to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar elements Copy and Add Prio
      clear LS_TOOLBAR.
      move C_FUNC_COPY                to LS_TOOLBAR-FUNCTION.
      move 'Copy Entry'(002)          to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SYSTEM_COPY           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LF_GPSUN            type               ZVCXI_XCSU_GPSUN.
  data:          LS_CELL             type               LVC_S_CELL,
                 LS_ROW              type               LVC_S_ROW,
                 LS_CPACK_SHUTY      type               ZVCXI_XCSUC_S_CPACK_SHUTY,
                 LS_CPACK_SHUTY_NEW  type               ZVCXI_XCSUC_S_CPACK_SHUTY,
                 LS_CPACK_PMATY      type               ZVCXI_XCSUC_S_CPACK_PMATY,
                 LS_CPACK_PMATY_NEW  type               ZVCXI_XCSUC_S_CPACK_PMATY.
  data:          LT_CELL             type               LVC_T_CELL,
                 LT_ROW              type               LVC_T_ROW,
                 LT_CPACK_SHUTY      type               ZVCXI_XCSUC_TT_CPACK_SHUTY,
                 LT_CPACK_PMATY      type               ZVCXI_XCSUC_TT_CPACK_PMATY.
  data:          LR_CX_CKX           type ref to        /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard      table,
                 <S_CPACK_SHUTY>     type               ZVCXI_XCSUC_S_CPACK_SHUTY,
                 <S_DATA>            type               any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Shipping Unit Type Mapping's and Data Source Mapping
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK_SHUTY assigning <S_CPACK_SHUTY>.
        move-corresponding <S_DATA> to <S_CPACK_SHUTY>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_CPACK_SHUTY assigning <S_CPACK_SHUTY>.
        move-corresponding <S_DATA> to <S_CPACK_SHUTY>.
      endloop.

*** ---------------------------------------------------------------------------
***   handle UserCommand
      case E_UCOMM.

        when C_FUNC_ADD.
***       Add new Packaging Code - Shipping Unit Assignment
          ME->R_CPACK->ADD_CPACK_SHUTY( IS_CPACK_SHUTY = LS_CPACK_SHUTY ).

        when C_FUNC_DEL.
***       Delete Shipping Unit Type Mapping
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '003'.
          endif.

***       Delete all Shipping Unit Type Assignments
          loop at LT_CPACK_SHUTY into LS_CPACK_SHUTY.

***         Delte all Related Packaging Material assignments
            loop at ME->R_CPACK->T_CPACK_PMATY into LS_CPACK_PMATY where GPSUN = LS_CPACK_SHUTY-GPSUN.
              ME->R_CPACK->DELETE_CPACK_PMATY( IS_CPACK_PMATY = LS_CPACK_PMATY ).
            endloop.

            ME->R_CPACK->DELETE_CPACK_SHUTY( IS_CPACK_SHUTY = LS_CPACK_SHUTY ).
          endloop.

        when C_FUNC_COPY.
***       Copy Complete Shipping Unit Type Assignment
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Copy.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '005'.
          endif.

***       Copy all Shipping Unit Type Assignments
          loop at LT_CPACK_SHUTY into LS_CPACK_SHUTY.

            move LS_CPACK_SHUTY to LS_CPACK_SHUTY_NEW.
            clear LS_CPACK_SHUTY_NEW-GPSUN.
            LF_GPSUN = ME->R_CPACK->ADD_CPACK_SHUTY( IS_CPACK_SHUTY = LS_CPACK_SHUTY_NEW ).

***         Copy all Related Packaging Material assignments
            move ME->R_CPACK->T_CPACK_PMATY to LT_CPACK_PMATY.
            loop at LT_CPACK_PMATY into LS_CPACK_PMATY where GPSUN = LS_CPACK_SHUTY-GPSUN.
              move LS_CPACK_PMATY to LS_CPACK_PMATY_NEW.
              move LF_GPSUN to LS_CPACK_PMATY_NEW-GPSUN.
              ME->R_CPACK->ADD_CPACK_PMATY( IS_CPACK_PMATY = LS_CPACK_PMATY_NEW ).
            endloop.
          endloop.

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for F4Help, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_ONF4         for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
