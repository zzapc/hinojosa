
class ZCL_VCXI_FBSSC_UIF_BPART definition
  public
  inheriting from ZCL_VCXI_FBSSC_UIF
  create public .

public section.

  constants C_TABPT type ZVCXI_F0S_TABPT value '0120S_BP_TAB-TAB' ##NO_TEXT.
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .
  data F_CURSOR type SCRFNAME .
  data F_ACTIVE_TAB type STRING .
  data S_TAB_DESCR type ZVCXI_F0S_S_TAB_DESCR .
  data S_BAGTY_BPART_VIS type ZVCXI_FBSSC_S_BAGTY_BPART_VIS read-only .

  methods GET_BPART
    returning
      value(RS_BAGTY_BPART) type ZVCXI_FBSSC_S_BAGTY_BPART
    raising
      /VCXI/CX_CKX .
  methods SET_GRID_REFRESH
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BAGTY type ref to ZCL_VCXI_FBSSC_BAGTY
    raising
      /VCXI/CX_CKX .
  methods DO_MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_BAGTY_BPART_VIS
    importing
      !IS_BAGTY_BPART_VIS type ZVCXI_FBSSC_S_BAGTY_BPART_VIS
    raising
      /VCXI/CX_CKX .

  methods DO_FREE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_STRIPDESCR
    redefinition .
protected section.

  data R_GRID_BPCAL type ref to ZCL_VCXI_FBSSC_GRID_BPCAL .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  constants C_TAB type STRING value 'TAB' ##NO_TEXT.
  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_BTYPE_MENU type TB_BTYPE value 2 ##NO_TEXT.
  constants C_BTYPE_BUTTON type TB_BTYPE value 0 ##NO_TEXT.
  data T_TAB_LIST type ZVCXI_FBSSC_TT_TAB_LIST .

  methods ADD_BPART
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
    raising
      /VCXI/CX_CKX .
  methods DELETE_BPART
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DROPDOWN_CLICKED
    for event DROPDOWN_CLICKED of CL_GUI_TOOLBAR
    importing
      !FCODE
      !POSX
      !POSY .
  methods HANDLE_FUNCTION_SELECTED
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSSC_UIF_BPART definition
class ZCL_VCXI_FBSSC_UIF_BPART implementation.
  method ADD_BPART.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    move ME->R_BAGTY->F_IBAGT to LS_BAGTY_BPART-IBAGT.
    move IF_IBPAR to LS_BAGTY_BPART-IBPAR.

*** Add Bag Part
    ME->R_BAGTY->ADD_BPART( IS_BAGTY_BPART = LS_BAGTY_BPART ).

    move ABAP_TRUE to ME->R_GRID_BPCAL->F_REFRESH_REQ.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_BAGTY = IR_BAGTY ).

  if ME->R_GRID_BPCAL is not bound.

*** Create Bag Part - Calculation Grid
    create object ME->R_GRID_BPCAL
      exporting
        IF_TABNAME        = 'ZVCXI_FBSSC_S_BAGTY_BPCAL_GRID'
        IF_CONTAINER_NAME = '0121CC_GRID'
        IR_CUSTOMIZING    = ME->R_BAGTY.
  endif.

  call function 'ZVCXI_FBSSC_UIF_BPART_BIND'
    exporting
      IR_UIF_BPART = ME.

endmethod.
  method DELETE_BPART.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART,
          LS_TAB_LIST    type ZVCXI_FBSSC_S_TAB_LIST.

*** Check if there is an active tab
    check ME->F_ACTIVE_TAB is not initial.

    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    check LS_TAB_LIST-IBPAR is not initial.

    move: ME->R_BAGTY->F_IBAGT to LS_BAGTY_BPART-IBAGT,
          LS_TAB_LIST-IBPAR to LS_BAGTY_BPART-IBPAR.

*** Delete Bag Part
    ME->R_BAGTY->DELETE_BPART( IS_BAGTY_BPART = LS_BAGTY_BPART ).

    move ABAP_TRUE to ME->R_GRID_BPCAL->F_REFRESH_REQ.

  endmethod.
method DO_FREE.

  SUPER->DO_FREE( ).

****--------------------------------------------------------------------------------------
**** Free Bag Parts
  if ME->R_TOOLBAR is bound.
    ME->R_TOOLBAR->FREE( ).
    clear ME->R_TOOLBAR.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( ).
    clear ME->R_CONTAINER.
  endif.

  if ME->R_GRID_BPCAL is bound.
    ME->R_GRID_BPCAL->DO_FREE( ).
    clear ME->R_GRID_BPCAL.
  endif.

endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type /VCXI/CKX_LOCKED.

    LF_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

    loop at screen.
***   Set the Tabs which aren't in use as invisible.
      if SCREEN-NAME cs C_TABPT.
        read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
        if SY-SUBRC ne 0.
          move 1 to SCREEN-INVISIBLE.
        else.
          move 1 to SCREEN-INPUT.
        endif.

        modify screen.
        continue.
      endif.

      if SCREEN-GROUP1 eq 'RB'.
        if ( ME->S_BAGTY_BPART_VIS-ODIRL is not initial and
             ME->S_BAGTY_BPART_VIS-ODIRT is initial ) or
           ( ME->S_BAGTY_BPART_VIS-ODIRL is initial and
             ME->S_BAGTY_BPART_VIS-ODIRT is not initial ) or
           ( ME->S_BAGTY_BPART_VIS-ODIRL is initial and
             ME->S_BAGTY_BPART_VIS-ODIRT is initial ).
          move 0  to SCREEN-INPUT.
        else.
          move 1 to SCREEN-INPUT.
        endif.
      endif.

      if LF_LOCKED ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
      endif.

      modify screen.
    endloop.

  endmethod.
method DO_PBO.

*** Initialize Tab List
  ME->INIT_TAB_LIST( ).

*** Initialize Visualization Structure
  ME->INIT_VIS( ).

*** Refresh Toolbar
  ME->REFRESH_TOOLBAR( ).

*** Refresh Grid
  if ME->R_GRID_BPCAL is bound.
    ME->R_GRID_BPCAL->REFRESH_GRID( ).
  endif.

endmethod.
  method DO_UPDATE_BAGTY_BPART_VIS.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    if ME->S_BAGTY_BPART_VIS-ODIRL ne IS_BAGTY_BPART_VIS-ODIRL.
      move IS_BAGTY_BPART_VIS-ODIRL to ME->S_BAGTY_BPART_VIS-ODIRL.
    endif.

    if ME->S_BAGTY_BPART_VIS-ODIRT ne IS_BAGTY_BPART_VIS-ODIRT.
      move IS_BAGTY_BPART_VIS-ODIRT to ME->S_BAGTY_BPART_VIS-ODIRT.
    endif.

    if IS_BAGTY_BPART_VIS-ODIRL is initial and
       IS_BAGTY_BPART_VIS-ODIRT is initial.
***   When both checkboxes are empty then use first as Default
      move 'L' to ME->S_BAGTY_BPART_VIS-BPDIR.

    elseif IS_BAGTY_BPART_VIS-ODIRL is initial and
           IS_BAGTY_BPART_VIS-ODIRT is not initial.
***   When only Transversal is filled then use it as Default
      move 'T' to ME->S_BAGTY_BPART_VIS-BPDIR.

    elseif IS_BAGTY_BPART_VIS-ODIRL is not initial and
           IS_BAGTY_BPART_VIS-ODIRT is initial.
***   When only Longitudinal is filled then use it as Default
      move 'L' to ME->S_BAGTY_BPART_VIS-BPDIR.

    else.
***   When both are filled then decide according radiobutton
      case ABAP_TRUE.
        when IS_BAGTY_BPART_VIS-FOVRR_ODIRL.
          move 'L' to ME->S_BAGTY_BPART_VIS-BPDIR.

        when IS_BAGTY_BPART_VIS-FOVRR_ODIRT.
          move 'T' to ME->S_BAGTY_BPART_VIS-BPDIR.

      endcase.
    endif.

*** Update Bag Part - Header Information
    read table ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART with key IBPAR = IS_BAGTY_BPART_VIS-IBPAR.
    if SY-SUBRC is initial.
      move: IS_BAGTY_BPART_VIS-ODIRL to LS_BAGTY_BPART-ODIRL,
            IS_BAGTY_BPART_VIS-ODIRT to LS_BAGTY_BPART-ODIRT,
            ME->S_BAGTY_BPART_VIS-BPDIR to LS_BAGTY_BPART-BPDIR.

      ME->R_BAGTY->UPDATE_BPART( IS_BAGTY_BPART = LS_BAGTY_BPART ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    if IF_UCOMM cs C_TABPT.
***   Set User Command to active tab
      move IF_UCOMM to ME->F_ACTIVE_TAB.

***   Get Active Bag Part Info
      move ME->GET_BPART( ) to LS_BAGTY_BPART.

      check ME->R_GRID_BPCAL is bound.

***   Pass Active Bag Part Info to grid
      ME->R_GRID_BPCAL->SET_ACTIVE_BPART( IS_BAGTY_BPART = LS_BAGTY_BPART ).
      move ABAP_TRUE to  ME->R_GRID_BPCAL->F_REFRESH_REQ.

    endif.

  endmethod.
  method GET_BPART.

    data: LS_TAB_LIST    type ZVCXI_FBSSC_S_TAB_LIST,
          LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    check ME->F_ACTIVE_TAB is not initial.

    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    check SY-SUBRC is initial.

    read table ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART with key IBPAR = LS_TAB_LIST-IBPAR.
    check SY-SUBRC is initial.

    move LS_BAGTY_BPART to RS_BAGTY_BPART.

  endmethod.
method GET_STRIPDESCR.

  RF_DESCR = text-E01.

endmethod.
  method HANDLE_DROPDOWN_CLICKED.

    data: LF_FCODE    type        UI_FUNC,
          LF_TEXT     type        GUI_TEXT,
          LF_DISABLED type        CUA_ACTIVE.
    data: LS_TC020    type        ZVCXI_FBS_TC020.
    data: LR_MENU     type ref to CL_CTMENU,
          LR_CX_CKX   type ref to /VCXI/CX_CKX.

    try.
        case FCODE.
          when C_FCODE_ADD.

***         Create DropDown Menu
            create object LR_MENU.

            loop at ME->R_BAGTY->T_TC020 into LS_TC020.
              clear: LF_FCODE, LF_TEXT.

***           Get Function Code
              concatenate C_FCODE_ADD LS_TC020-IBPAR into LF_FCODE separated by '@'.

***           Get Description
              move ME->R_BAGTY->GET_IBPAR_DESCR( LS_TC020-IBPAR ) to LF_TEXT.

***           Check if Body Part will be added
              LF_DISABLED = ME->R_BAGTY->CHECK_BPART_ADD( IF_IBPAR = LS_TC020-IBPAR ).

***           Add Function
              LR_MENU->ADD_FUNCTION( FCODE    = LF_FCODE
                                     TEXT     = LF_TEXT
                                     DISABLED = LF_DISABLED ).
            endloop.
        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( CONTEXT_MENU = LR_MENU
                                             POSX         = POSX
                                             POSY         = POSY ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_FUNCTION_SELECTED.

    data: LF_UCOMM type SYUCOMM,
          LF_IBPAR type ZVCXI_FBS_IBPAR.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.

        split FCODE at '@' into LF_UCOMM LF_IBPAR.

***     Trigger general Add command
        case LF_UCOMM.
          when C_FCODE_ADD.
            ME->ADD_BPART( IF_IBPAR = LF_IBPAR ).

          when C_FCODE_DELETE.
            ME->DELETE_BPART( ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0120CC_TOOLBAR'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TAB_LIST.

    data: LF_TAB   type NUMC3,
          LF_FNAME type STRING.
    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART,
          LS_TC020T      type ZVCXI_FBS_TC020T.
    field-symbols: <S_TAB_LIST> type ZVCXI_FBSSC_S_TAB_LIST,
                   <F_DESCR>    type /VCXI/CKX_DESCR.

    free: ME->T_TAB_LIST,
          ME->S_TAB_DESCR,
          LF_TAB.

*** Add Tabs
    loop at ME->R_BAGTY->T_BAGTY_BPART into LS_BAGTY_BPART.

      insert initial line into table ME->T_TAB_LIST assigning <S_TAB_LIST>.
      add 1 to LF_TAB.
      concatenate C_TABPT LF_TAB into <S_TAB_LIST>-TABNAME.
      move: LS_BAGTY_BPART-IBPAR to <S_TAB_LIST>-IBPAR.

***   No active Tab is defined, use first Tab as active
      if ME->F_ACTIVE_TAB is initial.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      endif.

      concatenate C_TAB LF_TAB into LF_FNAME.
      assign component LF_FNAME of structure ME->S_TAB_DESCR to <F_DESCR>.
      if SY-SUBRC is initial.
        move ME->R_BAGTY->GET_IBPAR_DESCR( LS_BAGTY_BPART-IBPAR ) to <F_DESCR>.
      endif.

    endloop.

***--------------------------------------------------------------------------------------
*** Check Active Tab exists
    if ME->F_ACTIVE_TAB cs C_TABPT.
      read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                                transporting no fields.
      if SY-SUBRC ne 0.
        read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
        if SY-SUBRC eq 0.
          move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
        else.
          clear ME->F_ACTIVE_TAB.
        endif.
      endif.

      clear LS_BAGTY_BPART.

***   Get Active Bag Part Info
      move ME->GET_BPART( ) to LS_BAGTY_BPART.

      check ME->R_GRID_BPCAL is bound.

***   Pass Active Bag Part Info to grid
      ME->R_GRID_BPCAL->SET_ACTIVE_BPART( IS_BAGTY_BPART = LS_BAGTY_BPART ).

    endif.

    set cursor field ME->F_CURSOR.
    clear ME->F_CURSOR.

  endmethod.
  method INIT_TOOLBAR.

    data: LT_EVENT                type        CNTL_SIMPLE_EVENTS.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.

    check ME->R_TOOLBAR is not bound.

***--------------------------------------------------------------------------------------
*** Create Toolbar
    create object ME->R_TOOLBAR
      exporting
        PARENT             = ME->R_CONTAINER
      exceptions
        CNTL_INSTALL_ERROR = 1
        CNTL_ERROR         = 2
        CNTB_WRONG_VERSION = 3
        others             = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
    move ABAP_TRUE                       to <S_EVENT>-APPL_EVENT.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
    move ABAP_TRUE                       to <S_EVENT>-APPL_EVENT.

    ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting
                                            EVENTS                    = LT_EVENT
                                          exceptions
                                            CNTL_ERROR                = 1
                                            CNTL_SYSTEM_ERROR         = 2
                                            ILLEGAL_EVENT_COMBINATION = 3
                                            others                    = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event Handler
    set handler  ME->HANDLE_DROPDOWN_CLICKED
                 ME->HANDLE_FUNCTION_SELECTED
                 for : ME->R_TOOLBAR.

  endmethod.
  method INIT_VIS.

    data: LS_BAGTY_BPART type ZVCXI_FBSSC_S_BAGTY_BPART.

    move ME->GET_BPART( ) to LS_BAGTY_BPART.

    check LS_BAGTY_BPART is not initial.

    move: LS_BAGTY_BPART-IBAGT to ME->S_BAGTY_BPART_VIS-IBAGT,
          LS_BAGTY_BPART-IBPAR to ME->S_BAGTY_BPART_VIS-IBPAR,
          LS_BAGTY_BPART-ODIRL to ME->S_BAGTY_BPART_VIS-ODIRL,
          LS_BAGTY_BPART-ODIRT to ME->S_BAGTY_BPART_VIS-ODIRT,
          LS_BAGTY_BPART-BPDIR to ME->S_BAGTY_BPART_VIS-BPDIR.

    clear: ME->S_BAGTY_BPART_VIS-FOVRR_ODIRL, ME->S_BAGTY_BPART_VIS-FOVRR_ODIRT.
    case ME->S_BAGTY_BPART_VIS-BPDIR.
      when 'L'.
        move ABAP_TRUE to ME->S_BAGTY_BPART_VIS-FOVRR_ODIRL.

      when 'T'.
        move ABAP_TRUE to ME->S_BAGTY_BPART_VIS-FOVRR_ODIRT.

      when others.
        move ABAP_TRUE to ME->S_BAGTY_BPART_VIS-FOVRR_ODIRL.

    endcase.

  endmethod.
  method REFRESH_TOOLBAR.

    data: LF_LOCKED   type /VCXI/CKX_LOCKED.
    data: LF_DISABLED   type ABAP_BOOL.


    check ME->F_FREED ne ABAP_TRUE.

*** Get Locked Status
    LF_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to LF_DISABLED.
    endif.

*** Initialize if needed
    ME->INIT_CONTAINER( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Delete All Buttons
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( ).

***--------------------------------------------------------------------------------------
*** Add Button
    ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = C_FCODE_ADD
                                          ICON             = ICON_INSERT_ROW
                                          IS_DISABLED      = LF_DISABLED
                                          BUTN_TYPE        = C_BTYPE_MENU
                                          TEXT             = text-B01
                               exceptions CNTL_ERROR       = 1
                                          CNTB_BTYPE_ERROR = 2
                                          CNTB_ERROR_FCODE = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Delete Button
    ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = C_FCODE_DELETE
                                          ICON             = ICON_DELETE_ROW
                                          IS_DISABLED      = LF_DISABLED
                                          BUTN_TYPE        = C_BTYPE_BUTTON
                                          TEXT             = text-B02
                               exceptions CNTL_ERROR       = 1
                                          CNTB_BTYPE_ERROR = 2
                                          CNTB_ERROR_FCODE = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.
    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
  method SET_GRID_REFRESH.

    move ABAP_TRUE to ME->R_GRID_BPCAL->F_REFRESH_REQ.

  endmethod.
