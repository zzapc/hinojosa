
class ZCL_VCXI_PXSS_PR_MS_CORE definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PX_MS_CORE type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_CORE' ##NO_TEXT.
  constants C_PARID_CLETA type /VCXI/VKS_PARID value 'ZVCXI_PX_CLETA' ##NO_TEXT.
  constants C_PARID_CRMAR type /VCXI/VKS_PARID value 'ZVCXI_PX_CRMAR' ##NO_TEXT.
  constants C_PARID_RLPCR type /VCXI/VKS_PARID value 'ZVCXI_PX_RLPCR' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CLETA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CLETA) type ZVCXI_PXS_S_CLETA
    raising
      /VCXI/CX_CKX .
  methods GET_CRDII
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CRDII) type ZVCXI_PXS_S_CRDII
    raising
      /VCXI/CX_CKX .
  methods GET_CRDIO
    returning
      value(RS_CRDIO) type ZVCXI_PXS_S_CRDIO
    raising
      /VCXI/CX_CKX .
  methods GET_CRLEN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_CRLEN_PRL type ZVCXI_PXS_S_CRLEN
    returning
      value(RS_CRLEN) type ZVCXI_PXS_S_CRLEN
    raising
      /VCXI/CX_CKX .
  methods GET_CRMAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CRMAR) type ZVCXI_PXS_S_CRMAR
    raising
      /VCXI/CX_CKX .
  methods GET_CRWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_CRWGT_PRL type ZVCXI_PXS_S_CRWGT
    returning
      value(RS_CRWGT) type ZVCXI_PXS_S_CRWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CRWTH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CRWTH) type ZVCXI_PXS_S_CRWTH
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RHNDL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RHNDL) type ref to ZCL_VCXI_PXSS_PR_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_RLPCR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_RLPCR) type ZVCXI_PXS_RLPCR
    raising
      /VCXI/CX_CKX .
  methods GET_WIWID
    returning
      value(RS_WIWID) type ZVCXI_PXS_S_WIWID
    raising
      /VCXI/CX_CKX .
  methods SET_CLETA
    importing
      !IS_CLETA type ZVCXI_PXS_S_CLETA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRDII
    importing
      !IS_CRDII type ZVCXI_PXS_S_CRDII
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRMAR
    importing
      !IS_CRMAR type ZVCXI_PXS_S_CRMAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRWGT
    importing
      !IS_CRWGT type ZVCXI_PXS_S_CRWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLPCR
    importing
      !IF_RLPCR type ZVCXI_PXS_RLPCR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CRMAR type /VCXI/VKSC_IEVNT value 'INIT_COMAR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_ICORE type /VCXI/VKSC_IEVNT value 'INIT_ICORE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_MATNR type /VCXI/VKSC_IEVNT value 'INIT_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_CLETA type /VCXI/VKSC_IEVNT value 'RECALC_CLETA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLPCR type /VCXI/VKSC_IEVNT value 'RECALC_RLPCR' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_CLETA_CHANGED type /VCXI/VKSC_IEVNT value 'CLETA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRDII_CHANGED type /VCXI/VKSC_IEVNT value 'CRDII_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRLEN_CHANGED type /VCXI/VKSC_IEVNT value 'CRLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRMAR_CHANGED type /VCXI/VKSC_IEVNT value 'CRMAR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRWGT_CHANGED type /VCXI/VKSC_IEVNT value 'CRWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRWTH_CHANGED type /VCXI/VKSC_IEVNT value 'CRWTH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLPCR_CHANGED type /VCXI/VKSC_IEVNT value 'RLPCR_CHANGED' ##NO_TEXT.
  constants C_PARID_CRCUT type /VCXI/VKS_PARID value 'ZVCXI_PX_CRCUT' ##NO_TEXT.
  constants C_PARID_CRDII type /VCXI/VKS_PARID value 'ZVCXI_PX_CRDII' ##NO_TEXT.
  constants C_PARID_CRLEN type /VCXI/VKS_PARID value 'ZVCXI_PX_CRLEN' ##NO_TEXT.
  constants C_PARID_CRWGT type /VCXI/VKS_PARID value 'ZVCXI_PX_CRWGT' ##NO_TEXT.
  constants C_PARID_CRWTH type /VCXI/VKS_PARID value 'ZVCXI_PX_CRWTH' ##NO_TEXT.
  constants C_PARID_TCORE type /VCXI/VKS_PARID value 'ZVCXI_PX_TCORE' ##NO_TEXT.
  data R_CUST_CORE type ref to ZCL_VCXI_PXSS_CUST_CORE .

  methods CHECK_CLETA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RLPCR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CRMAR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_CLETA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLPCR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_CRLEN
    importing
      !IS_CRLEN type ZVCXI_PXS_S_CRLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRWTH
    importing
      !IS_CRWTH type ZVCXI_PXS_S_CRWTH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_CORE definition
class ZCL_VCXI_PXSS_PR_MS_CORE implementation.
  method CHECK_CLETA.

*** Get Target Core Length and Core Length
    data(LS_CLETA) = ME->GET_CLETA( ).
    data(LS_CRLEN) = ME->GET_CRLEN( ).


    if LS_CLETA-CLETA ne 0.
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_CLETA-CLETA
                                                      IF_CALCV_UOM_1 = LS_CLETA-CLETA_UOM
                                                      IF_CALCV_2     = LS_CRLEN-CRLEN
                                                      IF_CALCV_UOM_2 = LS_CRLEN-CRLEN_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LE ) eq ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Target Core Length is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '631' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Target Core Length exceed Core Length
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '632' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Target Core Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '633' ).
      endif.
    endif.

  endmethod.
  method CHECK_RLPCR.

    if ME->GET_RLPCR( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Rolls/Core is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '634' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Rolls/Core is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '635' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  endmethod.
  method GET_CLETA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CLETA ).
    move LS_PARAM-ATFLV to RS_CLETA-CLETA.
    move LS_PARAM-UNIT  to RS_CLETA-CLETA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRDII.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRDII ).
    move LS_PARAM-ATFLV to RS_CRDII-CRDII.
    move LS_PARAM-UNIT  to RS_CRDII-CRDII_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRDIO.

*** Get Core Inner Diameter and Core Wall Thickness
    data(LS_CRDII) = ME->GET_CRDII( ).
    data(LS_CRWTH) = ME->GET_CRWTH( ).

*** Inner Core Diameter + 2 * Core Wall Thickness
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CRDII-CRDII
                                                        IF_CALCV_UOM_1 = LS_CRDII-CRDII_UOM
                                                        IF_CALCV_2     = LS_CRWTH-CRWTH * 2
                                                        IF_CALCV_UOM_2 = LS_CRWTH-CRWTH_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                              importing EF_CALCV       = RS_CRDIO-CRDIO
                                                        EF_CALCV_UOM   = RS_CRDIO-CRDIO_UOM ).

  endmethod.
  method GET_CRLEN.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRLEN ).
    move LS_PARAM-ATFLV to RS_CRLEN-CRLEN.
    move LS_PARAM-UNIT  to RS_CRLEN-CRLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Calculate Core Length per Roll
    if ES_CRLEN_PRL is requested.
***   Use Target Core Length for one Roll
      data(LS_CLETA) = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_CLETA( IS_WIWID = ME->GET_WIWID( )
                                                           IS_CRMAR = ME->GET_CRMAR( )
                                                           IF_RLPCR = 1 ).
      ES_CRLEN_PRL = value #( CRLEN     = LS_CLETA-CLETA
                              CRLEN_UOM = LS_CLETA-CLETA_UOM ).
    endif.

  endmethod.
  method GET_CRMAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRMAR ).
    move LS_PARAM-ATFLV to RS_CRMAR-CRMAR.
    move LS_PARAM-UNIT  to RS_CRMAR-CRMAR_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRWGT.

    data: LF_CALCV type F.
    data: LS_CRLEN     type ZVCXI_PXS_S_CRLEN,
          LS_CRLEN_PRL type ZVCXI_PXS_S_CRLEN.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWGT ).
    move LS_PARAM-ATFLV to RS_CRWGT-CRWGT.
    move LS_PARAM-UNIT  to RS_CRWGT-CRWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.


***--------------------------------------------------------------------------------------
    if ES_CRWGT_PRL is requested.
***   Get Core Length and Core Length per Roll
      LS_CRLEN = ME->GET_CRLEN( importing ES_CRLEN_PRL = LS_CRLEN_PRL ).

***   Calculate propotional Factor of Roll on Core
      if LS_CRLEN-CRLEN ne 0.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CRLEN_PRL-CRLEN
                                                            IF_CALCV_UOM_1 = LS_CRLEN_PRL-CRLEN_UOM
                                                            IF_CALCV_2     = LS_CRLEN-CRLEN
                                                            IF_CALCV_UOM_2 = LS_CRLEN-CRLEN_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_CALCV ).
      endif.

***   Calculate Core Weight per Roll
      try.
          ES_CRWGT_PRL-CRWGT     = RS_CRWGT-CRWGT * LF_CALCV.
          ES_CRWGT_PRL-CRWGT_UOM = RS_CRWGT-CRWGT_UOM.
        catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
      endtry.
    endif.

  endmethod.
  method GET_CRWTH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWTH ).
    move LS_PARAM-ATFLV to RS_CRWTH-CRWTH.
    move LS_PARAM-UNIT  to RS_CRWTH-CRWTH_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_RHNDL.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


    LR_GATE = cond #( when IR_GATE is supplied then IR_GATE
                                               else ME->R_GATE ).

*** Get Provider
    data(LT_GATE) = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_RHNDL=>C_IPRVT_PX_RHNDL
                                        IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_PR_RHNDL.
    endtry.

  endmethod.
  method GET_RLPCR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLPCR ).
    move LS_PARAM-ATFLV to RF_RLPCR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Target Core Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CLETA( ) ).

*** Check Rolls/Core
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RLPCR( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Target Core Length
    ME->CHECK_CLETA( IR_MESSAGE = IR_MESSAGE ).

*** Check Rolls/Core
    ME->CHECK_RLPCR( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method GET_WIWID.

    data(LR_PR_RHNDL) = ME->GET_PRVDR_RHNDL( ).
    check LR_PR_RHNDL is bound.

    RS_WIWID = LR_PR_RHNDL->GET_WIWID( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Set Default
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Set Initial Core Margin
      when C_IEVNT_I_INIT_CRMAR.
        ME->HANDLE_INIT_CRMAR( ).

***   Calculate Rolls/Core
      when C_IEVNT_I_RECALC_RLPCR.
        ME->HANDLE_RECALC_RLPCR( ).

***   Calculate Target Core Length
      when C_IEVNT_I_RECALC_CLETA.
        ME->HANDLE_RECALC_CLETA( ).

***   Set Core Material
      when C_IEVNT_I_INIT_MATNR.
        ME->HANDLE_INIT_MATNR( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CRMAR.

    data: LF_SETBY    type /VCXI/VKSR_SETBY.
    data: LS_CRMAR    type ZVCXI_PXS_S_CRMAR.
    data: LR_APPDATA  type ref to ZCL_VCXI_XCS_APPDATA.


    LS_CRMAR = ME->GET_CRMAR( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY is initial.

    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    check LR_APPDATA is bound.

    break TBD.
**** Get Default Target Roll Diameter for Finished Goods
*    LS_CRMAR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_FFG_COMAR( IF_WERKS = ME->GET_WERKS( )
*                                                        IF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR
*                                                        IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR ).

*** Set Margin
    ME->SET_CRMAR( IS_CRMAR = LS_CRMAR ).

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS.

***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_CORE          is bound    and
       ME->R_CUST_CORE->F_MATNR eq LF_MATNR and
       ME->R_CUST_CORE->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.
    clear:  ME->R_CUST_MATNR, ME->R_CUST_CORE.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_CORE = ZCL_VCXI_PXSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = LF_WERKS
                                                                        IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_CORE to ME->R_CUST_MATNR.

    if ME->R_CUST_CORE is bound.
***   Set Core Inner Diameter
      ME->SET_CRDII( IS_CRDII = ME->R_CUST_CORE->S_CRDII ).

***   Set Core Weight
      ME->SET_CRWGT( IS_CRWGT = ME->R_CUST_CORE->S_CRWGT ).

***   Set Core Length
      ME->SET_CRLEN( IS_CRLEN = ME->R_CUST_CORE->S_CRLEN ).

***   Set Core Wall Thickness
      ME->SET_CRWTH( IS_CRWTH = ME->R_CUST_CORE->S_CRWTH ).

    endif.

  endmethod.
  method HANDLE_INIT_MATNR.

    data: LF_MATNR type        MATNR,
          LF_RLPCR type        ZVCXI_PXS_RLPCR,
          LF_SETBY type        /VCXI/VKSR_SETBY.
    data: LR_APPDATA    type ref to ZCL_VCXI_XCS_APPDATA.


    LF_MATNR = ME->GET_MATNR( importing EF_SETBY = LF_SETBY ).

    if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
       LF_MATNR is initial.

      LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
      check LR_APPDATA is bound.

***   Get Rolls/Core
      LF_RLPCR = ME->GET_RLPCR( importing EF_SETBY = LF_SETBY ).

      break TBD.
*      if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
****     Get Roll Handling Defaults (with defined Rolls/Core)
*        LF_MATNR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_FFG_CORE( IF_WERKS = ME->GET_WERKS( )
*                                                           IF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR
*                                                           IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR
*                                                           IS_WIWID = ME->GET_WEBWI( )
*                                                           IS_COMAR = ME->GET_CRMAR( )
*                                                           IF_ROPCO = LF_RLPCR ).
*      else.
****     Get Roll Handling Defaults
*        LF_MATNR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_FFG_CORE( IF_WERKS = ME->GET_WERKS( )
*                                                           IF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR
*                                                           IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR
*                                                           IS_WIWID = ME->GET_WEBWI( )
*                                                           IS_COMAR = ME->GET_CRMAR( ) ).
*      endif.
      LF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

*** Set Core Material
    ME->SET_MATNR( exporting  IF_MATNR = LF_MATNR
                              IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_RECALC_CLETA.

*** Calculate Target Core Length
    data(LS_CLETA) = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_CLETA( IS_WIWID = ME->GET_WIWID( )
                                                         IS_CRMAR = ME->GET_CRMAR( )
                                                         IF_RLPCR = ME->GET_RLPCR( ) ).

*** Set Target Core Length
    ME->SET_CLETA( IS_CLETA = LS_CLETA ).

  endmethod.
  method HANDLE_RECALC_RLPCR.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


*** Only if not defined by User
    ME->GET_RLPCR( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Calculate Rolls/Core
    data(LF_RLPCR) = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLPCR( IS_WIWID = ME->GET_WIWID( )
                                                         IS_CRMAR = ME->GET_CRMAR( )
                                                         IS_CRLEN = ME->GET_CRLEN( ) ).

*** Set Rolls/Core
    ME->SET_RLPCR( IF_RLPCR = LF_RLPCR ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_CLETA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CLETA ).

    move IS_CLETA-CLETA     to LS_PARAM-ATFLV.
    move IS_CLETA-CLETA_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CLETA_CHANGED ).
    endif.

  endmethod.
  method SET_CRDII.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRDII ).

    move IS_CRDII-CRDII     to LS_PARAM-ATFLV.
    move IS_CRDII-CRDII_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRDII_CHANGED ).
    endif.

  endmethod.
  method SET_CRLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRLEN ).

    move IS_CRLEN-CRLEN     to LS_PARAM-ATFLV.
    move IS_CRLEN-CRLEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRLEN_CHANGED ).
    endif.

  endmethod.
  method SET_CRMAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRMAR ).

    move IS_CRMAR-CRMAR     to LS_PARAM-ATFLV.
    move IS_CRMAR-CRMAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRMAR_CHANGED ).
    endif.

  endmethod.
  method SET_CRWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWGT ).

    move IS_CRWGT-CRWGT     to LS_PARAM-ATFLV.
    move IS_CRWGT-CRWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRWGT_CHANGED ).
    endif.

  endmethod.
  method SET_CRWTH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWTH ).

    move IS_CRWTH-CRWTH     to LS_PARAM-ATFLV.
    move IS_CRWTH-CRWTH_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRWTH_CHANGED ).
    endif.

  endmethod.
  method SET_RLPCR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLPCR ).

    if IF_RLPCR is not initial.
      move IF_RLPCR to LS_PARAM-ATFLV.
      move IF_SETBY to LS_PARAM-SETBY.
    else.
***   Reset SetBy if initial
      clear: LS_PARAM-ATFLV,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLPCR_CHANGED ).
    endif.

  endmethod.
