
class ZCL_VCXI_XCDCU_GRID_CR_VALUE definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC .
  constants C_ICON_I_EQ type ICON_D value '@20@'. "#EC NOTEXT
  constants C_ICON_I_NE type ICON_D value '@21@'. "#EC NOTEXT
  constants C_ICON_I_GT type ICON_D value '@22@'. "#EC NOTEXT
  constants C_ICON_I_LT type ICON_D value '@23@'. "#EC NOTEXT
  constants C_ICON_I_GE type ICON_D value '@24@'. "#EC NOTEXT
  constants C_ICON_I_LE type ICON_D value '@25@'. "#EC NOTEXT
  constants C_ICON_I_BT type ICON_D value '@26@'. "#EC NOTEXT
  constants C_ICON_I_NB type ICON_D value '@27@'. "#EC NOTEXT
  constants C_ICON_I_CP type ICON_D value '@28@'. "#EC NOTEXT
  constants C_ICON_I_NP type ICON_D value '@29@'. "#EC NOTEXT
  constants C_ICON_E_EQ type ICON_D value '@2A@'. "#EC NOTEXT
  constants C_ICON_E_NE type ICON_D value '@2B@'. "#EC NOTEXT
  constants C_ICON_E_GT type ICON_D value '@2C@'. "#EC NOTEXT
  constants C_ICON_E_LT type ICON_D value '@2D@'. "#EC NOTEXT
  constants C_ICON_E_GE type ICON_D value '@2E@'. "#EC NOTEXT
  constants C_ICON_E_LE type ICON_D value '@2F@'. "#EC NOTEXT
  constants C_ICON_E_BT type ICON_D value '@2G@'. "#EC NOTEXT
  constants C_ICON_E_NB type ICON_D value '@2H@'. "#EC NOTEXT
  constants C_ICON_E_CP type ICON_D value '@2I@'. "#EC NOTEXT
  constants C_ICON_E_NP type ICON_D value '@2J@'. "#EC NOTEXT

  methods ADD_VALUE
    raising
      /VCXI/CX_CKX .
  methods DELETE_VALUE
    importing
      !IT_CR_VALUE type ZVCXI_XCDC_TT_CR_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_SEL_FIRST_LINE
    changing
      !CS_CR_VALUE_GRID type ZVCXI_XCDCU_S_CR_VALUE_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_CR_VALUE definition
class ZCL_VCXI_XCDCU_GRID_CR_VALUE implementation.
method ADD_VALUE.

  data:          LS_RETURN         type                   DDSHRETVAL,
                 LS_CD_VALUE       type                   ZVCXI_XCDC_S_CD_VALUE,
                 LS_CR_VALUE       type                   ZVCXI_XCDC_S_CR_VALUE,
                 LS_DOMAIN_INFO    type                   DD01V,
                 LS_DATEL_INFO     type                   DD04V.
  data:          LT_RETURN         type table of          DDSHRETVAL,
                 LT_CD_VALUE_SHLP  type standard table of ZVCXI_XCDCU_S_CD_VALUE_SHLP.
  field-symbols: <S_CD_VALUE_SHLP> type                   ZVCXI_XCDCU_S_CD_VALUE_SHLP.

  check ME->R_CONDREC                      is bound and
        ME->R_CONDREC->R_CONDDEF           is bound.
  loop at ME->R_CONDREC->R_CONDDEF->T_CD_VALUE into LS_CD_VALUE.
*** Show only values which are not already used.
    read table ME->R_CONDREC->T_CR_VALUE with key ICOVA = LS_CD_VALUE-ICOVA
    transporting no fields.
    check SY-SUBRC ne 0.

    append initial line to LT_CD_VALUE_SHLP assigning <S_CD_VALUE_SHLP>.
    move LS_CD_VALUE-ICOVA to <S_CD_VALUE_SHLP>.
*** Get Description
    call function 'DDIF_DOMA_GET'
      exporting
        NAME          = LS_CD_VALUE-DATEL
        LANGU         = SY-LANGU
      importing
        DD01V_WA      = LS_DOMAIN_INFO
      exceptions
        ILLEGAL_INPUT = 1
        others        = 2.
    if SY-SUBRC       ne 0       or
       LS_DOMAIN_INFO is initial.
***   Get Data Element
      call function 'DDIF_DTEL_GET'
        exporting
          NAME          = LS_CD_VALUE-DATEL
          LANGU         = SY-LANGU
        importing
          DD04V_WA      = LS_DATEL_INFO
        exceptions
          ILLEGAL_INPUT = 1
          others        = 2.
      if SY-SUBRC eq 0.
        move LS_DATEL_INFO-DDTEXT to <S_CD_VALUE_SHLP>-ICOVA_DESCR.
      endif.
    else.
      move LS_DOMAIN_INFO-DDTEXT to <S_CD_VALUE_SHLP>-ICOVA_DESCR.
    endif.
  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_CD_VALUE_SHLP'
      RETFIELD        = 'ICOVA'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_CD_VALUE_SHLP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.
    clear: LS_CR_VALUE-ICOVA.
    move  LS_RETURN-FIELDVAL to LS_CR_VALUE-ICOVA.

*** Add Default Element
    ME->R_CONDREC->ADD_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).

  endloop.

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_CR_VALUE_GRID'
                      IF_CONTAINER_NAME = '0100CC_GRID_VALUE'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).


*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CONDREC.
    catch CX_SY_MOVE_CAST_ERROR.
***   Condition Record Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDC'
          IF_MSGNO = '252' ).
  endtry.

  check ME->R_CONDREC is bound.
  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method DELETE_VALUE.

  data: LS_CR_VALUE type ZVCXI_XCDC_S_CR_VALUE.

  loop at IT_CR_VALUE into LS_CR_VALUE.
*** Delete by ID
    ME->R_CONDREC->DELETE_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'ICOVA' or 'R_RANGE'.
        move ABAP_TRUE         to  <S_FCAT>-TECH.

      when 'OPT_ICON'.
        move 'C'               to  <S_FCAT>-JUST.
        move 'Option'(T03)     to: <S_FCAT>-COLTEXT,
                                   <S_FCAT>-SCRTEXT_L,
                                   <S_FCAT>-SCRTEXT_M,
                                   <S_FCAT>-SCRTEXT_S.

      when 'SEL_ICON'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON to <S_FCAT>-STYLE.
        move 'Select'(T04)     to: <S_FCAT>-COLTEXT,
                                   <S_FCAT>-SCRTEXT_L,
                                   <S_FCAT>-SCRTEXT_M,
                                   <S_FCAT>-SCRTEXT_S.

      when 'LOW'.
        move 'Value from'(T01) to  <S_FCAT>-COLTEXT.
        move 'Value from'(T01) to  <S_FCAT>-SCRTEXT_L.
        move 'Value from'(T01) to  <S_FCAT>-SCRTEXT_M.
        move 'Value from'(T01) to  <S_FCAT>-SCRTEXT_S.

      when 'HIGH'.
        move 'Value to'(T02)   to  <S_FCAT>-COLTEXT.
        move 'Value to'(T02)   to  <S_FCAT>-SCRTEXT_L.
        move 'Value to'(T02)   to  <S_FCAT>-SCRTEXT_M.
        move 'Value to'(T02)   to  <S_FCAT>-SCRTEXT_S.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CR_VALUE_GRID     type          ZVCXI_XCDCU_S_CR_VALUE_GRID,
                 LS_CD_VALUE          type          ZVCXI_XCDC_S_CD_VALUE,
                 LS_CR_VALUE          type          ZVCXI_XCDC_S_CR_VALUE.
  data:          LF_STRING            type          STRING.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Values
  loop at ME->R_CONDREC->T_CR_VALUE into LS_CR_VALUE.
    clear: LS_CR_VALUE_GRID.

    move-corresponding LS_CR_VALUE to LS_CR_VALUE_GRID.
*** Get Description of DataElement and Uom.
    read table ME->R_CONDREC->R_CONDDEF->T_CD_VALUE
      with key ICOVA = LS_CR_VALUE_GRID-ICOVA
      into LS_CD_VALUE.

*** Get Uom
    move LS_CD_VALUE-PAVAL_UOM to LS_CR_VALUE_GRID-PAVAL_UOM.

*** Get Description
    call function 'DDIF_FIELDLABEL_GET'
      exporting
        TABNAME        = LS_CD_VALUE-DATEL
        LANGU          = SY-LANGU
        LFIELDNAME     = ' '
      importing
        LABEL          = LF_STRING
      exceptions
        NOT_FOUND      = 1
        INTERNAL_ERROR = 2
        others         = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    move LF_STRING to LS_CR_VALUE_GRID-ICOVA_DESCR.

*** Convert Data Range and show first line
    ME->GET_SEL_FIRST_LINE( changing CS_CR_VALUE_GRID = LS_CR_VALUE_GRID ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CR_VALUE_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method GET_SEL_FIRST_LINE.

  data:          LF_ICON_NAME   type          FIELDNAME value 'C_ICON',
                 LF_STRING      type          STRING.
  field-symbols: <I_RANGE>      type standard table,
                 <S_RANGE>      type          any,
                 <F_FIELD>      type          any.

  assign CS_CR_VALUE_GRID-R_RANGE->* to <I_RANGE>.
  check SY-SUBRC = 0.

  if <I_RANGE> is initial.
*** No Value Assigned -> Everything is initial.
*** Add Enter More
    move ICON_ENTER_MORE to CS_CR_VALUE_GRID-SEL_ICON.
    exit.
  else.
*** Value Assigned ->
    if lines( <I_RANGE> ) = 1.
*** only One Entry find
*** Add Enter More
      move ICON_ENTER_MORE to CS_CR_VALUE_GRID-SEL_ICON.
    else.
*** more tan 1 Entry found.
*** Add Display More
      move ICON_DISPLAY_MORE to CS_CR_VALUE_GRID-SEL_ICON.
    endif.

*** Get Value to show
    read table <I_RANGE> assigning <S_RANGE> index 1.

*** read Sign
    assign component 'SIGN' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to LF_STRING.
      concatenate LF_ICON_NAME LF_STRING into LF_ICON_NAME separated by '_'.
    endif.

*** read Option
    assign component 'OPTION' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to LF_STRING.
      concatenate LF_ICON_NAME LF_STRING into LF_ICON_NAME separated by '_'.
    endif.

*** assign Icon
    assign ZCL_VCXI_XCDCU_GRID_CR_VALUE=>(LF_ICON_NAME) to <F_FIELD>.
    if SY-SUBRC = 0.
      move <F_FIELD> to CS_CR_VALUE_GRID-OPT_ICON.
    endif.

*** read Low
    assign component 'LOW' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to CS_CR_VALUE_GRID-LOW.
    endif.

*** read High
    assign component 'HIGH' of structure <S_RANGE> to <F_FIELD>.
    if SY-SUBRC = 0.
      clear: LF_STRING.
      move <F_FIELD> to CS_CR_VALUE_GRID-HIGH.
    endif.

  endif.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LF_DISPLAY           type          ABAP_BOOL,
                 LF_HELP_FIELD        type          RSSCR_DBFI,
                 LF_MSGV1             type          SYMSGV,
                 LF_MSGV2             type          SYMSGV.
  data:          LS_CR_VALUE_GRID     type          ZVCXI_XCDCU_S_CR_VALUE_GRID,
                 LS_CD_VALUE          type          ZVCXI_XCDC_S_CD_VALUE,
                 LS_CR_VALUE          type          ZVCXI_XCDC_S_CR_VALUE,
                 LS_SHLP              type          SHLP_DESCR_T.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <I_RANGE>            type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.

      if ME->F_LOCKED eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISPLAY.
      endif.
*** --------------------------------------------------------------------------------------------
***   Get Range and Call Searchhelp
      move-corresponding <S_DATA> to LS_CR_VALUE_GRID.
      assign LS_CR_VALUE_GRID-R_RANGE->* to <I_RANGE>.

***   Get Description of DataElement and Uom.
      read table ME->R_CONDREC->R_CONDDEF->T_CD_VALUE
        with key ICOVA = LS_CR_VALUE_GRID-ICOVA
        into LS_CD_VALUE.

***   Range can't be build. Check DataElement &1 of Condition Value &2.
      if <I_RANGE> is not assigned.
        move LS_CD_VALUE-DATEL      to LF_MSGV1.
        move LS_CR_VALUE_GRID-ICOVA to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
          exporting F_MSGTY = 'E'
                    F_MSGID = 'ZVCXI_XCDC'
                    F_MSGNO = '220'
                    F_MSGV1 = LF_MSGV1
                    F_MSGV2 = LF_MSGV2.
      endif.

***   Get Search Help
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_CD_VALUE-DATEL
          FIELDNAME         = SPACE
        importing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.
      if SY-SUBRC         ne 0    or
         LS_SHLP-SHLPTYPE eq 'FV'.
        move LS_SHLP-SHLPNAME to LF_HELP_FIELD.
        clear LS_SHLP.
      endif.

***   Call Select Options
      call function 'COMPLEX_SELECTIONS_DIALOG'
        exporting
          TITLE             = 'Select Values'(S01)
          HELP_FIELD        = LF_HELP_FIELD
          SEARCH_HELP       = LS_SHLP-SHLPNAME
          JUST_DISPLAY      = LF_DISPLAY
        tables
          RANGE             = <I_RANGE>
        exceptions
          NO_RANGE_TAB      = 1
          CANCELLED         = 2
          INTERNAL_ERROR    = 3
          INVALID_FIELDNAME = 4
          others            = 5.
      if SY-SUBRC ne 0 and
         SY-SUBRC ne 2.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      check SY-SUBRC eq 0.
      move-corresponding LS_CR_VALUE_GRID to LS_CR_VALUE.
      ME->R_CONDREC->UPDATE_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LF_NAME              type         RSSCR_NAME,
                 LF_TEXT              type         RSSELTEXT,
                 LF_SIGN              type         RALDB_SIGN,
                 LF_OPTION            type         RALDB_OPTI,
                 LF_OPTION_SET        type         CHAR03 value 'INI',
                 LF_LOW               type         /VCXI/CKX_STRING,
                 LF_HIGH              type         /VCXI/CKX_STRING.
  data:          LS_CR_VALUE_GRID     type         ZVCXI_XCDCU_S_CR_VALUE_GRID,
                 LS_CR_VALUE          type         ZVCXI_XCDC_S_CR_VALUE.
  data:          LR_CX_CKX            type ref to  /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <I_RANGE>            type standard table,
                 <S_DATA>             type          any,
                 <S_RANGE>            type          any,
                 <F_FIELD>            type          any.
  try.

***   Do only show the PopUp for Option field in change Mode
      check ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE and
            E_COLUMN eq 'OPT_ICON'.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC = 0.

*** --------------------------------------------------------------------------------------------
***   Get Range and Call Searchhelp
      move-corresponding <S_DATA> to LS_CR_VALUE_GRID.
      assign LS_CR_VALUE_GRID-R_RANGE->* to <I_RANGE>.

      read table <I_RANGE> assigning <S_RANGE> index 1.
      if SY-SUBRC eq 0.
        assign component 'SIGN' of structure <S_RANGE> to <F_FIELD>.
        if SY-SUBRC = 0.
          move <F_FIELD> to LF_SIGN.
        endif.
        assign component 'OPTION' of structure <S_RANGE> to <F_FIELD>.
        if SY-SUBRC = 0.
          move <F_FIELD> to LF_OPTION.
        endif.
      endif.

***   Show Selection PopUp
      call function 'RS_SET_SELECT_OPTIONS_OPTIONS'
        exporting
          HIGH         = LF_HIGH
          LOW          = LF_LOW
          OPTION       = LF_OPTION
          OPTION_SET   = LF_OPTION_SET
          SELCNAME     = LF_NAME
          SELCTEXT     = LF_TEXT
          SIGN         = LF_SIGN
        importing
          OPTION       = LF_OPTION
          SIGN         = LF_SIGN
        exceptions
          DELETE_LINE  = 1
          NOT_EXECUTED = 2
          others       = 3.

      if SY-SUBRC ne 0 and
         SY-SUBRC ne 1.
        exit.
      endif.

      if <S_RANGE> is not assigned.
        append initial line to <I_RANGE> assigning <S_RANGE>.
      endif.
      if LF_SIGN is initial.
        move 'I' to LF_SIGN.
      endif.

***  Return the result
      case SY-SUBRC.
        when 0.
          if <S_RANGE> is assigned.
            assign component 'SIGN' of structure <S_RANGE> to <F_FIELD>.
            if SY-SUBRC = 0.
              move LF_SIGN to <F_FIELD>.
            endif.
            assign component 'OPTION' of structure <S_RANGE> to <F_FIELD>.
            if SY-SUBRC = 0.
              move LF_OPTION to <F_FIELD>.
            endif.
          endif.

        when 1.
          if <S_RANGE> is assigned.
            delete <I_RANGE> index 1.
          endif.

      endcase.

      move-corresponding LS_CR_VALUE_GRID to LS_CR_VALUE.
      ME->R_CONDREC->UPDATE_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).

      move ABAP_TRUE to ME->F_REFRESH_REQ.
      CL_GUI_CFW=>SET_NEW_OK_CODE( 'REFRESH' ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_CR_VALUE     type          ZVCXI_XCDC_TT_CR_VALUE.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_CR_VALUE>    type          ZVCXI_XCDC_S_CR_VALUE,
                 <S_DATA>        type          any.

  try.

***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Condition Value
          ME->ADD_VALUE( ).

        when C_FUNC_DEL.
***     Delete Condition Value
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Condition Value's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_VALUE assigning <S_CR_VALUE>.
            move-corresponding <S_DATA> to <S_CR_VALUE>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_VALUE assigning <S_CR_VALUE>.
            move-corresponding <S_DATA> to <S_CR_VALUE>.
          endloop.

***       Delete Condition Value's
          ME->DELETE_VALUE( IT_CR_VALUE = LT_CR_VALUE ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Button Click
  set handler ME->HANDLE_BUTTON_CLICK         for ME->R_GRID.

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND         for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR              for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK         for ME->R_GRID.

endmethod.
