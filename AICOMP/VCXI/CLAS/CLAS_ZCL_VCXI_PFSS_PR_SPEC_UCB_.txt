
class ZCL_VCXI_PFSS_PR_SPEC_UCB definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_ICONT .

  aliases C_ICONT_PROD
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_PROD .
  aliases C_ICONT_SALES
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_SALES .
  aliases C_IEVNT_O_ICONT_CHANGED
    for ZIF_VCXI_P0SS_ICONT~C_IEVNT_O_ICONT_CHANGED .
  aliases C_IPRVT_P0_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_IPRVT_P0_ICONT .
  aliases C_PARID_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_PARID_ICONT .
  aliases GET_ICONT
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT .
  aliases GET_ICONT_DESCR
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR .
  aliases SET_ICONT
    for ZIF_VCXI_P0SS_ICONT~SET_ICONT .

  constants C_IPRVT_PF_SPEC_UCB type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_SPEC_UCB'. "#EC NOTEXT
  constants C_PARID_AGGRA type /VCXI/VKS_PARID value 'ZVCXI_PF_AGGRA'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM'. "#EC NOTEXT
  constants C_PARID_INGRA type /VCXI/VKS_PARID value 'ZVCXI_PF_INGRA'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT
  constants C_PARID_PAPGR type /VCXI/VKS_PARID value 'ZVCXI_PF_PAPGR'. "#EC NOTEXT
  constants C_PARID_TCUTT type /VCXI/VKS_PARID value 'ZVCXI_PF_TCUTT'. "#EC NOTEXT

  methods GET_GRDIR
    returning
      value(RF_GRDIR) type ZVCXI_PFSS_GRDIR
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AGGRA
    returning
      value(RS_AGGRA) type ZVCXI_PFSS_S_AGGRA
    raising
      /VCXI/CX_CKX .
  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_INGRA
    returning
      value(RS_INGRA) type ZVCXI_PFSS_S_INGRA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TCUTT_DESCR
    returning
      value(RF_TCUTT_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TCUTT
    returning
      value(RF_TCUTT) type ZVCXI_PFSS_TCUTT
    raising
      /VCXI/CX_CKX .
  methods SET_AGGRA
    importing
      !IS_AGGRA type ZVCXI_PFSS_S_AGGRA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_INGRA
    importing
      !IS_INGRA type ZVCXI_PFSS_S_INGRA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TCUTT
    importing
      !IF_TCUTT type ZVCXI_PFSS_TCUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    importing
      !IF_POOTI type ZVCXI_P0S_POOTI
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_REQ_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_AGGRA_CHANGED type /VCXI/VKSC_IEVNT value 'AGGRA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_INGRA_CHANGED type /VCXI/VKSC_IEVNT value 'INGRA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PAPGR_CHANGED type /VCXI/VKSC_IEVNT value 'PAPGR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TCUTT_CHANGED type /VCXI/VKSC_IEVNT value 'TCUTT_CHANGED'. "#EC NOTEXT

  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PFSS_PR_SPEC_UCB definition
class ZCL_VCXI_PFSS_PR_SPEC_UCB implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_AGGRA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AGGRA ).
  move LS_PARAM-ATFLV to RS_AGGRA-AGGRA.
  move LS_PARAM-UNIT  to RS_AGGRA-AGGRA_UOM.

endmethod.
method GET_CALIP.

  data:  LS_CALIP     type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
         LR_CALIP     type ref to ZIF_VCXI_P0SS_CALIP.

***------------------------------------------------------------------------------------------------
*** Get Caliper Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_CALIP=>C_IPRVT_P0_CALIP
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CALIP.
        check LR_CALIP is bound.
        clear: LS_CALIP.
        LS_CALIP = LR_CALIP->GET_CALIP( IF_POOTI = IF_POOTI ).
        check LS_CALIP-CALIP is not initial.


        if RS_CALIP-CALIP is initial.
          move LS_CALIP to RS_CALIP.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_CALIP-CALIP
                                                              IF_CALCV_UOM_1 = RS_CALIP-CALIP_UOM
                                                              IF_CALCV_2     = LS_CALIP-CALIP
                                                              IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = RS_CALIP-CALIP_UOM
                                                    importing EF_CALCV       = RS_CALIP-CALIP
                                                              EF_CALCV_UOM   = RS_CALIP-CALIP_UOM ).
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CALIP.
    endtry.
  endloop.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_GRAMM.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
  move LS_PARAM-ATFLV to RS_GRAMM-GRAMM.
  move LS_PARAM-UNIT  to RS_GRAMM-GRAMM_UOM.

endmethod.
method GET_GRDIR.

  data:  LS_AGGRA    type ZVCXI_PFSS_S_AGGRA,
         LS_INGRA    type ZVCXI_PFSS_S_INGRA.

*** Get Sheet Size
  move ME->GET_AGGRA( ) to LS_AGGRA.
  move ME->GET_INGRA( ) to LS_INGRA.

*** Get Grain Direction
  RF_GRDIR = ZCL_VCXI_PFSS_CUST_SBOARD=>GET_GRDIR( IS_AGGRA = LS_AGGRA
                                                   IS_INGRA = LS_INGRA ).

endmethod.
method GET_INGRA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INGRA ).
  move LS_PARAM-ATFLV to RS_INGRA-INGRA.
  move LS_PARAM-UNIT  to RS_INGRA-INGRA_UOM.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_PAPGR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).
  move LS_PARAM-ATWRT to RF_PAPGR.

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  select single DESCR from ZVCXI_P0S_TC100T
  into RF_PTYPE_DESCR
  where PTYPE = LF_PTYPE
    and LANGU = SY-LANGU.

endmethod.
method GET_STATUS.

  data: LF_PAPGR type ZVCXI_PFSS_PAPGR.
  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM,
        LS_AGGRA type ZVCXI_PFSS_S_AGGRA,
        LS_INGRA type ZVCXI_PFSS_S_INGRA.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Paper Grade
  LF_PAPGR = ME->GET_PAPGR( ).
  if LF_PAPGR is not initial and
     ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Grammage
  LS_GRAMM = ME->GET_GRAMM( ).
  if LS_GRAMM-GRAMM is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Against Grain
  LS_AGGRA = ME->GET_AGGRA( ).
  if LS_AGGRA-AGGRA is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check In Grain
  LS_INGRA = ME->GET_INGRA( ).
  if LS_INGRA-INGRA is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Cutting Type
  if ME->GET_TCUTT( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LF_PAPGR type ZVCXI_PFSS_PAPGR.
  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM,
        LS_AGGRA type ZVCXI_PFSS_S_AGGRA,
        LS_INGRA type ZVCXI_PFSS_S_INGRA.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Paper Grade
  LF_PAPGR = ME->GET_PAPGR( ).
  if LF_PAPGR is not initial and
     ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_TRUE.
*** Paper Grade is maintained and valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '151' ).
  elseif LF_PAPGR is not initial and
         ZCL_VCXI_PFSS_CUST_SBOARD=>CHECK_PAPGR( IF_PAPGR = LF_PAPGR ) eq ABAP_FALSE.
*** Paper Grad is maintained but not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '152' ).
  elseif LF_PAPGR is initial.
*** Paper Grade is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '153' ).
  endif.
***------------------------------------------------------------------
*** Check Grammage
  LS_GRAMM = ME->GET_GRAMM( ).
  if LS_GRAMM-GRAMM is not initial.
*** Grammage is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '004' ).
  else.
*** Grammage is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '005' ).
  endif.

***------------------------------------------------------------------
*** Check Against Grain
  LS_AGGRA = ME->GET_AGGRA( ).
  if LS_AGGRA-AGGRA is not initial.
*** Against Grain is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '006' ).
  else.
*** Against Grain is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '007' ).
  endif.

***------------------------------------------------------------------
*** Check In Grain
  LS_INGRA = ME->GET_INGRA( ).
  if LS_INGRA-INGRA is not initial.
*** In Grain is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '008' ).
  else.
*** In Grain is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '009' ).
  endif.

***------------------------------------------------------------------
*** Check Cutting Type
  if ME->GET_TCUTT( ) is not initial.
*** Cutting Type is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '010' ).
  else.
*** Cutting Type is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '011' ).
  endif.

endmethod.
method GET_TCUTT.

*** Get Cutting Type depending on Provider
  RF_TCUTT = 'RCT'.
  BREAK WAIT_FOR_SD.

endmethod.
method GET_TCUTT_DESCR.

  data: LF_TCUTT type ZVCXI_PFSS_TCUTT.

  LF_TCUTT = ME->GET_TCUTT( ).

*** Return Cutting Type description
  RF_TCUTT_DESCR = ZCL_VCXI_PFSS_CUST_SBOARD=>GET_TCUTT_DESCR( IF_TCUTT = LF_TCUTT ).

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_REQ_CALIP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).

  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_AGGRA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AGGRA ).

  move IS_AGGRA-AGGRA     to LS_PARAM-ATFLV.
  move IS_AGGRA-AGGRA_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AGGRA_CHANGED ).
  endif.

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_GRAMM.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

  move IS_GRAMM-GRAMM     to LS_PARAM-ATFLV.
  move IS_GRAMM-GRAMM_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
  endif.

endmethod.
method SET_INGRA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INGRA ).

  move IS_INGRA-INGRA     to LS_PARAM-ATFLV.
  move IS_INGRA-INGRA_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INGRA_CHANGED ).
  endif.

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_PAPGR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).

  move IF_PAPGR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAPGR_CHANGED ).
  endif.

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
method SET_TCUTT.

*** Create Provider depending on Cutting Type
  BREAK WAIT_FOR_SD.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).
  move LS_PARAM-ATWRT to RF_ICONT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_ICONT'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_ICONT   type                   ZVCXI_P0S_ICONT.

  LF_ICONT = ME->GET_ICONT( ).

*** Return Context ID Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_ICONT into LS_D07V.
  check SY-SUBRC eq 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~SET_ICONT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).

  move IF_ICONT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICONT_CHANGED ).
  endif.

endmethod.
