
class ZCL_VCXI_PCSR_BL_PRTE_CR definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PRTE
  create public .

public section.

  methods GET_PCDIR_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_PCDIR) type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .

  methods CHECK
    redefinition .
  methods CONVERT_TO_MQTYO
    redefinition .
protected section.

  constants C_IMATY_QUANTIY type /VCXI/VSMC_IMATY value 'PC_MA_QUANTITY' ##NO_TEXT.

  methods CHECK_PCDIR
    raising
      /VCXI/CX_CKX .
  methods GET_DIM_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    exporting
      !ET_PCDIM_IN type ZVCXI_P0SP_TT_PCDIM
      !ET_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM
      !ET_RODIM_IN type ZVCXI_PCSP_TT_RODIM
      !ET_RODIM_OUT type ZVCXI_PCSP_TT_RODIM
    raising
      /VCXI/CX_CKX .

  methods CONV_MQTYO_TO_MQTYI
    redefinition .
  methods GET_RRVAL
    redefinition .
  methods GET_RTE_SMVAL
    redefinition .
  methods ROUND_MQTYI
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSR_BL_PRTE_CR definition
class ZCL_VCXI_PCSR_BL_PRTE_CR implementation.
method CHECK.

  SUPER->CHECK( ).

***----------------------------------------------------------------------------
*** Check uncompatible Sheet Directions
  ME->CHECK_PCDIR( ).

***----------------------------------------------------------------------------
*** Set Status
  if ME->R_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                              IF_MSGTY_I = ABAP_FALSE ) is initial.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID   to ME->R_RTE_PRTE->F_RSTAT.
  else.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID to ME->R_RTE_PRTE->F_RSTAT.
  endif.

endmethod.
method CHECK_PCDIR.

  data:          LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_PCDIR_CURR  type ref to ZIF_VCXI_P0SR_PCDIR,
                 LR_PCDIR_PREV  type ref to ZIF_VCXI_P0SR_PCDIR,
                 LR_CX_CKX      type ref to /VCXI/CX_CKX.
  field-symbols: <S_MSG>        type        /VCXI/CKXM_S_MSG.

  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***----------------------------------------------------------------------------
*** Check Mandatory PC Direction
    try.
        ME->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
***     Add Message
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move LR_CX_CKX->F_MSGTY to <S_MSG>-MSGTY.
        move LR_CX_CKX->F_MSGID to <S_MSG>-MSGID.
        move LR_CX_CKX->F_MSGNO to <S_MSG>-MSGNO.
        move LR_CX_CKX->F_MSGV1 to <S_MSG>-MSGV1.
        move LR_CX_CKX->F_MSGV2 to <S_MSG>-MSGV2.
        move LR_CX_CKX->F_MSGV3 to <S_MSG>-MSGV3.
        move LR_CX_CKX->F_MSGV4 to <S_MSG>-MSGV4.
    endtry.

***----------------------------------------------------------------------------
*** Check PC Direction are the same
    clear LR_PCDIR_PREV.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR_CURR->F_PCDIR is initial.
***     PC Directions needs to be specified.
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move 'E'           to <S_MSG>-MSGTY.
        move 'ZVCXI_P0SR'  to <S_MSG>-MSGID.
        move '103'         to <S_MSG>-MSGNO.
      endif.

      if LR_PCDIR_PREV is bound and
         LR_PCDIR_PREV->F_PCDIR ne LR_PCDIR_CURR->F_PCDIR.
***     Different PC Directions on the same Work Center are not allowed.
        append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        move 'E'           to <S_MSG>-MSGTY.
        move 'ZVCXI_P0SR'  to <S_MSG>-MSGID.
        move '102'         to <S_MSG>-MSGNO.
      endif.

      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.
  endloop.

endmethod.
method CONV_MQTYO_TO_MQTYI.

  data:  LF_PCUPS_OUT  type        ZVCXI_P0SP_PCUPS.
  data:  LS_PCDIM_IN   type        ZVCXI_P0SP_S_PCDIM,
         LS_PCDIM_OUT  type        ZVCXI_P0SP_S_PCDIM,
         LS_RODIM_IN   type        ZVCXI_PCSP_S_RODIM,
         LS_RODIM_OUT  type        ZVCXI_PCSP_S_RODIM,
         LS_AREADIM    type        ZVCXI_P0SP_S_AREADIM.
  data:  LT_PCDIM_IN   type        ZVCXI_P0SP_TT_PCDIM,
         LT_PCDIM_OUT  type        ZVCXI_P0SP_TT_PCDIM,
         LT_RODIM_IN   type        ZVCXI_PCSP_TT_RODIM,
         LT_RODIM_OUT  type        ZVCXI_PCSP_TT_RODIM,
         LT_AREADIM    type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_CONV_ATP   type ref to ZIF_VCXI_P0SR_CONV_ATP,
         LR_CONV_ATR   type ref to ZIF_VCXI_PCSR_CONV_ATR.

***----------------------------------------------------------------------------
*** Get PC Dimension
  ME->GET_DIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                            importing ET_PCDIM_IN  = LT_PCDIM_IN
                                      ET_RODIM_IN  = LT_RODIM_IN
                                      ET_PCDIM_OUT = LT_PCDIM_OUT
                                      ET_RODIM_OUT = LT_RODIM_OUT  ).

***----------------------------------------------------------------------------
*** Convert Dimension Out to Dimensions In
  read table LT_PCDIM_OUT into LS_PCDIM_OUT index 1.
  if SY-SUBRC ne 0.
    read table LT_RODIM_OUT into LS_RODIM_OUT index 1.
    move LS_RODIM_OUT-PCUPS to LF_PCUPS_OUT.
  else.
    move LS_PCDIM_OUT-PCUPS to LF_PCUPS_OUT.
  endif.
  check SY-SUBRC eq 0.

  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
  if SY-SUBRC eq 0.
    if LS_PCDIM_IN-PCUPS ne 0.
      CS_CALCV-CALCV = CS_CALCV-CALCV * LF_PCUPS_OUT / LS_PCDIM_IN-PCUPS.
      ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_IN-PCTYP
                                                 changing  CF_VALUE = CS_CALCV-CALCV ).
    else.
      CS_CALCV-CALCV = 0.
    endif.

  else.
    read table LT_RODIM_IN into LS_RODIM_IN index 1.
    if SY-SUBRC eq 0.
      if LS_RODIM_IN-PCUPS ne 0.
        CS_CALCV-CALCV = CS_CALCV-CALCV * LF_PCUPS_OUT / LS_RODIM_IN-PCUPS.
        ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_RODIM_IN-PCTYP
                                                   changing  CF_VALUE = CS_CALCV-CALCV ).
      else.
        CS_CALCV-CALCV = 0.
      endif.
***----------------------------------------------------------------------------
*** Convert Any to Area
    else.
      loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
***     Try PC to AREA
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_ATP.
            check LR_CONV_ATP is bound.

            LT_AREADIM = LR_CONV_ATP->CONV_PC_TO_AREA( IT_PCDIM = LT_PCDIM_OUT ).
            exit.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_CONV_ATP.
        endtry.

***     Try Roll to AREA
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_ATR.
            check LR_CONV_ATR is bound.

            LT_AREADIM = LR_CONV_ATR->CONV_ROLL_TO_AREA( IT_RODIM = LT_RODIM_OUT ).
            exit.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_CONV_ATR.
        endtry.
      endloop.

      read table LT_AREADIM into LS_AREADIM index 1.
      if SY-SUBRC eq 0.
        if LS_AREADIM-PCUPS is not initial.
          CS_CALCV-CALCV     = ( CS_CALCV-CALCV * LF_PCUPS_OUT ) * ( LS_AREADIM-PCARE / LS_AREADIM-PCUPS ).
        else.
          CS_CALCV-CALCV     = 0.
        endif.
        CS_CALCV-CALCV_UOM = LS_AREADIM-PCARE_UOM.
      endif.
    endif.
  endif.

endmethod.
method CONVERT_TO_MQTYO.

  data:  LF_PCUPS      type        ZVCXI_P0SP_PCUPS,
         LF_PCTYP      type        ZVCXI_P0SP_PCTYP.
  data:  LS_PCDIM_OUT  type        ZVCXI_P0SP_S_PCDIM,
         LS_RODIM_OUT  type        ZVCXI_PCSP_S_RODIM.
  data:  LT_PCDIM_OUT  type        ZVCXI_P0SP_TT_PCDIM,
         LT_RODIM_OUT  type        ZVCXI_PCSP_TT_RODIM.

*** Get Dimension
  ME->GET_DIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                            importing ET_PCDIM_OUT = LT_PCDIM_OUT
                                      ET_RODIM_OUT = LT_RODIM_OUT ).

*** Works only with one Dimension
  read table LT_PCDIM_OUT into LS_PCDIM_OUT index 1.
  if SY-SUBRC eq 0 and LS_PCDIM_OUT-PCUPS is not initial.
    move LS_PCDIM_OUT-PCUPS to LF_PCUPS.
    move LS_PCDIM_OUT-PCTYP to LF_PCTYP.
  else.
    read table LT_RODIM_OUT into LS_RODIM_OUT index 1.
    if SY-SUBRC eq 0 and LS_RODIM_OUT-PCUPS is not initial.
      move LS_RODIM_OUT-PCUPS to LF_PCUPS.
      move LS_RODIM_OUT-PCTYP to LF_PCTYP.
    endif.
  endif.

*** Do Conversion
  if LF_PCUPS is not initial.
    CS_CALCV-CALCV = CS_CALCV-CALCV / LF_PCUPS.
    ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LF_PCTYP
                                               changing  CF_VALUE = CS_CALCV-CALCV ).
  else.
    clear CS_CALCV-CALCV.
  endif.

endmethod.
method GET_DIM_BY_RTE_ARBPL.

  data:  LT_PCDIM      type        ZVCXI_P0SP_TT_PCDIM,
         LT_RODIM      type        ZVCXI_PCSP_TT_RODIM.
  data:  LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_ADJ_PCDIM  type ref to ZIF_VCXI_P0SR_ADJ_PCDIM,
         LR_ADJ_RODIM  type ref to ZIF_VCXI_PCSR_ADJ_RODIM.

  free: ET_PCDIM_IN,
        ET_PCDIM_OUT.

  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      if LR_ADJ_PCDIM is bound.
        move LT_PCDIM to ET_PCDIM_IN.
      endif.
      if LR_ADJ_RODIM is bound.
        move LT_RODIM to ET_RODIM_IN.
      endif.
    endif.

    clear: LR_ADJ_PCDIM, LR_ADJ_RODIM.

    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_PCDIM.
          check LR_ADJ_PCDIM is bound.

          LR_ADJ_PCDIM->CALC_PCDIM_OUT( changing CT_PCDIM = LT_PCDIM ).
          continue.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_ADJ_PCDIM.
      endtry.

      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_RODIM.
          check LR_ADJ_RODIM is bound.

          LR_ADJ_RODIM->CALC_RODIM_OUT( changing CT_RODIM = LT_RODIM ).

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_ADJ_RODIM.
      endtry.
    endloop.

*** Stop calculating at own Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      if LR_ADJ_PCDIM is bound.
        move LT_PCDIM to ET_PCDIM_OUT.
      endif.
      if LR_ADJ_RODIM is bound.
        move LT_RODIM to ET_RODIM_OUT.
      endif.
      exit.
    endif.
  endloop.

endmethod.
method GET_PCDIR_BY_RTE_ARBPL.

  data:  LF_PCDIR_MANDATORY  type        ABAP_BOOL.
  data:  LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR            type ref to ZIF_VCXI_P0SR_PCDIR.

  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.

        if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
          if LF_PCDIR_MANDATORY ne ABAP_TRUE.
            move ABAP_TRUE         to LF_PCDIR_MANDATORY.
            move LR_PCDIR->F_PCDIR to RF_PCDIR.
          else.
            if RF_PCDIR ne LR_PCDIR->F_PCDIR.
***           Mandatory PC Directions are not compatible.
              /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                    IF_MSGID = 'ZVCXI_P0SR'
                                                    IF_MSGNO = '101' ).
            endif.
          endif.
        endif.

***     If no Mandatory
        if LF_PCDIR_MANDATORY ne ABAP_TRUE and
           RF_PCDIR           is initial.
          move LR_PCDIR->F_PCDIR to RF_PCDIR.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_RRVAL.

  data:  LF_FLUTE      type        ZVCXI_PCS_FLUTE.
  data:  LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_ADJ_FLUTE  type ref to ZIF_VCXI_PCSR_ADJ_FLUTE.

  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_FLUTE.
          check LR_ADJ_FLUTE is bound.

          LR_ADJ_FLUTE->ADJ_FLUTE( changing CF_FLUTE = LF_FLUTE ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Stop calculating at own Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      exit.
    endif.
  endloop.


*** Return Flute as Run Speed Rate Value
  move LF_FLUTE to RF_RRVAL.

endmethod.
  method GET_RTE_SMVAL.

    data: LF_GMATY type /VCXI/VSMC_GMATY.
    data: LR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH.
    field-symbols: <S_RTE_SMVAL> type /VCXI/VSMR_S_RTE_SMVAL,
                   <S_AVVAL>     type /VCXI/VSMR_S_RTE_RANGE_AVVAL.


*** Get Super
    SUPER->GET_RTE_SMVAL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                    IS_CALCV     = IS_CALCV
                          receiving RT_RTE_SMVAL = RT_RTE_SMVAL ).

***----------------------------------------------------------------------------
*** Get Customizing Instance of Machine
    LR_RTE_CMACH = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
                                                          IF_DATE  = ME->F_DATE
                                                          IF_LCVAL = IR_RTE_ARBPL->F_LCVAL ).
    check LR_RTE_CMACH          is bound and
          LR_RTE_CMACH->R_MTYPE is bound.

*** Aspect - Quantity
    try.

***     Add Aspect only if it is found.
        LF_GMATY = LR_RTE_CMACH->R_MTYPE->GET_GMATY_BY_IMATY( IF_IMATY = C_IMATY_QUANTIY
                                                              IF_MMATY = /VCXI/CL_VSMC_MTYPE=>C_MMATY_VALUE ).

***     Set the worst Ratio of Length or Width
        append initial line to RT_RTE_SMVAL assigning <S_RTE_SMVAL>.
        move LF_GMATY       to <S_RTE_SMVAL>-GMATY.
        append initial line to <S_RTE_SMVAL>-I_AVVAL assigning <S_AVVAL>.
        move 'I'            to <S_AVVAL>-SIGN.
        move 'EQ'           to <S_AVVAL>-OPTION.
        move ''             to <S_AVVAL>-LOW.

      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
method ROUND_MQTYI.

*  data:  LS_PCDIM_IN   type        ZVCXI_P0SP_S_PCDIM.
*  data:  LT_PCDIM_IN   type        ZVCXI_P0SP_TT_PCDIM.
*
****----------------------------------------------------------------------------
**** Get PC Dimension
*  ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
*                              importing ET_PCDIM_IN  = LT_PCDIM_IN ).
*
****----------------------------------------------------------------------------
**** Round PC Dimension In based on PC Type
*  read table LT_PCDIM_IN into LS_PCDIM_IN index 1.
*  if SY-SUBRC eq 0.
*    ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_PCDIM_IN-PCTYP
*                                               changing  CF_VALUE = CS_CALCV-CALCV ).
*  endif.

endmethod.
