
class ZCL_VCXI_XCDC_CONDREC definition
  public
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_ISDEF_ALL type ZVCXI_XCD_ISDEF value '*'. "#EC NOTEXT
  constants C_OVRRH_INITIAL type ZVCXI_XCD_OVRRH value '1'. "#EC NOTEXT
  constants C_ACTVT_CREATE type ACTIV_AUTH value '01'. "#EC NOTEXT
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06'. "#EC NOTEXT
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03'. "#EC NOTEXT
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02'. "#EC NOTEXT
  constants C_FCODE_CONDREC_ADD type UI_FUNC value 'CONDREC_ADD'. "#EC NOTEXT
  constants C_FCODE_CONDREC_COPY type UI_FUNC value 'CONDREC_COPY'. "#EC NOTEXT
  constants C_FCODE_CONDREC_DELETE type UI_FUNC value 'CONDREC_DELETE'. "#EC NOTEXT
  constants C_FCODE_CONDREC_FREE type UI_FUNC value 'FREE'. "#EC NOTEXT
  constants C_FCODE_CONDREC_SAVE type UI_FUNC value 'SAVE'. "#EC NOTEXT
  type-pools ABAP .
  data F_DELETED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .
  constants C_CDOCL_CONDREC type CDOBJECTCL value 'ZVCXI_XCD_CONDR'. "#EC NOTEXT
  data T_CR_FILTER type ZVCXI_XCDC_TT_CR_FILTER read-only .
  data T_CR_VALUE type ZVCXI_XCDC_TT_CR_VALUE read-only .
  data T_CR_EXIT type ZVCXI_XCDC_TT_CR_EXIT read-only .
  data T_CR_DVALUE type ZVCXI_XCDC_TT_CR_DVALUE read-only .
  data T_CR_DEXIT type ZVCXI_XCDC_TT_CR_DEXIT read-only .
  data T_CR_SIMPACT type ZVCXI_XCDC_TT_CR_SIMPACT read-only .
  data F_OELIU type ZVCXI_XCD_OELIU read-only .
  data T_CR_FUNCT type ZVCXI_XCDC_TT_CR_FUNCT read-only .
  data F_SCORE type ZVCXI_XCD_SCORE read-only .
  data R_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE read-only .
  constants C_TOOBJ_CONDREC type /VCXI/CKX_TOOBJ value 'CONDREC'. "#EC NOTEXT
  constants C_FCODE_CONDREC_REQ_TR type UI_FUNC value 'CR_REQ_TR'. "#EC NOTEXT
  data R_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF read-only .
  constants C_OVRRH_STANDARD type ZVCXI_XCD_OVRRH value '2'. "#EC NOTEXT
  data S_SRC type /VCXI/CKX_S_SRC read-only .

  methods DO_CHECK
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_SIMPACT
    importing
      !IS_CR_SIMPACT type ZVCXI_XCDC_S_CR_SIMPACT
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF optional
      !IF_ID type /VCXI/CKX_ID optional
      !IR_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC optional
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_FUNCT
    importing
      !IS_CR_FUNCT type ZVCXI_XCDC_S_CR_FUNCT
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_EXIT
    importing
      !IS_CR_EXIT type ZVCXI_XCDC_S_CR_EXIT
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_DEXIT
    importing
      !IS_CR_DEXIT type ZVCXI_XCDC_S_CR_DEXIT
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_FILTER
    importing
      !IS_CR_FILTER type ZVCXI_XCDC_S_CR_FILTER
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_VALUE
    importing
      !IS_CR_VALUE type ZVCXI_XCDC_S_CR_VALUE
    raising
      /VCXI/CX_CKX .
  methods ADD_CR_DVALUE
    importing
      !IS_CR_DVALUE type ZVCXI_XCDC_S_CR_DVALUE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_VALUE
    importing
      !IS_CR_VALUE type ZVCXI_XCDC_S_CR_VALUE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_DVALUE
    importing
      !IS_CR_DVALUE type ZVCXI_XCDC_S_CR_DVALUE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_FILTER
    importing
      !IS_CR_FILTER type ZVCXI_XCDC_S_CR_FILTER
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_DEXIT
    importing
      !IS_CR_DEXIT type ZVCXI_XCDC_S_CR_DEXIT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_EXIT
    importing
      !IS_CR_EXIT type ZVCXI_XCDC_S_CR_EXIT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_FUNCT
    importing
      !IS_CR_FUNCT type ZVCXI_XCDC_S_CR_FUNCT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CR_SIMPACT
    importing
      !IS_CR_SIMPACT type ZVCXI_XCDC_S_CR_SIMPACT
    raising
      /VCXI/CX_CKX .
  methods SET_CONDDEF
    importing
      !IF_GCODE type ZVCXI_XCD_GCODE
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_DVALUE
    importing
      !IS_CR_DVALUE type ZVCXI_XCDC_S_CR_DVALUE
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_VALUE
    importing
      !IS_CR_VALUE type ZVCXI_XCDC_S_CR_VALUE
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_DEXIT
    importing
      !IS_CR_DEXIT type ZVCXI_XCDC_S_CR_DEXIT
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_EXIT
    importing
      !IS_CR_EXIT type ZVCXI_XCDC_S_CR_EXIT
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_FILTER
    importing
      !IS_CR_FILTER type ZVCXI_XCDC_S_CR_FILTER
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_FUNCT
    importing
      !IS_CR_FUNCT type ZVCXI_XCDC_S_CR_FUNCT
    raising
      /VCXI/CX_CKX .
  methods DELETE_CR_SIMPACT
    importing
      !IS_CR_SIMPACT type ZVCXI_XCDC_S_CR_SIMPACT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GCORE type ZVCXI_XCD_GCORE
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF optional
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_BY_CONDDEF
    importing
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF
    returning
      value(RR_CONDREC) type ref to ZCL_VCXI_XCDC_CONDREC
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IF_SCORE type ZVCXI_XCD_SCORE
    raising
      /VCXI/CX_CKX .
  methods SET_OELIU
    importing
      !IF_OELIU type ZVCXI_XCD_OELIU
    raising
      /VCXI/CX_CKX .
  methods SET_ID
    importing
      !IF_ID type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
protected section.

  data F_WRITE_TR type ABAP_BOOL .
  data F_CHANGED type ABAP_BOOL .
  data F_GCORE type ZVCXI_XCD_GCORE .
  data R_DVCCOND type ref to ZCL_VCXI_XCDC_DVCCOND .

  methods DO_LOCK_FOR_DELETION
    raising
      /VCXI/CX_CKX .
  methods GENERATE_RANGE_REF
    changing
      !CS_CR_VALUE type ZVCXI_XCDC_S_CR_VALUE
    raising
      /VCXI/CX_CKX .
  methods CHECK_CONDDEF
    importing
      !IF_CLEAN type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_COPY
    returning
      value(RR_CONDREC) type ref to ZCL_VCXI_XCDC_CONDREC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REQ_TR
    raising
      /VCXI/CX_CKX .
private section.

  data F_ICORE type ZVCXI_XCD_ICORE .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods BUILD_TD311
    returning
      value(RT_TD311) type ZVCXI_XCD_TT_TD311
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD310
    returning
      value(RT_TD310) type ZVCXI_XCD_TT_TD310
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD330
    returning
      value(RT_TD330) type ZVCXI_XCD_TT_TD330
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD320
    returning
      value(RT_TD320) type ZVCXI_XCD_TT_TD320
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD301
    returning
      value(RT_TD301) type ZVCXI_XCD_TT_TD301
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD340
    returning
      value(RT_TD340) type ZVCXI_XCD_TT_TD340
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD350
    returning
      value(RT_TD350) type ZVCXI_XCD_TT_TD350
    raising
      /VCXI/CX_CKX .
  methods BUILD_TD360
    returning
      value(RT_TD360) type ZVCXI_XCD_TT_TD360
    raising
      /VCXI/CX_CKX .
  methods INIT_SRC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCDC_CONDREC .
  methods INIT_LOG
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCDC_CONDREC definition
class ZCL_VCXI_XCDC_CONDREC implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

  data:  LF_DISABLED type CUA_ACTIVE.

*** Create Menu Reference
  create object RR_MENU.

*** Create Condition Record
  LF_DISABLED = ABAP_FALSE.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_ADD
                         TEXT     = 'Create Condition Record'(001)
                         DISABLED = LF_DISABLED ).

*** Delete Condition Record always (try)
  LF_DISABLED = ABAP_FALSE.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_DELETE
                         TEXT     = 'Delete Condition Record'(002)
                         DISABLED = LF_DISABLED ).

*** Copy Condition Record
  LF_DISABLED = ABAP_FALSE.
  RR_MENU->ADD_FUNCTION( FCODE    = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_COPY
                         TEXT     = 'Copy Condition Record'(003)
                         DISABLED = LF_DISABLED ).

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.


  case IF_FCODE.
    when ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_COPY.
      ME->HANDLE_COPY( ).
    when ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_REQ_TR.
      ME->HANDLE_REQ_TR( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move ZCL_VCXI_XCDC_CONDREC=>C_CDOCL_CONDREC to EF_CDOCL.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )    to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Condition Record is not locked. No changes possible.
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = 'ZVCXI_XCDC'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK .

  check ME->F_DELETED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCDC_CONDREC=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_CONDREC=>C_ACTVT_EDIT
                                     IR_CONDDEF = ME->R_CONDDEF
                                     IR_CONDREC = ME ).

*** Check Source of Element Type
  /VCXI/CL_CKX_SERVICE=>CHECK_SRC( IS_SRC = ME->S_SRC ).

*** Set DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move ABAP_TRUE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).
      ME->CHECK_CONDDEF( IF_CLEAN = ABAP_TRUE ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK .

*** Delete DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

  move ABAP_FALSE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED .

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

*** Show only Sequence
  move ME->F_SCORE to RF_DESCR.
  shift RF_DESCR left deleting leading '0'.

  concatenate 'Sequence'(010) RF_DESCR into RF_DESCR separated by SPACE.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

*** There is no Description for an Condition Record
*  move ME->T_DESCR to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GCORE to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_ICORE to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GCORE    type        ZVCXI_XCD_GCORE.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_CONDREC  type ref to ZCL_VCXI_XCDC_CONDREC.

*** Make sure DVC Condition Customizing Instance is there
  ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

*** Check Instances
  read table ZCL_VCXI_XCDC_CONDREC=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GCORE.

*** Get new Instance
    try.
        create object LR_CONDREC
          exporting
            IF_GCORE   = LF_GCORE.
      catch CX_SY_CREATE_OBJECT_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    move LR_CONDREC ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method ADD_CR_DEXIT.

  field-symbols: <S_CR_DEXIT> type ZVCXI_XCDC_S_CR_DEXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DEXIT assigning <S_CR_DEXIT> with key IEXIT = IS_CR_DEXIT-IEXIT.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_DEXIT assigning <S_CR_DEXIT>.
    move-corresponding IS_CR_DEXIT to <S_CR_DEXIT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_DVALUE.

  field-symbols: <S_CR_DVALUE> type ZVCXI_XCDC_S_CR_DVALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DVALUE assigning <S_CR_DVALUE> with key PARID = IS_CR_DVALUE-PARID.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_DVALUE assigning <S_CR_DVALUE>.
    move-corresponding IS_CR_DVALUE to <S_CR_DVALUE>.
*** Set Standard Override Option
    if <S_CR_DVALUE>-OVRRH is initial.
      move C_OVRRH_STANDARD to <S_CR_DVALUE>-OVRRH.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_EXIT.

  field-symbols: <S_CR_EXIT> type ZVCXI_XCDC_S_CR_EXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_EXIT assigning <S_CR_EXIT> with key IEXIT = IS_CR_EXIT-IEXIT.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_EXIT assigning <S_CR_EXIT>.
    move-corresponding IS_CR_EXIT to <S_CR_EXIT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_FILTER.

  field-symbols: <S_CR_FILTER> type ZVCXI_XCDC_S_CR_FILTER.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FILTER assigning <S_CR_FILTER> with key GCRFI = IS_CR_FILTER-GCRFI.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_FILTER assigning <S_CR_FILTER>.
    move-corresponding IS_CR_FILTER to <S_CR_FILTER>.

*** Get GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_CR_FILTER>-GCRFI.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_FUNCT.

  field-symbols: <S_CR_FUNCT> type ZVCXI_XCDC_S_CR_FUNCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FUNCT assigning <S_CR_FUNCT> with key IFUNC = IS_CR_FUNCT-IFUNC.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_FUNCT assigning <S_CR_FUNCT>.
    move-corresponding IS_CR_FUNCT to <S_CR_FUNCT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_SIMPACT.

  field-symbols: <S_CR_SIMPACT> type ZVCXI_XCDC_S_CR_SIMPACT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_SIMPACT assigning <S_CR_SIMPACT> with key ISCGR = IS_CR_SIMPACT-ISCGR.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_SIMPACT assigning <S_CR_SIMPACT>.
    move-corresponding IS_CR_SIMPACT to <S_CR_SIMPACT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_CR_VALUE.

  field-symbols: <S_CR_VALUE> type ZVCXI_XCDC_S_CR_VALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_VALUE assigning <S_CR_VALUE> with key ICOVA = IS_CR_VALUE-ICOVA.

  if SY-SUBRC ne 0.
    append initial line to ME->T_CR_VALUE assigning <S_CR_VALUE>.
    move-corresponding IS_CR_VALUE to <S_CR_VALUE>.

*** Generate Data Reference of Range
    ME->GENERATE_RANGE_REF( changing CS_CR_VALUE = <S_CR_VALUE> ).
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method BUILD_TD301.

  data:          LS_CR_FILTER  type ZVCXI_XCDC_S_CR_FILTER.
  field-symbols: <S_TD301>     type ZVCXI_XCD_TD301.

  loop at ME->T_CR_FILTER into LS_CR_FILTER.
    append initial line to RT_TD301 assigning <S_TD301>.
    move SY-MANDT                   to <S_TD301>-MANDT.
    move ME->F_GCORE                to <S_TD301>-GCORE.
    move-corresponding LS_CR_FILTER to <S_TD301>.
  endloop.

endmethod.
method BUILD_TD310.

  field-symbols: <S_TD310>   type ZVCXI_XCD_TD310.

  append initial line to RT_TD310 assigning <S_TD310>.
  move SY-MANDT    to <S_TD310>-MANDT.
  move ME->F_GCORE to <S_TD310>-GCORE.
  move ME->F_OELIU to <S_TD310>-OELIU.

endmethod.
method BUILD_TD311.

  data:          LS_CR_SIMPACT type ZVCXI_XCDC_S_CR_SIMPACT.
  field-symbols: <S_TD311>     type ZVCXI_XCD_TD311.

  loop at ME->T_CR_SIMPACT into LS_CR_SIMPACT.
    append initial line to RT_TD311 assigning <S_TD311>.
    move SY-MANDT                    to <S_TD311>-MANDT.
    move ME->F_GCORE                 to <S_TD311>-GCORE.
    move-corresponding LS_CR_SIMPACT to <S_TD311>.
  endloop.

endmethod.
method BUILD_TD320.

  data:          LS_CR_FUNCT  type ZVCXI_XCDC_S_CR_FUNCT.
  field-symbols: <S_TD320>     type ZVCXI_XCD_TD320.

  loop at ME->T_CR_FUNCT into LS_CR_FUNCT.
    append initial line to RT_TD320 assigning <S_TD320>.
    move SY-MANDT                  to <S_TD320>-MANDT.
    move ME->F_GCORE               to <S_TD320>-GCORE.
    move-corresponding LS_CR_FUNCT to <S_TD320>.
  endloop.

endmethod.
method BUILD_TD330.

  data:          LS_CR_DVALUE  type ZVCXI_XCDC_S_CR_DVALUE.
  field-symbols: <S_TD330>     type ZVCXI_XCD_TD330.

  loop at ME->T_CR_DVALUE into LS_CR_DVALUE.
    append initial line to RT_TD330 assigning <S_TD330>.
    move SY-MANDT                   to <S_TD330>-MANDT.
    move ME->F_GCORE                to <S_TD330>-GCORE.
    move-corresponding LS_CR_DVALUE to <S_TD330>.
  endloop.

endmethod.
method BUILD_TD340.

  data:          LS_CR_DEXIT  type ZVCXI_XCDC_S_CR_DEXIT.
  field-symbols: <S_TD340>     type ZVCXI_XCD_TD340.

  loop at ME->T_CR_DEXIT into LS_CR_DEXIT.
    append initial line to RT_TD340 assigning <S_TD340>.
    move SY-MANDT                  to <S_TD340>-MANDT.
    move ME->F_GCORE               to <S_TD340>-GCORE.
    move-corresponding LS_CR_DEXIT to <S_TD340>.
  endloop.

endmethod.
method BUILD_TD350.

  data:          LS_CR_VALUE  type          ZVCXI_XCDC_S_CR_VALUE.
  field-symbols: <S_TD350>    type          ZVCXI_XCD_TD350,
                 <I_RANGE>    type standard table.

  loop at ME->T_CR_VALUE into LS_CR_VALUE.
    append initial line to RT_TD350 assigning <S_TD350>.
    move SY-MANDT                  to <S_TD350>-MANDT.
    move ME->F_GCORE               to <S_TD350>-GCORE.
    move-corresponding LS_CR_VALUE to <S_TD350>.

*** Convert Data Range to XML-String
    assign LS_CR_VALUE-R_RANGE->* to <I_RANGE>.
    check SY-SUBRC = 0.
    call transformation ID
         source I_RANGE = <I_RANGE>
         result xml <S_TD350>-VCORE.

  endloop.

endmethod.
method BUILD_TD360.

  data:          LS_CR_EXIT  type ZVCXI_XCDC_S_CR_EXIT.
  field-symbols: <S_TD360>     type ZVCXI_XCD_TD360.

  loop at ME->T_CR_EXIT into LS_CR_EXIT.
    append initial line to RT_TD360 assigning <S_TD360>.
    move SY-MANDT                 to <S_TD360>-MANDT.
    move ME->F_GCORE              to <S_TD360>-GCORE.
    move-corresponding LS_CR_EXIT to <S_TD360>.
  endloop.

endmethod.
method CHECK_AUTH.

  data:  LF_ID     type /VCXI/CKX_ID,
         LF_ICOND  type /VCXI/CKX_ID,
         LF_MSGV1  type SYMSGV,
         LF_MSGV2  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Get Condition Definition ID
  if IR_CONDREC is bound and
     IR_CONDREC->R_CONDDEF is bound.
    move IR_CONDREC->R_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ICOND.
  elseif IR_CONDDEF is bound.
    move IR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ICOND.
  else.
    raise exception type /VCXI/CX_CKX.
  endif.

***--------------------------------------------------------------------------------------
*** Get Condition Record ID
  if IR_CONDREC is bound.
    move IR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
  elseif IF_ID is not initial.
    move IF_ID to LF_ID.
  endif.

****--------------------------------------------------------------------------------------
**** Check Authority for Condition Record
  if LF_ID is not initial.
    authority-check object 'Z_XC_DVC_R'
              id 'ACTVT'       field IF_ACTVT
              id 'Z_XC_DVC_D'  field LF_ICOND
              id 'Z_XC_DVC_R'  field LF_ID.
  else.
    authority-check object 'Z_XC_DVC_R'
              id 'ACTVT'       field IF_ACTVT
              id 'Z_XC_DVC_D'  field LF_ICOND
              id 'Z_XC_DVC_R'  dummy.
  endif.

***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

    if LF_ID is not initial.
***   No authorization to & Condition Record &.
      move LF_ID to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
         exporting
           F_MSGTY = 'E'
           F_MSGID = 'ZVCXI_XCDC'
           F_MSGNO = '275'
           F_MSGV1 = LF_MSGV1
           F_MSGV2 = LF_MSGV2.
    else.
***   No authorization to & Condition Record of Condition Definiton &.
      move LF_ICOND to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
         exporting
           F_MSGTY = 'E'
           F_MSGID = 'ZVCXI_XCDC'
           F_MSGNO = '276'
           F_MSGV1 = LF_MSGV1
           F_MSGV2 = LF_MSGV2.
    endif.
  endif.

endmethod.
method CHECK_CONDDEF.

  data: LS_CR_FILTER  type ZVCXI_XCDC_S_CR_FILTER,
        LS_CR_VALUE   type ZVCXI_XCDC_S_CR_VALUE,
        LS_CR_EXIT    type ZVCXI_XCDC_S_CR_EXIT,
        LS_CR_SIMPACT type ZVCXI_XCDC_S_CR_SIMPACT,
        LS_CR_DVALUE  type ZVCXI_XCDC_S_CR_DVALUE,
        LS_CR_DEXIT   type ZVCXI_XCDC_S_CR_DEXIT,
        LS_CR_FUNCT   type ZVCXI_XCDC_S_CR_FUNCT.
  data: LF_MSGV1      type SYMSGV,
        LF_MSGV2      type SYMSGV.

***------------------------------------------------------------------
*** Initial Message
  if IF_CLEAN eq ABAP_TRUE.
*** Following Elements are invalid and will be deleted:
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '218' ).
  else.
*** Following Elements are invalid (and will only be deleted in ChangeMode):
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '219' ).
  endif.

***------------------------------------------------------------------
*** Check Filter is Valid
  loop at ME->T_CR_FILTER into LS_CR_FILTER.
    check ME->R_CONDDEF->CHECK_FILTER( IS_CR_FILTER = LS_CR_FILTER ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_FILTER( IS_CR_FILTER = LS_CR_FILTER ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    concatenate LS_CR_FILTER-CMATN LS_CR_FILTER-PRFID LS_CR_FILTER-ICELM into LF_MSGV1.
*** Filter for &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '210'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** Check Screen Impacts is Valid
  loop at ME->T_CR_SIMPACT into LS_CR_SIMPACT.
    check ME->R_CONDDEF->CHECK_SCRGR( IF_ISCGR = LS_CR_SIMPACT-ISCGR ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_SIMPACT( IS_CR_SIMPACT = LS_CR_SIMPACT ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    move LS_CR_SIMPACT-ISCGR to LF_MSGV1.
*** Screen Group &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '211'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** Check Function is Valid
  loop at ME->T_CR_FUNCT into LS_CR_FUNCT.
    check ME->R_CONDDEF->CHECK_FUNCT( IF_IFUNC = LS_CR_FUNCT-IFUNC ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_FUNCT( IS_CR_FUNCT = LS_CR_FUNCT ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    move LS_CR_FUNCT-IFUNC to LF_MSGV1.
*** Function &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '212'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** Check Default Value is Valid
  loop at ME->T_CR_DVALUE into LS_CR_DVALUE.
    if LS_CR_DVALUE-PAVAL is not initial and
       ME->R_CONDDEF->CHECK_DEFAUEL( IF_PARID = LS_CR_DVALUE-PARID ) eq ABAP_FALSE.
***   Delete Entry
      if IF_CLEAN eq ABAP_TRUE.
        ME->DELETE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
      endif.
*** Add Message
      check ME->R_MESSAGE is bound.
      clear: LF_MSGV1.
      move LS_CR_DVALUE-PARID to LF_MSGV1.
*** Default Value &1 is not valid.
      ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                  IF_MSGTY = 'E'
                                  IF_MSGNO = '213'
                                  IF_MSGV1 = LF_MSGV1 ).

    endif.
    if LS_CR_DVALUE-IEXIT is not initial and
       ME->R_CONDDEF->CHECK_DEFAUELEX( IF_PARID = LS_CR_DVALUE-PARID
                                       IF_IEXIT = LS_CR_DVALUE-IEXIT ) eq ABAP_FALSE.
***   Update Entry
      if IF_CLEAN eq ABAP_TRUE.
        clear: LS_CR_DVALUE-IEXIT.
        ME->UPDATE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
      endif.
***   Add Message
      check ME->R_MESSAGE is bound.
      clear: LF_MSGV1, LF_MSGV2.
      move LS_CR_DVALUE-PARID to LF_MSGV1.
      move LS_CR_DVALUE-IEXIT to LF_MSGV2.
***   Default Value Exit &2 of Value &1 is not valid.
      ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                  IF_MSGTY = 'E'
                                  IF_MSGNO = '214'
                                  IF_MSGV1 = LF_MSGV1
                                  IF_MSGV2 = LF_MSGV2 ).
    endif.
  endloop.

***------------------------------------------------------------------
*** Check Default Exit is Valid
  loop at ME->T_CR_DEXIT into LS_CR_DEXIT.
    check ME->R_CONDDEF->CHECK_DEFAUEX( IF_IEXIT = LS_CR_DEXIT-IEXIT ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_DEXIT( IS_CR_DEXIT = LS_CR_DEXIT ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    move LS_CR_DEXIT-IEXIT to LF_MSGV1.
*** Default Exit &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '215'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** Check Value is Valid
  loop at ME->T_CR_VALUE into LS_CR_VALUE.
    check ME->R_CONDDEF->CHECK_VALUE( IF_ICOVA = LS_CR_VALUE-ICOVA ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    move LS_CR_VALUE-ICOVA to LF_MSGV1.
*** Condition Value &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '216'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** Check Exit is Valid
  loop at ME->T_CR_EXIT into LS_CR_EXIT.
    check ME->R_CONDDEF->CHECK_EXIT( IF_IEXIT = LS_CR_EXIT-IEXIT ) eq ABAP_FALSE.
*** Delete Entry
    if IF_CLEAN eq ABAP_TRUE.
      ME->DELETE_CR_EXIT( IS_CR_EXIT = LS_CR_EXIT ).
    endif.
*** Add Message
    check ME->R_MESSAGE is bound.
    clear: LF_MSGV1.
    move LS_CR_EXIT-IEXIT to LF_MSGV1.
*** Condition Exit &1 is not valid.
    ME->R_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '217'
                                IF_MSGV1 = LF_MSGV1 ).
  endloop.

***------------------------------------------------------------------
*** If there are no inconsistent Values -> Delete Messages
  if ME->R_MESSAGE                 is bound and
     lines( ME->R_MESSAGE->T_MSG ) eq 1.
    ME->R_MESSAGE->INIT_MSG( ).
  endif.

endmethod.
method CONSTRUCTOR.

  field-symbols:  <S_INSTANCE>       type         /VCXI/CKX_S_OBJECT_INSTANCE.

*** Get Instance of Message
  create object R_MESSAGE.

***------------------------------------------------------------------------------------------------
*** Set Import Parameter to Attributes
  move IF_GCORE   to ME->F_GCORE.
  move IR_CONDDEF to ME->R_CONDDEF.

*** Get DynamicVC Condition Instance
  ME->R_DVCCOND = ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

***------------------------------------------------------------------------------------------------
*** Define Type of Object
  move C_TOOBJ_CONDREC to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***------------------------------------------------------------------------------------------------
*** Load DB
  ME->LOAD_FROM_DB( ).
  ME->CHECK_CONDDEF( ).

*** Set Temporary WhereUsed Connection to Condition Definition
  if ME->R_CONDDEF is bound.
    append ME->F_GCORE to ME->R_CONDDEF->T_GCORE.
  endif.

*** Register to DynamicVC Condition Instance
  ME->R_DVCCOND->REGISTER_OBJECT( IR_OBJECT = ME ).

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
  append initial line to ZCL_VCXI_XCDC_CONDREC=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
  move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***------------------------------------------------------------------------------------------------
  set handler ME->HANDLE_CHANGED for ME.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CREATED.

endmethod.
method CREATE_BY_CONDDEF.

  data:  LF_GCORE                     type        ZVCXI_XCD_GCORE.
  data:  LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCDC_CONDREC=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_CONDREC=>C_ACTVT_CREATE
                                     IR_CONDDEF = IR_CONDDEF ).

*** Get GUID
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GCORE.

*** Create Condition Definition
  try.
      create object RR_CONDREC
        exporting
          IF_GCORE   = LF_GCORE
          IR_CONDDEF = IR_CONDDEF.
    catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
  endtry.

  RR_CONDREC->INIT_SRC( ).
  RR_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  RR_CONDREC->INIT_LOG( ).
  RR_CONDREC->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

endmethod.
method DELETE_CR_DEXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DEXIT with key IEXIT = IS_CR_DEXIT-IEXIT
                           transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_DEXIT where IEXIT = IS_CR_DEXIT-IEXIT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_DVALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DVALUE with key PARID = IS_CR_DVALUE-PARID
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_DVALUE where PARID = IS_CR_DVALUE-PARID.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_EXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_EXIT with key IEXIT = IS_CR_EXIT-IEXIT
                           transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_EXIT where IEXIT = IS_CR_EXIT-IEXIT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_FILTER.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FILTER with key GCRFI = IS_CR_FILTER-GCRFI
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_FILTER where GCRFI = IS_CR_FILTER-GCRFI.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_FUNCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FUNCT with key IFUNC = IS_CR_FUNCT-IFUNC
                            transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_FUNCT where IFUNC = IS_CR_FUNCT-IFUNC.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_SIMPACT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_SIMPACT with key ISCGR = IS_CR_SIMPACT-ISCGR
                              transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_SIMPACT where ISCGR = IS_CR_SIMPACT-ISCGR.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_CR_VALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_VALUE with key ICOVA = IS_CR_VALUE-ICOVA
                            transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_CR_VALUE where ICOVA = IS_CR_VALUE-ICOVA.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DO_CHECK.

*** Do Check if Registry element on Condition Definition is filled and valid
  if ME->R_CONDDEF->R_REGDVC is not bound.
*** No valid Registry Element is maintained on Condition Definition.
    IR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                         IF_MSGID = 'ZVCXI_XCDC'
                         IF_MSGNO = '221' ).
  endif.

endmethod.
method DO_LOCK_FOR_DELETION.

*** Set DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move ABAP_TRUE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).
      ME->CHECK_CONDDEF( IF_CLEAN = ABAP_TRUE ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method GENERATE_RANGE_REF.

  data: LR_STRUCTDESCR    type ref to  CL_ABAP_STRUCTDESCR,
        LR_TABLEDESCR     type ref to  CL_ABAP_TABLEDESCR,
        LR_DATADESCR      type ref to  CL_ABAP_DATADESCR,
        LR_TYPEDESCR      type ref to  CL_ABAP_TYPEDESCR.
  data: LT_COMPONENTS     type         ABAP_COMPONENT_TAB.
  data: LS_COMPONENT      type line of ABAP_COMPONENT_TAB,
        LS_CD_VALUE       type         ZVCXI_XCDC_S_CD_VALUE.

  check CS_CR_VALUE-R_RANGE is initial.

*** Get Description of DataElement and Uom.
  read table ME->R_CONDDEF->T_CD_VALUE
    with key ICOVA = CS_CR_VALUE-ICOVA
    into LS_CD_VALUE.

*** determine components of structure -> LT_COMPONENTS
  move 'SIGN' to LS_COMPONENT-NAME.
  LS_COMPONENT-TYPE = CL_ABAP_ELEMDESCR=>GET_C( P_LENGTH = 1 ).
  insert LS_COMPONENT into table LT_COMPONENTS.

  move 'OPTION' to LS_COMPONENT-NAME.
  LS_COMPONENT-TYPE = CL_ABAP_ELEMDESCR=>GET_C( P_LENGTH = 2 ).
  insert LS_COMPONENT into table LT_COMPONENTS.

  move 'LOW' to LS_COMPONENT-NAME.
  CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = LS_CD_VALUE-DATEL
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1 ).
  if SY-SUBRC eq 0.
    try.
        move LR_TYPEDESCR ?to LS_COMPONENT-TYPE.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.
    insert LS_COMPONENT into table LT_COMPONENTS.
  else.
    exit.
  endif.

  move 'HIGH' to LS_COMPONENT-NAME.
  CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = LS_CD_VALUE-DATEL
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1 ).
  if SY-SUBRC eq 0.
    try.
        move LR_TYPEDESCR ?to LS_COMPONENT-TYPE.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.
    insert LS_COMPONENT into table LT_COMPONENTS.
  else.
    exit.
  endif.

*** Get structure descriptor -> LR_STRUCTDESCR
  LR_STRUCTDESCR = CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENTS ).

  LR_DATADESCR   = LR_STRUCTDESCR.
  LR_TABLEDESCR  = CL_ABAP_TABLEDESCR=>CREATE( LR_DATADESCR ).

*** Create dynmaic internal table
  create data CS_CR_VALUE-R_RANGE type handle LR_TABLEDESCR.

endmethod.
method HANDLE_CHANGED .

  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
method HANDLE_COPY.

  data:  LS_CR_FILTER  type     ZVCXI_XCDC_S_CR_FILTER,
         LS_CR_SIMPACT type     ZVCXI_XCDC_S_CR_SIMPACT,
         LS_CR_FUNCT   type     ZVCXI_XCDC_S_CR_FUNCT,
         LS_CR_DVALUE  type     ZVCXI_XCDC_S_CR_DVALUE,
         LS_CR_DEXIT   type     ZVCXI_XCDC_S_CR_DEXIT,
         LS_CR_VALUE   type     ZVCXI_XCDC_S_CR_VALUE,
         LS_CR_EXIT    type     ZVCXI_XCDC_S_CR_EXIT.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Create new Condition Definition
  RR_CONDREC = ZCL_VCXI_XCDC_CONDREC=>CREATE_BY_CONDDEF( IR_CONDDEF = ME->R_CONDDEF ).

*** Copy Header Data:
  RR_CONDREC->SET_ID( IF_ID = ME->F_ICORE ).
  RR_CONDREC->SET_SCORE( IF_SCORE = ME->F_SCORE ).

*** Set Filter
  loop at ME->T_CR_FILTER into LS_CR_FILTER.
    RR_CONDREC->ADD_CR_FILTER( IS_CR_FILTER = LS_CR_FILTER ).
  endloop.

*** Set Screen Options
  RR_CONDREC->SET_OELIU( IF_OELIU = ME->F_OELIU ).
  loop at ME->T_CR_SIMPACT into LS_CR_SIMPACT.
    RR_CONDREC->ADD_CR_SIMPACT( IS_CR_SIMPACT = LS_CR_SIMPACT ).
  endloop.

*** Set Functions
  loop at ME->T_CR_FUNCT into LS_CR_FUNCT.
    RR_CONDREC->ADD_CR_FUNCT( IS_CR_FUNCT = LS_CR_FUNCT ).
  endloop.

*** Set Defaults
  loop at ME->T_CR_DVALUE into LS_CR_DVALUE.
    RR_CONDREC->ADD_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
  endloop.

  loop at ME->T_CR_DEXIT into LS_CR_DEXIT.
    RR_CONDREC->ADD_CR_DEXIT( IS_CR_DEXIT = LS_CR_DEXIT ).
  endloop.

*** Set Conditions
  loop at ME->T_CR_VALUE into LS_CR_VALUE.
    RR_CONDREC->ADD_CR_VALUE( IS_CR_VALUE = LS_CR_VALUE ).
  endloop.

  loop at ME->T_CR_EXIT into LS_CR_EXIT.
    RR_CONDREC->ADD_CR_EXIT( IS_CR_EXIT = LS_CR_EXIT ).
  endloop.

endmethod.
method HANDLE_DELETE.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCDC_CONDREC=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_CONDREC=>C_ACTVT_DELETE
                                     IR_CONDDEF = ME->R_CONDDEF
                                     IR_CONDREC = ME ).

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
    ME->DO_LOCK_FOR_DELETION( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.

*** Delete Reference to Condition Definition
  if ME->R_CONDDEF is bound.
    delete ME->R_CONDDEF->T_GCORE where TABLE_LINE = ME->F_GCORE.
  endif.

  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE .

  data:  LF_GUID type /VCXI/CKX_GUID.

  ME->R_DVCCOND->UNREGISTER_OBJECT( IR_OBJECT = ME ).

  LF_GUID = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
  delete ZCL_VCXI_XCDC_CONDREC=>T_INSTANCE where GUID = LF_GUID.

endmethod.
method HANDLE_REQ_TR.

*** Request Transport
  move ABAP_TRUE to ME->F_WRITE_TR.
  ME->R_DVCCOND->REQUEST_TRANSPORT( ).

endmethod.
method HANDLE_SAVE .

  data:  LF_GCODE     type        ZVCXI_XCD_GCODE.
  data:  LT_TD301     type        ZVCXI_XCD_TT_TD301,
         LT_TD310     type        ZVCXI_XCD_TT_TD310,
         LT_TD311     type        ZVCXI_XCD_TT_TD311,
         LT_TD320     type        ZVCXI_XCD_TT_TD320,
         LT_TD330     type        ZVCXI_XCD_TT_TD330,
         LT_TD340     type        ZVCXI_XCD_TT_TD340,
         LT_TD350     type        ZVCXI_XCD_TT_TD350,
         LT_TD360     type        ZVCXI_XCD_TT_TD360.

*** Save only if changed
  check ME->F_CHANGED  eq ABAP_TRUE or
        ME->F_WRITE_TR eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_CHANGED.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

*** Get Condition Definition GUID
  if ME->R_CONDDEF is bound.
    move ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GCODE.
  endif.

*** Get Depending Tables
  LT_TD301 = ME->BUILD_TD301( ).
  LT_TD310 = ME->BUILD_TD310( ).
  LT_TD311 = ME->BUILD_TD311( ).
  LT_TD320 = ME->BUILD_TD320( ).
  LT_TD330 = ME->BUILD_TD330( ).
  LT_TD340 = ME->BUILD_TD340( ).
  LT_TD350 = ME->BUILD_TD350( ).
  LT_TD360 = ME->BUILD_TD360( ).

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Save Condition Record
    call function 'ZVCXI_XCDC_DB_SAVE_CONDREC'
      in update task
      exporting
        IF_GCORE    = ME->F_GCORE
        IF_ICORE    = ME->F_ICORE
        IF_SCORE    = ME->F_SCORE
        IF_GCODE    = LF_GCODE
        IS_LOG      = ME->S_LOG
        IS_SRC      = ME->S_SRC
        IT_TD301    = LT_TD301
        IT_TD310    = LT_TD310
        IT_TD311    = LT_TD311
        IT_TD320    = LT_TD320
        IT_TD330    = LT_TD330
        IT_TD340    = LT_TD340
        IT_TD350    = LT_TD350
        IT_TD360    = LT_TD360
        IF_WRITE_TR = ME->F_WRITE_TR.
  else.
*** Delete Condition Record
    call function 'ZVCXI_XCDC_DB_DEL_CONDREC'
      in update task
      exporting
        IF_GCORE    = ME->F_GCORE
        IF_WRITE_TR = ME->F_WRITE_TR.
  endif.

endmethod.
method INIT_LOG.

***----------------------------------------------------------------------------
*** Set Created Info to Log
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_SRC.

*** Set Source
  move SY-SYSID to ME->S_SRC-SRCSY.
  move SY-MANDT to ME->S_SRC-SRCMA.

endmethod.
method LOAD_FROM_DB .

  data:          LF_GUID      type                   /VCXI/CKX_GUID.
  data:          LS_TD300     type                   ZVCXI_XCD_TD300,
                 LS_TD310     type                   ZVCXI_XCD_TD310,
                 LS_TD350     type                   ZVCXI_XCD_TD350.
  data:          LT_TD350     type                   ZVCXI_XCD_TT_TD350.
  field-symbols: <S_CR_VALUE> type                   ZVCXI_XCDC_S_CR_VALUE,
                 <I_RANGE>    type standard          table,
                 <R_RANGE>    type ref to            DATA.

  free: ME->F_OELIU,
        ME->F_SCORE,
        ME->T_CR_DEXIT,
        ME->T_CR_DVALUE,
        ME->T_CR_EXIT,
        ME->T_CR_FILTER,
        ME->T_CR_FUNCT,
        ME->T_CR_SIMPACT,
        ME->T_CR_VALUE.


*** Load Header
  select single *
         into LS_TD300
         from ZVCXI_XCD_TD300
        where GCORE eq ME->F_GCORE.
  check SY-SUBRC eq 0.
  free: ME->F_ICORE,
        ME->S_LOG,
        ME->S_SRC.
  move               LS_TD300-ICORE to ME->F_ICORE.
  move               LS_TD300-SCORE to ME->F_SCORE.
  move-corresponding LS_TD300       to ME->S_LOG.
  move-corresponding LS_TD300       to ME->S_SRC.

  if LS_TD300-GCODE is not initial.
    move LS_TD300-GCODE to LF_GUID.
    free: ME->R_CONDDEF.
    ME->R_CONDDEF ?= ZCL_VCXI_XCDC_CONDDEF=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endif.

*** Load CR - Filter
  select *
         into corresponding fields of table ME->T_CR_FILTER
         from ZVCXI_XCD_TD301
        where GCORE eq ME->F_GCORE.

*** Load CR - Generell Screen Impact
  select single OELIU
         into ME->F_OELIU
         from ZVCXI_XCD_TD310
        where GCORE = ME->F_GCORE.

*** Load CR - Screen Impact
  select *
         into corresponding fields of table ME->T_CR_SIMPACT
         from ZVCXI_XCD_TD311
        where GCORE eq ME->F_GCORE.

*** Load CR - Function
  select *
         into corresponding fields of table ME->T_CR_FUNCT
         from ZVCXI_XCD_TD320
        where GCORE eq ME->F_GCORE.

*** Load CR - Default Value
  select *
         into corresponding fields of table ME->T_CR_DVALUE
         from ZVCXI_XCD_TD330
        where GCORE eq ME->F_GCORE.

*** Load CR - Default Exit
  select IEXIT
         into table ME->T_CR_DEXIT
         from ZVCXI_XCD_TD340
        where GCORE eq ME->F_GCORE.

*** Load CR - Value
  select *
         into table LT_TD350
         from ZVCXI_XCD_TD350
        where GCORE eq ME->F_GCORE.


  loop at LT_TD350 into LS_TD350.
    append initial line to ME->T_CR_VALUE assigning <S_CR_VALUE>.
    move-corresponding LS_TD350 to <S_CR_VALUE>.
    ME->GENERATE_RANGE_REF( changing CS_CR_VALUE = <S_CR_VALUE> ).
    assign component 'R_RANGE' of structure <S_CR_VALUE> to <R_RANGE>.


    assign <R_RANGE>->* to <I_RANGE>.
    check SY-SUBRC = 0 and
          LS_TD350-VCORE is not initial.
*** Load Range from XML
    call transformation ID
         source xml LS_TD350-VCORE
         result I_RANGE = <I_RANGE>.

  endloop.

*** Load CR - Exit
  select IEXIT
         into table ME->T_CR_EXIT
         from ZVCXI_XCD_TD360
        where GCORE eq ME->F_GCORE.

endmethod.
method SET_CONDDEF.

  data:  LF_GUID type /VCXI/CKX_GUID.

***----------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***----------------------------------------------------------------------------
  if ME->R_CONDDEF is not bound or
     IF_GCODE      ne ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
*** Set new Condition Definition
    move IF_GCODE to LF_GUID.
    ME->R_CONDDEF ?= ZCL_VCXI_XCDC_CONDDEF=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

*** Raise Changed Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.
  endif.


endmethod.
method SET_ID.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCDC_CONDREC=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_CONDREC=>C_ACTVT_EDIT
                                     IR_CONDDEF = ME->R_CONDDEF
                                     IF_ID      = IF_ID ).

*** Continue only if changed
  check IF_ID ne ME->F_ICORE.

  move IF_ID to ME->F_ICORE.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LOCK.

  data:  LF_GCODE  type        ZVCXI_XCD_GCODE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

***   Get Condition Definition GUID
      LF_GCODE = ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Read Lock
        call function 'ENQUEUE_EZVCXI_XCD_C200S'
          exporting
            GCODE          = LF_GCODE
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_XCD_D300E'
          exporting
            GCORE          = ME->F_GCORE
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
        call function 'DEQUEUE_EZVCXI_XCD_D300E'
          exporting
            GCORE = ME->F_GCORE.

***     Remove Read Lock
        call function 'DEQUEUE_EZVCXI_XCD_C200S'
          exporting
            GCODE = LF_GCODE.

      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_OELIU.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Continue only if changed
  check IF_OELIU ne ME->F_OELIU.

  move IF_OELIU to ME->F_OELIU.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SCORE.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Continue only if changed
  check IF_SCORE ne ME->F_SCORE.

  move IF_SCORE to ME->F_SCORE.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_DEXIT.

  field-symbols: <S_CR_DEXIT> type ZVCXI_XCDC_S_CR_DEXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DEXIT assigning <S_CR_DEXIT> with key IEXIT = IS_CR_DEXIT-IEXIT.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_DEXIT to <S_CR_DEXIT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_DVALUE.

  field-symbols: <S_CR_DVALUE> type ZVCXI_XCDC_S_CR_DVALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_DVALUE assigning <S_CR_DVALUE> with key PARID = IS_CR_DVALUE-PARID.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_DVALUE to <S_CR_DVALUE>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_EXIT.

  field-symbols: <S_CR_EXIT> type ZVCXI_XCDC_S_CR_EXIT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_EXIT assigning <S_CR_EXIT> with key IEXIT = IS_CR_EXIT-IEXIT.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_EXIT to <S_CR_EXIT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_FILTER.

  field-symbols: <S_CR_FILTER> type ZVCXI_XCDC_S_CR_FILTER.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FILTER assigning <S_CR_FILTER> with key GCRFI = IS_CR_FILTER-GCRFI.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_FILTER to <S_CR_FILTER>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_FUNCT.

  field-symbols: <S_CR_FUNCT> type ZVCXI_XCDC_S_CR_FUNCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_FUNCT assigning <S_CR_FUNCT> with key IFUNC = IS_CR_FUNCT-IFUNC.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_FUNCT to <S_CR_FUNCT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_SIMPACT.

  field-symbols: <S_CR_SIMPACT> type ZVCXI_XCDC_S_CR_SIMPACT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_SIMPACT assigning <S_CR_SIMPACT> with key ISCGR = IS_CR_SIMPACT-ISCGR.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_SIMPACT to <S_CR_SIMPACT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_CR_VALUE.

  field-symbols: <S_CR_VALUE> type ZVCXI_XCDC_S_CR_VALUE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_CR_VALUE assigning <S_CR_VALUE> with key ICOVA = IS_CR_VALUE-ICOVA.

  if SY-SUBRC eq 0.
    move-corresponding IS_CR_VALUE to <S_CR_VALUE>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
