
class ZCL_VCXI_PCSP_PR_MC_WAX definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MC
  create public .

public section.

  constants C_PARID_WAXFA type /VCXI/VKS_PARID value 'ZVCXI_PC_WAXFA'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods GET_WAXFA
    returning
      value(RF_WAXFA) type ZVCXI_PCS_WAXFA
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WAXFA
    importing
      !IF_WAXFA type ZVCXI_PCS_WAXFA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods CALC_CONSU
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_STATUS
    redefinition .
protected section.
private section.
endclass. "ZCL_VCXI_PCSP_PR_MC_WAX definition
class ZCL_VCXI_PCSP_PR_MC_WAX implementation.
method CALC_CONSU.

  data:  LS_AVGCO         type ZVCXI_XCS_S_AVGCO,
         LS_AVGCP         type ZVCXI_XCS_S_AVGCP,
         LS_CONSU         type ZVCXI_XCSP_S_CONSU,
         LS_MQTYI         type ZVCXI_XCSP_S_MQTYI,
         LS_CALCV         type ZVCXI_XCS_S_CALCV.

  if IS_MQTYI is not initial.
*** Get Area incl. Factor
    LS_MQTYI-MQTYI     = IS_MQTYI-MQTYI * ME->GET_WAXFA( ).
    LS_MQTYI-MQTYI_UOM = IS_MQTYI-MQTYI_UOM.

*** Get Average Consumption Weight
    move ME->GET_AVGCO( ) to LS_AVGCO.
    move ME->GET_AVGCP( ) to LS_AVGCP.

*** Calculate Weight
    if LS_AVGCP-AVGCP is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYI-MQTYI
                                                          IF_CALCV_UOM_1 = LS_MQTYI-MQTYI_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

      LS_CONSU-CONSU   = LS_CALCV-CALCV * LS_AVGCO-AVGCO.
    else.
      LS_CONSU-CONSU   = 0.
    endif.
    LS_CONSU-CONSU_UOM = LS_AVGCO-AVGCO_UOM.
  endif.

*** Set Consumption
  ME->SET_CONSU( IS_CONSU = LS_CONSU ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  F_PARID_CONSU = C_PARID_CONSU_W.
  F_PARID_PRICP = C_PARID_PRICP_W.
  F_PARID_AVGCO = C_PARID_AVGCO_W.
  F_PARID_AVGCP = C_PARID_AVGCP_A.

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_STATUS.

  data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Starch Details
  LS_AVGCO = ME->GET_AVGCO( ).
  LS_AVGCP = ME->GET_AVGCP( ).

*** Check Average Consumption
  if LS_AVGCO-AVGCO is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Average Consumption Unit
  if LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Wax Factor
  if ME->GET_WAXFA( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Joint Details
  LS_AVGCO = ME->GET_AVGCO( ).
  LS_AVGCP = ME->GET_AVGCP( ).

*** Check Average Consumption
  if LS_AVGCO-AVGCO is not initial.
*** Average Consumption is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '101' ).
  else.
*** Average Consumption is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '102' ).
  endif.

*** Check Average Consumption Unit
  if LS_AVGCP-AVGCP is not initial.
*** Average Consumption Unit is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '103' ).
  else.
*** Average Consumption Unit is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '104' ).
  endif.

*** Check Wax Factor
  if ME->GET_WAXFA( ) is not initial.
*** Wax Factor is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '057' ).
  else.
*** Wax Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '058' ).
  endif.

endmethod.
method GET_WAXFA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXFA ).
  move LS_PARAM-ATFLV to RF_WAXFA.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO     to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP     to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_WAXFA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXFA ).

  move IF_WAXFA to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
