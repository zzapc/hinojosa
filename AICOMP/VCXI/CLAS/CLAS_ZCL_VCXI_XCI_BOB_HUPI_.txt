
class ZCL_VCXI_XCI_BOB_HUPI definition
  public
  create public .

public section.

  constants C_ITMTY_HUPI type PL_DETAIL_ITEMTYPE value 'I' ##NO_TEXT.
  constants C_ITMTY_MATERIAL type PL_DETAIL_ITEMTYPE value 'M' ##NO_TEXT.
  constants C_ITMTY_PACKMAT type PL_DETAIL_ITEMTYPE value 'P' ##NO_TEXT.
  data S_HEADER type BAPIHUPIHEADER .
  data T_POSITION type ZVCXI_XCI_TT_BAPIHUPIPOSITION .

  class-methods CHECK_EXISTS
    importing
      !IF_PIKEY type PL_PIID
    exporting
      !ES_BAPIRET2 type BAPIRET2
    returning
      value(RF_EXISTS) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_DETERMINATION
    importing
      !IF_KSCHL type KSCH_PV
      !IF_KOTABNR type KOTABNR
      !IS_KOMGP type KOMGP
      !IF_DATAB type KODATAB default SY-DATUM
      !IF_DATBI type KODATBI default '99991231'
      !IF_PACKNR type PL_PACKNR_CONV
      !IF_PACKNR1 type PL_ALTPACKNR_CONV optional
      !IF_PACKNR2 type PL_ALTPACKNR_CONV optional
      !IF_PACKNR3 type PL_ALTPACKNR_CONV optional
      !IF_PACKNR4 type PL_ALTPACKNR_CONV optional
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods SAVE
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_PIKEY type PL_PIID
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
protected section.

  class-methods CHECK_KOMGP
    importing
      !IS_KOMGP type KOMGP
      !IS_T681S type T681S
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_HUPI definition
class ZCL_VCXI_XCI_BOB_HUPI implementation.
  method CHECK_EXISTS.

    select single PACKNR
           into @data(LF_PACKNR)
           from PACKKP
          where POBJID  eq @IF_PIKEY
           and  PACKTYP eq 'P'.   "Packing Instruction

    if SY-SUBRC eq 0.
      RF_EXISTS = ABAP_TRUE.

***   &1 &2 already exists
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'E'
          CL     = 'VHU01'
          NUMBER = '003'
          PAR1   = 'Packing Instruction'(001)
          PAR2   = conv SYST_MSGV( IF_PIKEY )
        importing
          RETURN = ES_BAPIRET2.
    else.
      RF_EXISTS = ABAP_FALSE.

***   &1 &2 does not exist
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'E'
          CL     = 'VHU01'
          NUMBER = '002'
          PAR1   = 'Packing Instruction'(001)
          PAR2   = conv SYST_MSGV( IF_PIKEY )
        importing
          RETURN = ES_BAPIRET2.
    endif.

  endmethod.
  method CHECK_KOMGP.

    field-symbols: <F_FIELD> type ANY.


*** Fast-Entry Fields of Condition
    select FSETYP, FSELNR, SEFELD
           into table @data(LT_T681E)
           from T681E
          where KVEWE   = @IS_T681S-KVEWE
           and  KOTABNR = @IS_T681S-KOTABNR
          order by FSETYP, FSELNR.

*** Check all Fields
    loop at LT_T681E into data(LS_T681E).
      assign component LS_T681E-SEFELD of structure IS_KOMGP to <F_FIELD>.

      if <F_FIELD> is initial.
***     Fill out all required entry fields
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = '00'
                                              IF_MSGNO = '055' ).
      endif.
    endloop.

  endmethod.
  method CREATE_DETERMINATION.

    data: LS_T685    type T685.


***--------------------------------------------------------------------------------------
*** Get Condition Type
    call function 'SD_COND_T685_SELECT'
      exporting
        CTS_KAPPL     = 'PO'
        CTS_KSCHL     = IF_KSCHL
        CTS_KVEWE     = 'P'
      importing
        CTS_T685      = LS_T685
      exceptions
        ERROR_MESSAGE = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Fast Entry Types of Condition
    select single *
           into @data(LS_T681S)
           from T681S
          where KVEWE   = @LS_T685-KVEWE
           and  KOTABNR = @IF_KOTABNR.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Material is part of Packing Instruction
    "tbd

*** Check Fields relevant for Access Sequence are defined
    CHECK_KOMGP( IS_KOMGP = IS_KOMGP
                 IS_T681S = LS_T681S ).

***--------------------------------------------------------------------------------------
*** Create Condition using Batch Input
    call function 'ZVCXI_XCI_BDC_POF1'
      exporting
        IS_T685     = LS_T685
        IF_KOTABNR  = IF_KOTABNR
        IS_KOMGP    = IS_KOMGP
        IS_KONDP    = value KONDP( PACKNR  = IF_PACKNR
                                   PACKNR1 = IF_PACKNR1
                                   PACKNR2 = IF_PACKNR2
                                   PACKNR3 = IF_PACKNR3
                                   PACKNR4 = IF_PACKNR4 )
        IF_DATAB    = IF_DATAB
        IF_DATBI    = IF_DATBI
        IF_CTU      = 'X'
        IF_MODE     = 'N'
        IF_UPDATE   = 'L'  "Local update task
      importing
        ET_BAPIRET2 = ET_BAPIRET2.

  endmethod.
  method INIT_FROM_DB.

    call function 'BAPI_HU_PI_READ'
      exporting
        PIKEY      = IF_PIKEY
      importing
        HEADER_EXT = ME->S_HEADER
      tables
        POSITIONS  = ME->T_POSITION
        RETURN     = ET_BAPIRET2.

  endmethod.
  method SAVE.

*** Check first Item is the Load Carrier
    if value #( ME->T_POSITION[ 1 ]-DETAIL_ITEMTYPE        optional ) ne C_ITMTY_PACKMAT or
       value #( ME->T_POSITION[ 1 ]-LOAD_CARRIER_INDICATOR optional ) ne ABAP_TRUE.
***   No other item can be inserted before the loading equipment
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'VHU01'
                                            IF_MSGNO = '110' ).
    endif.

*** Create or change Packing Instruction
    if ZCL_VCXI_XCI_BOB_HUPI=>CHECK_EXISTS( IF_PIKEY = ME->S_HEADER-PACKINSTRID ) eq ABAP_FALSE.
      call function 'BAPI_HU_PI_CREATE'
        exporting
          HEADER     = ME->S_HEADER
        importing
          HEADER_EXT = ME->S_HEADER
        tables
          POSITIONS  = ME->T_POSITION
          RETURN     = ET_BAPIRET2.
    else.
      call function 'BAPI_HU_PI_CHANGE'
        exporting
          PIKEY      = ME->S_HEADER-PACKINSTRID
          HEADER     = ME->S_HEADER
        importing
          HEADER_EXT = ME->S_HEADER
        tables
          POSITIONS  = ME->T_POSITION
          RETURN     = ET_BAPIRET2.
    endif.

*** Process Messages
    if CR_MSG is not bound.
      CR_MSG = new #( ).
    endif.
    loop at ET_BAPIRET2 into data(LS_BAPIRET2).
      CR_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

  endmethod.
