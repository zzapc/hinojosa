
class ZCL_VCXI_FFSS_PR_MS_CORE definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  types:
    YT_TC440  type standard table of ZVCXI_FFS_TC440 .

  constants C_IPRVT_MS_CORE type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_MS_CORE' ##NO_TEXT.
  constants C_PARID_CLETA type /VCXI/VKS_PARID value 'ZVCXI_FF_CLETA' ##NO_TEXT.
  constants C_PARID_COMAR type /VCXI/VKS_PARID value 'ZVCXI_FF_COMAR' ##NO_TEXT.
  constants C_PARID_FSHCO type /VCXI/VKS_PARID value 'ZVCXI_FF_FSHCO' ##NO_TEXT.
  constants C_PARID_ICORE type /VCXI/VKS_PARID value 'ZVCXI_FF_ICORE' ##NO_TEXT.
  constants C_PARID_ISHCO type /VCXI/VKS_PARID value 'ZVCXI_FF_ISHCO' ##NO_TEXT.
  constants C_PARID_ROPCO type /VCXI/VKS_PARID value 'ZVCXI_FF_ROPCO' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CLETA
    exporting
      !ES_CLETA type ZVCXI_FFS_S_CLETA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_COMAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COMAR) type ZVCXI_FFS_S_COMAR
    raising
      /VCXI/CX_CKX .
  methods GET_CRCUT
    exporting
      value(EF_CRCUT) type ZVCXI_FFS_CRCUT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_CRDII
    exporting
      value(ES_CRDII) type ZVCXI_FFS_S_CRDII
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_CRDIO
    returning
      value(RS_CRDIO) type ZVCXI_FFS_S_CRDIO
    raising
      /VCXI/CX_CKX .
  methods GET_CRLEN
    exporting
      value(ES_CRLEN) type ZVCXI_FFS_S_CRLEN
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_CRLEN_PRL type ZVCXI_FFS_S_CRLEN
    raising
      /VCXI/CX_CKX .
  methods GET_CRWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      value(ES_CRWGT) type ZVCXI_FFS_S_CRWGT
      !ES_CRWGT_PRL type ZVCXI_FFS_S_CRWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CRWTH
    exporting
      value(ES_CRWTH) type ZVCXI_FFS_S_CRWTH
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_DDVAL_ISHCO
    exporting
      !ET_VALUES type VRM_VALUES
    raising
      /VCXI/CX_CKX .
  methods GET_FSHCO
    exporting
      !EF_FSHCO type ZVCXI_FFS_FSHCO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ICORE
    returning
      value(RF_ICORE) type ZVCXI_FFS_ICORE
    raising
      /VCXI/CX_CKX .
  methods GET_ISHCO
    exporting
      !EF_ISHCO type ZVCXI_FFS_ISHCO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ISHCO_USAGE_LIST
    exporting
      !ET_SHCO type ZVCXI_FFS_TT_SHCO
    raising
      /VCXI/CX_CKX .
  methods GET_ROPCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_ROPCO) type ZVCXI_FFS_ROPCO
    raising
      /VCXI/CX_CKX .
  methods GET_TCORE
    exporting
      !EF_TCORE type ZVCXI_FFS_TCORE
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_WIWID
    returning
      value(RS_WIWID) type ZVCXI_FFS_S_WIWID
    raising
      /VCXI/CX_CKX .
  methods IS_BUTTON_SHCO_AVAILABLE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_FSHCO_AVAILABLE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_CLETA
    importing
      !IS_CLETA type ZVCXI_FFS_S_CLETA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMAR
    importing
      !IS_COMAR type ZVCXI_FFS_S_COMAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRDII
    importing
      !IS_CRDII type ZVCXI_FFS_S_CRDII
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRWGT
    importing
      !IS_CRWGT type ZVCXI_FFS_S_CRWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_ISHCO
    importing
      !IF_TABNAME type TABNAME default 'ZVCXI_FFSS_S_MS_CORE_VIS'
    raising
      /VCXI/CX_CKX .
  methods SET_FSHCO
    importing
      !IF_FSHCO type ZVCXI_FFS_FSHCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ICORE
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_ICORE type ZVCXI_FFS_ICORE
    raising
      /VCXI/CX_CKX .
  methods SET_ISHCO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_ISHCO type ZVCXI_FFS_ISHCO
    raising
      /VCXI/CX_CKX .
  methods SET_ROPCO
    importing
      !IF_ROPCO type ZVCXI_FFS_ROPCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RHNDL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RHNDL) type ref to ZCL_VCXI_FFSS_PR_RHNDL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_ICORE type /VCXI/VKSC_IEVNT value 'INIT_ICORE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_MATNR type /VCXI/VKSC_IEVNT value 'INIT_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_CLETA type /VCXI/VKSC_IEVNT value 'RECALC_CLETA' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_CLETA_CHANGED type /VCXI/VKSC_IEVNT value 'CLETA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COMAR_CHANGED type /VCXI/VKSC_IEVNT value 'COMAR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRDII_CHANGED type /VCXI/VKSC_IEVNT value 'CRDII_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRWGT_CHANGED type /VCXI/VKSC_IEVNT value 'CRWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CRWTH_CHANGED type /VCXI/VKSC_IEVNT value 'CRWTH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FSHCO_CHANGED type /VCXI/VKSC_IEVNT value 'FSHCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ISHCO_CHANGED type /VCXI/VKSC_IEVNT value 'ISHCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ROPCO_CHANGED type /VCXI/VKSC_IEVNT value 'ROPCO_CHANGED' ##NO_TEXT.
  constants C_PARID_CRCUT type /VCXI/VKS_PARID value 'ZVCXI_FF_CRCUT' ##NO_TEXT.
  constants C_PARID_CRDII type /VCXI/VKS_PARID value 'ZVCXI_FF_CRDII' ##NO_TEXT.
  constants C_PARID_CRLEN type /VCXI/VKS_PARID value 'ZVCXI_FF_CRLEN' ##NO_TEXT.
  constants C_PARID_CRWGT type /VCXI/VKS_PARID value 'ZVCXI_FF_CRWGT' ##NO_TEXT.
  constants C_PARID_CRWTH type /VCXI/VKS_PARID value 'ZVCXI_FF_CRWTH' ##NO_TEXT.
  constants C_PARID_TCORE type /VCXI/VKS_PARID value 'ZVCXI_FF_TCORE' ##NO_TEXT.
  data R_CUST_CORE type ref to ZCL_VCXI_FFSS_CUST_CORE .
  data T_TC440 type YT_TC440 .

  methods SET_CRCUT
    importing
      !IF_CRCUT type ZVCXI_FFS_CRCUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRLEN
    importing
      !IS_CRLEN type ZVCXI_FFS_S_CRLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CRWTH
    importing
      !IS_CRWTH type ZVCXI_FFS_S_CRWTH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_CLETA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods SET_TCORE
    importing
      !IF_TCORE type ZVCXI_FFS_TCORE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_ISHCO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_ROPCO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_ICORE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_CLETA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_PR_MS_CORE definition
class ZCL_VCXI_FFSS_PR_MS_CORE implementation.
  method CHECK_CLETA.
*** 0 - Target Core Length is maintained and valid.
*** 1 - Target Core Length is not maintained.
*** 2 - Target Core Length exceed Core Length
*** 3 - Target Core Length (Sum) exceed Core Length

    data: LF_ICORE      type        ZVCXI_FFS_ICORE,
          LF_ISHCO      type        ZVCXI_FFS_ISHCO,
          LF_ICORE_CURR type        ZVCXI_FFS_ICORE,
          LF_ISHCO_CURR type        ZVCXI_FFS_ISHCO.
    data: LS_CLETA         type        ZVCXI_FFS_S_CLETA,
          LS_CLETA_SIBLING type        ZVCXI_FFS_S_CLETA,
          LS_CLETA_SUM     type        ZVCXI_FFS_S_CLETA,
          LS_CRLEN         type        ZVCXI_FFS_S_CRLEN.
    data: LT_GATE           type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

    ME->GET_CLETA( importing ES_CLETA = LS_CLETA ).
    if LS_CLETA is initial.
      move 1 to RF_RETURN.
      return.
    else.
      move 0 to RF_RETURN.
    endif.

*** Get Core Length
    ME->GET_CRLEN( importing ES_CRLEN = LS_CRLEN ).

*** Get current Core ID
    move ME->GET_ICORE( ) to LF_ICORE_CURR.

*** Get current Shared Core ID
    ME->GET_ISHCO( importing EF_ISHCO = LF_ISHCO_CURR ).

*** Get Sibling Cores
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                     IF_INUSE = ABAP_TRUE ).

    move LS_CLETA-CLETA     to LS_CLETA_SUM-CLETA.
    move LS_CLETA-CLETA_UOM to LS_CLETA_SUM-CLETA_UOM.
    loop at LT_GATE into LR_GATE.

      check ME->R_GATE ne LR_GATE.

      clear: LR_PR_MS_CORE, LF_ICORE, LF_ISHCO.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

      LR_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).
      move LR_PR_MS_CORE->GET_ICORE( ) to LF_ICORE.

***   Check same Core id / Shared Core ID
      if LF_ISHCO is initial.
        check LF_ICORE eq LF_ICORE_CURR
           or LF_ICORE eq LF_ISHCO_CURR.
      else.
        check LF_ISHCO eq LF_ICORE_CURR
           or LF_ISHCO eq LF_ISHCO_CURR.
      endif.

***   Get Target Core Length of Sibling
      LR_PR_MS_CORE->GET_CLETA( importing ES_CLETA = LS_CLETA_SIBLING ).

***   Sum all Target Core Length
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CLETA_SUM-CLETA
                                                          IF_CALCV_UOM_1 = LS_CLETA_SUM-CLETA_UOM
                                                          IF_CALCV_2     = LS_CLETA_SIBLING-CLETA
                                                          IF_CALCV_UOM_2 = LS_CLETA_SIBLING-CLETA_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CRLEN-CRLEN_UOM
                                                importing EF_CALCV       = LS_CLETA_SUM-CLETA
                                                          EF_CALCV_UOM   = LS_CLETA_SUM-CLETA_UOM ).

    endloop.

*** Shared cores are not activated
    if LS_CLETA-CLETA eq LS_CLETA_SUM-CLETA.
      if LS_CLETA-CLETA gt LS_CRLEN-CRLEN.
        move 2 to RF_RETURN.
      endif.

*** Shared cores are activated
    else.
      if LS_CLETA_SUM-CLETA gt LS_CRLEN-CRLEN.
        move 3 to RF_RETURN.
      endif.

    endif.

  endmethod.
  method CHECK_ISHCO.
*** 0 - Shared Core ID is maintained.
*** 1 - Shared Core ID is not maintained.
*** 2 - Shared Core ID is mandatory.

    data: LF_ISHCO type ZVCXI_FFS_ISHCO,
          LF_FSHCO type ZVCXI_FFS_FSHCO.

    move 1 to RF_RETURN.

    ME->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).
    if LF_ISHCO is not initial.
      move 0 to RF_RETURN.
      return.
    endif.

    ME->GET_FSHCO( importing EF_FSHCO = LF_FSHCO ).
    if LF_FSHCO is not initial.
      move 2 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_ROPCO.
*** 0 - Rolls/Core is maintained and valid.
*** 1 - Rolls/Core is not maintained.

    data: LF_ROPCO  type ZVCXI_FFS_ROPCO.

    ME->GET_ROPCO( receiving RF_ROPCO = LF_ROPCO ).
    if LF_ROPCO is initial.
      move 1 to RF_RETURN.
      return.
    else.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  endmethod.
  method GET_CLETA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CLETA ).
    move LS_PARAM-ATFLV to ES_CLETA-CLETA.
    move LS_PARAM-UNIT  to ES_CLETA-CLETA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COMAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMAR ).
    move LS_PARAM-ATFLV to RS_COMAR-COMAR.
    move LS_PARAM-UNIT  to RS_COMAR-COMAR_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRCUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRCUT ).
    move LS_PARAM-ATWRT to EF_CRCUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRDII.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRDII ).
    move LS_PARAM-ATFLV to ES_CRDII-CRDII.
    move LS_PARAM-UNIT  to ES_CRDII-CRDII_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CRDIO.

    data: LS_CRDII type ZVCXI_FFS_S_CRDII,
          LS_CRWTH type ZVCXI_FFS_S_CRWTH.

*** Get Core Inner Diameter
    ME->GET_CRDII( importing ES_CRDII = LS_CRDII ).

*** Get Core Wall Thickness
    ME->GET_CRWTH( importing ES_CRWTH = LS_CRWTH ).

*** Core Wall Thickness  * 2
    LS_CRWTH-CRWTH = LS_CRWTH-CRWTH * 2.

*** Inner Core Diameter + 2 * Core Wall Thickness
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CRDII-CRDII
                                                        IF_CALCV_UOM_1 = LS_CRDII-CRDII_UOM
                                                        IF_CALCV_2     = LS_CRWTH-CRWTH
                                                        IF_CALCV_UOM_2 = LS_CRWTH-CRWTH_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                              importing EF_CALCV       = RS_CRDIO-CRDIO
                                                        EF_CALCV_UOM   = RS_CRDIO-CRDIO_UOM ).

  endmethod.
  method GET_CRLEN.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRLEN ).
    move LS_PARAM-ATFLV to ES_CRLEN-CRLEN.
    move LS_PARAM-UNIT  to ES_CRLEN-CRLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Calculate Core Length per Roll
    if ES_CRLEN_PRL is requested.
***   Use Target Core Length for one Roll
      data(LS_CLETA) = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = ME->GET_WIWID( )
                                                            IS_COMAR = ME->GET_COMAR( )
                                                            IF_ROPCO = 1 ).
      ES_CRLEN_PRL = value #( CRLEN     = LS_CLETA-CLETA
                              CRLEN_UOM = LS_CLETA-CLETA_UOM ).
    endif.

  endmethod.
  method GET_CRWGT.

    data: LF_CALCV type F.
    data: LS_CRLEN     type ZVCXI_PXS_S_CRLEN,
          LS_CRLEN_PRL type ZVCXI_PXS_S_CRLEN.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWGT ).
    move LS_PARAM-ATFLV to ES_CRWGT-CRWGT.
    move LS_PARAM-UNIT  to ES_CRWGT-CRWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.


***--------------------------------------------------------------------------------------
    if ES_CRWGT_PRL is requested.
***   Get Core Length and Core Length per Roll
      ME->GET_CRLEN( importing ES_CRLEN     = LS_CRLEN
                               ES_CRLEN_PRL = LS_CRLEN_PRL ).

      ME->GET_CRCUT( importing EF_CRCUT = data(LF_CRCUT) ).

***   Calculate propotional Factor of Roll on Core
      if LF_CRCUT eq ABAP_TRUE and
         LS_CRLEN-CRLEN ne 0.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CRLEN_PRL-CRLEN
                                                            IF_CALCV_UOM_1 = LS_CRLEN_PRL-CRLEN_UOM
                                                            IF_CALCV_2     = LS_CRLEN-CRLEN
                                                            IF_CALCV_UOM_2 = LS_CRLEN-CRLEN_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_CALCV ).
      else.
        LF_CALCV = 1.
      endif.

***   Calculate Core Weight per Roll
      try.
          ES_CRWGT_PRL-CRWGT     = ES_CRWGT-CRWGT * LF_CALCV.
          ES_CRWGT_PRL-CRWGT_UOM = ES_CRWGT-CRWGT_UOM.
        catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
      endtry.
    endif.

  endmethod.
  method GET_CRWTH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWTH ).
    move LS_PARAM-ATFLV to ES_CRWTH-CRWTH.
    move LS_PARAM-UNIT  to ES_CRWTH-CRWTH_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_DDVAL_ISHCO.

    data: LF_ISHCO type ZVCXI_FFS_ISHCO,
          LF_CRCUT type ZVCXI_FFS_CRCUT,
          LF_MAKTX type MAKTX.
    data: LT_GATE_CORE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_CORE  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

*** Get Sibling Cores
    LT_GATE_CORE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                          IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_CORE into LR_GATE_CORE.
      check LR_GATE_CORE ne ME->R_GATE.

      clear: LR_PR_MS_CORE, LF_MAKTX, LF_ISHCO.

      try.
          move LR_GATE_CORE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

      check LR_PR_MS_CORE->GET_MATNR( ) is not initial.

***   Check Cutting Allowed
      LR_PR_MS_CORE->GET_CRCUT( importing EF_CRCUT = LF_CRCUT ).
      check LF_CRCUT eq ABAP_TRUE.

      LR_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).
      check LF_ISHCO is initial.

***   Get Description through related Roll Handling
      data(LR_PR_RHNDL) = LR_PR_MS_CORE->GET_PRVDR_RHNDL( ).
      if LR_PR_RHNDL is bound.
        data(LR_WIDIM) = LR_PR_RHNDL->GET_PRVDR_WIDIM( ).
        if LR_WIDIM is bound.
          LF_MAKTX = LR_WIDIM->GET_MAKTX( ).
        endif.
      endif.
      check LF_MAKTX is not initial.

      append value #( KEY =  LR_PR_MS_CORE->GET_ICORE( )
                      TEXT = LF_MAKTX
                    ) to ET_VALUES.
    endloop.

  endmethod.
  method GET_FSHCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSHCO ).
    move LS_PARAM-ATWRT to EF_FSHCO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ICORE.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICORE ).
    move LS_PARAM-ATWRT to RF_ICORE.

  endmethod.
  method GET_ISHCO.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISHCO ).
    move LS_PARAM-ATWRT to EF_ISHCO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ISHCO_USAGE_LIST.

    data: LF_ICORE      type        ZVCXI_FFS_ICORE,
          LF_ISHCO      type        ZVCXI_FFS_ISHCO,
          LF_ICORE_CURR type        ZVCXI_FFS_ICORE,
          LF_ISHCO_CURR type        ZVCXI_FFS_ISHCO.
    data: LT_GATE_CORE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_CORE  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.
    field-symbols: <S_SHCO> type        ZVCXI_FFS_S_SHCO.

*** Get current Core ID / Shared Core ID
    move ME->GET_ICORE( ) to LF_ICORE_CURR.
    ME->GET_ISHCO( importing EF_ISHCO = LF_ISHCO_CURR ).

*** Add all Shared Cores
    LT_GATE_CORE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                          IF_INUSE = ABAP_TRUE ).

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CORE ).

    loop at LT_GATE_CORE into LR_GATE_CORE.

      clear: LR_PR_MS_CORE, LF_ICORE, LF_ISHCO.

      try.
          move LR_GATE_CORE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

      LR_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).
      move LR_PR_MS_CORE->GET_ICORE( ) to LF_ICORE.

***   Check same Core id / Shared Core ID
      if LF_ISHCO is initial.
        check LF_ICORE eq LF_ICORE_CURR
           or LF_ICORE eq LF_ISHCO_CURR.
      else.
        check LF_ISHCO eq LF_ICORE_CURR
           or LF_ISHCO eq LF_ISHCO_CURR.
      endif.

***   Insert Shared Core  data
      append initial line to ET_SHCO assigning <S_SHCO>.
      LR_PR_MS_CORE->GET_CLETA( importing ES_CLETA = <S_SHCO>-S_CLETA ).
      LR_PR_MS_CORE->GET_ROPCO( receiving RF_ROPCO = <S_SHCO>-ROPCO ).

      LR_PR_MS_CORE->GET_COMAR( receiving RS_COMAR = <S_SHCO>-S_COMAR ).
      move LR_PR_MS_CORE->GET_WIWID( ) to <S_SHCO>-S_WIWID.
      move LR_PR_MS_CORE->GET_ICORE( ) to <S_SHCO>-ICORE.

***   Add Shared Core ID
      move LF_ISHCO to <S_SHCO>-ISHCO.

***   Get Description through related Roll Handling
      data(LR_PR_RHNDL) = LR_PR_MS_CORE->GET_PRVDR_RHNDL( importing ER_GATE = <S_SHCO>-R_GATE ).
      if LR_PR_RHNDL is bound.
        data(LR_WIDIM) = LR_PR_RHNDL->GET_PRVDR_WIDIM( ).
        if LR_WIDIM is bound.
          <S_SHCO>-MAKTX = LR_WIDIM->GET_MAKTX( ).
        endif.
      endif.
    endloop.

  endmethod.
  method GET_PRVDR_RHNDL.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


    LR_GATE = cond #( when IR_GATE is supplied then IR_GATE
                                               else ME->R_GATE ).

*** Get Provider
    data(LT_GATE) = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL
                                        IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_PR_RHNDL.
    endtry.

  endmethod.
  method GET_ROPCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROPCO ).
    move LS_PARAM-ATFLV to RF_ROPCO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Target Core Length
    case ME->CHECK_CLETA( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1 or 2 or 3.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Shared Core ID
    case ME->CHECK_ISHCO( ).
      when 0 or 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 2.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Rolls/Core
    case ME->CHECK_ROPCO( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Target Core Length
    case ME->CHECK_CLETA( ).
      when 0.

***     Target Core Length is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '162' ).
      when 1.

***     Target Core Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '163' ).
      when 2.

***     Target Core Length exceed Core Length
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '164' ).

      when 3.

***     Target Core Length (Sum) exceed Core Length
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '165' ).

    endcase.

***--------------------------------------------------------------------------------------
*** Shared Core ID
    case ME->CHECK_ISHCO( ).
      when 0.

***     Shared Core ID is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '166' ).
      when 2.

***     Shared Core ID is mandatory.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '167' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Rolls/Core
    case ME->CHECK_ROPCO( ).
      when 0.

***     Rolls/Core is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '168' ).
      when 1.

***     Rolls/Core is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '169' ).

    endcase.

  endmethod.
  method GET_TCORE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TCORE ).
    move LS_PARAM-ATWRT to EF_TCORE.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    check EF_TCORE is not initial.

*** Get Description
    if EF_DESCR is requested.
      if ME->R_CUST_CORE is bound.
        move ME->R_CUST_CORE->GET_TCORE_DESCR( ) to EF_DESCR.
      else.
        clear EF_DESCR.
      endif.
    endif.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method GET_WIWID.

    data(LR_PR_RHNDL) = ME->GET_PRVDR_RHNDL( ).
    check LR_PR_RHNDL is bound.

    RS_WIWID = LR_PR_RHNDL->GET_WIWID( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Set Default
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Set Initial Core ID
      when C_IEVNT_I_INIT_ICORE.
        ME->HANDLE_INIT_ICORE( ).

***   Calculate Target Core Length
      when C_IEVNT_I_RECALC_CLETA.
        ME->HANDLE_RECALC_CLETA( ).

***   Set Core Material
      when C_IEVNT_I_INIT_MATNR.
        ME->HANDLE_INIT_MATNR( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS.

***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_CORE          is bound    and
       ME->R_CUST_CORE->F_MATNR eq LF_MATNR and
       ME->R_CUST_CORE->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.
    clear:  ME->R_CUST_MATNR, ME->R_CUST_CORE.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_CORE = ZCL_VCXI_FFSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = LF_WERKS
                                                                        IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_CORE to ME->R_CUST_MATNR.

    if ME->R_CUST_CORE is bound.

***   Set Core Inner Diameter
      ME->SET_CRDII( IS_CRDII = ME->R_CUST_CORE->S_CRDII ).

***   Set Core Weight
      ME->SET_CRWGT( IS_CRWGT = ME->R_CUST_CORE->S_CRWGT ).

***   Set Core Length
      ME->SET_CRLEN( IS_CRLEN = ME->R_CUST_CORE->S_CRLEN ).

***   Set Core Wall Thickness
      ME->SET_CRWTH( IS_CRWTH = ME->R_CUST_CORE->S_CRWTH ).

***   Set Core Cutting Allowed
      ME->SET_CRCUT( IF_CRCUT = ME->R_CUST_CORE->F_CRCUT ).

***   Set Core Type
      ME->SET_TCORE( IF_TCORE = ME->R_CUST_CORE->F_TCORE ).
    endif.

  endmethod.
  method HANDLE_INIT_ICORE.

    data: LF_ICORE type ZVCXI_FFS_ICORE.

    check ME->GET_ICORE( ) is initial.

    try.
        LF_ICORE = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
      catch CX_UUID_ERROR.                              "#EC NO_HANDLER
    endtry.

    ME->SET_ICORE( IF_ICORE = LF_ICORE ).

  endmethod.
  method HANDLE_INIT_MATNR.

    data: LF_MATNR type MATNR,
          LF_SETBY type /VCXI/VKSR_SETBY,
          LF_ISHCO type ZVCXI_FFS_ISHCO,
          LF_CRCUT type ZVCXI_FFS_CRCUT.
    data: LT_GATE_CORE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_CORE  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


    ME->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).
    check LF_ISHCO is not initial.  "otherwise handled by ZVCXI_FFSS_DVC_DEXIT_RHNDL_001


*** Material Number not set by User
    LF_MATNR = ME->GET_MATNR( importing EF_SETBY = LF_SETBY ).
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.

*** Get Core Material from Shared Core
    LT_GATE_CORE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                          IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_CORE into LR_GATE_CORE.
      check LR_GATE_CORE ne ME->R_GATE.

      clear: LR_PR_MS_CORE.

      try.
          move LR_GATE_CORE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound and
            LR_PR_MS_CORE->GET_ICORE( ) eq LF_ISHCO.

***   Check if Core Cutting is still allowed
      LR_PR_MS_CORE->GET_CRCUT( importing EF_CRCUT = LF_CRCUT ).
      if LF_CRCUT eq ABAP_TRUE.
        move LR_PR_MS_CORE->GET_MATNR( ) to LF_MATNR.
      else.
***     Remove Joint Core
        ME->SET_ISHCO( IF_ISHCO = SPACE ).
        clear: LF_MATNR, LF_SETBY.
      endif.
      exit.
    endloop.

*** Set Core Material
    ME->SET_MATNR( exporting  IF_MATNR = LF_MATNR
                              IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_RECALC_CLETA.

    data: LF_ROPCO type  ZVCXI_FFS_ROPCO.
    data: LS_COMAR type  ZVCXI_FFS_S_COMAR,
          LS_WIWID type  ZVCXI_FFS_S_WIWID,
          LS_CLETA type  ZVCXI_FFS_S_CLETA.

*** Get Calculation Basis
    LS_WIWID = ME->GET_WIWID( ).
    LS_COMAR = ME->GET_COMAR( ).
    LF_ROPCO = ME->GET_ROPCO( ).

*** Calculate Target Core Length
    if LS_WIWID is not initial.
      LS_CLETA = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = LS_WIWID
                                                      IS_COMAR = LS_COMAR
                                                      IF_ROPCO = LF_ROPCO ).
    endif.

*** Set Target Core Length
    ME->SET_CLETA( IS_CLETA = LS_CLETA ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_BUTTON_SHCO_AVAILABLE.

    data: LT_SHCO type ZVCXI_FFS_TT_SHCO.

    move ABAP_FALSE to RF_RETURN.

    ME->GET_ISHCO_USAGE_LIST( importing ET_SHCO = LT_SHCO ).

    if LINES( LT_SHCO ) gt 1.
      move ABAP_TRUE to RF_RETURN.
    endif.

  endmethod.
  method IS_FSHCO_AVAILABLE.

    data: LF_ICORE type        ZVCXI_FFS_ICORE,
          LF_ISHCO type        ZVCXI_FFS_ISHCO,
          LF_CRCUT type        ZVCXI_FFS_CRCUT.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

    move ABAP_FALSE to RF_RETURN.

*** Get Sibling Cores
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                     IF_INUSE = ABAP_TRUE ).

    if LINES( LT_GATE ) eq 1.
      return.
    endif.

    move ABAP_TRUE to RF_RETURN.

*** Get current Core ID
    move ME->GET_ICORE( ) to LF_ICORE.

    loop at LT_GATE into LR_GATE.
      check LR_GATE ne ME->R_GATE.

      clear: LR_PR_MS_CORE.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

***   Get Shared Core ID of Siblings
      LR_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = LF_ISHCO ).

***   Check if current Core is used in another output
      check LF_ICORE eq LF_ISHCO.

      move ABAP_FALSE to RF_RETURN.

      exit.
    endloop.

  endmethod.
  method SET_CLETA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CLETA ).

    move IS_CLETA-CLETA     to LS_PARAM-ATFLV.
    move IS_CLETA-CLETA_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CLETA_CHANGED ).
    endif.

  endmethod.
  method SET_COMAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMAR ).

    move IS_COMAR-COMAR     to LS_PARAM-ATFLV.
    move IS_COMAR-COMAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COMAR_CHANGED ).
    endif.

  endmethod.
  method SET_CRCUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRCUT ).

    move IF_CRCUT     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_CRDII.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRDII ).

    move IS_CRDII-CRDII     to LS_PARAM-ATFLV.
    move IS_CRDII-CRDII_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRDII_CHANGED ).
    endif.

  endmethod.
  method SET_CRLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRLEN ).

    move IS_CRLEN-CRLEN     to LS_PARAM-ATFLV.
    move IS_CRLEN-CRLEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_CRWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWGT ).

    move IS_CRWGT-CRWGT     to LS_PARAM-ATFLV.
    move IS_CRWGT-CRWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRWGT_CHANGED ).
    endif.

  endmethod.
  method SET_CRWTH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRWTH ).

    move IS_CRWTH-CRWTH     to LS_PARAM-ATFLV.
    move IS_CRWTH-CRWTH_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRWTH_CHANGED ).
    endif.

  endmethod.
  method SET_DDVAL_ISHCO.

    data: LF_ID     type VRM_ID.
    data: LT_VALUES type VRM_VALUES.

    ME->GET_DDVAL_ISHCO( importing ET_VALUES = LT_VALUES ).

*** Set to DropDown List
    concatenate IF_TABNAME '-ISHCO' into LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUES.

  endmethod.
  method SET_FSHCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSHCO ).

    move IF_FSHCO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FSHCO_CHANGED ).

    endif.

  endmethod.
  method SET_ICORE.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICORE ).

    move IF_ICORE to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_ISHCO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISHCO ).

    move IF_ISHCO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISHCO_CHANGED ).

    endif.

  endmethod.
  method SET_ROPCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROPCO ).

    if IF_ROPCO is not initial.
      move IF_ROPCO to LS_PARAM-ATFLV.
      move IF_SETBY to LS_PARAM-SETBY.
    else.
***   Reset SetBy if initial
      clear: LS_PARAM-ATFLV,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ROPCO_CHANGED ).
    endif.

  endmethod.
  method SET_TCORE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TCORE ).

    move IF_TCORE     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
