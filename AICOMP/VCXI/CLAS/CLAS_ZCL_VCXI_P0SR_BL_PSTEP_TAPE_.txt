
class ZCL_VCXI_P0SR_BL_PSTEP_TAPE definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P0SR_PCDIR .

  constants C_IPSTP_TAPE type /VCXI/VSMC_IPSTP value 'P0_PS_TAPE'. "#EC NOTEXT
  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_TAPE
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  types:
    begin of YS_TAPE_INFO_INT,
                  TTAPE          type ZVCXI_P0S_TTAPE,
                  S_MIN_DISTANCE type ZVCXI_P0SS_S_TAPOS,
                  NO_TAPES       type I,
                  end of YS_TAPE_INFO_INT .
  types:
    YT_TAPE_INFO_INT type standard table of YS_TAPE_INFO_INT with default key .

  constants C_IAATY_NOTAP type /VCXI/VSMC_IAATY value 'P0_AA_NOTAP'. "#EC NOTEXT
  data T_MS_TAPE type ZVCXI_P0SR_TT_MS_TAPE .
  data T_TAPE_INFO_INT type YT_TAPE_INFO_INT .
  constants C_ILTYP_NO_TAPES_SS type /VCXI/VSMC_ILTYP value 'P0_LT_DP_TAPE_NUM_'. "#EC NOTEXT
  constants C_ILTYP_MIN_DIST_TAPES_SS type /VCXI/VSMC_ILTYP value 'P0_LT_DP_TAPE_MIN_DIST_'. "#EC NOTEXT

  methods ADD_SPVRE_MC_TAPE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_TAPE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PCDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_TAPE
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_TAPE definition
class ZCL_VCXI_P0SR_BL_PSTEP_TAPE implementation.
method ADD_ASPECTS_TO_RTE_PSTEP.

  data:          LF_NOTAP      type        I.
  data:          LS_RTE_SAREC  type        /VCXI/VSMR_S_RTE_SAREC.
  field-symbols: <S_ARECN>     type        /VCXI/VSMR_S_RTE_RANGE_ARECN.

***----------------------------------------------------------------------------
*** Get Super
  SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).


***----------------------------------------------------------------------------
*** Aspect - P0_AA_NOTAP
  try.
      clear LS_RTE_SAREC.
      LF_NOTAP = lines( ME->T_MS_TAPE ).
      move 1                                            to LS_RTE_SAREC-MAXSEL.
      move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
      append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
      move 'I'                    to <S_ARECN>-SIGN.
      move 'LE'                   to <S_ARECN>-OPTION.
      move LF_NOTAP               to <S_ARECN>-LOW.

      IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = C_IAATY_NOTAP
                                   II_ARECN  = LS_RTE_SAREC-I_ARECN
                                   IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                   IF_ASORT  = LS_RTE_SAREC-ASORT ).

    catch /VCXI/CX_CKX.
  endtry.

endmethod.
method ADD_LIMITS_TO_RTE_PSTEP.

  data:          LF_LDUOM         type        /VCXI/VSMC_LDUOM,
                 LF_LDVAL         type        /VCXI/VSMR_LDVAL,
                 LF_ID            type        /VCXI/CKX_ID.
  data:          LS_MS_TAPE       type        ZVCXI_P0SR_S_MS_TAPE,
                 LS_TAPE_INFO_INT type        YS_TAPE_INFO_INT.
  data:          LI_LVVAL         type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE         type        /VCXI/CKX_TT_OBJECT.
  data:          LR_LTYPE         type ref to /VCXI/CL_VSMC_LTYPE,
                 LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_LVVAL>        type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    free: LF_LDVAL,
          LF_LDUOM,
          LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Number of Tapes
      when 'P0_LT_DP_TAPE_NUM'.
        move LINES( ME->T_MS_TAPE )       to LF_LDVAL.
        move 'ST'                         to LF_LDUOM.

***   Tape Type (non-closing)
      when 'P0_LT_VP_TAPE_TYPE'.
        loop at ME->T_MS_TAPE into LS_MS_TAPE.
          append initial line to LI_LVVAL assigning <S_LVVAL>.
          move 'I'                        to <S_LVVAL>-SIGN.
          move 'EQ'                       to <S_LVVAL>-OPTION.
          move LS_MS_TAPE-TTAPE           to <S_LVVAL>-LOW.
        endloop.

      when others.
        move LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.

***     Number of Tapes of a specific Type
        replace C_ILTYP_NO_TAPES_SS in LF_ID with SPACE.
        if SY-SUBRC eq 0.
          condense LF_ID.
          read table ME->T_TAPE_INFO_INT into LS_TAPE_INFO_INT
                                         with key TTAPE = LF_ID.
          if SY-SUBRC eq 0.
            move LS_TAPE_INFO_INT-NO_TAPES    to LF_LDVAL.
            move 'ST'                         to LF_LDUOM.
          else.
            move 0                            to LF_LDVAL.
            move 'ST'                         to LF_LDUOM.
          endif.
        else.

***       Min. Distance between Tapes of a specific Type
          replace C_ILTYP_MIN_DIST_TAPES_SS in LF_ID with SPACE.
          if SY-SUBRC eq 0.
            condense LF_ID.
            read table ME->T_TAPE_INFO_INT into LS_TAPE_INFO_INT
                                           with key TTAPE = LF_ID.
            if SY-SUBRC eq 0 and
               LS_TAPE_INFO_INT-NO_TAPES gt 1.
              move LS_TAPE_INFO_INT-S_MIN_DISTANCE-TAPOS     to LF_LDVAL.
              move LS_TAPE_INFO_INT-S_MIN_DISTANCE-TAPOS_UOM to LF_LDUOM.
            else.
***           Not applicable Limit
              IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
              continue.
            endif.
          endif.
        endif.
    endcase.


***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method ADD_SPVRE_MC_TAPE.

  data:  LS_MS_TAPE          type        ZVCXI_P0SR_S_MS_TAPE,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MC_TAPE    type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TAPE'
                                      IR_SPVCE_PARENT = IR_SPVRE_ADDON->R_SPVCE ).

  loop at ME->T_MS_TAPE into LS_MS_TAPE.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MC_TAPE
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ADDON.
    append LR_SPVRE_MC_TAPE to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MC_TAPE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    clear LS_LEOKY.
    move LS_MS_TAPE-MATNR                             to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
    LR_SPVRE_MC_TAPE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Tape Type
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_TTAPE     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_TAPE-TTAPE                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Tape Length
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_TAPLE     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_TAPE-TAPLE                            to LS_PARAM-ATFLV.
    move LS_MS_TAPE-TAPLE_UOM                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_PURCH     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_TAPE-PURCH                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Vendor
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_LIFNR     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_TAPE-LIFNR                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_PRICE     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_TAPE-PRICE                            to LS_PARAM-ATFLV.
    move LS_MS_TAPE-PRICE_CURR                       to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price Per
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_PRICP_L   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_TAPE-PRICP                            to LS_PARAM-ATFLV.
    move LS_MS_TAPE-PRICP_UOM                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_TAPE type ref to ZCL_VCXI_P0SR_BL_PSTEP_TAPE.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_TAPE.

***----------------------------------------------------------------------------
*** PC Dimensions
  if ME->S_PCDIM_OUT eq LR_BL_PSTEP_TAPE->S_PCDIM_OUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Tapes
  if ME->T_MS_TAPE       eq LR_BL_PSTEP_TAPE->T_MS_TAPE and
     ME->T_TAPE_INFO_INT eq LR_BL_PSTEP_TAPE->T_TAPE_INFO_INT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_TAPE type ref to ZCL_VCXI_P0SR_BL_PSTEP_TAPE.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_TAPE.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->S_PCDIM_OUT   to LR_BL_PSTEP_TAPE->S_PCDIM_OUT.

***----------------------------------------------------------------------------
*** Tapes
  move ME->T_MS_TAPE       to LR_BL_PSTEP_TAPE->T_MS_TAPE.
  move ME->T_TAPE_INFO_INT to LR_BL_PSTEP_TAPE->T_TAPE_INFO_INT.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML       = LF_XML

              S_PCDIM_OUT     = ME->S_PCDIM_OUT

              T_MS_TAPE       = ME->T_MS_TAPE
              T_TAPE_INFO_INT = ME->T_TAPE_INFO_INT.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'P0_AT_TAPE'.
      ME->FILL_SPVRE_ADDON_TAPE( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                           IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                 changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_TAPE.

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Tape
  ME->ADD_SPVRE_MC_TAPE( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                   IR_SPVRE_ADDON = IR_SPVRE_ADDON
                         changing  CT_SPVRE       = CT_SPVRE ).

endmethod.
method GET_ARBPL_INFO.

*** Can't be done by itself. Use Info of other Production Step

endmethod.
method GET_SPVRE_MF.

*** No Material Flow In

endmethod.
method INIT_BY_SPEC.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get PC Dimension
  ME->INIT_BY_SPEC_PCDIM( IT_PRVDR = IT_PRVDR ).

*** Get Material Specification Tape
  ME->INIT_BY_SPEC_TAPE( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_PCDIM.

  data:  LS_SHTWI          type        ZVCXI_P0SS_S_SHTWI,
         LS_SHTLE          type        ZVCXI_P0SS_S_SHTLE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SCSTR       type ref to ZCL_VCXI_P0SS_PR_SCSTR.

***------------------------------------------------------------------------------------------------
*** Get Score String Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR.
        if LR_PR_SCSTR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SCSTR is bound.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimensions
  move LR_PR_SCSTR->GET_SHTWI( ) to LS_SHTWI.
  move LS_SHTWI-SHTWI            to ME->S_PCDIM_OUT-PCWID.
  move LS_SHTWI-SHTWI_UOM        to ME->S_PCDIM_OUT-PCWID_UOM.
  move LR_PR_SCSTR->GET_SHTLE( ) to LS_SHTLE.
  move LS_SHTLE-SHTLE            to ME->S_PCDIM_OUT-PCLEN.
  move LS_SHTLE-SHTLE_UOM        to ME->S_PCDIM_OUT-PCLEN_UOM.
  move LR_PR_SCSTR->GET_SHTDI( ) to ME->S_PCDIM_OUT-PCDIR.

*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCTYP = ME->S_PCDIM_OUT-PCTYP
                                                      EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move ME->S_PCDIM_OUT-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

endmethod.
method INIT_BY_SPEC_TAPE.

  data:          LF_SSTRC              type        ZVCXI_P0SS_SSTRC,
                 LF_SCSTR              type        ZVCXI_P0SS_SCSTR,
                 LF_INDEX              type        I.
  data:          LS_TAPOS              type        ZVCXI_P0SS_S_TAPOS,
                 LS_TAPOS_MIN          type        ZVCXI_P0SS_S_TAPOS,
                 LS_SCSTR_TAPOS        type        ZVCXI_P0SS_S_SCSTR_TAPOS,
                 LS_MS_TAPE            type        ZVCXI_P0SR_S_MS_TAPE.
  data:          LT_GATE_TAPE          type        /VCXI/VKSR_TT_GATE,
                 LT_MS_TAPE            type        ZVCXI_P0SR_TT_MS_TAPE,
                 LT_SCSTR_TAPOS        type        ZVCXI_P0SS_TT_SCSTR_TAPOS.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SCSTR_MGR       type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR,
                 LR_PR_SCSTR           type ref to ZCL_VCXI_P0SS_PR_SCSTR,
                 LR_PR_MS_TAPE         type ref to ZCL_VCXI_P0SS_PR_MS_TAPE.
  field-symbols: <S_MS_TAPE>           type        ZVCXI_P0SR_S_MS_TAPE,
                 <S_TAPE_INFO_INT>     type        YS_TAPE_INFO_INT.

***----------------------------------------------------------------------------
*** Get Score String Calculation
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR_MGR.
        check LR_PR_SCSTR_MGR is bound.

        LF_SSTRC = LR_PR_SCSTR_MGR->F_SSTRC.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***----------------------------------------------------------------------------
*** Get Tape Position of Score String
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR.
        check LR_PR_SCSTR is bound.

        LF_SCSTR = LR_PR_SCSTR->GET_SCSTR( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.


***----------------------------------------------------------------------------
*** Get Tapes out of Providers
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_TAPE.
        check LR_PR_MS_TAPE is bound.

***     Save Tape Gate
        append LR_GATE to LT_GATE_TAPE.

        append initial line to LT_MS_TAPE assigning <S_MS_TAPE>.

        move LR_PR_MS_TAPE->GET_MATNR( ) to <S_MS_TAPE>-MATNR.
        move LR_PR_MS_TAPE->GET_TTAPE( ) to <S_MS_TAPE>-TTAPE.

        move LR_PR_MS_TAPE->GET_TAPOS( ) to LS_TAPOS.
        move-corresponding LS_TAPOS to <S_MS_TAPE>.

        move ME->S_PCDIM_OUT-PCLEN     to <S_MS_TAPE>-TAPLE.
        move ME->S_PCDIM_OUT-PCLEN_UOM to <S_MS_TAPE>-TAPLE_UOM.

        move LR_PR_MS_TAPE->GET_TEXT( ) to <S_MS_TAPE>-TEXT.

***     Purchasing Info
        move LR_PR_MS_TAPE->GET_PURCH( ) to <S_MS_TAPE>-PURCH.
        move LR_PR_MS_TAPE->GET_LIFNR( ) to <S_MS_TAPE>-LIFNR.
        move LR_PR_MS_TAPE->GET_PRICE( ) to <S_MS_TAPE>-S_PRICE.
        move LR_PR_MS_TAPE->GET_PRICP( ) to <S_MS_TAPE>-S_PRICP.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***----------------------------------------------------------------------------
*** Get Tapes of Score String
  LT_SCSTR_TAPOS = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_SCSTR_TAPOS( IF_SCSTR       = LF_SCSTR
                                                              IF_SSTRC       = LF_SSTRC
                                                              IT_GATE_TAPE   = LT_GATE_TAPE
                                                              IF_UOM         = ME->S_PCDIM_OUT-PCLEN_UOM ).

***----------------------------------------------------------------------------
*** Get Tapes
  loop at LT_SCSTR_TAPOS into LS_SCSTR_TAPOS.

*** Get General Info's
    append initial line to ME->T_MS_TAPE assigning <S_MS_TAPE>.
    move LS_SCSTR_TAPOS-TTAPE         to <S_MS_TAPE>-TTAPE.
    move-corresponding LS_SCSTR_TAPOS to <S_MS_TAPE>.

    move ME->S_PCDIM_OUT-PCLEN     to <S_MS_TAPE>-TAPLE.
    move ME->S_PCDIM_OUT-PCLEN_UOM to <S_MS_TAPE>-TAPLE_UOM.

*** Collect internal Info's
    read table ME->T_TAPE_INFO_INT with key TTAPE = <S_MS_TAPE>-TTAPE
    assigning <S_TAPE_INFO_INT>.
    if SY-SUBRC = 0.
      add 1 to <S_TAPE_INFO_INT>-NO_TAPES.
    else.
      append initial line to ME->T_TAPE_INFO_INT assigning <S_TAPE_INFO_INT>.
      move <S_MS_TAPE>-TTAPE to <S_TAPE_INFO_INT>-TTAPE.
      add 1 to <S_TAPE_INFO_INT>-NO_TAPES.
      move <S_MS_TAPE>-TAPOS_UOM to <S_TAPE_INFO_INT>-S_MIN_DISTANCE-TAPOS_UOM.
    endif.

*** Find Materials Specification Info for Tape
    clear: LF_INDEX.
    do.
      loop at LT_MS_TAPE into LS_MS_TAPE
                        where TTAPE = LS_SCSTR_TAPOS-TTAPE.
        add 1 to LF_INDEX.
        if LF_INDEX eq <S_TAPE_INFO_INT>-NO_TAPES.
          exit.
        else.
          clear: LS_MS_TAPE.
        endif.
      endloop.
      if LS_MS_TAPE is not initial.
        exit.
      endif.
    enddo.

    check LS_MS_TAPE is not initial.
    move LS_MS_TAPE-MATNR           to <S_MS_TAPE>-MATNR.
    move LS_MS_TAPE-TEXT            to <S_MS_TAPE>-TEXT.

*** Purchasing Info
    move LS_MS_TAPE-PURCH           to <S_MS_TAPE>-PURCH.
    move LS_MS_TAPE-LIFNR           to <S_MS_TAPE>-LIFNR.
    move LS_MS_TAPE-PRICE           to <S_MS_TAPE>-PRICE.
    move LS_MS_TAPE-PRICE_CURR      to <S_MS_TAPE>-PRICE_CURR.
    move LS_MS_TAPE-PRICP           to <S_MS_TAPE>-PRICP.
    move LS_MS_TAPE-PRICP_UOM       to <S_MS_TAPE>-PRICP_UOM.

  endloop.

*** Get Minimum Distance between Tapes
  move ME->T_MS_TAPE to LT_MS_TAPE.
  sort LT_MS_TAPE by TTAPE TAPOS.

  loop at ME->T_TAPE_INFO_INT assigning <S_TAPE_INFO_INT>.
    if <S_TAPE_INFO_INT>-NO_TAPES gt 1.
      clear: LS_TAPOS.
      loop at LT_MS_TAPE assigning <S_MS_TAPE>
                         where TTAPE = <S_TAPE_INFO_INT>-TTAPE.

        if LS_TAPOS is not initial.

          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_MS_TAPE>-TAPOS
                                                              IF_CALCV_UOM_1 = <S_MS_TAPE>-TAPOS_UOM
                                                              IF_CALCV_2     = LS_TAPOS-TAPOS
                                                              IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                              IF_UOM         = <S_TAPE_INFO_INT>-S_MIN_DISTANCE-TAPOS_UOM
                                                    importing EF_CALCV       = LS_TAPOS_MIN-TAPOS
                                                              EF_CALCV_UOM   = LS_TAPOS_MIN-TAPOS_UOM ).

          if LS_TAPOS_MIN-TAPOS lt <S_TAPE_INFO_INT>-S_MIN_DISTANCE-TAPOS or
             <S_TAPE_INFO_INT>-S_MIN_DISTANCE-TAPOS is initial.
            move LS_TAPOS_MIN-TAPOS to <S_TAPE_INFO_INT>-S_MIN_DISTANCE-TAPOS.
          endif.

        endif.

        move-corresponding <S_MS_TAPE> to LS_TAPOS.

      endloop.
    else.
      clear: <S_TAPE_INFO_INT>-S_MIN_DISTANCE.
    endif.
  endloop.

endmethod.                    "INIT_BY_SPEC_TAPE
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML       = RF_XML

              S_PCDIM_OUT     = ME->S_PCDIM_OUT

              T_MS_TAPE       = ME->T_MS_TAPE
              T_TAPE_INFO_INT = ME->T_TAPE_INFO_INT

       result xml RF_XML.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

*** Turn PC Dimension OUT
  ME->S_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_OUT
                                    IF_PCDIR = IF_PCDIR ).

endmethod.
