
class ZCL_VCXI_P0M_SERVICE definition
  public
  create public .

public section.

  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_MSTAE
    importing
      !IF_MATNR type MATNR
    exporting
      value(EF_MSTAE) type MSTAE
      value(EF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  class-methods MAT_IS_RELEASED
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D optional
    returning
      value(RF_RELEASED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_MATNR_MSTAE,
                  MATNR type MATNR,
                  MTART type MTART,
                  MSTAE type MSTAE,
         end of   YS_MATNR_MSTAE .
  types:
    begin of YS_MATNR_WERKS_MSTAE,
                  MATNR type MATNR,
                  MTART type MTART,
                  WERKS type WERKS_D,
                  MMSTA type MMSTA,
         end of   YS_MATNR_WERKS_MSTAE .
  types:
    YT_MATNR_MSTAE       type standard table of YS_MATNR_MSTAE .
  types:
    YT_MATNR_WERKS_MSTAE type standard table of YS_MATNR_WERKS_MSTAE .
  types:
    YT_CUST_STATUS       type standard table of ZVCXI_P0M_TC100 .

  class-data T_CUST_STATUS type YT_CUST_STATUS .
  class-data T_MATNR_MSTAE type YT_MATNR_MSTAE .
  class-data T_MATNR_WERKS_MSTAE type YT_MATNR_WERKS_MSTAE .
private section.
endclass. "ZCL_VCXI_P0M_SERVICE definition
class ZCL_VCXI_P0M_SERVICE implementation.
method CLASS_CONSTRUCTOR.

*** Select Status overview
  select *
         from ZVCXI_P0M_TC100
         into table T_CUST_STATUS.

endmethod.
method GET_MSTAE.

  data:  LS_MARA   type        MARA.

*** Read MARA
  call function 'MARA_SINGLE_READ'
    exporting
      MATNR             = IF_MATNR
    importing
      WMARA             = LS_MARA
    exceptions
      LOCK_ON_MATERIAL  = 1
      LOCK_SYSTEM_ERROR = 2
      WRONG_CALL        = 3
      NOT_FOUND         = 4.

  check SY-SUBRC eq 0.

*** Return Status
  move LS_MARA-MSTAE to EF_MSTAE.

  check EF_MSTAE is not initial.

  select single MTSTB
         into EF_DESCR
         from T141T
        where SPRAS eq SY-LANGU
         and  MMSTA eq EF_MSTAE.

endmethod.
method MAT_IS_RELEASED.

  data:      LF_MATNR             type        MATNR.
  data:      LS_MARA              type        MARA,
             LS_MARC              type        MARC,
             LS_MATNR_MSTAE       type        YS_MATNR_MSTAE,
             LS_MATNR_WERKS_MSTAE type        YS_MATNR_WERKS_MSTAE.

*** Convert Material
  call function 'CONVERSION_EXIT_MATN1_INPUT'
    exporting
      INPUT        = IF_MATNR
    importing
      OUTPUT       = LF_MATNR
    exceptions
      LENGTH_ERROR = 1
      others       = 2.

  if IF_WERKS is not supplied.
*** Check Material Status should be released
*** Search at Buffer
    read table T_MATNR_MSTAE into LS_MATNR_MSTAE
                             with key MATNR = LF_MATNR.

    if SY-SUBRC ne 0.
***   Read Mara
      call function 'MARA_SINGLE_READ'
        exporting
          MATNR             = LF_MATNR
        importing
          WMARA             = LS_MARA
        exceptions
          LOCK_ON_MATERIAL  = 1
          LOCK_SYSTEM_ERROR = 2
          WRONG_CALL        = 3
          NOT_FOUND         = 4.

      check SY-SUBRC eq 0.

***   Save at Buffer
      move-corresponding LS_MARA to LS_MATNR_MSTAE.
      append LS_MATNR_MSTAE to T_MATNR_MSTAE.
    endif.

*** Check Status
    read table T_CUST_STATUS with key MTART = LS_MATNR_MSTAE-MTART
                                      MSTAE = LS_MATNR_MSTAE-MSTAE
                                      MSTRE = ABAP_TRUE
                             transporting no fields.
    check SY-SUBRC = 0.

  else.
*** Check Material Plant Status should be released
*** Search at Buffer
    read table T_MATNR_WERKS_MSTAE into LS_MATNR_WERKS_MSTAE
                                   with key MATNR = LF_MATNR
                                            WERKS = IF_WERKS.

    if SY-SUBRC ne 0.
***   Read Marc
      call function 'MARC_SINGLE_READ'
        exporting
          MATNR             = LF_MATNR
          WERKS             = IF_WERKS
        importing
          WMARC             = LS_MARC
        exceptions
          LOCK_ON_MARC      = 1
          LOCK_SYSTEM_ERROR = 2
          WRONG_CALL        = 3
          NOT_FOUND         = 4
          others            = 5.

      check SY-SUBRC eq 0.

***   Save at Buffer
      move-corresponding LS_MARC to LS_MATNR_WERKS_MSTAE.
      append LS_MATNR_WERKS_MSTAE to T_MATNR_WERKS_MSTAE.
    endif.

*** Check Status
    read table T_CUST_STATUS with key MTART = LS_MATNR_WERKS_MSTAE-MTART
                                      MSTAE = LS_MATNR_WERKS_MSTAE-MMSTA
                                      MSTRE = ABAP_TRUE
                                      MSTPL = ABAP_TRUE
                             transporting no fields.
    check SY-SUBRC = 0.


  endif.

*** Material is released
  move ABAP_TRUE to RF_RELEASED.

endmethod.
