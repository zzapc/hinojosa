
class ZCL_VCXI_FBSS_PR_BFILM definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_PREV .
  interfaces ZIF_VCXI_FFSS_COMM_PREV .
  interfaces ZIF_VCXI_F0SS_ANCHI .

  constants C_IPRVT_BFILM type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_BFILM' ##NO_TEXT.
  constants C_PARID_NOFIL type /VCXI/VKS_PARID value 'ZVCXI_FB_NOFIL' ##NO_TEXT.
  constants C_PARID_TRLEN type /VCXI/VKS_PARID value 'ZVCXI_F0_TRLEN' ##NO_TEXT.
  constants C_PARID_TRWID type /VCXI/VKS_PARID value 'ZVCXI_F0_TRWID' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FILEN
    exporting
      !ES_FILEN type ZVCXI_F0S_S_FILEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_EYEMP
    exporting
      !EF_EYEMP type ZVCXI_FFS_EYEMP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITEX
    exporting
      !ES_FITEX type ZVCXI_FFS_S_FITEX
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITIN
    exporting
      !ES_FITIN type ZVCXI_FFS_S_FITIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIWID
    exporting
      !ES_FIWID type ZVCXI_F0S_S_FIWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOFIL
    exporting
      !EF_NOFIL type ZVCXI_FBS_NOFIL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_NOUPS type ZVCXI_F0S_NOUPS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_SURWT type ZVCXI_F0S_S_SURWT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TREQW
    exporting
      !ES_TREQW type ZVCXI_FFS_S_TREQW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TRLEN
    exporting
      !ES_TRLEN type ZVCXI_F0S_S_TRLEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RWDIR
    exporting
      !EF_RWDIR type ZVCXI_FFS_RWDIR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TRWID
    exporting
      !ES_TRWID type ZVCXI_F0S_S_TRWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_NOFIL
    importing
      !IF_NOFIL type ZVCXI_FBS_NOFIL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLEN
    importing
      !IS_TRLEN type ZVCXI_F0S_S_TRLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_RWSID
    exporting
      !EF_RWSID type ZVCXI_FFS_RWSID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_TRWID
    importing
      !IS_TRWID type ZVCXI_F0S_S_TRWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EYEMP
    importing
      !IF_EYEMP type ZVCXI_FFS_EYEMP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWDIR
    importing
      !IF_RWDIR type ZVCXI_FFS_RWDIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWSID
    importing
      !IF_RWSID type ZVCXI_FFS_RWSID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FIFPX
    exporting
      !EF_FIFPX type ZVCXI_FFS_FIFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_FILEN type /VCXI/VKSC_IEVNT value 'RECALC_FILEN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FIWID type /VCXI/VKSC_IEVNT value 'RECALC_FIWID' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RELEN type /VCXI/VKSC_IEVNT value 'RECALC_RELEN' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_EYEMP_CHANGED type /VCXI/VKSC_IEVNT value 'EYEMP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FILEN_CHANGED type /VCXI/VKSC_IEVNT value 'FILEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOFIL_CHANGED type /VCXI/VKSC_IEVNT value 'NOFIL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWDIR_CHANGED type /VCXI/VKSC_IEVNT value 'RWDIR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWSID_CHANGED type /VCXI/VKSC_IEVNT value 'RWSID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRLEN_CHANGED type /VCXI/VKSC_IEVNT value 'TRLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRWID_CHANGED type /VCXI/VKSC_IEVNT value 'TRWID_CHANGED' ##NO_TEXT.
  constants C_PARID_EYEMP type /VCXI/VKS_PARID value 'ZVCXI_FF_EYEMP' ##NO_TEXT.
  constants C_PARID_FIFPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIFPX' ##NO_TEXT.
  constants C_PARID_FILEN type /VCXI/VKS_PARID value 'ZVCXI_F0_FILEN' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_RWDIR type /VCXI/VKS_PARID value 'ZVCXI_FF_RWDIR' ##NO_TEXT.
  constants C_PARID_RWSID type /VCXI/VKS_PARID value 'ZVCXI_FF_RWSID' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.

  methods CHECK_CHILDREN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_RWSID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOFIL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUPS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TREQW
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_HPART
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_HPART type ref to ZCL_VCXI_FBSS_PR_HPART
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BPART
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FILEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RELEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FIWID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_FILEN
    importing
      !IS_FILEN type ZVCXI_F0S_S_FILEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_BFILM definition
class ZCL_VCXI_FBSS_PR_BFILM implementation.
  method CHECK_CHILDREN.

*** 0 - At least one Child has been defined.
*** 1 - At least one Child has to be defined.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    move 1 to RF_RETURN.
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

      check LINES( LT_GATE ) is not initial.
      move 0 to RF_RETURN.
      exit.

    endloop.

  endmethod.
  method CHECK_NOFIL.
*** 0 = Number of Films is maintained.
*** 1 = Number of Films is not maintained.

    data: LF_NOFIL type ZVCXI_FBS_NOFIL.


    ME->GET_NOFIL( importing EF_NOFIL = LF_NOFIL ).
    if LF_NOFIL is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_NOUPS.
*** 0 = Number of Ups is maintained.
*** 1 = Number of Ups is not maintained.

    data: LF_NOUPS type ZVCXI_F0S_NOUPS.


    ME->GET_NOUPS( importing EF_NOUPS = LF_NOUPS ).
    if LF_NOUPS is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_RWSID.
*** 0 - Roll Winding Side is maintained and valid.
*** 1 - Roll Winding Side is not maintained or invalid.

    data:  LF_RWSID   type ZVCXI_FFS_RWSID.

    ME->GET_RWSID( importing EF_RWSID = LF_RWSID ).
    if LF_RWSID is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_TREQW.
*** 0 = No remaining Trim Requirement on Width
*** 1 = Remaining Trim Requirement on Width.

    data: LS_TREQW type ZVCXI_FFS_S_TREQW.


    ME->GET_TREQW( importing ES_TREQW = LS_TREQW ).
    if LS_TREQW-TREQW eq 0.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Communicate backward only with children
    move ABAP_TRUE to ZIF_VCXI_F0SS_COMM_PREV~F_COMWC.

  endmethod.
  method GET_EYEMP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).
    move LS_PARAM-ATWRT to EF_EYEMP.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIFPX.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing EF_FIFPX = EF_FIFPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method GET_FILEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FILEN ).
    move LS_PARAM-ATFLV to ES_FILEN-FILEN.
    move LS_PARAM-UNIT  to ES_FILEN-FILEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ES_FITEX
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOFIL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOFIL ).
    move LS_PARAM-ATFLV to EF_NOFIL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_BPART.

    data:  LT_GATE   type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Bag Part
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BPART=>C_IPRVT_BPART
                                     IF_INUSE  = ABAP_TRUE ).

    read table LT_GATE into ER_GATE index 1.
    if SY-SUBRC eq 0.
      move ER_GATE->R_CLSPR ?to ER_PR_BPART.
    else.
      clear: ER_GATE, ER_PR_BPART.
    endif.

  endmethod.
  method GET_PRVDR_HPART.

    data:  LT_GATE   type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Bag Part
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_HPART=>C_IPRVT_HPART
                                     IF_INUSE  = ABAP_TRUE ).

    read table LT_GATE into ER_GATE index 1.
    if SY-SUBRC eq 0.
      move ER_GATE->R_CLSPR ?to ER_PR_HPART.
    else.
      clear: ER_GATE, ER_PR_HPART.
    endif.

  endmethod.
  method GET_RWDIR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWDIR ).
    move LS_PARAM-ATWRT to EF_RWDIR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWSID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWSID ).
    move LS_PARAM-ATWRT to EF_RWSID.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Children
    if ME->CHECK_CHILDREN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Number of Films
    if ME->CHECK_NOFIL( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Number of Ups (Outbound)
    if ME->CHECK_NOUPS( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Trim Requirement on Width
    if ME->CHECK_TREQW( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Roll Winding Side
    case ME->CHECK_RWSID( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Children
    if ME->CHECK_CHILDREN( ) eq 0.
***   At least one Child has been defined.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '057' ).
    else.
***   At least one Child has to be defined.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '058' ).
    endif.

***--------------------------------------------------------------------------------------
*** Number of Films
    if ME->CHECK_NOFIL( ) eq 0.
***   Number of Films is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '301' ).
    else.
***   Number of Films is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '302' ).
    endif.


*** Number of Ups (Outbound)
    if ME->CHECK_NOUPS( ) eq 0.
***   Number of Ups is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '303' ).
    else.
***   Number of Ups is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '304' ).
    endif.

*** Trim Requirement on Width
    if ME->CHECK_TREQW( ) eq 0.
***   No remaining Trim Requirement on Width
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '305' ).
    else.
***   Remaining Trim Requirement on Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '306' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Roll Winding Side
    case ME->CHECK_RWSID( ).
      when 0.
***     Roll Winding Side is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '160' ).
      when 1.
***     Roll Winding Side is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '161' ).
    endcase.
  endmethod.
  method GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ES_SURWT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_TREQW.

    data: LS_TRWID        type    ZVCXI_F0S_S_TRWID.

***------------------------------------------------------------------------------------------------
*** Get Trim Requirement on Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ES_TREQW
                                                     EF_SETBY = EF_SETBY ).

*** Get Trim on Width
    ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).

***------------------------------------------------------------------------------------------------
*** Subtract Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_TREQW-TREQW
                                                        IF_CALCV_UOM_1 = ES_TREQW-TREQW_UOM
                                                        IF_CALCV_2     = LS_TRWID-TRWID
                                                        IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                              importing EF_CALCV       = ES_TREQW-TREQW
                                                        EF_CALCV_UOM   = ES_TREQW-TREQW_UOM ).

*** Not less than 0
    if ES_TREQW-TREQW lt 0.
      move 0 to ES_TREQW-TREQW.
    endif.

  endmethod.
  method GET_TRLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLEN ).
    move LS_PARAM-ATFLV to ES_TRLEN-TRLEN.
    move LS_PARAM-UNIT  to ES_TRLEN-TRLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).
    move LS_PARAM-ATFLV to ES_TRWID-TRWID.
    move LS_PARAM-UNIT  to ES_TRWID-TRWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_FIWID.
        ME->HANDLE_RECALC_FIWID( ).

      when C_IEVNT_I_RECALC_FILEN.
        ME->HANDLE_RECALC_FILEN( ).

      when C_IEVNT_I_RECALC_RELEN.
        ME->HANDLE_RECALC_RELEN( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_RECALC_FILEN.

    data: LS_BPLEN type        ZVCXI_FBS_S_BPLEN,
          LS_FILEN type        ZVCXI_F0S_S_FILEN,
          LS_HPLEN type        ZVCXI_FBS_S_HPLEN,
          LS_TRLEN type        ZVCXI_F0S_S_TRLEN.
    data: LR_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART,
          LR_PR_HPART type ref to ZCL_VCXI_FBSS_PR_HPART.

***------------------------------------------------------------------------------------------------
*** Get Bag Part Provider
    ME->GET_PRVDR_BPART( importing ER_PR_BPART = LR_PR_BPART ).
    if LR_PR_BPART is bound.
***   Get Bag Part Length
      LR_PR_BPART->GET_BPLEN( importing ES_BPLEN = LS_BPLEN ).

      move LS_BPLEN-BPLEN     to LS_FILEN-FILEN.
      move LS_BPLEN-BPLEN_UOM to LS_FILEN-FILEN_UOM.

    else.
***   Get Handle Part Provider
      ME->GET_PRVDR_HPART( importing ER_PR_HPART = LR_PR_HPART ).
      if LR_PR_HPART is bound.
***     Get Bag Part Length
        LR_PR_HPART->GET_HPLEN( importing ES_HPLEN = LS_HPLEN ).

        move LS_HPLEN-HPLEN     to LS_FILEN-FILEN.
        move LS_HPLEN-HPLEN_UOM to LS_FILEN-FILEN_UOM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if LS_FILEN is not initial.
***   Add Trim on Length
      ME->GET_TRLEN( importing ES_TRLEN = LS_TRLEN ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FILEN-FILEN
                                                          IF_CALCV_UOM_1 = LS_FILEN-FILEN_UOM
                                                          IF_CALCV_2     = LS_TRLEN-TRLEN
                                                          IF_CALCV_UOM_2 = LS_TRLEN-TRLEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_FILEN-FILEN_UOM
                                                importing EF_CALCV       = LS_FILEN-FILEN
                                                          EF_CALCV_UOM   = LS_FILEN-FILEN_UOM ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Film Length
    ME->SET_FILEN( IS_FILEN = LS_FILEN ).

  endmethod.
  method HANDLE_RECALC_FIWID.

    data: LF_NOUPS type ZVCXI_F0S_NOUPS.
    data: LS_BPWID type ZVCXI_FBS_S_BPWID,
          LS_HPWID type ZVCXI_FBS_S_HPWID,
          LS_FIWID type ZVCXI_F0S_S_FIWID,
          LS_TRWID type ZVCXI_F0S_S_TRWID.
    data: LR_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART,
          LR_PR_HPART type ref to ZCL_VCXI_FBSS_PR_HPART.


***--------------------------------------------------------------------------------------
*** Get Bag Part Provider
    ME->GET_PRVDR_BPART( importing ER_PR_BPART = LR_PR_BPART ).
    if LR_PR_BPART is bound.
***   Get Bag Part Width
      LR_PR_BPART->GET_BPWID( importing ES_BPWID = LS_BPWID ).

      move LS_BPWID-BPWID     to LS_FIWID-FIWID.
      move LS_BPWID-BPWID_UOM to LS_FIWID-FIWID_UOM.
    else.
***   Get Handle Part Provider
      ME->GET_PRVDR_HPART( importing ER_PR_HPART = LR_PR_HPART ).
      if LR_PR_HPART is bound.
***     Get Bag Part Width
        LR_PR_HPART->GET_HPWID( importing ES_HPWID = LS_HPWID ).

        move LS_HPWID-HPWID     to LS_FIWID-FIWID.
        move LS_HPWID-HPWID_UOM to LS_FIWID-FIWID_UOM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if LS_FIWID is not initial.
***   Multiply with Number of Ups (Outbound)
      ME->GET_NOUPS( importing EF_NOUPS = LF_NOUPS ).
      multiply LS_FIWID-FIWID by LF_NOUPS.

***   Add Trim on Width
      ME->GET_TRWID( importing ES_TRWID = LS_TRWID ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID-FIWID
                                                          IF_CALCV_UOM_1 = LS_FIWID-FIWID_UOM
                                                          IF_CALCV_2     = LS_TRWID-TRWID
                                                          IF_CALCV_UOM_2 = LS_TRWID-TRWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_FIWID-FIWID_UOM
                                                importing EF_CALCV       = LS_FIWID-FIWID
                                                          EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

  endmethod.
  method HANDLE_RECALC_RELEN.

    data: LS_BPLEN type ZVCXI_FBS_S_BPLEN,
          LS_RELEN type ZVCXI_FFS_S_RELEN,
          LS_TRLEN type ZVCXI_F0S_S_TRLEN,
          LS_HPLEN type ZVCXI_FBS_S_HPLEN.
    data: LR_PR_BPART type ref to ZCL_VCXI_FBSS_PR_BPART,
          LR_PR_HPART type ref to ZCL_VCXI_FBSS_PR_HPART.


***--------------------------------------------------------------------------------------
*** Get Bag Part Provider
    ME->GET_PRVDR_BPART( importing ER_PR_BPART = LR_PR_BPART ).
    if LR_PR_BPART is bound.
***   Get Bag Part Length
      LR_PR_BPART->GET_BPLEN( importing ES_BPLEN = LS_BPLEN ).

      move LS_BPLEN-BPLEN     to LS_RELEN-RELEN.
      move LS_BPLEN-BPLEN_UOM to LS_RELEN-RELEN_UOM.

    else.
***   Get Handle Part Provider
      ME->GET_PRVDR_HPART( importing ER_PR_HPART = LR_PR_HPART ).
      if LR_PR_HPART is bound.
***     Get Bag Part Length
        LR_PR_HPART->GET_HPLEN( importing ES_HPLEN = LS_HPLEN ).

        move LS_HPLEN-HPLEN     to LS_RELEN-RELEN.
        move LS_HPLEN-HPLEN_UOM to LS_RELEN-RELEN_UOM.
      endif.

    endif.

***--------------------------------------------------------------------------------------
    if LS_RELEN is not initial.

***   Add Trim on length
      ME->GET_TRLEN( importing ES_TRLEN = LS_TRLEN ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN-RELEN_UOM
                                                          IF_CALCV_2     = LS_TRLEN-TRLEN
                                                          IF_CALCV_UOM_2 = LS_TRLEN-TRLEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_RELEN-RELEN_UOM
                                                importing EF_CALCV       = LS_RELEN-RELEN
                                                          EF_CALCV_UOM   = LS_RELEN-RELEN_UOM ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Repeat length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_EYEMP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).

    move IF_EYEMP to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EYEMP_CHANGED ).
    endif.

  endmethod.
  method SET_FIFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).

    move IF_FIFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FILEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FILEN ).

    move IS_FILEN-FILEN     to LS_PARAM-ATFLV.
    move IS_FILEN-FILEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FILEN_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
    endif.

  endmethod.
  method SET_NOFIL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOFIL ).

    move IF_NOFIL           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOFIL_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_RWDIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWDIR ).

    move IF_RWDIR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWDIR_CHANGED ).
    endif.

  endmethod.
  method SET_RWSID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWSID ).

    move IF_RWSID to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWSID_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method SET_TRLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLEN ).

    move IS_TRLEN-TRLEN     to LS_PARAM-ATFLV.
    move IS_TRLEN-TRLEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRLEN_CHANGED ).
    endif.

  endmethod.
  method SET_TRWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWID ).

    move IS_TRWID-TRWID     to LS_PARAM-ATFLV.
    move IS_TRWID-TRWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRWID_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_ANCHI~ADD_XCON.

    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_SOV  type        /VCXI/VKSR_TT_GATE,
          LT_XCONR     type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FCONI type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOV   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FCONI   type ref to ZCL_VCXI_FFSS_PR_FCONI,
          LR_PR_SOV     type ref to ZCL_VCXI_F0SS_PR_SOV.

***--------------------------------------------------------------------------------------
*** Get Provider Definition for Connection In
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCONI=>C_IPRVT_FF_FCONI ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    check SY-SUBRC eq 0.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONI.
      endtry.

      check LR_PR_FCONI is bound.

***--------------------------------------------------------------------------------------
***   Get Specification Overview provider
      if LR_PR_SOV is not bound.
        LT_GATE_SOV = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                          IF_INUSE = ABAP_TRUE ).
        read table LT_GATE_SOV into LR_GATE_SOV index 1.
        check LR_GATE_SOV is bound.

        try.
            move LR_GATE_SOV->R_CLSPR ?to LR_PR_SOV.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

***     Get current Connections
        LT_XCONR = LR_PR_SOV->GET_XCONR( ).
      endif.

***   Check if Bag Connection In is linked to a Connection Out
      read table LT_XCONR with key R_GATE_IN = LR_GATE transporting no fields.
      check SY-SUBRC is not initial.

***   Store the Film Connection In Gate
      move LR_GATE to LR_GATE_FCONI.
      exit.

    endloop.

*** If a Connection In is found then use it
    if LR_GATE_FCONI is bound.
      move LR_GATE_FCONI to RR_GATE.
      return.
    endif.

*** Create new Connector In
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    check RR_GATE is bound.

*** Set in-use
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LF_FISTX type        ZVCXI_FFS_FISTX,
          LF_INDEX type        I.
    data: LS_TREQW      type        ZVCXI_FFS_S_TREQW,
          LS_TREQW_NEXT type        ZVCXI_FFS_S_TREQW,
          LS_FITIN      type        ZVCXI_FFS_S_FITIN,
          LS_FITIN_NEXT type        ZVCXI_FFS_S_FITIN,
          LS_FITEX      type        ZVCXI_FFS_S_FITEX,
          LS_FITEX_NEXT type        ZVCXI_FFS_S_FITEX,
          LS_SURWT      type        ZVCXI_F0S_S_SURWT,
          LS_SURWT_NEXT type        ZVCXI_F0S_S_SURWT,
          LS_RELEN      type        ZVCXI_FFS_S_RELEN,
          LS_RELEN_NEXT type        ZVCXI_FFS_S_RELEN.
    data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT        type ref to ZIF_VCXI_FFSS_COMM_NEXT,
          LR_BL_FISTRUCT      type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FISTRUCT_NEXT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FIFPROP       type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIFPROP_NEXT  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.


***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      move SY-TABIX to LF_INDEX.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get largest Trim Requirement
      LR_COMM_NEXT->GET_TREQW( importing ES_TREQW = LS_TREQW_NEXT ).
      if LS_TREQW is initial or
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_TREQW_NEXT-TREQW
                                                      IF_CALCV_UOM_1 = LS_TREQW_NEXT-TREQW_UOM
                                                      IF_CALCV_2     = LS_TREQW-TREQW
                                                      IF_CALCV_UOM_2 = LS_TREQW-TREQW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_TREQW_NEXT to LS_TREQW.
      endif.

***   Get Sum of Internal Thickness
      LR_COMM_NEXT->GET_FITIN( importing ES_FITIN = LS_FITIN_NEXT ).
      if LS_FITIN_NEXT is not initial.
        if LS_FITIN is initial.
          move LS_FITIN_NEXT to LS_FITIN.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITIN_NEXT-FITIN
                                                              IF_CALCV_UOM_1 = LS_FITIN_NEXT-FITIN_UOM
                                                              IF_CALCV_2     = LS_FITIN-FITIN
                                                              IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITIN-FITIN_UOM
                                                    importing EF_CALCV       = LS_FITIN-FITIN
                                                              EF_CALCV_UOM   = LS_FITIN-FITIN_UOM ).

        endif.
      endif.

***   Get Sum of External Thickness
      LR_COMM_NEXT->GET_FITEX( importing ES_FITEX = LS_FITEX_NEXT ).
      if LS_FITEX_NEXT is not initial.
        if LS_FITEX is initial.
          move LS_FITEX_NEXT to LS_FITEX.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITEX_NEXT-FITEX
                                                              IF_CALCV_UOM_1 = LS_FITEX_NEXT-FITEX_UOM
                                                              IF_CALCV_2     = LS_FITEX-FITEX
                                                              IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITEX-FITEX_UOM
                                                    importing EF_CALCV       = LS_FITEX-FITEX
                                                              EF_CALCV_UOM   = LS_FITEX-FITEX_UOM ).

        endif.
      endif.

***   Get Sum of Surface Weight
      LR_COMM_NEXT->GET_SURWT( importing ES_SURWT = LS_SURWT_NEXT ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Get Repeat Length if not different
      LR_COMM_NEXT->GET_RELEN( importing ES_RELEN = LS_RELEN_NEXT ).
      if LS_RELEN_NEXT-RELEN is not initial.
        if LS_RELEN is initial.
          move LS_RELEN_NEXT to LS_RELEN.
        else.
          if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RELEN_NEXT-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN_NEXT-RELEN_UOM
                                                          IF_CALCV_2     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ).
***         Clear Repeat if different
            clear LS_RELEN-RELEN.
          endif.
        endif.
      endif.

***   Combine Film Structure
      clear LR_BL_FISTRUCT_NEXT.
      LR_COMM_NEXT->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      if LR_BL_FISTRUCT is not bound.
        move LR_BL_FISTRUCT_NEXT to LR_BL_FISTRUCT.
      else.
        LR_BL_FISTRUCT->ADD_BL_FISTRUCT( IR_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      endif.

***   Combine Film Forward Property
      clear LR_BL_FIFPROP_NEXT.
      LR_COMM_NEXT->GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      if LR_BL_FIFPROP is not bound.
        move LR_BL_FIFPROP_NEXT to LR_BL_FIFPROP.
      else.
        LR_BL_FIFPROP->MERGE( IR_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Trim Requirement on the Width
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

*** Forward Internal Film Thickness
    ME->SET_FITIN( IS_FITIN = LS_FITIN ).

*** Forward External Film Thickness
    ME->SET_FITEX( IS_FITEX = LS_FITEX ).

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Repeat Length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

*** Forward Film Structure XML
    if LR_BL_FISTRUCT is bound.
      LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    else.
      clear LF_FISTX.
    endif.
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

*** Forward Film Forward Property XML
    if LR_BL_FIFPROP is bound.
      ME->SET_FIFPX( IF_FIFPX = LR_BL_FIFPROP->GET_FIFPX( ) ).
    else.
      ME->SET_FIFPX( IF_FIFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX.
  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).
    move LS_PARAM-STRNG to EF_FIFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID.

    data:  LF_NOOUT  type ZVCXI_XCS_NOOUT.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->GET_FIWID( importing ES_FIWID = ES_FIWID
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS.

    data:  LF_NOOUT  type ZVCXI_XCS_NOOUT.

***------------------------------------------------------------------------------------------------
*** Get Number of Ups (Outbound)
    ME->GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
