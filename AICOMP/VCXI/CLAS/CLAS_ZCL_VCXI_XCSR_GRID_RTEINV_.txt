
class ZCL_VCXI_XCSR_GRID_RTEINV definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.
  type-pools ICON .

  constants C_LLAYO_AW type ZVCXI_XCSR_LLAYO value 'AW'. "#EC NOTEXT
  constants C_LLAYO_AWP type ZVCXI_XCSR_LLAYO value 'AWP'. "#EC NOTEXT

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IF_LLAYO type ZVCXI_XCSR_LLAYO
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_UI_RTESPV type ref to ZCL_VCXI_XCSR_UI_RTESPV
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  constants C_COLUMN_DYN type STRING value 'DYN_'. "#EC NOTEXT
  constants C_FCODE_SHOW_MGRPV_LIMIT type UI_FUNC value 'SHOW_MGRPV_LIMIT'. "#EC NOTEXT
  constants C_FCODE_SHOW_MGRPV_SPEED type UI_FUNC value 'SHOW_MGRPV_SPEED'. "#EC NOTEXT
  data F_LLAYO type ZVCXI_XCSR_LLAYO .
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .
  data R_UI_RTESPV type ref to ZCL_VCXI_XCSR_UI_RTESPV .

  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  methods COUNT_DYN_COLUMN
    returning
      value(RF_COUNT) type I
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_RTE_ARBPL
    exporting
      value(ER_RTE_ARBPL) type ref to /VCXI/CL_VSMR_RTE_ARBPL
      value(EF_DATE) type DATS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods HANDLE_CONTEXT_MENU_REQUEST
    for event CONTEXT_MENU_REQUEST of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_BL_PRTE_EVALUATED
    for event BL_PRTE_EVALUATED of ZCL_VCXI_XCSR_PR_RTESPV .
  methods HANDLE_UC_SHOW_MGRPV
    importing
      !IF_MMGRP type /VCXI/VSMC_MMGRP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSR_GRID_RTEINV definition
class ZCL_VCXI_XCSR_GRID_RTEINV implementation.
method BUILD_DYN_TABLE.

  data:          LF_COUNT       type        I,
                 LF_IDX_DYN     type        NUMC5,
                 LF_NAME        type        STRING.
  data:          LT_COMPONENT   type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
                 LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR,
                 LR_TYPEDESCR   type ref to CL_ABAP_TYPEDESCR.
  field-symbols: <S_COMPONENT>  type        CL_ABAP_STRUCTDESCR=>COMPONENT.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSR_S_RTEALT_GRID'
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  move LR_TYPEDESCR ?to LR_STRUCTDESCR.
  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).

***--------------------------------------------------------------------------------------
*** Count dynamic Columns for Work Center
  LF_COUNT = ME->COUNT_DYN_COLUMN( ).

  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSR_ALVMA'
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  if SY-SUBRC ne 0.
*** Error generating dynamic Routing Grid (Invalid Route)
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSR'
                                          IF_MSGNO = '202' ).
  endif.

  do LF_COUNT times.
    add 1 to LF_IDX_DYN.
    concatenate C_COLUMN_DYN LF_IDX_DYN into LF_NAME.

    append initial line to LT_COMPONENT assigning <S_COMPONENT>.
    move LF_NAME       to <S_COMPONENT>-NAME.
    move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.
  enddo.

***--------------------------------------------------------------------------------------
*** Create data type for table
  try.
      LR_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ).
      LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>CREATE(  P_LINE_TYPE  = LR_STRUCTDESCR ).

    catch CX_SY_TYPE_CREATION.
***   Error generating Routing Grid (Selected Route)
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSR'
                                            IF_MSGNO = '202' ).
  endtry.

  create data ME->R_DATA type handle LR_TABLEDESCR.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_XCSR_S_RTEINV_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

  move IR_UI_RTESPV to ME->R_UI_RTESPV.
  move IF_LLAYO     to ME->F_LLAYO.

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_RTESPV.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Set Event Handler
  set handler ME->HANDLE_BL_PRTE_EVALUATED for ME->R_PR_RTESPV.

endmethod.
method COUNT_DYN_COLUMN.

  data:  LF_COUNT         type        I.
  data:  LR_BL_PRTE       type ref to ZCL_VCXI_XCSR_BL_PRTE.

  loop at ME->R_PR_RTESPV->T_RTEINV into LR_BL_PRTE.
    move lines( LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ) to LF_COUNT.
    if LF_COUNT gt RF_COUNT.
      move LF_COUNT to RF_COUNT.
    endif.
  endloop.

endmethod.
method GET_FIELDCAT.

  data:          LS_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT,
                 LS_DFIES        type        DFIES.
  data:          LT_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_TABLEDESCR   type ref to CL_ABAP_TABLEDESCR,
                 LR_STRUCTDESCR  type ref to CL_ABAP_STRUCTDESCR,
                 LR_ELEMDESCR    type ref to CL_ABAP_ELEMDESCR.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Standard Field Cat
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Change Field catalog attributes
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Edit Button
      when 'BTN_EDIT'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON  to <S_FCAT>-STYLE.
        move ABAP_TRUE                         to <S_FCAT>-ICON.
        move 'C'                               to <S_FCAT>-JUST.
        move 'Edit'(C01)                       to <S_FCAT>-REPTEXT.

***   Status (traffic light)
      when 'STICO'.
        move ABAP_TRUE                         to <S_FCAT>-HOTSPOT.
        move 'C'                               to <S_FCAT>-JUST.

    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Dynamic Field Catalog
  check ME->R_DATA is bound.
  LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ).
  LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).

  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).
  loop at LT_COMPONENT into LS_COMPONENT.
    read table RT_FCAT with key FIELDNAME = LS_COMPONENT-NAME
                       transporting no fields.
    check SY-SUBRC ne 0.

    try.
        move LS_COMPONENT-TYPE ?to LR_ELEMDESCR.
        LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

        append initial line to RT_FCAT assigning <S_FCAT>.
        move-corresponding LS_DFIES to <S_FCAT>.
        move LS_COMPONENT-NAME to <S_FCAT>-FIELDNAME.
        move SY-TABIX          to <S_FCAT>-COL_POS.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_RELCO             type          ZVCXI_XCSR_RELCO,
                 LF_CHANGEABLE        type          ABAP_BOOL,
                 LF_IDX_DYN           type          NUMC5,
                 LF_COLUMN            type          TV_ITMNAME,
                 LF_PSTEP             type          STRING,
                 LF_IPSTP             type          /VCXI/VSMC_IPSTP.
  data:          LS_RTEINV_GRID       type          ZVCXI_XCSR_S_RTEINV_GRID,
                 LS_MSG               type          /VCXI/CKXM_S_MSG.
  data:          LT_MSG               type          /VCXI/CKXM_TT_MSG,
                 LT_SORT              type          ABAP_SORTORDER_TAB.
  data:          LR_BL_PRTE           type ref to   ZCL_VCXI_XCSR_BL_PRTE,
                 LR_RTE_ARBPL         type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP         type ref to   /VCXI/CL_VSMR_RTE_PSTEP.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <S_SORT>             type          ABAP_SORTORDER,
                 <F_FIELD>            type          any.

*** Get Relevance Code
  move ME->R_PR_RTESPV->GET_RELCO( ) to LF_RELCO.

*** Is BL Production Route changeable
  move ME->R_PR_RTESPV->IS_BL_PRTE_CHANGEABLE( ) to LF_CHANGEABLE.

***------------------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  loop at ME->R_PR_RTESPV->T_RTEINV into LR_BL_PRTE.
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.

***------------------------------------------------------------------------------------------------
*** Build Fix Values
    clear: LS_RTEINV_GRID.
    if LF_CHANGEABLE eq ABAP_TRUE.
      move ICON_CHANGE                    to LS_RTEINV_GRID-BTN_EDIT.
    else.
      move ICON_DISPLAY                   to LS_RTEINV_GRID-BTN_EDIT.
    endif.
    move LR_BL_PRTE->R_RTE_PRTE->F_RSRCE  to LS_RTEINV_GRID-RSRCE.
    move LR_BL_PRTE->F_DECIS              to LS_RTEINV_GRID-DECIS.
    move LR_BL_PRTE->GET_RELCO( )         to LS_RTEINV_GRID-RELCO.
    move LR_BL_PRTE->GET_RELPO( )         to LS_RTEINV_GRID-RELPO.
    move LR_BL_PRTE                       to LS_RTEINV_GRID-R_BL_PRTE.

*** Status Icon
    if LR_BL_PRTE->R_RTE_PRTE->F_RSTAT eq /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID.
      write ICON_YELLOW_LIGHT             to LS_RTEINV_GRID-STICO as icon.
    else.
      write ICON_RED_LIGHT                to LS_RTEINV_GRID-STICO as icon.
    endif.

*** Status Messages
    create object LS_RTEINV_GRID-R_MSG.
    move LR_BL_PRTE->R_RTE_PRTE->GET_MSG( ) to LT_MSG.
    loop at LT_MSG into LS_MSG.
      LS_RTEINV_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = LS_MSG-MSGID
                                         IF_MSGTY = LS_MSG-MSGTY
                                         IF_MSGNO = LS_MSG-MSGNO
                                         IF_MSGV1 = LS_MSG-MSGV1
                                         IF_MSGV2 = LS_MSG-MSGV2
                                         IF_MSGV3 = LS_MSG-MSGV3
                                         IF_MSGV4 = LS_MSG-MSGV4 ).
    endloop.

*** Highlight Selected Route
    if LR_BL_PRTE eq ME->R_PR_RTESPV->R_RTESEL.
      move 'C500' to LS_RTEINV_GRID-ROWCOLOR.
    endif.

    move-corresponding LS_RTEINV_GRID to <S_DATA>.

***------------------------------------------------------------------------------------------------
*** Build Dynamic Values
    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Build Column Name
      move SY-TABIX to LF_IDX_DYN.
      concatenate C_COLUMN_DYN LF_IDX_DYN into LF_COLUMN.

***   Assign Dynamic Colum
      assign component LF_COLUMN of structure <S_DATA> to <F_FIELD>.

***   Set Value
      case ME->F_LLAYO.
***     Work Center (Plant)
        when C_LLAYO_AW.
          if LR_RTE_ARBPL->R_ARBPL is bound.
            move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <F_FIELD>.
          endif.

***     Work Center (Plant) [Production Step]
        when C_LLAYO_AWP.
          if LR_RTE_ARBPL->R_ARBPL is bound.
            move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <F_FIELD>.
          endif.

***       Build Production Steps
          clear LF_PSTEP.
          loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
            concatenate LF_PSTEP ',' into LF_PSTEP.

            move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
            concatenate LF_PSTEP LF_IPSTP into LF_PSTEP separated by SPACE.

            at first.
              concatenate '[' LF_IPSTP into LF_PSTEP.
            endat.
            at last.
              concatenate LF_PSTEP ']' into LF_PSTEP.
            endat.
          endloop.
          concatenate <F_FIELD> LF_PSTEP into <F_FIELD> separated by SPACE.
      endcase.
    endloop.
  endloop.

***------------------------------------------------------------------------------------------------
*** Dynamic Sort
  append initial line to LT_SORT assigning <S_SORT>.
  move 'RELCO' to <S_SORT>-NAME.
  sort <T_DATA> by (LT_SORT).

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

  move 'ROWCOLOR' to RS_LAYOUT-INFO_FNAME.

endmethod.
method GET_SELECTED_RTE_ARBPL.

  data:          LF_IDX          type          I.
  data:          LS_CELL         type          LVC_S_CELL,
                 LS_RTEINV_GRID  type          ZVCXI_XCSR_S_RTEINV_GRID.
  data:          LT_CELL         type          LVC_T_CELL.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

*** Get selected Rows by Cells
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  check LT_CELL is not initial.

  read table LT_CELL into LS_CELL index 1.
  check SY-SUBRC eq 0.

*** Decrypt Workcenter Counter
  replace C_COLUMN_DYN in LS_CELL-COL_ID-FIELDNAME with SPACE.
  check SY-SUBRC eq 0.
  move LS_CELL-COL_ID-FIELDNAME to LF_IDX.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Get table line
  read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
  check SY-SUBRC eq 0.
  move-corresponding <S_DATA> to LS_RTEINV_GRID.

  check LS_RTEINV_GRID-R_BL_PRTE             is bound and
        LS_RTEINV_GRID-R_BL_PRTE->R_RTE_PRTE is bound.

*** Find Work Center by Production Step
  read table LS_RTEINV_GRID-R_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into  ER_RTE_ARBPL
                                                               index LF_IDX.

  move LS_RTEINV_GRID-R_BL_PRTE->F_DATE to EF_DATE.

endmethod.
method HANDLE_BL_PRTE_EVALUATED.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LS_RTEINV_GRID   type          ZVCXI_XCSR_S_RTEINV_GRID.
  data:          LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTEINV_GRID.

***   Start Popup
      ME->R_UI_RTESPV->POPUP_RTEEDI( IR_BL_PRTE = LS_RTEINV_GRID-R_BL_PRTE ).

***   Request Refresh
      move ABAP_TRUE to ME->F_REFRESH_REQ.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CONTEXT_MENU_REQUEST.

  data:  LR_RTE_ARBPL          type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_CX_CKX             type ref to /VCXI/CX_CKX.

  try.
***   Clear Default Entries
      E_OBJECT->CLEAR( ).

***------------------------------------------------------------------------------------------------
***   Get Selected Work Center
      ME->GET_SELECTED_RTE_ARBPL( importing ER_RTE_ARBPL = LR_RTE_ARBPL ).
      check LR_RTE_ARBPL is bound.

***   Show Limit Group Version
      E_OBJECT->ADD_FUNCTION( FCODE = C_FCODE_SHOW_MGRPV_LIMIT
                              TEXT  = 'Show Limit Group Version'(F01) ).

***   Show Speed Group Version
      E_OBJECT->ADD_FUNCTION( FCODE = C_FCODE_SHOW_MGRPV_SPEED
                              TEXT  = 'Show Speed Group Version'(F02) ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_RTEINV_GRID   type          ZVCXI_XCSR_S_RTEINV_GRID.
  data:          LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTEINV_GRID.

***   Set Selected Route
      ME->R_PR_RTESPV->SET_RTESEL( IR_BL_PRTE = LS_RTEINV_GRID-R_BL_PRTE ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  data:          LS_RTEINV_GRID  type          ZVCXI_XCSR_S_RTEINV_GRID.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

  try.
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTEINV_GRID.

      case E_COLUMN_ID-FIELDNAME.
        when 'STICO'.
          LS_RTEINV_GRID-R_MSG->DISPLAY_MSG( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_SHOW_MGRPV.

  data:  LF_DATE          type        DATS,
         LF_TOOBJ         type        /VCXI/CKX_TOOBJ,
         LF_GUID          type        /VCXI/CKX_GUID,
         LF_MESSAGE       type        CHAR100.
  data:  LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_MGRPV         type ref to /VCXI/CL_VSMC_MGRPV.

***------------------------------------------------------------------------------------------------
*** Get Selected Work Center
  ME->GET_SELECTED_RTE_ARBPL( importing ER_RTE_ARBPL = LR_RTE_ARBPL
                                        EF_DATE      = LF_DATE ).
  check LR_RTE_ARBPL is bound.

*** Get Machine Group Version by Production Steps
  LR_MGRPV ?= LR_RTE_ARBPL->GET_MGRPV_BY_RTE_PSTEP( IF_DATE  = LF_DATE
                                                    IF_MMGRP = IF_MMGRP ).
  check LR_MGRPV is bound.

*** Get Information
  move LR_MGRPV->/VCXI/IF_CKX_OBJECT~F_TOOBJ     to LF_TOOBJ.
  move LR_MGRPV->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.

*** Start Machine Customizing in new Task
  call function '/VCXI/VSMCU_MACHCUST_START'
    starting new task 'NEW'
    exporting
      IF_TOOBJ              = LF_TOOBJ
      IF_GUID               = LF_GUID
    exceptions
      SYSTEM_FAILURE        = 97  message LF_MESSAGE
      COMMUNICATION_FAILURE = 98  message LF_MESSAGE
      others                = 99.
  if SY-SUBRC   ne 0 and
     LF_MESSAGE is not initial.
    message LF_MESSAGE type 'W'.
  endif.

endmethod.
method HANDLE_USER_COMMAND.

  data:  LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_FCODE_SHOW_MGRPV_LIMIT.
          ME->HANDLE_UC_SHOW_MGRPV( IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).

        when C_FCODE_SHOW_MGRPV_SPEED.
          ME->HANDLE_UC_SHOW_MGRPV( IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_SPEED ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
  endtry.

endmethod.
method REFRESH_GRID.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.

*** Build Dynamic Table with columns for all Work Center
  ME->BUILD_DYN_TABLE( ).

  SUPER->REFRESH_GRID( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Register Event Handler
  set handler ME->HANDLE_BUTTON_CLICK          for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK          for ME->R_GRID.
  set handler ME->HANDLE_HOTSPOT_CLICK         for ME->R_GRID.
  set handler ME->HANDLE_CONTEXT_MENU_REQUEST  for ME->R_GRID.
  set handler ME->HANDLE_USER_COMMAND          for ME->R_GRID.

endmethod.
