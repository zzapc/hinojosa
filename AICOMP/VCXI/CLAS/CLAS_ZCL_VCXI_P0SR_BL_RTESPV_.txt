
class ZCL_VCXI_P0SR_BL_RTESPV definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_RTESPV
  create public .

public section.

  methods SET_P0_BL_PRTE_AS
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_COMP_RTESEL type ZVCXI_P0SR_TT_COMP_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
      !IT_CPM_RTESEL type ZVCXI_P0SR_TT_CPM_RTESEL
    raising
      /VCXI/CX_CKX .
  methods SET_P0_BL_PRTE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL optional
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
      !IT_CPM_RTESEL type ZVCXI_P0SR_TT_CPM_RTESEL optional
    raising
      /VCXI/CX_CKX .
protected section.

  methods ADD_SKIPFEED
    importing
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ATYPE type ref to /VCXI/CL_VSMC_ATYPE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_COMPO_SE
    importing
      !IR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_COMP_SE_RTESEL type ZVCXI_P0SR_TT_COMP_SE_RTESEL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_CB
    importing
      !IR_SPVRE_LASHT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RTESEL_CB type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_COMPO
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_COMP_RTESEL type ZVCXI_P0SR_TT_COMP_RTESEL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_CPM
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_CPM_RTESEL type ZVCXI_P0SR_TT_CPM_RTESEL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_LAMI
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods BUILD_STRUCT_UCB
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RTESEL_UCB type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_COMPO_CONNECT
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_COMP_RTESEL type ZVCXI_P0SR_TT_COMP_RTESEL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CPM_CONNECT
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_CPM_RTESEL type ZVCXI_P0SR_TT_CPM_RTESEL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_LAMI_CONNECT
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL
    raising
      /VCXI/CX_CKX .

  methods PROCESS_RTE_ARBPL
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_RTESPV definition
class ZCL_VCXI_P0SR_BL_RTESPV implementation.
method ADD_SKIPFEED.

  data:  LF_ID              type        /VCXI/CKX_ID.
  data:  LR_SPVCE           type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_SKIPFEED  type ref to /VCXI/CL_VKSR_SPVRE.

  check IR_ATYPE is bound.
  move IR_ATYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.

***----------------------------------------------------------------------------
*** Get Customizing Element for Manager
  LR_SPVCE = ME->GET_SPVCE( IF_ID           = LF_ID
                            IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_SKIPFEED
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ARBPL.
  append LR_SPVRE_SKIPFEED to CT_SPVRE.

*** Set in Use
  LR_SPVRE_SKIPFEED->SET_INUSE( IF_INUSE = ABAP_TRUE ).

endmethod.
method BUILD_STRUCT_CB.

  data:  LF_IMFXC_OUT     type        ZVCXI_XCSP_IMFXC.
  data:  LR_SPVRE_GRP     type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
         LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element for Conversion Group
  LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'GRP_CONV'
                            IR_SPVCE_PARENT = IR_SPVRE_LASHT->R_SPVCE ).
  create object LR_SPVRE_GRP
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_LASHT.
  append LR_SPVRE_GRP to CT_SPVRE.

***------------------------------------------------------------------------------------------------
*** Process Work Center
  check IR_RTESEL_CB is bound and
        IR_RTESEL_CB->R_RTE_PRTE is bound.
  loop at IR_RTESEL_CB->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

*** Define MF X-connect
    at last.
      move IF_IMFXC to LF_IMFXC_OUT.
    endat.

*** Set MF X-Connect
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
      if LF_IMFXC_OUT is not initial.
        append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
      endif.
    endloop.

*** Process Work Center
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_LASHT
                                     IR_RTE_ARBPL   = LR_RTE_ARBPL
                                     IR_BL_PRTE     = IR_RTESEL_CB
                           changing  CT_SPVRE       = CT_SPVRE ).

  endloop.

endmethod.
method BUILD_STRUCT_COMPO.

  data:  LF_IMFXC_IN       type        ZVCXI_XCSP_IMFXC,
         LF_IMFXC_OUT      type        ZVCXI_XCSP_IMFXC,
         LF_INDEX          type        STRING.
  data:  LS_COMP_RTESEL    type        ZVCXI_P0SR_S_COMP_RTESEL,
         LS_LAMI_RTESEL    type        ZVCXI_P0SR_S_LAMI_RTESEL.
  data:  LR_SPVRE_COMPS    type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_COMP     type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_GRP      type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVCE          type ref to /VCXI/CL_VKSC_SPVCE,
         LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP       type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_LAMI  type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI.

***------------------------------------------------------------------------------------------------
*** Find/Create Component Manager (COMPS)
  ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                           IF_ID           = 'COMPS'
                 importing ER_SPVRE        = LR_SPVRE_COMPS
                 changing  CT_SPVRE        = CT_SPVRE ).

***------------------------------------------------------------------------------------------------
*** Build Components
  loop at IT_COMP_RTESEL into LS_COMP_RTESEL.
    check LS_COMP_RTESEL-R_RTESEL is bound and
          LS_COMP_RTESEL-R_RTESEL->R_RTE_PRTE is bound.

*** Get Customizing Element for Component
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'COMP'
                              IR_SPVCE_PARENT = LR_SPVRE_COMPS->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_COMP
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = LR_SPVRE_COMPS.
    append LR_SPVRE_COMP to CT_SPVRE.

***------------------------------------------------------------------------------------------------
*** Update MF X-Connect
    loop at LS_COMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Define MF X-connect
      move LF_IMFXC_OUT to LF_IMFXC_IN.
      move SY-TABIX     to LF_INDEX.
      concatenate LS_COMP_RTESEL-IMFXC '@' LF_INDEX into LF_IMFXC_OUT.
      at last.
        move LS_COMP_RTESEL-IMFXC to LF_IMFXC_OUT.
      endat.

***   Set MF X-Connect
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
        if LF_IMFXC_IN is not initial.
          append LF_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
        endif.
        if LF_IMFXC_OUT is not initial.
          append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
        endif.
      endloop.
    endloop.

***------------------------------------------------------------------------------------------------
*** Build Structure of Lamination
    if LS_COMP_RTESEL-T_LAMI_RTESEL is not initial.
***   Get Customizing Element for Conversion Group
      LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'GRP_LASHT'
                                IR_SPVCE_PARENT = LR_SPVRE_COMP->R_SPVCE ).
      create object LR_SPVRE_GRP
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = LR_SPVRE_COMP.
      append LR_SPVRE_GRP to CT_SPVRE.

***   Build Structure
      ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_COMP
                                       IT_LAMI_RTESEL  = LS_COMP_RTESEL-T_LAMI_RTESEL
                             changing  CT_SPVRE        = CT_SPVRE ).

***   Update Lamination for Connection
      ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LS_COMP_RTESEL-R_RTESEL
                               IT_LAMI_RTESEL = LS_COMP_RTESEL-T_LAMI_RTESEL ).

    endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
    loop at LS_COMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Process Work Center
      ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_COMP
                                       IR_RTE_ARBPL   = LR_RTE_ARBPL
                                       IR_BL_PRTE     = LS_COMP_RTESEL-R_RTESEL
                             changing  CT_SPVRE       = CT_SPVRE ).

    endloop.
  endloop.

endmethod.
method BUILD_STRUCT_COMPO_SE.

  data:          LF_INDEX            type        STRING.
  data:          LS_COMP_SE_RTESEL   type        ZVCXI_P0SR_S_COMP_SE_RTESEL.
  data:          LR_SPVRE_COMPS      type ref to /VCXI/CL_VKSR_SPVRE,
                 LR_SPVRE_COMP       type ref to /VCXI/CL_VKSR_SPVRE,
                 LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
                 LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_BL_PSTEP         type ref to ZCL_VCXI_XCSR_BL_PSTEP.
  field-symbols: <F_IMFXC_IN>        type        ZVCXI_XCSP_IMFXC,
                 <F_NEXTL>           type        ZVCXI_XCSP_NEXTL.



  check IT_COMP_SE_RTESEL is not initial.

***------------------------------------------------------------------------------------------------
*** Find Component Manager (COMPS)
  ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_ROOT
                           IF_ID           = 'COMPS'
                 importing ER_SPVRE        = LR_SPVRE_COMPS
                 changing  CT_SPVRE        = CT_SPVRE ).

***------------------------------------------------------------------------------------------------
*** Build Components
  loop at IT_COMP_SE_RTESEL into LS_COMP_SE_RTESEL.
*** Get Customizing Element for Component
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'COMP'
                              IR_SPVCE_PARENT = LR_SPVRE_COMPS->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_COMP
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = LR_SPVRE_COMPS.
    append LR_SPVRE_COMP to CT_SPVRE.

***------------------------------------------------------------------------------------------------
*** Build Structure for CPM
    if LS_COMP_SE_RTESEL-T_CPM_RTESEL is not initial.
      ME->BUILD_STRUCT_CPM( exporting IR_SPVRE_PARENT = LR_SPVRE_COMP
                                      IT_CPM_RTESEL   = LS_COMP_SE_RTESEL-T_CPM_RTESEL
                            changing  CT_SPVRE        = CT_SPVRE ).

      ME->UPDATE_CPM_CONNECT( IR_BL_PRTE    = LS_COMP_SE_RTESEL-R_RTESEL
                              IT_CPM_RTESEL = LS_COMP_SE_RTESEL-T_CPM_RTESEL ).
    endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
    check LS_COMP_SE_RTESEL-R_RTESEL is bound and
          LS_COMP_SE_RTESEL-R_RTESEL->R_RTE_PRTE is bound.
    loop at LS_COMP_SE_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Define MF X-connect
      move SY-TABIX     to LF_INDEX.

***   Set MF X-Connect to first Workcenter and Pstep
      read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

***   If first Work Center
      if LF_INDEX eq 1.
***     Update first X-connect
        read table LR_BL_PSTEP->T_IMFXC_IN assigning <F_IMFXC_IN> index 1.
        if SY-SUBRC ne 0.
          append initial line to LR_BL_PSTEP->T_IMFXC_IN assigning <F_IMFXC_IN>.
        endif.
        move LS_COMP_SE_RTESEL-IMFXC to <F_IMFXC_IN>.

***     Update first Next Level Flag
        read table LR_BL_PSTEP->T_NEXTL assigning <F_NEXTL> index 1.
        if SY-SUBRC ne 0.
          append initial line to LR_BL_PSTEP->T_NEXTL assigning <F_NEXTL>.
        endif.
        move ABAP_TRUE to <F_NEXTL>.
      endif.

***   Process Work Center
      ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_COMP
                                       IR_RTE_ARBPL   = LR_RTE_ARBPL
                                       IR_BL_PRTE     = LS_COMP_SE_RTESEL-R_RTESEL
                             changing  CT_SPVRE       = CT_SPVRE ).

    endloop.
  endloop.

endmethod.
method BUILD_STRUCT_CPM.

  data:  LF_PPASS                  type        N length 2,
         LF_IMFXC_OUT              type        ZVCXI_XCSP_IMFXC.
  data:  LS_CPM_RTESEL             type        ZVCXI_P0SR_S_CPM_RTESEL,
         LS_COMP_RTESEL            type        ZVCXI_P0SR_S_COMP_RTESEL.
  data:  LR_SPVRE_GRP_CPMCNF       type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_GRP              type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_CPM              type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVCE_CPM              type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVCE                  type ref to /VCXI/CL_VKSC_SPVCE,
         LR_OBJECT                 type ref to /VCXI/IF_CKX_OBJECT,
         LR_RTE_ARBPL              type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP              type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_CLOS_AS       type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS_AS,
         LR_BL_PSTEP               type ref to ZCL_VCXI_P0SR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Find/Create Group
  ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                           IF_ID           = 'GRP_CPMCNF'
                 importing ER_SPVRE        = LR_SPVRE_GRP_CPMCNF
                 changing  CT_SPVRE        = CT_SPVRE ).
  check LR_SPVRE_GRP_CPMCNF is bound.

*** Process all Configured Packaging Materials
  loop at IT_CPM_RTESEL into LS_CPM_RTESEL.
    clear LF_IMFXC_OUT.

***------------------------------------------------------------------------------------------------
*** Build Configured Packaging Material
    LR_SPVCE_CPM = ME->GET_SPVCE( IF_ID           = LS_CPM_RTESEL-SPVCE_ID
                                  IR_SPVCE_PARENT = LR_SPVRE_GRP_CPMCNF->R_SPVCE ).

    create object LR_SPVRE_CPM
      exporting
        IR_SPVCE  = LR_SPVCE_CPM
        IR_PARENT = LR_SPVRE_GRP_CPMCNF.
    append LR_SPVRE_CPM to CT_SPVRE.

*** Create all Groups
    loop at ME->T_SPVCE into LR_OBJECT.
      move LR_OBJECT ?to LR_SPVCE.

      if LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) ne LR_SPVCE_CPM.
        clear: LR_SPVCE.
        continue.
      endif.

      create object LR_SPVRE_GRP
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = LR_SPVRE_CPM.
      append LR_SPVRE_GRP to CT_SPVRE.
    endloop.

***------------------------------------------------------------------------------------------------
*** Build AS Components if needed
    if LS_CPM_RTESEL-T_COMP_RTESEL is not initial.
      ME->BUILD_STRUCT_COMPO( exporting IR_SPVRE_PARENT = LR_SPVRE_CPM
                                        IT_COMP_RTESEL  = LS_CPM_RTESEL-T_COMP_RTESEL
                              changing  CT_SPVRE        = CT_SPVRE ).

***   Define MF X-connect In for AS
      check LS_CPM_RTESEL-R_RTESEL is bound and
            LS_CPM_RTESEL-R_RTESEL->R_RTE_PRTE is bound.
      loop at LS_CPM_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***     Find PPass
        clear LF_PPASS.
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
          try.
              move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CLOS_AS.
              check LR_BL_PSTEP_CLOS_AS is bound.
              move LR_BL_PSTEP_CLOS_AS->F_PPASS to LF_PPASS.
            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.
        endloop.

***     Set MF X-Connect
        loop at LS_CPM_RTESEL-T_COMP_RTESEL into LS_COMP_RTESEL
                                            where PPASS eq LF_PPASS.
          append LS_COMP_RTESEL-IMFXC to LR_BL_PSTEP_CLOS_AS->T_IMFXC_IN.
          append ABAP_TRUE to LR_BL_PSTEP_CLOS_AS->T_NEXTL.
        endloop.
      endloop.
    endif.

***----------------------------------------------------------------------------
*** Process Work Center
    loop at LS_CPM_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Define MF X-connect Out
      at last.
        move LS_CPM_RTESEL-IMFXC to LF_IMFXC_OUT.
      endat.

***   Set MF X-Connect
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
        if LF_IMFXC_OUT is not initial.
          append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
        endif.
      endloop.

***   Process Work Center
      ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_CPM
                                       IR_RTE_ARBPL   = LR_RTE_ARBPL
                                       IR_BL_PRTE     = LS_CPM_RTESEL-R_RTESEL
                             changing  CT_SPVRE       = CT_SPVRE ).

    endloop.

  endloop.

endmethod.
method BUILD_STRUCT_LAMI.

  data:  LF_IMFXC             type        ZVCXI_XCSP_IMFXC.
  data:  LS_LAMI_RTESEL       type        ZVCXI_P0SR_S_LAMI_RTESEL.
  data:  LR_SPVRE_GRP_LASHT   type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVRE_LASHT       type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVCE             type ref to /VCXI/CL_VKSC_SPVCE,
         LR_RTE_ARBPL         type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP         type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP          type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Find/Create Group
  ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                           IF_ID           = 'GRP_LASHT'
                 importing ER_SPVRE        = LR_SPVRE_GRP_LASHT
                 changing  CT_SPVRE        = CT_SPVRE ).
  check LR_SPVRE_GRP_LASHT is bound.

*** Process all Laminating Boards
  loop at IT_LAMI_RTESEL into LS_LAMI_RTESEL.
    clear LF_IMFXC.

***------------------------------------------------------------------------------------------------
*** Build Laminating Board
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'LASHT'
                              IR_SPVCE_PARENT = LR_SPVRE_GRP_LASHT->R_SPVCE ).

    create object LR_SPVRE_LASHT
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = LR_SPVRE_GRP_LASHT.
    append LR_SPVRE_LASHT to CT_SPVRE.

***------------------------------------------------------------------------------------------------
*** Build Unconverted Board
    if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
      if LS_LAMI_RTESEL-R_RTESEL_CB is not bound.
        move LS_LAMI_RTESEL-IMFXC to LF_IMFXC.
      endif.

***   Build Structure
      ME->BUILD_STRUCT_UCB( exporting IR_SPVRE_PARENT = LR_SPVRE_LASHT
                                      IR_RTESEL_UCB   = LS_LAMI_RTESEL-R_RTESEL_UCB
                                      IF_IMFXC        = LF_IMFXC
                            changing  CT_SPVRE        = CT_SPVRE ).
    endif.

***------------------------------------------------------------------------------------------------
*** Build Converted Board
    if LS_LAMI_RTESEL-R_RTESEL_CB is bound.

***   Update Connection to UCB
      if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
        read table LS_LAMI_RTESEL-R_RTESEL_CB->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
        if SY-SUBRC eq 0.
          loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
            try.
                move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
                if LR_BL_PSTEP is bound.
***               Define "Next Level" Flag
                  append ABAP_TRUE to LR_BL_PSTEP->T_NEXTL.     "Next Level Flag for UCB
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                continue.
            endtry.
          endloop.
        endif.
      endif.

***   Build Structure
      ME->BUILD_STRUCT_CB( exporting IR_SPVRE_LASHT = LR_SPVRE_LASHT
                                     IR_RTESEL_CB   = LS_LAMI_RTESEL-R_RTESEL_CB
                                     IF_IMFXC       = LS_LAMI_RTESEL-IMFXC
                           changing  CT_SPVRE       = CT_SPVRE ).
    endif.
  endloop.

endmethod.
method BUILD_STRUCT_UCB.

  data:  LF_IMFXC_OUT     type        ZVCXI_XCSP_IMFXC.
  data:  LR_SPVRE_GRP     type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
         LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element for Reel Cutting Group
  loop at CT_SPVRE into LR_SPVRE_GRP.
    if LR_SPVRE_GRP->R_PARENT  eq IR_SPVRE_PARENT and
       LR_SPVRE_GRP->GET_ID( ) eq 'GRP_RCUT'.
      exit.
    else.
      clear LR_SPVRE_GRP.
    endif.
  endloop.
  if LR_SPVRE_GRP is not bound.
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'GRP_RCUT'
                              IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).
    create object LR_SPVRE_GRP
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_GRP to CT_SPVRE.
  endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
  check IR_RTESEL_UCB is bound and
        IR_RTESEL_UCB->R_RTE_PRTE is bound.
  loop at IR_RTESEL_UCB->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

*** Define MF X-connect
    at last.
      move IF_IMFXC to LF_IMFXC_OUT.
    endat.

*** Set MF X-Connect
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
      if LF_IMFXC_OUT is not initial.
        append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
      endif.
    endloop.

*** Process Work Center
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_PARENT
                                     IR_RTE_ARBPL   = LR_RTE_ARBPL
                                     IR_BL_PRTE     = IR_RTESEL_UCB
                           changing  CT_SPVRE       = CT_SPVRE ).

  endloop.

endmethod.
method PROCESS_RTE_ARBPL.

  data: LR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH,
        LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_ATYPE     type ref to /VCXI/CL_VSMC_ATYPE.


  SUPER->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                      IR_RTE_ARBPL   = IR_RTE_ARBPL
                                      IR_BL_PRTE     = IR_BL_PRTE
                            importing ER_SPVRE_ARBPL = ER_SPVRE_ARBPL
                            changing  CT_SPVRE       = CT_SPVRE ).

***----------------------------------------------------------------------------
  if ER_SPVRE_ARBPL            is bound and
     ER_SPVRE_ARBPL->GET_ID( ) eq 'CONV'.

*** Get Customizing Instance of Machine
    LR_RTE_CMACH = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
                                                          IF_DATE  = IR_BL_PRTE->F_DATE
                                                          IF_LCVAL = IR_RTE_ARBPL->F_LCVAL ).

***----------------------------------------------------------------------------
*** Set Limits
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
***   Initialize Limits
      LR_RTE_PSTEP->INIT_LIMIT( ).
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          check LR_BL_PSTEP is bound.
          LR_BL_PSTEP->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***----------------------------------------------------------------------------
*** Check if Skip Feed is active
    LR_ATYPE = ZCL_VCXI_P0SR_BL_PRTE=>IS_SKIPFEED_ACTIVE( IR_RTE_CMACH = LR_RTE_CMACH
                                                          IR_RTE_ARBPL = IR_RTE_ARBPL ).
    if LR_ATYPE is bound.
***   Add Skip Feed
      ME->ADD_SKIPFEED( exporting IR_SPVRE_ARBPL = ER_SPVRE_ARBPL
                                  IR_ATYPE       = LR_ATYPE
                        changing  CT_SPVRE       = CT_SPVRE ).
    endif.
  endif.

endmethod.
method SET_P0_BL_PRTE.

  data:          LS_LAMI_RTESEL      type        ZVCXI_P0SR_S_LAMI_RTESEL,
                 LS_CPM_RTESEL       type        ZVCXI_P0SR_S_CPM_RTESEL.
  data:          LT_LAMI_RTESEL      type        ZVCXI_P0SR_TT_LAMI_RTESEL,
                 LT_CPM_RTESEL       type        ZVCXI_P0SR_TT_CPM_RTESEL,
                 LT_SPVRE_NEW        type        /VCXI/VKSR_TT_SPVRE.
  data:          LR_BL_PRTE          type ref to ZCL_VCXI_XCSR_BL_PRTE,
                 LR_SPVRE_ROOT       type ref to /VCXI/CL_VKSR_SPVRE,
                 LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL.
  field-symbols: <S_COMP_RTESEL>     type        ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL>     type        ZVCXI_P0SR_S_LAMI_RTESEL.

  check IR_BL_PRTE is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
  move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.

  loop at IT_LAMI_RTESEL into LS_LAMI_RTESEL.
    if LS_LAMI_RTESEL-R_RTESEL_CB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_CB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_CB.
    endif.
    if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_UCB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_UCB.
    endif.
    append LS_LAMI_RTESEL to LT_LAMI_RTESEL.
  endloop.

  loop at IT_CPM_RTESEL into LS_CPM_RTESEL.
    move LS_CPM_RTESEL-R_RTESEL->COPY( ) to LS_CPM_RTESEL-R_RTESEL.

    loop at LS_CPM_RTESEL-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
      move <S_COMP_RTESEL>-R_RTESEL->COPY( ) to <S_COMP_RTESEL>-R_RTESEL.

      loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
        if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
        endif.
        if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
        endif.
      endloop.
    endloop.
    append LS_CPM_RTESEL to LT_CPM_RTESEL.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build own Structure
  ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                              IS_EXQTY      = IS_EXQTY
                    importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                    changing  CT_SPVRE      = LT_SPVRE_NEW ).

***------------------------------------------------------------------------------------------------
*** Build Structure of Configured Packaging Material
  if LT_CPM_RTESEL is not initial.
    ME->BUILD_STRUCT_CPM( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                    IT_CPM_RTESEL   = LT_CPM_RTESEL
                          changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update CPM for Connection
    ME->UPDATE_CPM_CONNECT( IR_BL_PRTE    = LR_BL_PRTE
                            IT_CPM_RTESEL = LT_CPM_RTESEL ).

  endif.

***------------------------------------------------------------------------------------------------
*** Build Structure of Lamination
  if LT_LAMI_RTESEL is not initial.
    ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                     IT_LAMI_RTESEL  = LT_LAMI_RTESEL
                           changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Lamination for Connection
    ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                             IT_LAMI_RTESEL = LT_LAMI_RTESEL ).
  endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT = LR_SPVRE_ROOT
                                     IR_RTE_ARBPL  = LR_RTE_ARBPL
                                     IR_BL_PRTE    = LR_BL_PRTE
                           changing  CT_SPVRE      = LT_SPVRE_NEW ).
  endloop.

***------------------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
  ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

endmethod.
method SET_P0_BL_PRTE_AS.

  data:          LS_COMP_RTESEL      type        ZVCXI_P0SR_S_COMP_RTESEL,
                 LS_CPM_RTESEL       type        ZVCXI_P0SR_S_CPM_RTESEL.
  data:          LT_COMP_RTESEL      type        ZVCXI_P0SR_TT_COMP_RTESEL,
                 LT_CPM_RTESEL       type        ZVCXI_P0SR_TT_CPM_RTESEL,
                 LT_SPVRE_NEW        type        /VCXI/VKSR_TT_SPVRE.
  data:          LR_BL_PRTE          type ref to ZCL_VCXI_XCSR_BL_PRTE,
                 LR_SPVRE_ROOT       type ref to /VCXI/CL_VKSR_SPVRE,
                 LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL.
  field-symbols: <S_COMP_RTESEL>     type        ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL>     type        ZVCXI_P0SR_S_LAMI_RTESEL.

  check IR_BL_PRTE is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
  move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.

  loop at IT_COMP_RTESEL into LS_COMP_RTESEL.
    move LS_COMP_RTESEL-R_RTESEL->COPY( ) to LS_COMP_RTESEL-R_RTESEL.

    loop at LS_COMP_RTESEL-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
      if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
        move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
      endif.
      if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
        move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
      endif.
    endloop.
    append LS_COMP_RTESEL to LT_COMP_RTESEL.
  endloop.


  loop at IT_CPM_RTESEL into LS_CPM_RTESEL.
    move LS_CPM_RTESEL-R_RTESEL->COPY( ) to LS_CPM_RTESEL-R_RTESEL.

    loop at LS_CPM_RTESEL-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
      move <S_COMP_RTESEL>-R_RTESEL->COPY( ) to <S_COMP_RTESEL>-R_RTESEL.

      loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
        if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
        endif.
        if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
        endif.

      endloop.
    endloop.
    append LS_CPM_RTESEL to LT_CPM_RTESEL.
  endloop.

***----------------------------------------------------------------------------
*** Build Structure
  ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                              IS_EXQTY      = IS_EXQTY
                    importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                    changing  CT_SPVRE      = LT_SPVRE_NEW ).

*** Build Structure of Configured Packaging Material
  if LT_CPM_RTESEL is not initial.
    ME->BUILD_STRUCT_CPM( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                    IT_CPM_RTESEL   = LT_CPM_RTESEL
                          changing  CT_SPVRE        = LT_SPVRE_NEW ).
  endif.

*** Build Structure of Components
  ME->BUILD_STRUCT_COMPO( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                    IT_COMP_RTESEL  = LT_COMP_RTESEL
                          changing  CT_SPVRE        = LT_SPVRE_NEW ).


***----------------------------------------------------------------------------
*** Update X-connects
  ME->UPDATE_COMPO_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                            IT_COMP_RTESEL = LT_COMP_RTESEL ).

  if LT_CPM_RTESEL is not initial.
    ME->UPDATE_CPM_CONNECT( exporting IR_BL_PRTE    = LR_BL_PRTE
                                      IT_CPM_RTESEL = LT_CPM_RTESEL ).
  endif.

*** Process Work Center
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_ROOT
                                     IR_RTE_ARBPL   = LR_RTE_ARBPL
                                     IR_BL_PRTE     = LR_BL_PRTE
                           changing  CT_SPVRE       = LT_SPVRE_NEW ).
  endloop.

***----------------------------------------------------------------------------
*** Set Supervised Runtime Elements
  ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

endmethod.
method UPDATE_COMPO_CONNECT.

  data:  LF_PPASS             type        N length 2,
         LF_IMFXC_IN          type        ZVCXI_XCSP_IMFXC,
         LF_IMFXC_OUT         type        ZVCXI_XCSP_IMFXC.
  data:  LS_COMP_RTESEL       type        ZVCXI_P0SR_S_COMP_RTESEL.
  data:  LR_RTE_ARBPL         type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP         type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP          type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_CLOS_AS  type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS_AS,
         LR_BL_PSTEP_GRP_AS   type ref to ZCL_VCXI_P0SR_BL_PSTEP_GRP_AS,
         LR_BL_PSTEP_UNIT_AS  type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS.

*** Update of Component Connection
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
*** Find PPass
    clear LF_PPASS.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CLOS_AS.
          check LR_BL_PSTEP_CLOS_AS is bound.
          move LR_BL_PSTEP_CLOS_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_GRP_AS.
          check LR_BL_PSTEP_GRP_AS is bound.
          move LR_BL_PSTEP_GRP_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_UNIT_AS.
          check LR_BL_PSTEP_UNIT_AS is bound.
          move LR_BL_PSTEP_UNIT_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.

*** Define MF X-connect
    move LF_IMFXC_OUT to LF_IMFXC_IN.

    if LF_PPASS is not initial.
      concatenate 'OP_J' LF_PPASS into LF_IMFXC_OUT.
    else.
      clear LF_IMFXC_OUT.
    endif.

*** Do not set it for the last Work Center
    at last.
      clear LF_IMFXC_OUT.
    endat.

*** Set MF X-Connect
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
      if LF_PPASS ne 1.
        append LF_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
        append SPACE       to LR_BL_PSTEP->T_NEXTL.
      endif.
      loop at IT_COMP_RTESEL into LS_COMP_RTESEL
                            where PPASS eq LF_PPASS.
        append LS_COMP_RTESEL-IMFXC to LR_BL_PSTEP->T_IMFXC_IN.
        append SPACE                to LR_BL_PSTEP->T_NEXTL.
      endloop.

      if LF_IMFXC_OUT is not initial.
        append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
      endif.
    endloop.
  endloop.

endmethod.
method UPDATE_CPM_CONNECT.

  data:  LF_INDEX_SHUNT_UNIT type        N length 3,
         LF_INDEX_SHUNT_GRP  type        N length 3,
         LF_INDEX_CHECK      type        N length 3,
         LF_ID               type        /VCXI/CKX_ID.
  data:  LS_CPM_RTESEL       type        ZVCXI_P0SR_S_CPM_RTESEL.
  data:  LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_UNIT    type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT,
         LR_BL_PSTEP_GRP     type ref to ZCL_VCXI_P0SR_BL_PSTEP_GRP.

*** Update CPM Connection
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_UNIT.
          if LR_BL_PSTEP_UNIT is bound.
            add 1 to LF_INDEX_SHUNT_UNIT.
            loop at IT_CPM_RTESEL into LS_CPM_RTESEL
                                  where SHUNT = LR_BL_PSTEP_UNIT->F_SHUNT.

***           Check its right CPM
              split LS_CPM_RTESEL-IMFXC at SPACE into LF_ID LF_INDEX_CHECK.
              check LF_INDEX_SHUNT_UNIT eq LF_INDEX_CHECK.

***           Define MF X-Connect
              if LR_BL_PSTEP_UNIT->T_IMFXC_IN is initial.
                append SPACE              to LR_BL_PSTEP_UNIT->T_IMFXC_IN.  "X-Connect for Normal In
              endif.
              append LS_CPM_RTESEL-IMFXC  to LR_BL_PSTEP_UNIT->T_IMFXC_IN.  "X-Connect for CPM

***           Define "Next Level" Flag
              if LR_BL_PSTEP_UNIT->T_NEXTL is initial.
                append ABAP_FALSE         to LR_BL_PSTEP_UNIT->T_NEXTL.     "Next Level Flag for Normal In
              endif.
              append ABAP_TRUE            to LR_BL_PSTEP_UNIT->T_NEXTL.     "Next Level Flag for CPM
            endloop.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_PSTEP_UNIT.
      endtry.

      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_GRP.
          if LR_BL_PSTEP_GRP is bound.
            add 1 to LF_INDEX_SHUNT_GRP.
            loop at IT_CPM_RTESEL into LS_CPM_RTESEL
                                  where SHUNT = LR_BL_PSTEP_GRP->F_SHUNT.

***           Check its right CPM
              split LS_CPM_RTESEL-IMFXC at SPACE into LF_ID LF_INDEX_CHECK.
              check LF_INDEX_SHUNT_GRP eq LF_INDEX_CHECK.

***           Define MF X-Connect
              if LR_BL_PSTEP_GRP->T_IMFXC_IN is initial.
                append SPACE              to LR_BL_PSTEP_GRP->T_IMFXC_IN.  "X-Connect for Normal In
              endif.
              append LS_CPM_RTESEL-IMFXC  to LR_BL_PSTEP_GRP->T_IMFXC_IN.  "X-Connect for CPM

***           Define "Next Level" Flag
              if LR_BL_PSTEP_GRP->T_NEXTL is initial.
                append ABAP_FALSE         to LR_BL_PSTEP_GRP->T_NEXTL.     "Next Level Flag for Normal In
              endif.
              append ABAP_TRUE            to LR_BL_PSTEP_GRP->T_NEXTL.     "Next Level Flag for CPM
            endloop.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_PSTEP_GRP.
      endtry.
    endloop.
  endloop.

endmethod.
method UPDATE_LAMI_CONNECT.

  data:  LS_LAMI_RTESEL    type        ZVCXI_P0SR_S_LAMI_RTESEL.
  data:  LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_LAMI  type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI.

*** Update Lamination Connection
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_LAMI.
          if LR_BL_PSTEP_LAMI is bound.
            read table IT_LAMI_RTESEL into LS_LAMI_RTESEL
                                      with key LASID = LR_BL_PSTEP_LAMI->F_LASID.
            check SY-SUBRC eq 0.

***         Define MF X-Connect
            if LR_BL_PSTEP_LAMI->T_IMFXC_IN is initial.
              append SPACE                to LR_BL_PSTEP_LAMI->T_IMFXC_IN.  "X-Connect for Normal In
            endif.
            append LS_LAMI_RTESEL-IMFXC to LR_BL_PSTEP_LAMI->T_IMFXC_IN.  "X-Connect for Solid Board

***         Define "Next Level" Flag
            if LR_BL_PSTEP_LAMI->T_NEXTL is initial.
              append ABAP_FALSE           to LR_BL_PSTEP_LAMI->T_NEXTL.     "Next Level Flag for Normal In
            endif.
            append ABAP_TRUE            to LR_BL_PSTEP_LAMI->T_NEXTL.     "Next Level Flag for Solid Board
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
  endloop.

endmethod.
