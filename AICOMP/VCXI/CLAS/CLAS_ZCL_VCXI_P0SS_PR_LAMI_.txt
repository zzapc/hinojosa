
class ZCL_VCXI_P0SS_PR_LAMI definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_CALIP .
  interfaces ZIF_VCXI_P0SS_PRALLOC .
  interfaces ZIF_VCXI_P0SS_WEIGHT .

  aliases C_IEVNT_O_CALIP_CHANGED
    for ZIF_VCXI_P0SS_CALIP~C_IEVNT_O_CALIP_CHANGED .
  aliases C_IEVNT_O_WDRYW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WDRYW_CHANGED .
  aliases C_IEVNT_O_WWETW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WWETW_CHANGED .
  aliases GET_CALIP
    for ZIF_VCXI_P0SS_CALIP~GET_CALIP .
  aliases GET_WDRYW
    for ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW .
  aliases GET_WWETW
    for ZIF_VCXI_P0SS_WEIGHT~GET_WWETW .

  constants C_IPRVT_P0_LAMI type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_LAMI'. "#EC NOTEXT
  constants C_PARID_LASID type /VCXI/VKS_PARID value 'ZVCXI_P0_LASID'. "#EC NOTEXT
  constants C_PARID_OLLEN type /VCXI/VKS_PARID value 'ZVCXI_P0_OLLEN'. "#EC NOTEXT
  constants C_PARID_OLWID type /VCXI/VKS_PARID value 'ZVCXI_P0_OLWID'. "#EC NOTEXT
  constants C_PARID_RLAMI type /VCXI/VKS_PARID value 'ZVCXI_P0_RLAMI'. "#EC NOTEXT
  constants C_PARID_TLAGC type /VCXI/VKS_PARID value 'ZVCXI_P0_TLAGC'. "#EC NOTEXT
  constants C_PARID_TLAMI type /VCXI/VKS_PARID value 'ZVCXI_P0_TLAMI'. "#EC NOTEXT

  methods IS_PRINT_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TLAGC
    returning
      value(RT_TLAGC) type ZVCXI_P0SS_TT_TLAGC
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TLAMI
    returning
      value(RT_TLAMI) type ZVCXI_P0SS_TT_TLAMI
    raising
      /VCXI/CX_CKX .
  methods CREATE_VLASH
    importing
      !IF_VLASH type ZVCXI_P0SS_VLASH
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VLASH
    returning
      value(RT_VLASH) type ZVCXI_P0SS_TT_VLASH
    raising
      /VCXI/CX_CKX .
  methods GET_VLASH
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_OLLEN
    returning
      value(RS_OLLEN) type ZVCXI_P0SS_S_OLLEN
    raising
      /VCXI/CX_CKX .
  methods GET_OLWID
    returning
      value(RS_OLWID) type ZVCXI_P0SS_S_OLWID
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPT
    returning
      value(RF_NOUPT) type ZVCXI_P0SS_NOUPT
    raising
      /VCXI/CX_CKX .
  methods GET_RLAMI
    returning
      value(RF_RLAMI) type ZVCXI_P0SS_RLAMI
    raising
      /VCXI/CX_CKX .
  methods GET_LASID
    returning
      value(RF_LASID) type ZVCXI_P0SS_LASID
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLL
    returning
      value(RS_SHTLL) type ZVCXI_P0SS_S_SHTLL
    raising
      /VCXI/CX_CKX .
  methods GET_LASID_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHTGL
    returning
      value(RS_SHTGL) type ZVCXI_P0SS_S_SHTGL
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLW
    returning
      value(RS_SHTLW) type ZVCXI_P0SS_S_SHTLW
    raising
      /VCXI/CX_CKX .
  methods GET_SHTGW
    returning
      value(RS_SHTGW) type ZVCXI_P0SS_S_SHTGW
    raising
      /VCXI/CX_CKX .
  methods GET_TLAGC
    returning
      value(RF_TLAGC) type ZVCXI_P0SS_TLAGC
    raising
      /VCXI/CX_CKX .
  methods GET_TLAMI
    returning
      value(RF_TLAMI) type ZVCXI_P0SS_TLAMI
    raising
      /VCXI/CX_CKX .
  methods SET_OLLEN
    importing
      !IS_OLLEN type ZVCXI_P0SS_S_OLLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OLWID
    importing
      !IS_OLWID type ZVCXI_P0SS_S_OLWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LASID
    importing
      !IF_LASID type ZVCXI_P0SS_LASID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLAMI
    importing
      !IF_RLAMI type ZVCXI_P0SS_RLAMI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLAGC
    importing
      !IF_TLAGC type ZVCXI_P0SS_TLAGC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLAMI
    importing
      !IF_TLAMI type ZVCXI_P0SS_TLAMI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_NOUPT type /VCXI/VKSC_IEVNT value 'RECALC_NOUPT'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_SHTL type /VCXI/VKSC_IEVNT value 'RECALC_SHTL'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_WDRYW_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_WDRYW_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_WWETW_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_WWETW_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_NOUPT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_OVERLAP_CHANGED type /VCXI/VKSC_IEVNT value 'OVERLAP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_RLAMI_CHANGED type /VCXI/VKSC_IEVNT value 'RLAMI_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_SHTL_CHANGED type /VCXI/VKSC_IEVNT value 'SHTL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TLAGC_CHANGED type /VCXI/VKSC_IEVNT value 'TLAGC_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TLAMI_CHANGED type /VCXI/VKSC_IEVNT value 'TLAMI_CHANGED'. "#EC NOTEXT
  constants C_PARID_NOUPT type /VCXI/VKS_PARID value 'ZVCXI_P0_NOUPT'. "#EC NOTEXT
  constants C_PARID_SHTLL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLL'. "#EC NOTEXT
  constants C_PARID_SHTLW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLW'. "#EC NOTEXT
  data R_SHTDIM type ref to ZIF_VCXI_P0SS_SHTDIM .

  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUPT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLL
    importing
      !IS_SHTLL type ZVCXI_P0SS_S_SHTLL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLW
    importing
      !IS_SHTLW type ZVCXI_P0SS_S_SHTLW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPT
    importing
      !IF_NOUPT type ZVCXI_P0SS_NOUPT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLAGC
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLAMI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_LAMI definition
class ZCL_VCXI_P0SS_PR_LAMI implementation.
method CHECK_TLAGC.

*** 0 Lamination Glue Consumption Type is maintained and valid.
*** 1 Lamination Glue Consumption Type is not maintained
*** 2 Lamination Glue Consumption Type is maintained but not valid.

  data:  LF_TLAGC           type        ZVCXI_P0SS_TLAGC.
  data:  LT_TLAGC           type        ZVCXI_P0SS_TT_TLAGC.

*** Get Lamination Glue Consumption Type
  LF_TLAGC = ME->GET_TLAGC( ).
  if LF_TLAGC is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

*** Get Valid Lamination Glue Consumption Types
  LT_TLAGC = ME->GET_VALID_TLAGC( ).

  read table LT_TLAGC with key TABLE_LINE = LF_TLAGC
                      transporting no fields.
  check SY-SUBRC ne 0.
*** Lamination Glue Consumption Type is not valid.
  move 2 to RF_RETURN.

endmethod.
method CHECK_TLAMI.

*** 0 Lamination Type is maintained and valid.
*** 1 Lamination Type is not maintained
*** 2 Lamination Type is maintained but not valid.

  data:  LF_TLAMI           type        ZVCXI_P0SS_TLAMI.
  data:  LT_TLAMI           type        ZVCXI_P0SS_TT_TLAMI.

*** Get Lamination Type
  LF_TLAMI = ME->GET_TLAMI( ).
  if LF_TLAMI is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

*** Get Valid Lamination Types
  LT_TLAMI = ME->GET_VALID_TLAMI( ).

  read table LT_TLAMI with key TABLE_LINE = LF_TLAMI
                      transporting no fields.
  check SY-SUBRC ne 0.
*** Lamination Type is not valid.
  move 2 to RF_RETURN.

endmethod.
method CREATE_VLASH.

*** -----------------------------------------------------------------
*** First check if we already have an active Child Provider
  RR_GATE = ME->GET_VLASH( ).

  if RR_GATE is bound.
    check RR_GATE->F_ID ne IF_VLASH.
    RR_GATE->DO_FREE( ).
    free: RR_GATE.
  endif.

  check IF_VLASH is not initial.

*** -----------------------------------------------------------------
*** Create Laminating Sheet Variant
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = IF_VLASH ).

*** Set Inuse if not already done
  if RR_GATE->IS_INUSE( ) ne ABAP_TRUE.
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.


endmethod.
method GET_ALL_VLASH.

  data:          LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
  field-symbols: <S_VLASH>    type ZVCXI_P0SS_S_VLASH.

*** Get all Child Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  if lines( LT_PRVDR_DEF ) lt 1.
    exit.
  endif.

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    read table RT_VLASH with key VLASH = LS_PRVDR_DEF-ID
                        transporting no fields.
    check SY-SUBRC ne 0.
    append initial line to RT_VLASH assigning <S_VLASH>.
    move LS_PRVDR_DEF-ID to <S_VLASH>-VLASH.
    move LS_PRVDR_DEF-DESCR to <S_VLASH>-VLASH_DESCR.
  endloop.

endmethod.
method GET_BAWGP.

  data: LS_WDRYA type ZVCXI_P0SS_S_WDRYA.

*** Get Base Weight by Dry Weight
  ME->GET_WDRYW( importing ES_WDRYA = LS_WDRYA ).
  move LS_WDRYA-WDRYA     to RS_BAWGP-BAWGP.
  move LS_WDRYA-WDRYA_UOM to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data: LS_WDRYW type ZVCXI_P0SS_S_WDRYW.

*** Get Base Weight by Dry Weight
  ME->GET_WDRYW( importing ES_WDRYW = LS_WDRYW ).
  move LS_WDRYW-WDRYW     to RS_BAWGT-BAWGT.
  move LS_WDRYW-WDRYW_UOM to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_DESCR.

  data:  LF_DESCR type /VCXI/CKX_DESCR,
         LF_LASID type ZVCXI_P0S_PRSID.

  RF_DESCR = SUPER->GET_DESCR( ).

  LF_DESCR = ME->GET_LASID_DESCR( ).
  if LF_DESCR is not initial.
    concatenate RF_DESCR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    LF_LASID = ME->GET_LASID( ).
    if LF_LASID is not initial.
      concatenate RF_DESCR '-' LF_LASID into RF_DESCR separated by SPACE.
    endif.
  endif.

endmethod.
method GET_LASID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LASID ).
  move LS_PARAM-ATWRT to RF_LASID.

endmethod.
method GET_LASID_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_LASID'.
  data:      LF_LASID   type                   ZVCXI_P0SS_LASID.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.

  LF_LASID = ME->GET_LASID( ).

*** Return Lamination Side Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_LASID into LS_D07V.
  check SY-SUBRC = 0.

  move LS_D07V-DDTEXT to RF_DESCR.

endmethod.
method GET_MATNR.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***------------------------------------------------------------------------------------------------
*** Get Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
  endloop.

  check LR_PR_MS_SHTPR is bound.
  RF_MATNR = LR_PR_MS_SHTPR->GET_MATNR( ).

endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_NOUPT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPT ).
  move LS_PARAM-ATFLV to RF_NOUPT.

endmethod.
method GET_OLLEN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLLEN ).
  move LS_PARAM-ATFLV to RS_OLLEN-OLLEN.
  move LS_PARAM-UNIT  to RS_OLLEN-OLLEN_UOM.

endmethod.
method GET_OLWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).
  move LS_PARAM-ATFLV to RS_OLWID-OLWID.
  move LS_PARAM-UNIT  to RS_OLWID-OLWID_UOM.

endmethod.
method GET_RLAMI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLAMI ).
  move LS_PARAM-ATWRT to RF_RLAMI.

endmethod.
method GET_SHTGL.

  check ME->R_SHTDIM is bound.
  RS_SHTGL = ME->R_SHTDIM->GET_SHTGL( ).

endmethod.
method GET_SHTGW.

  check ME->R_SHTDIM is bound.
  RS_SHTGW = ME->R_SHTDIM->GET_SHTGW( ).

endmethod.
method GET_SHTLL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLL ).
  move LS_PARAM-ATFLV to RS_SHTLL-SHTLL.
  move LS_PARAM-UNIT  to RS_SHTLL-SHTLL_UOM.

endmethod.
method GET_SHTLW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLW ).
  move LS_PARAM-ATFLV to RS_SHTLW-SHTLW.
  move LS_PARAM-UNIT  to RS_SHTLW-SHTLW_UOM.

endmethod.
method GET_STATUS.

  data: LS_SHTLW type ZVCXI_P0SS_S_SHTLW,
        LS_SHTLL type ZVCXI_P0SS_S_SHTLL.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Lamination Type
  if ME->CHECK_TLAMI( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Lamination Glue Consumption Type
  if ME->CHECK_TLAGC( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Lamination Relation
  if ME->GET_RLAMI( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Lamination Glue Consumption Type
  if ME->GET_TLAGC( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Sheet Variant
  if ME->GET_VLASH( ) is bound.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Lamination Dimensions
  LS_SHTLW = ME->GET_SHTLW( ).
  LS_SHTLL = ME->GET_SHTLL( ).

  if LS_SHTLW-SHTLW is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                 IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

  if LS_SHTLL-SHTLL is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                 IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_SHTLW type ZVCXI_P0SS_S_SHTLW,
        LS_SHTLL type ZVCXI_P0SS_S_SHTLL.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Lamination Type
  case ME->CHECK_TLAMI( ).
    when 0.
***   Lamination Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '758' ).

    when 1.
***   Lamination Type is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '759' ).

    when 2.
***   Lamination Type is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '760' ).
  endcase.

*** Check Lamination Glue Consumption Type
  case ME->CHECK_TLAGC( ).
    when 0.
***   Lamination Glue Consumption Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '761' ).

    when 1.
***   Lamination Glue Consumption Type is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '762' ).

    when 2.
***   Lamination Glue Consumption Type is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '763' ).
  endcase.

*** Check Lamination Relation
  if ME->GET_RLAMI( ) is not initial.
*** Lamination Relation is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '752' ).
  else.
*** Lamination Relation is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '753' ).
  endif.

*** Check Lamination Glue Consumption Type
  if ME->GET_TLAGC( ) is not initial.
*** Lamination Glue Consumption Type is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '754' ).
  else.
*** Lamination Glue Consumption Type is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '755' ).
  endif.

*** Check Sheet Variant
  if ME->GET_VLASH( ) is not bound.
*** Sheet Variant is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '751' ).
  endif.

*** Check Lamination Dimensions
  LS_SHTLW = ME->GET_SHTLW( ).
  LS_SHTLL = ME->GET_SHTLL( ).

  if LS_SHTLW-SHTLW is initial.
*** Lamination Sheet Width can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '756' ).
  endif.

  if LS_SHTLL-SHTLL is initial.
*** Lamination Sheet Length can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '757' ).
  endif.

endmethod.
method GET_TLAGC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAGC ).
  move LS_PARAM-ATWRT to RF_TLAGC.

endmethod.
method GET_TLAMI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAMI ).
  move LS_PARAM-ATWRT to RF_TLAMI.

endmethod.
method GET_VALID_TLAGC.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC         type ref to ZCL_VCXI_P0SS_PR_SPEC,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

***------------------------------------------------------------------
*** Try Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SPEC.
    endtry.
  endif.

  if LR_PR_SPEC is bound.
    RT_TLAGC = LR_PR_SPEC->GET_VALID_TLAGC( IR_GATE = ME->R_GATE ).
  else.
***------------------------------------------------------------------
*** Try Specification SE
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SPEC_SE.
      endtry.
    endif.

    if LR_PR_SPEC_SE is bound.
      RT_TLAGC = LR_PR_SPEC_SE->GET_VALID_TLAGC( IR_GATE = ME->R_GATE ).
    endif.
  endif.

endmethod.
method GET_VALID_TLAMI.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC         type ref to ZCL_VCXI_P0SS_PR_SPEC,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

***------------------------------------------------------------------
*** Try Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SPEC.
    endtry.
  endif.

  if LR_PR_SPEC is bound.
    RT_TLAMI = LR_PR_SPEC->GET_VALID_TLAMI( ).
  else.
***------------------------------------------------------------------
*** Try Specification SE
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SPEC_SE.
      endtry.
    endif.

    if LR_PR_SPEC_SE is bound.
      RT_TLAMI = LR_PR_SPEC_SE->GET_VALID_TLAMI( ).
    endif.
  endif.

endmethod.
method GET_VLASH.

  data:  LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get Active Laminating Sheet Variant
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        check LR_GATE->GET_PARENT( ) eq ME->R_GATE.
        move LR_GATE to RR_GATE.
        exit.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
  endloop.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_RECALC_SHTL.
      ME->HANDLE_RECALC_SHTL( ).

    when C_IEVNT_I_RECALC_NOUPT.
      ME->HANDLE_RECALC_NOUPT( ).

    when C_IEVNT_I_REQ_CALIP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).

    when C_IEVNT_I_REQ_WDRYW_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYW_CHANGED ).

    when C_IEVNT_I_REQ_WWETW_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_SHTDIM.

***------------------------------------------------------------------
*** Get Sheet Dimensions Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_SHTDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_SHTDIM.
    endtry.
  endif.

  if ME->R_SHTDIM is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_RECALC_NOUPT.

  data:  LF_NOUPT     type          ZVCXI_P0SS_NOUPT.
  data:  LS_PCDIM     type          ZVCXI_P0SP_S_PCDIM.
  data:  LT_GATE      type          /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Lamination for Position
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  ZCL_VCXI_P0SS_CUST_LAMI=>SORT_LAMI( changing CT_GATE = LT_GATE ).
  read table LT_GATE with key TABLE_LINE = ME->R_GATE
                     transporting no fields.

*** Get PC Dimensions based on Lamination Counter
  case SY-TABIX.
    when 1.  "First Lamination
      move ME->R_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFLAM ) to LS_PCDIM.
    when 2.  "Second Lamination
      move ME->R_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSLAM ) to LS_PCDIM.
  endcase.
  move LS_PCDIM-PCUPS to LF_NOUPT.

***------------------------------------------------------------------
*** Set Number of Ups Total
  ME->SET_NOUPT( IF_NOUPT = LF_NOUPT ).

endmethod.
method HANDLE_RECALC_SHTL.

  data:  LS_SHTLL    type ZVCXI_P0SS_S_SHTLL,
         LS_SHTLW    type ZVCXI_P0SS_S_SHTLW,
         LS_SHTGL    type ZVCXI_P0SS_S_SHTGL,
         LS_SHTGW    type ZVCXI_P0SS_S_SHTGW,
         LS_OLLEN    type ZVCXI_P0SS_S_OLLEN,
         LS_OLWID    type ZVCXI_P0SS_S_OLWID.

***------------------------------------------------------------------
*** Get Laminatin Sheet Dimensions
  LS_SHTLW = ME->GET_SHTLW( ).
  LS_SHTLL = ME->GET_SHTLL( ).

*** Get Gross Sheet Dimensions
  LS_SHTGW = ME->GET_SHTGW( ).
  LS_SHTGL = ME->GET_SHTGL( ).

*** Get Overlap Dimensions
  LS_OLWID = ME->GET_OLWID( ).
  LS_OLLEN = ME->GET_OLLEN( ).

***------------------------------------------------------------------
*** Calculate Standard
*** Gross Sheet Length
  if LS_SHTGL-SHTGL is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = LS_SHTGL-SHTGL
                IF_CALCV_UOM_1 = LS_SHTGL-SHTGL_UOM
                IF_CALCV_2     = LS_OLLEN-OLLEN
                IF_CALCV_UOM_2 = LS_OLLEN-OLLEN_UOM
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = LS_SHTGL-SHTGL_UOM
      importing EF_CALCV       = LS_SHTLL-SHTLL
                EF_CALCV_UOM   = LS_SHTLL-SHTLL_UOM ).
  endif.

*** Gross Sheet Width
  if LS_SHTGW-SHTGW is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = LS_SHTGW-SHTGW
                IF_CALCV_UOM_1 = LS_SHTGW-SHTGW_UOM
                IF_CALCV_2     = LS_OLWID-OLWID
                IF_CALCV_UOM_2 = LS_OLWID-OLWID_UOM
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = LS_SHTGW-SHTGW_UOM
      importing EF_CALCV       = LS_SHTLW-SHTLW
                EF_CALCV_UOM   = LS_SHTLW-SHTLW_UOM ).
  endif.

***------------------------------------------------------------------
*** Set Lamination Sheet Dimensions
  ME->SET_SHTLL( IS_SHTLL = LS_SHTLL ).
  ME->SET_SHTLW( IS_SHTLW = LS_SHTLW ).

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method IS_PRINT_CALCULATED.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

***------------------------------------------------------------------------------------------------
*** Get Specification SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC_SE.
  endtry.

  if LR_PR_SPEC_SE is bound.
    RF_CALCULATED = LR_PR_SPEC_SE->IS_PRINT_CALCULATED( ).
    exit.
  endif.

endmethod.
method SET_LASID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LASID ).

  move IF_LASID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_NOUPT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPT ).

  move IF_NOUPT     to LS_PARAM-ATFLV.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPT_CHANGED ).
  endif.

endmethod.
method SET_OLLEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLLEN ).

  move IS_OLLEN-OLLEN     to LS_PARAM-ATFLV.
  move IS_OLLEN-OLLEN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OVERLAP_CHANGED ).
  endif.

endmethod.
method SET_OLWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).

  move IS_OLWID-OLWID     to LS_PARAM-ATFLV.
  move IS_OLWID-OLWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OVERLAP_CHANGED ).
  endif.

endmethod.
method SET_RLAMI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLAMI ).

  move IF_RLAMI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLAMI_CHANGED ).
  endif.

endmethod.
method SET_SHTLL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLL ).

  move IS_SHTLL-SHTLL     to LS_PARAM-ATFLV.
  move IS_SHTLL-SHTLL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTL_CHANGED ).
  endif.

endmethod.
method SET_SHTLW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLW ).

  move IS_SHTLW-SHTLW     to LS_PARAM-ATFLV.
  move IS_SHTLW-SHTLW_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTL_CHANGED ).
  endif.

endmethod.
method SET_TLAGC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAGC ).

  move IF_TLAGC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLAGC_CHANGED ).
  endif.

endmethod.
method SET_TLAMI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAMI ).

  move IF_TLAMI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLAMI_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_CALIP~GET_CALIP.

  data:  LF_OWN_POOTI type          ZVCXI_P0S_POOTI,
         LF_TABIX_C   type          C,
         LF_POOTI     type          ZVCXI_P0S_POOTI,
         LF_CONTINUE  type          ABAP_BOOL.
  data:  LS_CALIP     type          ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE      type          /VCXI/VKSR_TT_GATE,
         LT_POOTI     type table of ZVCXI_P0S_POOTI.
  data:  LR_GATE      type ref to   /VCXI/CL_VKSR_GATE,
         LR_CALIP     type ref to   ZIF_VCXI_P0SS_CALIP.

***------------------------------------------------------------------------------------------------
*** Get all Lamination for own Pooti
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  ZCL_VCXI_P0SS_CUST_LAMI=>SORT_LAMI( changing CT_GATE = LT_GATE ).
  read table LT_GATE with key TABLE_LINE = ME->R_GATE
                     transporting no fields.
  move SY-TABIX to LF_TABIX_C.
  concatenate 'LAMI' LF_TABIX_C into LF_OWN_POOTI.

  split IF_POOTI at ZIF_VCXI_P0SS_CALIP~C_POOTI_SEP into table LT_POOTI.

  loop at LT_POOTI into LF_POOTI.
    condense LF_POOTI.
    check LF_POOTI eq '*'          or
          LF_POOTI eq LF_OWN_POOTI.

    LF_CONTINUE = ABAP_TRUE.
    exit.
  endloop.

  check LF_CONTINUE eq ABAP_TRUE.

  if LF_POOTI eq LF_OWN_POOTI.
    move 'BASE' to LF_POOTI.
  endif.

***------------------------------------------------------------------------------------------------
*** Get Caliper Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_CALIP=>C_IPRVT_P0_CALIP
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CALIP.
        check LR_CALIP is bound.
        clear: LS_CALIP.
        LS_CALIP = LR_CALIP->GET_CALIP( IF_POOTI = LF_POOTI ).

        if RS_CALIP-CALIP_UOM is initial and
           LS_CALIP-CALIP_UOM is not initial.
          move LS_CALIP-CALIP_UOM to RS_CALIP-CALIP_UOM.
        endif.

        check LS_CALIP-CALIP is not initial.
        if RS_CALIP-CALIP is initial.
          move LS_CALIP to RS_CALIP.

        else.


          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_CALIP-CALIP
                                                              IF_CALCV_UOM_1 = RS_CALIP-CALIP_UOM
                                                              IF_CALCV_2     = LS_CALIP-CALIP
                                                              IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = RS_CALIP-CALIP_UOM
                                                    importing EF_CALCV       = RS_CALIP-CALIP
                                                              EF_CALCV_UOM   = RS_CALIP-CALIP_UOM ).
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CALIP.
    endtry.
  endloop.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~GET_PRINFO.

  data:  LT_GATE      type          /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to   /VCXI/CL_VKSR_GATE,
         LR_PRALLOC   type ref to   ZIF_VCXI_P0SS_PRALLOC.

***------------------------------------------------------------------------------------------------
*** Get current Printing Allocation Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_PRALLOC=>C_IPRVT_P0_PRALLOC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***------------------------------------------------------------------------------------------------
*** Print Type
  if EF_PRTYP is requested.
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IF_PRSID
                                      IF_CREATE = IF_CREATE
                            importing EF_PRTYP  = EF_PRTYP ).
  endif.

*** Number of Colors
  if EF_NOCOL is requested.
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IF_PRSID
                                      IF_CREATE = IF_CREATE
                            importing EF_NOCOL  = EF_NOCOL ).
  endif.

*** Gate
  if ER_GATE is requested.
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID  = IF_PRSID
                                      IF_CREATE = IF_CREATE
                            importing ER_GATE   = ER_GATE ).
  endif.

*** Changeable
  if EF_CHANGEABLE is requested.
    LR_PRALLOC->GET_PRINFO( exporting IF_PRSID      = IF_PRSID
                                      IF_CREATE     = IF_CREATE
                            importing EF_CHANGEABLE = EF_CHANGEABLE ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~SET_PRINFO.

  data:  LT_GATE      type          /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to   /VCXI/CL_VKSR_GATE,
         LR_PRALLOC   type ref to   ZIF_VCXI_P0SS_PRALLOC.

***------------------------------------------------------------------------------------------------
*** Get current Printing Allocation Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_PRALLOC=>C_IPRVT_P0_PRALLOC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.
  move LR_GATE->R_CLSPR ?to LR_PRALLOC.

***------------------------------------------------------------------------------------------------
*** Print Type
  if IF_PRTYP is supplied.
    LR_PRALLOC->SET_PRINFO( IF_PRSID = IF_PRSID
                            IF_PRTYP = IF_PRTYP
                            IF_SETBY = IF_SETBY ).
  endif.

*** Number of Colors
  if IF_NOCOL is supplied.
    LR_PRALLOC->SET_PRINFO( IF_PRSID = IF_PRSID
                            IF_NOCOL = IF_NOCOL
                            IF_SETBY = IF_SETBY ).
  endif.

*** Gate
  if IR_GATE is supplied.
    LR_PRALLOC->SET_PRINFO( IF_PRSID = IF_PRSID
                            IR_GATE  = IR_GATE
                            IF_SETBY = IF_SETBY ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW.

  data:  LS_WDRYW           type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA           type        ZVCXI_P0SS_S_WDRYA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        check LR_WEIGHT is bound.
        clear: LS_WDRYW, LS_WDRYA.
        LR_WEIGHT->GET_WDRYW( importing ES_WDRYW = LS_WDRYW
                                        ES_WDRYA = LS_WDRYA ).

        check LS_WDRYW-WDRYW is not initial.

***     Weights per Area
        if ES_WDRYA-WDRYA is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = ES_WDRYA-WDRYA_UOM
                                                             IF_UOM_IN    = LS_WDRYA-WDRYA_UOM
                                                             IF_VALUE_IN  = LS_WDRYA-WDRYA
                                                   importing EF_VALUE_OUT = LS_WDRYA-WDRYA
                                                             EF_UOM_OUT   = LS_WDRYA-WDRYA_UOM ).
        endif.

        if ES_WDRYW-WDRYW is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = ES_WDRYW-WDRYW_UOM
                                                             IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                             IF_VALUE_IN  = LS_WDRYW-WDRYW
                                                   importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                             EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

          ES_WDRYW-WDRYW = ES_WDRYW-WDRYW + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * ES_WDRYA-WDRYA ).

        else.
          ES_WDRYW = LS_WDRYW.
          ES_WDRYA = LS_WDRYA.

        endif.

        ES_WDRYW-WDRYW_UOM = LS_WDRYW-WDRYW_UOM.

      endloop.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WWETW.

  data:  LS_WWETW           type        ZVCXI_P0SS_S_WWETW,
         LS_WWETA           type        ZVCXI_P0SS_S_WWETA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_WEIGHT.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        check LR_WEIGHT is bound.
        clear: LS_WWETW, LS_WWETA.
        LR_WEIGHT->GET_WWETW( importing ES_WWETW = LS_WWETW
                                        ES_WWETA = LS_WWETA ).

        check LS_WWETW-WWETW is not initial.

***     Weights per Area
        if ES_WWETA-WWETA is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = ES_WWETA-WWETA_UOM
                                                             IF_UOM_IN    = LS_WWETA-WWETA_UOM
                                                             IF_VALUE_IN  = LS_WWETA-WWETA
                                                   importing EF_VALUE_OUT = LS_WWETA-WWETA
                                                             EF_UOM_OUT   = LS_WWETA-WWETA_UOM ).
        endif.

        if ES_WWETW-WWETW is not initial.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = ES_WWETW-WWETW_UOM
                                                             IF_UOM_IN    = LS_WWETW-WWETW_UOM
                                                             IF_VALUE_IN  = LS_WWETW-WWETW
                                                   importing EF_VALUE_OUT = LS_WWETW-WWETW
                                                             EF_UOM_OUT   = LS_WWETW-WWETW_UOM ).

          ES_WWETW-WWETW = ES_WWETW-WWETW + ( ( LS_WWETW-WWETW / LS_WWETA-WWETA ) * ES_WWETA-WWETA ).

        else.
          ES_WWETW = LS_WWETW.
          ES_WWETA = LS_WWETA.

        endif.

        ES_WWETW-WWETW_UOM = LS_WWETW-WWETW_UOM.

      endloop.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
