
class ZCL_VCXI_P3SS_PR_CSTEP definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P3SS_COMM_PREV .
  interfaces ZIF_VCXI_P3SS_COMM_NEXT .

  constants C_IPRVT_P3_CSTEP type /VCXI/VKSC_IPRVT value 'ZVCXI_P3SS_CSTEP' ##NO_TEXT.

  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
protected section.

  constants C_IEVNT_O_ASBPX_CHANGED type /VCXI/VKSC_IEVNT value 'ASBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ASFPX_CHANGED type /VCXI/VKSC_IEVNT value 'ASFPX_CHANGED' ##NO_TEXT.
  constants C_PARID_ASBPX type /VCXI/VKS_PARID value 'ZVCXI_P3_ASBPX' ##NO_TEXT.
  constants C_PARID_ASFPX type /VCXI/VKS_PARID value 'ZVCXI_P3_ASFPX' ##NO_TEXT.

  methods SET_ASFPX
    importing
      !IF_ASFPX type ZVCXI_P3S_ASFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ASBPX
    importing
      !IF_ASBPX type ZVCXI_P3S_ASBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P3SS_PR_CSTEP definition
class ZCL_VCXI_P3SS_PR_CSTEP implementation.
  method SET_ASBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASBPX ).

    move IF_ASBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ASBPX_CHANGED ).
    endif.

  endmethod.
  method SET_ASFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASFPX ).

    move IF_ASFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ASFPX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASBPX ).
    move LS_PARAM-STRNG to EF_ASBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property Instance
    if RR_BL_ASBPROP is requested.
      RR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( IF_ASBPX = EF_ASBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_NEXT~GET_ASFPX.

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property (Inbound)
    RR_BL_ASFPROP = ME->ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Use Determined Product Hierarchy
    RR_BL_ASFPROP->SET_PRODH( IF_PRODH = RR_BL_ASFPROP->DET_PRODH( IR_GATE = ME->R_GATE ) ).

***--------------------------------------------------------------------------------------
*** Get new Assembly Forward Property XML
    if EF_ASFPX is requested.
      EF_ASFPX = RR_BL_ASFPROP->GET_ASFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_PREV~GET_ASBPX.

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property (Outbound)
    ME->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX( importing EF_ASBPX = EF_ASBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property Instance
    if RR_BL_ASBPROP is requested.
      RR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( IF_ASBPX = EF_ASBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASFPX ).
    move LS_PARAM-STRNG to EF_ASFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property Instance
    if RR_BL_ASFPROP is requested.
      RR_BL_ASFPROP = ZCL_VCXI_P3SS_BL_ASFPROP=>FACTORY( IF_ASFPX = EF_ASFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P3SS_COMM_PREV,
          LR_BL_ASBPROP type ref to ZCL_VCXI_P3SS_BL_ASBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Assembly Backward Property Instance
    LR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Combine Assembly Backward Property
      LR_BL_ASBPROP->MERGE( IR_BL_ASBPROP = LR_COMM_PREV->GET_ASBPX( ) ).
    endloop.

*** Backward Assembly Backward Property XML
    ME->SET_ASBPX( IF_ASBPX = LR_BL_ASBPROP->GET_ASBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P3SS_COMM_NEXT,
          LR_BL_ASFPROP      type ref to ZCL_VCXI_P3SS_BL_ASFPROP,
          LR_BL_ASFPROP_NEXT type ref to ZCL_VCXI_P3SS_BL_ASFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Combine Assembly Forward Property
      LR_BL_ASFPROP_NEXT = LR_COMM_NEXT->GET_ASFPX( ).
      if LR_BL_ASFPROP is not bound.
        move LR_BL_ASFPROP_NEXT to LR_BL_ASFPROP.
      else.
        LR_BL_ASFPROP->MERGE( IR_BL_ASFPROP = LR_BL_ASFPROP_NEXT ).
      endif.

    endloop.

*** Forward Assembly Forward Property XML
    if LR_BL_ASFPROP is bound.
      ME->SET_ASFPX( IF_ASFPX = LR_BL_ASFPROP->GET_ASFPX( ) ).
    else.
      ME->SET_ASFPX( IF_ASFPX = SPACE ).
    endif.

  endmethod.
