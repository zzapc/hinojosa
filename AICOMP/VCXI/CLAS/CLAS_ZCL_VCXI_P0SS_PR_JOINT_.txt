
class ZCL_VCXI_P0SS_PR_JOINT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_ID_JOINT type /VCXI/CKX_ID value '*JOINT*'. "#EC NOTEXT
  constants C_IPRVT_P0_JOINT type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_JOINT'. "#EC NOTEXT
  constants C_PARID_FMJOI type /VCXI/VKS_PARID value 'ZVCXI_P0_FMJOI'. "#EC NOTEXT
  constants C_PARID_JOILE type /VCXI/VKS_PARID value 'ZVCXI_P0_JOILE'. "#EC NOTEXT
  constants C_PARID_JOIPO type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIPO'. "#EC NOTEXT
  constants C_PARID_JOIWI type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIWI'. "#EC NOTEXT
  constants C_PARID_NOSTI type /VCXI/VKS_PARID value 'ZVCXI_P0_NOSTI'. "#EC NOTEXT
  constants C_PARID_PPASS type /VCXI/VKS_PARID value 'ZVCXI_P0_PPASS'. "#EC NOTEXT
  constants C_PARID_STILE type /VCXI/VKS_PARID value 'ZVCXI_P0_STILE'. "#EC NOTEXT
  constants C_PARID_STITP type /VCXI/VKS_PARID value 'ZVCXI_P0_STITP'. "#EC NOTEXT

  methods CHECK_STITCH
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods GET_FMJOI
    returning
      value(RF_FMJOI) type ZVCXI_P0SS_FMJOI
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRL
    returning
      value(RF_FOVRL) type ZVCXI_P0SS_FOVRL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRS
    returning
      value(RF_FOVRS) type ZVCXI_P0SS_FOVRS
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRW
    returning
      value(RF_FOVRW) type ZVCXI_P0SS_FOVRW
    raising
      /VCXI/CX_CKX .
  methods GET_JOILE
    exporting
      !ES_JOILE type ZVCXI_P0S_S_JOILE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO_DESCR
    returning
      value(RF_JOIPO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    returning
      value(RF_JOITY) type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    exporting
      !ES_JOIWI type ZVCXI_P0S_S_JOIWI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOSTI
    exporting
      !EF_NOSTI type ZVCXI_P0SS_NOSTI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS
    returning
      value(RF_PPASS) type ZVCXI_P0SS_PPASS
    raising
      /VCXI/CX_CKX .
  methods GET_STITP
    exporting
      !ES_STITP type ZVCXI_P0SS_S_STITP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_CLOSED
    returning
      value(RF_CLOSED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FMJOI
    importing
      !IF_FMJOI type ZVCXI_P0SS_FMJOI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRL
    importing
      !IF_FOVRL type ZVCXI_P0SS_FOVRL
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRS
    importing
      !IF_FOVRS type ZVCXI_P0SS_FOVRS
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRW
    importing
      !IF_FOVRW type ZVCXI_P0SS_FOVRW
    raising
      /VCXI/CX_CKX .
  methods SET_JOILE
    importing
      !IS_JOILE type ZVCXI_P0S_S_JOILE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOSTI
    importing
      !IF_NOSTI type ZVCXI_P0SS_NOSTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PPASS
    importing
      !IF_PPASS type ZVCXI_P0SS_PPASS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_STITP
    importing
      !IS_STITP type ZVCXI_P0SS_S_STITP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRL_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRS_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRW_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRW_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_JOILE_CHANGED type /VCXI/VKSC_IEVNT value 'JOILE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_JOIPO_CHANGED type /VCXI/VKSC_IEVNT value 'JOIPO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_JOITY_CHANGED type /VCXI/VKSC_IEVNT value 'JOITY_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_JOIWI_CHANGED type /VCXI/VKSC_IEVNT value 'JOIWI_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_NOSTI_CHANGED type /VCXI/VKSC_IEVNT value 'NOSTI_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PPASS_CHANGED type /VCXI/VKSC_IEVNT value 'PPASS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_STITP_CHANGED type /VCXI/VKSC_IEVNT value 'STITP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_REQUEST_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'REQUEST_SET_DEFAULT'. "#EC NOTEXT

  methods CHECK_JOILE
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PPASS
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOITY
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIWI
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods GET_CDATE
    returning
      value(RF_CDATE) type DATS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_JOINT definition
class ZCL_VCXI_P0SS_PR_JOINT implementation.
method CHECK_JOILE.

*** RF_SUBRC = 0 => Joint Length is needed and maintained
*** RF_SUBRC = 1 => Joint Length is needed and not maintained
*** RF_SUBRC = 2 => Joint Length is not needed

  data: LF_JOITY     type ZVCXI_P0S_JOITY.
  data: LS_JOITY_DEF type ZVCXI_P0S_TC340,
        LS_JOILE     type ZVCXI_P0S_S_JOILE.

  LF_JOITY = ME->GET_JOITY( ).
  LS_JOITY_DEF = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ).

  if LS_JOITY_DEF-FRJLE eq ABAP_FALSE.
    move 2 to RF_SUBRC.
    exit.
  endif.
  ME->GET_JOILE( importing ES_JOILE = LS_JOILE ).

  if LS_JOILE-JOILE is not initial.
    move 0 to RF_SUBRC.
  else.
    move 1 to RF_SUBRC.
  endif.

endmethod.
method CHECK_JOIPO.

*** RF_SUBRC = 0 => Joint Position is maintained and valid for Joint Type
*** RF_SUBRC = 1 => Joint Position is maintained and not valid for Joint Type
*** RF_SUBRC = 2 => Joint Position is not maintained

  data: LF_JOITY     type ZVCXI_P0S_JOITY,
        LF_JOIPO     type ZVCXI_P0S_JOIPO,
        LF_EXIST     type ABAP_BOOL.

  LF_JOIPO = ME->GET_JOIPO( ).

  if LF_JOIPO is initial.
    move 2 to RF_SUBRC.
    exit.
  endif.

  LF_JOITY = ME->GET_JOITY( ).
  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_JOIPO( exporting IF_JOITY = LF_JOITY
                                                       IF_JOIPO = LF_JOIPO
                                             importing EF_EXIST = LF_EXIST ).

  if LF_EXIST eq ABAP_TRUE.
    move 0 to RF_SUBRC.
  else.
    move 1 to RF_SUBRC.
  endif.

endmethod.
method CHECK_JOITY.

*** RF_SUBRC = 0 => Joint Type is maintained and valid for Joint Position
*** RF_SUBRC = 1 => Joint Type is maintained and not valid for Joint Position
*** RF_SUBRC = 2 => Joint Type is maintained but not valid
*** RF_SUBRC = 3 => Joint Type is not maintained

  data: LF_JOITY     type ZVCXI_P0S_JOITY,
        LF_JOIPO     type ZVCXI_P0S_JOIPO,
        LF_EXIST     type ABAP_BOOL.
  data: LS_JOITY_DEF type ZVCXI_P0S_TC340.

  LF_JOITY = ME->GET_JOITY( ).

  if LF_JOITY is initial.
    move 3 to RF_SUBRC.
    exit.
  endif.

  LS_JOITY_DEF = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ).
  if LS_JOITY_DEF is initial.
    move 2 to RF_SUBRC.
    exit.
  endif.

  LF_JOIPO = ME->GET_JOIPO( ).
  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_JOIPO( exporting IF_JOITY = LF_JOITY
                                                       IF_JOIPO = LF_JOIPO
                                             importing EF_EXIST = LF_EXIST ).

  if LF_EXIST eq ABAP_TRUE.
    move 0 to RF_SUBRC.
  else.
    move 1 to RF_SUBRC.
  endif.

endmethod.
method CHECK_JOIWI.

*** RF_SUBRC = 0 => Joint Width is needed and maintained
*** RF_SUBRC = 1 => Joint Width is needed and not maintained
*** RF_SUBRC = 2 => Joint Width is not needed

  data: LF_JOITY     type ZVCXI_P0S_JOITY.
  data: LS_JOITY_DEF type ZVCXI_P0S_TC340,
        LS_JOIWI     type ZVCXI_P0S_S_JOIWI.

  LF_JOITY = ME->GET_JOITY( ).
  LS_JOITY_DEF = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ).

  if LS_JOITY_DEF-FRJWI eq ABAP_FALSE.
    move 2 to RF_SUBRC.
    exit.
  endif.

  ME->GET_JOIWI( importing ES_JOIWI = LS_JOIWI ).

  if LS_JOIWI-JOIWI is not initial.
    move 0 to RF_SUBRC.
  else.
    move 1 to RF_SUBRC.
  endif.

endmethod.
method CHECK_PPASS.

*** RF_SUBRC = 0 => Production Pass is maintained
*** RF_SUBRC = 1 => Production Pass is not maintained

  if ME->GET_PPASS( ) is initial.
    move 1 to RF_SUBRC.
    exit.
  endif.

endmethod.
method CHECK_STITCH.

*** RF_SUBRC = 0 => Stitching is needed and fully maintained
*** RF_SUBRC = 1 => Stitching is needed and No Stitches is not maintained
*** RF_SUBRC = 2 => Stitching is needed and Stitches per is not maintained
*** RF_SUBRC = 3 => Stitching is needed and not maintained
*** RF_SUBRC = 4 => Stitching is not needed

  data: LF_JOITY     type ZVCXI_P0S_JOITY,
        LF_EXIST     type ABAP_BOOL,
        LF_CDATE     type DATS,
        LF_NOSTI     type ZVCXI_P0SS_NOSTI.
  data: LS_STITP     type ZVCXI_P0SS_S_STITP.

  LF_JOITY = ME->GET_JOITY( ).
  LF_CDATE = ME->GET_CDATE( ).

  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_MCONSU( exporting IF_JOITY = LF_JOITY
                                                        IF_ISVCE = 'MC_JSTITCH'
                                                        IF_DATE  = LF_CDATE
                                              importing EF_EXIST = LF_EXIST ).

  if LF_EXIST ne ABAP_TRUE.
    move 4 to RF_SUBRC.
    exit.
  endif.

  ME->GET_NOSTI( importing EF_NOSTI = LF_NOSTI ).
  ME->GET_STITP( importing ES_STITP = LS_STITP ).

  if     LS_STITP-STITP is initial and
         LF_NOSTI       is initial.
    move 3 to RF_SUBRC.
  elseif LS_STITP-STITP is initial and
         LF_NOSTI       is not initial.
    move 2 to RF_SUBRC.
  elseif LS_STITP-STITP is not initial and
         LF_NOSTI       is initial.
    move 1 to RF_SUBRC.
  else.
    move 0 to RF_SUBRC.
  endif.

endmethod.
method GET_CDATE.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_CDATE =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FMJOI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FMJOI ).
  move LS_PARAM-ATWRT to RF_FMJOI.

endmethod.
method GET_FOVRL.

  data: LF_SETBY_JOILE type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_JOILE( importing EF_SETBY = LF_SETBY_JOILE ).

  check LF_SETBY_JOILE eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRL.

endmethod.
method GET_FOVRS.

  data: LF_SETBY_NOSTI type /VCXI/VKSR_SETBY,
        LF_SETBY_STITP type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_NOSTI( importing EF_SETBY = LF_SETBY_NOSTI ).
  ME->GET_STITP( importing EF_SETBY = LF_SETBY_STITP ).

  check LF_SETBY_NOSTI eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
        LF_SETBY_STITP eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRS.

endmethod.
method GET_FOVRW.

  data: LF_SETBY_JOIWI type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_JOIWI( importing EF_SETBY = LF_SETBY_JOIWI ).

  check LF_SETBY_JOIWI eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRW.

endmethod.
method GET_JOILE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).
  move LS_PARAM-ATFLV to ES_JOILE-JOILE.
  move LS_PARAM-UNIT  to ES_JOILE-JOILE_UOM.
  move LS_PARAM-SETBY to EF_SETBY.


endmethod.
method GET_JOIPO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).
  move LS_PARAM-ATWRT to RF_JOIPO.

endmethod.
method GET_JOIPO_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_JOIPO'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_JOIPO   type                   ZVCXI_P0S_JOIPO.

  LF_JOIPO = ME->GET_JOIPO( ).

*** Return JOIPO description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_JOIPO into LS_D07V.
  check SY-SUBRC eq 0.

  RF_JOIPO_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_JOITY.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_JOITY.

endmethod.
method GET_JOITY_DESCR.

  data:      LF_JOITY   type                   ZVCXI_P0S_JOITY.

  LF_JOITY = ME->GET_JOITY( ).

  RF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DESCR( IF_JOITY = LF_JOITY ).

endmethod.
method GET_JOIWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).
  move LS_PARAM-ATFLV to ES_JOIWI-JOIWI.
  move LS_PARAM-UNIT  to ES_JOIWI-JOIWI_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_NOSTI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOSTI ).
  move LS_PARAM-ATFLV to EF_NOSTI.
  move LS_PARAM-SETBY to EF_SETBY.


endmethod.
method GET_PPASS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).
  move LS_PARAM-ATFLV to RF_PPASS.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

  case ME->CHECK_JOITY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

  case ME->CHECK_JOIPO( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

  case ME->CHECK_JOIWI( ).
    when 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endcase.

  case ME->CHECK_JOILE( ).
    when 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endcase.

  case ME->CHECK_STITCH( ).
    when 0 or 4.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

  case ME->CHECK_PPASS( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

  case ME->CHECK_JOITY( ).
    when 0.
*** Joint Type is maintained and valid for Joint Position
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '401' ).
    when 1.
*** Joint Type is maintained and not valid for Joint Position
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '402' ).
    when 2.
*** Joint Type is maintained but not valid
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '403' ).
    when 3.
*** Joint Type is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '404' ).
  endcase.

  case ME->CHECK_JOIPO( ).
    when 0.
*** Joint Position is maintained and valid for Joint Type
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '405' ).
    when 1.
*** Joint Position is maintained and not valid for Joint Type
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '406' ).
    when 2.
*** Joint Position is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '407' ).
  endcase.

  case ME->CHECK_JOIWI( ).
    when 0.
*** Joint Width is maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '408' ).
    when 1.
*** Joint Width is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '409' ).
  endcase.

  case ME->CHECK_JOILE( ).
    when 0.
*** Joint Length is maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '410' ).
    when 1.
*** Joint Length is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '411' ).
  endcase.


  case ME->CHECK_STITCH( ).
    when 0.
*** Stitching is fully maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '412' ).
    when 1.
*** No Stitches is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '413' ).
    when 2.
*** Stitches per is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '414' ).
    when 3.
*** Stitching is not maintained
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '415' ).
  endcase.

  case ME->CHECK_PPASS( ).
    when 0.
***   Production Pass is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '416' ).

    when 1.
***   Production Pass is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '417' ).

  endcase.

endmethod.
method GET_STITP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STITP ).
  move LS_PARAM-ATFLV to ES_STITP-STITP.
  move LS_PARAM-UNIT  to ES_STITP-STITP_UOM.
  move LS_PARAM-SETBY to EF_SETBY.


endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method IS_CLOSED.

  data: LF_JOITY     type ZVCXI_P0S_JOITY.
  data: LS_JOITY_DEF type ZVCXI_P0S_TC340.

  LF_JOITY = ME->GET_JOITY( ).
  LS_JOITY_DEF = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ).

  check LS_JOITY_DEF-TFOLD eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
  move ABAP_TRUE to RF_CLOSED.

endmethod.
method SET_FMJOI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FMJOI ).

  move IF_FMJOI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_FOVRL.

  check IF_FOVRL ne ME->GET_FOVRL( ).

  case IF_FOVRL.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_JOILE( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_JOILE( IF_SETBY = SPACE ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRL_CHANGED ).

endmethod.
method SET_FOVRS.

  check IF_FOVRS ne ME->GET_FOVRS( ).

  case IF_FOVRS.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_NOSTI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      ME->SET_STITP( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_NOSTI( IF_SETBY = SPACE ).
      ME->SET_STITP( IF_SETBY = SPACE ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRS_CHANGED ).

endmethod.
method SET_FOVRW.

  check IF_FOVRW ne ME->GET_FOVRW( ).

  case IF_FOVRW.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_JOIWI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_JOIWI( IF_SETBY = SPACE ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRW_CHANGED ).

endmethod.
method SET_JOILE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).

  if IS_JOILE is supplied.
    move IS_JOILE-JOILE     to LS_PARAM-ATFLV.
    move IS_JOILE-JOILE_UOM to LS_PARAM-UNIT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOILE_CHANGED ).
  elseif IF_SETBY is initial.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
  endif.

endmethod.
method SET_JOIPO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).

  move IF_JOIPO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIPO_CHANGED ).
  endif.

endmethod.
method SET_JOITY.

  data:  LF_CHANGED type  ABAP_BOOL.
  data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.

  move IF_JOITY to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED =  ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOITY_CHANGED ).
  endif.

endmethod.
method SET_JOIWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).

  if IS_JOIWI is supplied.
    move IS_JOIWI-JOIWI     to LS_PARAM-ATFLV.
    move IS_JOIWI-JOIWI_UOM to LS_PARAM-UNIT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIWI_CHANGED ).
  elseif IF_SETBY is initial.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
  endif.

endmethod.
method SET_NOSTI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOSTI ).

  if IF_NOSTI is supplied.
    move IF_NOSTI to LS_PARAM-ATFLV.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOSTI_CHANGED ).
    elseif IF_SETBY is initial.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_PPASS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).

  move IF_PPASS to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PPASS_CHANGED ).
  endif.

endmethod.
method SET_STITP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STITP ).

  if IS_STITP is supplied.
    move IS_STITP-STITP     to LS_PARAM-ATFLV.
    move IS_STITP-STITP_UOM to LS_PARAM-UNIT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STITP_CHANGED ).
    elseif IF_SETBY is initial.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
