
class ZCL_VCXI_P2SS_PR_CSTEP_PRINT definition
  public
  inheriting from ZCL_VCXI_P2SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_TUSER .
  interfaces ZIF_VCXI_PXSS_PRINT .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCSS_DOC_USER .

  constants C_IEVNT_O_SETTN_CHANGED type /VCXI/VKSC_IEVNT value 'SETTN_CHANGED' ##NO_TEXT.
  constants C_PARID_NOACC type /VCXI/VKS_PARID value 'ZVCXI_PX_NOACC' ##NO_TEXT.
  constants C_PARID_NOATC type /VCXI/VKS_PARID value 'ZVCXI_PX_NOATC' ##NO_TEXT.
  constants C_PARID_NODDG type /VCXI/VKS_PARID value 'ZVCXI_PX_NODDG' ##NO_TEXT.
  constants C_PARID_PRARE type /VCXI/VKS_PARID value 'ZVCXI_P0_PRARE' ##NO_TEXT.
  constants C_PARID_PRSID type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSID' ##NO_TEXT.
  constants C_PARID_SETTN type /VCXI/VKS_PARID value 'ZVCXI_PX_SETTN' ##NO_TEXT.
  constants C_PARID_SHTDI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTDI' ##NO_TEXT.

  methods GET_NOACC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOACC) type ZVCXI_PXS_NOACC
    raising
      /VCXI/CX_CKX .
  methods GET_NOATC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOATC) type ZVCXI_PXS_NOATC
    raising
      /VCXI/CX_CKX .
  methods GET_NODDG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NODDG) type ZVCXI_PXS_NODDG
    raising
      /VCXI/CX_CKX .
  methods GET_PD
    returning
      value(RS_PD) type ZVCXI_PXE_DMS_S_PD
    raising
      /VCXI/CX_CKX .
  methods GET_PRARE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_PRARE) type ZVCXI_P0S_S_PRARE
    raising
      /VCXI/CX_CKX .
  methods GET_PRSID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRSID) type ZVCXI_P0S_PRSID
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_DOC_MGR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_DOC_MGR) type ref to ZCL_VCXI_XCSS_PR_DOC_MGR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_TINFO
    exporting
      !ER_GATE_TINFO type ref to /VCXI/CL_VKSR_GATE
      !EF_ID type /VCXI/CKX_ID
    returning
      value(RR_PR_TINFO) type ref to ZCL_VCXI_XCSS_PR_TINFO
    raising
      /VCXI/CX_CKX .
  methods GET_SETTN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_FOTUT type ZVCXI_XCS_FOTUT
    returning
      value(RF_SETTN) type ZVCXI_PXS_SETTN
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SHTDI) type ZVCXI_P0SS_SHTDI
    raising
      /VCXI/CX_CKX .
  methods SET_DESDD
    importing
      !IF_DESDD type ZVCXI_PXS_DESDD optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DESDO
    importing
      !IF_DESDO type ZVCXI_PXS_DESDO optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOACC
    importing
      !IF_NOACC type ZVCXI_PXS_NOACC optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOATC
    importing
      !IF_NOATC type ZVCXI_PXS_NOATC optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
      !IF_TINK type ZVCXI_PXS_TINK optional
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_NODDG
    importing
      !IF_NODDG type ZVCXI_PXS_NODDG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRARE
    importing
      !IS_PRARE type ZVCXI_P0S_S_PRARE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_PRSID
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SETTN
    importing
      !IF_SETTN type ZVCXI_PXS_SETTN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TPRIN
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX
    redefinition .
  methods ZIF_VCXI_P2SS_COMM_NEXT~GET_SURWT
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_LOAD_DATA_DESDO type /VCXI/VKSC_IEVNT value 'LOAD_DATA_DESDO' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DESDD type /VCXI/VKSC_IEVNT value 'RECALC_DESDD' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRARE type /VCXI/VKSC_IEVNT value 'RECALC_PRARE' ##NO_TEXT.
  constants C_IEVNT_I_REQ_INK_DEFAULT type /VCXI/VKSC_IEVNT value 'REQ_INK_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_INK_DEFAULT_REQ type /VCXI/VKSC_IEVNT value 'INK_DEFAULT_REQ' ##NO_TEXT.
  constants C_IEVNT_O_NOACC_CHANGED type /VCXI/VKSC_IEVNT value 'NOACC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOATC_CHANGED type /VCXI/VKSC_IEVNT value 'NOATC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NODDG_CHANGED type /VCXI/VKSC_IEVNT value 'NODDG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRARE_CHANGED type /VCXI/VKSC_IEVNT value 'PRARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRSID_CHANGED type /VCXI/VKSC_IEVNT value 'PRSID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTDI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTDI_CHANGED' ##NO_TEXT.

  methods CHECK_DESDO_DATA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_INK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MARK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NODDG
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRARE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRSID
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TPRIN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_MS_INK_SURWT
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_INK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_TINFO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA_DESDO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DESDD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRARE
    raising
      /VCXI/CX_CKX .
  methods IS_TINFO_NEEDED
    returning
      value(RF_NEEDED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_PR_CSTEP_PRINT definition
class ZCL_VCXI_P2SS_PR_CSTEP_PRINT implementation.
  method CHECK_DESDO_DATA.

    data: LF_DESDO type ZVCXI_PXS_DESDO,
          LF_RELEA type ABAP_BOOL.
    data: LS_PRARE type ZVCXI_P0S_S_PRARE.
    data: LT_PDINK     type ZVCXI_PXE_DMS_TT_PDINK.
    data: LR_DMSEXT_PD type ref to ZCL_VCXI_PXE_DMS_DMSEXT_PD,
          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK type ref to ZCL_VCXI_PXSS_PR_MS_INK.


*** Ensure a Design Document has been specified and is released
    LF_DESDO = ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( importing EF_RELEA = LF_RELEA ).
    check LF_DESDO is not initial.

***--------------------------------------------------------------------------------------
*** Get instance of DMS Data Extension for Print Design
    try.
        LR_DMSEXT_PD ?= ZCL_VCXI_PXE_DMS_DMSEXT_PD=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( LF_DESDO ) ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
    endtry.

***--------------------------------------------------------------------------------------
*** Check Plant of Design Document matches Configuration
    if ME->GET_WERKS( ) ne LR_DMSEXT_PD->S_PD-WERKS.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Plant of Print Design doesn't match Printing Step.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '409' ).
      endif.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Further Check only for released Design Documents
    if LF_RELEA eq ABAP_TRUE.
***   Get Inks Information
      loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ) into LR_GATE.
        append cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR )->GET_PDINK( ) to LT_PDINK.
      endloop.
      loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ) into LR_GATE.
        append cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->GET_PDINK( ) to LT_PDINK.
      endloop.

***   Adjust Units
      loop at LT_PDINK assigning field-symbol(<S_PDINK>).
        check LINE_EXISTS( LR_DMSEXT_PD->T_PDINK[ SY-TABIX ] ).
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = <S_PDINK>-APWGT
                                                           IF_UOM_IN    = <S_PDINK>-APWGT_UOM
                                                           IF_UOM_OUT   = LR_DMSEXT_PD->T_PDINK[ SY-TABIX ]-APWGT_UOM
                                                 importing EF_VALUE_OUT = <S_PDINK>-APWGT
                                                           EF_UOM_OUT   = <S_PDINK>-APWGT_UOM ).
      endloop.

      LS_PRARE = ME->GET_PRARE( ).
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_PRARE-PRARE
                                                         IF_UOM_IN    = LS_PRARE-PRARE_UOM
                                                         IF_UOM_OUT   = LR_DMSEXT_PD->S_PD-S_PRARE-PRARE_UOM
                                               importing EF_VALUE_OUT = LS_PRARE-PRARE
                                                         EF_UOM_OUT   = LS_PRARE-PRARE_UOM ).

***   Check Print Design Data
      if LR_DMSEXT_PD->S_PD    eq ME->GET_PD( ) and
         LR_DMSEXT_PD->T_PDINK eq LT_PDINK.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Print Design Information match.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '410' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Print Design Information don't match.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '411' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_INK.

    data: LF_MAINTAINED type ABAP_BOOL.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Ignore Check if Number of Colors is maitained
    if ME->ZIF_VCXI_PXSS_PRINT~GET_NOCOL( ) eq 0.
      loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                     IF_INUSE = ABAP_TRUE ) into LR_GATE.
        if cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR )->GET_COVRG( )-COVRG ne 0.
          LF_MAINTAINED = ABAP_TRUE.
        endif.
      endloop.

      if LF_MAINTAINED ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Ink Information not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '171' ).
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Check Min/Max requirement per Ink Types of Print Type
    loop at ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ) ) into data(LS_TINK_INFO)
                                                                                                        where QTYMI ne 0
                                                                                                         or   QTYMA ne 0.
      data(LF_NOCOL) = ME->ZIF_VCXI_PXSS_PRINT~GET_NOCOL( IF_TINK = LS_TINK_INFO-TINK ).

***   Check Minimum
      if LS_TINK_INFO-QTYMI ne 0 and
         LS_TINK_INFO-QTYMI gt LF_NOCOL.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Required minimum for &1 is &2.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '172'
                                   IF_MSGV1 = LS_TINK_INFO-TINK
                                   IF_MSGV2 = LS_TINK_INFO-QTYMI ).
        endif.
      endif.

***   Check Maximum
      if LS_TINK_INFO-QTYMA ne 0 and
         LS_TINK_INFO-QTYMA lt LF_NOCOL.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Allowed maximum for &1 is &2.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '173'
                                   IF_MSGV1 = LS_TINK_INFO-TINK
                                   IF_MSGV2 = LS_TINK_INFO-QTYMA ).
        endif.
      endif.
    endloop.

  endmethod.
  method CHECK_MARK.

    data: LF_TPRIN type ZVCXI_PXS_TPRIN.

*** Get Print Type
    LF_TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).
    check LF_TPRIN is not initial.

*** Continue check only if Print Type doesn't allow Markings
    check not ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_FMRKA( IF_TPRIN = LF_TPRIN ).

    if ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                              IF_INUSE = ABAP_TRUE ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Print Type doesn't allow Markings.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '415' ).
      endif.
    endif.

  endmethod.
  method CHECK_NODDG.

    check ME->GET_NODDG( ) le 1.

    if ME->GET_NOACC( ) gt 0 or     "Additional Number of Color Changes
       ME->GET_NOATC( ) gt 0.       "Additional Number of Ink Tool Changes
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of different Designs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '420' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRARE.

*** Check Printable Area
    if ME->GET_PRARE( )-PRARE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Printable Area is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '405' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Printable Area is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '406' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRSID.

*** Check Print Side
    if ME->GET_PRSID( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Print Side is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '403' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Print Side is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '404' ).
      endif.
    endif.

  endmethod.
  method CHECK_TPRIN.

*** Check Print Type
    if ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Print Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '401' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Print Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '402' ).
      endif.
    endif.

  endmethod.
  method GET_DESCR.

    data: LF_TPRIN       type ZVCXI_PXS_TPRIN,
          LF_TPRIN_DESCR type /VCXI/CKX_DESCR,
          LF_PRSID       type ZVCXI_P0S_PRSID,
          LF_PRSID_DESCR type /VCXI/CKX_DESCR.

***--------------------------------------------------------------------------------------
*** Get Print Type
    LF_TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( importing EF_DESCR = LF_TPRIN_DESCR ).
    if LF_TPRIN_DESCR is initial.
      LF_TPRIN_DESCR = LF_TPRIN.
    endif.

*** Get Print Side
    LF_PRSID = ME->GET_PRSID( importing EF_DESCR = LF_PRSID_DESCR ).
    if LF_PRSID_DESCR is initial.
      LF_PRSID_DESCR = LF_PRSID.
    endif.

***--------------------------------------------------------------------------------------
*** Build Description
    if LF_TPRIN_DESCR is not initial.
      RF_DESCR = LF_TPRIN_DESCR.
    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

    if LF_PRSID_DESCR is not initial.
      RF_DESCR = |{ RF_DESCR } ({ LF_PRSID_DESCR })|.
    endif.

  endmethod.
  method GET_MS_INK_SURWT.

    data: LS_SURWT type        ZVCXI_PXS_S_SURWT,
          LS_COVRG type        ZVCXI_P0S_S_COVRG.
    data: LT_GATE type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get all Inks
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                           IF_INUSE = ABAP_TRUE ) to LT_GATE.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                           IF_INUSE = ABAP_TRUE ) to LT_GATE.

*** Add Surface Weigth of all Inks
    loop at LT_GATE into LR_GATE.
      case type of LR_GATE->R_CLSPR.
***     Analog Ink
        when type ZCL_VCXI_PXSS_PR_MS_INK into data(LR_PR_MS_INK).
***       Get Ink Surface Weight and Coverage
          LS_SURWT = LR_PR_MS_INK->GET_SURWT( ).
          LS_COVRG = LR_PR_MS_INK->GET_COVRG( ).

***     Digital Ink
        when type ZCL_VCXI_PXSS_PR_MS_DINK into data(LR_PR_MS_DINK).
***       Get Ink Surface Weight and Coverage
          LS_SURWT = LR_PR_MS_DINK->GET_SURWT( ).
          LS_COVRG = LR_PR_MS_DINK->GET_COVRG( ).

        when others.
          continue.
      endcase.

***   Adjust Surface Weight by Coverage
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = LS_COVRG-COVRG
                                                          IF_CALCV_UOM_2 = LS_COVRG-COVRG_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

***   Add to total Surface Weight
      if RS_SURWT-SURWT_UOM is initial.
        move LS_SURWT to RS_SURWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                            IF_CALCV_2     = RS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = RS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SURWT-SURWT_UOM
                                                  importing EF_CALCV       = RS_SURWT-SURWT
                                                            EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_NOACC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOACC ).
    move LS_PARAM-ATFLV to RF_NOACC.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOATC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOATC ).
    move LS_PARAM-ATFLV to RF_NOATC.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NODDG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NODDG ).
    move LS_PARAM-ATFLV to RF_NODDG.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PD.

    RS_PD-WERKS   = ME->GET_WERKS( ).
    RS_PD-TPRIN   = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).
    RS_PD-PRSID   = ME->GET_PRSID( ).
    RS_PD-SHTDI   = ME->GET_SHTDI( ).
    RS_PD-S_PRARE = ME->GET_PRARE( ).
    RS_PD-SETTN   = ME->GET_SETTN( ).

  endmethod.
  method GET_PRARE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRARE ).
    move LS_PARAM-ATFLV to RS_PRARE-PRARE.
    move LS_PARAM-UNIT  to RS_PRARE-PRARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.


    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_PRSID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).
    move LS_PARAM-ATWRT to RF_PRSID.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_PRSID is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRSID_DESCR( IF_PRSID = RF_PRSID ).
    endif.

  endmethod.
  method GET_PRVDR_DOC_MGR.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_DOC_MGR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Document Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_DOC_MGR=>C_IPRVT_DOC_MGR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_DOC_MGR.

  endmethod.
  method GET_PRVDR_TINFO.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


*** Check if Provider exists
    data(LT_PRVDR_DEF) = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO ).
    EF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID optional ).
    check EF_ID is not initial.

***--------------------------------------------------------------------------------------
*** Get Tooling Information provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Tooling Information Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_TINFO.
          check RR_PR_TINFO is bound.
          move LR_GATE to ER_GATE_TINFO.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_TINFO, ER_GATE_TINFO.
      endtry.
    endloop.

  endmethod.
  method GET_SETTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SETTN ).
    move LS_PARAM-ATWRT to RF_SETTN.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_SETTN is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_SETTN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

    if EF_FOTUT is requested.
***   Batch-managed Tool Sets are considered One-Time Usage
      data(LF_WERKS) = ME->GET_WERKS( ).
      select single XCHPF
             into @data(LF_XCHPF)
             from MARC
            where MATNR eq @RF_SETTN
             and  WERKS eq @LF_WERKS.
      if SY-SUBRC eq 0 and
         LF_XCHPF eq ABAP_TRUE.
        EF_FOTUT = ABAP_TRUE.
      endif.
    endif.

  endmethod.
  method GET_SHTDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data:  LT_D07V    type standard table of DD07V.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).
    move LS_PARAM-ATWRT to RF_SHTDI.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_P0SS_SHTDI'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_SHTDI ]-DDTEXT optional ).
    endif.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Print Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TPRIN( ) ).

*** Check Print Side
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRSID( ) ).

*** Check Printable Area
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRARE( ) ).

*** Check Number of different Designs
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NODDG( ) ).

*** Check Design Document Data
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DESDO_DATA( ) ).

*** Check Ink
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_INK( ) ).

*** Check Marking
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MARK( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Print Type
    ME->CHECK_TPRIN( IR_MESSAGE = IR_MESSAGE ).

*** Check Print Side
    ME->CHECK_PRSID( IR_MESSAGE = IR_MESSAGE ).

*** Check Printable Area
    ME->CHECK_PRARE( IR_MESSAGE = IR_MESSAGE ).

*** Check Number of different Designs
    ME->CHECK_NODDG( IR_MESSAGE = IR_MESSAGE ).

*** Check Design Document Data
    ME->CHECK_DESDO_DATA( IR_MESSAGE = IR_MESSAGE ).

*** Check Ink
    ME->CHECK_INK( IR_MESSAGE = IR_MESSAGE ).

*** Check Marking
    ME->CHECK_MARK( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_PRARE.
        ME->HANDLE_RECALC_PRARE( ).

      when C_IEVNT_I_RECALC_DESDD.
        ME->HANDLE_RECALC_DESDD( ).
      when C_IEVNT_I_LOAD_DATA_DESDO.
        ME->HANDLE_LOAD_DATA_DESDO( ).
      when ZIF_VCXI_PXSS_PRINT~C_IEVNT_I_INIT_INK.
        ME->HANDLE_INIT_INK( ).
      when ZIF_VCXI_PXSS_PRINT~C_IEVNT_I_INIT_TINFO.
        ME->HANDLE_INIT_TINFO( ).
      when ZIF_VCXI_XCSS_TUSER~C_IEVNT_I_REQ_TINFO_DEFAULT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_TUSER~C_IEVNT_O_TINFO_DEFAULT_REQ ).

      when C_IEVNT_I_REQ_INK_DEFAULT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INK_DEFAULT_REQ ).
    endcase.

  endmethod.
  method HANDLE_INIT_INK.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Delete all Inks
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

***--------------------------------------------------------------------------------------
*** Add required Ink Types of Print Type
    loop at ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ) ) into data(LS_TINK_INFO)
                                                                                                        where QTYMI gt 0.
      case LS_TINK_INFO-PRTEC.
***     Traditional Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
          do LS_TINK_INFO-QTYMI times.
            LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK ).
            LR_GATE->SET_INUSE( ABAP_TRUE ).
            cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->SET_TINK( IF_TINK = LS_TINK_INFO-TINK ).
          enddo.

***     Digital Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
          do LS_TINK_INFO-QTYMI times.
            LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK ).
            cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR )->SET_TINK( IF_TINK = LS_TINK_INFO-TINK ).
          enddo.

      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Initialize Print Mutation
    ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( importing EF_PRTEC = LF_PRTEC ).
    case LF_PRTEC.
      when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
        ME->SET_NOACC( IF_SETBY = SPACE ).
        ME->SET_NOATC( IF_SETBY = SPACE ).
    endcase.

  endmethod.
  method HANDLE_INIT_TINFO.

    data: LF_ID type /VCXI/CKX_ID.
    data: LR_GATE_TINFO type ref to /VCXI/CL_VKSR_GATE.


*** Get Provider Tooling Information
    ME->GET_PRVDR_TINFO( importing EF_ID         = LF_ID
                                   ER_GATE_TINFO = LR_GATE_TINFO ).
    check LF_ID is not initial.


    if ME->IS_TINFO_NEEDED( ).
***   Create Tooling Information if needed
      if LR_GATE_TINFO is not bound.
        ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
      endif.
    else.
***   Remove Tooling Information
      if LR_GATE_TINFO is bound.
        LR_GATE_TINFO->DO_FREE( ).
      endif.
    endif.

  endmethod.
  method HANDLE_LOAD_DATA_DESDO.

*** Ensure a Design Document has been specified
    if ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ) is not initial.
***   Load Design Document Data
      ME->ZIF_VCXI_PXSS_PRINT~SET_DESDO_DATA( ).
    else.
***   Clear data that is directly related to the design document
      ME->SET_SETTN( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_DESDD.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.


    if ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ) is initial.
***   Only calcualate if calculation is active
      ME->ZIF_VCXI_PXSS_PRINT~GET_DESDD( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Desing Document Description
      ME->SET_DESDD( IF_DESDD = LF_MAKTX ).

    else.
***   Initialize Desing Document Description
      ME->SET_DESDD( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_PRARE.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_PRARE type ZVCXI_P0S_S_PRARE,
          LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


***--------------------------------------------------------------------------------------
*** Do only Recalc Printable Area if not overridden
    LS_PRARE = ME->GET_PRARE( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
*** Get Sheet Dimension (Inbound)
    ME->ZIF_VCXI_P2SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).

*** Calculate Printable Area
    if LS_SHTLE-SHTLE_UOM is not initial and
       LS_SHTWI-SHTWI_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_PRARE-PRARE_UOM
                                                importing EF_CALCV       = LS_PRARE-PRARE
                                                          EF_CALCV_UOM   = LS_PRARE-PRARE_UOM ).
    else.
      clear: LS_PRARE-PRARE.
    endif.

*** Set new Printable Area
    ME->SET_PRARE( IS_PRARE = LS_PRARE ).

  endmethod.
  method IS_TINFO_NEEDED.

*** Not needed if a Design Document is defined
    if ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ) is not initial.
      RF_NEEDED = ABAP_FALSE.
      return.
    endif.

*** Not needed for Digital Printing
    ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( importing EF_PRTEC = data(LF_PRTEC) ).
    if LF_PRTEC eq ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
      RF_NEEDED = ABAP_FALSE.
      return.
    endif.

*** Needed if no condition applied
    RF_NEEDED = ABAP_TRUE.

  endmethod.
  method SET_DESDD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_DESDD ).

    move IF_DESDD  to LS_PARAM-STRNG.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_PRINT~C_IEVNT_O_DESDD_CHANGED ).
    endif.

  endmethod.
  method SET_DESDO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_DESDO ).

    if IF_DESDO is supplied.
      LS_PARAM-STRNG = IF_DESDO.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_PRINT~C_IEVNT_O_DESDO_CHANGED ).
    endif.

  endmethod.
  method SET_NOACC.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOACC ).

    if IF_NOACC is supplied.
      LS_PARAM-ATFLV = IF_NOACC.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOACC_CHANGED ).
    endif.

  endmethod.
  method SET_NOATC.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOATC ).

    if IF_NOATC is supplied.
      LS_PARAM-ATFLV = IF_NOATC.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOATC_CHANGED ).
    endif.

  endmethod.
  method SET_NOCOL.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC,
          LF_NOCOL type ZVCXI_P0S_NOCOL,
          LF_INDEX type I.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK  type ref to ZCL_VCXI_PXSS_PR_MS_INK,
          LR_PR_MS_DINK type ref to ZCL_VCXI_PXSS_PR_MS_DINK.


*** Get Print Technology of Ink Type
    LF_PRTEC = cond #( when IF_TINK is supplied then ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = IF_TINK )
                                                else ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG ).
    check LF_PRTEC is not initial.

***--------------------------------------------------------------------------------------
*** Get all Inks (Analog or Digital)
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = switch #( LF_PRTEC when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG  then ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                                                   when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL then ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK )
                                     IF_INUSE = ABAP_TRUE ).

*** Filter if a specific Ink Type is supplied
    if IF_TINK is supplied.
      loop at RT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
            if LR_PR_MS_INK->GET_TINK( ) ne IF_TINK.
              delete RT_GATE.
            endif.
          when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
            if LR_PR_MS_DINK->GET_TINK( ) ne IF_TINK.
              delete RT_GATE.
            endif.
        endcase.
      endloop.
    endif.

*** Count and compare Inks
    move LINES( RT_GATE ) to LF_NOCOL.
    check LF_NOCOL ne IF_NOCOL.

***--------------------------------------------------------------------------------------
*** Less Inks needed
    if LF_NOCOL gt IF_NOCOL.
      LF_INDEX = IF_NOCOL + 1.
      loop at RT_GATE into LR_GATE from LF_INDEX.
        LR_GATE->DO_FREE( ).
        delete RT_GATE.
      endloop.


***--------------------------------------------------------------------------------------
*** More Inks needed
    else.
      LF_INDEX = IF_NOCOL - LF_NOCOL.
      do LF_INDEX times.
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = switch #( LF_PRTEC when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG  then ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                                                            when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL then ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK ) ).
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        append LR_GATE to RT_GATE.

***     Set Ink Type if supplied
        if IF_TINK is supplied.
          case type of LR_GATE->R_CLSPR.
            when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
              LR_PR_MS_INK->SET_TINK( IF_TINK = IF_TINK ).
            when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
              LR_PR_MS_DINK->SET_TINK( IF_TINK = IF_TINK ).
          endcase.
        endif.
      enddo.
    endif.

  endmethod.
  method SET_NODDG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NODDG ).

    move IF_NODDG     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NODDG_CHANGED ).
    endif.

  endmethod.
  method SET_PRARE.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Get current Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRARE ).

    if IS_PRARE is supplied.
      move IS_PRARE-PRARE     to LS_PARAM-ATFLV.
      move IS_PRARE-PRARE_UOM to LS_PARAM-UNIT.
    endif.

    if IF_FOVRR is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRARE_CHANGED ).
    endif.

  endmethod.
  method SET_PRSID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).

    move IF_PRSID to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRSID_CHANGED ).
    endif.

  endmethod.
  method SET_SETTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SETTN ).

    if IF_SETTN is supplied.
      move IF_SETTN  to LS_PARAM-ATWRT.
    endif.

    move IF_SETBY  to LS_PARAM-SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SETTN_CHANGED ).
    endif.

  endmethod.
  method SET_SHTDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).

    move IF_SHTDI  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTDI_CHANGED ).
    endif.

  endmethod.
  method SET_TPRIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_TPRIN ).

    move IF_TPRIN           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_PRINT~C_IEVNT_O_TPRIN_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX.

    data: LT_PRINT  type ZVCXI_PXSS_TT_PRINT_COM.


*** Super
    RR_BL_FCFPROP = SUPER->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_FCFPROP is bound.

***--------------------------------------------------------------------------------------
*** Set Print Information
    LT_PRINT = RR_BL_FCFPROP->T_PRINT.
    append value #( PRSID = ME->GET_PRSID( )
                    TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( )
                    NOCOL = ME->ZIF_VCXI_PXSS_PRINT~GET_NOCOL( )
                  ) to LT_PRINT.
    RR_BL_FCFPROP->SET_PRINT( IT_PRINT = LT_PRINT ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_SURWT.

    data: LS_INK_SURWT type ZVCXI_PXS_S_SURWT.


*** Super
    RS_SURWT = SUPER->ZIF_VCXI_P2SS_COMM_NEXT~GET_SURWT( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Surface Weight of Inks
    LS_INK_SURWT = ME->GET_MS_INK_SURWT( ).

*** Add to total Surface Weight
    if LS_INK_SURWT-SURWT_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_INK_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = LS_INK_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = RS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = RS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = RS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LF_TINK type ZVCXI_PXS_TINK.
    data: LS_COVRG type ZVCXI_P0S_S_COVRG,
          LS_APWGT type ZVCXI_PXS_S_APWGT,
          LS_APVOL type ZVCXI_PXS_S_APVOL.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FDI_CSTEP_PRINT> type ZVCXI_P2SS_S_FDI_CSTEP_PRINT,
                   <S_FDI_TINK>        type ZVCXI_PXSS_S_FDI_TINK.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P2SS_S_FDI_CSTEP_PRINT.
    assign RR_DATA->* to <S_FDI_CSTEP_PRINT>.


***--------------------------------------------------------------------------------------
*** Print Type
    <S_FDI_CSTEP_PRINT>-TPRIN = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).

*** Print Side
    <S_FDI_CSTEP_PRINT>-PRSID = ME->GET_PRSID( ).

*** Number of Colors
    <S_FDI_CSTEP_PRINT>-NOCOL = ME->ZIF_VCXI_PXSS_PRINT~GET_NOCOL( ).


***--------------------------------------------------------------------------------------
*** Collect Analog/Traditional Inks Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      data(LR_PR_MS_INK) = cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR ).

      LF_TINK = LR_PR_MS_INK->GET_TINK( ).
      if LINE_EXISTS( <S_FDI_CSTEP_PRINT>-T_FDI_TINK[ TINK = LF_TINK ] ).
        assign <S_FDI_CSTEP_PRINT>-T_FDI_TINK[ TINK = LF_TINK ] to <S_FDI_TINK>.
      else.
        append value #( TINK = LF_TINK ) to <S_FDI_CSTEP_PRINT>-T_FDI_TINK assigning <S_FDI_TINK>.
      endif.

***   Count Inks
      <S_FDI_TINK>-NOCOL += 1.

***   Get Coverage
      LS_COVRG = LR_PR_MS_INK->GET_COVRG( ).
      if <S_FDI_TINK>-S_COVRG is initial and
         <S_FDI_TINK>-COVRG_VARY eq ABAP_FALSE.
        <S_FDI_TINK>-S_COVRG = LS_COVRG.
      else.
***     Check for common Coverage
        if LS_COVRG ne <S_FDI_TINK>-S_COVRG.
          clear <S_FDI_TINK>-S_COVRG.
          <S_FDI_TINK>-COVRG_VARY = ABAP_TRUE.
        endif.
      endif.

***   Get Application Weight
      LS_APWGT = LR_PR_MS_INK->GET_APWGT( ).
      if <S_FDI_TINK>-S_APWGT is initial and
         <S_FDI_TINK>-APWGT_VARY eq ABAP_FALSE.
        <S_FDI_TINK>-S_APWGT = LS_APWGT.
      else.
***     Check for common Application Weight
        if LS_APWGT ne <S_FDI_TINK>-S_APWGT.
          clear <S_FDI_TINK>-S_APWGT.
          <S_FDI_TINK>-APWGT_VARY = ABAP_TRUE.
        endif.
      endif.

      if LR_PR_MS_INK->GET_ANITN( ) is not initial.
        <S_FDI_TINK>-APWGT_VARY = ABAP_TRUE.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Collect Digital Inks Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      data(LR_PR_MS_DINK) = cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR ).

      LF_TINK = LR_PR_MS_DINK->GET_TINK( ).
      if LINE_EXISTS( <S_FDI_CSTEP_PRINT>-T_FDI_TINK[ TINK = LF_TINK ] ).
        assign <S_FDI_CSTEP_PRINT>-T_FDI_TINK[ TINK = LF_TINK ] to <S_FDI_TINK>.
      else.
        append value #( TINK = LF_TINK ) to <S_FDI_CSTEP_PRINT>-T_FDI_TINK assigning <S_FDI_TINK>.
      endif.

***   Count Inks
      <S_FDI_TINK>-NOCOL += 1.

***   Get Coverage
      LS_COVRG = LR_PR_MS_DINK->GET_COVRG( ).
      if <S_FDI_TINK>-S_COVRG is initial and
         <S_FDI_TINK>-COVRG_VARY eq ABAP_FALSE.
        <S_FDI_TINK>-S_COVRG = LS_COVRG.
      else.
***     Check for common Coverage
        if LS_COVRG ne <S_FDI_TINK>-S_COVRG.
          clear <S_FDI_TINK>-S_COVRG.
          <S_FDI_TINK>-COVRG_VARY = ABAP_TRUE.
        endif.
      endif.

***   Get Application Dimension
      <S_FDI_TINK>-APDIM = LR_PR_MS_DINK->GET_APDIM( ).

***   Get Application Weight
      LS_APWGT = LR_PR_MS_DINK->GET_APWGT( ).
      if <S_FDI_TINK>-S_APWGT is initial and
         <S_FDI_TINK>-APWGT_VARY eq ABAP_FALSE.
        <S_FDI_TINK>-S_APWGT = LS_APWGT.
      else.
***     Check for common Application Weight
        if LS_APWGT ne <S_FDI_TINK>-S_APWGT.
          clear <S_FDI_TINK>-S_APWGT.
          <S_FDI_TINK>-APWGT_VARY = ABAP_TRUE.
        endif.
      endif.

***   Get Application Volume
      LS_APVOL = LR_PR_MS_DINK->GET_APVOL( ).
      if <S_FDI_TINK>-S_APVOL is initial and
         <S_FDI_TINK>-APVOL_VARY eq ABAP_FALSE.
        <S_FDI_TINK>-S_APVOL = LS_APVOL.
      else.
***     Check for common Application Volume
        if LS_APVOL ne <S_FDI_TINK>-S_APVOL.
          clear <S_FDI_TINK>-S_APVOL.
          <S_FDI_TINK>-APVOL_VARY = ABAP_TRUE.
        endif.
      endif.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CSTEP_PRINT_OLD type ZVCXI_P2SS_S_FDI_CSTEP_PRINT,
          LS_FDI_CSTEP_PRINT_NEW type ZVCXI_P2SS_S_FDI_CSTEP_PRINT,
          LS_FDI_TINK_OLD        type ZVCXI_PXSS_S_FDI_TINK,
          LS_FDI_TINK_NEW        type ZVCXI_PXSS_S_FDI_TINK.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_DATA_OLD   type ref to DATA,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK  type ref to ZCL_VCXI_PXSS_PR_MS_INK,
          LR_PR_MS_DINK type ref to ZCL_VCXI_PXSS_PR_MS_DINK.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CSTEP_PRINT_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CSTEP_PRINT_NEW = corresponding #( <S_DATA> ).
    endif.

*** General Check for Changes
    check LS_FDI_CSTEP_PRINT_OLD ne LS_FDI_CSTEP_PRINT_NEW.

***--------------------------------------------------------------------------------------
*** Print Type
    if LS_FDI_CSTEP_PRINT_OLD-TPRIN ne LS_FDI_CSTEP_PRINT_NEW-TPRIN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'TPRIN' ] ).
      ME->SET_TPRIN( IF_TPRIN = LS_FDI_CSTEP_PRINT_NEW-TPRIN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Print Side
    if LS_FDI_CSTEP_PRINT_OLD-PRSID ne LS_FDI_CSTEP_PRINT_NEW-PRSID and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'PRSID' ] ).
      ME->SET_PRSID( IF_PRSID = LS_FDI_CSTEP_PRINT_NEW-PRSID
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Number of Colors
    if LS_FDI_CSTEP_PRINT_OLD-NOCOL ne LS_FDI_CSTEP_PRINT_NEW-NOCOL and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOCOL' ] ).
      ME->SET_NOCOL( IF_NOCOL = LS_FDI_CSTEP_PRINT_NEW-NOCOL ).
    endif.

***--------------------------------------------------------------------------------------
*** Update Inks
    if LS_FDI_CSTEP_PRINT_OLD-T_FDI_TINK ne LS_FDI_CSTEP_PRINT_NEW-T_FDI_TINK and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'T_FDI_TINK' ] ).
      loop at LS_FDI_CSTEP_PRINT_NEW-T_FDI_TINK into LS_FDI_TINK_NEW.
        LS_FDI_TINK_OLD = value #( LS_FDI_CSTEP_PRINT_OLD-T_FDI_TINK[ TINK = LS_FDI_TINK_NEW-TINK ] optional ).

        if LS_FDI_TINK_NEW ne LS_FDI_TINK_OLD.
***       Set Number of Colors
          LT_GATE = ME->SET_NOCOL( IF_NOCOL = LS_FDI_TINK_NEW-NOCOL
                                   IF_TINK  = LS_FDI_TINK_NEW-TINK ).

***       Coverage
          if LS_FDI_TINK_NEW-COVRG_VARY ne ABAP_TRUE and
             LS_FDI_TINK_NEW-S_COVRG ne LS_FDI_TINK_OLD-S_COVRG.
            loop at LT_GATE into LR_GATE.
              case type of LR_GATE->R_CLSPR.
                when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
                  LR_PR_MS_INK->SET_COVRG( IS_COVRG = LS_FDI_TINK_NEW-S_COVRG
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
                  LR_PR_MS_DINK->SET_COVRG( IS_COVRG = LS_FDI_TINK_NEW-S_COVRG
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.
          endif.

***       Application Weight
          if LS_FDI_TINK_NEW-APWGT_VARY ne ABAP_TRUE and
             LS_FDI_TINK_NEW-S_APWGT ne LS_FDI_TINK_OLD-S_APWGT.
            loop at LT_GATE into LR_GATE.
              case type of LR_GATE->R_CLSPR.
                when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
                  LR_PR_MS_INK->SET_APWGT( IS_APWGT = LS_FDI_TINK_NEW-S_APWGT
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
                  LR_PR_MS_DINK->SET_APWGT( IS_APWGT = LS_FDI_TINK_NEW-S_APWGT
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.
          endif.

***       Application Volume
          if LS_FDI_TINK_NEW-APVOL_VARY ne ABAP_TRUE and
             LS_FDI_TINK_NEW-S_APVOL ne LS_FDI_TINK_OLD-S_APVOL.
            loop at LT_GATE into LR_GATE.
              case type of LR_GATE->R_CLSPR.
                when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
                  LR_PR_MS_DINK->SET_APVOL( IS_APVOL = LS_FDI_TINK_NEW-S_APVOL
                                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.
          endif.
        endif.

***     Mark as processed
        delete LS_FDI_CSTEP_PRINT_OLD-T_FDI_TINK where TINK = LS_FDI_TINK_NEW-TINK.
      endloop.

***   Remove old/invalid Inks
      loop at LS_FDI_CSTEP_PRINT_OLD-T_FDI_TINK into LS_FDI_TINK_OLD.
        ME->SET_NOCOL( IF_NOCOL = 0
                       IF_TINK  = LS_FDI_TINK_OLD-TINK ).
      endloop.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~CREATE_DESDO.

    data: LT_PDINK type ZVCXI_PXE_DMS_TT_PDINK.
    data: LR_PR_DOC_MGR type ref to ZCL_VCXI_XCSS_PR_DOC_MGR,
          LR_DMSEXT_PD  type ref to ZCL_VCXI_PXE_DMS_DMSEXT_PD,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK  type ref to ZCL_VCXI_PXSS_PR_MS_INK.


***--------------------------------------------------------------------------------------
*** Get Document Manager Provider
    LR_PR_DOC_MGR = ME->GET_PRVDR_DOC_MGR( ).
    check LR_PR_DOC_MGR is bound.

*** Add Document Instance
    LR_PR_DOC_MGR->ADD_DOCS( IT_DOC_KEY = value #( ( IR_BL_DOC->GET_DOC_KEY( ) ) ) ).

***--------------------------------------------------------------------------------------
*** Get instance of DMS Data Extension for Print Design
    try.
        LR_DMSEXT_PD ?= ZCL_VCXI_PXE_DMS_DMSEXT_PD=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = IR_BL_DOC->F_DOKAR
                                                                                                                                    IF_DOKNR = IR_BL_DOC->F_DOKNR
                                                                                                                                    IF_DOKTL = IR_BL_DOC->F_DOKTL
                                                                                                                                    IF_DOKVR = IR_BL_DOC->F_DOKVR ) ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
    endtry.

*** Collect Inks Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR )->GET_PDINK( ) to LT_PDINK.
    endloop.
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->GET_PDINK( ) to LT_PDINK.
    endloop.

*** Update Values
    LR_DMSEXT_PD->SET_PD( IS_PD = ME->GET_PD( ) ).
    LR_DMSEXT_PD->SET_PDINK( IT_PDINK = LT_PDINK ).

*** Call Save in order to set the values during saving
    LR_DMSEXT_PD->SAVE( IF_UPDATE_TASK = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Design Document
    ME->SET_DESDO( IF_DESDO = conv #( ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = IR_BL_DOC->F_DOKAR
                                                                          IF_DOKNR = IR_BL_DOC->F_DOKNR
                                                                          IF_DOKTL = IR_BL_DOC->F_DOKTL
                                                                          IF_DOKVR = IR_BL_DOC->F_DOKVR ) ) ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~GET_DESDD.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_BL_DOC  type ref to ZCL_VCXI_XCSS_BL_DOC.


    ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( importing ER_BL_DOC = LR_BL_DOC ).
    if LR_BL_DOC is not bound.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_DESDD ).
      RF_DESDD = LS_PARAM-STRNG.
      EF_SETBY = LS_PARAM-SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
***   Multi-Language Description
      if ET_DKTXT is requested.
        append value #( LANGU = SY-LANGU  "Logon Language
                        DKTXT = RF_DESDD
                      ) to ET_DKTXT.
        ME->GET_WERKS( importing EF_LANGU = data(LF_LANGU) ).
        if LF_LANGU ne SY-LANGU.
          append value #( LANGU = LF_LANGU  "Plant Language
                          DKTXT = RF_DESDD
                        ) to ET_DKTXT.
        endif.
      endif.
    else.
      RF_DESDD = LR_BL_DOC->GET_DESCR( importing ET_DKTXT = ET_DKTXT ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~GET_DESDO.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM,
          LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_DESDO ).
    move LS_PARAM-STRNG to RF_DESDO.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_DESDO is not initial.

***----------------------------------------------------------------------------
*** Release Status of Design Document
    LS_DOC_KEY = ZCL_VCXI_XCSS_BL_DOC=>DECRYPT_GUID( IF_GUID = conv #( RF_DESDO ) ).
    ER_BL_DOC = ZCL_VCXI_XCSS_BL_DOC=>GET_INSTANCE( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                    IF_DOKNR = LS_DOC_KEY-DOKNR
                                                    IF_DOKTL = LS_DOC_KEY-DOKTL
                                                    IF_DOKVR = LS_DOC_KEY-DOKVR ).
    check ER_BL_DOC is bound.
    EF_RELEA = ER_BL_DOC->F_FRKNZ.

    if EF_RELEA eq ABAP_TRUE.
      EF_LINK_ICON  = ICON_CONNECT.
      EF_LINK_DESCR = text-T01.
    else.
      EF_LINK_ICON  = ICON_DISCONNECT.
      EF_LINK_DESCR = text-T02.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~GET_NOCOL.

    types: begin of YS_TINK,
             TINK  type ZVCXI_PXS_TINK,
             NOCOL type ZVCXI_P0S_NOCOL,
           end   of YS_TINK.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC,
          LF_TINK  type ZVCXI_PXS_TINK.
    data: LT_GATE type        /VCXI/VKSR_TT_GATE,
          LT_TINK type table of YS_TINK.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK  type ref to ZCL_VCXI_PXSS_PR_MS_INK,
          LR_PR_MS_DINK type ref to ZCL_VCXI_PXSS_PR_MS_DINK.
    field-symbols: <S_TINK> type YS_TINK.


***--------------------------------------------------------------------------------------
*** Get Print Technology of Ink Type
    LF_PRTEC = cond #( when IF_TINK is supplied then ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = IF_TINK )
                                                else ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG ).
    check LF_PRTEC is not initial.

*** Get all Inks (Analog or Digital)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = switch #( LF_PRTEC when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG  then ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                                                   when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL then ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK )
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Filter by Ink Type
    if IF_TINK is supplied.
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
            if LR_PR_MS_INK->GET_TINK( ) ne IF_TINK.
              delete LT_GATE.
            endif.
          when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
            if LR_PR_MS_DINK->GET_TINK( ) ne IF_TINK.
              delete LT_GATE.
            endif.
          when others.
            delete LT_GATE.
        endcase.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Return Number of Inks
    move LINES( LT_GATE ) to RF_NOCOL.

*** Description
    if EF_DESCR is requested.
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_PXSS_PR_MS_INK into LR_PR_MS_INK.
            LF_TINK = LR_PR_MS_INK->GET_TINK( ).
          when type ZCL_VCXI_PXSS_PR_MS_DINK into LR_PR_MS_DINK.
            LF_TINK = LR_PR_MS_DINK->GET_TINK( ).
          when others.
            clear LF_TINK.
        endcase.

        read table LT_TINK assigning <S_TINK> with key TINK = LF_TINK.
        if SY-SUBRC ne 0.
          append value #( TINK = LF_TINK ) to LT_TINK assigning <S_TINK>.
        endif.
        add 1 to <S_TINK>-NOCOL.
      endloop.
      loop at LT_TINK assigning <S_TINK>.
        if SY-TABIX eq 1.
          EF_DESCR = |{ ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = <S_TINK>-TINK ) } { <S_TINK>-NOCOL alpha = out }|.
        else.
          EF_DESCR = |{ EF_DESCR } / { ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = <S_TINK>-TINK ) } { <S_TINK>-NOCOL alpha = out }|.
        endif.
      endloop.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~GET_TPRIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_PRINT~C_PARID_TPRIN ).
    move LS_PARAM-ATWRT to RF_TPRIN.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_TPRIN is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_DESCR( IF_TPRIN = RF_TPRIN ).
    endif.

    if EF_PRTEC is requested.
***   Identify Print Technology
      EF_PRTEC = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_PRTEC( IF_TPRIN = RF_TPRIN ).
    endif.

    if EF_FAPCA is requested.
***   Is Adapter/Cylinder allowed for Print Type
      EF_FAPCA = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_FAPCA( IF_TPRIN = RF_TPRIN ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT~SET_DESDO_DATA.

    data: LR_DMSEXT_PD type ref to ZCL_VCXI_PXE_DMS_DMSEXT_PD,
          LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get instance of DMS Data Extension for Print Design
    try.
        LR_DMSEXT_PD ?= ZCL_VCXI_PXE_DMS_DMSEXT_PD=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ) ) ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
    endtry.

***--------------------------------------------------------------------------------------
*** Set Values of Print Design to Conversion Step
    ME->SET_TPRIN( IF_TPRIN = LR_DMSEXT_PD->S_PD-TPRIN
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_PRSID( IF_PRSID = LR_DMSEXT_PD->S_PD-PRSID
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_SHTDI( IF_SHTDI = LR_DMSEXT_PD->S_PD-SHTDI
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_PRARE( IS_PRARE = LR_DMSEXT_PD->S_PD-S_PRARE
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_SETTN( IF_SETTN = LR_DMSEXT_PD->S_PD-SETTN ).

***--------------------------------------------------------------------------------------
*** Raise Events, as a change in the Print Type will initialize all Inks
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Delete all Inks
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

*** Load Inks based on Print Design
    loop at LR_DMSEXT_PD->T_PDINK into data(LS_PDINK).
      case ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = LS_PDINK-TINK ).
***     Traditional Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
          LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK ).
          LR_GATE->SET_INUSE( ABAP_TRUE ).
          cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->SET_PDINK( IS_PDINK = LS_PDINK ).

***     Digital Inks
        when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
          LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK ).
          cast ZCL_VCXI_PXSS_PR_MS_DINK( LR_GATE->R_CLSPR )->SET_PDINK( IS_PDINK = LS_PDINK ).

      endcase.
    endloop.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( )  "Print Type
                                changing  CT_ATTR      = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->ZIF_VCXI_PXSS_PRINT~GET_NOCOL( )  "No of Colors
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://print'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
  method ZIF_VCXI_XCSS_DOC_USER~CLEAR_USAGE.

*** Clear Printing Design Document if Key is matching
    if ZCL_VCXI_XCSS_BL_DOC=>DECRYPT_GUID( IF_GUID = conv #( ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ) ) ) eq IS_DOC_KEY.
      ME->SET_DESDO( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_XCSS_DOC_USER~CREATE_DOC.

*** Create Design Document
    ME->ZIF_VCXI_PXSS_PRINT~CREATE_DESDO( IR_BL_DOC = IR_BL_DOC ).

  endmethod.
  method ZIF_VCXI_XCSS_DOC_USER~GET_USAGE.

    data: LF_DESDO   type ZVCXI_PXS_DESDO.


*** Get Design Document
    LF_DESDO = ME->ZIF_VCXI_PXSS_PRINT~GET_DESDO( ).

    if LF_DESDO is not initial.
***   Get Printing Design Document Key of GUID
      append ZCL_VCXI_XCSS_BL_DOC=>DECRYPT_GUID( IF_GUID  = conv #( LF_DESDO ) ) to RT_DOC_KEY.
    endif.

  endmethod.
  method ZIF_VCXI_XCSS_DOC_USER~SET_USAGE.

    data: LF_DESDO  type ZVCXI_PXS_DESDO.
    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.


    if IT_DOC_KEY is not initial.
***   Use last Document to support "toggle" in Document Manager Popup
      LS_DOC_KEY = IT_DOC_KEY[ LINES( IT_DOC_KEY ) ].

***   Get Design Document through Encryption
      LF_DESDO = ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                     IF_DOKNR = LS_DOC_KEY-DOKNR
                                                     IF_DOKTL = LS_DOC_KEY-DOKTL
                                                     IF_DOKVR = LS_DOC_KEY-DOKVR ).

***   Set the new Design Document
      ME->SET_DESDO( IF_DESDO = LF_DESDO
                     IF_SETBY = IF_SETBY ).
    else.
***   Remove Design Document
      ME->SET_DESDO( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DESCR.

*** Design Document Description
    RF_DESCR = ME->ZIF_VCXI_PXSS_PRINT~GET_DESDD( ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DFLT_TCEST.
  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DFLTK.

*** Print Type as Default Key
    RF_DFLTK = ME->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_ISVCE.

    RF_ISVCE = ME->R_GATE->F_ID.

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_WERKS.

    RF_WERKS = ME->GET_WERKS( ).

  endmethod.
