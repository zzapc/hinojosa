
class ZCL_VCXI_P0SS_UI_PRINT definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data F_DYNNR_SUBSC type DYNNR .
  data S_PRINT_VIS type ZVCXI_P0SS_S_PRINT_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_PRINT_VIS
    importing
      !IS_PRINT_VIS type ZVCXI_P0SS_S_PRINT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_DYNNR_INITIAL type DYNNR value '9999'. "#EC NOTEXT
  constants C_DYNNR_MARK type DYNNR value '0110'. "#EC NOTEXT
  data F_CURSOR type SCRFNAME .
  data R_GRID_MARK type ref to ZCL_VCXI_P0SS_GRID_MARK .
  data R_GRID_MS_INK type ref to ZCL_VCXI_P0SS_GRID_MS_INK .
  data R_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_UI_PRINT definition
class ZCL_VCXI_P0SS_UI_PRINT implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_P0SS_UI_PRINT_BIND'
    exporting
      IR_UI_PRINT = ME
    importing
      ES_DYNP     = ME->S_DYNP.

*** Create Grid for GRID_MS_INK
  create object ME->R_GRID_MS_INK
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_GRID_MS_INK'.

*** Create Grid for Marking
  create object ME->R_GRID_MARK
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_GRID_MARK'.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_MS_INK is bound.
    ME->R_GRID_MS_INK->DO_FREE( ).
    clear ME->R_GRID_MS_INK.
  endif.

  if ME->R_GRID_MARK is bound.
    ME->R_GRID_MARK->DO_FREE( ).
    clear ME->R_GRID_MARK.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE,
         LF_EDIT   type        ABAP_BOOL.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).
        if ME->R_PR_PRINT->IS_CALCULATED( ) eq ABAP_FALSE.
          move ABAP_TRUE to LF_EDIT.
        endif.

        loop at screen.
          if SCREEN-GROUP1 eq 'PSE'.
            if LF_EDIT ne ABAP_TRUE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.
          modify screen.
        endloop.

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

  if ME->R_GRID_MS_INK is bound.
    if ME->R_GRID_MS_INK->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_MS_INK->F_REFRESH_REQ.
    endif.
    ME->R_GRID_MS_INK->REFRESH_GRID( ).
  endif.



*** Set right subscreen
  if ME->R_PR_PRINT->IS_MARK_ACTIVE( ) eq ABAP_TRUE.
    move C_DYNNR_MARK to ME->F_DYNNR_SUBSC.

*** Refresh Grid
  if ME->R_GRID_MARK is bound.
    if ME->R_GRID_MARK->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_MARK->F_REFRESH_REQ.
    endif.
    ME->R_GRID_MARK->REFRESH_GRID( ).
  endif.

  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC.
  endif.

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_PRINT_VIS.

  data: LS_LTITO type ZVCXI_P0S_S_LTITO.

*** Set Print Type
  if ME->S_PRINT_VIS-PRTYP ne IS_PRINT_VIS-PRTYP.
    ME->R_PR_PRINT->SET_PRTYP( IF_PRTYP = IS_PRINT_VIS-PRTYP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set No. Colors
  if ME->S_PRINT_VIS-NOCOL ne IS_PRINT_VIS-NOCOL.
    ME->R_PR_PRINT->SET_NOCOL( IF_NOCOL = IS_PRINT_VIS-NOCOL ).
  endif.

*** Set Surface Type
  if ME->S_PRINT_VIS-SUTYP ne IS_PRINT_VIS-SUTYP.
    ME->R_PR_PRINT->SET_SUTYP( IF_SUTYP = IS_PRINT_VIS-SUTYP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Full Surface Print
  if ME->S_PRINT_VIS-FPRFS ne IS_PRINT_VIS-FPRFS.
    ME->R_PR_PRINT->SET_FPRFS( IF_FPRFS = IS_PRINT_VIS-FPRFS
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Print Card Number
  if ME->S_PRINT_VIS-PRCAN ne IS_PRINT_VIS-PRCAN.
    ME->R_PR_PRINT->SET_PRCAN( IF_PRCAN = IS_PRINT_VIS-PRCAN
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Print Tool Number
  if ME->S_PRINT_VIS-PRTON ne IS_PRINT_VIS-PRTON.
    ME->R_PR_PRINT->SET_PRTON( IF_PRTON = IS_PRINT_VIS-PRTON
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Tool Life Time
  if ME->S_PRINT_VIS-LTITO ne IS_PRINT_VIS-LTITO.
    move-corresponding IS_PRINT_VIS to LS_LTITO.
    ME->R_PR_PRINT->SET_LTITO( IS_LTITO = LS_LTITO
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Sheet Direction
  if ME->S_PRINT_VIS-SHTDI ne IS_PRINT_VIS-SHTDI.
    ME->R_PR_PRINT->SET_SHTDI( IF_SHTDI = IS_PRINT_VIS-SHTDI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_MS_INK is bound.
    ME->R_GRID_MS_INK->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID_MARK is bound.
    ME->R_GRID_MARK->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_PRINT.

endmethod.
method INIT_VIS.

  data: LS_LTITO type ZVCXI_P0S_S_LTITO.

  free: ME->S_PRINT_VIS.

  move ME->R_PR_PRINT->GET_PRTYP( )       to ME->S_PRINT_VIS-PRTYP.
  move ME->R_PR_PRINT->GET_NOCOL( )       to ME->S_PRINT_VIS-NOCOL.
  move ME->R_PR_PRINT->GET_SUTYP( )       to ME->S_PRINT_VIS-SUTYP.
  move ME->R_PR_PRINT->GET_FPRFS( )       to ME->S_PRINT_VIS-FPRFS.
  move ME->R_PR_PRINT->GET_PRCAN( )       to ME->S_PRINT_VIS-PRCAN.
  move ME->R_PR_PRINT->GET_PRTON( )       to ME->S_PRINT_VIS-PRTON.
  move ME->R_PR_PRINT->GET_LTITO( )       to LS_LTITO.
  move-corresponding LS_LTITO             to ME->S_PRINT_VIS.
  move ME->R_PR_PRINT->GET_SHTDI( )       to ME->S_PRINT_VIS-SHTDI.

*** Tool Link Icon
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'TLINK' ) eq ABAP_TRUE.
    move ICON_CONNECT               to ME->S_PRINT_VIS-TLINK_ICON.
    move 'Linked to Tool'(T01)      to ME->S_PRINT_VIS-TLINK_DESCR.
  else.
    move ICON_DISCONNECT            to ME->S_PRINT_VIS-TLINK_ICON.
    move 'Not linked to Tool'(T02)  to ME->S_PRINT_VIS-TLINK_DESCR.
  endif.

*** Material X-Plant Status of Tool
  if ME->S_PRINT_VIS-PRTON is not initial.
    ZCL_VCXI_P0M_SERVICE=>GET_MSTAE( exporting IF_MATNR = ME->S_PRINT_VIS-PRTON
                                     importing EF_MSTAE = ME->S_PRINT_VIS-MSTAE
                                               EF_DESCR = ME->S_PRINT_VIS-MSTAE_DESCR ).
  endif.

*** Set Parameter ID for Print Type
  set parameter id 'ZVCXI_P0SS_PRTYP' field ME->S_PRINT_VIS-PRTYP.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
