
class ZCL_VCXI_PXE_MM_GRID_PRINT_COM definition
  public
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_MMEXT type ref to ZCL_VCXI_PXE_MM_MMEXT
      !IF_TABNAME type TABNAME default 'ZVCXI_PXE_MM_S_PRINT_COM_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    importing
      !IF_EDIT type LVC_EDIT
    raising
      /VCXI/CX_CKX .
protected section.

  data F_EDIT type LVC_EDIT .
  constants C_BTYPE_BUTTON type TB_BTYPE value '0' ##NO_TEXT.
  constants C_UC_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_UC_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  data F_CONTAINER_NAME type SCRFNAME .
  data F_TABNAME type TABNAME .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_MMEXT type ref to ZCL_VCXI_PXE_MM_MMEXT .

  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ES_LAST_ROW type LVC_S_ROW
    returning
      value(RT_ROW) type LVC_T_ROW .
  methods GET_GRID_DATA
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXE_MM_GRID_PRINT_COM definition
class ZCL_VCXI_PXE_MM_GRID_PRINT_COM implementation.
  method CONSTRUCTOR.

    ME->R_MMEXT          = IR_MMEXT.
    ME->F_TABNAME        = IF_TABNAME.
    ME->F_CONTAINER_NAME = IF_CONTAINER_NAME.

*** Create Data Reference to Grid Data
    create data ME->R_DATA type table of (ME->F_TABNAME).

  endmethod.
  method DO_FREE.

*** Free Grid
    if ME->R_GRID is bound.
***   Check for Changes
      ME->R_GRID->CHECK_CHANGED_DATA( ).

      ME->R_GRID->FREE( exceptions
                          CNTL_ERROR        = 1
                          CNTL_SYSTEM_ERROR = 2
                          others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_GRID.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method GET_FIELDCAT.

    data: LF_EDIT_ALLOWED type ABAP_BOOL,
          LF_COLPOS       type I.


*** Get Standard Field Catalog
    call function 'LVC_FIELDCATALOG_MERGE'
      exporting
        I_STRUCTURE_NAME       = ME->F_TABNAME
      changing
        CT_FIELDCAT            = RT_FCAT
      exceptions
        INCONSISTENT_INTERFACE = 1
        PROGRAM_ERROR          = 2
        others                 = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.


***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning field-symbol(<S_FCAT>).
***   General adjustments
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL'.
          <S_FCAT>-TECH = ABAP_TRUE.
        when 'TPRIN'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
      endcase.

***   Adjust Edit Mode
      case <S_FCAT>-FIELDNAME.
        when 'PRSID' or 'TPRIN' or 'NOCOL'.
          <S_FCAT>-EDIT = ME->F_EDIT.
      endcase.

***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRSID'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRSID_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NOCOL'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.

    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_PRINT_COM_GRID type ZVCXI_PXSS_S_PRINT_COM_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type        ANY.


*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Prints
    check ME->R_MMEXT is bound.
    loop at ME->R_MMEXT->T_PRINT_COM into data(LS_PRINT_COM).
      clear LS_PRINT_COM_GRID.
      move LS_PRINT_COM to LS_PRINT_COM_GRID-S_PRINT_COM.

***   Get Descriptions
      LS_PRINT_COM_GRID-PRSID_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRSID_DESCR( IF_PRSID = LS_PRINT_COM_GRID-PRSID ).
      LS_PRINT_COM_GRID-TPRIN_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_DESCR( IF_TPRIN = LS_PRINT_COM_GRID-TPRIN ).

***   Add Entry to Table
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_PRINT_COM_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_SELECTED_ROWS.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.
    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.


*** Get Cursor in Grid
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    if LINES( LT_CELL ) gt 0.

      loop at LT_CELL into LS_CELL.
        append LS_CELL-ROW_ID to RT_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
          move LS_CELL-ROW_ID to ES_LAST_ROW.
        endif.
      endloop.
    endif.

*** Get Selected Rows
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
    if LINES( LT_ROW ) gt 0.

      append lines of LT_ROW to RT_ROW.

      loop at LT_ROW into LS_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
          move LS_ROW to ES_LAST_ROW.
        endif.
      endloop.

    endif.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    field-symbols: <T_DATA> type standard table.


    check E_MODIFIED eq ABAP_TRUE.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Set Print Information to Material Master Extension
        ME->R_MMEXT->SET_PRINT_COM( IT_PRINT_COM = corresponding #( <T_DATA> ) ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    try.
***     Insert Toolbar elements to modify Print
        append value #( FUNCTION  = C_UC_ADD
                        TEXT      = 'Add Print'(001)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_INSERT_ROW
                        DISABLED  = switch #( ME->F_EDIT when ABAP_FALSE then ABAP_TRUE )
                      ) to E_OBJECT->MT_TOOLBAR.

        append value #( FUNCTION  = C_UC_DEL
                        TEXT      = 'Delete Print'(002)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_DELETE_ROW
                        DISABLED  = switch #( ME->F_EDIT when ABAP_FALSE then ABAP_TRUE )
                      ) to E_OBJECT->MT_TOOLBAR.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LS_ROW type LVC_S_ROW.
    field-symbols: <T_DATA> type standard table.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).

*** Add Print
    insert initial line into <T_DATA> index LS_ROW-INDEX + 1.

***--------------------------------------------------------------------------------------
*** Set Print Information to Material Master Extension
    ME->R_MMEXT->SET_PRINT_COM( IT_PRINT_COM = corresponding #( <T_DATA> ) ).

  endmethod.
  method HANDLE_UC_DEL.

    data: LS_ROW type LVC_S_ROW.
    field-symbols: <T_DATA> type standard table.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).
    check LS_ROW is not initial.

*** Delete Print
    delete <T_DATA> index LS_ROW-INDEX.

***--------------------------------------------------------------------------------------
*** Set Print Information to Material Master Extension
    ME->R_MMEXT->SET_PRINT_COM( IT_PRINT_COM = corresponding #( <T_DATA> ) ).

  endmethod.
  method HANDLE_UCOMM.

    try.
***     Trigger command
        case E_UCOMM.
          when C_UC_ADD.
            ME->HANDLE_UC_ADD( ).
          when C_UC_DEL.
            ME->HANDLE_UC_DEL( ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = ME->F_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_GRID.

    if ME->R_GRID is not bound.
      create object ME->R_GRID
        exporting
          I_PARENT          = ME->R_CONTAINER
          I_APPL_EVENTS     = ABAP_TRUE
        exceptions
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          others            = 5.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Enter as Event
      ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

***   Set Event Handler for Change
      set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
*      set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

***   Set Event Handler for Toolbar
      set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
      set handler ME->HANDLE_UCOMM               for ME->R_GRID.

***   Register F4-Fields
      ME->REGISTER_F4_FIELDS( ).

    endif.

  endmethod.
  method REFRESH_GRID.

    data: LS_LAYOUT type LVC_S_LAYO.
    data: LT_FCAT type LVC_T_FCAT.
    field-symbols: <T_DATA> type standard table.


    if ME->R_MMEXT is bound.
      ME->F_EDIT = IF_EDIT.
    else.
      ME->F_EDIT = ABAP_FALSE.
    endif.

*** Get Grid Data
    assign ME->R_DATA->* to <T_DATA>.
    free: <T_DATA>.
    ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

*** Initialize if needed
    ME->INIT_CONTAINER( ).

*** Build fresh Field Catalog and Layout
    LT_FCAT = ME->GET_FIELDCAT( ).
    LS_LAYOUT = value #( CWIDTH_OPT = ABAP_TRUE
                         STYLEFNAME = 'T_STYL' ).

*** Create Grid
    if ME->R_GRID is not bound.
      ME->INIT_GRID( ).
      ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
        exporting
          IT_TOOLBAR_EXCLUDING          = value #( ( CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL ) )
          IS_LAYOUT                     = LS_LAYOUT
        changing
          IT_FIELDCATALOG               = LT_FCAT
          IT_OUTTAB                     = <T_DATA>
        exceptions
          others                        = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    else.
***   Relfreh Field Catalog, Layout and ALV Grid
      ME->R_GRID->SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG = LT_FCAT ).
      ME->R_GRID->SET_FRONTEND_LAYOUT( IS_LAYOUT = LS_LAYOUT ).
      ME->R_GRID->REFRESH_TABLE_DISPLAY( exporting  I_SOFT_REFRESH = ABAP_TRUE
                                          exceptions others         = 9 ).
    endif.

  endmethod.
  method REGISTER_F4_FIELDS.

    data: LS_F4   type LVC_S_F4,
          LS_FCAT type LVC_S_FCAT,
          LS_SHLP type SHLP_DESCR_T.
    data: LT_F4   type LVC_T_F4.


***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
    loop at ME->GET_FIELDCAT( ) into LS_FCAT.

***   If there is no F4Help at fieldcat - check explicit Field of Table
      if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-DOMNAME
            FIELDNAME         = SPACE
          importing
            SHLP              = LS_SHLP
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

        if SY-SUBRC ne 0.

          call function 'F4IF_DETERMINE_SEARCHHELP'
            exporting
              TABNAME           = LS_FCAT-REF_TABLE
              FIELDNAME         = LS_FCAT-FIELDNAME
            importing
              SHLP              = LS_SHLP
            exceptions
              FIELD_NOT_FOUND   = 1
              NO_HELP_FOR_FIELD = 2
              INCONSISTENT_HELP = 3
              others            = 4.

        endif.


        if SY-SUBRC eq 0.
          move ABAP_TRUE to LS_FCAT-F4AVAILABL.
        endif.
      endif.


      if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***     Add to Register Table
        clear LS_F4.
        move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
        move 'X'               to LS_F4-REGISTER.
        move 'X'               to LS_F4-CHNGEAFTER.
        insert LS_F4 into table LT_F4.
      endif.
    endloop.

    ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

  endmethod.
