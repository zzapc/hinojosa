
class ZCL_VCXI_P0SR_PR_RTESPV_AS definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  create public .

public section.

  constants C_IPRVT_P0_RTESPV_AS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SR_RTESPV_AS'. "#EC NOTEXT

  methods GET_COMP_RTESEL
    returning
      value(RT_COMP_RTESEL) type ZVCXI_P0SR_TT_COMP_RTESEL
    raising
      /VCXI/CX_CKX .
  methods GET_CPM_COMP_RTESEL
    returning
      value(RT_COMP_RTESEL) type ZVCXI_P0SR_TT_COMP_RTESEL
    raising
      /VCXI/CX_CKX .
  methods GET_CPM_RTESEL
    returning
      value(RT_CPM_RTESEL) type ZVCXI_P0SR_TT_CPM_RTESEL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
  methods FILL_PROD
    redefinition .
  methods IS_FILL_PROD_ALLOWED
    redefinition .
  methods GET_EXQTY
    redefinition .
protected section.

  types:
    begin of YS_PPASS,
                   R_GATE_CLOS      type ref to /VCXI/CL_VKSR_GATE,
                   PPASS            type        ZVCXI_P0SS_PPASS,
                   R_GATE_JOINT     type ref to /VCXI/CL_VKSR_GATE,
                   CLOSED           type        ABAP_BOOL,
                 end   of YS_PPASS .
  types:
    YT_PPASS           type standard table of YS_PPASS with default key .
  types:
    begin of YS_COMP_AS,
                   PPASS            type        ZVCXI_P0SS_PPASS,
                   R_GATE_COMP_AS   type ref to /VCXI/CL_VKSR_GATE,
                 end   of YS_COMP_AS .
  types:
    YT_COMP_AS         type standard table of YS_COMP_AS with default key .
  types:
    begin of YS_COMP_SFG,
                   PPASS            type        ZVCXI_P0SS_PPASS,
                   R_GATE_COMP_SFG  type ref to /VCXI/CL_VKSR_GATE,
                   T_GATE_PSCALE    type        /VCXI/VKSR_TT_GATE,
                 end   of YS_COMP_SFG .
  types:
    YT_COMP_SFG        type standard table of YS_COMP_SFG with default key .

  data R_PR_RTESPV_HL type ref to ZCL_VCXI_XCSR_PR_RTESPV .

  methods VALIDATE_PPASS
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  methods GET_ATTID_SHUTY
    importing
      !IR_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_ATTID) type /VCXI/VKS_ATTID
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_AS
    returning
      value(RT_COMP_AS) type YT_COMP_AS
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_SFG
    returning
      value(RT_COMP_SFG) type YT_COMP_SFG
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS
    importing
      !IR_GATE_SPEC_AS type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_PPASS) type YT_PPASS
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_IN_LINE_COMP_RTESPV
    importing
      !IR_PRVDR type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR_RTESPV type /VCXI/VKSR_TT_GATE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHIPMGR
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC_AS
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods TURN_PCDIR
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_PCDIR_PREV type ZVCXI_P0SP_PCDIR
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_PCDIR
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CLOS_AS
    importing
      !IR_GATE_SPEC_AS type ref to /VCXI/CL_VKSR_GATE
      !IT_PPASS type YT_PPASS
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_GRP_UNIT
    importing
      !IR_GATE_SPEC_AS type ref to /VCXI/CL_VKSR_GATE
      !IT_PPASS type YT_PPASS
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_COMBI_PSTEP
    redefinition .
  methods BUILD_RTE_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods HANDLE_GATE_FREED
    redefinition .
  methods HANDLE_INIT_REFERENCES
    redefinition .
  methods HANDLE_PROD_FILLED
    redefinition .
  methods VALIDATE
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_PR_RTESPV_AS definition
class ZCL_VCXI_P0SR_PR_RTESPV_AS implementation.
method BUILD_RTE_COMBI_PSTEP.

  data:  LF_INDEX                  type        I.
  data:  LS_RTE_COMBI_PSTEP_GRP    type        /VCXI/VSMR_S_RTE_COMBI_PSTEP.
  data:  LR_RTE_PSTEP              type ref to /VCXI/CL_VSMR_RTE_PSTEP.

  RT_RTE_COMBI_PSTEP = SUPER->BUILD_RTE_COMBI_PSTEP( IR_PRTE      = IR_PRTE
                                                     IT_RTE_PSTEP = IT_RTE_PSTEP ).

***------------------------------------------------------------------
*** Define Combinations
  loop at IT_RTE_PSTEP into LR_RTE_PSTEP.
    move SY-TABIX to LF_INDEX.

    case LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Grouping
      when ZCL_VCXI_P0SR_BL_PSTEP_GRP=>C_IPSTP_GRP.
        check LS_RTE_COMBI_PSTEP_GRP is initial.
***     done in Filter
        append LR_RTE_PSTEP to LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP.

        LF_INDEX =  LF_INDEX - 1.
        read table IT_RTE_PSTEP into LR_RTE_PSTEP index LF_INDEX.
        if SY-SUBRC eq 0.
          insert LR_RTE_PSTEP into LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP index 1.
        endif.
    endcase.
  endloop.

***------------------------------------------------------------------
*** Set Combination
  if lines( LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP ) gt 1.
    append LS_RTE_COMBI_PSTEP_GRP to RT_RTE_COMBI_PSTEP.
  endif.

endmethod.
method BUILD_RTE_PSTEP.

  data:  LT_BL_PSTEP        type        ZVCXI_XCSR_TT_BL_PSTEP.
  data:  LR_BL_PSTEP_ORG    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_NEW    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR_CURR      type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_PREV      type ref to ZIF_VCXI_P0SR_PCDIR.

***----------------------------------------------------------------------------
  if IR_RTE_PSEQ is not bound.
*** Copy BL PStep due to Sequence Specific Values
    loop at IT_BL_PSTEP into LR_BL_PSTEP_ORG.
      move LR_BL_PSTEP_ORG->COPY( ) to LR_BL_PSTEP_NEW.
      append LR_BL_PSTEP_NEW to LT_BL_PSTEP.
    endloop.

*** Create Routing Production Steps
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = LT_BL_PSTEP ).

*** Process Sequence Dependent BL PStep Settings
    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.

***   Get PC Direction
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Forward PC Direction
      if LR_PCDIR_PREV is bound and
         LR_PCDIR_CURR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
        LR_PCDIR_CURR->SET_PCDIR( IF_PCDIR = LR_PCDIR_PREV->F_PCDIR ).
      endif.

***   Keep Curr as Previous
      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.

***----------------------------------------------------------------------------
*** Cascading Method Call (Keep everything as is)
  else.
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = IT_BL_PSTEP
                                           IR_RTE_PSEQ = IR_RTE_PSEQ ).
  endif.

endmethod.
method CONSTRUCTOR.

  data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
  if IR_BL_RTESPV is bound.
    move IR_BL_RTESPV to LR_BL_RTESPV.
  else.
    create object LR_BL_RTESPV
      type
        ZCL_VCXI_P0SR_BL_RTESPV
      exporting
        IR_GATE                    = IR_GATE.
  endif.

*** Call Super
  call method SUPER->CONSTRUCTOR
    exporting
      IR_GATE      = IR_GATE
      IR_BL_RTESPV = LR_BL_RTESPV.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    type
      ZCL_VCXI_P0SR_BL_PRTE
    exporting
      IR_RTE_PRTE           = LR_RTE_PRTE
      IR_MFMI               = ME->R_MFMI
      IR_MFSI               = ME->R_MFSI
      IT_CSPLIT             = ME->T_CSPLIT
      IF_DATE               = ME->F_DATE
      IF_LIFNR_REQ          = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_P0SR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_MANU->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_P0SR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_OUTSO->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method FILL_PROD.

  data:  LS_EXQTY        type        /VCXI/VKCR_S_EXQTY.
  data:  LT_CPM_RTESEL   type        ZVCXI_P0SR_TT_CPM_RTESEL,
         LT_COMP_RTESEL  type        ZVCXI_P0SR_TT_COMP_RTESEL.
  data:  LR_BL_RTESPV    type ref to ZCL_VCXI_P0SR_BL_RTESPV,
         LR_RTEFIL       type ref to ZCL_VCXI_XCSR_BL_PRTE.

  check ME->R_BL_RTESPV is bound.

  if ME->R_PR_RTESPV_HL is not bound.
*** Get Explosion Quantity
    move ME->GET_EXQTY( )   to LS_EXQTY.

***----------------------------------------------------------------------------
*** Refresh Auto
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

    if ME->R_RTESEL is not bound.
***   No Selected Route defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSR'
                                            IF_MSGNO = '310' ).
    endif.

*** Get Selected Route of Configured Packaging Material
    LT_CPM_RTESEL = ME->GET_CPM_RTESEL( ).

*** Get Selected Route of Component
    LT_COMP_RTESEL = ME->GET_COMP_RTESEL( ).


***----------------------------------------------------------------------------
*** Copy Selected Route to Filled Route
    move ME->R_RTESEL->COPY( ) to LR_RTEFIL.

    move ME->R_BL_RTESPV ?to LR_BL_RTESPV.
    LR_BL_RTESPV->SET_P0_BL_PRTE_AS( IR_BL_PRTE     = LR_RTEFIL
                                     IT_CPM_RTESEL  = LT_CPM_RTESEL
                                     IT_COMP_RTESEL = LT_COMP_RTESEL
                                     IS_EXQTY       = LS_EXQTY ).

    raise event PROD_FILLED exporting IR_BL_PRTE = LR_RTEFIL.

  else.
***----------------------------------------------------------------------------
*** Use Higher Level
    ME->R_PR_RTESPV_HL->FILL_PROD( ).
  endif.

endmethod.
method GET_ATTID_SHUTY.

  data:  LF_SHUTY         type        ZVCXI_XCSU_SHUTY.
  data:  LS_ATTRI         type        /VCXI/VKS_S_ATTRI.
  data:  LT_ATTRI         type        /VCXI/VKS_TT_ATTRI,
         LT_SHUTY         type        ZVCXI_XCSU_TT_SHUTY.
  data:  LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***----------------------------------------------------------------------------
*** Get PR Class of Shipping Unit
  try.
      move IR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.
  check LR_PR_SHIPUNIT is bound.

*** Get Shipping Unit Type
  move LR_PR_SHIPUNIT->GET_SHUTY( ) to LF_SHUTY.

***----------------------------------------------------------------------------
*** Get all Attribute
  LT_ATTRI = IR_GATE_SHIPMGR->GET_ATTRI_ALL( ).

*** Process all Shipping Type relevant Attributes
  loop at LT_ATTRI into LS_ATTRI where ATTID cp 'SHUTY_*'.
    free LT_SHUTY.
    condense LS_ATTRI-ATTVA no-gaps.
    split LS_ATTRI-ATTVA at ',' into table LT_SHUTY.

*** Search for Match
    read table LT_SHUTY with key SHUTY = LF_SHUTY transporting no fields.
    if SY-SUBRC eq 0.
      move LS_ATTRI-ATTID to RF_ATTID.
      exit.
    endif.
  endloop.

endmethod.
method GET_BL_PSTEP.

  data:  LT_PPASS               type        YT_PPASS.
  data:  LR_GATE_SPEC_AS        type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC_AS = ME->GET_PRVDR_SPEC_AS( ).
  check LR_GATE_SPEC_AS is bound.

*** Get Closing Production Passes
  move ME->GET_PPASS( IR_GATE_SPEC_AS = LR_GATE_SPEC_AS ) to LT_PPASS.

***------------------------------------------------------------------------------------------------
*** Production Pass with close Joint Types
  read table LT_PPASS with key CLOSED = ABAP_TRUE
                      transporting no fields.
  if SY-SUBRC eq 0.
*** BL PSTEP - Closing
    ME->GET_BL_PSTEP_CLOS_AS( exporting IR_GATE_SPEC_AS = LR_GATE_SPEC_AS
                                        IT_PPASS        = LT_PPASS
                              changing  CT_BL_PSTEP     = RT_BL_PSTEP ).
  endif.

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Grouping & Unitizing
  ME->GET_BL_PSTEP_GRP_UNIT( exporting IR_GATE_SPEC_AS = LR_GATE_SPEC_AS
                                       IT_PPASS        = LT_PPASS
                             changing  CT_BL_PSTEP     = RT_BL_PSTEP ).

endmethod.
method GET_BL_PSTEP_CLOS_AS.

  data:          LS_PPASS               type        YS_PPASS,
                 LS_COMP_AS             type        YS_COMP_AS,
                 LS_COMP_SFG            type        YS_COMP_SFG.
  data:          LT_PPASS               type        YT_PPASS,
                 LT_COMP_AS             type        YT_COMP_AS,
                 LT_COMP_SFG            type        YT_COMP_SFG,
                 LT_PRVDR_CLOS_AS       type        /VCXI/VKSR_TT_GATE.
  data:          LR_BL_PSTEP_CLOS_AS    type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS_AS,
                 LR_APPDATA             type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Consider only Production Pass with closed Joint Types
  move IT_PPASS to LT_PPASS.
  delete LT_PPASS where CLOSED ne ABAP_TRUE.
  check LT_PPASS is not initial.

***------------------------------------------------------------------------------------------------
*** Get Components AS & SFG
  LT_COMP_AS  = ME->GET_COMP_AS( ).
  LT_COMP_SFG = ME->GET_COMP_SFG( ).

  check LT_COMP_AS  is not initial or
        LT_COMP_SFG is not initial.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL Production Step for each Production Pass
  loop at LT_PPASS into LS_PPASS.
    collect LS_PPASS-R_GATE_CLOS  into LT_PRVDR_CLOS_AS.
    collect LS_PPASS-R_GATE_JOINT into LT_PRVDR_CLOS_AS.

    at end of PPASS.
      append IR_GATE_SPEC_AS to LT_PRVDR_CLOS_AS.

***   Collect Components
      loop at LT_COMP_AS into LS_COMP_AS where PPASS eq LS_PPASS-PPASS.
        append LS_COMP_AS-R_GATE_COMP_AS to LT_PRVDR_CLOS_AS.
      endloop.

***   Collect Components SFG
      loop at LT_COMP_SFG into LS_COMP_SFG where PPASS eq LS_PPASS-PPASS.
        append          LS_COMP_SFG-R_GATE_COMP_SFG to LT_PRVDR_CLOS_AS.
        append lines of LS_COMP_SFG-T_GATE_PSCALE   to LT_PRVDR_CLOS_AS.
      endloop.

***   Create BL PStep
      create object LR_BL_PSTEP_CLOS_AS
        exporting
          IF_DATE    = ME->F_DATE
          IR_APPDATA = LR_APPDATA.
      append LR_BL_PSTEP_CLOS_AS to CT_BL_PSTEP.
      LR_BL_PSTEP_CLOS_AS->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                         IT_PRVDR = LT_PRVDR_CLOS_AS ).
      free LT_PRVDR_CLOS_AS.
    endat.
  endloop.

endmethod.
method GET_BL_PSTEP_GRP_UNIT.

  data:  LF_ATTID_SHUTY         type        /VCXI/VKS_ATTID.
  data: LS_PPASS    type        YS_PPASS,
        LS_COMP_AS  type        YS_COMP_AS,
        LS_COMP_SFG type        YS_COMP_SFG.
  data: LT_PPASS         type        YT_PPASS,
        LT_GATE_SHIPMGR  type        /VCXI/VKSR_TT_GATE,
        LT_GATE_SHIPUNIT type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PACKMAT  type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PSCALE   type        /VCXI/VKSR_TT_GATE,
        LT_GATE_CPM      type        /VCXI/VKSR_TT_GATE,
        LT_COMP_AS       type        YT_COMP_AS,
        LT_COMP_SFG      type        YT_COMP_SFG,
        LT_PRVDR         type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SPEC_AS  type ref to /VCXI/CL_VKSR_GATE,
        LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_PR_SHIPMGR    type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
        LR_GATE_SHIPMGR  type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PACKMAT  type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PSCALE   type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_CPM      type ref to /VCXI/CL_VKSR_GATE,
        LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Consider only Production Pass with open Joint Types
  move IT_PPASS to LT_PPASS.
  delete LT_PPASS where CLOSED eq ABAP_TRUE.

  if LT_PPASS is not initial.
*** Get Components AS & SFG
    LT_COMP_AS  = ME->GET_COMP_AS( ).
    LT_COMP_SFG = ME->GET_COMP_SFG( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LR_GATE_SHIPMGR = ME->GET_PRVDR_SHIPMGR( ).
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear:  LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.
  check LT_GATE_SHIPUNIT is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials
  LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_PACKMAT.
      continue.
    endif.
  endloop.

*** Sort Packaging Materials
  if LINES( LT_GATE_PACKMAT ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_PACKMAT ).
  endif.

*** Find Provider for Price Scales
  LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
    if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_PSCALE.
      continue.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Find Provider for Configured Packaging Materials
  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_CPM into LR_GATE_CPM.
    if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_CPM.
      continue.
    endif.
  endloop.

*** Sort Configured Packaging Materials
  if LINES( LT_GATE_CPM ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CPM ).
  endif.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***----------------------------------------------------------------------------
*** Process all Shipping Type relevant Attributes
  loop at LR_GATE_SHIPMGR->GET_ATTRI_ALL( ) into data(LS_ATTRI) where ATTID cp 'SHUTY_*'.
    condense LS_ATTRI-ATTVA no-gaps.

*** Buffer Shipping Types
    case LS_ATTRI-ATTID.
      when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP.
        split LS_ATTRI-ATTVA at ',' into table data(LT_SHUTY_GROUP).
      when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT.
        split LS_ATTRI-ATTVA at ',' into table data(LT_SHUTY_UNIT).
    endcase.
  endloop.

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    clear: LT_PRVDR,
           LR_BL_PSTEP.

*** Identify Shipping Unit Type (Grouping or Unit)
    data(LF_SHUTY) = cast ZCL_VCXI_XCSU_PR_SHIPUNIT( LR_GATE_SHIPUNIT->R_CLSPR )->GET_SHUTY( ).
    if LINE_EXISTS( LT_SHUTY_GROUP[ TABLE_LINE = LF_SHUTY ] ).
      LF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP.
    elseif LINE_EXISTS( LT_SHUTY_UNIT[ TABLE_LINE = LF_SHUTY ] ).
      LF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT.
    else.
      continue.
    endif.

*** Add Shipping Manager and Shipping Unit as Provider.
    append LR_GATE_SHIPMGR  to LT_PRVDR.
    append LR_GATE_SHIPUNIT to LT_PRVDR.

*** Add Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_PACKMAT to LT_PRVDR.
      else.
        continue.
      endif.

***   Add Price Scales which are in line with Packaging Material
      loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
        if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) eq ABAP_TRUE.
          append LR_GATE_PSCALE to LT_PRVDR.
        endif.
      endloop.
    endloop.

*** Get Configured Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_CPM into LR_GATE_CPM.
      if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_CPM to LT_PRVDR.
      endif.
    endloop.


***------------------------------------------------------------------------------------------------
*** No Closing Production Pass with Open Joint Type
    if LT_PPASS is initial.
      case LF_ATTID_SHUTY.
        when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP.
          create object LR_BL_PSTEP
            type
            ZCL_VCXI_P0SR_BL_PSTEP_GRP
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.

        when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT.
          create object LR_BL_PSTEP
            type
            ZCL_VCXI_P0SR_BL_PSTEP_UNIT
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.

      endcase.

***------------------------------------------------------------------------------------------------
*** A Closing Production Pass with Open Joint Type exists
    else.
      loop at LT_PPASS into LS_PPASS.
        collect LS_PPASS-R_GATE_CLOS  into LT_PRVDR.
        collect LS_PPASS-R_GATE_JOINT into LT_PRVDR.

        at end of PPASS.
          append IR_GATE_SPEC_AS to LT_PRVDR.

***       Collect Components
          loop at LT_COMP_AS into LS_COMP_AS where PPASS eq LS_PPASS-PPASS.
            append LS_COMP_AS-R_GATE_COMP_AS to LT_PRVDR.
          endloop.

***       Collect Components SFG
          loop at LT_COMP_SFG into LS_COMP_SFG where PPASS eq LS_PPASS-PPASS.
            append          LS_COMP_SFG-R_GATE_COMP_SFG to LT_PRVDR.
            append lines of LS_COMP_SFG-T_GATE_PSCALE   to LT_PRVDR.
          endloop.
        endat.
      endloop.

***   Consider Production Pass as "included"
      free LT_PPASS.

      case LF_ATTID_SHUTY.
        when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP.
          create object LR_BL_PSTEP
            type
            ZCL_VCXI_P0SR_BL_PSTEP_GRP_AS
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.

        when ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT.
          create object LR_BL_PSTEP
            type
            ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.

      endcase.
    endif.
    check LR_BL_PSTEP is bound.

***------------------------------------------------------------------------------------------------
*** Add to List of Production Steps and Initialize by Specification
    append LR_BL_PSTEP to CT_BL_PSTEP.
    LR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                               IT_PRVDR = LT_PRVDR ).

  endloop.

endmethod.
method GET_COMP_AS.

  data:          LT_GATE_COMP_AS        type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_COMP_AS        type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_AS          type ref to ZCL_VCXI_P0SS_PR_COMP_AS.
  field-symbols: <S_COMP_AS>            type        YS_COMP_AS.

***------------------------------------------------------------------------------------------------
*** Find Provider for Components
  LT_GATE_COMP_AS = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
  loop at LT_GATE_COMP_AS into LR_GATE_COMP_AS.
    try.
        move LR_GATE_COMP_AS->R_CLSPR ?to LR_PR_COMP_AS.
        check LR_PR_COMP_AS is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    append initial line to RT_COMP_AS assigning <S_COMP_AS>.
    move LR_GATE_COMP_AS             to <S_COMP_AS>-R_GATE_COMP_AS.
    move LR_PR_COMP_AS->GET_PPASS( ) to <S_COMP_AS>-PPASS.
  endloop.

endmethod.
method GET_COMP_RTESEL.

  data:          LF_PPASS          type        N length 2,
                 LF_COMP           type        N length 2.
  data:          LT_GATE_COMP_AS   type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_RTESPV    type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_COMP_AS   type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_AS     type ref to ZCL_VCXI_P0SS_PR_COMP_AS,
                 LR_GATE_RTESPV    type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_RTESPV      type ref to ZCL_VCXI_P0SR_PR_RTESPV.
  field-symbols: <S_COMP_RTESEL>   type        ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL>   type        ZVCXI_P0SR_S_LAMI_RTESEL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component of AS
  LT_GATE_COMP_AS = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).
  check LT_GATE_COMP_AS is not initial.

*** Find Provider for Routing Supervisor of Components
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SR_PR_RTESPV=>C_IPRVT_P0_RTESPV
                                          IF_INUSE = ABAP_TRUE ).
  check LT_GATE_RTESPV is not initial.

***------------------------------------------------------------------------------------------------
*** Loop at Components
  loop at LT_GATE_COMP_AS into LR_GATE_COMP_AS.
    try.
        move LR_GATE_COMP_AS->R_CLSPR ?to LR_PR_COMP_AS.
        check LR_PR_COMP_AS is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    append initial line to RT_COMP_RTESEL assigning <S_COMP_RTESEL>.
    move LR_GATE_COMP_AS             to <S_COMP_RTESEL>-R_GATE_COMP_AS.
    move LR_PR_COMP_AS->GET_PPASS( ) to <S_COMP_RTESEL>-PPASS.

*** Get Routing Supervisor
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_COMP_AS ) eq ABAP_TRUE.

      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).
      move LR_PR_RTESPV->R_RTESEL to <S_COMP_RTESEL>-R_RTESEL.

      if LR_PR_RTESPV->R_RTESEL is not bound.
***     No Selected Route defined.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '310' ).
      endif.

***   Get Selected Route of Laminating
      <S_COMP_RTESEL>-T_LAMI_RTESEL = LR_PR_RTESPV->GET_LAMI_RTESEL( ).

    endloop.
  endloop.

  sort RT_COMP_RTESEL by PPASS.

***------------------------------------------------------------------------------------------------
*** Set MF X-Connect
  loop at RT_COMP_RTESEL assigning <S_COMP_RTESEL>.
    if <S_COMP_RTESEL>-PPASS ne LF_PPASS.
      clear LF_COMP.
    endif.

*** Generate MF X-Connect
    move <S_COMP_RTESEL>-PPASS to LF_PPASS.
    add  1                     to LF_COMP.
    concatenate 'OP_J' LF_PPASS '_C' LF_COMP into <S_COMP_RTESEL>-IMFXC.

    loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
      concatenate LF_COMP '_' <S_LAMI_RTESEL>-IMFXC into <S_LAMI_RTESEL>-IMFXC.
    endloop.
  endloop.

endmethod.
method GET_COMP_SFG.

  data:          LT_GATE_COMP_SFG       type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_PSCALE         type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_COMP_SFG       type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_PSCALE         type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SFG         type ref to ZCL_VCXI_P0SS_PR_COMP_SFG.
  field-symbols: <S_COMP_SFG>           type        YS_COMP_SFG.

***------------------------------------------------------------------------------------------------
*** Find Provider for Components SFG
  LT_GATE_COMP_SFG = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SFG=>C_IPRVT_P0_COMP_SFG
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).

  check LT_GATE_COMP_SFG is not initial.

*** Find Provider for Price Scales
  LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
  loop at LT_GATE_COMP_SFG into LR_GATE_COMP_SFG.
    try.
        move LR_GATE_COMP_SFG->R_CLSPR ?to LR_PR_COMP_SFG.
        check LR_PR_COMP_SFG is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    append initial line to RT_COMP_SFG assigning <S_COMP_SFG>.
    move LR_GATE_COMP_SFG             to <S_COMP_SFG>-R_GATE_COMP_SFG.
    move LR_PR_COMP_SFG->GET_PPASS( ) to <S_COMP_SFG>-PPASS.

    loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
      check LR_GATE_PSCALE->GET_PARENT( ) eq LR_GATE_COMP_SFG.
      append LR_GATE_PSCALE to <S_COMP_SFG>-T_GATE_PSCALE.
    endloop.
  endloop.

endmethod.
method GET_CPM_COMP_RTESEL.

  data:          LF_PPASS          type        N length 2,
                 LF_COMP           type        N length 2.
  data:          LT_GATE_COMP_AS   type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_RTESPV    type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_COMP_AS   type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_AS     type ref to ZCL_VCXI_P0SS_PR_COMP_AS,
                 LR_GATE_RTESPV    type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_RTESPV      type ref to ZCL_VCXI_P0SR_PR_RTESPV.
  field-symbols: <S_COMP_RTESEL>   type        ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL>   type        ZVCXI_P0SR_S_LAMI_RTESEL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component of AS
  LT_GATE_COMP_AS = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).
  check LT_GATE_COMP_AS is not initial.

*** Find Provider for Routing Supervisor of Components
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SR_PR_RTESPV=>C_IPRVT_P0_RTESPV
                                          IF_INUSE = ABAP_TRUE ).
  check LT_GATE_RTESPV is not initial.

***------------------------------------------------------------------------------------------------
*** Loop at Components
  loop at LT_GATE_COMP_AS into LR_GATE_COMP_AS.
    try.
        move LR_GATE_COMP_AS->R_CLSPR ?to LR_PR_COMP_AS.
        check LR_PR_COMP_AS is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    append initial line to RT_COMP_RTESEL assigning <S_COMP_RTESEL>.
    move LR_GATE_COMP_AS             to <S_COMP_RTESEL>-R_GATE_COMP_AS.
    move LR_PR_COMP_AS->GET_PPASS( ) to <S_COMP_RTESEL>-PPASS.

*** Get Routing Supervisor
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_COMP_AS ) eq ABAP_TRUE.

      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).
      move LR_PR_RTESPV->R_RTESEL to <S_COMP_RTESEL>-R_RTESEL.

      if LR_PR_RTESPV->R_RTESEL is not bound.
***     No Selected Route defined.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '310' ).
      endif.

***   Get Selected Route of Laminating
      <S_COMP_RTESEL>-T_LAMI_RTESEL = LR_PR_RTESPV->GET_LAMI_RTESEL( ).

    endloop.
  endloop.

  sort RT_COMP_RTESEL by PPASS.

***------------------------------------------------------------------------------------------------
*** Set MF X-Connect
  loop at RT_COMP_RTESEL assigning <S_COMP_RTESEL>.

*** Generate MF X-Connect
    add  1       to LF_COMP.
    move LF_COMP to <S_COMP_RTESEL>-IMFXC.

    loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
      concatenate LF_COMP '_' <S_LAMI_RTESEL>-IMFXC into <S_LAMI_RTESEL>-IMFXC.
    endloop.
  endloop.

endmethod.
method GET_CPM_RTESEL.

  data:          LF_INDEX_SHUNT_UNIT type        N length 3,
                 LF_INDEX_SHUNT_GRP  type        N length 3,
                 LF_INDEX_SHUNT      type        N length 3,
                 LF_INDEX_CPM        type        N length 3.
  data:          LT_GATE_SHIPMGR     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_SHIPUNIT    type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_RTESPV      type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_UNIT        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_GROUP       type        /VCXI/VKSR_TT_GATE.
  data:          LR_PR_SHIPMGR       type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
                 LR_PR_SHIPUNIT      type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_GATE_SHIPMGR     type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_SHIPUNIT    type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_RTESPV      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_RTESPV_BOX    type ref to ZCL_VCXI_P0SR_PR_RTESPV,
                 LR_PR_RTESPV_AS     type ref to ZCL_VCXI_P0SR_PR_RTESPV_AS.
  field-symbols: <S_CPM_RTESEL>      type        ZVCXI_P0SR_S_CPM_RTESEL,
                 <S_COMP_RTESEL>     type        ZVCXI_P0SR_S_COMP_RTESEL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear:  LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.

  move LT_GATE_SHIPUNIT to: LT_GATE_UNIT, LT_GATE_GROUP.

*** Filter Shipping Units ( Grouping and Unit )
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                  changing  CT_GATE        = LT_GATE_UNIT ).

  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP
                                  changing  CT_GATE        = LT_GATE_GROUP ).

  clear: LT_GATE_SHIPUNIT.
  append lines of LT_GATE_UNIT  to LT_GATE_SHIPUNIT.
  append lines of LT_GATE_GROUP to LT_GATE_SHIPUNIT.

  check LT_GATE_SHIPUNIT is not initial.

*** Find Provider for Routing Supervisor of CPM
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).
  check LT_GATE_RTESPV is not initial.

***------------------------------------------------------------------------------------------------
*** Loop at Shipping Units
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.

    clear: LF_INDEX_CPM.
*** Check if its UNIT or Group
    read table LT_GATE_UNIT from LR_GATE_SHIPUNIT transporting no fields.
    if SY-SUBRC = 0.
      add 1 to LF_INDEX_SHUNT_UNIT.
      move LF_INDEX_SHUNT_UNIT to LF_INDEX_SHUNT.
    endif.
    read table LT_GATE_GROUP from LR_GATE_SHIPUNIT transporting no fields.
    if SY-SUBRC = 0.
      add 1 to LF_INDEX_SHUNT_GRP.
      move LF_INDEX_SHUNT_GRP to LF_INDEX_SHUNT.
    endif.

*** Get Routing Supervisor Configured Packaging Material
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.

***  Get Shipping Unit Element
      try.
          move LR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
      check LR_PR_SHIPUNIT is bound.

***   Add new Entry
      append initial line to RT_CPM_RTESEL assigning <S_CPM_RTESEL>.
      move LR_PR_SHIPUNIT->GET_SHUNT( )  to <S_CPM_RTESEL>-SHUNT.

***   Set MF X-Connect
      add 1 to LF_INDEX_CPM.
      concatenate 'CPM' LF_INDEX_SHUNT LF_INDEX_CPM into <S_CPM_RTESEL>-IMFXC separated by SPACE.

***------------------------------------------------------------------------------------------------
***   First try standard Box
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_BOX.
          check LR_PR_RTESPV_BOX is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_BOX->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_BOX->R_RTESEL to <S_CPM_RTESEL>-R_RTESEL.
          move 'PC_BOX'                   to <S_CPM_RTESEL>-SPVCE_ID.
          if <S_CPM_RTESEL>-R_RTESEL is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_BOX.
      endtry.


***------------------------------------------------------------------------------------------------
***   Second try AS
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_AS.
          check LR_PR_RTESPV_AS is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_AS->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_AS->R_RTESEL to <S_CPM_RTESEL>-R_RTESEL.
          move 'PC_AS'                   to <S_CPM_RTESEL>-SPVCE_ID.
          if <S_CPM_RTESEL>-R_RTESEL is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.

***       Find Components
          <S_CPM_RTESEL>-T_COMP_RTESEL = LR_PR_RTESPV_AS->GET_CPM_COMP_RTESEL( ).

          loop at <S_CPM_RTESEL>-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
            concatenate <S_CPM_RTESEL>-IMFXC '_' <S_COMP_RTESEL>-IMFXC into <S_COMP_RTESEL>-IMFXC.
          endloop.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_BOX.
      endtry.

    endloop.
  endloop.

endmethod.
method GET_EXQTY.

  if ME->R_PR_RTESPV_HL is not bound.
*** Get own Explosion Quantity
    move SUPER->GET_EXQTY( )              to RS_EXQTY.
  else.
*** Get Higher-Level Explosion Quantity
    move ME->R_PR_RTESPV_HL->GET_EXQTY( ) to RS_EXQTY.
  endif.

endmethod.
method GET_PPASS.

  data:          LT_GATE_CLOS           type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_JOINT          type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_CLOS           type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_JOINT          type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_JOINT            type ref to ZCL_VCXI_P0SS_PR_JOINT.
  field-symbols: <S_PPASS>              type        YS_PPASS.

***------------------------------------------------------------------------------------------------
*** Find Provider for Closing
  LT_GATE_CLOS = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
                                        IF_INUSE = ABAP_TRUE ).
  check LT_GATE_CLOS is not initial.

*** Find Provider for Joint
  LT_GATE_JOINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  check LT_GATE_JOINT is not initial.

***------------------------------------------------------------------------------------------------
*** Build Production Passes
  loop at LT_GATE_CLOS into LR_GATE_CLOS.
*** Check is child of Specification
    check LR_GATE_CLOS->GET_PARENT( ) eq IR_GATE_SPEC_AS.

    loop at LT_GATE_JOINT into LR_GATE_JOINT.
      check LR_GATE_JOINT->IS_IN_LINE( IR_GATE = LR_GATE_CLOS ) eq ABAP_TRUE.

      try.
          move LR_GATE_JOINT->R_CLSPR ?to LR_PR_JOINT.
          check LR_PR_JOINT is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Add Production Pass
      append initial line to RT_PPASS assigning <S_PPASS>.
      move LR_GATE_CLOS              to <S_PPASS>-R_GATE_CLOS.
      move LR_GATE_JOINT             to <S_PPASS>-R_GATE_JOINT.
      move LR_PR_JOINT->GET_PPASS( ) to <S_PPASS>-PPASS.
      move LR_PR_JOINT->IS_CLOSED( ) to <S_PPASS>-CLOSED.

    endloop.
  endloop.


endmethod.
method GET_PRVDR_SHIPMGR.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method GET_PRVDR_SPEC_AS.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_AS=>C_IPRVT_P0_SPEC_AS
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL activation ABAP_FALSE.
    clear ME->R_PR_RTESPV_HL.
  endif.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE_RTESPV     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SPEC_HL    type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPMGR_HL type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_RTESPV     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC_AS    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC_HL    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPMGR_HL type ref to /VCXI/CL_VKSR_GATE.

  SUPER->HANDLE_INIT_REFERENCES( ).

*** Get Specification
  move ME->GET_PRVDR_SPEC_AS( ) to LR_GATE_SPEC_AS.
  check LR_GATE_SPEC_AS is bound.

***------------------------------------------------------------------------------------------------
*** Get Routing Supervisors for Higher Level
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
    check LR_GATE_RTESPV          is bound and
          LR_GATE_RTESPV->R_CLSPR is bound.

*** HigherLevel Supervisors shouldn't be InLine with my Specification
    check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_SPEC_AS ) ne ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** First Try with Specification
*** Get Specification of potential HL Supervisor
    LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                                 IF_INUSE = ABAP_TRUE ).
    if LT_GATE_SPEC_HL is initial.
      LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_AS=>C_IPRVT_P0_SPEC_AS
                                                   IF_INUSE = ABAP_TRUE ).
      if LT_GATE_SPEC_HL is initial.
        LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                                     IF_INUSE = ABAP_TRUE ).
      endif.
    endif.

    loop at LT_GATE_SPEC_HL into LR_GATE_SPEC_HL.
***   Specification of HigherLevel Supervisors should be InLine me
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC_HL ) eq ABAP_TRUE.


***   Get PR Reference
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to ME->R_PR_RTESPV_HL.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** Second Try with Shipping Manager
*** Get Shipping Manager of potential HL Supervisor
    LT_GATE_SHIPMGR_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                                    IF_INUSE = ABAP_TRUE ).


    loop at LT_GATE_SHIPMGR_HL into LR_GATE_SHIPMGR_HL.
***   Shipping Manager of HigherLevel Supervisors should be InLine me
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR_HL ) eq ABAP_TRUE.

***   Get PR Reference
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to ME->R_PR_RTESPV_HL.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endloop.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL.
  endif.

endmethod.
method HANDLE_PROD_FILLED.

  data:  LR_BL_PRTE    type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
      if ME->R_PR_RTESPV_HL is not bound.
        SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = IR_BL_PRTE ).
      else.
***     If it is me
        if IR_BL_PRTE eq ME->R_RTESEL.
***       Copy and process
          if ME->R_RTESEL is bound.
            move ME->R_RTESEL->COPY( ) to LR_BL_PRTE.
          endif.
          SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = LR_BL_PRTE ).
        else.
***       Trigger for Selected
          raise event PROD_FILLED exporting IR_BL_PRTE = ME->R_RTESEL.
        endif.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method IS_FILL_PROD_ALLOWED.

  data:  LR_PRVDR         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_RTESPV     type ref to ZCL_VCXI_XCSR_PR_RTESPV.
  data:  LT_PRVDR_RTESPV  type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR         type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Refresh Auto and get Selected Route
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
  read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Be positive
    move ABAP_TRUE to EF_ALLOWED.

*** Ignore own Element for Routing Supervisor check
    append ME->R_GATE to CT_GATE_IGNORE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor of Components
    LT_PRVDR_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                             IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR_RTESPV into LR_PRVDR.

***   Check Routing Supervisor is not ignored
      read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
      check SY-SUBRC ne 0.

      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).

***   Check if Fill is allowed
      LR_PR_RTESPV->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                          changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
      if EF_ALLOWED ne ABAP_TRUE.
        exit.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Check Status of all Provider
    check EF_ALLOWED eq ABAP_TRUE.
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR into LR_PRVDR.
***   Don't check Routing Supervisor of Components
      read table LT_PRVDR_RTESPV with key TABLE_LINE = LR_PRVDR
                                 transporting no fields.
      check SY-SUBRC ne 0.

      if ME->R_PR_RTESPV_HL is bound.
        if LR_PRVDR->R_CLSPR eq ME->R_PR_RTESPV_HL.

***       Check Routing Supervisor is not ignored
          read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
          check SY-SUBRC ne 0.

***       Refresh Auto and get Selected Route
          ME->R_PR_RTESPV_HL->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).

          ME->R_PR_RTESPV_HL->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                                    changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
          if EF_ALLOWED ne ABAP_TRUE.
            exit.
          else.
            continue.
          endif.
        endif.
      endif.

***   Only check PR Class Status if Provider is in line to me or my component Routing Supervisors
      if LR_PRVDR->IS_IN_LINE( IR_GATE = ME->R_GATE )                    eq ABAP_TRUE or
         ME->IS_IN_LINE_COMP_RTESPV( IR_PRVDR        = LR_PRVDR
                                     IT_PRVDR_RTESPV = LT_PRVDR_RTESPV ) eq ABAP_TRUE.
        if LR_PRVDR->R_CLSPR is bound and
           LR_PRVDR->R_CLSPR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      else.
        if LR_PRVDR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      endif.
    endloop.
  endif.

endmethod.
method IS_IN_LINE_COMP_RTESPV.

  data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE.

  loop at IT_PRVDR_RTESPV into LR_PRVDR.
    check IR_PRVDR->IS_IN_LINE( IR_GATE = LR_PRVDR ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_RETURN.
    exit.
  endloop.

endmethod.
method TURN_PCDIR.

  data: LF_PCDIR     type        ZVCXI_P0SP_PCDIR,
        LF_PREVIOUS  type        ABAP_BOOL,
        LF_MANDATORY type        ABAP_BOOL,
        LF_IPSTP     type        /VCXI/VSMC_IPSTP,
        LF_ILTYP     type        /VCXI/VSMC_ILTYP.
  data: LT_ILTYP_PSTEP   type        /VCXI/CKX_TT_ID,
        LT_ILTYP_ARBPL   type        /VCXI/CKX_TT_ID,
        LT_MSG           type        /VCXI/CKXM_TT_MSG,
        LT_RTE_PSTEP_ORG type        /VCXI/VSMR_TT_RTE_PSTEP,
        LT_RTE_PSTEP_NEW type        /VCXI/VSMR_TT_RTE_PSTEP,
        LT_MSG_ORG       type        /VCXI/CKXM_TT_MSG.
  data: LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_PCDIR         type ref to ZIF_VCXI_P0SR_PCDIR,
        LR_RTE_PSTEP_ORG type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_ORG  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_RTE_PSEQ_NEW  type ref to /VCXI/CL_VSMR_RTE_PSEQ,
        LR_RTE_PSTEP_NEW type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_NEW  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  check IR_RTE_ARBPL->R_ARBPL is bound.

*** Get current Direction
  if IF_PCDIR_PREV is not initial.
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.

          move LR_PCDIR->F_PCDIR to LF_PCDIR.

          if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
            move ABAP_TRUE to LF_PREVIOUS.
          endif.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
  endif.

  if not ( LF_PREVIOUS   eq ABAP_TRUE and
           IF_PCDIR_PREV is not initial and
           IF_PCDIR_PREV ne LF_PCDIR ).
*** Turn not because of prefere previous
    clear LF_PREVIOUS.

    check IR_RTE_ARBPL->T_MSG is not initial.
*** Get Error Messages
    move IR_RTE_ARBPL->T_MSG  to LT_MSG.
    delete LT_MSG where MSGTY eq 'S'
                   or   MSGTY eq 'I'
                   or   MSGTY eq 'W'.
    check LT_MSG is not initial.
  endif.

***----------------------------------------------------------------------------
*** Identify Limits that allow turning
  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
      move ABAP_TRUE to LF_MANDATORY.
      exit.
    endif.

    move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
    ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LF_IPSTP
                                              importing ET_ILTYP = LT_ILTYP_PSTEP ).
    append lines of LT_ILTYP_PSTEP to LT_ILTYP_ARBPL.
  endloop.

  check LF_MANDATORY ne ABAP_TRUE.

  sort LT_ILTYP_ARBPL.
  delete adjacent duplicates from LT_ILTYP_ARBPL.

***----------------------------------------------------------------------------
  if LF_PREVIOUS ne ABAP_TRUE.
*** Ignore Messages that can be resolved by Turn
    loop at LT_ILTYP_ARBPL into LF_ILTYP.
      delete LT_MSG where MSGV2 eq LF_ILTYP.
    endloop.

*** Check no other Error Message exists...
    check LT_MSG is initial.
  endif.

***----------------------------------------------------------------------------
*** Buffer to be able to turn it back
  move IR_RTE_ARBPL->T_RTE_PSTEP to LT_RTE_PSTEP_ORG.
  move IR_RTE_ARBPL->T_MSG       to LT_MSG_ORG.


  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_ORG.
*** Create new Production Steps
    if LR_RTE_PSTEP_ORG->R_RTE_PSEQ is bound.
      create object LR_RTE_PSEQ_NEW
        exporting
          IR_PSEQ     = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_PSEQ
          IR_RTE_PSEQ = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_RTE_PSEQ.
      move LR_RTE_PSEQ_NEW->R_RTE_PSTEP to LR_RTE_PSTEP_NEW.
    else.
      create object LR_RTE_PSTEP_NEW
        exporting
          IR_PSTEP = LR_RTE_PSTEP_ORG->R_PSTEP.
    endif.
    append LR_RTE_PSTEP_NEW to LT_RTE_PSTEP_NEW.

*** Copy Link Context Value
    move LR_RTE_PSTEP_ORG->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

*** Create Copy of BL Production Steps
    try.
        move LR_RTE_PSTEP_ORG->R_BLOBJ ?to LR_BL_PSTEP_ORG.
        if LR_BL_PSTEP_ORG is bound.
          LR_BL_PSTEP_NEW = LR_BL_PSTEP_ORG->COPY( ).
          move LR_BL_PSTEP_NEW to LR_RTE_PSTEP_NEW->R_BLOBJ.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

*** Turn
    try.
        move LR_RTE_PSTEP_NEW->R_BLOBJ ?to LR_PCDIR.
        if LR_PCDIR is bound.
          case LR_PCDIR->F_PCDIR.
            when 'A'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'B' ).
            when 'B'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'A' ).
          endcase.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Add new Limits
    LR_BL_PSTEP_NEW->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP_NEW ).
  endloop.

*** Set new Production Steps
  move LT_RTE_PSTEP_NEW to IR_RTE_ARBPL->T_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Check Limits on Work Center Level
  IR_RTE_ARBPL->CHECK_LIMITS( ).

*** Get Error Messages
  move IR_RTE_ARBPL->T_MSG  to LT_MSG.
  delete LT_MSG where MSGTY eq 'S'
                 or   MSGTY eq 'I'
                 or   MSGTY eq 'W'.
  if LT_MSG is not initial.
*** Return to Original Direction
    move LT_RTE_PSTEP_ORG to IR_RTE_ARBPL->T_RTE_PSTEP.
    move LT_MSG_ORG       to IR_RTE_ARBPL->T_MSG.
  else.
*** Recheck complete Route
    move ABAP_TRUE to RF_RECHECK.
  endif.

endmethod.
method VALIDATE.

  data:  LF_RECHECK  type        ABAP_BOOL.
  data:  LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE.

  SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Process Routes
  loop at CT_BL_PRTE into LR_BL_PRTE.
    clear LF_RECHECK.

*** Validate Production Passes are not combined
    ME->VALIDATE_PPASS( IR_BL_PRTE = LR_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Continue only for invalid
    check LR_BL_PRTE->R_RTE_PRTE->F_RSTAT ne /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID.

*** Sheet Rotation
    if ME->VALIDATE_PCDIR( IR_BL_PRTE = LR_BL_PRTE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_RECHECK.
    endif.

*** Recheck
    if LF_RECHECK eq ABAP_TRUE.
      LR_BL_PRTE->CHECK( ).
      LR_BL_PRTE->INIT_RELPO( ).
    endif.
  endloop.

endmethod.
method VALIDATE_PCDIR.

  data:  LF_PCDIR      type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PRTE    type ref to ZCL_VCXI_P0SR_BL_PRTE,
         LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR      type ref to ZIF_VCXI_P0SR_PCDIR.

  try.
      move IR_BL_PRTE ?to LR_BL_PRTE.
      check LR_BL_PRTE is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Check Mandetory Directions missmatch will not be fixed automatically
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Update Direction
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR->F_PCDIR ne LF_PCDIR.
***     Set Direction
        LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR ).
        move ABAP_TRUE to RF_RECHECK.
      endif.
    endloop.
  endloop.

*** Check
  if RF_RECHECK eq ABAP_TRUE.
    IR_BL_PRTE->CHECK( ).
  endif.

***--------------------------------------------------------------------------------------
*** Automatic Turn of Route
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    if ME->TURN_PCDIR( IR_RTE_ARBPL  = LR_RTE_ARBPL
                       IF_PCDIR_PREV = LF_PCDIR ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_RECHECK.
    endif.

    if LR_BL_PRTE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_P0SR_BL_PRTE=>C_RSRCE_USER.
      try.
***       Get PC Direction of Work Center
          LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        catch /VCXI/CX_CKX.
          clear LF_PCDIR.
      endtry.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Adjust PC Direction of Material Flow In
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        exit.
      catch /VCXI/CX_CKX.
        clear LF_PCDIR.
    endtry.
  endloop.
  LR_BL_PRTE->SET_PCDIR_OF_MFI( IF_PCDIR = LF_PCDIR ).

endmethod.
method VALIDATE_PPASS.

  data:  LF_INDEX             type        I,
         LF_PPASS             type        N length 2,
         LF_PPASS_PREV        type        N length 2,
         LF_RECHECK           type        ABAP_BOOL.
  data:  LT_RTE_ARBPL         type        /VCXI/VSMR_TT_RTE_ARBPL.
  data:  LR_RTE_ARBPL         type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP         type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP          type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_CLOS_AS  type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS_AS,
         LR_BL_PSTEP_GRP_AS   type ref to ZCL_VCXI_P0SR_BL_PSTEP_GRP_AS,
         LR_BL_PSTEP_UNIT_AS  type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS.

***------------------------------------------------------------------------------------------------
*** Split PPass where needed
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    move SY-TABIX to LF_INDEX.

    clear: LF_PPASS_PREV.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.

***   Find PPass
      clear: LF_PPASS.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CLOS_AS.
          check LR_BL_PSTEP_CLOS_AS is bound.
          move LR_BL_PSTEP_CLOS_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_GRP_AS.
          check LR_BL_PSTEP_GRP_AS is bound.
          move LR_BL_PSTEP_GRP_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_UNIT_AS.
          check LR_BL_PSTEP_UNIT_AS is bound.
          move LR_BL_PSTEP_UNIT_AS->F_PPASS to LF_PPASS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.

      if LF_PPASS is not initial.
***     Split by PPass if needed
        if LF_PPASS_PREV is not initial and
           LF_PPASS ne LF_PPASS_PREV.

***       Split Work Center
          LT_RTE_ARBPL = ME->SPLIT_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL
                                              IR_RTE_PSTEP = LR_RTE_PSTEP ).

***       Replace Work Center
          delete IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL index LF_INDEX.
          insert lines of LT_RTE_ARBPL into IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL index LF_INDEX.

***       Request Recheck
          move ABAP_TRUE to LF_RECHECK.
        endif.

***     Keep previous PPass
        move LF_PPASS to LF_PPASS_PREV.
      endif.
    endloop.
  endloop.


***------------------------------------------------------------------------------------------------
*** Recheck
  if LF_RECHECK eq ABAP_TRUE.
    IR_BL_PRTE->CHECK( ).
    IR_BL_PRTE->INIT_RELPO( ).
  endif.

endmethod.
