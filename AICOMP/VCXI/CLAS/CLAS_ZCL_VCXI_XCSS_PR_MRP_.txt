
class ZCL_VCXI_XCSS_PR_MRP definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_BSTFE_CHANGED type /VCXI/VKSC_IEVNT value 'BSTFE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BSTMA_CHANGED type /VCXI/VKSC_IEVNT value 'BSTMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BSTMI_CHANGED type /VCXI/VKSC_IEVNT value 'BSTMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_DISLS_CHANGED type /VCXI/VKSC_IEVNT value 'DISLS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_DISMM_CHANGED type /VCXI/VKSC_IEVNT value 'DISMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_DISPO_CHANGED type /VCXI/VKSC_IEVNT value 'DISPO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_DISPR_CHANGED type /VCXI/VKSC_IEVNT value 'DISPR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_EISBE_CHANGED type /VCXI/VKSC_IEVNT value 'EISBE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WERKS_CHANGED type /VCXI/VKSC_IEVNT value 'WERKS_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XCS_MRP type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSS_MRP' ##NO_TEXT.
  constants C_PARID_BSTFE_A type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTFE_A' ##NO_TEXT.
  constants C_PARID_BSTFE_L type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTFE_L' ##NO_TEXT.
  constants C_PARID_BSTFE_P type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTFE_P' ##NO_TEXT.
  constants C_PARID_BSTMA_A type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMA_A' ##NO_TEXT.
  constants C_PARID_BSTMA_L type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMA_L' ##NO_TEXT.
  constants C_PARID_BSTMA_P type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMA_P' ##NO_TEXT.
  constants C_PARID_BSTMI_A type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMI_A' ##NO_TEXT.
  constants C_PARID_BSTMI_L type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMI_L' ##NO_TEXT.
  constants C_PARID_BSTMI_P type /VCXI/VKS_PARID value 'ZVCXI_XC_BSTMI_P' ##NO_TEXT.
  constants C_PARID_DISLS type /VCXI/VKS_PARID value 'ZVCXI_XC_DISLS' ##NO_TEXT.
  constants C_PARID_DISMM type /VCXI/VKS_PARID value 'ZVCXI_XC_DISMM' ##NO_TEXT.
  constants C_PARID_DISPO type /VCXI/VKS_PARID value 'ZVCXI_XC_DISPO' ##NO_TEXT.
  constants C_PARID_DISPR type /VCXI/VKS_PARID value 'ZVCXI_XC_DISPR' ##NO_TEXT.
  constants C_PARID_EISBE_A type /VCXI/VKS_PARID value 'ZVCXI_XC_EISBE_A' ##NO_TEXT.
  constants C_PARID_EISBE_L type /VCXI/VKS_PARID value 'ZVCXI_XC_EISBE_L' ##NO_TEXT.
  constants C_PARID_EISBE_P type /VCXI/VKS_PARID value 'ZVCXI_XC_EISBE_P' ##NO_TEXT.
  constants C_PARID_WERKS type /VCXI/VKS_PARID value 'ZVCXI_XC_WERKS' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BSTFE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_BSTFE) type ZVCXI_XCS_S_BSTFE
    raising
      /VCXI/CX_CKX .
  methods GET_BSTMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_BSTMA) type ZVCXI_XCS_S_BSTMA
    raising
      /VCXI/CX_CKX .
  methods GET_BSTMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_BSTMI) type ZVCXI_XCS_S_BSTMI
    raising
      /VCXI/CX_CKX .
  methods GET_DISLS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_LOSLT type LOSLT
      !ES_T439A type T439A
    returning
      value(RF_DISLS) type DISLS
    raising
      /VCXI/CX_CKX .
  methods GET_DISMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DIBEZ type DIBEZ
      !ES_T438A type T438A
    returning
      value(RF_DISMM) type DISMM
    raising
      /VCXI/CX_CKX .
  methods GET_DISPO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DSNAM type DSNAM
    returning
      value(RF_DISPO) type DISPO
    raising
      /VCXI/CX_CKX .
  methods GET_DISPR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DPRTX type DPRTX
      !ES_MDIP type MDIP
    returning
      value(RF_DISPR) type DISPR
    raising
      /VCXI/CX_CKX .
  methods GET_EISBE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_EISBE) type ZVCXI_XCS_S_EISBE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MRP_AREA
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_BSTFE
    importing
      !IS_BSTFE type ZVCXI_XCS_S_BSTFE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BSTMA
    importing
      !IS_BSTMA type ZVCXI_XCS_S_BSTMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BSTMI
    importing
      !IS_BSTMI type ZVCXI_XCS_S_BSTMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DISLS
    importing
      !IF_DISLS type DISLS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DISMM
    importing
      !IF_DISMM type DISMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DISPO
    importing
      !IF_DISPO type DISPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DISPR
    importing
      !IF_DISPR type DISPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EISBE
    importing
      !IS_EISBE type ZVCXI_XCS_S_EISBE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS
    importing
      !IF_WERKS type WERKS_D
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  class-methods INIT_AS_PRVDR
    importing
      !IR_GATE_PARENT type ref to /VCXI/CL_VKSR_GATE
      !IT_WERKS type T_WERKS
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_LOAD_DISPR type /VCXI/VKSC_IEVNT value 'LOAD_DISPR' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  data F_PARID_BSTFE type /VCXI/VKS_PARID .
  data F_PARID_BSTMA type /VCXI/VKS_PARID .
  data F_PARID_BSTMI type /VCXI/VKS_PARID .
  data F_PARID_EISBE type /VCXI/VKS_PARID .

  methods HANDLE_LOAD_DISPR
    raising
      /VCXI/CX_CKX .
  methods CHECK_DISPR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DISPO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DISMM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DISLS
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_BSTMA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_BSTFE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_PARID
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSS_PR_MRP definition
class ZCL_VCXI_XCSS_PR_MRP implementation.
  method CHECK_BSTFE.

*** Use SAP standard to check
    call function 'MARC_BSTFE'
      exporting
        P_BSTFE          = ME->GET_BSTFE( )-BSTFE
        P_DISPR          = ME->GET_DISPR( )
        P_DISLS          = ME->GET_DISLS( )
        P_KZ_NO_WARN     = 'N'
      exceptions
        P_ERR_MARC_BSTFE = 1
        ERR_T439A        = 2.
    if SY-SUBRC ne 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
      endif.
    endif.

  endmethod.
  method CHECK_BSTMA.

*** Use SAP standard to check
    call function 'MARC_BSTMA'
      exporting
        P_BSTMA          = ME->GET_BSTMA( )-BSTMA
        P_BSTMI          = ME->GET_BSTMI( )-BSTMI
        P_BSTRF          = 0  "Do not check Rounding value for purchase order quantity
        P_KZ_NO_WARN     = 'N'
      exceptions
        P_ERR_MARC_BSTMA = 1.
    if SY-SUBRC ne 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
      endif.
    endif.

  endmethod.
  method CHECK_DISLS.

    ME->GET_DISMM( importing ES_T438A = data(LS_T438A) ).
    data(LF_DISLS) = ME->GET_DISLS( ).

    if LF_DISLS is initial and
       LS_T438A-DISVF ne 'N'.  "No MRP
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Enter the lot size (materials planning)
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'M3'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '071' ).
      endif.
    else.
***   Check Entry
      call function 'T439A_SINGLE_READ'
        exporting
          T439A_DISLS = LF_DISLS
        exceptions
          NOT_FOUND   = 1.
      if SY-SUBRC ne 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_DISMM.

    data(LF_DISMM) = ME->GET_DISMM( ).

    if LF_DISMM is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.

    else.
***   Check Entry
      call function 'T438A_SINGLE_READ'
        exporting
          T438A_DISMM = LF_DISMM
        exceptions
          others      = 1.
      if SY-SUBRC ne 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_DISPO.

    ME->GET_DISMM( importing ES_T438A = data(LS_T438A) ).
    data(LF_DISPO) = ME->GET_DISPO( ).

    if LF_DISPO is initial and
       LS_T438A-DISVF ne 'N'.  "No MRP
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Enter the MRP controller
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'M3'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '069' ).
      endif.
    else.
***   Use SAP standard to check
      call function 'MARC_DISPO'
        exporting
          P_DISPO        = ME->GET_DISPO( )
          P_WERKS        = ME->GET_WERKS( )
          P_KZ_NO_WARN   = 'N'
        exceptions
          ERR_MARC_DISPO = 1
          ERR_T024D      = 2.
      if SY-SUBRC ne 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_DISPR.

    data(LF_DISPR) = ME->GET_DISPR( ).
    check LF_DISPR is not initial.

*** Check Profile
    call function 'MDIP_SINGLE_READ'
      exporting
        MDIP_DISPR = LF_DISPR
      exceptions
        NOT_FOUND  = 1
        others     = 2.

    if SY-SUBRC ne 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     The MRP profile & does not exist
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'M3'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '109'
                                 IF_MSGV1 = LF_DISPR ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize dimension-based Parameter ID
    ME->INIT_PARID( ).

  endmethod.
  method GET_BSTFE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTFE ).
    RS_BSTFE = value #( BSTFE     = LS_PARAM-ATFLV
                        BSTFE_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_BSTMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTMA ).
    RS_BSTMA = value #( BSTMA     = LS_PARAM-ATFLV
                        BSTMA_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_BSTMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTMI ).
    RS_BSTMI = value #( BSTMI     = LS_PARAM-ATFLV
                        BSTMI_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_DESCR.

    RF_DESCR = |{ SUPER->GET_DESCR( ) } ({ ME->GET_WERKS( ) })|.

  endmethod.
  method GET_DISLS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISLS ).
    RF_DISLS = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_DISLS is not initial.

***--------------------------------------------------------------------------------------
*** Description
    if EF_LOSLT is requested.
      select single LOSLT
             into EF_LOSLT
             from T439T
            where DISLS eq RF_DISLS
             and  SPRAS eq SY-LANGU.
      if SY-SUBRC ne 0.
        clear EF_LOSLT.
      endif.
    endif.

*** MRP Settings
    if ES_T439A is requested.
      call function 'T439A_SINGLE_READ'
        exporting
          T439A_DISLS = RF_DISLS
        importing
          WT439A      = ES_T439A
        exceptions
          others      = 1.
      if SY-SUBRC ne 0.
        clear ES_T439A.
      endif.
    endif.

  endmethod.
  method GET_DISMM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISMM ).
    RF_DISMM = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_DISMM is not initial.

***--------------------------------------------------------------------------------------
*** Description
    if EF_DIBEZ is requested.
      select single DIBEZ
             into EF_DIBEZ
             from T438T
            where SPRAS eq SY-LANGU
             and  DISMM eq RF_DISMM.
      if SY-SUBRC ne 0.
        clear EF_DIBEZ.
      endif.
    endif.

    if ES_T438A is requested.
      call function 'T438A_SINGLE_READ'
        exporting
          T438A_DISMM = RF_DISMM
        importing
          WT438A      = ES_T438A
        exceptions
          others      = 1.
      if SY-SUBRC ne 0.
        clear ES_T438A.
      endif.
    endif.

  endmethod.
  method GET_DISPO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISPO ).
    RF_DISPO = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_DISPO is not initial.

***--------------------------------------------------------------------------------------
*** Description
    if EF_DSNAM is requested.
      data(LF_WERKS) = ME->GET_WERKS( ).
      select single DSNAM
             into @EF_DSNAM
             from T024D
            where WERKS eq @LF_WERKS
             and  DISPO eq @RF_DISPO.
      if SY-SUBRC ne 0.
        clear EF_DSNAM.
      endif.
    endif.

  endmethod.
  method GET_DISPR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISPR ).
    RF_DISPR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_DISPR is not initial.

***--------------------------------------------------------------------------------------
*** Description
    if EF_DPRTX is requested.
      select single KTEXT
             into @EF_DPRTX
             from T401T
            where SPRAS eq @SY-LANGU
             and  DISPR eq @RF_DISPR.
      if SY-SUBRC ne 0.
        clear EF_DPRTX.
      endif.
    endif.

*** Field Content of MRP Profile
    if ES_MDIP is requested.
      call function 'MDIP_SINGLE_READ'
        exporting
          MDIP_DISPR = RF_DISPR
        importing
          WMDIP      = ES_MDIP
        exceptions
          others     = 1.
      if SY-SUBRC ne 0.
        clear ES_MDIP.
      endif.
    endif.

  endmethod.
  method GET_EISBE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_EISBE ).
    RS_EISBE = value #( EISBE     = LS_PARAM-ATFLV
                        EISBE_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_PRVDR_MRP_AREA.

*** Get Provider
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP_AREA=>C_IPRVT_XCS_MRP_AREA
                                     IF_INUSE = ABAP_TRUE ).

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check MRP Profile
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DISPR( ) ).

***----------------------------------------------------------------------------
*** Check MRP Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DISMM( ) ).

*** Check MRP Controller
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DISPO( ) ).

***----------------------------------------------------------------------------
*** Check Lot Sizing Procedure in Materials Planning
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DISLS( ) ).

*** Check Maximum Lot Size
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BSTMA( ) ).

*** Check Fix Lot Size
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BSTFE( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check MRP Profile
    ME->CHECK_DISPR( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check MRP Type
    ME->CHECK_DISMM( IR_MESSAGE = IR_MESSAGE ).

*** Check MRP Controller
    ME->CHECK_DISPO( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Lot Sizing Procedure in Materials Planning
    ME->CHECK_DISLS( IR_MESSAGE = IR_MESSAGE ).

*** Check Maximum Lot Size
    ME->CHECK_BSTMA( IR_MESSAGE = IR_MESSAGE ).

*** Check Fix Lot Size
    ME->CHECK_BSTFE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).
    move LS_PARAM-ATWRT to RF_WERKS.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      select single NAME1
             into EF_DESCR
             from T001W
            where WERKS = RF_WERKS.
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_LOAD_DISPR.
        ME->HANDLE_LOAD_DISPR( ).

    endcase.

  endmethod.
  method HANDLE_LOAD_DISPR.

    data: LT_T401A_REQ type table of T401A,
          LT_T401A_OPT type table of T401A.


***--------------------------------------------------------------------------------------
*** Get Field Content of MRP Profile
    ME->GET_DISPR( importing ES_MDIP = data(LS_MDIP) ).
    check LS_MDIP-DISPR is not initial.

*** Get MRP profile definition
    call function 'T401A_ARRAY_READ'
      exporting
        P_DISPR    = LS_MDIP-DISPR
      tables
        TT401A_REQ = LT_T401A_REQ
        TT401A_OPT = LT_T401A_OPT.

***--------------------------------------------------------------------------------------
*** MRP Type
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-DISMM' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-DISMM' ] ) and
         ME->GET_DISMM( ) is initial ).
      ME->SET_DISMM( IF_DISMM = LS_MDIP-DISMM ).
    endif.

*** MRP Controller
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-DISPO' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-DISPO' ] ) and
         ME->GET_DISPO( ) is initial ).
      ME->SET_DISPO( IF_DISPO = LS_MDIP-DISPO ).
    endif.

***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-DISLS' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-DISLS' ] ) and
         ME->GET_DISLS( ) is initial ).
      ME->SET_DISLS( IF_DISLS = LS_MDIP-DISLS ).
    endif.

*** Minimum Lot Size
    data(LS_BSTMI) = ME->GET_BSTMI( ).
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-BSTMI' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-BSTMI' ] ) and
         LS_BSTMI-BSTMI is initial ).
      ME->SET_BSTMI( IS_BSTMI = value #( BSTMI     = LS_MDIP-BSTMI
                                         BSTMI_UOM = LS_BSTMI-BSTMI_UOM ) ).
    endif.

*** Maximum Lot Size
    data(LS_BSTMA) = ME->GET_BSTMA( ).
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-BSTMA' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-BSTMA' ] ) and
         LS_BSTMA-BSTMA is initial ).
      ME->SET_BSTMA( IS_BSTMA = value #( BSTMA     = LS_MDIP-BSTMA
                                         BSTMA_UOM = LS_BSTMA-BSTMA_UOM ) ).
    endif.

*** Fixed Lot Size
    data(LS_BSTFE) = ME->GET_BSTFE( ).
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-BSTFE' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-BSTFE' ] ) and
         LS_BSTFE-BSTFE is initial ).
      ME->SET_BSTFE( IS_BSTFE = value #( BSTFE     = LS_MDIP-BSTFE
                                         BSTFE_UOM = LS_BSTFE-BSTFE_UOM ) ).
    endif.

*** Safety Stock
    data(LS_EISBE) = ME->GET_EISBE( ).
    if ( LINE_EXISTS( LT_T401A_REQ[ FNAME = 'MARC-EISBE' ] ) ) or
       ( LINE_EXISTS( LT_T401A_OPT[ FNAME = 'MARC-EISBE' ] ) and
         LS_EISBE-EISBE is initial ).
      ME->SET_EISBE( IS_EISBE = value #( EISBE     = LS_MDIP-EISBE
                                         EISBE_UOM = LS_EISBE-EISBE_UOM ) ).
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method INIT_AS_PRVDR.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get current MRP Settings Provider
    RT_GATE = IR_GATE_PARENT->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Create additional if needed
    if LINES( IT_WERKS ) gt LINES( RT_GATE ).
      do ( LINES( IT_WERKS ) - LINES( RT_GATE ) ) times.
***     Create MRP Settings Element
        LR_GATE = IR_GATE_PARENT->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP ).
        append LR_GATE to RT_GATE.
***     Set in Use
        if LR_GATE->GET_USYNC( ) eq ABAP_FALSE.
          LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.
      enddo.
    endif.

***--------------------------------------------------------------------------------------
*** Set Plant or remove if to many
    loop at RT_GATE into LR_GATE.
      data(LF_INDEX) = SY-TABIX.

      if LINE_EXISTS( IT_WERKS[ LF_INDEX ] ).
***     Update Plant
        cast ZCL_VCXI_XCSS_PR_MRP( LR_GATE->R_CLSPR )->SET_WERKS( IF_WERKS = IT_WERKS[ LF_INDEX ] ).
      else.
***     Remove not needed MRP Settings
        LR_GATE->DO_FREE( ).
      endif.
    endloop.

  endmethod.
  method INIT_PARID.

    loop at ME->R_GATE->GET_PARAM_ALL( ) into data(LS_PARAM)
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC.

***   Minimum Lot Size
      if LS_PARAM-PARID eq C_PARID_BSTMI_P or
         LS_PARAM-PARID eq C_PARID_BSTMI_L or
         LS_PARAM-PARID eq C_PARID_BSTMI_A.
        move LS_PARAM-PARID to ME->F_PARID_BSTMI.
      endif.
***   Maximum Lot Size
      if LS_PARAM-PARID eq C_PARID_BSTMA_P or
         LS_PARAM-PARID eq C_PARID_BSTMA_L or
         LS_PARAM-PARID eq C_PARID_BSTMA_A.
        move LS_PARAM-PARID to ME->F_PARID_BSTMA.
      endif.
***   Fix Lot Size
      if LS_PARAM-PARID eq C_PARID_BSTFE_P or
         LS_PARAM-PARID eq C_PARID_BSTFE_L or
         LS_PARAM-PARID eq C_PARID_BSTFE_A.
        move LS_PARAM-PARID to ME->F_PARID_BSTFE.
      endif.
***   Safety Stock
      if LS_PARAM-PARID eq C_PARID_EISBE_P or
         LS_PARAM-PARID eq C_PARID_EISBE_L or
         LS_PARAM-PARID eq C_PARID_EISBE_A.
        move LS_PARAM-PARID to ME->F_PARID_EISBE.
      endif.

    endloop.

  endmethod.
  method SET_BSTFE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTFE ).

    if IS_BSTFE is supplied.
      LS_PARAM-ATFLV = IS_BSTFE-BSTFE.
      LS_PARAM-UNIT  = IS_BSTFE-BSTFE_UOM.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BSTFE_CHANGED ).
    endif.

  endmethod.
  method SET_BSTMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTMA ).

    if IS_BSTMA is supplied.
      LS_PARAM-ATFLV = IS_BSTMA-BSTMA.
      LS_PARAM-UNIT  = IS_BSTMA-BSTMA_UOM.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BSTMA_CHANGED ).
    endif.

  endmethod.
  method SET_BSTMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_BSTMI ).

    if IS_BSTMI is supplied.
      LS_PARAM-ATFLV = IS_BSTMI-BSTMI.
      LS_PARAM-UNIT  = IS_BSTMI-BSTMI_UOM.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BSTMI_CHANGED ).
    endif.

  endmethod.
  method SET_DISLS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISLS ).

    move IF_DISLS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DISLS_CHANGED ).
    endif.

  endmethod.
  method SET_DISMM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISMM ).

    move IF_DISMM to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DISMM_CHANGED ).
    endif.

  endmethod.
  method SET_DISPO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISPO ).

    move IF_DISPO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DISPO_CHANGED ).
    endif.

  endmethod.
  method SET_DISPR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISPR ).

    move IF_DISPR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DISPR_CHANGED ).
    endif.

  endmethod.
  method SET_EISBE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_EISBE ).

    if IS_EISBE is supplied.
      LS_PARAM-ATFLV = IS_EISBE-EISBE.
      LS_PARAM-UNIT  = IS_EISBE-EISBE_UOM.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EISBE_CHANGED ).
    endif.

  endmethod.
  method SET_WERKS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).

    move IF_WERKS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WERKS_CHANGED ).
    endif.

  endmethod.
