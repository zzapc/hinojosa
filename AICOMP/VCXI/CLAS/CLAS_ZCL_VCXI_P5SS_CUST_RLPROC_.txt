
class ZCL_VCXI_P5SS_CUST_RLPROC definition
  public
  inheriting from ZCL_VCXI_PXSS_CUST_XPROC
  create protected .

public section.

  data S_CALIP type ZVCXI_P0SS_S_CALIP read-only .
  data S_SURWT type ZVCXI_PXS_S_SURWT read-only .
  data T_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM read-only .
  data F_CCBGN type ZVCXI_PXS_CCBGN read-only .
  data S_WEBWI type ZVCXI_PXS_S_WEBWI read-only .
  data S_GRAMM type ZVCXI_P0SS_S_GRAMM read-only .

  class-methods GET_INSTANCE_RLPROC
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P5SS_CUST_RLPROC
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_CCBGN type /VCXI/CKXC_MAPID value 'CCBGN' ##NO_TEXT.
  constants C_SETID_CCB type /VCXI/CKXC_SETID value 'ZVCXI_P5S_CCB' ##NO_TEXT.

  methods LOAD_BY_MM
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P5SS_CUST_RLPROC definition
class ZCL_VCXI_P5SS_CUST_RLPROC implementation.
  method GET_INSTANCE_RLPROC.

    data:  LS_INSTANCE type YS_INSTANCE.


***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
ENHANCEMENT-SECTION GET_INSTANCE_CRPROC SPOTS ZVCXI_P5SS_ES_CUST_RLPROC .
         create object RR_INSTANCE
           exporting
             IF_MATNR = IF_MATNR
             IF_WERKS = IF_WERKS
             IF_DATE  = IF_DATE.
END-ENHANCEMENT-SECTION.

***       Load by Material Master and Cross Classification Mapping
          RR_INSTANCE->LOAD_BY_MM( ).
          RR_INSTANCE->LOAD_BY_CCM( ).
        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LS_SETVA type  /VCXI/CKXC_S_SETVA.
    data: LT_SETVA  type  /VCXI/CKXC_TT_SETVA.


    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_CCB
                                             IF_OBJNUM = conv #( ME->F_MATNR ) ).

    loop at LT_SETVA into LS_SETVA.
      case LS_SETVA-MAPID.
***     CCB Grade Number
        when C_MAPID_CCBGN.
          if ME->F_CCBGN is initial.
            ME->F_CCBGN = value #( LS_SETVA-T_MAPVC[ 1 ]-VAMAP optional ).
          endif.

      endcase.
    endloop.

  endmethod.
  method LOAD_BY_MM.

    data: LF_BREIT type BREIT,
          LF_HOEHE type HOEHE,
          LF_MEABM type MEABM.
    data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
          LS_BAWGP type ZVCXI_PCS_S_BAWGP.
    data: LR_MMEXT type ref to ZCL_VCXI_P5E_MM_MMEXT.


***------------------------------------------------------------------------------------------------
*** Load Data from Material Master if not read from MM Extension
    select single BREIT HOEHE MEABM
              into (LF_BREIT, LF_HOEHE, LF_MEABM)
              from MARA
             where MATNR eq ME->F_MATNR.
    check SY-SUBRC eq 0.

    ME->S_WEBWI = value #( WEBWI     = LF_BREIT
                           WEBWI_UOM = LF_MEABM ).
    ME->S_CALIP = value #( CALIP     = LF_HOEHE
                           CALIP_UOM = LF_MEABM ).

*** Get Surface Weight based on Material Unit Conversion
    LS_BAWGP = value #( BAWGP     = '1000'
                        BAWGP_UOM = 'M2' ).
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = ME->F_MATNR
                                                             IF_VALUE_IN  = LS_BAWGP-BAWGP
                                                             IF_UOM_IN    = LS_BAWGP-BAWGP_UOM
                                                             IF_UOM_OUT   = 'KG'
                                                   importing EF_VALUE_OUT = LS_BAWGT-BAWGT
                                                             EF_UOM_OUT   = LS_BAWGT-BAWGT_UOM ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BAWGT-BAWGT
                                                        IF_CALCV_UOM_1 = LS_BAWGT-BAWGT_UOM
                                                        IF_CALCV_2     = LS_BAWGP-BAWGP
                                                        IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                        IF_UOM         = 'GM2'  "Default Unit based on g/m2
                                              importing EF_CALCV       = ME->S_SURWT-SURWT
                                                        EF_CALCV_UOM   = ME->S_SURWT-SURWT_UOM ).

***------------------------------------------------------------------------------------------------
*** Load MM Extension
    LR_MMEXT ?= ZCL_VCXI_PXE_MM_MMEXT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ZCL_VCXI_PXE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                                                                                                        IF_WERKS = ME->F_WRK02
                                                                                                                        IF_CNTXT = ZCL_VCXI_P5E_MM_MMEXT=>C_CNTXT_P5 ) ).
    check LR_MMEXT is bound.

    ME->F_CCBGN     = LR_MMEXT->S_MMEXT-CCBGN.
    ME->S_GRAMM     = LR_MMEXT->S_MMEXT-S_GRAMM.
    ME->T_PRINT_COM = LR_MMEXT->T_PRINT_COM.

*** Use Surface Weight as Grammage if not specified otherwise
    if ME->S_GRAMM is initial.
      ME->S_GRAMM = value #( GRAMM     = ME->S_SURWT-SURWT
                             GRAMM_UOM = ME->S_SURWT-SURWT_UOM ).
    endif.

  endmethod.
