
class ZCL_VCXI_PXSS_CUST_TOOL_DCT definition
  public
  inheriting from ZCL_VCXI_PXSS_CUST_TOOL
  abstract
  create public .

public section.

  data F_FNEST type ZVCXI_P0SS_FNEST read-only .
  data F_NOUTL type ZVCXI_PXS_NOUTL read-only .
  data F_NOUTT type ZVCXI_PXS_NOUTT read-only .
  data F_NOUTW type ZVCXI_PXS_NOUTW read-only .
  data F_SHTDI type ZVCXI_P0SS_SHTDI read-only .
  data F_TDCUT type ZVCXI_P0SS_TDCUT read-only .
  data S_PROHE type ZVCXI_P0S_S_PROHE read-only .
  data S_PROLE type ZVCXI_P0S_S_PROLE read-only .
  data S_PROWI type ZVCXI_P0S_S_PROWI read-only .
  data S_RULEN type ZVCXI_PXS_S_RULEN read-only .
  data S_SHTNL type ZVCXI_P0SS_S_SHTNL read-only .
  data S_SHTNW type ZVCXI_P0SS_S_SHTNW read-only .
  data S_SHTPL type ZVCXI_P0SS_S_SHTPL read-only .
  data S_SHTPW type ZVCXI_P0SS_S_SHTPW read-only .

  class-methods GET_DFLT_TCEST
    importing
      !IF_WERKS type WERKS_D
      !IF_TDCUT type ZVCXI_P0SS_TDCUT
      !IF_LIFNR type LIFNR
      !IF_DATE type DATS
      !IS_RULEN type ZVCXI_PXS_S_RULEN
    returning
      value(RS_TCEST) type ZVCXI_XCS_S_TCEST
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_TOOL_DCT
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PXSS_CUST_TOOL_DCT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_PXSS_CUST_TOOL_DCT definition
class ZCL_VCXI_PXSS_CUST_TOOL_DCT implementation.
  method CONSTRUCTOR.

    try.
        SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                            IF_WERKS = IF_WERKS
                            IF_DATE  = IF_DATE ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_DFLT_TCEST.

    data: LF_FACTOR type F.
    data: LS_TD210 type ZVCXI_PXS_TD210.
    data: LT_TD210 type table of ZVCXI_PXS_TD210.
    statics: LT_BUFFER type table of ZVCXI_PXS_TD210.


***--------------------------------------------------------------------------------------
*** Check Buffer
    if not LINE_EXISTS( LT_BUFFER[ WERKS = IF_WERKS
                                   TDCUT = IF_TDCUT
                                   LIFNR = IF_LIFNR
                                   VALFR = IF_DATE ] ).
***   Get Default
      select *
             into table @LT_TD210
             from ZVCXI_PXS_TD210
            where WERKS eq @IF_WERKS
             and  TDCUT eq @IF_TDCUT
             and  LIFNR eq @IF_LIFNR
             and  VALFR le @IF_DATE
            order by VALFR descending.
      if SY-SUBRC ne 0.
***     Vendor independent
        select *
               into table @LT_TD210
               from ZVCXI_PXS_TD210
              where WERKS eq @IF_WERKS
               and  TDCUT eq @IF_TDCUT
               and  LIFNR eq @SPACE
               and  VALFR le @IF_DATE
              order by VALFR descending.
        if SY-SUBRC ne 0.
***       Die Cut Type independent
          select *
                 into table @LT_TD210
                 from ZVCXI_PXS_TD210
                where WERKS eq @IF_WERKS
                 and  TDCUT eq @SPACE
                 and  LIFNR eq @SPACE
                 and  VALFR le @IF_DATE
                order by VALFR descending.
          if SY-SUBRC ne 0.
            clear LT_TD210.
          endif.
        endif.
      endif.
      LS_TD210 = value #( LT_TD210[ 1 ] optional ).

***   Adjust and add to Buffer
      LS_TD210-WERKS = IF_WERKS.
      LS_TD210-TDCUT = IF_TDCUT.
      LS_TD210-LIFNR = IF_LIFNR.
      LS_TD210-VALFR = IF_DATE.
      append LS_TD210 to LT_BUFFER.
    else.
***   Use Buffer
      LS_TD210 = LT_BUFFER[ WERKS = IF_WERKS
                            TDCUT = IF_TDCUT
                            LIFNR = IF_LIFNR
                            VALFR = IF_DATE ].
    endif.

***--------------------------------------------------------------------------------------
*** Calculate Price Factor based on Rule Length
    check LS_TD210-PRICP_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_RULEN-RULEN
                                                        IF_CALCV_UOM_1 = IS_RULEN-RULEN_UOM
                                                        IF_CALCV_2     = LS_TD210-PRICP
                                                        IF_CALCV_UOM_2 = LS_TD210-PRICP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_FACTOR ).
*** Calculate Estimated Tool Costs
    RS_TCEST = value #( TCEST      = LS_TD210-PRICE * LF_FACTOR
                        TCEST_CURR = LS_TD210-PRICE_CURR ).

  endmethod.
  method GET_INSTANCE_TOOL_DCT.

    data:  LS_INSTANCE type YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
ENHANCEMENT-POINT GET_INSTANCE_TOOL_DCT SPOTS ZVCXI_PXSS_ES_CUST_TOOL_DCT .

          RR_INSTANCE->LOAD_BY_MM( ).
        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
