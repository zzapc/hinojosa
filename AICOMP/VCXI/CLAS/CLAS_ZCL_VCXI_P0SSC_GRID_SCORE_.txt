
class ZCL_VCXI_P0SSC_GRID_SCORE definition
  public
  inheriting from ZCL_VCXI_P0SSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_COP type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .

  methods CHANGE_STYLE_SCORE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_SCORE
    importing
      !IT_PRSTY_SCORE type ZVCXI_P0SSC_TT_PRSTY_SCORE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SSC_GRID_SCORE definition
class ZCL_VCXI_P0SSC_GRID_SCORE implementation.
method CHANGE_STYLE_SCORE.

*** Set Part of Box = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BOXPA'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Panel Orientation = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PANOR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Score Categroy = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CSCOR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Score Number = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NSCOR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Element ID = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IELEM'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Numerator = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMN'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Denominator = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMD'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Folding Degree = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FODEG'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Flap Indicator = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FLAIN'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_PRSTY.
    catch CX_SY_MOVE_CAST_ERROR.
*** Product Style Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_P0SSC'
          IF_MSGNO = '101' ).
  endtry.

  move 'Scores'(001) to ME->F_DESCR.

  check ME->R_PRSTY is bound.
  ME->F_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

endmethod.
method DELETE_SCORE.

  data:  LS_PRSTY_SCORE  type          ZVCXI_P0SSC_S_PRSTY_SCORE.

*** Process Result
  loop at IT_PRSTY_SCORE into LS_PRSTY_SCORE.

*** Delete Product Type
    ME->R_PRSTY->DELETE_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).

  endloop.

endmethod.
method GET_FIELDCAT.

  data:  LF_LOCKED          type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
  LF_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'TPRST' or 'PRSTY' or 'T_STYL' or 'INIT_KEY'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'IELEM'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'ELEMN' or 'ELEMD' or 'FODEG'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'FLAIN'.      "Flap Indicator
        move 10 to <S_FCAT>-OUTPUTLEN.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'FSLIN'.      "Slot Indicator
        <S_FCAT>-CHECKBOX = ABAP_TRUE.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'TSCOR'.      "Default Score Type
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_PRSTY_SCORE       type          ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_PRSTY_SCORE_GRID  type          ZVCXI_P0SSC_S_PRSTY_SCORE_GRID.
  data:          LT_SORT              type          ABAP_SORTORDER_TAB.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <S_SORT>             type          ABAP_SORTORDER.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get Product Style - Score Entries
  loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
    clear: LS_PRSTY_SCORE_GRID.

    move-corresponding LS_PRSTY_SCORE to LS_PRSTY_SCORE_GRID.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_SCORE( changing CT_STYL = LS_PRSTY_SCORE_GRID-T_STYL ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_PRSTY_SCORE_GRID to <S_DATA>.

  endloop.

***------------------------------------------------------------------------------------------------
*** Dynamic Sort
  append initial line to LT_SORT assigning <S_SORT>.
  move 'BOXPA'   to <S_SORT>-NAME.
  append initial line to LT_SORT assigning <S_SORT>.
  move 'PANOR'   to <S_SORT>-NAME.
  append initial line to LT_SORT assigning <S_SORT>.
  move 'CSCOR'   to <S_SORT>-NAME.
  move ABAP_TRUE to <S_SORT>-DESCENDING.
  append initial line to LT_SORT assigning <S_SORT>.
  move 'NSCOR'   to <S_SORT>-NAME.

  sort <T_DATA> by (LT_SORT).

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
  method HANDLE_DATA_CHANGED.

    data: LF_IELEM       type ZVCXI_P0SS_IELEM,
          LF_TSCOR       type ZVCXI_P0SS_TSCOR.
    data: LS_GOOD_CELLS  type LVC_S_MODI.
    data: LR_CX_CKX      type ref to /VCXI/CX_CKX.


    try.

        SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                              E_ONF4          = E_ONF4
                                              E_ONF4_BEFORE   = E_ONF4_BEFORE
                                              E_ONF4_AFTER    = E_ONF4_AFTER
                                              E_UCOMM         = E_UCOMM ).

        loop at ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS.
          case LS_GOOD_CELLS-FIELDNAME.
***--------------------------------------------------------------------------------------
            when 'IELEM'.
              check LS_GOOD_CELLS-VALUE is not initial.
              select single IELEM
                     from ZVCXI_P0S_TC320
                     into LF_IELEM
                    where IELEM = LS_GOOD_CELLS-VALUE.

***           Add Protocol - Please maintain existing Element ID.
              check SY-SUBRC ne 0.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                             I_MSGTY     = 'E'
                                                             I_MSGNO     = '090'
                                                             I_FIELDNAME = LS_GOOD_CELLS-FIELDNAME
                                                             I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).
              ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

***--------------------------------------------------------------------------------------
            when 'TSCOR'.
              check LS_GOOD_CELLS-VALUE is not initial.
              select single TSCOR
                     from ZVCXI_P0S_TC360
                     into LF_TSCOR
                    where TSCOR = LS_GOOD_CELLS-VALUE.

***           Add Protocol - Please maintain existing Score Type.
              check SY-SUBRC ne 0.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                             I_MSGTY     = 'E'
                                                             I_MSGNO     = '091'
                                                             I_FIELDNAME = LS_GOOD_CELLS-FIELDNAME
                                                             I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).
              ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

          endcase.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_PRSTY_SCORE       type          ZVCXI_P0SSC_S_PRSTY_SCORE.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PRSTY_SCORE.
        ME->R_PRSTY->UPDATE_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_PRSTY->IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add, Copy and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add Scores'(002)          to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.
      clear LS_TOOLBAR.

      move C_FUNC_COP                 to LS_TOOLBAR-FUNCTION.
      move 'Copy Scores'(004)         to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_COPY_OBJECT           to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD.

  data: LF_RETURN  type ABAP_BOOL,
        LF_BOXPA   type ZVCXI_P0SS_BOXPA,
        LF_PANOR   type ZVCXI_P0SS_PANOR,
        LF_CSCOR_L type ZVCXI_P0SS_CSCOR,
        LF_CSCOR_W type ZVCXI_P0SS_CSCOR,
        LF_DESCR   type /VCXI/CKX_DESCR,
        LF_NSCOR_L type ZVCXI_P0SS_NSCOR,
        LF_NSCOR_W type ZVCXI_P0SS_NSCOR,
        LF_EXIT    type ABAP_BOOL.
  data: LT_SVAL             type standard table of SVAL.
  data: LS_PRSTY_SCORE      type                   ZVCXI_P0SSC_S_PRSTY_SCORE.
  data: LR_CX_CKX           type ref to            /VCXI/CX_CKX.
  field-symbols: <S_FIELD>  type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME = 'BOXPA'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME  = 'PANOR'.
  <S_FIELD>-NOVALUEHLP  = 'S'.

*** Scores for Length Dimension
  LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = 'L'
                                                importing EF_DESCR = LF_DESCR ).
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME = 'NSCOR_L'.
  <S_FIELD>-FIELDTEXT = |# { LF_DESCR }|.

*** Scores for Width Dimension
  LF_CSCOR_W = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = 'W'
                                                importing EF_DESCR = LF_DESCR ).
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME = 'NSCOR_W'.
  <S_FIELD>-FIELDTEXT = |# { LF_DESCR }|.

***----------------------------------------------------------------------
  do.
    try.
        clear: LF_BOXPA, LF_PANOR, LF_NSCOR_L, LF_NSCOR_W.

        call function 'POPUP_GET_VALUES'
          exporting
            POPUP_TITLE     = 'Add Scores - Define Defaults'(100)
          importing
            RETURNCODE      = LF_RETURN
          tables
            FIELDS          = LT_SVAL
          exceptions
            ERROR_IN_FIELDS = 1
            others          = 2.
        if SY-SUBRC ne 0 or
          LF_RETURN eq 'A'.
          clear LT_SVAL.
          LF_EXIT = ABAP_TRUE.
          exit.
        endif.

        check LT_SVAL is not initial.
        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'BOXPA'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_BOXPA.
        endif.

        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'PANOR'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_PANOR.
        endif.

        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'NSCOR_L'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_NSCOR_L.
        endif.

        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'NSCOR_W'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_NSCOR_W.
        endif.

***     Check if Panel Orientation is correct
        select single PANOR from ZVCXI_P0S_TC310
               into LF_PANOR where PANOR = LF_PANOR.
        if SY-SUBRC ne 0.
          clear: LF_PANOR.
        endif.


        if LF_PANOR is initial.
***       Please define an existing Panel Orientation.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_P0SSC'
                                                IF_MSGNO = '070' ).

        else.
          if LF_NSCOR_L is initial or
             LF_NSCOR_W is initial.
***         Please define at leaste one Number of Scores per Category.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_P0SSC'
                                                  IF_MSGNO = '071' ).
          else.
            exit.
          endif.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
        exit.
    endtry.

  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  move-corresponding ME->R_PRSTY->S_PRSTY     to  LS_PRSTY_SCORE.
  move LF_BOXPA                               to  LS_PRSTY_SCORE-BOXPA.
  move LF_PANOR                               to  LS_PRSTY_SCORE-PANOR.
  move '1'                                    to: LS_PRSTY_SCORE-ELEMN,
                                                  LS_PRSTY_SCORE-ELEMD.
  move '90'                                   to  LS_PRSTY_SCORE-FODEG.

*** Create Scores on Length
  clear: LS_PRSTY_SCORE-NSCOR.
  LS_PRSTY_SCORE-CSCOR = LF_CSCOR_L.
  do LF_NSCOR_L times.
    add 1 to LS_PRSTY_SCORE-NSCOR.
*** Add Score
    ME->R_PRSTY->ADD_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).
  enddo.

*** Create Scores on Width
  clear: LS_PRSTY_SCORE-NSCOR.
  LS_PRSTY_SCORE-CSCOR = LF_CSCOR_W.
  do LF_NSCOR_W times.
    add 1 to LS_PRSTY_SCORE-NSCOR.
*** Add Score
    ME->R_PRSTY->ADD_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).
  enddo.

endmethod.
method HANDLE_UC_COPY.

  data:          LF_RETURN           type                   ABAP_BOOL,
                 LF_EXIT             type                   ABAP_BOOL,
                 LF_BOXPA            type                   ZVCXI_P0SS_BOXPA,
                 LF_PANOR            type                   ZVCXI_P0SS_PANOR.
  data:          LT_CELL             type                   LVC_T_CELL,
                 LT_ROW              type                   LVC_T_ROW,
                 LT_SVAL             type standard table of SVAL,
                 LT_PRSTY_SCORE      type                   ZVCXI_P0SSC_TT_PRSTY_SCORE.
  data:          LS_PRSTY_SCORE      type                   ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_CELL             type                   LVC_S_CELL,
                 LS_ROW              type                   LVC_S_ROW.
  data:          LR_CX_CKX           type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard          table,
                 <S_FIELD>           type                   SVAL,
                 <S_PRSTY_SCORE>     type                   ZVCXI_P0SSC_S_PRSTY_SCORE,
                 <S_DATA>            type                   any.

*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Get Selected Joint Type
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_SCORE assigning <S_PRSTY_SCORE>.
    move-corresponding <S_DATA> to <S_PRSTY_SCORE>.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_SCORE assigning <S_PRSTY_SCORE>.
    move-corresponding <S_DATA> to <S_PRSTY_SCORE>.
  endloop.


  check LT_PRSTY_SCORE is not initial.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME = 'BOXPA'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_P0SSC_S_PRSTY_SCORE_DEF'.
  <S_FIELD>-FIELDNAME  = 'PANOR'.
  <S_FIELD>-NOVALUEHLP  = 'S'.

  do.
    try.
        clear: LF_BOXPA, LF_PANOR.

        call function 'POPUP_GET_VALUES'
          exporting
            POPUP_TITLE     = 'Copy Scores - Define Panel Orientation (and BoxPart)'(101)
          importing
            RETURNCODE      = LF_RETURN
          tables
            FIELDS          = LT_SVAL
          exceptions
            ERROR_IN_FIELDS = 1
            others          = 2.
        if SY-SUBRC ne 0 or
          LF_RETURN eq 'A'.
          clear LT_SVAL.
          LF_EXIT = ABAP_TRUE.
          exit.
        endif.

        check LT_SVAL is not initial.
        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'BOXPA'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_BOXPA.
        endif.

        read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'PANOR'.
        if SY-SUBRC = 0.
          move <S_FIELD>-VALUE to LF_PANOR.
        endif.

***     Check if Panel Orientation is correct or ne old one
        select single PANOR from ZVCXI_P0S_TC310
        into LF_PANOR where PANOR = LF_PANOR.
        if SY-SUBRC ne 0.
          clear: LF_PANOR.
        endif.

        loop at LT_PRSTY_SCORE into LS_PRSTY_SCORE.
          check LS_PRSTY_SCORE-PANOR eq LF_PANOR and
                LS_PRSTY_SCORE-BOXPA eq LF_BOXPA.
          clear: LF_PANOR, LF_BOXPA.
        endloop.

        if LF_PANOR is initial.
***       Please define an existing or different to old Panel Orientation.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_P0SSC'
                                                IF_MSGNO = '071' ).

        else.
          exit.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
        exit.
    endtry.

  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

*** Copy all Scores
  loop at LT_PRSTY_SCORE into LS_PRSTY_SCORE.
    move LF_PANOR to LS_PRSTY_SCORE-PANOR.
    move LF_BOXPA to LS_PRSTY_SCORE-BOXPA.

*** Add Score
    ME->R_PRSTY->ADD_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).

  endloop.


endmethod.
method HANDLE_UC_DELETE.

  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_PRSTY_SCORE  type          ZVCXI_P0SSC_TT_PRSTY_SCORE.
  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  field-symbols: <T_DATA>        type standard table,
                 <S_PRSTY_SCORE> type          ZVCXI_P0SSC_S_PRSTY_SCORE,
                 <S_DATA>        type          any.

*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete Joint Type
  if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
*** No Row Selected. Please Select all Row's you wanna Delete.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '002'.
  endif.

*** Get Selected Joint Type
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_SCORE assigning <S_PRSTY_SCORE>.
    move-corresponding <S_DATA> to <S_PRSTY_SCORE>.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_SCORE assigning <S_PRSTY_SCORE>.
    move-corresponding <S_DATA> to <S_PRSTY_SCORE>.
  endloop.

*** Delete Selected Joint Types
  ME->DELETE_SCORE( IT_PRSTY_SCORE = LT_PRSTY_SCORE ).

endmethod.
method HANDLE_USER_COMMAND.

  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      case E_UCOMM.

        when C_FUNC_ADD.
          ME->HANDLE_UC_ADD( ).

        when C_FUNC_DEL.
          ME->HANDLE_UC_DELETE( ).

        when C_FUNC_COP.
          ME->HANDLE_UC_COPY( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
