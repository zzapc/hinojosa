
class ZCL_VCXI_XCSU_PR_SHIPMGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_ATTID_PMATY_PALLET type /VCXI/VKS_ATTID value 'PMATY_PALLET' ##NO_TEXT.
  constants C_ATTID_SHUNT_BUNDLE type /VCXI/VKS_ATTID value 'SHUNT_BUNDLE' ##NO_TEXT.
  constants C_ATTID_SHUTY_CONTAINER type /VCXI/VKS_ATTID value 'SHUTY_CONTAINER' ##NO_TEXT.
  constants C_ATTID_SHUTY_GROUP type /VCXI/VKS_ATTID value 'SHUTY_GROUP' ##NO_TEXT.
  constants C_ATTID_SHUTY_HU type /VCXI/VKS_ATTID value 'SHUTY_HU' ##NO_TEXT.
  constants C_ATTID_SHUTY_STACK type /VCXI/VKS_ATTID value 'SHUTY_STACK' ##NO_TEXT.
  constants C_ATTID_SHUTY_UNIT type /VCXI/VKS_ATTID value 'SHUTY_UNIT' ##NO_TEXT.
  constants C_ATTID_TRUCK_DIMID type /VCXI/VKS_ATTID value 'TRUCK_DIMID' ##NO_TEXT.
  constants C_ATTID_UNIT_MARGIN_UOM type /VCXI/VKS_ATTID value 'UNIT_MARGIN_UOM' ##NO_TEXT.
  constants C_ATTID_UNIT_MARGIN_VALUE type /VCXI/VKS_ATTID value 'UNIT_MARGIN_VALUE' ##NO_TEXT.
  constants C_IEVNT_O_CPACK_CHANGED type /VCXI/VKSC_IEVNT value 'CPACK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHSCH_CHANGED type /VCXI/VKSC_IEVNT value 'SHSCH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHSCH_RESET type /VCXI/VKSC_IEVNT value 'SHSCH_RESET' ##NO_TEXT.
  constants C_IEVNT_O_WERKS_CHANGED type /VCXI/VKSC_IEVNT value 'WERKS_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XCS_SHIPMGR type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSU_SHIPMGR' ##NO_TEXT.
  constants C_PARID_CPACK type /VCXI/VKS_PARID value 'ZVCXI_XC_CPACK' ##NO_TEXT.
  data F_RESET_SHSCH type ABAP_BOOL .
  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU read-only .

  methods ADD_SHUNT
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_CPACK
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_CPACK) type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_SHSCH
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods FILTER_BY_SHUNT
    importing
      !IF_ATTID_SHUNT type /VCXI/VKS_ATTID
      !IR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE optional
    changing
      !CT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods FILTER_BY_SHUTY
    importing
      !IF_ATTID_SHUTY type /VCXI/VKS_ATTID
      !IR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE optional
    changing
      !CT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AGGR_ADJ_LIMIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_LIMIT) type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_BASE_DIMEN
  abstract
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_BASE_PRQTY
  abstract
    returning
      value(RS_PRQTY) type ZVCXI_XCSU_S_PRQTY
    raising
      /VCXI/CX_CKX .
  methods GET_CNTXT
    returning
      value(RF_CNTXT) type ZVCXI_XCS_CNTXT
    raising
      /VCXI/CX_CKX .
  methods GET_CONSC_BY_SHUTY_PMATY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_CONSC) type ZVCXI_XCSU_CONSC
    raising
      /VCXI/CX_CKX .
  methods GET_CPACK
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CPACK) type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  methods GET_CPACK_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DFLT_SHIPU
    returning
      value(RR_DFLT_SHIPU) type ref to ZCL_VCXI_XCSU_DFLT_SHIPU
    raising
      /VCXI/CX_CKX .
  methods GET_DIMEN_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_KUNWE
    returning
      value(RF_KUNWE) type KUNWE
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_LIMIT) type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_NEXT_SHIPUNIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_NEXT_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_PACKMAT_BY_SHUTY_PMATY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RF_PACKP) type ZVCXI_XCSU_PACKP
    raising
      /VCXI/CX_CKX .
  methods GET_PALOP
    returning
      value(RR_BL_PALOP) type ref to ZCL_VCXI_XCSU_BL_PALOP
    raising
      /VCXI/CX_CKX .
  methods GET_PMATN_BY_SHUTY_PMATY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_PMATN) type ZVCXI_XCSU_PMATN
    raising
      /VCXI/CX_CKX .
  methods GET_PREV_DIMEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_PREV_SHIPUNIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PREV_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PREV_TBQTY
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RS_TBQTY) type ZVCXI_XCSU_S_TBQTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRQTY_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RS_PRQTY) type ZVCXI_XCSU_S_PRQTY
    raising
      /VCXI/CX_CKX .
  methods GET_SHIPUNIT_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ET_SHSCH type ZVCXI_XCSU_TT_SHSCH
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RF_SHUNT) type ZVCXI_XCSU_SHUNT
    raising
      /VCXI/CX_CKX .
  methods GET_TBQTY_BY_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RS_TBQTY) type ZVCXI_XCSU_S_TBQTY
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_BASE_SHIPUNIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_BASE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods RELAOD_DEF
    raising
      /VCXI/CX_CKX .
  methods SET_CPACK
    importing
      !IF_CPACK type ZVCXI_XCSU_CPACK optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PALOP
    importing
      !IR_BL_PALOP type ref to ZCL_VCXI_XCSU_BL_PALOP
      !IF_COPTI type ZVCXI_XCSU_COPTI
    raising
      /VCXI/CX_CKX .
  methods SET_SHSCH
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_DIMID_DIMLESS type DIMID value 'AAAADL' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DETAILS type /VCXI/VKSC_IEVNT value 'RECALC_DETAILS' ##NO_TEXT.
  constants C_IEVNT_I_REDET_DFLT type /VCXI/VKSC_IEVNT value 'REDET_DFLT' ##NO_TEXT.
  constants C_IEVNT_I_RELOAD_DFLT type /VCXI/VKSC_IEVNT value 'RELOAD_DFLT' ##NO_TEXT.
  constants C_IEVNT_I_REQUEST_RECALC_UTIL type /VCXI/VKSC_IEVNT value 'REQUEST_RECALC_UTIL' ##NO_TEXT.
  constants C_IEVNT_I_RESET_SHSCH type /VCXI/VKSC_IEVNT value 'RESET_SHSCH' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_DFLT_CHANGED type /VCXI/VKSC_IEVNT value 'DFLT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RECALC_UTIL_REQ type /VCXI/VKSC_IEVNT value 'RECALC_UTIL_REQUESTED' ##NO_TEXT.
  constants C_IEVNT_O_REQ_RECALC_SHIPUNIT type /VCXI/VKSC_IEVNT value 'REQUEST_RECALC_SHIPUNIT_DETAIL' ##NO_TEXT.
  data F_DIMID type DIMID .
  data R_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU .
  data S_COMOD type ZVCXI_XCSU_S_COMOD .

  methods CALC_SHIPUNIT_DETAILS
    raising
      /VCXI/CX_CKX .
  methods CHECK_BASE_DIMEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_CPACK
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_DFLT_SHIPU
    returning
      value(RF_FIT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHSCH
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHUTY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CLEAR_FOR_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_DFLT_APPDATA
    returning
      value(RR_APPDATA) type ref to OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_DFLT_DEF
    returning
      value(RT_SHUTY_DFLT_DEF) type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DETAILS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REDET_DFLT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RELOAD_DFLT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REQUEST_RECALC_UTIL
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RESET_SHSCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods MERGE_NEXT_ADJ_LIMIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_LIMIT type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods SET_MODEL_SETTINGS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_SHIPMGR definition
class ZCL_VCXI_XCSU_PR_SHIPMGR implementation.
method ADD_SHUNT.

  data:  LS_PRVDR_DEF     type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF     type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***------------------------------------------------------------------------------------------------
*** Find ID of Shipping Unit
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  if SY-SUBRC ne 0.
*** Provider Definition for Shipping Unit not found.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSU'
                                          IF_MSGNO = '116' ).
  endif.

***------------------------------------------------------------------------------------------------
*** Create Element
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
  check RR_GATE is bound.

*** Set InUse
  RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  try.
      move RR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      check LR_PR_SHIPUNIT is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***------------------------------------------------------------------------------------------------
*** Set Shipping Unit Type
  LR_PR_SHIPUNIT->SET_SHUTY( IF_SHUTY = IF_SHUTY
                             IF_SETBY = IF_SETBY ).

*** Set Shipping Unit
  if IF_SHUNT is not initial.
    LR_PR_SHIPUNIT->SET_SHUNT( IF_SHUNT = IF_SHUNT
                               IF_SETBY = IF_SETBY ).
  endif.

endmethod.
method CALC_SHIPUNIT_DETAILS.

*** Do not start Calculation Directly -> Set Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQ_RECALC_SHIPUNIT ).

endmethod.
method CALL_SHLP_CPACK.

  data: LF_WERKS   type WERKS_D,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL,
        LF_SHSCH   type ZVCXI_XCSU_SHSCH.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  LF_WERKS = ME->GET_WERKS( ).
  LF_SHSCH = ME->GET_SHSCH( ).

  RF_CPACK = ZCL_VCXI_XCSU_SHLP_CPACK=>CALL_SHLP( IF_WERKS   = LF_WERKS
                                                  IF_DISPLAY = LF_DISPLAY
                                                  IF_SHSCH   = LF_SHSCH ).

endmethod.
  method CALL_SHLP_SHSCH.

    data: LF_LOCKED  type /VCXI/CKX_LOCKED,
          LF_DISPLAY type ABAP_BOOL.

    move IF_DISPLAY to LF_DISPLAY.

    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to LF_DISPLAY.
    endif.

    RF_SHSCH = ZCL_VCXI_XCSU_SHLP_SHSCH=>CALL_SHLP( IS_CMPRK   = ME->S_COMOD-S_CMPRK
                                                    IF_CNTXT   = ME->GET_CNTXT( )
                                                    IF_DISPLAY = LF_DISPLAY ).

  endmethod.
method CHECK_BASE_DIMEN.

*** RF_SUBRC = 0 => All Base Dimension Values are maintained.
*** RF_SUBRC = 1 => Check Dimension Base Dimension: &1. Dimension Value is not maintained.

  data:          LT_DIMEN type ZVCXI_XCSU_TT_DIMEN.
  data:          LS_DIMEN type ZVCXI_XCSU_S_DIMEN.

*** Start Positiv
  RF_SUBRC = 0.

  LT_DIMEN = ME->GET_BASE_DIMEN( ).

**********************************************************************
*** Check to make sure that all Base dimensions have been maintained
  loop at LT_DIMEN into LS_DIMEN.
    if LS_DIMEN-DIMVA is initial.
      if IR_MESSAGE is bound.
***     Check Dimension Base Dimension: &1. Dimension Value is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                 IF_MSGTY = 'W'
                                 IF_MSGNO = '111'
                                 IF_MSGV1 = LS_DIMEN-DIMEN ).
      endif.
      RF_SUBRC = 1.
    endif.
  endloop.

endmethod.
method CHECK_CPACK.
*** RF_SUBRC = 0 => Packaging Code is not maintained.
*** RF_SUBRC = 1 => Packaging Code is maintained and valid.
*** RF_SUBRC = 2 => Packaging Code is not valid.
*** RF_SUBRC = 3 => Packaging Code is not valid for Plant &1.
*** RF_SUBRC = 4 => Packaging Code is not valid for Sipping Scheme &1.

  data: LF_WERKS        type WERKS_D,
        LF_CPACK        type ZVCXI_XCSU_CPACK,
        LF_SHSCH        type ZVCXI_XCSU_SHSCH.
  data: LS_CPACK_WERKS  type ZVCXI_XCSUC_S_CPACK_WERKS.
  data: LT_CPACK        type ZVCXI_XCSU_TT_CPACK.

*** Start Positiv
  RF_RETURN = 0.

  LF_CPACK = ME->GET_CPACK( ).

  check LF_CPACK is not initial.
  LF_WERKS = ME->GET_WERKS( ).
  RF_RETURN = 2.

  loop at ZCL_VCXI_XCSUC_CPACK=>T_CPACK_WERKS into LS_CPACK_WERKS
  where CPACK = LF_CPACK.
*** Packaging Code Exists but maybe not at Plant Level
    RF_RETURN = 3.
    check LS_CPACK_WERKS-WERKS = LF_WERKS or
          LS_CPACK_WERKS-WERKS is initial.
*** Packaging Code is valid for Plant
    RF_RETURN = 1.
    exit.
  endloop.

  check RF_RETURN eq 1.
  check ME->R_CUST_SHIPU is bound.
  LF_SHSCH = ME->GET_SHSCH( ).

*** Check if Packaging Code Contains Shipping Unit/Type
  LT_CPACK = ME->R_CUST_SHIPU->GET_CPACK_FOR_SHSCH( IF_WERKS = LF_WERKS
                                                    IF_SHSCH = LF_SHSCH ).
  read table LT_CPACK with key CPACK = LF_CPACK transporting no fields.
  check SY-SUBRC ne 0.
  RF_RETURN = 4.

endmethod.
method CHECK_DFLT_SHIPU.

  data:  LF_KUNNR_WE      type        KUNNR,
         LF_KUNNR_AG      type        KUNNR,
         LF_VKORG         type        VKORG,
         LF_VTWEG         type        VTWEG,
         LF_SPART         type        SPART,
         LF_DCONF         type        /VCXI/VKCR_DCONF,
         LF_WERKS         type        WERKS_D,
         LF_CMATN         type        /VCXI/VKC_CMATN,
         LF_PRFID         type        /VCXI/VKC_PRFID,
         LF_CNTXT         type        ZVCXI_XCS_CNTXT,
         LF_CPACK         type        ZVCXI_XCSU_CPACK,
         LF_SHSCH         type        ZVCXI_XCSU_SHSCH.
  data:  LR_APPDATA_VCXI  type ref to /VCXI/CL_VKSR_APPDATA,
         LR_APPDATA       type ref to ZCL_VCXI_XCS_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA_VCXI.
  try.
      move LR_APPDATA_VCXI ?to LR_APPDATA.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_APPDATA.
  endtry.
  check LR_APPDATA is bound.

***--------------------------------------------------------------------------------------
*** Get Default Customizing
  LF_CPACK = ME->GET_CPACK( ).
  LF_SHSCH = ME->GET_SHSCH( ).

*** Get Ship to Customer Data
  move LR_APPDATA->S_KNA1_WE-KUNNR to LF_KUNNR_WE.
  move LR_APPDATA->S_KNVV_WE-VKORG to LF_VKORG.
  if LF_VKORG is initial.
    move LR_APPDATA->S_KNVV_AG-VKORG to LF_VKORG.
  endif.

  move LR_APPDATA->S_KNVV_WE-VTWEG to LF_VTWEG.
  if LF_VTWEG is initial.
    move LR_APPDATA->S_KNVV_AG-VTWEG to LF_VTWEG.
  endif.

  move LR_APPDATA->S_KNVV_WE-SPART to LF_SPART.
  if LF_SPART is initial.
    move LR_APPDATA->S_KNVV_AG-SPART to LF_SPART.
  endif.

*** Get Sold to Customer Data
  move LR_APPDATA->S_KNA1_AG-KUNNR to LF_KUNNR_AG.

*** Get Date and Plant
  move LR_APPDATA->F_DCONF to LF_DCONF.
  move LR_APPDATA->F_WERKS to LF_WERKS.

*** Get Config Data and Context
  move LR_APPDATA->S_CMPRK-CMATN to LF_CMATN.
  move LR_APPDATA->S_CMPRK-PRFID to LF_PRFID.
  move ME->GET_CNTXT( )          to LF_CNTXT.

  if ME->R_DFLT_SHIPU->F_KUNNR_WE               ne LF_KUNNR_WE or
     ME->R_DFLT_SHIPU->F_KUNNR_AG               ne LF_KUNNR_AG or
     ME->R_DFLT_SHIPU->F_VKORG                  ne LF_VKORG or
     ME->R_DFLT_SHIPU->F_VTWEG                  ne LF_VTWEG or
     ME->R_DFLT_SHIPU->F_SPART                  ne LF_SPART or
     ME->R_DFLT_SHIPU->F_DCONF                  ne LF_DCONF or
     ME->R_DFLT_SHIPU->F_WERKS                  ne LF_WERKS or
     ME->R_DFLT_SHIPU->S_DFLT_SHIP_MGR-SHSCH    ne LF_SHSCH or
     ME->R_DFLT_SHIPU->S_DFLT_SHIP_MGR-CPACK    ne LF_CPACK or
     ME->R_DFLT_SHIPU->F_CMATN                  ne LF_CMATN or
     ME->R_DFLT_SHIPU->F_PRFID                  ne LF_PRFID or
     ME->R_DFLT_SHIPU->F_CNTXT                  ne LF_CNTXT.
    clear: ME->R_DFLT_SHIPU.
  else.
    move ABAP_TRUE to RF_FIT.
  endif.

endmethod.
method CHECK_SHSCH.
*** RF_SUBRC = 0 => Shipping Scheme is maintained.
*** RF_SUBRC = 1 => Shipping Scheme is not maintained.
*** RF_SUBRC = 2 => Shipping Scheme is not valid.
*** RF_SUBRC = 3 => Shipping & Unitizing Customizing is not instantiated.

  data: LF_SHSCH type ZVCXI_XCSU_SHSCH.
  data: LT_SHSCH type ZVCXI_XCSU_TT_SHSCH.

*** Start Positiv
  RF_SUBRC = 0.

***--------------------------------------------------------------------------------------
*** Check Shipping Scheme is maintained.
  LF_SHSCH = ME->GET_SHSCH( importing ET_SHSCH = LT_SHSCH ).

  if LF_SHSCH is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping Scheme is valid
  read table LT_SHSCH with key SHSCH = LF_SHSCH transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

endmethod.
method CHECK_SHUTY.
*** RF_SUBRC = 0 => All Shipping Unit Types in right Order and Quantity maintained.
*** RF_SUBRC = 1 => Shipping Unit Type &1 allowed count: &2 current count: &3.
*** RF_SUBRC = 2 => Shipping Unit Type &1 not allowed for Shipping Unit &2.
*** RF_SUBRC = 3 => Shipping Unit Type &1 SeqID &2 is not in right Order.
*** RF_SUBRC = 4 => Mandatory Shipping Unit Type &1 not maintained.
*** RF_SUBRC = 5 => Shipping & Unitizing Customizing is not instantiated.

  data:          LF_SHSCH          type        ZVCXI_XCSU_SHSCH,
                 LF_COUNT          type        INT4,
                 LF_NUMC           type        NUMC3,
                 LF_NUMC_COUNT     type        NUMC3,
                 LF_SHUTY          type        ZVCXI_XCSU_SHUTY,
                 LF_INDEX          type        INT4.
  data:          LS_SHUTY_SET      type        ZVCXI_XCS_TC162.
  data:          LT_POS_SHUTY      type        ZVCXI_XCSU_TT_POS_SHUTY,
                 LT_SHUTY_SET      type        ZVCXI_XCSU_TT_SHSCH_SHUTY,
                 LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT    type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
  field-symbols: <S_POS_SHUTY>     type        ZVCXI_XCSU_S_POS_SHUTY,
                 <S_SHUTY_SET>     type        ZVCXI_XCS_TC162.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 5.
    if IR_MESSAGE is bound.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    endif.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check all Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
*** Save Shipping Unit Type.
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_PR_SHIPUNIT is bound.
    append initial line to LT_POS_SHUTY assigning <S_POS_SHUTY>.
    <S_POS_SHUTY>-POSID = LR_GATE->GET_POSID( ).
    <S_POS_SHUTY>-SHUTY = LR_PR_SHIPUNIT->GET_SHUTY( ).
  endloop.

  LF_SHSCH = ME->GET_SHSCH( ).
  LT_SHUTY_SET = ME->R_CUST_SHIPU->GET_SHUTY_SET_FOR_SHSCH( IF_SHSCH = LF_SHSCH ).

***--------------------------------------------------------------------------------------
*** check to make sure that minimum and maximum requirements have been satisfied
  loop at LT_SHUTY_SET assigning <S_SHUTY_SET>
                       where MNCNT gt 0.
    read table LT_POS_SHUTY with key SHUTY = <S_SHUTY_SET>-SHUTY
                            transporting no fields.
    check SY-SUBRC ne 0.
    if IR_MESSAGE is bound.
***   Mandatory Shipping Unit Type &1 not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '112'
                               IF_MSGV1 = <S_SHUTY_SET>-SHUTY ).
    endif.
    RF_SUBRC = 4.
  endloop.

  check RF_SUBRC = 0.

  loop at LT_POS_SHUTY assigning <S_POS_SHUTY>.
    if SY-TABIX eq 1.
      move SY-TABIX to LF_INDEX.
      move 1 to LF_COUNT.
    else.
      if <S_POS_SHUTY>-SHUTY ne LF_SHUTY.
***     Check if Previous Count was okay for Shipping Unit Type
        loop at LT_SHUTY_SET assigning <S_SHUTY_SET> where SHUTY eq LF_SHUTY.
          check SY-INDEX ge LF_INDEX.

          if LF_COUNT lt <S_SHUTY_SET>-MNCNT.
            clear: LF_NUMC, LF_NUMC_COUNT.
            move <S_SHUTY_SET>-MNCNT to LF_NUMC.
            write LF_COUNT to LF_NUMC_COUNT.
            if IR_MESSAGE is bound.
***           Shipping Unit Type &1 allowed count: &2 current count: &3.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                       IF_MSGTY = 'W'
                                       IF_MSGNO = '103'
                                       IF_MSGV1 = <S_SHUTY_SET>-SHUTY
                                       IF_MSGV2 = LF_NUMC
                                       IF_MSGV3 = LF_NUMC_COUNT ).
            endif.
            RF_SUBRC = 1.
          endif.

          if LF_COUNT gt <S_SHUTY_SET>-MXCNT.
            clear: LF_NUMC, LF_NUMC_COUNT.
            write <S_SHUTY_SET>-MNCNT to LF_NUMC.
            write LF_COUNT to LF_NUMC_COUNT.
            if IR_MESSAGE is bound.
***           Shipping Unit Type &1 allowed count: &2 current count: &3.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                       IF_MSGTY = 'W'
                                       IF_MSGNO = '103'
                                       IF_MSGV1 = <S_SHUTY_SET>-SHUTY
                                       IF_MSGV2 = LF_NUMC
                                       IF_MSGV3 = LF_NUMC_COUNT ).
            endif.

            RF_SUBRC = 1.
          endif.
          exit.

        endloop.
        add 1 to LF_INDEX.
        move 1 to LF_COUNT.
      else.
        add 1 to LF_COUNT.
      endif.
    endif.

*** Save Prev. Shipping Unit Type
    move <S_POS_SHUTY>-SHUTY to LF_SHUTY.
  endloop.

  check RF_SUBRC = 0.
***--------------------------------------------------------------------------------------
*** Check to make sure that there are no Shipping Unit Types that are not permitted
  sort LT_POS_SHUTY by SHUTY.
  loop at LT_POS_SHUTY assigning <S_POS_SHUTY>.
    at new SHUTY.
      if <S_POS_SHUTY>-SHUTY is initial.
        continue.
      endif.
      read table LT_SHUTY_SET transporting no fields with key SHUTY = <S_POS_SHUTY>-SHUTY.
      if SY-SUBRC ne 0.
        clear: LF_NUMC.
        move SY-TABIX to LF_NUMC.
        if IR_MESSAGE is bound.
***       Shipping Unit Type &1 not allowed for Shipping Unit &2.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                   IF_MSGTY = 'W'
                                   IF_MSGNO = '104'
                                   IF_MSGV1 = <S_POS_SHUTY>-SHUTY
                                   IF_MSGV2 = LF_SHSCH ).
        endif.
        RF_SUBRC = 2.
      endif.
    endat.
  endloop.


  check RF_SUBRC = 0.
***--------------------------------------------------------------------------------------
*** Check to make sure Shipping Unit Types are in the correct sequence
*** First prepare set to make right sequence order
  sort LT_POS_SHUTY by POSID.
  delete adjacent duplicates from LT_POS_SHUTY comparing SHUTY.

*** -----------------------------------------------------------------------
*** Do check
  loop at LT_POS_SHUTY assigning <S_POS_SHUTY>.

    LF_INDEX = SY-TABIX.

    loop at LT_SHUTY_SET into LS_SHUTY_SET.
      if LS_SHUTY_SET-SHUTY ne <S_POS_SHUTY>-SHUTY.
        delete LT_SHUTY_SET.
      else.
        exit.
      endif.
    endloop.

    check LT_SHUTY_SET is initial.
    clear: LF_NUMC.
    move LF_INDEX to LF_NUMC.
    if IR_MESSAGE is bound.
***   Shipping Unit Type &1 SeqID &2 is not in right Order.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '105'
                               IF_MSGV1 = <S_POS_SHUTY>-SHUTY
                               IF_MSGV2 = LF_NUMC ).
    endif.
    RF_SUBRC = 3.
    exit.

  endloop.

endmethod.
method CLEAR_FOR_SHSCH.

  data:          LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Clear Shipping Units
  loop at LT_GATE into LR_GATE.
    check LR_GATE is bound.
    LR_GATE->DO_FREE( ).
  endloop.

  clear: ME->R_DFLT_SHIPU.

endmethod.
method CONSTRUCTOR.

  data: LF_SYSOM type /VCXI/VKS_SYSOM.
  data: LS_CMPRK type /VCXI/VKC_S_CMPRK.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Configuratin informations
  ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK
                                         EF_SYSOM = LF_SYSOM ).

  ME->S_COMOD-CMATN = LS_CMPRK-CMATN.
  ME->S_COMOD-PRFID = LS_CMPRK-PRFID.
  ME->S_COMOD-MSYST = LF_SYSOM.

endmethod.
method FILTER_BY_SHUNT.

  data:          LF_SHUNT         type        ZVCXI_XCSU_SHUNT.
  data:          LS_ATTRI         type        /VCXI/VKS_S_ATTRI.
  data:          LT_SHUNT         type        ZVCXI_XCSU_TT_SHUNT.
  data:          LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Get Requested Shipping Unit Type (by Attribute)
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = IF_ATTID_SHUNT ).
    catch /VCXI/CX_CKX.
      clear LS_ATTRI.
  endtry.

  if LS_ATTRI is not initial.
    condense LS_ATTRI-ATTVA no-gaps.
    split LS_ATTRI-ATTVA at ',' into table LT_SHUNT.
  endif.

*** Filter Gates by Shipping Unit
  loop at CT_GATE into LR_GATE.

*** Check next or previous gate
    if IR_GATE_NEXT is supplied.
      check ME->GET_NEXT_SHIPUNIT( IR_GATE = LR_GATE ) ne IR_GATE_NEXT.
      delete CT_GATE.
      continue.
    endif.

    if IR_GATE_PREV is supplied.
      check ME->GET_PREV_SHIPUNIT( IR_GATE = LR_GATE ) ne IR_GATE_PREV.
      delete CT_GATE.
      continue.
    endif.

*** Try to find right Shipping Unit
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        delete CT_GATE.
        continue.
    endtry.

*** Delete not relevant Shipping Units
    if LR_PR_SHIPUNIT is bound.
      move LR_PR_SHIPUNIT->GET_SHUNT( ) to LF_SHUNT.
      read table LT_SHUNT with key SHUNT = LF_SHUNT transporting no fields.
      if SY-SUBRC eq 0.
        continue.
      endif.
    endif.

    delete CT_GATE.

  endloop.

endmethod.
method FILTER_BY_SHUTY.

  data:          LF_SHUTY         type        ZVCXI_XCSU_SHUTY.
  data:          LS_ATTRI         type        /VCXI/VKS_S_ATTRI.
  data:          LT_SHUTY         type        ZVCXI_XCSU_TT_SHUTY.
  data:          LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


***----------------------------------------------------------------------------
*** Get Requested Shipping Unit Type (by Attribute)
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = IF_ATTID_SHUTY ).
    catch /VCXI/CX_CKX.
      clear LS_ATTRI.
  endtry.

  if LS_ATTRI is not initial.
    condense LS_ATTRI-ATTVA no-gaps.
    split LS_ATTRI-ATTVA at ',' into table LT_SHUTY.
  endif.


*** Filter Gates by Shipping Unit
  loop at CT_GATE into LR_GATE.

*** Check next or previous gate
    if IR_GATE_NEXT is supplied.
      check ME->GET_NEXT_SHIPUNIT( IR_GATE = LR_GATE ) ne IR_GATE_NEXT.
      delete CT_GATE.
      continue.
    endif.

    if IR_GATE_PREV is supplied.
      check ME->GET_PREV_SHIPUNIT( IR_GATE = LR_GATE ) ne IR_GATE_PREV.
      delete CT_GATE.
      continue.
    endif.

*** Try to find right Shipping Unit
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Delete not relevant Shipping Units
    if LR_PR_SHIPUNIT is bound.
      move LR_PR_SHIPUNIT->GET_SHUTY( ) to LF_SHUTY.
      read table LT_SHUTY with key SHUTY = LF_SHUTY transporting no fields.
      if SY-SUBRC eq 0.
        continue.
      endif.
    endif.

    delete CT_GATE.

  endloop.

endmethod.
method GET_AGGR_ADJ_LIMIT.

  data: LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  try.
      move IR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      if LR_PR_SHIPUNIT is bound.
        RT_LIMIT = LR_PR_SHIPUNIT->GET_ADJ_LIMIT( ).
***     remove limits with initial values
        delete RT_LIMIT where DIMVA is initial.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPUNIT.
  endtry.

  ME->MERGE_NEXT_ADJ_LIMIT( exporting IR_GATE  = IR_GATE
                            changing  CT_LIMIT = RT_LIMIT ).

endmethod.
  method GET_CNTXT.

    try.
***     Get Context by Attribute Value
        RF_CNTXT = ME->R_GATE->GET_ATTRI( IF_ATTID = 'CNTXT' )-ATTVA.
      catch /VCXI/CX_CKX.
        clear RF_CNTXT.
    endtry.

  endmethod.
method GET_CONSC_BY_SHUTY_PMATY.

  data: LT_GATE_SHIPUNIT type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PACKMAT  type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PACKMAT  type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
        LR_PR_PACKMAT    type ref to ZCL_VCXI_XCSU_PR_PACKMAT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

*** Get Details of Shipping Unit
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    try.
        move LR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_GATE_SHIPUNIT is bound.

***--------------------------------------------------------------------------------------
*** Get all child Packaging Materials
  LT_GATE_PACKMAT = LR_GATE_SHIPUNIT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                                 IF_INUSE = ABAP_TRUE ).


*** Get Details of Packaging Material
  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    try.
        move LR_GATE_PACKMAT->R_CLSPR ?to LR_PR_PACKMAT.
        check LR_PR_PACKMAT is bound.
        if LR_PR_PACKMAT->GET_PMATY( ) eq IF_PMATY.
          exit.
        else.
          clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        continue.
    endtry.
  endloop.

  check LR_PR_PACKMAT is bound.
  LR_PR_PACKMAT->GET_CONSC( importing EF_CONSC = RF_CONSC ).

endmethod.
  method GET_CPACK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***------------------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CPACK ).
    RF_CPACK = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_CPACK is not initial.

***------------------------------------------------------------------------------------------------
*** Description
    if EF_DESCR is requested.
      EF_DESCR = value #( ZCL_VCXI_XCSUC_CPACK=>T_CPACK_DESCR[ CPACK = RF_CPACK
                                                               LANGU = SY-LANGU ]-DESCR optional ).
    endif.

  endmethod.
  method GET_CPACK_DESCR.

    ME->GET_CPACK( importing EF_DESCR = RF_DESCR ).

  endmethod.
  method GET_DFLT_APPDATA.

*** Get Application Data
    try.
        RR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear RR_APPDATA.
    endtry.

  endmethod.
  method GET_DFLT_SHIPU.

    data: LF_VKORG type VKORG,
          LF_VTWEG type VTWEG,
          LF_SPART type SPART.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.


*** Renew Default Customizing gate is bound
    if ME->R_DFLT_SHIPU is not bound.

***--------------------------------------------------------------------------------------
*** Initialize References
      if ME->R_CUST_SHIPU is not bound.
        ME->HANDLE_INIT_REFERENCES( ).
      endif.

***   Get Application Data
      try.
          LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_APPDATA.
      endtry.
      check LR_APPDATA is bound.

***--------------------------------------------------------------------------------------
***   Get Sales Area
      move LR_APPDATA->S_KNVV_WE-VKORG to LF_VKORG.
      if LF_VKORG is initial.
        move LR_APPDATA->S_KNVV_AG-VKORG to LF_VKORG.
      endif.

      move LR_APPDATA->S_KNVV_WE-VTWEG to LF_VTWEG.
      if LF_VTWEG is initial.
        move LR_APPDATA->S_KNVV_AG-VTWEG to LF_VTWEG.
      endif.

      move LR_APPDATA->S_KNVV_WE-SPART to LF_SPART.
      if LF_SPART is initial.
        move LR_APPDATA->S_KNVV_AG-SPART to LF_SPART.
      endif.

***   Create Reference to Shipping & Unitization Default Cusotmizing
      create object ME->R_DFLT_SHIPU
        exporting
          IR_APPDATA    = ME->GET_DFLT_APPDATA( )
          IF_KUNNR_WE   = ME->GET_KUNWE( )
          IF_KUNNR_AG   = LR_APPDATA->S_KNA1_AG-KUNNR
          IF_VKORG      = LF_VKORG
          IF_VTWEG      = LF_VTWEG
          IF_SPART      = LF_SPART
          IF_DCONF      = LR_APPDATA->F_DCONF
          IF_WERKS      = ME->GET_WERKS( )
          IF_SHSCH      = ME->GET_SHSCH( )
          IF_CPACK      = ME->GET_CPACK( )
          IF_CMATN      = LR_APPDATA->S_CMPRK-CMATN
          IF_PRFID      = LR_APPDATA->S_CMPRK-PRFID
          IF_CNTXT      = ME->GET_CNTXT( )
          IF_SYSOM      = ME->S_COMOD-MSYST
          IR_CUST_SHIPU = ME->R_CUST_SHIPU.

***   Also if we need to create the default -> raise event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DFLT_CHANGED ).
    endif.

    check ME->R_DFLT_SHIPU is bound.
    move ME->R_DFLT_SHIPU to RR_DFLT_SHIPU.

  endmethod.
method GET_DIMEN_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  LR_PR_SHIPUNIT->GET_DIMEN( importing ET_DIMEN = RT_DIMEN ).

endmethod.
  method GET_KUNWE.

    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.


*** Get Application Data
    try.
        LR_APPDATA = cast #( ME->R_GATE->GET_APPDATA( ) ).
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_APPDATA is bound.

*** Return Ship-to Party
    RF_KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR.

  endmethod.
method GET_LIMIT_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  LR_PR_SHIPUNIT->GET_LIMIT( importing ET_LIMIT = RT_LIMIT ).

endmethod.
method GET_NEXT_SHIPUNIT.

  data:  LF_POSID       type        /VCXI/VKSR_POSID.
  data:  LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  if IR_GATE is not bound.
*** No Previous Gate exists for unbound Gate
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_XCSU'
        F_MSGNO = '102'.

  endif.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  move IR_GATE->GET_POSID( ) to LF_POSID.

*** Calc Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
*** Determine if next gate
    check LR_GATE->GET_POSID( ) gt LF_POSID.
    if RR_NEXT_GATE is bound.
      if LR_GATE->GET_POSID( ) lt RR_NEXT_GATE->GET_POSID( ).
        move LR_GATE to RR_NEXT_GATE.
      endif.
    else.
      move LR_GATE to RR_NEXT_GATE.
    endif.
  endloop.

endmethod.
method GET_OPQTY.

  data:  LS_QITEM         type        ZVCXI_XCSS_S_QITEM.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QITEM( importing ES_QITEM_SELF = LS_QITEM ).
    RS_OPQTY-OPQTY     = LS_QITEM-QITEM.
    RS_OPQTY-OPQTY_UOM = LS_QITEM-QITEM_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY to RS_OPQTY.
  endif.

endmethod.
method GET_PACKMAT_BY_SHUTY_PMATY.

  data: LT_GATE_SHIPUNIT type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PACKMAT  type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PACKMAT  type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
        LR_PR_PACKMAT    type ref to ZCL_VCXI_XCSU_PR_PACKMAT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

*** Get Details of Shipping Unit
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    try.
        move LR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_GATE_SHIPUNIT is bound.

***--------------------------------------------------------------------------------------
*** Get all child Packaging Materials
  LT_GATE_PACKMAT = LR_GATE_SHIPUNIT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                                 IF_INUSE = ABAP_TRUE ).


*** Get Details of Packaging Material
  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    try.
        move LR_GATE_PACKMAT->R_CLSPR ?to LR_PR_PACKMAT.
        check LR_PR_PACKMAT is bound.
        if LR_PR_PACKMAT->GET_PMATY( ) ne IF_PMATY.
          clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        continue.
    endtry.

    check LR_GATE_PACKMAT is bound.
    append LR_GATE_PACKMAT to RT_GATE.

  endloop.

endmethod.
method GET_PACKP_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  LR_PR_SHIPUNIT->GET_PACKP( importing EF_PACKP = RF_PACKP ).

endmethod.
method GET_PALOP.

  data:          LF_CPACK            type        ZVCXI_XCSU_CPACK.
  data: LS_PRQTY    type        ZVCXI_XCSU_S_PRQTY,
        LS_TBQTY_IN type        ZVCXI_XCSU_S_TBQTY,
        LS_OPQTY    type        /VCXI/VSMR_S_OPQTY.
  data: LT_SHIPUNIT       type        ZVCXI_XCSU_TT_PALOP_SHIPUNIT,
        LT_DIMEN_IN       type        ZVCXI_XCSU_TT_DIMEN,
        LT_SHUTY_DFLT_DEF type        ZVCXI_XCSU_TT_SHUTY_DFLT_DEF,
        LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
  field-symbols: <S_SHIPUNIT>        type        ZVCXI_XCSU_S_PALOP_SHIPUNIT.

***------------------------------------------------------------------------------------------------
*** Get Packaging Code
  move ME->GET_CPACK( ) to LF_CPACK.

*** Get Operation Quantity
  move ME->GET_OPQTY( ) to LS_OPQTY.

***--------------------------------------------------------------------------------------
*** Get all Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
    endtry.
    if LR_PR_SHIPUNIT is bound.
***   Add Shipping Unit Entry
      append initial line to LT_SHIPUNIT assigning <S_SHIPUNIT>.
      move LR_PR_SHIPUNIT->GET_SHUTY( )       to <S_SHIPUNIT>-SHUTY.
      move LR_PR_SHIPUNIT->GET_SHUNT( )       to <S_SHIPUNIT>-SHUNT.
      move LR_PR_SHIPUNIT->GET_SHUNT_SETBY( ) to <S_SHIPUNIT>-SHUNT_SETBY.
      LR_PR_SHIPUNIT->GET_PACKP( importing EF_PACKP = <S_SHIPUNIT>-PACKP
                                           EF_SETBY = <S_SHIPUNIT>-PACKP_SETBY ).
      LR_PR_SHIPUNIT->GET_PRQTY( importing ES_PRQTY = LS_PRQTY
                                           EF_SETBY = <S_SHIPUNIT>-PRQTY_SETBY ).
      move-corresponding LS_PRQTY to <S_SHIPUNIT>.

***   Get Limits
      LR_PR_SHIPUNIT->GET_LIMIT( importing ET_LIMIT = <S_SHIPUNIT>-T_LIMIT ).

***   Get Packaging Material for Pallet Optimization
      move LR_PR_SHIPUNIT->GET_PALOP_PACKMAT( ) to <S_SHIPUNIT>-T_PACKMAT.

    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Inbound Dimension (previous to Stack or if no stack use Unit)
  LT_GATE = ME->GET_SHIPUNIT_BY_SHUTY( IF_SHUTY = ME->R_CUST_SHIPU->F_SHUTY_STACK ).
  if LT_GATE is initial.
    loop at ME->R_CUST_SHIPU->T_SHUTY_UNIT into data(LF_SHUTY_UNIT).
      LT_GATE = ME->GET_SHIPUNIT_BY_SHUTY( IF_SHUTY = LF_SHUTY_UNIT ).
      if LT_GATE is not initial.
        exit.
      endif.
    endloop.
  endif.
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    LT_DIMEN_IN = ME->GET_PREV_DIMEN( IR_GATE = LR_GATE ).
    LS_TBQTY_IN = ME->GET_PREV_TBQTY( IR_GATE = LR_GATE ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Shipping Unit Structure
  LT_SHUTY_DFLT_DEF = ME->GET_SHUTY_DFLT_DEF( ).

***------------------------------------------------------------------------------------------------
*** Create Instance
  create object RR_BL_PALOP
    exporting
      IR_DFLT_SHIPU     = ME->R_DFLT_SHIPU
      IF_CPACK          = LF_CPACK
      IT_SHIPUNIT       = LT_SHIPUNIT
      IT_DIMEN_IN       = LT_DIMEN_IN
      IT_SHUTY_DFLT_DEF = LT_SHUTY_DFLT_DEF
      IS_TBQTY_IN       = LS_TBQTY_IN
      IS_OPQTY          = LS_OPQTY.

endmethod.
method GET_PMATN_BY_SHUTY_PMATY.

  data: LT_GATE_SHIPUNIT type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PACKMAT  type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PACKMAT  type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
        LR_PR_PACKMAT    type ref to ZCL_VCXI_XCSU_PR_PACKMAT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

*** Get Details of Shipping Unit
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    try.
        move LR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT, LR_GATE_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_GATE_SHIPUNIT is bound.

***--------------------------------------------------------------------------------------
*** Get all child Packaging Materials
  LT_GATE_PACKMAT = LR_GATE_SHIPUNIT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                                 IF_INUSE = ABAP_TRUE ).


*** Get Details of Packaging Material
  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    try.
        move LR_GATE_PACKMAT->R_CLSPR ?to LR_PR_PACKMAT.
        check LR_PR_PACKMAT is bound.
        if LR_PR_PACKMAT->GET_PMATY( ) eq IF_PMATY.
          exit.
        else.
          clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT, LR_GATE_PACKMAT.
        continue.
    endtry.
  endloop.

  check LR_PR_PACKMAT is bound.
  RF_PMATN = LR_PR_PACKMAT->GET_PMATN( ).

endmethod.
method GET_PREV_DIMEN.

  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  LR_GATE = ME->GET_PREV_SHIPUNIT( IR_GATE = IR_GATE ).

  if LR_GATE is bound.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        if LR_PR_SHIPUNIT is bound.
          LR_PR_SHIPUNIT->GET_DIMEN( importing ET_DIMEN = RT_DIMEN ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
  else.
*** if there is no previous gate, assume previous dimensions are base dimensions.
    RT_DIMEN = GET_BASE_DIMEN( ).
  endif.

endmethod.
  method GET_PREV_SHIPUNIT.

    data: LF_POSID       type        /VCXI/VKSR_POSID.
    data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

    if IR_GATE is not bound.
***   No Previous Gate exists for unbound Gate
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = 'ZVCXI_XCSU'
          F_MSGNO = '101'.
    endif.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                     IF_INUSE = ABAP_TRUE ).
    check LT_GATE is not initial.

    move IR_GATE->GET_POSID( ) to LF_POSID.

*** Calc Details for Shipping Unit
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
          check LR_PR_SHIPUNIT is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
***   Determine if previous gate
      check LR_GATE->GET_POSID( ) lt LF_POSID.
      if RR_PREV_GATE is bound.
        if LR_GATE->GET_POSID( ) gt RR_PREV_GATE->GET_POSID( ).
          move LR_GATE to RR_PREV_GATE.
        endif.
      else.
        move LR_GATE to RR_PREV_GATE.
      endif.
    endloop.

  endmethod.
method GET_PREV_TBQTY.

  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  LR_GATE = ME->GET_PREV_SHIPUNIT( IR_GATE = IR_GATE ).

  if LR_GATE is bound.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        if LR_PR_SHIPUNIT is bound.
          RS_TBQTY = LR_PR_SHIPUNIT->GET_TBQTY( ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
  endif.

endmethod.
method GET_PRQTY_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  LR_PR_SHIPUNIT->GET_PRQTY( importing ES_PRQTY = RS_PRQTY ).

endmethod.
method GET_SHIPUNIT_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          append LR_GATE to RT_GATE.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_SHSCH.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.


***------------------------------------------------------------------------------------------------
*** Get Leading Object Key
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    RF_SHSCH = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.

***------------------------------------------------------------------------------------------------
    check ME->R_CUST_SHIPU is bound.

*** Description
    if EF_DESCR is requested.
      EF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_SHSCH( IF_SHSCH = RF_SHSCH ).
    endif.

*** Allowed Shipping Scheme
    if ET_SHSCH is requested.
      ET_SHSCH = ME->R_CUST_SHIPU->GET_SHSCH_FOR_MODEL( IF_CMATN = ME->S_COMOD-CMATN
                                                        IF_PRFID = ME->S_COMOD-PRFID
                                                        IF_CNTXT = ME->GET_CNTXT( ) ).
    endif.

  endmethod.
method GET_SHSCH_DESCR.

  ME->GET_SHSCH( importing EF_DESCR = RF_DESCR ).

endmethod.
method GET_SHUNT_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Calc Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  RF_SHUNT = LR_PR_SHIPUNIT->GET_SHUNT( ).

endmethod.
method GET_SHUTY_DFLT_DEF.

  data:          LF_POSID                    type        /VCXI/VKS_POSID.
  data:          LT_GATE                     type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE                     type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT              type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
  field-symbols: <S_SHUTY_DFLT_DEF>          type        ZVCXI_XCSU_S_SHUTY_DFLT_DEF.

***--------------------------------------------------------------------------------------
*** Get all Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Build Structure
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
    check LR_PR_SHIPUNIT is bound.

    append initial line to RT_SHUTY_DFLT_DEF assigning <S_SHUTY_DFLT_DEF>.
    add 10 to LF_POSID.
    move LF_POSID                              to <S_SHUTY_DFLT_DEF>-POSID.
    move LR_PR_SHIPUNIT->GET_SHUTY( )          to <S_SHUTY_DFLT_DEF>-SHUTY.
    move LR_PR_SHIPUNIT->GET_SHUNT( )          to <S_SHUTY_DFLT_DEF>-SHUNT.
    move LR_PR_SHIPUNIT->GET_SHUNT_SETBY( )    to <S_SHUTY_DFLT_DEF>-SETBY.
    move LR_PR_SHIPUNIT->GET_PMATY_DFLT_DEF( ) to <S_SHUTY_DFLT_DEF>-T_PMATY_DFLT_DEF.
  endloop.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Base Dimension
  case ME->CHECK_BASE_DIMEN( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Shipping Scheme
  case ME->CHECK_SHSCH( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Shipping Unit Type
  case ME->CHECK_SHUTY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Packaging Code
  case ME->CHECK_CPACK( ).
    when 2 or 3 or 4.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  data: LF_WERKS type WERKS_D,
        LF_SHSCH type ZVCXI_XCSU_SHSCH.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Base Dimension
  if ME->CHECK_BASE_DIMEN( IR_MESSAGE = IR_MESSAGE ) eq 0.
*** All Base Dimension Values are maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '106' ).
  endif.

***------------------------------------------------------------------
*** Check Shipping Scheme
  case ME->CHECK_SHSCH( ).
    when 0.
***   Shipping Scheme is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '107' ).
    when 1.
***   Shipping Scheme is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '108' ).
    when 2.
***   Shipping Scheme is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '109' ).
    when 3.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
  endcase.

***------------------------------------------------------------------
*** Check Shipping Unit Type
  if ME->CHECK_SHUTY( IR_MESSAGE = IR_MESSAGE ) eq 0.
*** All Shipping Unit Types in right Order and Quantity maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '110' ).
  endif.

***------------------------------------------------------------------
*** Check Packaging Code
  LF_SHSCH = ME->GET_SHSCH( ).
  case ME->CHECK_CPACK( ).
    when 1.
***   Packaging Code is maintained and Valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '113' ).
    when 2.
***   Packaging Code is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '114' ).
    when 3.
***   Packaging Code is not valid for Plant &1.
      LF_WERKS = ME->GET_WERKS( ).
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '115'
                               IF_MSGV1 = LF_WERKS ).
    when 4.
*** Packaging Code is not valid for Sipping Scheme &1.
      LF_SHSCH = ME->GET_SHSCH( ).
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '117'
                               IF_MSGV1 = LF_SHSCH ).

  endcase.

endmethod.
method GET_TBQTY_BY_SHUTY.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        check LR_PR_SHIPUNIT is bound.
        if LR_PR_SHIPUNIT->GET_SHUTY( ) eq IF_SHUTY.
          exit.
        else.
          clear LR_PR_SHIPUNIT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
        continue.
    endtry.
  endloop.

  check LR_PR_SHIPUNIT is bound.
  RS_TBQTY = LR_PR_SHIPUNIT->GET_TBQTY( ).

endmethod.
  method GET_WERKS.

    data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

    RF_WERKS =  LR_APPDATA->F_WERKS.

  endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_RELOAD_DFLT.
      ME->HANDLE_RELOAD_DFLT( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_RESET_SHSCH.
      ME->HANDLE_RESET_SHSCH( ).

    when C_IEVNT_I_RECALC_DETAILS.
      ME->HANDLE_RECALC_DETAILS( ).

    when C_IEVNT_I_REDET_DFLT.
      ME->HANDLE_REDET_DFLT( ).

    when C_IEVNT_I_REQUEST_RECALC_UTIL.
      ME->HANDLE_REQUEST_RECALC_UTIL( IT_GATE = IT_GATE_PROVIDER ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LF_OWNER  type /VCXI/CKX_STRING.

*** Initialize Reference to Shipping & Unitization Customizing with Gate Key as Owner
  move ME->R_GATE->F_GATKY to LF_OWNER.
  move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( IF_OWNER = LF_OWNER ) to ME->R_CUST_SHIPU.

*** Set Model Settings to Shipping & Unitization Customizing
  ME->SET_MODEL_SETTINGS( ).

endmethod.
method HANDLE_RECALC_DETAILS.

*** Check if Base Dimensions completely existing
  check ME->CHECK_BASE_DIMEN( ) eq 0.

  ME->CALC_SHIPUNIT_DETAILS( ).

endmethod.
method HANDLE_REDET_DFLT.

  data:  LF_CHANGED                  type        ABAP_BOOL,
         LF_NEW                      type        ABAP_BOOL,
         LF_NO_REDET                 type        ABAP_BOOL.
  data:  LS_SHUTY_DFLT_DEF           type        ZVCXI_XCSU_S_SHUTY_DFLT_DEF.
  data:  LT_SHUTY_DFLT_DEF           type        ZVCXI_XCSU_TT_SHUTY_DFLT_DEF.

***--------------------------------------------------------------------------------------
*** Check if we have/need a (new) Defaulting Instance
  if ME->R_DFLT_SHIPU is not bound or
     ME->CHECK_DFLT_SHIPU( ) eq ABAP_FALSE.
    ME->GET_DFLT_SHIPU( ).
    LF_NEW = ABAP_TRUE.
  endif.

  check ME->R_DFLT_SHIPU is bound.

***--------------------------------------------------------------------------------------
*** Get Shipping Unit Structure
  LT_SHUTY_DFLT_DEF = ME->GET_SHUTY_DFLT_DEF( ).

***--------------------------------------------------------------------------------------
*** Make the redetermine only with fully speficied Shipping Units
*  loop at LT_SHUTY_DFLT_DEF into LS_SHUTY_DFLT_DEF
*    where SETBY is initial.
*    LF_NO_REDET = ABAP_TRUE.
*    exit.
*  endloop.
*
*  if LF_NO_REDET = ABAP_FALSE.
    if LT_SHUTY_DFLT_DEF is not initial.
      LF_CHANGED = ME->R_DFLT_SHIPU->REDET_DFLT( IT_SHUTY_DFLT_DEF = LT_SHUTY_DFLT_DEF ).
    endif.
*  endif.

***--------------------------------------------------------------------------------------
*** Send Event
  if LF_CHANGED eq ABAP_TRUE or
     LF_NEW     eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DFLT_CHANGED ).
  endif.

endmethod.
  method HANDLE_RELOAD_DFLT.

    ME->RELAOD_DEF( ).

  endmethod.
  method HANDLE_REQUEST_RECALC_UTIL.

    data: LF_SET_EVENT   type        ABAP_BOOL.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


    check ME->R_CUST_SHIPU is bound.

    loop at IT_GATE into LR_GATE.
***   Raise Event for Freed Gate
      if LR_GATE->F_FREED eq ABAP_TRUE.
        move ABAP_TRUE to LF_SET_EVENT.
        exit.
      endif.

***   Raise Event for Shipping Unit Truck and HU
      if LR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSU_PR_SHIPUNIT.
        data(LF_SHUTY) = cast ZCL_VCXI_XCSU_PR_SHIPUNIT( LR_GATE->R_CLSPR )->GET_SHUTY( ).
        if ME->R_CUST_SHIPU->F_SHUTY_CONTAINER eq LF_SHUTY or
           LINE_EXISTS( ME->R_CUST_SHIPU->T_SHUTY_HU[ TABLE_LINE = LF_SHUTY ] ).
          move ABAP_TRUE to LF_SET_EVENT.
          exit.
        endif.
      endif.

***   Raise Event for Operation Quantity
      if LR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSS_OPQTY.
        move ABAP_TRUE to LF_SET_EVENT.
        exit.
      endif.
    endloop.

    check LF_SET_EVENT eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_UTIL_REQ ).

  endmethod.
  method HANDLE_RESET_SHSCH.

*** Clear values influenced by Shipping Scheme
    ME->CLEAR_FOR_SHSCH( ).

*** Set Reset Flag -> UI Refresh Grid!!
    move ABAP_TRUE to ME->F_RESET_SHSCH.

*** Set Model Settings
    ME->SET_MODEL_SETTINGS( ).

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHSCH_RESET ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    check ME->R_GATE->IS_INUSE( ) eq ABAP_TRUE.
    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
method IS_BASE_SHIPUNIT.

  data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

  LR_GATE = ME->GET_PREV_SHIPUNIT( IR_GATE = IR_GATE ).

  if LR_GATE is bound.
    RF_BASE = ABAP_FALSE.
  else.
    RF_BASE = ABAP_TRUE.
  endif.

endmethod.
method MERGE_NEXT_ADJ_LIMIT.

  data:          LF_MSGV1              type        SYMSGV,
                 LF_MSGV2              type        SYMSGV,
                 LF_FMNAG              type        ZVCXI_XCSU_FMNAG.
  data:          LS_LIMIT_CURR         type        ZVCXI_XCSU_S_LIMIT.
  data:          LT_LIMIT_CURR         type        ZVCXI_XCSU_TT_LIMIT.
  data:          LR_NEXT_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT        type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_LIMIT>             type        ZVCXI_XCSU_S_LIMIT.


  LR_NEXT_GATE = ME->GET_NEXT_SHIPUNIT( IR_GATE = IR_GATE ).

  if LR_NEXT_GATE is bound.
    try.
        move LR_NEXT_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
        if LR_PR_SHIPUNIT is bound.
***       Merge current and next shipping Units limits
          LT_LIMIT_CURR = LR_PR_SHIPUNIT->GET_ADJ_LIMIT( ).

***       Call Function recursively to merge next shipping units limits
          ME->MERGE_NEXT_ADJ_LIMIT( exporting IR_GATE     = LR_NEXT_GATE
                                    changing  CT_LIMIT    = CT_LIMIT ).
***       Adjust also next limits
          CT_LIMIT = LR_PR_SHIPUNIT->GET_ADJ_LIMIT( IT_LIMIT = CT_LIMIT ).

          loop at LT_LIMIT_CURR into LS_LIMIT_CURR.
***         Disregard initial limits
            if LS_LIMIT_CURR-DIMVA is initial.
              continue.
            endif.

            read table CT_LIMIT assigning <S_LIMIT> with key LIMIT = LS_LIMIT_CURR-LIMIT
                                                             DIMEN = LS_LIMIT_CURR-DIMEN.
            if SY-SUBRC ne 0.
              append LS_LIMIT_CURR to CT_LIMIT.
            else.
              LF_FMNAG = ME->R_CUST_SHIPU->GET_FMNAG_FOR_LIMIT( IF_LIMIT = <S_LIMIT>-LIMIT ).
              if LF_FMNAG is not initial.
                try.
                    call function LF_FMNAG
                      exporting
                        IS_CURR_LIMIT = <S_LIMIT>
                        IS_NEXT_LIMIT = LS_LIMIT_CURR
                      importing
                        ES_LIMIT      = <S_LIMIT>.

                  catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***                 Function Module call failed: Could not call the function &1.
                    move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
                    raise exception type /VCXI/CX_CKX
                                    exporting
                                      F_MSGTY = 'E'
                                      F_MSGID = 'ZVCXI_XCS'
                                      F_MSGNO = '001'
                                      F_MSGV1 = LF_MSGV1.

                  catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***                 Function Module call failed: Parameter &1 in function &2 missing.
                    move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
                    move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
                    raise exception type /VCXI/CX_CKX
                                    exporting
                                      F_MSGTY = 'E'
                                      F_MSGID = 'ZVCXI_XCS'
                                      F_MSGNO = '003'
                                      F_MSGV1 = LF_MSGV1
                                      F_MSGV2 = LF_MSGV2.

                  catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***                 Function Module call failed: Obligatory parameter &2 of &2 not filled.
                    move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
                    move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
                    raise exception type /VCXI/CX_CKX
                                    exporting
                                      F_MSGTY = 'E'
                                      F_MSGID = 'ZVCXI_XCS'
                                      F_MSGNO = '003'
                                      F_MSGV1 = LF_MSGV1
                                      F_MSGV2 = LF_MSGV2.

                  catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***                 Function Module call failed: Unknown Error while calling function &1.
                    move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
                    raise exception type /VCXI/CX_CKX
                                    exporting
                                      F_MSGTY = 'E'
                                      F_MSGID = 'ZVCXI_XCS'
                                      F_MSGNO = '004'
                                      F_MSGV1 = LF_MSGV1.
                endtry.

***             Limits can not be less than 0 after merge
                if <S_LIMIT>-DIMVA lt 0.
                  <S_LIMIT>-DIMVA = 0.
                endif.

              endif.
            endif.
          endloop.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPUNIT.
    endtry.
  endif.

endmethod.
method RELAOD_DEF.

*** Clear Shpipping Scheme and Packaging Code
  ME->SET_SHSCH( IF_SHSCH = SPACE
                 IF_SETBY = SPACE ).
  ME->SET_CPACK( IF_CPACK = SPACE
                 IF_SETBY = SPACE ).

*** Force Event even if already initial
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHSCH_CHANGED ).

*** Clear for Shipping Scheme
  ME->CLEAR_FOR_SHSCH( ).

*** Raise Events
  ME->R_GATE->RAISE_EVENTS( ).

endmethod.
method SET_CPACK.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CPACK ).

  if IF_CPACK is supplied.
    move IF_CPACK to LS_PARAM-ATWRT.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CPACK_CHANGED ).
  endif.

endmethod.
  method SET_MODEL_SETTINGS.

    data: LF_DIMID type DIMID,
          LF_SHSCH type ZVCXI_XCSU_SHSCH.
    data: LS_ATTRI type /VCXI/VKS_S_ATTRI,
          LS_UMARG type ZVCXI_XCSU_S_UMARG.
    data: LT_SHUTY_STACK  type ZVCXI_XCSU_TT_SHUTY,
          LT_SHUTY_UNIT   type ZVCXI_XCSU_TT_SHUTY,
          LT_SHUTY_HU     type ZVCXI_XCSU_TT_SHUTY,
          LT_PMATY_PALLET type ZVCXI_XCSU_TT_PMATY,
          LT_SHUTY_CONT   type ZVCXI_XCSU_TT_SHUTY.


    check ME->R_CUST_SHIPU is bound.

*** Get Shipping Scheme
    LF_SHSCH = ME->GET_SHSCH( ).

***----------------------------------------------------------------------------
*** Get Shipping Unit Stack (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SHUTY_STACK ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA  at ',' into table LT_SHUTY_STACK.
    endif.

***----------------------------------------------------------------------------
*** Get Shipping Unit Unit (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SHUTY_UNIT ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA at ',' into table LT_SHUTY_UNIT.
    endif.

***----------------------------------------------------------------------------
*** Get Shipping Unit HU (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SHUTY_HU ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA at ',' into table LT_SHUTY_HU.
    endif.

*** Get Packaging Material Pallet (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_PMATY_PALLET ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA  at ',' into table LT_PMATY_PALLET.
    endif.

***----------------------------------------------------------------------------
*** Get Shipping Unit Container (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_SHUTY_CONTAINER ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA  at ',' into table LT_SHUTY_CONT.
    endif.

***----------------------------------------------------------------------------
*** Get Truck Dimension Key (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_TRUCK_DIMID ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      move LS_ATTRI-ATTVA to LF_DIMID.
    endif.

***----------------------------------------------------------------------------
*** Get Margin Unit Value (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_UNIT_MARGIN_VALUE ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      move LS_ATTRI-ATTVA to LS_UMARG-UMARG.
    endif.

***----------------------------------------------------------------------------
*** Get Margin Unit Uom (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_UNIT_MARGIN_UOM ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      move LS_ATTRI-ATTVA to LS_UMARG-UMARG_UOM.
    endif.


***----------------------------------------------------------------------------
*** Set Config Model Settings
    ME->R_CUST_SHIPU->SET_CONFIG_MODEL_SETTINGS( IT_SHUTY_STACK     = LT_SHUTY_STACK
                                                 IT_SHUTY_UNIT      = LT_SHUTY_UNIT
                                                 IT_SHUTY_HU        = LT_SHUTY_HU
                                                 IT_PMATY_PALLET    = LT_PMATY_PALLET
                                                 IT_SHUTY_CONTAINER = LT_SHUTY_CONT
                                                 IF_SHSCH           = LF_SHSCH
                                                 IF_DIMID           = LF_DIMID
                                                 IS_UMARG           = LS_UMARG ).

  endmethod.
method SET_PALOP.

  data:  LF_SHUTY            type        ZVCXI_XCSU_SHUTY.
  data:  LS_SHIPUNIT         type        ZVCXI_XCSU_S_PALOP_SHIPUNIT,
         LS_PRQTY            type        ZVCXI_XCSU_S_PRQTY.
  data:  LT_SHIPUNIT         type        ZVCXI_XCSU_TT_PALOP_SHIPUNIT,
         LT_GATE             type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHIPUNIT      type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  check IR_BL_PALOP is bound and
        IF_COPTI    is not initial.

***------------------------------------------------------------------------------------------------
*** Get Optimization Result
  LT_SHIPUNIT = IR_BL_PALOP->GET_RESULT( IF_COPTI = IF_COPTI ).
  check LT_SHIPUNIT is not initial.

***--------------------------------------------------------------------------------------
*** Get all Shipping Units
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SHIPUNIT.
    endtry.
    if LR_PR_SHIPUNIT is bound.
***   Get Key
      move LR_PR_SHIPUNIT->GET_SHUTY( ) to LF_SHUTY.

***   Find Result Entry
      read table LT_SHIPUNIT into LS_SHIPUNIT with key SHUTY = LF_SHUTY.
      check SY-SUBRC eq 0.

***   Set Shipping Unit Infos
      LR_PR_SHIPUNIT->SET_SHUNT( IF_SHUNT = LS_SHIPUNIT-SHUNT
                                 IF_SETBY = LS_SHIPUNIT-SHUNT_SETBY ).

      LR_PR_SHIPUNIT->SET_PACKP( IF_PACKP = LS_SHIPUNIT-PACKP
                                 IF_SETBY = LS_SHIPUNIT-PACKP_SETBY ).

      move-corresponding LS_SHIPUNIT to LS_PRQTY.
      LR_PR_SHIPUNIT->SET_PRQTY( IS_PRQTY = LS_PRQTY
                                 IF_SETBY = LS_SHIPUNIT-PRQTY_SETBY ).

***   Set Packaging Material for Pallet Optimization
      LR_PR_SHIPUNIT->SET_PALOP_PACKMAT( IT_PALOP_PACKMAT = LS_SHIPUNIT-T_PACKMAT ).

***   Delete Shipunit after Set Values
      delete LT_SHIPUNIT where SHUTY = LS_SHIPUNIT-SHUTY
                           and SHUNT = LS_SHIPUNIT-SHUNT.

    endif.
  endloop.

endmethod.
method SET_SHSCH.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  if IF_SHSCH is not initial.
    move IF_SHSCH to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.
  else.
    clear LS_LEOKY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHSCH_CHANGED ).
  endif.


endmethod.
