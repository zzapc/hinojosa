
class ZCL_VCXI_XCM_MBQ_DCO_SDOC definition
  public
  inheriting from /VCXI/CL_CKMR_CLDCO
  create public .

public section.

  data F_DLCNT type ZVCXI_XCM_MBQ_DLCNT read-only .
  data F_MLCNT type ZVCXI_XCM_MBQ_MLCNT read-only .
  data F_POSNR type POSNR read-only .
  data R_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC read-only .
  data S_START type ZVCXI_XCM_MBQ_S_START read-only .
  data T_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI read-only .
  data T_MATLI type ZVCXI_XCM_MBQ_TT_MATLI read-only .
  data T_POSUPD type ZVCXI_XCI_TT_CFGS_UPDKZ read-only .

  methods SET_BOB_SDOC
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
  methods SET_DLCNT
    importing
      !IF_DLCNT type ZVCXI_XCM_MBQ_DLCNT
    raising
      /VCXI/CX_CKX .
  methods SET_DMSLI
    importing
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods SET_MATLI
    importing
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
    raising
      /VCXI/CX_CKX .
  methods SET_MLCNT
    importing
      !IF_MLCNT type ZVCXI_XCM_MBQ_MLCNT
    raising
      /VCXI/CX_CKX .
  methods SET_POSNR
    importing
      !IF_POSNR type POSNR
    raising
      /VCXI/CX_CKX .
  methods SET_POSUPD
    importing
      !IT_POSUPD type ZVCXI_XCI_TT_CFGS_UPDKZ
    raising
      /VCXI/CX_CKX .
  methods SET_START
    importing
      !IS_START type ZVCXI_XCM_MBQ_S_START
    raising
      /VCXI/CX_CKX .
  methods UPDATE_DMSLI
    importing
      !IS_DMSLI type ZVCXI_XCM_MBQ_S_DMSLI
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MATLI
    importing
      !IS_MATLI type ZVCXI_XCM_MBQ_S_MATLI
    raising
      /VCXI/CX_CKX .
protected section.

  class-methods CONV_ACTCON_TO_XML
    importing
      !IT_ACTCON type ZVCXI_XCM_MBQ_TT_ACTCON
    returning
      value(RT_ACTCON_XML) type ZVCXI_XCM_MBQ_TT_ACTCON_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_DMSLI_TO_XML
    importing
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    returning
      value(RT_DMSLI_XML) type ZVCXI_XCM_MBQ_TT_DMSLI_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MATLI_TO_XML
    importing
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
    returning
      value(RT_MATLI_XML) type ZVCXI_XCM_MBQ_TT_MATLI_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_ACTCON
    importing
      !IT_ACTCON_XML type ZVCXI_XCM_MBQ_TT_ACTCON_XML
    returning
      value(RT_ACTCON) type ZVCXI_XCM_MBQ_TT_ACTCON
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_DMSLI
    importing
      !IT_DMSLI_XML type ZVCXI_XCM_MBQ_TT_DMSLI_XML
    returning
      value(RT_DMSLI) type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MATLI
    importing
      !IT_MATLI_XML type ZVCXI_XCM_MBQ_TT_MATLI_XML
    returning
      value(RT_MATLI) type ZVCXI_XCM_MBQ_TT_MATLI
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .

  methods DESERIALIZE_INFO
    redefinition .
  methods SERIALIZE_INFO
    redefinition .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_DCO_SDOC definition
class ZCL_VCXI_XCM_MBQ_DCO_SDOC implementation.
  method CONV_ACTCON_TO_XML.

    data: LS_ACTCON type ZVCXI_XCM_MBQ_S_ACTCON.
    data: LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR.
    field-symbols: <S_ACTCON_XML> type ZVCXI_XCM_MBQ_S_ACTCON_XML,
                   <S_ACTDAT>     type ANY.


    loop at IT_ACTCON into LS_ACTCON.
      append initial line to RT_ACTCON_XML assigning <S_ACTCON_XML>.
      move-corresponding LS_ACTCON to <S_ACTCON_XML>.

      if LS_ACTCON-R_ACTDAT is bound.
***     Get Structure Name
        LR_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = LS_ACTCON-R_ACTDAT ).
        <S_ACTCON_XML>-STRCT = LR_STRUCTDESCR->GET_RELATIVE_NAME( ).

***     Dereferencing Data
        assign LS_ACTCON-R_ACTDAT->* to <S_ACTDAT>.

***     Convert to XML
        call transformation ID
             source S_ACTDAT = <S_ACTDAT>
             result xml <S_ACTCON_XML>-XML.
      endif.

    endloop.

  endmethod.
  method CONV_DMSLI_TO_XML.

    data: LS_DMSLI type ZVCXI_XCM_MBQ_S_DMSLI.
    field-symbols: <S_DMSLI_XML> type ZVCXI_XCM_MBQ_S_DMSLI_XML.


    loop at IT_DMSLI into LS_DMSLI.
      append corresponding #( LS_DMSLI ) to RT_DMSLI_XML assigning <S_DMSLI_XML>.

***   Convert Activity Control to XML
      <S_DMSLI_XML>-T_ACTCON_XML = CONV_ACTCON_TO_XML( IT_ACTCON = LS_DMSLI-T_ACTCON ).
    endloop.

  endmethod.
  method CONV_MATLI_TO_XML.

    data: LS_MATLI type ZVCXI_XCM_MBQ_S_MATLI.
    field-symbols: <S_MATLI_XML> type ZVCXI_XCM_MBQ_S_MATLI_XML.


    loop at IT_MATLI into LS_MATLI.
      append corresponding #( LS_MATLI ) to RT_MATLI_XML assigning <S_MATLI_XML>.

***   Convert Activity Control to XML
      <S_MATLI_XML>-T_ACTCON_XML = CONV_ACTCON_TO_XML( IT_ACTCON = LS_MATLI-T_ACTCON ).
    endloop.

  endmethod.
  method CONV_XML_TO_ACTCON.

    data: LS_ACTCON_XML type ZVCXI_XCM_MBQ_S_ACTCON_XML.
    data: LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR.
    field-symbols: <S_ACTCON> type ZVCXI_XCM_MBQ_S_ACTCON,
                   <S_ACTDAT> type ANY.


    loop at IT_ACTCON_XML into LS_ACTCON_XML.
      append initial line to RT_ACTCON assigning <S_ACTCON>.
      move-corresponding LS_ACTCON_XML to <S_ACTCON>.

      if LS_ACTCON_XML-STRCT is not initial.
***     Get Runtime Type Services for Structure
        LR_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_NAME( P_NAME = LS_ACTCON_XML-STRCT ).

***     Create and dereferencing new Data References
        create data <S_ACTCON>-R_ACTDAT type handle LR_STRUCTDESCR.
        assign <S_ACTCON>-R_ACTDAT->* to <S_ACTDAT>.

***     Convert from XML
        call transformation ID
             source xml LS_ACTCON_XML-XML
             result S_ACTDAT = <S_ACTDAT>.

      endif.
    endloop.

  endmethod.
  method CONV_XML_TO_DMSLI.

    data: LS_DMSLI_XML type ZVCXI_XCM_MBQ_S_DMSLI_XML.
    field-symbols: <S_DMSLI> type ZVCXI_XCM_MBQ_S_DMSLI.


    loop at IT_DMSLI_XML into LS_DMSLI_XML.
      append initial line to RT_DMSLI assigning <S_DMSLI>.
      move-corresponding LS_DMSLI_XML to <S_DMSLI>.

***   Convert XML to Activity Control
      <S_DMSLI>-T_ACTCON = CONV_XML_TO_ACTCON( IT_ACTCON_XML = LS_DMSLI_XML-T_ACTCON_XML ).
    endloop.

  endmethod.
  method CONV_XML_TO_MATLI.

    data: LS_MATLI_XML type ZVCXI_XCM_MBQ_S_MATLI_XML.
    field-symbols: <S_MATLI> type ZVCXI_XCM_MBQ_S_MATLI.


    loop at IT_MATLI_XML into LS_MATLI_XML.
      append initial line to RT_MATLI assigning <S_MATLI>.
      move-corresponding LS_MATLI_XML to <S_MATLI>.

***   Convert XML to Activity Control
      <S_MATLI>-T_ACTCON = CONV_XML_TO_ACTCON( IT_ACTCON_XML = LS_MATLI_XML-T_ACTCON_XML ).
    endloop.

  endmethod.
  method DESERIALIZE_INFO.

    data: LT_DATA      type ABAP_TRANS_SRCBIND_TAB.
    data: LR_MATLI_XML type ref to DATA,
          LR_DMSLI_XML type ref to DATA.
    field-symbols: <T_MATLI_XML> type ZVCXI_XCM_MBQ_TT_MATLI_XML,
                   <T_DMSLI_XML> type ZVCXI_XCM_MBQ_TT_DMSLI_XML.


    check IF_XMLDC is not initial.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Add Material List (as XML)
    create data LR_MATLI_XML type ZVCXI_XCM_MBQ_TT_MATLI_XML.
    assign LR_MATLI_XML->* to <T_MATLI_XML>.
    append value #( NAME = 'T_MATLI_XML'   VALUE = LR_MATLI_XML ) to LT_DATA.

*** Add DMS Document List (as XML)
    create data LR_DMSLI_XML type ZVCXI_XCM_MBQ_TT_DMSLI_XML.
    assign LR_DMSLI_XML->* to <T_DMSLI_XML>.
    append value #( NAME = 'T_DMSLI_XML'   VALUE = LR_DMSLI_XML ) to LT_DATA.

*** Open XML
    call transformation ID
         source xml IF_XMLDC
         result (LT_DATA).

***--------------------------------------------------------------------------------------
*** Deserialize Sales Document
    ME->R_BOB_SDOC = new ZCL_VCXI_XCI_BOB_SDOC( ).
    ME->R_BOB_SDOC->DESERIALIZE( IF_XML = IF_XMLDC ).

*** If no Saled Docuement was specified, ignore the instance
    if ME->R_BOB_SDOC->S_VBAK-VBELN is initial.
      clear ME->R_BOB_SDOC.
    endif.

    if ME->R_BOB_SDOC is bound.
*      set handler ME->HANDLE_BOB_SDOC_CHANGED for ME->R_BOB_SDOC.
    endif.

*** Deserialize Material and DMS Document List
    ME->T_MATLI = CONV_XML_TO_MATLI( IT_MATLI_XML = <T_MATLI_XML> ).
    ME->T_DMSLI = CONV_XML_TO_DMSLI( IT_DMSLI_XML = <T_DMSLI_XML> ).

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'S_START'  VALUE = ref #( ME->S_START ) )
                       ( NAME = 'F_POSNR'  VALUE = ref #( ME->F_POSNR ) )
                       ( NAME = 'F_MLCNT'  VALUE = ref #( ME->F_MLCNT ) )
                       ( NAME = 'F_DLCNT'  VALUE = ref #( ME->F_DLCNT ) )
                       ( NAME = 'T_POSUPD' VALUE = ref #( ME->T_POSUPD ) )
                     ).

  endmethod.
  method SERIALIZE_INFO.

    data: LS_DATA type ABAP_TRANS_SRCBIND.
    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.
    data: LR_MATLI_XML type ref to DATA,
          LR_DMSLI_XML type ref to DATA.
    field-symbols: <VALUE>       type ANY,
                   <T_MATLI_XML> type ZVCXI_XCM_MBQ_TT_MATLI_XML,
                   <T_DMSLI_XML> type ZVCXI_XCM_MBQ_TT_DMSLI_XML.

***--------------------------------------------------------------------------------------
*** Serialize Business Object Sales Document
    if ME->R_BOB_SDOC is bound.
      ME->R_BOB_SDOC->SERIALIZE( importing ET_DATA = LT_DATA ).
    endif.

*** Add other Data References
    append lines of ME->GET_XML_DREF( ) to LT_DATA.

*** Add Material List (as XML)
    create data LR_MATLI_XML type ZVCXI_XCM_MBQ_TT_MATLI_XML.
    assign LR_MATLI_XML->* to <T_MATLI_XML>.
    append value #( NAME = 'T_MATLI_XML' VALUE = LR_MATLI_XML ) to LT_DATA.
    <T_MATLI_XML> = CONV_MATLI_TO_XML( IT_MATLI = ME->T_MATLI ).

*** Add DMS Document List (as XML)
    create data LR_DMSLI_XML type ZVCXI_XCM_MBQ_TT_DMSLI_XML.
    assign LR_DMSLI_XML->* to <T_DMSLI_XML>.
    append value #( NAME = 'T_DMSLI_XML' VALUE = LR_DMSLI_XML ) to LT_DATA.
    <T_DMSLI_XML> = CONV_DMSLI_TO_XML( IT_DMSLI = ME->T_DMSLI ).

*** Remove initial Data
    loop at LT_DATA into LS_DATA.
      assign LS_DATA-VALUE->* to <VALUE>.
      if <VALUE> is initial.
        delete LT_DATA.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create XML
*{   REPLACE        SX2K900788                                        1
*\    call transformation ID
*\         source (LT_DATA)
*\         result xml RF_XMLDC.
    call transformation ID
         source (LT_DATA)
         options VALUE_HANDLING = 'MOVE'
         result xml RF_XMLDC.
*}   REPLACE

  endmethod.
  method SET_BOB_SDOC.

    check ME->R_BOB_SDOC ne IR_BOB_SDOC.
    ME->R_BOB_SDOC = IR_BOB_SDOC.

**** Register Change Event Handler
*    set handler ME->HANDLE_BOB_SDOC_CHANGED for ME->R_BOB_SDOC.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_DLCNT.

    check IF_DLCNT ne ME->F_DLCNT.
    ME->F_DLCNT = IF_DLCNT.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_DMSLI.

    check ME->T_DMSLI ne IT_DMSLI.
    ME->T_DMSLI = IT_DMSLI.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_MATLI.

    check ME->T_MATLI ne IT_MATLI.
    ME->T_MATLI = IT_MATLI.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_MLCNT.

    check IF_MLCNT ne ME->F_MLCNT.
    ME->F_MLCNT = IF_MLCNT.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_POSNR.

    check IF_POSNR ne ME->F_POSNR.
    move IF_POSNR to ME->F_POSNR.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_POSUPD.

    check IT_POSUPD ne ME->T_POSUPD.
    move IT_POSUPD to ME->T_POSUPD.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method SET_START.

    check ME->S_START ne IS_START.
    ME->S_START = IS_START.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method UPDATE_DMSLI.

*** Check entry exists
    if not LINE_EXISTS( ME->T_DMSLI[ DLCNT = IS_DMSLI-DLCNT ] ).
      raise exception type /VCXI/CX_CKX.
    endif.

*** Perform Update
    ME->T_DMSLI[ DLCNT = IS_DMSLI-DLCNT ] = IS_DMSLI.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
  method UPDATE_MATLI.

*** Check entry exists
    if not LINE_EXISTS( ME->T_MATLI[ MLCNT = IS_MATLI-MLCNT ] ).
      raise exception type /VCXI/CX_CKX.
    endif.

*** Perform Update
    ME->T_MATLI[ MLCNT = IS_MATLI-MLCNT ] = IS_MATLI.

*** Raise Change Event
    raise event CHANGED.

  endmethod.
