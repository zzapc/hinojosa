
class ZCL_VCXI_F0SS_ND_CSTEP definition
  public
  inheriting from ZCL_VCXI_F0SS_ND
  create public .

public section.

  constants C_UC_ADD type SYUCOMM value 'ADD' ##NO_TEXT.

  methods GET_FCODE
    redefinition .
  methods HANDLE_UC_POPUP_SEL
    redefinition .
protected section.

  data T_PRVDR_DEF type ZVCXI_F0SS_TT_PRVDR_DEF .

  methods ADD_PRVDR
    importing
      !IF_FCODE type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEPS_DEF
    exporting
      !ET_PRVDR_CSTEPS type ZVCXI_F0SS_TT_PRVDR_DEF
    raising
      /VCXI/CX_CKX .

  methods INIT_NODE
    redefinition .
private section.
endclass. "ZCL_VCXI_F0SS_ND_CSTEP definition
class ZCL_VCXI_F0SS_ND_CSTEP implementation.
  method ADD_PRVDR.

    data: LF_POSID type  /VCXI/VKSR_POSID,
          LF_ID    type  /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type        ZVCXI_F0SS_S_PRVDR_DEF.
    data: LR_PR_CSTEP type ref to ZCL_VCXI_F0SS_PR_CSTEP,
          LR_CX_CKX   type ref to /VCXI/CX_CKX.

    check ME->R_GATE is bound.
    try.
        move ME->R_GATE->R_CLSPR ?to LR_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP.
    endtry.
    check LR_PR_CSTEP is bound.

    try.
***     Add conversion step if allowed
        LR_PR_CSTEP->ADD_CSTEP_PRVDR( exporting IF_FCODE     = IF_FCODE
                                                IT_PRVDR_DEF = ME->T_PRVDR_DEF ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method GET_CSTEPS_DEF.

    data: LR_PR_CSTEP type ref to ZCL_VCXI_F0SS_PR_CSTEP.

    check ME->R_GATE is bound.
    try .
        move ME->R_GATE->R_CLSPR ?to LR_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP.
    endtry.

    check LR_PR_CSTEP is bound.
    LR_PR_CSTEP->GET_CSTEPS_DEF( importing ET_PRVDR_CSTEPS = ET_PRVDR_CSTEPS ).

  endmethod.
  method GET_FCODE.

    data:          LS_PRVDR_DEF  type ZVCXI_F0SS_S_PRVDR_DEF.
    field-symbols: <S_FCODE>     type YS_FCODE.

    refresh: ME->T_PRVDR_DEF.

    SUPER->GET_FCODE( importing ET_FCODE = ET_FCODE ).
    check ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Add Provider Relations
    ME->GET_CSTEPS_DEF( importing ET_PRVDR_CSTEPS = ME->T_PRVDR_DEF ).

*** Create Separation Line
    if LINES( ME->T_PRVDR_DEF ) is not initial.
      append initial line to ET_FCODE assigning <S_FCODE>.
      move C_UC_BLANK                      to <S_FCODE>-FCODE.
      move C_TEXT_SEP                      to <S_FCODE>-TEXT.
    endif.

***--------------------------------------------------------------------------------------
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      if LS_PRVDR_DEF-ID eq C_UC_SPLIT.
***     Add Split option if available
        append initial line to ET_FCODE assigning <S_FCODE>.
        move LS_PRVDR_DEF-ID                 to <S_FCODE>-FCODE.
        move text-S01                        to <S_FCODE>-TEXT.

***     Add Separator line
        append initial line to ET_FCODE assigning <S_FCODE>.
        move C_UC_BLANK                      to <S_FCODE>-FCODE.
        move C_TEXT_SEP                      to <S_FCODE>-TEXT.

        continue.
      endif.

      append initial line to ET_FCODE assigning <S_FCODE>.
      concatenate C_UC_ADD LS_PRVDR_DEF-ID    into <S_FCODE>-FCODE separated by '@'.
      concatenate text-M01 LS_PRVDR_DEF-DESCR into <S_FCODE>-TEXT  separated by SPACE.
    endloop.

  endmethod.
  method HANDLE_UC_POPUP_SEL.

    data: LF_ID       type        /VCXI/CKX_ID.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

*** Call Super implementation
    SUPER->HANDLE_UC_POPUP_SEL( IF_FCODE = IF_FCODE ).

    try.
***     Trigger specific Add command
        if IF_FCODE cp 'ADD@*'.
          move IF_FCODE+4 to LF_ID.
          check LF_ID is not initial.
          ME->ADD_PRVDR( IF_FCODE = IF_FCODE ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_NODE.

    SUPER->INIT_NODE( ).

*** Initialize Node Values from Gate
    move 6 to ME->F_NETTYPE.

*** Set Node Description
    append value #( FL  = 0
                    VAL = ME->R_GATE->R_CLSPR->GET_DESCR( )
                  ) to ME->T_NVALS.

*** Set Status Icon
    ME->SET_STATUS_ICON( ).

  endmethod.
