
class ZCL_VCXI_FFSP_EA_MACHINE_PTP definition
  public
  inheriting from ZCL_VCXI_XCSP_EA_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_MACHINE_PTP type ref to ZCL_VCXI_FFSP_PR_MACHINE_PTP .

  methods GET_AUFAK
    redefinition .
  methods GET_QUANTITY
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSP_EA_MACHINE_PTP definition
class ZCL_VCXI_FFSP_EA_MACHINE_PTP implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
    try.
        move ME->R_GATE->R_CLSPR ?to ME->R_PR_MACHINE_PTP.
      catch CX_SY_MOVE_CAST_ERROR.
***     Element API ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '804'.
    endtry.

  endmethod.
  method GET_AUFAK.

    data: LS_KAUSF   type        ZVCXI_XCSP_S_KAUSF.
    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MFSO type ref to ZCL_VCXI_XCSP_PR_MFSO.


***------------------------------------------------------------------------------------------------
*** Use standard functionality to determin Scrap Factor
    SUPER->GET_AUFAK( importing EF_AUFAK   = EF_AUFAK
                                EF_AUFAK_X = EF_AUFAK_X ).

***------------------------------------------------------------------------------------------------
*** Determine Component Scrap on Low-Level Code 0
    LT_GATE = ME->R_PR_MACHINE->R_PR_MFMGR->GET_MFO( ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MFSO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MFSO.
      endtry.
      check LR_PR_MFSO is bound and
            LR_PR_MFSO->ZIF_VCXI_XCSP_MFSO~IS_ACTIVE_BY_CSPLIT( ) ne 2 and
            LR_PR_MFSO->ZIF_VCXI_XCSP_MFS~GET_DISST( ) eq 0.
      move LR_PR_MFSO->ZIF_VCXI_XCSP_MFSO~GET_KAUSF( ) to LS_KAUSF.
      exit.
    endloop.

*** Component Scrap on Low-Level Code 0 found
    if LS_KAUSF is not initial.
      try.
***       Increase Scrap by Component Scrap
          EF_AUFAK = ( ( ( 100 - EF_AUFAK ) / ( 1 + LS_KAUSF-KAUSF / 100 ) ) - 100 ) * -1.
        catch CX_SY_ARITHMETIC_OVERFLOW.
          move '99.999' to EF_AUFAK.
      endtry.
    endif.

  endmethod.
  method GET_QUANTITY.

    data: LF_UMREZ type UMREZ,
          LF_UMREN type UMREN.
    data: LS_MQTYI      type ZVCXI_XCSP_S_MQTYI,
          LS_QTY        type ZVCXI_XCSP_S_QTY,
          LS_MQTYI_AS_O type ZVCXI_XCSP_S_MQTYO,
          LS_FIDIM      type ZVCXI_FFSP_S_FIDIM.
    data: LT_FIDIM      type ZVCXI_FFSP_TT_FIDIM.
    data: LT_GATE       type /VCXI/VKSR_TT_GATE.

    check ME->R_PR_MACHINE_PTP is bound and
          ME->R_PR_MACHINE_PTP->R_RTE_CMACH is bound.

    if ME->R_PR_MACHINE_PTP->R_RTE_CMACH->R_MTYPE->F_RCALC eq /VCXI/CL_VSMC_MTYPE=>C_RCALC_I.
***--------------------------------------------------------------------------------------
***   Use Operation Quantity In
      move ME->R_PR_MACHINE_PTP->GET_MQTYI( ) to LS_MQTYI.

      move LS_MQTYI-MQTYI                     to EF_BMSCH.
      move ABAP_TRUE                          to EF_BMSCH_X.
      move LS_MQTYI-MQTYI_UOM                 to EF_MEINH.
      move ABAP_TRUE                          to EF_MEINH_X.

***   Get Flow In
      LT_FIDIM = ME->R_PR_MACHINE_PTP->GET_MFI_FIDIM( ).

    else.
***--------------------------------------------------------------------------------------
***   Convert Operation Quantity In to Out
      move ME->R_PR_MACHINE_PTP->GET_MQTYI( )   to LS_MQTYI.
      move LS_MQTYI-MQTYI                       to LS_QTY-QTY.
      move LS_MQTYI-MQTYI_UOM                   to LS_QTY-QTY_UOM .
      LS_MQTYI_AS_O = ME->R_PR_MACHINE_PTP->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO( IS_QTY = LS_QTY ).

      move LS_MQTYI_AS_O-MQTYO                  to EF_BMSCH.
      move ABAP_TRUE                            to EF_BMSCH_X.
      move LS_MQTYI_AS_O-MQTYO_UOM              to EF_MEINH.
      move ABAP_TRUE                            to EF_MEINH_X.

***   Get Flow Out
      LT_FIDIM = ME->R_PR_MACHINE_PTP->GET_MFO_FIDIM( ).
    endif.

*** Always up Round to next full
    call function 'ROUND'
      exporting
        INPUT  = EF_BMSCH
        SIGN   = '+'
      importing
        OUTPUT = EF_BMSCH.

***--------------------------------------------------------------------------------------
***   Determine Numerator/Denominator based on Film Dimension
    read table LT_FIDIM into LS_FIDIM index 1.
    ZCL_VCXI_XCS_SERVICE_UNIT=>CALC_UMREZ_UMREN( exporting IS_CALCV_BASE = value #( CALCV = LS_FIDIM-NOUPS * LS_FIDIM-RLETA )
                                                           IS_CALCV_ALT  = value #( CALCV = ME->GET_MFRAT( ) )
                                                 importing EF_UMREZ      = EF_UMREZ
                                                           EF_UMREN      = EF_UMREN ).
    EF_UMREZ_X = ABAP_TRUE.
    EF_UMREN_X = ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Alternate Units
    if EF_MEINH ne IF_PLNME.
      call function 'UNIT_CONVERSION_SIMPLE'
        exporting
          INPUT                = 1
          UNIT_IN              = IF_PLNME
          UNIT_OUT             = EF_MEINH
        importing
          DENOMINATOR          = LF_UMREZ
          NUMERATOR            = LF_UMREN
        exceptions
          CONVERSION_NOT_FOUND = 1
          DIVISION_BY_ZERO     = 2
          INPUT_INVALID        = 3
          OUTPUT_INVALID       = 4
          OVERFLOW             = 5
          TYPE_INVALID         = 6
          UNITS_MISSING        = 7
          UNIT_IN_NOT_FOUND    = 8
          UNIT_OUT_NOT_FOUND   = 9.
      if SY-SUBRC ne 0.
***     Ignore Conversion
        LF_UMREZ = 1.
        LF_UMREN = 1.
      endif.

***   Adjust Conversion based on Unit Conversion
      EF_UMREZ = EF_UMREZ * LF_UMREZ.
      EF_UMREN = EF_UMREN * LF_UMREN.
    endif.

  endmethod.
endclass. "ZCL_VCXI_FFSP_EA_MACHINE_PTP implementation
