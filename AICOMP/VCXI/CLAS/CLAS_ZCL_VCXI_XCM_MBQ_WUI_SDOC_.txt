
class ZCL_VCXI_XCM_MBQ_WUI_SDOC definition
  public
  inheriting from /VCXI/CL_CKMRU_CLWUI
  create public .

public section.

  constants C_UC_DESELECT_ALL type UI_FUNC value 'DESELECT_ALL' ##NO_TEXT.
  constants C_UC_SELECT_ALL type UI_FUNC value 'SELECT_ALL' ##NO_TEXT.
  data S_SDOC_VIS type ZVCXI_XCM_MBQ_S_WUI_SDOC_VIS .

  methods CONSTRUCTOR
    importing
      !IR_RECORD type ref to /VCXI/CL_CKMR_RECORD
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DCO_SDOC type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC .
  data R_SALV type ref to CL_SALV_TABLE .
  data R_DATA type ref to DATA .

  methods HANDLE_CHECKED_FUNCTION
    for event IF_SALV_EVENTS_ACTIONS_TABLE~LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods INTI_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods TOGGLE_SELECTION
    importing
      !IF_ALL type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_WUI_SDOC definition
class ZCL_VCXI_XCM_MBQ_WUI_SDOC implementation.
  method ACTIVATE.

*** Bind UI
    call function 'ZVCXI_XCM_MBQ_WUI_SDOC_BIND'
      exporting
        IR_WUI_SDOC = ME
      importing
        ES_DYNP     = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_RECORD = IR_RECORD ).

*** Map DCO
    ME->R_RECORD->MAP_DCO( changing CR_DCO = ME->R_DCO_SDOC ).

*** Load existing Business Object for Sales Documents
    if ME->R_DCO_SDOC is bound and
       ME->R_DCO_SDOC->R_BOB_SDOC is bound.
      ME->R_BOB_SDOC = ME->R_DCO_SDOC->R_BOB_SDOC.
    endif.
    if ME->R_DCO_SDOC->S_START-VBELN is not initial.
      create object ME->R_BOB_SDOC.
      ME->R_BOB_SDOC->INIT_FROM_DB( IF_VBELN = ME->R_DCO_SDOC->S_START-VBELN
                                    IS_ORDER_VIEW = value #( HEADER = ABAP_TRUE
                                                             ITEM   = ABAP_TRUE ) ).
    endif.

*** Create Grid Data Reference
    create data ME->R_DATA type table of ZVCXI_XCM_MBQ_S_SDOC_POS_GRID.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method DO_PBO.

*** Initialize VIS Structure
    ME->INIT_VIS( ).

*** Modify Screen
    ME->MODIFY_SCREEN( ).

*** Refresh Grid
    ME->INTI_GRID_DATA( ).
    ME->REFRESH_GRID( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_WUI_SDOC_VIS type ZVCXI_XCM_MBQ_S_WUI_SDOC_VIS,
          LS_START        type ZVCXI_XCM_MBQ_S_START.


*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_WUI_SDOC_VIS.

***--------------------------------------------------------------------------------------
*** Collect Start Conditions
    LS_START = corresponding #( base ( ME->R_DCO_SDOC->S_START ) LS_WUI_SDOC_VIS ).

*** Check Sales Document changed
    if ME->R_BOB_SDOC is not bound or
       ME->R_BOB_SDOC->S_VBAK-VBELN ne LS_WUI_SDOC_VIS-VBELN.
      clear ME->R_BOB_SDOC.
      if LS_WUI_SDOC_VIS-VBELN is not initial.
        create object ME->R_BOB_SDOC.
        ME->R_BOB_SDOC->INIT_FROM_DB( IF_VBELN = LS_WUI_SDOC_VIS-VBELN
                                      IS_ORDER_VIEW = value #( HEADER = ABAP_TRUE
                                                               ITEM   = ABAP_TRUE ) ).
      endif.

***   Uncheck all Positions when Sales Document has changed
      clear LS_START-T_POSNR.
    endif.

*** Set Start Conditions
    ME->R_DCO_SDOC->SET_START( IS_START = LS_START ).

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_SELECT_ALL.
        ME->TOGGLE_SELECTION( IF_ALL = ABAP_TRUE ).
      when C_UC_DESELECT_ALL.
        ME->TOGGLE_SELECTION( IF_ALL = ABAP_FALSE ).
    endcase.

  endmethod.
  method HANDLE_CHECKED_FUNCTION.

    data: LS_START type ZVCXI_XCM_MBQ_S_START.
    data: LS_POS_GRID type ZVCXI_XCM_MBQ_S_SDOC_POS_GRID.
    field-symbols: <T_POS_GRID> type TABLE.


    try.
***------------------------------------------------------------------------------------------------
***     Is Record Locked?
        check ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***     Dereference Data
        check ME->R_DATA is bound.
        assign ME->R_DATA->* to <T_POS_GRID>.

***     Get the value of the checkbox and set the value accordingly
        check LINE_EXISTS( <T_POS_GRID>[ ROW ] ).
        LS_POS_GRID = corresponding #( <T_POS_GRID>[ ROW ] ).

***     Do not select higher level items
        check LS_POS_GRID-UEPOS is initial.

***     Only allow items w/o Reason for Rejection
        check LS_POS_GRID-ABGRU is initial.

***------------------------------------------------------------------------------------------------
***     Toggle Flag
        LS_POS_GRID-FLSEL = switch #( LS_POS_GRID-FLSEL when ABAP_TRUE  then ABAP_FALSE
                                                        when ABAP_FALSE then ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***     Collect selected Positions
        LS_START = ME->R_DCO_SDOC->S_START.
        if LS_POS_GRID-FLSEL eq ABAP_TRUE.
          insert LS_POS_GRID-POSNR into table LS_START-T_POSNR.
        else.
          delete LS_START-T_POSNR where TABLE_LINE eq LS_POS_GRID-POSNR.
        endif.

***     Set Position List to Start Condition
        ME->R_DCO_SDOC->SET_START( IS_START = LS_START ).


***------------------------------------------------------------------------------------------------
***     Refresh the table
        ME->INTI_GRID_DATA( ).
        ME->R_SALV->REFRESH( ).

      catch /VCXI/CX_CKX .                              "#EC NO_HANDLER
***     ignore error here
    endtry.

  endmethod.
  method INIT_VIS.

    clear: ME->S_SDOC_VIS.

*** Sales Document Data
    ME->S_SDOC_VIS = corresponding #( ME->R_DCO_SDOC->S_START ).

  endmethod.
  method INTI_GRID_DATA.

    data: LF_POSNR type POSNR.
    data: LS_POS_GRID type ZVCXI_XCM_MBQ_S_SDOC_POS_GRID.
    field-symbols: <T_POS_GRID> type TABLE,
                   <S_POS_GRID> type ANY.


*** Dereference Data
    check ME->R_DATA is bound.
    assign ME->R_DATA->* to <T_POS_GRID>.

    free: <T_POS_GRID>.

*** Check Business Object is bound
    check ME->R_BOB_SDOC is bound.

*** Get Positions from Business Object
    <T_POS_GRID> = corresponding #( ME->R_BOB_SDOC->T_VBAP ).

*** Mark selected Lines
    loop at <T_POS_GRID> assigning <S_POS_GRID>.
      LS_POS_GRID = corresponding #( <S_POS_GRID> ).
      if LINE_EXISTS( ME->R_DCO_SDOC->S_START-T_POSNR[ TABLE_LINE = LS_POS_GRID-POSNR ] ).
        LS_POS_GRID-FLSEL = ABAP_TRUE.
      endif.
      <S_POS_GRID> = corresponding #( base ( <S_POS_GRID> ) LS_POS_GRID ).
    endloop.

  endmethod.
  method MODIFY_SCREEN.

    data:  LF_LOCKED type /VCXI/CKX_LOCKED.

*** Is Record Locked?
    move ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Adjust Screen
    loop at screen.
      if LF_LOCKED ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
        move 0 to SCREEN-REQUIRED.
      endif.

      modify screen.
    endloop.

  endmethod.
  method REFRESH_GRID.

    data: LR_COLUMN type ref to CL_SALV_COLUMN_LIST.
    field-symbols: <T_POS_GRID> type TABLE.


*** Dereference Data
    check ME->R_DATA is bound.
    assign ME->R_DATA->* to <T_POS_GRID>.

***------------------------------------------------------------------------------------------------
*** Create Container
    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0100CC_POS_GRID'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.


***------------------------------------------------------------------------------------------------
    try.
***     Create Simple ALV
        if ME->R_SALV is not bound.
          CL_SALV_TABLE=>FACTORY( exporting R_CONTAINER  = ME->R_CONTAINER
                                  importing R_SALV_TABLE = ME->R_SALV
                                  changing  T_TABLE      = <T_POS_GRID> ).

***       Register to Events
          set handler ME->HANDLE_CHECKED_FUNCTION for ME->R_SALV->GET_EVENT( ).
        endif.

***     Set the Column optimization
        ME->R_SALV->GET_COLUMNS( )->SET_OPTIMIZE( 'X' ).

***     Change the properties of the Columns FLSEL
        LR_COLUMN ?= ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'FLSEL' ).
        LR_COLUMN->SET_OUTPUT_LENGTH( 10 ).
        if ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
          LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX_HOTSPOT ).
        else.
          LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX ).
        endif.


***     Refresh Display
        ME->R_SALV->DISPLAY( ).

      catch CX_SALV_ERROR.                              "#EC NO_HANDLER
    endtry.

  endmethod.
  method TOGGLE_SELECTION.

    data: LS_START type ZVCXI_XCM_MBQ_S_START.
    data: LS_POS_GRID type ZVCXI_XCM_MBQ_S_SDOC_POS_GRID.
    field-symbols: <T_POS_GRID> type TABLE,
                   <S_POS_GRID> type ANY.


    try.
***     Is Record Locked?
        check ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***     Dereference Data
        check ME->R_DATA is bound.
        assign ME->R_DATA->* to <T_POS_GRID>.

***------------------------------------------------------------------------------------------------
***     Initial Start Condition
        LS_START = ME->R_DCO_SDOC->S_START.
        free LS_START-T_POSNR.

***     Get the value of the checkbox and set the value accordingly
        loop at <T_POS_GRID> assigning <S_POS_GRID>.
          LS_POS_GRID = corresponding #( <S_POS_GRID> ).

          if LS_POS_GRID-UEPOS is initial.
***         Set selection / deselection
            LS_POS_GRID-FLSEL = IF_ALL.
            <S_POS_GRID> = corresponding #( base ( <S_POS_GRID> ) LS_POS_GRID ).
          endif.

          if LS_POS_GRID-FLSEL eq ABAP_TRUE.
            insert LS_POS_GRID-POSNR into table LS_START-T_POSNR.
          endif.
        endloop.

***     Set Position List to Start Condition
        ME->R_DCO_SDOC->SET_START( IS_START = LS_START ).

***------------------------------------------------------------------------------------------------
***     Refresh the table
        ME->INTI_GRID_DATA( ).
        ME->R_SALV->REFRESH( ).

      catch /VCXI/CX_CKX.                               "#EC NO_HANDLER
***     ignore error here
    endtry.

  endmethod.
