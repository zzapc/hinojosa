
class ZCL_VCXI_P1SS_PR_MS_CRPROC definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_MS_XPROC
  create public .

public section.

  interfaces ZIF_VCXI_P1SS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .

  constants C_IEVNT_O_ADDWT_CHANGED type /VCXI/VKSC_IEVNT value 'ADDWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FLUTE_CHANGED type /VCXI/VKSC_IEVNT value 'FLUTE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRBOA_CHANGED type /VCXI/VKSC_IEVNT value 'PRBOA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SABOA_CHANGED type /VCXI/VKSC_IEVNT value 'SABOA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P1_MS_CRPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_MS_CRPROC' ##NO_TEXT.
  constants C_PARID_ADDWT type /VCXI/VKS_PARID value 'ZVCXI_PX_ADDWT' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_FLUTE type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTE' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.
  constants C_PARID_PRBOA type /VCXI/VKS_PARID value 'ZVCXI_P1_PRBOA' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_SABOA type /VCXI/VKS_PARID value 'ZVCXI_P1_SABOA' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods GET_ADDWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PRBOA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PRBOA) type ZVCXI_PCSS_PRBOA
    raising
      /VCXI/CX_CKX .
  methods GET_SABOA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SABOA) type ZVCXI_PCSS_SABOA
    raising
      /VCXI/CX_CKX .
  methods GET_SCORES
    exporting
      !ES_PRSLE type ZVCXI_PXS_S_PRSLE
      !ES_PRSWI type ZVCXI_PXS_S_PRSWI
    returning
      value(RT_SCORE_COM) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_BAWGT type ZVCXI_P0S_S_BAWGT
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods LOAD_BOARD
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_PRBOA
    importing
      !IF_PRBOA type ZVCXI_PCSS_PRBOA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SABOA
    importing
      !IF_SABOA type ZVCXI_PCSS_SABOA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_O_CRBPX_CHANGED type /VCXI/VKSC_IEVNT value 'CRBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_PARID_CRBPX type /VCXI/VKS_PARID value 'ZVCXI_P1_CRBPX' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.

  methods CHECK_CALIP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_FLUTE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SURWT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_CRBPX
    importing
      !IF_CRBPX type ZVCXI_P1S_CRBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_MS_CRPROC definition
class ZCL_VCXI_P1SS_PR_MS_CRPROC implementation.
  method CHECK_CALIP.

*** Check Caliper
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '125' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '126' ).
      endif.
    endif.

  endmethod.
  method CHECK_FLUTE.

*** Check Flute
    if ME->GET_FLUTE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Flute is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '123' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Flute is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '124' ).
      endif.
    endif.

  endmethod.
  method CHECK_SCORES.

*** Only check if it's not a dummy
    check not ME->IS_DUMMY( ).

*** Compare Scores of Procurement with required Score Communication (Outbound)
    if ME->GET_SCORES( ) eq ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_SCORE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Procurement fulfills required score definition
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '121' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Procurement doesn't fulfill required score definition
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '122' ).
      endif.
    endif.

  endmethod.
  method CHECK_SURWT.

*** Check Surface Weight
    if ME->GET_SURWT( )-SURWT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Surface Weight is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '127' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Surface Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '128' ).
      endif.
    endif.

  endmethod.
  method GET_ADDWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).
    move LS_PARAM-ATFLV to RS_ADDWT-ADDWT.
    move LS_PARAM-UNIT  to RS_ADDWT-ADDWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CALIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
    move LS_PARAM-ATFLV to RS_CALIP-CALIP.
    move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FLUTE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).
    RF_FLUTE = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_FLUTE is not initial.

***--------------------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_FLUTE_DESCR( IF_FLUTE = RF_FLUTE ).
    endif.

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = cond #( when ME->IS_DUMMY( ) ne ABAP_TRUE then ABAP_UNDEFINED
                       when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_PRBOA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRBOA ).
    move LS_PARAM-ATWRT to RF_PRBOA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SABOA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SABOA ).
    move LS_PARAM-ATWRT to RF_SABOA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SCORES.

    data: LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


***--------------------------------------------------------------------------------------
    if ME->IS_DUMMY( ).
***   Get Corrugated Backward Property XML (Outbound)
      LR_BL_CRBPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
      check LR_BL_CRBPROP is bound.
      RT_SCORE_COM = LR_BL_CRBPROP->T_SCORE.
    else.
***   Get Scores from Corrugated Procurement
      if ME->R_CUST_MATNR is instance of ZCL_VCXI_P1SS_CUST_CRPROC.
        RT_SCORE_COM = cast ZCL_VCXI_P1SS_CUST_CRPROC( ME->R_CUST_MATNR )->T_SCORE_COM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if ES_PRSLE is requested or
       ES_PRSWI is requested.
***   Calculate Dimensions based on Scores
      ZCL_VCXI_PXSS_BL_SCORE=>GET_SHTDIM( exporting IT_SCORE_COM = RT_SCORE_COM
                                          importing ES_SHTLE     = ES_PRSLE
                                                    ES_SHTWI     = ES_PRSWI ).
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Flute
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_FLUTE( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

*** Check Surface Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SURWT( ) ).

***----------------------------------------------------------------------------
*** Check Scores
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SCORES( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Flute
    ME->CHECK_FLUTE( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

*** Check Surface Weight
    ME->CHECK_SURWT( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Scores
    ME->CHECK_SCORES( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    if ES_BAWGT is requested or
       ES_BAWGP is requested.
***   Fixed Base Weight Unit as base for Base Weight
      ES_BAWGP-BAWGP     = 1000.
      ES_BAWGP-BAWGP_UOM = 'M2'.

***   Calculate Base Weight by Surface Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = ES_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = ES_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = ES_BAWGT-BAWGT
                                                          EF_CALCV_UOM   = ES_BAWGT-BAWGT_UOM ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR   type MATNR,
          LF_WERKS   type WERKS_D,
          LF_DCONF   type DATS,
          LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_ALLOWED type ABAP_BOOL.
    data: LR_CUST_CRPROC type ref to ZCL_VCXI_P1SS_CUST_CRPROC.


    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          LR_CUST_CRPROC ?= ZCL_VCXI_P1SS_CUST_CRPROC=>GET_INSTANCE_CRPROC( IF_MATNR = LF_MATNR
                                                                            IF_WERKS = LF_WERKS
                                                                            IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          clear LR_CUST_CRPROC.
      endtry.
    endif.

    ME->R_CUST_MATNR = LR_CUST_CRPROC.

***--------------------------------------------------------------------------------------
*** Set Values for Real Procurement
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_PRODH(  IF_PRODH = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->F_PRODH )
                      IF_SETBY = LF_SETBY ).
      ME->SET_SABOA(  IF_SABOA = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->F_SABOA )
                      IF_SETBY = LF_SETBY ).
      ME->SET_PRBOA(  IF_PRBOA = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->F_PRBOA )
                      IF_SETBY = LF_SETBY ).
      ME->SET_FLUTE(  IF_FLUTE = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->F_FLUTE )
                      IF_SETBY = LF_SETBY ).
      ME->SET_ADDWT(  IS_ADDWT = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->S_ADDWT )
                      IF_SETBY = LF_SETBY ).
      ME->SET_CALIP(  IS_CALIP = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->S_CALIP )
                      IF_SETBY = LF_SETBY ).
      ME->SET_SURWT(  IS_SURWT = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->S_SURWT )
                      IF_SETBY = LF_SETBY ).
      ME->SET_HNDDIM( IS_HNDDIM = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->S_HNDDIM )
                      IF_SETBY = LF_SETBY ).
      ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IT_PRINT_COM = cond #( when LR_CUST_CRPROC is bound then LR_CUST_CRPROC->T_PRINT_COM )
                                                 IF_SETBY     = LF_SETBY ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if Component Scrap can be defined
    ME->GET_KAUSF( importing EF_ALLOWED = LF_ALLOWED ).
    if LF_ALLOWED ne ABAP_TRUE.
***   Clear Component Scrap
      ME->SET_KAUSF( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM,
          LS_SHTLE  type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI  type ZVCXI_P0SS_S_SHTWI.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


***--------------------------------------------------------------------------------------
*** Do only Recalc Folding Dimensions if they are not overridden or defined by material.
    LS_HNDDIM = ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
    clear: LS_HNDDIM-HNDLE,
           LS_HNDDIM-HNDWI,
           LS_HNDDIM-HNDHE.

*** Get Corrugator Forward and Backward Property (Outbound)
    LR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( ).
    LR_BL_CRBPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    if LR_BL_CRFPROP is bound and
       LR_BL_CRBPROP is bound.

***   For Closed Products use Folding Dimension
      if LR_BL_CRFPROP->GET_TFOLD( ) eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
        LS_HNDDIM = value #( HNDLE     = LR_BL_CRBPROP->S_FOLDIM-FOLLE
                             HNDLE_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLLE_UOM
                             HNDWI     = LR_BL_CRBPROP->S_FOLDIM-FOLWI
                             HNDWI_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLWI_UOM
                             HNDHE     = LR_BL_CRBPROP->S_FOLDIM-FOLHE
                             HNDHE_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLHE_UOM ).
      else.
***     Otherwise use Sheet Dimension
        LR_BL_CRBPROP->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                             ES_SHTWI = LS_SHTWI ).
        LS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                             HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                             HNDWI     = LS_SHTWI-SHTWI
                             HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                             HNDHE     = LR_BL_CRFPROP->S_CALIP-CALIP
                             HNDHE_UOM = LR_BL_CRFPROP->S_CALIP-CALIP_UOM ).
      endif.
    endif.

*** Ensure no negative Values have been calculated
    LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
    LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
    LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method LOAD_BOARD.

    data: LF_DCONF type /VCXI/VKCR_DCONF.
    data: LS_CALIP       type ZVCXI_P0SS_S_CALIP,
          LS_CALCV_SURWT type ZVCXI_XCS_S_CALCV,
          LS_SURWT       type ZVCXI_PXS_S_SURWT,
          LS_SURWT_TMP   type ZVCXI_PXS_S_SURWT,
          LS_BGWHT       type ZVCXI_PCSS_S_BGWHT.
    data: LS_BPAP type ZVCXI_PCSS_S_BPAP,
          LS_BSTA type ZVCXI_PCSS_S_BSTA,
          LS_BWAX type ZVCXI_PCSS_S_BWAX.
    data: LR_CUST_BOARD  type ref to ZCL_VCXI_PCSS_CUST_BOARD,
          LR_CUST_PAPER  type ref to ZCL_VCXI_PCSS_CUST_PAPER,
          LR_CUST_STARCH type ref to ZCL_VCXI_P1SS_CUST_STARCH,
          LR_CUST_WAX    type ref to ZCL_VCXI_P1SS_CUST_WAX.


*** Get Configuration Date
    LF_DCONF = ME->R_GATE->GET_APPDATA( )->F_DCONF.

***--------------------------------------------------------------------------------------
*** Get Board Customizing
    LR_CUST_BOARD = ZCL_VCXI_PCSS_CUST_BOARD=>GET_INSTANCE( IF_BOARD = IF_BOARD
                                                            IF_MBOAR = IF_MBOAR
                                                            IF_WERKS = IF_WERKS
                                                            IF_DATE  = LF_DCONF ).
    check LR_CUST_BOARD is bound.

***--------------------------------------------------------------------------------------
*** Set BoardID
    ME->SET_SABOA( IF_SABOA = LR_CUST_BOARD->F_BOARD ).
    ME->SET_PRBOA( IF_PRBOA = cond #( let LF_APBOA = LR_CUST_BOARD->GET_APBOA( ) in
                                      when LF_APBOA is not initial then LF_APBOA
                                                                   else LR_CUST_BOARD->F_BOARD ) ).

*** Set Flute
    ME->SET_FLUTE( IF_FLUTE = LR_CUST_BOARD->F_FLUTE ).


*** Get Parameter Units
    LS_CALIP = value #( CALIP_UOM = ME->GET_CALIP( )-CALIP_UOM ).
    LS_SURWT = value #( SURWT_UOM = ME->GET_SURWT( )-SURWT_UOM ).

***--------------------------------------------------------------------------------------
*** Loop at Papers based on Default Work Center
    loop at LR_CUST_BOARD->GET_BPAP( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ) into LS_BPAP.
***   Get Paper Customizing
      LR_CUST_PAPER = ZCL_VCXI_PCSS_CUST_PAPER=>GET_INSTANCE_PAPER( IF_MATNR = LS_BPAP-BPMAT
                                                                    IF_WERKS = IF_WERKS
                                                                    IF_DATE  = LF_DCONF ).
***   Calculate the Caliper
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LR_CUST_PAPER->S_CALIP-CALIP
                                                          IF_CALCV_UOM_1 = LR_CUST_PAPER->S_CALIP-CALIP_UOM
                                                          IF_CALCV_2     = LS_CALIP-CALIP
                                                          IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALIP-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP-CALIP_UOM ).

***   Calculate Surface Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LR_CUST_PAPER->S_BAWGT-BAWGT
                                                          IF_CALCV_UOM_1 = LR_CUST_PAPER->S_BAWGT-BAWGT_UOM
                                                          IF_CALCV_2     = LR_CUST_PAPER->S_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = LR_CUST_PAPER->S_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_CALCV_SURWT-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV_SURWT-CALCV_UOM ).

      LS_CALCV_SURWT-CALCV = LS_CALCV_SURWT-CALCV * LS_BPAP-BPFAC.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_SURWT-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV_SURWT-CALCV_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Add Starch to Surface Weight
    LS_BSTA = LR_CUST_BOARD->GET_BSTA( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ).
    if LS_BSTA-STMAT is not initial.
      LR_CUST_STARCH = ZCL_VCXI_P1SS_CUST_STARCH=>GET_INSTANCE_STARCH( IF_MATNR = LS_BSTA-STMAT
                                                                       IF_WERKS = IF_WERKS
                                                                       IF_DATE  = LF_DCONF ).
***   Get Surface Weight
      LS_SURWT_TMP = LR_CUST_STARCH->GET_SURWT( IF_UOM   = LS_SURWT-SURWT_UOM
                                                IF_STARF = LS_BSTA-STARF ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_TMP-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT_TMP-SURWT_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).
    endif.


***--------------------------------------------------------------------------------------
*** Add Wax to Surface Weight
    loop at LR_CUST_BOARD->GET_BWAX( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ) into LS_BWAX.
      LR_CUST_WAX = ZCL_VCXI_P1SS_CUST_WAX=>GET_INSTANCE_WAX( IF_MATNR = LS_BWAX-WAMAT
                                                              IF_WERKS = IF_WERKS
                                                              IF_DATE  = LF_DCONF ).
***   Get Surface Weight
      LS_SURWT_TMP = LR_CUST_WAX->GET_SURWT( IF_UOM   = LS_SURWT-SURWT_UOM
                                             IF_WAXFA = LS_BWAX-WAXFA ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_TMP-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT_TMP-SURWT_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

    endloop.

***--------------------------------------------------------------------------------------
*** Add BoardGrade Wall Height to Caliper
    LS_BGWHT = LR_CUST_BOARD->GET_BGWHT( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ).
    if LS_BGWHT-BGWHT_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWHT-BGWHT
                                                          IF_CALCV_UOM_1 = LS_BGWHT-BGWHT_UOM
                                                          IF_CALCV_2     = LS_CALIP-CALIP
                                                          IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALIP-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP-CALIP_UOM ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Caliper
    ME->SET_CALIP( IS_CALIP = LS_CALIP ).

*** Set Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method SET_ADDWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).

    LS_PARAM-ATFLV = IS_ADDWT-ADDWT.
    LS_PARAM-UNIT  = IS_ADDWT-ADDWT_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ADDWT_CHANGED ).
    endif.

  endmethod.
  method SET_CALIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

    LS_PARAM-ATFLV = IS_CALIP-CALIP.
    LS_PARAM-UNIT  = IS_CALIP-CALIP_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
    endif.

  endmethod.
  method SET_CRBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).

    move IF_CRBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CRBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FLUTE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).

    LS_PARAM-ATWRT = IF_FLUTE.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTE_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_PRBOA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRBOA ).

    LS_PARAM-ATWRT = IF_PRBOA.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRBOA_CHANGED ).
    endif.

  endmethod.
  method SET_SABOA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SABOA ).

    LS_PARAM-ATWRT = IF_SABOA.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SABOA_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CRBPX ).
    move LS_PARAM-STRNG to EF_CRBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Corrugator Backward Property Instance
    if RR_BL_CRBPROP is requested.
      RR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( IF_CRBPX = EF_CRBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

***--------------------------------------------------------------------------------------
*** Get Corrugator Forward Property (Inbound)
    RR_BL_CRFPROP = ZCL_VCXI_P1SS_BL_CRFPROP=>FACTORY( ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Sales Board ID
    RR_BL_CRFPROP->SET_SABOA( IF_SABOA = ME->GET_SABOA( ) ).

*** Production Board ID
    RR_BL_CRFPROP->SET_PRBOA( IF_PRBOA = ME->GET_PRBOA( ) ).

*** Flute
    RR_BL_CRFPROP->SET_FLUTE( IF_FLUTE = ME->GET_FLUTE( ) ).

*** Caliper
    RR_BL_CRFPROP->SET_CALIP( IS_CALIP = ME->GET_CALIP( ) ).

*** Additional Weigth
    RR_BL_CRFPROP->SET_ADDWT( IS_ADDWT = ME->GET_ADDWT( ) ).

*** Handling Dimensions
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

*** Print Definition
    RR_BL_CRFPROP->SET_PRINT( IT_PRINT = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( ) ).

*** Joint Type directly from Material
    if ME->R_CUST_MATNR is instance of ZCL_VCXI_P1SS_CUST_CRPROC.
      RR_BL_CRFPROP->SET_JOITY( IT_JOITY = cast ZCL_VCXI_P1SS_CUST_CRPROC( ME->R_CUST_MATNR )->T_JOITY ).
    endif.

*** Product Hierarchy
    RR_BL_CRFPROP->SET_PRODH( IF_PRODH = ME->GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM.

    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI ).

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_SURWT.

    RS_SURWT = ME->GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P1SS_COMM_PREV,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Corrugator Backward Property Instance
    LR_BL_CRBPROP = ZCL_VCXI_P1SS_BL_CRBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Number of Ups
      LF_NOUPS = LR_COMM_PREV->GET_NOUPS( ).

***   Combine Corrugator Backward Property
      LR_BL_CRBPROP->MERGE( IR_BL_CRBPROP = LR_COMM_PREV->GET_CRBPX( ) ).
    endloop.

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Corrugator Backward Property XML
    ME->SET_CRBPX( IF_CRBPX = LR_BL_CRBPROP->GET_CRBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LR_DATA_SUPER type ref to DATA.
    field-symbols: <S_FDI_SUPER>     type ANY,
                   <S_FDI_MS_CRPROC> type ZVCXI_P1SS_S_FDI_MS_CRPROC.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FDI_MS_CRPROC.
    assign RR_DATA->* to <S_FDI_MS_CRPROC>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_MS_CRPROC>-S_FDI_MS_XPROC = corresponding #( <S_FDI_SUPER> ).
    endif.


***--------------------------------------------------------------------------------------
*** Sales and Production Board
    <S_FDI_MS_CRPROC>-SABOA = ME->GET_SABOA( ).
    <S_FDI_MS_CRPROC>-PRBOA = ME->GET_PRBOA( ).

*** Flute
    <S_FDI_MS_CRPROC>-FLUTE = ME->GET_FLUTE( ).

*** Caliper
    <S_FDI_MS_CRPROC>-S_CALIP = ME->GET_CALIP( ).

*** Surface Weight
    <S_FDI_MS_CRPROC>-S_SURWT = ME->GET_SURWT( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_MS_CRPROC_OLD type ZVCXI_P1SS_S_FDI_MS_CRPROC,
          LS_FDI_MS_CRPROC_NEW type ZVCXI_P1SS_S_FDI_MS_CRPROC.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data new Data
    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_MS_CRPROC_NEW = corresponding #( <S_DATA> ).
    endif.

*** Dereference Data old Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_MS_CRPROC_OLD = corresponding #( <S_DATA> ).
    endif.

*** Set SUPER Data
    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = ref #( LS_FDI_MS_CRPROC_NEW-S_FDI_MS_XPROC )
                                       IR_DATA_OLD = ref #( LS_FDI_MS_CRPROC_OLD-S_FDI_MS_XPROC ) ).

***--------------------------------------------------------------------------------------
*** Set Sales Board ID
    if LS_FDI_MS_CRPROC_OLD-SABOA ne LS_FDI_MS_CRPROC_NEW-SABOA.
      ME->SET_SABOA( IF_SABOA = LS_FDI_MS_CRPROC_NEW-SABOA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Production Board ID
    if LS_FDI_MS_CRPROC_OLD-PRBOA ne LS_FDI_MS_CRPROC_NEW-PRBOA.
      ME->SET_PRBOA( IF_PRBOA = LS_FDI_MS_CRPROC_NEW-PRBOA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flute
    if LS_FDI_MS_CRPROC_OLD-FLUTE ne LS_FDI_MS_CRPROC_NEW-FLUTE.
      ME->SET_FLUTE( IF_FLUTE = LS_FDI_MS_CRPROC_NEW-FLUTE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Caliper
    if LS_FDI_MS_CRPROC_OLD-S_CALIP ne LS_FDI_MS_CRPROC_NEW-S_CALIP.
      ME->SET_CALIP( IS_CALIP = LS_FDI_MS_CRPROC_NEW-S_CALIP
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Surface Weight
    if LS_FDI_MS_CRPROC_OLD-S_SURWT ne LS_FDI_MS_CRPROC_NEW-S_SURWT.
      ME->SET_SURWT( IS_SURWT = LS_FDI_MS_CRPROC_NEW-S_SURWT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->IS_DUMMY( ) when ABAP_TRUE then ABAP_TRUE
                                                           else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->GET_FLUTE( )  "Flute
                                changing  CT_ATTR  = LT_ATTR ).
    data(LS_CALIP) = ME->GET_CALIP( ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_CALIP-CALIP
                                          IF_UOM   = LS_CALIP-CALIP_UOM
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://tag'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
