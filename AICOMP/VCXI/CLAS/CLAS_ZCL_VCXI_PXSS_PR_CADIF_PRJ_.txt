
class ZCL_VCXI_PXSS_PR_CADIF_PRJ definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_LTEXT .

  constants C_CADLS_LOCKED type ZVCXI_PXS_CADLS value 'L' ##NO_TEXT.
  constants C_CADLS_OPEN type ZVCXI_PXS_CADLS value 'O' ##NO_TEXT.
  constants C_CADLS_REVISION type ZVCXI_PXS_CADLS value 'R' ##NO_TEXT.
  constants C_IEVNT_O_CADDE_CHANGED type /VCXI/VKSC_IEVNT value 'CADDE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CADPI_CHANGED type /VCXI/VKSC_IEVNT value 'CADPI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CADPO_CHANGED type /VCXI/VKSC_IEVNT value 'CADPO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CADPS_CHANGED type /VCXI/VKSC_IEVNT value 'CADPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPDFR_CHANGED type /VCXI/VKSC_IEVNT value 'FPDFR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPRJR_CHANGED type /VCXI/VKSC_IEVNT value 'FPRJR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FREVR_CHANGED type /VCXI/VKSC_IEVNT value 'FREVR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KDMAT_CHANGED type /VCXI/VKSC_IEVNT value 'KDMAT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KDPTX_CHANGED type /VCXI/VKSC_IEVNT value 'KDPTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRREF_CHANGED type /VCXI/VKSC_IEVNT value 'PRREF_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_CADIF_PRJ type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_CADIF_PRJ' ##NO_TEXT.
  constants C_OREVR_DEFAULT type ZVCXI_PXS_OREVR value 'D' ##NO_TEXT.
  constants C_OREVR_MANDATORY type ZVCXI_PXS_OREVR value 'M' ##NO_TEXT.
  constants C_OREVR_OPTIONAL type ZVCXI_PXS_OREVR value '' ##NO_TEXT.
  constants C_PARID_CADDE type /VCXI/VKS_PARID value 'ZVCXI_PX_CADDE' ##NO_TEXT.
  constants C_PARID_CADDL type /VCXI/VKS_PARID value 'ZVCXI_PX_CADDL' ##NO_TEXT.
  constants C_PARID_CADPI type /VCXI/VKS_PARID value 'ZVCXI_PX_CADPI' ##NO_TEXT.
  constants C_PARID_CADPO type /VCXI/VKS_PARID value 'ZVCXI_PX_CADPO' ##NO_TEXT.
  constants C_PARID_CADPS type /VCXI/VKS_PARID value 'ZVCXI_PX_CADPS' ##NO_TEXT.
  constants C_PARID_FPDFR type /VCXI/VKS_PARID value 'ZVCXI_PX_FPDFR' ##NO_TEXT.
  constants C_PARID_FPRJR type /VCXI/VKS_PARID value 'ZVCXI_PX_FPRJR' ##NO_TEXT.
  constants C_PARID_FREVR type /VCXI/VKS_PARID value 'ZVCXI_PX_FREVR' ##NO_TEXT.
  constants C_PARID_KDMAT type /VCXI/VKS_PARID value 'ZVCXI_XC_KDMAT' ##NO_TEXT.
  constants C_PARID_KDPTX type /VCXI/VKS_PARID value 'ZVCXI_XC_KDPTX' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_PRREF type /VCXI/VKS_PARID value 'ZVCXI_PX_PRREF' ##NO_TEXT.

  methods GET_CADDE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CADDE) type ZVCXI_PXS_CADDE
    raising
      /VCXI/CX_CKX .
  methods GET_CADDL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_CADDL) type ZVCXI_PXS_TT_CADDL
    raising
      /VCXI/CX_CKX .
  methods GET_CADIF_IO
    returning
      value(RR_CADIF_IO) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_CADPI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CADPI) type ZVCXI_PXS_CADPI
    raising
      /VCXI/CX_CKX .
  methods GET_CADPO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CADPO) type ZVCXI_PXS_CADPO
    raising
      /VCXI/CX_CKX .
  methods GET_CADPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_CADPS_PREV type ZVCXI_PXS_CADPS
      !ET_CADPS_NEXT type ZVCXI_PXS_TT_CADPS
    returning
      value(RF_CADPS) type ZVCXI_PXS_CADPS
    raising
      /VCXI/CX_CKX .
  methods GET_FPDFR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPDFR) type ZVCXI_PXS_FPDFR
    raising
      /VCXI/CX_CKX .
  methods GET_FPRJR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPRJR) type ZVCXI_PXS_FPRJR
    raising
      /VCXI/CX_CKX .
  methods GET_FREVR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FREVR) type ZVCXI_PXS_FREVR
    raising
      /VCXI/CX_CKX .
  methods GET_ICADO_BY_GCADO
    importing
      !IF_GCADO type ZVCXI_PXS_GCADO
    returning
      value(RF_ICADO) type ZVCXI_PXS_ICADO
    raising
      /VCXI/CX_CKX .
  methods GET_KDMAT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_KDMAT) type KDMAT
    raising
      /VCXI/CX_CKX .
  methods GET_KDPTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_KDPTX) type KDPTX
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_MARC
    returning
      value(RS_MARC) type MARC
    raising
      /VCXI/CX_CKX .
  methods GET_OREVR
    returning
      value(RF_OREVR) type ZVCXI_PXS_OREVR
    raising
      /VCXI/CX_CKX .
  methods GET_PRREF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PRREF) type ZVCXI_PXS_PRREF
    raising
      /VCXI/CX_CKX .
  methods GET_VBAP
    returning
      value(RS_VBAP) type VBAP
    raising
      /VCXI/CX_CKX .
  methods GET_XML
    exporting
      !EF_XML type STRING
    returning
      value(RF_XXML) type XSTRING
    raising
      /VCXI/CX_CKX .
  methods SET_CADDE
    importing
      !IF_CADDE type ZVCXI_PXS_CADDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADDL
    importing
      !IT_CADDL type ZVCXI_PXS_TT_CADDL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADIF_IO
    importing
      value(IS_CADIF_IO) type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_CADPI
    importing
      !IF_CADPI type ZVCXI_PXS_CADPI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADPO
    importing
      !IF_CADPO type ZVCXI_PXS_CADPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADPS
    importing
      !IF_CADPS type ZVCXI_PXS_CADPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPDFR
    importing
      !IF_FPDFR type ZVCXI_PXS_FPDFR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPRJR
    importing
      !IF_FPRJR type ZVCXI_PXS_FPRJR optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FREVR
    importing
      !IF_FREVR type ZVCXI_PXS_FREVR optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KDMAT
    importing
      !IF_KDMAT type KDMAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KDPTX
    importing
      !IF_KDPTX type KDPTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRREF
    importing
      !IF_PRREF type ZVCXI_PXS_PRREF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_XML
    importing
      !IF_XXML type XSTRING
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  types:
    begin of YS_FDMDL,
      FDMDL               type ZVCXI_PXSS_FDMDL,
      IFDMV               type ZVCXI_PXSS_IFDMV,
      T_CADIF_ONEUP_IO_P1 type table of ZVCXI_P1SS_S_CADIF_ONEUP_IO with default key,
      T_CADIF_MLTUP_IO    type table of ZVCXI_PXSS_S_CADIF_MLTUP_IO with default key,
    end of YS_FDMDL .
  types:
    YT_FDMDL type table of YS_FDMDL with default key .

  constants C_IEVNT_I_RECALC_CADPO type /VCXI/VKSC_IEVNT value 'RECALC_CADPO' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FPRJR type /VCXI/VKSC_IEVNT value 'RECALC_FPRJR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FREVR type /VCXI/VKSC_IEVNT value 'RECALC_FREVR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_KDMAT type /VCXI/VKSC_IEVNT value 'RECALC_KDMAT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_KDPTX type /VCXI/VKSC_IEVNT value 'RECALC_KDPTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods UPDATE_VIA_FASTD
    changing
      !CS_CADIF_PRJ_IO type ANY
      !CT_CADIF_ONEUP_IO_P1 type TABLE
      !CT_CADIF_MLTUP_IO type TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SBH
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SBH) type ref to ZCL_VCXI_PXSS_PR_SBH
    raising
      /VCXI/CX_CKX .
  methods GET_FDMDL
    importing
      !IT_CADIF_ONEUP_IO_P1 type TABLE
      !IT_CADIF_MLTUP_IO type TABLE
    returning
      value(RT_FDMDL) type YT_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_FASTD
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_FASTD) type ref to ZCL_VCXI_PXSS_PR_FASTD
    raising
      /VCXI/CX_CKX .
  methods CHECK_CADDE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CREATE_CADIF_IO
    returning
      value(RR_CADIF_IO) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_FG
    exporting
      !ER_FG type ref to ZIF_VCXI_PXSS_FG
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_CADPO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FPRJR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FREVR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_KDMAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_KDPTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_CADIF_PRJ definition
class ZCL_VCXI_PXSS_PR_CADIF_PRJ implementation.
  method CHECK_CADDE.

*** Check Design Error
    if ME->GET_CADDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Design Error occured in CAD system.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '802' ).
      endif.
    endif.

  endmethod.
  method CREATE_CADIF_IO.

*** Create Data Reference
    create data RR_CADIF_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO.

  endmethod.
  method GET_CADDE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDE ).
    move LS_PARAM-ATWRT to RF_CADDE.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CADDL.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDL ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_CADDL = RT_CADDL.
    endif.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_CADIF_IO.

    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.
    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO.
    field-symbols: <S_CADIF_IO> type ANY.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    RR_CADIF_IO = ME->CREATE_CADIF_IO( ).

*** Dereferencing and "Cast" I/O Structure
    assign RR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.


***--------------------------------------------------------------------------------------
*** Get System Information
    LS_CADIF_IO-SYSID = SY-SYSID.
    LS_CADIF_IO-MANDT = SY-MANDT.

*** Get CAD Project ID, Owner and Status
    LS_CADIF_IO-CADPI = ME->GET_CADPI( ).
    LS_CADIF_IO-CADPO = ME->GET_CADPO( ).
    LS_CADIF_IO-CADPS = ME->GET_CADPS( ).
    LS_CADIF_IO-CADDE = ME->GET_CADDE( ).

*** Dynamically Fill by VBAP
    LS_CADIF_IO = corresponding #( base ( LS_CADIF_IO ) ME->GET_VBAP( ) ).

*** Fill by Application Data
    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    LS_CADIF_IO-WERKS   = LR_APPDATA->F_WERKS.
    LS_CADIF_IO-S_AUQTY = LR_APPDATA->S_AUQTY.
    LS_CADIF_IO-KUNAG   = LR_APPDATA->S_KNA1_AG-KUNNR.
    LS_CADIF_IO-KUNWE   = LR_APPDATA->S_KNA1_WE-KUNNR.

*** Get Material Description
    LS_CADIF_IO-MAKTX = ME->GET_MAKTX( ).

*** Get Customer Material Number and Description
    LS_CADIF_IO-KDMAT = ME->GET_KDMAT( ).
    LS_CADIF_IO-KDPTX = ME->GET_KDPTX( ).

*** Get Project Reference
    LS_CADIF_IO-PRREF = ME->GET_PRREF( ).

*** Get Flag - Review Requested
    LS_CADIF_IO-FREVR = ME->GET_FREVR( ).

*** Get Long Text
    LS_CADIF_IO-LTEXT = ME->ZIF_VCXI_PXSS_LTEXT~GET_LTEXT( ).

*** Get Flag - PDF Requested
    LS_CADIF_IO-FPDFR = ME->GET_FPDFR( ).


***--------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method GET_CADLS.

    case ME->GET_CADPS( ).
      when 'IP' or        "Specification in Progress
           'RP'.          "Review in Progress
        if ME->GET_CADPI( ) is initial.
          RF_CADLS = C_CADLS_OPEN.
        else.
          RF_CADLS = C_CADLS_REVISION.
        endif.
      when others.
        RF_CADLS = C_CADLS_LOCKED.
    endcase.

  endmethod.
  method GET_CADPI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPI ).
    move LS_PARAM-ATWRT to RF_CADPI.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CADPO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPO ).
    move LS_PARAM-ATWRT to RF_CADPO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CADPS.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_CDSVC type /VCXI/VKSR_S_CDSVC.
    data: LT_CDSVC type /VCXI/VKSR_TT_CDSVC.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPS ).
    move LS_PARAM-ATWRT to RF_CADPS.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
*** Get previous value based on change documents
    if EF_CADPS_PREV is requested or
       ET_CADPS_NEXT is requested.
      LT_CDSVC = ME->R_GATE->GET_CDSVC( ).
      LS_CDSVC = value #( LT_CDSVC[ LINES( LT_CDSVC ) ] optional ).
      EF_CADPS_PREV = value #( LS_CDSVC-T_PARAM[ PARID = C_PARID_CADPS ]-ATWRT optional ).
    endif.

*** Special handling to avoid way back after Reset
    if EF_CADPS_PREV is requested or
       ET_CADPS_NEXT is requested.
      if EF_CADPS_PREV eq 'D' and ( RF_CADPS eq 'IP' or RF_CADPS eq 'RD' ).
        clear EF_CADPS_PREV.       " no way back
      endif.
    endif.

*** Get Next allowed Statuses
    if ET_CADPS_NEXT is requested.
      ET_CADPS_NEXT = switch #( EF_CADPS_PREV when SPACE then value #( ( 'IP' ) ( 'RD' ) ( 'NDR' ) )   " Initial > Specification in Progress or Ready for Design or No Design Required
                                              when 'IP'  then value #( ( 'RD' ) ( 'NDR' ) )            " Specification in Progress > Ready for Design or No Design Required
                                              when 'RD'  then value #( ( 'ID' ) )                      " Ready for Design > In Design   (on Save)
                                              when 'ID'  then value #( ( 'D' ) )                       " In Design > Designed           (by Inbound Interface)
                                              when 'D'   then value #( ( 'RP' ) ( 'IP' ) )             " Designed > Review in Progress or back to Specification in Progress
                                              when 'NDR' then value #( ( 'RP' ) ( 'IP' ) )             " No Designed Required > Review in Progress or back to Specification in Progress
                                              when 'RP'  then value #( ( 'RTA' ) ( 'TA' ) )            " Review in Progress > Ready for Technical Approval or directly to Technical Approved
                                              when 'RTA' then value #( ( 'ITA' ) )                     " Ready for Technical Approval > In Technical Approval   (on Save)
                                              when 'ITA' then value #( ( 'TA' ) )                      " In Technical Approval > Technical Approved             (by Inbound Interface)
                                              when 'TA'  then value #( ( 'RP' ) )                      " Technical Approved > back to Review in Progress
                                              when 'CLS' then value #( ( 'IP' ) ( 'RD' ) ( 'NDR' ) )   " Closed > Specification in Progress or Ready for Design or No Design Required

                              ).

***   Design can't be skipped, if done once
      if ME->GET_CADPI( ) is not initial.
        delete ET_CADPS_NEXT where TABLE_LINE eq 'NDR'.
      endif.
    endif.

  endmethod.
  method GET_FDMDL.

    data: LF_ALLOCATED type ABAP_BOOL.
    data: LS_CADIF_ONEUP_IO_P1 type ZVCXI_P1SS_S_CADIF_ONEUP_IO,
          LS_CADIF_MLTUP_IO    type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    field-symbols: <S_FDMDL> type YS_FDMDL.


***------------------------------------------------------------------------------------------------
*** Allocate Multi Ups
    loop at IT_CADIF_MLTUP_IO assigning field-symbol(<S_CADIF_MLTUP_IO>).
      append value #( T_CADIF_MLTUP_IO = value #( ( <S_CADIF_MLTUP_IO> ) ) ) to RT_FDMDL.
    endloop.

*** Allocate One Ups based on OneUp ID
    loop at IT_CADIF_ONEUP_IO_P1 assigning field-symbol(<S_CADIF_ONEUP_IO_P1>).
      LS_CADIF_ONEUP_IO_P1 = <S_CADIF_ONEUP_IO_P1>.
      LF_ALLOCATED = ABAP_FALSE.
      loop at RT_FDMDL assigning <S_FDMDL>.
        loop at <S_FDMDL>-T_CADIF_MLTUP_IO into LS_CADIF_MLTUP_IO.
          if LINE_EXISTS( LS_CADIF_MLTUP_IO-T_CADIF_XOUT_IO[ ICADO = LS_CADIF_ONEUP_IO_P1-ICADO ] ).
            append LS_CADIF_ONEUP_IO_P1 to <S_FDMDL>-T_CADIF_ONEUP_IO_P1.
            LF_ALLOCATED = ABAP_TRUE.
            exit.
          endif.
        endloop.
      endloop.
      if LF_ALLOCATED ne ABAP_TRUE.
        append value #( T_CADIF_ONEUP_IO_P1 = value #( ( LS_CADIF_ONEUP_IO_P1 ) )
                      ) to RT_FDMDL.
      endif.
    endloop.

*** Identify Variant
    loop at RT_FDMDL assigning <S_FDMDL>.
      <S_FDMDL>-FDMDL = ZCL_VCXI_P1SS_BL_FDMDL=>C_FDMDL_CFG.    "Corrugated Finished Good
      if LINES( <S_FDMDL>-T_CADIF_ONEUP_IO_P1 ) eq 1.
        <S_FDMDL>-IFDMV = cond #( when <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ 1 ]-FASLO eq ABAP_TRUE then ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_INL
                                                                                             else ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_DCT ).
      else.
        <S_FDMDL>-IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_SE_DCT.
      endif.
    endloop.

  endmethod.
  method GET_FPDFR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPDFR ).
    move LS_PARAM-ATWRT to RF_FPDFR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FPRJR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRJR ).
    move LS_PARAM-ATWRT to RF_FPRJR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FREVR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FREVR ).
    move LS_PARAM-ATWRT to RF_FREVR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ICADO_BY_GCADO.

*** Get all OneUp Provider
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
***   Check for requested OneUp GUID
      if cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_GCADO( ) eq IF_GCADO.
***     Return OneUp ID
        RF_ICADO = cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_ICADO( ).
      endif.
    endloop.

  endmethod.
  method GET_KDMAT.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_FG     type ref to ZIF_VCXI_PXSS_FG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).
    move LS_PARAM-STRNG to RF_KDMAT.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      if EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        EF_FOVRR = ABAP_TRUE.
      else.
        if ME->GET_PRVDR_SBH( ) is bound.
          EF_FOVRR = 'S'.
        endif.
        ME->GET_PRVDR_FG( importing ER_FG = LR_FG ).
        if LR_FG is bound.
          EF_FOVRR = 'F'.
        endif.
      endif.
    endif.

  endmethod.
  method GET_KDPTX.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_FG     type ref to ZIF_VCXI_PXSS_FG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).
    move LS_PARAM-STRNG to RF_KDPTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      if EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        EF_FOVRR = ABAP_TRUE.
      else.
        if ME->GET_PRVDR_SBH( ) is bound.
          EF_FOVRR = 'S'.
        endif.
        ME->GET_PRVDR_FG( importing ER_FG = LR_FG ).
        if LR_FG is bound.
          EF_FOVRR = 'F'.
        endif.
      endif.
    endif.

  endmethod.
  method GET_MAKTX.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.
    data: LR_FG     type ref to ZIF_VCXI_PXSS_FG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to RF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      if ME->GET_PRVDR_SBH( ) is bound.
        EF_FOVRR = 'S'.                                                                                                               "not changeable / no checkbox
      else.
        ME->GET_PRVDR_FG( importing ER_FG = LR_FG ).

        if LR_FG is bound.
          EF_FOVRR = 'F'.                                                                                                             "not changeable / no checkbox
        else.
          EF_FOVRR = cond #( when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE          "changeable / checkbox
                             when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED     "changeable / no checkbox
                                                                                                              else ABAP_FALSE ).      "not changeable / checkbox
        endif.
      endif.
    endif.

  endmethod.
  method GET_MARC.

*** Get Plant Data for Material
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'MARC'
                                                  changing  CS_DATA  = RS_MARC ).

  endmethod.
  method GET_OREVR.

    data: LT_GATE           type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE           type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get CAD Integration OneUp provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get CAD Integration OneUp Reference
    loop at LT_GATE into LR_GATE.
***   Get OneUp Option for Review Request
      case cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_OREVR( ).
***     OneUp Option for Review Request is Mandatory
        when ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_OREVR_MANDATORY.
          RF_OREVR = ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_OREVR_MANDATORY.
          exit.   "no further search is necessary as Mandatory dominates

***     OneUp Option for Review Request is Default
        when ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_OREVR_DEFAULT.
          RF_OREVR = ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_OREVR_DEFAULT.

***     OneUp Option for Review Request is Optional
        when ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_OREVR_OPTIONAL.
          "Ignore
      endcase.
    endloop.

  endmethod.
  method GET_PRREF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRREF ).
    move LS_PARAM-ATWRT to RF_PRREF.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_FASTD.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_FASTD.

***------------------------------------------------------------------------------------------------
*** Find Provider for Fast Data
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_FASTD=>C_IPRVT_PX_FASTD
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_FASTD.

  endmethod.
  METHOD get_prvdr_fg.

    CLEAR er_fg.

*** Find Provider for Finished Goods
    rt_gate = me->r_gate->get_prvdr( if_iprvt = zif_vcxi_pxss_fg=>c_iprvt_fg
                                     if_inuse = abap_true ).
    IF lines( rt_gate ) EQ 1.
      er_fg ?= rt_gate[ 1 ]->r_clspr.
    ENDIF.

  ENDMETHOD.
  method GET_PRVDR_SBH.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Sales BOM Header
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SBH=>C_IPRVT_PX_SBH ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SBH ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Design Error
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CADDE( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Design Error
    ME->CHECK_CADDE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_VBAP.

*** Get Sales Document Items
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                                                  changing  CS_DATA  = RS_VBAP ).

  endmethod.
  method GET_XML.

    data: LS_CADIF_PRJ_IO      type ZVCXI_PXSS_S_CADIF_PRJ_IO.
    data: LT_CADIF_ONEUP_IO_P1 type table of ZVCXI_P1SS_S_CADIF_ONEUP_IO,
          LT_CADIF_MLTUP_IO    type table of ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_CADIF_IO type ref to DATA.
    field-symbols: <S_CADIF_IO> type ANY.


***------------------------------------------------------------------------------------------------
*** Get Project Inbound/Outbound Information
    LR_CADIF_IO = ME->GET_CADIF_IO( ).
    assign LR_CADIF_IO->* to <S_CADIF_IO>.
    LS_CADIF_PRJ_IO = <S_CADIF_IO>.


***------------------------------------------------------------------------------------------------
*** Get all OneUp Inbound/Outbound Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      LR_CADIF_IO = cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_CADIF_IO( ).
      assign LR_CADIF_IO->* to <S_CADIF_IO>.

***   Get Inbound/Outbound Structure
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_P1SS_PR_CADIF_ONEUP.
          append <S_CADIF_IO> to LT_CADIF_ONEUP_IO_P1.
      endcase.
    endloop.


***------------------------------------------------------------------------------------------------
*** Get all MutliUp Inbound/Outbound Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_MLTUP=>C_IPRVT_PX_CADIF_MLTUP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.

***   Get Inbound/Outbound Structure
      LR_CADIF_IO = cast ZCL_VCXI_PXSS_PR_CADIF_MLTUP( LR_GATE->R_CLSPR )->GET_CADIF_IO( ).
      assign LR_CADIF_IO->* to <S_CADIF_IO>.
      append <S_CADIF_IO> to LT_CADIF_MLTUP_IO.
    endloop.


***------------------------------------------------------------------------------------------------
*** Create XML
    if RF_XXML is requested.
      call transformation ID
           source S_CADIF_PRJ_IO   = LS_CADIF_PRJ_IO        "Project
                  S_CADIF_ONEUP_P1 = LT_CADIF_ONEUP_IO_P1   "OneUp Corrugate
*                     S_CADIF_ONEUP_P2                      "OneUp Folding Carton
                  S_CADIF_MLTUP    = LT_CADIF_MLTUP_IO      "MultiUp
           result xml RF_XXML.
    endif.

    if EF_XML is requested.
      call transformation ID
           source S_CADIF_PRJ_IO   = LS_CADIF_PRJ_IO        "Project
                  S_CADIF_ONEUP_P1 = LT_CADIF_ONEUP_IO_P1   "OneUp Corrugate
*                   S_CADIF_ONEUP_P2                        "OneUp Folding Carton
                  S_CADIF_MLTUP    = LT_CADIF_MLTUP_IO      "MultiUp
           result xml EF_XML.
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_RECALC_KDMAT.
        ME->HANDLE_RECALC_KDMAT( ).

      when C_IEVNT_I_RECALC_KDPTX.
        ME->HANDLE_RECALC_KDPTX( ).

      when C_IEVNT_I_RECALC_CADPO.
        ME->HANDLE_RECALC_CADPO( ).

      when C_IEVNT_I_RECALC_FPRJR.
        ME->HANDLE_RECALC_FPRJR( ).

      when C_IEVNT_I_RECALC_FREVR.
        ME->HANDLE_RECALC_FREVR( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_CADPO.

    data: LF_CADPO  type ZVCXI_PXS_CADPO.


*** Calculate CAD Project Owner
    data(LS_VBAP) = ME->GET_VBAP( ).
    if LS_VBAP-POSNR is not initial.
      LF_CADPO = 'VBAP' && LS_VBAP-VBELN && LS_VBAP-POSNR.
    else.
      data(LS_MARC) = ME->GET_MARC( ).
      if LS_MARC-WERKS is not initial.
        LF_CADPO = 'MARC' && LS_MARC-MATNR && LS_MARC-WERKS.
      endif.
    endif.

    check LF_CADPO is not initial.
    ME->SET_CADPO( exporting IF_CADPO = LF_CADPO ).

  endmethod.
  method HANDLE_RECALC_FPRJR.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


*** CAD Project ID is assigned
    if ME->GET_CADPI( ) is not initial.
      ME->SET_FPRJR( IF_FPRJR = ABAP_TRUE ).      "Project requiered
    else.
***   Review Requested
      if ME->GET_FREVR( ) eq ABAP_TRUE.
        ME->SET_FPRJR( IF_FPRJR = ABAP_TRUE ).    "Project requiered
      else.
        ME->GET_FPRJR( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
***       Reset Flag
          ME->SET_FPRJR( IF_SETBY = SPACE ).
        endif.
      endif.
    endif.

  endmethod.
  method HANDLE_RECALC_FREVR.

    data: LF_OREVR type ZVCXI_PXS_OREVR,
          LF_SETBY type /VCXI/VKSR_SETBY.


*** Get Option for Review Request
    LF_OREVR = ME->GET_OREVR( ).

*** Review Mandatory
    if LF_OREVR eq ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_OREVR_MANDATORY.
      ME->SET_FREVR( IF_FREVR = ABAP_TRUE ).        "Request Review

    else.
***   Consider Review Requested Setby-Status
      ME->GET_FREVR( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        case LF_OREVR.
          when ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_OREVR_DEFAULT.
            ME->SET_FREVR( IF_FREVR = ABAP_TRUE ).    "Request Review
          when ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_OREVR_OPTIONAL.
            ME->SET_FREVR( IF_SETBY = SPACE ).        "reset Review Request
        endcase.
      endif.
    endif.

  endmethod.
  method HANDLE_RECALC_KDMAT.

*** Get Reference of Sales BOM Header
    data(LR_PR_SBH) = ME->GET_PRVDR_SBH( ).
    if LR_PR_SBH is bound.
***   Set Customer Material of Sales BOM Header
      ME->SET_KDMAT( IF_KDMAT = LR_PR_SBH->GET_KDMAT( ) ).

    else.
***   Get Reference of single Finished Good
      ME->GET_PRVDR_FG( importing ER_FG = data(LR_FG) ).
      if LR_FG is bound.
***     Set Customer Material of Finished Good
        ME->SET_KDMAT( IF_KDMAT = LR_FG->GET_KDMAT( ) ).
      endif.
    endif.

  endmethod.
  method HANDLE_RECALC_KDPTX.

*** Get Reference of Sales BOM Header
    data(LR_PR_SBH) = ME->GET_PRVDR_SBH( ).
    if LR_PR_SBH is bound.
***   Set Customer Material Description of Sales BOM Header
      ME->SET_KDPTX( IF_KDPTX = LR_PR_SBH->GET_KDPTX( ) ).

    else.
***   Get Reference of single Finished Good
      ME->GET_PRVDR_FG( importing ER_FG = data(LR_FG) ).
      if LR_FG is bound.
***     Set Customer Material Description of Finished Good
        ME->SET_KDPTX( IF_KDPTX = LR_FG->GET_KDPTX( ) ).
      endif.
    endif.

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.
    data: LT_GATE   type /VCXI/VKSR_TT_GATE.
    data: LR_FG type ref to ZIF_VCXI_PXSS_FG.


*** Get Reference of Sales BOM Header
    data(LR_PR_SBH) = ME->GET_PRVDR_SBH( ).
    if LR_PR_SBH is bound.
***   Set Material Description of Sales BOM Header
      ME->SET_MAKTX( IF_MAKTX = LR_PR_SBH->GET_MAKTX( ) ).

    else.
***   Get Reference of single Finished Good
      LT_GATE = ME->GET_PRVDR_FG( importing ER_FG = LR_FG ).

      if LR_FG is bound.
***     Set Material Description of Finished Good
        ME->SET_MAKTX( IF_MAKTX = LR_FG->GET_MAKTX( ) ).
      elseif LT_GATE is not initial.
***     Only calcualate if calculation is active
        ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
        check LF_FOVRR eq ABAP_FALSE.
***     Get generated Material Description
        LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).
***     Set new Description
        ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).
      else.
***     Initialize Material Description
        ME->SET_MAKTX( IF_SETBY = SPACE ).
      endif.
    endif.

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_CADDE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDE ).

    move IF_CADDE to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CADDE_CHANGED ).
    endif.

  endmethod.
  method SET_CADDL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDL ).

    if IT_CADDL is supplied.
      call transformation ID
           source T_CADDL = IT_CADDL
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_CADIF_IO.

    data: LF_CADPS type ZVCXI_PXS_CADPS.
    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO.


*** "Cast" I/O Structure
    move-corresponding IS_CADIF_IO to LS_CADIF_IO.

***--------------------------------------------------------------------------------------
*** Check validity of I/O values
    if LS_CADIF_IO-CADPO ne ME->GET_CADPO( ).
      break TBD.
    endif.

*** Validate Status
    LF_CADPS = ME->GET_CADPS( ).
    if LF_CADPS ne 'ID' and       "In Design
       LF_CADPS ne 'ITA'.         "In Technical Approval
***   No update via CAD interface allowed. (Status is &1)
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '801'
                                            IF_MSGV1 = LF_CADPS ).
    endif.

***--------------------------------------------------------------------------------------
*** Set CAD Project ID
    ME->SET_CADPI( IF_CADPI = LS_CADIF_IO-CADPI ).

*** Set CAD Design Error
    ME->SET_CADDE( IF_CADDE = LS_CADIF_IO-CADDE ).

*** Set Project Reference
    ME->SET_PRREF( IF_PRREF = LS_CADIF_IO-PRREF ).

*** Set Document List
    ME->SET_CADDL( IT_CADDL = corresponding #( LS_CADIF_IO-T_CADIF_DOC_IO ) ).

*** Set Long Text
    ME->ZIF_VCXI_PXSS_LTEXT~SET_LTEXT( IF_LTEXT = LS_CADIF_IO-LTEXT ).

  endmethod.
  method SET_CADPI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPI ).

    move IF_CADPI to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CADPI_CHANGED ).
    endif.

  endmethod.
  method SET_CADPO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPO ).

    move IF_CADPO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CADPO_CHANGED ).
    endif.

  endmethod.
  method SET_CADPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADPS ).

    move IF_CADPS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CADPS_CHANGED ).
    endif.

  endmethod.
  method SET_FPDFR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPDFR ).

    move IF_FPDFR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPDFR_CHANGED ).
    endif.

  endmethod.
  method SET_FPRJR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRJR ).

    if IF_FPRJR is supplied.
      LS_PARAM-ATWRT = IF_FPRJR.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPRJR_CHANGED ).
    endif.

  endmethod.
  method SET_FREVR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FREVR ).

    if IF_FREVR is supplied.
      LS_PARAM-ATWRT = IF_FREVR.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FREVR_CHANGED ).
    endif.

  endmethod.
  method SET_KDMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).

    move IF_KDMAT to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDMAT_CHANGED ).
    endif.

  endmethod.
  method SET_KDPTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).

    move IF_KDPTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDPTX_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_PRREF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRREF ).

    move IF_PRREF to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRREF_CHANGED ).
    endif.

  endmethod.
  method SET_XML.

    data: LS_CADIF_PRJ_IO      type ZVCXI_PXSS_S_CADIF_PRJ_IO,
          LS_CADIF_ONEUP_IO_P1 type ZVCXI_P1SS_S_CADIF_ONEUP_IO,
          LS_CADIF_MLTUP_IO    type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LT_CADPS_NEXT        type ZVCXI_PXS_TT_CADPS,
          LT_CADIF_ONEUP_IO_P1 type table of ZVCXI_P1SS_S_CADIF_ONEUP_IO,
          LT_CADIF_MLTUP_IO    type table of ZVCXI_PXSS_S_CADIF_MLTUP_IO,
          LT_SVCEL             type /VCXI/CKX_TT_OBJECT.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Extract XML
    try.
        call transformation ID
             source xml IF_XXML
             result S_CADIF_PRJ_IO   = LS_CADIF_PRJ_IO       "Project
                    S_CADIF_ONEUP_P1 = LT_CADIF_ONEUP_IO_P1  "OneUp Corrugate
*                   S_CADIF_ONEUP_P2                         "OneUp Folding Carton
                    S_CADIF_MLTUP    = LT_CADIF_MLTUP_IO.    "MultiUp
      catch CX_XSLT_SYSTEM_ERROR into data(LR_CX_XSLT_SYSTEM_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_XSLT_SYSTEM_ERROR ).
    endtry.

***------------------------------------------------------------------------------------------------
*** Enrich Configuration Structure using Fast Data
    ME->UPDATE_VIA_FASTD( changing CS_CADIF_PRJ_IO      = LS_CADIF_PRJ_IO
                                   CT_CADIF_ONEUP_IO_P1 = LT_CADIF_ONEUP_IO_P1
                                   CT_CADIF_MLTUP_IO    = LT_CADIF_MLTUP_IO ).

***------------------------------------------------------------------------------------------------
*** Set Project Inbound/Outbound Information
    ME->SET_CADIF_IO( IS_CADIF_IO = LS_CADIF_PRJ_IO ).

*** Set Next Status
    ME->GET_CADPS( importing ET_CADPS_NEXT = LT_CADPS_NEXT ).
    if LT_CADPS_NEXT is not initial.
      ME->SET_CADPS( IF_CADPS = LT_CADPS_NEXT[ 1 ] ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set all OneUp Inbound/Outbound Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.

      data(LF_GCADO) = cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_GCADO( ).

      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_P1SS_PR_CADIF_ONEUP.
***       Identify Inbound/Outbound Structure
          LS_CADIF_ONEUP_IO_P1 = value #( LT_CADIF_ONEUP_IO_P1[ GCADO = LF_GCADO ] optional ).
          check LS_CADIF_ONEUP_IO_P1-GCADO is not initial.

***       Set Inbound/Outbound Structure
          cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->SET_CADIF_IO( IS_CADIF_IO = LS_CADIF_ONEUP_IO_P1 ).
      endcase.
    endloop.


***------------------------------------------------------------------------------------------------
*** Set all MutliUp Inbound/Outbound Information
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_MLTUP=>C_IPRVT_PX_CADIF_MLTUP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.

      data(LF_GCADM) = cast ZCL_VCXI_PXSS_PR_CADIF_MLTUP( LR_GATE->R_CLSPR )->GET_GCADM( ).

***   Identify Inbound/Outbound Structure
      LS_CADIF_MLTUP_IO = value #( LT_CADIF_MLTUP_IO[ GCADM = LF_GCADM ] optional ).
      check LS_CADIF_MLTUP_IO-GCADM is not initial.

***   Set Inbound/Outbound Structure
      cast ZCL_VCXI_PXSS_PR_CADIF_MLTUP( LR_GATE->R_CLSPR )->SET_CADIF_IO( IS_CADIF_IO = LS_CADIF_MLTUP_IO ).
    endloop.

  endmethod.
  method UPDATE_VIA_FASTD.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.
    data: LR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE.


*** Get Fast Data
    data(LR_PR_FASTD) = ME->GET_PRVDR_FASTD( importing ER_GATE = LR_GATE_FASTD ).
    check LR_PR_FASTD is bound.

    check LR_PR_FASTD->GET_BL_FDMDL( ) is initial.  "Structure creation only if completely empty

***------------------------------------------------------------------------------------------------
*** Get Fast Data Models
    data(LT_FDMDL) = ME->GET_FDMDL( IT_CADIF_ONEUP_IO_P1 = CT_CADIF_ONEUP_IO_P1
                                    IT_CADIF_MLTUP_IO    = CT_CADIF_MLTUP_IO  ).

*** Remove provided values, as they will be rebuild based on the Fast Data Models
    clear: CT_CADIF_ONEUP_IO_P1, CT_CADIF_MLTUP_IO.

***------------------------------------------------------------------------------------------------
*** Enhance Structure
    loop at LT_FDMDL assigning field-symbol(<S_FDMDL>).
***   Create Fast Data Model
      data(LR_BL_FDMDL) = ZCL_VCXI_PXSS_BL_FDMDL=>CREATE( IR_GATE_FASTD = LR_GATE_FASTD
                                                             IF_FDMDL = <S_FDMDL>-FDMDL
                                                             IF_IFDMV = <S_FDMDL>-IFDMV ).
***   Get Fast Data Structure
      LT_FASTD_XCOMP = LR_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = LR_BL_FDMDL
                                                          importing ET_XCONG    = LT_XCONG ).

***   Fill Fast Data Information Structures
      LR_BL_FDMDL->ADJ_CADIF( changing CT_CADIF_ONEUP_IO_P1 = <S_FDMDL>-T_CADIF_ONEUP_IO_P1
                                       CT_CADIF_MLTUP_IO    = <S_FDMDL>-T_CADIF_MLTUP_IO
                                       CT_FASTD_XCOMP       = LT_FASTD_XCOMP
                                       CT_XCONG             = LT_XCONG ).

***   Set Fast Data Structure
      LR_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = LR_BL_FDMDL
                                         IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                         IT_XCONG       = LT_XCONG ).

***   Return updated CAD Integration Information
      append lines of <S_FDMDL>-T_CADIF_ONEUP_IO_P1 to CT_CADIF_ONEUP_IO_P1.
      append lines of <S_FDMDL>-T_CADIF_MLTUP_IO    to CT_CADIF_MLTUP_IO.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
