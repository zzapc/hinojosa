
class ZCL_VCXI_PCSSC_UI_BOARD_P definition
  public
  create protected .

public section.
  type-pools VRM .

  class-data C_MBOAR_PROD type ZVCXI_PCSS_MBOAR read-only value 'P' ##NO_TEXT.
  data S_BOARD_P_VIS type ZVCXI_PCSSC_S_BOARD_P_VIS .
  data S_DYNP_APBOA type /VCXI/CKX_S_DYNP_KEY .
  data S_DYNP_ASBOA_P type /VCXI/CKX_S_DYNP_KEY .

  methods DO_MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE
    importing
      !IS_BOARD_P type ZVCXI_PCSSC_S_BOARD_P_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CD
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_BOARD_P type ref to ZCL_VCXI_PCSSC_BOARD_P
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_CHECK type SYUCOMM value 'CHECK' ##NO_TEXT.
  constants C_UC_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  constants C_UC_SAVE type SYUCOMM value 'SAVE' ##NO_TEXT.
  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE' ##NO_TEXT.
  data R_GRID_APBOA type ref to CL_GUI_ALV_GRID .
  data R_GRID_ASBOA_P type ref to CL_GUI_ALV_GRID .
  data R_GRID_COWID_P type ref to CL_GUI_ALV_GRID .
  data R_GRID_PAPER_P type ref to CL_GUI_ALV_GRID .
  data T_COWID_P_GRID type ZVCXI_PCSSC_TT_COWID_P_GRID .
  data T_PAPER_P_GRID type ZVCXI_PCSSC_TT_PAPER_G_GRID .

  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BOARD_P type ref to ZCL_VCXI_PCSSC_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods CREATE_DROPDOWN_STATU
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_STATU
    importing
      !IF_TXT04 type J_TXT04
    returning
      value(RF_STATU) type ZVCXI_PCSSC_STATU
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_APBOA
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_ASBOA_P
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_COWID_P
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_PAPER_P
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_ASBOA_P
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_APBOA
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_COWID_P
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_PAPER_P
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.

  data R_BOARD_P type ref to ZCL_VCXI_PCSSC_BOARD_P .
  data R_CONTAINER_APBOA type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_ASBOA_P type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_COWID_P type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_PAPER_P type ref to CL_GUI_CUSTOM_CONTAINER .
  data T_APBOA_GRID type table of ZVCXI_PCSSC_S_APBOA_GRID.
  data T_ASBOA_P_GRID type ZVCXI_PCSSC_TT_ASBOA_P_GRID .

  methods GET_FIELDCAT_ASBOA_P
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_APBOA
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_COWID_P
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_PAPER_P
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_APBOA
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_ASBOA_P
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_COWID_P
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_PAPER_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_COWID_PINFO
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_ROW_NO .
  methods HANDLE_DATA_CHANGED_FIN_COW_P
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_FIN_PAP_P
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_FIN_APBOA
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_PAPER_P
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED .
  methods HANDLE_UC_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_APBOA
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_ASBOA_P
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_COWID_P
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_PAPER_P
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    importing
      !IR_GRID type ref to CL_GUI_ALV_GRID
    changing
      !CT_FCAT type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_UI_BOARD_P definition
class ZCL_VCXI_PCSSC_UI_BOARD_P implementation.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->R_BOARD_P->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

***----------------------------------------------------------------------------
*** Check Flute
  if IR_BOARD_P->R_BOARD_G->R_FLUTE is not bound.
*** The Flute does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_PCSSC'
                                          IF_MSGNO = '160' ).
  endif.

***------------------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_P=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_P=>C_ACTVT_DISPLAY
                                      IR_BOARD_P = IR_BOARD_P ).

  move IR_BOARD_P to R_BOARD_P.

endmethod.
method CREATE_DROPDOWN_STATU.

  data:          LF_ID           type VRM_ID.
  data:          LS_STATU_DESCR  type ZCL_VCXI_PCSSC_BOARD_P=>YS_STATU_DESCR.
  data:          LT_STATU_DESCR  type ZCL_VCXI_PCSSC_BOARD_P=>YT_STATU_DESCR,
                 LT_VALUE        type VRM_VALUES.
  field-symbols: <S_VALUE>       type VRM_VALUE.


*** Get allowed new Status
  LT_STATU_DESCR = ME->R_BOARD_P->GET_ALLOWED_STATU( ).

  loop at LT_STATU_DESCR into LS_STATU_DESCR.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_STATU_DESCR-TXT04       to <S_VALUE>-KEY.
    move LS_STATU_DESCR-STATU_DESCR to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move 'ZVCXI_PCSSC_S_BOARD_P_VIS-TXT04' to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
method DO_FREE.

***------------------------------------------------------------------------------------------
*** Free Grid Paper Plant
  if ME->R_GRID_PAPER_P is bound.
    ME->R_GRID_PAPER_P->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_PAPER_P.
  endif.

*** Free Container Paper Plant
  if ME->R_CONTAINER_PAPER_P is bound.
    ME->R_CONTAINER_PAPER_P->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_PAPER_P.
  endif.

***------------------------------------------------------------------------------------------
*** Free Grid Corrugation Width Plant
  if ME->R_GRID_COWID_P is bound.
    ME->R_GRID_COWID_P->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_COWID_P.
  endif.

*** Free Container Corrugation Width Plant
  if ME->R_CONTAINER_COWID_P is bound.
    ME->R_CONTAINER_COWID_P->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_COWID_P.
  endif.

***------------------------------------------------------------------------------------------
*** Free Grid Assigned Sales Board Grades
  if ME->R_GRID_ASBOA_P is bound.
    ME->R_GRID_ASBOA_P->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_ASBOA_P.
  endif.

*** Free Container Assigned Sales Board Grades
  if ME->R_CONTAINER_ASBOA_P is bound.
    ME->R_CONTAINER_ASBOA_P->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_ASBOA_P.
  endif.

***------------------------------------------------------------------------------------------
*** Free Grid Assigned Production Board Grades
  if ME->R_GRID_APBOA is bound.
    ME->R_GRID_APBOA->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_APBOA.
  endif.

*** Free Container Assigned Production Board Grades
  if ME->R_CONTAINER_APBOA is bound.
    ME->R_CONTAINER_APBOA->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_APBOA.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data: LF_LOCKED type /VCXI/CKX_LOCKED,
        LF_INDEX  type CHAR2,
        LF_GRP    type CHAR10,
        LF_FIELD  type FIELDNAME.
  field-symbols: <F_FIELD>  type ANY.


***--------------------------------------------------------------------------------------
  check ME->R_BOARD_P is bound.

*** Get lock Status
  move ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.


***--------------------------------------------------------------------------------------
  loop at screen.
*** Remove Fields that are not maintained on Plant Level
    if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-BSTAL ne ZCL_VCXI_PCSSC_BOARD_P=>C_BLEVL_PLANT and
       SCREEN-GROUP1 eq 'STC'.
      move 0 to SCREEN-ACTIVE.
    endif.

*** Remove Board Mode Specifics
    if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-FPRBO eq ABAP_TRUE and
       SCREEN-GROUP1 eq 'APB'.
      move 0 to SCREEN-ACTIVE.
    endif.

*** Remove Test Board Flag for Production Board
    if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-FPRBO eq ABAP_TRUE and
       SCREEN-GROUP1 eq 'TBO'.
      move 0 to SCREEN-ACTIVE.
    endif.

*** Remove Board Status if it is not defined
    if ( SCREEN-NAME eq 'ZVCXI_PCSSC_S_BOARD_P_VIS-TXT04'         or
         SCREEN-NAME eq 'ZVCXI_PCSSC_S_BOARD_P_VIS-STATU_DESCR' ) and
       ZCL_VCXI_PCSSC_BOARD_P=>IS_STATU_ACTIVE( IF_MBOAR = ME->R_BOARD_P->R_BOARD_G->S_MBOAR-MBOAR
                                                IF_TBOAR = ME->R_BOARD_P->R_BOARD_G->F_TBOAR ) eq ABAP_FALSE.
      move 0 to SCREEN-ACTIVE.
    endif.


    if SCREEN-NAME eq 'ZVCXI_PCSSC_S_BOARD_P_VIS-APBOA' and
       ME->R_BOARD_P->R_BOARD_G->S_MBOAR-FPRBO eq ABAP_TRUE.
      move 0 to SCREEN-ACTIVE.
    endif.

    modify screen.
  endloop.

***--------------------------------------------------------------------------------------
*** Modify Screen for Board Classification - Numeric
  do 10 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'CLAVA_ID' LF_INDEX into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if <F_FIELD> is not assigned or
       <F_FIELD> is initial.
      concatenate 'N' LF_INDEX into LF_GRP.
      loop at screen.
        if SCREEN-GROUP2 eq LF_GRP.
          SCREEN-ACTIVE   = 0.
          SCREEN-REQUIRED = 0.
          SCREEN-INPUT    = 0.
        endif.
        modify screen.
      endloop.
    endif.
  enddo.

***--------------------------------------------------------------------------------------
*** Modify Screen for Board Classification - Character
  do 10 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'CLAVC_ID' LF_INDEX into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if <F_FIELD> is not assigned or
       <F_FIELD> is initial.
      concatenate 'C' LF_INDEX into LF_GRP.
      loop at screen.
        if SCREEN-GROUP2 eq LF_GRP.
          SCREEN-ACTIVE   = 0.
          SCREEN-REQUIRED = 0.
          SCREEN-INPUT    = 0.
        endif.
        modify screen.
      endloop.
    endif.
  enddo.

***--------------------------------------------------------------------------------------
*** Modify Screen for Plant Board Description
  do 4 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'IDEST' LF_INDEX into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if <F_FIELD> is not assigned or
       <F_FIELD> is initial.
      concatenate 'D' LF_INDEX into LF_GRP.
      loop at screen.
        if SCREEN-GROUP1 eq LF_GRP.
          SCREEN-ACTIVE   = 0.
          SCREEN-REQUIRED = 0.
          SCREEN-INPUT    = 0.
        endif.
        modify screen.
      endloop.
    endif.
  enddo.

***--------------------------------------------------------------------------------------
*** Only show values if not in change mode
  loop at screen.
    if LF_LOCKED ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify screen.
  endloop.

endmethod.
method DO_PBO.

*** Set Titlebar
  if ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    set titlebar '0310_TITLE' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  else.
    set titlebar '0300_TITLE' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  endif.

*** Set Status
  set pf-status '0300_STATUS' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.


*** Init VIS for Plant Board Info
  ME->INIT_VIS( ).

*** Create Drop down list
  ME->CREATE_DROPDOWN_STATU( ).

*** Refresh Grids
  ME->REFRESH_GRID_PAPER_P( ).
  ME->REFRESH_GRID_COWID_P( ).
  ME->REFRESH_GRID_ASBOA_P( ).
  ME->REFRESH_GRID_APBOA( ).

endmethod.
method DO_UPDATE.

  data:             LF_INDEX          type    CHAR2,
                    LF_CLAVA_ID       type    FIELDNAME,
                    LF_CLAVA          type    FIELDNAME,
                    LF_CLAVC_ID       type    FIELDNAME,
                    LF_CLAVC          type    FIELDNAME,
                    LF_IDEST          type    FIELDNAME,
                    LF_DESCR          type    FIELDNAME,
                    LF_STATU          type    ZVCXI_PCSSC_STATU.
  data:             LS_MINWT          type    ZVCXI_PCSS_S_MINWT.
  field-symbols:    <F_CLAVA_ID>      type    any,
                    <F_CLAVA_NEW>     type    any,
                    <F_CLAVC_ID>      type    any,
                    <F_CLAVC_NEW>     type    any,
                    <F_IDEST>         type    any,
                    <F_DESCR_NEW>     type    any.

*** Set changed Values
  if IS_BOARD_P-VALFR ne ME->R_BOARD_P->F_VALFR.
*** Check for overlapping Version
    ME->R_BOARD_P->SET_VALFR( IF_VALFR = IS_BOARD_P-VALFR ).
  endif.

  if IS_BOARD_P-VALTO ne ME->R_BOARD_P->F_VALTO.
    ME->R_BOARD_P->SET_VALTO( IF_VALTO = IS_BOARD_P-VALTO ).
  endif.

*** Check if Valid From smaller than Valid To date
  if ME->R_BOARD_P->F_VALTO <= ME->R_BOARD_P->F_VALFR.
*** The Valid To Date is smaller than the Valid From Date, please check.
    if ME->R_BOARD_P->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
      message id 'ZVCXI_PCSSC' type 'W' number '154'.
    else.
      message id 'ZVCXI_PCSSC' type 'E' number '154'.
    endif.
  endif.

*** Set Status ( with assigned internal status )
  LF_STATU = ME->GET_STATU( IF_TXT04 = IS_BOARD_P-TXT04 ).
  if LF_STATU ne ME->R_BOARD_P->F_STATU.
    ME->R_BOARD_P->SET_STATU( IF_STATU = LF_STATU ).
  endif.

  if IS_BOARD_P-STARC ne ME->R_BOARD_P->F_STARC.
    ME->R_BOARD_P->SET_STARC( IF_STARC = IS_BOARD_P-STARC ).
  endif.

  if IS_BOARD_P-FTBOA ne ME->R_BOARD_P->F_FTBOA.
    ME->R_BOARD_P->SET_FTBOA( IF_FTBOA = IS_BOARD_P-FTBOA ).
  endif.

  if IS_BOARD_P-APBOA ne ME->R_BOARD_P->F_APBOA.
    ME->R_BOARD_P->SET_APBOA( IF_APBOA = IS_BOARD_P-APBOA ).
  endif.

  if IS_BOARD_P-SPPAP ne ME->R_BOARD_P->F_SPPAP.
    ME->R_BOARD_P->SET_SPPAP( IF_SPPAP = IS_BOARD_P-SPPAP ).
  endif.

  if IS_BOARD_P-NSTBG ne ME->R_BOARD_P->F_NSTBG.
    ME->R_BOARD_P->SET_NSTBG( IF_NSTBG = IS_BOARD_P-NSTBG ).
  endif.

  move-corresponding IS_BOARD_P to LS_MINWT.

  if IS_BOARD_P-MINWT     ne ME->R_BOARD_P->S_MINWT-MINWT or
     IS_BOARD_P-MINWT_UOM ne ME->R_BOARD_P->S_MINWT-MINWT_UOM.
    ME->R_BOARD_P->SET_MINWT( IS_MINWT = LS_MINWT ).
  endif.


*** Set Classification Value - Numeric
  do 10 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'CLAVA_ID' LF_INDEX into LF_CLAVA_ID.
    concatenate 'CLAVA'    LF_INDEX into LF_CLAVA.
    assign component LF_CLAVA_ID of structure IS_BOARD_P to <F_CLAVA_ID>.
    if <F_CLAVA_ID> is not initial.
      assign component LF_CLAVA    of structure IS_BOARD_P        to <F_CLAVA_NEW>.
      ME->R_BOARD_P->SET_CLAVA( IF_ICLAT       = <F_CLAVA_ID>
                                IF_CLAVA       = <F_CLAVA_NEW>  ).
    endif.
  enddo.

*** Set Classification Value - Character
  do 10 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'CLAVC_ID' LF_INDEX into LF_CLAVC_ID.
    concatenate 'CLAVC'    LF_INDEX into LF_CLAVC.
    assign component LF_CLAVC_ID of structure IS_BOARD_P to <F_CLAVC_ID>.
    if <F_CLAVC_ID> is not initial.
      assign component LF_CLAVC    of structure IS_BOARD_P        to <F_CLAVC_NEW>.
      ME->R_BOARD_P->SET_CLAVC( IF_ICLAT       = <F_CLAVC_ID>
                                IF_CLAVC       = <F_CLAVC_NEW>  ).
    endif.
  enddo.

*** Set Plant Description
  do 4 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'IDEST' LF_INDEX into LF_IDEST.
    concatenate 'DESCR' LF_INDEX into LF_DESCR.
    assign component LF_IDEST of structure IS_BOARD_P to <F_IDEST>.
    if <F_IDEST> is not initial.
      assign component LF_DESCR    of structure IS_BOARD_P        to <F_DESCR_NEW>.
      ME->R_BOARD_P->SET_BODSC_P( IF_IDEST       = <F_IDEST>
                                  IF_BODSC       = <F_DESCR_NEW>  ).
    endif.
  enddo.

endmethod.
method DO_USER_COMMAND.

*** Check for Changes
  if ME->R_GRID_COWID_P is bound.
    ME->R_GRID_COWID_P->CHECK_CHANGED_DATA( ).
  endif.
  if ME->R_GRID_PAPER_P is bound.
    ME->R_GRID_PAPER_P->CHECK_CHANGED_DATA( ).
  endif.
  if ME->R_GRID_APBOA is bound.
    ME->R_GRID_APBOA->CHECK_CHANGED_DATA( ).
  endif.

*** Handle User Command
  case IF_UCOMM.
    when C_UC_EXIT or C_UC_CANCEL or C_UC_BACK.
      if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE.
        ME->DO_FREE( ).
        leave to screen 0.
      endif.

*** Display/Change
    when 'TOGGLE'.
      ME->HANDLE_UC_TOGGLE( ).

*** Save Button
    when C_UC_SAVE.
      ME->HANDLE_UC_SAVE( ).

*** Change Document
    when 'CD'.
      ME->HANDLE_UC_CD( ).

*** Check the Instance
    when C_UC_CHECK.
      ME->HANDLE_UC_CHECK( ).
  endcase.

endmethod.
method GET_FIELDCAT_APBOA.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.


  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_APBOA_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Get lock Status
  move ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'APBOA'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.
    endcase.
  endloop.

endmethod.
method GET_FIELDCAT_ASBOA_P.

*  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
*  data:          LF_GUID    type        /VCXI/CKX_GUID.
*  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_ASBOA_P_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
*  loop at RT_FCAT assigning <S_FCAT>.
*    case <S_FCAT>-FIELDNAME.
*      when 'GBOGV'.
*        move ABAP_TRUE     to <S_FCAT>-TECH.
*      when 'GBOPV'.
*        move ABAP_TRUE     to <S_FCAT>-TECH.
*      when 'VALFR'.
*        move ABAP_TRUE    to <S_FCAT>-NO_OUT.
*      when 'VALTO'.
*        move ABAP_TRUE    to <S_FCAT>-NO_OUT.
*    endcase.
*  endloop.

endmethod.
method GET_FIELDCAT_COWID_P.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_COWID_P_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
*** Get lock Status
  move ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'COWID'.
      when 'COWID_UOM'.
      when 'ACTIV'.
        move ABAP_TRUE                        to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE                      to <S_FCAT>-EDIT.
        endif.
      when 'FPLBW'.
        move ABAP_TRUE                        to <S_FCAT>-CHECKBOX.
      when 'PINFO'.
        move 'Paper Info'(G01)                to <S_FCAT>-COLTEXT.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON to <S_FCAT>-STYLE.
    endcase.
  endloop.

endmethod.
method GET_FIELDCAT_PAPER_P.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_PAPER_G_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
*** Get lock Status
  move ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** If Paper Mat and Wax Code are maintained on Global Lvl, make em invisible
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'BPMAT'.
        if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-BPAPL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
          move ABAP_FALSE    to <S_FCAT>-EDIT.
        else.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.
        endif.
      when 'WAXCO'.
        if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-BWAXL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
          move ABAP_FALSE    to <S_FCAT>-EDIT.
        else.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.
        endif.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA_APBOA.

  free: ME->T_APBOA_GRID.

***----------------------------------------------------------------------------
*** Copy Values to Grid
  move ME->R_BOARD_P->T_APBOA to ME->T_APBOA_GRID.

endmethod.
method GET_GRID_DATA_ASBOA_P.

  free: ME->T_ASBOA_P_GRID.

***----------------------------------------------------------------------------
*** Copy Values to Grid
  move ME->R_BOARD_P->T_ASBOA to ME->T_ASBOA_P_GRID.

endmethod.
method GET_GRID_DATA_COWID_P.

  data:          LS_COWID           type ZVCXI_PCSSC_S_COWID.
  field-symbols: <S_COWID_P_GRID>   type ZVCXI_PCSSC_S_COWID_P_GRID.

  clear: T_COWID_P_GRID.

***------------------------------------------------------------------------------------------
*** Move the Plant Paper Instance to the Grid
  loop at ME->R_BOARD_P->T_COWID into LS_COWID.
    append initial line to ME->T_COWID_P_GRID assigning <S_COWID_P_GRID>.
    move-corresponding LS_COWID    to <S_COWID_P_GRID>.
    move               'Info'(001) to <S_COWID_P_GRID>-PINFO.
  endloop.

endmethod.
method GET_GRID_DATA_PAPER_P.

  data:          LS_FSTRUCT         type ZVCXI_PCSSC_S_FSTRUCT,
                 LS_PAPER_G         type ZVCXI_PCSSC_S_PAPER,
                 LS_PAPER_P         type ZVCXI_PCSSC_S_PAPER,
                 LS_MAKT            type MAKT.
  field-symbols: <S_PAPER_P_GRID>   type ZVCXI_PCSSC_S_PAPER_P_GRID.

  clear: T_PAPER_P_GRID.

***------------------------------------------------------------------------------------------
*** Move the Plant Paper Instance to the Grid
  loop at ME->R_BOARD_P->R_BOARD_G->R_FLUTE->T_FSTRUCT into LS_FSTRUCT.
    clear: LS_PAPER_G,
           LS_PAPER_P.
    append initial line to ME->T_PAPER_P_GRID assigning <S_PAPER_P_GRID>.
    move LS_FSTRUCT-BPAID to <S_PAPER_P_GRID>-BPAID.

    read table ME->R_BOARD_P->R_BOARD_G->T_PAPER into LS_PAPER_G
                                                 with key BPAID = LS_FSTRUCT-BPAID.
    read table ME->R_BOARD_P->T_PAPER into LS_PAPER_P
                                      with key BPAID = LS_FSTRUCT-BPAID.

    if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-BPAPL eq ZCL_VCXI_PCSSC_BOARD_P=>C_BLEVL_PLANT.
      move LS_PAPER_P-BPMAT to <S_PAPER_P_GRID>-BPMAT.
    else.
      move LS_PAPER_G-BPMAT to <S_PAPER_P_GRID>-BPMAT.
    endif.

    if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-BWAXL eq ZCL_VCXI_PCSSC_BOARD_P=>C_BLEVL_PLANT.
      move LS_PAPER_P-WAXCO to <S_PAPER_P_GRID>-WAXCO.
    else.
      move LS_PAPER_G-WAXCO to <S_PAPER_P_GRID>-WAXCO.
    endif.

*** Get Material Description
    if <S_PAPER_P_GRID>-BPMAT is not initial.
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = <S_PAPER_P_GRID>-BPMAT
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.
      if SY-SUBRC eq 0.
        move LS_MAKT-MAKTX to <S_PAPER_P_GRID>-MAKTX.
      endif.
    endif.
  endloop.

endmethod.
method GET_STATU.

*** Get right internal status
  ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR       = ME->R_BOARD_P->R_BOARD_G->S_MBOAR-MBOAR
                                                     IF_TBOAR       = ME->R_BOARD_P->R_BOARD_G->F_TBOAR
                                                     IF_TXT04       = IF_TXT04
                                           importing EF_STATU       = RF_STATU ).

endmethod.
method HANDLE_BUTTON_COWID_PINFO.

  data:  LS_COWID         type        ZVCXI_PCSSC_S_COWID,
         LS_STRING        type        /VCXI/CKX_STRING,
         LS_PAPER         type        ZVCXI_PCSSC_S_PAPER.
  data:  LT_STRING        type        /VCXI/CKX_TT_STRING,
         LT_PAPER         type        ZVCXI_PCSSC_TT_PAPER.
  data:  LR_CX_CKX        type ref to /VCXI/CX_CKX.


  try.
      read table ME->R_BOARD_P->T_COWID into LS_COWID index ES_ROW_NO-ROW_ID.
      move LS_COWID-T_PAPER to LT_PAPER.
      ME->R_BOARD_P->R_BOARD_G->R_FLUTE->SORT_PAPER( changing CT_PAPER = LT_PAPER ).
      loop at LT_PAPER into LS_PAPER.

        call function 'CONVERSION_EXIT_MATN1_INPUT'
          exporting
            INPUT  = LS_PAPER-BPMAT
          importing
            OUTPUT = LS_PAPER-BPMAT.

        concatenate LS_PAPER-BPAID LS_PAPER-BPMAT into LS_STRING separated by SPACE.
        append LS_STRING to LT_STRING.
      endloop.

      call function 'POPUP_WITH_TABLE'
        exporting
          ENDPOS_COL   = 30
          ENDPOS_ROW   = 15
          STARTPOS_COL = 10
          STARTPOS_ROW = 10
          TITLETEXT    = 'Paper Info'(G01)
        tables
          VALUETAB     = LT_STRING
        exceptions
          BREAK_OFF    = 0
          others       = 2.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method HANDLE_DATA_CHANGED_FIN_APBOA.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        ME->R_BOARD_P->SET_APBOA( IT_APBOA =  value #( for LS_APBOA_GRID in ME->T_APBOA_GRID ( LS_APBOA_GRID-APBOA ) ) ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
method HANDLE_DATA_CHANGED_FIN_COW_P.

  data:  LS_GOOD_CELLS   type        LVC_S_MODI,
         LS_COWID        type        ZVCXI_PCS_S_COWID,
         LS_COWID_P_GRID type        ZVCXI_PCSSC_S_COWID_P_GRID.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  check E_MODIFIED eq ABAP_TRUE.

  loop at ET_GOOD_CELLS into LS_GOOD_CELLS.
    try.
        at new ROW_ID.
          read table ME->T_COWID_P_GRID into LS_COWID_P_GRID index LS_GOOD_CELLS-ROW_ID.
          if SY-SUBRC eq 0.

            move-corresponding LS_COWID_P_GRID to LS_COWID.
            ME->R_BOARD_P->SET_COWID_ACTIVE( IS_COWID = LS_COWID
                                             IF_ACTIV = LS_COWID_P_GRID-ACTIV ).

          endif.
        endat.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.
  endloop.

endmethod.
method HANDLE_DATA_CHANGED_FIN_PAP_P.

  data:  LS_GOOD_CELLS   type        LVC_S_MODI,
         LS_PAPER_P_GRID type        ZVCXI_PCSSC_S_PAPER_P_GRID,
         LS_PAPER        type        ZVCXI_PCSSC_S_PAPER.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  check E_MODIFIED eq ABAP_TRUE.

  loop at ET_GOOD_CELLS into LS_GOOD_CELLS.
    try.
        at new ROW_ID.
          read table ME->T_PAPER_P_GRID into LS_PAPER_P_GRID index LS_GOOD_CELLS-ROW_ID.
          if SY-SUBRC eq 0.

            move-corresponding LS_PAPER_P_GRID to LS_PAPER.
            ME->R_BOARD_P->SET_PAPER( IS_PAPER = LS_PAPER ).

          endif.
        endat.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.
  endloop.

endmethod.
method HANDLE_DATA_CHANGED_PAPER_P.

  data:          LF_BPMAT           type MATNR.
  data:          LF_WAXCO           type ZVCXI_PCSS_WAXCO.
  data: LS_BAPIRETURN type BAPIRETURN1,
        LS_MARC       type MARC.
  data:          LS_MOD_CELL        type LVC_S_MODI.

  loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
    case LS_MOD_CELL-FIELDNAME.
***----------------------------------------------------------------------------
      when 'BPMAT'.
        check LS_MOD_CELL-VALUE is not initial.
        translate LS_MOD_CELL-VALUE to upper case.
        move LS_MOD_CELL-VALUE to LF_BPMAT.

***     Bring Value to internal Material Nr. Format
        call function 'CONVERSION_EXIT_MATN1_INPUT'
          exporting
            INPUT        = LF_BPMAT
          importing
            OUTPUT       = LF_BPMAT
          exceptions
            LENGTH_ERROR = 1.
        if SY-SUBRC ne 0.
          clear LF_BPMAT.
        endif.

***     Check if Material is valid
        call function 'BAPI_MATERIAL_EXISTENCECHECK'
          exporting
            MATERIAL_LONG = conv BAPIMATALL-MATERIAL_LONG( LF_BPMAT )
          importing
            RETURN        = LS_BAPIRETURN.

        if LS_BAPIRETURN-TYPE eq 'E'.
***       The material &1 does not exist or is not activated.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
              I_MSGID     = LS_BAPIRETURN-ID
              I_MSGTY     = LS_BAPIRETURN-TYPE
              I_MSGNO     = LS_BAPIRETURN-NUMBER
              I_MSGV1     = LS_MOD_CELL-VALUE
              I_FIELDNAME = LS_MOD_CELL-FIELDNAME
              I_ROW_ID    = LS_MOD_CELL-ROW_ID
              I_TABIX     = LS_MOD_CELL-TABIX ).
        endif.

***     Check Material Existence in the Plant
        call function 'MARC_SINGLE_READ'
          exporting
            MATNR  = LF_BPMAT
            WERKS  = ME->R_BOARD_P->F_WERKS
          importing
            WMARC  = LS_MARC
          exceptions
            others = 5.

        if SY-SUBRC eq 0.
***       Check also deletion Flag
          if LS_MARC-LVORM = ABAP_FALSE.
***       Everything is fine
          else.
***         There is no active Version of Material &1 for Plant &2.
            ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
                I_MSGID     = 'ZVCXI_PCSSC'
                I_MSGTY     = 'E'
                I_MSGNO     = '251'
                I_MSGV1     = LF_BPMAT
                I_MSGV2     = ME->R_BOARD_P->F_WERKS
                I_FIELDNAME = LS_MOD_CELL-FIELDNAME
                I_ROW_ID    = LS_MOD_CELL-ROW_ID
                I_TABIX     = LS_MOD_CELL-TABIX ).
          endif.
        else.
***       There is no active Version of Material &1 for Plant &2.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
              I_MSGID     = 'ZVCXI_PCSSC'
              I_MSGTY     = 'E'
              I_MSGNO     = '251'
              I_MSGV1     = LF_BPMAT
              I_MSGV2     = ME->R_BOARD_P->F_WERKS
              I_FIELDNAME = LS_MOD_CELL-FIELDNAME
              I_ROW_ID    = LS_MOD_CELL-ROW_ID
              I_TABIX     = LS_MOD_CELL-TABIX ).
        endif.

***----------------------------------------------------------------------------
      when 'WAXCO'.
        check LS_MOD_CELL-VALUE is not initial.
        translate LS_MOD_CELL-VALUE to upper case.
        move LS_MOD_CELL-VALUE to LF_WAXCO.

***     Check if Wax Code is valid
        select single WAXCO
               from ZVCXI_PCS_TC240
               into LF_WAXCO
              where WAXCO eq LF_WAXCO.

        if SY-SUBRC ne 0.
***       The wax code &1 does not exist.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
              I_MSGID     = 'ZVCXI_PCSSC'
              I_MSGTY     = 'E'
              I_MSGNO     = '151'
              I_MSGV1     = LS_MOD_CELL-VALUE
              I_FIELDNAME = LS_MOD_CELL-FIELDNAME
              I_ROW_ID    = LS_MOD_CELL-ROW_ID
              I_TABIX     = LS_MOD_CELL-TABIX ).
        endif.
    endcase.
  endloop.

endmethod.
method HANDLE_UC_CD.

  data:  LF_CDOCL                type CDHDR-OBJECTCLAS,
         LF_CDOID                type CDHDR-OBJECTID,
         LF_APPLICATIONID        type REPID,
         LF_MSGV2                type SYMSGV.
  data:  LT_CDRED_STR            type CDRED_STR_TAB,
         LT_EDITPOS_WITH_HEADER  type standard table of CDRED.
  data:  LR_OBJECT_CD            type ref to /VCXI/IF_CKX_OBJECT_CD.

***----------------------------------------------------------------------------
*** Get Change Document Info
  try.
      move ME->R_BOARD_P ?to LR_OBJECT_CD.
      check LR_OBJECT_CD is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  LR_OBJECT_CD->GET_INFO( importing EF_CDOCL = LF_CDOCL
                                    EF_CDOID = LF_CDOID ).


***----------------------------------------------------------------------------
*** Read Change Documents
  call function 'CHANGEDOCUMENT_READ'
    exporting
      OBJECTCLASS       = LF_CDOCL
      OBJECTID          = LF_CDOID
    importing
      ET_CDRED_STR      = LT_CDRED_STR[]
    tables
      EDITPOS           = LT_EDITPOS_WITH_HEADER
    exceptions
      NO_POSITION_FOUND = 1
      others            = 2.
  case SY-SUBRC.
    when 0.
***   Display the Records
      LF_APPLICATIONID = LF_CDOCL.
      call function 'CHANGEDOCUMENT_DISPLAY'
        exporting
          I_APPLICATIONID  = LF_APPLICATIONID
          FLG_AUTOCONDENSE = 'X'
          I_OBJECTCLAS     = LF_CDOCL
          IT_CDRED_STR     = LT_CDRED_STR[]
        tables
          I_CDRED          = LT_EDITPOS_WITH_HEADER.
    when 1.
***   No change document positions found
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '649'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.
    when 2.
***   Error in change document creation/analysis: & &
      move SY-SUBRC to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '327'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.

  endcase.
endmethod.
method HANDLE_UC_CHECK.

*** Check the Instance of the Plant Board Version
  ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_CHECK ).

*** Display Messages
  ME->R_BOARD_P->R_MSG->DISPLAY_MSG( ).
*** Initialize Messages Table
  ME->R_BOARD_P->R_MSG->INIT_MSG( ).

endmethod.
method HANDLE_UC_SAVE.

*** Save the Plant Board Version
  ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_SAVE ).

*** Check the Instance
  R_BOARD_P->DO_CHECK( ).

*** Display Messages
  ME->R_BOARD_P->R_MSG->DISPLAY_MSG( ).
*** Initialize Message Table
  ME->R_BOARD_P->R_MSG->INIT_MSG( ).

*** Saved successfully.
  message id 'ZVCXI_PCSSC' type 'S' number '001'.

endmethod.
method HANDLE_UC_TOGGLE.

  if ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
  else.
    ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

endmethod.
method INIT_CONTAINER_APBOA.

  if ME->R_CONTAINER_APBOA is not bound.
    create object ME->R_CONTAINER_APBOA
      exporting
        CONTAINER_NAME              = '0300CC_APBOA'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_ASBOA_P.

  if ME->R_CONTAINER_asboa_P is not bound.
    create object ME->R_CONTAINER_ASBOA_P
      exporting
        CONTAINER_NAME              = '0300CC_ASBOA_P'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_COWID_P.

  if ME->R_CONTAINER_COWID_P is not bound.
    create object ME->R_CONTAINER_COWID_P
      exporting
        CONTAINER_NAME              = '0300CC_COWID_P'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_PAPER_P.

  if ME->R_CONTAINER_PAPER_P is not bound.
    create object ME->R_CONTAINER_PAPER_P
      exporting
        CONTAINER_NAME              = '0300CC_PAPER_P'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID_APBOA.

  if ME->R_GRID_APBOA is not bound.
    create object ME->R_GRID_APBOA
      exporting
        I_PARENT          = ME->R_CONTAINER_APBOA
*        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  ME->R_GRID_APBOA->REGISTER_EDIT_EVENT( CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Handler
*  set handler ME->HANDLE_DATA_CHANGED_APBOA       for ME->R_GRID_APBOA.
  set handler ME->HANDLE_DATA_CHANGED_FIN_APBOA   for ME->R_GRID_APBOA.

*** Register F4-Fields
*  ME->R_GRID_APBOA->REGISTER_F4_FOR_FIELDS( IT_F4 = value #( ( FIELDNAME = 'BOARD'
*                                                               CHNGEAFTER = ABAP_TRUE )
*                                                              ) ).

endmethod.
method INIT_GRID_ASBOA_P.

  if ME->R_GRID_ASBOA_P is not bound.
    create object ME->R_GRID_ASBOA_P
      exporting
        I_PARENT          = ME->R_CONTAINER_ASBOA_P
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  call method R_GRID_ASBOA_P->REGISTER_EDIT_EVENT
    exporting
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER
    exceptions
      ERROR      = 1
      others     = 2.
  if SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.                                 " IF SY-SUBRC NE 0

*** Set Event Handler
*  set handler ME->HANDLE_DATA_CHANGED_PAPER_P       for ME->R_GRID_PAPER_P.
*  set handler ME->HANDLE_DATA_CHANGED_FIN_PAP_P     for ME->R_GRID_PAPER_P.

*** Register F4-Fields
*  ME->REGISTER_F4_FIELDS_FPAPI( ).


endmethod.
method INIT_GRID_COWID_P.

  if ME->R_GRID_COWID_P is not bound.
    create object ME->R_GRID_COWID_P
      exporting
        I_PARENT          = ME->R_CONTAINER_COWID_P
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  call method R_GRID_COWID_P->REGISTER_EDIT_EVENT
    exporting
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER
    exceptions
      ERROR      = 1
      others     = 2.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Event Handler
  set handler ME->HANDLE_DATA_CHANGED_FIN_COW_P     for ME->R_GRID_COWID_P.
  set handler ME->HANDLE_BUTTON_COWID_PINFO         for ME->R_GRID_COWID_P.

endmethod.
method INIT_GRID_PAPER_P.

  if ME->R_GRID_PAPER_P is not bound.
    create object ME->R_GRID_PAPER_P
      exporting
        I_PARENT          = ME->R_CONTAINER_PAPER_P
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  ME->R_GRID_PAPER_P->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Handler
  set handler ME->HANDLE_DATA_CHANGED_PAPER_P       for ME->R_GRID_PAPER_P.
  set handler ME->HANDLE_DATA_CHANGED_FIN_PAP_P     for ME->R_GRID_PAPER_P.

*** Register F4-Fields
*  ME->REGISTER_F4_FIELDS_FPAPI( ).


endmethod.
method INIT_VIS.

  data:          LF_FIELD        type          FIELDNAME,
                 LF_NUM          type          NUMC2.
  data:          LS_LOG          type          /VCXI/CKX_S_LOG,
                 LS_LOG_EX       type          /VCXI/CKX_S_LOG_EXT,
                 LS_CLAVA_P      type          ZVCXI_PCSSC_S_CLAVA_P,
                 LS_CLAVC_P      type          ZVCXI_PCSSC_S_CLAVC_P,
                 LS_BODSC        type          ZVCXI_PCSSC_S_BODSC.
  field-symbols: <F_FIELD>       type          any.

  free: ME->S_BOARD_P_VIS.
***--------------------------------------------------------------------------------------
*** Fill the VIS Structure with current data
  move ME->R_BOARD_P->R_BOARD_G->F_BOARD                                  to  ME->S_BOARD_P_VIS-BOARD.
  move ME->R_BOARD_P->R_BOARD_G->S_MBOAR-MBOAR                            to  ME->S_BOARD_P_VIS-MBOAR.
  move ME->R_BOARD_P->R_BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to  ME->S_BOARD_P_VIS-FLUTE.
  move ME->R_BOARD_P->R_BOARD_G->F_TBOAR                                  to  ME->S_BOARD_P_VIS-TBOAR.
  move ME->R_BOARD_P->F_WERKS                                             to  ME->S_BOARD_P_VIS-WERKS.
  move ME->R_BOARD_P->F_VALFR                                             to  ME->S_BOARD_P_VIS-VALFR.
  move ME->R_BOARD_P->F_VALTO                                             to  ME->S_BOARD_P_VIS-VALTO.
  move ME->R_BOARD_P->F_STARC                                             to  ME->S_BOARD_P_VIS-STARC.
  move ME->R_BOARD_P->F_FTBOA                                             to  ME->S_BOARD_P_VIS-FTBOA.
  move ME->R_BOARD_P->F_NSTBG                                             to  ME->S_BOARD_P_VIS-NSTBG.
  move ME->R_BOARD_P->F_APBOA                                             to  ME->S_BOARD_P_VIS-APBOA.
  move ME->R_BOARD_P->F_SPPAP                                             to  ME->S_BOARD_P_VIS-SPPAP.
  move-corresponding R_BOARD_P->S_MINWT                                   to  ME->S_BOARD_P_VIS.

***--------------------------------------------------------------------------------------
*** Get all needed Status Informations
  move ME->R_BOARD_P->F_STATU                                             to  ME->S_BOARD_P_VIS-STATU.
  ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR       = ME->S_BOARD_P_VIS-MBOAR
                                                     IF_TBOAR       = ME->S_BOARD_P_VIS-TBOAR
                                                     IF_STATU       = ME->S_BOARD_P_VIS-STATU
                                           importing EF_TXT04       = ME->S_BOARD_P_VIS-TXT04
                                                     EF_STATU_DESCR = ME->S_BOARD_P_VIS-STATU_DESCR
                                                     EF_STSMA       = ME->S_BOARD_P_VIS-STSMA ).

***--------------------------------------------------------------------------------------
*** Get Classification Values - Numeric
  loop at ME->R_BOARD_P->T_CLAVA_P into LS_CLAVA_P.

    add 1 to LF_NUM.
    shift LF_NUM left deleting leading '0'.

    concatenate 'CLAVA_ID' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVA_P-ICLAT.
    endif.

    concatenate 'CLAVA_DESCR' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVA_P-CLAVA_DESCR.
    endif.

    concatenate 'CLAVA'       LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVA_P-CLAVA.
    endif.

    concatenate 'CLAVA_UOM'   LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVA_P-CLAVA_UOM.
    endif.

  endloop.

  clear: LF_NUM.
***--------------------------------------------------------------------------------------
*** Get Classification Values - Character
  loop at ME->R_BOARD_P->T_CLAVC_P into LS_CLAVC_P.

    add 1 to LF_NUM.
    shift LF_NUM left deleting leading '0'.

    concatenate 'CLAVC_ID' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVC_P-ICLAT.
    endif.

    concatenate 'CLAVC_DESCR' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVC_P-CLAVC_DESCR.
    endif.

    concatenate 'CLAVC'       LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLAVC_P-CLAVC.
    endif.

  endloop.

***--------------------------------------------------------------------------------------
*** Get Plant Descriptions
  clear: LF_NUM, LF_FIELD.
  loop at ME->R_BOARD_P->T_BODSC into LS_BODSC where LANGU eq SY-LANGU.

    add 1 to LF_NUM.
    shift LF_NUM left deleting leading '0'.

    concatenate 'IDEST' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-IDEST.
    endif.

    concatenate 'IDEST_DESCR' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-IDEST_DESCR.
    endif.

    concatenate 'DESCR'       LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_P_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-DESCR.
    endif.

  endloop.

***--------------------------------------------------------------------------------------
*** Creation and Change Log
  move ME->R_BOARD_P->/VCXI/IF_CKX_OBJECT~GET_LOG( ) to LS_LOG.
  LS_LOG_EX = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
  move-corresponding LS_LOG_EX to S_BOARD_P_VIS.


***--------------------------------------------------------------------------------------
*** Set Paramters for Searchhelp - Assigend Production BoardID
*** Set Plant as Parameter
  set parameter id 'WRK' field ME->S_BOARD_P_VIS-WERKS.

*** Set Valid From/To to current date
  set parameter id 'ZVCXI_XCS_DCONF' field SY-DATUM.

*** Set Released to initial
  set parameter id 'ZVCXI_PCS_RELEASED' field ''.

endmethod.
method REFRESH_GRID_APBOA.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data: LT_FCAT              type        LVC_T_FCAT,
        LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.


  if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-FPRBO eq ABAP_TRUE.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_APBOA-REPID.
    move '9999'                     to ME->S_DYNP_APBOA-DYNNR.
  else.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_APBOA-REPID.
    move '0302'                     to ME->S_DYNP_APBOA-DYNNR.

*** Initialize if needed
    ME->INIT_CONTAINER_APBOA( ).
    ME->INIT_GRID_APBOA( ).

*** Get Grid Data
    ME->GET_GRID_DATA_APBOA( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
    LT_FCAT = ME->GET_FIELDCAT_APBOA( ) .
    LT_TOOLBAR_EXCLUDING = value #( ( CL_GUI_ALV_GRID=>MC_MB_EXPORT )
                                    ( CL_GUI_ALV_GRID=>MC_MB_FILTER )
                                    ( CL_GUI_ALV_GRID=>MC_MB_SUBTOT )
                                    ( CL_GUI_ALV_GRID=>MC_MB_SUM )
                                    ( CL_GUI_ALV_GRID=>MC_MB_VARIANT )
                                    ( CL_GUI_ALV_GRID=>MC_MB_VIEW )
                                    ( CL_GUI_ALV_GRID=>MC_MB_PASTE )
                                    ( CL_GUI_ALV_GRID=>MC_FC_GRAPH )
                                    ( CL_GUI_ALV_GRID=>MC_FC_PRINT )
                                    ( CL_GUI_ALV_GRID=>MC_FC_HELP )
                                    ( CL_GUI_ALV_GRID=>MC_FC_DETAIL )
                                    ( CL_GUI_ALV_GRID=>MC_FC_INFO )
                                    ( CL_GUI_ALV_GRID=>MC_FC_REFRESH )
                                    ( CL_GUI_ALV_GRID=>MC_FC_CHECK )
                                    ( CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO )
                                    ( CL_GUI_ALV_GRID=>MC_FC_LOC_COPY )
                                    ( CL_GUI_ALV_GRID=>MC_FC_LOC_CUT )
                                    ( CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW )
                                    ( CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE )
                                   ).
    LS_LAYOUT = value #( CWIDTH_OPT = ABAP_TRUE ).

*** Refresh ALV Grid
    ME->R_GRID_APBOA->SET_TABLE_FOR_FIRST_DISPLAY(
      exporting
        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
        IS_LAYOUT                     = LS_LAYOUT
      changing
        IT_FIELDCATALOG               = LT_FCAT
        IT_OUTTAB                     = ME->T_APBOA_GRID
      exceptions
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method REFRESH_GRID_ASBOA_P.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data:  LT_FCAT              type        LVC_T_FCAT,
         LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.


  if ME->R_BOARD_P->R_BOARD_G->S_MBOAR-FSABO eq ABAP_TRUE.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_ASBOA_P-REPID.
    move '9999'                     to ME->S_DYNP_ASBOA_P-DYNNR.
  else.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_ASBOA_P-REPID.
    move '0301'                     to ME->S_DYNP_ASBOA_P-DYNNR.

*** Initialize if needed
    ME->INIT_CONTAINER_ASBOA_P( ).
    ME->INIT_GRID_ASBOA_P( ).

*** Get Grid Data
    ME->GET_GRID_DATA_ASBOA_P( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
    move ME->GET_FIELDCAT_ASBOA_P( )         to LT_FCAT.
    append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL   to LT_TOOLBAR_EXCLUDING.
    move ABAP_TRUE                           to LS_LAYOUT-CWIDTH_OPT.
    move ABAP_TRUE                           to LS_LAYOUT-NO_TOOLBAR.

*** Refresh ALV Grid
    ME->R_GRID_ASBOA_P->SET_TABLE_FOR_FIRST_DISPLAY(
      exporting
        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
        IS_LAYOUT                     = LS_LAYOUT
      changing
        IT_FIELDCATALOG               = LT_FCAT
        IT_OUTTAB                     = ME->T_ASBOA_P_GRID
      exceptions
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method REFRESH_GRID_COWID_P.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data:  LT_FCAT              type        LVC_T_FCAT,
         LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

*** Initialize if needed
  ME->INIT_CONTAINER_COWID_P( ).
  ME->INIT_GRID_COWID_P( ).

*** Get Grid Data
  ME->GET_GRID_DATA_COWID_P( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_COWID_P( )         to LT_FCAT.
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL   to LT_TOOLBAR_EXCLUDING.
  move ABAP_TRUE                           to LS_LAYOUT-CWIDTH_OPT.
  move ABAP_TRUE                           to LS_LAYOUT-NO_TOOLBAR.

*** Refresh ALV Grid
  ME->R_GRID_COWID_P->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_COWID_P_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_GRID_PAPER_P.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data:  LT_FCAT              type        LVC_T_FCAT,
         LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

*** Initialize if needed
  ME->INIT_CONTAINER_PAPER_P( ).
  ME->INIT_GRID_PAPER_P( ).

*** Get Grid Data
  ME->GET_GRID_DATA_PAPER_P( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_PAPER_P( )         to LT_FCAT.
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL   to LT_TOOLBAR_EXCLUDING.
  move ABAP_TRUE                           to LS_LAYOUT-CWIDTH_OPT.
  move ABAP_TRUE                           to LS_LAYOUT-NO_TOOLBAR.
  ME->REGISTER_F4_FIELDS( exporting IR_GRID = ME->R_GRID_PAPER_P
                          changing  CT_FCAT = LT_FCAT ).

*** Refresh ALV Grid
  ME->R_GRID_PAPER_P->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_PAPER_P_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REGISTER_F4_FIELDS.

  data:          LS_F4        type          LVC_S_F4.
  data:          LT_F4        type          LVC_T_F4.
  field-symbols: <S_FCAT>     type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at CT_FCAT assigning <S_FCAT>.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if <S_FCAT>-F4AVAILABL eq ABAP_FALSE.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = <S_FCAT>-DOMNAME
          FIELDNAME         = SPACE
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.
        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = <S_FCAT>-REF_TABLE
            FIELDNAME         = <S_FCAT>-FIELDNAME
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.
      endif.

      if SY-SUBRC eq 0.
        move ABAP_TRUE to <S_FCAT>-F4AVAILABL.
      endif.
    endif.


    if <S_FCAT>-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move <S_FCAT>-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'                to LS_F4-REGISTER.
      move 'X'                to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  IR_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method START.

  data: LR_UI_BOARD_P type ref to  ZCL_VCXI_PCSSC_UI_BOARD_P,
        LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      create object LR_UI_BOARD_P
        exporting
          IR_BOARD_P = IR_BOARD_P.

      call function 'ZVCXI_PCSSC_UI_BOARD_P'
        exporting
          IR_UI_BOARD_P = LR_UI_BOARD_P.

***   Unlock Instance
      IR_BOARD_P->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
  endtry.

endmethod.
