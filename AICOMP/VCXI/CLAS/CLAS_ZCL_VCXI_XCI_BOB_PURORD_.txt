
class ZCL_VCXI_XCI_BOB_PURORD definition
  public
  create public .

public section.

  data S_HEADER type BAPIMEPOHEADER .
  data T_ITEM type BAPIMEPOITEM_TP .
  data T_SCHEDULE type BAPIMEPOSCHEDULE_TP .
  data T_ACCOUNT type BAPIMEPOACCOUNT_TP .
  data T_COND type BAPIMEPOCOND_TP .

  methods ADD_TEXT_ITEM
    importing
      !IF_WERKS type WERKS_D
      !IF_MATKL type MATKL
      !IF_TXZ01 type TXZ01
      !IF_BSTMG type BSTMG
      !IF_BSTME type BSTME
      !IF_BPREI type BPREI
      !IF_KNTTP type KNTTP optional
      !IF_WEPOS type WEPOS default ABAP_FALSE
      !IF_ELPEI type LPEIN default 'D'
      !IF_EEIND type EEIND
      !IF_KOSTL type KOSTL optional
      !IF_VBELN type VBELN optional
      !IF_POSNR type POSNR_VA optional
      !IF_ETENR type ETENR optional
    returning
      value(RF_EBELP) type EBELP
    raising
      /VCXI/CX_CKX .
  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods GET_EBELP_NEXT
    returning
      value(RF_EBELP) type EBELP
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_PO_NUMBER type EBELN
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    raising
      /VCXI/CX_CKX .
  methods PREPARE_GMITEM_GR
    importing
      !IF_EBELP type EBELP
      !IF_LGORT type LGORT_D optional
      !IF_INSMK type MB_INSMK
    returning
      value(RS_GMITEM) type BAPI2017_GM_ITEM_CREATE
    raising
      /VCXI/CX_CKX .
  methods SAVE
    importing
      !IF_TESTRUN type ABAP_BOOL
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    returning
      value(RR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_BAPI_SAVE_IN,
      S_HEADER   type BAPIMEPOHEADER,
      T_ITEM     type standard table of BAPIMEPOITEM     with default key,
      T_SCHEDULE type standard table of BAPIMEPOSCHEDULE with default key,
      T_ACCOUNT  type standard table of BAPIMEPOACCOUNT  with default key,
      T_COND     type STANDARD TABLE OF BAPIMEPOCOND     with default key,
    end of YS_BAPI_SAVE_IN .
  types:
    begin of YS_BAPI_SAVE_INX,
      S_HEADERX   type BAPIMEPOHEADERX,
      T_ITEMX     type standard table of BAPIMEPOITEMX    with default key,
      T_SCHEDULEX type standard table of BAPIMEPOSCHEDULX with default key,
      T_ACCOUNTX  type standard table of BAPIMEPOACCOUNTX with default key,
      T_CONDX     type STANDARD TABLE OF BAPIMEPOCONDX    with default key,
    end of YS_BAPI_SAVE_INX .

  methods FILL_ACCOUNTX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_CONDX
    importing
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_HEADERX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_ITEMX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_SCHEDULEX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILTER_BAPI_DATA_IN
    changing
      !CS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_IN
    returning
      value(RS_BAPI_SAVE_IN) type YS_BAPI_SAVE_IN
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_INX
    importing
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN optional
    changing
      !CS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_PURORD definition
class ZCL_VCXI_XCI_BOB_PURORD implementation.
  method ADD_TEXT_ITEM.

*** Get next Item Number
    RF_EBELP = ME->GET_EBELP_NEXT( ).

***----------------------------------------------------------------------------
*** Define Item
    ME->T_ITEM = value #( ( PO_ITEM       = RF_EBELP
                            PLANT         = IF_WERKS
                            SHORT_TEXT    = IF_TXZ01
                            MATL_GROUP    = IF_MATKL
                            QUANTITY      = IF_BSTMG
                            PO_UNIT       = IF_BSTME
                            NET_PRICE     = IF_BPREI
                            ACCTASSCAT    = cond #( when IF_KNTTP is supplied then IF_KNTTP
                                                    when IF_KOSTL is supplied then 'K'       "Cost center
                                                    when IF_VBELN is supplied then 'M'       "Ind. cust. w/o KD-CO
                                                  )
                            GR_IND        = switch #( IF_WEPOS when ABAP_FALSE then ABAP_UNDEFINED else IF_WEPOS )    "Ensure X-Structure is filled for blank value
                        ) ).

*** Define Schedule
    ME->T_SCHEDULE = value #( ( PO_ITEM        = RF_EBELP
                                DEL_DATCAT_EXT = IF_ELPEI
                                DELIVERY_DATE  = IF_EEIND
                            ) ).

*** Define Account Assignment
    ME->T_ACCOUNT = value #( ( PO_ITEM    = RF_EBELP
                               COSTCENTER = IF_KOSTL
                               SD_DOC     = IF_VBELN
                               ITM_NUMBER = IF_POSNR
                               SCHED_LINE = IF_ETENR
                           ) ).

  endmethod.
  method DEQUEUE.

    check ME->S_HEADER-PO_NUMBER is not initial.

*** Unlock Purchase Order
    call function 'DEQUEUE_EMEKKOE'
      exporting
        EBELN = ME->S_HEADER-PO_NUMBER.

  endmethod.
  method ENQUEUE.

    data: LF_BNAME type XUBNAME,
          LF_ALIAS type USALIAS.


    check ME->S_HEADER-PO_NUMBER is not initial.

*** Lock Purchase Order
    call function 'ENQUEUE_EMEKKOE'
      exporting
        MODE_EKKO      = 'E'
        EBELN          = ME->S_HEADER-PO_NUMBER
        _SCOPE         = '1'
        _WAIT          = 'X'
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2.

    if SY-SUBRC is not initial.
      LF_BNAME = SY-MSGV1.
      try.
          LF_ALIAS = CL_ABAP_CONTEXT_INFO=>GET_USER_FORMATTED_NAME( LF_BNAME ).
        catch CX_ABAP_CONTEXT_INFO_ERROR.
          LF_ALIAS = SY-MSGV1.
      endtry.

***   User & already processing & & &
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ME'
                                            IF_MSGNO = '006'
                                            IF_MSGV1 = LF_ALIAS
                                            IF_MSGV2 = 'Purchasing document'(001)
                                            IF_MSGV3 = ME->S_HEADER-PO_NUMBER
                                            IF_TEMP  = ABAP_TRUE ).
    endif.

  endmethod.
  method FILL_ACCOUNTX.

    data: LF_EBELP type EBELP.
    data: LS_ACCOUNT     type BAPIMEPOACCOUNT,
          LS_ACCOUNT_OLD type BAPIMEPOACCOUNT.
    data: LT_EBELP    type standard table of EBELP.
    field-symbols: <S_ACCOUNTX> type BAPIMEPOACCOUNTX.

***--------------------------------------------------------------------------------------
*** Get all Position Numbers (New, Update and Deleted)
    LT_EBELP = value #( for S_ACCOUNT in IS_BAPI_SAVE_IN-T_ACCOUNT ( S_ACCOUNT-PO_ITEM ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_ACCOUNT into LS_ACCOUNT_OLD.
      if not LINE_EXISTS( LT_EBELP[ TABLE_LINE = LS_ACCOUNT_OLD-PO_ITEM ] ).
        append LS_ACCOUNT_OLD-PO_ITEM to LT_EBELP.
      endif.
    endloop.
    sort LT_EBELP.

***--------------------------------------------------------------------------------------
*** Process all ACCOUNTs
    loop at LT_EBELP into LF_EBELP.
      append value #( PO_ITEM = LF_EBELP ) to CS_BAPI_SAVE_INX-T_ACCOUNTX assigning <S_ACCOUNTX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ACCOUNT[ PO_ITEM = LF_EBELP ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_ACCOUNT[     PO_ITEM = LF_EBELP ] ).
        <S_ACCOUNTX>-PO_ITEMX = 'I'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_ACCOUNT[ PO_ITEM = LF_EBELP ]
                                             changing  CS_X_STRUC = <S_ACCOUNTX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ACCOUNT[ PO_ITEM = LF_EBELP ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_ACCOUNT[     PO_ITEM = LF_EBELP ] ).
        <S_ACCOUNTX>-PO_ITEMX = 'D'.

***   Update
      elseif LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ACCOUNT[ PO_ITEM = LF_EBELP ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_ACCOUNT[     PO_ITEM = LF_EBELP ] ).
        if IS_BAPI_SAVE_IN_OLD-T_ACCOUNT[ PO_ITEM = LF_EBELP ] ne IS_BAPI_SAVE_IN-T_ACCOUNT[ PO_ITEM = LF_EBELP ].
          <S_ACCOUNTX>-PO_ITEMX = 'U'.
        endif.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_ACCOUNT[     PO_ITEM = LF_EBELP ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_ACCOUNT[ PO_ITEM = LF_EBELP ]
                                             changing  CS_X_STRUC  = <S_ACCOUNTX> ).
      endif.
    endloop.

  endmethod.
  method FILL_CONDX.

    types: begin of YS_KOMV_KEY,
             KPOSN type  KPOSN,
             STUNR type  STUNR,
             ZAEHK type  DZAEHK_SHORT,
           end of YS_KOMV_KEY.

    data: LS_COND     type BAPIMEPOCOND,
          LS_COND_OLD type BAPIMEPOCOND,
          LS_KOMV_KEY type YS_KOMV_KEY.
    data: LT_KOMV_KEY type standard table of YS_KOMV_KEY.
    field-symbols: <S_CONDX> type BAPIMEPOCONDX.


***--------------------------------------------------------------------------------------
*** Get all Conditions (New, Update and Deleted)
    LT_KOMV_KEY = value #( for S_COND in CS_BAPI_SAVE_IN-T_COND ( KPOSN = S_COND-ITM_NUMBER
                                                                          STUNR = S_COND-COND_ST_NO
                                                                          ZAEHK = S_COND-COND_COUNT ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_COND into LS_COND_OLD.
      if not LINE_EXISTS( LT_KOMV_KEY[ KPOSN = LS_COND_OLD-ITM_NUMBER
                                       STUNR = LS_COND_OLD-COND_ST_NO
                                       ZAEHK = LS_COND_OLD-COND_COUNT ] ).
        append value #( KPOSN = LS_COND_OLD-ITM_NUMBER
                        STUNR = LS_COND_OLD-COND_ST_NO
                        ZAEHK = LS_COND_OLD-COND_COUNT ) to LT_KOMV_KEY.
      endif.
    endloop.
    sort LT_KOMV_KEY.

***--------------------------------------------------------------------------------------
*** Conditions
    loop at LT_KOMV_KEY into LS_KOMV_KEY.
      append value #( ITM_NUMBER = LS_KOMV_KEY-KPOSN
                      COND_ST_NO = LS_KOMV_KEY-STUNR
                      COND_COUNT = LS_KOMV_KEY-ZAEHK ) to CS_BAPI_SAVE_INX-T_CONDX assigning <S_CONDX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_COND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                      COND_ST_NO = LS_KOMV_KEY-STUNR
                                                      COND_COUNT = LS_KOMV_KEY-ZAEHK ] ) and
             LINE_EXISTS( CS_BAPI_SAVE_IN-T_COND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                      COND_ST_NO = LS_KOMV_KEY-STUNR
                                                      COND_COUNT = LS_KOMV_KEY-ZAEHK ] ).

        read table CS_BAPI_SAVE_IN-T_COND with key ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                   COND_ST_NO = LS_KOMV_KEY-STUNR
                                                   COND_COUNT = LS_KOMV_KEY-ZAEHK assigning field-symbol(<S_COND>).
        if SY-SUBRC is initial and <S_COND> is assigned.
          <S_COND>-CHANGE_ID = 'I'.
        endif.

        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = CS_BAPI_SAVE_IN-T_COND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                             changing  CS_X_STRUC = <S_CONDX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_COND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                          COND_ST_NO = LS_KOMV_KEY-STUNR
                                                          COND_COUNT = LS_KOMV_KEY-ZAEHK ] ) and
             not LINE_EXISTS( CS_BAPI_SAVE_IN-T_COND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                          COND_ST_NO = LS_KOMV_KEY-STUNR
                                                          COND_COUNT = LS_KOMV_KEY-ZAEHK ] ).

        read table CS_BAPI_SAVE_IN-T_COND with key ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                   COND_ST_NO = LS_KOMV_KEY-STUNR
                                                   COND_COUNT = LS_KOMV_KEY-ZAEHK assigning <S_COND>.
        if SY-SUBRC is initial and <S_COND> is assigned.
          <S_COND>-CHANGE_ID = 'D'.
        endif.

***   Update
      elseif CS_BAPI_SAVE_IN-T_COND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                         COND_ST_NO = LS_KOMV_KEY-STUNR
                                         COND_COUNT = LS_KOMV_KEY-ZAEHK ] ne
             IS_BAPI_SAVE_IN_OLD-T_COND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                         COND_ST_NO = LS_KOMV_KEY-STUNR
                                         COND_COUNT = LS_KOMV_KEY-ZAEHK ].

        read table CS_BAPI_SAVE_IN-T_COND with key ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                           COND_ST_NO = LS_KOMV_KEY-STUNR
                                           COND_COUNT = LS_KOMV_KEY-ZAEHK assigning <S_COND>.
        if SY-SUBRC is initial and <S_COND> is assigned.
          <S_COND>-CHANGE_ID = 'U'.
        endif.

        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = CS_BAPI_SAVE_IN-T_COND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                 COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                 COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_COND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                 COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                 COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                             changing  CS_X_STRUC  = <S_CONDX> ).

      endif.
    endloop.

  endmethod.
  method FILL_HEADERX.

    if ME->S_HEADER-PO_NUMBER is initial.
      /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-S_HEADER
                                           changing  CS_X_STRUC = CS_BAPI_SAVE_INX-S_HEADERX ).
    else.
      /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-S_HEADER
                                                     IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-S_HEADER
                                           changing  CS_X_STRUC  = CS_BAPI_SAVE_INX-S_HEADERX ).
    endif.

  endmethod.
  method FILL_ITEMX.

    data: LF_EBELP type EBELP.
    data: LS_ITEM     type BAPIMEPOITEM,
          LS_ITEM_OLD type BAPIMEPOITEM.
    data: LT_EBELP    type standard table of EBELP.
    field-symbols: <S_ITEMX> type BAPIMEPOITEMX.

***--------------------------------------------------------------------------------------
*** Get all Position Numbers (New, Update and Deleted)
    LT_EBELP = value #( for S_ITEM in IS_BAPI_SAVE_IN-T_ITEM ( S_ITEM-PO_ITEM ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_ITEM into LS_ITEM_OLD.
      if not LINE_EXISTS( LT_EBELP[ TABLE_LINE = LS_ITEM_OLD-PO_ITEM ] ).
        append LS_ITEM_OLD-PO_ITEM to LT_EBELP.
      endif.
    endloop.
    sort LT_EBELP.

***--------------------------------------------------------------------------------------
*** Process all Items
    loop at LT_EBELP into LF_EBELP.
      append value #( PO_ITEM = LF_EBELP ) to CS_BAPI_SAVE_INX-T_ITEMX assigning <S_ITEMX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ITEM[ PO_ITEM = LF_EBELP ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_ITEM[     PO_ITEM = LF_EBELP ] ).
        <S_ITEMX>-PO_ITEMX = 'I'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_ITEM[ PO_ITEM = LF_EBELP ]
                                             changing  CS_X_STRUC = <S_ITEMX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ITEM[ PO_ITEM = LF_EBELP ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_ITEM[     PO_ITEM = LF_EBELP ] ).
        <S_ITEMX>-PO_ITEMX = 'D'.

***   Update
      elseif LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_ITEM[ PO_ITEM = LF_EBELP ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_ITEM[     PO_ITEM = LF_EBELP ] ).
        if IS_BAPI_SAVE_IN_OLD-T_ITEM[ PO_ITEM = LF_EBELP ] ne IS_BAPI_SAVE_IN-T_ITEM[ PO_ITEM = LF_EBELP ].
          <S_ITEMX>-PO_ITEMX = 'U'.
        endif.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_ITEM[     PO_ITEM = LF_EBELP ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_ITEM[ PO_ITEM = LF_EBELP ]
                                             changing  CS_X_STRUC  = <S_ITEMX> ).
      endif.
    endloop.

  endmethod.
  method FILL_SCHEDULEX.

    types: begin of YS_SCHEDULE_KEY,
             PO_ITEM    type EBELP,
             SCHED_LINE type ETENR,
           end of YS_SCHEDULE_KEY.

    data: LS_SCHEDULE     type BAPIMEPOSCHEDULE,
          LS_SCHEDULE_OLD type BAPIMEPOSCHEDULE,
          LS_SCHEDULE_KEY type YS_SCHEDULE_KEY.
    data: LT_SCHEDULE_KEY type standard table of YS_SCHEDULE_KEY.
    field-symbols: <S_SCHEDULEX> type BAPIMEPOSCHEDULX.


***--------------------------------------------------------------------------------------
*** Get all Schedule Lines (New, Update and Deleted)
    LT_SCHEDULE_KEY = value #( for S_SCHEDULE in IS_BAPI_SAVE_IN-T_SCHEDULE ( PO_ITEM    = S_SCHEDULE-PO_ITEM
                                                                              SCHED_LINE = S_SCHEDULE-SCHED_LINE ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_SCHEDULE into LS_SCHEDULE_OLD.
      if not LINE_EXISTS( LT_SCHEDULE_KEY[ PO_ITEM    = LS_SCHEDULE_OLD-PO_ITEM
                                           SCHED_LINE = LS_SCHEDULE_OLD-SCHED_LINE ] ).
        append value #( PO_ITEM    = LS_SCHEDULE_OLD-PO_ITEM
                        SCHED_LINE = LS_SCHEDULE_OLD-SCHED_LINE ) to LT_SCHEDULE_KEY.
      endif.
    endloop.
    sort LT_SCHEDULE_KEY.

***--------------------------------------------------------------------------------------
*** Schedule Lines Data
    loop at LT_SCHEDULE_KEY into LS_SCHEDULE_KEY.
      append value #( PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                      SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ) to CS_BAPI_SAVE_INX-T_SCHEDULEX assigning <S_SCHEDULEX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_SCHEDULE[ PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                          SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_SCHEDULE[     PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                          SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ] ).
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_SCHEDULE[ PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                                                                SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ]
                                             changing  CS_X_STRUC = <S_SCHEDULEX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_SCHEDULE[ PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                              SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_SCHEDULE[     PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                              SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ] ).

***   Update
      elseif IS_BAPI_SAVE_IN-T_SCHEDULE[     PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                             SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ] ne
             IS_BAPI_SAVE_IN_OLD-T_SCHEDULE[ PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                             SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ].
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_SCHEDULE[     PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                                                                     SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_SCHEDULE[ PO_ITEM    = LS_SCHEDULE_KEY-PO_ITEM
                                                                                                     SCHED_LINE = LS_SCHEDULE_KEY-SCHED_LINE ]
                                             changing  CS_X_STRUC  = <S_SCHEDULEX> ).

      endif.
    endloop.

  endmethod.
  method FILTER_BAPI_DATA_IN.

***------------------------------------------------------------------------------------------------
*** Remove Items w/o update
    loop at CS_BAPI_SAVE_INX-T_ITEMX into data(LS_ITEMX)
                                    where PO_ITEMX is initial.
      delete CS_BAPI_SAVE_IN-T_ITEM   where PO_ITEM = LS_ITEMX-PO_ITEM.
      delete CS_BAPI_SAVE_INX-T_ITEMX where PO_ITEM = LS_ITEMX-PO_ITEM.
    endloop.

*** Remove Conditions w/o update
    loop at CS_BAPI_SAVE_IN-T_COND into data(LS_BAPICOND)
                                         where CHANGE_ID is initial.
      delete CS_BAPI_SAVE_IN-T_COND   where ITM_NUMBER = LS_BAPICOND-ITM_NUMBER
                                       and  COND_ST_NO = LS_BAPICOND-COND_ST_NO
                                       and  COND_COUNT = LS_BAPICOND-COND_COUNT.
      delete CS_BAPI_SAVE_INX-T_CONDX where ITM_NUMBER = LS_BAPICOND-ITM_NUMBER
                                       and  COND_ST_NO = LS_BAPICOND-COND_ST_NO.
    endloop.

  endmethod.
  method GET_BAPI_DATA_IN.

    RS_BAPI_SAVE_IN-S_HEADER   = ME->S_HEADER.
    RS_BAPI_SAVE_IN-T_ITEM     = ME->T_ITEM.
    RS_BAPI_SAVE_IN-T_SCHEDULE = ME->T_SCHEDULE.
    RS_BAPI_SAVE_IN-T_ACCOUNT  = ME->T_ACCOUNT.
    RS_BAPI_SAVE_IN-T_COND     = ME->T_COND.

  endmethod.
  method GET_BAPI_DATA_INX.

***--------------------------------------------------------------------------------------
*** Header
    ME->FILL_HEADERX( exporting IS_BAPI_SAVE_IN     = CS_BAPI_SAVE_IN
                                IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                      changing  CS_BAPI_SAVE_INX    = CS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
*** Item Data
    ME->FILL_ITEMX( exporting IS_BAPI_SAVE_IN     = CS_BAPI_SAVE_IN
                              IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                    changing  CS_BAPI_SAVE_INX    = CS_BAPI_SAVE_INX ).

*** Schedule
    ME->FILL_SCHEDULEX( exporting IS_BAPI_SAVE_IN     = CS_BAPI_SAVE_IN
                                  IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                        changing  CS_BAPI_SAVE_INX    = CS_BAPI_SAVE_INX ).

*** Account Assignment
    ME->FILL_ACCOUNTX( exporting IS_BAPI_SAVE_IN     = CS_BAPI_SAVE_IN
                                 IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                       changing  CS_BAPI_SAVE_INX    = CS_BAPI_SAVE_INX ).

*** Condition
    ME->FILL_CONDX( exporting IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                    changing  CS_BAPI_SAVE_IN     = CS_BAPI_SAVE_IN
                              CS_BAPI_SAVE_INX    = CS_BAPI_SAVE_INX ).

  endmethod.
  method GET_EBELP_NEXT.

*** Get next available Item Number
    RF_EBELP = reduce #( init MAX = 0
                         for LS_ITEM in ME->T_ITEM
                         next MAX = cond #( when LS_ITEM-PO_ITEM > MAX then LS_ITEM-PO_ITEM else MAX ) ) + 10.

  endmethod.
  method INIT_FROM_DB.

    call function 'BAPI_PO_GETDETAIL1'
      exporting
        PURCHASEORDER      = IF_PO_NUMBER
        ACCOUNT_ASSIGNMENT = 'X'
*       ITEM_TEXT          = ' '
*       HEADER_TEXT        = ' '
*       DELIVERY_ADDRESS   = ' '
*       VERSION            = ' '
*       SERVICES           = ' '
*       SERIALNUMBERS      = ' '
*       INVOICEPLAN        = ' '
      importing
        POHEADER           = ME->S_HEADER
*       POEXPIMPHEADER     =
      tables
        RETURN             = ET_BAPIRET2
        POITEM             = ME->T_ITEM
*       POADDRDELIVERY     =
        POSCHEDULE         = ME->T_SCHEDULE
        POACCOUNT          = ME->T_ACCOUNT
*       POCONDHEADER       =
        POCOND             = ME->T_COND
*       POLIMITS           =
*       POCONTRACTLIMITS   =
*       POSERVICES         =
*       POSRVACCESSVALUES  =
*       POTEXTHEADER       =
*       POTEXTITEM         =
*       POEXPIMPITEM       =
*       POCOMPONENTS       =
*       POSHIPPINGEXP      =
*       POHISTORY          =
*       POHISTORY_TOTALS   =
*       POCONFIRMATION     =
*       ALLVERSIONS        =
*       POPARTNER          =
*       EXTENSIONOUT       =
*       SERIALNUMBER       =
*       INVPLANHEADER      =
*       INVPLANITEM        =
*       POHISTORY_MA       =
      .

*** Process Messages
    if CR_MSG is not bound.
      CR_MSG = new #( ).
    endif.
    loop at ET_BAPIRET2 into data(LS_BAPIRET2).
      CR_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endloop.

  endmethod.
  method PREPARE_GMITEM_GR.

*** Get Purchase Order Item
    data(LS_ITEM) = value #( ME->T_ITEM[ PO_ITEM = IF_EBELP ] optional ).
    check LS_ITEM is not initial.

*** Goods receipt for purchase order into warehouse/stores
    RS_GMITEM = value #( MOVE_TYPE         = '101'
                         MVT_IND           = 'B'    " Goods movement for purchase order
                         PLANT             = LS_ITEM-PLANT
                         STGE_LOC          = cond #( when IF_LGORT is supplied then IF_LGORT else LS_ITEM-STGE_LOC )
                         STCK_TYPE         = IF_INSMK
                         PO_NUMBER         = ME->S_HEADER-PO_NUMBER
                         PO_ITEM           = LS_ITEM-PO_ITEM
                         IND_PROPOSE_QUANX = ABAP_TRUE
                       ).

  endmethod.
  method SAVE.

    data: LS_BAPI_SAVE_IN     type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_INX    type YS_BAPI_SAVE_INX.
    data: LR_BOB_PURORD type ref to ZCL_VCXI_XCI_BOB_PURORD.


***--------------------------------------------------------------------------------------
*** Map data to BAPI structures
    LS_BAPI_SAVE_IN = ME->GET_BAPI_DATA_IN( ).

*** Load current DB values for compare
    if ME->S_HEADER-PO_NUMBER is not initial.
      create object LR_BOB_PURORD.
      LR_BOB_PURORD->INIT_FROM_DB( IF_PO_NUMBER = ME->S_HEADER-PO_NUMBER ).
      LS_BAPI_SAVE_IN_OLD = LR_BOB_PURORD->GET_BAPI_DATA_IN( ).
    endif.

*** Build X-Structure
    ME->GET_BAPI_DATA_INX( exporting IS_BAPI_SAVE_IN_OLD = LS_BAPI_SAVE_IN_OLD
                           changing  CS_BAPI_SAVE_IN     = LS_BAPI_SAVE_IN
                                     CS_BAPI_SAVE_INX    = LS_BAPI_SAVE_INX ).

*** Filter Data w/o changes
    ME->FILTER_BAPI_DATA_IN( changing CS_BAPI_SAVE_IN  = LS_BAPI_SAVE_IN
                                      CS_BAPI_SAVE_INX = LS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
    if ME->S_HEADER-PO_NUMBER is initial.
***   Create new Purchase Order
      call function 'BAPI_PO_CREATE1'
        exporting
          POHEADER    = LS_BAPI_SAVE_IN-S_HEADER
          POHEADERX   = LS_BAPI_SAVE_INX-S_HEADERX
          TESTRUN     = IF_TESTRUN
        importing
          EXPHEADER   = ME->S_HEADER
        tables
          RETURN      = ET_BAPIRET2
          POITEM      = LS_BAPI_SAVE_IN-T_ITEM
          POITEMX     = LS_BAPI_SAVE_INX-T_ITEMX
          POSCHEDULE  = LS_BAPI_SAVE_IN-T_SCHEDULE
          POSCHEDULEX = LS_BAPI_SAVE_INX-T_SCHEDULEX
          POACCOUNT   = LS_BAPI_SAVE_IN-T_ACCOUNT
          POACCOUNTX  = LS_BAPI_SAVE_INX-T_ACCOUNTX
          POCOND      = LS_BAPI_SAVE_IN-T_COND
          POCONDX     = LS_BAPI_SAVE_INX-T_CONDX.
    else.
***   Always mark Number to avoid Message from BAPI
      LS_BAPI_SAVE_INX-S_HEADERX-PO_NUMBER = ABAP_TRUE.

***   Change existing Purchase Order
      call function 'BAPI_PO_CHANGE'
        exporting
          PURCHASEORDER = ME->S_HEADER-PO_NUMBER
          POHEADER      = LS_BAPI_SAVE_IN-S_HEADER
          POHEADERX     = LS_BAPI_SAVE_INX-S_HEADERX
          TESTRUN       = IF_TESTRUN
        importing
          EXPHEADER     = ME->S_HEADER
        tables
          RETURN        = ET_BAPIRET2
          POITEM        = LS_BAPI_SAVE_IN-T_ITEM
          POITEMX       = LS_BAPI_SAVE_INX-T_ITEMX
          POSCHEDULE    = LS_BAPI_SAVE_IN-T_SCHEDULE
          POSCHEDULEX   = LS_BAPI_SAVE_INX-T_SCHEDULEX
          POACCOUNT     = LS_BAPI_SAVE_IN-T_ACCOUNT
          POACCOUNTX    = LS_BAPI_SAVE_INX-T_ACCOUNTX
          POCOND        = LS_BAPI_SAVE_IN-T_COND
          POCONDX       = LS_BAPI_SAVE_INX-T_CONDX.
    endif.

***----------------------------------------------------------------------------
*** Process Messages
    create object RR_MSG.
    loop at ET_BAPIRET2 into data(LS_BAPIRET2).
      RR_MSG->ADD_MESSAGE( IF_MSGID = LS_BAPIRET2-ID
                           IF_MSGTY = LS_BAPIRET2-TYPE
                           IF_MSGNO = LS_BAPIRET2-NUMBER
                           IF_MSGV1 = LS_BAPIRET2-MESSAGE_V1
                           IF_MSGV2 = LS_BAPIRET2-MESSAGE_V2
                           IF_MSGV3 = LS_BAPIRET2-MESSAGE_V3
                           IF_MSGV4 = LS_BAPIRET2-MESSAGE_V4 ).
    endloop.

*** Perform Commit
    check IF_TESTRUN ne ABAP_TRUE and
          IF_COMMIT  eq ABAP_TRUE.
    if not LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ) and
       not LINE_EXISTS( ET_BAPIRET2[ TYPE = 'A' ] ).
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
      commit work.
    else.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
    endif.

  endmethod.
