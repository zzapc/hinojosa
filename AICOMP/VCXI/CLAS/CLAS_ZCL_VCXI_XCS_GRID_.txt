
class ZCL_VCXI_XCS_GRID definition
  public
  abstract
  create public .

public section.

  type-pools ABAP .
  data F_FREED type ABAP_BOOL read-only .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CHECK_CHANGED_DATA
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_BTYPE_BUTTON type TB_BTYPE value '0'. "#EC NOTEXT
  constants C_BTYPE_CHECKBOX type TB_BTYPE value '5'. "#EC NOTEXT
  constants C_BTYPE_MENU type TB_BTYPE value '2'. "#EC NOTEXT
  constants C_BTYPE_MENU_BTN type TB_BTYPE value '1'. "#EC NOTEXT
  constants C_BTYPE_MENU_ENTRY type TB_BTYPE value '6'. "#EC NOTEXT
  constants C_BTYPE_SEPARATOR type TB_BTYPE value '3'. "#EC NOTEXT
  data F_CONTAINER_NAME type SCRFNAME .
  data F_STYLE_DISABLED type LVC_STYLE .
  data F_STYLE_ENABLED type LVC_STYLE .
  data F_TABNAME type TABNAME .
  data R_DATA type ref to DATA .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .
  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .
  data S_ROW_NO type LVC_S_ROID .
  data S_SCROLL_COL type LVC_S_COL .
  data S_SCROLL_ROW type LVC_S_ROID .
  type-pools ABAP .
  data F_APPL_EVENTS type ABAP_BOOL .

  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
  abstract
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods GET_TOOLBAR_EXCLUDING
    returning
      value(RT_TOOLBAR_EXCLUDING) type UI_FUNCTIONS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_STYLE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods SET_EVENT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_GATE_FREED
    for event GATE_FREED of /VCXI/CL_VKSR_GATE .
private section.

  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
endclass. "ZCL_VCXI_XCS_GRID definition
class ZCL_VCXI_XCS_GRID implementation.
method CHANGE_STYLE.

  data:          LS_STYL   type LVC_S_STYL.
  field-symbols: <S_STYL>  type LVC_S_STYL.

  read table CT_STYL assigning <S_STYL>
                     with key FIELDNAME = IF_FIELDNAME.
  if SY-SUBRC eq 0.
    <S_STYL>-STYLE = IF_STYLE.
  else.
    LS_STYL-FIELDNAME   = IF_FIELDNAME.
    LS_STYL-STYLE       = IF_STYLE.
    insert LS_STYL into table CT_STYL.
  endif.

endmethod.
method CHECK_CHANGED_DATA.

  if ME->R_GRID  is bound and
     ME->F_FREED ne ABAP_TRUE.
*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method CONSTRUCTOR.

  move IR_GATE           to ME->R_GATE.
  move IR_UIGATE         to ME->R_UIGATE.
  move IF_TABNAME        to ME->F_TABNAME.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.
  move IF_APPL_EVENTS    to ME->F_APPL_EVENTS.

*** Create Data Reference to Grid Data
  create data ME->R_DATA type table of (ME->F_TABNAME).

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Activate Event Handler
  if ME->R_GATE is bound.
    set handler ME->HANDLE_GATE_FREED for ME->R_GATE activation ABAP_TRUE.
  endif.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.

*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_FIELDCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method GET_LAYOUT.

  move ABAP_TRUE to RS_LAYOUT-NO_TOOLBAR.
  move ABAP_TRUE to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'  to RS_LAYOUT-STYLEFNAME.

*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''       to RS_LAYOUT-EDIT.

endmethod.
method GET_SELECTED_ROWS.

  data:          LT_CELL              type        LVC_T_CELL,
                 LT_ROW               type        LVC_T_ROW.
  data:          LS_CELL              type        LVC_S_CELL,
                 LS_ROW               type        LVC_S_ROW.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  if lines( LT_CELL ) gt 0.

    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to ET_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
        move LS_CELL-ROW_ID to ES_LAST_ROW.
      endif.
    endloop.

  endif.

*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if lines( LT_ROW ) gt 0.

    append lines of LT_ROW to ET_ROW.

    loop at LT_ROW into LS_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
        move LS_ROW to ES_LAST_ROW.
      endif.
    endloop.

  endif.

endmethod.
method GET_TOOLBAR_EXCLUDING.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to RT_TOOLBAR_EXCLUDING.

endmethod.
method HANDLE_DATA_CHANGED.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***   Mark as Freed
      move ABAP_TRUE to ME->F_FREED.

***   Free Grid
      ME->DO_FREE( ).

      if ME->R_GATE is bound.
***     Deactivate Event Handler
        set handler ME->HANDLE_GATE_FREED for ME->R_GATE activation ABAP_FALSE.

***     Free Reference
        free: ME->R_GATE.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = ME->F_APPL_EVENTS
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

    ME->SET_EVENT( ).

*** Register F4-Fields
    ME->REGISTER_F4_FIELDS( ).

  endif.

endmethod.
method INIT_STYLE.

  data:          LF_LOCKED type        /VCXI/CKX_LOCKED,
                 LF_INUSE  type        /VCXI/VKSR_INUSE.

***----------------------------------------------------------------------------
*** Get Lock and In-Use Status
  if ME->R_GATE is bound.
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).
  endif.

*** Set Right Style Definition based on is any change allowed
  if LF_LOCKED eq ABAP_TRUE and
     LF_INUSE  eq ABAP_TRUE.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
  else.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
  endif.

*** Set general Style Disabled
  ME->F_STYLE_DISABLED = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.

endmethod.
method REFRESH_GRID.

  data:          LF_INITIAL_REFRESH   type          ABAP_BOOL.
  data:          LS_LAYOUT            type          LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS,
                 LT_FCAT              type          LVC_T_FCAT.
  field-symbols: <T_DATA>             type standard table.

  check ME->F_FREED       ne ABAP_TRUE and
        ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

  if ME->R_GRID is not bound.
    move ABAP_TRUE to LF_INITIAL_REFRESH.
  endif.

*** Initialize if needed
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).
  ME->INIT_STYLE( ).

*** Get Grid Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT( )          to LT_FCAT.

*** Call DVC Servcie - Modify Fieldcat
  if ME->R_GATE is bound.
    ZCL_VCXI_XCDR_SERVICE=>MODIFY_FCAT( exporting IR_GATE    = ME->R_GATE
                                                  IF_CC_NAME = ME->F_CONTAINER_NAME
                                        changing  CT_FCAT    = LT_FCAT ).
  endif.

  move ME->GET_LAYOUT( )            to LS_LAYOUT.
  move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

  if LF_INITIAL_REFRESH ne ABAP_TRUE.
*** Get the Scroll id for ALV Grid
    ME->R_GRID->GET_SCROLL_INFO_VIA_ID( importing ES_COL_INFO = ME->S_SCROLL_COL
                                                  ES_ROW_NO   = ME->S_SCROLL_ROW ).

**** Get the Current cell
    ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                            ES_COL_ID = ME->S_COL
                                            ES_ROW_NO = ME->S_ROW_NO ).
  endif.

*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = <T_DATA>
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  if LF_INITIAL_REFRESH ne ABAP_TRUE.
*** Set the original Scroll ID for ALV grid
    ME->R_GRID->SET_SCROLL_INFO_VIA_ID( IS_COL_INFO = ME->S_SCROLL_COL
                                        IS_ROW_NO   = ME->S_SCROLL_ROW ).

*** Set Current Cell
    ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                         IS_COLUMN_ID = ME->S_COL
                                         IS_ROW_NO    = ME->S_ROW_NO ).
  endif.

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT,
         LS_SHLP      type                   SHLP_DESCR_T.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Catalog
  LT_FCAT = ME->GET_FIELDCAT( ).

*** Call DVC Servcie - Modify Fieldcat
  if ME->R_GATE is bound.
    ZCL_VCXI_XCDR_SERVICE=>MODIFY_FCAT( exporting IR_GATE    = ME->R_GATE
                                                  IF_CC_NAME = ME->F_CONTAINER_NAME
                                        changing  CT_FCAT    = LT_FCAT ).
  endif.

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_FCAT-DOMNAME
          FIELDNAME         = SPACE
        importing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-REF_TABLE
            FIELDNAME         = LS_FCAT-FIELDNAME
          importing
            SHLP              = LS_SHLP
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

      endif.


      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method SET_EVENT.

  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

endmethod.
