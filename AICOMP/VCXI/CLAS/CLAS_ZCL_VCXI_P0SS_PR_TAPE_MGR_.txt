
class ZCL_VCXI_P0SS_PR_TAPE_MGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  data F_NO_CHECK type ABAP_BOOL read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  methods INIT_CHECK_INACTIVE
    raising
      /VCXI/CX_CKX .
  methods CHECK_TTAPE
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_TAPE_MGR definition
class ZCL_VCXI_P0SS_PR_TAPE_MGR implementation.
method CHECK_TTAPE.

***  0 All Tapes are consistent with Component Tapes.
***  1 Following Tapes are not considered on Component Level: &1
***  2 Following Tapes are only considered on Component Level: &1

  data:          LF_TTAPE             type          ZVCXI_P0S_TTAPE,
                 LF_TABIX             type          I,
                 LF_MSGV1             type          SYMSGV.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE,
                 LT_GATE_COMP         type          /VCXI/VKSR_TT_GATE,
                 LT_TTAPE_SE          type table of ZVCXI_P0S_TTAPE,
                 LT_TTAPE_COMP        type table of ZVCXI_P0S_TTAPE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_TAPE        type ref to   ZCL_VCXI_P0SS_PR_MS_TAPE.

*** Do only check if we have Components
  check ME->F_NO_CHECK eq ABAP_FALSE.

*** Get Gates of Tapes
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MS_TAPE=>C_IPRVT_P0_MS_TAPE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

*** Get Gates of Tapes
  LT_GATE_COMP = ME->R_GATE->GET_PRVDR( IF_IPRVT  = 'ZVCXI_P0SS_MS_TAPE_COMP_SE'
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).

  append lines of LT_GATE_COMP to LT_GATE.

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_TAPE.
        check LR_PR_MS_TAPE is bound.

        LF_TTAPE = LR_PR_MS_TAPE->GET_TTAPE( ).
        if LR_GATE->IS_IN_LINE( IR_GATE = ME->R_GATE ) eq ABAP_TRUE.
          collect LF_TTAPE into LT_TTAPE_SE.
        else.
          collect LF_TTAPE into LT_TTAPE_COMP.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    continue.
  endloop.

  loop at LT_TTAPE_SE into LF_TTAPE.
    move SY-TABIX to LF_TABIX.
    read table LT_TTAPE_COMP with key TABLE_LINE = LF_TTAPE transporting no fields.
    if SY-SUBRC = 0.
      delete LT_TTAPE_COMP index SY-TABIX.
      delete LT_TTAPE_SE index LF_TABIX.
    endif.
  endloop.


*** All is perfect
  if LT_TTAPE_COMP is initial and
     LT_TTAPE_SE   is initial.
    RF_RETURN = 0.
    if IR_MSG is bound.
***   All Tapes are consistent with Component Tapes.
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                           IF_MSGTY = 'S'
                           IF_MSGNO = '140' ).
    endif.
    exit.
  endif.

*** Tapes on SE Header are not on Component Level
  if LT_TTAPE_SE is not initial.
    clear: LF_MSGV1.
    loop at LT_TTAPE_SE into LF_TTAPE.
      if LF_MSGV1 is initial.
        move LF_TTAPE to LF_MSGV1.
      else.
        concatenate LF_MSGV1 LF_TTAPE into LF_MSGV1 separated by ','.
      endif.
    endloop.

    RF_RETURN = 1.
    if IR_MSG is bound.
***   Following Tapes are not considered on Component Level: &1
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '141'
                           IF_MSGV1 = LF_MSGV1 ).
    endif.
  endif.

*** Tapes on Component Level are not on SE Header
  if LT_TTAPE_COMP is not initial.
    clear: LF_MSGV1.
    loop at LT_TTAPE_COMP into LF_TTAPE.
      if LF_MSGV1 is initial.
        move LF_TTAPE to LF_MSGV1.
      else.
        concatenate LF_MSGV1 LF_TTAPE into LF_MSGV1 separated by ','.
      endif.
    endloop.

    RF_RETURN = 2.
    if IR_MSG is bound.
***   Following Tapes are only considered on Component Level: &1
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '142'
                           IF_MSGV1 = LF_MSGV1 ).
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Calculation is inactive flag
  ME->INIT_CHECK_INACTIVE( ).

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------------------------------------
*** Check Tapes
  case ME->CHECK_TTAPE( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------------------------------------
*** Check Tape Type
  ME->CHECK_TTAPE( IR_MSG = IR_MESSAGE ).

endmethod.
method INIT_CHECK_INACTIVE.

  check ME->R_GATE is bound.
  if ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ) is initial.
    ME->F_NO_CHECK = ABAP_TRUE.
  endif.

endmethod.
