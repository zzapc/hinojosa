
class ZCL_VCXI_PXSP_PR_ADDON_RWIND definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_ADDON
  create public .

public section.

  constants C_PARID_EYEMP type /VCXI/VKS_PARID value 'ZVCXI_PX_EYEMP' ##NO_TEXT.
  constants C_PARID_WIDIR type /VCXI/VKS_PARID value 'ZVCXI_PX_WIDIR' ##NO_TEXT.
  constants C_PARID_WISID type /VCXI/VKS_PARID value 'ZVCXI_PX_WISID' ##NO_TEXT.
  constants C_IAATY_RLETA type /VCXI/VSMC_IAATY value 'FF_AA_RLETA' ##NO_TEXT.

  methods GET_EYEMP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_EYEMP) type ZVCXI_PXS_EYEMP
    raising
      /VCXI/CX_CKX .
  methods GET_WIDIR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WIDIR) type ZVCXI_PXS_WIDIR
    raising
      /VCXI/CX_CKX .
  methods GET_WISID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WISID) type ZVCXI_PXS_WISID
    raising
      /VCXI/CX_CKX .
  methods SET_EYEMP
    importing
      !IF_EYEMP type ZVCXI_PXS_EYEMP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIDIR
    importing
      !IF_WIDIR type ZVCXI_PXS_WIDIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WISID
    importing
      !IF_WISID type ZVCXI_PXS_WISID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_RLETA
    returning
      value(RS_RLETA) type ZVCXI_PXS_S_RLETA
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_MC_CONSU type /VCXI/VKSC_IEVNT value 'RECALC_MC_CONSU' ##NO_TEXT.
  constants C_IEVNT_O_EYEMP_CHANGED type /VCXI/VKSC_IEVNT value 'EYEMP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIDIR_CHANGED type /VCXI/VKSC_IEVNT value 'WIDIR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WISID_CHANGED type /VCXI/VKSC_IEVNT value 'WISID_CHANGED' ##NO_TEXT.

  methods GET_NOOUT
    returning
      value(RF_NOOUT) type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MC_CONSU
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_RTE_SAREC
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSP_PR_ADDON_RWIND definition
class ZCL_VCXI_PXSP_PR_ADDON_RWIND implementation.
  method GET_EYEMP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).
    move LS_PARAM-ATWRT to RF_EYEMP.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOOUT.

    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSP_PR_MC_CORE=>C_IPRVT_PX_MC_CORE ) into data(LR_GATE).
      RF_NOOUT += cast ZCL_VCXI_PXSP_PR_MC_CORE( LR_GATE->R_CLSPR )->GET_NOOUT( ).
    endloop.

  endmethod.
  method GET_RLETA.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSP_PR_MC_CORE=>C_IPRVT_PX_MC_CORE ).
    check LT_GATE is not initial.

    RS_RLETA = cast ZCL_VCXI_PXSP_PR_MC_CORE( LT_GATE[ 1 ]->R_CLSPR )->GET_RLETA( ).

  endmethod.
  method GET_RTE_SAREC.

    data:          LF_GAATY      type /VCXI/VSMC_GAATY.
    field-symbols: <S_RTE_SAREC> type /VCXI/VSMR_S_RTE_SAREC,
                   <S_ARECN>     type /VCXI/VSMR_S_RTE_RANGE_ARECN.

*** Get Super
    RT_RTE_SAREC = SUPER->GET_RTE_SAREC( ).

    check ME->R_RTE_CADDON          is bound and
          ME->R_RTE_CADDON->R_ATYPE is bound.

*** Aspect - Target Roll Length
    try.
        LF_GAATY = ME->R_RTE_CADDON->R_ATYPE->GET_GAATY_BY_IAATY( IF_IAATY = C_IAATY_RLETA
                                                                  IF_MAATY = /VCXI/CL_VSMC_ATYPE=>C_MAATY_REC ).
        append initial line to RT_RTE_SAREC assigning <S_RTE_SAREC>.
        move LF_GAATY                                     to <S_RTE_SAREC>-GAATY.
        move 1                                            to <S_RTE_SAREC>-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to <S_RTE_SAREC>-ASORT.

        append initial line         to <S_RTE_SAREC>-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->GET_RLETA( )-RLETA to <S_ARECN>-LOW.

      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method GET_WIDIR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIDIR ).
    move LS_PARAM-ATWRT to RF_WIDIR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WISID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISID ).
    move LS_PARAM-ATWRT to RF_WISID.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_MC_CONSU.
        ME->HANDLE_RECALC_MC_CONSU( IT_GATE = IT_GATE_PROVIDER ).

    endcase.

  endmethod.
  method HANDLE_RECALC_MC_CONSU.

    data: LF_UPDATE_ALL type ABAP_BOOL,
          LF_NOOUT      type ZVCXI_XCS_NOOUT.
    data: LS_MQTYO type ZVCXI_XCSP_S_MQTYO,
          LS_MQTYI type ZVCXI_XCSP_S_MQTYI.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PARENT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MACHINE  type ref to ZCL_VCXI_XCSP_PR_MACHINE,
          LR_PR_MC       type ref to ZCL_VCXI_XCSP_PR_MC.

***--------------------------------------------------------------------------------------
*** Should all MCs be updated or just the requester
    read table IT_GATE with key TABLE_LINE = ME->R_GATE
                       transporting no fields.
    if SY-SUBRC eq 0.
      LF_UPDATE_ALL = ABAP_TRUE.
    else.
      LR_GATE_PARENT = ME->R_GATE->GET_PARENT( ).
      read table IT_GATE with key TABLE_LINE = LR_GATE_PARENT
                         transporting no fields.
      if SY-SUBRC = 0.
        LF_UPDATE_ALL = ABAP_TRUE.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Machine Quantity
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MACHINE=>C_IPRVT_XCS_MACHINE
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC = 0.
      clear: LR_PR_MACHINE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MACHINE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MACHINE.
      endtry.
      if LR_PR_MACHINE is bound.
        LS_MQTYO = LR_PR_MACHINE->GET_MQTYO( ).
        LF_NOOUT = ME->GET_NOOUT( ).
        if LF_NOOUT ne 0.
          LS_MQTYI-MQTYI = LS_MQTYO-MQTYO / LF_NOOUT.
        else.
          LS_MQTYI-MQTYI = 0.
        endif.
        LS_MQTYI-MQTYI_UOM = LS_MQTYO-MQTYO_UOM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get all Material Consumptions
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MC=>C_IPRVT_XCS_MC
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Start Recalc Consumption of all Material Consumptions or just the requester
    loop at LT_GATE into LR_GATE.
      if LF_UPDATE_ALL eq ABAP_FALSE.
        read table IT_GATE with key TABLE_LINE = LR_GATE transporting no fields.
        if SY-SUBRC ne 0.
          continue.
        endif.
      endif.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MC.
          check LR_PR_MC is bound.
          LR_PR_MC->CALC_CONSU( IS_MQTYI = LS_MQTYI ).
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method SET_EYEMP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).

    move IF_EYEMP to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EYEMP_CHANGED ).
    endif.

  endmethod.
  method SET_WIDIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIDIR ).

    move IF_WIDIR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIDIR_CHANGED ).
    endif.

  endmethod.
  method SET_WISID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISID ).

    move IF_WISID to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISID_CHANGED ).
    endif.

  endmethod.
