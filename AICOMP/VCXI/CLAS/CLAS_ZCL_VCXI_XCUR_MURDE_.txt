
class ZCL_VCXI_XCUR_MURDE definition
  public
  final
  create public .

public section.

  data T_MURGR type ZVCXI_XCUR_TT_MURGR read-only .
  data R_SMDCNTRL type ref to ZCL_VCXI_XCUR_SMDCNTRL read-only .

  methods ADD_MURGR
    importing
      !IT_MUROB type ZVCXI_XCUR_TT_MUROB optional
    returning
      value(RF_CMURG) type ZVCXI_XCUR_CMURG
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_ICMDL type /VCXI/CKMC_ICMDL default 'ZVCXI_XCUR_MUR'
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MUMAP_TO_XML
    importing
      !IT_MUMAP type ZVCXI_XCUR_TT_MUMAP
    returning
      value(RT_MUMAP_XML) type ZVCXI_XCUR_TT_MUMAP_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MUREL_TO_XML
    importing
      !IT_MUREL type ZVCXI_XCUR_TT_MUREL
    returning
      value(RT_MUREL_XML) type ZVCXI_XCUR_TT_MUREL_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MURFP_TO_XML
    importing
      !IT_MURFP type ZVCXI_XCUR_TT_MURFP
    returning
      value(RT_MURFP_XML) type ZVCXI_XCUR_TT_MURFP_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MURFE_TO_XML
    importing
      !IT_MURFE type ZVCXI_XCUR_TT_MURFE
    returning
      value(RT_MURFE_XML) type ZVCXI_XCUR_TT_MURFE_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MURGR_TO_XML
    importing
      !IT_MURGR type ZVCXI_XCUR_TT_MURGR
    returning
      value(RT_MURGR_XML) type ZVCXI_XCUR_TT_MURGR_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MURUE_TO_XML
    importing
      !IT_MURUE type ZVCXI_XCUR_TT_MURUE
    returning
      value(RT_MURUE_XML) type ZVCXI_XCUR_TT_MURUE_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_MURUP_TO_XML
    importing
      !IT_MURUP type ZVCXI_XCUR_TT_MURUP
    returning
      value(RT_MURUP_XML) type ZVCXI_XCUR_TT_MURUP_XML
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MUMAP
    importing
      !IT_MUMAP_XML type ZVCXI_XCUR_TT_MUMAP_XML
    returning
      value(RT_MUMAP) type ZVCXI_XCUR_TT_MUMAP
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MUREL
    importing
      !IT_MUREL_XML type ZVCXI_XCUR_TT_MUREL_XML
    returning
      value(RT_MUREL) type ZVCXI_XCUR_TT_MUREL
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MURFP
    importing
      !IT_MURFP_XML type ZVCXI_XCUR_TT_MURFP_XML
    returning
      value(RT_MURFP) type ZVCXI_XCUR_TT_MURFP
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MURFE
    importing
      !IT_MURFE_XML type ZVCXI_XCUR_TT_MURFE_XML
    returning
      value(RT_MURFE) type ZVCXI_XCUR_TT_MURFE
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MURGR
    importing
      !IT_MURGR_XML type ZVCXI_XCUR_TT_MURGR_XML
    returning
      value(RT_MURGR) type ZVCXI_XCUR_TT_MURGR
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MURUE
    importing
      !IT_MURUE_XML type ZVCXI_XCUR_TT_MURUE_XML
    returning
      value(RT_MURUE) type ZVCXI_XCUR_TT_MURUE
    raising
      /VCXI/CX_CKX .
  class-methods CONV_XML_TO_MURUP
    importing
      !IT_MURUP_XML type ZVCXI_XCUR_TT_MURUP_XML
    returning
      value(RT_MURUP) type ZVCXI_XCUR_TT_MURUP
    raising
      /VCXI/CX_CKX .
  methods COPY_MURGR
    importing
      !IF_CMURG type ZVCXI_XCUR_CMURG
    returning
      value(RF_CMURG) type ZVCXI_XCUR_CMURG
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_MUREL
    importing
      !IR_MUCEL type ref to ZCL_VCXI_XCUC_MUCEL
    returning
      value(RS_MUREL) type ZVCXI_XCUR_S_MUREL
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_RANGE
    importing
      !IF_DATEL type ROLLNAME
    returning
      value(RR_RANGE) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods CREATE_RECORD
    importing
      !IF_ID type /VCXI/CKX_ID
      !IF_DESCR type /VCXI/CKX_DESCR optional
    returning
      value(RR_RECORD) type ref to /VCXI/CL_CKMR_RECORD
    raising
      /VCXI/CX_CKX .
  methods DELETE_MURGR
    importing
      !IF_CMURG type ZVCXI_XCUR_CMURG
    raising
      /VCXI/CX_CKX .
  methods GET_CMODEL
    exporting
      !ET_CMODEL type /VCXI/CKX_TT_OBJECT
    returning
      value(RR_CMODEL) type ref to /VCXI/CL_CKMC_CMODEL
    raising
      /VCXI/CX_CKX .
  methods SET_CMODEL
    importing
      !IR_CMODEL type ref to /VCXI/CL_CKMC_CMODEL optional
      !IF_ICMDL type /VCXI/CKMC_ICMDL optional
    raising
      /VCXI/CX_CKX .
  class-methods START_PROCESS
    importing
      !IR_RECORD type ref to /VCXI/CL_CKMR_RECORD
      !IF_OSTAR type ZVCXI_XCUR_OSTAR
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MURGR
    importing
      !IS_MURGR type ZVCXI_XCUR_S_MURGR
    raising
      /VCXI/CX_CKX .
protected section.

  data R_CMODEL type ref to /VCXI/CL_CKMC_CMODEL .

  methods INIT_SMDCNTRL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_MURDE definition
class ZCL_VCXI_XCUR_MURDE implementation.
  method ADD_MURGR.

*** Get Max Counter
    if ME->T_MURGR is not initial.
      RF_CMURG = ME->T_MURGR[ LINES( ME->T_MURGR ) ]-CMURG.
    endif.

*** Increase Counter before creating next entry
    add 1 to RF_CMURG.

*** Add New Update Group with New Counter and sort
    insert value #( CMURG   = RF_CMURG
                    T_MUROB = IT_MUROB
                  ) into table ME->T_MURGR.

  endmethod.
  method CONSTRUCTOR.

*** Default SmartMD Model
    ME->SET_CMODEL( IF_ICMDL = IF_ICMDL ).

  endmethod.
  method CONV_MUMAP_TO_XML.

    data: LS_MUMAP type ZVCXI_XCUR_S_MUMAP.
    data: LR_DATADESCR type ref to CL_ABAP_DATADESCR.
    field-symbols: <S_MUMAP_XML>  type ZVCXI_XCUR_S_MUMAP_XML,
                   <I_RANGE_FROM> type standard table,
                   <F_VALUE_TO>   type ANY.


    loop at IT_MUMAP into LS_MUMAP.
      append initial line to RT_MUMAP_XML assigning <S_MUMAP_XML>.
      move-corresponding LS_MUMAP to <S_MUMAP_XML>.

***   Keep name of Data Element
      LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = LS_MUMAP-R_VALUE_TO ).
      <S_MUMAP_XML>-DATEL = LR_DATADESCR->GET_RELATIVE_NAME( ).

***   Dereferencing Data
      assign LS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.
      assign LS_MUMAP-R_VALUE_TO->*   to <F_VALUE_TO>.

***   Convert to XML
      call transformation ID
           source I_RANGE_FROM = <I_RANGE_FROM>
                  F_VALUE_TO   = <F_VALUE_TO>
           result xml <S_MUMAP_XML>-XML.
    endloop.

  endmethod.
  method CONV_MUREL_TO_XML.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL.
    field-symbols: <S_MUREL_XML> type ZVCXI_XCUR_S_MUREL_XML.


    loop at IT_MUREL into LS_MUREL.
      append initial line to RT_MUREL_XML assigning <S_MUREL_XML>.
      move-corresponding LS_MUREL to <S_MUREL_XML>.

***--------------------------------------------------------------------------------------
**+   Convert Update Customizing Element
      if LS_MUREL-R_MUCEL is bound.
        <S_MUREL_XML>-GMUCE = LS_MUREL-R_MUCEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      endif.

***--------------------------------------------------------------------------------------
***   Convert Parameter-based Filter
      <S_MUREL_XML>-T_MURFP_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MURFP_TO_XML( IT_MURFP = LS_MUREL-T_MURFP ).

***   Convert Exit-based Filter
      <S_MUREL_XML>-T_MURFE_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MURFE_TO_XML( IT_MURFE = LS_MUREL-T_MURFE ).

***--------------------------------------------------------------------------------------
***   Convert Parameter-based Update
      <S_MUREL_XML>-T_MURUP_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MURUP_TO_XML( IT_MURUP = LS_MUREL-T_MURUP ).

***   Convert Parameter-based Update
      <S_MUREL_XML>-T_MURUE_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MURUE_TO_XML( IT_MURUE = LS_MUREL-T_MURUE ).
    endloop.

  endmethod.
  method CONV_MURFE_TO_XML.

    data: LS_MURFE type ZVCXI_XCUR_S_MURFE.
    data: LR_DATADESCR type ref to CL_ABAP_DATADESCR.
    field-symbols: <S_MURFE_XML> type ZVCXI_XCUR_S_MURFE_XML,
                   <S_DATA>      type ANY.


    loop at IT_MURFE into LS_MURFE.
      append initial line to RT_MURFE_XML assigning <S_MURFE_XML>.
      move-corresponding LS_MURFE to <S_MURFE_XML>.

***   Get Type Category and Relative Name of Data Reference
      check LS_MURFE-R_DATA is bound.
      LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = LS_MURFE-R_DATA ).
      move LR_DATADESCR->KIND to <S_MURFE_XML>-KIND.
      case LR_DATADESCR->KIND.
        when CL_ABAP_DATADESCR=>KIND_TABLE.
          LR_DATADESCR = cast CL_ABAP_TABLEDESCR( LR_DATADESCR )->GET_TABLE_LINE_TYPE( ).
      endcase.
      <S_MURFE_XML>-RELNAME = LR_DATADESCR->GET_RELATIVE_NAME( ).

***   Dereferencing Data
      assign LS_MURFE-R_DATA->* to <S_DATA>.

***   Convert to XML
      call transformation ID
           source S_DATA = <S_DATA>
           result xml <S_MURFE_XML>-XML.

    endloop.

  endmethod.
  method CONV_MURFP_TO_XML.

    data: LS_MURFP type ZVCXI_XCUR_S_MURFP.
    data: LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR,
          LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
          LR_DATADESCR   type ref to CL_ABAP_DATADESCR.
    field-symbols: <S_MURFP_XML> type ZVCXI_XCUR_S_MURFP_XML,
                   <I_RANGE>     type standard table.


    loop at IT_MURFP into LS_MURFP.
      append initial line to RT_MURFP_XML assigning <S_MURFP_XML>.
      move-corresponding LS_MURFP to <S_MURFP_XML>.

**+   Convert Parameter
      if LS_MURFP-R_PARAM is bound.
        <S_MURFP_XML>-PARID = LS_MURFP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      endif.

***   Keep Name of Data Element
      LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = LS_MURFP-R_RANGE ).
      LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).
      LR_DATADESCR   ?= LR_STRUCTDESCR->GET_COMPONENT_TYPE( P_NAME = 'LOW' ).
      <S_MURFP_XML>-DATEL = LR_DATADESCR->GET_RELATIVE_NAME( ).

***   Dereferencing Data
      assign LS_MURFP-R_RANGE->* to <I_RANGE>.

***   Convert to XML
      call transformation ID
           source I_RANGE = <I_RANGE>
           result xml <S_MURFP_XML>-XML.
    endloop.

  endmethod.
  method CONV_MURGR_TO_XML.

    data: LS_MURGR type ZVCXI_XCUR_S_MURGR.
    field-symbols: <S_MURGR_XML> type ZVCXI_XCUR_S_MURGR_XML.


    loop at IT_MURGR into LS_MURGR.
      append initial line to RT_MURGR_XML assigning <S_MURGR_XML>.
      move-corresponding LS_MURGR to <S_MURGR_XML>.

***   Convert Update Element
      <S_MURGR_XML>-T_MUREL_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MUREL_TO_XML( IT_MUREL = LS_MURGR-T_MUREL ).
    endloop.

  endmethod.
  method CONV_MURUE_TO_XML.

    data: LS_MURUE type ZVCXI_XCUR_S_MURUE.
    data: LR_DATADESCR type ref to CL_ABAP_DATADESCR.
    field-symbols: <S_MURUE_XML> type ZVCXI_XCUR_S_MURUE_XML,
                   <S_DATA>      type ANY.


    loop at IT_MURUE into LS_MURUE.
      append initial line to RT_MURUE_XML assigning <S_MURUE_XML>.
      move-corresponding LS_MURUE to <S_MURUE_XML>.

***   Get Type Category and Relative Name of Data Reference
      check LS_MURUE-R_DATA is bound.
      LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = LS_MURUE-R_DATA ).
      move LR_DATADESCR->KIND to <S_MURUE_XML>-KIND.
      case LR_DATADESCR->KIND.
        when CL_ABAP_DATADESCR=>KIND_TABLE.
          LR_DATADESCR = cast CL_ABAP_TABLEDESCR( LR_DATADESCR )->GET_TABLE_LINE_TYPE( ).
      endcase.
      <S_MURUE_XML>-RELNAME = LR_DATADESCR->GET_RELATIVE_NAME( ).

***   Dereferencing Data
      assign LS_MURUE-R_DATA->* to <S_DATA>.

***   Convert to XML
      call transformation ID
           source S_DATA = <S_DATA>
           result xml <S_MURUE_XML>-XML.

    endloop.

  endmethod.
  method CONV_MURUP_TO_XML.

    data: LS_MURUP type ZVCXI_XCUR_S_MURUP.
    field-symbols: <S_MURUP_XML> type ZVCXI_XCUR_S_MURUP_XML.


    loop at IT_MURUP into LS_MURUP.
      append initial line to RT_MURUP_XML assigning <S_MURUP_XML>.
      move-corresponding LS_MURUP to <S_MURUP_XML>.

**+   Convert Parameter
      if LS_MURUP-R_PARAM is bound.
        <S_MURUP_XML>-PARID = LS_MURUP-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      endif.

***   Convert Mapping Table
      <S_MURUP_XML>-T_MUMAP_XML = ZCL_VCXI_XCUR_MURDE=>CONV_MUMAP_TO_XML( IT_MUMAP = LS_MURUP-T_MUMAP ).
    endloop.

  endmethod.
  method CONV_XML_TO_MUMAP.

    data: LS_MUMAP_XML type ZVCXI_XCUR_S_MUMAP_XML.
    data: LR_ELEMDESCR  type ref to CL_ABAP_ELEMDESCR,
          LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR.
    field-symbols: <S_MUMAP>      type ZVCXI_XCUR_S_MUMAP,
                   <I_RANGE_FROM> type standard table,
                   <F_VALUE_TO>   type ANY.


    loop at IT_MUMAP_XML into LS_MUMAP_XML.
      append initial line to RT_MUMAP assigning <S_MUMAP>.
      move-corresponding LS_MUMAP_XML to <S_MUMAP>.

***   Get Runtime Type Services for Data Element
      ZCL_VCXI_XCUC_MUCEL=>GET_DATEL_INFO( exporting IF_DATEL      = LS_MUMAP_XML-DATEL
                                           importing ER_ELEMDESCR  = LR_ELEMDESCR
                                                     ER_TABLEDESCR = LR_TABLEDESCR ).

***   Create new Data References
      create data <S_MUMAP>-R_RANGE_FROM type handle LR_TABLEDESCR.
      create data <S_MUMAP>-R_VALUE_TO   type handle LR_ELEMDESCR.

***   Dereferencing
      assign <S_MUMAP>-R_RANGE_FROM->* to <I_RANGE_FROM>.
      assign <S_MUMAP>-R_VALUE_TO->*   to <F_VALUE_TO>.

***   Convert from XML
      call transformation ID
           source xml LS_MUMAP_XML-XML
           result I_RANGE_FROM = <I_RANGE_FROM>
                  F_VALUE_TO   = <F_VALUE_TO>.
    endloop.

  endmethod.
  method CONV_XML_TO_MUREL.

    data: LS_MUREL_XML type ZVCXI_XCUR_S_MUREL_XML.
    field-symbols: <S_MUREL> type ZVCXI_XCUR_S_MUREL.


    loop at IT_MUREL_XML into LS_MUREL_XML.
      append initial line to RT_MUREL assigning <S_MUREL>.
      move-corresponding LS_MUREL_XML to <S_MUREL>.

***--------------------------------------------------------------------------------------
***   Convert Update Customizing Element
      if LS_MUREL_XML-GMUCE is not initial.
        <S_MUREL>-R_MUCEL ?= ZCL_VCXI_XCUC_MUCEL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_MUREL_XML-GMUCE ) ).
      endif.

***--------------------------------------------------------------------------------------
***   Convert Parameter-based Filter
      <S_MUREL>-T_MURFP = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MURFP( IT_MURFP_XML = LS_MUREL_XML-T_MURFP_XML ).

***   Convert Exit-based Filter
      <S_MUREL>-T_MURFE = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MURFE( IT_MURFE_XML = LS_MUREL_XML-T_MURFE_XML ).

***--------------------------------------------------------------------------------------
***   Convert Parameter-based Update
      <S_MUREL>-T_MURUP = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MURUP( IT_MURUP_XML = LS_MUREL_XML-T_MURUP_XML ).

***   Convert Exit-based Update
      <S_MUREL>-T_MURUE = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MURUE( IT_MURUE_XML = LS_MUREL_XML-T_MURUE_XML ).
    endloop.

  endmethod.
  method CONV_XML_TO_MURFE.

    data: LS_MURFE_XML type ZVCXI_XCUR_S_MURFE_XML.
    field-symbols: <S_MURFE> type ZVCXI_XCUR_S_MURFE,
                   <S_DATA>  type ANY.


    loop at IT_MURFE_XML into LS_MURFE_XML.
      append initial line to RT_MURFE assigning <S_MURFE>.
      move-corresponding LS_MURFE_XML to <S_MURFE>.

***   Create Data Reference based on RTTS Infos
      check LS_MURFE_XML-RELNAME is not initial.
      try.
          if LS_MURFE_XML-KIND eq CL_ABAP_DATADESCR=>KIND_TABLE.
            create data <S_MURFE>-R_DATA type table of (LS_MURFE_XML-RELNAME).
          else.
            create data <S_MURFE>-R_DATA type (LS_MURFE_XML-RELNAME).
          endif.
        catch CX_SY_CREATE_DATA_ERROR into data(LR_CX_SY_CREATE_DATA_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_DATA_ERROR ).
      endtry.

***   Dereferencing Data
      assign <S_MURFE>-R_DATA->* to <S_DATA>.

***   Convert from XML
      call transformation ID
           source xml LS_MURFE_XML-XML
           result S_DATA = <S_DATA>.
    endloop.

  endmethod.
  method CONV_XML_TO_MURFP.

    data: LS_MURFP_XML type ZVCXI_XCUR_S_MURFP_XML.
    data: LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR.
    field-symbols: <S_MURFP> type ZVCXI_XCUR_S_MURFP,
                   <I_RANGE> type standard table.


    loop at IT_MURFP_XML into LS_MURFP_XML.
      append initial line to RT_MURFP assigning <S_MURFP>.
      move-corresponding LS_MURFP_XML to <S_MURFP>.

**+   Convert Parameter
      if LS_MURFP_XML-PARID is not initial.
        <S_MURFP>-R_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_MURFP_XML-PARID ) ).
      endif.

***   Get Runtime Type Services for Data Element
      ZCL_VCXI_XCUC_MUCEL=>GET_DATEL_INFO( exporting IF_DATEL      = LS_MURFP_XML-DATEL
                                           importing ER_TABLEDESCR = LR_TABLEDESCR ).

***   Create and dereferencing new Data References
      create data <S_MURFP>-R_RANGE type handle LR_TABLEDESCR.
      assign <S_MURFP>-R_RANGE->* to <I_RANGE>.

***   Convert from XML
      call transformation ID
           source xml LS_MURFP_XML-XML
           result I_RANGE = <I_RANGE>.
    endloop.

  endmethod.
  method CONV_XML_TO_MURGR.

    data: LS_MURGR_XML type ZVCXI_XCUR_S_MURGR_XML,
          LS_MURGR     type ZVCXI_XCUR_S_MURGR.


    loop at IT_MURGR_XML into LS_MURGR_XML.
      clear LS_MURGR.
      move-corresponding LS_MURGR_XML to LS_MURGR.

***   Convert Update Element
      LS_MURGR-T_MUREL = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MUREL( IT_MUREL_XML = LS_MURGR_XML-T_MUREL_XML ).

      insert LS_MURGR into table RT_MURGR.
    endloop.

  endmethod.
  method CONV_XML_TO_MURUE.

    data: LS_MURUE_XML type ZVCXI_XCUR_S_MURUE_XML.
    field-symbols: <S_MURUE> type ZVCXI_XCUR_S_MURUE,
                   <S_DATA>  type ANY.


    loop at IT_MURUE_XML into LS_MURUE_XML.
      append initial line to RT_MURUE assigning <S_MURUE>.
      move-corresponding LS_MURUE_XML to <S_MURUE>.

***   Create Data Reference based on RTTS Infos
      check LS_MURUE_XML-RELNAME is not initial.
      try.
          if LS_MURUE_XML-KIND eq CL_ABAP_DATADESCR=>KIND_TABLE.
            create data <S_MURUE>-R_DATA type table of (LS_MURUE_XML-RELNAME).
          else.
            create data <S_MURUE>-R_DATA type (LS_MURUE_XML-RELNAME).
          endif.
        catch CX_SY_CREATE_DATA_ERROR into data(LR_CX_SY_CREATE_DATA_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_DATA_ERROR ).
      endtry.

***   Dereferencing Data
      assign <S_MURUE>-R_DATA->* to <S_DATA>.

***   Convert from XML
      call transformation ID
           source xml LS_MURUE_XML-XML
           result S_DATA = <S_DATA>.
    endloop.

  endmethod.
  method CONV_XML_TO_MURUP.

    data: LS_MURUP_XML type ZVCXI_XCUR_S_MURUP_XML.
    field-symbols: <S_MURUP> type ZVCXI_XCUR_S_MURUP.


    loop at IT_MURUP_XML into LS_MURUP_XML.
      append initial line to RT_MURUP assigning <S_MURUP>.
      move-corresponding LS_MURUP_XML to <S_MURUP>.

**+   Convert Parameter
      if LS_MURUP_XML-PARID is not initial.
        <S_MURUP>-R_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_MURUP_XML-PARID ) ).
      endif.

***   Convert Mapping Table
      <S_MURUP>-T_MUMAP = ZCL_VCXI_XCUR_MURDE=>CONV_XML_TO_MUMAP( IT_MUMAP_XML = LS_MURUP_XML-T_MUMAP_XML ).
    endloop.

  endmethod.
  method COPY_MURGR.

    data: LS_MURGR type ZVCXI_XCUR_S_MURGR.


***--------------------------------------------------------------------------------------
*** Validate Source Update Group
    if not LINE_EXISTS( ME->T_MURGR[ CMURG = IF_CMURG ] ).
***   Update Group with Counter & is not defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUR'
                                            IF_MSGNO = '101'
                                            IF_MSGV1 = IF_CMURG ).
    endif.

***--------------------------------------------------------------------------------------
*** Add new Group
    RF_CMURG = ME->ADD_MURGR( ).

*** Copy Values
    LS_MURGR = ME->T_MURGR[ CMURG = IF_CMURG ].
    LS_MURGR-CMURG = RF_CMURG.
    ME->UPDATE_MURGR( IS_MURGR = LS_MURGR ).

  endmethod.
  method CREATE_MUREL.

    data: LS_MUCFP type ZVCXI_XCUC_S_MUCFP,
          LS_MUCFE type ZVCXI_XCUC_S_MUCFE,
          LS_MUCUP type ZVCXI_XCUC_S_MUCUP,
          LS_MUCUE type ZVCXI_XCUC_S_MUCUE.


*** Define Update Customizing Element
    RS_MUREL-R_MUCEL = IR_MUCEL.

***------------------------------------------------------------------------------------------------
*** Set Default for Parameter-based Filters
    loop at IR_MUCEL->T_MUCFP into LS_MUCFP
                              where FDACT eq ABAP_TRUE.
      insert value #( R_PARAM = LS_MUCFP-R_PARAM
                      R_RANGE = ZCL_VCXI_XCUR_MURDE=>CREATE_RANGE( IF_DATEL = LS_MUCFP-DATEL ) ) into table RS_MUREL-T_MURFP.
    endloop.

*** Set Default for Exit-based Filters
    loop at IR_MUCEL->T_MUCFE into LS_MUCFE
                              where FDACT eq ABAP_TRUE.
      insert value #( IEXIT = LS_MUCFE-IEXIT ) into table RS_MUREL-T_MURFE.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set Default for Parameter-based Updates
    loop at IR_MUCEL->T_MUCUP into LS_MUCUP
                              where FDACT eq ABAP_TRUE.
      insert value #( R_PARAM = LS_MUCUP-R_PARAM ) into table RS_MUREL-T_MURUP.
    endloop.

*** Set Default for Exit-based Update
    loop at IR_MUCEL->T_MUCUE into LS_MUCUE
                              where FDACT eq ABAP_TRUE.
      insert value #( IEXIT = LS_MUCUE-IEXIT ) into table RS_MUREL-T_MURUE.
    endloop.

  endmethod.
  method CREATE_RANGE.

    data: LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR.


*** Get Reference for Data Element
    ZCL_VCXI_XCUC_MUCEL=>GET_DATEL_INFO( exporting IF_DATEL      = IF_DATEL
                                         importing ER_TABLEDESCR = LR_TABLEDESCR ).

*** Create Range based on Data Element Reference
    create data RR_RANGE type handle LR_TABLEDESCR.

  endmethod.
  method CREATE_RECORD.

    data: LR_CMODEL    type ref to /VCXI/CL_CKMC_CMODEL,
          LR_DCO_MURDE type ref to ZCL_VCXI_XCUR_DCO_MURDE.


*** Check required fields
    if IF_ID is initial.
***   Fill out all required entry fields
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = '00'
                                            IF_MSGNO = '055' ).
    endif.

***------------------------------------------------------------------------------------------------
*** Get selected SmartMD Model
    LR_CMODEL = ME->GET_CMODEL( ).
    if LR_CMODEL is not bound.
***   No SmartMD Model was selected. Record can't be created.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUR'
                                            IF_MSGNO = '120' ).
    endif.

*** Create Record
    RR_RECORD = /VCXI/CL_CKMR_RECORD=>CREATE( IR_CMODEL = LR_CMODEL ).


***------------------------------------------------------------------------------------------------
*** Set ID and Description
    RR_RECORD->SET_ID(    IF_ID    = IF_ID ).
    RR_RECORD->SET_DESCR( IF_DESCR = IF_DESCR ).

*** Fill DCO of Record
    RR_RECORD->MAP_DCO( changing CR_DCO = LR_DCO_MURDE ).
    check LR_DCO_MURDE is bound.

*** Set Mass Update Group and SmartMD Control Settings
    LR_DCO_MURDE->SET_MURGR( IT_MURGR = ME->T_MURGR ).
    LR_DCO_MURDE->SET_SMDCNTRL( IR_SMDCNTRL = ME->R_SMDCNTRL ).

  endmethod.
  method DELETE_MURGR.

***--------------------------------------------------------------------------------------
*** Validate Update Group Counter
    if not LINE_EXISTS( ME->T_MURGR[ CMURG = IF_CMURG ] ).
***   Update Group with Counter & is not defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUR'
                                            IF_MSGNO = '101'
                                            IF_MSGV1 = IF_CMURG ).
    endif.

***--------------------------------------------------------------------------------------
*** Delete Update Group
    delete ME->T_MURGR where CMURG = IF_CMURG.

  endmethod.
  method GET_CMODEL.

    data: LS_MURGR type ZVCXI_XCUR_S_MURGR,
          LS_MUREL type ZVCXI_XCUR_S_MUREL.
    data: LT_MUCEL type /VCXI/CKX_TT_OBJECT.
    data: LR_MUCEL  type ref to ZCL_VCXI_XCUC_MUCEL,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

    free: ET_CMODEL.

*** Get used Update Elements
    loop at ME->T_MURGR into LS_MURGR.
      loop at LS_MURGR-T_MUREL into LS_MUREL.
        collect LS_MUREL-R_MUCEL into LT_MUCEL.
      endloop.
    endloop.
    check LT_MUCEL is not initial.

*** Determine allowed Models
    loop at LT_MUCEL into LR_OBJECT.
      LR_MUCEL ?= LR_OBJECT.
      if SY-TABIX eq 1.
        ET_CMODEL = LR_MUCEL->T_MUSMD.
      else.
        loop at ET_CMODEL into LR_OBJECT.
          if not LINE_EXISTS( LR_MUCEL->T_MUSMD[ TABLE_LINE = LR_OBJECT ] ).
            delete ET_CMODEL.
          endif.
        endloop.
      endif.
      if ET_CMODEL is initial.
        exit.
      endif.
    endloop.

*** Return selected SmartMD Model
    if LINE_EXISTS( ET_CMODEL[ TABLE_LINE = ME->R_CMODEL ] ).
      RR_CMODEL = ME->R_CMODEL.
    endif.

  endmethod.
  method INIT_SMDCNTRL.

    data: LF_CLSNA type SEOCLSNAME.


    free ME->R_SMDCNTRL.
    check ME->R_CMODEL is bound.

*** Get Class Names for SmartMD Control Settings
    ZCL_VCXI_XCUC_MUCEL=>GET_CLSNA_SMDCNTRL( exporting IR_CMODEL = ME->R_CMODEL
                                             importing EF_CLSNA  = LF_CLSNA ).
    check LF_CLSNA is not initial.

***--------------------------------------------------------------------------------------
*** Create Instance
    try.
        create object ME->R_SMDCNTRL
               type (LF_CLSNA).

***   Catch Creation Errors
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method SET_CMODEL.

    data:  LR_CMODEL     type ref to /VCXI/CL_CKMC_CMODEL.


***------------------------------------------------------------------------------------------------
    if IR_CMODEL is supplied.
***   Use Model defined as importing
      move IR_CMODEL to LR_CMODEL.
    elseif IF_ICMDL is supplied and
           IF_ICMDL is not initial.
***   Get Model by ID
      LR_CMODEL = /VCXI/CL_CKMC_CMODEL=>GET_INSTANCE_BY_ICMDL( IF_ICMDL = IF_ICMDL ).
    endif.

    check ME->R_CMODEL ne LR_CMODEL.

***------------------------------------------------------------------------------------------------
*** Change Model
    ME->R_CMODEL = LR_CMODEL.

*** Initialize SmartMD Control Settings
    ME->INIT_SMDCNTRL( ).

  endmethod.
  method START_PROCESS.

    data: LS_JOBDATA  type TBTCSTRT.


    check IR_RECORD is bound.

***------------------------------------------------------------------------------------------------
*** Create Process
    IR_RECORD->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RECORD=>C_FCODE_CREATE_RPROC ).
    check IR_RECORD->R_RPROC is bound.


***------------------------------------------------------------------------------------------------
    case IF_OSTAR.
      when 'D'.      "Direct Processing
***     Start directly
        IR_RECORD->R_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_DIRECT ).

      when 'I'.      "Immediate Job
***     Set Job Start Data Description
        move 'I' to LS_JOBDATA-STARTDTTYP.    "Start immediate

***     Set Start Date and Time
        call function 'BP_START_DATE_EDITOR'
          exporting
            STDT_DIALOG = 'N'
            STDT_INPUT  = LS_JOBDATA
          importing
            STDT_OUTPUT = LS_JOBDATA
          exceptions
            others      = 9.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Set Job Start Data Description
        IR_RECORD->R_RPROC->SET_JOBDATA( IS_JOBDATA = LS_JOBDATA ).

***     Start as Job
        IR_RECORD->R_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_JOB ).

      when 'S'.      "Schedule as Job
***     Set Start Date and Time
        call function 'BP_START_DATE_EDITOR'
          exporting
            STDT_DIALOG = 'Y'
            STDT_INPUT  = LS_JOBDATA
            STDT_OPCODE = '14'
          importing
            STDT_OUTPUT = LS_JOBDATA
          exceptions
            others      = 9.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Set Job Start Data Description
        IR_RECORD->R_RPROC->SET_JOBDATA( IS_JOBDATA = LS_JOBDATA ).

***     Start as Job
        IR_RECORD->R_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_JOB ).

    endcase.

  endmethod.
  method UPDATE_MURGR.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL.


***--------------------------------------------------------------------------------------
*** Validate Update Group Counter
    if not LINE_EXISTS( ME->T_MURGR[ CMURG = IS_MURGR-CMURG ] ).
***   Update Group with Counter & is not defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCUR'
                                            IF_MSGNO = '101'
                                            IF_MSGV1 = IS_MURGR-CMURG ).
    endif.

***--------------------------------------------------------------------------------------
*** Authorization Check
    loop at IS_MURGR-T_MUREL into LS_MUREL.
      ZCL_VCXI_XCUC_MUCEL=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCUC_MUCEL=>C_ACTVT_EXECUTE
                                       IR_MUCEL = LS_MUREL-R_MUCEL ).
    endloop.

***--------------------------------------------------------------------------------------
*** Perform Update
    modify table ME->T_MURGR from IS_MURGR.

*** Re-evaluate SmartMD Model
    ME->SET_CMODEL( IR_CMODEL = ME->GET_CMODEL( ) ).

  endmethod.
