
class ZCL_VCXI_PXSS_PR_AREA_WGT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_IPRVT_PX_AREA_WGT type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_AREA_WGT' ##NO_TEXT.
  constants C_PARID_COUAR type /VCXI/VKS_PARID value 'ZVCXI_PX_COUAR' ##NO_TEXT.
  constants C_PARID_COUWT type /VCXI/VKS_PARID value 'ZVCXI_PX_COUWT' ##NO_TEXT.
  constants C_PARID_NBLAR type /VCXI/VKS_PARID value 'ZVCXI_PX_NBLAR' ##NO_TEXT.
  constants C_PARID_NBLWT type /VCXI/VKS_PARID value 'ZVCXI_PX_NBLWT' ##NO_TEXT.
  constants C_PARID_SBLAR type /VCXI/VKS_PARID value 'ZVCXI_PX_SBLAR' ##NO_TEXT.
  constants C_PARID_SBLWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SBLWT' ##NO_TEXT.
  constants C_IEVNT_O_AREA_CHANGED type /VCXI/VKSC_IEVNT value 'AREA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WEIGHT_CHANGED type /VCXI/VKSC_IEVNT value 'WEIGHT_CHANGED' ##NO_TEXT.
  constants C_PARID_ADDWT type /VCXI/VKS_PARID value 'ZVCXI_PX_ADDWT' ##NO_TEXT.
  constants C_PARID_PROWT type /VCXI/VKS_PARID value 'ZVCXI_PX_PROWT' ##NO_TEXT.

  methods GET_COUAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COUAR) type ZVCXI_PXS_S_COUAR
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_COUWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COUWT) type ZVCXI_PXS_S_COUWT
    raising
      /VCXI/CX_CKX .
  methods GET_NBLAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_NBLAR) type ZVCXI_PXS_S_NBLAR
    raising
      /VCXI/CX_CKX .
  methods GET_NBLWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_NBLWT) type ZVCXI_PXS_S_NBLWT
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_SBLAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SBLAR) type ZVCXI_PXS_S_SBLAR
    raising
      /VCXI/CX_CKX .
  methods GET_SBLWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SBLWT) type ZVCXI_PXS_S_SBLWT
    raising
      /VCXI/CX_CKX .
  methods IS_CALC
  abstract
    returning
      value(RF_CALC) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_COUAR
    importing
      !IS_COUAR type ZVCXI_PXS_S_COUAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COUWT
    importing
      !IS_COUWT type ZVCXI_PXS_S_COUWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SBLAR
    importing
      !IS_SBLAR type ZVCXI_PXS_S_SBLAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SBLWT
    importing
      !IS_SBLWT type ZVCXI_PXS_S_SBLWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PROWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROWT) type ZVCXI_PXS_S_PROWT
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_WEIGHT type /VCXI/VKSC_IEVNT value 'RECALC_WEIGHT' ##NO_TEXT.

  methods GET_PRVDR_RTESPV
    exporting
      !ER_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RTESPV) type ref to ZCL_VCXI_XCSR_PR_RTESPV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XPART
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_XPART) type ref to ZCL_VCXI_PXSS_PR_XPART
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AREA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WEIGHT
    raising
      /VCXI/CX_CKX .
  methods SET_NBLAR
    importing
      !IS_NBLAR type ZVCXI_PXS_S_NBLAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NBLWT
    importing
      !IS_NBLWT type ZVCXI_PXS_S_NBLWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWT
    importing
      !IS_PROWT type ZVCXI_PXS_S_PROWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_AREA_WGT definition
class ZCL_VCXI_PXSS_PR_AREA_WGT implementation.
  method GET_ADDWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).
    RS_ADDWT-ADDWT     = LS_PARAM-ATFLV.
    RS_ADDWT-ADDWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_COUAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).
    RS_COUAR-COUAR     = LS_PARAM-ATFLV.
    RS_COUAR-COUAR_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_COUWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUWT ).
    RS_COUWT-COUWT     = LS_PARAM-ATFLV.
    RS_COUWT-COUWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_NBLAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NBLAR ).
    RS_NBLAR-NBLAR     = LS_PARAM-ATFLV.
    RS_NBLAR-NBLAR_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_NBLWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NBLWT ).
    RS_NBLWT-NBLWT     = LS_PARAM-ATFLV.
    RS_NBLWT-NBLWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_OPQTY.

    data: LF_NOUTT       type ZVCXI_PXS_NOUTT,
          LF_NOUTT_MULTI type ZVCXI_PXS_NOUTT.

***------------------------------------------------------------------------------------------------
*** Get Routing Supervisor Evaluation Quantity
    data(LR_PR_RTESPV) = ME->GET_PRVDR_RTESPV( ).
    if LR_PR_RTESPV is bound.
      RS_OPQTY = corresponding #( LR_PR_RTESPV->GET_EVQTY( ) mapping OPQTY     = EVQTY
                                                                     OPQTY_UOM = EVQTY_UOM ).
    else.
***   Get Operation Qty by Application Data
      RS_OPQTY = ME->R_GATE->GET_APPDATA( )->S_OPQTY.
    endif.

***------------------------------------------------------------------------------------------------
*** Adjust by Number of Outs (based on parent)
    case type of ME->R_GATE->GET_PARENT( )->R_CLSPR.
      when type ZCL_VCXI_PXSS_PR_XFG into data(LR_PR_XFG).
        LF_NOUTT = LR_PR_XFG->GET_NOUTT( importing EF_NOUTT_MULTI = LF_NOUTT_MULTI ).
      when type ZCL_VCXI_PXSS_PR_XCONO into data(LR_PR_XCONO).
        LF_NOUTT = LR_PR_XCONO->GET_NOUTT( importing EF_NOUTT_MULTI = LF_NOUTT_MULTI ).
      when type ZCL_VCXI_PXSS_PR_XPART into data(LR_PR_XPART).
        LF_NOUTT       = LR_PR_XPART->GET_PARAT( ).
        LF_NOUTT_MULTI = 1 .
    endcase.

    check LF_NOUTT_MULTI ne 0.
    RS_OPQTY-OPQTY = RS_OPQTY-OPQTY / LF_NOUTT_MULTI * LF_NOUTT.

  endmethod.
  method GET_PROWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWT ).
    RS_PROWT-PROWT     = LS_PARAM-ATFLV.
    RS_PROWT-PROWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_PRVDR_RTESPV.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


    clear: RR_PR_RTESPV, ER_GATE_RTESPV.

***--------------------------------------------------------------------------------------
*** Get Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_RTESPV.
          check RR_PR_RTESPV is bound.
          move LR_GATE to ER_GATE_RTESPV.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_RTESPV, ER_GATE_RTESPV.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_XPART.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_XPART.

***------------------------------------------------------------------------------------------------
*** Find Provider for Part
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XPART=>C_IPRVT_PX_XPART
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_XPART.

  endmethod.
  method GET_SBLAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBLAR ).
    RS_SBLAR-SBLAR     = LS_PARAM-ATFLV.
    RS_SBLAR-SBLAR_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_SBLWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBLWT ).
    RS_SBLWT-SBLWT     = LS_PARAM-ATFLV.
    RS_SBLWT-SBLWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
***   Recalculate Area
      when C_IEVNT_I_RECALC_AREA.
        ME->HANDLE_RECALC_AREA( ).
***   Recalculate Weight
      when C_IEVNT_I_RECALC_WEIGHT.
        ME->HANDLE_RECALC_WEIGHT( ).
    endcase.

  endmethod.
  method HANDLE_RECALC_AREA.

    data: LS_SBLAR type ZVCXI_PXS_S_SBLAR,
          LS_COUAR type ZVCXI_PXS_S_COUAR,
          LS_NBLAR type ZVCXI_PXS_S_NBLAR.


***------------------------------------------------------------------------------------------------
*** Get Sold Blank Area
    LS_SBLAR = ME->GET_SBLAR( ).

*** Get Cut Out Area
    LS_COUAR = ME->GET_COUAR( ).

*** Use Sold Blank Area as basic Net Blank Area
    LS_NBLAR = value #( NBLAR     = LS_SBLAR-SBLAR
                        NBLAR_UOM = LS_SBLAR-SBLAR_UOM ).

*** Reduce by Cut Out Area
    if LS_COUAR-COUAR_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_NBLAR-NBLAR
                                                          IF_CALCV_UOM_1 = LS_NBLAR-NBLAR_UOM
                                                          IF_CALCV_2     = LS_COUAR-COUAR
                                                          IF_CALCV_UOM_2 = LS_COUAR-COUAR_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_NBLAR-NBLAR_UOM
                                                importing EF_CALCV       = LS_NBLAR-NBLAR
                                                          EF_CALCV_UOM   = LS_NBLAR-NBLAR_UOM ).
      LS_NBLAR-NBLAR = cond #( when LS_NBLAR-NBLAR lt 0 then 0 else LS_NBLAR-NBLAR ).
    endif.

*** Set Net Blank Area
    ME->SET_NBLAR( IS_NBLAR = LS_NBLAR ).

  endmethod.
  method HANDLE_RECALC_WEIGHT.

    data: LS_SBLWT type ZVCXI_PXS_S_SBLWT,
          LS_COUWT type ZVCXI_PXS_S_COUWT,
          LS_NBLWT type ZVCXI_PXS_S_NBLWT,
          LS_ADDWT type ZVCXI_PXS_S_ADDWT,
          LS_PROWT type ZVCXI_PXS_S_PROWT.


***------------------------------------------------------------------------------------------------
*** Get Sold Blank Weight
    LS_SBLWT = ME->GET_SBLWT( ).

*** Get Cut Out Weight
    LS_COUWT = ME->GET_COUWT( ).

*** Calculate Net Blank Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SBLWT-SBLWT
                                                        IF_CALCV_UOM_1 = LS_SBLWT-SBLWT_UOM
                                                        IF_CALCV_2     = LS_COUWT-COUWT
                                                        IF_CALCV_UOM_2 = LS_COUWT-COUWT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = ME->GET_NBLWT( )-NBLWT_UOM
                                              importing EF_CALCV       = LS_NBLWT-NBLWT
                                                        EF_CALCV_UOM   = LS_NBLWT-NBLWT_UOM ).
    LS_NBLWT-NBLWT = cond #( when LS_NBLWT-NBLWT lt 0 then 0 else LS_NBLWT-NBLWT ).

*** Set Net Blank Weight
    ME->SET_NBLWT( IS_NBLWT = LS_NBLWT ).

***------------------------------------------------------------------------------------------------
*** Get Additional Weight
    LS_ADDWT = ME->GET_ADDWT( ).

*** Calculate Product Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_NBLWT-NBLWT
                                                        IF_CALCV_UOM_1 = LS_NBLWT-NBLWT_UOM
                                                        IF_CALCV_2     = LS_ADDWT-ADDWT
                                                        IF_CALCV_UOM_2 = LS_ADDWT-ADDWT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = ME->GET_PROWT( )-PROWT_UOM
                                              importing EF_CALCV       = LS_PROWT-PROWT
                                                        EF_CALCV_UOM   = LS_PROWT-PROWT_UOM ).
    LS_PROWT-PROWT = cond #( when LS_PROWT-PROWT lt 0 then 0 else LS_PROWT-PROWT ).

*** Set Product Weight
    ME->SET_PROWT( IS_PROWT = LS_PROWT ).

  endmethod.
  method SET_ADDWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).

    move IS_ADDWT-ADDWT     to LS_PARAM-ATFLV.
    move IS_ADDWT-ADDWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEIGHT_CHANGED ).
    endif.

  endmethod.
  method SET_COUAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).

    move IS_COUAR-COUAR     to LS_PARAM-ATFLV.
    move IS_COUAR-COUAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREA_CHANGED ).
    endif.

  endmethod.
  method SET_COUWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUWT ).

    move IS_COUWT-COUWT     to LS_PARAM-ATFLV.
    move IS_COUWT-COUWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEIGHT_CHANGED ).
    endif.

  endmethod.
  method SET_NBLAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NBLAR ).

    move IS_NBLAR-NBLAR     to LS_PARAM-ATFLV.
    move IS_NBLAR-NBLAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREA_CHANGED ).
    endif.

  endmethod.
  method SET_NBLWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NBLWT ).

    move IS_NBLWT-NBLWT     to LS_PARAM-ATFLV.
    move IS_NBLWT-NBLWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEIGHT_CHANGED ).
    endif.

  endmethod.
  method SET_PROWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWT ).

    move IS_PROWT-PROWT     to LS_PARAM-ATFLV.
    move IS_PROWT-PROWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEIGHT_CHANGED ).
    endif.

  endmethod.
  method SET_SBLAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBLAR ).

    move IS_SBLAR-SBLAR     to LS_PARAM-ATFLV.
    move IS_SBLAR-SBLAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREA_CHANGED ).
    endif.

  endmethod.
  method SET_SBLWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBLWT ).

    move IS_SBLWT-SBLWT     to LS_PARAM-ATFLV.
    move IS_SBLWT-SBLWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEIGHT_CHANGED ).
    endif.

  endmethod.
