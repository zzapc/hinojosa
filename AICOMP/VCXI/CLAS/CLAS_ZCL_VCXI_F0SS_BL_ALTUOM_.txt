
class ZCL_VCXI_F0SS_BL_ALTUOM definition
  public
  create public .

public section.

  data T_ALTUOM_DEF type ZVCXI_F0SS_TT_ALTUOM_DEF .

  methods CONSTRUCTOR
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_WERKS type WERKS_D
      !IS_CALCV_BASE type ZVCXI_XCS_S_CALCV optional
    raising
      /VCXI/CX_CKX .
  class-methods CALC_UMREZ_UMREN
    importing
      !IS_CALCV_BASE type ZVCXI_XCS_S_CALCV
      !IS_CALCV_SELF type ZVCXI_XCS_S_CALCV
    exporting
      !EF_UMREZ type UMREZ
      !EF_UMREN type UMREN
    raising
      /VCXI/CX_CKX .
  methods GET_UMREZ_UMREN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
      !IS_MMEXT type ANY optional
      !IF_UOM type /VCXI/CKX_UOM
    exporting
      !EF_UMREZ type UMREZ
      !EF_UMREN type UMREN
      !EF_UOM type /VCXI/CKX_UOM
    raising
      /VCXI/CX_CKX .
protected section.

  data S_CALCV_BASE type ZVCXI_XCS_S_CALCV .
private section.
endclass. "ZCL_VCXI_F0SS_BL_ALTUOM definition
class ZCL_VCXI_F0SS_BL_ALTUOM implementation.
  method CALC_UMREZ_UMREN.

    data: LF_Z     type F,
          LF_N     type F,
          LF_Z_NEW type F,
          LF_N_NEW type F.

*** Early exit if values are the same
    if IS_CALCV_BASE-CALCV eq IS_CALCV_SELF-CALCV.
      move 1 to EF_UMREN.
      move 1 to EF_UMREZ.
      return.
    endif.

*** Get 5-digit values with the same relation
    call function 'CONVERT_TO_FRACT5'
      exporting
        NOMIN               = IS_CALCV_BASE-CALCV
        DENOMIN             = IS_CALCV_SELF-CALCV
      importing
        NOMOUT              = EF_UMREZ
        DENOMOUT            = EF_UMREN
      exceptions
        CONVERSION_OVERFLOW = 1
        others              = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Find smallest possible 5-digit values
    move EF_UMREZ to LF_Z.
    move EF_UMREN to LF_N.
    call function 'GGT'
      exporting
        Z                         = LF_Z
        N                         = LF_N
      importing
        Z_NEU                     = LF_Z_NEW
        N_NEU                     = LF_N_NEW
      exceptions
        KEINE_NEGAT_WERTE_ERLAUBT = 1
        NULL_NICHT_ERLAUBT        = 2
        others                    = 3.
    if SY-SUBRC eq 0.
      move LF_Z_NEW to EF_UMREZ.
      move LF_N_NEW to EF_UMREN.
    endif.

  endmethod.
  method CONSTRUCTOR.

    data: LF_SYSOM type /VCXI/VKS_SYSOM.
    data: LS_TC020 type ZVCXI_F0S_TC020.
    data: LT_TC020 type table of ZVCXI_F0S_TC020.
    data: LR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL.
    field-symbols: <S_ALTUOM_DEF> type ZVCXI_F0SS_S_ALTUOM_DEF.


***--------------------------------------------------------------------------------------
*** Base Quantity
    if IS_CALCV_BASE is supplied.
      ME->S_CALCV_BASE = IS_CALCV_BASE.
    else.
      ME->S_CALCV_BASE-CALCV = 10000.
      select single MEINS
             into ME->S_CALCV_BASE-CALCV_UOM
             from MARA
            where MATNR = IS_CMPRK-CMATN.
    endif.

***--------------------------------------------------------------------------------------
*** Get Alternate Unit Customizing
    select *
           from ZVCXI_F0S_TC020
           into table LT_TC020
          where CMATN eq IS_CMPRK-CMATN
           and  PRFID eq IS_CMPRK-PRFID.
    check SY-SUBRC eq 0.

*** Get System of Measure
    LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = IS_CMPRK ).
    check LR_CUPRFL is bound.
    LF_SYSOM = LR_CUPRFL->GET_SYSOM_BY_WERKS( IF_WERKS = IF_WERKS ).

*** Build Definition
    loop at LT_TC020 into LS_TC020.
      append initial line to ME->T_ALTUOM_DEF assigning <S_ALTUOM_DEF>.
      move-corresponding LS_TC020 to <S_ALTUOM_DEF>.
      move LS_TC020-CLINE to <S_ALTUOM_DEF>-CLINE.
      move LS_TC020-DIMID to <S_ALTUOM_DEF>-DIMID.

      case LF_SYSOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.     " Metric
          move LS_TC020-UOMM to <S_ALTUOM_DEF>-UOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.   " Imperial
          move LS_TC020-UOMI to <S_ALTUOM_DEF>-UOM.
      endcase.

      move LS_TC020-FMAUC to <S_ALTUOM_DEF>-FMAUC.
    endloop.

    sort ME->T_ALTUOM_DEF by CLINE.

  endmethod.
  method GET_UMREZ_UMREN.

    data: LF_DIMID type DIMID.
    data: LS_ALTUOM_DEF type ZVCXI_F0SS_S_ALTUOM_DEF,
          LS_CALCV_SELF type ZVCXI_XCS_S_CALCV.


***------------------------------------------------------------------------------------------------
*** Get Dimension
    LF_DIMID = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = IF_UOM ).

*** Get Calculation Function Name
    read table ME->T_ALTUOM_DEF into LS_ALTUOM_DEF with key DIMID = LF_DIMID
                                                            UOM   = IF_UOM.
    if SY-SUBRC ne 0.
      call function 'DIMENSIONCHECK_DIMENSIONLESS'
        exporting
          MEINH                       = IF_UOM
        exceptions
          DIMENSION_NOT_DIMENSIONLESS = 1
          T006D_ENTRY_MISSING         = 2
          T006_ENTRY_MISSING          = 3.
      case SY-SUBRC.
        when 0.
          exit.
        when 1.
***       Check w/o Unit
          read table ME->T_ALTUOM_DEF into LS_ALTUOM_DEF with key DIMID = LF_DIMID.
        when others.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endcase.
    endif.

***------------------------------------------------------------------------------------------------
*** Calculate Conversion Factor
    try.
        check LS_ALTUOM_DEF-FMAUC is not initial.
        if IS_MMEXT is supplied.
          call function LS_ALTUOM_DEF-FMAUC
            exporting
              IR_GATE       = IR_GATE
              IS_MMEXT      = IS_MMEXT
              IF_UOM        = LS_ALTUOM_DEF-UOM
              IS_CALCV_BASE = ME->S_CALCV_BASE
            importing
              ES_CALCV      = LS_CALCV_SELF.
        else.
          call function LS_ALTUOM_DEF-FMAUC
            exporting
              IR_GATE       = IR_GATE
              IF_UOM        = LS_ALTUOM_DEF-UOM
              IS_CALCV_BASE = ME->S_CALCV_BASE
            importing
              ES_CALCV      = LS_CALCV_SELF.
        endif.

***     Calculate UMREZ/UMREN
        CALC_UMREZ_UMREN( exporting IS_CALCV_BASE = ME->S_CALCV_BASE
                                    IS_CALCV_SELF = LS_CALCV_SELF
                          importing EF_UMREN      = EF_UMREN
                                    EF_UMREZ      = EF_UMREZ ).
        EF_UOM = ME->S_CALCV_BASE-CALCV_UOM.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC    into data(LR_CX_ILLEGAL_FUNC).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ILLEGAL_FUNC ).
      catch CX_SY_DYN_CALL_PARAMETER_ERROR into data(LR_CX_PARAMETER_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_PARAMETER_ERROR ).
    endtry.

  endmethod.
