
class ZCL_VCXI_PXSS_GRID_FD_PRINT definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_FD_PRINT_GRID'
      !IF_CONTAINER_NAME type SCRFNAME default 'CC_GRID_FD_PRINT'
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  types:
    begin of YS_CSTEP_PRINT,
      R_GATE     type ref to /VCXI/CL_VKSR_GATE,
      R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL,
    end   of YS_CSTEP_PRINT .
  types:
    YT_CSTEP_PRINT type table of YS_CSTEP_PRINT with default key .

  data R_GATE_OUT type ref to /VCXI/CL_VKSR_GATE .
  data R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL .
  data: T_TINK type table of ZVCXI_PXS_TINK with default key.

  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_FD_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEP_PRINT
    returning
      value(RT_CSTEP_PRINT) type YT_CSTEP_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_FD_PRINT_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DMICO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_FD_PRINT_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_FD_PRINT definition
class ZCL_VCXI_PXSS_GRID_FD_PRINT implementation.
method BUILD_DYN_TABLE.

  data: LT_TINK_INFO type ZVCXI_PXSS_TT_TINK_INFO,
        LT_COMPONENT type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data: LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR,
        LR_TYPEDESCR  type ref to CL_ABAP_TYPEDESCR.


***--------------------------------------------------------------------------------------
*** Collect relevant Ink Types
  loop at ME->GET_CSTEP_PRINT( ) into data(LS_CSTEP_PRINT) where R_GATE is bound.
    data(LF_TPRIN) = cast ZIF_VCXI_PXSS_PRINT( LS_CSTEP_PRINT-R_GATE->R_CLSPR )->GET_TPRIN( ).
    append lines of ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LF_TPRIN ) to LT_TINK_INFO.
  endloop.
  sort LT_TINK_INFO by TINK POSID.
  delete adjacent duplicates from LT_TINK_INFO comparing TINK.
  sort LT_TINK_INFO by POSID.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = ME->F_TABNAME
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  check SY-SUBRC is initial.
  LT_COMPONENT = cast CL_ABAP_STRUCTDESCR( LR_TYPEDESCR )->GET_COMPONENTS( ).

***--------------------------------------------------------------------------------------
*** Get Fast Data relevant Ink Types
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_PXSS_S_FD_TINK_VIS'
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1 ).
  check SY-SUBRC is initial.
  free: ME->T_TINK.
  loop at LT_TINK_INFO into data(LS_TINK_INFO).
    append value #( NAME       = LS_TINK_INFO-TINK
                    TYPE       = cast #( LR_TYPEDESCR )
                    AS_INCLUDE = ABAP_TRUE
                    SUFFIX     = LS_TINK_INFO-TINK ) to LT_COMPONENT.
    append LS_TINK_INFO-TINK to ME->T_TINK.
  endloop.

***--------------------------------------------------------------------------------------
*** Create data type for table
  try.
      LR_TABLEDESCR = CL_ABAP_TABLEDESCR=>CREATE( P_LINE_TYPE = CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ) ).
    catch CX_SY_TYPE_CREATION into data(LR_CX_SY_TYPE_CREATION).
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_TYPE_CREATION ).
  endtry.

  create data ME->R_DATA type handle LR_TABLEDESCR.

endmethod.
  method CHANGE_STYLE_FD_PRINT.

    data: LF_RELEA type ABAP_BOOL.
    data: LS_FD_PRINT_VIS type ZVCXI_PXSS_S_FD_PRINT_VIS.
    field-symbols:  <S_FD_TINK_VIS>  type ZVCXI_PXSS_S_FD_TINK_VIS.


    free CT_STYL.

*** "Cast" generic structure to Vis Structure
    LS_FD_PRINT_VIS = corresponding #( IS_DATA ).

*** Get Design Document Status
    check IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_PRINT.
    cast ZIF_VCXI_PXSS_PRINT( IR_GATE->R_CLSPR )->GET_DESDO( importing EF_RELEA = LF_RELEA ).

***----------------------------------------------------------------------------
*** If Design Document is released disable field
    if LF_RELEA is not initial.
***   Print Type = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TPRIN'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Print Side = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSID'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    else.
***   Print Type = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TPRIN'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Print Side = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSID'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.



***----------------------------------------------------------------------------
*** Ink Type Based Settings
    data(LT_TINK_INFO) = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LS_FD_PRINT_VIS-TPRIN ).
    loop at ME->T_TINK into data(LF_TINK).
      assign component LF_TINK of structure IS_DATA to <S_FD_TINK_VIS>.
      check SY-SUBRC eq 0.

***   Disable all fields if not relevant to Print Type
      if not LINE_EXISTS( LT_TINK_INFO[ TINK = LF_TINK ] ).
***     Number of Colors = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOCOL' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Coverage = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Application Weight = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Application Volume = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).

      else.
        data(LS_TINK_INFO) = LT_TINK_INFO[ TINK = LF_TINK ].
        if <S_FD_TINK_VIS>-NOCOL_HIDE eq ABAP_TRUE or
           ( LS_TINK_INFO-QTYMI ne 0 and
              LS_TINK_INFO-QTYMI eq LS_TINK_INFO-QTYMA ).
***       Number of Colors = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOCOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.

***     No Colors defined
        if <S_FD_TINK_VIS>-NOCOL eq 0.
***       Coverage = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Weight = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.

        if <S_FD_TINK_VIS>-COVRG_VARY eq ABAP_TRUE.
***       Coverage = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
        if <S_FD_TINK_VIS>-APWGT_VARY eq ABAP_TRUE.
***       Application Weight = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
        if <S_FD_TINK_VIS>-APVOL_VARY eq ABAP_TRUE.
***       Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
      endif.

    endloop.

  endmethod.
  method CONSTRUCTOR.

    data: LR_PR_XCONI   type ref to ZCL_VCXI_PXSS_PR_XCONI.


***------------------------------------------------------------------------------------------------
*** Call Super
    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Set Fast Data Model and FG/SFG Gate
    ME->R_BL_FDMDL = IR_BL_FDMDL.

***------------------------------------------------------------------------------------------------
*** Replace Part by related Connection Out if needed
    if IR_GATE_OUT->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XPART.
***   Get Connection In
      LR_PR_XCONI = cast ZCL_VCXI_PXSS_PR_XPART( IR_GATE_OUT->R_CLSPR )->GET_PRVDR_XCONI( ).
      if LR_PR_XCONI is bound.
***     Get connected Connection Out
        ME->R_GATE_OUT = LR_PR_XCONI->GET_CONNECTED_GATE( ).
      endif.
    else.
      ME->R_GATE_OUT = IR_GATE_OUT.
    endif.

  endmethod.
  method GET_CSTEP_PRINT.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_BL_FDMDL     type ZVCXI_PXSS_TT_BL_FDMDL,
          LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE,
          LT_GATE         type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Get all Fast Data Models
    LT_BL_FDMDL = ME->R_BL_FDMDL->GET_SUB_BL_FDMDL( ).
    insert ME->R_BL_FDMDL into LT_BL_FDMDL index 1.

***------------------------------------------------------------------------------------------------
    loop at LT_BL_FDMDL into data(LR_BL_FDMDL).
***   Get Configuration Structure
      LT_FASTD_XCOMP = LR_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = LR_BL_FDMDL ).

***   Find Component of Gate and its linked Components
      LT_GATE_EXCLUDE = LR_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = value #( LR_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = ME->R_GATE_OUT ] default LR_BL_FDMDL->T_GATE_OUT[ 1 ] )
                                                       IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

      loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

***     Collect Printing Gates
        free: LT_GATE.
        loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA
                                     where R_GATE is bound
                                      and  R_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_PRINT.
          check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
          append LS_FASTD_XCOMP_DATA-R_GATE to LT_GATE.
        endloop.

***     Sort Gates and add to Result
        ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).
        loop at LT_GATE into LR_GATE.
          append value #( R_GATE = LR_GATE
                          R_BL_FDMDL = LR_BL_FDMDL
                        ) to RT_CSTEP_PRINT.
        endloop.
      endloop.
    endloop.

  endmethod.
  method GET_FD_PRINT_VIS.

    data: LS_FD_PRINT_VIS type ZVCXI_PXSS_S_FD_PRINT_VIS.
    data: LR_DATA type ref to DATA.
    field-symbols: <S_DATA>        type ANY,
                   <T_FDI_TINK>    type ZVCXI_PXSS_TT_FDI_TINK,
                   <S_FD_TINK_VIS> type ZVCXI_PXSS_S_FD_TINK_VIS.


    check IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.

*** "Cast" generic structure to Vis Structure
    LS_FD_PRINT_VIS = corresponding #( CS_DATA ).

****--------------------------------------------------------------------------------------
*** Get Fast Data Integration Data
    LR_DATA = cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->GET_DATA( ).
    assign LR_DATA->* to <S_DATA>.
    LS_FD_PRINT_VIS = corresponding #( base ( LS_FD_PRINT_VIS ) <S_DATA> ).

    if IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_PRINT.
***   Design Document
      LS_FD_PRINT_VIS-DESDO = cast ZIF_VCXI_PXSS_PRINT( IR_GATE->R_CLSPR )->GET_DESDO( importing EF_LINK_ICON = LS_FD_PRINT_VIS-DESDO_LINK_ICON ).
    endif.

*** Document Manager Icon
    LS_FD_PRINT_VIS-DMICO = ICON_DOCUMENT_REVISION.

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    CS_DATA = corresponding #( base ( CS_DATA ) LS_FD_PRINT_VIS ).

***--------------------------------------------------------------------------------------
*** Dynamic Ink Type Information directly on generic Structure
    assign component 'T_FDI_TINK' of structure <S_DATA> to <T_FDI_TINK>.
    if SY-SUBRC eq 0.
      loop at ME->T_TINK into data(LF_TINK).
        data(LS_FDI_TINK) = value #( <T_FDI_TINK>[ TINK = LF_TINK ] optional ).
        assign component LF_TINK of structure CS_DATA to <S_FD_TINK_VIS>.
        if SY-SUBRC eq 0.
          <S_FD_TINK_VIS> = corresponding #( base ( <S_FD_TINK_VIS> ) LS_FDI_TINK ).
          <S_FD_TINK_VIS>-APWGT_UOMC6 = <S_FD_TINK_VIS>-APWGT_UOM.
          <S_FD_TINK_VIS>-APVOL_UOMC6 = <S_FD_TINK_VIS>-APVOL_UOM.

          case ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = LF_TINK ).
            when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
              <S_FD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
              <S_FD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
            when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
              <S_FD_TINK_VIS>-NOCOL_HIDE = ABAP_TRUE.
              case LS_FDI_TINK-APDIM.
                when 'VOLUME'.
                  <S_FD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
                when 'MASS'.
                  <S_FD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
                when others.
                  <S_FD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
                  <S_FD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
              endcase.
            when others.
              <S_FD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
              <S_FD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
          endcase.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED     type /VCXI/CKX_LOCKED,
          LF_INUSE      type /VCXI/VKSR_INUSE,
          LF_NOCOL_HIDE type ABAP_BOOL,
          LF_TINK       type ZVCXI_PXS_TINK,
          LF_DESCR      type /VCXI/CKX_DESCR,
          LF_COLPOS     type I.
    data: LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type ANY,
                   <S_FCAT>  type LVC_S_FCAT,
                   <F_FIELD> type ANY.


*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

*** Get Standard Fieldcat
    data(LT_FCAT) = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Dynamic Field Catalog
    check ME->R_DATA is bound.
    LR_STRUCTDESCR ?= cast CL_ABAP_TABLEDESCR( CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ) )->GET_TABLE_LINE_TYPE( ).

    loop at LR_STRUCTDESCR->GET_INCLUDED_VIEW( ) into data(LS_INCLUDED_VIEW).
      try.
          data(LS_DFIES) = cast CL_ABAP_ELEMDESCR( LS_INCLUDED_VIEW-TYPE )->GET_DDIC_FIELD( ).

          append corresponding #( LS_DFIES ) to RT_FCAT assigning <S_FCAT>.
          <S_FCAT>-FIELDNAME = LS_INCLUDED_VIEW-NAME.
          if LINE_EXISTS( LT_FCAT[ FIELDNAME = LS_INCLUDED_VIEW-NAME ] ).
            <S_FCAT>-REF_TABLE = ME->F_TABNAME.
          endif.
          <S_FCAT>-COL_POS = SY-TABIX.

          case <S_FCAT>-DATATYPE.
***         Set Quantity Unit Reference
            when 'QUAN'.
              <S_FCAT>-QFIELDNAME = LS_DFIES-REFFIELD.
***         Set Currency Key Reference
            when 'CURR'.
              <S_FCAT>-CFIELDNAME = LS_DFIES-REFFIELD.

***         Mark Technical Columns
            when 'TTYP' or 'REF'.
              <S_FCAT>-TECH = ABAP_TRUE.
          endcase.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.


***----------------------------------------------------------------------------
***   Adjust Field Catalog
      case <S_FCAT>-FIELDNAME.
        when 'R_GATE_CSTEP_PRINT' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'TPRIN'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'PRSID'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'DESDO_LINK_ICON'.
          <S_FCAT>-ICON       = ABAP_TRUE.
          <S_FCAT>-FIX_COLUMN = ABAP_TRUE.
          <S_FCAT>-REPTEXT    = text-C01.

        when 'DMICO'.
          <S_FCAT>-ICON       = ABAP_TRUE.
          <S_FCAT>-FIX_COLUMN = ABAP_TRUE.
          <S_FCAT>-HOTSPOT    = ABAP_TRUE.

      endcase.


***----------------------------------------------------------------------------
***   Number of Colors per Ink Type
      if <S_FCAT>-FIELDNAME ne 'NOCOL'  and
         <S_FCAT>-FIELDNAME cp 'NOCOL*' and
         <S_FCAT>-FIELDNAME ns 'NOCOL_HIDE'.
        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate 'Number of'(C02) LF_DESCR into <S_FCAT>-SCRTEXT_L separated by SPACE.
        concatenate 'Number of'(C02) LF_DESCR into <S_FCAT>-SCRTEXT_M separated by SPACE.
        concatenate '#' LF_TINK               into <S_FCAT>-SCRTEXT_S separated by SPACE.
        concatenate '#' LF_TINK               into <S_FCAT>-REPTEXT   separated by SPACE.

***     Dynamic Hide of Number #Colors
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'NOCOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.
      endif.

***   Coverage per Ink Type
      if <S_FCAT>-FIELDNAME ne 'COVRG'      and
         <S_FCAT>-FIELDNAME cp 'COVRG*'     and
         <S_FCAT>-FIELDNAME ns 'COVRG_UOM'  and
         <S_FCAT>-FIELDNAME ns 'COVRG_VARY' and
         <S_FCAT>-FIELDNAME ns 'COVRG_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.
        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-SCRTEXT_L separated by SPACE.
        concatenate <S_FCAT>-SCRTEXT_M LF_DESCR into <S_FCAT>-SCRTEXT_M separated by SPACE.
        concatenate '%' LF_TINK                 into <S_FCAT>-SCRTEXT_S separated by SPACE.
        concatenate '%' LF_TINK                 into <S_FCAT>-REPTEXT   separated by SPACE.

***     Dynamic Hide of Coverage
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'COVRG_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Coverage Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'COVRG_UOM'.
        LF_TINK = <S_FCAT>-FIELDNAME+9.
***     Dynamic Hide of Coverage Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'COVRG_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Application Weight per Ink Type
      if <S_FCAT>-FIELDNAME ne 'APWGT'      and
         <S_FCAT>-FIELDNAME cp 'APWGT*'     and
         <S_FCAT>-FIELDNAME ns 'APWGT_UOM'  and
         <S_FCAT>-FIELDNAME ns 'APWGT_VARY' and
         <S_FCAT>-FIELDNAME ns 'APWGT_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.

***     Dynamic Hide of Application Weight
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APWGT_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Application Weight Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'APWGT_UOMC6'.
        LF_TINK = <S_FCAT>-FIELDNAME+11.
***     Dynamic Hide of Application Weight Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APWGT_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Application Volume per Ink Type
      if <S_FCAT>-FIELDNAME ne 'APVOL'      and
         <S_FCAT>-FIELDNAME cp 'APVOL*'     and
         <S_FCAT>-FIELDNAME ns 'APVOL_UOM'  and
         <S_FCAT>-FIELDNAME ns 'APVOL_VARY' and
         <S_FCAT>-FIELDNAME ns 'APVOL_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.

***     Dynamic Hide of Application Volume
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APVOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Application Volume Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'APVOL_UOMC6'.
        LF_TINK = <S_FCAT>-FIELDNAME+11.
***     Dynamic Hide of Application Volume Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APVOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Hide Ink Info Field
      if <S_FCAT>-FIELDNAME cs 'NOCOL_HIDE' or
         <S_FCAT>-FIELDNAME cs 'COVRG_VARY' or
         <S_FCAT>-FIELDNAME cs 'COVRG_HIDE' or
         <S_FCAT>-FIELDNAME cs 'APWGT_VARY' or
         <S_FCAT>-FIELDNAME cs 'APWGT_HIDE' or
         <S_FCAT>-FIELDNAME cs 'APVOL_VARY' or
         <S_FCAT>-FIELDNAME cs 'APVOL_HIDE'.
        move ABAP_TRUE  to <S_FCAT>-NO_OUT.
      endif.
***   Hide short Unit
      if ( <S_FCAT>-FIELDNAME cs 'APWGT_UOM' and
           <S_FCAT>-FIELDNAME ns 'APWGT_UOMC6' ) or
         ( <S_FCAT>-FIELDNAME cs 'APVOL_UOM' and
           <S_FCAT>-FIELDNAME ns 'APVOL_UOMC6' ).
        move ABAP_TRUE  to <S_FCAT>-NO_OUT.
      endif.

***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRSID'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRSID_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NOCOL'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.

***   Dynamic Columns are sorted and added at the end - so we don't need to move them

***----------------------------------------------------------------------------
***   Fix Columns after Dynamic
      move 1000 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESDO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESDO_LINK_ICON'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DMICO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT type LVC_S_LAYO.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY,
                   <T_STYL> type LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

***--------------------------------------------------------------------------------------
    loop at ME->GET_CSTEP_PRINT( ) into data(LS_CSTEP_PRINT).
***   Add Line with Gate Key Data
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_PXSS_S_FD_PRINT_GRID( R_GATE      = LS_CSTEP_PRINT-R_GATE
                                                           FDMDL_DESCR = LS_CSTEP_PRINT-R_BL_FDMDL->GET_DESCR( )
                                                         ) to <S_DATA>.

***   Get Visualization Data
      ME->GET_FD_PRINT_VIS( exporting IR_GATE = LS_CSTEP_PRINT-R_GATE
                            changing  CS_DATA = <S_DATA> ).

***   Set Style Details
      if LS_LAYOUT-STYLEFNAME is not initial.
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_FD_PRINT( exporting IR_GATE = LS_CSTEP_PRINT-R_GATE
                                               IS_DATA = <S_DATA>
                                     changing  CT_STYL = <T_STYL> ).
***       Call DVC Servcie - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LS_CSTEP_PRINT-R_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endif.
    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Activate Toolbar
    RS_LAYOUT-NO_TOOLBAR = ABAP_FALSE.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_FD_PRINT_GRID type ZVCXI_PXSS_S_FD_PRINT_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          LS_FD_PRINT_GRID = corresponding #( <S_DATA> ).

          check LS_FD_PRINT_GRID-R_GATE is bound and
                LS_FD_PRINT_GRID-R_GATE->F_FREED is initial.

***       Set Values to PR Class
          ME->SET_FD_PRINT_VIS( IR_GATE = LS_FD_PRINT_GRID-R_GATE
                                IS_DATA = <S_DATA> ).

        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_FD_PRINT_GRID type ZVCXI_PXSS_S_FD_PRINT_GRID.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type          ANY,
                   <F_FIELD> type          ANY.

    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        check LINE_EXISTS( <T_DATA>[ E_ROW-INDEX ] ).
        LS_FD_PRINT_GRID = corresponding #( <T_DATA>[ E_ROW-INDEX ] ).

***     Check Gate is bound and Provider has an own UI
        check LS_FD_PRINT_GRID-R_GATE is bound and
              LS_FD_PRINT_GRID-R_GATE->F_FREED is initial and
              LS_FD_PRINT_GRID-R_GATE->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LS_FD_PRINT_GRID-R_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_FD_PRINT_GRID-R_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_FD_PRINT_GRID-R_GATE->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_FD_PRINT_GRID type ZVCXI_PXSS_S_FD_PRINT_GRID.
    data: LT_MSG   type        /VCXI/CKXM_TT_MSG,
          LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Read selected entry
        read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
        check SY-SUBRC is initial.

        LS_FD_PRINT_GRID = corresponding #( <S_DATA> ).
        check LS_FD_PRINT_GRID-R_GATE is bound and
              LS_FD_PRINT_GRID-R_GATE->F_FREED is initial.



        case E_COLUMN_ID-FIELDNAME.
*            when 'FSICO'.
****           Get messages of Gate
*              LR_MESSAGE = LS_FASTD_PRINT_GRID-R_GATE_CSTEP_PRINT->GET_STATUS_MSG( ).
*              append lines of LR_MESSAGE->T_MSG to LT_MSG.
*
****           Get children
*              LT_PRVDR = LS_FASTD_PRINT_GRID-R_GATE_CSTEP_PRINT->GET_PRVDR( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
*
****           Remove duplicates
*              sort LT_PRVDR.
*              delete adjacent duplicates from LT_PRVDR.
*
****           Get messages of children
*              loop at LT_PRVDR assigning <R_GATE>.
*                LR_MESSAGE = <R_GATE>->GET_STATUS_MSG( ).
*                append lines of LR_MESSAGE->T_MSG to LT_MSG.
*              endloop.
*
****           Display Messages
*              check LR_MESSAGE is bound.
*              LR_MESSAGE->T_MSG = LT_MSG.
*              LR_MESSAGE->DISPLAY_MSG( IF_SHOW_INITIAL = ABAP_TRUE ).

          when 'DMICO'.
            ME->HANDLE_UC_DMICO( IR_GATE = LS_FD_PRINT_GRID-R_GATE
                                 IS_DATA = <S_DATA> ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data: LF_DISABLED type ABAP_BOOL.


    try.
***--------------------------------------------------------------------------------------
***     Use Lock-Status of VC to define if buttons are disabled
        LF_DISABLED = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                        else ABAP_TRUE ).

***     Get Sub-Models
        data(LT_BL_FDMDL) = ME->R_BL_FDMDL->GET_SUB_BL_FDMDL( ).

***--------------------------------------------------------------------------------------
***     Insert "Add" function to Toolbar
        if LT_BL_FDMDL is initial.
          append value #( FUNCTION  = 'ADD'
                          TEXT      = 'Add'(001)
                          BUTN_TYPE = C_BTYPE_BUTTON
                          ICON      = ICON_INSERT_ROW
                          DISABLED  = LF_DISABLED
                        ) to E_OBJECT->MT_TOOLBAR.
        else.
          append value #( FUNCTION  = 'ADD'
                          TEXT      = 'Add'(001)
                          BUTN_TYPE = C_BTYPE_MENU_BTN
                          ICON      = ICON_INSERT_ROW
                          DISABLED  = LF_DISABLED
                        ) to E_OBJECT->MT_TOOLBAR.


***       Add Function of Own and Sub-Models
          data(LR_CTMENU) = new CL_CTMENU( ).
          LR_CTMENU->ADD_FUNCTION( FCODE    = 'ADD'
                                   TEXT     = conv #( ME->R_BL_FDMDL->GET_DESCR( ) )
                                   DISABLED = LF_DISABLED ).
          loop at LT_BL_FDMDL into data(LR_BL_FDMDL).
            LR_CTMENU->ADD_FUNCTION( FCODE    = 'ADD@' && SY-TABIX
                                     TEXT     = conv #( LR_BL_FDMDL->GET_DESCR( ) )
                                     DISABLED = LF_DISABLED ).
          endloop.
          append value #( FUNCTION = 'ADD'
                          CTMENU   = LR_CTMENU
                        ) to E_OBJECT->MT_BTNMNU.
        endif.

***--------------------------------------------------------------------------------------
***     Insert "Delete" function to Toolbar
        append value #( FUNCTION  = 'DEL'
                        TEXT      = 'Delete'(002)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_DELETE_ROW
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LF_TABIX type STRING.
    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.


*** Get Tabix for Sub Menu
    split IF_UCOMM at '@' into data(DUMMY) LF_TABIX.

*** Identify Fast Data Model (main or sub)
    if LF_TABIX eq 0.
      LR_BL_FDMDL = ME->R_BL_FDMDL.
    else.
***   Get Sub-Models
      data(LT_BL_FDMDL) = ME->R_BL_FDMDL->GET_SUB_BL_FDMDL( ).
      LR_BL_FDMDL = value #( LT_BL_FDMDL[ LF_TABIX ] optional ).
    endif.
    check LR_BL_FDMDL is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = LR_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = LR_BL_FDMDL ).

*** Add Printing Step
    LR_BL_FDMDL->ADD_CSTEP( exporting IF_ISELF       = 'CSTEP_PRINT'
                                      IR_GATE_OUT    = value #( LR_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = ME->R_GATE_OUT ] default LR_BL_FDMDL->T_GATE_OUT[ 1 ] )
                            changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP ).

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    LR_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = LR_BL_FDMDL
                                       IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method HANDLE_UC_DEL.

    data: LS_ROW           type LVC_S_ROW,
          LS_FD_PRINT_GRID type ZVCXI_PXSS_S_FD_PRINT_GRID.
    data: LT_ROW  type LVC_T_ROW,
          LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA>  type standard table.


*** Get all Selected Rows
    ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
    check LINES( LT_ROW ) is not initial.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

*** Collect Gates of selected rows
    loop at LT_ROW into LS_ROW.
      check LINE_EXISTS( <T_DATA>[ LS_ROW-INDEX ] ).
      LS_FD_PRINT_GRID = corresponding #( <T_DATA>[ LS_ROW-INDEX ] ).
      append LS_FD_PRINT_GRID-R_GATE to LT_GATE.
    endloop.

*** Free Selected Gates
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.
***   Check if Gate is changeable and can be deleted
      if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
        LR_GATE->DO_FREE( ).
      endif.
    endloop.

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method HANDLE_UC_DMICO.

*** Start Popup of Document Manager
    ZCL_VCXI_XCSS_POPUP_DOC_MGR=>START( exporting IF_LOCKED      = ME->R_GATE->IS_LOCKED( )
                                                  IR_GATE        = IR_GATE
                                                  IR_UIGATE      = ME->R_UIGATE
                                                  IF_APPL_EVENTS = ME->F_APPL_EVENTS ).
    ME->CHECK_CHANGED_DATA( ).

  endmethod.
  method HANDLE_UCOMM.

    try.
***     Trigger general Add command
        case E_UCOMM.
          when 'ADD'.
            ME->HANDLE_UC_ADD( IF_UCOMM = E_UCOMM ).
          when 'DEL'.
            ME->HANDLE_UC_DEL( ).
          when others.
            if E_UCOMM cp 'ADD@*'.
              ME->HANDLE_UC_ADD( IF_UCOMM = E_UCOMM ).
            endif.
        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE and
           ME->R_UIGATE is bound.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method REFRESH_GRID.

    check ME->F_FREED       ne ABAP_TRUE and
          ME->F_REFRESH_REQ eq ABAP_TRUE.

*** Create Data Reference
    ME->BUILD_DYN_TABLE( ).

    SUPER->REFRESH_GRID( ).

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Eventhandler for Toolbar
    set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
    set handler ME->HANDLE_UCOMM               for ME->R_GRID.

*** Set Double Click
    set handler ME->HANDLE_DOUBLE_CLICK        for ME->R_GRID.

*** Set Hotspot Click
    set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

  endmethod.
  method SET_FD_PRINT_VIS.

    data: LS_FD_PRINT_VIS type ZVCXI_PXSS_S_FD_PRINT_VIS.
    data: LR_DATA type ref to DATA.
    field-symbols: <S_DATA>        type ANY,
                   <S_FDI_TINK>    type ZVCXI_PXSS_S_FDI_TINK,
                   <T_FDI_TINK>    type ZVCXI_PXSS_TT_FDI_TINK,
                   <S_FD_TINK_VIS> type ZVCXI_PXSS_S_FD_TINK_VIS.


    check IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.

*** "Cast" generic structure to Vis Structure
    LS_FD_PRINT_VIS = corresponding #( IS_DATA ).

***--------------------------------------------------------------------------------------
*** Get Fast Data Integration Data
    LR_DATA = cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->GET_DATA( ).
    assign LR_DATA->* to <S_DATA>.

***--------------------------------------------------------------------------------------
*** Perform Update for Print
    <S_DATA> = corresponding #( base ( <S_DATA> ) LS_FD_PRINT_VIS ).

*** Update dynamic Ink Type Information
    assign component 'T_FDI_TINK' of structure <S_DATA> to <T_FDI_TINK>.
    if SY-SUBRC eq 0.
      loop at ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LS_FD_PRINT_VIS-TPRIN ) into data(LS_TINK_INFO).
        assign component LS_TINK_INFO-TINK of structure IS_DATA to <S_FD_TINK_VIS>.
        if SY-SUBRC eq 0.
          if LINE_EXISTS( <T_FDI_TINK>[ TINK = LS_TINK_INFO-TINK ] ).
            assign <T_FDI_TINK>[ TINK = LS_TINK_INFO-TINK ] to <S_FDI_TINK>.
          else.
            append value #( TINK = LS_TINK_INFO-TINK ) to <T_FDI_TINK> assigning <S_FDI_TINK>.
          endif.
          <S_FDI_TINK> = corresponding #( base ( <S_FDI_TINK> ) <S_FD_TINK_VIS> ).
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Set Fast Data Integration Data
    cast ZIF_VCXI_PXSS_FDI( IR_GATE->R_CLSPR )->SET_DATA( IR_DATA = LR_DATA ).
    assign LR_DATA->* to <S_DATA>.
    LS_FD_PRINT_VIS = corresponding #( base ( LS_FD_PRINT_VIS ) <S_DATA> ).

  endmethod.
