
class ZCL_VCXI_FFSS_CUST_GLUE definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  types:
    YT_TC320 type standard table of ZVCXI_FFS_TC320 .

  data F_TGLUE type ZVCXI_FFS_TGLUE .
  data S_APWGT type ZVCXI_FFS_S_APWGT .
  data S_APWMA type ZVCXI_FFS_S_APWMA .
  data S_APWMI type ZVCXI_FFS_S_APWMI .
  data S_SLDCO type ZVCXI_FFS_S_SLDCO .

  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_INSTANCE_GLUE
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_GLUE
    raising
      /VCXI/CX_CKX .
  methods GET_REDUW
    importing
      !IF_WERKS type WERKS_D
      !IF_TGLUE type ZVCXI_FFS_TGLUE
    returning
      value(RS_REDUW) type ZVCXI_FFS_S_REDUW
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_APWGT type /VCXI/CKXC_MAPID value 'APWGT' ##NO_TEXT.
  constants C_MAPID_APWMA type /VCXI/CKXC_MAPID value 'APWMA' ##NO_TEXT.
  constants C_MAPID_APWMI type /VCXI/CKXC_MAPID value 'APWMI' ##NO_TEXT.
  constants C_MAPID_SLDCO type /VCXI/CKXC_MAPID value 'SLDCO' ##NO_TEXT.
  constants C_MAPID_TGLUE type /VCXI/CKXC_MAPID value 'TGLUE' ##NO_TEXT.
  constants C_SETID_GLUE type /VCXI/CKXC_SETID value 'ZVCXI_FFSS_GLUE' ##NO_TEXT.
  data T_TC320 type YT_TC320 .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_CUST_GLUE definition
class ZCL_VCXI_FFSS_CUST_GLUE implementation.
  method CLASS_CONSTRUCTOR.

  endmethod.
  method CONSTRUCTOR.

    try.
        SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                            IF_WERKS = IF_WERKS
                            IF_DATE  = IF_DATE ).

***     Load Data by Cross Classification Mapping
        ME->LOAD_BY_CCM( ).

***     Read Customizing Data for Glue Width Reduction
        select * from ZVCXI_FFS_TC320
                 into table ME->T_TC320.

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_INSTANCE_GLUE.

    data:  LS_INSTANCE type YS_INSTANCE.


***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
               with key MATNR = IF_MATNR
                        WERKS = IF_WERKS
                        DATE  = IF_DATE.

    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
          create object RR_INSTANCE
            exporting
              IF_MATNR = IF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE.

        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method GET_REDUW.

    data: LT_TC320  type table of ZVCXI_FFS_TC320.
    data: LS_TC320  type          ZVCXI_FFS_TC320.

***---------------------------------------------------------------------
*** Find with all values (Plant, Glue Type)
    read table ME->T_TC320 into LS_TC320
          with key WERKS = IF_WERKS
                   TGLUE = IF_TGLUE.
    if SY-SUBRC is not initial.
***   Find with Plant only
      read table ME->T_TC320 into LS_TC320
        with key WERKS = IF_WERKS
                 TGLUE = SPACE.
      if SY-SUBRC is not initial.
***     Find with Glue type only
        read table ME->T_TC320 into LS_TC320
          with key TGLUE = IF_TGLUE
                   WERKS = SPACE.
        if SY-SUBRC is not initial.
***       Find initial values
          read table ME->T_TC320 into LS_TC320
          with key WERKS = SPACE
                   TGLUE = SPACE.
        endif.
      endif.
    endif.

    if SY-SUBRC is initial.
      move LS_TC320-S_REDUW to RS_REDUW.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC,
          LS_MAPVN type  /VCXI/CKXC_S_MAPVN.
    data: LT_SETVA type  /VCXI/CKXC_TT_SETVA.

*** get Glue Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_GLUE
                                             IF_OBJNUM = LF_OBJNUM
                                             IF_MCTXT  = 'SVC' ).

    loop at LT_SETVA into LS_SETVA.
      clear: LS_MAPVC,
             LS_MAPVN.

      case LS_SETVA-MAPID.
***     Glue Type
        when C_MAPID_TGLUE.
          read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVC-VAMAP to ME->F_TGLUE.
            if ME->F_TGLUE is initial.
              move LS_MAPVC-VAORG to ME->F_TGLUE.
            endif.
          endif.

***     Solid Content
        when C_MAPID_SLDCO.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_SLDCO-SLDCO.
            move LS_MAPVN-ATFLV_UOM to ME->S_SLDCO-SLDCO_UOM.
          endif.

***     Application Weight
        when C_MAPID_APWGT.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_APWGT-APWGT.
            move LS_MAPVN-ATFLV_UOM to ME->S_APWGT-APWGT_UOM.
          endif.

***     Application Weight Min
        when C_MAPID_APWMI.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_APWMI-APWMI.
            move LS_MAPVN-ATFLV_UOM to ME->S_APWMI-APWMI_UOM.
          endif.

***     Application Weight Max
        when C_MAPID_APWMA.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_APWMA-APWMA.
            move LS_MAPVN-ATFLV_UOM to ME->S_APWMA-APWMA_UOM.
          endif.

      endcase.
    endloop.

  endmethod.
