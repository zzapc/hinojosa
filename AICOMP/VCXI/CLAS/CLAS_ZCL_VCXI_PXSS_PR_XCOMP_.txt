
class ZCL_VCXI_PXSS_PR_XCOMP definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_ND_CLUSTER .
  interfaces ZIF_VCXI_PXSS_ND_NODE .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_PX_XCOMP type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XCOMP' ##NO_TEXT.

  methods SPLIT
    importing
      !IR_GATE_CSTEP type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_XCOMP
    exporting
      !ET_GATE_IN type /VCXI/VKSR_TT_GATE
      !ET_GATE_OUT type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OUTPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_OUTPUT) type ref to ZCL_VCXI_PXSS_PR_OUTPUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPEC) type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RTESPV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RTESPV) type ref to ZCL_VCXI_XCSR_PR_RTESPV
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
protected section.

  methods COPY_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods CREATE_SPVRE
    exporting
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE
    importing
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    exporting
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
    returning
      value(RR_SPVRE_XCOMP) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods REPLACE_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP
    returning
      value(RT_BL_PSTEP) type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_PXSS_PR_SOV
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_XCOMP definition
class ZCL_VCXI_PXSS_PR_XCOMP implementation.
  method COPY_SPVRE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_ID type table of /VCXI/CKX_ID.
    data: LR_SPVRE  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Create new Element if needed
    if CR_SPVRE is not bound.
      create object CR_SPVRE
        exporting
          IR_SPVCE  = IR_SPVRE->R_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append CR_SPVRE to CT_SPVRE.
    endif.

***--------------------------------------------------------------------------------------
*** Copy Leading Object
    CR_SPVRE->SET_LEOKY( IS_LEOKY = IR_SPVRE->S_LEOKY ).

*** Copy Parameter
    loop at IR_SPVRE->R_SPVCE->T_PARAM into LR_OBJECT.
      LS_PARAM = IR_SPVRE->GET_PARAM( IF_PARID = LR_OBJECT->GET_ID( ) ).
      CR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
    endloop.

*** Copy In Use Status
    CR_SPVRE->SET_INUSE( IF_INUSE = IR_SPVRE->F_INUSE ).

  endmethod.
  method CREATE_SPVRE.

    data: LR_SPVRE_XCOMP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_SPEC  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE       type ref to /VCXI/CL_VKSR_SPVRE.


    clear: ER_SPVRE_SPEC,
           ER_SPVRE_INPUT,
           ER_SPVRE_CONV,
           ER_SPVRE_OUTPUT.

***--------------------------------------------------------------------------------------
*** Get own Supervised Element
    LR_SPVRE_XCOMP = ME->GET_SPVRE( exporting IT_SPVRE      = CT_SPVRE
                                    importing ER_SPVRE_SPEC = LR_SPVRE_SPEC ).
    check LR_SPVRE_XCOMP is bound and
          LR_SPVRE_SPEC  is bound.

***--------------------------------------------------------------------------------------
*** Create new Component
    ME->COPY_SPVRE( exporting IR_SPVRE        = LR_SPVRE_XCOMP
                              IR_SPVRE_PARENT = LR_SPVRE_XCOMP->R_PARENT
                    changing  CR_SPVRE        = RR_SPVRE
                              CT_SPVRE        = CT_SPVRE ).

*** Copy Specification
    ME->COPY_SPVRE( exporting IR_SPVRE        = LR_SPVRE_SPEC
                              IR_SPVRE_PARENT = RR_SPVRE
                    changing  CR_SPVRE        = ER_SPVRE_SPEC
                              CT_SPVRE        = CT_SPVRE ).

    loop at CT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq LR_SPVRE_SPEC.
      case LR_SPVRE->GET_ID( ).
***     Copy Input
        when 'INPUT'.
          ME->COPY_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                    IR_SPVRE_PARENT = ER_SPVRE_SPEC
                          changing  CR_SPVRE        = ER_SPVRE_INPUT
                                    CT_SPVRE        = CT_SPVRE ).
***     Copy Conversion
        when 'CONV'.
          ME->COPY_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                    IR_SPVRE_PARENT = ER_SPVRE_SPEC
                          changing  CR_SPVRE        = ER_SPVRE_CONV
                                    CT_SPVRE        = CT_SPVRE ).
***     Copy Output
        when 'OUTPUT'.
          ME->COPY_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                    IR_SPVRE_PARENT = ER_SPVRE_SPEC
                          changing  CR_SPVRE        = ER_SPVRE_OUTPUT
                                    CT_SPVRE        = CT_SPVRE ).
      endcase.
    endloop.

  endmethod.
  method GET_BL_PSTEP.

    data: LR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV.


*** Get Routing Supervisor Gate
    LR_PR_RTESPV = ME->GET_PRVDR_RTESPV( ).
    check LR_PR_RTESPV is bound.

*** Get Production Steps of Routing Supervisor
    RT_BL_PSTEP = LR_PR_RTESPV->T_BL_PSTEP.

  endmethod.
  method GET_DESCR.

    data: LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE.


    data(LR_PR_OUTPUT) = ME->GET_PRVDR_OUTPUT( importing ER_GATE = LR_GATE_OUTPUT ).
    if LR_PR_OUTPUT is bound.
      data(LR_PR_SSTEP) = LR_PR_OUTPUT->GET_PRVDR_SSTEP( ).
      if LR_PR_SSTEP is bound.
***     Get Description of Separation Step
        RF_DESCR = LR_PR_SSTEP->GET_DESCR( ).
      else.
***     Get Description of first Child
        loop at LR_GATE_OUTPUT->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                           IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ) into data(LR_GATE).
          check LR_GATE->R_CLSPR is bound.
          RF_DESCR = LR_GATE->R_CLSPR->GET_DESCR( ).
          exit.
        endloop.
      endif.
    endif.

*** Use Super Description as fallback
    if RF_DESCR is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_OUTPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_OUTPUT=>C_IPRVT_PX_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

  endmethod.
  method GET_PRVDR_RTESPV.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_RTESPV.

***------------------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_RTESPV.

  endmethod.
  method GET_PRVDR_SOV.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_SOV.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SOV.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SPEC.

  endmethod.
  method GET_SPVRE.

    data: LR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE.


***--------------------------------------------------------------------------------------
*** Get own Supervised Element
    RR_SPVRE_XCOMP = value #( IT_SPVRE[ TABLE_LINE->F_GATKY = ME->R_GATE->F_GATKY ] optional ).


***--------------------------------------------------------------------------------------
*** Analyze Component
    loop at IT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq RR_SPVRE_XCOMP.
      case LR_SPVRE->GET_ID( ).
        when 'SPEC'.
          ER_SPVRE_SPEC = LR_SPVRE.
      endcase.
    endloop.

*** Analyze Spcification
    loop at IT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq ER_SPVRE_SPEC.
      case LR_SPVRE->GET_ID( ).
***     Copy Input
        when 'INPUT'.
          ER_SPVRE_INPUT  = LR_SPVRE.
***     Copy Conversion
        when 'CONV'.
          ER_SPVRE_CONV   = LR_SPVRE.
***     Copy Output
        when 'OUTPUT'.
          ER_SPVRE_OUTPUT = LR_SPVRE.
      endcase.
    endloop.

  endmethod.
  method GET_XCOMP.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.


***--------------------------------------------------------------------------------------
*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
    check LT_GATE is not initial.
    LR_PR_SOV ?= LT_GATE[ 1 ]->R_CLSPR.
    check LR_PR_SOV is bound.

*** Get X-Connections as References
    LT_XCONR = LR_PR_SOV->GET_CONNECTED_XCOMP( ).


***--------------------------------------------------------------------------------------
*** Return Inbound Components if requested
    if ET_GATE_IN is requested.
      ET_GATE_IN = value #( for S_XCONR in LT_XCONR where ( R_GATE_IN = ME->R_GATE ) ( S_XCONR-R_GATE_OUT ) ).
    endif.

*** Return Outbound Components if requested
    if ET_GATE_OUT is requested.
      ET_GATE_OUT = value #( for S_XCONR in LT_XCONR where ( R_GATE_OUT = ME->R_GATE ) ( S_XCONR-R_GATE_IN ) ).
    endif.

  endmethod.
  method REPLACE_SPVRE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_ID type table of /VCXI/CKX_ID.
    data: LR_SPVRE  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Remove old Element from List
    delete CT_SPVRE where TABLE_LINE eq IR_SPVRE.

*** Reuse Component Structure if already available
    LT_ID = value #( ( 'SPEC' ) ( 'INPUT' ) ( 'CONV' ) ( 'OUTPUT' )
                     ( 'RTESPV' ) ).
    if LINE_EXISTS( LT_ID[ TABLE_LINE = IR_SPVRE->GET_ID( ) ] ).
      RR_SPVRE = value #( CT_SPVRE[ TABLE_LINE->R_SPVCE  = IR_SPVRE->R_SPVCE
                                    TABLE_LINE->R_PARENT = IR_SPVRE_PARENT ] optional ).
    endif.

    if RR_SPVRE is not bound.
***   Create new Element
      create object RR_SPVRE
        exporting
          IR_SPVCE  = IR_SPVRE->R_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append RR_SPVRE to CT_SPVRE.

***   Copy Leading Object
      RR_SPVRE->SET_LEOKY( IS_LEOKY = IR_SPVRE->S_LEOKY ).

***   Copy Parameter
      loop at IR_SPVRE->R_SPVCE->T_PARAM into LR_OBJECT.
        LS_PARAM = IR_SPVRE->GET_PARAM( IF_PARID = LR_OBJECT->GET_ID( ) ).
        RR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
      endloop.

***   Copy In Use Status
      RR_SPVRE->SET_INUSE( IF_INUSE = IR_SPVRE->F_INUSE ).
    endif.

***--------------------------------------------------------------------------------------
*** Process Children
    loop at CT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq IR_SPVRE.
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = RR_SPVRE
                         changing  CT_SPVRE        = CT_SPVRE ).
    endloop.

  endmethod.
  method SPLIT.

    data: LT_SPVRE type /VCXI/VKSR_TT_SPVRE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SOV         type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SOV           type ref to ZCL_VCXI_PXSS_PR_SOV,
          LR_SPVRE_XCOMP      type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT_ORG  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV_ORG   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_OUTPUT_ORG type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT_NEW  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV_NEW   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_OUTPUT_NEW type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE            type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_XCONO      type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_XCONI      type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE.


*** Get Specification Overview and all Supervised Elements (sorted)
    LR_PR_SOV = ME->GET_PRVDR_SOV( importing ER_GATE = LR_GATE_SOV ).
    check LR_GATE_SOV is bound.
    LT_SPVRE = LR_GATE_SOV->GET_SPVRE( ).

***--------------------------------------------------------------------------------------
*** Get own Supervised Element
    LR_SPVRE_XCOMP = ME->GET_SPVRE( exporting IT_SPVRE        = LT_SPVRE
                                    importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT_ORG
                                              ER_SPVRE_CONV   = LR_SPVRE_CONV_ORG
                                              ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT_ORG ).
    check LR_SPVRE_XCOMP is bound.

***--------------------------------------------------------------------------------------
*** Create new XCOMP Element
    ME->CREATE_SPVRE( importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT_NEW
                                ER_SPVRE_CONV   = LR_SPVRE_CONV_NEW
                                ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT_NEW
                      changing  CT_SPVRE        = LT_SPVRE ).

*** Shift Input Elements to new Component
    loop at LT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq LR_SPVRE_INPUT_ORG.
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = LR_SPVRE_INPUT_NEW
                         changing  CT_SPVRE        = LT_SPVRE ).
    endloop.

**** Shift Conversion Elements to new Component
    if IR_GATE_CSTEP is bound.
      loop at LT_SPVRE into LR_SPVRE
                       where TABLE_LINE->R_PARENT eq LR_SPVRE_CONV_ORG.
        ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                     IR_SPVRE_PARENT = LR_SPVRE_CONV_NEW
                           changing  CT_SPVRE        = LT_SPVRE ).
***     Perform Split after defined Conversion Step by not replacing all Conversion Steps
        if LR_SPVRE->F_GATKY eq IR_GATE_CSTEP->F_GATKY.
          exit.
        endif.
      endloop.
    endif.

*** Add Connection Out
    LR_SPVCE = /VCXI/CL_VKSR_SPV_SERVICE=>GET_SPVCE( IR_GATE         = LR_GATE_SOV
                                                     IF_ID           = ME->R_GATE->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONO=>C_IPRVT_XCONO )
                                                     IR_SPVCE_PARENT = LR_SPVRE_OUTPUT_NEW->R_SPVCE ).
    LR_SPVRE_XCONO = new #( IR_SPVCE  = LR_SPVCE
                            IR_PARENT = LR_SPVRE_OUTPUT_NEW ).
    append LR_SPVRE_XCONO to LT_SPVRE.
    LR_SPVRE_XCONO->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Create new XCOMP Element
    ME->CREATE_SPVRE( importing ER_SPVRE_INPUT  = LR_SPVRE_INPUT_NEW
                                ER_SPVRE_CONV   = LR_SPVRE_CONV_NEW
                                ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT_NEW
                      changing  CT_SPVRE        = LT_SPVRE ).

*** Add Connection In
    LR_SPVCE = /VCXI/CL_VKSR_SPV_SERVICE=>GET_SPVCE( IR_GATE         = LR_GATE_SOV
                                                     IF_ID           = ME->R_GATE->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI )
                                                     IR_SPVCE_PARENT = LR_SPVRE_INPUT_NEW->R_SPVCE ).
    LR_SPVRE_XCONI = new #( IR_SPVCE  = LR_SPVCE
                            IR_PARENT = LR_SPVRE_INPUT_NEW ).
    append LR_SPVRE_XCONI to LT_SPVRE.
    LR_SPVRE_XCONI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Shift Conversion Elements to new Component
    loop at LT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq LR_SPVRE_CONV_ORG.
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = LR_SPVRE_CONV_NEW
                         changing  CT_SPVRE        = LT_SPVRE ).
    endloop.

*** Shift Output Elements to new Component
    loop at LT_SPVRE into LR_SPVRE
                     where TABLE_LINE->R_PARENT eq LR_SPVRE_OUTPUT_ORG.
      ME->REPLACE_SPVRE( exporting IR_SPVRE        = LR_SPVRE
                                   IR_SPVRE_PARENT = LR_SPVRE_OUTPUT_NEW
                         changing  CT_SPVRE        = LT_SPVRE ).
    endloop.

***--------------------------------------------------------------------------------------
*** Remove old Component
    delete LT_SPVRE where TABLE_LINE eq LR_SPVRE_XCOMP.

*** Set updated Supervised Runtime Element
    LR_GATE_SOV->SET_SPVRE( IT_SPVRE = LT_SPVRE ).

*** Connect the new connections
    LT_GATE = LR_GATE_SOV->GET_PRVDR( ).
    LR_PR_SOV->CONNECT( IR_GATE_IN  = LT_GATE[ TABLE_LINE->F_GATKY = LR_SPVRE_XCONI->F_GATKY ]
                        IR_GATE_OUT = LT_GATE[ TABLE_LINE->F_GATKY = LR_SPVRE_XCONO->F_GATKY ] ).
    LR_GATE_SOV->RAISE_EVENTS( ).

  endmethod.
  method ZIF_VCXI_PXSS_ND_CLUSTER~GET_INFO.

*** Node Type
    EF_NETTYPE = 'A'.

*** Set Node Description
    ET_CVAL = value #( ( FL  = LINES( ET_CVAL )  VAL = ME->GET_DESCR( ) ) ).

  endmethod.
  method ZIF_VCXI_PXSS_ND_NODE~GET_INFO.

    data: LR_BL_PSTEP         type ref to ZCL_VCXI_XCSR_BL_PSTEP.


*** Node Type
    EF_NETTYPE = 'A'.

*** Set Node Description
    ET_NVAL = value #( ( FL  = LINES( ET_NVAL )  VAL = ME->GET_DESCR( ) ) ).

*** Status Light
    append value #( FL  = LINES( ET_NVAL )
*                      VAL = LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                  ) to ET_NVAL.

*** Get Production Steps BL
    loop at ME->GET_BL_PSTEP( ) into LR_BL_PSTEP.
      append value #( FL  = LINES( ET_NVAL )
                      VAL = LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                    ) to ET_NVAL.
    endloop.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_NODE_KEY  type I.
    data: LS_XCONR     type ZVCXI_PXSS_S_XCONR.
    data: LT_GATE_CHILD        type        /VCXI/VKSR_TT_GATE,
          LT_GATE_INPUT_CHILD  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_OUTPUT_CHILD type        /VCXI/VKSR_TT_GATE,
          LT_GATE_CSTEP        type        /VCXI/VKSR_TT_GATE,
          LT_GATE_SSTEP        type        /VCXI/VKSR_TT_GATE,
          LT_XCONR             type        ZVCXI_PXSS_TT_XCONR.
    data: LR_GATE_NEXT         type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SPEC         type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CHILD        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_INPUT        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_INPUT_CHILD  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CONV         type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CSTEP        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CSTEP_LAST   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SSTEP        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT_CHILD type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCONO        type ref to /VCXI/CL_VKSR_GATE.


    check CR_NETGRAPH_JSON is bound.

***--------------------------------------------------------------------------------------
*** Get Specification
    ME->GET_PRVDR_SPEC( importing ER_GATE = LR_GATE_SPEC ).

*** Get Children of Specification (Input, Converion, Output)
    LT_GATE_CHILD = LR_GATE_SPEC->GET_PRVDR( IF_TPRVR  = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                             IF_SORTED = ABAP_TRUE
                                             IF_INUSE  = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Handle Conversion Steps first
    LR_GATE_CONV = value #( LT_GATE_CHILD[ TABLE_LINE->F_ID = 'CONV' ] optional ).
    if LR_GATE_CONV is bound.

***   Get Conversion Steps
      LT_GATE_CSTEP = LR_GATE_CONV->GET_PRVDR( IF_TPRVR  = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                               IF_SORTED = ABAP_TRUE
                                               IF_INUSE  = ABAP_TRUE ).
      loop at LT_GATE_CSTEP into LR_GATE_CSTEP.
***     Add Data via Conversion Step
        if LR_GATE_CSTEP->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
          cast ZIF_VCXI_XCS_NGREP( LR_GATE_CSTEP->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                   changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
        endif.

***     Add Line to previous Conversion Step
        if LR_GATE_CSTEP ne LR_GATE_CSTEP_LAST and
           LR_GATE_CSTEP_LAST is not initial.
          CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_LAST )
                                      IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP ) ).
        endif.

***     Keep "first" Node in Component if not yet set
        if LR_GATE_NEXT is initial.
          move LR_GATE_CSTEP to LR_GATE_NEXT.
        endif.

***     Keep "last" Conversion Step
        move LR_GATE_CSTEP to LR_GATE_CSTEP_LAST.

      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Get Children of Output
    LR_GATE_OUTPUT = value #( LT_GATE_CHILD[ TABLE_LINE->F_ID = 'OUTPUT' ] optional ).
    if LR_GATE_OUTPUT is bound.

***   Determine if we have Output Separation
      LT_GATE_SSTEP = LR_GATE_OUTPUT->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SSTEP=>C_IPRVT_PX_SSTEP
                                                 IF_SORTED = ABAP_TRUE
                                                 IF_INUSE  = ABAP_TRUE ).
      loop at LT_GATE_SSTEP into LR_GATE_SSTEP.

***     Add Data via Element
        if LR_GATE_SSTEP->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
          cast ZIF_VCXI_XCS_NGREP( LR_GATE_SSTEP->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                   changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
        endif.

***     Add Line to previous Conversion Step (if available)
        if LR_GATE_CSTEP_LAST is not initial.
          CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_LAST )
                                      IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_SSTEP ) ).
        endif.

***     Keep as "next" Node in Component if not yet set
        if LR_GATE_NEXT is initial.
          move LR_GATE_SSTEP to LR_GATE_NEXT.
        endif.

      endloop.

***   Get Output Children
      LT_GATE_OUTPUT_CHILD = LR_GATE_OUTPUT->GET_PRVDR( IF_TPRVR  = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                                        IF_SORTED = ABAP_TRUE
                                                        IF_INUSE  = ABAP_TRUE ).
      loop at LT_GATE_OUTPUT_CHILD into LR_GATE_OUTPUT_CHILD.

***     Skip Separation here (handled above)
        if LR_GATE_OUTPUT_CHILD->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_SSTEP.
          continue.
        endif.

***     Add Data via Element
        if LR_GATE_OUTPUT_CHILD->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
          cast ZIF_VCXI_XCS_NGREP( LR_GATE_OUTPUT_CHILD->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                          changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
        endif.

***     Add Line to previous Conversion Step (if available)
        if LR_GATE_CSTEP_LAST is not initial.
***       In case of Separation, register Element to Separation Step
          if LR_GATE_SSTEP is not initial.
            CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_SSTEP )
                                        IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_OUTPUT_CHILD ) ).
          else.
            CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_LAST )
                                        IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_OUTPUT_CHILD ) ).
          endif.
        endif.

        if LR_GATE_OUTPUT_CHILD->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XCONO. " Connection Out
***       In case of Separation, register Connection Out to Separation Step
          if LR_GATE_SSTEP is not initial.
***         Register Connection Out to last Conversion Step (if available)
            CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_OUTPUT_CHILD
                                                IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_SSTEP ) ).

          else.
            if LR_GATE_CSTEP_LAST is not initial.
***           Register Connection Out to last Conversion Step (if available)
              CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_OUTPUT_CHILD
                                                  IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_LAST ) ).

            else.
***           Store to register after Input Elements Handling
              move LR_GATE_OUTPUT_CHILD to LR_GATE_XCONO.
            endif.
          endif.

          continue.
        endif.

***     Keep as "next" Node in Component if not yet set
        if LR_GATE_NEXT is initial.
          move LR_GATE_OUTPUT_CHILD to LR_GATE_NEXT.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Get Children of Input (Done as last step, so "first Node" is know)
    LR_GATE_INPUT = value #( LT_GATE_CHILD[ TABLE_LINE->F_ID = 'INPUT' ] optional ).
    if LR_GATE_INPUT is bound.

***   Get Input Children
      LT_GATE_INPUT_CHILD = LR_GATE_INPUT->GET_PRVDR( IF_TPRVR  = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                                      IF_SORTED = ABAP_TRUE
                                                      IF_INUSE  = ABAP_TRUE ).
      loop at LT_GATE_INPUT_CHILD into LR_GATE_INPUT_CHILD.

***     Add Data via Element
        if LR_GATE_INPUT_CHILD->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
          cast ZIF_VCXI_XCS_NGREP( LR_GATE_INPUT_CHILD->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                         changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
        endif.

***     XCONI will be "represented" by "first" Node
        if LR_GATE_INPUT_CHILD->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XCONI.
          if LR_GATE_NEXT is not initial.
***         Register Gate to "next" Node
            CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_INPUT_CHILD
                                                IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_NEXT ) ).
          endif.
          continue.
        endif.

***     Add Line to "next" Node (either Conversion Step or FG)
        if LR_GATE_NEXT is not initial.
          CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_INPUT_CHILD )
                                      IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_NEXT ) ).
        endif.

      endloop.

***   Verify Connection Out is handled (in case of no Conversion Steps)
      if LR_GATE_XCONO is not initial and
         CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_XCONO ) is initial.
***     Register Connection Out to Input Element
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_XCONO
                                            IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_INPUT_CHILD ) ).
      endif.
    endif.

  endmethod.
