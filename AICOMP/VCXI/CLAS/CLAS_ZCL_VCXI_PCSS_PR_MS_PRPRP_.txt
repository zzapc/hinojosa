
class ZCL_VCXI_PCSS_PR_MS_PRPRP definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PC_MS_PRPRP type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_MS_PRPRP'. "#EC NOTEXT
  constants C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_PC_BAWGP_A'. "#EC NOTEXT
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_PC_BAWGT'. "#EC NOTEXT
  constants C_PARID_BPAID type /VCXI/VKS_PARID value 'ZVCXI_PC_BPAID'. "#EC NOTEXT
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP'. "#EC NOTEXT
  constants C_PARID_CUPST type /VCXI/VKS_PARID value 'ZVCXI_PC_CUPST'. "#EC NOTEXT
  constants C_PARID_CYLIN type /VCXI/VKS_PARID value 'ZVCXI_PC_CYLIN'. "#EC NOTEXT
  constants C_PARID_NOCOL type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOL'. "#EC NOTEXT
  constants C_PARID_TPRPR type /VCXI/VKS_PARID value 'ZVCXI_PC_TPRPR'. "#EC NOTEXT
  constants C_PARID_PAWID type /VCXI/VKS_PARID value 'ZVCXI_PC_PAWID'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BPAID
    returning
      value(RF_BPAID) type ZVCXI_PCS_BPAID
    raising
      /VCXI/CX_CKX .
  methods GET_TPRPR_DESCR
    returning
      value(RF_TPRPR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TPRPR
    returning
      value(RF_TPRPR) type ZVCXI_PCS_TPRPR
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_PCS_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CYLIN
    returning
      value(RS_CYLIN) type ZVCXI_PCS_S_CYLIN
    raising
      /VCXI/CX_CKX .
  methods GET_PAWID
    returning
      value(RS_PAWID) type ZVCXI_PCS_S_PAWID
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_PCS_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_CUPST
    returning
      value(RF_CUPST) type ZVCXI_PCS_CUPST
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_BPAID
    importing
      !IF_BPAID type ZVCXI_PCS_BPAID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_PCS_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CYLIN
    importing
      !IS_CYLIN type ZVCXI_PCS_S_CYLIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_PCS_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAWID
    importing
      !IS_PAWID type ZVCXI_PCS_S_PAWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CUPST
    importing
      !IF_CUPST type ZVCXI_PCS_CUPST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TPRPR
    importing
      !IF_TPRPR type ZVCXI_PCS_TPRPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CUPST_CHANGED type /VCXI/VKSC_IEVNT value 'CUPST_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CYLIN_CHANGED type /VCXI/VKSC_IEVNT value 'CYLIN_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TPRPR_CHANGED type /VCXI/VKSC_IEVNT value 'TPRPR_CHANGED'. "#EC NOTEXT
  data R_CUST_PRPRP type ref to ZCL_VCXI_PCSS_CUST_PRPRP .
  constants C_IEVNT_O_PAWID_CHANGED type /VCXI/VKSC_IEVNT value 'PAWID_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT

  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_MS_PRPRP definition
class ZCL_VCXI_PCSS_PR_MS_PRPRP implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_W.

endmethod.
method DO_FREE.

  ME->R_GATE->DO_FREE( ).

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_BPAID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).
  move LS_PARAM-ATWRT to RF_BPAID.

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_CUPST.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUPST ).
  move LS_PARAM-ATFLV to RF_CUPST.

endmethod.
method GET_CYLIN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CYLIN ).
  move LS_PARAM-ATFLV to RS_CYLIN-CYLIN.
  move LS_PARAM-UNIT  to RS_CYLIN-CYLIN_UOM.

endmethod.
method GET_NOCOL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOL ).
  move LS_PARAM-ATFLV to RF_NOCOL.

endmethod.
method GET_PAWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAWID ).
  move LS_PARAM-ATFLV to RS_PAWID-PAWID.
  move LS_PARAM-UNIT  to RS_PAWID-PAWID_UOM.

endmethod.
method GET_STATUS.

  data: LF_TPRPR type ZVCXI_PCS_TPRPR.
  data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
        LS_BAWGP type ZVCXI_PCS_S_BAWGP,
        LS_CALIP type ZVCXI_P0SS_S_CALIP,
        LS_CYLIN type ZVCXI_PCS_S_CYLIN.

  RF_ELMST = SUPER->GET_STATUS( ).

*** ----------------------------------------------------------------
*** Check Caliper is maintained
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** ----------------------------------------------------------------
*** Check Basis Weight is maintained
  LS_BAWGT = ME->GET_BAWGT( ).
  if LS_BAWGT-BAWGT is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** ----------------------------------------------------------------
*** Check Basis Weight Per is maintained
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGP-BAWGP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** ----------------------------------------------------------------
*** Check Paper ID is maintained
  if ME->GET_BPAID( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** ----------------------------------------------------------------
*** Check Preprint Type is maintained
  LF_TPRPR = ME->GET_TPRPR( ).
  if LF_TPRPR is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** ----------------------------------------------------------------
*** Check Cylinder based values if needed
  if ZCL_VCXI_PCSS_CUST_BOARD=>IS_TPRPR_CYLBA( IF_TPRPR = LF_TPRPR ) eq ABAP_TRUE.

*** ----------------------------------------------------------------
*** Check Cylinder is maintained
    LS_CYLIN = ME->GET_CYLIN( ).
    if LS_CYLIN-CYLIN is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** ----------------------------------------------------------------
*** Check Total ups on Cylinder is maintained
    if ME->GET_CUPST( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endif.

endmethod.
method GET_STATUS_MSG.

  data: LF_TPRPR type ZVCXI_PCS_TPRPR.
  data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
        LS_BAWGP type ZVCXI_PCS_S_BAWGP,
        LS_CALIP type ZVCXI_P0SS_S_CALIP,
        LS_CYLIN type ZVCXI_PCS_S_CYLIN.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** ----------------------------------------------------------------
*** Check Caliper is maintained
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
*** Caliper is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '351' ).
  else.
*** Caliper is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '352' ).
  endif.

*** ----------------------------------------------------------------
*** Check Basis Weight is maintained
  LS_BAWGT = ME->GET_BAWGT( ).
  if LS_BAWGT-BAWGT is not initial.
*** Basis Weight is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '353' ).

  else.
***  Basis Weight is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '354' ).
  endif.

*** ----------------------------------------------------------------
*** Check Basis Weight Per is maintained
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGP-BAWGP is not initial.
*** Basis Weight Per is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '355' ).

  else.
*** Basis Weight Per is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '356' ).
  endif.

*** ----------------------------------------------------------------
*** Check Paper ID is maintained
  if ME->GET_BPAID( ) is not initial.
*** Paper ID is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '357' ).
  else.
*** Paper ID is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '358' ).
  endif.

*** ----------------------------------------------------------------
*** Check Preprint Type is maintained
  LF_TPRPR = ME->GET_TPRPR( ).
  if LF_TPRPR is not initial.
*** Preprint Type is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '359' ).
  else.

*** Preprint Type is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '360' ).
  endif.

*** ----------------------------------------------------------------
*** Check Cylinder based values if needed
  if ZCL_VCXI_PCSS_CUST_BOARD=>IS_TPRPR_CYLBA( IF_TPRPR = LF_TPRPR ) eq ABAP_TRUE.

*** ----------------------------------------------------------------
*** Check Cylinder is maintained
    LS_CYLIN = ME->GET_CYLIN( ).
    if LS_CYLIN-CYLIN is not initial.
***   Cylinder is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '361' ).
    else.
***   Cylinder is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '362' ).
    endif.

*** ----------------------------------------------------------------
*** Check Total ups on Cylinder is maintained
    if ME->GET_CUPST( ) is not initial.
***   Total Ups on Cylinder is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '363' ).
    else.
***   Total Ups on Cylinder is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '364' ).
    endif.

  endif.

endmethod.
method GET_TPRPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPRPR ).
  move LS_PARAM-ATWRT to RF_TPRPR.

endmethod.
method GET_TPRPR_DESCR.

  data:      LF_TPRPR   type                   ZVCXI_PCS_TPRPR.

  LF_TPRPR = ME->GET_TPRPR( ).

*** Return Description of Preprint Type
  RF_TPRPR_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_TPRPR_DESCR( IF_TPRPR = LF_TPRPR ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

  if ME->R_CUST_PRPRP          is bound    and
     ME->R_CUST_PRPRP->F_MATNR eq LF_MATNR and
     ME->R_CUST_PRPRP->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_PRPRP.

*** Load the Customizing
  ME->R_CUST_PRPRP = ZCL_VCXI_PCSS_CUST_PRPRP=>GET_INSTANCE_PRPRP( IF_MATNR = LF_MATNR
                                                                   IF_WERKS = LF_WERKS
                                                                   IF_DATE  = SY-DATUM ).


*** Set Values only for Real Preprint Papers
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_CALIP( IS_CALIP = ME->R_CUST_PRPRP->S_CALIP ).
    ME->SET_BAWGT( IS_BAWGT = ME->R_CUST_PRPRP->S_BAWGT ).
    ME->SET_BAWGP( IS_BAWGP = ME->R_CUST_PRPRP->S_BAWGP ).
    ME->SET_TPRPR( IF_TPRPR = ME->R_CUST_PRPRP->F_TPRPR ).
    ME->SET_CYLIN( IS_CYLIN = ME->R_CUST_PRPRP->S_CYLIN ).
    ME->SET_CUPST( IF_CUPST = ME->R_CUST_PRPRP->F_CUPST ).
    ME->SET_NOCOL( IF_NOCOL = ME->R_CUST_PRPRP->F_NOCOL ).
  endif.

*** Set always the Paper Width
  ME->SET_PAWID( IS_PAWID = ME->R_CUST_PRPRP->S_PAWID ).

  move ME->R_CUST_PRPRP to ME->R_CUST_MATNR.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BPAID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPAID ).

  move IF_BPAID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_CUPST.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUPST ).
  if IF_CUPST is not initial.
    move IF_CUPST to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.
  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CUPST_CHANGED ).
  endif.

endmethod.
method SET_CYLIN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CYLIN ).

  move IS_CYLIN-CYLIN                      to LS_PARAM-ATFLV.
  move IS_CYLIN-CYLIN_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CYLIN_CHANGED ).
  endif.

endmethod.
method SET_NOCOL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOL ).
  if IF_NOCOL is not initial.
    move IF_NOCOL to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATFLV,
           LS_PARAM-SETBY.
  endif.
   ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PAWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAWID ).

  move IS_PAWID-PAWID      to LS_PARAM-ATFLV.
  move IS_PAWID-PAWID_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAWID_CHANGED ).
  endif.

endmethod.
method SET_TPRPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPRPR ).

  if IF_TPRPR is not initial.
    move IF_TPRPR     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.
  else.
    clear: LS_PARAM-ATWRT, LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TPRPR_CHANGED ).
  endif.

endmethod.
