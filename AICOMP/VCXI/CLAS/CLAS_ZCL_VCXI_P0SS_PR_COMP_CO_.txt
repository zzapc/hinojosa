
class ZCL_VCXI_P0SS_PR_COMP_CO definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_PRODDIM .

  aliases C_IEVNT_O_PCALI_CHANGED
    for ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_PCALI_CHANGED .
  aliases C_IEVNT_O_SHTP_CHANGED
    for ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_SHTP_CHANGED .
  aliases C_IPRVT_P0_PRODDIM
    for ZIF_VCXI_P0SS_PRODDIM~C_IPRVT_P0_PRODDIM .
  aliases C_PARID_PCALI
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_PCALI .
  aliases C_PARID_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_SHTPL .
  aliases C_PARID_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_SHTPW .
  aliases GET_PCALI
    for ZIF_VCXI_P0SS_PRODDIM~GET_PCALI .
  aliases GET_PCDIM
    for ZIF_VCXI_P0SS_PRODDIM~GET_PCDIM .
  aliases GET_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~GET_SHTPL .
  aliases GET_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~GET_SHTPW .
  aliases SET_PCALI
    for ZIF_VCXI_P0SS_PRODDIM~SET_PCALI .
  aliases SET_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~SET_SHTPL .
  aliases SET_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~SET_SHTPW .

  constants C_IPRVT_P0_COMP_CO type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_COMP_CO'. "#EC NOTEXT
  constants C_PARID_DIKEY type /VCXI/VKS_PARID value 'ZVCXI_P0_DIKEY'. "#EC NOTEXT
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_P0_NOUPS'. "#EC NOTEXT

  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_COMPN
    returning
      value(RF_COMPN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_DIKEY
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    returning
      value(RF_NOUPS) type ZVCXI_P0SS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DIKEY
    importing
      !IS_DIKEY type ZVCXI_P0SS_S_DIKEY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_P0SS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BAWGT type /VCXI/VKSC_IEVNT value 'INIT_BAWGT'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_CALIP type /VCXI/VKSC_IEVNT value 'INIT_CALIP'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_DIKEY_CHANGED type /VCXI/VKSC_IEVNT value 'DIKEY_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED'. "#EC NOTEXT
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP'. "#EC NOTEXT
  data R_CUST_P0_SHTPR type ref to ZCL_VCXI_P0SS_CUST_SHTPR .
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED'. "#EC NOTEXT

  methods SET_PRINT_BY_CUST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIKEY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CALIP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BAWGT
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_P0S_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_P0S_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SP_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
private section.

  data C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGP_A'. "#EC NOTEXT .
  data C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGT'. "#EC NOTEXT .
endclass. "ZCL_VCXI_P0SS_PR_COMP_CO definition
class ZCL_VCXI_P0SS_PR_COMP_CO implementation.
method CHECK_DIKEY.

*** 0 => Distribution Key is maintained
*** 1 => Distribution Key is not maintained

  if ME->GET_DIKEY( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method CHECK_MATNR.

*** Check Material Number is maintained
  if ME->GET_MATNR( ) is initial.
    move 1 to RF_RESULT.
    exit.
  endif.

*** Check Material Instance was created
  if ME->R_CUST_P0_SHTPR is not bound.
    move 2 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid
  if ME->R_CUST_P0_SHTPR->F_CHECK_MATNR ne ABAP_TRUE.
    move 3 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid in Plant
  if ME->R_CUST_P0_SHTPR->F_CHECK_MAT_MARC ne ABAP_TRUE.
    move 4 to RF_RESULT.
    exit.
  endif.

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_COMPN.

  data:          LT_PRVDR             type        /VCXI/VKSR_TT_GATE.
  data:          LR_PRVDR             type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_SE        type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

*** Get Gate of Specification SE
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SPEC_SE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SPEC_SE.
  endtry.

  check LR_PR_SPEC_SE is bound.
  move LR_PR_SPEC_SE->GET_COMPN( IR_GATE = ME->R_GATE ) to RF_COMPN.

endmethod.
method GET_DESCR.

  data: LF_MATNR type MATNR,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_MATNR = ME->GET_MATNR( ).

  if LF_MATNR is not initial.
*** Convert Material Number to Output
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_MATNR
      importing
        OUTPUT = LF_MATNR.
*** Get Material Description
    LF_DESCR = ME->GET_MATNR_DESCR( ).

    concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_DIKEY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).
  move LS_PARAM-ATFLV to RS_DIKEY-DIKEY.
  move LS_PARAM-UNIT  to RS_DIKEY-DIKEY_UOM.

endmethod.
method GET_MATNR.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_MATNR.

endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_NOUPS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
  move LS_PARAM-ATFLV to RF_NOUPS.

endmethod.
method GET_SP_PRINT.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***------------------------------------------------------------------------------------------------
*** Get all Prints
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        check LR_PR_SP_PRINT is bound and
              LR_PR_SP_PRINT->GET_PRSID( ) eq IF_PRSID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Print Side
    move RR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    LR_PR_SP_PRINT->SET_PRSID( IF_PRSID = IF_PRSID ).

  endif.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

  try.

***---------------------------------------------------------------------------------------------
***   Check Material
      if ME->CHECK_MATNR( ) eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Component Distribution Key
      case ME->CHECK_DIKEY( ).
        when 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endcase.

    catch /VCXI/CX_CKX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_E ).
  endtry.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  data: LF_WERKS type WERKS.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Material
  case ME->CHECK_MATNR( ).
    when 1.
***   Material Number is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '001' ).
    when 2.
***   Material Instance was not created.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '002' ).
    when 3.
***   Material Number is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '003' ).
    when 4.
***   Material Number is not valid in Plant.
      LF_WERKS = ME->GET_WERKS( ).
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '004'
                               IF_MSGV1 = LF_WERKS ).
    when others.
***   Material is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '005' ).
  endcase.

***-----------------------------------------------------------------------------------
*** Check Component Distribution Key
  case ME->CHECK_DIKEY( ).
    when 0.
***   Distribution Key is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '905' ).

    when 1.
***   Distribution Key is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '906' ).

  endcase.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_CUST_MATNR.
      ME->HANDLE_INIT_CUST_MATNR( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_CALIP.
      ME->HANDLE_INIT_CALIP( ).

    when C_IEVNT_I_INIT_BAWGT.
      ME->HANDLE_INIT_BAWGT( ).

  endcase.

endmethod.
method HANDLE_INIT_BAWGT.

  data:  LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
         LS_BAWGP           type        ZVCXI_P0S_S_BAWGP,
         LS_WDRYW           type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA           type        ZVCXI_P0SS_S_WDRYA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Set Default Area
  move 1000 to LS_BAWGP-BAWGP.
  move 'M2' to LS_BAWGP-BAWGP_UOM.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        check LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_WEIGHT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_WEIGHT is bound.

    clear: LS_WDRYW, LS_WDRYA.
    LR_WEIGHT->GET_WDRYW( importing ES_WDRYW = LS_WDRYW
                                    ES_WDRYA = LS_WDRYA ).

    check LS_WDRYW-WDRYW is not initial.

*** Add Weights per Area
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BAWGP-BAWGP_UOM
                                                       IF_UOM_IN    = LS_WDRYA-WDRYA_UOM
                                                       IF_VALUE_IN  = LS_WDRYA-WDRYA
                                             importing EF_VALUE_OUT = LS_WDRYA-WDRYA
                                                       EF_UOM_OUT   = LS_WDRYA-WDRYA_UOM ).


    if LS_BAWGT-BAWGT is not initial.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BAWGT-BAWGT_UOM
                                                         IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                         IF_VALUE_IN  = LS_WDRYW-WDRYW
                                               importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                         EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

      LS_BAWGT-BAWGT = LS_BAWGT-BAWGT + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * LS_BAWGP-BAWGP ).
    else.
      LS_BAWGT-BAWGT     = ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * LS_BAWGP-BAWGP.
      LS_BAWGT-BAWGT_UOM = LS_WDRYW-WDRYW_UOM.
    endif.

  endloop.

***------------------------------------------------------------------------------------------------
*** Set Base Weight and Base Weight Per
  ME->SET_BAWGT( IS_BAWGT = LS_BAWGT ).
  ME->SET_BAWGP( IS_BAWGP = LS_BAWGP ).

endmethod.
method HANDLE_INIT_CALIP.

  data:  LS_CALIP           type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC_SE.
  endtry.

  check LR_PR_SPEC_SE is bound.

*** Get Caliper
  LS_CALIP = LR_PR_SPEC_SE->GET_CALIP( IF_POOTI = '*' ).
  ME->SET_CALIP( IS_CALIP = LS_CALIP ).

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR           type        MATNR,
         LF_WERKS           type        WERKS_D.
  data:  LS_SHTPL           type        ZVCXI_P0SS_S_SHTPL,
         LS_SHTPW           type        ZVCXI_P0SS_S_SHTPW.

***--------------------------------------------------------------------------------------
  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

*** Only load Customizing with insert Materialnumber
  check LF_MATNR is not initial and
        LF_WERKS is not initial.

  if ME->R_CUST_P0_SHTPR          is bound    and
     ME->R_CUST_P0_SHTPR->F_MATNR eq LF_MATNR and
     ME->R_CUST_P0_SHTPR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear ME->R_CUST_P0_SHTPR.

*** Catch Error while Material Customizing Instanziation
  try.
***   Load the Customizing
      ME->R_CUST_P0_SHTPR = ZCL_VCXI_P0SS_CUST_SHTPR=>GET_INSTANCE_P0_SHTPR( IF_MATNR = LF_MATNR
                                                                             IF_WERKS = LF_WERKS
                                                                             IF_DATE  = SY-DATUM ).

    catch /VCXI/CX_CKX.
***   It is not needed to handle Exception
      exit.
  endtry.

***--------------------------------------------------------------------------------------
*** Set Sheet Dimensions
  if ME->R_CUST_P0_SHTPR is bound.
    move ME->R_CUST_P0_SHTPR->S_SHTLE-SHTLE     to LS_SHTPL-SHTPL.
    move ME->R_CUST_P0_SHTPR->S_SHTLE-SHTLE_UOM to LS_SHTPL-SHTPL_UOM.
    move ME->R_CUST_P0_SHTPR->S_SHTWI-SHTWI     to LS_SHTPW-SHTPW.
    move ME->R_CUST_P0_SHTPR->S_SHTWI-SHTWI_UOM to LS_SHTPW-SHTPW_UOM.
  endif.
  ME->SET_SHTPL( IS_SHTPL = LS_SHTPL ).
  ME->SET_SHTPW( IS_SHTPW = LS_SHTPW ).

*** Set Printing Info
  ME->SET_PRINT_BY_CUST( ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCALI_CHANGED ).
  endif.

endmethod.
method SET_DIKEY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).

  move IS_DIKEY-DIKEY     to LS_PARAM-ATFLV.
  move IS_DIKEY-DIKEY_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIKEY_CHANGED ).
  endif.

endmethod.
method SET_MATNR.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_MATNR to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
  endif.

endmethod.
method SET_NOUPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

  move IF_NOUPS           to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
  endif.

endmethod.
method SET_PRINT_BY_CUST.

  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***--------------------------------------------------------------------------------------
*** Outside Print
  if ME->R_CUST_P0_SHTPR is bound and
     ME->R_CUST_P0_SHTPR->F_FLPRO eq ABAP_TRUE.
*** Get Instance of Print Node Outside
    LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                                IF_CREATE = ABAP_TRUE ).
    if LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SP_PRINT.
      endtry.
      if LR_PR_SP_PRINT is bound.
***     Set Print Type & Number of Colors
        LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = ME->R_CUST_P0_SHTPR->F_PRTYO ).
        LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = ME->R_CUST_P0_SHTPR->F_NOCOO ).
***     Load Printing Details
        LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_SHTPR ).
      endif.
    endif.
  else.
    LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                                IF_CREATE = ABAP_FALSE ).
    if LR_GATE is bound.
      LR_GATE->DO_FREE( ).
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Inside Print
  if ME->R_CUST_P0_SHTPR is bound and
     ME->R_CUST_P0_SHTPR->F_FLPRI eq ABAP_TRUE.
*** Get Instance of Print Node Inside
    LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                                IF_CREATE = ABAP_TRUE ).
    if LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SP_PRINT.
      endtry.
      if LR_PR_SP_PRINT is bound.
***     Set Print Type & Number of Colors
        LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = ME->R_CUST_P0_SHTPR->F_PRTYI ).
        LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = ME->R_CUST_P0_SHTPR->F_NOCOI ).
***     Load Printing Details
        LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_SHTPR ).
      endif.
    endif.
  else.
    LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                                IF_CREATE = ABAP_FALSE ).
    if LR_GATE is bound.
      LR_GATE->DO_FREE( ).
    endif.
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLHE.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLLE.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLWI.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOVRF.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_PCALI.

  data: LS_CALIP type ZVCXI_P0SS_S_CALIP.

  LS_CALIP = ME->GET_CALIP( ).

  RS_PCALI-PCALI     = LS_CALIP-CALIP.
  RS_PCALI-PCALI_UOM = LS_CALIP-CALIP_UOM.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_PCDIM.

  data:  LS_SHTPL          type        ZVCXI_P0SS_S_SHTPL,
         LS_SHTPW          type        ZVCXI_P0SS_S_SHTPW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.

  case IF_POOTI.
***------------------------------------------------------------------------------------------------
*** Product Dimension
    when ZIF_VCXI_P0SS_PRODDIM~C_POOTI_PRODUCT.
***   Product Sheet Length
      LS_SHTPL = ME->GET_SHTPL( ).
      move LS_SHTPL-SHTPL             to RS_PCDIM-PCLEN.
      move LS_SHTPL-SHTPL_UOM         to RS_PCDIM-PCLEN_UOM.

***   Product Sheet Width
      LS_SHTPW = ME->GET_SHTPW( ).
      move LS_SHTPW-SHTPW             to RS_PCDIM-PCWID.
      move LS_SHTPW-SHTPW_UOM         to RS_PCDIM-PCWID_UOM.

***   Caliper
      LS_CALIP = ME->GET_CALIP( ).
      move LS_CALIP-CALIP             to RS_PCDIM-PCHEI.
      move LS_CALIP-CALIP_UOM         to RS_PCDIM-PCHEI_UOM.

***   Number of Ups
      move 1                          to RS_PCDIM-PCUPS.

***   Number of Outs
      move ME->GET_NOUPS( )           to RS_PCDIM-NOOUT.

***   PC Direction
      move 'A'                        to RS_PCDIM-PCDIR.

***------------------------------------------------------------------------------------------------
*** Folded Dimension
    when ZIF_VCXI_P0SS_PRODDIM~C_POOTI_FOLDED.
***   Not available!

  endcase.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_SHTPL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).
  move LS_PARAM-ATFLV to RS_SHTPL-SHTPL.
  move LS_PARAM-UNIT  to RS_SHTPL-SHTPL_UOM.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_SHTPW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).
  move LS_PARAM-ATFLV to RS_SHTPW-SHTPW.
  move LS_PARAM-UNIT  to RS_SHTPW-SHTPW_UOM.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLHE.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLLE.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLWI.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOVRF.

*** Not needed.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_PCALI.

  data: LS_CALIP type ZVCXI_P0SS_S_CALIP.

  move IS_PCALI-PCALI     to LS_CALIP-CALIP.
  move IS_PCALI-PCALI_UOM to LS_CALIP-CALIP_UOM.

  ME->SET_CALIP( IS_CALIP = LS_CALIP
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_SHTPL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).

  move IS_SHTPL-SHTPL     to LS_PARAM-ATFLV.
  move IS_SHTPL-SHTPL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_SHTPW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).

  move IS_SHTPW-SHTPW     to LS_PARAM-ATFLV.
  move IS_SHTPW-SHTPW_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTP_CHANGED ).
  endif.

endmethod.
