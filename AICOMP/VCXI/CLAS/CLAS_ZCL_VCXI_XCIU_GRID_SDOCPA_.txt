
class ZCL_VCXI_XCIU_GRID_SDOCPA definition
  public
  create public .

public section.

  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CHECK_DATA_CHANGED
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UI_IDAT_SDOC type ref to ZCL_VCXI_XCIU_UI_IDAT_SDOC
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_ADD_SDOCPA type UI_FUNC value 'ADD_SDOCPA'. "#EC NOTEXT
  constants C_UC_DEL_SDOCPA type UI_FUNC value 'DEL_SDOCPA'. "#EC NOTEXT
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_UI_IDAT_SDOC type ref to ZCL_VCXI_XCIU_UI_IDAT_SDOC .
  data T_SDOCPA_GRID type ZVCXI_XCIU_TT_SDOCPA_GRID .

  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD_SDOCPA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_SDOCPA
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_SDOCPA_GRID
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCIU_GRID_SDOCPA definition
class ZCL_VCXI_XCIU_GRID_SDOCPA implementation.
method CHECK_DATA_CHANGED.

  if ME->R_GRID is bound.
*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method CONSTRUCTOR.

  move IR_UI_IDAT_SDOC   to ME->R_UI_IDAT_SDOC.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Initialize Container
  ME->INIT_CONTAINER( ).

*** Initialize Grid
  ME->INIT_GRID( ).

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.
*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED       type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

*** Get Lock Status
  move ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Get Field Catalog
  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCIU_S_SDOCPA_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'PARVW'.
        move ABAP_TRUE to <S_FCAT>-KEY.

      when 'KUNNR'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

    endcase.
  endloop.

endmethod.
method GET_SELECTED_ROWS.

  data:          LS_CELL              type        LVC_S_CELL,
                 LS_ROW               type        LVC_S_ROW.
  data:          LT_CELL              type        LVC_T_CELL,
                 LT_ROW               type        LVC_T_ROW.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  if lines( LT_CELL ) gt 0.

    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to ET_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
        move LS_CELL-ROW_ID to ES_LAST_ROW.
      endif.
    endloop.

  endif.

*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if lines( LT_ROW ) gt 0.

    append lines of LT_ROW to ET_ROW.

    loop at LT_ROW into LS_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
        move LS_ROW to ES_LAST_ROW.
      endif.
    endloop.

  endif.

  sort ET_ROW by INDEX.
  delete adjacent duplicates from ET_ROW.

endmethod.
method HANDLE_DATA_CHANGED.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:  LS_SDOCPA_GRID  type ZVCXI_XCIU_S_SDOCPA_GRID.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
      check E_MODIFIED eq ABAP_TRUE.

      loop at ME->T_SDOCPA_GRID into LS_SDOCPA_GRID.
        ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->SET_SDOCPA( IF_PARVW = LS_SDOCPA_GRID-PARVW
                                                     IF_KUNNR = LS_SDOCPA_GRID-KUNNR ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:          LF_DISABLED     type        ABAP_BOOL.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
***   Get Lock Status
      if ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        move ABAP_FALSE to LF_DISABLED.
      else.
        move ABAP_TRUE  to LF_DISABLED.
      endif.

***   Add Buttons
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD_SDOCPA          to <S_TOOLBAR>-FUNCTION.
      move ICON_INSERT_ROW          to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL_SDOCPA          to <S_TOOLBAR>-FUNCTION.
      move ICON_DELETE_ROW          to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_SDOCPA.

  data:          LF_RETURN      type          ABAP_BOOL,
                 LF_EXIT        type          ABAP_BOOL,
                 LF_PARVW       type          PARVW,
                 LF_KUNNR       type          KUNNR.
  data:          LT_SVAL        type table of SVAL.
  field-symbols: <S_SVAL>       type          SVAL.

***------------------------------------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCIU_S_SDOCPA_GRID'.
  <S_SVAL>-FIELDNAME = 'PARVW'.
  <S_SVAL>-FIELD_OBL = ABAP_TRUE.

  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCIU_S_SDOCPA_GRID'.
  <S_SVAL>-FIELDNAME = 'KUNNR'.

  do.
    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Partner'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_SVAL>.
      case <S_SVAL>-FIELDNAME.
        when 'PARVW'.
          move <S_SVAL>-VALUE to LF_PARVW.
        when 'KUNNR'.
          move <S_SVAL>-VALUE to LF_KUNNR.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LF_PARVW is not initial.

    exit.
  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Set Partner
  ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->SET_SDOCPA( IF_PARVW = LF_PARVW
                                               IF_KUNNR = LF_KUNNR ).

*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DEL_SDOCPA.

  data:  LS_SDOCPA_GRID type        ZVCXI_XCIU_S_SDOCPA_GRID,
         LS_ROW         type        LVC_S_ROW.
  data:  LT_ROW         type        LVC_T_ROW.

***----------------------------------------------------------------------------
*** Get selected row
  ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  check LT_ROW is not initial.

***----------------------------------------------------------------------------
*** Delete selected Rows
  loop at LT_ROW into LS_ROW.
    read table ME->T_SDOCPA_GRID into LS_SDOCPA_GRID index LS_ROW-INDEX.
    check SY-SUBRC eq 0.

*** Delete Partner
    ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->DELETE_SDOCPA( IF_PARVW = LS_SDOCPA_GRID-PARVW ).

  endloop.

***----------------------------------------------------------------------------
*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      case E_UCOMM.
        when C_UC_ADD_SDOCPA.
          ME->HANDLE_UC_ADD_SDOCPA( ).
        when C_UC_DEL_SDOCPA.
          ME->HANDLE_UC_DEL_SDOCPA( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0100CC_SDOCPA'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

  create object ME->R_GRID
    exporting
      I_PARENT          = ME->R_CONTAINER
      I_APPL_EVENTS     = ABAP_TRUE
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Enter as Event
  ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Handler for Toolbar
  set handler ME->HANDLE_TOOLBAR               for ME->R_GRID.
  set handler ME->HANDLE_UCOMM                 for ME->R_GRID.

*** Set Event Handler for Changes
  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

endmethod.
method INIT_SDOCPA_GRID.

  data:          LS_SDOCPA            type          ZVCXI_XCI_S_SDOCPA.
  field-symbols: <S_SDOCPA_GRID>      type          ZVCXI_XCIU_S_SDOCPA_GRID.

  free: ME->T_SDOCPA_GRID.

*** Fill Table
  loop at ME->R_UI_IDAT_SDOC->R_IDAT_SDOC->T_SDOCPA into LS_SDOCPA.
    append initial line to ME->T_SDOCPA_GRID assigning <S_SDOCPA_GRID>.
    move-corresponding LS_SDOCPA to <S_SDOCPA_GRID>.
  endloop.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type        LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS,
                 LT_FCAT              type        LVC_T_FCAT.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
*** Get Grid Data
  ME->INIT_SDOCPA_GRID( ).

***--------------------------------------------------------------------------------------
*** Field Catalog
  move ME->GET_FIELDCAT( )                to LT_FCAT.

*** Toolbar Exclusion
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL  to LT_TOOLBAR_EXCLUDING.

*** Layout
  move 'X'       to LS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'  to LS_LAYOUT-STYLEFNAME.

***--------------------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = ME->T_SDOCPA_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
