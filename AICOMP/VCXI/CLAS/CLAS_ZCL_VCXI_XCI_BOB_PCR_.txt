
class ZCL_VCXI_XCI_BOB_PCR definition
  public
  create public .

public section.

  data S_T685 type T685 read-only .
  data S_T685A type T685A read-only .
  data S_T685T type T685T read-only .

  class-methods SIMULATE_SALES_PRICE
    importing
      !IS_PISPR type PISPR
      !IF_AUART type AUART
    exporting
      !ET_SCALE type COND_SCALE_T
      !ET_KOMV type KOMV_T
    returning
      value(RS_PESPR) type PESPR
    raising
      /VCXI/CX_CKX .
  methods GET_ACCESS_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_KVEWE type KVEWE default 'A'
      !IF_KAPPL type KAPPL default 'V'
      !IF_KSCHL type KSCHL
    raising
      /VCXI/CX_CKX .
  class-methods GET_VAKEY
    importing
      !IF_KOTABNR type KOTABNR
      !IF_KVEWE type KVEWE
      !IS_KOMG type KOMG
    returning
      value(RF_VAKEY) type VAKEY_LONG
    raising
      /VCXI/CX_CKX .
  methods CREATE
    importing
      !IF_KOTABNR type KOTABNR
      !IS_KOMG type KOMG
      !IS_COND type ZVCXI_XCI_S_COND
      !IF_SCALETYPE type STFKZ optional
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
      !IT_CONDSCALE type ZVCXI_XCI_TT_CONDSCALE
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
protected section.

  class-methods CONV_KBETR_TO_BAPI
    importing
      !IF_KBETR type KBETR
      !IF_KONWA type KONWA
    returning
      value(RF_AMOUNT) type BAPICURR_D
    raising
      /VCXI/CX_CKX .
private section.

  class-data C_CCOND type NUMC3 .
endclass. "ZCL_VCXI_XCI_BOB_PCR definition
class ZCL_VCXI_XCI_BOB_PCR implementation.
  method CONSTRUCTOR.

    data: LF_SUBRC type I.

*** Load Interface Work Areas for Condition Mainenance to avoid issues regarding syncronization
    call function 'COND_MNT_LOAD'.

*** Read Condtion Type
    call function 'SD_COND_T685_SELECT'
      exporting
        CTS_ERROR = SPACE
        CTS_KAPPL = IF_KAPPL
        CTS_KSCHL = IF_KSCHL
        CTS_KVEWE = IF_KVEWE
      importing
        CTS_SUBRC = LF_SUBRC
        CTS_T685  = ME->S_T685
        CTS_T685A = ME->S_T685A
*       CTS_T685B =
        CTS_T685T = ME->S_T685T.

    if LF_SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'VK'
                                            IF_MSGNO = '040'
                                            IF_MSGV1 = IF_KSCHL ).
    endif.


* IF t685-obsolete EQ gc_obsolete-cr_not_mai
*   MESSAGE e396(VK)  WITH rv13a-kschl.


*** Select T681


*** function Modules: RV_CONDITION*

  endmethod.
  method CONV_KBETR_TO_BAPI.

*** Convert as SAP stores amounts of currencies w/o decimals differently (e.g. 400 HUF are stored as 4.00 HUF)
    call function 'CURRENCY_AMOUNT_SAP_TO_BAPI'
      exporting
        CURRENCY    = IF_KONWA
        SAP_AMOUNT  = conv BAPICURR_D( IF_KBETR )
      importing
        BAPI_AMOUNT = RF_AMOUNT.

  endmethod.
  method CREATE.

    data: LS_BAPICONDHD type BAPICONDHD,
          LS_BAPICONDIT type BAPICONDIT,
          LS_CONDSCALE  type ZVCXI_XCI_S_CONDSCALE.
    data: LT_BAPICONDCT  type standard table of BAPICONDCT,
          LT_BAPICONDHD  type standard table of BAPICONDHD,
          LT_BAPICONDIT  type standard table of BAPICONDIT,
          LT_BAPICONDQS  type standard table of BAPICONDQS,
          LT_BAPICONDVS  type standard table of BAPICONDVS,
          LT_BAPIKNUMHS  type standard table of BAPIKNUMHS,
          LT_MEM_INITIAL type standard table of CND_MEM_INITIAL,
          LT_BAPIRET2    type standard table of BAPIRET2.


***--------------------------------------------------------------------------------------
*** Prepare right condition number
    add 1 to C_CCOND.

***--------------------------------------------------------------------------------------
*** Prepare Condition Header Tables
    LS_BAPICONDHD = value #( TABLE_NO      = IF_KOTABNR
                             APPLICATIO    = ME->S_T685-KAPPL
                             COND_TYPE     = ME->S_T685-KSCHL
                             COND_USAGE    = ME->S_T685-KVEWE
*{   REPLACE        SBXK900074                                        1
*\                             VARKEY        = ZCL_VCXI_XCI_BOB_PCR=>GET_VAKEY( IF_KOTABNR = IF_KOTABNR
*\                                                                              IF_KVEWE   = ME->S_T685-KVEWE
*\                                                                              IS_KOMG    = IS_KOMG )
                             VARKEY_LONG   = ZCL_VCXI_XCI_BOB_PCR=>GET_VAKEY( IF_KOTABNR = IF_KOTABNR
                                                                              IF_KVEWE   = ME->S_T685-KVEWE
                                                                              IS_KOMG    = IS_KOMG )
*}   REPLACE
                             COND_NO       = '$000000' && C_CCOND
                             CREATED_BY    = SY-UNAME
                             CREAT_DATE    = SY-DATUM ).
    LS_BAPICONDHD = corresponding #( base ( LS_BAPICONDHD ) IS_COND ).

    append corresponding #( LS_BAPICONDHD ) to LT_BAPICONDCT.
    append corresponding #( LS_BAPICONDHD ) to LT_BAPICONDHD.


*** Prepare Condition Item
    LS_BAPICONDIT = corresponding #( LS_BAPICONDHD ).
    LS_BAPICONDIT = corresponding #( base ( LS_BAPICONDIT ) IS_COND ).
    LS_BAPICONDIT-COND_COUNT = '01'.
*{   REPLACE        SX2K900101                                        2
*\    LS_BAPICONDIT-SCALETYPE  = cond #( when IF_SCALETYPE is not initial then IF_SCALETYPE
    LS_BAPICONDIT-SCALETYPE  = cond #( when IF_SCALETYPE is supplied then IF_SCALETYPE
*}   REPLACE
                                       when ME->S_T685A-STFKZ eq SPACE then 'A'         "From-scale
                                                                       else ME->S_T685A-STFKZ ).
    if LS_BAPICONDIT-SCALETYPE is not initial.
      LS_BAPICONDIT-SCALEBASIN = ME->S_T685A-KZBZG.
    endif.
    LS_BAPICONDIT-CALCTYPCON = ME->S_T685A-KRECH.

    LS_BAPICONDIT-COND_VALUE = CONV_KBETR_TO_BAPI( IF_KBETR = value #( IT_CONDSCALE[ 1 ]-KBETR optional )   "Currency amount
                                                   IF_KONWA = LS_BAPICONDIT-CONDCURR ).
    append LS_BAPICONDIT to LT_BAPICONDIT.


*** Prepare Price Scales
    if LS_BAPICONDIT-SCALETYPE is not initial.
      loop at IT_CONDSCALE into LS_CONDSCALE.
***     Prepare Condition item table
        append value #( COND_NO    = LS_BAPICONDIT-COND_NO
                        COND_COUNT = LS_BAPICONDIT-COND_COUNT
                        LINE_NO    = SY-TABIX + 1  "because SAP considers Item as first Scale
                        SCALE_QTY  = LS_CONDSCALE-KSTBM
                        COND_UNIT  = LS_BAPICONDIT-UNITMEASUR
                        CURRENCY   = CONV_KBETR_TO_BAPI( IF_KBETR = LS_CONDSCALE-KBETR
                                                         IF_KONWA = LS_BAPICONDIT-CONDCURR )
                        CONDCURR   = LS_BAPICONDIT-CONDCURR
                      ) to LT_BAPICONDQS.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Save Condition record with BAPI
    call function 'BAPI_PRICES_CONDITIONS'
      tables
        TI_BAPICONDCT  = LT_BAPICONDCT
        TI_BAPICONDHD  = LT_BAPICONDHD
        TI_BAPICONDIT  = LT_BAPICONDIT
        TI_BAPICONDQS  = LT_BAPICONDQS
        TI_BAPICONDVS  = LT_BAPICONDVS
        TO_BAPIRET2    = ET_BAPIRET2
        TO_BAPIKNUMHS  = LT_BAPIKNUMHS
        TO_MEM_INITIAL = LT_MEM_INITIAL
      exceptions
        UPDATE_ERROR   = 1
        others         = 2.

***--------------------------------------------------------------------------------------
*** Perform Commit if reqested
    if IF_COMMIT eq ABAP_TRUE.
      if not LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
        call function 'BAPI_TRANSACTION_COMMIT'
          exporting
            WAIT = 'X'.
      else.
        call function 'BAPI_TRANSACTION_ROLLBACK'.
      endif.
    endif.

  endmethod.
  method GET_ACCESS_SEQUENCE.
  endmethod.
  method GET_VAKEY.

*** Load Interface Work Areas for Condition Mainenance to avoid issues regarding syncronization
    call function 'COND_MNT_LOAD'.

*** Fill VAKEY According to KOMG Structure
    call function 'SD_CONDITION_VAKEY_FILL'
      exporting
        P_KOTABNR = IF_KOTABNR
        P_KVEWE   = IF_KVEWE
        P_KOMG    = IS_KOMG
      importing
        P_VAKEY   = RF_VAKEY.

  endmethod.
  method SIMULATE_SALES_PRICE.

*** Use Import Structure
    data(LS_PISPR) = IS_PISPR.

***--------------------------------------------------------------------------------------
    if LS_PISPR-VKALS is initial or
       LS_PISPR-WAERK is initial.
***   Customer Classification for Pricing Procedure Determination
      select single KUNNR, VKORG, VTWEG, SPART, WAERS, KALKS
             into @data(LS_KNVV)
             from KNVV
            where KUNNR eq @LS_PISPR-KUNNR
             and  VKORG eq @LS_PISPR-VKORG
             and  VTWEG eq @LS_PISPR-VTWEG
             and  SPART eq @LS_PISPR-SPART.
      check SY-SUBRC eq 0.

***   Default Currency
      if LS_PISPR-WAERK is initial.
        LS_PISPR-WAERK = LS_KNVV-WAERS.
      endif.

      if LS_PISPR-VKALS is initial.
***     Document Classification for Pricing Procedure Determination
        select single KALVG
               into @data(LF_KALVG)
               from TVAK
              where AUART = @IF_AUART.
        check SY-SUBRC eq 0.

***     Pricing Procedure in Pricing
        if LS_KNVV-KALKS is not initial and
           LF_KALVG      is not initial.
          select single KALSM
                 from T683V
                 into @LS_PISPR-VKALS
                where VKORG = @LS_KNVV-VKORG
                 and  VTWEG = @LS_KNVV-VTWEG
                 and  SPART = @LS_KNVV-SPART
                 and  KALVG = @LF_KALVG
                 and  KALKS = @LS_KNVV-KALKS.
          check SY-SUBRC eq 0.
        endif.
      endif.
    endif.

*** Default Pricing Date
    if LS_PISPR-PRSDT is initial.
      LS_PISPR-PRSDT = SY-DATUM.
    endif.

*** Determine requested Information
    LS_PISPR-TABKZ = cond #( when ET_KOMV is requested then ABAP_TRUE
                                                       else ABAP_FALSE ).
    LS_PISPR-SCALR = cond #( when ET_SCALE is requested then ABAP_TRUE
                                                        else ABAP_FALSE ).

***--------------------------------------------------------------------------------------
*** Simulate Pricing
    call function 'SALES_PRICE_READ'
      exporting
        PI_I_SPR                       = LS_PISPR
      importing
        PE_I_SPR                       = RS_PESPR
      tables
        PE_T_KOMV                      = ET_KOMV
        PE_T_SCALE                     = ET_SCALE
      exceptions
        MATERIAL_NOT_FOUND             = 1
        NO_AUTHORITY                   = 2
        NO_BUKRS_FOUND                 = 3
        NO_SALES_PRICE_FOUND           = 4
        ORG_STRUCTURE_NOT_COMPLETED    = 5
        PLANT_NOT_FOUND                = 6
        VKORG_NOT_FOUND                = 7
        CALCULATION_SCHEME_NOT_CORRECT = 8
        PRICING_ERROR                  = 9
        OTHER_ERROR                    = 10.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
