
class ZCL_VCXI_PXSS_CUST_LGLUE definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_TLGLC type ZVCXI_PXS_TLGLC read-only .
  data S_APWGT type ZVCXI_PXS_S_APWGT read-only .
  data S_SLDCO type ZVCXI_PXS_S_SLDCO read-only .

  methods GET_CONSF
    importing
      !IF_TLGLC type ZVCXI_PXS_TLGLC
      !IF_LGLCD type ZVCXI_PXS_LGLCD
    returning
      value(RF_CONSF) type ZVCXI_P0SP_CONSF
    raising
      /VCXI/CX_CKX .
  class-methods FIND_MATNR
    importing
      !IF_TLGLC type ZVCXI_PXS_TLGLC
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    returning
      value(RF_MATNR) type MATNR
    exceptions
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_LGLUE
    importing
      !IF_TLGLC type ZVCXI_PXS_TLGLC optional
      !IF_MATNR type MATNR optional
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PXSS_CUST_LGLUE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_SLDCO type /VCXI/CKXC_MAPID value 'SLDCO' ##NO_TEXT.
  constants C_SETID_LGLUE type /VCXI/CKXC_SETID value 'ZVCXI_PXS_LGLUE' ##NO_TEXT.

  methods GET_APWGT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
      !IF_TLGLC type ZVCXI_PXS_TLGLC
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_CUST_LGLUE definition
class ZCL_VCXI_PXSS_CUST_LGLUE implementation.
  method CONSTRUCTOR.

    try.
        SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                            IF_WERKS = IF_WERKS
                            IF_DATE  = IF_DATE ).

        ME->F_TLGLC = IF_TLGLC.

***     Load Data by Cross Classification Mapping
        ME->LOAD_BY_CCM( ).

        ME->GET_APWGT( ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method FIND_MATNR.

*** Plant-specific Setting
    select MATNR
           into RF_MATNR
           from ZVCXI_PXS_TD310
          up to 1 rows
          where TLGLC eq IF_TLGLC
           and  WERKS eq IF_WERKS
          order by VALFR descending.
    endselect.

    if RF_MATNR is not initial.
      return.
    endif.

*** Plant-independent Setting
    select MATNR
           into RF_MATNR
           from ZVCXI_PXS_TD310
          up to 1 rows
          where TLGLC eq IF_TLGLC
           and  WERKS eq SPACE
          order by VALFR descending.
    endselect.

  endmethod.
  method GET_APWGT.

*** Plant-specific Application Weight
    select APWGT APWGT_UOM
           into ME->S_APWGT
           from ZVCXI_PXS_TD310
           up to 1 rows
          where TLGLC eq ME->F_TLGLC
           and  WERKS eq ME->F_WERKS
           and  VALFR le ME->F_DATE
          order by VALFR descending.
    endselect.

    if ME->S_APWGT is not initial.
      return.
    endif.

*** Plant-independent Application Weight
    select APWGT APWGT_UOM
           into ME->S_APWGT
           from ZVCXI_PXS_TD310
           up to 1 rows
          where TLGLC eq ME->F_TLGLC
           and  WERKS eq SPACE
           and  VALFR le ME->F_DATE
          order by VALFR descending.
    endselect.

  endmethod.
  method GET_CONSF.

*** Ensure Type is defined
    check IF_TLGLC is not initial.

*** Plant based Lamination Glue Consumption Factor
    select CONSF
           into RF_CONSF
           from ZVCXI_PXS_TD320
           up to 1 rows
          where TLGLC eq IF_TLGLC
           and  WERKS eq ME->F_WERKS
           and  LGLCD eq IF_LGLCD
           and  VALFR le ME->F_DATE
          order by VALFR descending.
    endselect.
    if RF_CONSF is not initial.
      return.
    endif.

*** Plant independent Lamination Glue Consumption Factor
    select CONSF
           into RF_CONSF
           from ZVCXI_PXS_TD320
           up to 1 rows
          where TLGLC eq IF_TLGLC
           and  WERKS eq SPACE
           and  LGLCD eq IF_LGLCD
           and  VALFR le ME->F_DATE
          order by VALFR descending.
    endselect.
    if RF_CONSF is not initial.
      return.
    endif.

*** Default Factor
    RF_CONSF = 1.

  endmethod.
  method GET_INSTANCE_LGLUE.

    data: LF_MATNR type MATNR.
    data: LS_INSTANCE type YS_INSTANCE.


*** Identify Material Number
    if IF_MATNR is initial.
      LF_MATNR = ZCL_VCXI_PXSS_CUST_LGLUE=>FIND_MATNR( IF_TLGLC = IF_TLGLC
                                                       IF_WERKS = IF_WERKS
                                                       IF_DATE  = IF_DATE ).
    else.
      LF_MATNR = IF_MATNR.
    endif.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    loop at ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                               where MATNR = LF_MATNR
                                                and  WERKS = IF_WERKS
                                                and  DATE  = IF_DATE.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
      if RR_INSTANCE is bound.
        if RR_INSTANCE->F_TLGLC eq IF_TLGLC.
          exit.
        else.
          clear RR_INSTANCE.
        endif.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
          create object RR_INSTANCE
            exporting
              IF_MATNR = LF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE
              IF_TLGLC = IF_TLGLC.

        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC,
          LS_MAPVN type  /VCXI/CKXC_S_MAPVN.
    data: LT_SETVA type  /VCXI/CKXC_TT_SETVA.

*** Get Lamination Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_LGLUE
                                             IF_OBJNUM = LF_OBJNUM
                                             IF_MCTXT  = 'SVC' ).

    loop at LT_SETVA into LS_SETVA.
      clear: LS_MAPVC,
             LS_MAPVN.

      case LS_SETVA-MAPID.
***     Solid Content
        when C_MAPID_SLDCO.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_SLDCO-SLDCO.
            move LS_MAPVN-ATFLV_UOM to ME->S_SLDCO-SLDCO_UOM.
          endif.

      endcase.
    endloop.

  endmethod.
