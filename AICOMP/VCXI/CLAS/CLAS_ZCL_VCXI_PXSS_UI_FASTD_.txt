
class ZCL_VCXI_PXSS_UI_FASTD definition
  public
  inheriting from ZCL_VCXI_XCS_UI_TAB
  create public .

public section.
  type-pools CNTB .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_XCS_TABPT default '0100S_FD_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods SET_GATE_OUT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SBH_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    raising
      /VCXI/CX_CKX .

  methods /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND
    redefinition .
  methods /VCXI/IF_VKSU_UIFW~REGISTER_UI
    redefinition .
  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_PBO
    redefinition .
  methods /VCXI/IF_VKSU_UIFW~UNREGISTER_UI
    redefinition .
protected section.

  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_BOOSTER type UI_FUNC value 'BOOSTER' ##NO_TEXT.
  constants C_FCODE_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  constants C_FCODE_MTS type UI_FUNC value 'MTS' ##NO_TEXT.
  constants C_FCODE_MULTIQTY type UI_FUNC value 'MULTIQTY' ##NO_TEXT.
  constants C_FCODE_RTESPV type UI_FUNC value 'RTESPV' ##NO_TEXT.
  constants C_FCODE_TINFO type UI_FUNC value 'TINFO' ##NO_TEXT.
  data F_APPL_EVENTS type ABAP_BOOL .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_PR_FASTD type ref to ZCL_VCXI_PXSS_PR_FASTD .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  data T_BL_FDMDL type ZVCXI_PXSS_TT_BL_FDMDL .
  data R_UI_SBH type ref to ZCL_VCXI_PXSS_UI_SBH .

  methods OPEN_SBH
    raising
      /VCXI/CX_CKX .
  methods GET_BL_FDMDL_BY_FG
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_MENU_ADD
    returning
      value(RR_MENU) type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event DROPDOWN_CLICKED of CL_GUI_TOOLBAR
    importing
      !FCODE
      !POSX
      !POSY .
  methods HANDLE_TOOLBAR_FCODE
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods HANDLE_UC_MULTIQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BOOSTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_RTESPV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MTS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TINFO
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods IS_RTESPV_DISABLED
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_PRVDR_TAB
    redefinition .
  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_TAB_LIST
    redefinition .
  methods OPEN_SUBSCREEN
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_UI_FASTD definition
class ZCL_VCXI_PXSS_UI_FASTD implementation.
  method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

*** Sales BOM Header
    if ME->R_UI_SBH is bound.
      ME->R_UI_SBH->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
    endif.

*** Normal Tabs
    SUPER->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = CF_UCOMM ).

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

*** Normal Tabs
    SUPER->/VCXI/IF_VKSU_UIFW~REGISTER_UI( IR_UI = IR_UI ).

  endmethod.
  method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

*** Normal Tabs
    SUPER->/VCXI/IF_VKSU_UIFW~UNREGISTER_UI( IR_UI = IR_UI ).

  endmethod.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Sales BOM Header
    if ME->R_UI_SBH is bound.
      ME->R_UI_SBH->ACTIVATE( ).
    endif.

*** Bind UI to Dynpro
    call function 'ZVCXI_PXSS_UI_FASTD_BIND'
      exporting
        IR_UI_FASTD = ME
      importing
        ES_DYNP     = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Define if Application Events should be triggered
ENHANCEMENT-SECTION APPL_EVENT_ON_ACTIVATE SPOTS ZVCXI_PXSS_ES_UI_FASTD .
    ME->F_APPL_EVENTS = ABAP_TRUE.
end-enhancement-section.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_FASTD.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

***--------------------------------------------------------------------------------------
*** Sales BOM Provider is static so it can be created here
    ME->OPEN_SBH( ).

  endmethod.
  method DEACTIVATE.

*** Sales BOM Header
    if ME->R_UI_SBH is bound.
      ME->R_UI_SBH->DEACTIVATE( ).
    endif.

*** Call SUPER
    SUPER->DEACTIVATE( ).

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method DO_PBO.

    SUPER->DO_PBO( ).

    ME->INIT_CONTAINER( ).
    ME->INIT_TOOLBAR( ).

  endmethod.
  method GET_BL_FDMDL_BY_FG.

    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.


    loop at ME->T_BL_FDMDL into LR_BL_FDMDL where TABLE_LINE is bound.
      check LINE_EXISTS( LR_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = IR_GATE ] ).
      RR_BL_FDMDL = LR_BL_FDMDL.
      exit.
    endloop.

    if RR_BL_FDMDL is initial.
***   Internal Error
      raise exception type /VCXI/CX_CKX.
    endif.

  endmethod.
  method GET_MENU_ADD.

    data: LF_DISABLED type ABAP_BOOL.
    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF,
          LS_FDMV      type ZVCXI_PXSS_S_FDMV.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_MENU type ref to CL_CTMENU.


    check ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV is not initial.

*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG ).
    check LT_PRVDR_DEF is not initial.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Create DropDown Menu
    create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Multiple different Finished Goods
    if LINES( LT_PRVDR_DEF ) gt 1.
      sort LT_PRVDR_DEF by DESCR.
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***     Create Submenu
        create object LR_MENU.
        RR_MENU->ADD_SUBMENU( MENU = LR_MENU
                              TEXT = conv #( LS_PRVDR_DEF-DESCR ) ).

***     Add Function for all Variants
        loop at ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV into LS_FDMV
                                              where FDMDL eq LS_PRVDR_DEF-ID.
          LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_ADD && '@' && LS_FDMV-FDMDL && '@' && LS_FDMV-IFDMV
                                 TEXT  = conv #( LS_FDMV-DESCR ) ).
        endloop.
      endloop.

***--------------------------------------------------------------------------------------
*** Single Finished Good
    else.
***   Add Function for all Variants
      loop at ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV into LS_FDMV
                                            where FDMDL eq LT_PRVDR_DEF[ 1 ]-ID.
        RR_MENU->ADD_FUNCTION( FCODE = C_FCODE_ADD && '@' && LS_FDMV-FDMDL && '@' && LS_FDMV-IFDMV
                               TEXT  = conv #( LS_FDMV-DESCR ) ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Add Booster Menu
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_IDATSPV=>C_IPRVT_IDATSPV
                              IF_INUSE  = ABAP_TRUE ) is initial.
***   Only active if Provider for Integration Data is available
      move ABAP_TRUE to LF_DISABLED.
    endif.

    RR_MENU->ADD_SEPARATOR( ).
    RR_MENU->ADD_FUNCTION( FCODE    = C_FCODE_BOOSTER
                           ICON     = ICON_CONFIGURATION
                           DISABLED = LF_DISABLED
                           TEXT     = 'Load Booster'(F06) ).

  endmethod.
  method GET_PRVDR_TAB.

    data: LT_BL_FDMDL type ZVCXI_PXSS_TT_BL_FDMDL.


*** Get Fast Data Models
    LT_BL_FDMDL = ME->R_PR_FASTD->GET_BL_FDMDL( ).

    if LT_BL_FDMDL ne ME->T_BL_FDMDL.
***   As the Fast Data Model has been changed (e.g. changed list of Components), reopen UI
      clear: ME->F_ALREADY_OPEN.
      ME->T_BL_FDMDL = LT_BL_FDMDL.
    endif.

*** Return the first FG from each Model
    RT_PRVDR = value #( for R_BL_FDMDL in ME->T_BL_FDMDL where ( TABLE_LINE is bound ) ( value #( R_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = ME->R_OLD_GATE ]
                                                                                         default value #( R_BL_FDMDL->T_GATE_OUT[ 1 ] optional ) ) ) ).

  endmethod.
  method GET_SBH_UI_INFO.

    if ME->R_UI_SBH is bound.
      RS_DYNP = ME->R_UI_SBH->S_DYNP.
    endif.

    if RS_DYNP-REPID is initial or
       RS_DYNP-DYNNR is initial.
      RS_DYNP-REPID = ME->S_DYNP_BLANK-REPID.
      RS_DYNP-DYNNR = ME->S_DYNP_BLANK-DYNNR.
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_FASTD.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LR_MENU type ref to CL_CTMENU.


    try.
        case FCODE.
          when C_FCODE_ADD.
            LR_MENU = ME->GET_MENU_ADD( ).

        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( CONTEXT_MENU = LR_MENU
                                             POSX         = POSX
                                             POSY         = POSY ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR_FCODE.

    data: LF_FCODE type UI_FUNC,
          LF_FDMDL type ZVCXI_PXSS_FDMDL,
          LF_IFDMV type ZVCXI_PXSS_IFDMV.

    try.
***     Trigger specific Add command
        if FCODE cs C_FCODE_ADD.
          split FCODE at '@' into data(DUMMY) LF_FDMDL LF_IFDMV.

          ZCL_VCXI_PXSS_BL_FDMDL=>CREATE( IR_GATE_FASTD = ME->R_GATE
                                          IF_FDMDL      = LF_FDMDL
                                          IF_IFDMV      = LF_IFDMV ).
        endif.

***     Trigger general Delete command
        if FCODE eq C_FCODE_DEL and
           ME->R_OLD_GATE is bound and
           ME->R_OLD_GATE->F_FREED ne ABAP_TRUE.
          ME->GET_BL_FDMDL_BY_FG( IR_GATE = ME->R_OLD_GATE )->DELETE( ).
        endif.

***     Other user Commands
        case FCODE.
          when C_FCODE_MULTIQTY.
            ME->HANDLE_UC_MULTIQTY( ).

          when C_FCODE_TINFO.
            ME->HANDLE_UC_TINFO( ).

          when C_FCODE_MTS.
            ME->HANDLE_UC_MTS( ).

          when C_FCODE_RTESPV.
            ME->HANDLE_UC_RTESPV( ).

          when C_FCODE_BOOSTER.
            ME->HANDLE_UC_BOOSTER( ).

        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_BOOSTER.

***--------------------------------------------------------------------------------------
*** Call Booster Selection Popup
    ZCL_VCXI_XCS_POPUP_BOOSTER=>START( IR_GATE = ME->R_GATE ).

  endmethod.
  method HANDLE_UC_MTS.

*** Call Popup for Make-to-Stock Materials
    ZCL_VCXI_XCSS_POPUP_MTS=>START( IR_GATE        = ME->R_GATE
                                    IR_UIGATE      = ME->R_UIGATE
                                    IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_MULTIQTY.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Multi Quantity Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Call Popup for Mulit Quantiies
    ZCL_VCXI_XCSS_POPUP_MULTIQTY=>START( IR_GATE        = LT_GATE[ 1 ]
                                         IR_UIGATE      = ME->R_UIGATE
                                         IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_RTESPV.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Fill Production
    cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->FILL_PROD( ).

*** Production was updated.
    message id 'ZVCXI_XCSR' type 'S' number '371'.

  endmethod.
  method HANDLE_UC_TINFO.

*** Call Popup for Tooling Information
    ZCL_VCXI_XCSS_POPUP_TINFO=>START( IR_GATE        = ME->R_GATE
                                      IR_UIGATE      = ME->R_UIGATE
                                      IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0100CC_TOOLBAR'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TAB_LIST.

    data: LF_TAB   type NUMC3.
    field-symbols: <S_TAB_LIST> type ZVCXI_XCS_S_TAB_LIST,
                   <F_DESCR>    type /VCXI/CKX_DESCR.


    SUPER->INIT_TAB_LIST( ).

*** Update Descriptions
    loop at ME->T_TAB_LIST assigning <S_TAB_LIST>.
***   Assign Description Column
      LF_TAB = SUBSTRING_AFTER( VAL = <S_TAB_LIST>-TABNAME SUB = ME->F_TABPT ).
      assign component C_TAB && LF_TAB of structure ME->S_TAB_DESCR to <F_DESCR>.
      if SY-SUBRC eq 0.
***     Get Fast Data Model
        data(LR_BL_FDMDL) = ME->GET_BL_FDMDL_BY_FG( IR_GATE = <S_TAB_LIST>-R_GATE ).
        LR_BL_FDMDL->GET_STATUS( exporting IR_GATE_OUT = <S_TAB_LIST>-R_GATE
                                 importing EF_ICON     = data(LF_ICON) ).

***     Get Description of Fast Data Model
        <F_DESCR> = |{ LF_ICON } { LR_BL_FDMDL->GET_DESCR( ) }|.
      endif.
    endloop.

  endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED         type /VCXI/CKX_LOCKED,
          LF_INUSE          type /VCXI/VKSR_INUSE,
          LF_DISABLED       type ABAP_BOOL,
          LF_HIDDE_MULTIQTY type ABAP_BOOL.
    data: LT_EVENT  type CNTL_SIMPLE_EVENTS,
          LT_BTNGRP type TTB_BUTTON.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.


***--------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Create Toolbar
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Registered Events
      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS = LT_EVENT
                                            exceptions others = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Event Handler
      set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.
      set handler ME->HANDLE_MENU_BUTTON   for ME->R_TOOLBAR.

    endif.

***--------------------------------------------------------------------------------------
*** Remove all Buttons to start fresh
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Add Buttons to add and remove Fast Data Models
    ME->R_TOOLBAR->ADD_BUTTON_GROUP( exporting DATA_TABLE = value #( ( FUNCTION  = C_FCODE_ADD
                                                                       ICON      = ICON_INSERT_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_MENU
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Add'(F01) )
                                                                     ( FUNCTION  = C_FCODE_DEL
                                                                       ICON      = ICON_DELETE_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_BUTTON
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Delete'(F02) )
                                                                     ( BUTN_TYPE = CNTB_BTYPE_SEP )
                                                                   )
                                     exceptions others = 0 ).

*** Hide Multi Quantity if Manager is not acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MULTIQTY
                                            ICON        = ICON_GRADUATE
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Multi Quantity'(F03)
                                 exceptions others      = 0 ).

    endif.

*** Hide Tooling Information if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_TINFO
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Tooling Information'(F05)
                                 exceptions others      = 0 ).

    endif.

*** Hide MTS if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_MTS=>C_IPRVT_XCS_MTS
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MTS
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Make-to-Stock'(F07)
                                 exceptions others      = 0 ).

    endif.

*** Button to Run Routing Supervisor
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_RTESPV
                                            ICON        = ICON_EXECUTE_OBJECT
                                            IS_DISABLED = ME->IS_RTESPV_DISABLED( )
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Fill Production'(F04)
                                 exceptions others      = 0 ).
    endif.

  endmethod.
  method IS_RTESPV_DISABLED.

    data: LF_ALLOWED type ABAP_BOOL.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      RF_DISABLED = ABAP_TRUE.

    else.
***   Start Negative
      RF_DISABLED = ABAP_TRUE.

***   Get Gates of Routing Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                       IF_INUSE  = ABAP_TRUE ).
      check LT_GATE is not initial.

***   Check if Fill Production is allowed
      try.
          cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED = LF_ALLOWED ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
          LF_ALLOWED = ABAP_FALSE.
      endtry.
      RF_DISABLED = switch #( LF_ALLOWED when ABAP_TRUE then ABAP_FALSE else ABAP_TRUE ).
    endif.

  endmethod.
  method OPEN_SBH.

*** Get Sales BOM Provider
    ME->R_PR_FASTD->GET_PRVDR_SBH( importing ER_GATE = data(LR_GATE_SBH) ).
    check LR_GATE_SBH is bound.

    data(LF_CLSUI) = LR_GATE_SBH->GET_CLSUI( ).
    check LF_CLSUI is not initial.

    try.
***     Create Subscreen
        create object ME->R_UI_SBH
          type
            (LF_CLSUI)
          exporting
            IR_UIFW        = ME
            IR_UIGATE      = ME->R_UIGATE
            IR_GATE        = LR_GATE_SBH.
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

*** Registered User Commands for Subscreen processing
    data(LT_UCOMM) = ME->R_UI_SBH->GET_REGISTERED_UCOMM( ).
ENHANCEMENT-POINT REGISTER_SBH_UCOMM SPOTS ZVCXI_PXSS_ES_UI_FASTD .

  endmethod.
  method OPEN_SUBSCREEN.

    data: LF_CLSUI  type /VCXI/VKSC_CLSUI.
    data: LT_UCOMM  type table of SYUCOMM.
    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.


    if IR_GATE is bound.
***   Get Fast Data Model by Finished Good Gate
      LR_BL_FDMDL = ME->GET_BL_FDMDL_BY_FG( IR_GATE = IR_GATE ).
      LF_CLSUI = LR_BL_FDMDL->GET_CLSUI( ).
    endif.

    if LF_CLSUI is not initial.
      try.
***       Create Subscreen
          create object RR_CLSUI
            type
              (LF_CLSUI)
            exporting
              IR_UIFW        = ME
              IR_UIGATE      = ME->R_UIGATE
              IR_GATE        = ME->R_GATE
              IR_BL_FDMDL    = LR_BL_FDMDL
              IF_APPL_EVENTS = ME->F_APPL_EVENTS
              IR_GATE_OUT    = IR_GATE.
        catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY_CREATE_OBJECT_ERROR ).
      endtry.

      RR_CLSUI->ACTIVATE( ).
      ME->F_ALREADY_OPEN = ABAP_TRUE.

***   Registered User Commands for Subscreen processing
      LT_UCOMM = cast ZCL_VCXI_PXSS_UI_FDMDL( RR_CLSUI )->GET_REGISTERED_UCOMM( ).
ENHANCEMENT-POINT REGISTER_FDMDL_UCOMM SPOTS ZVCXI_PXSS_ES_UI_FASTD .

    else.
***   Clear Subscreen
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DEACTIVATE( ).
      endif.
    endif.

  endmethod.
  method SET_GATE_OUT.

    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.
    field-symbols: <S_TAB_LIST> type ZVCXI_XCS_S_TAB_LIST.


*** Switch Gate of Tab List
    loop at ME->T_TAB_LIST assigning <S_TAB_LIST>.
***   Get Fast Data Model
      LR_BL_FDMDL = ME->GET_BL_FDMDL_BY_FG( IR_GATE = <S_TAB_LIST>-R_GATE ).

***   Update the Gate is valid
      if LINE_EXISTS( LR_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = IR_GATE ] ).
        <S_TAB_LIST>-R_GATE = IR_GATE.
      endif.
    endloop.

    ME->R_OLD_GATE = IR_GATE.

  endmethod.
