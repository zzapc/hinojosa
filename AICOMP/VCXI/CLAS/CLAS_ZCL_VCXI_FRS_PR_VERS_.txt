
class ZCL_VCXI_FRS_PR_VERS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_F0S_COPY .

  constants C_IEVNT_O_VALFR_CHANGED type /VCXI/VKSC_IEVNT value 'VALFR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_VRSTA_CHANGED type /VCXI/VKSC_IEVNT value 'VRSTA_CHANGED' ##NO_TEXT.
  constants C_IPRVT_VERS type /VCXI/VKSC_IPRVT value 'ZVCXI_FRS_VERS' ##NO_TEXT.
  constants C_PARID_VALFR type /VCXI/VKS_PARID value 'ZVCXI_FR_VALFR' ##NO_TEXT.
  constants C_PARID_VRSTA type /VCXI/VKS_PARID value 'ZVCXI_FR_VRSTA' ##NO_TEXT.
  constants C_VRSTA_NOT_RELEASE type ZVCXI_FRS_VRSTA value 'N' ##NO_TEXT.
  constants C_VRSTA_RELEASE type ZVCXI_FRS_VRSTA value 'R' ##NO_TEXT.
  data F_FUNDO type ABAP_BOOL read-only value ABAP_FALSE ##NO_TEXT.

  methods DUPLICATE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_VALFR
    exporting
      !EF_VALFR type /VCXI/CKX_VALFR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_VRSTA
    exporting
      !EF_VRSTA type ZVCXI_FRS_VRSTA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods IS_ACTIVE
    importing
      !IF_VALFR type /VCXI/CKX_VALFR optional
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_RELEASED
    returning
      value(RF_RELEASED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods RELEASE
    raising
      /VCXI/CX_CKX .
  methods SET_VALFR
    importing
      !IF_VALFR type /VCXI/CKX_VALFR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods UNDO_RELEASE
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CHECK_VALFR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_VRSTA
    importing
      !IF_VRSTA type ZVCXI_FRS_VRSTA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FRS_PR_VERS definition
class ZCL_VCXI_FRS_PR_VERS implementation.
  method CHECK_VALFR.

*** 0 Valid From Maintained
*** 1 Valid From Not Maintained

    data: LF_VALFR type /VCXI/CKX_VALFR.

***----------------------------------------------------------------------------
*** Get Valid From
    ME->GET_VALFR( importing EF_VALFR = LF_VALFR ).

    if LF_VALFR eq SPACE or
       LF_VALFR is initial.
      move 1 to RF_RESULT.
    else.
      move 0 to RF_RESULT.
    endif.

  endmethod.
  method DUPLICATE.

    data:  LF_INUSE      type        /VCXI/VKSR_INUSE.
    data:  LR_COPY       type ref to ZIF_VCXI_F0S_COPY.

*** Create new Version Gate
    ER_GATE = ME->R_GATE->CREATE_ELEMENT( ).

*** Set InUse if needed
    if ER_GATE->GET_USYNC( ) ne ABAP_TRUE.
      move ME->R_GATE->IS_INUSE( ) to LF_INUSE.
      ER_GATE->SET_INUSE( IF_INUSE = LF_INUSE ).
    endif.

*** Copy Values though COPY Interface
    try.
        move ER_GATE->R_CLSPR ?to LR_COPY.
        if LR_COPY is bound.
          LR_COPY->COPY_FROM_GATE( IR_GATE = ME->R_GATE ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_COPY.
    endtry.

  endmethod.
  method GET_DESCR.

    data: LF_VALFR     type /VCXI/CKX_VALFR,
          LF_VALFR_STR type          STRING,
          LF_VRSTA     type          ZVCXI_FRS_VRSTA.


    move     ME->R_GATE->GET_DESCR( ) to RF_DESCR.

    ME->GET_VALFR( importing EF_VALFR = LF_VALFR ).

    check LF_VALFR ne SPACE and
          LF_VALFR is not initial.

    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = LF_VALFR
      importing
        DATE_EXTERNAL            = LF_VALFR_STR
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC is not initial.
      return.
    endif.

    concatenate RF_DESCR 'from:'(001) LF_VALFR_STR into RF_DESCR separated by SPACE.

*** Get Version Status
    ME->GET_VRSTA( importing EF_VRSTA = LF_VRSTA ).

    if LF_VRSTA is not initial.
      concatenate RF_DESCR '(' LF_VRSTA ')' into RF_DESCR separated by SPACE.
    endif.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Valid From Date
    if ME->CHECK_VALFR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Valid From Date
    case ME->CHECK_VALFR( ).
      when 0.
***     Valid from date is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '210' ).
      when 1.
***     Valid from date is not maintained and is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '211' ).
    endcase.

  endmethod.
  method GET_VALFR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VALFR ).
    move LS_PARAM-ATWRT to EF_VALFR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VRSTA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRSTA ).
    move LS_PARAM-ATWRT to EF_VRSTA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

    endcase.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_ACTIVE.

    data: LF_VALFR       type         /VCXI/CKX_VALFR,
          LF_VALFR_IN    type         /VCXI/CKX_VALFR,
          LF_VALFR_OTHER type         /VCXI/CKX_VALFR.
    data: LR_PR_VERS type ref to ZCL_VCXI_FRS_PR_VERS,
          LR_GATE    type ref to /VCXI/CL_VKSR_GATE.
    data: LT_GATE            type        /VCXI/VKSR_TT_GATE.
    field-symbols: <F_VALFR> type        /VCXI/CKX_VALFR.

***--------------------------------------------------------------------------------------
*** If this version is not released it cannot be active
    check ME->IS_RELEASED( ) eq ABAP_TRUE.

*** If no date is provided, try to read from BOM explosion
    if IF_VALFR is initial.
      assign ('(SAPLCULL)CULLD_ITEM_DATE') to <F_VALFR>.
      if <F_VALFR> is not assigned.
***     Take configuration date from application data
        move ME->R_GATE->GET_APPDATA( )->F_DCONF to LF_VALFR_IN.
      else.
        move <F_VALFR> to LF_VALFR_IN.
      endif.
    else.
      move IF_VALFR to LF_VALFR_IN.
    endif.

*** Get own valid from date
    ME->GET_VALFR( importing EF_VALFR = LF_VALFR ).
*** Check own date matching explosion date
    check LF_VALFR le LF_VALFR_IN.

*** Get all other versions
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_VERS=>C_IPRVT_VERS
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_VERS.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_VERS.
      endtry.

***   Only check other released version
      check LR_PR_VERS is bound and
            LR_PR_VERS ne ME    and
            LR_PR_VERS->IS_RELEASED( ) eq ABAP_TRUE.

      LR_PR_VERS->GET_VALFR( importing EF_VALFR = LF_VALFR_OTHER ).
***   Check if the version is closer to explosion date then current one
      if LF_VALFR_OTHER le LF_VALFR_IN and
         LF_VALFR_OTHER gt LF_VALFR.
***     This version is newer then the current one
        move ABAP_FALSE to RF_ACTIVE.
        return.
      endif.

    endloop.

*** This version seems to be the active one
    move ABAP_TRUE to RF_ACTIVE.

  endmethod.
  method IS_RELEASED.

    data: LF_VRSTA          type        ZVCXI_FRS_VRSTA.

*** Check own version status
    ME->GET_VRSTA( importing EF_VRSTA = LF_VRSTA ).

    if LF_VRSTA eq C_VRSTA_RELEASE.
      move ABAP_TRUE to RF_RELEASED.
    else.
      move ABAP_FALSE to RF_RELEASED.
    endif.

  endmethod.
  method RELEASE.

*** Validate Version Status before Release
    check ME->R_GATE->GET_STATUS( ) eq /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

*** Set Status to Released
    ME->SET_VRSTA( IF_VRSTA = C_VRSTA_RELEASE
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set local Undo Flag
    move ABAP_TRUE to ME->F_FUNDO.

  endmethod.
  method SET_VALFR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VALFR ).

    move IF_VALFR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Valid From Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_VALFR_CHANGED ).
    endif.

  endmethod.
  method SET_VRSTA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_VRSTA ).

    move IF_VRSTA to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Version Status Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_VRSTA_CHANGED ).
    endif.

  endmethod.
  method UNDO_RELEASE.

    check ME->F_FUNDO eq ABAP_TRUE.

*** Set Status to Not Released
    ME->SET_VRSTA( IF_VRSTA = C_VRSTA_NOT_RELEASE
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Remove local Undo Flag
    move ABAP_FALSE to ME->F_FUNDO.

  endmethod.
  method ZIF_VCXI_F0S_COPY~COPY_FROM_GATE.

    data: LF_INUSE      type        /VCXI/VKSR_INUSE,
          LF_POSID      type        /VCXI/VKSR_POSID.
    data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type        /VCXI/VKSR_TT_GATE,
          LT_GATE_ALL   type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_VERS    type ref to ZCL_VCXI_FRS_PR_VERS,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_NEW   type ref to /VCXI/CL_VKSR_GATE,
          LR_COPY       type ref to ZIF_VCXI_F0S_COPY.

    check IR_GATE          is bound and
          IR_GATE->R_CLSPR is bound.

***--------------------------------------------------------------------------------------
*** Cast to own class-type
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_VERS.
      catch CX_SY_MOVE_CAST_ERROR.
        return.
    endtry.

***--------------------------------------------------------------------------------------
*** Free all Children
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT ).
      loop at LT_GATE into LR_GATE.
        LR_GATE->DO_FREE( ).
      endloop.
    endloop.

*** Get all Children of Source
    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT ).
      append lines of LT_GATE to LT_GATE_ALL.
    endloop.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_ALL ).

*** Copy Source Children
    loop at LT_GATE_ALL into LR_GATE.
***   Create new Child
      LR_GATE_NEW = ME->R_GATE->CREATE_ELEMENT( IF_ID = LR_GATE->F_ID ).

***   Copy InUse if needed
      if LR_GATE_NEW->GET_USYNC( ) ne ABAP_TRUE.
        move LR_GATE->IS_INUSE( ) to LF_INUSE.
        LR_GATE_NEW->SET_INUSE( IF_INUSE = LF_INUSE ).
      endif.

***   Copy Position
      move LR_GATE->GET_POSID( ) to LF_POSID.
      LR_GATE_NEW->SET_POSID( IF_POSID = LF_POSID ).

***   Copy Values though COPY Interface
      try.
          move LR_GATE_NEW->R_CLSPR ?to LR_COPY.
          if LR_COPY is bound.
            LR_COPY->COPY_FROM_GATE( IR_GATE = LR_GATE ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
