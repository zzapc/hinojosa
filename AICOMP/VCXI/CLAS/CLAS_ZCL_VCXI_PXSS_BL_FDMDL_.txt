
class ZCL_VCXI_PXSS_BL_FDMDL definition
  public
  create public .

public section.

  constants C_XSHT_PLACEHOLDER type /VCXI/CKX_ID value '$XSHT' ##NO_TEXT.
  data F_FDMDL type ZVCXI_PXSS_FDMDL read-only .
  data F_IFDMV type ZVCXI_PXSS_IFDMV read-only .
  data R_BL_FASTD type ref to ZCL_VCXI_PXSS_BL_FASTD read-only .
  data R_BL_FDMDL_PARENT type ref to ZCL_VCXI_PXSS_BL_FDMDL read-only .
  data T_BL_FDMDL_SUB type ZVCXI_PXSS_TT_BL_FDMDL .
  class-data T_FDMV type ZVCXI_PXSS_TT_FDMV read-only .
  data T_GATE_OUT type /VCXI/VKSR_TT_GATE read-only .
  data T_GATE_XCOMP type /VCXI/VKSR_TT_GATE read-only .

  methods ADJ_CADIF
    changing
      !CT_CADIF_ONEUP_IO_P1 type TABLE
      !CT_CADIF_MLTUP_IO type TABLE
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_STATUS
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP optional
    exporting
      !EF_ICON type ICON_D
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods ADD_CSTEP
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IR_DATA type ref to DATA optional
      !IT_FDMEX type ZVCXI_PXSS_TT_FDMEX optional
      !IF_INDEX type I optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ADD_XFG
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods ADD_SUB_BL_FDMDL
    importing
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
      !IF_IFDMV type ZVCXI_PXSS_IFDMV
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
      !IF_IFDMV type ZVCXI_PXSS_IFDMV
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods DELETE
    raising
      /VCXI/CX_CKX .
  methods DEL_XFG
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods DEL_SUB_BL_FDMDL
    importing
      !IR_BL_FDMDL_SUB type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods DET_IFDMV
    exporting
      !ET_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  class-methods FREE_INSTANCE_BUFFER
    importing
      !IR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE .
  methods GET_CLSUI
    returning
      value(RF_CLSUI) type /VCXI/VKSC_CLSUI
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_GATE_EXCLUDE
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_OUT type /VCXI/VKSR_TT_GATE
      !IT_GATE_XCOMP type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL_PARENT type ref to ZCL_VCXI_PXSS_BL_FDMDL optional
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_SUB_BL_FDMDL
    importing
      !IF_DEPTH type I default '-1'
    returning
      value(RT_BL_FDMDL) type ZVCXI_PXSS_TT_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_UI_FDMDL
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW optional
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE optional
      !IF_APPL_EVENTS type ABAP_BOOL
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RR_UI_FDMDL) type ref to ZCL_VCXI_PXSS_UI_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_XSHT
    returning
      value(RR_DATA) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods SET_XSHT
    importing
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      R_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE,
      T_GATE_OUT   type /VCXI/VKSR_TT_GATE,
      T_GATE_XCOMP type /VCXI/VKSR_TT_GATE,
      R_BL_FDMDL   type ref to ZCL_VCXI_PXSS_BL_FDMDL,
    end of YS_INSTANCE .

  data R_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE .
  class-data:
    T_INSTANCE type table of YS_INSTANCE .

  class-methods FACTORY
    importing
      !IR_GATE_FASTD type ref to /VCXI/CL_VKSR_GATE
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_NEW_XCONG
    returning
      value(RS_XCONG) type ZVCXI_PXSS_S_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_SUB_INSTANCE
    importing
      !IR_GATE_SUB type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RR_BL_FDMDL) type ref to ZCL_VCXI_PXSS_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods INIT_FDMDL
    importing
      !IF_IFDMV type ZVCXI_PXSS_IFDMV
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods MERGE_FASTD_XCOMP
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods REPLACE_XCOMP_DATA
    importing
      !IF_ISELF_OLD type /VCXI/CKX_ID
      !IF_ISELF_NEW type /VCXI/CKX_ID
      !IR_DATA type ref to DATA optional
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_GATE_OUT
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_OUT) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_BL_FDMDL definition
class ZCL_VCXI_PXSS_BL_FDMDL implementation.
  method ADD_CSTEP.

    data: LF_INDEX type I.
    data: LR_GATE_OUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

***------------------------------------------------------------------------------------------------
*** Get Component of Outbound Gate
    check CT_FASTD_XCOMP is not initial.
    LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                                       IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
    check LR_GATE_XCOMP is bound.
    assign CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ] to <S_FASTD_XCOMP>.

*** Identify correct Index to add Conversion Step
    if IF_INDEX eq 0.
***   Find first of its kind
      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = IF_ISELF ] ).
        LF_INDEX = LINE_INDEX( <S_FASTD_XCOMP>-T_DATA[ ISELF = IF_ISELF ] ) + 1.
      else.
        LF_INDEX = 1.
      endif.
    else.
      LF_INDEX = cond #( when IF_INDEX le LINES( <S_FASTD_XCOMP>-T_DATA ) then IF_INDEX
                                                                          else LINES( <S_FASTD_XCOMP>-T_DATA ) + 1 ).
    endif.

*** Add Conversion Step
    insert value #( IPARE   = 'CONV'
                    ISELF   = IF_ISELF
                    R_DATA  = IR_DATA
                    T_FDMEX = IT_FDMEX
                  ) into <S_FASTD_XCOMP>-T_DATA index LF_INDEX.

  endmethod.
  method ADD_SUB_BL_FDMDL.

*** Create new Instance using Factory
    RR_BL_FDMDL = FACTORY( IR_GATE_FASTD = ME->R_GATE_FASTD
                           IF_FDMDL      = IF_FDMDL ).
    check RR_BL_FDMDL is bound.

*** Initialize new Model based on Variant
    RR_BL_FDMDL->INIT_FDMDL( exporting IF_IFDMV       = IF_IFDMV
                             changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                       CT_XCONG       = CT_XCONG ).

  endmethod.
  method ADD_XFG.
  endmethod.
  method ADJ_CADIF.
  endmethod.
  method CLASS_CONSTRUCTOR.

    select *
           into corresponding fields of table @T_FDMV
           from ZVCXI_PXS_TC021
           left outer join ZVCXI_PXS_TC021T
            on  ZVCXI_PXS_TC021T~FDMDL eq ZVCXI_PXS_TC021~FDMDL
            and ZVCXI_PXS_TC021T~IFDMV eq ZVCXI_PXS_TC021~IFDMV
           where ZVCXI_PXS_TC021T~LANGU eq @SY-LANGU.

    sort T_FDMV by FDMDL IFDMV.

  endmethod.
  method CONSTRUCTOR.

    ME->R_GATE_FASTD = IR_GATE_FASTD.
    ME->F_FDMDL      = IF_FDMDL.
    ME->R_BL_FASTD   = new #( IR_GATE = ME->R_GATE_FASTD ).

  endmethod.
  method CREATE.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.
    data: LR_GATE_FG    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.


*** Create new Instance using Factory
    RR_BL_FDMDL = FACTORY( IR_GATE_FASTD = IR_GATE_FASTD
                           IF_FDMDL      = IF_FDMDL ).
    check RR_BL_FDMDL is bound.

*** Initialize new Model based on Variant and dermine the variant per logic afterward again
    RR_BL_FDMDL->INIT_FDMDL( exporting IF_IFDMV       = IF_IFDMV
                             changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                       CT_XCONG       = LT_XCONG ).
    RR_BL_FDMDL->R_BL_FASTD->SET_STRC( exporting IR_BL_FDMDL    = RR_BL_FDMDL
                                                 IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                                 IT_XCONG       = LT_XCONG
                                       importing ET_GATE_XCOMP  = RR_BL_FDMDL->T_GATE_XCOMP ).
    RR_BL_FDMDL->DET_IFDMV( ).

*** Find Provider for Finished Goods that belong to Model
    loop at IR_GATE_FASTD->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                      IF_INUSE = ABAP_TRUE ) into LR_GATE_FG.
      loop at RR_BL_FDMDL->T_GATE_XCOMP into LR_GATE_XCOMP.
        if LR_GATE_FG->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
          append LR_GATE_FG to RR_BL_FDMDL->T_GATE_OUT.
          exit.
        endif.
      endloop.
    endloop.

  endmethod.
  method DEL_SUB_BL_FDMDL.

    data: LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP.


    check IR_BL_FDMDL_SUB is bound.
    LR_GATE = IR_BL_FDMDL_SUB->T_GATE_OUT[ 1 ].

    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
***   Check component is relevant to Sub Model
      check LINE_EXISTS( IR_BL_FDMDL_SUB->T_GATE_XCOMP[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

***   Component where the Sub Model is used
      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ R_GATE = LR_GATE ] ).
        loop at <S_FASTD_XCOMP>-T_DATA into LS_FASTD_XCOMP_DATA.
          if LS_FASTD_XCOMP_DATA-R_GATE is bound and
             ( LS_FASTD_XCOMP_DATA-R_GATE eq LR_GATE or
               LR_GATE->IS_PARENT( IR_GATE_CHILD = LS_FASTD_XCOMP_DATA-R_GATE ) ).
            delete <S_FASTD_XCOMP>-T_DATA.
          endif.
        endloop.
      else.
        delete CT_FASTD_XCOMP.
      endif.
    endloop.

  endmethod.
  method DEL_XFG.

    data: LT_GATE_XCOMP_OWN    type /VCXI/VKSR_TT_GATE,
          LT_GATE_XCONO_OWN    type /VCXI/VKSR_TT_GATE,
          LT_GATE_XCOMP_OTHERS type /VCXI/VKSR_TT_GATE,
          LT_GATE_XCONO_OTHERS type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***------------------------------------------------------------------------------------------------
*** Get own linked Components
    LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = IR_GATE_OUT
                                                       IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
    ME->R_BL_FASTD->GET_LINKED_XCOMP( exporting IR_BL_FDMDL            = ME
                                                IR_GATE_XCOMP          = LR_GATE_XCOMP
                                      importing ET_GATE_XCOMP_BACKWARD = LT_GATE_XCOMP_OWN
                                                ET_GATE_XCONO_BACKWARD = LT_GATE_XCONO_OWN ).

*** Remove Components/Connection Outs which ara also used by others
    loop at ME->T_GATE_OUT into LR_GATE
                        where TABLE_LINE ne IR_GATE_OUT.
      LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE
                                                         IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
      ME->R_BL_FASTD->GET_LINKED_XCOMP( exporting IR_BL_FDMDL            = ME
                                                  IR_GATE_XCOMP          = LR_GATE_XCOMP
                                        importing ET_GATE_XCOMP_BACKWARD = LT_GATE_XCOMP_OTHERS
                                                  ET_GATE_XCONO_BACKWARD = LT_GATE_XCONO_OTHERS ).

      loop at LT_GATE_XCOMP_OTHERS into LR_GATE.
        delete LT_GATE_XCOMP_OWN where TABLE_LINE eq LR_GATE.
      endloop.
      loop at LT_GATE_XCONO_OTHERS into LR_GATE.
        delete LT_GATE_XCONO_OWN where TABLE_LINE eq LR_GATE.
      endloop.
    endloop.

***------------------------------------------------------------------------------------------------
*** Delete Components
    loop at LT_GATE_XCOMP_OWN into LR_GATE.
      delete CT_FASTD_XCOMP where R_GATE eq LR_GATE.
    endloop.

*** Delete Connection Outs and own Gate
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_GATE is bound.
        if LINE_EXISTS( LT_GATE_XCONO_OWN[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ) or
           <S_FASTD_XCOMP_DATA>-R_GATE eq IR_GATE_OUT.
          delete <S_FASTD_XCOMP>-T_DATA.
        endif.
      endloop.
    endloop.

  endmethod.
  method DELETE.

*** Set Fast Data Structure
    ME->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME
                              IT_FASTD_XCOMP = value #( ) ).

  endmethod.
  method DET_IFDMV.

    data: LF_IS_SUB type ABAP_BOOL.
    data: LS_FASTD_XCOMP  type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE,
          LT_GATE_SUB type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SUB   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_FDMDL   type ref to ZCL_VCXI_PXSS_BL_FDMDL.


    free: ME->F_IFDMV,
          ME->T_BL_FDMDL_SUB.
    check ME->T_GATE_OUT is not initial.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure as Starting Point
    ET_FASTD_XCOMP = ME->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME ).

***------------------------------------------------------------------------------------------------
*** Identify Provider for Sub-Models
    append lines of ME->R_GATE_FASTD->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FDSUB=>C_IPRVT_PX_FDSUB
                                                 IF_INUSE = ABAP_TRUE ) to LT_GATE.

    if ME->R_BL_FDMDL_PARENT is not bound and
       not LINE_EXISTS( LT_GATE[ TABLE_LINE = ME->T_GATE_OUT[ 1 ] ] ).
***   Out is not a Sub-Model -> Collect all related Sub-Models
      loop at LT_GATE into LR_GATE_SUB.
        loop at ME->T_GATE_XCOMP into LR_GATE_XCOMP.
          check LR_GATE_SUB->IS_DESCENDANT( IR_GATE = LR_GATE_XCOMP ).
          append LR_GATE_SUB to LT_GATE_SUB.
        endloop.
      endloop.
    else.
***   Out is a Sub-Model -> Collect related Sub-Models with diffent component (avoid endless loop)
      loop at LT_GATE into LR_GATE_SUB.
        loop at ME->T_GATE_XCOMP into LR_GATE_XCOMP.
          check not cast /VCXI/CL_VKSR_GATE( ME->T_GATE_OUT[ 1 ] )->IS_DESCENDANT( IR_GATE = LR_GATE_XCOMP ) and
                LR_GATE_SUB->IS_DESCENDANT( IR_GATE = LR_GATE_XCOMP ).
          append LR_GATE_SUB to LT_GATE_SUB.
        endloop.
      endloop.
    endif.

    check LT_GATE_SUB is not initial.

*** Sort Gates
    ME->R_GATE_FASTD->SORT_GATE( changing CT_GATE = LT_GATE_SUB ).

*** Process based on Component sequnce to respect the relationship
    loop at ET_FASTD_XCOMP into LS_FASTD_XCOMP where R_GATE is bound.

***   Configured Packaging Material Configurations
      loop at LT_GATE_SUB into LR_GATE_SUB.
        check LR_GATE_SUB->IS_DESCENDANT( IR_GATE = LS_FASTD_XCOMP-R_GATE ).

***     Get sub-level Fast Data Model Instance
        LR_BL_FDMDL = ME->GET_SUB_INSTANCE( IR_GATE_SUB    = LR_GATE_SUB
                                            IR_GATE_XCOMP  = LS_FASTD_XCOMP-R_GATE
                                            IT_FASTD_XCOMP = ET_FASTD_XCOMP ).
        check LR_BL_FDMDL is bound.
        append LR_BL_FDMDL to ME->T_BL_FDMDL_SUB.

***     Remove Components that are related to a Sub-Level Model
        loop at LR_BL_FDMDL->T_GATE_XCOMP into LR_GATE_XCOMP where TABLE_LINE ne LS_FASTD_XCOMP-R_GATE.
          delete ET_FASTD_XCOMP where R_GATE = LR_GATE_XCOMP.
        endloop.
      endloop.
    endloop.

  endmethod.
  method FACTORY.

    data: LF_CLSNA type SEOCLSNAME.


    try.
***     Get Class Name base on Fast Data Model
        select single CLSNA
               into LF_CLSNA
               from ZVCXI_PXS_TC020
              where FDMDL = IF_FDMDL.

        if SY-SUBRC eq 0 and
           LF_CLSNA is not initial.
***       Create Model based on specific Class
          create object RR_BL_FDMDL
            type (LF_CLSNA)
            exporting
              IR_GATE_FASTD = IR_GATE_FASTD
              IF_FDMDL      = IF_FDMDL.
        else.
***       Use Base Class
          create object RR_BL_FDMDL
            exporting
              IR_GATE_FASTD = IR_GATE_FASTD
              IF_FDMDL      = IF_FDMDL.
        endif.

      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method FREE_INSTANCE_BUFFER.

*** Clear Buffer
    delete T_INSTANCE where R_GATE_FASTD = IR_GATE_FASTD.

  endmethod.
  method GET_CLSUI.
  endmethod.
  method GET_DESCR.

    RF_DESCR = value #( ME->T_FDMV[ FDMDL = ME->F_FDMDL
                                    IFDMV = ME->F_IFDMV ]-DESCR default |{ ME->F_FDMDL } / { ME->F_IFDMV }| ).

  endmethod.
  method GET_GATE_EXCLUDE.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_GATE_XCOMP_BACKWARD type /VCXI/VKSR_TT_GATE,
          LT_GATE_XCONO_BACKWARD type /VCXI/VKSR_TT_GATE,
          LT_BL_FDMDL            type ZVCXI_PXSS_TT_BL_FDMDL.
    data: LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_FDMDL       type ref to ZCL_VCXI_PXSS_BL_FDMDL,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


    check IR_GATE_OUT is bound.

***------------------------------------------------------------------------------------------------
*** Separation
    if LINES( ME->T_GATE_OUT ) gt 1.
***   Exclude Tabs of other Finished Goods
      loop at ME->T_GATE_OUT into LR_GATE where TABLE_LINE ne IR_GATE_OUT.
***     Exclude Gate Out and descendant Data in "usage"
        append LR_GATE to RT_GATE.
        loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
          loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_GATE is bound.
            check LS_FASTD_XCOMP_DATA-R_GATE->IS_DESCENDANT( IR_GATE = LR_GATE ).
            append LS_FASTD_XCOMP_DATA-R_GATE to RT_GATE.
          endloop.
        endloop.

***     Excldue related Components
        LR_GATE_XCOMP_OUT = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE
                                                               IT_FASTD_XCOMP = IT_FASTD_XCOMP ).
        ME->R_BL_FASTD->GET_LINKED_XCOMP( exporting IR_BL_FDMDL            = ME
                                                    IR_GATE_XCOMP          = LR_GATE_XCOMP_OUT
                                          importing ET_GATE_XCOMP_BACKWARD = LT_GATE_XCOMP_BACKWARD
                                                    ET_GATE_XCONO_BACKWARD = LT_GATE_XCONO_BACKWARD ).
        append lines of LT_GATE_XCOMP_BACKWARD to RT_GATE.
        append lines of LT_GATE_XCONO_BACKWARD to RT_GATE.
      endloop.

***   Remove Exclusion for own Gates
      LR_GATE_XCOMP_OUT = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = IR_GATE_OUT
                                                             IT_FASTD_XCOMP = IT_FASTD_XCOMP ).
      ME->R_BL_FASTD->GET_LINKED_XCOMP( exporting IR_BL_FDMDL            = ME
                                                  IR_GATE_XCOMP          = LR_GATE_XCOMP_OUT
                                        importing ET_GATE_XCOMP_BACKWARD = LT_GATE_XCOMP_BACKWARD
                                                  ET_GATE_XCONO_BACKWARD = LT_GATE_XCONO_BACKWARD ).
      loop at LT_GATE_XCOMP_BACKWARD into LR_GATE.
        delete RT_GATE where TABLE_LINE eq LR_GATE.
      endloop.
      loop at LT_GATE_XCONO_BACKWARD into LR_GATE.
        delete RT_GATE where TABLE_LINE eq LR_GATE.
      endloop.
    endif.


***------------------------------------------------------------------------------------------------
*** Element introducing Sub Model / Procurement Detail
    if IR_GATE_OUT->R_CLSPR is instance of ZIF_VCXI_PXSS_FDSUB or
       IR_GATE_OUT->R_CLSPR is instance of ZIF_VCXI_P4SS_PRDTL.
      LR_GATE_XCOMP_OUT = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = IR_GATE_OUT
                                                             IT_FASTD_XCOMP = IT_FASTD_XCOMP ).
      loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP where R_GATE eq LR_GATE_XCOMP_OUT.
        loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA.
          check LS_FASTD_XCOMP_DATA-R_GATE ne IR_GATE_OUT and
                not IR_GATE_OUT->IS_PARENT( IR_GATE_CHILD = LS_FASTD_XCOMP_DATA-R_GATE ).
          append LS_FASTD_XCOMP_DATA-R_GATE to RT_GATE.
        endloop.
      endloop.
    endif.

*** Exclude Sub-Models
    loop at ME->GET_SUB_BL_FDMDL( ) into LR_BL_FDMDL.
      loop at LR_BL_FDMDL->T_GATE_XCOMP into LR_GATE.
***     Exclude all Components except the "usage"
        if not LR_GATE->IS_IN_LINE( IR_GATE = LR_BL_FDMDL->T_GATE_OUT[ 1 ] ).
          append LR_GATE to RT_GATE.
        else.
***       Exclude descendant Data in "usage"
          loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP where R_GATE eq LR_GATE.
            loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_GATE is bound.
              check LS_FASTD_XCOMP_DATA-R_GATE->IS_DESCENDANT( IR_GATE = LR_BL_FDMDL->T_GATE_OUT[ 1 ] ).
              append LS_FASTD_XCOMP_DATA-R_GATE to RT_GATE.
            endloop.
          endloop.
        endif.
      endloop.
    endloop.

  endmethod.
  method GET_INSTANCE.

    data: LF_FDMDL type ZVCXI_PXSS_FDMDL.
    data: LR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE.


*** Check Buffer
    RR_BL_FDMDL = value #( T_INSTANCE[ R_GATE_FASTD = IR_GATE_FASTD
                                       T_GATE_OUT   = IT_GATE_OUT
                                       T_GATE_XCOMP = IT_GATE_XCOMP ]-R_BL_FDMDL optional ).

    if RR_BL_FDMDL is not bound.
***--------------------------------------------------------------------------------------
***   Check all Gates have same ID and use ID as Fast Data Model ID
      loop at IT_GATE_OUT into LR_GATE_OUT.
        if LF_FDMDL is initial.
          LF_FDMDL = LR_GATE_OUT->F_ID.

        elseif LF_FDMDL ne LR_GATE_OUT->F_ID.
          clear LF_FDMDL.
          exit.
        endif.
      endloop.
      check LF_FDMDL is not initial.

***--------------------------------------------------------------------------------------
***   Identify Model based on Finished Good
      RR_BL_FDMDL = FACTORY( IR_GATE_FASTD = IR_GATE_FASTD
                             IF_FDMDL      = LF_FDMDL ).
      check RR_BL_FDMDL is bound.

      RR_BL_FDMDL->R_BL_FDMDL_PARENT = IR_BL_FDMDL_PARENT.

***   Fill related Gates
      RR_BL_FDMDL->T_GATE_OUT   = IT_GATE_OUT.
      RR_BL_FDMDL->T_GATE_XCOMP = IT_GATE_XCOMP.

***   Fill Buffer
      append value #( R_GATE_FASTD = IR_GATE_FASTD
                      T_GATE_OUT   = IT_GATE_OUT
                      T_GATE_XCOMP = IT_GATE_XCOMP
                      R_BL_FDMDL   = RR_BL_FDMDL ) to T_INSTANCE.

    endif.

***--------------------------------------------------------------------------------------
*** Determine Fast Data Model Variant
    RR_BL_FDMDL->DET_IFDMV( ).

  endmethod.
  method GET_NEW_XCONG.

    try.
        RS_XCONG = value #( GXCON_OUT = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                            GXCON_IN  = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ) ).
      catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_UUID_ERROR ).
    endtry.

  endmethod.
  method GET_STATUS.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE        type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Process all assigned Components
    if IT_FASTD_XCOMP is not supplied.
      loop at ME->T_GATE_XCOMP into data(LR_GATE_XCOMP)
                               where TABLE_LINE is bound
                                and  TABLE_LINE->F_FREED ne ABAP_TRUE.
***     Analyze Component
        data(LR_GATE_SPEC) = cast ZCL_VCXI_PXSS_PR_XCOMP( LR_GATE_XCOMP->R_CLSPR )->GET_PRVDR_SPEC( ).
        append value #( R_GATE = LR_GATE_XCOMP
                        ID     = LR_GATE_XCOMP->F_ID
                        POSID  = LR_GATE_XCOMP->GET_POSID( )
                        XCSTY  = cond #( when LR_GATE_SPEC is bound then ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC
                                                                    else ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_FREESTYLE )
                      ) to LT_FASTD_XCOMP.
      endloop.
    else.
      LT_FASTD_XCOMP = IT_FASTD_XCOMP.
    endif.
    delete LT_FASTD_XCOMP where R_GATE is not bound.


***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    data(LR_GATE_OUT) = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    if LR_GATE_OUT is bound.
***   Add Gates Out to Data, so it can be found when looking for the excluded gates
      loop at ME->T_GATE_OUT into LR_GATE.
        loop at LT_FASTD_XCOMP assigning field-symbol(<S_FASTD_XCOMP>).
          if LR_GATE->IS_IN_LINE( IR_GATE = <S_FASTD_XCOMP>-R_GATE ).
            append value #( R_GATE = LR_GATE ) to <S_FASTD_XCOMP>-T_DATA.
            exit.
          endif.
        endloop.
      endloop.

***   Get excluded Gates (components only)
      data(LT_GATE_EXCLUDE) = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                                    IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

***   Exclude Component where Part/Sheet is used and only use Gate of Part/Sheet
      if IR_GATE_OUT ne LR_GATE_OUT.
        loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
          if LS_FASTD_XCOMP-R_GATE->IS_IN_LINE( IR_GATE_OUT ).
            append LS_FASTD_XCOMP-R_GATE to LT_GATE_EXCLUDE.
            append IR_GATE_OUT to LT_GATE.
          endif.
        endloop.
      endif.
    else.
***   Gate Out is not a standalone model (e.g. Procurement Part)
      append IR_GATE_OUT to LT_GATE.
      clear LT_FASTD_XCOMP.
    endif.

***------------------------------------------------------------------------------------------------
*** Collect Gates relevant for Status
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      case LS_FASTD_XCOMP-XCSTY.
***     For Specification-based Components
        when ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC.
          append lines of LS_FASTD_XCOMP-R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ) to LT_GATE.

***     Freestyle Component
        when ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_FREESTYLE.
          loop at LS_FASTD_XCOMP-R_GATE->GET_PRVDR( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ) into LR_GATE.
            if LR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
              append LR_GATE to LT_GATE.
            endif.
          endloop.

      endcase.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Status of collected Gates
    RF_ELMST = ME->R_GATE_FASTD->GET_STATUS( IT_GATE = LT_GATE ).
    RF_ELMST = switch #( RF_ELMST when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y then /VCXI/CL_VKSR_SERVICE=>C_ELMST_R
                                  else RF_ELMST ).

*** Consider Sub-Model Status
    if RF_ELMST eq /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      loop at ME->GET_SUB_BL_FDMDL( IF_DEPTH = '0' ) into data(LR_BL_FDMDL_SUB).
        if LR_BL_FDMDL_SUB->GET_STATUS( IR_GATE_OUT = ME->T_GATE_OUT[ 1 ] ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y.
        endif.
      endloop.
    endif.

*** Get Status Icon
    EF_ICON = switch #( RF_ELMST when /VCXI/CL_VKSR_SERVICE=>C_ELMST_G then ICON_GREEN_LIGHT
                                 when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y then ICON_YELLOW_LIGHT
                                 when /VCXI/CL_VKSR_SERVICE=>C_ELMST_R then ICON_RED_LIGHT
                                 when /VCXI/CL_VKSR_SERVICE=>C_ELMST_E then ICON_FAILURE ).

  endmethod.
  method GET_SUB_BL_FDMDL.

    data: LF_DEPTH type I.


*** Collect all direct related Sub-Models
    append lines of ME->T_BL_FDMDL_SUB     to RT_BL_FDMDL.

*** "Recursive" Collection
    if IF_DEPTH gt 0.
      LF_DEPTH = IF_DEPTH - 1.
    else.
      LF_DEPTH = IF_DEPTH.
    endif.
    if LF_DEPTH ne 0.
      loop at RT_BL_FDMDL into data(LR_BL_FDMDL).
        append lines of LR_BL_FDMDL->GET_SUB_BL_FDMDL( IF_DEPTH = LF_DEPTH ) to RT_BL_FDMDL.
      endloop.
    endif.

  endmethod.
  method GET_SUB_INSTANCE.

    data: LT_GATE_XCOMP type /VCXI/VKSR_TT_GATE.
    data: LR_PR_XCONI   type ref to ZCL_VCXI_PXSS_PR_XCONI,
          LR_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Get Connection In
    if IR_GATE_SUB->R_CLSPR is instance of ZIF_VCXI_PXSS_FDSUB.
      LR_PR_XCONI = cast ZIF_VCXI_PXSS_FDSUB( IR_GATE_SUB->R_CLSPR )->GET_PRVDR_XCONI( ).
    endif.

    if LR_PR_XCONI is bound.
***   Get connected Connection Out
      LR_GATE_XCONO = LR_PR_XCONI->GET_CONNECTED_GATE( ).

***   Get own linked Components
      LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_XCONO
                                                         IT_FASTD_XCOMP = IT_FASTD_XCOMP ).
      ME->R_BL_FASTD->GET_LINKED_XCOMP( exporting IR_BL_FDMDL            = ME
                                                  IR_GATE_XCOMP          = LR_GATE_XCOMP
                                        importing ET_GATE_XCOMP_BACKWARD = LT_GATE_XCOMP ).
    endif.

    append IR_GATE_XCOMP to LT_GATE_XCOMP.

***------------------------------------------------------------------------------------------------
*** Initialize Sub Fast Data Model
    RR_BL_FDMDL = ZCL_VCXI_PXSS_BL_FDMDL=>GET_INSTANCE( IR_GATE_FASTD      = ME->R_GATE_FASTD
                                                        IR_BL_FDMDL_PARENT = ME
                                                        IT_GATE_OUT        = value #( ( IR_GATE_SUB ) )
                                                        IT_GATE_XCOMP      = LT_GATE_XCOMP ).

  endmethod.
  method GET_UI_FDMDL.

*** UI ABAP Class Name
    data(LF_CLSUI) = ME->GET_CLSUI( ).
    check LF_CLSUI is not initial.

    try.
***     Create UI Instance
        create object RR_UI_FDMDL
          type
            (LF_CLSUI)
          exporting
            IR_UIFW        = IR_UIFW
            IR_UIGATE      = IR_UIGATE
            IR_GATE        = ME->R_GATE_FASTD
            IR_BL_FDMDL    = ME
            IF_APPL_EVENTS = IF_APPL_EVENTS
            IR_GATE_OUT    = IR_GATE_OUT.
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method GET_XSHT.

*** Can only be called for Sheet Models
    if LINES( ME->T_GATE_OUT ) ne 1 or
       not ME->T_GATE_OUT[ 1 ]->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XSHT.
      raise exception type /VCXI/CX_CKX.
    endif.

  endmethod.
  method INIT_FDMDL.
  endmethod.
  method MERGE_FASTD_XCOMP.

    data: LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA,
          LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FDI_XCONO        type ZVCXI_PXSS_S_FDI_XCONO,
          LS_FDI_XCONI        type ZVCXI_PXSS_S_FDI_XCONI.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FDI_XCONO>   type ANY,
                   <S_FDI_XCONI>   type ANY.


***--------------------------------------------------------------------------------------
*** Search for Component with requested Element
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( IT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      check LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = IF_ISELF ] ) and
            LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CRCONO' ] ).

***   Identify Connection Out and then remove it
      LS_FASTD_XCOMP_DATA = <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CRCONO' ].
      assign LS_FASTD_XCOMP_DATA-R_DATA->* to <S_FDI_XCONO>.
      delete <S_FASTD_XCOMP>-T_DATA where ISELF = LS_FASTD_XCOMP_DATA-ISELF.

***   Keep Gate of Component
      LR_GATE_XCOMP = <S_FASTD_XCOMP>-R_GATE.
    endloop.
    check <S_FDI_XCONO> is assigned.
    LS_FDI_XCONO = corresponding #( <S_FDI_XCONO> ).

***--------------------------------------------------------------------------------------
*** Search for Connection In
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( IT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      check LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CRCONI' ] ).

***   Identify Connection In
      LS_FASTD_XCOMP_DATA =  <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CRCONI' ].
      assign LS_FASTD_XCOMP_DATA-R_DATA->* to  <S_FDI_XCONI>.
      LS_FDI_XCONI = corresponding #( <S_FDI_XCONI> ).

***   Check if components are connected
      check LINE_EXISTS( CT_XCONG[ GXCON_OUT = LS_FDI_XCONO-GXCON
                                   GXCON_IN  = LS_FDI_XCONI-GXCON ] ).

***   Remove Connection In and the Connection itself
      delete <S_FASTD_XCOMP>-T_DATA where ISELF = LS_FASTD_XCOMP_DATA-ISELF.
      delete CT_XCONG where GXCON_OUT = LS_FDI_XCONO-GXCON
                       and  GXCON_IN  = LS_FDI_XCONI-GXCON.

***   Combine Components
      append lines of corresponding ZVCXI_PXSS_TT_FASTD_XCOMP_DATA( CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ]-T_DATA
                                                                    except R_GATE GATKY  )
                   to <S_FASTD_XCOMP>-T_DATA.
      delete CT_FASTD_XCOMP where R_GATE = LR_GATE_XCOMP.
    endloop.

  endmethod.
  method REPLACE_XCOMP_DATA.

    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( IT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      check LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = IF_ISELF_OLD ] ).

      assign <S_FASTD_XCOMP>-T_DATA[ ISELF = IF_ISELF_OLD ] to <S_FASTD_XCOMP_DATA>.
      <S_FASTD_XCOMP_DATA>-ISELF = IF_ISELF_NEW.
      clear: <S_FASTD_XCOMP_DATA>-R_GATE,
             <S_FASTD_XCOMP_DATA>-GATKY.
      if IR_DATA is bound.
        <S_FASTD_XCOMP_DATA>-R_DATA = IR_DATA.
      else.
        clear <S_FASTD_XCOMP_DATA>-R_DATA.
      endif.
    endloop.

  endmethod.
  method SET_XSHT.

*** Can only be called for Sheet Models
    if LINES( ME->T_GATE_OUT ) ne 1 or
       not ME->T_GATE_OUT[ 1 ]->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XSHT.
      raise exception type /VCXI/CX_CKX.
    endif.

  endmethod.
  method VALIDATE_GATE_OUT.

    data: LR_PR_XCONI   type ref to ZCL_VCXI_PXSS_PR_XCONI.


***------------------------------------------------------------------------------------------------
    case type of IR_GATE_OUT->R_CLSPR.
***   Replace Sub-Model by related Connection Out if needed
      when type ZIF_VCXI_PXSS_FDSUB into data(LR_FDSUB).
***     Get Connection In
        LR_PR_XCONI = LR_FDSUB->GET_PRVDR_XCONI( ).
        if LR_PR_XCONI is bound.
***       Get connected Connection Out
          RR_GATE_OUT = LR_PR_XCONI->GET_CONNECTED_GATE( ).
        endif.

***------------------------------------------------------------------------------------------------
***   Fallback
      when others.
        RR_GATE_OUT = IR_GATE_OUT.

    endcase.

  endmethod.
