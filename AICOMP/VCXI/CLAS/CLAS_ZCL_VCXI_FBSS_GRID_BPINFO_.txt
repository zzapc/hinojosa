
class ZCL_VCXI_FBSS_GRID_BPINFO definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_FBSS_S_BPINFO_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IT_BPINFO type ZVCXI_FBSS_TT_BPINFO
      !IR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG
      !IF_BGWGT type /VCXI/CKX_UOM
      !IF_LOCKED type /VCXI/CKX_LOCKED default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods GET_BPINFO
    returning
      value(RT_BPINFO) type ZVCXI_FBSS_TT_BPINFO
    raising
      /VCXI/CX_CKX .
protected section.

  data T_BPINFO type ZVCXI_FBSS_TT_BPINFO .
  data R_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG .
  data F_BGWGT type /VCXI/CKX_UOM .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.

  methods ADD_IBPAR
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_IBPAR
    importing
      !IT_BPINFO type ZVCXI_FBSS_TT_BPINFO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods UPDATE_IBPAR
    importing
      !IS_BPINFO type ZVCXI_FBSS_S_BPINFO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_MENU_BUTTON
    for event MENU_BUTTON of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_UCOMM
      !SENDER .
  methods CHECK_IBPAR_ADD
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
    returning
      value(RF_DISABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_GRID_BPINFO definition
class ZCL_VCXI_FBSS_GRID_BPINFO implementation.
  method ADD_IBPAR.

    field-symbols: <S_BPINFO> type ZVCXI_FBSS_S_BPINFO.

    insert initial line into table ME->T_BPINFO assigning <S_BPINFO>.
    move: IF_IBPAR to <S_BPINFO>-IBPAR,
          'CM2'    to <S_BPINFO>-BPARE_UOM,
          'GM2'    to <S_BPINFO>-SURWT_UOM.

  endmethod.
  method CHECK_IBPAR_ADD.

    move ABAP_FALSE to RF_DISABLE.
    read table ME->T_BPINFO with key IBPAR = IF_IBPAR
                           transporting no fields.
    if SY-SUBRC is initial.
      move ABAP_TRUE to RF_DISABLE.
    endif.

  endmethod.
  method CHECK_SEL_DELETE.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
    if LINES( LT_CELL ) gt 0 or
       LINES( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

    move IF_BGWGT    to ME->F_BGWGT.
    move IF_LOCKED   to ME->F_LOCKED.
    move IT_BPINFO[] to ME->T_BPINFO[].
    move IR_CUST_BAG to ME->R_CUST_BAG.

  endmethod.
  method DELETE_IBPAR.

    data: LS_BPINFO type ZVCXI_FBSS_S_BPINFO,
          LS_INDEX  type ZVCXI_FBSS_S_BPINFO.

*** Process Result
    loop at IT_BPINFO into LS_BPINFO.
***   Delete ID of Bag Part
      read table ME->T_BPINFO into LS_INDEX with key IBPAR = LS_BPINFO-IBPAR.
      check SY-SUBRC is initial.

      delete ME->T_BPINFO index SY-TABIX.
    endloop.

  endmethod.
  method GET_BPINFO.

    move ME->T_BPINFO[] to RT_BPINFO[].

  endmethod.
  method GET_FIELDCAT.

    field-symbols: <S_FCAT> type LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL' or 'SURWT' or 'SURWT_UOM'.
          move ABAP_TRUE to <S_FCAT>-TECH.

***     Adjust Field Label of Bag Part
        when 'IBPAR'.
          move text-D01 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.
          move: 'A' to <S_FCAT>-COL_OPT,
                1   to <S_FCAT>-COL_POS.

        when 'IBPAR_DESCR'.
          move text-D02 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.
          move: 'A' to <S_FCAT>-COL_OPT,
                1   to <S_FCAT>-COL_POS.

        when 'BPARE' or 'BPWGT'.
          move ME->F_LOCKED to <S_FCAT>-EDIT.

      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_BPINFO      type ZVCXI_FBSS_S_BPINFO,
          LS_BPINFO_GRID type ZVCXI_FBSS_S_BPINFO_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

    loop at ME->T_BPINFO into LS_BPINFO.
      clear: LS_BPINFO_GRID.

      move: LS_BPINFO to LS_BPINFO_GRID-S_BPINFO.

***   Get Bag Part description
      if ME->R_CUST_BAG is bound.
        ME->R_CUST_BAG->GET_BPART_INFO( exporting IF_IBPAR = LS_BPINFO-IBPAR
                                        importing EF_DESCR = LS_BPINFO_GRID-IBPAR_DESCR ).
      endif.

      if ME->F_LOCKED eq ABAP_TRUE.
        if LS_BPINFO_GRID-BPWGT_UOM is initial.
          move ME->F_BGWGT to LS_BPINFO_GRID-BPWGT_UOM.
        endif.

      else.

        if LS_BPINFO_GRID-BPWGT_UOM is initial.
          move ME->F_BGWGT to LS_BPINFO_GRID-BPWGT_UOM.
        endif.

      endif.

      if LS_BPINFO-BPARE is not initial.
***       Calculate Bag Part Weight
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO-BPARE
                                                            IF_CALCV_UOM_1 = LS_BPINFO-BPARE_UOM
                                                            IF_CALCV_2     = LS_BPINFO-SURWT
                                                            IF_CALCV_UOM_2 = LS_BPINFO-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                            IF_UOM         = ME->F_BGWGT
                                                  importing EF_CALCV       = LS_BPINFO_GRID-BPWGT
                                                            EF_CALCV_UOM   = LS_BPINFO_GRID-BPWGT_UOM ).
      endif.

***--------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_BPINFO_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    move ABAP_TRUE to RS_LAYOUT-CWIDTH_OPT.
    move 'T_STYL'  to RS_LAYOUT-STYLEFNAME.
    move ''        to RS_LAYOUT-EDIT.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_BPINFO      type          ZVCXI_FBSS_S_BPINFO,
          LS_BPINFO_GRID type          ZVCXI_FBSS_S_BPINFO_GRID.
    data: LR_CX_CKX           type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.

        SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                       ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.

          read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
          check SY-SUBRC eq 0.

          move-corresponding <S_DATA> to LS_BPINFO_GRID.

          move: LS_BPINFO_GRID-IBPAR   to LS_BPINFO-IBPAR,
                LS_BPINFO_GRID-S_BPARE to LS_BPINFO-S_BPARE.

          if LS_BPINFO-BPARE is not initial.
***         Calculate Surface Weight
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO_GRID-BPWGT
                                                                IF_CALCV_UOM_1 = LS_BPINFO_GRID-BPWGT_UOM
                                                                IF_CALCV_2     = LS_BPINFO_GRID-BPARE
                                                                IF_CALCV_UOM_2 = LS_BPINFO_GRID-BPARE_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                                IF_UOM         = LS_BPINFO_GRID-SURWT_UOM
                                                      importing EF_CALCV       = LS_BPINFO-SURWT
                                                                EF_CALCV_UOM   = LS_BPINFO-SURWT_UOM ).
          endif.

***       Update
          ME->UPDATE_IBPAR( IS_BPINFO = LS_BPINFO ).

        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LF_DISABLED type        ABAP_BOOL,
          LF_FCODE    type        UI_FUNC,
          LF_TEXT     type        GUI_TEXT,
          LF_DESCR    type        /VCXI/CKX_DESCR,
          LF_ID       type        /VCXI/CKX_ID,
          LF_IBPAR    type        ZVCXI_FBS_IBPAR.
    data: LT_IBPAR  type /VCXI/CKX_TT_ID.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    check E_OBJECT is bound.
    check E_UCOMM eq C_FCODE_ADD.

    try.

        if ME->F_LOCKED eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

        move ME->R_CUST_BAG->GET_IBPAR( ) to LT_IBPAR.

        loop at LT_IBPAR into LF_ID.
          clear: LF_FCODE, LF_TEXT, LF_IBPAR.

          move LF_ID to LF_IBPAR.

***       Get Function Code
          concatenate C_FCODE_ADD LF_IBPAR into LF_FCODE separated by '@'.

***       Get Description
          ME->R_CUST_BAG->GET_BPART_INFO( exporting IF_IBPAR = LF_IBPAR
                                          importing EF_DESCR = LF_DESCR ).
          move LF_DESCR to LF_TEXT.

          search LF_TEXT for '&'.
          if SY-FDPOS is not initial.
            concatenate LF_TEXT+0(SY-FDPOS) ' &' LF_TEXT+SY-FDPOS into LF_TEXT.
          endif.

***       Check if Entry can be added
          LF_DISABLED = ME->CHECK_IBPAR_ADD( IF_IBPAR = LF_IBPAR ).

***       Add Function
          E_OBJECT->ADD_FUNCTION( FCODE    = LF_FCODE
                                  TEXT     = LF_TEXT
                                  DISABLED = LF_DISABLED ).
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LF_DISABLED     type        ABAP_BOOL.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR> type STB_BUTTON.

    try.

        if ME->F_LOCKED eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements Add, Delete
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_ADD               to <S_TOOLBAR>-FUNCTION,
              text-T02                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_MENU              to <S_TOOLBAR>-BUTN_TYPE,
              ICON_INSERT_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        if LINES( ME->T_BPINFO ) is initial.
          move ABAP_TRUE to LF_DISABLED.
        endif.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DELETE            to <S_TOOLBAR>-FUNCTION,
              text-T03                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DELETE_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_USER_COMMAND.

    data: LF_UCOMM type SYUCOMM,
          LF_IBPAR type ZVCXI_FBS_IBPAR.
    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.
    data: LT_CELL   type LVC_T_CELL,
          LT_ROW    type LVC_T_ROW,
          LT_BPINFO type ZVCXI_FBSS_TT_BPINFO.
    data: LR_CX_CKX type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>   type standard table,
                   <S_BPINFO> type          ZVCXI_FBSS_S_BPINFO,
                   <S_DATA>   type          ANY.

    try.
***     Get Handles
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
        ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

***     Pre-check User command
        split E_UCOMM at '@' into LF_UCOMM LF_IBPAR.

        case LF_UCOMM.
          when C_FCODE_ADD.
***         Add new Id of Bag Part
            ME->ADD_IBPAR( IF_IBPAR = LF_IBPAR ).

          when C_FCODE_DELETE.
***         Delete Conv. Step
            if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***           No rows selected. Please select all rows you want to delete.
              raise exception type /VCXI/CX_CKX
                exporting
                  F_MSGTY = 'E'
                  F_MSGID = 'ZVCXI_FBSSC'
                  F_MSGNO = '056'.
            endif.

***         Get Selected Id of Bag Part
            loop at LT_CELL into LS_CELL.
              read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BPINFO assigning <S_BPINFO>.
              move-corresponding <S_DATA> to <S_BPINFO>.
            endloop.

            loop at LT_ROW into LS_ROW.
              read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BPINFO assigning <S_BPINFO>.
              move-corresponding <S_DATA> to <S_BPINFO>.
            endloop.

***         Delete Selected ID of Bag Parts
            ME->DELETE_IBPAR( IT_BPINFO = LT_BPINFO ).

          when others.

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Add Event for UserCommand and Toolbar
    set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
    set handler ME->HANDLE_MENU_BUTTON  for ME->R_GRID.

  endmethod.
  method UPDATE_IBPAR.

    field-symbols: <S_BPINFO> type ZVCXI_FBSS_S_BPINFO.

    read table ME->T_BPINFO  assigning <S_BPINFO> with key IBPAR = IS_BPINFO-IBPAR.
    check SY-SUBRC is initial.

    move: IS_BPINFO-BPARE to <S_BPINFO>-BPARE,
          IS_BPINFO-SURWT to <S_BPINFO>-SURWT.

  endmethod.
