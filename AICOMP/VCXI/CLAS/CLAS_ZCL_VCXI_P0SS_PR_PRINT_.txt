
class ZCL_VCXI_P0SS_PR_PRINT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_WEIGHT .

  constants C_CHECK_NOCOL type CHAR30 value 'NOCOL'. "#EC NOTEXT
  constants C_CHECK_TOOL type CHAR30 value 'CHECK_PRTO'. "#EC NOTEXT
  constants C_IEVNT_O_NOCOL_CHANGED type /VCXI/VKSC_IEVNT value 'NOCOL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TOOL_CHANGED type /VCXI/VKSC_IEVNT value 'TOOL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TOOL_DATA_LOADED type /VCXI/VKSC_IEVNT value 'TOOL_DATA_LOADED'. "#EC NOTEXT
  constants C_IPRVT_P0_PRINT type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_PRINT'. "#EC NOTEXT
  constants C_PARID_FPRFS type /VCXI/VKS_PARID value 'ZVCXI_P0_FPRFS'. "#EC NOTEXT
  constants C_PARID_NOCOL type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOL'. "#EC NOTEXT
  constants C_PARID_PRCAN type /VCXI/VKS_PARID value 'ZVCXI_P0_PRCAN'. "#EC NOTEXT
  constants C_PARID_PRSID type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSID'. "#EC NOTEXT
  constants C_PARID_PRTON type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTON'. "#EC NOTEXT
  constants C_PARID_PRTYP type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYP'. "#EC NOTEXT
  constants C_PARID_SHTDI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTDI'. "#EC NOTEXT
  constants C_PARID_SUTYP type /VCXI/VKS_PARID value 'ZVCXI_P0_SUTYP'. "#EC NOTEXT
  constants C_PARID_WWETA type /VCXI/VKS_PARID value 'ZVCXI_P0_WWETA'. "#EC NOTEXT
  constants C_PARID_WWETW type /VCXI/VKS_PARID value 'ZVCXI_P0_WWETW'. "#EC NOTEXT
  constants C_PRSID_I type ZVCXI_P0S_PRSID value 'I'. "#EC NOTEXT
  constants C_PRSID_O type ZVCXI_P0S_PRSID value 'O'. "#EC NOTEXT
  constants C_SETID_PRTO type /VCXI/CKXC_SETID value 'ZVCXI_P0S_PRTO'. "#EC NOTEXT
  constants C_ATTID_CALCULATED type /VCXI/VKS_ATTID value 'CALCULATED'. "#EC NOTEXT

  type-pools ABAP .
  methods IS_MARK_ACTIVE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MS_INK
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MARK
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TOTAL_MS_INK_COVRG
    importing
      !IT_GATE_MARK type /VCXI/VKSR_TT_GATE
      !IR_GATE_MS_INK type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RS_COVRG) type ZVCXI_P0S_S_COVRG
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL_TOOL
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_INK_NO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_INK_NO) type CHAR02
    raising
      /VCXI/CX_CKX .
  methods CHECK_MARK_INK
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FPRFS
    returning
      value(RF_FPRFS) type ZVCXI_P0SS_FPRFS
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_LTITO
    returning
      value(RS_LTITO) type ZVCXI_P0S_S_LTITO
    raising
      /VCXI/CX_CKX .
  methods GET_PRCAN
    returning
      value(RF_PRCAN) type ZVCXI_P0SS_PRCAN
    raising
      /VCXI/CX_CKX .
  methods GET_PRSID
    returning
      value(RF_PRSID) type ZVCXI_P0S_PRSID
    raising
      /VCXI/CX_CKX .
  methods GET_PRSID_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTON
    returning
      value(RF_PRTON) type ZVCXI_P0SS_PRTON
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP
    returning
      value(RF_PRTYP) type ZVCXI_P0S_PRTYP
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDI
    returning
      value(RF_SHTDI) type ZVCXI_P0SS_SHTDI
    raising
      /VCXI/CX_CKX .
  methods GET_SUTYP
    returning
      value(RF_SUTYP) type ZVCXI_P0S_SUTYP
    raising
      /VCXI/CX_CKX .
  methods GET_WWETA
    returning
      value(RS_WWETA) type ZVCXI_P0SS_S_WWETA
    raising
      /VCXI/CX_CKX .
  methods GET_WWETW
    returning
      value(RS_WWETW) type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods IS_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FPRFS
    importing
      !IF_FPRFS type ZVCXI_P0SS_FPRFS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_LTITO
    importing
      !IS_LTITO type ZVCXI_P0S_S_LTITO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRCAN
    importing
      !IF_PRCAN type ZVCXI_P0SS_PRCAN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSID
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTON
    importing
      !IF_PRTON type ZVCXI_P0SS_PRTON
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYP
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SUTYP
    importing
      !IF_SUTYP type ZVCXI_P0S_SUTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CUST_PRINT type /VCXI/VKSC_IEVNT value 'INIT_CUST_PRINT'. "#EC NOTEXT
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WWETW type /VCXI/VKSC_IEVNT value 'RECALC_WWETW'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_PRINT_DATA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_PRINT_DATA_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_DATA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PRTYP_CHANGED type /VCXI/VKSC_IEVNT value 'PRTYP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WWETW_CHANGED type /VCXI/VKSC_IEVNT value 'WWETW_CHANGED'. "#EC NOTEXT
  constants C_MCTXT_SVC type /VCXI/CKXC_MCTXT value 'ZVCXI_SVC'. "#EC NOTEXT
  constants C_PARID_LTITO_A type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_A'. "#EC NOTEXT
  constants C_PARID_LTITO_L type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_L'. "#EC NOTEXT
  constants C_PARID_LTITO_P type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_P'. "#EC NOTEXT
  constants C_PARID_LTITO_W type /VCXI/VKS_PARID value 'ZVCXI_P0_LTITO_W'. "#EC NOTEXT
  constants C_SETID_P0S_PRTO type /VCXI/CKXC_SETID value 'ZVCXI_P0S_PRTO'. "#EC NOTEXT
  constants C_WA_1M2 type ZVCXI_P0SS_WWETA value 1. "#EC NOTEXT
  constants C_WA_1M2_UOM type UNIT value 'M2'. "#EC NOTEXT
  data F_PARID_LTITO type /VCXI/VKS_PARID .
  data R_CUST_PRINT type ref to ZCL_VCXI_P0SS_CUST_PRINT .

  methods CHECK_NOCOL_TOOL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL
    returning
      value(RR_PRINT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOCOL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRSID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRTYP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SUTYP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WWETW
    raising
      /VCXI/CX_CKX .
  methods SET_WWETA
    importing
      !IS_WWETA type ZVCXI_P0SS_S_WWETA
    raising
      /VCXI/CX_CKX .
  methods SET_WWETW
    importing
      !IS_WWETW type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_PRINT definition
class ZCL_VCXI_P0SS_PR_PRINT implementation.
method CHECK_MARK_INK.

  data:  LF_INDEX           type        I,
         LF_ACONO           type        ZVCXI_P0SS_ACONO.
  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK       type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.

*** Set initial return value negative
  move '1' to RF_RETURN.

*** Try to get the correct reference
  try.
      if IR_GATE          is bound and
         IR_GATE->R_CLSPR is bound.
        move IR_GATE->R_CLSPR ?to LR_PR_MS_INK.
***--------------------------------------------------------------------------------------
***     Check if Ink Coverage is empty but Marking Coverage is maintained
***     If set up of Ink ref was successful, get Marking data and compare
        if LR_PR_MS_INK is bound.
          LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                           IF_INUSE = ABAP_TRUE ).

          read table LT_GATE into LR_GATE with table key TABLE_LINE = IR_GATE.
          move SY-TABIX to LF_INDEX.

***       Get Marking Data
          LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                           IF_INUSE = ABAP_TRUE ).

          loop at LT_GATE into LR_GATE.
            try.
                if LR_GATE          is bound and
                   LR_GATE->R_CLSPR is bound.
                  move LR_GATE->R_CLSPR ?to LR_PR_MARK.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_PR_MARK.
            endtry.

            check LR_PR_MARK is bound.
            LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
            check LF_ACONO eq LF_INDEX.

            LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
            check LS_COVRG-COVRG ge '1'.
            move '0' to RF_RETURN.

          endloop.
          clear: LR_PR_MARK, LR_PR_MS_INK.
        endif.
        exit.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_MS_INK.
  endtry.



  try.
      if IR_GATE          is bound and
         IR_GATE->R_CLSPR is bound.
        move IR_GATE->R_CLSPR ?to LR_PR_MARK.

***--------------------------------------------------------------------------------------
***     Check if maintained Ink Reference of Marking exists
        if LR_PR_MARK is bound.
          LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
          if LF_ACONO is not initial.
            LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                             IF_INUSE = ABAP_TRUE ).

            read table LT_GATE into LR_GATE index LF_ACONO.
            check SY-SUBRC eq 0.
            move '0' to RF_RETURN.
          endif.
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_MARK.
  endtry.

endmethod.
method CHECK_NOCOL.

*** 0 = Number of Colors is maintained.
*** 1 = Number of Colors is not maintained.
*** 2 = Number of Colors match Tooling Informations.
*** 3 = Number of Colors do not match Tooling Informations.

  data:  LF_PARID      type        /VCXI/VKS_PARID,
         LF_CHECK      type        CHAR30,
         LF_CHECK_TOOL type        ABAP_BOOL,
         LF_NOCOL      type        ZVCXI_P0S_NOCOL.
  data:  LS_FUNCT      type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_FUNCT      type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

  LF_NOCOL = ME->GET_NOCOL( ).

  if LF_NOCOL is initial.
    move 1 to RF_RETURN.
  else.
*** Do we need a normal Check or a check agains printing Tool
*** Get Active Checks
    LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Split check and get Parameter
    loop at LT_FUNCT into LS_FUNCT.
      split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
      check LF_CHECK eq C_CHECK_TOOL and
            LF_PARID eq C_CHECK_NOCOL.
      move ABAP_TRUE to LF_CHECK_TOOL.
      exit.
    endloop.

    if LF_CHECK_TOOL eq ABAP_FALSE.
      move 0 to RF_RETURN.
    else.
      RF_RETURN = ME->CHECK_NOCOL_TOOL( ).
    endif.
  endif.

endmethod.
method CHECK_NOCOL_TOOL.

*** 2 = Number of Colors match Tooling Informations.
*** 3 = Number of Colors do not match Tooling Informations.

  data:  LF_NOCOL_TOOL      type        ZVCXI_P0S_NOCOL,
         LF_NOCOL           type        ZVCXI_P0S_NOCOL.
  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK       type ref to ZCL_VCXI_P0SS_PR_MS_INK.

***--------------------------------------------------------------------------------------
*** Get all Ink's which have
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
***--------------------------------------------------------------------------------------
*** Get Coverage of Ink
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_INK.
    endtry.
    check LR_PR_MS_INK is bound.

    LR_PR_MS_INK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
    if LS_COVRG-COVRG is not initial.
      add 1 to LF_NOCOL.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Number of Inks from Tool
  LF_NOCOL_TOOL = ME->GET_NOCOL_TOOL( ).

  if LF_NOCOL_TOOL ne LF_NOCOL.
    move 3 to RF_RETURN.
  else.
    move 2 to RF_RETURN.
  endif.

endmethod.
method CHECK_PRSID.
*** 0 = Print Side is maintained and valid.
*** 1 = Print Side is not maintained.
*** 2 = Print Side is not valid.

  data:  LF_PRSID type ZVCXI_P0S_PRSID.

  LF_PRSID = ME->GET_PRSID( ).

  if LF_PRSID is initial.
    move 1 to RF_RETURN.
  else.
    if LF_PRSID ne C_PRSID_I and
       LF_PRSID ne C_PRSID_O.
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_PRTYP.

*** 0 = Print Type is maintained and valid.
*** 1 = Print Type is not maintained.
*** 2 = Print Type is not valid.

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYP( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_SUTYP.

*** 0 = Surface Type is maintained and valid.
*** 1 = Surface Type is not maintained.
*** 2 = Surface Type is not valid.

  data:  LT_DD07V type table of DD07V.
  data:  LF_SUTYP type          ZVCXI_P0S_SUTYP.

  LF_SUTYP = ME->GET_SUTYP( ).

  if LF_SUTYP is initial.
    move 1 to RF_RETURN.
  else.
*** Check Values
    call function 'DDIF_DOMA_GET'
      exporting
        NAME          = 'ZVCXI_P0S_SUTYP'
        LANGU         = SY-LANGU
      tables
        DD07V_TAB     = LT_DD07V
      exceptions
        ILLEGAL_INPUT = 1
        others        = 2.
    if SY-SUBRC <> 0.
      move 2 to RF_RETURN.
      exit.
    endif.

    read table LT_DD07V with key DOMVALUE_L = LF_SUTYP transporting no fields.
    if SY-SUBRC ne 0.
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_PARID      type        /VCXI/VKS_PARID,
         LF_CHECK      type        CHAR30,
         LF_INVALID    type        ABAP_BOOL,
         LF_MSGV1      type        SYMSGV.
  data:  LR_PRINT_TOOL type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET     type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA      type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC      type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM      type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN      type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT      type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID      type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT      type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool
  LR_PRINT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Print Tool only if it is activ/it exist
  if   LR_PRINT_TOOL                     is not bound  or
     ( LR_PRINT_TOOL                     is bound      and
     ( LR_PRINT_TOOL->F_CHECK_MATNR      eq ABAP_FALSE or
       LR_PRINT_TOOL->F_CHECK_MAT_MARC   eq ABAP_FALSE or
       LR_PRINT_TOOL->CHECK_IS_TOOL( )   ne abap_true     ) ).
    RF_RETURN = 1.

    if IR_MESSAGE is supplied.
***   Tool is not valid or do not exist.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '703'
                               IF_MSGV1 = LF_MSGV1 ).
    endif.
    exit.
  endif.


  append C_SETID_PRTO to LT_SETID.

*** Check Mapping Set if Needed
  read table LT_FUNCT with key IFUNC = 'CHECK_TOOL_CLASS' transporting no fields.
  if SY-SUBRC = 0.
    if LR_PRINT_TOOL->CHECK_MAPSET( IT_SETID = LT_SETID ) ne ABAP_TRUE.

      RF_RETURN = 1.
      if IR_MESSAGE is supplied.
***     Tool is not valid. Please Check Classification. No Values maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '704' ).
      endif.
    endif.
  endif.

  LR_PRINT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Print Tool Mapping Mapping
  read table LR_PRINT_TOOL->T_MAPSET into LS_MAPSET with key SETID = C_SETID_PRTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq C_CHECK_TOOL and
          LF_PARID is not initial.

    check LF_PARID ne C_CHECK_NOCOL.

    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Unit of Parametr
  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Tool Life Time
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_LTITO_A or
                          PARID eq C_PARID_LTITO_L or
                          PARID eq C_PARID_LTITO_P or
                          PARID eq C_PARID_LTITO_W ).
    move LS_PARAM-PARID to ME->F_PARID_LTITO.
    exit.
  endloop.

endmethod.
method GET_DESCR.

  data:  LF_DESCR type /VCXI/CKX_DESCR,
         LF_PRSID type ZVCXI_P0S_PRSID.

  RF_DESCR = SUPER->GET_DESCR( ).

  LF_DESCR = ME->GET_PRSID_DESCR( ).
  if LF_DESCR is not initial.
    concatenate RF_DESCR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    LF_PRSID = ME->GET_PRSID( ).
    if LF_PRSID is not initial.
      concatenate RF_DESCR '-' LF_PRSID into RF_DESCR separated by SPACE.
    endif.
  endif.

endmethod.
method GET_FPRFS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRFS ).
  move LS_PARAM-ATWRT to RF_FPRFS.

endmethod.
method GET_INK_NO.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE with key TABLE_LINE = IR_GATE transporting no fields.
  move SY-TABIX to RF_INK_NO.

endmethod.
method GET_LTITO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_LTITO ).
  move LS_PARAM-ATFLV to RS_LTITO-LTITO.
  move LS_PARAM-UNIT  to RS_LTITO-LTITO_UOM.

endmethod.
method GET_MARK.

  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
method GET_MS_INK.

  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
method GET_NOCOL.

  data:  LT_GATE   type /VCXI/VKSR_TT_GATE.

*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

  move LINES( LT_GATE ) to RF_NOCOL.

endmethod.
method GET_NOCOL_TOOL.

  data:  LS_MAPSET          type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA           type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC           type        /VCXI/CKXC_S_MAPVC,
         LS_MAPVN           type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETID           type        ZVCXI_XCS_TT_SETID.
  data:  LR_PRINT_TOOL      type ref to ZCL_VCXI_XCS_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Get Number of Inks from Tool
*** Get Tool
  LR_PRINT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Print Tool
  check LR_PRINT_TOOL is bound.
  append C_SETID_PRTO to LT_SETID.
  LR_PRINT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Print Tool Mapping Mapping
  read table LR_PRINT_TOOL->T_MAPSET into LS_MAPSET with key SETID = C_SETID_PRTO.
  check SY-SUBRC = 0.

*** Compare values
  read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = C_CHECK_NOCOL.
  if SY-SUBRC = 0.

***   Get the right Value
    if LS_SETVA-T_MAPVC is not initial.
      read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
      move LS_MAPVC-VAMAP to RF_NOCOL.
    elseif LS_SETVA-T_MAPVN is not initial.
      read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
      move LS_MAPVN-ATFLV to RF_NOCOL.
    endif.
  endif.

endmethod.
method GET_PRCAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRCAN ).
  move LS_PARAM-ATWRT to RF_PRCAN.

endmethod.
method GET_PRSID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).
  move LS_PARAM-ATWRT to RF_PRSID.

endmethod.
method GET_PRSID_DESCR.

  data:  LF_PRSID type ZVCXI_P0S_PRSID.

  move ME->GET_PRSID( ) to LF_PRSID.

*** Get Buffered Description
  move ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRSID_DESCR( IF_PRSID = LF_PRSID ) to RF_DESCR.

endmethod.
method GET_PRTON.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTON ).
  move LS_PARAM-ATWRT to RF_PRTON.

endmethod.
method GET_PRTYP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYP ).
  move LS_PARAM-ATWRT to RF_PRTYP.

endmethod.
method GET_PRTYP_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYP( ).
  RF_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_SHTDI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).
  move LS_PARAM-ATWRT to RF_SHTDI.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Print Side
  case ME->CHECK_PRSID( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Print Type
  case ME->CHECK_PRTYP( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Number of Colors
  case ME->CHECK_NOCOL( ).
    when 0 or 2.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Surface Type
  case ME->CHECK_SUTYP( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Tools
  if ME->GET_PRTON( ) is not initial.
    case ME->CHECK_TOOL_VALUES( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.
  endif.

endmethod.
method GET_STATUS_MSG.

***----------------------------------------------------------------------------
*** Super
  SUPER->GET_STATUS_MSG( IR_MESSAGE =  IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Print Side
  case ME->CHECK_PRSID( ).
*** Print Side is maintained and valid.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '301' ).
*** Print Side is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '302' ).
*** Print Side is not valid.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '303' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Print Type
  case ME->CHECK_PRTYP( ).
*** Print Type is maintained and valid.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '307' ).
*** Print Type is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '308' ).
*** Print Type is not valid.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '309' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Number of Colors
  case ME->CHECK_NOCOL( ).
*** Number of Colors is maintained.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '313' ).
*** Number of Colors is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '314' ).
*** Number of Colors match Tooling Informations.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '327' ).
*** Number of Colors do not match Tooling Informations.
    when 3.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '328' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Surface Type
  case ME->CHECK_SUTYP( ).
*** Surface Type is maintained and valid.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '319' ).
*** Surface Type is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '320' ).
*** Surface Type is not valid.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '321' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Tool Values
  if ME->GET_PRTON( ) is not initial.
    ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).
  endif.

endmethod.
method GET_SUTYP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUTYP ).
  move LS_PARAM-ATWRT to RF_SUTYP.

endmethod.
method GET_TOOL.

  data:  LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.
  data:  LF_PRTON          type        ZVCXI_P0SS_PRTON,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

  move ME->GET_PRTON( ) to LF_PRTON.

*** Get Printing Tool Customizing Instance
  RR_PRINT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_PRTON
                                                         IF_WERKS = LF_WERKS ).

endmethod.
method GET_TOTAL_MS_INK_COVRG.

  data:  LF_INDEX           type        I,
         LF_ACONO           type        ZVCXI_P0SS_ACONO.
  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK       type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.

  try.
      check IR_GATE_MS_INK          is bound and
            IR_GATE_MS_INK->R_CLSPR is bound.
***--------------------------------------------------------------------------------------
***   Get Ink Number
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                       IF_INUSE = ABAP_TRUE ).

      read table LT_GATE with table key TABLE_LINE = IR_GATE_MS_INK transporting no fields.
      check SY-SUBRC = 0.
      move SY-TABIX to LF_INDEX.

***--------------------------------------------------------------------------------------
***   Get Coverage of Ink and InkNumber
      move IR_GATE_MS_INK->R_CLSPR ?to LR_PR_MS_INK.
      check LR_PR_MS_INK is bound.

      LR_PR_MS_INK->GET_COVRG( importing ES_COVRG = RS_COVRG ).

***   Get Assigned Marking Coverages
      loop at IT_GATE_MARK into LR_GATE.
        try.
            if LR_GATE          is bound and
               LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_PR_MARK.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        check LR_PR_MARK is bound.
        LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
        check LF_ACONO eq LF_INDEX.

        LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
        RS_COVRG-COVRG = RS_COVRG-COVRG + LS_COVRG-COVRG.

      endloop.

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method GET_WWETA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETA ).
  move LS_PARAM-ATFLV to RS_WWETA-WWETA.
  move LS_PARAM-UNIT  to RS_WWETA-WWETA_UOM.

endmethod.
method GET_WWETW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETW ).
  move LS_PARAM-ATFLV to RS_WWETW-WWETW.
  move LS_PARAM-UNIT  to RS_WWETW-WWETW_UOM.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_CUST_PRINT.
      ME->HANDLE_INIT_CUST_PRINT( ).

    when C_IEVNT_I_RECALC_WWETW.
      ME->HANDLE_RECALC_WWETW( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

    when C_IEVNT_I_REQ_PRINT_CHANGED.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_PRINT.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.
  data: LS_WWETA   type        ZVCXI_P0SS_S_WWETA.

  LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).

*** Check if Customizing is the right one
  if ME->R_CUST_PRINT is not bound or
     ME->R_CUST_PRINT->F_WERKS ne LR_APPDATA->F_WERKS.
    ME->R_CUST_PRINT = ZCL_VCXI_P0SS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = LR_APPDATA->F_WERKS ).
  endif.

***--------------------------------------------------------------------------------------
***  Set Area of Wet Weight Default to 1 M2
  LS_WWETA-WWETA     = C_WA_1M2.
  LS_WWETA-WWETA_UOM = C_WA_1M2_UOM.
  ME->SET_WWETA( IS_WWETA = LS_WWETA ).

endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_RECALC_WWETW.

  data:  LS_WWETW        type        ZVCXI_P0SS_S_WWETW,
         LS_WWETW_TMP    type        ZVCXI_P0SS_S_WWETW,
         LS_WWETA        type        ZVCXI_P0SS_S_WWETA,
         LS_AVGCO        type        ZVCXI_XCS_S_AVGCO,
         LS_AVGCP        type        ZVCXI_XCS_S_AVGCP,
         LS_COVRG        type        ZVCXI_P0S_S_COVRG,
         LF_MATNR        type        MATNR,
         LF_SUTYP        type        ZVCXI_P0S_SUTYP.
  data:  LT_GATE         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MARK    type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_INK    type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_APPDATA      type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get all Markings
  LT_GATE_MARK = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                        IF_INUSE = ABAP_TRUE ).

*** Get Date and Surface Type
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
  LF_SUTYP   = ME->GET_SUTYP( ).

*** Get Dry Weight and Wet Weight Area
  LS_WWETW = ME->GET_WWETW( ).
  LS_WWETA = ME->GET_WWETA( ).

*** Clear Wet Weight
  clear: LS_WWETW-WWETW.
  move LS_WWETW-WWETW_UOM to LS_WWETW_TMP-WWETW_UOM.

*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

*** Do Calculation
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
        check LR_PR_MS_INK is bound.

***     Get Average Consumption and Matnr
        LS_AVGCO = LR_PR_MS_INK->GET_AVGCO( ).
        LS_AVGCP = LR_PR_MS_INK->GET_AVGCP( ).
        LF_MATNR = LR_PR_MS_INK->GET_MATNR( ).

***     Get Total Coverage
        LS_COVRG = ME->GET_TOTAL_MS_INK_COVRG( IT_GATE_MARK   = LT_GATE_MARK
                                               IR_GATE_MS_INK = LR_GATE ).


***     in Case of no Purchase Ink -> read Customizing
        if LR_PR_MS_INK->GET_PURCH( ) eq ABAP_FALSE and
           ME->R_CUST_PRINT is bound.

          ME->R_CUST_PRINT->GET_AVGCO( exporting IF_MATNR = LF_MATNR
                                                 IF_ARBPL = SPACE
                                                 IF_SUTYP = LF_SUTYP
                                                 IF_DATE  = LR_APPDATA->F_DCONF
                                       importing ES_AVGCO = LS_AVGCO
                                                 ES_AVGCP = LS_AVGCP ).

        endif.

***     Do Unit Conversion
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_WWETA-WWETA_UOM
                                                           IF_UOM_IN    = LS_AVGCP-AVGCP_UOM
                                                           IF_VALUE_IN  = LS_AVGCP-AVGCP
                                                 importing EF_VALUE_OUT = LS_AVGCP-AVGCP
                                                           EF_UOM_OUT   = LS_AVGCP-AVGCP_UOM ).

        check LS_AVGCP-AVGCP     is not initial and
              LS_AVGCP-AVGCP_UOM is not initial and
              LS_COVRG-COVRG     is not initial and
              LS_COVRG-COVRG_UOM is not initial.

***     Calculate Ink Wet Weight by Average Consumption
        LS_WWETW_TMP-WWETW = ( LS_AVGCO-AVGCO * LS_WWETA-WWETA / LS_AVGCP-AVGCP ).

***     Calculate Ink Wet Weight by Coverage (in overall Wet Weight Unit)
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WWETW_TMP-WWETW
                                                            IF_CALCV_UOM_1 = LS_WWETW_TMP-WWETW_UOM
                                                            IF_CALCV_2     = LS_COVRG-COVRG
                                                            IF_CALCV_UOM_2 = LS_COVRG-COVRG_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                            IF_UOM         = LS_WWETW-WWETW_UOM
                                                  importing EF_CALCV       = LS_WWETW_TMP-WWETW
                                                            EF_CALCV_UOM   = LS_WWETW_TMP-WWETW_UOM ).

***     Add to overall Wet Weight
        LS_WWETW-WWETW     = LS_WWETW-WWETW  + LS_WWETW_TMP-WWETW.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Set Wet Weight
  ME->SET_WWETW( IS_WWETW = LS_WWETW ).

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method IS_CALCULATED.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

*** Read Attribute
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
      move LS_ATTRI-ATTVA to RF_CALCULATED.
    catch /VCXI/CX_CKX.
      clear: RF_CALCULATED.
  endtry.

endmethod.
method IS_MARK_ACTIVE.

  data:          LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definition
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

*** Check if Tape is defined
  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    check LS_PRVDR_DEF-IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK.
    move ABAP_TRUE to RF_RETURN.
    exit.
  endloop.

endmethod.
method SET_FPRFS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRFS ).

  move IF_FPRFS to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_LTITO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_LTITO ).

  move IS_LTITO-LTITO     to LS_PARAM-ATFLV.
  move IS_LTITO-LTITO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TOOL_CHANGED ).
  endif.

endmethod.
method SET_NOCOL.

  data:  LF_NOCOL       type        ZVCXI_P0S_NOCOL,
         LF_INDEX       type        I,
         LF_NO_REFRESH  type        ABAP_BOOL.
  data:  LS_LEOKY       type        /VCXI/VKSR_S_LEOKY,
         LS_PRVDR_DEF   type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE        type        /VCXI/VKSR_TT_GATE,
         LT_PARAM       type        /VCXI/VKSR_TT_PARAM,
         LT_PRVDR_DEF   type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

  move LINES( LT_GATE ) to LF_NOCOL.
  check LF_NOCOL ne IF_NOCOL.

*** Check if existing Inks are all Default
  loop at LT_GATE into LR_GATE.
    LT_PARAM = LR_GATE->GET_PARAM_ALL( ).
    read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                        transporting no fields.
    if SY-SUBRC eq 0.
      move ABAP_TRUE to LF_NO_REFRESH.
      exit.
    endif.
    move LR_GATE->GET_LEOKY( ) to LS_LEOKY.
    if LS_LEOKY-SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to LF_NO_REFRESH.
      exit.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Less Inks needed
  if LF_NOCOL gt IF_NOCOL.
    LF_INDEX = IF_NOCOL + 1.
    loop at LT_GATE into LR_GATE from LF_INDEX.
      LR_GATE->DO_FREE( ).
      delete LT_GATE.
    endloop.
    if LF_NO_REFRESH eq ABAP_TRUE.
      free LT_GATE.
    endif.

***--------------------------------------------------------------------------------------
*** More Inks needed
  else.
    if LF_NO_REFRESH eq ABAP_TRUE.
      free LT_GATE.
    endif.

*** Get Provider Definitions for Inks
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
    check SY-SUBRC = 0.

    LF_INDEX = IF_NOCOL - LF_NOCOL.
    do LF_INDEX times.
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      append LR_GATE to LT_GATE.
    enddo.
  endif.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOCOL_CHANGED ).

endmethod.
method SET_PRCAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRCAN ).

  move IF_PRCAN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_PRSID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).

  move IF_PRSID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_PRTON.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTON ).

  move IF_PRTON to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TOOL_CHANGED ).
  endif.

endmethod.
method SET_PRTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYP ).

  move IF_PRTYP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRTYP_CHANGED ).
  endif.

endmethod.
method SET_SHTDI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).

  move IF_SHTDI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_SUTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SUTYP ).

  move IF_SUTYP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_WWETA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETA ).

  move IS_WWETA-WWETA                      to LS_PARAM-ATFLV.
  move IS_WWETA-WWETA_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).
  endif.


endmethod.
method SET_WWETW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWETW ).

  move IS_WWETW-WWETW                      to LS_PARAM-ATFLV.
  move IS_WWETW-WWETW_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW.

*** No Dry Weight Influence

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WWETW.

  ES_WWETW = ME->GET_WWETW( ).
  ES_WWETA = ME->GET_WWETA( ).

endmethod.
