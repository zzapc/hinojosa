
class ZCL_VCXI_PCSSC_UIC_BOARD definition
  public
  final
  create protected .

public section.
  type-pools ABAP .

  types:
    YI_BOARD type range of ZVCXI_PCS_BOARD .
  types:
    YI_MBOAR type range of ZVCXI_PCSS_MBOAR .
  types:
    YI_FLUTE type range of ZVCXI_PCS_FLUTE .
  types:
    YI_TBOAR type range of ZVCXI_PCSS_TBOAR .

  data F_REFRESH_ALL_REQ type ABAP_BOOL .
  data F_REFRESH_REQ type ABAP_BOOL .
  data I_BOARD type YI_BOARD read-only .
  data I_FLUTE type YI_FLUTE read-only .
  data I_MBOAR type YI_MBOAR read-only .
  data I_TBOAR type YI_TBOAR read-only .
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY read-only .

  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !II_BOARD type YI_BOARD optional
      !II_MBOAR type YI_MBOAR optional
      !II_FLUTE type YI_FLUTE optional
      !II_TBOAR type YI_TBOAR optional
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_IDEST_FIELD,
           IDEST        type ZVCXI_PCSS_IDEST,
           IDEST_DESCR  type /VCXI/CKX_DESCR,
           FIELD        type STRING,
    end   of YS_IDEST_FIELD .
  types:
    YT_IDEST_FIELD type standard table of YS_IDEST_FIELD with default key .

  constants C_FCODE_ADD type UI_FUNC value 'GRID_ADD' ##NO_TEXT.
  constants C_FCODE_COPY type UI_FUNC value 'GRID_COPY' ##NO_TEXT.
  constants C_FCODE_DEL type UI_FUNC value 'GRID_DEL' ##NO_TEXT.
  constants C_UCOMM_GFILTER type SYUCOMM value 'GFILTER' ##NO_TEXT.
  constants C_UCOMM_GFILTER_F type SYUCOMM value 'GFILTER_F' ##NO_TEXT.
  constants C_UCOMM_REFRESH type SYUCOMM value 'REFRESH' ##NO_TEXT.
  data F_FILTER_BOARD type ZVCXI_PCS_BOARD .
  data F_FILTER_MBOAR type ZVCXI_PCSS_MBOAR .
  data R_CONTAINER_DOCKING type ref to CL_GUI_DOCKING_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_OBJMSG_MGR type ref to /VCXI/CL_CKXM_OBJMSG_MGR .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data T_BOARD_OVW_GRID type ZVCXI_PCSSC_TT_BOARD_OVW_GRID .
  data T_BOARD_OVW_GRID_VIEW type ZVCXI_PCSSC_TT_BOARD_OVW_GRID .
  data T_FILTER type LVC_T_FILT .
  data T_ITEM type TREEMCITAC .
  data T_NODE type TREEMCNOTA .
  data T_NODE_OVERVIEW type ZVCXI_PCSSC_TT_NODE_OVERVIEW .

  methods APPLY_GFILTER
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_BOARD_VERSIONS
    returning
      value(RT_BOARD_OVW_GRID) type ZVCXI_PCSSC_TT_BOARD_OVW_GRID
    raising
      /VCXI/CX_CKX .
  methods COPY_EXISTING_VERSION
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
      !IS_COPY_BOARD type ZVCXI_PCSSC_S_BOARD_OVW_GRID optional
    returning
      value(RF_COPY_EXISTING) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_RELATED_BOARDS
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
    returning
      value(RT_BOARD_OVW_GRID) type ZVCXI_PCSSC_TT_BOARD_OVW_GRID
    raising
      /VCXI/CX_CKX .
  methods ADD_COLUMNS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DBLCLK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods GET_NEXT_NODE_KEY
    returning
      value(RF_NODEKEY) type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods GET_OBJECT_OF_NODE
    importing
      !IF_NODE_KEY type TM_NODEKEY
    returning
      value(RR_OBJECT) type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_EXPAND_NO_CHILDREN
    for event EXPAND_NO_CHILDREN of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_CALL_MV
    importing
      !IF_VIEW_NAME type DD02V-TABNAME
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CALL_VC
    importing
      !IF_VIEW_NAME type DD02V-TABNAME
    raising
      /VCXI/CX_CKX .
  class-methods GET_MBOAR_DESCR
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_LANGU type LANGU default SY-LANGU
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CHECK_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COWID_GEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_UC_FLUTE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_BOARD
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods GET_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_GFILTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_BOARD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MSG_DBLCLK
    for event OBJMSG_DOUBLE_CLICK of /VCXI/CL_CKXM_OBJMSG_MGR
    importing
      !IR_OBJECT .
  methods ADD_SUBNODES
    importing
      !IF_RELATKEY type TM_NODEKEY optional
      !IT_BOARD_OVW_GRID type ZVCXI_PCSSC_TT_BOARD_OVW_GRID
      !IF_BOARD_MODE type ABAP_BOOL optional
      !IF_BOARD_OVW type ABAP_BOOL optional
      !IF_BOARD_VERS type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
private section.

  data F_NODEKEY_COUNTER type I .
  data T_IDEST_FIELD type YT_IDEST_FIELD .
  data T_SORT type LVC_T_SORT .

  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_UIC_BOARD definition
class ZCL_VCXI_PCSSC_UIC_BOARD implementation.
method ADD_COLUMNS .

*** Add the one and only column
  ME->R_TREE->ADD_COLUMN( exporting
                            NAME                = 'BOARD'
                            HIDDEN              = SPACE
                            DISABLED            = SPACE
                            ALIGNMENT           = SPACE
                            WIDTH               = '60'
                            HEADER_IMAGE        = SPACE
                            HEADER_TEXT         = 'Board IDs'(201)
                            HEADER_TOOLTIP      = SPACE
                          exceptions
                            COLUMN_EXISTS       = 1
                            ILLEGAL_COLUMN_NAME = 2
                            TOO_MANY_COLUMNS    = 3
                            ILLEGAL_ALIGNMENT   = 4
                            others              = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method ADD_SUBNODES.

  data: LF_NODEKEY_FOLDER type        TM_NODEKEY,
        LF_VALFR          type        CHAR30,
        LF_VALTO          type        CHAR30.
  data: LS_NODE           type        TREEMCNODT,
        LS_BOARD_OVW_GRID type        ZVCXI_PCSSC_S_BOARD_OVW_GRID,
        LS_NODE_OVERVIEW  type        ZVCXI_PCSSC_S_NODE_OVERVIEW.
  data: LT_NODE_ADDED type        TREEMCNOTA,
        LT_ITEM_ADDED type        TREEMCITAC.
  data:          LR_OBJECT           type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_ITEM>            type        TREEMCITEN.

  loop at IT_BOARD_OVW_GRID into LS_BOARD_OVW_GRID.
***----------------------------------------------------------------------------
*** Add Node
    clear: LS_NODE, LS_NODE_OVERVIEW.
*** Get new Node Key
    move ME->GET_NEXT_NODE_KEY( ) to LF_NODEKEY_FOLDER.

*** Node Overview
    LS_NODE_OVERVIEW-RELATKEY   = IF_RELATKEY.
    LS_NODE_OVERVIEW-NODE_KEY   = LF_NODEKEY_FOLDER.
    LS_NODE_OVERVIEW-MBOAR      = LS_BOARD_OVW_GRID-MBOAR.
    LS_NODE_OVERVIEW-BOARD      = LS_BOARD_OVW_GRID-BOARD.
    append LS_NODE_OVERVIEW to ME->T_NODE_OVERVIEW.

*** Node Information
    LS_NODE-RELATKEY   = IF_RELATKEY.
    LS_NODE-NODE_KEY   = LF_NODEKEY_FOLDER.
    LS_NODE-RELATSHIP  = CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD.
    LS_NODE-STYLE      = CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT.
    LS_NODE-ISFOLDER   = 'X'.
    LS_NODE-EXPANDER   = 'X'.
*** Get The right Icon
    case ABAP_TRUE.
      when IF_BOARD_MODE.
        LS_NODE-N_IMAGE = ICON_ACTIVITY_GROUP.
      when IF_BOARD_OVW.
        if LS_BOARD_OVW_GRID-MBOAR eq 'S'.
          LS_NODE-N_IMAGE = ICON_CONTRACT_ACCOUNT.
        elseif LS_BOARD_OVW_GRID-MBOAR eq 'P'.
          LS_NODE-N_IMAGE = ICON_TOOLS.
        endif.
      when IF_BOARD_VERS.
        LS_NODE-N_IMAGE = ICON_COMPOSITE_ACTIVITYGROUP.
    endcase.
    LS_NODE-EXP_IMAGE = LS_NODE-N_IMAGE.
*** Get Object if needed
    if IF_BOARD_VERS eq ABAP_TRUE.
      try.
          move LS_BOARD_OVW_GRID-BOARD_G ?to LR_OBJECT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_OBJECT.
      endtry.
      if LR_OBJECT is bound.
        LS_NODE-USEROBJECT = LR_OBJECT.
      endif.
    endif.
    append LS_NODE to LT_NODE_ADDED.

*** Items
    append initial line to LT_ITEM_ADDED assigning <S_ITEM>.
    move LS_NODE-NODE_KEY                                 to <S_ITEM>-NODE_KEY.
    move 'BOARD'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    case ABAP_TRUE.
      when IF_BOARD_MODE.
        <S_ITEM>-TEXT = ZCL_VCXI_PCSSC_UIC_BOARD=>GET_MBOAR_DESCR( IF_MBOAR = LS_BOARD_OVW_GRID-MBOAR ).
      when IF_BOARD_OVW.
        move LS_BOARD_OVW_GRID-BOARD                      to <S_ITEM>-TEXT.
      when IF_BOARD_VERS.
        write LS_BOARD_OVW_GRID-VALFR to LF_VALFR dd/mm/yyyy.
        write LS_BOARD_OVW_GRID-VALTO to LF_VALTO dd/mm/yyyy.
        concatenate LF_VALFR '-' LF_VALTO
               into <S_ITEM>-TEXT separated by SPACE.
      when others.
        move 'Board Mode'(T22)                            to <S_ITEM>-TEXT.
    endcase.

  endloop.

***--------------------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = LT_NODE_ADDED
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  append lines of LT_NODE_ADDED to ME->T_NODE.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = LT_ITEM_ADDED
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  append lines of LT_ITEM_ADDED to ME->T_ITEM.

endmethod.
method APPLY_GFILTER.

  data:  LF_GFILTER_SDATE  type          ZVCXI_PCSSC_SDATE,
         LF_WERKS          type          WERKS_D,
         LF_VALID          type          ABAP_BOOL.
  data:  LS_BOARD_OVW_GRID type          ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data:  LT_WERKS          type table of WERKS_D.
  data:  LI_GFILTER_WERKS  type          ZVCXI_PCSSC_TT_WERKS.
  data:  LR_BOARD_G        type ref to   ZCL_VCXI_PCSSC_BOARD_G.

***---------------------------------------------------------------------------------------------------
*** Get Filter Values
  call function 'ZVCXI_PCSSC_GFILTER_GET'
    importing
      EI_WERKS = LI_GFILTER_WERKS
      EF_SDATE = LF_GFILTER_SDATE.

  check LF_GFILTER_SDATE is not initial or
        LI_GFILTER_WERKS is not initial.

  check ME->T_BOARD_OVW_GRID is not initial.
  sort ME->T_BOARD_OVW_GRID by BOARD MBOAR.

  loop at ME->T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID.
    clear: LT_WERKS, LF_VALID.
***---------------------------------------------------------------------------------------------------
*** (1) Date Filter for Global Version
    if LF_GFILTER_SDATE is not initial.
      at new BOARD.
        clear: LR_BOARD_G.
      endat.
      at new MBOAR.
        clear: LR_BOARD_G.
      endat.
***   Get Current Global verison for each new
      if LR_BOARD_G is not bound.
        try.
            LR_BOARD_G = ZCL_VCXI_PCSSC_BOARD_G=>GET_INSTANCE_BY_DATE( IF_BOARD   = LS_BOARD_OVW_GRID-BOARD
                                                                       IF_MBOAR   = LS_BOARD_OVW_GRID-MBOAR
                                                                       IF_DATE    = LF_GFILTER_SDATE ).
          catch /VCXI/CX_CKX.
            clear: LR_BOARD_G.
        endtry.
      endif.
***   Delete not needed entries
      if LR_BOARD_G is bound.
        if LS_BOARD_OVW_GRID-BOARD_G ne LR_BOARD_G.
          if LS_BOARD_OVW_GRID-BOARD_G is bound.
            LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE ).
          endif.
          delete ME->T_BOARD_OVW_GRID.
          continue.
        endif.
      else.
        if LS_BOARD_OVW_GRID-BOARD_G is bound.
          LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE ).
        endif.
        delete ME->T_BOARD_OVW_GRID.
        continue.
      endif.
    endif.

***---------------------------------------------------------------------------------------------------
*** (2) Set Plant Filter
    if LI_GFILTER_WERKS is not initial.

***   Get all valid Plants for Global Version
      select WERKS
             into table LT_WERKS
             from ZVCXI_PCS_TD110
             where GBOGV eq LS_BOARD_OVW_GRID-BOARD_G->F_GBOGV
              and  WERKS in LI_GFILTER_WERKS
             order by WERKS.

      if LT_WERKS is initial.
        if LS_BOARD_OVW_GRID-BOARD_G is bound.
          LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE ).
        endif.
        delete ME->T_BOARD_OVW_GRID.
        continue.
      endif.
    endif.

***---------------------------------------------------------------------------------------------------
*** (3) Set Plant&Date Filter
    if LF_GFILTER_SDATE is not initial and
       LI_GFILTER_WERKS is not initial.

      loop at LT_WERKS into LF_WERKS.
        try.
            if ZCL_VCXI_PCSSC_BOARD_P=>GET_INSTANCE_BY_DATE( IR_BOARD_G = LS_BOARD_OVW_GRID-BOARD_G
                                                             IF_WERKS   = LF_WERKS
                                                             IF_DATE    = LF_GFILTER_SDATE ) is not initial.
***           Plant version is valid -> next one please!
              LF_VALID = ABAP_TRUE.
              exit.
            endif.
          catch /VCXI/CX_CKX.
            continue.
        endtry.
      endloop.

      if LF_VALID eq ABAP_FALSE.
        if LS_BOARD_OVW_GRID-BOARD_G is bound.
          LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE ).
        endif.
        delete ME->T_BOARD_OVW_GRID.
        continue.
      endif.

    endif.
  endloop.

***---------------------------------------------------------------------------------------------------
*** Check Filter has not removed all entries
  if ME->T_BOARD_OVW_GRID is initial.
*** No valid entries for defined Filter
    message id 'ZVCXI_PCSSC' type 'S' number '051' display like 'W'.
  endif.

endmethod.
method CONSTRUCTOR.

  data:          LF_NUM           type          NUMC1.
  data:          LS_TC220         type          ZVCXI_PCS_TC220,
                 LS_TC220T        type          ZVCXI_PCS_TC220T.
  data:          LT_TC220         type table of ZVCXI_PCS_TC220.
  field-symbols: <S_IDEST_FIELD>  type          YS_IDEST_FIELD.

***------------------------------------------------------------------------------------------
*** Bind UI
  call function 'ZVCXI_PCSSC_UI_BOARD_BIND'
    exporting
      IR_UIC_BOARD = ME
    importing
      ES_DYNP      = ME->S_DYNP.

***------------------------------------------------------------------------------------------
*** Init all existing Board Descriptions
  select * into table LT_TC220
           from ZVCXI_PCS_TC220
           order by IDEST.

*** Assign to Column
  loop at LT_TC220 into LS_TC220.
    if LS_TC220-MDEST eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
      LF_NUM = LF_NUM + 1.
      append initial line to ME->T_IDEST_FIELD assigning <S_IDEST_FIELD>.
      move LS_TC220-IDEST to <S_IDEST_FIELD>-IDEST.
      concatenate 'DESCR' LF_NUM into <S_IDEST_FIELD>-FIELD.

***   Find Description
      select single DESCR
             into LS_TC220T-DESCR
             from ZVCXI_PCS_TC220T
            where IDEST eq LS_TC220-IDEST
              and LANGU eq SY-LANGU.
      move LS_TC220T-DESCR to <S_IDEST_FIELD>-IDEST_DESCR.
    endif.
  endloop.

*** Set Flag for Grid Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.
  move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

***------------------------------------------------------------------------------------------
*** Create Object Message Manager
  create object ME->R_OBJMSG_MGR.
  move ABAP_TRUE to ME->R_OBJMSG_MGR->F_CLOSE_AFTER_DBLCLICK.
  set handler HANDLE_MSG_DBLCLK for ME->R_OBJMSG_MGR.

endmethod.
method COPY_EXISTING_VERSION.

  data: LF_STATUS          type        CHAR01.
  data: LS_BOARD_OVW_GRID  type        ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data: LT_BOARD_OVW_GRID  type        ZVCXI_PCSSC_TT_BOARD_OVW_GRID.
  data: LR_BOARD_G_NEW     type ref to ZCL_VCXI_PCSSC_BOARD_G,
        LR_CX_CKX          type ref to /VCXI/CX_CKX.

*** Do Until Copy or Canceld!!!
  do.
    clear: LT_BOARD_OVW_GRID, LS_BOARD_OVW_GRID, LF_STATUS.
***----------------------------------------------------------------------------
*** First check if there are already existing versions
    LT_BOARD_OVW_GRID = ME->GET_ALL_BOARD_VERSIONS( ).

    delete LT_BOARD_OVW_GRID where BOARD ne IF_BOARD.
    delete LT_BOARD_OVW_GRID where MBOAR ne IF_MBOAR.

    if LT_BOARD_OVW_GRID is initial.
      exit.
    else.
      move ABAP_TRUE to RF_COPY_EXISTING.
    endif.

*** Show existing versions
    if IS_COPY_BOARD       is supplied and
       IS_COPY_BOARD-BOARD ne IF_BOARD and
       IS_COPY_BOARD-MBOAR ne IF_MBOAR.
      insert IS_COPY_BOARD into LT_BOARD_OVW_GRID index 1.
    endif.

***----------------------------------------------------------------------------
*** Show Popup
    call function 'ZVCXI_PCSSC_POPUP_BOARD_COPY'
      exporting
        IT_BOARD_OVW = LT_BOARD_OVW_GRID
        IF_BOARD     = IF_BOARD
      importing
        ES_BOARD_SEL = LS_BOARD_OVW_GRID
        EF_STATUS    = LF_STATUS.

***----------------------------------------------------------------------------
*** Continue if not cancled
    if LF_STATUS eq 'A'.
      exit.
    endif.

***----------------------------------------------------------------------------
*** Copy or not
    case LF_STATUS.
      when 'C'. "Copy
***     Copy Global Board
        LR_BOARD_G_NEW = LS_BOARD_OVW_GRID-BOARD_G->COPY_BOARD_G( IF_BOARD = IF_BOARD
                                                                  IF_MBOAR = IF_MBOAR
                                                                  IF_TBOAR = IF_TBOAR ).
    endcase.

***----------------------------------------------------------------------------
*** Lock if needed
    case LF_STATUS.
      when 'E'. "Edit
***     Do Lock
        try.
            LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
          catch /VCXI/CX_CKX into LR_CX_CKX.
            LR_CX_CKX->SHOW_MESSAGE( ).
        endtry.
    endcase.

***----------------------------------------------------------------------------
*** Switch to Global UI
    ME->DO_FREE( ).
    case LF_STATUS.
      when 'C'. "Copy
***     Copied Version
        ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LR_BOARD_G_NEW ).

      when 'E' or 'D'. "Edit and Display
***     Selected Version
        ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LS_BOARD_OVW_GRID-BOARD_G ).
    endcase.

***----------------------------------------------------------------------------
*** Exit if needed
    case LF_STATUS.
      when 'C' or 'E'. "Copy or Edit
***     Leave this sequence
        exit.
    endcase.

  enddo.

*** Set Flag for Grid Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.
  move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.

*** Save Filter and Sort Criteria in case we come back
    ME->R_GRID->GET_SORT_CRITERIA( importing ET_SORT = ME->T_SORT ).
    ME->R_GRID->GET_FILTER_CRITERIA( importing ET_FILTER = ME->T_FILTER ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

endmethod.
method DO_PBO.

  data:  LF_SDATE     type        ZVCXI_PCSSC_SDATE.
  data:  LI_WERKS     type        ZVCXI_PCSSC_TT_WERKS.

***----------------------------------------------------------------------------
*** Set Title
  set titlebar '0100_TITLE' of program ME->S_DYNP-REPID.

***----------------------------------------------------------------------------
*** Get Filter Values
  call function 'ZVCXI_PCSSC_GFILTER_GET'
    importing
      EI_WERKS = LI_WERKS
      EF_SDATE = LF_SDATE.

*** Switch Filter function if it is filled or not
  if LI_WERKS is not initial or
     LF_SDATE is not initial.
*** Set Status with Filter
    set pf-status '0100_STATUS_F' of program ME->S_DYNP-REPID.
  else.
*** Set Status without Filter
    set pf-status '0100_STATUS'   of program ME->S_DYNP-REPID.
  endif.

***----------------------------------------------------------------------------
*** Init Container
  ME->INIT_CONTAINER( ).

*** Init Tree
  ME->INIT_TREE( ).

*** Init Board Grid
  ME->INIT_GRID( ).

*** Refresh Board Grid
  ME->REFRESH_GRID_BOARD( ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when 'EXIT' or 'CANCEL' or 'BACK'.
      ME->DO_FREE( ).
      leave to screen 0.
      exit.

    when 'TBOAR'.          "Board type
      ME->HANDLE_UC_CALL_VC( IF_VIEW_NAME = 'ZVCXI_PCSS_TBOAR' ).

    when 'TSTAR'.         "Wax type
      ME->HANDLE_UC_CALL_VC( IF_VIEW_NAME = 'ZVCXI_PCSS_STARC' ).

    when 'TWAX'.           "Wax type
      ME->HANDLE_UC_CALL_VC( IF_VIEW_NAME = 'ZVCXI_PCSS_WAXCO' ).

    when 'TDSCR'.          "Description type
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TC220' ).

    when 'TCLAS'.          "Classification type
      ME->HANDLE_UC_CALL_VC( IF_VIEW_NAME = 'ZVCXI_PCSS_CLASS' ).

    when 'TPRPR'.          "Preprint type
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TC500' ).

    when 'FLUTE'.          "Flute
      ME->HANDLE_UC_FLUTE( ).

    when 'ARBPL'.          "Default Work center
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TD231' ).

    when 'CORWI'.          "Tolerance Corr width
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TD270' ).

    when 'MBOAR'.          "Board mode cust.
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TC201' ).

    when 'STATU'.          "Status Board Customizing
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TC202' ).

    when 'PLAPW'.          "Planned Paper Width
      ME->HANDLE_UC_CALL_MV( IF_VIEW_NAME = 'ZVCXI_PCS_TD280' ).
    when 'COWID_GEN'.
      ME->HANDLE_UC_COWID_GEN( ).

    when 'CHECK_ALL'.
      ME->HANDLE_UC_CHECK_ALL( ).

    when C_UCOMM_GFILTER or
         C_UCOMM_GFILTER_F.
      ME->HANDLE_UC_GFILTER( ).

    when C_UCOMM_REFRESH.
***   Set Flag for Grid Refresh
      move ABAP_TRUE to ME->F_REFRESH_REQ.
      move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.
  endcase.

endmethod.
method GET_ALL_BOARD_VERSIONS.

  data: LF_GBOGV type ZVCXI_PCSSC_GBOGV,
        LF_GUID  type /VCXI/CKX_GUID.
  data: LS_BOARD_GRID  type ZVCXI_PCSSC_S_BOARD_OVW_GRID,
        LS_BODSC       type ZVCXI_PCSSC_S_BODSC,
        LS_IDEST_FIELD type YS_IDEST_FIELD.
  data: LT_GBOGV       type table of ZVCXI_PCSSC_GBOGV.
  field-symbols: <F_FIELD>       type          ANY.

***--------------------------------------------------------------------------------------
*** Init all existing Boards
  select GBOGV into table LT_GBOGV
               from ZVCXI_PCS_TD100
              where BOARD in I_BOARD
               and  MBOAR in I_MBOAR
               and  FLUTE in I_FLUTE
               and  TBOAR in I_TBOAR.

*** Get Instance for all existing Boards
  loop at LT_GBOGV into LF_GBOGV.
    clear: LS_BOARD_GRID.
    move LF_GBOGV to LF_GUID.
    move ZCL_VCXI_PCSSC_BOARD_G=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to LS_BOARD_GRID-BOARD_G.

    move LS_BOARD_GRID-BOARD_G->F_BOARD                                  to LS_BOARD_GRID-BOARD.
    move LS_BOARD_GRID-BOARD_G->S_MBOAR-MBOAR                            to LS_BOARD_GRID-MBOAR.
    if LS_BOARD_GRID-BOARD_G->R_FLUTE is bound.
      move LS_BOARD_GRID-BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_BOARD_GRID-FLUTE.
    endif.
    move LS_BOARD_GRID-BOARD_G->F_TBOAR                                  to LS_BOARD_GRID-TBOAR.
    move LS_BOARD_GRID-BOARD_G->F_VALFR                                  to LS_BOARD_GRID-VALFR.
    move LS_BOARD_GRID-BOARD_G->F_VALTO                                  to LS_BOARD_GRID-VALTO.

***--------------------------------------------------------------------------------------
*** Get Global Descriptions
    loop at LS_BOARD_GRID-BOARD_G->T_BODSC into LS_BODSC where LANGU eq SY-LANGU.
      read table ME->T_IDEST_FIELD into LS_IDEST_FIELD with key IDEST = LS_BODSC-IDEST.
      check SY-SUBRC eq 0.

      assign component LS_IDEST_FIELD-FIELD of structure LS_BOARD_GRID to <F_FIELD>.
      if SY-SUBRC = 0.
        move LS_BODSC-DESCR to <F_FIELD>.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Creation and Change Log
    LS_BOARD_GRID-S_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_BOARD_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT~GET_LOG( ) ).

    append LS_BOARD_GRID to RT_BOARD_OVW_GRID.

  endloop.

endmethod.
method GET_FIELDCAT_BOARD.

  data:          LS_IDEST_FIELD  type        YS_IDEST_FIELD.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_BOARD_OVW_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'BOARD'.
        move '1'       to <S_FCAT>-COL_POS.
        move ABAP_TRUE to <S_FCAT>-KEY.
      when 'MBOAR'.
        move '2'       to <S_FCAT>-COL_POS.
        move ABAP_TRUE to <S_FCAT>-KEY.
      when 'VALFR'.
        move '3'       to <S_FCAT>-COL_POS.
        move ABAP_TRUE to <S_FCAT>-KEY.
      when 'VALTO'.
        move '4'       to <S_FCAT>-COL_POS.
        move ABAP_TRUE to <S_FCAT>-KEY.
      when 'FLUTE'.
        move '5'       to <S_FCAT>-COL_POS.
      when 'TBOAR'.
        move '6'       to <S_FCAT>-COL_POS.
      when 'DESCR1'.
        move '7'       to <S_FCAT>-COL_POS.
      when 'DESCR2'.
        move '8'       to <S_FCAT>-COL_POS.
      when 'DESCR3'.
        move '9'       to <S_FCAT>-COL_POS.
      when 'DESCR4'.
        move '10'      to <S_FCAT>-COL_POS.
      when 'CREBY'.
        move '11'      to <S_FCAT>-COL_POS.
      when 'CREBY_NAME'.
        move '12'      to <S_FCAT>-COL_POS.
      when 'CREAT_DATE'.
        move '13'      to <S_FCAT>-COL_POS.
      when 'CHABY'.
        move '14'      to <S_FCAT>-COL_POS.
      when 'CHABY_NAME'.
        move '15'      to <S_FCAT>-COL_POS.
      when 'CHAAT_DATE'.
        move '16'      to <S_FCAT>-COL_POS.


***   Set lines to invisible
      when 'CREAT_TIME' or 'CHAAT_TIME'.
        move ABAP_TRUE      to <S_FCAT>-NO_OUT.

      when 'CREAT' or 'CHAAT'.
        move ABAP_TRUE      to <S_FCAT>-TECH.
    endcase.

*** Dynamic Description Handling
    if <S_FCAT>-FIELDNAME eq 'DESCR1' or
       <S_FCAT>-FIELDNAME eq 'DESCR2' or
       <S_FCAT>-FIELDNAME eq 'DESCR3' or
       <S_FCAT>-FIELDNAME eq 'DESCR4' .
      read table ME->T_IDEST_FIELD into LS_IDEST_FIELD
                                   with key FIELD = <S_FCAT>-FIELDNAME.
      if SY-SUBRC ne 0.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      else.
        move LS_IDEST_FIELD-IDEST_DESCR to <S_FCAT>-COLTEXT.
      endif.
    endif.

*** Show only Board ID and Mode if we have a Board Mode View
    if ME->F_FILTER_BOARD is initial     and
       ME->F_FILTER_MBOAR is not initial.
      check <S_FCAT>-FIELDNAME ne 'BOARD' and
            <S_FCAT>-FIELDNAME ne 'MBOAR'.
      move ABAP_TRUE      to <S_FCAT>-TECH.
    endif.

  endloop.

endmethod.
method GET_GRID_DATA.

  data: LS_BOARD_OVW_GRID type          ZVCXI_PCSSC_S_BOARD_OVW_GRID.

***--------------------------------------------------------------------------------------
*** Remove Instances of existing Entries and free Table
  loop at T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID
                           where BOARD_G is bound.
    LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE ).
  endloop.
  free: ME->T_BOARD_OVW_GRID.

***--------------------------------------------------------------------------------------
*** Init all existing Boards
  ME->T_BOARD_OVW_GRID = ME->GET_ALL_BOARD_VERSIONS( ).

  check ME->T_BOARD_OVW_GRID is not initial.

*** Apply Global Filter
  ME->APPLY_GFILTER( ).

*** Sort
  sort ME->T_BOARD_OVW_GRID by BOARD VALFR VALTO.

endmethod.
  method GET_MBOAR_DESCR.

    select single DESCR
           from ZVCXI_PCS_TC201T
           into RF_DESCR
          where MBOAR = IF_MBOAR
           and  LANGU = IF_LANGU.
    if SY-SUBRC ne 0.
***   Alternatively English
      select single DESCR
             from ZVCXI_PCS_TC201T
             into RF_DESCR
            where MBOAR = IF_MBOAR
             and  LANGU = 'E'.
      if SY-SUBRC ne 0.
***     Fall-back any language
        select single DESCR
               from ZVCXI_PCS_TC201T
               into RF_DESCR
              where MBOAR = IF_MBOAR.
      endif.
    endif.

  endmethod.
method GET_NEXT_NODE_KEY.

  add 1 to ME->F_NODEKEY_COUNTER.
  move ME->F_NODEKEY_COUNTER to RF_NODEKEY.

endmethod.
method GET_OBJECT_OF_NODE .

  data:      LR_USEROBJECT type ref to OBJECT.

  ME->R_TREE->NODE_GET_USER_OBJECT( exporting
                                      NODE_KEY       = IF_NODE_KEY
                                    importing
                                      USER_OBJECT    = LR_USEROBJECT
                                    exceptions
                                      NODE_NOT_FOUND = 1
                                      others         = 2 ).
  if SY-SUBRC      ne     0     or
     LR_USEROBJECT is not bound.
    exit.
  endif.

  try.
      move LR_USEROBJECT ?to RR_OBJECT.
    catch CX_SY_MOVE_CAST_ERROR.
      raise exception type /VCXI/CX_CKX.
  endtry.

endmethod.
method GET_RELATED_BOARDS.

  data:          LF_GUID             type                   /VCXI/CKX_GUID,
                 LF_GBOPV            type                   ZVCXI_PCSSC_GBOPV,
                 LF_GBOGV            type                   ZVCXI_PCSSC_GBOGV,
                 LF_ASBOA            type                   ZVCXI_PCS_BOARD.
  data:          LT_GBOPV            type standard table of ZVCXI_PCSSC_GBOPV.
  data:          LR_BOARD_P          type ref to            ZCL_VCXI_PCSSC_BOARD_P.
  field-symbols: <S_BOARD_OVW_GRID>  type                   ZVCXI_PCSSC_S_BOARD_OVW_GRID.


***--------------------------------------------------------------------------------------
*** Get Guid of Global Board Grade
  move IR_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GBOGV.

***--------------------------------------------------------------------------------------
*** Get all Plant Versions
  select GBOPV into table LT_GBOPV
               from ZVCXI_PCS_TD110
              where GBOGV eq LF_GBOGV.

*** Collect all Plant version Objects
  loop at LT_GBOPV into LF_GBOPV.
    move LF_GBOPV to LF_GUID.
    move ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to LR_BOARD_P.

    check LR_BOARD_P is bound.

    case IR_BOARD_G->S_MBOAR-MBOAR.
      when 'S'.
        check LR_BOARD_P->F_APBOA is not initial.
***     Collect all assigned Production BoardIDs
        read table RT_BOARD_OVW_GRID with key MBOAR = 'P'
                                              BOARD = LR_BOARD_P->F_APBOA
                                     transporting no fields.
        check SY-SUBRC ne 0.
        append initial line to RT_BOARD_OVW_GRID assigning <S_BOARD_OVW_GRID>.
        <S_BOARD_OVW_GRID>-MBOAR = 'P'.
        <S_BOARD_OVW_GRID>-BOARD = LR_BOARD_P->F_APBOA.

      when 'P'.
        check LR_BOARD_P->T_ASBOA is not initial.
***     Collect all assigned Sales BoardIDs
        loop at LR_BOARD_P->T_ASBOA into LF_ASBOA.
          read table RT_BOARD_OVW_GRID with key MBOAR = 'S'
                                                BOARD = LF_ASBOA
                                       transporting no fields.
          check SY-SUBRC ne 0.
          append initial line to RT_BOARD_OVW_GRID assigning <S_BOARD_OVW_GRID>.
          <S_BOARD_OVW_GRID>-MBOAR = 'S'.
          <S_BOARD_OVW_GRID>-BOARD = LF_ASBOA.
        endloop.
    endcase.

  endloop.

endmethod.
method HANDLE_DBLCLK.

  data:  LS_BOARD_OVW_GRID   type        ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data:  LR_CX_CKX           type ref to /VCXI/CX_CKX.

  try.

***   Continue only if we are not on a Board Mode View
      if ME->F_FILTER_BOARD is initial     and
         ME->F_FILTER_MBOAR is not initial.

***     And First set New Filter
        read table ME->T_BOARD_OVW_GRID_VIEW into LS_BOARD_OVW_GRID index E_ROW-INDEX.
        check SY-SUBRC = 0.

        ME->F_FILTER_BOARD = LS_BOARD_OVW_GRID-BOARD.
        ME->F_FILTER_MBOAR = LS_BOARD_OVW_GRID-MBOAR.

        move ABAP_TRUE to ME->F_REFRESH_REQ.

        exit.
      endif.

***   Get line that got double clicked
      read table ME->T_BOARD_OVW_GRID_VIEW into LS_BOARD_OVW_GRID index E_ROW-INDEX.
      check SY-SUBRC eq 0 and
            LS_BOARD_OVW_GRID-BOARD_G is bound.

***   Do Free for Board Overview Grid
      ME->DO_FREE( ).

***   Call Global Board Setting Details
      ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LS_BOARD_OVW_GRID-BOARD_G ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_EXPAND_NO_CHILDREN.

  data:          LF_BOARD_MODE       type        ABAP_BOOL,
                 LF_BOARD_OVW        type        ABAP_BOOL,
                 LF_BOARD_VERS       type        ABAP_BOOL.
  data:          LS_NODE_OVERVIEW    type        ZVCXI_PCSSC_S_NODE_OVERVIEW,
                 LS_BOARD_OVW_GRID   type        ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data:          LT_TO_EXPAND_NODES  type        TREEMNOTAB,
                 LT_BOARD_OVW_GRID   type        ZVCXI_PCSSC_TT_BOARD_OVW_GRID.
  data:          LR_OBJECT           type ref to /VCXI/IF_CKX_OBJECT,
                 LR_BOARD_G          type ref to ZCL_VCXI_PCSSC_BOARD_G,
                 LR_CX_CKX           type ref to /VCXI/CX_CKX.
  field-symbols: <S_BOARD_OVW_GRID>  type        ZVCXI_PCSSC_S_BOARD_OVW_GRID.

  try.
***--------------------------------------------------------------------------------------
***   Get Object of Node
      LR_OBJECT ?= ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).

***--------------------------------------------------------------------------------------
***   Get Subnodes for Node
***   Get Relate Node Informations
      read table ME->T_NODE_OVERVIEW into LS_NODE_OVERVIEW with key NODE_KEY = NODE_KEY.
***--------------------------------------------------------------------------------------
***   Handle Different Node Types
      if LS_NODE_OVERVIEW-MBOAR is initial and
         LS_NODE_OVERVIEW-BOARD is initial.
***     Super Root Node -> Add all available Board Modes (as Folder)
        loop at ME->T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID.
          read table LT_BOARD_OVW_GRID with key MBOAR = LS_BOARD_OVW_GRID-MBOAR
                                       transporting no fields.
          check SY-SUBRC ne 0.
          append initial line to LT_BOARD_OVW_GRID assigning <S_BOARD_OVW_GRID>.
          move LS_BOARD_OVW_GRID-MBOAR to <S_BOARD_OVW_GRID>-MBOAR.
        endloop.

        LF_BOARD_MODE = ABAP_TRUE.

      elseif LS_NODE_OVERVIEW-MBOAR is not initial and
             LS_NODE_OVERVIEW-BOARD is initial.
***     Board Mode Node -> Add all Available Board IDs (as Folder)
        loop at ME->T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID
          where MBOAR = LS_NODE_OVERVIEW-MBOAR.
          read table LT_BOARD_OVW_GRID with key MBOAR = LS_BOARD_OVW_GRID-MBOAR
                                                BOARD = LS_BOARD_OVW_GRID-BOARD
                                       transporting no fields.
          check SY-SUBRC ne 0.
          append initial line to LT_BOARD_OVW_GRID assigning <S_BOARD_OVW_GRID>.
          move LS_BOARD_OVW_GRID-MBOAR to <S_BOARD_OVW_GRID>-MBOAR.
          move LS_BOARD_OVW_GRID-BOARD to <S_BOARD_OVW_GRID>-BOARD.
        endloop.

        LF_BOARD_OVW = ABAP_TRUE.

      elseif LS_NODE_OVERVIEW-MBOAR is not initial and
             LS_NODE_OVERVIEW-BOARD is not initial and
             LR_OBJECT              is not bound.
***     Board overview Node -> Add all available Board ID Versions (as Folder + Object)
        loop at ME->T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID
          where MBOAR = LS_NODE_OVERVIEW-MBOAR
            and BOARD = LS_NODE_OVERVIEW-BOARD.
          append initial line to LT_BOARD_OVW_GRID assigning <S_BOARD_OVW_GRID>.
          move-corresponding LS_BOARD_OVW_GRID to <S_BOARD_OVW_GRID>.
        endloop.

        LF_BOARD_VERS = ABAP_TRUE.

      elseif LS_NODE_OVERVIEW-MBOAR is not initial and
             LS_NODE_OVERVIEW-BOARD is not initial and
             LR_OBJECT              is bound.
***          Board Version Node
***          Here we have different Possibilities -> related sales or related production Boards
        try.
            move LR_OBJECT ?to LR_BOARD_G.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_BOARD_G.
            exit.
        endtry.
        check LR_BOARD_G is bound.
        LT_BOARD_OVW_GRID = ME->GET_RELATED_BOARDS( IR_BOARD_G = LR_BOARD_G ).

        LF_BOARD_OVW = ABAP_TRUE.

      endif.

***--------------------------------------------------------------------------------------
***   Add Subnodes
      ME->ADD_SUBNODES( IF_RELATKEY       = NODE_KEY
                        IT_BOARD_OVW_GRID = LT_BOARD_OVW_GRID
                        IF_BOARD_MODE     = LF_BOARD_MODE
                        IF_BOARD_OVW      = LF_BOARD_OVW
                        IF_BOARD_VERS     = LF_BOARD_VERS ).

***--------------------------------------------------------------------------------------
***   Get Nodes to Expand
      append NODE_KEY to LT_TO_EXPAND_NODES.

***   Expanded Nodes
      ME->R_TREE->EXPAND_NODES( exporting
                                  NODE_KEY_TABLE          = LT_TO_EXPAND_NODES
                                exceptions
                                  ERROR_IN_NODE_KEY_TABLE = 1
                                  others                  = 2 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK .

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_MSG_DBLCLK.

  data:  LR_BOARD_G   type ref to ZCL_VCXI_PCSSC_BOARD_G,
         LR_BOARD_P   type ref to ZCL_VCXI_PCSSC_BOARD_P,
         LR_CX_CKX    type ref to /VCXI/CX_CKX.

  try.
***--------------------------------------------------------------------------------------
      try.
          move IR_OBJECT ?to LR_BOARD_G.
          if LR_BOARD_G is bound.
***         Do Free for Board Overview Grid
            ME->DO_FREE( ).

***         Call Global Board Setting Details
            ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LR_BOARD_G ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BOARD_G.
      endtry.

***--------------------------------------------------------------------------------------
      try.
          move IR_OBJECT ?to LR_BOARD_P.
          if LR_BOARD_P is bound.
***         Do Free for Board Overview Grid
            ME->DO_FREE( ).

***         Call Plant Board Setting Details
            ZCL_VCXI_PCSSC_UI_BOARD_P=>START( IR_BOARD_P = LR_BOARD_P ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BOARD_P.
      endtry.


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_NODE_DOUBLE_CLICK .

  data:  LS_NODE_OVERVIEW  type        ZVCXI_PCSSC_S_NODE_OVERVIEW.
  data:  LR_BOARD_G        type ref to ZCL_VCXI_PCSSC_BOARD_G,
         LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX         type ref to /VCXI/CX_CKX.

  try.

      LR_OBJECT = ME->GET_OBJECT_OF_NODE( IF_NODE_KEY = NODE_KEY ).

      if LR_OBJECT is bound.
***     Open Detailed UI
        move LR_OBJECT ?to LR_BOARD_G.
        check LR_BOARD_G is bound.

***     Do Free for Board Overview
        ME->DO_FREE( ).

***     Call Global Board Setting Details
        ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LR_BOARD_G ).

      else.
***     Set New Filter
        read table ME->T_NODE_OVERVIEW into LS_NODE_OVERVIEW with key NODE_KEY = NODE_KEY.
        check SY-SUBRC = 0.

        ME->F_FILTER_BOARD = LS_NODE_OVERVIEW-BOARD.
        ME->F_FILTER_MBOAR = LS_NODE_OVERVIEW-MBOAR.

      endif.

      move ABAP_TRUE to ME->F_REFRESH_REQ.

    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_BOARD_G.
    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LF_DISABLED type        ABAP_BOOL.
  data:  LS_TOOLBAR  type        STB_BUTTON.

  clear LS_TOOLBAR.
  move 'GRID_ADD'         to LS_TOOLBAR-FUNCTION.
  move '0'                to LS_TOOLBAR-BUTN_TYPE.
  move ICON_INSERT_ROW    to LS_TOOLBAR-ICON.
  move LF_DISABLED        to LS_TOOLBAR-DISABLED.
  move 'Add'(T10)         to LS_TOOLBAR-TEXT.
  append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

*** Do only add following toolbar elements if needed!
  if ME->F_FILTER_BOARD is initial     and
     ME->F_FILTER_MBOAR is not initial.
    exit.
  endif.

  clear LS_TOOLBAR.
  move 'GRID_COPY'         to LS_TOOLBAR-FUNCTION.
  move '0'                to LS_TOOLBAR-BUTN_TYPE.
  move ICON_COPY_OBJECT   to LS_TOOLBAR-ICON.
  move LF_DISABLED        to LS_TOOLBAR-DISABLED.
  move 'Copy'(T11)        to LS_TOOLBAR-TEXT.
  append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

  clear LS_TOOLBAR.
  move 'GRID_DEL'         to LS_TOOLBAR-FUNCTION.
  move '0'                to LS_TOOLBAR-BUTN_TYPE.
  move ICON_DELETE_ROW    to LS_TOOLBAR-ICON.
  move LF_DISABLED        to LS_TOOLBAR-DISABLED.
  move 'Delete'(T12)      to LS_TOOLBAR-TEXT.
  append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

endmethod.
method HANDLE_UC_ADD_BOARD_G.

  data:          LF_RETURN           type          ABAP_BOOL,
                 LF_EXIT             type          ABAP_BOOL,
                 LF_GUID             type          /VCXI/CKX_GUID,
                 LF_BOARD            type          ZVCXI_PCS_BOARD,
                 LF_FLUTE            type          ZVCXI_PCS_FLUTE,
                 LF_FLUTE_DB         type          ZVCXI_PCS_FLUTE,
                 LF_MBOAR            type          ZVCXI_PCSS_MBOAR,
                 LF_MBOAR_DB         type          ZVCXI_PCSS_MBOAR,
                 LF_TBOAR            type          ZVCXI_PCSS_TBOAR,
                 LF_TBOAR_DB         type          ZVCXI_PCSS_TBOAR.
  data:          LT_SVAL             type table of SVAL.
  data:          LR_BOARD_G          type ref to   ZCL_VCXI_PCSSC_BOARD_G,
                 LR_FLUTE            type ref to   ZCL_VCXI_PCSSC_FLUTE.
  field-symbols: <S_FIELD>           type          SVAL.

***----------------------------------------------------------------------------
*** Prepare Popup for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
  <S_FIELD>-FIELDNAME  = 'FLUTE'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  <S_FIELD>-NOVALUEHLP = 'S'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
  <S_FIELD>-FIELDNAME  = 'MBOAR'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  <S_FIELD>-VALUE      = ME->F_FILTER_MBOAR.
  <S_FIELD>-NOVALUEHLP = 'S'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
  <S_FIELD>-FIELDNAME  = 'TBOAR'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  <S_FIELD>-NOVALUEHLP = 'S'.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
  <S_FIELD>-FIELDNAME  = 'BOARD'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  <S_FIELD>-NOVALUEHLP = 'S'.

  do.
    clear: LF_FLUTE,
           LF_MBOAR,
           LF_TBOAR.

***----------------------------------------------------------------------------
*** Call Popup
    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please specify the Flute, the Board Mode and the Board Type for the new Version.'(100)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

***----------------------------------------------------------------------------
    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'FLUTE'.
    if SY-SUBRC = 0.
      select single FLUTE
                 from ZVCXI_PCS_TC210
                 into LF_FLUTE_DB
                where FLUTE = <S_FIELD>-VALUE.
      if SY-SUBRC eq 0.
        move <S_FIELD>-VALUE to LF_FLUTE.
      endif.
    endif.

    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'MBOAR'.
    if SY-SUBRC = 0.
      select single MBOAR
               from ZVCXI_PCS_TC201
               into LF_MBOAR_DB
              where MBOAR = <S_FIELD>-VALUE.
      if SY-SUBRC eq 0.
        move <S_FIELD>-VALUE to LF_MBOAR.
      endif.
    endif.

    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'TBOAR'.
    if SY-SUBRC = 0.
      select single TBOAR
               from ZVCXI_PCS_TC230
               into LF_TBOAR_DB
              where TBOAR = <S_FIELD>-VALUE.
      if SY-SUBRC eq 0.
        move <S_FIELD>-VALUE to LF_TBOAR.
      endif.
    endif.

    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'BOARD'.
    if SY-SUBRC = 0.
      move <S_FIELD>-VALUE to LF_BOARD.
    endif.

***----------------------------------------------------------------------------
*** Make sure that there are Values entered and that the Values are correct
    if LF_FLUTE is not initial and
       LF_MBOAR is not initial and
       LF_TBOAR is not initial and
       LF_BOARD is not initial.
***   Create Board
      exit.
    endif.
  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  if LF_RETURN ne 'A'.

***----------------------------------------------------------------------------
*** Check if there are already existing Board Versions -> copy
    check ME->COPY_EXISTING_VERSION( IF_BOARD = LF_BOARD
                                     IF_MBOAR = LF_MBOAR
                                     IF_TBOAR = LF_TBOAR ) eq ABAP_FALSE.

***----------------------------------------------------------------------------
*** Get corresponding Flute Instance
    move LF_FLUTE to LF_GUID.
    move ZCL_VCXI_PCSSC_FLUTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID )
                                                   ?to LR_FLUTE.

***----------------------------------------------------------------------------
*** Create new Plant Board Instance
    LR_BOARD_G = ZCL_VCXI_PCSSC_BOARD_G=>CREATE( IF_BOARD = LF_BOARD
                                                 IR_FLUTE = LR_FLUTE
                                                 IF_MBOAR = LF_MBOAR
                                                 IF_TBOAR = LF_TBOAR  ).

***----------------------------------------------------------------------------
*** Switch to Global UI
    ME->DO_FREE( ).
    ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LR_BOARD_G ).

*** Set Flag for Grid Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.
    move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

  endif.

endmethod.
method HANDLE_UC_CALL_MV.

  ME->DO_FREE( ).

  call function 'VIEW_MAINTENANCE_CALL'
    exporting
      ACTION                       = 'S'
      VIEW_NAME                    = IF_VIEW_NAME
    exceptions
      CLIENT_REFERENCE             = 1
      FOREIGN_LOCK                 = 2
      INVALID_ACTION               = 3
      NO_CLIENTINDEPENDENT_AUTH    = 4
      NO_DATABASE_FUNCTION         = 5
      NO_EDITOR_FUNCTION           = 6
      NO_SHOW_AUTH                 = 7
      NO_TVDIR_ENTRY               = 8
      NO_UPD_AUTH                  = 9
      ONLY_SHOW_ALLOWED            = 10
      SYSTEM_FAILURE               = 11
      UNKNOWN_FIELD_IN_DBA_SELLIST = 12
      VIEW_NOT_FOUND               = 13
      MAINTENANCE_PROHIBITED       = 14
      others                       = 15.

  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'I'
        F_MSGID = SY-MSGID
        F_MSGNO = SY-MSGNO
        F_MSGV1 = SY-MSGV1
        F_MSGV2 = SY-MSGV2
        F_MSGV3 = SY-MSGV3
        F_MSGV4 = SY-MSGV4.

  endif.

endmethod.
method HANDLE_UC_CALL_VC.

  ME->DO_FREE( ).

  call function 'VIEWCLUSTER_MAINTENANCE_CALL'
    exporting
      VIEWCLUSTER_NAME                   = IF_VIEW_NAME
      MAINTENANCE_ACTION                 = 'S'
   exceptions
     CLIENT_REFERENCE                   = 1
     FOREIGN_LOCK                       = 2
     VIEWCLUSTER_NOT_FOUND              = 3
     VIEWCLUSTER_IS_INCONSISTENT        = 4
     MISSING_GENERATED_FUNCTION         = 5
     NO_UPD_AUTH                        = 6
     NO_SHOW_AUTH                       = 7
     OBJECT_NOT_FOUND                   = 8
     NO_TVDIR_ENTRY                     = 9
     NO_CLIENTINDEP_AUTH                = 10
     INVALID_ACTION                     = 11
     SAVING_CORRECTION_FAILED           = 12
     SYSTEM_FAILURE                     = 13
     UNKNOWN_FIELD_IN_DBA_SELLIST       = 14
     MISSING_CORR_NUMBER                = 15
     others                             = 16.

  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'I'
        F_MSGID = SY-MSGID
        F_MSGNO = SY-MSGNO
        F_MSGV1 = SY-MSGV1
        F_MSGV2 = SY-MSGV2
        F_MSGV3 = SY-MSGV3
        F_MSGV4 = SY-MSGV4.
  endif.

endmethod.
method HANDLE_UC_CHECK_ALL.

  data:  LF_GUID             type        /VCXI/CKX_GUID.
  data:  LS_BOARD_OVW_GRID   type        ZVCXI_PCSSC_S_BOARD_OVW_GRID,
         LS_MSG              type        /VCXI/CKXM_S_MSG.
  data:  LT_GUID             type        /VCXI/CKX_TT_GUID.
  data:  LR_BOARD_P          type ref to ZCL_VCXI_PCSSC_BOARD_P.

***------------------------------------------------------------------------------------------------
  loop at ME->T_BOARD_OVW_GRID into LS_BOARD_OVW_GRID
                              where BOARD_G is bound.
*** Check the Global Board Version
    LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_CHECK ).

*** Collect Messages
    if LS_BOARD_OVW_GRID-BOARD_G->R_MSG is bound.
      loop at LS_BOARD_OVW_GRID-BOARD_G->R_MSG->T_MSG into LS_MSG.
        ME->R_OBJMSG_MGR->ADD_MESSAGE( IF_MSGID  = LS_MSG-MSGID
                                       IF_MSGTY  = LS_MSG-MSGTY
                                       IF_MSGNO  = LS_MSG-MSGNO
                                       IF_MSGV1  = LS_MSG-MSGV1
                                       IF_MSGV2  = LS_MSG-MSGV2
                                       IF_MSGV3  = LS_MSG-MSGV3
                                       IF_MSGV4  = LS_MSG-MSGV4
                                       IR_OBJECT = LS_BOARD_OVW_GRID-BOARD_G ).
      endloop.
      LS_BOARD_OVW_GRID-BOARD_G->R_MSG->INIT_MSG( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Check Plant Versions
    move LS_BOARD_OVW_GRID-BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.

    select GBOPV into table LT_GUID
                 from ZVCXI_PCS_TD110
                where GBOGV eq LF_GUID.

*** Get Instance for all existing Boards
    loop at LT_GUID into LF_GUID.
      move ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to LR_BOARD_P.

***   Check the Plant Board Version
      LR_BOARD_P->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_CHECK ).

***   Collect Messages
      if LR_BOARD_P->R_MSG is bound.
        loop at LR_BOARD_P->R_MSG->T_MSG into LS_MSG.
          ME->R_OBJMSG_MGR->ADD_MESSAGE( IF_MSGID  = LS_MSG-MSGID
                                         IF_MSGTY  = LS_MSG-MSGTY
                                         IF_MSGNO  = LS_MSG-MSGNO
                                         IF_MSGV1  = LS_MSG-MSGV1
                                         IF_MSGV2  = LS_MSG-MSGV2
                                         IF_MSGV3  = LS_MSG-MSGV3
                                         IF_MSGV4  = LS_MSG-MSGV4
                                         IR_OBJECT = LR_BOARD_P ).
        endloop.
        LR_BOARD_P->R_MSG->INIT_MSG( ).
      endif.
    endloop.
  endloop.

*** Display Messages
  ME->R_OBJMSG_MGR->R_MESSAGE->DISPLAY_MSG( ).

endmethod.
method HANDLE_UC_COPY_BOARD_G.

  data: LF_RETURN   type CHAR01,
        LF_EXIT     type ABAP_BOOL,
        LF_BOARD    type ZVCXI_PCS_BOARD,
        LF_MBOAR    type ZVCXI_PCSS_MBOAR,
        LF_MBOAR_DB type ZVCXI_PCSS_MBOAR,
        LF_TBOAR    type ZVCXI_PCSS_TBOAR,
        LF_TBOAR_DB type ZVCXI_PCSS_TBOAR.
  data: LS_ROW            type LVC_S_ROW,
        LS_BOARD_OVW_GRID type ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data: LT_ROWS type                   LVC_T_ROW,
        LT_SVAL type standard table of SVAL.
  data: LR_BOARD_G_NEW type ref to ZCL_VCXI_PCSSC_BOARD_G.
  field-symbols: <S_FIELD>           type                   SVAL.


  try.
***----------------------------------------------------------------------------
***   Get selected line
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROWS ).

      read table LT_ROWS index 1 into LS_ROW .
      check SY-SUBRC eq 0.
      read table ME->T_BOARD_OVW_GRID_VIEW into LS_BOARD_OVW_GRID index LS_ROW-INDEX.
      check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
***   Get New BoardID, Mode and Type
***   Create PopUp for User-Entry
      append initial line to LT_SVAL assigning <S_FIELD>.
      <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
      <S_FIELD>-FIELDNAME  = 'BOARD'.
      <S_FIELD>-VALUE      = LS_BOARD_OVW_GRID-BOARD.
      <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
      <S_FIELD>-NOVALUEHLP = 'S'.

      append initial line to LT_SVAL assigning <S_FIELD>.
      <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
      <S_FIELD>-FIELDNAME  = 'MBOAR'.
      <S_FIELD>-VALUE      = LS_BOARD_OVW_GRID-MBOAR.
      <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
      <S_FIELD>-NOVALUEHLP = 'S'.

      append initial line to LT_SVAL assigning <S_FIELD>.
      <S_FIELD>-TABNAME    = 'ZVCXI_PCSSC_S_BOARD_G'.
      <S_FIELD>-FIELDNAME  = 'TBOAR'.
      <S_FIELD>-VALUE      = LS_BOARD_OVW_GRID-TBOAR.
      <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
      <S_FIELD>-NOVALUEHLP = 'S'.

      do.
        clear: LF_MBOAR,
               LF_TBOAR.

        call function 'POPUP_GET_VALUES'
          exporting
            POPUP_TITLE     = 'Copy Board Grade.'(101)
          importing
            RETURNCODE      = LF_RETURN
          tables
            FIELDS          = LT_SVAL
          exceptions
            ERROR_IN_FIELDS = 1
            others          = 2.
        if SY-SUBRC ne 0 or
          LF_RETURN eq 'A'.
          clear LT_SVAL.
          LF_EXIT = ABAP_TRUE.
          exit.
        endif.

        check LT_SVAL is not initial.
        loop at LT_SVAL assigning <S_FIELD>.
          if <S_FIELD>-VALUE     is initial and
             <S_FIELD>-FIELD_OBL eq ABAP_TRUE.
            continue.
          endif.

          case <S_FIELD>-FIELDNAME.
            when 'BOARD'.
              move <S_FIELD>-VALUE to LF_BOARD.
            when 'MBOAR'.
              select single MBOAR
                     from ZVCXI_PCS_TC201
                     into LF_MBOAR_DB
                     where MBOAR = <S_FIELD>-VALUE.
              if SY-SUBRC eq 0.
                move <S_FIELD>-VALUE to LF_MBOAR.
              endif.
            when 'TBOAR'.
              select single TBOAR
                     from ZVCXI_PCS_TC230
                     into LF_TBOAR_DB
                     where TBOAR = <S_FIELD>-VALUE.
              if SY-SUBRC eq 0.
                move <S_FIELD>-VALUE to LF_TBOAR.
              endif.
          endcase.
        endloop.

***----------------------------------------------------------------------------
***     Make sure that there are Values entered and that the Values are correct
        if LF_BOARD is not initial and
           LF_MBOAR is not initial and
           LF_TBOAR is not initial.
***       Create Board
          exit.
        endif.
      enddo.

      if LF_EXIT = ABAP_TRUE.
        exit.
      endif.

***----------------------------------------------------------------------------
***   Check if there are already existing Board Versions -> copy
      check ME->COPY_EXISTING_VERSION( IF_BOARD = LF_BOARD
                                       IF_MBOAR = LF_MBOAR
                                       IF_TBOAR = LF_TBOAR ) eq ABAP_FALSE.

***----------------------------------------------------------------------------
***   Copy Global Board
      LR_BOARD_G_NEW = LS_BOARD_OVW_GRID-BOARD_G->COPY_BOARD_G( IF_BOARD = LF_BOARD
                                                                IF_MBOAR = LF_MBOAR
                                                                IF_TBOAR = LF_TBOAR ).

***----------------------------------------------------------------------------
***   Switch to Global UI
      ME->DO_FREE( ).
      ZCL_VCXI_PCSSC_UI_BOARD_G=>START( IR_BOARD_G = LR_BOARD_G_NEW ).

***   Set Flag for Grid Refresh
      move ABAP_TRUE to ME->F_REFRESH_REQ.
      move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_COWID_GEN.

*** Free all Instances (Global and Plant)
   ZCL_VCXI_PCSSC_BOARD_G=>FREE_ALL( ).

*** Call Corrugation Width Generator
  submit ZVCXI_PCSSC_COWID_GEN via selection-screen and return.

*** Set Flag for Grid Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.
  move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

endmethod.
method HANDLE_UC_DEL_BOARD_G.

  data:  LF_ANSWER           type        ANSWER.
  data:  LS_ROW              type        LVC_S_ROW,
         LS_BOARD_OVW_GRID   type        ZVCXI_PCSSC_S_BOARD_OVW_GRID.
  data:  LT_ROWS             type        LVC_T_ROW.
  data:  LR_CX_CKX           type ref to /VCXI/CX_CKX.
  data:  LR_BOARD_G          type ref to ZCL_VCXI_PCSSC_BOARD_G.

  try.
***   Get selected line
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROWS ).

      read table LT_ROWS index 1 into LS_ROW .
      check SY-SUBRC eq 0.
      read table ME->T_BOARD_OVW_GRID_VIEW into LS_BOARD_OVW_GRID index LS_ROW-INDEX.
      check SY-SUBRC eq 0.

***   Move Global Instance to Local Reference
      move LS_BOARD_OVW_GRID-BOARD_G                   to LR_BOARD_G.

***   Get Popup to make sure that Global Board should be deleted
      call function 'POPUP_TO_CONFIRM'
        exporting
          TITLEBAR              = 'Delete Board ID'(004)
          TEXT_QUESTION         = 'Do you really want to delete the Board ID?'(003)
          DISPLAY_CANCEL_BUTTON = 'X'
        importing
          ANSWER                = LF_ANSWER.

***   If Popup was confirmed -> Delete Board ID
      if LF_ANSWER eq '1'.

***     Set the Global Board to deleted
        LR_BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_DELETE ).

***     Save
        LR_BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_SAVE ).

***     Board Grade Version was successfully deleted.
        message id 'ZVCXI_PCSSC' type 'S' number '002'.

      else.
***     Action cancelled by User.
        message id 'ZVCXI_PCSSC' type 'S' number '003' with  SY-UNAME.
      endif.

***   Set Flag for Grid Refresh
      move ABAP_TRUE to ME->F_REFRESH_REQ.
      move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_FLUTE.

  ME->DO_FREE( ).

  ZCL_VCXI_PCSSC_UIC_FLUTE=>START( ).

endmethod.
method HANDLE_UC_GFILTER.

  data:  LF_CANCELED type ABAP_BOOL.

***----------------------------------------------------------------------------
*** Call Global Filter Popup
  call function 'ZVCXI_PCSSC_GFILTER_POPUP'
    importing
      EF_CANCELED = LF_CANCELED.

  check LF_CANCELED eq ABAP_FALSE.

*** Set Flag for Grid Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.
  move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.

endmethod.
method HANDLE_UCOMM.

  data: LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_FCODE_ADD.
***       Add
          ME->HANDLE_UC_ADD_BOARD_G( ).
        when C_FCODE_DEL.
***       Delete
          ME->HANDLE_UC_DEL_BOARD_G( ).
        when C_FCODE_COPY.
***       Copy
          ME->HANDLE_UC_COPY_BOARD_G( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER .

  data:  LF_RATIO     type I,
         LF_EXTENSION type I.

  if ME->R_CONTAINER_DOCKING is not bound.
    move '20' to LF_RATIO.

*** Create the Docking Container Instance
    create object ME->R_CONTAINER_DOCKING
      exporting
        REPID                       = ME->S_DYNP-REPID
        DYNNR                       = ME->S_DYNP-DYNNR
        SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
        EXTENSION                   = LF_EXTENSION
        RATIO                       = LF_RATIO
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = CL_GUI_CUSTOM_CONTAINER=>DEFAULT_SCREEN
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Handler for Board Grid
    set handler ME->HANDLE_DBLCLK     for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR    for ME->R_GRID.
    set handler ME->HANDLE_UCOMM      for ME->R_GRID.

*** Register F4-Fields
    ME->REGISTER_F4_FIELDS( ).

*** Set Flag for ALV Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.
    move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.
  endif.

endmethod.
method INIT_TREE.

  data:   LS_HHDR           type  TREEMHHDR.
  data:   LT_BOARD_OVW_GRID type  ZVCXI_PCSSC_TT_BOARD_OVW_GRID.

  if ME->R_TREE is not bound.

***----------------------------------------------------------------------------
*** Get the Hierarchy Column
    move 'Board IDs'(201) to LS_HHDR-HEADING.
    move '40'             to LS_HHDR-WIDTH.

*** Create the Tree Instance
    create object ME->R_TREE
      exporting
        NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
        ITEM_SELECTION              = 'X'
        HIERARCHY_COLUMN_NAME       = 'BOARD'
        HIERARCHY_HEADER            = LS_HHDR
      exceptions
        ILLEGAL_NODE_SELECTION_MODE = 1
        ILLEGAL_COLUMN_NAME         = 2
        others                      = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Create the Tree Control
    ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                       PARENT                       = ME->R_CONTAINER_DOCKING
                                     exceptions
                                       LIFETIME_ERROR               = 1
                                       CNTL_SYSTEM_ERROR            = 2
                                       CREATE_ERROR                 = 3
                                       FAILED                       = 4
                                       TREE_CONTROL_ALREADY_CREATED = 5
                                       others                       = 6 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Register the Tree Events
    ME->REGISTER_TREE_EVENTS( ).
  endif.

  if ME->F_REFRESH_ALL_REQ eq ABAP_TRUE.
***----------------------------------------------------------------------------
*** Delete all old Nodes
    ME->R_TREE->DELETE_ALL_NODES( ).
    free: ME->T_NODE,
          ME->T_ITEM,
          ME->F_NODEKEY_COUNTER.

*** Add Root node
    append initial line to LT_BOARD_OVW_GRID.
    ME->ADD_SUBNODES( IT_BOARD_OVW_GRID = LT_BOARD_OVW_GRID ).

  endif.

endmethod.
method REFRESH_GRID_BOARD.

  data:          LF_INITIAL           type        ABAP_BOOL.
  data:          LS_LAYOUT            type        LVC_S_LAYO,
                 LS_VARIANT           type        DISVARIANT,
                 LS_STABLE            type        LVC_S_STBL.
  data:          LT_FCAT              type        LVC_T_FCAT,
                 LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

  if ME->T_BOARD_OVW_GRID_VIEW is initial.
    move ABAP_TRUE to LF_INITIAL.
  endif.

  if ME->F_REFRESH_ALL_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_ALL_REQ.
***----------------------------------------------------------------------------
*** Get refreshed Grid Data
    ME->GET_GRID_DATA( ).
  endif.

  move ME->T_BOARD_OVW_GRID to ME->T_BOARD_OVW_GRID_VIEW.
*** Get Filtered Data
  if ME->F_FILTER_BOARD is initial and
     ME->F_FILTER_MBOAR is initial.
***   All are needed
  elseif ME->F_FILTER_BOARD is not initial and
         ME->F_FILTER_MBOAR is not initial.
***   Filter!
    delete ME->T_BOARD_OVW_GRID_VIEW where MBOAR ne ME->F_FILTER_MBOAR.
    delete ME->T_BOARD_OVW_GRID_VIEW where BOARD ne ME->F_FILTER_BOARD.
  elseif ME->F_FILTER_BOARD is initial     and
         ME->F_FILTER_MBOAR is not initial.
***   Filter!
    delete ME->T_BOARD_OVW_GRID_VIEW where MBOAR ne ME->F_FILTER_MBOAR.
    delete adjacent duplicates from ME->T_BOARD_OVW_GRID_VIEW comparing BOARD.
  endif.

***----------------------------------------------------------------------------
*** GetField Catalog
  move ME->GET_FIELDCAT_BOARD( )           to LT_FCAT.

*** Layout
  move 'X'                                 to LS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'                            to LS_LAYOUT-STYLEFNAME.

*** Exclude Buttons of Toolbar
  append CL_GUI_ALV_GRID=>MC_MB_SUM        to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_MB_SUBTOT     to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_INFO       to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MAXIMUM    to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MINIMUM    to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_DETAIL     to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_GRAPH      to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_MB_EXPORT     to LT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PRINT      to LT_TOOLBAR_EXCLUDING.

*** Variant
  move SY-REPID                            to LS_VARIANT-REPORT.

***----------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
      IS_VARIANT                    = LS_VARIANT
      I_SAVE                        = 'A'
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = ME->T_BOARD_OVW_GRID_VIEW
      IT_SORT                       = ME->T_SORT
      IT_FILTER                     = ME->T_FILTER
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Catalog
  LT_FCAT = ME->GET_FIELDCAT_BOARD( ).

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.

      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME                 = LS_FCAT-DOMNAME
          FIELDNAME               = SPACE
       exceptions
         FIELD_NOT_FOUND         = 1
         NO_HELP_FOR_FIELD       = 2
         INCONSISTENT_HELP       = 3
         others                  = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME                 = LS_FCAT-REF_TABLE
            FIELDNAME               = LS_FCAT-FIELDNAME
         exceptions
           FIELD_NOT_FOUND         = 1
           NO_HELP_FOR_FIELD       = 2
           INCONSISTENT_HELP       = 3
           others                  = 4.

      endif.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method REGISTER_TREE_EVENTS .

  data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
  field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_NODE_DOUBLE_CLICK   for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK   for ME->R_TREE.

  set handler ME->HANDLE_EXPAND_NO_CHILDREN  for ME->R_TREE.

endmethod.
  method START.

    data: LR_UIC_BOARD type ref to  ZCL_VCXI_PCSSC_UIC_BOARD.


    LR_UIC_BOARD = new #( ).
    LR_UIC_BOARD->I_BOARD = II_BOARD.
    LR_UIC_BOARD->I_MBOAR = II_MBOAR.
    LR_UIC_BOARD->I_FLUTE = II_FLUTE.
    LR_UIC_BOARD->I_TBOAR = II_TBOAR.

    call function 'ZVCXI_PCSSC_UI_BOARD_START'.

  endmethod.
