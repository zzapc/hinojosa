
class ZCL_VCXI_FFSS_PR_FCONI definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_XCONI
  create public .

public section.

  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_COMM_PREV .
  interfaces ZIF_VCXI_F0SS_ANCHI .
  interfaces ZIF_VCXI_FFSS_GLUE_CARRIER .

  constants C_IEVNT_O_FITRW_CHANGED type /VCXI/VKSC_IEVNT value 'FITRW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REDUW_CHANGED type /VCXI/VKSC_IEVNT value 'REDUW_CHANGED' ##NO_TEXT.
  constants C_IPRVT_FF_FCONI type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_FCONI' ##NO_TEXT.
  constants C_PARID_FITRW type /VCXI/VKS_PARID value 'ZVCXI_FF_FITRW' ##NO_TEXT.
  constants C_PARID_REDUW type /VCXI/VKS_PARID value 'ZVCXI_FF_REDUW' ##NO_TEXT.

  methods GET_FITRW
    exporting
      !EF_FITRW type ZVCXI_FFS_FITRW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIWID
    exporting
      !ES_FIWID type ZVCXI_F0S_S_FIWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RDITA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RDITA) type ZVCXI_FFS_S_RDITA
    raising
      /VCXI/CX_CKX .
  methods GET_REDUW
    exporting
      !ES_REDUW type ZVCXI_FFS_S_REDUW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods IS_ONLY_ONE_CONI
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FITRW
    importing
      !IF_FITRW type ZVCXI_FFS_FITRW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_REDUW
    importing
      !IS_REDUW type ZVCXI_FFS_S_REDUW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_FITRW type /VCXI/VKSC_IEVNT value 'INIT_FITRW' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REDUW type /VCXI/VKSC_IEVNT value 'INIT_REDUW' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDITA_CHANGED type /VCXI/VKSC_IEVNT value 'RDITA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIFPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIFPX' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RDITA type /VCXI/VKS_PARID value 'ZVCXI_FF_RDITA' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.

  methods CHECK_FIWID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_FITRW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REDUW
    raising
      /VCXI/CX_CKX .
  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDITA
    importing
      !IS_RDITA type ZVCXI_FFS_S_RDITA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_FCONI definition
class ZCL_VCXI_FFSS_PR_FCONI implementation.
method CHECK_FIWID.

*** 0 - Film Width is maintained.
*** 1 - Film Width is not maintained.

  data: LS_FIWID type ZVCXI_F0S_S_FIWID.

*** Start positive
  move 0 to RF_RETURN.

*** Get Film Width
  ME->GET_FIWID( importing ES_FIWID = LS_FIWID ).

  if LS_FIWID-FIWID is initial.
    move 1 to RF_RETURN.
    return.
  endif.

endmethod.
  method GET_FITRW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).
    move LS_PARAM-ATWRT to EF_FITRW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIWID.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RDITA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).
    move LS_PARAM-ATFLV to RS_RDITA-RDITA.
    move LS_PARAM-UNIT  to RS_RDITA-RDITA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_REDUW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).
    move LS_PARAM-ATFLV to ES_REDUW-REDUW.
    move LS_PARAM-UNIT  to ES_REDUW-REDUW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Film Width
    if ME->CHECK_FIWID( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Film Width
    case ME->CHECK_FIWID( ).
      when 0.
***     Film Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '106' ).

      when 1.
***     Film Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '107' ).

    endcase.


  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_INIT_REDUW.
        ME->HANDLE_INIT_REDUW( ).

      when C_IEVNT_I_INIT_FITRW.
        ME->HANDLE_INIT_FITRW( ).

    endcase.

  endmethod.
  method HANDLE_INIT_FITRW.

    data: LF_FITRW type ZVCXI_FFS_FITRW.

    check ME->IS_ONLY_ONE_CONI( ) eq ABAP_TRUE.

*** Initialize Flag Ignore Trim required
    ME->SET_FITRW( IF_FITRW = LF_FITRW ).

  endmethod.
  method HANDLE_INIT_REDUW.

    data: LS_REDUW type ZVCXI_FFS_S_REDUW.

    check ME->IS_ONLY_ONE_CONI( ) eq ABAP_TRUE.

*** Initialize Reduction on Width
    ME->SET_REDUW( IS_REDUW = LS_REDUW ).

  endmethod.
  method IS_ONLY_ONE_CONI.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.

    move ABAP_TRUE to RF_RETURN.

*** Get Sibling Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***   Get Siblings of a specific Provider Type
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).
****  Ignore myself
      delete LT_GATE where TABLE_LINE eq ME->R_GATE.

      if LT_GATE is not initial.
        move ABAP_FALSE to RF_RETURN.
        exit.
      endif.
    endloop.

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).

    move IF_FIFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIFPX_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
  method SET_FITRW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).

    move IF_FITRW to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITRW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RDITA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).

    if IS_RDITA is supplied.
      LS_PARAM-ATFLV = IS_RDITA-RDITA.
      LS_PARAM-UNIT  = IS_RDITA-RDITA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDITA_CHANGED ).
    endif.

  endmethod.
  method SET_REDUW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).

    move IS_REDUW-REDUW     to LS_PARAM-ATFLV.
    move IS_REDUW-REDUW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REDUW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_ANCHI~ADD_XCON.

    move ME->R_GATE to RR_GATE.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS      type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Backward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LF_FISTX type        ZVCXI_FFS_FISTX,
          LF_INDEX type        I.
    data: LS_TREQW      type        ZVCXI_FFS_S_TREQW,
          LS_TREQW_NEXT type        ZVCXI_FFS_S_TREQW,
          LS_FITIN      type        ZVCXI_FFS_S_FITIN,
          LS_FITIN_NEXT type        ZVCXI_FFS_S_FITIN,
          LS_FITEX      type        ZVCXI_FFS_S_FITEX,
          LS_FITEX_NEXT type        ZVCXI_FFS_S_FITEX,
          LS_SURWT      type        ZVCXI_F0S_S_SURWT,
          LS_SURWT_NEXT type        ZVCXI_F0S_S_SURWT,
          LS_RELEN      type        ZVCXI_FFS_S_RELEN,
          LS_RELEN_NEXT type        ZVCXI_FFS_S_RELEN.
    data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT        type ref to ZIF_VCXI_FFSS_COMM_NEXT,
          LR_BL_FISTRUCT      type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FISTRUCT_NEXT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FIFPROP       type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIFPROP_NEXT  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.


*** Super Forwarding
    SUPER->ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD( IT_GATE = IT_GATE ).


***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      move SY-TABIX to LF_INDEX.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get largest Trim Requirement
      LR_COMM_NEXT->GET_TREQW( importing ES_TREQW = LS_TREQW_NEXT ).
      if LS_TREQW is initial or
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_TREQW_NEXT-TREQW
                                                      IF_CALCV_UOM_1 = LS_TREQW_NEXT-TREQW_UOM
                                                      IF_CALCV_2     = LS_TREQW-TREQW
                                                      IF_CALCV_UOM_2 = LS_TREQW-TREQW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_TREQW_NEXT to LS_TREQW.
      endif.

***   Get Sum of Internal Thickness
      LR_COMM_NEXT->GET_FITIN( importing ES_FITIN = LS_FITIN_NEXT ).
      if LS_FITIN_NEXT is not initial.
        if LS_FITIN is initial.
          move LS_FITIN_NEXT to LS_FITIN.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITIN_NEXT-FITIN
                                                              IF_CALCV_UOM_1 = LS_FITIN_NEXT-FITIN_UOM
                                                              IF_CALCV_2     = LS_FITIN-FITIN
                                                              IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITIN-FITIN_UOM
                                                    importing EF_CALCV       = LS_FITIN-FITIN
                                                              EF_CALCV_UOM   = LS_FITIN-FITIN_UOM ).

        endif.
      endif.

***   Get Sum of External Thickness
      LR_COMM_NEXT->GET_FITEX( importing ES_FITEX = LS_FITEX_NEXT ).
      if LS_FITEX_NEXT is not initial.
        if LS_FITEX is initial.
          move LS_FITEX_NEXT to LS_FITEX.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITEX_NEXT-FITEX
                                                              IF_CALCV_UOM_1 = LS_FITEX_NEXT-FITEX_UOM
                                                              IF_CALCV_2     = LS_FITEX-FITEX
                                                              IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITEX-FITEX_UOM
                                                    importing EF_CALCV       = LS_FITEX-FITEX
                                                              EF_CALCV_UOM   = LS_FITEX-FITEX_UOM ).

        endif.
      endif.

***   Get Sum of Surface Weight
      LR_COMM_NEXT->GET_SURWT( importing ES_SURWT = LS_SURWT_NEXT ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Get Repeat Length if not different
      LR_COMM_NEXT->GET_RELEN( importing ES_RELEN = LS_RELEN_NEXT ).
      if LS_RELEN_NEXT-RELEN is not initial.
        if LS_RELEN is initial.
          move LS_RELEN_NEXT to LS_RELEN.
        else.
          if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RELEN_NEXT-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN_NEXT-RELEN_UOM
                                                          IF_CALCV_2     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ).
***         Clear Repeat if different
            clear LS_RELEN-RELEN.
          endif.
        endif.
      endif.

***   Combine Film Structure
      clear LR_BL_FISTRUCT_NEXT.
      LR_COMM_NEXT->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      if LR_BL_FISTRUCT is not bound.
        move LR_BL_FISTRUCT_NEXT to LR_BL_FISTRUCT.
      else.
        LR_BL_FISTRUCT->ADD_BL_FISTRUCT( IR_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      endif.

***   Combine Film Forward Property
      clear LR_BL_FIFPROP_NEXT.
      LR_COMM_NEXT->GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      if LR_BL_FIFPROP is not bound.
        move LR_BL_FIFPROP_NEXT to LR_BL_FIFPROP.
      else.
        LR_BL_FIFPROP->MERGE( IR_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      endif.

***   Get Target Roll Diameter of Roll Handling
      if LR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_FCONO.
        data(LR_PR_RHNDL) = cast ZCL_VCXI_FFSS_PR_FCONO( LR_GATE->R_CLSPR )->GET_PRVDR_RHNDL( ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Trim Requirement on the Width
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

*** Forward Internal Film Thickness
    ME->SET_FITIN( IS_FITIN = LS_FITIN ).

*** Forward External Film Thickness
    ME->SET_FITEX( IS_FITEX = LS_FITEX ).

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Repeat Length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

*** Forward Film Structure XML
    if LR_BL_FISTRUCT is bound.
      LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    else.
      clear LF_FISTX.
    endif.
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

*** Forward Film Forward Property XML
    if LR_BL_FIFPROP is bound.
      ME->SET_FIFPX( IF_FIFPX = LR_BL_FIFPROP->GET_FIFPX( ) ).
    else.
      ME->SET_FIFPX( IF_FIFPX = SPACE ).
    endif.

*** Forward Roll Diameter Target
    if LR_PR_RHNDL is bound.
      LR_PR_RHNDL->GET_RDITA( importing ES_RDITA = data(LS_RDITA) ).
      ME->SET_RDITA( IS_RDITA = LS_RDITA ).
    else.
      ME->SET_RDITA( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LS_REDUW  type ZVCXI_FFS_S_REDUW.
    data: LT_FIRNG  type ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_FIRNG>  type ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = ER_BL_FIFPROP
                                                     EF_SETBY      = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Reduction On Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LS_REDUW-REDUW ne 0.
      move ER_BL_FIFPROP->T_FIRNG to LT_FIRNG.
      loop at LT_FIRNG assigning <S_FIRNG>.
***     Increase Film Width Minimum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMI
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMI_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMI_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMI
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMI_UOM ).

***     Increase Film Width Maximum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMA
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMA_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMA_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMA
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMA_UOM ).
      endloop.
      ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).
    endif.

***--------------------------------------------------------------------------------------
*** Get new Film Forward Property XML
    if EF_FIFPX is requested.
      EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing EF_FISTX = EF_FISTX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ES_FITEX
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.

*** Get Repeat Length (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN( importing ES_RELEN = ES_RELEN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ES_SURWT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

    data: LS_REDUW type ZVCXI_FFS_S_REDUW,
          LF_FITRW type ZVCXI_FFS_FITRW.

***------------------------------------------------------------------------------------------------
*** Get Trim Requirement on Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ES_TREQW
                                                     EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Add Reduction on Width
    ME->GET_FITRW( importing EF_FITRW = LF_FITRW ).
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LF_FITRW is initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_TREQW-TREQW
                                                          IF_CALCV_UOM_1 = ES_TREQW-TREQW_UOM
                                                          IF_CALCV_2     = LS_REDUW-REDUW
                                                          IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = ES_TREQW-TREQW
                                                          EF_CALCV_UOM   = ES_TREQW-TREQW_UOM ).
    else.
***   Set to 0 if not ignored (FITRW)
      clear ES_TREQW-TREQW.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing EF_FIBPX = EF_FIBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).
    move LS_PARAM-STRNG to EF_FIFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID.

    data: LS_REDUW type ZVCXI_FFS_S_REDUW.
    data: LR_CX_CKX  type ref to /VCXI/CX_CKX.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Substract Reduction Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    try.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_FIWID-FIWID
                                                            IF_CALCV_UOM_1 = ES_FIWID-FIWID_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                  importing EF_CALCV       = ES_FIWID-FIWID
                                                            EF_CALCV_UOM   = ES_FIWID-FIWID_UOM ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        clear ES_FIWID-FIWID.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.
    if ES_FIWID-FIWID lt 0.
      move 0 to ES_FIWID-FIWID.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FITRW.

*** Get Flag - Ignore Trim Requirement on Width
    ME->GET_FITRW( importing EF_FITRW = RF_FITRW ).

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FIWID.

*** Get Film Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = RS_FIWID ).

  endmethod.
