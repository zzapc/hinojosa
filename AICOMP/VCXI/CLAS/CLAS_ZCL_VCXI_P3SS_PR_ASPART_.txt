
class ZCL_VCXI_P3SS_PR_ASPART definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XPART
  create public .

public section.

  interfaces ZIF_VCXI_P3SS_COMM_PREV .
  interfaces ZIF_VCXI_P3SS_APINFO .

  constants C_IPRVT_AFG type /VCXI/VKSC_IPRVT value 'ZVCXI_P3SS_AFG' ##NO_TEXT.
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE' ##NO_TEXT.
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE' ##NO_TEXT.
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ASBPX
    exporting
      !EF_ASBPX type ZVCXI_P3S_ASBPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_ASBPROP) type ref to ZCL_VCXI_P3SS_BL_ASBPROP
    raising
      /VCXI/CX_CKX .
  methods GET_ASFPX
    exporting
      !EF_ASFPX type ZVCXI_P3S_ASFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RR_BL_ASFPROP) type ref to ZCL_VCXI_P3SS_BL_ASFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_HNDDIM
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods GET_PRODH
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_APINFO type /VCXI/VKSC_IEVNT value 'RECALC_APINFO' ##NO_TEXT.
  constants C_IEVNT_O_ASFPX_CHANGED type /VCXI/VKSC_IEVNT value 'ASFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROHE_CHANGED type /VCXI/VKSC_IEVNT value 'PROHE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROLE_CHANGED type /VCXI/VKSC_IEVNT value 'PROLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROWI_CHANGED type /VCXI/VKSC_IEVNT value 'PROWI_CHANGED' ##NO_TEXT.
  constants C_PARID_ASFPX type /VCXI/VKS_PARID value 'ZVCXI_P3_ASFPX' ##NO_TEXT.

  methods SET_ASFPX
    importing
      !IF_ASFPX type ZVCXI_P3S_ASFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRODIM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P3SS_PR_ASPART definition
class ZCL_VCXI_P3SS_PR_ASPART implementation.
  method CHECK_PRODIM.

*** Start positive...
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

***--------------------------------------------------------------------------------------
*** Check Product Length
    if ME->GET_PROLE( )-PROLE is not initial.
      if IR_MESSAGE is bound.
***     Product Length is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Product Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Check Product Width
    if ME->GET_PROWI( )-PROWI is not initial.
      if IR_MESSAGE is bound.
***     Product Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '153' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Product Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '154' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Check Product Height
    if ME->GET_PROHE( )-PROHE is not initial.
      if IR_MESSAGE is bound.
***     Product Height is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '155' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Product Height is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P3SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '156' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Communicate only with Children (avoid communication with e.g. CSTEP_ASMBL)
    ME->ZIF_VCXI_PXSS_COMM_PREV~F_COMWC = ABAP_TRUE.

  endmethod.
  method GET_ASBPX.

***--------------------------------------------------------------------------------------
*** Create fresh instance of Assembly Backward Property
    RR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( ).

    if RR_BL_ASBPROP is bound.
***   Cost Split Distribution
      RR_BL_ASBPROP->SET_CSPLIT( IT_CSPLIT = ME->GET_CSPLIT( ) ).

***   Product Dimensions
      RR_BL_ASBPROP->SET_PRODIM( IS_PRODIM = value #( S_PROLE = ME->GET_PROLE( )
                                                      S_PROWI = ME->GET_PROWI( )
                                                      S_PROHE = ME->GET_PROHE( ) ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Return Corrugator Backward Property XML (Outbound)
    if EF_ASBPX is requested.
      move RR_BL_ASBPROP->GET_ASBPX( ) to EF_ASBPX.
    endif.

  endmethod.
  method GET_ASFPX.

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property (Inbound)
    ME->ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX( importing EF_ASFPX = EF_ASFPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property Instance
    if RR_BL_ASFPROP is requested.
      RR_BL_ASFPROP = ZCL_VCXI_P3SS_BL_ASFPROP=>FACTORY( IF_ASFPX = EF_ASFPX ).
    endif.

  endmethod.
  method GET_HNDDIM.

    data: LR_BL_ASFPROP type ref to ZCL_VCXI_P3SS_BL_ASFPROP.


*** Get Assembly Forward Property XML (Outbound)
    LR_BL_ASFPROP = ME->GET_ASFPX( ).
    check LR_BL_ASFPROP is bound.

*** Get Handling Dimension
    RS_HNDDIM = LR_BL_ASFPROP->S_HNDDIM.

  endmethod.
  method GET_PRODH.

*** Get Assembly Forward Property XML (Outbound)
    data(LR_BL_ASFPROP) = ME->GET_ASFPX( ).
    check LR_BL_ASFPROP is bound.

*** Get Product Hierarchy
    RF_PRODH = LR_BL_ASFPROP->F_PRODH.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method GET_PROHE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
    move LS_PARAM-ATFLV to RS_PROHE-PROHE.
    move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
    move LS_PARAM-ATFLV to RS_PROLE-PROLE.
    move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
    move LS_PARAM-ATFLV to RS_PROWI-PROWI.
    move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Product Dimensions
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRODIM( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Product Dimensions
    ME->CHECK_PRODIM( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_APINFO.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P3SS_APINFO~C_IEVNT_O_APINFO_CHANGED ).
    endcase.

  endmethod.
  method SET_ASFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASFPX ).

    move IF_ASFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ASFPX_CHANGED ).
    endif.

  endmethod.
  method SET_PROHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

    move IS_PROHE-PROHE     to LS_PARAM-ATFLV.
    move IS_PROHE-PROHE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROHE_CHANGED ).
    endif.

  endmethod.
  method SET_PROLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

    move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
    move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROLE_CHANGED ).
    endif.

  endmethod.
  method SET_PROWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

    move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
    move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROWI_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_APINFO~GET_APINFO.

    data: LR_PR_AREA_WGT type ref to ZCL_VCXI_PXSS_PR_AREA_WGT.


***------------------------------------------------------------------------------------------------
*** Part Ratio
    RS_APINFO-PARAT = ME->GET_PARAT( ).

*** Handling Dimension
    RS_APINFO-S_HNDDIM = ME->GET_HNDDIM( ).

*** Area and Weight Infos
    LR_PR_AREA_WGT = ME->GET_PRVDR_AREA_WGT( ).
    check LR_PR_AREA_WGT is bound.

    RS_APINFO-S_SBLAR = LR_PR_AREA_WGT->GET_SBLAR( ).
    RS_APINFO-S_SBLWT = LR_PR_AREA_WGT->GET_SBLWT( ).
    RS_APINFO-S_COUAR = LR_PR_AREA_WGT->GET_COUAR( ).
    RS_APINFO-S_COUWT = LR_PR_AREA_WGT->GET_COUWT( ).
    RS_APINFO-S_ADDWT = LR_PR_AREA_WGT->GET_ADDWT( ).

*** Product Hierarchy
    RS_APINFO-PRODH = ME->GET_PRODH( ).

  endmethod.
  method ZIF_VCXI_P3SS_COMM_PREV~GET_ASBPX.

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property (Outbound)
    RR_BL_ASBPROP = ME->GET_ASBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property Instance
    if EF_ASBPX is requested.
      EF_ASBPX = RR_BL_ASBPROP->GET_ASBPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_PREV~GET_ASFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASFPX ).
    move LS_PARAM-STRNG to EF_ASFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property Instance
    if RR_BL_ASFPROP is requested.
      RR_BL_ASFPROP = ZCL_VCXI_P3SS_BL_ASFPROP=>FACTORY( IF_ASFPX = EF_ASFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P3SS_COMM_NEXT,
          LR_BL_ASFPROP      type ref to ZCL_VCXI_P3SS_BL_ASFPROP,
          LR_BL_ASFPROP_NEXT type ref to ZCL_VCXI_P3SS_BL_ASFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Combine Assembly Forward Property
      LR_BL_ASFPROP_NEXT = LR_COMM_NEXT->GET_ASFPX( ).
      if LR_BL_ASFPROP is not bound.
        move LR_BL_ASFPROP_NEXT to LR_BL_ASFPROP.
      else.
        LR_BL_ASFPROP->MERGE( IR_BL_ASFPROP = LR_BL_ASFPROP_NEXT ).
      endif.

    endloop.

*** Forward Assembly Forward Property XML
    if LR_BL_ASFPROP is bound.
      ME->SET_ASFPX( IF_ASFPX = LR_BL_ASFPROP->GET_ASFPX( ) ).
    else.
      ME->SET_ASFPX( IF_ASFPX = SPACE ).
    endif.

  endmethod.
