
class ZCL_VCXI_PCSP_PR_ADDON_CORR_CR definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_ADDON
  create public .

public section.

  interfaces ZIF_VCXI_PCSP_ADJ_FLUTE .
  interfaces ZIF_VCXI_PCSP_ADJ_RODIM .
  interfaces ZIF_VCXI_PCSP_CONV_ATR .

  constants C_IAATY_BOARD type /VCXI/VSMC_IAATY value 'PC_AA_BOARD'. "#EC NOTEXT
  constants C_IAATY_FLUTE type /VCXI/VSMC_IAATY value 'PC_AA_FLUTE'. "#EC NOTEXT
  constants C_PARID_BOARD type /VCXI/VKS_PARID value 'ZVCXI_PC_BOARD'. "#EC NOTEXT
  constants C_PARID_COWID type /VCXI/VKS_PARID value 'ZVCXI_PC_COWID'. "#EC NOTEXT
  constants C_PARID_FLUTE type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTE'. "#EC NOTEXT
  constants C_PARID_PCDIR type /VCXI/VKS_PARID value 'ZVCXI_P0_PCDIR'. "#EC NOTEXT
  constants C_PARID_PCTYP type /VCXI/VKS_PARID value 'ZVCXI_P0_PCTYP'. "#EC NOTEXT
  constants C_PARID_PCUPS type /VCXI/VKS_PARID value 'ZVCXI_P0_PCUPS'. "#EC NOTEXT
  constants C_PARID_RODIA type /VCXI/VKS_PARID value 'ZVCXI_PC_RODIA'. "#EC NOTEXT
  constants C_PARID_ROLEN type /VCXI/VKS_PARID value 'ZVCXI_PC_ROLEN'. "#EC NOTEXT
  constants C_PARID_ROWID type /VCXI/VKS_PARID value 'ZVCXI_PC_ROWID'. "#EC NOTEXT

  methods GET_BOARD
    returning
      value(RF_BOARD) type ZVCXI_PCS_BOARD
    raising
      /VCXI/CX_CKX .
  methods GET_COWID
    returning
      value(RS_COWID) type ZVCXI_PCS_S_COWID
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIR
    returning
      value(RF_PCDIR) type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .
  methods GET_PCTYP
    returning
      value(RF_PCTYP) type ZVCXI_P0SP_PCTYP
    raising
      /VCXI/CX_CKX .
  methods GET_PCTYP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PCUPS
    returning
      value(RF_PCUPS) type ZVCXI_P0SP_PCUPS
    raising
      /VCXI/CX_CKX .
  methods GET_RODIA
    returning
      value(RS_RODIA) type ZVCXI_PCS_S_RODIA
    raising
      /VCXI/CX_CKX .
  methods GET_ROLEN
    returning
      value(RS_ROLEN) type ZVCXI_PCS_S_ROLEN
    raising
      /VCXI/CX_CKX .
  methods GET_ROWID
    returning
      value(RS_ROWID) type ZVCXI_PCS_S_ROWID
    raising
      /VCXI/CX_CKX .
  methods SET_BOARD
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COWID
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PCDIR
    importing
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PCTYP
    importing
      !IF_PCTYP type ZVCXI_P0SP_PCTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PCUPS
    importing
      !IF_PCUPS type ZVCXI_P0SP_PCUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RODIA
    importing
      !IS_RODIA type ZVCXI_PCS_S_RODIA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ROLEN
    importing
      !IS_ROLEN type ZVCXI_PCS_S_ROLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ROWID
    importing
      !IS_ROWID type ZVCXI_PCS_S_ROWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_MC_CONSU type /VCXI/VKSC_IEVNT value 'RECALC_MC_CONSU'. "#EC NOTEXT
  constants C_IEVNT_O_BOARD_CHANGED type /VCXI/VKSC_IEVNT value 'BOARD_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FLUTE_CHANGED type /VCXI/VKSC_IEVNT value 'FLUTE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MQTY_CONV_CHANGED type /VCXI/VKSC_IEVNT value 'MQTY_CONV_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_RODIM_CHANGED type /VCXI/VKSC_IEVNT value 'RODIM_CHANGED'. "#EC NOTEXT

  methods HANDLE_RECALC_MC_CONSU
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PCSP_PR_ADDON_CORR_CR definition
class ZCL_VCXI_PCSP_PR_ADDON_CORR_CR implementation.
method GET_BOARD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARD ).
  move LS_PARAM-ATWRT to RF_BOARD.

endmethod.
method GET_COWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID ).
  move LS_PARAM-ATFLV to RS_COWID-COWID.
  move LS_PARAM-UNIT  to RS_COWID-COWID_UOM.

endmethod.
method GET_FLUTE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).
  move LS_PARAM-ATWRT to RF_FLUTE.

endmethod.
method GET_PCDIR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).
  move LS_PARAM-ATWRT to RF_PCDIR.

endmethod.
method GET_PCTYP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).
  move LS_PARAM-ATWRT to RF_PCTYP.

endmethod.
method GET_PCTYP_DESCR.

  data: LF_PCTYP type ZVCXI_P0SP_PCTYP.

  LF_PCTYP = ME->GET_PCTYP( ).
  RF_DESCR = ZCL_VCXI_P0SP_CUST_PCTYP=>GET_PCTYP_DESCR( IF_PCTYP = LF_PCTYP ).

endmethod.
method GET_PCUPS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).
  move LS_PARAM-ATFLV to RF_PCUPS.

endmethod.
method GET_RODIA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).
  move LS_PARAM-ATFLV to RS_RODIA-RODIA.
  move LS_PARAM-UNIT  to RS_RODIA-RODIA_UOM.

endmethod.
method GET_ROLEN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).
  move LS_PARAM-ATFLV to RS_ROLEN-ROLEN.
  move LS_PARAM-UNIT  to RS_ROLEN-ROLEN_UOM.

endmethod.
method GET_ROWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).
  move LS_PARAM-ATFLV to RS_ROWID-ROWID.
  move LS_PARAM-UNIT  to RS_ROWID-ROWID_UOM.

endmethod.
method GET_STATUS.

  data: LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_RODIA type ZVCXI_PCS_S_RODIA.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Roll dimensions
  LS_ROLEN = ME->GET_ROLEN( ).
  LS_ROWID = ME->GET_ROWID( ).
  LS_RODIA = ME->GET_RODIA( ).

*** Check Roll Length
  if LS_ROLEN-ROLEN is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Roll Width
  if LS_ROWID-ROWID is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Roll Diameter
  if LS_RODIA-RODIA is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check PC Ups
  if ME->GET_PCUPS( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Board and Flute Type

*** Check BoardID
  if ME->GET_BOARD( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Flute Type
  if ME->GET_FLUTE( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_RODIA type ZVCXI_PCS_S_RODIA.
  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Roll dimensions
  LS_ROLEN = ME->GET_ROLEN( ).
  LS_ROWID = ME->GET_ROWID( ).
  LS_RODIA = ME->GET_RODIA( ).

*** Check Roll Length
  if LS_ROLEN-ROLEN is not initial.
***   Roll Length is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '010' ).
  else.
***   Roll Length is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '011' ).
  endif.

*** Check Roll Width
  if LS_ROWID-ROWID is not initial.
***   Roll Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '012' ).
  else.
***   Roll Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '013' ).
  endif.

*** Check Roll Diameter
  if LS_RODIA-RODIA is not initial.
***   Roll Diameter is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '014' ).
  else.
***   Roll Diameter is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '015' ).
  endif.

*** Check PC Ups
  if ME->GET_PCUPS( ) is not initial.
***   PC Ups is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '007' ).
  else.
***   PC Ups is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '008' ).
  endif.

***------------------------------------------------------------------
*** Check BoardID and Flute Type
*** Check BoardID
  if ME->GET_BOARD( ) is not initial.
***   BoardID is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '001' ).
  else.
***   BoardID is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '002' ).
  endif.

*** Check Flute Type
  if ME->GET_BOARD( ) is not initial.
***   Flute Type is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '003' ).
  else.
***   Flute Type is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SP'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '004' ).
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_MC_CONSU.
      ME->HANDLE_RECALC_MC_CONSU( ).
  endcase.

endmethod.
method HANDLE_RECALC_MC_CONSU.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LS_MQTYI           type        ZVCXI_XCSP_S_MQTYI.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MACHINE      type ref to ZCL_VCXI_XCSP_PR_MACHINE,
         LR_PR_MC           type ref to ZCL_VCXI_XCSP_PR_MC.

***------------------------------------------------------------------
*** Get all Machine Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MACHINE=>C_IPRVT_XCS_MACHINE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: LR_PR_MACHINE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MACHINE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MACHINE.
    endtry.
    if LR_PR_MACHINE is bound.
      move LR_PR_MACHINE->GET_MQTYI( ) to LS_MQTYI.
    endif.

  endif.

***------------------------------------------------------------------
*** Get all Material Consumptions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_MC=>C_IPRVT_XCS_MC
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Start Recalc Consumption of all Material Consumptions
  loop at LT_GATE into LR_GATE.
    try.

        clear: LR_PR_MC.
        move LR_GATE->R_CLSPR ?to LR_PR_MC.
        check LR_PR_MC is bound.
        LR_PR_MC->CALC_CONSU( IS_MQTYI = LS_MQTYI ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

  endloop.

endmethod.
method SET_BOARD.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARD ).

  move IF_BOARD to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARD_CHANGED ).
  endif.

endmethod.
method SET_COWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID ).

  move IS_COWID-COWID     to LS_PARAM-ATFLV.
  move IS_COWID-COWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
  endif.

endmethod.
method SET_FLUTE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).

  move IF_FLUTE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTE_CHANGED ).
  endif.

endmethod.
method SET_PCDIR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).

  move IF_PCDIR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method SET_PCTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).

  move IF_PCTYP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method SET_PCUPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).

  move IF_PCUPS to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
  endif.

endmethod.
method SET_RODIA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).

  move IS_RODIA-RODIA     to LS_PARAM-ATFLV.
  move IS_RODIA-RODIA_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method SET_ROLEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).

  move IS_ROLEN-ROLEN     to LS_PARAM-ATFLV.
  move IS_ROLEN-ROLEN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
  endif.

endmethod.
method SET_ROWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).

  move IS_ROWID-ROWID     to LS_PARAM-ATFLV.
  move IS_ROWID-ROWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_ADJ_FLUTE~ADJ_FLUTE.

  CF_FLUTE = ME->GET_FLUTE( ).

endmethod.
method ZIF_VCXI_PCSP_ADJ_RODIM~CALC_RODIM_OUT.

  data:          LS_ROLEN    type ZVCXI_PCS_S_ROLEN,
                 LS_ROWID    type ZVCXI_PCS_S_ROWID,
                 LS_RODIA    type ZVCXI_PCS_S_RODIA.
  field-symbols: <S_RODIM>   type ZVCXI_PCSP_S_RODIM.

***------------------------------------------------------------------
*** Add new Roll Dimension
  append initial line to CT_RODIM assigning <S_RODIM>.

*** PC Type
  move ME->GET_PCTYP( )       to <S_RODIM>-PCTYP.

*** Roll Length
  move ME->GET_ROLEN( ) to LS_ROLEN.
  move-corresponding LS_ROLEN to <S_RODIM>.

*** Roll Width
  move ME->GET_ROWID( ) to LS_ROWID.
  move-corresponding LS_ROWID to <S_RODIM>.

*** Roll Diameter
  move ME->GET_RODIA( ) to LS_RODIA.
  move-corresponding LS_RODIA to <S_RODIM>.

*** PC Ups
  move ME->GET_PCUPS( )       to <S_RODIM>-PCUPS.

*** Number of Outs
  move 1                      to <S_RODIM>-NOOUT.

*** PC Direction
  move ME->GET_PCDIR( )       to <S_RODIM>-PCDIR.

endmethod.
method ZIF_VCXI_PCSP_CONV_ATR~CONV_AREA_TO_ROLL.

  data:          LF_NOUPW     type F.
  data:          LF_PCUPS     type ZVCXI_P0SP_PCUPS,
                 LF_PCDIR     type ZVCXI_P0SP_PCDIR,
                 LF_PCTYP     type ZVCXI_P0SP_PCTYP.
  data:          LS_ROLEN     type ZVCXI_PCS_S_ROLEN,
                 LS_ROWID     type ZVCXI_PCS_S_ROWID,
                 LS_RODIA     type ZVCXI_PCS_S_RODIA,
                 LS_COWID     type ZVCXI_PCS_S_COWID.
  field-symbols: <S_RODIM>    type ZVCXI_PCSP_S_RODIM.

***------------------------------------------------------------------------------------------------
*** Get Roll Dimensions
  LS_ROLEN = ME->GET_ROLEN( ).
  LS_ROWID = ME->GET_ROWID( ).
  LS_RODIA = ME->GET_RODIA( ).
  LF_PCUPS = ME->GET_PCUPS( ).
  LF_PCDIR = ME->GET_PCDIR( ).
  LF_PCTYP = ME->GET_PCTYP( ).

*** Get Corrugation Width
  LS_COWID = ME->GET_COWID( ).

***------------------------------------------------------------------------------------------------
  if LS_COWID-COWID is initial.
    append initial line to RT_RODIM assigning <S_RODIM>.
    move-corresponding LS_ROLEN to <S_RODIM>.
    move-corresponding LS_ROWID to <S_RODIM>.
    move-corresponding LS_RODIA to <S_RODIM>.
    move               LF_PCUPS to <S_RODIM>-PCUPS.
    move               LF_PCDIR to <S_RODIM>-PCDIR.
    move               LF_PCTYP to <S_RODIM>-PCTYP.

***------------------------------------------------------------------------------------------------
  else.
    check LS_ROWID-ROWID is not initial.

*** Check how many times the Roll fits in the Corrugation Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COWID-COWID
                                                        IF_CALCV_UOM_1 = LS_COWID-COWID_UOM
                                                        IF_CALCV_2     = LS_ROWID-ROWID
                                                        IF_CALCV_UOM_2 = LS_ROWID-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_NOUPW ).

*** Corrugation Width is new Width
    move LS_COWID-COWID     to LS_ROWID-ROWID.
    move LS_COWID-COWID_UOM to LS_ROWID-ROWID_UOM.

*** With corresponding Ups
    LF_PCUPS = LF_PCUPS * floor( LF_NOUPW ).

    append initial line to RT_RODIM assigning <S_RODIM>.
    move-corresponding LS_ROLEN to <S_RODIM>.
    move-corresponding LS_ROWID to <S_RODIM>.
    move-corresponding LS_RODIA to <S_RODIM>.
    move               LF_PCUPS to <S_RODIM>-PCUPS.
    move               LF_PCDIR to <S_RODIM>-PCDIR.
    move               LF_PCTYP to <S_RODIM>-PCTYP.

  endif.

endmethod.
method ZIF_VCXI_PCSP_CONV_ATR~CONV_ROLL_TO_AREA.

  data:          LF_NOUPW     type F.
  data:          LF_PCUPS     type ZVCXI_P0SP_PCUPS,
                 LF_PCTYP     type ZVCXI_P0SP_PCTYP.
  data:          LS_ROLEN     type ZVCXI_PCS_S_ROLEN,
                 LS_ROWID     type ZVCXI_PCS_S_ROWID,
                 LS_COWID     type ZVCXI_PCS_S_COWID,
                 LS_PCARE     type ZVCXI_P0SP_S_PCARE.
  field-symbols: <S_AREADIM>  type ZVCXI_P0SP_S_AREADIM.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions
  LS_ROLEN = ME->GET_ROLEN( ).
  LS_ROWID = ME->GET_ROWID( ).
  LF_PCUPS = ME->GET_PCUPS( ).
  LF_PCTYP = ME->GET_PCTYP( ).


*** Get Corrugation Width
  LS_COWID = ME->GET_COWID( ).

***------------------------------------------------------------------------------------------------
  if LS_COWID-COWID is initial.
*** Calculate Single Sheet Area
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ROLEN-ROLEN
                                                        IF_CALCV_UOM_1 = LS_ROLEN-ROLEN_UOM
                                                        IF_CALCV_2     = LS_ROWID-ROWID
                                                        IF_CALCV_UOM_2 = LS_ROWID-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_PCARE-PCARE
                                                        EF_CALCV_UOM   = LS_PCARE-PCARE_UOM ).

    append initial line to RT_AREADIM assigning <S_AREADIM>.
    move-corresponding LS_PCARE to <S_AREADIM>.
    move               LF_PCUPS to <S_AREADIM>-PCUPS.
    move               LF_PCTYP to <S_AREADIM>-PCTYP.


***------------------------------------------------------------------------------------------------
  else.
    check LS_ROWID-ROWID is not initial.

*** Check how many times the Roll fits in the Corrugation Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COWID-COWID
                                                        IF_CALCV_UOM_1 = LS_COWID-COWID_UOM
                                                        IF_CALCV_2     = LS_ROWID-ROWID
                                                        IF_CALCV_UOM_2 = LS_ROWID-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_NOUPW ).

*** Calculate Corrugation Area (Multi-Roll + Siderun)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ROLEN-ROLEN
                                                        IF_CALCV_UOM_1 = LS_ROLEN-ROLEN_UOM
                                                        IF_CALCV_2     = LS_COWID-COWID
                                                        IF_CALCV_UOM_2 = LS_COWID-COWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_PCARE-PCARE
                                                        EF_CALCV_UOM   = LS_PCARE-PCARE_UOM ).

    append initial line to RT_AREADIM assigning <S_AREADIM>.
    move-corresponding LS_PCARE to <S_AREADIM>.
    <S_AREADIM>-PCUPS = LF_PCUPS * floor( LF_NOUPW ).

  endif.

endmethod.
