
class ZCL_VCXI_XCSS_CUST_MULTIQTY definition
  public
  create protected .

public section.

  data F_WERKS type WERKS_D read-only .
  data S_CMPRK type /VCXI/VKC_S_CMPRK read-only .
  data T_MQDEF type ZVCXI_XCSS_TT_MQDEF read-only .

  methods GET_CALC_LOGIC
    importing
      !IF_CMQTY type ZVCXI_XCSS_CMQTY
      !IF_TMQTY type ZVCXI_XCSS_TMQTY
    exporting
      value(EF_OBLIG) type ZVCXI_XCS_OBLIG
      value(EF_OOVRR) type ZVCXI_XCSS_OOVRR
      value(EF_IEALI) type /VCXI/VKSC_IEALI
      value(EF_FNAME) type FUNCMODL
      value(EF_PARID) type /VCXI/VKS_PARID
      value(EF_MQNOM) type ZVCXI_XCSS_MQNOM
      value(EF_MQDEN) type ZVCXI_XCSS_MQDEN
      value(ES_QFIXD) type ZVCXI_XCSS_S_QFIXD
    raising
      /VCXI/CX_CKX .
  methods GET_CMQTY_DESCR
    importing
      !IF_CMQTY type ZVCXI_XCSS_CMQTY
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK optional
      !IF_WERKS type WERKS_D
      !IT_APPE type ZVCXI_XCS_TT_APPE optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_XCSS_CUST_MULTIQTY
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
             S_CMPRK    type        /VCXI/VKC_S_CMPRK,
             WERKS      type        WERKS_D,
             T_APPE     TYPE        ZVCXI_XCS_TT_APPE,
             R_INSTANCE type ref to ZCL_VCXI_XCSS_CUST_MULTIQTY,
           end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .

  class-data T_INSTANCE type YT_INSTANCE .

  methods CONSTRUCTOR
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_WERKS type WERKS_D
      !IT_APPE type ZVCXI_XCS_TT_APPE
    raising
      /VCXI/CX_CKX .
private section.

  data T_APPE type ZVCXI_XCS_TT_APPE .

  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSS_CUST_MULTIQTY definition
class ZCL_VCXI_XCSS_CUST_MULTIQTY implementation.
method CONSTRUCTOR.

  field-symbols: <S_INSTANCE>   type       YS_INSTANCE.

***---------------------------------------------------------------------------------
*** Set Config. Material & Profile Key
  move IS_CMPRK to ME->S_CMPRK.

*** Set Plant
  move IF_WERKS to ME->F_WERKS.

*** Set Application Environment
  move IT_APPE  to ME->T_APPE.

*** Load from Database
  ME->LOAD_FROM_DB( ).

***---------------------------------------------------------------------------------
*** Add to Instance Buffer
  append initial line to ZCL_VCXI_XCSS_CUST_MULTIQTY=>T_INSTANCE assigning <S_INSTANCE>.
  move ME->S_CMPRK    to <S_INSTANCE>-S_CMPRK.
  move ME->F_WERKS    to <S_INSTANCE>-WERKS.
  move ME             to <S_INSTANCE>-R_INSTANCE.

endmethod.
method GET_CALC_LOGIC.

  data:  LS_MQDEF      type  ZVCXI_XCSS_S_MQDEF,
         LS_MQFIELD    type  ZVCXI_XCSS_S_MQFIELD.

*** Read Line
  read table ME->T_MQDEF into LS_MQDEF
                         with key CMQTY = IF_CMQTY.
  check SY-SUBRC eq 0.

*** Read Field
  read table LS_MQDEF-T_MQFIELD into LS_MQFIELD
                                with key TMQTY = IF_TMQTY.
  check SY-SUBRC eq 0.

*** Return Values
  move LS_MQFIELD-OBLIG          to EF_OBLIG.
  move LS_MQFIELD-OOVRR          to EF_OOVRR.
  move LS_MQFIELD-IEALI          to EF_IEALI.
  move LS_MQFIELD-FNAME          to EF_FNAME.
  move LS_MQFIELD-PARID          to EF_PARID.
  move LS_MQFIELD-MQNOM          to EF_MQNOM.
  move LS_MQFIELD-MQDEN          to EF_MQDEN.
  move-corresponding LS_MQFIELD  to ES_QFIXD.

endmethod.
method GET_CMQTY_DESCR.

  data:  LS_MQDEF type ZVCXI_XCSS_S_MQDEF.

  read table ME->T_MQDEF into LS_MQDEF
                         with key CMQTY = IF_CMQTY.

  if SY-SUBRC eq 0.
    move LS_MQDEF-DESCR to RF_DESCR.
  endif.

endmethod.
method GET_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCSS_CUST_MULTIQTY=>T_INSTANCE into LS_INSTANCE
                                                     with key S_CMPRK = IS_CMPRK
                                                              WERKS   = IF_WERKS
                                                              T_APPE  = IT_APPE.

  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
  else.
    create object RR_INSTANCE
      exporting
        IS_CMPRK = IS_CMPRK
        IF_WERKS = IF_WERKS
        IT_APPE  = IT_APPE.
  endif.

endmethod.
method LOAD_FROM_DB.

  data:          LS_TC520      type          ZVCXI_XCS_TC520,
                 LS_TC521      type          ZVCXI_XCS_TC521,
                 LS_TC522      type          ZVCXI_XCS_TC522,
                 LS_TC510T     type          ZVCXI_XCS_TC510T,
                 LS_TC511      type          ZVCXI_XCS_TC511.
  data:          LT_TC520      type table of ZVCXI_XCS_TC520,
                 LT_TC521      type table of ZVCXI_XCS_TC521,
                 LT_TC522      type table of ZVCXI_XCS_TC522,
                 LT_TC510T     type table of ZVCXI_XCS_TC510T,
                 LT_TC511      type table of ZVCXI_XCS_TC511.
  field-symbols: <S_MQDEF>     type          ZVCXI_XCSS_S_MQDEF,
                 <S_MQFIELD>   type          ZVCXI_XCSS_S_MQFIELD.

  clear: ME->T_MQDEF.

***--------------------------------------------------------------------------------------
*** Get all Entries with matching Plant and the once without
  select * into table LT_TC520
           from ZVCXI_XCS_TC520
          where CMATN  eq ME->S_CMPRK-CMATN
           and  PRFID  eq ME->S_CMPRK-PRFID
           and ( WERKS eq ME->F_WERKS
              or WERKS eq ' ' ).

*** Skip the ones without if a plant one is available
  loop at LT_TC520 into LS_TC520 where WERKS is initial.
    read table LT_TC520 with key CMQTY = LS_TC520-CMQTY
                                 WERKS = ME->F_WERKS
                               transporting no fields.
    if SY-SUBRC eq 0.
      delete LT_TC520.
    endif.
  endloop.

  sort LT_TC520 ascending by CMQTY.
  check LT_TC520 is not initial.

***--------------------------------------------------------------------------------------
*** Get Environment based
  select * into table LT_TC521
           from ZVCXI_XCS_TC521
           for all entries in LT_TC520
         where CMATN eq LT_TC520-CMATN
           and PRFID eq LT_TC520-PRFID
           and WERKS eq LT_TC520-WERKS
           and CMQTY eq LT_TC520-CMQTY.

*** Remove the once where Environment doesn't fit
  loop at LT_TC521 into LS_TC521
                  where IAPPE is not initial.
    read table ME->T_APPE with key IAPPE = LS_TC521-IAPPE
                          transporting no fields.
    if SY-SUBRC ne 0.
      delete LT_TC521.
    else.
***   Remove all Environment independent
      delete LT_TC521 where IAPPE is initial.
    endif.
  endloop.

*** Skip the ones without if a Environment one is available
  loop at LT_TC521 into LS_TC521 where IAPPE is initial.
    loop at LT_TC521 transporting no fields
                     where CMQTY eq LS_TC521-CMQTY
                      and  IAPPE is not initial.
    endloop.
    if SY-SUBRC eq 0.
      delete LT_TC521.
    endif.
  endloop.

  sort LT_TC521.
  delete adjacent duplicates from LT_TC521 comparing MANDT CMATN PRFID WERKS CMQTY.
  check LT_TC521 is not initial.

***--------------------------------------------------------------------------------------
*** Get Fields
  select * into table LT_TC522
           from ZVCXI_XCS_TC522
           for all entries in LT_TC521
         where CMATN eq LT_TC521-CMATN
           and PRFID eq LT_TC521-PRFID
           and WERKS eq LT_TC521-WERKS
           and CMQTY eq LT_TC521-CMQTY
           and IAPPE eq LT_TC521-IAPPE.

***--------------------------------------------------------------------------------------
*** Find matching descriptions
  select * into table LT_TC510T
           from ZVCXI_XCS_TC510T
           for all entries in LT_TC520
         where IMQTY eq LT_TC520-IMQTY
           and LANGU eq SY-LANGU.

*** Find Calculation Logic
  select * into table LT_TC511
           from ZVCXI_XCS_TC511
           for all entries in LT_TC520
         where IMQTY eq LT_TC520-IMQTY.

***--------------------------------------------------------------------------------------
*** Build Available Multi Quantity
  loop at LT_TC520 into LS_TC520.
    read table LT_TC521 into LS_TC521 with key CMQTY = LS_TC520-CMQTY.
    check SY-SUBRC eq 0.

    append initial line to ME->T_MQDEF assigning <S_MQDEF>.
    move-corresponding LS_TC520  to <S_MQDEF>.
    move-corresponding LS_TC521  to <S_MQDEF>.

*** Add Description
    read table LT_TC510T into LS_TC510T
                         with key IMQTY = LS_TC520-IMQTY.
    if SY-SUBRC eq 0.
      move LS_TC510T-DESCR   to <S_MQDEF>-DESCR.
    endif.

***--------------------------------------------------------------------------------------
*** Build Fields
    loop at LT_TC511 into LS_TC511
                     where IMQTY eq LS_TC520-IMQTY.
      append initial line to <S_MQDEF>-T_MQFIELD assigning <S_MQFIELD>.
      move-corresponding LS_TC511 to <S_MQFIELD>.

***   Read Model Specifics
      read table LT_TC522 into LS_TC522 with key CMQTY = LS_TC521-CMQTY
                                                 TMQTY = LS_TC511-TMQTY.
      if SY-SUBRC eq 0.
        move-corresponding LS_TC522 to <S_MQFIELD>.
      endif.
    endloop.
  endloop.

endmethod.
