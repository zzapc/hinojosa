
class ZCL_VCXI_XCA_DPM_DOCUMENT definition
  public
  final
  create public .

public section.

  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IF_DOMID type ZVCXI_XCA_DPM_DOMID
    raising
      /VCXI/CX_CKX .
  methods CONV_DP_TO_XML
    importing
      !IR_DATA type ref to DATA optional
    exporting
      !ER_IXML_DOCUMENT type ref to IF_IXML_DOCUMENT
    returning
      value(RF_XML) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods CONV_XML_TO_DP
    importing
      !IF_XML type /VCXI/CKX_STRING optional
      !IF_XXML type XSTRING optional
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    returning
      value(RR_DATA) type ref to DATA
    raising
      /VCXI/CX_CKX .
protected section.

  data S_TC210 type ZVCXI_XCA_TC210 .
  class-data R_IXML type ref to IF_IXML .

  methods READ_ELEMENT
    importing
      !IR_PARENT type ref to IF_IXML_NODE
      !IF_ELMNT type ZVCXI_XCA_DPM_ELMNT
      !IR_DATA type ref to DATA
      !IR_CONV type ref to ZCL_VCXI_XCA_DPM_CONV
    raising
      /VCXI/CX_CKX .
  methods ADD_ELEMENT
    importing
      !IR_DOCUMENT type ref to IF_IXML_DOCUMENT
      !IR_PARENT type ref to IF_IXML_NODE
      !IF_ELMNT type ZVCXI_XCA_DPM_ELMNT
      !IR_DATA type ref to DATA
      !IR_CONV type ref to ZCL_VCXI_XCA_DPM_CONV
    returning
      value(RR_ELEMENT) type ref to IF_IXML_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_DATA_REF
    importing
      !IR_DATA type ref to DATA
      !IS_SRCMP type ZVCXI_XCA_DPM_S_SRCMP
    returning
      value(RR_DATA) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_VALUE
    importing
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
      !IR_CONV type ref to ZCL_VCXI_XCA_DPM_CONV
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  methods SET_VALUE
    importing
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
      !IF_VALUE type STRING
      !IR_CONV type ref to ZCL_VCXI_XCA_DPM_CONV
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCA_DPM_DOCUMENT definition
class ZCL_VCXI_XCA_DPM_DOCUMENT implementation.
  method ADD_ELEMENT.
*{   REPLACE        HEDK927942                                        2
*\
  field-symbols <FS_DATA_TABLE> type any table.
*}   REPLACE
    data: LF_KIND type ABAP_TYPECATEGORY.
    data: LR_LINE type ref to DATA.
    field-symbols: <S_LINE> type ANY.

***------------------------------------------------------------------------------------------------
*** Get Customizing
    select single *
           into @data(LS_TC220)
           from ZVCXI_XCA_TC220
          where ELMNT = @IF_ELMNT.
    if SY-SUBRC ne 0.
***   No Customizing defined fo Element &1.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_DPM'
                                            IF_MSGNO = '002'
                                            IF_MSGV1 = IF_ELMNT ).
    endif.

***------------------------------------------------------------------------------------------------
*** Add Element to Document
    if LS_TC220-TAGNA is not initial.
      RR_ELEMENT = IR_DOCUMENT->CREATE_SIMPLE_ELEMENT_NS( NAME   = conv #( LS_TC220-TAGNA )
                                                          PARENT = IR_PARENT
                                                          VALUE  = ME->GET_VALUE( IS_VALMP = LS_TC220-S_VALMP
                                                                                  IR_DATA  = IR_DATA
                                                                                  IR_CONV  = IR_CONV ) ).
    endif.

*** Add Attributes
    if LS_TC220-TAGNA is not initial.
      select *
             into table @data(LT_TC221)
             from ZVCXI_XCA_TC221
            where ELMNT = @IF_ELMNT
            order by ATTRI.

      loop at LT_TC221 into data(LS_TC221).
        RR_ELEMENT->SET_ATTRIBUTE_NS( NAME  = conv #( LS_TC221-ATTRI )
                                      VALUE = ME->GET_VALUE( IS_VALMP = LS_TC221-S_VALMP
                                                             IR_DATA  = IR_DATA
                                                             IR_CONV  = IR_CONV ) ).
      endloop.
    endif.

***------------------------------------------------------------------------------------------------
*** Element with Sub Elements
    select *
           into table @data(LT_TC222)
           from ZVCXI_XCA_TC222
          where ELMNT = @IF_ELMNT
           order by SEPOS, ELMNT.

    loop at LT_TC222 into data(LS_TC222).
***   Get Data Source
      data(LR_DATA) = ME->GET_DATA_REF( IR_DATA  = IR_DATA
                                        IS_SRCMP = LS_TC222-S_SRCMP ).

      assign LR_DATA->* to field-symbol(<DATA>).

      case CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( P_DATA = <DATA> )->KIND.
        when CL_ABAP_TYPEDESCR=>KIND_TABLE.
***       Multiple Element
*{   REPLACE        HEDK927942                                        1
*\          loop at <DATA> reference into LR_LINE.
       if <FS_DATA_TABLE> is assigned. unassign <FS_DATA_TABLE>. endif.
          <FS_DATA_TABLE> = <DATA>.
          loop at <FS_DATA_TABLE> reference into LR_LINE.
*}   REPLACE
            ME->ADD_ELEMENT( IR_DOCUMENT = IR_DOCUMENT
                             IR_PARENT   = RR_ELEMENT
                             IF_ELMNT    = LS_TC222-SUBEL
                             IR_DATA     = LR_LINE
                             IR_CONV     = IR_CONV ).
          endloop.

        when others.
***       Single Element
          ME->ADD_ELEMENT( IR_DOCUMENT = IR_DOCUMENT
                           IR_PARENT   = RR_ELEMENT
                           IF_ELMNT    = LS_TC222-SUBEL
                           IR_DATA     = LR_DATA
                           IR_CONV     = IR_CONV ).
      endcase.
    endloop.

***------------------------------------------------------------------------------------------------
*** Remove initial Elements
    if RR_ELEMENT is bound and
       RR_ELEMENT->IF_IXML_NODE~NUM_CHILDREN( ) eq 0.
      RR_ELEMENT->IF_IXML_NODE~REMOVE_NODE( ).
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

    R_IXML = CL_IXML=>CREATE( ).

  endmethod.
  method CONSTRUCTOR.

    select single *
           into @ME->S_TC210
           from ZVCXI_XCA_TC210
          where DOMID = @IF_DOMID.
    if SY-SUBRC ne 0.
***   Document Object Model &1 does not exist.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_DPM'
                                            IF_MSGNO = '001'
                                            IF_MSGV1 = IF_DOMID ).
    endif.

  endmethod.
  method CONV_DP_TO_XML.

    data: LF_XSTRING type XSTRING.


*** Create iXML Document
    ER_IXML_DOCUMENT = R_IXML->CREATE_DOCUMENT( ).

*** Specify the character coding of the document
    ER_IXML_DOCUMENT->SET_ENCODING( ENCODING = R_IXML->CREATE_ENCODING( BYTE_ORDER    = IF_IXML_ENCODING=>CO_NONE
                                                                        CHARACTER_SET = conv #( ME->S_TC210-ENCOD ) ) ).

*** Create Root Element
    ME->ADD_ELEMENT( IR_DOCUMENT = ER_IXML_DOCUMENT
                     IR_PARENT   = ER_IXML_DOCUMENT     "Root
                     IF_ELMNT    = ME->S_TC210-ELMNT
                     IR_DATA     = IR_DATA
                     IR_CONV     = ZCL_VCXI_XCA_DPM_CONV=>FACTORY( IF_CVCLS = ME->S_TC210-CVCLS ) ).

*** Create Renderer and render Document to XString and convert to string in second step
*** (direct to string ignores defined codepage)
    R_IXML->CREATE_RENDERER( DOCUMENT = ER_IXML_DOCUMENT
                             OSTREAM  = R_IXML->CREATE_STREAM_FACTORY(
                                        )->CREATE_OSTREAM_XSTRING( STRING = LF_XSTRING )
                           )->RENDER( ).

*** Convert with customized CodePage
    RF_XML = CL_ABAP_CODEPAGE=>CONVERT_FROM( SOURCE   = LF_XSTRING
                                             CODEPAGE = conv #( ME->S_TC210-ENCOD ) ).

  endmethod.
  method CONV_XML_TO_DP.

    data: LR_ISTREAM type ref to IF_IXML_ISTREAM.


***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ref to (ME->S_TC210-DDOBJ).
    assign RR_DATA->* to field-symbol(<R_DATA>).

*** Create Object
    create object <R_DATA> type (ME->S_TC210-DDOBJ).

***------------------------------------------------------------------------------------------------
*** Convert XML to iXML Document
    data(LR_STREAM_FACTORY) = R_IXML->CREATE_STREAM_FACTORY( ).
    data(LR_DOCUMENT) = R_IXML->CREATE_DOCUMENT( ).
    if IF_XML is supplied.
      LR_ISTREAM = LR_STREAM_FACTORY->CREATE_ISTREAM_STRING( STRING = IF_XML ).
    elseif IF_XXML is supplied.
      LR_ISTREAM = LR_STREAM_FACTORY->CREATE_ISTREAM_XSTRING( STRING = IF_XXML ).
    endif.
    data(LR_PARSER) = R_IXML->CREATE_PARSER( DOCUMENT       = LR_DOCUMENT
                                             STREAM_FACTORY = LR_STREAM_FACTORY
                                             ISTREAM        = LR_ISTREAM ).
    if LR_PARSER->PARSE( ) <> 0.
      do LR_PARSER->NUM_ERRORS( ) times.
        data(LR_ERROR) = LR_PARSER->GET_ERROR( INDEX = SY-INDEX - 1 ).
        ER_MSG = new #( ).

***     Parser (&1/&2): &3
        ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCA'
                             IF_MSGTY = switch #( LR_ERROR->GET_SEVERITY( ) when IF_IXML_PARSE_ERROR=>CO_INFO        then 'I'
                                                                            when IF_IXML_PARSE_ERROR=>CO_WARNING     then 'W'
                                                                            when IF_IXML_PARSE_ERROR=>CO_ERROR       then 'E'
                                                                            when IF_IXML_PARSE_ERROR=>CO_FATAL_ERROR then 'E' )
                             IF_MSGNO = '010'
                             IF_MSGV1 = LR_ERROR->GET_LINE( )
                             IF_MSGV2 = LR_ERROR->GET_COLUMN( )
                             IF_MSGV3 = LR_ERROR->GET_REASON( ) ).
      enddo.
      return.
    endif.

*** Read Elements
    ME->READ_ELEMENT( IR_PARENT = LR_DOCUMENT   "Root
                      IF_ELMNT  = ME->S_TC210-ELMNT
                      IR_DATA   = RR_DATA
                      IR_CONV   = ZCL_VCXI_XCA_DPM_CONV=>FACTORY( IF_CVCLS = ME->S_TC210-CVCLS ) ).

  endmethod.
  method GET_DATA_REF.
*{   INSERT         HEDK927942                                        1
    data LV_CLASS type STRING.
    data LV_CLASS_METHOD type STRING.
*}   INSERT

    data: LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.
    field-symbols: <VALUE> type ANY.


*** Return previous to ensure something is returned, if no mapping is defined
    if IS_SRCMP-FLDNA is initial.
      RR_DATA = IR_DATA.
      exit.
    endif.

***------------------------------------------------------------------------------------------------
*** Get RTTS Instance and translate References
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA_REF( exporting  P_DATA_REF           = IR_DATA
                                             receiving  P_DESCR_REF          = LR_TYPEDESCR
                                             exceptions REFERENCE_IS_INITIAL = 1 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LR_TYPEDESCR->KIND eq CL_ABAP_TYPEDESCR=>KIND_REF.
      LR_TYPEDESCR = cast CL_ABAP_REFDESCR( LR_TYPEDESCR )->GET_REFERENCED_TYPE( ).
    endif.

    assign IR_DATA->* to field-symbol(<DATA>).

    case LR_TYPEDESCR->KIND.
      when CL_ABAP_TYPEDESCR=>KIND_CLASS or
           CL_ABAP_TYPEDESCR=>KIND_INTF.
*{   REPLACE        HEDK927942                                        2
*\        assign <DATA>->(IS_SRCMP-FLDNA) to <VALUE>.
     LV_CLASS = <DATA>.
     LV_CLASS_METHOD = lv_class && '->(' && IS_SRCMP-FLDNA && ')'.
     assign LV_CLASS_METHOD to <VALUE>.
*}   REPLACE

      when CL_ABAP_TYPEDESCR=>KIND_STRUCT.
        assign component IS_SRCMP-FLDNA of structure <DATA> to <VALUE>.
    endcase.
    if <VALUE> is not assigned.
***   &1 not found in &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_DPM'
                                            IF_MSGNO = '004'
                                            IF_MSGV1 = IS_SRCMP-FLDNA
                                            IF_MSGV2 = LR_TYPEDESCR->GET_RELATIVE_NAME( ) ).
    endif.

***------------------------------------------------------------------------------------------------
*** Verify Data Source
    if IS_SRCMP-DDOBJ is not initial.
      LR_TYPEDESCR = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( P_DATA = <VALUE> ).
      case LR_TYPEDESCR->KIND.
        when CL_ABAP_TYPEDESCR=>KIND_TABLE.
          LR_TYPEDESCR = cast CL_ABAP_TABLEDESCR( LR_TYPEDESCR )->GET_TABLE_LINE_TYPE( ).
      endcase.

      if LR_TYPEDESCR->GET_RELATIVE_NAME( ) ne IS_SRCMP-DDOBJ.
***     Data Source (&1) doesn't match definition (&2).
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCA_DPM'
                                              IF_MSGNO = '003'
                                              IF_MSGV1 = LR_TYPEDESCR->GET_RELATIVE_NAME( )
                                              IF_MSGV2 = IS_SRCMP-DDOBJ ).
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Return new Data Reference
    RR_DATA = ref #( <VALUE> ).

  endmethod.
  method GET_VALUE.
*{   INSERT         HEDK927942                                        2
    data LV_CLASS type STRING.
    data LV_CLASS_METHOD type STRING.
*}   INSERT

    data: LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.
    field-symbols: <VALUE> type ANY.


***------------------------------------------------------------------------------------------------
*** Get RTTS Instance and translate References
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA_REF( exporting  P_DATA_REF           = IR_DATA
                                             receiving  P_DESCR_REF          = LR_TYPEDESCR
                                             exceptions REFERENCE_IS_INITIAL = 1 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LR_TYPEDESCR->KIND eq CL_ABAP_TYPEDESCR=>KIND_REF.
      LR_TYPEDESCR = cast CL_ABAP_REFDESCR( LR_TYPEDESCR )->GET_REFERENCED_TYPE( ).
    endif.

**** Verify Data Source
*    if IS_VALMP-DDOBJ is not initial and
*       LR_TYPEDESCR->GET_RELATIVE_NAME( ) ne IS_VALMP-DDOBJ.
****   Data Source (&1) doesn't match definition (&2).
*      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
*                                            IF_MSGID = 'ZVCXI_XCA_DPM'
*                                            IF_MSGNO = '002'
*                                            IF_MSGV1 = IF_ELMNT ).
*    endif.

***------------------------------------------------------------------------------------------------
*** Field Mapping
    if IS_VALMP-FLDNA is not initial.
      assign IR_DATA->* to field-symbol(<DATA>).

      case LR_TYPEDESCR->KIND.
        when CL_ABAP_TYPEDESCR=>KIND_CLASS or
             CL_ABAP_TYPEDESCR=>KIND_INTF.
*{   REPLACE        HEDK927942                                        1
*\          assign <DATA>->(IS_VALMP-FLDNA) to <VALUE>.
          LV_CLASS = <DATA>.
          LV_CLASS_METHOD = lv_class && '->(' && IS_VALMP-FLDNA && ')'.
          assign LV_CLASS_METHOD to <VALUE>.
*}   REPLACE

        when CL_ABAP_TYPEDESCR=>KIND_STRUCT.
          assign component IS_VALMP-FLDNA of structure <DATA> to <VALUE>.
      endcase.

      if <VALUE> is assigned.
        RF_VALUE = IR_CONV->CONV_TO_OUTPUT( IF_VALUE = <VALUE>
                                            IR_DATA  = IR_DATA
                                            IS_VALMP = IS_VALMP ).
      else.
***     &1 not found in &2.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCA_DPM'
                                              IF_MSGNO = '004'
                                              IF_MSGV1 = IS_VALMP-FLDNA
                                              IF_MSGV2 = LR_TYPEDESCR->GET_RELATIVE_NAME( ) ).
      endif.
    endif.

*** Fixed Value
    if IS_VALMP-VALUE is not initial.
      RF_VALUE = IR_CONV->CONV_TO_OUTPUT( IF_VALUE = IS_VALMP-VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP ).
    endif.

  endmethod.
  method READ_ELEMENT.

    data: LS_TC222 type ZVCXI_XCA_TC222.
    data: LR_DATA  type ref to DATA.
    field-symbols: <T_DATA> type TABLE.

***------------------------------------------------------------------------------------------------
*** Get Customizing
    select single *
           into @data(LS_TC220)
           from ZVCXI_XCA_TC220
          where ELMNT = @IF_ELMNT.
    if SY-SUBRC ne 0.
***   No Customizing defined fo Element &1.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_DPM'
                                            IF_MSGNO = '002'
                                            IF_MSGV1 = IF_ELMNT ).
    endif.

*** Element with Sub Elements
    select *
           into table @data(LT_TC222)
           from ZVCXI_XCA_TC222
          where ELMNT = @IF_ELMNT
           order by SEPOS, ELMNT.


***------------------------------------------------------------------------------------------------
    if LS_TC220-TAGNA is not initial.
***   Dereferencing of Target Data
      assign IR_DATA->* to field-symbol(<DATA>).

***   Iterate over all occurences of the XML Tag
      data(LR_ITERATOR) = IR_PARENT->GET_CHILDREN( )->CREATE_ITERATOR_FILTERED( FILTER = IR_PARENT->CREATE_FILTER_NAME_NS( NAME = conv #( LS_TC220-TAGNA ) ) ).
      do.
        data(LR_NODE) = LR_ITERATOR->GET_NEXT( ).
        if LR_NODE is initial.
          exit.
        endif.

        case CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( P_DATA = <DATA> )->KIND.
***       Multiple Element
          when CL_ABAP_TYPEDESCR=>KIND_TABLE.
***         Dereferencing for Table
            assign IR_DATA->* to <T_DATA>.
            append initial line to <T_DATA> assigning field-symbol(<S_LINE>).
            LR_DATA = ref #( <S_LINE> ).

***       Single Element
          when others.
            LR_DATA = IR_DATA.
        endcase.

***     Set Value into Data Provider
        ME->SET_VALUE( IR_DATA  = LR_DATA
                       IS_VALMP = LS_TC220-S_VALMP
                       IF_VALUE = LR_NODE->GET_VALUE( )
                       IR_CONV  = IR_CONV ).

***     Get Attribute Values
        select *
               into table @data(LT_TC221)
               from ZVCXI_XCA_TC221
              where ELMNT = @IF_ELMNT
              order by ATTRI.
        if SY-SUBRC eq 0.
          data(LR_ATTRIBUTE_LIST) = LR_NODE->GET_ATTRIBUTES( ).

          loop at LT_TC221 into data(LS_TC221).
            data(LR_ATTRI) = LR_ATTRIBUTE_LIST->GET_NAMED_ITEM_NS( NAME = conv #( LS_TC221-ATTRI ) ).
            check LR_ATTRI is bound.
            ME->SET_VALUE( IR_DATA  = LR_DATA
                           IS_VALMP = LS_TC221-S_VALMP
                           IF_VALUE = LR_ATTRI->GET_VALUE( )
                           IR_CONV  = IR_CONV ).
          endloop.
        endif.

***     Process Sub-Elements
        loop at LT_TC222 into LS_TC222.
          ME->READ_ELEMENT( IR_PARENT = LR_NODE
                            IF_ELMNT  = LS_TC222-SUBEL
                            IR_DATA   = ME->GET_DATA_REF( IR_DATA  = LR_DATA
                                                          IS_SRCMP = LS_TC222-S_SRCMP )
                            IR_CONV   = IR_CONV ).
        endloop.
      enddo.

***------------------------------------------------------------------------------------------------
    else.
***   Just process Sub-Elements
      loop at LT_TC222 into LS_TC222.
        ME->READ_ELEMENT( IR_PARENT = IR_PARENT
                          IF_ELMNT  = LS_TC222-SUBEL
                          IR_DATA   = ME->GET_DATA_REF( IR_DATA  = IR_DATA
                                                        IS_SRCMP = LS_TC222-S_SRCMP )
                          IR_CONV   = IR_CONV ).
      endloop.
    endif.

  endmethod.
  method SET_VALUE.
*{   INSERT         HEDK927942                                        1
    data LV_CLASS type STRING.
    data LV_CLASS_METHOD type STRING.
*}   INSERT

    data: LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.
    field-symbols: <VALUE> type ANY.


***------------------------------------------------------------------------------------------------
*** Get RTTS Instance and translate References
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA_REF( exporting  P_DATA_REF           = IR_DATA
                                             receiving  P_DESCR_REF          = LR_TYPEDESCR
                                             exceptions REFERENCE_IS_INITIAL = 1 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    if LR_TYPEDESCR->KIND eq CL_ABAP_TYPEDESCR=>KIND_REF.
      LR_TYPEDESCR = cast CL_ABAP_REFDESCR( LR_TYPEDESCR )->GET_REFERENCED_TYPE( ).
    endif.

**** Verify Data Target
*    if LR_TYPEDESCR->GET_RELATIVE_NAME( ) ne IS_VALMP-DDOBJ.
*      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
*    endif.

***------------------------------------------------------------------------------------------------
*** Field Mapping
    if IS_VALMP-FLDNA is not initial.
      assign IR_DATA->* to field-symbol(<DATA>).

      case LR_TYPEDESCR->KIND.
        when CL_ABAP_TYPEDESCR=>KIND_CLASS or
             CL_ABAP_TYPEDESCR=>KIND_INTF.
*{   REPLACE        HEDK927942                                        2
*\          assign <DATA>->(IS_VALMP-FLDNA) to <VALUE>.
       LV_CLASS = <DATA>.
       LV_CLASS_METHOD = lv_class && '->(' && IS_VALMP-FLDNA && ')'.
       assign LV_CLASS_METHOD to <VALUE>.
*}   REPLACE

        when CL_ABAP_TYPEDESCR=>KIND_STRUCT.
          assign component IS_VALMP-FLDNA of structure <DATA> to <VALUE>.
      endcase.

      if <VALUE> is assigned.
        IR_CONV->CONV_TO_INPUT( exporting IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP
                                changing  CF_VALUE = <VALUE> ).
      else.
***     &1 not found in &2.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCA_DPM'
                                              IF_MSGNO = '004'
                                              IF_MSGV1 = IS_VALMP-FLDNA
                                              IF_MSGV2 = LR_TYPEDESCR->GET_RELATIVE_NAME( ) ).
      endif.
    endif.

  endmethod.
