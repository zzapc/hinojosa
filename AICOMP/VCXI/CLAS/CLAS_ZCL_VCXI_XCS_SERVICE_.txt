
class ZCL_VCXI_XCS_SERVICE definition
  public
  create private .

public section.

  constants C_PI type F value '3.141592653589793' ##NO_TEXT.

  class-methods CHECK_PRODH
    importing
      !IF_PRODH type PRODH_D
    exporting
      !EF_STUFE type PRODH_STUF
    raising
      /VCXI/CX_CKX .
  class-methods GET_PRODH_DESCR
    importing
      !IF_PRODH type PRODH_D
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR .
  class-methods GET_LIFNR_NAME1
    importing
      !IF_LIFNR type LIFNR
    returning
      value(RF_NAME1) type NAME1
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_WERKS type WERKS_D optional
      !IF_EKORG type EKORG optional
    raising
      /VCXI/CX_CKX .
  class-methods GET_FILE
    importing
      !IF_ALIASS type DIRPROFILENAMES
      !IF_FILEP type FILEP
    returning
      value(RF_XSTRING) type XSTRING
    raising
      /VCXI/CX_CKX .
protected section.

  types YS_T024W type T024W .
  types:
    YT_T024W type standard table of T024W with default key .
  types:
    begin of YS_LFM1,
                  LIFNR type LIFNR,
                  EKORG type EKORG,
         end of YS_LFM1 .
  types:
    YT_LFM1 type standard table of YS_LFM1 with default key .

  class-data T_T024W type YT_T024W .
  class-data T_LFM1 type YT_LFM1 .

  class-methods GET_EKORG_PLANT
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RT_T024W) type YT_T024W
    raising
      /VCXI/CX_CKX .
  class-methods GET_EKORG_VENDOR
    importing
      !IF_LIFNR type LIFNR
    returning
      value(RT_LFM1) type YT_LFM1
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_SERVICE definition
class ZCL_VCXI_XCS_SERVICE implementation.
method CHECK_LIFNR.

  data:  LF_VENDORNO type BAPIVENDOR_01-VENDOR_NO,
         LF_LIFNR    type LIFNR,
         LF_BUKRS    type BUKRS,
         LF_NO_MATCH type ABAP_BOOL.
  data:  LS_RETURN   type BAPIRETURN1,
         LS_T024W    type YS_T024W,
         LS_LFM1     type YS_LFM1.
  data:  LT_T024W    type YT_T024W,
         LT_LFM1     type YT_LFM1.


***---------------------------------------------------------------------
  if IF_LIFNR is initial.
*** No Vendor has been maintained.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '608' ).
  endif.

  move IF_LIFNR to LF_VENDORNO.

***---------------------------------------------------------------------
  if IF_WERKS is supplied.
*** Get the Company Code of Plant
    call function 'CO_RM_COMPANYCODE_FIND'
      exporting
        WERKS    = IF_WERKS
      importing
        COMPCODE = LF_BUKRS
      exceptions
        NO_ENTRY = 1
        others   = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

***---------------------------------------------------------------------
*** Check Vendor Existence
  call function 'BAPI_VENDOR_EXISTENCECHECK'
    exporting
      VENDORNO    = LF_VENDORNO
      COMPANYCODE = LF_BUKRS
    importing
      RETURN      = LS_RETURN.

  if LS_RETURN-TYPE ne     'S'     and
     LS_RETURN-TYPE is not initial.
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = LS_RETURN-TYPE
        F_MSGID = LS_RETURN-ID
        F_MSGNO = LS_RETURN-NUMBER
        F_MSGV1 = LS_RETURN-MESSAGE_V1
        F_MSGV2 = LS_RETURN-MESSAGE_V2
        F_MSGV3 = LS_RETURN-MESSAGE_V3
        F_MSGV4 = LS_RETURN-MESSAGE_V4.
  endif.

***---------------------------------------------------------------------
*** Check Vendor against Purchasing Org
*** Get Valid Purchasing Org for Vendor
  LT_LFM1 = ZCL_VCXI_XCS_SERVICE=>GET_EKORG_VENDOR( IF_LIFNR = IF_LIFNR ).

  if IF_EKORG is supplied.
    read table LT_LFM1 with key EKORG = IF_EKORG transporting no fields.
    if SY-SUBRC ne 0.

      call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
        exporting
          INPUT  = IF_LIFNR
        importing
          OUTPUT = LF_LIFNR.

***   Purchasing Organistation &1 for Vendor &2 not found.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '606'
                                            IF_MSGV1 = IF_EKORG
                                            IF_MSGV2 = LF_LIFNR ).
    endif.
  endif.

  if IF_WERKS is supplied.
*** Get Purchasing Org for Plant
    LT_T024W = ZCL_VCXI_XCS_SERVICE=>GET_EKORG_PLANT( IF_WERKS = IF_WERKS ).
    if IF_EKORG is supplied.
      read table LT_T024W with key EKORG = IF_EKORG transporting no fields.
      if SY-SUBRC ne 0.
***     Purchasing Organistation &1 for Plant &2 not found.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '605'
                                              IF_MSGV1 = IF_EKORG
                                              IF_MSGV2 = IF_WERKS ).
      endif.
    else.

***   Do matching check Plant & Vendor
      LF_NO_MATCH = ABAP_TRUE.

      loop at LT_LFM1 into LS_LFM1.
        read table LT_T024W with key EKORG = LS_LFM1-EKORG transporting no fields.
        if SY-SUBRC eq 0.
          clear: LF_NO_MATCH.
          exit.
        endif.
      endloop.

      if LF_NO_MATCH eq ABAP_TRUE.

        call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
          exporting
            INPUT  = IF_LIFNR
          importing
            OUTPUT = LF_LIFNR.

***     No matching Purchasing Organistation found for Plant &1 and Vendor &2.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '603'
                                              IF_MSGV1 = IF_WERKS
                                              IF_MSGV2 = LF_LIFNR ).
      endif.
    endif.
  endif.

endmethod.
  method CHECK_PRODH.

    data: LS_T179 type T179.
    statics: LT_T179 type sorted table of T179 with unique key PRODH.


    if not LINE_EXISTS( LT_T179[ PRODH = IF_PRODH ] ).
***   Check DB and prepare Buffer
      select single *
             into @LS_T179
             from T179
            where PRODH eq @IF_PRODH.
      if SY-SUBRC ne 0.
        LS_T179 = value #( PRODH = IF_PRODH ).
      endif.
      insert LS_T179 into table LT_T179.
    else.
      LS_T179 = LT_T179[ PRODH = IF_PRODH ].
    endif.

*** Return Level of Product Hierarchy
    EF_STUFE = LS_T179-STUFE.

    if LS_T179-MANDT is initial.
***   The product hierarchy & does not exist
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'MM'
                                            IF_MSGNO = '183'
                                            IF_MSGV1 = IF_PRODH ).
    endif.

  endmethod.
method GET_EKORG_PLANT.

  data: LS_T024W type YS_T024W.

  loop at T_T024W into LS_T024W
                 where WERKS eq IF_WERKS.
    append LS_T024W to RT_T024W.
  endloop.

  check RT_T024W is initial.

  select *
         into table RT_T024W
         from T024W
        where WERKS eq IF_WERKS.
  if SY-SUBRC eq 0.
    append lines of RT_T024W to T_T024W.
  endif.

  check RT_T024W is initial.
*** No Purchasing Organistation assigned to Plant &1.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCS'
                                        IF_MSGNO = '601'
                                        IF_MSGV1 = IF_WERKS ).


endmethod.
method GET_EKORG_VENDOR.

  data: LF_LIFNR type LIFNR.
  data: LS_LFM1 type YS_LFM1.

  loop at T_LFM1 into LS_LFM1
    where LIFNR = IF_LIFNR.
    append LS_LFM1 to RT_LFM1.
  endloop.

  check RT_LFM1 is initial.

  select LIFNR EKORG
         from LFM1 into table RT_LFM1
         where LIFNR = IF_LIFNR.
  if SY-SUBRC = 0.
    append lines of RT_LFM1 to T_LFM1.
  endif.

  check RT_LFM1 is initial.

  call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
    exporting
      INPUT  = IF_LIFNR
    importing
      OUTPUT = LF_LIFNR.

*** No Purchasing Organistation assigned to Vendor &1.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCS'
                                        IF_MSGNO = '602'
                                        IF_MSGV1 = IF_LIFNR ).


endmethod.
  method GET_FILE.

    data: LF_DIRNAME type DIRNAME,
          LF_FILE    type STRING,
          LF_SEP(1)  type C,
          LF_LEN     type I.

***--------------------------------------------------------------------------------------
*** Get File Directory
    select single DIRNAME
           from USER_DIR
           into LF_DIRNAME
          where ALIASS = IF_ALIASS.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Determine File on Application Server
    LF_FILE = LF_DIRNAME.

*** Get file-separator
    if LF_FILE cs '/'.
      LF_SEP = '/'.
    else.
      LF_SEP = '\'.
    endif.

*** Check the last sign. Is this already a file-sep.
    LF_LEN = STRLEN( LF_FILE ) - 1.
    if LF_FILE+LF_LEN(1) <> LF_SEP.
      LF_FILE = LF_FILE && LF_SEP.
    endif.

*** Full path to file
    LF_FILE = LF_FILE && IF_FILEP.

***--------------------------------------------------------------------------------------
*** Open File for Reading in Binary Mode
    open dataset LF_FILE for input in binary mode.
    if SY-SUBRC = 0.
***   Read into XSTRING
      read dataset LF_FILE into RF_XSTRING.
      if SY-SUBRC ne 0.
***     File not found
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '615' ).
      endif.

***   Close File Access
      close dataset LF_FILE.
    else.
***   File cannot be opened.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '616' ).
    endif.

  endmethod.
  method GET_LIFNR_NAME1.

    types: begin of YS_NAME1,
             LIFNR type LIFNR,
             NAME1 type NAME1,
           end of YS_NAME1.
    statics: LT_NAME1 type sorted table of YS_NAME1 with unique key LIFNR.


    check IF_LIFNR is not initial.
    if LINE_EXISTS( LT_NAME1[ LIFNR = IF_LIFNR ] ).
      RF_NAME1 = LT_NAME1[ LIFNR = IF_LIFNR ]-NAME1.
    else.
      select single NAME1
             from LFA1
             into RF_NAME1
            where LIFNR eq IF_LIFNR.
      if SY-SUBRC ne 0.
        clear RF_NAME1.
      endif.
      insert value #( LIFNR = IF_LIFNR
                      NAME1 = RF_NAME1 ) into table LT_NAME1.
    endif.

  endmethod.
  method GET_PRODH_DESCR.

    data: LS_T179T type T179T.
    statics: LT_T179T type sorted table of T179T with unique key PRODH.


    if not LINE_EXISTS( LT_T179T[ PRODH = IF_PRODH ] ).
***   Check DB and prepare Buffer
      select single *
             into @LS_T179T
             from T179T
            where PRODH eq @IF_PRODH
             and  SPRAS eq @SY-LANGU.
      if SY-SUBRC ne 0.
        LS_T179T = value #( PRODH = IF_PRODH ).
      endif.
      insert LS_T179T into table LT_T179T.
    else.
      LS_T179T = LT_T179T[ PRODH = IF_PRODH ].
    endif.

*** Return Description of Product Hierarchy
    RF_DESCR = LS_T179T-VTEXT.

  endmethod.
