
class ZCL_VCXI_FBSS_PR_OUTPUT definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_OUTPUT
  create public .

public section.

  interfaces ZIF_VCXI_FBSS_COMM_NEXT .
  interfaces ZIF_VCXI_FBSS_COMM_PREV .

  constants C_PARID_BGHEI type /VCXI/VKS_PARID value 'ZVCXI_FB_BGHEI' ##NO_TEXT.
  constants C_PARID_BGWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWID' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.
  constants C_IPRVT_OUTPUT type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_OUTPUT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ZIF_VCXI_F0SS_ANCHO~ADD_XCON
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
protected section.

  constants C_IEVNT_O_BGBPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGFPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGHEI_CHANGED type /VCXI/VKSC_IEVNT value 'BGHEI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BGWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWID_CHANGED type /VCXI/VKSC_IEVNT value 'BGWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBAGT_CHANGED type /VCXI/VKSC_IEVNT value 'IBAGT_CHANGED' ##NO_TEXT.
  constants C_PARID_BGBPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGBPX' ##NO_TEXT.
  constants C_PARID_BGFPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGFPX' ##NO_TEXT.
  constants C_PARID_BGWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWGT' ##NO_TEXT.

  methods SET_BGBPX
    importing
      !IF_BGBPX type ZVCXI_FBS_BGBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGHEI
    importing
      !IS_BGHEI type ZVCXI_FBS_S_BGHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWGT
    importing
      !IS_BGWGT type ZVCXI_FBS_S_BGWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWID
    importing
      !IS_BGWID type ZVCXI_FBS_S_BGWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_IBAGT
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_OUTPUT definition
class ZCL_VCXI_FBSS_PR_OUTPUT implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Communicate forward only with children
    move ABAP_TRUE to ZIF_VCXI_F0SS_COMM_NEXT~F_COMWC.

  endmethod.
  method SET_BGBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).

    move IF_BGBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGBPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).

    move IF_BGFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGFPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGHEI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).

    move IS_BGHEI-BGHEI     to LS_PARAM-ATFLV.
    move IS_BGHEI-BGHEI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGHEI_CHANGED ).
    endif.

  endmethod.
  method SET_BGWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).

    move IS_BGWGT-BGWGT     to LS_PARAM-ATFLV.
    move IS_BGWGT-BGWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BGWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).

    move IS_BGWID-BGWID     to LS_PARAM-ATFLV.
    move IS_BGWID-BGWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWID_CHANGED ).
    endif.

  endmethod.
  method SET_IBAGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).

    move IF_IBAGT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBAGT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_ANCHO~ADD_XCON.

    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_SOV  type        /VCXI/VKSR_TT_GATE,
          LT_XCONR     type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_BCONO type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOV   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BCONO   type ref to ZCL_VCXI_FBSS_PR_BCONO,
          LR_PR_SOV     type ref to ZCL_VCXI_F0SS_PR_SOV.

***--------------------------------------------------------------------------------------
*** Get Provider Definition for Connection Out
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FBSS_PR_BCONO=>C_IPRVT_FB_BCONO ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    check SY-SUBRC eq 0.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_BCONO.
      endtry.

      check LR_PR_BCONO is bound.

***--------------------------------------------------------------------------------------
***   Get Specification Overview provider
      if LR_PR_SOV is not bound.
        LT_GATE_SOV = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                          IF_INUSE = ABAP_TRUE ).
        read table LT_GATE_SOV into LR_GATE_SOV index 1.
        check LR_GATE_SOV is bound.

        try.
            move LR_GATE_SOV->R_CLSPR ?to LR_PR_SOV.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

***     Get current Connections
        LT_XCONR = LR_PR_SOV->GET_XCONR( ).
      endif.

***   Check if Bag Connection Out is linked to a Connection Out
      read table LT_XCONR with key R_GATE_OUT = LR_GATE transporting no fields.
      check SY-SUBRC is not initial.

***   Store the Bag Connection In Gate
      move LR_GATE to LR_GATE_BCONO.
      exit.

    endloop.

*** If a Connection Out is found then use it
    if LR_GATE_BCONO is bound.
      move LR_GATE_BCONO to RR_GATE.
      return.
    endif.

*** Create new Connector Out
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    check RR_GATE is bound.

*** Set in-use
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LF_IBAGT      type        ZVCXI_FBS_IBAGT,
          LF_IBAGT_PREV type        ZVCXI_FBS_IBAGT.
    data: LS_BGWID      type        ZVCXI_FBS_S_BGWID,
          LS_BGWID_PREV type        ZVCXI_FBS_S_BGWID,
          LS_BGHEI      type        ZVCXI_FBS_S_BGHEI,
          LS_BGHEI_PREV type        ZVCXI_FBS_S_BGHEI.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FBSS_COMM_PREV,
          LR_BL_BGBPROP      type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGBPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Bag Backward Property Instance
    LR_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get first defined Bag Type
      LR_COMM_PREV->GET_IBAGT( importing EF_IBAGT = LF_IBAGT_PREV ).
      if LF_IBAGT is initial.
        move LF_IBAGT_PREV to LF_IBAGT.
      endif.

***   Get first defined Bag Width
      LR_COMM_PREV->GET_BGWID( importing ES_BGWID = LS_BGWID_PREV ).
      if LS_BGWID-BGWID is initial.
        move LS_BGWID_PREV to LS_BGWID.
      endif.

***   Get first defined Bag Height
      LR_COMM_PREV->GET_BGHEI( importing ES_BGHEI = LS_BGHEI_PREV ).
      if LS_BGHEI-BGHEI is initial.
        move LS_BGHEI_PREV to LS_BGHEI.
      endif.

***   Combine Bag Forward Property
      LR_COMM_PREV->GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
      LR_BL_BGBPROP->MERGE( IR_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Bag Type
    ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).

*** Backward Bag Width
    ME->SET_BGWID( IS_BGWID = LS_BGWID ).

*** Backward Bag Height
    ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).

*** Backward Bag Backward Property XML
    ME->SET_BGBPX( IF_BGBPX = LR_BL_BGBPROP->GET_BGBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LS_BGWGT      type ZVCXI_FBS_S_BGWGT,
          LS_BGWGT_NEXT type ZVCXI_FBS_S_BGWGT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_FBSS_COMM_NEXT,
          LR_BL_BGFPROP      type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_BL_BGFPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


***------------------------------------------------------------------------------------------------
*** Create new Bag Forward Property Instance
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Bag Weight
      LR_COMM_NEXT->GET_BGWGT( importing ES_BGWGT = LS_BGWGT_NEXT ).
      if LS_BGWGT_NEXT is not initial.
        if LS_BGWGT is initial.
          move LS_BGWGT_NEXT to LS_BGWGT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWGT_NEXT-BGWGT
                                                              IF_CALCV_UOM_1 = LS_BGWGT_NEXT-BGWGT_UOM
                                                              IF_CALCV_2     = LS_BGWGT-BGWGT
                                                              IF_CALCV_UOM_2 = LS_BGWGT-BGWGT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                    importing EF_CALCV       = LS_BGWGT-BGWGT
                                                              EF_CALCV_UOM   = LS_BGWGT-BGWGT_UOM ).
        endif.
      endif.

***   Combine Bag Forward Property
      LR_COMM_NEXT->GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
      LR_BL_BGFPROP->MERGE( IR_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Bag Weight
    ME->SET_BGWGT( IS_BGWGT = LS_BGWGT ).

*** Forward Bag Forward Property XML
    ME->SET_BGFPX( IF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ) ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).
    move LS_PARAM-STRNG to EF_BGBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property XML (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing EF_BGFPX = EF_BGFPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT.

*** Get Bag Weight (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = ES_BGWGT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT.

    data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

    clear EF_DESCR.
    check EF_IBAGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    if ER_CUST_BAG is requested or
       EF_DESCR    is requested.
      ER_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
    endif.

*** Get Description
    if ER_CUST_BAG is bound and
       EF_DESCR    is requested.
      move ER_CUST_BAG->GET_DESCR( ) to EF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGBPX.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property XML (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing EF_BGBPX = EF_BGBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).
    move LS_PARAM-STRNG to EF_BGFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI.

*** Get Bag Height (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = ES_BGHEI
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).
    move LS_PARAM-ATFLV to ES_BGWGT-BGWGT.
    move LS_PARAM-UNIT  to ES_BGWGT-BGWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID.

*** Get Bag Width (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = ES_BGWID
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT.

*** Get Bag Type (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT    = EF_IBAGT
                                                     EF_SETBY    = EF_SETBY
                                                     EF_DESCR    = EF_DESCR
                                                     ER_CUST_BAG = ER_CUST_BAG ).

  endmethod.
