
class ZCL_VCXI_F0S_PR_OPENSPV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_OPENSPV type /VCXI/VKSC_IPRVT value 'ZVCXI_F0S_OPENSPV' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods OPEN_COMPLETE
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods OPEN_MS_PROC
    importing
      !IR_GATE_MS_PROC type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ER_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
      !ER_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_REPLACE,
      MATNR         type        MATNR,
      R_SPVRE_XCONI type ref to /VCXI/CL_VKSR_SPVRE,
      R_SPVRE_XCONO type ref to /VCXI/CL_VKSR_SPVRE,
    end of   YS_REPLACE .
  types:
    YT_REPLACE type standard table of YS_REPLACE .

  data T_SPVCE type /VCXI/CKX_TT_OBJECT .

  methods ADD_CHILDREN
    importing
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IF_IPARE type /VCXI/CKX_ID
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MGR
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PR_SOV
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_F0SS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods GET_SPVCE_BY_ID
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_SPVCE_PARENT type ref to /VCXI/CL_VKSC_SPVCE
    returning
      value(RR_SPVCE) type ref to /VCXI/CL_VKSC_SPVCE
    raising
      /VCXI/CX_CKX .
  methods REPLACE_SPVRE
    importing
      !IR_SPVRE_OLD type ref to /VCXI/CL_VKSR_SPVRE
      !IF_ID type /VCXI/CKX_ID
    exporting
      !EF_GXCON type ZVCXI_F0SS_GXCON
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
private section.

  methods REMOVE_MGR_DUPL
    changing
      !CT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_F0S_PR_OPENSPV definition
class ZCL_VCXI_F0S_PR_OPENSPV implementation.
  method ADD_CHILDREN.

    data: LS_SVCEL type        ZVCXI_XCI_S_SVCEL.
    data: LR_SPVCE type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE.

*** Process Children
    loop at IT_SVCEL into LS_SVCEL where IPARE eq IF_IPARE
                                    and  CPARE eq IF_CPARE.
***   Get Customizing Element
      LR_SPVCE = ME->GET_SPVCE_BY_ID( IF_ID           = LS_SVCEL-ISELF
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE to CT_SPVRE_NEW.

***   Fill supervised Element
      ME->FILL_SPVRE( IR_SPVRE = LR_SPVRE
                      IS_SVCEL = LS_SVCEL ).

***   Add Children
      ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                  IF_IPARE        = LS_SVCEL-ISELF
                                  IF_CPARE        = LS_SVCEL-CSELF
                                  IT_SVCEL        = IT_SVCEL
                        changing  CT_SPVRE_NEW    = CT_SPVRE_NEW ).
    endloop.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Supervised Customizing Elements
    ME->T_SPVCE = ME->R_GATE->GET_SPVCE( ).

  endmethod.
  method FILL_SPVRE.

    data: LF_GUID  type        /VCXI/CKX_GUID.
    data: LS_LEOKY type        /VCXI/VKSR_S_LEOKY,
          LS_SVCPA type        ZVCXI_XCI_S_SVCPA,
          LS_PARAM type        /VCXI/VKSR_S_PARAM,
          LS_SVCEV type        ZVCXI_XCI_S_SVCEV.
    data: LR_PARAM type ref to /VCXI/CL_VKSC_PARAM.

***--------------------------------------------------------------------------------------
*** Set in Use
    IR_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Leading Object Key
    move-corresponding IS_SVCEL to LS_LEOKY.
    if LS_LEOKY-SETBY is not initial.
      IR_SPVRE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).
    endif.

***--------------------------------------------------------------------------------------
*** Process all Parameter
    loop at IS_SVCEL-T_SVCPA into LS_SVCPA.

***   Get Parameter Instance
      try.
          IR_SPVRE->GET_PARAM( IF_PARID = LS_SVCPA-PARID ).
          move LS_SVCPA-PARID to LF_GUID.
          LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
        catch /VCXI/CX_CKX.
          continue.
      endtry.

***   Transfer
      clear LS_PARAM.
      move LS_SVCPA-PARID                 to LS_PARAM-PARID.
      move LR_PARAM->F_PARTY              to LS_PARAM-PARTY.
      move LS_SVCPA-ATWRT                 to LS_PARAM-ATWRT.
      move LS_SVCPA-ATFLV                 to LS_PARAM-ATFLV.
      move LS_SVCPA-UNIT                  to LS_PARAM-UNIT.
      move LS_SVCPA-CURKY                 to LS_PARAM-CURKY.
      move LS_SVCPA-STRNG                 to LS_PARAM-STRNG.
      move LS_SVCPA-SETBY                 to LS_PARAM-SETBY.

***   Set Parameter
      if LS_PARAM-SETBY is not initial.
        IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Add Events
    loop at IS_SVCEL-T_SVCEV into LS_SVCEV.
      IR_SPVRE->SET_EVENT( IF_IEVNT = LS_SVCEV-IEVNT ).
    endloop.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_MAKT  type MAKT.

    check IF_MATNR is not initial.

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_DESCR.
    else.
      move LS_MAKT-MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_PR_SOV.

    data:  LT_GATE type        /VCXI/VKSR_TT_GATE.
    data:  LR_GATE type ref to /VCXI/CL_VKSR_GATE.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC = 0.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SOV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SOV.
      endtry.

    endif.

    if RR_PR_SOV is not bound.
***   Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '010'
                                            IF_MSGV1 = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                            IF_MSGV2 = ME->R_GATE->F_ID ).
    endif.

  endmethod.
  method GET_PRVDR_MGR.

    data: LT_GATE_MGR  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_MGR  type ref to /VCXI/CL_VKSR_GATE.


    LT_GATE_MGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_DOC_MGR=>C_IPRVT_DOC_MGR
                                         IF_INUSE = ABAP_TRUE ).

    read table LT_GATE_MGR into LR_GATE_MGR index 1.
    if LR_GATE_MGR is bound.
      RT_GATE = LR_GATE_MGR->GET_PRVDR( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                        IF_INUSE = ABAP_TRUE ).
    endif.

  endmethod.
  method GET_SPVCE_BY_ID.

    data: LF_ID     type        /VCXI/CKX_ID.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SPVCE  type ref to /VCXI/CL_VKSC_SPVCE.

    loop at ME->T_SPVCE into LR_OBJECT.
      move LR_OBJECT ?to LR_SPVCE.

      if LR_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( )       eq IF_ID and
         LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) eq IR_SPVCE_PARENT.
        move LR_SPVCE to RR_SPVCE.
        exit.
      endif.
    endloop.

    if RR_SPVCE is not bound.
      if IR_SPVCE_PARENT is not bound.
***     Supervisor Element &1 can't be found.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '401'
                                              IF_MSGV1 = IF_ID ).
      else.
***     Supervisor Element &1 can't be found as child of &2.
        move IR_SPVCE_PARENT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '402'
                                              IF_MSGV1 = IF_ID
                                              IF_MSGV2 = LF_ID ).
      endif.
    endif.

  endmethod.
  method OPEN_COMPLETE.

    data: LS_CEALI type        /VCXI/VKSR_S_CEALI,
          LS_SVCEL type        ZVCXI_XCI_S_SVCEL,
          LS_LEOKY type        /VCXI/VKSR_S_LEOKY,
          LS_XCONR type        ZVCXI_F0SS_S_XCONR.
    data: LT_CEALI      type        /VCXI/VKSR_TT_CEALI,
          LT_SVCEL      type        ZVCXI_XCI_TT_SVCEL,
          LT_SPVRE_CURR type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW  type        /VCXI/VKSR_TT_SPVRE,
          LT_XCONG      type ZVCXI_F0SS_TT_XCONG,
          LT_GATE       type        /VCXI/VKSR_TT_GATE,
          LT_XCONR      type        ZVCXI_F0SS_TT_XCONR.
    data: LR_SPVRE  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_PR_SOV type ref to ZCL_VCXI_F0SS_PR_SOV,
          LR_GATE   type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_XCONG> type ZVCXI_F0SS_S_XCONG.

***--------------------------------------------------------------------------------------
*** Get Alias of Open Supervisor
    move ME->R_GATE->GET_CEALI( ) to LT_CEALI.
    read table LT_CEALI into LS_CEALI index 1.

    ZCL_VCXI_F0S_POPUP_OPENSPV=>START(
      exporting
        IF_MATNR     =  IF_MATNR
        IF_WERKS     =  IF_WERKS
        IF_IEALI     =  LS_CEALI-IEALI
        IF_LOCKED    =  ABAP_TRUE
      importing
        ET_SVCEL     =  LT_SVCEL
        ET_XCONG     =  LT_XCONG ).

    check not LT_SVCEL is initial.

*** Remove MGR Duplicates
    ME->REMOVE_MGR_DUPL( changing CT_SVCEL = LT_SVCEL ).

***--------------------------------------------------------------------------------------
*** Get current Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

*** Process Roots
    loop at LT_SVCEL into LS_SVCEL where IPARE is initial.

***   Find available Root
      loop at LT_SPVRE_CURR into LR_SPVRE
                           where TABLE_LINE->R_PARENT is not bound.
        if LR_SPVRE->GET_ID( ) eq LS_SVCEL-ISELF.
***       Check already used
          read table LT_SPVRE_NEW with key TABLE_LINE = LR_SPVRE
                                  transporting no fields.
          if SY-SUBRC eq 0.
***         Can't be used
            clear LR_SPVRE.
            continue.
          else.
***         Use
            exit.
          endif.
        else.
***       Can't be used
          clear LR_SPVRE.
          continue.
        endif.
      endloop.

      if LR_SPVRE is bound.
***     Fill supervised Element
        ME->FILL_SPVRE( IR_SPVRE = LR_SPVRE
                        IS_SVCEL = LS_SVCEL ).
        append LR_SPVRE to LT_SPVRE_NEW.

***     Add Children
        ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                    IF_IPARE        = LS_SVCEL-ISELF
                                    IF_CPARE        = LS_SVCEL-CSELF
                                    IT_SVCEL        = LT_SVCEL
                          changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).

      else.
***     Not Root Element was found to be filled.
        raise exception type /VCXI/CX_CKX.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

***--------------------------------------------------------------------------------------
*** Get all Provider to find FCONI and FCONO
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Specification Overview
    move ME->GET_PR_SOV( ) to LR_PR_SOV.
    check LR_PR_SOV is bound.

*** Get current Connections
    move LR_PR_SOV->GET_XCONR( ) to LT_XCONR.

*** Add Connection for Replacements
    loop at LT_XCONG assigning <S_XCONG>
                       where GXCON_IN is not initial
                        and  GXCON_OUT is not initial .
      clear LS_XCONR.
      loop at LT_GATE into LR_GATE.
        clear LS_LEOKY.
        move LR_GATE->GET_LEOKY( ) to LS_LEOKY.
        case LS_LEOKY-LEOKY.
          when <S_XCONG>-GXCON_OUT.
            move LR_GATE to LS_XCONR-R_GATE_OUT.
          when <S_XCONG>-GXCON_IN.
            move LR_GATE to LS_XCONR-R_GATE_IN.
        endcase.
      endloop.
      append LS_XCONR to LT_XCONR.
    endloop.

*** Set updated Connections
    LR_PR_SOV->SET_XCONR( IT_XCONR = LT_XCONR ).

*** Configuration has been loaded successfully
    message S003(ZVCXI_F0S).


  endmethod.
  method OPEN_MS_PROC.

    data: LF_MATNR type MATNR,
          LF_LEOKY type MATNR,
          LF_WERKS type WERKS_D,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_CEALI type /VCXI/VKSR_S_CEALI,
          LS_SVCEL type ZVCXI_XCI_S_SVCEL,
          LS_XCONR type ZVCXI_F0SS_S_XCONR,
          LS_LEOKY type /VCXI/VKSR_S_LEOKY.
    data: LT_CEALI      type /VCXI/VKSR_TT_CEALI,
          LT_SVCEL      type ZVCXI_XCI_TT_SVCEL,
          LT_SPVRE_CURR type /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW  type /VCXI/VKSR_TT_SPVRE,
          LT_GATE       type /VCXI/VKSR_TT_GATE,
          LT_XCONR      type ZVCXI_F0SS_TT_XCONR,
          LT_XCONG      type ZVCXI_F0SS_TT_XCONG.
    data: LR_PR_MS_FPROC type ref to ZCL_VCXI_FFSS_PR_MS_FPROC,
          LR_PR_MS_EMAT  type ref to ZCL_VCXI_FFSS_PR_MS_EMAT,
          LR_PR_MS_BPROC type ref to ZCL_VCXI_FBSS_PR_MS_BPROC,
          LR_PR_SOV      type ref to ZCL_VCXI_F0SS_PR_SOV,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE       type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_XCONG> type ZVCXI_F0SS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Get Film Procurement Instance
    try.
        move IR_GATE_MS_PROC->R_CLSPR ?to LR_PR_MS_FPROC.
        if LR_PR_MS_FPROC is bound.

***       Check Open Supervisor is allowed
          check LR_PR_MS_FPROC->IS_OPENSPV_ALLOWED( ) eq ABAP_TRUE.

          move LR_PR_MS_FPROC->GET_MATNR( ) to LF_MATNR.
          move LR_PR_MS_FPROC->GET_WERKS( ) to LF_WERKS.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_FPROC.
    endtry.

***--------------------------------------------------------------------------------------
*** Get Estimation Material Instance
    try.
        move IR_GATE_MS_PROC->R_CLSPR ?to LR_PR_MS_EMAT.
        if LR_PR_MS_EMAT is bound.

***       Check Open Supervisor is allowed
          check LR_PR_MS_EMAT->IS_OPENSPV_ALLOWED( ) eq ABAP_TRUE.

          move LR_PR_MS_EMAT->GET_AMAT( )  to LF_MATNR.
          move LR_PR_MS_EMAT->GET_WERKS( ) to LF_WERKS.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_EMAT.
    endtry.

***--------------------------------------------------------------------------------------
*** Get Bag Procurement Instance
    try.
        move IR_GATE_MS_PROC->R_CLSPR ?to LR_PR_MS_BPROC.
        if LR_PR_MS_BPROC is bound.

***       Check Open Supervisor is allowed
          check LR_PR_MS_BPROC->IS_OPENSPV_ALLOWED( ) eq ABAP_TRUE.

          move LR_PR_MS_BPROC->GET_MATNR( ) to LF_MATNR.
          move LR_PR_MS_BPROC->GET_WERKS( ) to LF_WERKS.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_BPROC.
    endtry.

    check LF_MATNR is not initial.

***--------------------------------------------------------------------------------------
*** Get Alias of Open Supervisor
    move ME->R_GATE->GET_CEALI( ) to LT_CEALI.
    read table LT_CEALI into LS_CEALI index 1.

*** Get Configuration based on CUOBJ
    ZCL_VCXI_F0S_POPUP_OPENSPV=>START(
      exporting
        IF_MATNR     =  LF_MATNR
        IF_WERKS     =  LF_WERKS
        IF_IEALI     =  LS_CEALI-IEALI
        IF_LOCKED    =  ABAP_TRUE
        IF_AS_PART   =  ABAP_TRUE
      importing
        ET_SVCEL     =  LT_SVCEL
        ET_XCONG     =  LT_XCONG ).

    check not LT_SVCEL is initial.

*** Remove MGR Duplicates
    ME->REMOVE_MGR_DUPL( changing CT_SVCEL = LT_SVCEL ).

    read table LT_XCONG assigning <S_XCONG> with key GXCON_IN = ''.

***--------------------------------------------------------------------------------------
*** Get current Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

    loop at LT_SPVRE_CURR into LR_SPVRE.

      clear LF_ID.
      move LR_SPVRE->GET_ID( ) to LF_ID.

***   Keep all Elements except the Film/Bag Procurement and Estimation Material
      if LF_ID ne 'MS_FPROC' and
         LF_ID ne 'MS_EMAT'  and
         LF_ID ne 'MS_BPROC'.
        append LR_SPVRE to LT_SPVRE_NEW.
      else.

        case LF_ID.

***       Get Material Number
          when 'MS_FPROC' or 'MS_BPROC'.
            move LR_SPVRE->S_LEOKY-LEOKY to LF_LEOKY.

***       Get Assigned Material Number ( for Estimation Material )
          when 'MS_EMAT'.
            try.
                move LR_SPVRE->GET_PARAM( IF_PARID = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_PARID_AMAT )-ATWRT to LF_LEOKY.
              catch /VCXI/CX_CKX.
                clear LF_LEOKY.
            endtry.


        endcase.

        if LF_LEOKY ne LF_MATNR.
          append LR_SPVRE to LT_SPVRE_NEW.
        else.

***       Replace Film/Bag Procurement with FCONI/BCONI
          case LF_ID.
            when 'MS_FPROC'.
              move 'FCONI' to LF_ID.
            when 'MS_EMAT'.
              move 'FCONI' to LF_ID.
            when 'MS_BPROC'.
              move 'BCONI' to LF_ID.
          endcase.
          ME->REPLACE_SPVRE( exporting IR_SPVRE_OLD = LR_SPVRE
                                       IF_ID        = LF_ID
                             importing EF_GXCON     = <S_XCONG>-GXCON_IN
                             changing  CT_SPVRE_NEW = LT_SPVRE_NEW ).

        endif.
      endif.

***   Identify Root
      if LR_SPVRE->R_PARENT is not bound.
        clear LS_SVCEL.
        move LR_SPVRE->GET_ID( ) to LS_SVCEL-ISELF.
        move '0001'              to LS_SVCEL-CSELF.

***     Add new Film Component of loaded configuration (with children)
        ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                    IF_IPARE        = LS_SVCEL-ISELF
                                    IF_CPARE        = LS_SVCEL-CSELF
                                    IT_SVCEL        = LT_SVCEL
                          changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

***--------------------------------------------------------------------------------------
*** Get all Provider to find FCONI and FCONO
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Specification Overview
    move ME->GET_PR_SOV( ) to LR_PR_SOV.
    check LR_PR_SOV is bound.

*** Get current Connections
    move LR_PR_SOV->GET_XCONR( ) to LT_XCONR.

*** Add Connection for Replacements
    loop at LT_XCONG assigning <S_XCONG>
                       where GXCON_IN  is not initial
                         and GXCON_OUT is not initial .
      clear LS_XCONR.
      loop at LT_GATE into LR_GATE.
        clear LS_LEOKY.
        move LR_GATE->GET_LEOKY( ) to LS_LEOKY.
        case LS_LEOKY-LEOKY.
          when <S_XCONG>-GXCON_OUT.
            move LR_GATE to LS_XCONR-R_GATE_OUT.
            move LR_GATE to ER_GATE_XCONO.
          when <S_XCONG>-GXCON_IN.
            move LR_GATE to LS_XCONR-R_GATE_IN.
            move LR_GATE to ER_GATE_XCONI.
        endcase.
      endloop.
      append LS_XCONR to LT_XCONR.
    endloop.

*** Set updated Connections
    LR_PR_SOV->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method REMOVE_MGR_DUPL.

    data: LF_DEL   type ABAP_BOOL,
          LF_TABIX type SYTABIX.
    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_SVCEL type ZVCXI_XCI_S_SVCEL.
    data: LT_GATE_DOC type /VCXI/VKSR_TT_GATE.
    data: LR_PR_DOC   type ref to ZCL_VCXI_XCSS_PR_DOC,
          LR_GATE_DOC type ref to /VCXI/CL_VKSR_GATE.

*** Get MGR children
    LT_GATE_DOC = ME->GET_PRVDR_MGR( ).

*** Loop only on Document Manager
    loop at CT_SVCEL into LS_SVCEL where IPARE eq 'DOC_MGR'.
      move SY-TABIX to LF_TABIX.

      move ABAP_FALSE to LF_DEL.
      loop at LT_GATE_DOC into LR_GATE_DOC.

        try.
            move LR_GATE_DOC->R_CLSPR ?to LR_PR_DOC.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_DOC.
        endtry.

        check LR_PR_DOC is bound.
        LS_LEOKY = LR_GATE_DOC->GET_LEOKY( ).

***     If there is a match then flag it for deletion
        if LS_LEOKY-LEOKY eq LS_SVCEL-LEOKY.
          move ABAP_TRUE to LF_DEL.
          exit.
        endif.
      endloop.

***   Removing the duplicates
      if LF_DEL eq ABAP_TRUE.
        delete CT_SVCEL index LF_TABIX.
      endif.

    endloop.

  endmethod.
  method REPLACE_SPVRE.

    data: LS_LEOKY     type        /VCXI/VKSR_S_LEOKY.
    data: LR_SPVCE     type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_NEW type ref to /VCXI/CL_VKSR_SPVRE.

*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE_BY_ID( IF_ID           = IF_ID
                                    IR_SPVCE_PARENT = IR_SPVRE_OLD->R_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_NEW
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_OLD->R_PARENT.

    append LR_SPVRE_NEW to CT_SPVRE_NEW.

*** Generate XConnection GUID and Set LEOKY
    try.
        EF_GXCON = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
      catch CX_UUID_ERROR.                              "#EC NO_HANDLER
    endtry.
    move EF_GXCON                         to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_LEOKY-SETBY.
    LR_SPVRE_NEW->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Set in Use
    LR_SPVRE_NEW->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Copy Position
    LR_SPVRE_NEW->SET_POSID( IF_POSID = IR_SPVRE_OLD->F_POSID ).

  endmethod.
