
class ZCL_VCXI_PXSS_PR_EMBOS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PX_EMBOS type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_EMBOS' ##NO_TEXT.
  constants C_PARID_EMBLE type /VCXI/VKS_PARID value 'ZVCXI_PX_EMBLE' ##NO_TEXT.
  constants C_PARID_EMBWI type /VCXI/VKS_PARID value 'ZVCXI_PX_EMBWI' ##NO_TEXT.

  methods GET_TEMBO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_FEMBM type ZVCXI_PXS_FEMBM
    returning
      value(RF_TEMBO) type ZVCXI_PXS_TEMBO
    raising
      /VCXI/CX_CKX .
  methods GET_EMBLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_EMBLE) type ZVCXI_PXS_S_EMBLE
    raising
      /VCXI/CX_CKX .
  methods SET_TEMBO
    importing
      !IF_TEMBO type ZVCXI_PXS_TEMBO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_EMBWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_EMBWI) type ZVCXI_PXS_S_EMBWI
    raising
      /VCXI/CX_CKX .
  methods SET_EMBLE
    importing
      !IS_EMBLE type ZVCXI_PXS_S_EMBLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EMBWI
    importing
      !IS_EMBWI type ZVCXI_PXS_S_EMBWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_EMBMAT
    exporting
      !ER_GATE_MS_EMBMAT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_EMBMAT) type ref to ZCL_VCXI_PXSS_PR_MS_EMBMAT
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_EMBMAT type /VCXI/VKSC_IEVNT value 'INIT_EMBMAT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_EMBLE_CHANGED type /VCXI/VKSC_IEVNT value 'EMBLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_EMBWI_CHANGED type /VCXI/VKSC_IEVNT value 'EMBWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TEMBO_CHANGED type /VCXI/VKSC_IEVNT value 'TEMBO_CHANGED' ##NO_TEXT.

  methods HANDLE_INIT_EMBMAT
    raising
      /VCXI/CX_CKX .
  methods CHECK_EMBWI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_EMBLE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_TEMBO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_EMBOS definition
class ZCL_VCXI_PXSS_PR_EMBOS implementation.
  method CHECK_EMBLE.

    data: LF_FEMBM type ZVCXI_PXS_FEMBM.


    ME->GET_TEMBO( importing EF_FEMBM = LF_FEMBM ).
    check LF_FEMBM eq ABAP_TRUE.

    if ME->GET_EMBLE( )-EMBLE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Embossing Length is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '290' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Embossing Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '291' ).
      endif.
    endif.

  endmethod.
  method CHECK_EMBWI.

    data: LF_FEMBM type ZVCXI_PXS_FEMBM.


    ME->GET_TEMBO( importing EF_FEMBM = LF_FEMBM ).
    check LF_FEMBM eq ABAP_TRUE.

    if ME->GET_EMBWI( )-EMBWI is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Embossing Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '292' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Embossing Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '293' ).
      endif.
    endif.

  endmethod.
  method CHECK_TEMBO.

*** Check Embossing Type
    if ME->GET_TEMBO( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Embossing Type is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '281' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Embossing Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '283' ).
      endif.
    endif.

  endmethod.
  method GET_DESCR.

    data: LF_DESCR type /VCXI/CKX_DESCR.


    RF_DESCR = SUPER->GET_DESCR(  ).

    if ME->GET_TEMBO( importing EF_DESCR = LF_DESCR ) is not initial.
      RF_DESCR = LF_DESCR.
    endif.

  endmethod.
  method GET_EMBLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMBLE ).
    RS_EMBLE-EMBLE     = LS_PARAM-ATFLV.
    RS_EMBLE-EMBLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_EMBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMBWI ).
    RS_EMBWI-EMBWI     = LS_PARAM-ATFLV.
    RS_EMBWI-EMBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_PRVDR_MS_EMBMAT.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Embossing Material provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_EMBMAT=>C_IPRVT_PX_MS_EMBMAT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Embossing Material Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_MS_EMBMAT.
          check RR_PR_MS_EMBMAT is bound.
          move LR_GATE to ER_GATE_MS_EMBMAT.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_MS_EMBMAT, ER_GATE_MS_EMBMAT.
      endtry.
    endloop.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Embossing Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TEMBO( ) ).

***----------------------------------------------------------------------------
*** Check Embossing Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_EMBLE( ) ).

*** Check Embossing Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_EMBWI( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Embossing Type
    ME->CHECK_TEMBO( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Embossing Length
    ME->CHECK_EMBLE( IR_MESSAGE = IR_MESSAGE ).

*** Check Embossing Width
    ME->CHECK_EMBWI( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TEMBO.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

***----------------------------------------------------------------------------
*** Get Leading Object
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to RF_TEMBO.
    move LS_LEOKY-SETBY to EF_SETBY.

    check RF_TEMBO is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_EMBOS=>GET_TEMBO_DESCR( IF_TEMBO = RF_TEMBO ).
    endif.

    if EF_FEMBM is requested.
***   Get Embossing Material Flag
      EF_FEMBM = ZCL_VCXI_PXSS_CUST_EMBOS=>GET_FEMBM( IF_TEMBO = RF_TEMBO ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_EMBMAT.
        ME->HANDLE_INIT_EMBMAT( ).

    endcase.

  endmethod.
  method HANDLE_INIT_EMBMAT.

    data: LF_FEMBM type ZVCXI_PXS_FEMBM.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get current Embossing Materials
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_EMBMAT=>C_IPRVT_PX_MS_EMBMAT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Check if Embossing Material is required.
    check ME->GET_TEMBO( importing EF_FEMBM = LF_FEMBM ) is not initial.

    if LF_FEMBM eq ABAP_TRUE.
***   Create Material if needed
      if LT_GATE is initial.
        ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_EMBMAT=>C_IPRVT_PX_MS_EMBMAT ).
      endif.

***--------------------------------------------------------------------------------------
    else.
      loop at LT_GATE into LR_GATE.
        LR_GATE->DO_FREE( ).
      endloop.
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_EMBLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMBLE ).

    if IS_EMBLE is supplied.
      LS_PARAM-ATFLV = IS_EMBLE-EMBLE.
      LS_PARAM-UNIT  = IS_EMBLE-EMBLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EMBLE_CHANGED ).
    endif.

  endmethod.
  method SET_EMBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EMBWI ).

    if IS_EMBWI is supplied.
      LS_PARAM-ATFLV = IS_EMBWI-EMBWI.
      LS_PARAM-UNIT  = IS_EMBWI-EMBWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EMBWI_CHANGED ).
    endif.

  endmethod.
  method SET_TEMBO.

    data:  LF_CHANGED type  ABAP_BOOL.
    data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.


    move IF_TEMBO to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED =  ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TEMBO_CHANGED ).
    endif.

  endmethod.
