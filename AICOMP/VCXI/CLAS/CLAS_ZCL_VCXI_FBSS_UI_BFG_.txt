
class ZCL_VCXI_FBSS_UI_BFG definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  types:
    YT_IBDIM type standard table of ZVCXI_FBS_IBDIM .

  data S_BFG_VIS type ZVCXI_FBSS_S_BFG_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_BFG_VIS
    importing
      !IS_BFG_VIS type ZVCXI_FBSS_S_BFG_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PR_BFG type ref to ZCL_VCXI_FBSS_PR_BFG .
  constants C_UC_BGPROP type SYUCOMM value 'BFG_BGPROP' ##NO_TEXT.

  methods HANDLE_UC_BGPROP
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SCREEN_BY_OBDIM
    importing
      !IT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM
      !IT_IBDIM type YT_IBDIM
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_BFG definition
class ZCL_VCXI_FBSS_UI_BFG implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_BFG_BIND'
      exporting
        IR_UI_BFG = ME
      importing
        ES_DYNP   = ME->S_DYNP.

  endmethod.
  method ADJUST_SCREEN_BY_OBDIM.

    data: LF_IBDIM type ZVCXI_FBS_IBDIM,
          LF_INV   type I.
    data: LS_BGDIM type ZVCXI_FBSSC_S_BAGTY_BGDIM.

    move 0 to CS_SCREEN-INVISIBLE.
    loop at IT_IBDIM into LF_IBDIM.
      read table IT_BGDIM with key IBDIM = LF_IBDIM transporting no fields.
      check SY-SUBRC is not initial.
      add 1 to LF_INV.
    endloop.

    if LINES( IT_IBDIM ) eq LF_INV.
      move 1 to CS_SCREEN-INVISIBLE.
      move 0 to CS_SCREEN-ACTIVE.
      return.
    endif.

*** Find the current field from screen and loop on it
    loop at IT_IBDIM into LF_IBDIM where TABLE_LINE cs CS_SCREEN-GROUP2.
      read table IT_BGDIM into LS_BGDIM with key IBDIM = LF_IBDIM.
      if SY-SUBRC is initial.

        case LS_BGDIM-OBDIM.
          when 'M' .
            move 2 to CS_SCREEN-REQUIRED.
            move 1 to CS_SCREEN-INPUT.
            move 1 to CS_SCREEN-ACTIVE.

          when 'O'.
            move 1 to CS_SCREEN-INPUT.
            move 1 to CS_SCREEN-ACTIVE.

        endcase.
        exit.

      else.
        move 0 to CS_SCREEN-INPUT.
        move 1 to CS_SCREEN-OUTPUT.
        move 1 to CS_SCREEN-ACTIVE.
      endif.

    endloop.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_BFG.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_IBAGT  type ZVCXI_FBS_IBAGT.
    data: LT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_IBDIM type YT_IBDIM.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.
    field-symbols: <S_IBDIM> type ZVCXI_FBS_IBDIM.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***--------------------------------------------------------------------------------------
***     Get Bag Type (Outbound)
        ME->R_PR_BFG->GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).

***     Get Bag Customizing
        LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).
        if LR_CUST_BAG is bound.
          LT_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
          LT_CSTEP = LR_CUST_BAG->GET_CSTEP( ).
        endif.

        loop at screen.

          case SCREEN-GROUP1.
***         Gusset (Line 1)
            when 'GL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
***         Gusset (Line 2)
            when 'GL2'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
***         Fold (Line 1)
            when 'FL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
***         Overlap on Width (Line 1)
            when 'OL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
***         Wicket Dimension (Line 1)
            when 'WL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_WILIP to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
***         Wicketing
            when 'WIK'.
              read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                                  transporting no fields.
              if SY-SUBRC is not initial.
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
                move 0 to SCREEN-REQUIRED.
                move 0 to SCREEN-INPUT.
              endif.

***         Winding
            when 'WND'.
              if not LINE_EXISTS( LT_CSTEP[ ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WIND ] ).
                SCREEN-ACTIVE = 0.
              endif.
            when others.
          endcase.


***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME eq 'ZVCXI_FBSS_S_BFG_VIS-FOVRR_MAKTX' and
             ME->S_BFG_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Disable Material Description if generated
          if SCREEN-NAME eq 'ZVCXI_FBSS_S_BFG_VIS-MAKTX' and
             ME->S_BFG_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Hide MTS Flag if not allowed
          if SCREEN-GROUP2 = 'MTS' and
             ME->S_BFG_VIS-FMTSA eq ABAP_UNDEFINED.
            SCREEN-INPUT  = 0.
            SCREEN-ACTIVE = 0.
          endif.

          modify screen.
        endloop.

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

  endmethod.
  method DO_UPDATE_BFG_VIS.

    check ME->R_PR_BFG is bound.

***--------------------------------------------------------------------------------------
*** Set Material description
    if ME->S_BFG_VIS-MAKTX        ne IS_BFG_VIS-MAKTX or
       ME->S_BFG_VIS-FOVRR_MAKTX  ne IS_BFG_VIS-FOVRR_MAKTX.
      if IS_BFG_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        ME->R_PR_BFG->SET_MAKTX( IF_MAKTX = IS_BFG_VIS-MAKTX
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_BFG->SET_MAKTX( IF_MAKTX = IS_BFG_VIS-MAKTX
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Material Belonging to the Customer
    if ME->S_BFG_VIS-KDMAT ne IS_BFG_VIS-KDMAT.
      ME->R_PR_BFG->SET_KDMAT( IF_KDMAT = IS_BFG_VIS-KDMAT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Customer Description of Material
    if ME->S_BFG_VIS-KDPTX ne IS_BFG_VIS-KDPTX.
      ME->R_PR_BFG->SET_KDPTX( IF_KDPTX = IS_BFG_VIS-KDPTX
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag - Disable Checks
    if ME->S_BFG_VIS-FDCHK ne IS_BFG_VIS-FDCHK.
      ME->R_PR_BFG->SET_FDCHK( IF_FDCHK = IS_BFG_VIS-FDCHK
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Make-to-Stock Flag
    if ME->S_BFG_VIS-FMTSA ne IS_BFG_VIS-FMTSA.
      ME->R_PR_BFG->ZIF_VCXI_XCSS_MTS~SET_FMTSA( IF_FMTSA = IS_BFG_VIS-FMTSA ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Bag Type
    if ME->S_BFG_VIS-IBAGT ne IS_BFG_VIS-IBAGT.
      ME->R_PR_BFG->SET_IBAGT( IF_IBAGT = IS_BFG_VIS-IBAGT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag Width
    if ME->S_BFG_VIS-S_BGWID ne IS_BFG_VIS-S_BGWID.
      ME->R_PR_BFG->SET_BGWID( IS_BGWID = IS_BFG_VIS-S_BGWID
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag Height
    if ME->S_BFG_VIS-S_BGHEI ne IS_BFG_VIS-S_BGHEI.
      ME->R_PR_BFG->SET_BGHEI( IS_BGHEI = IS_BFG_VIS-S_BGHEI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Overlap on Width
    if ME->S_BFG_VIS-S_OLWID ne IS_BFG_VIS-S_OLWID.
      ME->R_PR_BFG->SET_OLWID( IS_OLWID = IS_BFG_VIS-S_OLWID
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Left Gusset
    if ME->S_BFG_VIS-S_GULEF ne IS_BFG_VIS-S_GULEF.
      ME->R_PR_BFG->SET_GULEF( IS_GULEF = IS_BFG_VIS-S_GULEF
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Right Gusset
    if ME->S_BFG_VIS-S_GURIG ne IS_BFG_VIS-S_GURIG.
      ME->R_PR_BFG->SET_GURIG( IS_GURIG = IS_BFG_VIS-S_GURIG
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Top Gusset
    if ME->S_BFG_VIS-S_GUTOP ne IS_BFG_VIS-S_GUTOP.
      ME->R_PR_BFG->SET_GUTOP( IS_GUTOP = IS_BFG_VIS-S_GUTOP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bottom Gusset
    if ME->S_BFG_VIS-S_GUBOT ne IS_BFG_VIS-S_GUBOT.
      ME->R_PR_BFG->SET_GUBOT( IS_GUBOT = IS_BFG_VIS-S_GUBOT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Top Fold
    if ME->S_BFG_VIS-S_FOTOP ne IS_BFG_VIS-S_FOTOP.
      ME->R_PR_BFG->SET_FOTOP( IS_FOTOP = IS_BFG_VIS-S_FOTOP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bottom Fold
    if ME->S_BFG_VIS-S_FOBOT ne IS_BFG_VIS-S_FOBOT.
      ME->R_PR_BFG->SET_FOBOT( IS_FOBOT = IS_BFG_VIS-S_FOBOT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Wicketing Type
    if ME->S_BFG_VIS-TWICK ne IS_BFG_VIS-TWICK.
      ME->R_PR_BFG->SET_TWICK( IF_TWICK = IS_BFG_VIS-TWICK
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Wicket Lip
    if ME->S_BFG_VIS-S_WILIP ne IS_BFG_VIS-S_WILIP.
      ME->R_PR_BFG->SET_WILIP( IS_WILIP = IS_BFG_VIS-S_WILIP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Hole Diameter
    if ME->S_BFG_VIS-S_WIHDI ne IS_BFG_VIS-S_WIHDI.
      ME->R_PR_BFG->SET_WIHDI( IS_WIHDI = IS_BFG_VIS-S_WIHDI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Hole Space
    if ME->S_BFG_VIS-S_WIHSP ne IS_BFG_VIS-S_WIHSP.
      ME->R_PR_BFG->SET_WIHSP( IS_WIHSP = IS_BFG_VIS-S_WIHSP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag/Stack
    if ME->S_BFG_VIS-WIBST ne IS_BFG_VIS-WIBST.
      ME->R_PR_BFG->SET_WIBST( IF_WIBST = IS_BFG_VIS-WIBST
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Bags/Roll
    if ME->S_BFG_VIS-BGPRL ne IS_BFG_VIS-BGPRL.
      ME->R_PR_BFG->SET_BGPRL( IF_BGPRL = IS_BFG_VIS-BGPRL
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_BGPROP.
        ME->HANDLE_UC_BGPROP( ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_BFG.

  endmethod.
  method HANDLE_UC_BGPROP.

    data: LS_BGDATA type ZVCXI_FBSS_S_BGDATA.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

***--------------------------------------------------------------------------------------
*** Get Bag Finished Good Backward Property XML (Outbound)
    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Finished Good Forward Property XML (Outbound)
    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    check LR_BL_BGFPROP is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Basic data information
    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LS_BGDATA-IBAGT ).

    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI( importing ES_BGHEI = LS_BGDATA-S_BGHEI ).

    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID( importing ES_BGWID = LS_BGDATA-S_BGWID ).

    ME->R_PR_BFG->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = LS_BGDATA-S_BGWGT ).

*** Start Popup
    ZCL_VCXI_FBSS_POPUP_BGPROP=>START( IR_GATE       = ME->R_GATE
                                       IR_UIGATE     = ME->R_UIGATE
                                       IR_BL_BGBPROP = LR_BL_BGBPROP
                                       IR_BL_BGFPROP = LR_BL_BGFPROP
                                       IS_BGDATA     = LS_BGDATA  ).

  endmethod.
  method INIT_VIS.

    free: ME->S_BFG_VIS.
    check ME->R_PR_BFG is bound.

***--------------------------------------------------------------------------------------
*** Material Description
    ME->R_PR_BFG->GET_MAKTX( importing EF_MAKTX = ME->S_BFG_VIS-MAKTX
                                       EF_FOVRR = ME->S_BFG_VIS-FOVRR_MAKTX ).

*** Material Belonging to the Customer
    ME->R_PR_BFG->GET_KDMAT( importing EF_KDMAT = ME->S_BFG_VIS-KDMAT ).

*** Customer Description of Material
    ME->R_PR_BFG->GET_KDPTX( importing EF_KDPTX = ME->S_BFG_VIS-KDPTX ).

*** Flag - Disable Checks
    ME->R_PR_BFG->GET_FDCHK( importing EF_FDCHK = ME->S_BFG_VIS-FDCHK ).

*** Make-to-Stock Flag
    ME->S_BFG_VIS-FMTSA = ME->R_PR_BFG->ZIF_VCXI_XCSS_MTS~GET_FMTSA( ).

***--------------------------------------------------------------------------------------
*** Bag Type (Outbound)
    ME->R_PR_BFG->GET_IBAGT( importing EF_IBAGT = ME->S_BFG_VIS-IBAGT
                                       EF_DESCR = ME->S_BFG_VIS-IBAGT_DESCR ).

*** Bag Width (Outbound)
    ME->R_PR_BFG->GET_BGWID( importing ES_BGWID = ME->S_BFG_VIS-S_BGWID ).

*** Bag Height (Outbound)
    ME->R_PR_BFG->GET_BGHEI( importing ES_BGHEI = ME->S_BFG_VIS-S_BGHEI ).

*** Bag Weight (Outbound)
    ME->R_PR_BFG->GET_BGWGT( importing ES_BGWGT = ME->S_BFG_VIS-S_BGWGT ).

***--------------------------------------------------------------------------------------
*** Overlap on Width
    ME->R_PR_BFG->GET_OLWID( importing ES_OLWID = ME->S_BFG_VIS-S_OLWID ).

***--------------------------------------------------------------------------------------
*** Left Gusset
    ME->R_PR_BFG->GET_GULEF( importing ES_GULEF = ME->S_BFG_VIS-S_GULEF ).

*** Right Gusset
    ME->R_PR_BFG->GET_GURIG( importing ES_GURIG = ME->S_BFG_VIS-S_GURIG ).

*** Top Gusset
    ME->R_PR_BFG->GET_GUTOP( importing ES_GUTOP = ME->S_BFG_VIS-S_GUTOP ).

*** Bottom Gusset
    ME->R_PR_BFG->GET_GUBOT( importing ES_GUBOT = ME->S_BFG_VIS-S_GUBOT ).

***--------------------------------------------------------------------------------------
*** Top Fold
    ME->R_PR_BFG->GET_FOTOP( importing ES_FOTOP = ME->S_BFG_VIS-S_FOTOP ).

*** Bottom Fold
    ME->R_PR_BFG->GET_FOBOT( importing ES_FOBOT = ME->S_BFG_VIS-S_FOBOT ).

***--------------------------------------------------------------------------------------
*** Wicket Type
    ME->R_PR_BFG->GET_TWICK( importing EF_TWICK = ME->S_BFG_VIS-TWICK ).

*** Wicket Lip
    ME->R_PR_BFG->GET_WILIP( importing ES_WILIP = ME->S_BFG_VIS-S_WILIP ).

*** Hole Diameter
    ME->R_PR_BFG->GET_WIHDI( importing ES_WIHDI = ME->S_BFG_VIS-S_WIHDI ).

*** Hole Space
    ME->R_PR_BFG->GET_WIHSP( importing ES_WIHSP = ME->S_BFG_VIS-S_WIHSP ).

*** Bag/Stack
    ME->R_PR_BFG->GET_WIBST( importing EF_WIBST = ME->S_BFG_VIS-WIBST ).

***--------------------------------------------------------------------------------------
*** Bags/Roll
    ME->S_BFG_VIS-BGPRL = ME->R_PR_BFG->GET_BGPRL( ).

  endmethod.
