
class ZCL_VCXI_FBSSC_GRID_BGHDC definition
  public
  inheriting from ZCL_VCXI_FBSSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BAGTY type ref to ZCL_VCXI_FBSSC_BAGTY .

  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_BGHDC
    importing
      !IF_NEW type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods DELETE_BGHDC
    importing
      !IT_BAGTY_BGHDC type ZVCXI_FBSSC_TT_BAGTY_BGHDC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSSC_GRID_BGHDC definition
class ZCL_VCXI_FBSSC_GRID_BGHDC implementation.
  method CHANGE_STYLE_BGHDC.

    data: LF_STYLE_ENABLED type LVC_STYLE.

    if IF_NEW eq ABAP_TRUE.
      move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED.
    else.
      move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED.
    endif.


*** Set Handling Dimension = Editable for new
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'HNDDI'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set ID of Bag Part = Editable for new
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IBPAR'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Dimension Element = Editable for new
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IELEM'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Operator = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'OPER'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Element Numerator = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMN'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Element Denominator = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMD'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHECK_SEL_DELETE.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
    if LINES( LT_CELL ) gt 0 or
       LINES( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME ).

*** Try to Assign Customizing Reference
    try.
        move IR_CUSTOMIZING ?to ME->R_BAGTY.
      catch CX_SY_MOVE_CAST_ERROR.
***     Bag Type Customizing Reference can't be assigned.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_FBSSC'
            IF_MSGNO = '101' ).
    endtry.

    check ME->R_BAGTY is bound.
    ME->F_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

  endmethod.
  method DELETE_BGHDC.

    loop at IT_BAGTY_BGHDC into data(LS_BAGTY_BGHDC).
***   Delete Bag Handling Dimension Calculation
      ME->R_BAGTY->DELETE_BGHDC( IS_BAGTY_BGHDC = LS_BAGTY_BGHDC ).
    endloop.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED  type /VCXI/CKX_LOCKED.
    data: LS_D07V    type DD07V.
    data: LT_DRAL type LVC_T_DRAL,
          LT_D07V type standard table of DD07V.
    field-symbols: <S_DRAL> type LVC_S_DRAL,
                   <S_FCAT> type LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
    LF_LOCKED = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL' or 'NLINE' or
             'DD_HANDLE_HNDDI' or 'DD_HANDLE_IBPAR' or 'DD_HANDLE_IELEM' or 'DD_HANDLE_OPER'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

        when 'HNDDI'.
          move 'DD_HANDLE_HNDDI'   to <S_FCAT>-DRDN_FIELD.
          move 1                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move '25'                to <S_FCAT>-OUTPUTLEN.
          move 'ZFB06'             to <S_FCAT>-CONVEXIT.

          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

        when 'IBPAR'.
          move 'DD_HANDLE_IBPAR'   to <S_FCAT>-DRDN_FIELD.
          move 2                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move '25'                to <S_FCAT>-OUTPUTLEN.
          move 'ZFB05'             to <S_FCAT>-CONVEXIT.

          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

        when 'IELEM'.
          move 'DD_HANDLE_IELEM'   to <S_FCAT>-DRDN_FIELD.
          move 3                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move '25'                to <S_FCAT>-OUTPUTLEN.
          move 'ZFB07'             to <S_FCAT>-CONVEXIT.

          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

        when 'OPER'.
          move 'DD_HANDLE_OPER'    to <S_FCAT>-DRDN_FIELD.
          move 4                   to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE           to <S_FCAT>-DRDN_ALIAS.
          move '12'                to <S_FCAT>-OUTPUTLEN.
          move 'ZFB04'             to <S_FCAT>-CONVEXIT.

          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

        when 'ELEMN'.
          move 'A' to <S_FCAT>-COL_OPT.

        when 'ELEMD'.
          move 'A' to <S_FCAT>-COL_OPT.

      endcase.

***--------------------------------------------------------------------------------------
***   DropDown Handle Logic
      check <S_FCAT>-DRDN_HNDL is not initial.

***   Get special values for ID of Dimension Element
      case <S_FCAT>-FIELDNAME.
        when 'IELEM'.
          loop at ME->R_BAGTY->T_BAGTY_BGDIM into data(LS_BAGTY_BGDIM).
            insert value #( HANDLE    = <S_FCAT>-DRDN_HNDL
                            INT_VALUE = LS_BAGTY_BGDIM-IBDIM
                            VALUE     = ZCL_VCXI_FBSSC_BAGTY=>GET_IELEM_DESCR( IF_IELEM = conv #( LS_BAGTY_BGDIM-IBDIM ) )
                          ) into table LT_DRAL assigning <S_DRAL>.
          endloop.

***       Bag Part Dimensions
          insert value #( HANDLE    = <S_FCAT>-DRDN_HNDL
                          INT_VALUE = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_LENGTH
                          VALUE     = ZCL_VCXI_FBSSC_BAGTY=>GET_IELEM_DESCR( IF_IELEM = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_LENGTH )
                        ) into table LT_DRAL assigning <S_DRAL>.
          insert value #( HANDLE    = <S_FCAT>-DRDN_HNDL
                          INT_VALUE = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_WIDTH
                          VALUE     = ZCL_VCXI_FBSSC_BAGTY=>GET_IELEM_DESCR( IF_IELEM = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_WIDTH )
                        ) into table LT_DRAL assigning <S_DRAL>.
          insert value #( HANDLE    = <S_FCAT>-DRDN_HNDL
                          INT_VALUE = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_THICK
                          VALUE     = ZCL_VCXI_FBSSC_BAGTY=>GET_IELEM_DESCR( IF_IELEM = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_THICK )
                        ) into table LT_DRAL assigning <S_DRAL>.

        when 'IBPAR'.
          loop at ME->R_BAGTY->T_BAGTY_BPART into data(LS_BAGTY_BPART).
            insert value #( HANDLE    = <S_FCAT>-DRDN_HNDL
                            INT_VALUE = LS_BAGTY_BPART-IBPAR
                            VALUE     = |{ LS_BAGTY_BPART-IBPAR } { value #( ME->R_BAGTY->T_TC020T[ IBPAR = LS_BAGTY_BPART-IBPAR ]-DESCR optional ) }|
                          ) into table LT_DRAL assigning <S_DRAL>.
          endloop.

***     Get Fix Value Domain
        when others.
***       Get Domain Values
          call function 'DD_DOMVALUES_GET'
            exporting
              DOMNAME   = <S_FCAT>-DOMNAME
              TEXT      = 'X'
              LANGU     = SY-LANGU
            tables
              DD07V_TAB = LT_D07V.

          loop at LT_D07V into LS_D07V.
            insert initial line into table LT_DRAL assigning <S_DRAL>.
            move: <S_FCAT>-DRDN_HNDL  to <S_DRAL>-HANDLE,
                  LS_D07V-DOMVALUE_L  to <S_DRAL>-INT_VALUE.

            concatenate LS_D07V-DOMVALUE_L LS_D07V-DDTEXT into <S_DRAL>-VALUE separated by SPACE.
          endloop.
      endcase.

    endloop.

    check LINES( LT_DRAL ) is not initial.
    ME->R_GRID->SET_DROP_DOWN_TABLE( exporting IT_DROP_DOWN_ALIAS = LT_DRAL ).

  endmethod.
  method GET_GRID_DATA.

    data: LS_BGHDC_GRID  type ZVCXI_FBSSC_S_BAGTY_BGHDC_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Bag Type - Bag Part Calculation
    loop at ME->R_BAGTY->T_BAGTY_BGHDC into data(LS_BAGTY_BGHDC).
      LS_BGHDC_GRID = value #( S_BAGTY_BGHDC = LS_BAGTY_BGHDC
                               DD_HANDLE_HNDDI = 1
                               DD_HANDLE_IBPAR = 2
                               DD_HANDLE_IELEM = 3
                               DD_HANDLE_OPER  = 4 ).

***   Set Style Details
      ME->CHANGE_STYLE_BGHDC( exporting IF_NEW = ABAP_FALSE
                              changing CT_STYL = LS_BGHDC_GRID-T_STYL ).

***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_BGHDC_GRID to <S_DATA>.

    endloop.

***--------------------------------------------------------------------------------------
    if ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
***   Add 5 Initial Entries with Flag New Line
      LS_BGHDC_GRID = value #( NLINE           = ABAP_TRUE
                               DD_HANDLE_HNDDI = 1
                               DD_HANDLE_IBPAR = 2
                               DD_HANDLE_IELEM = 3
                               DD_HANDLE_OPER  = 4 ).

***   Set Style Details
      ME->CHANGE_STYLE_BGHDC( exporting IF_NEW  = ABAP_TRUE
                              changing  CT_STYL = LS_BGHDC_GRID-T_STYL ).

      do 5 times.
***     Add Entry -> only in Edit Mode
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_BGHDC_GRID to <S_DATA>.
      enddo.
    endif.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
    move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
    move 'A'        to RS_LAYOUT-SEL_MODE.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_BAGTY_BGHDC_GRID type ZVCXI_FBSSC_S_BAGTY_BGHDC_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


    check E_MODIFIED eq ABAP_TRUE.

    try.

        SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                       ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.

          read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
          check SY-SUBRC eq 0.

          move-corresponding <S_DATA> to LS_BAGTY_BGHDC_GRID.

          if LS_BAGTY_BGHDC_GRID-NLINE eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***         Set Defaults
            if LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-OPER is initial.
              move ZCL_VCXI_FBSSC_BAGTY=>C_OPER_ADD to LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-OPER.
            endif.

            if LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-ELEMN is initial.
              move ZCL_VCXI_FBSSC_BAGTY=>C_COUNT_MIN1 to LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-ELEMN.
            endif.

            if LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-ELEMD is initial.
              move ZCL_VCXI_FBSSC_BAGTY=>C_COUNT_MIN1 to LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC-ELEMD.
            endif.

***         If it was an Initial Line -> Add
            ME->R_BAGTY->ADD_BGHDC( IS_BAGTY_BGHDC = LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC ).
          else.
***         If it was already there -> Update
            ME->R_BAGTY->UPDATE_BGHDC( IS_BAGTY_BGHDC = LS_BAGTY_BGHDC_GRID-S_BAGTY_BGHDC ).
          endif.

        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LF_DISABLED     type        ABAP_BOOL.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR> type STB_BUTTON.

    try.

        if ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

***--------------------------------------------------------------------------------------
***     Insert Toolbar element Delete
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DELETE            to <S_TOOLBAR>-FUNCTION,
              text-T03                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DELETE_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_USER_COMMAND.

    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.
    data: LT_CELL        type LVC_T_CELL,
          LT_ROW         type LVC_T_ROW,
          LT_BAGTY_BGHDC type ZVCXI_FBSSC_TT_BAGTY_BGHDC.
    data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>        type standard table,
                   <S_BAGTY_BGHDC> type          ZVCXI_FBSSC_S_BAGTY_BGHDC,
                   <S_DATA>        type          ANY.

    try.
***     Get Delete Bag Part - Calculation
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
        ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

        case E_UCOMM.

          when C_FCODE_DELETE.
***         Delete Bag Part - Calculation
            if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***           No rows selected. Please select all rows you want to delete.
              raise exception type /VCXI/CX_CKX
                exporting
                  F_MSGTY = 'E'
                  F_MSGID = 'ZVCXI_FBSSC'
                  F_MSGNO = '056'.
            endif.

***         Get Selected Entrie
            loop at LT_CELL into LS_CELL.
              read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BAGTY_BGHDC assigning <S_BAGTY_BGHDC>.
              move-corresponding <S_DATA> to <S_BAGTY_BGHDC>.
            endloop.

            loop at LT_ROW into LS_ROW.
              read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BAGTY_BGHDC assigning <S_BAGTY_BGHDC>.
              move-corresponding <S_DATA> to <S_BAGTY_BGHDC>.
            endloop.

***         Delete Selected Entry
            ME->DELETE_BGHDC( IT_BAGTY_BGHDC = LT_BAGTY_BGHDC ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Add Event for UserCommand and Toolbar
    set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

  endmethod.
