
class ZCL_VCXI_XCSU_UI_SHIPMGR definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  data S_SHIPMGR_VIS type ZVCXI_XCSU_S_SHIPMGR_VIS .
  data F_CURSOR type SCRFNAME .
  data F_ACTIVE_TAB type STRING .
  data S_SHIPMGR_TAB type ZVCXI_XCS_S_TAB_DESCR .
  data F_ACTIVE_TAB_OLD type STRING .
  data R_DEFAULT_GATE type ref to /VCXI/CL_VKSR_GATE .

  methods CALL_SHLP_CPACK
    returning
      value(RF_CPACK) type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_SHSCH
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SHIPMGR_VIS
    importing
      !IS_SHIPMGR_VIS type ZVCXI_XCSU_S_SHIPMGR_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_UC_PALOP type SYUCOMM value 'PALOP'. "#EC NOTEXT
  data R_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR .
  data R_GRID_SHIPUNIT type ref to ZCL_VCXI_XCSU_GRID_SHIPUNIT .
  data R_OLD_GATE type ref to /VCXI/CL_VKSR_GATE .
  constants C_TAB type STRING value 'TAB'. "#EC NOTEXT
  constants C_TABNAME type STRING value '0100S_TAB-TAB'. "#EC NOTEXT
  type-pools ABAP .
  data F_TAB_LIST_REFRESH_REQ type ABAP_BOOL .
  data T_TAB_LIST type ZVCXI_XCS_TT_TAB_LIST .
  data F_ALREADY_OPEN type ABAP_BOOL .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  constants C_BUTTON type STRING value '0100PB'. "#EC NOTEXT

  methods DISPLAY_ACTIVE_TAB
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PALOP
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSU_UI_SHIPMGR definition
class ZCL_VCXI_XCSU_UI_SHIPMGR implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.

endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI to ME->R_REGISTERED_UI.

endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_XCSU_UI_SHIPMGR_BIND'
    exporting
      IR_UI_SHIPMGR = ME
    importing
      ES_DYNP       = ME->S_DYNP
      EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.

*** Create Grid for Shipping Units
  create object ME->R_GRID_SHIPUNIT
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_GRID_SHIPUNIT'.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->ACTIVATE( ).
  endif.

endmethod.
method CALL_SHLP_CPACK.

  RF_CPACK = ME->R_PR_SHIPMGR->CALL_SHLP_CPACK( ).

endmethod.
method CALL_SHLP_SHSCH.

  RF_SHSCH = ME->R_PR_SHIPMGR->CALL_SHLP_SHSCH( ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Request Init Tab List
  move ABAP_TRUE to ME->F_TAB_LIST_REFRESH_REQ.

*** Init Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_SHIPUNIT is bound.
    ME->R_GRID_SHIPUNIT->DO_FREE( ).
    clear ME->R_GRID_SHIPUNIT.
  endif.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

  clear: ME->F_ALREADY_OPEN.


endmethod.
method DISPLAY_ACTIVE_TAB.

  data:  LS_TAB_LIST    type        ZVCXI_XCSP_S_TAB_LIST.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  check ME->F_ACTIVE_TAB cs C_TABNAME.

  check ME->F_ACTIVE_TAB   ne ME->F_ACTIVE_TAB_OLD
     or ME->F_ALREADY_OPEN eq ABAP_FALSE.

  read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
  if SY-SUBRC eq 0.
    move LS_TAB_LIST-R_GATE to LR_GATE.
  endif.

  R_OLD_GATE = LR_GATE.

  ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

      loop at screen.
***     Set the Tabs which aren't in use as invisible.
        if SCREEN-NAME cs C_TABNAME.
          read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
          if SY-SUBRC ne 0.
            move 1 to SCREEN-INVISIBLE.
          endif.
        endif.
        modify screen.
      endloop.

      loop at screen.
***     Set tabs back to input
        if SCREEN-NAME cs C_TABNAME or
           SCREEN-NAME CS C_BUTTON.
          move 1 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

*** Check if the PR Class is bound
  check ME->R_PR_SHIPMGR is bound.

  if ME->F_ACTIVE_TAB ne ME->F_ACTIVE_TAB_OLD.
    move ME->F_ACTIVE_TAB to ME->F_ACTIVE_TAB_OLD.
    clear: ME->F_ALREADY_OPEN.
  endif.

  ME->INIT_VIS( ).
  ME->INIT_TAB_LIST( ).
  ME->DISPLAY_ACTIVE_TAB( ).

  if ME->R_GRID_SHIPUNIT is bound.
    if ME->R_GRID_SHIPUNIT->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_SHIPUNIT->F_REFRESH_REQ.
    endif.
*** Free Grid and container -> if shipping Scheme will be reseted
    if ME->R_PR_SHIPMGR->F_RESET_SHSCH eq ABAP_TRUE.
      ME->R_GRID_SHIPUNIT->DO_FREE( ).
      move ABAP_FALSE to ME->R_PR_SHIPMGR->F_RESET_SHSCH.
    endif.
    ME->R_GRID_SHIPUNIT->REFRESH_GRID( ).
  endif.

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_SHIPMGR_VIS.

*** Update Shipping Scheme
  if ME->S_SHIPMGR_VIS-SHSCH ne IS_SHIPMGR_VIS-SHSCH.
    ME->R_PR_SHIPMGR->SET_SHSCH( IF_SHSCH = IS_SHIPMGR_VIS-SHSCH
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Update Packaging Code
  if ME->S_SHIPMGR_VIS-CPACK ne IS_SHIPMGR_VIS-CPACK.
    ME->R_PR_SHIPMGR->SET_CPACK( IF_CPACK = IS_SHIPMGR_VIS-CPACK
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_SHIPUNIT is bound.
    ME->R_GRID_SHIPUNIT->CHECK_CHANGED_DATA( ).
  endif.

  if IF_UCOMM cs C_TABNAME.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

  case IF_UCOMM.
    when C_UC_PALOP.
      ME->HANDLE_UC_PALOP( ).

    when others.
      move IF_UCOMM to LF_UCOMM.
      ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

  endcase.

  if IF_UCOMM cs C_TABNAME.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SHIPMGR.

endmethod.
method HANDLE_UC_PALOP.

  data:  LF_LOCKED    type        /VCXI/CKX_LOCKED,
         LF_COPTI     type        ZVCXI_XCSU_COPTI.
  data:  LR_BL_PALOP  type ref to ZCL_VCXI_XCSU_BL_PALOP,
         LR_CX_CKX    type ref to /VCXI/CX_CKX.

  try.
***   Get Lock-Status
      move ME->R_GATE->IS_LOCKED( )       to LF_LOCKED.

***   Get Pallet Optimization
      move ME->R_PR_SHIPMGR->GET_PALOP( ) to LR_BL_PALOP.

***   Call Popup
      LF_COPTI = ZCL_VCXI_XCSU_POPUP_PALOP=>START( IR_BL_PALOP = LR_BL_PALOP
                                                   IF_LOCKED   = LF_LOCKED ).
      check LF_COPTI is not initial.

***   Set Pallet Optimization
      ME->R_PR_SHIPMGR->SET_PALOP( IR_BL_PALOP = LR_BL_PALOP
                                   IF_COPTI    = LF_COPTI ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method INIT_TAB_LIST.

  data:           LF_TAB             type         NUMC3,
                  LF_FNAME           type         STRING.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_GATE_CHILD      type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  field-symbols:  <S_TAB_LIST>       type         ZVCXI_XCS_S_TAB_LIST,
                  <F_DESCR>          type         /VCXI/CKX_DESCR.

*** For now refresh it at each PBO...
  free: ME->T_TAB_LIST,
        ME->S_SHIPMGR_TAB,
        LF_TAB.

***------------------------------------------------------------------
*** Get all Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF
  where IPRVT ne ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE to LT_GATE_CHILD.
  endloop.

***------------------------------------------------------------------
*** Sort Children
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

  loop at LT_GATE_CHILD into LR_GATE.

    check LR_GATE->GET_CLSUI( ) is not initial.

    append initial line to ME->T_TAB_LIST assigning <S_TAB_LIST>.
    add 1 to LF_TAB.
    concatenate C_TABNAME LF_TAB into <S_TAB_LIST>-TABNAME.
    move LR_GATE                   to <S_TAB_LIST>-R_GATE.

*** Set Activ Tab if it was set by default Gate
    if ME->R_DEFAULT_GATE is bound and
       LR_GATE eq ME->R_DEFAULT_GATE.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
      if LR_GATE ne ME->R_OLD_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
*** Default gate is not bound but Gate of Activ Tab do not match
    elseif ME->R_DEFAULT_GATE is not bound.
      if ME->F_ACTIVE_TAB eq <S_TAB_LIST>-TABNAME and
         ME->R_OLD_GATE   ne LR_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
    endif.

    concatenate C_TAB LF_TAB into LF_FNAME.
    assign component LF_FNAME of structure ME->S_SHIPMGR_TAB to <F_DESCR>.
    if SY-SUBRC eq 0.
      if <S_TAB_LIST>-R_GATE->R_CLSPR is bound.
        move <S_TAB_LIST>-R_GATE->R_CLSPR->GET_DESCR( ) to <F_DESCR>.
      else.
        move <S_TAB_LIST>-R_GATE->GET_DESCR( ) to <F_DESCR>.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------
*** Clear Default gate
  clear: ME->R_DEFAULT_GATE.

*** Check Active Tab exists
  if ME->F_ACTIVE_TAB cs C_TABNAME.
    read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                              transporting no fields.
    if SY-SUBRC ne 0.
      read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
      if SY-SUBRC eq 0.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      else.
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.
  endif.

endmethod.
  method INIT_VIS.

    free: ME->S_SHIPMGR_VIS.

*** Get Shipping Scheme
    ME->S_SHIPMGR_VIS-SHSCH = ME->R_PR_SHIPMGR->GET_SHSCH( importing EF_DESCR = ME->S_SHIPMGR_VIS-SHSCH_DESCR ).

*** Get Packaging Code
    ME->S_SHIPMGR_VIS-CPACK = ME->R_PR_SHIPMGR->GET_CPACK( importing EF_DESCR = ME->S_SHIPMGR_VIS-CPACK_DESCR ).

  endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
    ME->F_ALREADY_OPEN = ABAP_TRUE.
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
