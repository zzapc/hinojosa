
class ZCL_VCXI_PXSS_PR_XCONO definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_COMM_PREV
      abstract methods DO_FORWARD .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCSS_MTS .

  constants C_IEVNT_O_CONNECTED type /VCXI/VKSC_IEVNT value 'CONNECTED' ##NO_TEXT.
  constants C_IEVNT_O_DIKEY_CHANGED type /VCXI/VKSC_IEVNT value 'DIKEY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUTT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUTT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'PRODH_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XCONO type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XCONO' ##NO_TEXT.
  constants C_PARID_DIKEY type /VCXI/VKS_PARID value 'ZVCXI_P0_DIKEY' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.
  constants C_PARID_PRODH type /VCXI/VKS_PARID value 'ZVCXI_XC_PRODH' ##NO_TEXT.

  methods GET_CONNECTED_GATE
    returning
      value(RR_CONNECT_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
  abstract
    returning
      value(RT_CSPLIT) type ZVCXI_PXSS_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods GET_DIKEY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods GET_GXCON
    returning
      value(RF_GXCON) type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
  methods GET_KUNWE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_KUNWE) type KUNWE
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
  abstract
    returning
      value(RF_NOUPS) type ZVCXI_PXS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ALLOW_MULTI type ABAP_BOOL
      !EF_NOUTT_MULTI type ZVCXI_PXS_NOUTT
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods GET_PRODH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_MERGE_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_XCONI_COMPATIBLE
    importing
      !IR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_COMPATIBLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods MERGE
    raising
      /VCXI/CX_CKX .
  methods SET_DIKEY
    importing
      !IS_DIKEY type ZVCXI_P0SS_S_DIKEY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_GXCON type /VCXI/VKSC_IEVNT value 'INIT_GXCON' ##NO_TEXT.
  constants C_IEVNT_I_INIT_MRP type /VCXI/VKSC_IEVNT value 'INIT_MRP' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DIKEY type /VCXI/VKSC_IEVNT value 'RECALC_DIKEY' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRODH type /VCXI/VKSC_IEVNT value 'RECALC_PRODH' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_KUNWE_CHANGED type /VCXI/VKSC_IEVNT value 'KUNWE_CHANGED' ##NO_TEXT.
  constants C_PARID_KUNWE type /VCXI/VKS_PARID value 'ZVCXI_XC_KUNWE' ##NO_TEXT.

  methods CHECK_DIKEY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OUTPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_OUTPUT) type ref to ZCL_VCXI_PXSS_PR_OUTPUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RTESPV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RTESPV) type ref to ZCL_VCXI_PXSR_PR_RTESPV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_PXSS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_GXCON
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MRP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DIKEY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRODH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods RECALC_KUNWE
    raising
      /VCXI/CX_CKX .
  methods SET_GXCON
    importing
      !IF_GXCON type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods SET_KUNWE
    importing
      !IF_KUNWE type KUNWE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_XCONO definition
class ZCL_VCXI_PXSS_PR_XCONO implementation.
  method CHECK_DIKEY.

*** Check Distribution Key
    if ME->GET_DIKEY( )-DIKEY gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Distribution Key greater 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '034' ).
      endif.
    endif.


  endmethod.
  method CHECK_MAKTX.

*** Check Material Description
    if ME->GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '077' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '078' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUTT.

*** Check Number of Outs
    if ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '030' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '031' ).
      endif.
    endif.

  endmethod.
  method GET_CONNECTED_GATE.

    data: LT_XCONR type ZVCXI_PXSS_TT_XCONR.
    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.


*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Get X-Connections as References
    LT_XCONR = LR_PR_SOV->GET_XCONR( IR_GATE_OUT = ME->R_GATE ).
    check LT_XCONR is not initial.
    RR_CONNECT_GATE = LT_XCONR[ 1 ]-R_GATE_IN.

  endmethod.
  method GET_DESCR.

    data: LF_MAKTX type MAKTX.

*** Get Material Description
    LF_MAKTX = ME->GET_MAKTX( ).

    if LF_MAKTX is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    else.
      move LF_MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_DIKEY.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).
    move LS_PARAM-ATFLV to RS_DIKEY-DIKEY.
    move LS_PARAM-UNIT  to RS_DIKEY-DIKEY_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GXCON.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to RF_GXCON.

  endmethod.
  method GET_KAUSF.

    data: LF_NOUTT_TOTAL type ZVCXI_PXS_NOUTT,
          LF_NOUTT_SELF  type ZVCXI_PXS_NOUTT.
    data: LS_EVQTY_TOTAL type ZVCXI_XCSR_S_EVQTY,
          LS_EVQTY_SELF  type ZVCXI_XCSR_S_EVQTY.
    data: LR_PR_RTESPV type ref to ZCL_VCXI_PXSR_PR_RTESPV.


*** Get Provider for Routing Supervisor
    LR_PR_RTESPV = ME->GET_PRVDR_RTESPV( ).
    check LR_PR_RTESPV is bound.

*** Get Evaluation Quantity and Number of Outs
    LS_EVQTY_TOTAL = LR_PR_RTESPV->GET_EVQTY( ).
    LS_EVQTY_SELF  = LR_PR_RTESPV->GET_EVQTY_BY_GATE( exporting IR_GATE = ME->R_GATE ).
    LF_NOUTT_SELF  = ME->GET_NOUTT( importing EF_NOUTT_MULTI = LF_NOUTT_TOTAL ).

    check LF_NOUTT_TOTAL ne 0 and
          LF_NOUTT_SELF  ne 0.

***------------------------------------------------------------------------------------------------
*** Take Number of Outs into account
    LS_EVQTY_TOTAL-EVQTY = LS_EVQTY_TOTAL-EVQTY / LF_NOUTT_TOTAL.
    LS_EVQTY_SELF-EVQTY  = LS_EVQTY_SELF-EVQTY  / LF_NOUTT_SELF.

***------------------------------------------------------------------------------------------------
*** Calculate Component Scrap
    try.
        if LS_EVQTY_SELF-EVQTY is not initial.
          RS_KAUSF-KAUSF = ( LS_EVQTY_TOTAL-EVQTY - LS_EVQTY_SELF-EVQTY ) / LS_EVQTY_SELF-EVQTY * 100.
        else.
          clear RS_KAUSF-KAUSF.
        endif.
        if RS_KAUSF-KAUSF lt 0.
          clear RS_KAUSF-KAUSF.
        endif.
      catch CX_SY_ARITHMETIC_OVERFLOW.
        move '999.99' to RS_KAUSF-KAUSF.
    endtry.
    move '%' to RS_KAUSF-KAUSF_UOM.

  endmethod.
  method GET_KUNWE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KUNWE ).
    RF_KUNWE = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to RF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method GET_NOUTT.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_PR_OUTPUT type ref to ZCL_VCXI_PXSS_PR_OUTPUT.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

*** Are multiple Outs allowed?
    if EF_ALLOW_MULTI is requested or
       EF_NOUTT_MULTI is requested.
      LR_PR_OUTPUT = ME->GET_PRVDR_OUTPUT( ).
      if LR_PR_OUTPUT is bound.
        EF_NOUTT_MULTI = LR_PR_OUTPUT->GET_NOUTT( importing EF_ALLOW_MULTI = EF_ALLOW_MULTI ).
      else.
        EF_ALLOW_MULTI = ABAP_FALSE.
      endif.
    endif.

  endmethod.
  method GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).
    move LS_PARAM-ATWRT to RF_PRODH.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_OUTPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_OUTPUT=>C_IPRVT_PX_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

  endmethod.
  method GET_PRVDR_RTESPV.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_RTESPV.

***------------------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSR_PR_RTESPV=>C_IPRVT_PX_RTESPV
                                     IF_INUSE  = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_RTESPV.

  endmethod.
  method GET_PRVDR_SOV.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SOV ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

*** Check Number of Outs (total)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUTT( ) ).

*** Check Distribution Key
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DIKEY( ) ).

***--------------------------------------------------------------------------------------
*** Check If Connection Out has a Connection In
    if ME->GET_CONNECTED_GATE( ) is bound.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs (total)
    ME->CHECK_NOUTT( IR_MESSAGE = IR_MESSAGE ).

*** Check Distribution Key
    ME->CHECK_DIKEY( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check If Connection Out has a Connection In
    if ME->GET_CONNECTED_GATE( ) is bound.
***   Connection Out is connected to a Connection In.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '055' ).
    else.
***   Connection Out is not connected to a Connection In.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '056' ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.


    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.

    if EF_DESCR is requested.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( importing EF_DESCR = EF_DESCR ).
    else.
      RF_WERKS = LR_PR_SPEC->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_GXCON.
        ME->HANDLE_INIT_GXCON( ).

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).
      when C_IEVNT_I_RECALC_PRODH.
        ME->HANDLE_RECALC_PRODH( ).

      when C_IEVNT_I_RECALC_DIKEY.
        ME->HANDLE_RECALC_DIKEY( ).

      when C_IEVNT_I_INIT_MRP.
        ME->HANDLE_INIT_MRP( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_GXCON.

    data:  LF_GXCON  type ZVCXI_PXSS_GXCON.


    check ME->GET_GXCON( ) is initial.

    try.
        LF_GXCON = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
      catch CX_UUID_ERROR.                              "#EC NO_HANDLER
    endtry.

    ME->SET_GXCON( IF_GXCON = LF_GXCON ).

  endmethod.
  method HANDLE_INIT_MRP.

*** Get Flag for MRP Settings
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( ).

*** Reset to update Plants if needed
    ME->ZIF_VCXI_XCSS_MTS~SET_FMTSA( IF_FMTSA = LF_FMTSA ).

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_NOUTT  type ZVCXI_PXS_NOUTT,
          LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY type ZVCXI_P0SS_S_DIKEY.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.

***------------------------------------------------------------------------------------------------
*** Loop through all siblings and collect total number of Outs
    loop at LT_GATE into LR_GATE.
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_PXSS_PR_XCONO into LR_PR_XCONO.
          LF_NOUTT += LR_PR_XCONO->GET_NOUTT( ).
      endcase.
    endloop.

*** Determine Factor
    if LINES( LT_GATE ) gt 1.     " not only me
      if LF_NOUTT gt 0.
        LF_FACTOR = ME->GET_NOUTT( ) / LF_NOUTT.
      else.
        LF_FACTOR = 0.
      endif.
    else.
      LF_FACTOR = 1.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.


*** Only calcualate if calculation is active
    ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

*** Get generated Material Description
    LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

*** Set new Description
    ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

  endmethod.
  method HANDLE_RECALC_PRODH.
  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_MERGE_ALLOWED.

*** No Merging if multiple Outs allowed
    data(LR_PR_OUTPUT) = ME->GET_PRVDR_OUTPUT( ).
    check LR_PR_OUTPUT is bound.

    LR_PR_OUTPUT->GET_NOUTT( importing EF_ALLOW_MULTI = data(LF_ALLOW_MULTI) ).
    check LF_ALLOW_MULTI ne ABAP_TRUE.

*** Allow Merging
    RF_ALLOWED = ABAP_TRUE.

  endmethod.
  method IS_XCONI_COMPATIBLE.

    if IR_GATE_XCONI is bound and
       IR_GATE_XCONI->R_CLSPR is instance of ZIF_VCXI_PXSS_COMM_PREV.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method MERGE.

    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.


*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Merge with connected Component
    LR_PR_SOV->MERGE( IR_GATE_XCONO = ME->R_GATE ).

  endmethod.
  method RECALC_KUNWE.

    data: LF_WERKS type WERKS_D,
          LF_KUNWE type KUNWE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Determine Ship-To based on Receiving Plant of Connection In Gates
    LR_GATE = ME->GET_CONNECTED_GATE( ).
    if LR_GATE is bound and
       LR_GATE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XCONI.
      LF_WERKS = cast ZCL_VCXI_PXSS_PR_XCONI( LR_GATE->R_CLSPR )->GET_WERKS( ).
    endif.

    if LF_WERKS is not initial.
      select single KUNNR
             into LF_KUNWE
             from T001W
            where WERKS = LF_WERKS.
      if SY-SUBRC ne 0 or
         LF_KUNWE is initial.
***     No Customer Number maintained for Plant &1
        ME->R_GATE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'W'
                                 IF_MSGNO = '081'
                                 IF_MSGV1 = conv #( LF_WERKS ) ).
      endif.
    endif.

*** Set Ship-To Party
    ME->SET_KUNWE( IF_KUNWE = LF_KUNWE ).

  endmethod.
  method SET_DIKEY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).

    move IS_DIKEY-DIKEY     to LS_PARAM-ATFLV.
    move IS_DIKEY-DIKEY_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIKEY_CHANGED ).
    endif.

  endmethod.
  method SET_GXCON.

    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_GXCON                         to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_LEOKY-SETBY.

    ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  endmethod.
  method SET_KUNWE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KUNWE ).

    move IF_KUNWE to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KUNWE_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUTT_CHANGED ).
    endif.

  endmethod.
  method SET_PRODH.

    data: LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).

    if IF_PRODH is supplied.
      LS_PARAM-ATWRT = IF_PRODH.
    endif.

    LS_PARAM-SETBY = LF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

*** Determine Ship-To based on Receiving Plant
    ME->RECALC_KUNWE( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LF_ALLOW_MULTI  type ABAP_BOOL.
    field-symbols: <S_FDI_XCONO> type ZVCXI_PXSS_S_FDI_XCONO.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_XCONO.
    assign RR_DATA->* to <S_FDI_XCONO>.


***------------------------------------------------------------------------------------------------
*** Get X-Connect GUID
    <S_FDI_XCONO>-GXCON = ME->GET_GXCON( ).
    <S_FDI_XCONO>-NOUTT = ME->GET_NOUTT( importing EF_ALLOW_MULTI = LF_ALLOW_MULTI ).

*** Exclude Number Out (Total)
    if LF_ALLOW_MULTI ne ABAP_TRUE.
      append 'NOUTT' to ET_FDMEX.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_XCONO_OLD type ZVCXI_PXSS_S_FDI_XCONO,
          LS_FDI_XCONO_NEW type ZVCXI_PXSS_S_FDI_XCONO.
    data: LR_DATA_OLD type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_XCONO_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_XCONO_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set X-Connect GUID
    if LS_FDI_XCONO_OLD-GXCON ne LS_FDI_XCONO_NEW-GXCON and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'GXCON' ] ).
      ME->SET_GXCON( IF_GXCON = LS_FDI_XCONO_NEW-GXCON ).
    endif.

*** Set Number Out (Total)
    if LS_FDI_XCONO_OLD-NOUTT ne LS_FDI_XCONO_NEW-NOUTT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTT' ] ).
      ME->SET_NOUTT( IF_NOUTT = LS_FDI_XCONO_NEW-NOUTT ).
    endif.

  endmethod.
  method ZIF_VCXI_XCSS_MTS~GET_FMTSA.

*** Get MRP Settings Provider
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP
                                     IF_INUSE = ABAP_TRUE ).

*** Return Flag based on existing provider
    RF_FMTSA = cond #( when ET_GATE is not initial then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_XCSS_MTS~SET_FMTSA.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_WERKS type T_WERKS.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get current Status and MRP Settings Gates
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( importing ET_GATE = LT_GATE ).

*** Check if requested status is allowed
    LF_FMTSA = switch #( LF_FMTSA when ABAP_UNDEFINED then ABAP_FALSE      "Not allowed
                                                      else IF_FMTSA ).

    case LF_FMTSA.
      when ABAP_FALSE or ABAP_UNDEFINED.  "Deactivate or not allowed
        loop at LT_GATE into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

      when ABAP_TRUE.  "Activate
***     Collect Specification Plant
        collect ME->GET_WERKS( ) into LT_WERKS.

***     Determine Receiving Plant of Connection In Gates
        LR_GATE = ME->GET_CONNECTED_GATE( ).
        if LR_GATE is bound and
           LR_GATE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XCONI.
          collect cast ZCL_VCXI_PXSS_PR_XCONI( LR_GATE->R_CLSPR )->GET_WERKS( ) into LT_WERKS.
        endif.
        delete LT_WERKS where TABLE_LINE is initial.

***     Create required Provider
        ZCL_VCXI_XCSS_PR_MRP=>INIT_AS_PRVDR( IR_GATE_PARENT = ME->R_GATE
                                             IT_WERKS       = LT_WERKS ).
    endcase.

  endmethod.
