
class ZCL_VCXI_P3M_MBQ_BL_ASCOMP definition
  public
  inheriting from ZCL_VCXI_PXM_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_AFG type ZVCXI_XCS_ISVCE value 'AFG' ##NO_TEXT.
  constants C_ISVCE_ASCONI type ZVCXI_XCS_ISVCE value 'ASCONI' ##NO_TEXT.
  constants C_ISVCE_ASCONO type ZVCXI_XCS_ISVCE value 'ASCONO' ##NO_TEXT.
  constants C_ISVCE_ASPART type ZVCXI_XCS_ISVCE value 'ASPART' ##NO_TEXT.
  constants C_ISVCE_COMP_P3 type ZVCXI_XCS_ISVCE value 'COMP_P3' ##NO_TEXT.
  constants C_ISVCE_MS_ASPROC type ZVCXI_XCS_ISVCE value 'MS_ASPROC' ##NO_TEXT.
  constants C_SOKEY_AFG type ZVCXI_XCM_MBQ_SOKEY value 'P3_AFG' ##NO_TEXT.
  constants C_SOKEY_AFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P3_AFG_MTS' ##NO_TEXT.
  constants C_SOKEY_ASFG type ZVCXI_XCM_MBQ_SOKEY value 'P3_ASFG' ##NO_TEXT.
  constants C_SOKEY_ASFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P3_ASFG_MTS' ##NO_TEXT.
  constants C_SOKEY_ASPROC type ZVCXI_XCM_MBQ_SOKEY value 'P3_ASPROC' ##NO_TEXT.
  constants C_SOKEY_ASPROC_UV type ZVCXI_XCM_MBQ_SOKEY value 'P3_ASPROC_UV' ##NO_TEXT.

  methods ADJUST_SVCEL_MS_ASPROC
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_MS_ASPROC
    importing
      !IR_SVCEL_ASPROC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods ADJUST_SVCEL_AFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_ASPART
    importing
      !IR_SVCEL_ASPART type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CRPART
    importing
      !IR_SVCEL_CRPART type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_ASMBL
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_FCPART
    importing
      !IR_SVCEL_FCPART type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_PRPART
    importing
      !IR_SVCEL_PRPART type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods FILL_AFG
    importing
      !IR_BL_ASBPROP type ref to ZCL_VCXI_P3SS_BL_ASBPROP
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .

  methods ADJUST_ID
    redefinition .
  methods ADJUST_SVCEL
    redefinition .
  methods ANALYZE_CSTEP
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_SOKEY_OUT
    redefinition .
private section.
endclass. "ZCL_VCXI_P3M_MBQ_BL_ASCOMP definition
class ZCL_VCXI_P3M_MBQ_BL_ASCOMP implementation.
  method ADJUST_ID.

*** Call SUPER
    SUPER->ADJUST_ID( exporting IR_SVCEL = IR_SVCEL
                      changing  CF_ID    = CF_ID ).

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Connection In is replaced by a Assembly Procurement
      when C_ISVCE_ASCONI.
        CF_ID = C_ISVCE_MS_ASPROC.

***   Connection Out is replaced by a Finished Good
      when C_ISVCE_ASCONO.
        CF_ID = C_ISVCE_AFG.

***   SFG Shipping Manger is replaced by FG Shipping Manager
      when 'SHIPMGR_ASCONO'.
        CF_ID = 'SHIPMGR'.

    endcase.

  endmethod.
  method ADJUST_SVCEL.

*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
***--------------------------------------------------------------------------------------
***   Conversion
***-------------------------------------------------------------------------------------
      when ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_ISVCE_PRPART.
***     Delegate to Business Logic of Procurement Component to adjust Procurement Part
        ME->GET_BL_PRCOMP( )->ADJUST_SVCEL_PRPART( exporting IR_SVCEL         = IR_SVCEL
                                                             IR_IDAT_SVC      = IR_IDAT_SVC
                                                             IT_MATLI         = IT_MATLI
                                                             IT_DMSLI         = IT_DMSLI
                                                   importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                                   changing  CS_SVCEL         = CS_SVCEL ).

***--------------------------------------------------------------------------------------
***   Output
***-------------------------------------------------------------------------------------
      when C_ISVCE_AFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_AFG( exporting IR_SVCEL         = IR_SVCEL
                                        IR_IDAT_SVC      = IR_IDAT_SVC
                                        IT_MATLI         = IT_MATLI
                                        IT_DMSLI         = IT_DMSLI
                              importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                              changing  CS_SVCEL         = CS_SVCEL ).
    endcase.

  endmethod.
  method ADJUST_SVCEL_AFG.

    data: LR_EA_ASCONO  type ref to ZCL_VCXI_P3SS_EA_ASCONO.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Remove Customer Material Info
    delete CS_SVCEL-T_SVCPA where PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDMAT
                             or   PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDPTX.

***--------------------------------------------------------------------------------------
*** Transfer Information of Connection Out to Finished Good
    if IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ISVCE_ASCONO.
      LR_EA_ASCONO ?= IR_SVCEL->GET_CLSEA( ).

***   Fill Finished Good based on Assembly Backward Property
      ME->FILL_AFG( exporting IR_BL_ASBPROP = LR_EA_ASCONO->GET_ASBPX( )
                              IR_IDAT_SVC   = IR_IDAT_SVC
                    changing  CS_SVCEL      = CS_SVCEL ).
    endif.

  endmethod.
  method ADJUST_SVCEL_MS_ASPROC.

    data: LF_MATNR type MATNR.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.

***--------------------------------------------------------------------------------------
*** Get correct Source Element
    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_ASPROC.
        LR_SVCEL_SOURCE = IR_SVCEL.

****    No adjustments for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
          return.
        endif.

      when C_ISVCE_ASCONI.
***     Get related Connection Out
        LR_SVCEL_SOURCE = cast ZCL_VCXI_PXSS_EA_XCONI( IR_SVCEL->GET_CLSEA( ) )->GET_XCONO( ).
        check LR_SVCEL_SOURCE is bound.

***     Substitute Component with Dummy Route if needed
        if not LINE_EXISTS( IT_MATLI[ LEVEL_SOURCE = LR_SVCEL_SOURCE->GET_LEVEL( ) ] ).
          LR_SVCEL_SOURCE = ME->GET_INP_BY_XCONO( IR_SVCEL_XCONO = LR_SVCEL_SOURCE ).

          if LR_SVCEL_SOURCE is bound.
***         Copy supervised Parameter of input
            CS_SVCEL-T_SVCPA = corresponding #( LR_SVCEL_SOURCE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ) ).
***         Copy children of e.g. Procurement
            ME->COPY_SVCEL_CHILDREN( IF_ISELF    = CS_SVCEL-ISELF
                                     IF_CSELF    = CS_SVCEL-CSELF
                                     IR_SVCEL    = LR_SVCEL_SOURCE
                                     IR_IDAT_SVC = IR_IDAT_SVC
                                     IT_MATLI    = IT_MATLI
                                     IT_DMSLI    = IT_DMSLI ).
          endif.
        endif.
    endcase.
    check LR_SVCEL_SOURCE is bound.

***--------------------------------------------------------------------------------------
    case LR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_ASPROC.
***     Use existing Material for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( LR_SVCEL_SOURCE->GET_CLSEA( ) )->IS_DUMMY( ).
          LF_MATNR = LR_SVCEL_SOURCE->GET_LEOKY( )-LEOKY.
        endif.

    endcase.

*** Get Material Number of created Material
    if LF_MATNR is initial.
      LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                          IR_SVCEL_SOURCE = LR_SVCEL_SOURCE ).
    endif.

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Switch Procurement Option to "Direct Procurement"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] to <S_PARAM>.

      if <S_PARAM>-ATWRT eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
         LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_XCSS_PR_MS=>C_PARID_FPTOS )-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                                     else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

*** Ensure loaded dummy price scales remain after material creation
    if value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ]-ATWRT optional ) eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
       value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ]-ATWRT optional ) is initial.
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ] to <S_PARAM>.
      <S_PARAM>-ATWRT = ABAP_TRUE.
      <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

  endmethod.
  method ANALYZE.

    data: LF_WERKS type WERKS_D,
          LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY.
    data: LR_EA_SPEC      type ref to ZCL_VCXI_PXSS_EA_SPEC,
          LR_SVCEL_INPUT  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CONV   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Specification and Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_EA_SPEC      = LR_EA_SPEC
                                  ER_SVCEL_INPUT  = LR_SVCEL_INPUT
                                  ER_SVCEL_CONV   = LR_SVCEL_CONV
                                  ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_EA_SPEC      is bound and
          LR_SVCEL_INPUT  is bound and
          LR_SVCEL_CONV   is bound and
          LR_SVCEL_OUTPUT is bound.

*** Get Plant
    LF_WERKS = LR_EA_SPEC->GET_WERKS( ).

***--------------------------------------------------------------------------------------
*** Ignore Dummy Routes
    if ME->HAS_ARBPL( IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP ).
***   Analyze Output for FG / SFG
      loop at LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.

***     Define Source Key
        LF_SOKEY = ME->GET_SOKEY_OUT( IR_SVCEL = LR_SVCEL
                                      IF_KZKUP = ABAP_FALSE ).

***     Add Material with Activities based on Source Key
        ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                                 IF_DISST        = IF_DISST
                                 IR_SVCEL_SOURCE = LR_SVCEL
                                 IF_WERKS        = LF_WERKS
                       changing  CT_MATLI        = ET_MATLI ).
      endloop.

***--------------------------------------------------------------------------------------
***   Analyze Conversion Steps
      loop at LR_SVCEL_CONV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.
        ME->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = LR_SVCEL
                                     IF_DISST       = conv #( IF_DISST + 1 )
                           changing  CT_MATLI       = ET_MATLI
                                     CT_DMSLI       = ET_DMSLI ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Analyze Input for Procurement Dummy
    loop at LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        when C_ISVCE_MS_ASPROC.
          ME->ANALYZE_MS_ASPROC( exporting IR_SVCEL_ASPROC = LR_SVCEL
                                           IF_DISST        = conv #( IF_DISST + 1 )
                                 changing  CT_MATLI        = ET_MATLI
                                           CT_DMSLI        = ET_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_ASPART.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Part
    loop at IR_SVCEL_ASPART->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Assembly Procurement
        when ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_MS_ASPROC.
***       Delegate to Business Logic of Assembly Component to analyze Assembly Procurement
          ME->GET_BL_ASCOMP( )->ANALYZE_MS_ASPROC( exporting IR_SVCEL_ASPROC = LR_SVCEL
                                                             IF_DISST        = IF_DISST
                                                   changing  CT_MATLI        = CT_MATLI
                                                             CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CRPART.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Part
    loop at IR_SVCEL_CRPART->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Procurement
        when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_MS_CRPROC.
***       Delegate to Business Logic of Corrugated Component to analyze Corrugated Procurement
          ME->GET_BL_CRCOMP( )->ANALYZE_MS_CRPROC( exporting IR_SVCEL_CRPROC = LR_SVCEL
                                                             IF_DISST        = IF_DISST
                                                   changing  CT_MATLI        = CT_MATLI
                                                             CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP.

    SUPER->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                    IF_DISST       = IF_DISST
                          changing  CT_MATLI       = CT_MATLI
                                    CT_DMSLI       = CT_DMSLI ).

    case IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when 'CSTEP_ASMBL'.
        ME->ANALYZE_CSTEP_ASMBL( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                           IF_DISST       = IF_DISST
                                 changing  CT_MATLI       = CT_MATLI
                                           CT_DMSLI       = CT_DMSLI ).
    endcase.

  endmethod.
  method ANALYZE_CSTEP_ASMBL.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Parts
    loop at IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Part
        when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_CRPART.
          ME->ANALYZE_CRPART( exporting IR_SVCEL_CRPART = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).

***     Analyze Folding Carton Part
        when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_FCPART.
          ME->ANALYZE_FCPART( exporting IR_SVCEL_FCPART = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).

***     Analyze Assembly Part
        when ZCL_VCXI_P3M_MBQ_BL_ASCOMP=>C_ISVCE_ASPART.
          ME->ANALYZE_ASPART( exporting IR_SVCEL_ASPART = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).

***     Analyze Procurement Part
        when ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_ISVCE_PRPART.
          ME->ANALYZE_PRPART( exporting IR_SVCEL_PRPART = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_FCPART.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Part
    loop at IR_SVCEL_FCPART->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Folding Carton Procurement
        when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_MS_FCPROC.
***       Delegate to Business Logic of Folding Carton Component to analyze Folding Carton Procurement
          ME->GET_BL_FCCOMP( )->ANALYZE_MS_FCPROC( exporting IR_SVCEL_FCPROC = LR_SVCEL
                                                             IF_DISST        = IF_DISST
                                                   changing  CT_MATLI        = CT_MATLI
                                                             CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_MS_ASPROC.

    data: LF_WERTU type WERTU.
    data: LR_EA_MS_ASPROC type ref to ZCL_VCXI_P3SS_EA_MS_ASPROC.


    check IR_SVCEL_ASPROC is bound.
    LR_EA_MS_ASPROC ?= IR_SVCEL_ASPROC->GET_CLSEA( ).
    check LR_EA_MS_ASPROC->IS_DUMMY( ).

    LR_EA_MS_ASPROC->GET_MATNR( importing EF_WERTU = LF_WERTU ).

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_WERTU when ABAP_TRUE  then C_SOKEY_ASPROC
                                                                  when ABAP_FALSE then C_SOKEY_ASPROC_UV )
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_ASPROC
                             IF_WERKS        = LR_EA_MS_ASPROC->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_PRPART.

    ME->GET_BL_PRCOMP( )->ANALYZE_PRPART( exporting IR_SVCEL_PRPART = IR_SVCEL_PRPART
                                                    IF_DISST        = IF_DISST
                                          changing  CT_MATLI        = CT_MATLI
                                                    CT_DMSLI        = CT_DMSLI ).

  endmethod.
  method FILL_AFG.

***--------------------------------------------------------------------------------------
*** Product Dimensions
    append value #( PARID = ZCL_VCXI_P3SS_PR_AFG=>C_PARID_PROLE
                    ATFLV = IR_BL_ASBPROP->S_PRODIM-PROLE
                    UNIT  = IR_BL_ASBPROP->S_PRODIM-PROLE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P3SS_PR_AFG=>C_PARID_PROWI
                    ATFLV = IR_BL_ASBPROP->S_PRODIM-PROWI
                    UNIT  = IR_BL_ASBPROP->S_PRODIM-PROWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P3SS_PR_AFG=>C_PARID_PROHE
                    ATFLV = IR_BL_ASBPROP->S_PRODIM-PROHE
                    UNIT  = IR_BL_ASBPROP->S_PRODIM-PROHE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

  endmethod.
  method GET_ACTDAT_MMEXT.

    data: LR_EA_MS_ASPROC type ref to ZCL_VCXI_P3SS_EA_MS_ASPROC,
          LR_BL_ASFPROP   type ref to ZCL_VCXI_P3SS_BL_ASFPROP.
    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Assembly Procurement
      when C_SOKEY_ASPROC or
           C_SOKEY_ASPROC_UV.
        LR_EA_MS_ASPROC ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

***     Get Assembly Forward Property XML (Outbound)
        LR_BL_ASFPROP = LR_EA_MS_ASPROC->GET_ASFPX( ).

***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_P3E_MM_MMEXT=>C_CNTXT_P3.    "Assembly
        <S_ACTDAT_MMEXT>-S_P3_EXTVAL = value #( S_HNDDIM = LR_BL_ASFPROP->S_HNDDIM
                                                S_ADDWT  = LR_BL_ASFPROP->S_ADDWT
                                                T_JOITY  = LR_BL_ASFPROP->T_JOITY
                                                T_APINFO = LR_BL_ASFPROP->T_APINFO ).

    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    data: LF_PURCH type ZVCXI_XCS_PURCH.
    data: LT_PSCALE  type ZVCXI_XCS_TT_PSCALE.
    data: LR_EA_MS_ASPROC type ref to ZCL_VCXI_P3SS_EA_MS_ASPROC,
          LR_BOB_MAT      type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).
    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Assembly Procurement
      when C_SOKEY_ASPROC or
           C_SOKEY_ASPROC_UV.
        LR_EA_MS_ASPROC ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

***     Get Purchasing Information
        LR_EA_MS_ASPROC->GET_PURCH_INFO( importing EF_PURCH  = LF_PURCH
                                                   EF_LIFNR  = <S_ACTDAT_PURIR>-LIFNR
                                                   ET_PSCALE = LT_PSCALE ).

***     Skip if not "Direct Procurement & Price" or vendor is missing
        EF_SKIP = cond #( when LF_PURCH ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE then ABAP_TRUE
                          when <S_ACTDAT_PURIR>-LIFNR is initial then ABAP_TRUE
                                                                 else ABAP_FALSE ).
        check EF_SKIP ne ABAP_TRUE.

***     Business Object - Sales Document
        <S_ACTDAT_PURIR>-EKORG = ME->R_BOB_SDOC->S_VBAK-VKORG.
        <S_ACTDAT_PURIR>-WERKS = IF_WERKS.
        <S_ACTDAT_PURIR>-EKGRP = LR_BOB_MAT->S_PLANTDATA-PUR_GROUP.

***     Condition Scale Header
        <S_ACTDAT_PURIR>-KONWA = LT_PSCALE[ 1 ]-PRICE_CURR.  "Condition Currency
        <S_ACTDAT_PURIR>-KPEIN = LT_PSCALE[ 1 ]-PRICP.       "Condition Pricing Unit
        <S_ACTDAT_PURIR>-KMEIN = LT_PSCALE[ 1 ]-PRICP_UOM.   "Condition Unit
        <S_ACTDAT_PURIR>-KODATAB = value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = ME->F_POSNR ]-PRSDT
                                            default ME->R_BOB_SDOC->T_VBKD[ POSNR = 00000 ]-PRSDT ).

***     Validity Data shouldn't be in the future
        <S_ACTDAT_PURIR>-KODATAB = cond #( when <S_ACTDAT_PURIR>-KODATAB ge SY-DATUM then SY-DATUM
                                                                                     else <S_ACTDAT_PURIR>-KODATAB ).

***     Condition Scale
        <S_ACTDAT_PURIR>-T_CONDSCALE = value #( for LS_PSCALE in LT_PSCALE
                                                ( KSTBM = LS_PSCALE-PSQTY       " Condition scale quantity
                                                  KBETR = LS_PSCALE-PRICE ) ).  " Condition Amount or Percentage

      when others.
        EF_SKIP = ABAP_TRUE.
    endcase.

  endmethod.
  method GET_SOKEY_OUT.

*** Get Make-to-Stock Flag of Element
    data(LF_FMTSA) = ME->GET_FMTSA( IR_SVCEL = IR_SVCEL ).

*** Define Source Key based on FG/SFG > MTO/MTS
    RF_SOKEY = switch #( IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( )
                         when C_ISVCE_AFG    then switch #( LF_FMTSA     "Finished Good
                                                            when ABAP_FALSE then C_SOKEY_AFG
                                                            when ABAP_TRUE  then C_SOKEY_AFG_MTS
                                                          )
                         when C_ISVCE_ASCONO then switch #( LF_FMTSA     "Semi-Finished Good
                                                            when ABAP_FALSE then C_SOKEY_ASFG
                                                            when ABAP_TRUE  then C_SOKEY_ASFG_MTS
                                                          )

                       ).

  endmethod.
