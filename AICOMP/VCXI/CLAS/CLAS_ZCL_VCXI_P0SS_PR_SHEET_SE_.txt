
class ZCL_VCXI_P0SS_PR_SHEET_SE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_DCT .
  interfaces ZIF_VCXI_P0SS_SHTDIM
      data values F_DIV_ACTIV = abap_undefined .

  aliases C_CHECK_TOOL
    for ZIF_VCXI_P0SS_DCT~C_CHECK_TOOL .
  aliases F_DIV_ACTIV
    for ZIF_VCXI_P0SS_SHTDIM~F_DIV_ACTIV .
  aliases GET_ATTOT
    for ZIF_VCXI_P0SS_DCT~GET_ATTOT .
  aliases GET_DCUTT
    for ZIF_VCXI_P0SS_DCT~GET_DCUTT .
  aliases GET_DRAWN
    for ZIF_VCXI_P0SS_DCT~GET_DRAWN .
  aliases GET_DTRIL
    for ZIF_VCXI_P0SS_SHTDIM~GET_DTRIL .
  aliases GET_DTRIW
    for ZIF_VCXI_P0SS_SHTDIM~GET_DTRIW .
  aliases GET_DUPSL
    for ZIF_VCXI_P0SS_SHTDIM~GET_DUPSL .
  aliases GET_DUPSW
    for ZIF_VCXI_P0SS_SHTDIM~GET_DUPSW .
  aliases GET_LTITO
    for ZIF_VCXI_P0SS_DCT~GET_LTITO .
  aliases GET_NOUPT
    for ZIF_VCXI_P0SS_DCT~GET_NOUPT .
  aliases GET_PCDIM
    for ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM .
  aliases GET_SDIVI
    for ZIF_VCXI_P0SS_SHTDIM~GET_SDIVI .
  aliases GET_SDIVI_DESCR
    for ZIF_VCXI_P0SS_SHTDIM~GET_SDIVI_DESCR .
  aliases GET_SHTDI
    for ZIF_VCXI_P0SS_DCT~GET_SHTDI .
  aliases GET_SHTDI_DESCR
    for ZIF_VCXI_P0SS_DCT~GET_SHTDI_DESCR .
  aliases GET_SHTGL
    for ZIF_VCXI_P0SS_SHTDIM~GET_SHTGL .
  aliases GET_SHTGW
    for ZIF_VCXI_P0SS_SHTDIM~GET_SHTGW .
  aliases GET_SHTNL
    for ZIF_VCXI_P0SS_SHTDIM~GET_SHTNL .
  aliases GET_SHTNW
    for ZIF_VCXI_P0SS_SHTDIM~GET_SHTNW .
  aliases GET_TDCUT
    for ZIF_VCXI_P0SS_DCT~GET_TDCUT .
  aliases GET_TDCUT_DESCR
    for ZIF_VCXI_P0SS_DCT~GET_TDCUT_DESCR .
  aliases GET_TDIVI
    for ZIF_VCXI_P0SS_SHTDIM~GET_TDIVI .
  aliases GET_TDIVI_DESCR
    for ZIF_VCXI_P0SS_SHTDIM~GET_TDIVI_DESCR .
  aliases GET_TRIML
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRIML .
  aliases GET_TRIMS
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRIMS .
  aliases GET_TRIPL
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRIPL .
  aliases GET_TRIPS
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRIPS .
  aliases GET_TRISL
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRISL .
  aliases GET_TRISS
    for ZIF_VCXI_P0SS_SHTDIM~GET_TRISS .
  aliases SET_ATTOT
    for ZIF_VCXI_P0SS_DCT~SET_ATTOT .
  aliases SET_DCUTT
    for ZIF_VCXI_P0SS_DCT~SET_DCUTT .
  aliases SET_DRAWN
    for ZIF_VCXI_P0SS_DCT~SET_DRAWN .
  aliases SET_DTRIL
    for ZIF_VCXI_P0SS_SHTDIM~SET_DTRIL .
  aliases SET_DTRIW
    for ZIF_VCXI_P0SS_SHTDIM~SET_DTRIW .
  aliases SET_DUPSL
    for ZIF_VCXI_P0SS_SHTDIM~SET_DUPSL .
  aliases SET_DUPSW
    for ZIF_VCXI_P0SS_SHTDIM~SET_DUPSW .
  aliases SET_LTITO
    for ZIF_VCXI_P0SS_DCT~SET_LTITO .
  aliases SET_NOUPT
    for ZIF_VCXI_P0SS_DCT~SET_NOUPT .
  aliases SET_SDIVI
    for ZIF_VCXI_P0SS_SHTDIM~SET_SDIVI .
  aliases SET_SHTDI
    for ZIF_VCXI_P0SS_DCT~SET_SHTDI .
  aliases SET_SHTNL
    for ZIF_VCXI_P0SS_SHTDIM~SET_SHTNL .
  aliases SET_SHTNW
    for ZIF_VCXI_P0SS_SHTDIM~SET_SHTNW .
  aliases SET_TDCUT
    for ZIF_VCXI_P0SS_DCT~SET_TDCUT .
  aliases SET_TDIVI
    for ZIF_VCXI_P0SS_SHTDIM~SET_TDIVI .
  aliases SET_TRIPL
    for ZIF_VCXI_P0SS_SHTDIM~SET_TRIPL .
  aliases SET_TRIPS
    for ZIF_VCXI_P0SS_SHTDIM~SET_TRIPS .
  aliases SET_TRISL
    for ZIF_VCXI_P0SS_SHTDIM~SET_TRISL .
  aliases SET_TRISS
    for ZIF_VCXI_P0SS_SHTDIM~SET_TRISS .

  constants C_IPRVT_P0_SHEET_SE type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SHEET_SE'. "#EC NOTEXT
  constants C_SETID_DCTO type /VCXI/CKXC_SETID value 'ZVCXI_P0S_DCTO'. "#EC NOTEXT

  type-pools ABAP .
  methods CHECK_SALES_ACTIV
    returning
      value(RF_SALES_ACTIV) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_DIV type /VCXI/VKSC_IEVNT value 'INIT_DIV'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_PTRIM type /VCXI/VKSC_IEVNT value 'INIT_PTRIM'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_STRIM type /VCXI/VKSC_IEVNT value 'INIT_STRIM'. "#EC NOTEXT
  constants C_IEVNT_I_LOAD_DATA type /VCXI/VKSC_IEVNT value 'LOAD_DATA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_SHTG type /VCXI/VKSC_IEVNT value 'RECALC_SHTG'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  data R_PR_SPEC_SE type ref to ZCL_VCXI_P0SS_PR_SPEC_SE .
  constants C_IEVNT_I_RECALC_NOUPT type /VCXI/VKSC_IEVNT value 'RECALC_NOUPT'. "#EC NOTEXT

  methods GET_NOUPT_COMP_CO
    returning
      value(RF_NOUPS) type ZVCXI_P0SS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHTN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_VALUES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    preferred parameter IR_MESSAGE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL
    returning
      value(RR_DIECUT_TOOL) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_TDCUT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIVISION
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_DIV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PTRIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_STRIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTG
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUPT
    raising
      /VCXI/CX_CKX .
  methods SET_SHTGL
    importing
      !IS_SHTGL type ZVCXI_P0SS_S_SHTGL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTGW
    importing
      !IS_SHTGW type ZVCXI_P0SS_S_SHTGW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BFDIV
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_ASDIV
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BFLAM
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BSDIV
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BSLAM
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_ASLAM
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_GROSS
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_NET
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_NETWT
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SHEET_SE definition
class ZCL_VCXI_P0SS_PR_SHEET_SE implementation.
method CHECK_DIVISION.

*** Division Type maintained but not Sequence and Ups
  if     ME->GET_TDIVI( ) is not initial and
         ME->GET_SDIVI( ) is initial     and
         ME->GET_DUPSW( ) is initial     and
         ME->GET_DUPSL( ) is initial.
    RF_SUBRC = 1.

*** Divison Type Sawing and Sequence maintained but not Number ups
  elseif ME->GET_TDIVI( ) eq 'S'         and
         ME->GET_SDIVI( ) is not initial and
       ( ME->GET_DUPSW( ) is initial     or
         ME->GET_DUPSL( ) is initial ).
    RF_SUBRC = 2.

*** Division Type Chopping and Sequence Width is maintained
*** but not Number ups Width
  elseif ME->GET_TDIVI( ) eq 'C'         and
         ME->GET_SDIVI( ) eq 'W'         and
         ME->GET_DUPSW( ) is initial.
    RF_SUBRC = 3.

*** Division Type Chopping and Sequence Length is maintained
*** but not Number ups Length
  elseif ME->GET_TDIVI( ) eq 'C'         and
         ME->GET_SDIVI( ) eq 'L'         and
         ME->GET_DUPSL( ) is initial.
    RF_SUBRC = 4.
  endif.

endmethod.
method CHECK_SALES_ACTIV.

*** Initialize References if needed
  if ME->R_PR_SPEC_SE is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

*** Check if Sales is Active -> Context Check
  if ME->R_PR_SPEC_SE is bound and
     ME->R_PR_SPEC_SE->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
    RF_SALES_ACTIV = ABAP_TRUE.
  endif.

endmethod.
method CHECK_SHTN.

  data: LS_SHTNL type ZVCXI_P0SS_S_SHTNL,
        LS_SHTNW type ZVCXI_P0SS_S_SHTNW.

*** Get Net Sheet dimensions
  ME->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
  ME->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).

*** Start Positiv
  move 0 to RF_RETURN.

*** Check Net Sheet Length
  if LS_SHTNL-SHTNL is initial.
    move 1 to RF_RETURN.
  endif.

*** Check Net Sheet Width
  if LS_SHTNW-SHTNW is initial.
    if RF_RETURN is initial.
      move 2 to RF_RETURN.
    else.
      move 3 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_TDCUT.

  data: LF_PTYPE type ZVCXI_P0S_PTYPE,
        LF_TDCUT type ZVCXI_P0SS_TDCUT.

  check ME->R_PR_SPEC_SE is bound.
  LF_PTYPE = ME->R_PR_SPEC_SE->GET_PTYPE( ).
  LF_TDCUT = ME->GET_TDCUT( ).

*** Start with Die Cut Type is not needed
  RF_RETURN = 5.

*** Check Die Cut Type is needed!!
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC501 with key PTYPE = LF_PTYPE
                                               transporting no fields.
  check SY-SUBRC = 0.

*** Die Cut Type is maintained and valid
  RF_RETURN = 0.

*** DieCut Type is initial
  if LF_TDCUT is initial.
    RF_RETURN = 1.
    exit.
  endif.

*** DieCut Type is not valid generally
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC500 with key TDCUT = LF_TDCUT
                                               transporting no fields.
  if SY-SUBRC ne 0.
    RF_RETURN = 2.
    exit.
  endif.

*** Die Cut Type is not valid for Product Type
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC501 with key PTYPE = LF_PTYPE
                                                        TDCUT = LF_TDCUT
                                               transporting no fields.
  if SY-SUBRC ne 0.
    RF_RETURN = 3.
    exit.
  endif.


endmethod.
method CHECK_TOOL_VALUES.

  data:  LF_PARID        type        /VCXI/VKS_PARID,
         LF_CHECK        type        CHAR30,
         LF_INVALID      type        ABAP_BOOL,
         LF_MSGV1        type        SYMSGV.
  data:  LR_DIECUT_TOOL  type ref to ZCL_VCXI_XCS_CUST_MATNR.
  data:  LS_MAPSET       type        ZVCXI_XCS_S_MAPSET,
         LS_SETVA        type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC        type        /VCXI/CKXC_S_MAPVC,
         LS_PARAM        type        /VCXI/VKSR_S_PARAM,
         LS_MAPVN        type        /VCXI/CKXC_S_MAPVN,
         LS_FUNCT        type        ZVCXI_XCDC_S_CR_FUNCT.
  data:  LT_SETID        type        ZVCXI_XCS_TT_SETID,
         LT_FUNCT        type        ZVCXI_XCDC_TT_CR_FUNCT.

*** Start Positiv
  RF_RETURN = 0.

*** Get Active Checks
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).
  delete LT_FUNCT where IFUNC np 'CHECK_*'.

*** Check that we have someting to do
  check LT_FUNCT is not initial.

*** Get Tool
  LR_DIECUT_TOOL = ME->GET_TOOL( ).

*** Load Mapset of Die Cut Tool only if it is activ/it exist
  if   LR_DIECUT_TOOL                     is not bound  or
     ( LR_DIECUT_TOOL                     is bound      and
     ( LR_DIECUT_TOOL->F_CHECK_MATNR      eq ABAP_FALSE or
       LR_DIECUT_TOOL->F_CHECK_MAT_MARC   eq ABAP_FALSE or
       LR_DIECUT_TOOL->CHECK_IS_TOOL( )   ne ABAP_TRUE       ) ).
    RF_RETURN = 1.

    if IR_MESSAGE is supplied.
***   Tool is not valid or do not exist.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '703'
                               IF_MSGV1 = LF_MSGV1 ).
    endif.
    exit.
  endif.

  append C_SETID_DCTO to LT_SETID.

*** Check Mapping Set if Needed
  read table LT_FUNCT with key IFUNC = 'CHECK_TOOL_CLASS' transporting no fields.
  if SY-SUBRC = 0.
    if LR_DIECUT_TOOL->CHECK_MAPSET( IT_SETID = LT_SETID ) ne ABAP_TRUE.

      RF_RETURN = 1.
      if IR_MESSAGE is supplied.
***     Tool is not valid. Please Check Classification. No Values maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '704' ).
      endif.
    endif.
  endif.

  LR_DIECUT_TOOL->GET_MAPSET( IT_SETID = LT_SETID ).

*** Get Die Cut Tool Mapping Mapping
  read table LR_DIECUT_TOOL->T_MAPSET into LS_MAPSET with key SETID = C_SETID_DCTO.
  check SY-SUBRC = 0.

*** Split check and get Parameter
  loop at LT_FUNCT into LS_FUNCT.
    clear: LF_INVALID.
    split LS_FUNCT-IFUNC at '@' into LF_CHECK LF_PARID.
    check LF_CHECK eq C_CHECK_TOOL and
          LF_PARID is not initial.


    clear: LS_PARAM, LF_MSGV1.
    try.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = LF_PARID ).
      catch /VCXI/CX_CKX.
        clear: LS_PARAM.
    endtry.

*** Compare values
    read table LS_MAPSET-T_SETVA into LS_SETVA with key MAPID = LF_PARID.
    if SY-SUBRC = 0.

      move LS_SETVA-ATBEZ to LF_MSGV1.
***   Get the right Value
      if LS_SETVA-T_MAPVC is not initial.
        read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
        if LS_MAPVC-VAMAP ne LS_PARAM-ATWRT.
          move ABAP_TRUE to LF_INVALID.
        endif.

      elseif LS_SETVA-T_MAPVN is not initial.
        read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
***     Try Unit Conversion if we have a different one
        if LS_MAPVN-ATFLV_UOM ne LS_PARAM-UNIT.
          try.
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_PARAM-UNIT
                                                                 IF_UOM_IN    = LS_MAPVN-ATFLV_UOM
                                                                 IF_VALUE_IN  = LS_MAPVN-ATFLV
                                                       importing EF_VALUE_OUT = LS_MAPVN-ATFLV ).
            catch /VCXI/CX_CKX.
              continue.
          endtry.
        endif.
        if LS_MAPVN-ATFLV ne LS_PARAM-ATFLV.
          move ABAP_TRUE to LF_INVALID.
        endif.
      endif.
    endif.

    if LF_INVALID eq ABAP_TRUE.
      move 1 to RF_RETURN.
      if IR_MESSAGE is supplied.
***     Value &1 do not match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '701'
                                 IF_MSGV1 = LF_MSGV1 ).
      else.
        exit.
      endif.
    else.
      if IR_MESSAGE is supplied.
***     Value &1 do match Tool Classification.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '702'
                                 IF_MSGV1 = LF_MSGV1 ).
      endif.
    endif.

  endloop.

endmethod.
method CONSTRUCTOR.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Unit of Parametr
  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Tool Life Time
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq ME->ZIF_VCXI_P0SS_DCT~C_PARID_LTITO_A or
                          PARID eq ME->ZIF_VCXI_P0SS_DCT~C_PARID_LTITO_L or
                          PARID eq ME->ZIF_VCXI_P0SS_DCT~C_PARID_LTITO_P or
                          PARID eq ME->ZIF_VCXI_P0SS_DCT~C_PARID_LTITO_W ).
    move LS_PARAM-PARID to ME->ZIF_VCXI_P0SS_DCT~F_PARID_LTITO.
    exit.
  endloop.

endmethod.
method GET_CALIP.

*** Request Caliper by Specification
  check ME->R_PR_SPEC_SE is bound.
  RS_CALIP = ME->R_PR_SPEC_SE->GET_CALIP( IF_POOTI = '*' ).

endmethod.
method GET_NOUPT_COMP_CO.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_COMP_CO      type ref to ZCL_VCXI_P0SS_PR_COMP_CO.

***------------------------------------------------------------------------------------------------
*** Get Component CO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_CO.
        check LR_PR_COMP_CO is bound.

***     Get Number Ups
        RF_NOUPS = LR_PR_COMP_CO->GET_NOUPS( ).

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_CO.
    endtry.
  endif.

endmethod.
method GET_PCDIM_ASDIV.

***------------------------------------------------------------------------------------------------
*** Use Net Sheet Dimensions with Trim
  RS_PCDIM = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_NETWT ).

***------------------------------------------------------------------------------------------------
*** Number of Outs
  move 1 to RS_PCDIM-NOOUT.

endmethod.
method GET_PCDIM_ASLAM.

  data:  LS_PCDIM_BSLAM    type        ZVCXI_P0SP_S_PCDIM,
         LS_SHTLL          type        ZVCXI_P0SS_S_SHTLL,
         LS_SHTLW          type        ZVCXI_P0SS_S_SHTLW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE_LAMI      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Check Specification is available
  if ME->R_PR_SPEC_SE is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.
  check ME->R_PR_SPEC_SE is bound.

***------------------------------------------------------------------------------------------------
*** Get Dimension Before Second Lamination
  LS_PCDIM_BSLAM = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BSLAM ).

*** Use as Base
  move LS_PCDIM_BSLAM to RS_PCDIM.

*** Get all Lamination (Sorted)
  LT_GATE_LAMI = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                        IF_INUSE = ABAP_TRUE ).
  ZCL_VCXI_P0SS_CUST_LAMI=>SORT_LAMI( changing CT_GATE = LT_GATE_LAMI ).

*** Get Second Lamination
  try.
      read table LT_GATE_LAMI into LR_GATE index 2.
      check SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      check LR_PR_LAMI is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***------------------------------------------------------------------------------------------------
*** Handling of Overlap on the Length
  move LR_PR_LAMI->GET_SHTLL( ) to LS_SHTLL.
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLL-SHTLL
                                                     IF_UOM_IN    = LS_SHTLL-SHTLL_UOM
                                                     IF_UOM_OUT   = RS_PCDIM-PCLEN_UOM
                                           importing EF_VALUE_OUT = LS_SHTLL-SHTLL
                                                     EF_UOM_OUT   = LS_SHTLL-SHTLL_UOM ).
  if LS_SHTLL-SHTLL gt RS_PCDIM-PCLEN.
    move LS_SHTLL-SHTLL     to RS_PCDIM-PCLEN.
    move LS_SHTLL-SHTLL_UOM to RS_PCDIM-PCLEN_UOM.
  endif.

*** Handling of Overlap on the Width
  move LR_PR_LAMI->GET_SHTLW( ) to LS_SHTLW.
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLW-SHTLW
                                                     IF_UOM_IN    = LS_SHTLW-SHTLW_UOM
                                                     IF_UOM_OUT   = RS_PCDIM-PCWID_UOM
                                           importing EF_VALUE_OUT = LS_SHTLW-SHTLW
                                                     EF_UOM_OUT   = LS_SHTLW-SHTLW_UOM ).
  if LS_SHTLW-SHTLW gt RS_PCDIM-PCWID.
    move LS_SHTLW-SHTLW     to RS_PCDIM-PCWID.
    move LS_SHTLW-SHTLW_UOM to RS_PCDIM-PCWID_UOM.
  endif.

*** Caliper
  LS_CALIP = ME->R_PR_SPEC_SE->GET_CALIP( IF_POOTI = 'BASE, LAMI1, LAMI2' ).
  move LS_CALIP-CALIP             to RS_PCDIM-PCHEI.
  move LS_CALIP-CALIP_UOM         to RS_PCDIM-PCHEI_UOM.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  move 1 to RS_PCDIM-NOOUT.

endmethod.
method GET_PCDIM_BFDIV.

***------------------------------------------------------------------------------------------------
*** Use Dimension After Second Lamination
  RS_PCDIM = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_ASLAM ).

***------------------------------------------------------------------------------------------------
*** Number of Outs
  if ME->GET_TDIVI( ) is not initial.
    if ME->GET_SDIVI( ) eq 'L'.
***   Get Division Ups Length for Number of Outs
      move ME->GET_DUPSL( ) to RS_PCDIM-NOOUT.
    else.
***   Get Division Ups Width for Number of Outs
      move ME->GET_DUPSW( ) to RS_PCDIM-NOOUT.
    endif.
  endif.

endmethod.
method GET_PCDIM_BFLAM.

***------------------------------------------------------------------------------------------------
*** Use Gross Sheet Dimensions
  RS_PCDIM = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_GROSS ).

***------------------------------------------------------------------------------------------------
*** Number of Outs
  move 1 to RS_PCDIM-NOOUT.

endmethod.
method GET_PCDIM_BSDIV.

  data:  LS_PCDIM_BFDIV    type        ZVCXI_P0SP_S_PCDIM,
         LS_PCDIM_ASDIV    type        ZVCXI_P0SP_S_PCDIM.


***------------------------------------------------------------------------------------------------
*** Get Dimension Before First Division and Net With Trim
  LS_PCDIM_BFDIV = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BFDIV ).
  LS_PCDIM_ASDIV = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_ASDIV ).

*** Use as Base
  move LS_PCDIM_BFDIV to RS_PCDIM.

***------------------------------------------------------------------------------------------------
*** Apply first Division
  if ME->GET_TDIVI( ) is not initial.
*** Use "After Second Division" as "After First Division" for Length or Width
    if ME->GET_SDIVI( ) eq 'L'.
      move LS_PCDIM_ASDIV-PCLEN     to RS_PCDIM-PCLEN.
      move LS_PCDIM_ASDIV-PCLEN_UOM to RS_PCDIM-PCLEN_UOM.
    else.
      move LS_PCDIM_ASDIV-PCWID     to RS_PCDIM-PCWID.
      move LS_PCDIM_ASDIV-PCWID_UOM to RS_PCDIM-PCWID_UOM.
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  if ME->GET_TDIVI( ) is not initial.
    if ME->GET_SDIVI( ) eq 'L'.
***   Get Division Ups Width for Number of Outs
      move ME->GET_DUPSW( )         to RS_PCDIM-NOOUT.
    else.
***   Get Division Ups Length for Number of Outs
      move ME->GET_DUPSL( )         to RS_PCDIM-NOOUT.
    endif.
  else.
*** No Division
    move 1                          to RS_PCDIM-NOOUT.
  endif.

***------------------------------------------------------------------------------------------------
*** Number of Ups
  divide RS_PCDIM-PCUPS by RS_PCDIM-NOOUT.

endmethod.
method GET_PCDIM_BSLAM.

  data:  LS_PCDIM_BFLAM    type        ZVCXI_P0SP_S_PCDIM,
         LS_SHTLL          type        ZVCXI_P0SS_S_SHTLL,
         LS_SHTLW          type        ZVCXI_P0SS_S_SHTLW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE_LAMI      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Check Specification is available
  if ME->R_PR_SPEC_SE is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.
  check ME->R_PR_SPEC_SE is bound.

***------------------------------------------------------------------------------------------------
*** Get Dimension Before First Lamination
  LS_PCDIM_BFLAM = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BFLAM ).

*** Use as Base
  move LS_PCDIM_BFLAM to RS_PCDIM.

***------------------------------------------------------------------------------------------------
*** Get all Lamination (Sorted)
  LT_GATE_LAMI = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                        IF_INUSE = ABAP_TRUE ).
  ZCL_VCXI_P0SS_CUST_LAMI=>SORT_LAMI( changing CT_GATE = LT_GATE_LAMI ).

*** Get First Lamination
  try.
      read table LT_GATE_LAMI into LR_GATE index 1.
      check SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      check LR_PR_LAMI is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***------------------------------------------------------------------------------------------------
*** Handling of Overlap on the Length
  move LR_PR_LAMI->GET_SHTLL( ) to LS_SHTLL.
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLL-SHTLL
                                                     IF_UOM_IN    = LS_SHTLL-SHTLL_UOM
                                                     IF_UOM_OUT   = RS_PCDIM-PCLEN_UOM
                                           importing EF_VALUE_OUT = LS_SHTLL-SHTLL
                                                     EF_UOM_OUT   = LS_SHTLL-SHTLL_UOM ).
  if LS_SHTLL-SHTLL gt RS_PCDIM-PCLEN.
    move LS_SHTLL-SHTLL     to RS_PCDIM-PCLEN.
    move LS_SHTLL-SHTLL_UOM to RS_PCDIM-PCLEN_UOM.
  endif.

*** Handling of Overlap on the Width
  move LR_PR_LAMI->GET_SHTLW( ) to LS_SHTLW.
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLW-SHTLW
                                                     IF_UOM_IN    = LS_SHTLW-SHTLW_UOM
                                                     IF_UOM_OUT   = RS_PCDIM-PCWID_UOM
                                           importing EF_VALUE_OUT = LS_SHTLW-SHTLW
                                                     EF_UOM_OUT   = LS_SHTLW-SHTLW_UOM ).
  if LS_SHTLW-SHTLW gt RS_PCDIM-PCWID.
    move LS_SHTLW-SHTLW     to RS_PCDIM-PCWID.
    move LS_SHTLW-SHTLW_UOM to RS_PCDIM-PCWID_UOM.
  endif.

*** Caliper
  LS_CALIP = ME->R_PR_SPEC_SE->GET_CALIP( IF_POOTI = 'BASE, LAMI1' ).
  move LS_CALIP-CALIP             to RS_PCDIM-PCHEI.
  move LS_CALIP-CALIP_UOM         to RS_PCDIM-PCHEI_UOM.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  RS_PCDIM-NOOUT = RS_PCDIM-PCUPS / LS_PCDIM_BFLAM-PCUPS.

endmethod.
method GET_PCDIM_GROSS.

  data:  LF_NOUPT          type        ZVCXI_P0SS_NOUPT,
         LF_DUPSL          type        ZVCXI_P0SS_DUPSL,
         LF_DUPSW          type        ZVCXI_P0SS_DUPSW.
  data:  LS_SHTGL          type        ZVCXI_P0SS_S_SHTGL,
         LS_SHTGW          type        ZVCXI_P0SS_S_SHTGW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.

*** Check Specification is available
  if ME->R_PR_SPEC_SE is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.
  check ME->R_PR_SPEC_SE is bound.

***------------------------------------------------------------------------------------------------
*** PC Type
  move 'ZVCXI_P0_SHEET'           to RS_PCDIM-PCTYP.

***------------------------------------------------------------------------------------------------
*** Gross Sheet Length
  LS_SHTGL = ME->GET_SHTGL( ).
  move LS_SHTGL-SHTGL             to RS_PCDIM-PCLEN.
  move LS_SHTGL-SHTGL_UOM         to RS_PCDIM-PCLEN_UOM.

*** Gross Sheet Width
  LS_SHTGW = ME->GET_SHTGW( ).
  move LS_SHTGW-SHTGW             to RS_PCDIM-PCWID.
  move LS_SHTGW-SHTGW_UOM         to RS_PCDIM-PCWID_UOM.

*** Caliper
  LS_CALIP = ME->R_PR_SPEC_SE->GET_CALIP( IF_POOTI = 'BASE' ).
  move LS_CALIP-CALIP             to RS_PCDIM-PCHEI.
  move LS_CALIP-CALIP_UOM         to RS_PCDIM-PCHEI_UOM.

***------------------------------------------------------------------------------------------------
*** Number of Ups
  move ME->GET_NOUPT_COMP_CO( ) to LF_NOUPT.
  if LF_NOUPT is initial.
    ME->GET_NOUPT( importing EF_NOUPT = LF_NOUPT ).
  endif.
  move LF_NOUPT                   to RS_PCDIM-PCUPS.

*** Multiply by Ups of Division
  if ME->GET_TDIVI( ) is not initial.
    move ME->GET_DUPSL( ) to LF_DUPSL.
    multiply RS_PCDIM-PCUPS by LF_DUPSL.

    move ME->GET_DUPSW( ) to LF_DUPSW.
    multiply RS_PCDIM-PCUPS by LF_DUPSW.
  endif.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  move 1                          to RS_PCDIM-NOOUT.

***------------------------------------------------------------------------------------------------
*** PC Direction
  move 'A'                        to RS_PCDIM-PCDIR.

endmethod.
method GET_PCDIM_NET.

  data:  LF_NOUPT          type        ZVCXI_P0SS_NOUPT.
  data:  LS_SHTNL          type        ZVCXI_P0SS_S_SHTNL,
         LS_SHTNW          type        ZVCXI_P0SS_S_SHTNW,
         LS_CALIP          type        ZVCXI_P0SS_S_CALIP.

*** Check Specification is available
  if ME->R_PR_SPEC_SE is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.
  check ME->R_PR_SPEC_SE is bound.

***------------------------------------------------------------------------------------------------
*** PC Type
  move 'ZVCXI_P0_SHEET'           to RS_PCDIM-PCTYP.

***------------------------------------------------------------------------------------------------
*** Net Sheet Length
  ME->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
  move LS_SHTNL-SHTNL             to RS_PCDIM-PCLEN.
  move LS_SHTNL-SHTNL_UOM         to RS_PCDIM-PCLEN_UOM.

*** Net Sheet Width
  ME->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).
  move LS_SHTNW-SHTNW             to RS_PCDIM-PCWID.
  move LS_SHTNW-SHTNW_UOM         to RS_PCDIM-PCWID_UOM.

*** Caliper
  LS_CALIP = ME->R_PR_SPEC_SE->GET_CALIP( IF_POOTI = '*' ).
  move LS_CALIP-CALIP             to RS_PCDIM-PCHEI.
  move LS_CALIP-CALIP_UOM         to RS_PCDIM-PCHEI_UOM.

***------------------------------------------------------------------------------------------------
*** Number of Ups
  move ME->GET_NOUPT_COMP_CO( ) to LF_NOUPT.
  if LF_NOUPT is initial.
    ME->GET_NOUPT( importing EF_NOUPT = LF_NOUPT ).
  endif.
  move LF_NOUPT                   to RS_PCDIM-PCUPS.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  move 1                          to RS_PCDIM-NOOUT.

***------------------------------------------------------------------------------------------------
*** PC Direction
  move 'A'                        to RS_PCDIM-PCDIR.

endmethod.
method GET_PCDIM_NETWT.

  data:  LF_DUPSL          type        ZVCXI_P0SS_DUPSL,
         LF_DUPSW          type        ZVCXI_P0SS_DUPSW.
  data:  LS_PCDIM_NET      type        ZVCXI_P0SP_S_PCDIM,
         LS_TRIML          type        ZVCXI_P0SS_S_TRIML,
         LS_TRIMS          type        ZVCXI_P0SS_S_TRIMS,
         LS_SHTLL          type        ZVCXI_P0SS_S_SHTLL,
         LS_SHTLW          type        ZVCXI_P0SS_S_SHTLW.
  data:  LT_GATE_LAMI      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI        type ref to ZCL_VCXI_P0SS_PR_LAMI.


***------------------------------------------------------------------------------------------------
*** Get Net Sheet Dimensions
  LS_PCDIM_NET = ME->ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM~C_POOTI_NET ).

*** Use as Base
  move LS_PCDIM_NET to RS_PCDIM.

***------------------------------------------------------------------------------------------------
*** Get Trim (Side Trim & LE/TR Trim)
  LS_TRIML = ME->GET_TRIML( ).
  LS_TRIMS = ME->GET_TRIMS( ).

*** Sheet Length with Trim
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM_NET-PCLEN
                                                      IF_CALCV_UOM_1 = LS_PCDIM_NET-PCLEN_UOM
                                                      IF_CALCV_2     = LS_TRIML-TRIML
                                                      IF_CALCV_UOM_2 = LS_TRIML-TRIML_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                      IF_UOM         = LS_PCDIM_NET-PCLEN_UOM
                                            importing EF_CALCV       = RS_PCDIM-PCLEN
                                                      EF_CALCV_UOM   = RS_PCDIM-PCLEN_UOM ).

*** Sheet Width with Trim
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM_NET-PCWID
                                                      IF_CALCV_UOM_1 = LS_PCDIM_NET-PCWID_UOM
                                                      IF_CALCV_2     = LS_TRIMS-TRIMS
                                                      IF_CALCV_UOM_2 = LS_TRIMS-TRIMS_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                      IF_UOM         = LS_PCDIM_NET-PCWID_UOM
                                            importing EF_CALCV       = RS_PCDIM-PCWID
                                                      EF_CALCV_UOM   = RS_PCDIM-PCWID_UOM ).

***------------------------------------------------------------------------------------------------
*** Consider Lamination if not covered by fully Division

*** Get Division Ups
  move ME->GET_DUPSL( ) to LF_DUPSL.
  move ME->GET_DUPSW( ) to LF_DUPSW.

  if LF_DUPSL le 1 or
     LF_DUPSW le 1.
*** Get all Lamination
    LT_GATE_LAMI = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                          IF_INUSE = ABAP_TRUE ).
  endif.

*** Use largest Lamination Size for not Divided Dimension
  loop at LT_GATE_LAMI into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Handling of Overlap on the Length
    if LF_DUPSL le 1.
      move LR_PR_LAMI->GET_SHTLL( ) to LS_SHTLL.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLL-SHTLL
                                                         IF_UOM_IN    = LS_SHTLL-SHTLL_UOM
                                                         IF_UOM_OUT   = RS_PCDIM-PCLEN_UOM
                                               importing EF_VALUE_OUT = LS_SHTLL-SHTLL
                                                         EF_UOM_OUT   = LS_SHTLL-SHTLL_UOM ).
      if LS_SHTLL-SHTLL gt RS_PCDIM-PCLEN.
        move LS_SHTLL-SHTLL     to RS_PCDIM-PCLEN.
        move LS_SHTLL-SHTLL_UOM to RS_PCDIM-PCLEN_UOM.
      endif.
    endif.

*** Handling of Overlap on the Width
    if LF_DUPSW le 1.
      move LR_PR_LAMI->GET_SHTLW( ) to LS_SHTLW.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_SHTLW-SHTLW
                                                         IF_UOM_IN    = LS_SHTLW-SHTLW_UOM
                                                         IF_UOM_OUT   = RS_PCDIM-PCWID_UOM
                                               importing EF_VALUE_OUT = LS_SHTLW-SHTLW
                                                         EF_UOM_OUT   = LS_SHTLW-SHTLW_UOM ).
      if LS_SHTLW-SHTLW gt RS_PCDIM-PCWID.
        move LS_SHTLW-SHTLW     to RS_PCDIM-PCWID.
        move LS_SHTLW-SHTLW_UOM to RS_PCDIM-PCWID_UOM.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Number of Outs
  RS_PCDIM-NOOUT = RS_PCDIM-PCUPS / LS_PCDIM_NET-PCUPS.

endmethod.
method GET_PTYPE.

  check ME->R_PR_SPEC_SE is bound.
*** Get Product Type
  RF_PTYPE = ME->R_PR_SPEC_SE->GET_PTYPE( ).

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Net Sheet Size
  case ME->CHECK_SHTN( ).
    when 0 .
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.


***------------------------------------------------------
*** Division Definition
  case ME->CHECK_DIVISION( ).
*** Division Definition is completely maintained.
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
*** Divsion Definition is not completely maintained
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                 IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------
*** Check Tools
  if ME->GET_DCUTT( ) is not initial.
    case ME->CHECK_TOOL_VALUES( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.
  endif.

***----------------------------------------------------------------------------
*** Check Die Cut Type
  case ME->CHECK_TDCUT( ).
    when 0 or 5.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------
*** Check Net Sheet Size
  case ME->CHECK_SHTN( ).
*** Net Length and Width is maintained.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '251' ).
*** Net Length is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '252' ).
*** Net Width is not maintained.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '253' ).
*** Net Length and Width is not maintained.
    when 3.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '254' ).
  endcase.

***------------------------------------------------------
*** Division Definition
  case ME->CHECK_DIVISION( ).
*** Division Definition is completely maintained.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '220' ).
*** Divsion Sequence and Ups are not maintained
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '216' ).
*** For Divsion Type Sawing the Ups are not maintained
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '217' ).

*** For Divsion Type Chopping and Sequence Width the Ups are not maintained.
    when 3.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '218' ).
*** For Divsion Type Chopping and Sequence Length the Ups are not maintained.
    when 4.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '219' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Tool Values
  if ME->GET_DCUTT( ) is not initial.
    ME->CHECK_TOOL_VALUES( IR_MESSAGE = IR_MESSAGE ).
  endif.

***----------------------------------------------------------------------------
*** Check Die Cut Type
  case ME->CHECK_TDCUT( ).
    when 0.
***   Die Cut Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '221' ).
    when 1.
***   Die Cut Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '222' ).
    when 2.
***   Die Cut Type is maintained and not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '223' ).

    when 3.
***   Die Cut Type is maintained and not valid for Product Type.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '224' ).
  endcase.

endmethod.
method GET_TOOL.

  data:  LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.
  data:  LF_DCUTT          type        ZVCXI_P0SS_DCUTT,
         LF_WERKS          type        WERKS_D.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

  move ME->GET_DCUTT( ) to LF_DCUTT.

*** Get Die Cut Tool Customizing Instance
  RR_DIECUT_TOOL = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_DCUTT
                                                          IF_WERKS = LF_WERKS ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_LOAD_DATA.
      ME->HANDLE_LOAD_DATA( ).

    when C_IEVNT_I_RECALC_SHTG.
      ME->HANDLE_RECALC_SHTG( ).

    when C_IEVNT_I_INIT_STRIM.
      ME->HANDLE_INIT_STRIM( ).

    when C_IEVNT_I_INIT_PTRIM.
      ME->HANDLE_INIT_PTRIM( ).

    when C_IEVNT_I_INIT_DIV.
      ME->HANDLE_INIT_DIV( ).

    when C_IEVNT_I_RECALC_NOUPT.
      ME->HANDLE_RECALC_NOUPT( ).

  endcase.

endmethod.
method HANDLE_INIT_DIV.

  data: LF_SDIVI type ZVCXI_P0SS_SDIVI,
        LF_DUPSL type ZVCXI_P0SS_DUPSL,
        LF_DUPSW type ZVCXI_P0SS_DUPSW.
  data: LS_DTRIL type ZVCXI_P0SS_S_DTRIL,
        LS_DTRIW type ZVCXI_P0SS_S_DTRIW.

*** Clear Sequence, Ups and Trim
  if   ( ME->GET_TDIVI( ) is not initial   and
         ME->GET_SDIVI( ) is initial     ) or
         ME->GET_TDIVI( ) is initial.

    ME->SET_SDIVI( IF_SDIVI = LF_SDIVI ).
    ME->SET_DUPSL( IF_DUPSL = LF_DUPSL ).
    ME->SET_DUPSW( IF_DUPSW = LF_DUPSW ).
    ME->SET_DTRIL( IS_DTRIL = LS_DTRIL ).
    ME->SET_DTRIW( IS_DTRIW = LS_DTRIW ).

*** Clear Length Ups and Trim for Width wise Chopping
  elseif ME->GET_TDIVI( ) eq 'C' and
         ME->GET_SDIVI( ) eq 'W'.

    ME->SET_DUPSL( IF_DUPSL = 1 ).
    ME->SET_DTRIL( IS_DTRIL = LS_DTRIL ).

*** Clear Width Ups and Trim for Length wise Chopping
  elseif ME->GET_TDIVI( ) eq 'C' and
         ME->GET_SDIVI( ) eq 'L'.

    ME->SET_DUPSW( IF_DUPSW = 1 ).
    ME->SET_DTRIW( IS_DTRIW = LS_DTRIW ).

  endif.

  if ME->GET_SDIVI( ) is not initial and
     ME->GET_TDIVI( ) is not initial and
     ME->GET_DUPSW( ) le 1.
    ME->SET_DTRIW( IS_DTRIW = LS_DTRIW ).
  endif.

  if ME->GET_SDIVI( ) is not initial and
     ME->GET_TDIVI( ) is not initial and
     ME->GET_DUPSL( ) le 1.
    ME->SET_DTRIL( IS_DTRIL = LS_DTRIL ).
  endif.

endmethod.
method HANDLE_INIT_PTRIM.

  data: LS_TRISL       type ZVCXI_P0SS_S_TRISL,
        LS_TRISS       type ZVCXI_P0SS_S_TRISS,
        LS_TRIPL       type ZVCXI_P0SS_S_TRIPL,
        LS_TRIPS       type ZVCXI_P0SS_S_TRIPS.
  data: LF_TRIML_SETBY type /VCXI/VKSR_SETBY,
        LF_TRIMS_SETBY type /VCXI/VKSR_SETBY.

*** Check if Production Trims Length Set by User
  ME->GET_TRIPL( importing ES_TRIPL = LS_TRIPL
                           EF_SETBY = LF_TRIML_SETBY ).

  if LF_TRIML_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    ME->GET_TRISL( importing ES_TRISL = LS_TRISL ).
    if LS_TRISL ne LS_TRIPL.
      move LS_TRISL-TRISL     to LS_TRIPL-TRIPL.
      move LS_TRISL-TRISL_UOM to LS_TRIPL-TRIPL_UOM.
      ME->SET_TRIPL( IS_TRIPL = LS_TRIPL ).
    endif.
  endif.

*** Check if Production Trims Side Set by User
  ME->GET_TRIPS( importing ES_TRIPS = LS_TRIPS
                           EF_SETBY = LF_TRIMS_SETBY ).

  if LF_TRIMS_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    ME->GET_TRISS( importing ES_TRISS = LS_TRISS ).
    if LS_TRISS ne LS_TRIPS.
      move LS_TRISS-TRISS     to LS_TRIPS-TRIPS.
      move LS_TRISS-TRISS_UOM to LS_TRIPS-TRIPS_UOM.
      ME->SET_TRIPS( IS_TRIPS = LS_TRIPS ).
    endif.
  endif.


endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Spec for SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

  if ME->R_PR_SPEC_SE is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_INIT_STRIM.

  data: LS_TRISL       type ZVCXI_P0SS_S_TRISL,
        LS_TRISS       type ZVCXI_P0SS_S_TRISS,
        LS_TRIPL       type ZVCXI_P0SS_S_TRIPL,
        LS_TRIPS       type ZVCXI_P0SS_S_TRIPS.
  data: LF_TRIML_SETBY type /VCXI/VKSR_SETBY,
        LF_TRIMS_SETBY type /VCXI/VKSR_SETBY.

*** Check if Sales Trims Length Set by User
  ME->GET_TRISL( importing ES_TRISL = LS_TRISL
                           EF_SETBY = LF_TRIML_SETBY ).

  if LF_TRIML_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    ME->GET_TRIPL( importing ES_TRIPL = LS_TRIPL ).
    if LS_TRIPL ne LS_TRISL.
      move LS_TRIPL-TRIPL     to LS_TRISL-TRISL.
      move LS_TRIPL-TRIPL_UOM to LS_TRISL-TRISL_UOM.
      ME->SET_TRISL( IS_TRISL = LS_TRISL ).
    endif.
  endif.

*** Check if Sales Trims Side Set by User
  ME->GET_TRISS( importing ES_TRISS = LS_TRISS
                           EF_SETBY = LF_TRIMS_SETBY ).

  if LF_TRIMS_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    ME->GET_TRIPS( importing ES_TRIPS = LS_TRIPS ).
    if LS_TRIPS ne LS_TRISS.
      move LS_TRIPS-TRIPS     to LS_TRISS-TRISS.
      move LS_TRIPS-TRIPS_UOM to LS_TRISS-TRISS_UOM.
      ME->SET_TRISS( IS_TRISS = LS_TRISS ).
    endif.
  endif.

endmethod.
method HANDLE_LOAD_DATA.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_RECALC_NOUPT.

  data:  LF_NOUPT           type        ZVCXI_P0SS_NOUPT,
         LF_NOUPS           type        ZVCXI_P0SS_NOUPS.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_COMP_SE      type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
         LR_PR_COMP_CO      type ref to ZCL_VCXI_P0SS_PR_COMP_CO,
         LR_PR_COMP_FG      type ref to ZCL_VCXI_P0SS_PR_COMP_FG.

***------------------------------------------------------------------------------------------------
*** Get Component SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
        check LR_PR_COMP_SE is bound.
***     Add Number Ups
        LF_NOUPS = LR_PR_COMP_SE->GET_NOUPS( ).
        add LF_NOUPS to LF_NOUPT.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Component FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        check LR_PR_COMP_FG is bound.
***     Add Number Ups
        LF_NOUPS = LR_PR_COMP_FG->GET_NOUPS( ).
        add LF_NOUPS to LF_NOUPT.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_FG.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Component CO
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_CO=>C_IPRVT_P0_COMP_CO
                                   IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_CO.
        check LR_PR_COMP_CO is bound.
***     Add Number Ups
        LF_NOUPS = LR_PR_COMP_CO->GET_NOUPS( ).
        add LF_NOUPS to LF_NOUPT.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_CO.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set Number Ups total
  ME->SET_NOUPT( IF_NOUPT = LF_NOUPT ).

endmethod.
method HANDLE_RECALC_SHTG.

  data:          LF_TDIVI        type ZVCXI_P0SS_TDIVI,
                 LF_DUPSL        type ZVCXI_P0SS_DUPSL,
                 LF_DUPSW        type ZVCXI_P0SS_DUPSW.
  data:          LS_SHTNL        type ZVCXI_P0SS_S_SHTNL,
                 LS_SHTNW        type ZVCXI_P0SS_S_SHTNW,
                 LS_SHTGL        type ZVCXI_P0SS_S_SHTGL,
                 LS_SHTGW        type ZVCXI_P0SS_S_SHTGW,
                 LS_TRIML        type ZVCXI_P0SS_S_TRIML,
                 LS_TRIMS        type ZVCXI_P0SS_S_TRIMS,
                 LS_DTRIL        type ZVCXI_P0SS_S_DTRIL,
                 LS_DTRIW        type ZVCXI_P0SS_S_DTRIW.
  field-symbols: <F_VALUE_L>     type any,
                 <F_VALUE_L_UOM> type any,
                 <F_VALUE_W>     type any,
                 <F_VALUE_W_UOM> type any.

***------------------------------------------------------------------
*** Get Net Sheet
  ME->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
  ME->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).

*** Get Trim
  LS_TRIML = ME->GET_TRIML( ).
  LS_TRIMS = ME->GET_TRIMS( ).

***------------------------------------------------------------------
*** Calculate Standard
*** Gross Sheet Length
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
    exporting IF_CALCV_1     = LS_SHTNL-SHTNL
              IF_CALCV_UOM_1 = LS_SHTNL-SHTNL_UOM
              IF_CALCV_2     = LS_TRIML-TRIML
              IF_CALCV_UOM_2 = LS_TRIML-TRIML_UOM
              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
              IF_UOM         = LS_SHTNL-SHTNL_UOM
    importing EF_CALCV       = LS_SHTGL-SHTGL
              EF_CALCV_UOM   = LS_SHTGL-SHTGL_UOM ).

*** Gross Sheet Width
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
    exporting IF_CALCV_1     = LS_SHTNW-SHTNW
              IF_CALCV_UOM_1 = LS_SHTNW-SHTNW_UOM
              IF_CALCV_2     = LS_TRIMS-TRIMS
              IF_CALCV_UOM_2 = LS_TRIMS-TRIMS_UOM
              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
              IF_UOM         = LS_SHTNW-SHTNW_UOM
    importing EF_CALCV       = LS_SHTGW-SHTGW
              EF_CALCV_UOM   = LS_SHTGW-SHTGW_UOM ).

***------------------------------------------------------------------
*** Get Division Type
  move ME->GET_TDIVI( ) to LF_TDIVI.

*** Do Further Calculations if Division is needed
  if LF_TDIVI is not initial.

*** Calcualtion with Division Ups
    move ME->GET_DUPSL( ) to LF_DUPSL.
    if LF_DUPSL is not initial.
      LS_SHTGL-SHTGL = LS_SHTGL-SHTGL * LF_DUPSL.
    endif.

    move ME->GET_DUPSW( ) to LF_DUPSW.
    if LF_DUPSW is not initial.
      LS_SHTGW-SHTGW = LS_SHTGW-SHTGW * LF_DUPSW.
    endif.

*** Get Divison Trim
    move ME->GET_DTRIL( )     to LS_DTRIL.
    assign LS_DTRIL-DTRIL     to <F_VALUE_L>.
    assign LS_DTRIL-DTRIL_UOM to <F_VALUE_L_UOM>.
    move ME->GET_DTRIW( )     to LS_DTRIW.
    assign LS_DTRIW-DTRIW     to <F_VALUE_W>.
    assign LS_DTRIW-DTRIW_UOM to <F_VALUE_W_UOM>.

*** Add Divison Trim
*** Gross Sheet Length
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = LS_SHTGL-SHTGL
                IF_CALCV_UOM_1 = LS_SHTGL-SHTGL_UOM
                IF_CALCV_2     = <F_VALUE_L>
                IF_CALCV_UOM_2 = <F_VALUE_L_UOM>
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = LS_SHTGL-SHTGL_UOM
      importing EF_CALCV       = LS_SHTGL-SHTGL
                EF_CALCV_UOM   = LS_SHTGL-SHTGL_UOM ).

*** Gross Sheet Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = LS_SHTGW-SHTGW
                IF_CALCV_UOM_1 = LS_SHTGW-SHTGW_UOM
                IF_CALCV_2     = <F_VALUE_W>
                IF_CALCV_UOM_2 = <F_VALUE_W_UOM>
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = LS_SHTGW-SHTGW_UOM
      importing EF_CALCV       = LS_SHTGW-SHTGW
                EF_CALCV_UOM   = LS_SHTGW-SHTGW_UOM ).

  endif.

***------------------------------------------------------------------
*** Set Gross Sheet
  ME->SET_SHTGL( IS_SHTGL = LS_SHTGL ).
  ME->SET_SHTGW( IS_SHTGW = LS_SHTGW ).

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_SHTGL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTGL ).

  move IS_SHTGL-SHTGL     to LS_PARAM-ATFLV.
  move IS_SHTGL-SHTGL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_SHTG_CHANGED ).
  endif.

endmethod.
method SET_SHTGW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTGW ).

  move IS_SHTGW-SHTGW     to LS_PARAM-ATFLV.
  move IS_SHTGW-SHTGW_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_SHTG_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_ATTOT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_ATTOT ).
  move LS_PARAM-ATWRT to RF_ATTOT.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_DCUTT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_DCUTT ).
  move LS_PARAM-ATWRT to RF_DCUTT.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_DRAWN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_DRAWN ).
  move LS_PARAM-ATWRT to RF_DRAWN.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_FNEST.

  RF_FNEST = ME->ZIF_VCXI_P0SS_SHTDIM~GET_FNEST( ).

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_LTITO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->ZIF_VCXI_P0SS_DCT~F_PARID_LTITO ).
  move LS_PARAM-ATFLV to RS_LTITO-LTITO.
  move LS_PARAM-UNIT  to RS_LTITO-LTITO_UOM.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_NOUPT.

  ME->ZIF_VCXI_P0SS_SHTDIM~GET_NOUPT( importing EF_NOUPT = EF_NOUPT
                                                EF_SETBY = EF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_SHTDI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_SHTDI ).
  move LS_PARAM-ATWRT to RF_SHTDI.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_SHTDI_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_SHTDI'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_SHTDI   type                   ZVCXI_P0SS_SHTDI.

  LF_SHTDI = ME->GET_SHTDI( ).

*** Return Sheet Direction Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_SHTDI into LS_D07V.
  check SY-SUBRC = 0.

  RF_SHTDI_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_TDCUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_TDCUT ).
  move LS_PARAM-ATWRT to RF_TDCUT.

endmethod.
method ZIF_VCXI_P0SS_DCT~GET_TDCUT_DESCR.

  data:      LS_TC500T  type                   ZVCXI_P0S_TC500T.
  data:      LF_TDCUT   type                   ZVCXI_P0SS_TDCUT.

  LF_TDCUT = ME->GET_TDCUT( ).

*** DieCut Type Description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC500 with key TDCUT = LF_TDCUT
                                               into LS_TC500T.
  RF_TDCUT_DESCR = LS_TC500T-DESCR.

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_ATTOT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_ATTOT ).

  move IF_ATTOT     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_DCT~C_IEVNT_O_ATTOT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_DCUTT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_DCUTT ).

  move IF_DCUTT     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_DCT~C_IEVNT_O_DCUTT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_DRAWN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_DRAWN ).

  move IF_DRAWN     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_FNEST.

  ME->ZIF_VCXI_P0SS_SHTDIM~SET_FNEST( IF_FNEST = IF_FNEST
                                      IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_LTITO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->ZIF_VCXI_P0SS_DCT~F_PARID_LTITO ).

  move IS_LTITO-LTITO     to LS_PARAM-ATFLV.
  move IS_LTITO-LTITO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_DCT~C_IEVNT_O_LTITO_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_NOUPT.

  ME->ZIF_VCXI_P0SS_SHTDIM~SET_NOUPT( IF_NOUPT = IF_NOUPT
                                      IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_SHTDI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_SHTDI ).

  move IF_SHTDI     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_DCT~C_IEVNT_O_SHTDI_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_DCT~SET_TDCUT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_DCT~C_PARID_TDCUT ).

  move IF_TDCUT     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_DCT~C_IEVNT_O_TDCUT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_DTRIL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DTRIL ).
  move LS_PARAM-ATFLV to RS_DTRIL-DTRIL.
  move LS_PARAM-UNIT  to RS_DTRIL-DTRIL_UOM.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_DTRIW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DTRIW ).
  move LS_PARAM-ATFLV to RS_DTRIW-DTRIW.
  move LS_PARAM-UNIT  to RS_DTRIW-DTRIW_UOM.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_DUPSL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DUPSL ).
  move LS_PARAM-ATFLV to RF_DUPSL.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_DUPSW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DUPSW ).
  move LS_PARAM-ATFLV to RF_DUPSW.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_FNEST.

*** Not needed!

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_NOUPL.

  RF_NOUPL = 1.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_NOUPT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_NOUPT ).
  move LS_PARAM-ATFLV to EF_NOUPT.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_NOUPW.

  RF_NOUPW = 1.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_PCDIM.

  case IF_POOTI.
***------------------------------------------------------------------
*** Gross Sheet Dimension
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_GROSS.
      RS_PCDIM = ME->GET_PCDIM_GROSS( ).

***------------------------------------------------------------------
*** Dimension Before First Lamination
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BFLAM.
      RS_PCDIM = ME->GET_PCDIM_BFLAM( ).

*** Dimension Before Second Lamination
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BSLAM.
      RS_PCDIM = ME->GET_PCDIM_BSLAM( ).

*** Dimension After Second Lamination
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_ASLAM.
      RS_PCDIM = ME->GET_PCDIM_ASLAM( ).

***------------------------------------------------------------------
*** Dimension Before First Division
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BFDIV.
      RS_PCDIM = ME->GET_PCDIM_BFDIV( ).

*** Dimension Before Second Division
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_BSDIV.
      RS_PCDIM = ME->GET_PCDIM_BSDIV( ).

*** Dimension After Second Division
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_ASDIV.
      RS_PCDIM = ME->GET_PCDIM_ASDIV( ).

***------------------------------------------------------------------
*** Net Sheet Dimension with Trim
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_NETWT.
      RS_PCDIM = ME->GET_PCDIM_NETWT( ).

*** Net Sheet Dimension
    when ZIF_VCXI_P0SS_SHTDIM~C_POOTI_NET.
      RS_PCDIM = ME->GET_PCDIM_NET( ).

  endcase.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SDIVI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SDIVI ).
  move LS_PARAM-ATWRT to RF_SDIVI.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SDIVI_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_SDIVI'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_SDIVI   type                   ZVCXI_P0SS_SDIVI.

  LF_SDIVI = ME->GET_SDIVI( ).

*** Return Sheet Direction Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_SDIVI into LS_D07V.
  check SY-SUBRC = 0.

  RF_SDIVI_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SHTGL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTGL ).
  move LS_PARAM-ATFLV to RS_SHTGL-SHTGL.
  move LS_PARAM-UNIT  to RS_SHTGL-SHTGL_UOM.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SHTGW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTGW ).
  move LS_PARAM-ATFLV to RS_SHTGW-SHTGW.
  move LS_PARAM-UNIT  to RS_SHTGW-SHTGW_UOM.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SHTNL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTNL ).
  move LS_PARAM-ATFLV to ES_SHTNL-SHTNL.
  move LS_PARAM-UNIT  to ES_SHTNL-SHTNL_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_SHTNW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTNW ).
  move LS_PARAM-ATFLV to ES_SHTNW-SHTNW.
  move LS_PARAM-UNIT  to ES_SHTNW-SHTNW_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TDIVI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TDIVI ).
  move LS_PARAM-ATWRT to RF_TDIVI.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TDIVI_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0SS_TDIVI'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_TDIVI   type                   ZVCXI_P0SS_TDIVI.

  LF_TDIVI = ME->GET_TDIVI( ).

*** Return Sheet Direction Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_TDIVI into LS_D07V.
  check SY-SUBRC = 0.

  RF_TDIVI_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRIML.

  data:  LS_TRIPL    type ZVCXI_P0SS_S_TRIPL,
         LS_TRISL    type ZVCXI_P0SS_S_TRISL.

  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.

*** Get Sales Trim
    ME->ZIF_VCXI_P0SS_SHTDIM~GET_TRISL( importing ES_TRISL = LS_TRISL ).
    move LS_TRISL-TRISL     to RS_TRIML-TRIML.
    move LS_TRISL-TRISL_UOM to RS_TRIML-TRIML_UOM.

  else.

*** Get Production Trim
    ME->ZIF_VCXI_P0SS_SHTDIM~GET_TRIPL( importing ES_TRIPL = LS_TRIPL ).
    move LS_TRIPL-TRIPL     to RS_TRIML-TRIML.
    move LS_TRIPL-TRIPL_UOM to RS_TRIML-TRIML_UOM.

  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRIMS.

  data:  LS_TRIPS    type ZVCXI_P0SS_S_TRIPS,
         LS_TRISS    type ZVCXI_P0SS_S_TRISS.

  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.

*** Get Sales Trim
    ME->ZIF_VCXI_P0SS_SHTDIM~GET_TRISS( importing ES_TRISS = LS_TRISS ).
    move LS_TRISS-TRISS     to RS_TRIMS-TRIMS.
    move LS_TRISS-TRISS_UOM to RS_TRIMS-TRIMS_UOM.

  else.

*** Get Production Trim
    ME->ZIF_VCXI_P0SS_SHTDIM~GET_TRIPS( importing ES_TRIPS = LS_TRIPS ).
    move LS_TRIPS-TRIPS     to RS_TRIMS-TRIMS.
    move LS_TRIPS-TRIPS_UOM to RS_TRIMS-TRIMS_UOM.

  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRIPL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRIPL ).
  move LS_PARAM-ATFLV to ES_TRIPL-TRIPL.
  move LS_PARAM-UNIT  to ES_TRIPL-TRIPL_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRIPS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRIPS ).
  move LS_PARAM-ATFLV to ES_TRIPS-TRIPS.
  move LS_PARAM-UNIT  to ES_TRIPS-TRIPS_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRISL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRISL ).
  move LS_PARAM-ATFLV to ES_TRISL-TRISL.
  move LS_PARAM-UNIT  to ES_TRISL-TRISL_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~GET_TRISS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRISS ).
  move LS_PARAM-ATFLV to ES_TRISS-TRISS.
  move LS_PARAM-UNIT  to ES_TRISS-TRISS_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_DTRIL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DTRIL ).

  move IS_DTRIL-DTRIL     to LS_PARAM-ATFLV.
  move IS_DTRIL-DTRIL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_DITRIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_DTRIW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DTRIW ).

  move IS_DTRIW-DTRIW     to LS_PARAM-ATFLV.
  move IS_DTRIW-DTRIW_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_DITRIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_DUPSL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DUPSL ).

  move IF_DUPSL     to LS_PARAM-ATFLV.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_DIUP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_DUPSW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_DUPSW ).

  move IF_DUPSW     to LS_PARAM-ATFLV.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_DIUP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_FNEST.

*** Not needed!

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_NOUPL.

*** Not needed!

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_NOUPT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_NOUPT ).

  if IF_NOUPT is supplied.
    move IF_NOUPT     to LS_PARAM-ATFLV.
  endif.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_NOUP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_NOUPW.

*** Not needed!

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_SDIVI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SDIVI ).

  move IF_SDIVI     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_SDIVI_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_SHTNL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTNL ).

  if IS_SHTNL is supplied.
    move IS_SHTNL-SHTNL     to LS_PARAM-ATFLV.
    move IS_SHTNL-SHTNL_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_SHTN_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_SHTNW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_SHTNW ).

  if IS_SHTNW is supplied.
    move IS_SHTNW-SHTNW     to LS_PARAM-ATFLV.
    move IS_SHTNW-SHTNW_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_SHTN_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_TDIVI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TDIVI ).

  move IF_TDIVI     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_TDIVI_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_TRIPL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRIPL ).

  move IS_TRIPL-TRIPL     to LS_PARAM-ATFLV.
  move IS_TRIPL-TRIPL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_PTRIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_TRIPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRIPS ).

  move IS_TRIPS-TRIPS     to LS_PARAM-ATFLV.
  move IS_TRIPS-TRIPS_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_PTRIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_TRISL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRISL ).

  move IS_TRISL-TRISL     to LS_PARAM-ATFLV.
  move IS_TRISL-TRISL_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_STRIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_SHTDIM~SET_TRISS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P0SS_SHTDIM~C_PARID_TRISS ).

  move IS_TRISS-TRISS     to LS_PARAM-ATFLV.
  move IS_TRISS-TRISS_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_SHTDIM~C_IEVNT_O_STRIM_CHANGED ).
  endif.

endmethod.
