
class ZCL_VCXI_XCDCU_UIFW definition
  public
  final
  create private .

public section.

  interfaces /VCXI/IF_CKXM_MESSAGE_EVENTS .

  constants C_UC_ADD_CONDDEF type SYUCOMM value 'ADD_CD' ##NO_TEXT.
  constants C_UC_ADD_CONDREC type SYUCOMM value 'ADD_CR' ##NO_TEXT.
  constants C_UC_ADD_CONDREC_BY_DEF type SYUCOMM value 'ADD_CR_BY_DEF' ##NO_TEXT.
  constants C_UC_CD type SYUCOMM value 'CD' ##NO_TEXT.
  constants C_UC_CHECK_S type SYUCOMM value 'CHECK_S' ##NO_TEXT.
  constants C_UC_DISP_TRANS type SYUCOMM value 'DISP_TRANS' ##NO_TEXT.
  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE' ##NO_TEXT.
  data F_ACTIVE_TAB type STRING .
  data F_CURSOR type SCRFNAME .
  data R_DVCCOND type ref to ZCL_VCXI_XCDC_DVCCOND read-only .
  data T_GDVCF type ZVCXI_XCD_TT_GDVCF read-only .

  methods ADD_DVCFILTER
    importing
      !IF_IDVCF type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods ADD_MSG_BY_CKX
    importing
      !IR_CX_CKX type ref to /VCXI/CX_CKX
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT optional .
  methods DELETE_DVCFILTER
    importing
      !IF_GDVCF type ZVCXI_XCD_GDVCF
    exceptions
      /VCXI/CX_CKX .
  methods DO_PBO .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM .
  methods GET_DUI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY .
  methods HANDLE_DUI_REFRESH_REQ .
  methods OPEN_NEW_DUI
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods REGISTER_DUI
    importing
      !IR_DUI type ref to ZCL_VCXI_XCDCU_DUI
    raising
      /VCXI/CX_CKX .
  methods REQUEST_DUI_REFRESH .
  methods REQUEST_FILTER
    importing
      !IT_OBJECT type /VCXI/CKX_TT_OBJECT
    returning
      value(RT_OBJECT_VISIBLE) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR .
  class-methods START_UI
    raising
      /VCXI/CX_CKX .
  methods UNREGISTER_DUI
    importing
      !IR_DUI type ref to ZCL_VCXI_XCDCU_DUI
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_CHECK_RANGE_ALL type CHAR1 value 'A' ##NO_TEXT.
  constants C_CHECK_RANGE_LOCKED type CHAR1 value 'L' ##NO_TEXT.
  constants C_CHECK_RANGE_SINGLE type CHAR1 value 'S' ##NO_TEXT.
  constants C_UC_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UC_CALL_SE01 type SYUCOMM value 'CALL_SE01' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_CHECK_A type SYUCOMM value 'CHECK_A' ##NO_TEXT.
  constants C_UC_CHECK_L type SYUCOMM value 'CHECK_L' ##NO_TEXT.
  constants C_UC_CONDREC_TR type SYUCOMM value 'CONDREC_TR' ##NO_TEXT.
  constants C_UC_CSNEXT type SYUCOMM value 'CSNEXT' ##NO_TEXT.
  constants C_UC_CSPREV type SYUCOMM value 'CSPREV' ##NO_TEXT.
  constants C_UC_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  constants C_UC_EXTRACT type SYUCOMM value 'EXTRACT' ##NO_TEXT.
  constants C_UC_FILTER type SYUCOMM value 'FILTER' ##NO_TEXT.
  constants C_UC_FOCUS type SYUCOMM value 'FOCUS' ##NO_TEXT.
  constants C_UC_SAVE type SYUCOMM value 'SAVE' ##NO_TEXT.
  data F_DUI_FIRST_CALL type ABAP_BOOL .
  data R_MSG type ref to /VCXI/CL_CKXM_MESSAGE .
  data R_TREE type ref to ZCL_VCXI_XCDCU_TREE .
  data T_CSNEXT type /VCXI/CKX_TT_OBJECT .
  data T_CSPREV type /VCXI/CKX_TT_OBJECT .
  data T_MSG_MAPPING type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_CONDDEF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_CONDREC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_CONDREC_BY_DEF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CALL_SE01
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CHECK
    importing
      !IF_CHECK_RANGE type CHAR1
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CONDREC_TR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSNEXT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSPREV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXTRACT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FILTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FOCUS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SETTING
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
private section.

  data F_DUI_REFRESH_REQUESTED type ABAP_BOOL .
  data R_REGISTERED_DUI type ref to ZCL_VCXI_XCDCU_DUI .
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .

  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_OBJECT_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT
    importing
      !SENDER .
  methods HANDLE_OBJECT_CREATED
    for event CREATED of /VCXI/IF_CKX_OBJECT
    importing
      !SENDER .
endclass. "ZCL_VCXI_XCDCU_UIFW definition
class ZCL_VCXI_XCDCU_UIFW implementation.
method /VCXI/IF_CKXM_MESSAGE_EVENTS~HANDLE_DOUBLE_CLICK.

  data:  LS_MSG_MAPPING type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      read table ME->T_MSG_MAPPING into LS_MSG_MAPPING with key GUID = IF_GUIDM.
      check SY-SUBRC eq 0.

      ME->OPEN_NEW_DUI( IR_OBJECT = LS_MSG_MAPPING-R_OBJECT ).

      move ABAP_TRUE to RF_CLOSE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_CKXM_MESSAGE_EVENTS~MESSAGES_DELETED.

  free: ME->T_MSG_MAPPING.

endmethod.
method /VCXI/IF_CKXM_MESSAGE_EVENTS~MODIFY_MESSAGE_BEFORE_OUTPUT.

  data:  LF_DESCR       type        /VCXI/CKX_DESCR.
  data:  LS_MSG_MAPPING type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      read table ME->T_MSG_MAPPING into LS_MSG_MAPPING with key GUID = IS_MSG-GUIDM.
      check SY-SUBRC eq 0.

      move LS_MSG_MAPPING-R_OBJECT->GET_DESCR( ) to LF_DESCR.
      if LF_DESCR is initial.
        move LS_MSG_MAPPING-R_OBJECT->GET_ID( ) to LF_DESCR.
      endif.

      if LF_DESCR is not initial.
        concatenate LF_DESCR CF_TEXT into CF_TEXT separated by ' - '.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method ADD_DVCFILTER.

  data: LF_GDVCF     type        ZVCXI_XCD_GDVCF.
  data: LR_DVCFILTER type ref to ZCL_VCXI_XCDC_DVCFILTER.

  LR_DVCFILTER = ZCL_VCXI_XCDC_DVCFILTER=>CREATE( IF_IDVCF = IF_IDVCF ).

  LF_GDVCF = LR_DVCFILTER->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

  append LF_GDVCF to ME->T_GDVCF.

endmethod.
method ADD_MSG_BY_CKX.

  data:          LF_GUID         type /VCXI/CKX_GUID.
  field-symbols: <S_MSG_MAPPING> type /VCXI/CKX_S_OBJECT_INSTANCE.

  check IR_CX_CKX is bound.

  LF_GUID = ME->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = IR_CX_CKX ).

  if IR_OBJECT is bound.
    append initial line to ME->T_MSG_MAPPING assigning <S_MSG_MAPPING>.
    move IR_OBJECT to <S_MSG_MAPPING>-R_OBJECT.
    move LF_GUID   to <S_MSG_MAPPING>-GUID.
  endif.

endmethod.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->R_DVCCOND->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

*** Bind UI Framework
  call function 'ZVCXI_XCDCU_UIFW_BIND'
    exporting
      IR_UIFW = ME
    importing
      RS_DYNP = ME->S_DYNP.

*** Create Message
  create object ME->R_MSG
    exporting
      IR_CALLBACK = ME.

*** Get DVC Condition Customizing
  ME->R_DVCCOND = ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

*** Trigger Load of all Condition Definitions and Condition Records
  ME->R_DVCCOND->GET_CONDDEF( ).

  set handler ME->HANDLE_OBJECT_CHANGED for all instances.
  set handler ME->HANDLE_OBJECT_CREATED for all instances.

endmethod.
method DELETE_DVCFILTER.

  delete ME->T_GDVCF where TABLE_LINE = IF_GDVCF.

  ME->R_TREE->REQUEST_REFRESH( ).

endmethod.
method DO_PBO.

  data: LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      ME->INIT_TREE( ).

      ME->SET_PFSTATUS( ).
      ME->SET_TITLE( ).

***   Refresh Scroll Position on first Call
      if ME->F_DUI_FIRST_CALL eq ABAP_TRUE.
        call function 'SCREEN_INIT'.
        move ABAP_FALSE to ME->F_DUI_FIRST_CALL.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

  ME->R_MSG->DISPLAY_MSG( ).
  ME->R_MSG->INIT_MSG( ).

endmethod.
method DO_USER_COMMAND .

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_DUI is bound.
        ME->R_REGISTERED_DUI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

      case CF_UCOMM.
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_BACK.
          ME->HANDLE_UC_BACK( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_EXIT.
          ME->HANDLE_UC_EXIT( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CANCEL.
          ME->HANDLE_UC_CANCEL( ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_SAVE.
          ME->HANDLE_UC_SAVE( ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_TOGGLE.
          ME->HANDLE_UC_TOGGLE( ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CHECK_S.
          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_SINGLE ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CHECK_L.
          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_LOCKED ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CHECK_A.
          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_ALL ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CSPREV.
          ME->HANDLE_UC_CSPREV( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CSNEXT.
          ME->HANDLE_UC_CSNEXT( ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_FOCUS.
          ME->HANDLE_UC_FOCUS( ).

        when ZCL_VCXI_XCDCU_UIFW=>C_UC_ADD_CONDDEF.
          ME->HANDLE_UC_ADD_CONDDEF( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_ADD_CONDREC.
          ME->HANDLE_UC_ADD_CONDREC( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_ADD_CONDREC_BY_DEF.
          break point. "ToBeRemoved
          ME->HANDLE_UC_ADD_CONDREC_BY_DEF( ).


        when ZCL_VCXI_XCDCU_UIFW=>C_UC_CONDREC_TR.
          ME->HANDLE_UC_CONDREC_TR( ).
        when ZCL_VCXI_XCDCU_UIFW=>C_UC_EXTRACT.
          ME->HANDLE_UC_EXTRACT( ).


        when ZCL_VCXI_XCDCU_UIFW=>C_UC_FILTER.
          ME->HANDLE_UC_FILTER( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

  ME->R_MSG->DISPLAY_MSG( ).
  ME->R_MSG->INIT_MSG( ).

  clear CF_UCOMM.

endmethod.
method GET_DUI_INFO.

  if ME->R_REGISTERED_DUI is bound.
    move ME->R_REGISTERED_DUI->S_DYNP to RS_DYNP.
  else.
    move ME->S_DYNP-REPID             to RS_DYNP-REPID.
    move '9999'                       to RS_DYNP-DYNNR.
  endif.

endmethod.
method HANDLE_DUI_REFRESH_REQ.

*** Refresh the Dynpro if requested
  if ME->F_DUI_REFRESH_REQUESTED eq ABAP_TRUE.
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'REFRESH' ).
    move ABAP_FALSE to ME->F_DUI_REFRESH_REQUESTED.
  endif.

endmethod.
method HANDLE_OBJECT_CHANGED.

  data:  LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SENDER ?to LR_OBJECT.
      check LR_OBJECT is bound.

      if ME->R_DVCCOND->IS_OBJECT_DELETED( IR_OBJECT = LR_OBJECT ) eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***     Close Detail Screen if needed and open Previous
        if ME->R_REGISTERED_DUI is bound and
           ME->R_REGISTERED_DUI->R_OBJECT eq LR_OBJECT.
***       Free current Detail Screen
          ME->R_REGISTERED_DUI->DO_FREE( ).
***       Open Previous
          ME->HANDLE_UC_CSPREV( ).
        endif.

***--------------------------------------------------------------------------------------
***     Remove from Call Stack
        delete ME->T_CSPREV where TABLE_LINE eq LR_OBJECT.
        delete ME->T_CSNEXT where TABLE_LINE eq LR_OBJECT.

        delete adjacent duplicates from ME->T_CSPREV.
        delete adjacent duplicates from ME->T_CSNEXT.
      endif.

***   Request Tree Refresh of the Object
      if LR_OBJECT->F_TOOBJ eq ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF or
         LR_OBJECT->F_TOOBJ eq ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        ME->R_TREE->REQUEST_REFRESH( IR_OBJECT = LR_OBJECT ).
      elseif LR_OBJECT->F_TOOBJ eq ZCL_VCXI_XCDC_DVCFILTER=>C_TOOBJ_DVCFILTER.
        ME->R_TREE->REQUEST_REFRESH( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_OBJECT.
  endtry.

endmethod.
method HANDLE_OBJECT_CREATED.

  data:  LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT,
         LR_CONDREC type ref to  ZCL_VCXI_XCDC_CONDREC,
         LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      move SENDER ?to LR_OBJECT.
      check LR_OBJECT is bound.

      if ME->R_DVCCOND->IS_OBJECT_DELETED( IR_OBJECT = LR_OBJECT ) eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***     Close Detail Screen if needed and open Previous
        if ME->R_REGISTERED_DUI is bound and
           ME->R_REGISTERED_DUI->R_OBJECT eq LR_OBJECT.
***       Free current Detail Screen
          ME->R_REGISTERED_DUI->DO_FREE( ).
***       Open Previous
          ME->HANDLE_UC_CSPREV( ).
        endif.

***--------------------------------------------------------------------------------------
***     Remove from Call Stack
        delete ME->T_CSPREV where TABLE_LINE eq LR_OBJECT.
        delete ME->T_CSNEXT where TABLE_LINE eq LR_OBJECT.

        delete adjacent duplicates from ME->T_CSPREV.
        delete adjacent duplicates from ME->T_CSNEXT.
      endif.

***   Display new Detail Screen
      ME->OPEN_NEW_DUI( IR_OBJECT = LR_OBJECT ).

***   Request Tree Refresh of the Object
      if LR_OBJECT->F_TOOBJ eq ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF or
         LR_OBJECT->F_TOOBJ eq ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
        ME->R_TREE->REQUEST_REFRESH( IR_OBJECT = LR_OBJECT ).

***     Check that new Object is a Condition Record.
        try.
            move LR_OBJECT ?to LR_CONDREC.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_CONDREC.
        endtry.
***     Request Tree Refrehs of assigned Condition Definition.
        if LR_CONDREC is bound and
           LR_CONDREC->R_CONDDEF is bound.
          ME->R_TREE->REQUEST_REFRESH( IR_OBJECT = LR_CONDREC->R_CONDDEF ).
        endif.

      else.
        ME->R_TREE->REQUEST_REFRESH( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->ADD_MSG_BY_CKX( IR_CX_CKX = LR_CX_CKX ).
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_OBJECT.
  endtry.

endmethod.
method HANDLE_UC_ADD_CONDDEF.

  data:  LR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF.

*** Create new Condition Definition
  LR_CONDDEF = ZCL_VCXI_XCDC_CONDDEF=>CREATE( ).

*** Display new Condition Definition Detail Screen
  ME->OPEN_NEW_DUI( IR_OBJECT = LR_CONDDEF ).

endmethod.
method HANDLE_UC_ADD_CONDREC.

  data:          LF_CANCELED         type          ABAP_BOOL.
  data:          LR_OBJECT           type ref to   /VCXI/IF_CKX_OBJECT,
                 LR_CONDREC          type ref to   ZCL_VCXI_XCDC_CONDREC,
                 LR_CONDDEF          type ref to   ZCL_VCXI_XCDC_CONDDEF.
  data:          LT_OBJECT           type          /VCXI/CKX_TT_OBJECT.

*** Get all Condition Definitions
  LT_OBJECT = ME->R_DVCCOND->GET_CONDDEF( IF_DELETED = ABAP_FALSE ).

*** If there is no Condition Definition -> no Create Possible
  if lines( LT_OBJECT ) lt 1.
*** No Condition Definitions Found to create Condition Record.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '250' ).

    ME->R_MSG->DISPLAY_MSG( ).
    ME->R_MSG->INIT_MSG( ).
    exit.
  endif.

  call function '/VCXI/CKX_OBJECT_POPUP_START'
    exporting
      IT_OBJECT_ALL = LT_OBJECT
    importing
      ET_OBJECT_SEL = LT_OBJECT
      EF_CANCELED   = LF_CANCELED.

  if LF_CANCELED eq ABAP_TRUE.
    exit.
  endif.

  read table LT_OBJECT into LR_OBJECT index 1.
  check LR_OBJECT is bound.

  try.
      move LR_OBJECT ?to LR_CONDDEF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_OBJECT, LR_CONDDEF.
  endtry.

  check LR_CONDDEF is bound.

*** Create new Condition Definition
  LR_CONDREC = ZCL_VCXI_XCDC_CONDREC=>CREATE_BY_CONDDEF( IR_CONDDEF = LR_CONDDEF ).

*** Request Tree Refresh of the Object
  ME->R_TREE->REQUEST_REFRESH( IR_OBJECT = LR_CONDREC ).

*** Display new Condition Definition Detail Screen
  ME->OPEN_NEW_DUI( IR_OBJECT = LR_CONDREC ).

endmethod.
method HANDLE_UC_ADD_CONDREC_BY_DEF.

*** ToBeRemoved???
  break point.

  data:          LF_CANCELED         type          ABAP_BOOL.
  data:          LT_OBJECT           type          /VCXI/CKX_TT_OBJECT.
  data:          LR_OBJECT           type ref to   /VCXI/IF_CKX_OBJECT,
                 LR_CONDREC          type ref to   ZCL_VCXI_XCDC_CONDREC,
                 LR_CONDDEF          type ref to   ZCL_VCXI_XCDC_CONDDEF.

*** Get all Condition Definitions
  LT_OBJECT = ME->R_DVCCOND->GET_CONDDEF( IF_DELETED = ABAP_FALSE ).

*** If there is no Condition Definition -> no Create Possible
  if lines( LT_OBJECT ) lt 1.
*** No Condition Definitions Found to create Condition Record.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDC'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '250' ).

    ME->R_MSG->DISPLAY_MSG( ).
    ME->R_MSG->INIT_MSG( ).
    exit.
  endif.

  call function '/VCXI/CKX_OBJECT_POPUP_START'
    exporting
      IT_OBJECT_ALL = LT_OBJECT
    importing
      ET_OBJECT_SEL = LT_OBJECT
      EF_CANCELED   = LF_CANCELED.

  if LF_CANCELED eq ABAP_TRUE.
    exit.
  endif.

  read table LT_OBJECT into LR_OBJECT index 1.
  check LR_OBJECT is bound.

  try.
      move LR_OBJECT ?to LR_CONDDEF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_OBJECT, LR_CONDDEF.
  endtry.

  check LR_CONDDEF is bound.

*** Create new Condition Definition
  LR_CONDREC = ZCL_VCXI_XCDC_CONDREC=>CREATE_BY_CONDDEF( IR_CONDDEF = LR_CONDDEF ).

*** Request Tree Refresh of the Object
  ME->R_TREE->REQUEST_REFRESH( IR_OBJECT = LR_CONDREC ).

*** Display new Condition Definition Detail Screen
  ME->OPEN_NEW_DUI( IR_OBJECT = LR_CONDREC ).

endmethod.
method HANDLE_UC_BACK .

*** Use Callstack to go back or leave
  read table ME->T_CSPREV index 2 transporting no fields.
  if SY-SUBRC eq 0.
    ME->HANDLE_UC_CSPREV( ).
  else.
*** Check for changes and ask user to save them
    if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
      leave to screen 0.
    endif.
  endif.

endmethod.
method HANDLE_UC_CALL_SE01 .

  call function 'ABAP4_CALL_TRANSACTION'
    exporting
      TCODE                   = 'SE01'
      SKIP_SCREEN             = 'X'
    exceptions
      CALL_TRANSACTION_DENIED = 1
      TCODE_INVALID           = 2
      others                  = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method HANDLE_UC_CANCEL .

*** Check for changes and ask user to save them
  if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
    leave to screen 0.
  endif.

endmethod.
method HANDLE_UC_CHECK.

  data:  LT_MSG_MAPPING type /VCXI/CKX_TT_OBJECT_INSTANCE.

  case IF_CHECK_RANGE.
    when C_CHECK_RANGE_SINGLE.       " Single
***   Handled by UI
    when C_CHECK_RANGE_ALL or        " All
         C_CHECK_RANGE_LOCKED.       " Locked
      LT_MSG_MAPPING = ME->R_DVCCOND->DO_CHECK( IF_CHECK_RANGE = IF_CHECK_RANGE
                                                IR_MSG         = ME->R_MSG ).

      append lines of LT_MSG_MAPPING to ME->T_MSG_MAPPING.
    when others.
      exit.
  endcase.

*** Request Screen Refresh
  ME->REQUEST_DUI_REFRESH( ).

endmethod.
method HANDLE_UC_CONDREC_TR.

*** Start Transport Overview of Condition Records
  submit ZVCXI_XCDC_CONDREC_TR_START
     via selection-screen
     and return.

endmethod.
method HANDLE_UC_CSNEXT.

  data:  LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

*** Delete current Object
  delete ME->T_CSNEXT index 1.

*** Read next Object from Callstack
  read table ME->T_CSNEXT into LR_OBJECT index 1.
  if SY-SUBRC eq 0.
*** Set current object to Callstack PREV
    insert LR_OBJECT into ME->T_CSPREV index 1.
*** Open Detail Screent
    ZCL_VCXI_XCDCU_DUI=>FACTORY( IR_UIFW   = ME
                                 IR_OBJECT = LR_OBJECT ).
  endif.

endmethod.
method HANDLE_UC_CSPREV.

  data:  LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

*** Delete current Object
  delete ME->T_CSPREV index 1.

*** Read next Object from Callstack
  read table ME->T_CSPREV into LR_OBJECT index 1.
  if SY-SUBRC eq 0.
*** Set current object to Callstack NEXT
    insert LR_OBJECT into ME->T_CSNEXT index 1.
*** Open Detail Screent
    ZCL_VCXI_XCDCU_DUI=>FACTORY( IR_UIFW   = ME
                                 IR_OBJECT = LR_OBJECT ).
  endif.

endmethod.
method HANDLE_UC_EXIT .

*** Check for changes and ask user to save them
  if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
    leave to screen 0.
  endif.

endmethod.
method HANDLE_UC_EXTRACT.

*** Extract Condition Definitions and Records as List Output
  submit ZVCXI_XCDC_EXTRACT
     via selection-screen
     and return.

endmethod.
method HANDLE_UC_FILTER .

*** Open PopUp
  ZCL_VCXI_XCDCU_POPUP_OVDF=>CALL_POPUP( IR_UIFW = ME ).

endmethod.
method HANDLE_UC_FOCUS.
endmethod.
method HANDLE_UC_SAVE.

*** Do Check of locked entries
  ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_LOCKED ).

*** Save
  ME->R_DVCCOND->DO_SAVE( ).

endmethod.
method HANDLE_UC_SETTING.
endmethod.
method HANDLE_UC_TOGGLE.

  data:  LT_OBJECT         type        /VCXI/CKX_TT_OBJECT.
  data:  LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
         LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

***------------------------------------------------------------------
*** Only works if object is open
  check ME->R_REGISTERED_DUI is bound and
        ME->R_REGISTERED_DUI->R_OBJECT is bound.
  move ME->R_REGISTERED_DUI->R_OBJECT ?to LR_OBJECT_LOCKING.

  if LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.
*** Check for changes and ask user to save them
    check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

    LT_OBJECT = ME->R_DVCCOND->UNLOCK_ALL( ).

*** Process Toggled Objects as Changed
    loop at LT_OBJECT into LR_OBJECT.
      ME->HANDLE_OBJECT_CHANGED( SENDER = LR_OBJECT ).
    endloop.
  else.
    LR_OBJECT_LOCKING->DO_LOCK( ).
  endif.

*** Request Screen Refresh
  ME->REQUEST_DUI_REFRESH( ).

endmethod.
method INIT_TREE.

  if ME->R_TREE is not bound.
    create object ME->R_TREE
                  exporting
                    IR_UIFW = ME
                    IS_DYNP = ME->S_DYNP.

  endif.

*** Handle the Refresh Request
  ME->R_TREE->HANDLE_REFRESH_REQUEST( IF_INITIAL_REFRESH = ABAP_TRUE ).

endmethod.
method OPEN_NEW_DUI.

  data:  LR_OBJECT_PREV type ref to /VCXI/IF_CKX_OBJECT,
         LR_DUI         type ref to ZCL_VCXI_XCDCU_DUI,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  check IR_OBJECT is bound and
        ME->R_DVCCOND->IS_OBJECT_DELETED( IR_OBJECT = IR_OBJECT ) ne ABAP_TRUE.

***---------------------------------------------------------------------
*** Open Detail Screen
  try.
      LR_DUI = ZCL_VCXI_XCDCU_DUI=>FACTORY( IR_UIFW   = ME
                                            IR_OBJECT = IR_OBJECT ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  check LR_DUI is bound.

***---------------------------------------------------------------------
*** Maintain Callstack
  read table ME->T_CSPREV into LR_OBJECT_PREV index 1.
  if SY-SUBRC ne 0 or
     LR_OBJECT_PREV ne IR_OBJECT.
    insert IR_OBJECT into ME->T_CSPREV index 1.
  endif.

  free ME->T_CSNEXT.
  insert IR_OBJECT into ME->T_CSNEXT index 1.

endmethod.
method REGISTER_DUI.

  do.
    if ME->R_REGISTERED_DUI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_DUI->DO_FREE( ).
  enddo.

  move IR_DUI to ME->R_REGISTERED_DUI.

*** Request a new Detail Screen
  ME->REQUEST_DUI_REFRESH( ).
  move ABAP_TRUE to ME->F_DUI_FIRST_CALL.

endmethod.
method REQUEST_DUI_REFRESH.

  move ABAP_TRUE to ME->F_DUI_REFRESH_REQUESTED.

endmethod.
method REQUEST_FILTER.

  data:          LF_GDVCF             type        ZVCXI_XCD_GDVCF,
                 LF_GUID              type        /VCXI/CKX_GUID.
  data:          LT_OBJECT_VISIBLE    type        /VCXI/CKX_TT_OBJECT.
  data:          LR_DVCFILTER         type ref to ZCL_VCXI_XCDC_DVCFILTER,
                 LR_OBJECT            type ref to /VCXI/IF_CKX_OBJECT.

  if ME->T_GDVCF is initial.
    move IT_OBJECT to RT_OBJECT_VISIBLE.
    exit.
  endif.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Values
  loop at ME->T_GDVCF into LF_GDVCF.

*** Get instance of DVC Filter
    try.
        move LF_GDVCF to LF_GUID.
        LR_DVCFILTER ?= ZCL_VCXI_XCDC_DVCFILTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_DVCFILTER.
    endtry.
    check LR_DVCFILTER is bound.

*** Do Filter
    LT_OBJECT_VISIBLE = LR_DVCFILTER->DO_FILTER( IT_OBJECT = IT_OBJECT ).

    loop at LT_OBJECT_VISIBLE into LR_OBJECT.
      collect LR_OBJECT into RT_OBJECT_VISIBLE.
    endloop.
  endloop.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_PFSTATUS.

  data:  LT_EXCLUDE type standard table of SYUCOMM.

***----------------------------------------------------------------------------
*** Exclude SAVE and ADD_* - When not Locked
  if ME->R_DVCCOND->F_CHANGED ne ABAP_TRUE.
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_SAVE      to LT_EXCLUDE.
  endif.

*** Exclude CSPREV - When Callstack PREV not filled
  read table ME->T_CSPREV index 2 transporting no fields.
  if SY-SUBRC ne 0.
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_CSPREV to LT_EXCLUDE.
  endif.
*** Exclude CSNEXT - When Callstack NEXT not filled
  read table ME->T_CSNEXT index 2 transporting no fields.
  if SY-SUBRC ne 0.
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_CSNEXT to LT_EXCLUDE.
  endif.

*** If no Object, don't allow toggle
  if ME->R_REGISTERED_DUI           is not bound or
     ME->R_REGISTERED_DUI->R_OBJECT is not bound.
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_TOGGLE  to LT_EXCLUDE.
  endif.

*** If no Object, don't allow 'Check Current'
  if ME->R_REGISTERED_DUI           is not bound or
     ME->R_REGISTERED_DUI->R_OBJECT is not bound.
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_CHECK_S  to LT_EXCLUDE.
  endif.

*** If no Condition Record Object, don't allow Transport Request
  if ME->R_REGISTERED_DUI                    is not bound or
     ME->R_REGISTERED_DUI->R_OBJECT          is not bound or
     ME->R_REGISTERED_DUI->R_OBJECT->F_TOOBJ ne ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
    append ZCL_VCXI_XCDCU_DUI_CONDREC=>C_UC_REQ_TR  to LT_EXCLUDE.
  endif.

*** No Condition Definition creation in non-customizing clients
  if ME->R_DVCCOND->F_CCCORACTIV eq 2.  "Customizing in this client cannot be changed
    append ZCL_VCXI_XCDCU_UIFW=>C_UC_ADD_CONDDEF to LT_EXCLUDE.
  endif.

***----------------------------------------------------------------------------
*** Set PF-Status
  set pf-status '0100' of program ME->S_DYNP-REPID excluding LT_EXCLUDE.

endmethod.
method SET_TITLE.

  data:  LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

  if ME->R_REGISTERED_DUI is bound and
     ME->R_REGISTERED_DUI->R_OBJECT is bound.
    move ME->R_REGISTERED_DUI->R_OBJECT ?to LR_OBJECT_LOCKING.

    if LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.
      set titlebar '0100_EDIT' of program ME->S_DYNP-REPID.
    else.
      set titlebar '0100_DISP' of program ME->S_DYNP-REPID.
    endif.
  else.
    set titlebar '0100' of program ME->S_DYNP-REPID.
  endif.

endmethod.
method START_UI.

  data:  LR_UIFW type ref to ZCL_VCXI_XCDCU_UIFW.

*** Create Instance of Framework
  create object LR_UIFW.

*** Call Screen
  call function 'ZVCXI_XCDCU_UIFW_START'.

endmethod.
method UNREGISTER_DUI.

  if IR_DUI eq ME->R_REGISTERED_DUI.
    clear ME->R_REGISTERED_DUI.

*** Request a new Detail Screen
    ME->REQUEST_DUI_REFRESH( ).
    move ABAP_TRUE to ME->F_DUI_FIRST_CALL.
  endif.

endmethod.
