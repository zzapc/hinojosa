
class ZCL_VCXI_XCIU_GRID_SVCEV definition
  public
  create public .

public section.

  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IR_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_ADD_SVCEV type UI_FUNC value 'ADD_SVCEV'. "#EC NOTEXT
  constants C_UC_DEL_SVCEV type UI_FUNC value 'DEL_SVCEV'. "#EC NOTEXT
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC .
  data T_SVCEV_GRID type ZVCXI_XCIU_TT_SVCEV_GRID .
  constants C_UC_MOVE_UP type UI_FUNC value 'MOVE_UP'. "#EC NOTEXT
  constants C_UC_MOVE_DOWN type UI_FUNC value 'MOVE_DOWN'. "#EC NOTEXT

  methods HANDLE_UC_DEL_SVCEV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD_SVCEV
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_SVCEV_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MOVE_DOWN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MOVE_UP
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCIU_GRID_SVCEV definition
class ZCL_VCXI_XCIU_GRID_SVCEV implementation.
method CONSTRUCTOR.

  move IR_UI_IDAT_SVC   to ME->R_UI_IDAT_SVC.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Initialize Container
  ME->INIT_CONTAINER( ).

*** Initialize Grid
  ME->INIT_GRID( ).

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.
*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>   type LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCIU_S_SVCEV_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at RT_FCAT assigning <S_FCAT>.
*    case <S_FCAT>-FIELDNAME.
*      when 'IEVNS'.
*        move ABAP_TRUE to <S_FCAT>-NO_OUT.
*    endcase.
  endloop.

endmethod.
method GET_SELECTED_ROWS.

  data:          LS_CELL              type        LVC_S_CELL,
                 LS_ROW               type        LVC_S_ROW.
  data:          LT_CELL              type        LVC_T_CELL,
                 LT_ROW               type        LVC_T_ROW.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  if lines( LT_CELL ) gt 0.

    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to ET_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
        move LS_CELL-ROW_ID to ES_LAST_ROW.
      endif.
    endloop.

  endif.

*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if lines( LT_ROW ) gt 0.

    append lines of LT_ROW to ET_ROW.

    loop at LT_ROW into LS_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
        move LS_ROW to ES_LAST_ROW.
      endif.
    endloop.

  endif.

  sort ET_ROW by INDEX.
  delete adjacent duplicates from ET_ROW.

endmethod.
method HANDLE_TOOLBAR.

  data:          LF_DISABLED     type        ABAP_BOOL.
  data:          LS_SVCEL        type        ZVCXI_XCI_S_SVCEL.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
***------------------------------------------------------------------------------------------------
***   Get current Status
      LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
      check LS_SVCEL-ISELF is not initial.

***   Get Lock Status
      if ME->R_UI_IDAT_SVC->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        move ABAP_FALSE to LF_DISABLED.
      else.
        move ABAP_TRUE  to LF_DISABLED.
      endif.

***------------------------------------------------------------------------------------------------
***   Add Button
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD_SVCEV           to <S_TOOLBAR>-FUNCTION.
      move ICON_INSERT_ROW          to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

***   Delete
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL_SVCEV           to <S_TOOLBAR>-FUNCTION.
      move ICON_DELETE_ROW          to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

***   Separator
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move 3                        to <S_TOOLBAR>-BUTN_TYPE.

***------------------------------------------------------------------------------------------------
***   Move Buttons
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_MOVE_UP             to <S_TOOLBAR>-FUNCTION.
      move ICON_PAGE_UP             to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_MOVE_DOWN           to <S_TOOLBAR>-FUNCTION.
      move ICON_PAGE_DOWN           to <S_TOOLBAR>-ICON.
      move LF_DISABLED              to <S_TOOLBAR>-DISABLED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_SVCEV.

  data:          LF_CANCELED    type        ABAP_BOOL,
                 LF_IEVNS       type        /VCXI/VKSC_IEVNS.
  data:          LS_SVCEL       type        ZVCXI_XCI_S_SVCEL,
                 LS_LAST_ROW    type        LVC_S_ROW,
                 LS_EVNT        type        /VCXI/VKSC_S_EVNT.
  field-symbols: <S_SVCEV>      type        ZVCXI_XCI_S_SVCEV.

***----------------------------------------------------------------------------
*** Get current Status
  LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

*** Get selected row
  ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_LAST_ROW ).

***----------------------------------------------------------------------------
*** Popup for Events
  call function '/VCXI/VKSCU_EVNT_ADD'
    exporting
      IF_TEVNT       = 'O'
      IF_TEVNT_FIXED = ABAP_TRUE
    importing
      EF_CANCELED    = LF_CANCELED
      ES_EVNT        = LS_EVNT.
  check LF_CANCELED eq ABAP_FALSE.

*** insert Event
  if LS_LAST_ROW-INDEX is not initial.
    insert initial line into LS_SVCEL-T_SVCEV assigning <S_SVCEV> index LS_LAST_ROW-INDEX.
  else.
    append initial line   to LS_SVCEL-T_SVCEV assigning <S_SVCEV>.
  endif.
  move LS_EVNT-IEVNT to <S_SVCEV>-IEVNT.

*** Reorg Event Sequence
  loop at LS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    add 10 to LF_IEVNS.
    move LF_IEVNS to <S_SVCEV>-IEVNS.
  endloop.

***----------------------------------------------------------------------------
*** Update Element
  ME->R_UI_IDAT_SVC->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DEL_SVCEV.

  data:          LF_IEVNS       type        /VCXI/VKSC_IEVNS.
  data:          LS_SVCEL       type        ZVCXI_XCI_S_SVCEL,
                 LS_ROW         type        LVC_S_ROW.
  data:          LT_ROW         type        LVC_T_ROW.
  field-symbols: <S_SVCEV>      type        ZVCXI_XCI_S_SVCEV.

***----------------------------------------------------------------------------
*** Get current Status
  LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

*** Get selected row
  ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  check LT_ROW is not initial.

***----------------------------------------------------------------------------
*** Delete bottom up
  sort LT_ROW by INDEX descending.
  loop at LT_ROW into LS_ROW.
    delete LS_SVCEL-T_SVCEV index LS_ROW-INDEX.
  endloop.

*** Reorg Event Sequence
  loop at LS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    add 10 to LF_IEVNS.
    move LF_IEVNS to <S_SVCEV>-IEVNS.
  endloop.

***----------------------------------------------------------------------------
*** Update Element
  ME->R_UI_IDAT_SVC->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_MOVE_DOWN.

  data:          LF_IEVNS       type        /VCXI/VKSC_IEVNS.
  data:          LS_SVCEL       type        ZVCXI_XCI_S_SVCEL,
                 LS_ROW         type        LVC_S_ROW,
                 LS_SVCEV       type        ZVCXI_XCI_S_SVCEV.
  data:          LT_ROW         type        LVC_T_ROW.
  field-symbols: <S_SVCEV>      type        ZVCXI_XCI_S_SVCEV.

***----------------------------------------------------------------------------
*** Get current Status
  LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

*** Get selected row
  ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  check LT_ROW is not initial.

***----------------------------------------------------------------------------
*** Move Down - Bottom up
  sort LT_ROW by INDEX descending.
  loop at LT_ROW into LS_ROW.
    read table LS_SVCEL-T_SVCEV into LS_SVCEV
                                index LS_ROW-INDEX.
    check SY-SUBRC eq 0.
    delete LS_SVCEL-T_SVCEV index LS_ROW-INDEX.
    LS_ROW-INDEX = LS_ROW-INDEX + 1.
    insert LS_SVCEV into LS_SVCEL-T_SVCEV index LS_ROW-INDEX.
  endloop.

*** Reorg Event Sequence
  loop at LS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    add 10 to LF_IEVNS.
    move LF_IEVNS to <S_SVCEV>-IEVNS.
  endloop.

***----------------------------------------------------------------------------
*** Update Element
  ME->R_UI_IDAT_SVC->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_MOVE_UP.

  data:          LF_IEVNS       type        /VCXI/VKSC_IEVNS.
  data:          LS_SVCEL       type        ZVCXI_XCI_S_SVCEL,
                 LS_ROW         type        LVC_S_ROW,
                 LS_SVCEV       type        ZVCXI_XCI_S_SVCEV.
  data:          LT_ROW         type        LVC_T_ROW.
  field-symbols: <S_SVCEV>      type        ZVCXI_XCI_S_SVCEV.

***----------------------------------------------------------------------------
*** Get current Status
  LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

*** Get selected row
  ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  check LT_ROW is not initial.

***----------------------------------------------------------------------------
*** Move Up - Top down
  sort LT_ROW by INDEX ascending.
  loop at LT_ROW into LS_ROW where INDEX gt 1.
    read table LS_SVCEL-T_SVCEV into LS_SVCEV
                                index LS_ROW-INDEX.
    check SY-SUBRC eq 0.
    delete LS_SVCEL-T_SVCEV index LS_ROW-INDEX.
    LS_ROW-INDEX = LS_ROW-INDEX - 1.
    insert LS_SVCEV into LS_SVCEL-T_SVCEV index LS_ROW-INDEX.
  endloop.

*** Reorg Event Sequence
  loop at LS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    add 10 to LF_IEVNS.
    move LF_IEVNS to <S_SVCEV>-IEVNS.
  endloop.

***----------------------------------------------------------------------------
*** Update Element
  ME->R_UI_IDAT_SVC->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

*** Request refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      case E_UCOMM.
        when C_UC_ADD_SVCEV.
          ME->HANDLE_UC_ADD_SVCEV( ).
        when C_UC_DEL_SVCEV.
          ME->HANDLE_UC_DEL_SVCEV( ).

        when C_UC_MOVE_UP.
          ME->HANDLE_UC_MOVE_UP( ).
        when C_UC_MOVE_DOWN.
          ME->HANDLE_UC_MOVE_DOWN( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0100CC_SVCEV'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

  create object ME->R_GRID
    exporting
      I_PARENT          = ME->R_CONTAINER
      I_APPL_EVENTS     = ABAP_TRUE
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Enter as Event
  ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Handler for Toolbar
  set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
  set handler ME->HANDLE_UCOMM               for ME->R_GRID.

endmethod.
method INIT_SVCEV_GRID.

  data:          LS_SVCEL            type          ZVCXI_XCI_S_SVCEL,
                 LS_SVCEV            type          ZVCXI_XCI_S_SVCEV.
  field-symbols: <S_SVCEV_GRID>      type          ZVCXI_XCIU_S_SVCEV_GRID.


  free: ME->T_SVCEV_GRID.

*** Get current Element
  LS_SVCEL = ME->R_UI_IDAT_SVC->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

*** Fill Table
  loop at LS_SVCEL-T_SVCEV into LS_SVCEV.
    append initial line to ME->T_SVCEV_GRID assigning <S_SVCEV_GRID>.
    move-corresponding LS_SVCEV to <S_SVCEV_GRID>.
  endloop.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type        LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS,
                 LT_FCAT              type        LVC_T_FCAT.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
*** Get Grid Data
  ME->INIT_SVCEV_GRID( ).

***--------------------------------------------------------------------------------------
*** Field Catalog
  move ME->GET_FIELDCAT( )                to LT_FCAT.

*** Toolbar Exclusion
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL  to LT_TOOLBAR_EXCLUDING.

*** Layout
  move 'X'       to LS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'  to LS_LAYOUT-STYLEFNAME.

***--------------------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = ME->T_SVCEV_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
