
class ZCL_VCXI_P0SS_PR_SCSTR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_P0_SCSTR type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SCSTR'. "#EC NOTEXT
  constants C_PARID_CSCOR type /VCXI/VKS_PARID value 'ZVCXI_P0_CSCOR'. "#EC NOTEXT
  constants C_PARID_DIVDI type /VCXI/VKS_PARID value 'ZVCXI_P0_DIVDI'. "#EC NOTEXT
  constants C_PARID_SCSOP type /VCXI/VKS_PARID value 'ZVCXI_P0_SCSOP'. "#EC NOTEXT
  constants C_PARID_SCSTR type /VCXI/VKS_PARID value 'ZVCXI_P0_SCSTR'. "#EC NOTEXT
  constants C_PARID_SHTDI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTDI'. "#EC NOTEXT
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE'. "#EC NOTEXT
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods DO_RECALC
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IF_SPLIT type ABAP_BOOL
      !IF_FNEST type ZVCXI_P0SS_FNEST
      !IF_NO_CALC type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_CSCOR
    returning
      value(RF_CSCOR) type ZVCXI_P0SS_CSCOR
    raising
      /VCXI/CX_CKX .
  methods GET_DIVDI
    returning
      value(RF_DIVDI) type ZVCXI_P0SS_DIVDI
    raising
      /VCXI/CX_CKX .
  methods GET_DIVDI_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SCSOP
    returning
      value(RF_SCSOP) type ZVCXI_P0S_SCSOP
    raising
      /VCXI/CX_CKX .
  methods GET_SCSOP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_SCSTR
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_SCSTR
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_SCSTR
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDI
    returning
      value(RF_SHTDI) type ZVCXI_P0SS_SHTDI
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDI_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_STATUS_ICON
    returning
      value(RF_ICON) type TV_IMAGE
    raising
      /VCXI/CX_CKX .
  methods SET_CSCOR
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SCSOP
    importing
      !IF_SCSOP type ZVCXI_P0S_SCSOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SCSTR
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEP_SCSTR
    exporting
      !EF_RETURN type I
      !ET_INDIC_I type ZVCXI_P0SS_TT_INDIC
      !ET_INDIC_V type ZVCXI_P0SS_TT_INDIC
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_O_CSCOR_CHANGED type /VCXI/VKSC_IEVNT value 'CSCOR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_SCSOP_CHANGED type /VCXI/VKSC_IEVNT value 'SCSOP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_SCSTR_CHANGED type /VCXI/VKSC_IEVNT value 'SCSTR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_SCSTR_RESET type /VCXI/VKSC_IEVNT value 'SCSTR_RESET'. "#EC NOTEXT
  constants C_IEVNT_O_SHTDI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTDI_CHANGED'. "#EC NOTEXT
  data R_BL_SCSOP type ref to ZCL_VCXI_P0SS_BL_SCSOP .
  data R_PR_SCSTR_MGR type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR .

  methods CHECK_SCORP
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCSTR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SUM_SCSTR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_INITIAL_SCSTR_VALUE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BL_SCSOP
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_SCSOP_AFTER_DIV
    returning
      value(RF_AFTER_DIV) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_DIVDI
    importing
      !IF_DIVDI type ZVCXI_P0SS_DIVDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SCSTR definition
class ZCL_VCXI_P0SS_PR_SCSTR implementation.
method CHECK_INITIAL_SCSTR_VALUE.

*** 1 - Score String contains initial Value.

  data: LF_UOM       type UNIT,
        LF_SCSTR     type ZVCXI_P0SS_SCSTR.
  data: LS_SHTLE     type ZVCXI_P0SS_S_SHTLE,
        LS_SHTWI     type ZVCXI_P0SS_S_SHTWI.

***------------------------------------------------------------------------------------------------
*** Get the right Unit Value.
  if ME->GET_SHTDI( ) eq 'A'.
    LS_SHTWI = ME->GET_SHTWI( ).
    move LS_SHTWI-SHTWI_UOM to LF_UOM.
  elseif ME->GET_SHTDI( ) eq 'B'.
    LS_SHTLE = ME->GET_SHTLE( ).
    move LS_SHTLE-SHTLE_UOM to LF_UOM.
  endif.

*** Get String
  LF_SCSTR = ME->GET_SCSTR( ).

*** Do Check - Score String contain initial value
  check ZCL_VCXI_P0SS_CUST_SCSTR=>GET_INITIAL_SCSTR_VALUE( IF_SCSTR = LF_SCSTR
                                                           IF_UOM   = LF_UOM ) eq ABAP_TRUE.

*** Score String contains initial Value.
  RF_RETURN = 1.


endmethod.
method CHECK_SCORP.
*** 0 = Score Positions are correct
*** 1 = Score Positions are not correct

  data: LF_SCSTR     type ZVCXI_P0SS_SCSTR.

*** Get String
  LF_SCSTR = ME->GET_SCSTR( ).

*** Do Check
  RF_RESULT = ZCL_VCXI_P0SS_CUST_SCSTR=>CHECK_SCSTR_SCORP( IF_SCSTR = LF_SCSTR
                                                           IF_SSTRC = ME->R_PR_SCSTR_MGR->F_SSTRC ).

endmethod.
method CHECK_SCSTR.

***  0 Score String is maintained.
***  1 Score String is not maintained.

  data: LF_SCSTR type ZVCXI_P0SS_SCSTR.

  LF_SCSTR = ME->GET_SCSTR( ).
  if LF_SCSTR is initial.
    RF_RESULT = 1.
    exit.
  endif.

endmethod.
method CHECK_SEP_SCSTR.

*** 0 - Score String containes only valid Separators.
*** 1 - Score String containes invalid Separators.

  data: LF_SCSTR      type ZVCXI_P0SS_SCSTR,
        LF_CSCOR      type ZVCXI_P0SS_CSCOR,
        LF_IGNORE_C   type ABAP_BOOL,
        LF_IGNORE_L   type ABAP_BOOL,
        LF_IGNORE_DIV type ABAP_BOOL,
        LF_NO_INDIC   type ABAP_BOOL.
  data: LT_INDIC      type ZVCXI_P0SS_TT_INDIC.

  check ME->R_PR_SCSTR_MGR is bound.

*** Get String
  LF_SCSTR = ME->GET_SCSTR( ).

*** Check Score Category
  LF_CSCOR = ME->GET_CSCOR( ).
  if LF_CSCOR eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS.
    LF_IGNORE_L = ABAP_TRUE.
  elseif LF_CSCOR eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
    LF_IGNORE_C = ABAP_TRUE.
  endif.

*** Check Division
  if ME->GET_DIVDI( ) eq ABAP_FALSE.
    LF_IGNORE_DIV = ABAP_TRUE.
  endif.

*** Get Valid Indicators
  LT_INDIC = ME->R_PR_SCSTR_MGR->GET_VALID_INDIC( IF_IGNORE_SCORE_C  = LF_IGNORE_C
                                                  IF_IGNORE_SCORE_L  = LF_IGNORE_L
                                                  IF_IGNORE_DIVISION = LF_IGNORE_DIV ).

*** Do Check
  ZCL_VCXI_P0SS_CUST_SCSTR=>CHECK_INDIC( exporting IF_SCSTR    = LF_SCSTR
                                                   IT_INDIC    = LT_INDIC
                                         importing ET_INDIC_V  = ET_INDIC_V
                                                   ET_INDIC_I  = ET_INDIC_I ).

*** no Invalid Separators are used
  if ET_INDIC_I is initial and
     ET_INDIC_V is not initial.
    move 0 to EF_RETURN.
  elseif ET_INDIC_I is not initial.
    move 1 to EF_RETURN.
  endif.

endmethod.
method CHECK_SUM_SCSTR.

*** 1 - Score String match Sheet Length.
*** 2 - Score String match Sheet Width.
*** 3 - Score String do not match Sheet Length.
*** 4 - Score String do not match Sheet Width.
*** 5 - Score String exceeds difference between Sales and Production trim.

  data: LF_UOM       type UNIT,
        LF_SCSTR     type ZVCXI_P0SS_SCSTR,
        LF_AFTER_DIV type ABAP_BOOL.
  data: LS_SCORP_SUM type ZVCXI_P0SS_S_SCORP,
        LS_SHTLE     type ZVCXI_P0SS_S_SHTLE,
        LS_SHTWI     type ZVCXI_P0SS_S_SHTWI,
        LS_TRIMS     type ZVCXI_P0SS_S_TRIMS,
        LS_TRIML     type ZVCXI_P0SS_S_TRIML.

***------------------------------------------------------------------------------------------------
*** Get the right Unit Value.
  if ME->GET_SHTDI( ) eq 'A'.
    LS_SHTWI = ME->GET_SHTWI( ).
    move LS_SHTWI-SHTWI_UOM to LF_UOM.
  elseif ME->GET_SHTDI( ) eq 'B'.
    LS_SHTLE = ME->GET_SHTLE( ).
    move LS_SHTLE-SHTLE_UOM to LF_UOM.
  endif.

*** Get String
  LF_SCSTR = ME->GET_SCSTR( ).

*** No check if no category is defined and the score string is initial
  if ME->GET_CSCOR( ) is initial and
     LF_SCSTR         is initial.
    clear RF_RETURN.
    exit.
  endif.

*** Do Check
  LS_SCORP_SUM = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_SUM_SCSTR( IF_SCSTR = LF_SCSTR
                                                          IF_UOM   = LF_UOM
                                                          IF_SSTRC = ME->R_PR_SCSTR_MGR->F_SSTRC ).

*** Check if Operation is after Divison
  LF_AFTER_DIV = ME->IS_SCSOP_AFTER_DIV( ).

***------------------------------------------------------------------------------------------------
*** Compare with the right Dimension Value.
  if LS_SHTLE-SHTLE     is not initial and
     LS_SHTLE-SHTLE_UOM is not initial.
    if LS_SHTLE-SHTLE     eq LS_SCORP_SUM-SCORP     and
       LS_SHTLE-SHTLE_UOM eq LS_SCORP_SUM-SCORP_UOM.
***   Score Sum is valid
      RF_RETURN = 1.
    else.
***   Score Sum is not valid
      RF_RETURN = 3.

***   Check Trim Difference
      ME->R_PR_SCSTR_MGR->GET_VALID_TRIM_DIFF( exporting IF_AFTER_DIV = LF_AFTER_DIV
                                               importing ES_TRIML     = LS_TRIML ).

      if LS_TRIML-TRIML_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                            IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                            IF_CALCV_2     = LS_TRIML-TRIML
                                                            IF_CALCV_UOM_2 = LS_TRIML-TRIML_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = LS_SHTLE-SHTLE_UOM
                                                  importing EF_CALCV       = LS_SHTLE-SHTLE
                                                            EF_CALCV_UOM   = LS_SHTLE-SHTLE_UOM ).
      endif.

      if LS_SHTLE-SHTLE     eq LS_SCORP_SUM-SCORP     and
         LS_SHTLE-SHTLE_UOM eq LS_SCORP_SUM-SCORP_UOM.
***      Do nothing
      else.
        RF_RETURN = 5.
      endif.

    endif.
  elseif LS_SHTWI-SHTWI     is not initial and
         LS_SHTWI-SHTWI_UOM is not initial.
    if LS_SHTWI-SHTWI     eq LS_SCORP_SUM-SCORP     and
       LS_SHTWI-SHTWI_UOM eq LS_SCORP_SUM-SCORP_UOM.
***   Score Sum is valid
      RF_RETURN = 2.
    else.
***   Score Sum is not valid
      RF_RETURN = 4.

***   Check Trim Difference
      ME->R_PR_SCSTR_MGR->GET_VALID_TRIM_DIFF( exporting IF_AFTER_DIV = LF_AFTER_DIV
                                               importing ES_TRIMS     = LS_TRIMS ).

      if LS_TRIMS-TRIMS_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
                                                            IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
                                                            IF_CALCV_2     = LS_TRIMS-TRIMS
                                                            IF_CALCV_UOM_2 = LS_TRIMS-TRIMS_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = LS_SHTWI-SHTWI_UOM
                                                  importing EF_CALCV       = LS_SHTWI-SHTWI
                                                            EF_CALCV_UOM   = LS_SHTWI-SHTWI_UOM ).
      endif.

      if LS_SHTWI-SHTWI     eq LS_SCORP_SUM-SCORP     and
         LS_SHTWI-SHTWI_UOM eq LS_SCORP_SUM-SCORP_UOM.
***      Do nothing
      else.
        RF_RETURN = 5.
      endif.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method DO_RECALC.

***------------------------------------------------------------------------------------------------
*** Check if BL Score Operation is bound
  check ME->R_BL_SCSOP is bound.
  ME->R_BL_SCSOP->DO_RECALC( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Set Values
  ME->SET_DIVDI( IF_DIVDI = ME->R_BL_SCSOP->F_DIVDI ).

  if IF_SPLIT               eq ABAP_FALSE and
     IF_NO_CALC             eq ABAP_FALSE and
     ME->GET_FOVRR_SCSTR( ) ne ABAP_TRUE.
    ME->SET_SCSTR( IF_SCSTR = ME->R_BL_SCSOP->F_SCSTR ).
  endif.
  ME->SET_SHTWI( IS_SHTWI = ME->R_BL_SCSOP->S_SHTWI ).
  ME->SET_SHTLE( IS_SHTLE = ME->R_BL_SCSOP->S_SHTLE ).

endmethod.
method GET_CSCOR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CSCOR ).
  move LS_PARAM-ATWRT to RF_CSCOR.

endmethod.
method GET_DIVDI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIVDI ).
  move LS_PARAM-ATWRT to RF_DIVDI.

endmethod.
method GET_DIVDI_DESCR.

  data: LF_DIVDI       type ZVCXI_P0SS_DIVDI.
  data: LS_FIXVALUE    type        DDFIXVALUE.
  data: LT_FIXVALUE    type        DDFIXVALUES.
  data: LR_TYPEDESCR   type ref to CL_ABAP_TYPEDESCR,
        LR_ELEMDESCR   type ref to CL_ABAP_ELEMDESCR.

  LF_DIVDI = ME->GET_DIVDI( ).

  LR_TYPEDESCR = CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( P_NAME = 'ZVCXI_P0SS_DIVDI' ).

  check LR_TYPEDESCR is bound.
  try.
      move LR_TYPEDESCR ?to LR_ELEMDESCR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_ELEMDESCR.
  endtry.

  check LR_ELEMDESCR is bound.
  LT_FIXVALUE = LR_ELEMDESCR->GET_DDIC_FIXED_VALUES( ).

  read table LT_FIXVALUE with key LOW = LF_DIVDI into LS_FIXVALUE.
  check SY-SUBRC = 0.
  move LS_FIXVALUE-DDTEXT to RF_DESCR.


endmethod.
method GET_FOVRR_SCSTR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCSTR ).

  case LS_PARAM-SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_ICONT.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_ICONT           type ref to ZIF_VCXI_P0SS_ICONT.

***--------------------------------------------------------------------------------------
*** Get all Spec Context References
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_ICONT=>C_IPRVT_P0_ICONT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ICONT.
        check LR_ICONT is bound.

        RF_ICONT = LR_ICONT->GET_ICONT( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_SCSOP.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_SCSOP.

endmethod.
method GET_SCSOP_DESCR.

  data: LF_SCSOP      type ZVCXI_P0S_SCSOP.

  LF_SCSOP = ME->GET_SCSOP( ).

*** Get Score Operation Cross Description
  RF_DESCR = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_SCSOP_DESCR( IF_SCSOP = LF_SCSOP ).

endmethod.
method GET_SCSTR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCSTR ).
  move LS_PARAM-STRNG to RF_SCSTR.

endmethod.
method GET_SHTDI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).
  move LS_PARAM-ATWRT to RF_SHTDI.

endmethod.
method GET_SHTDI_DESCR.

  data: LF_SHTDI       type ZVCXI_P0SS_SHTDI.
  data: LS_FIXVALUE    type        DDFIXVALUE.
  data: LT_FIXVALUE    type        DDFIXVALUES.
  data: LR_TYPEDESCR   type ref to CL_ABAP_TYPEDESCR,
        LR_ELEMDESCR   type ref to CL_ABAP_ELEMDESCR.

  LF_SHTDI = ME->GET_SHTDI( ).

  LR_TYPEDESCR = CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( P_NAME = 'ZVCXI_P0SS_SHTDI' ).

  check LR_TYPEDESCR is bound.
  try.
      move LR_TYPEDESCR ?to LR_ELEMDESCR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_ELEMDESCR.
  endtry.

  check LR_ELEMDESCR is bound.
  LT_FIXVALUE = LR_ELEMDESCR->GET_DDIC_FIXED_VALUES( ).

  read table LT_FIXVALUE with key LOW = LF_SHTDI into LS_FIXVALUE.
  check SY-SUBRC = 0.
  move LS_FIXVALUE-DDTEXT to RF_DESCR.


endmethod.
method GET_SHTLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
  move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
  move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.

endmethod.
method GET_SHTWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
  move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
  move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.

endmethod.
method GET_STATUS.

  data: LF_CSCOR    type ZVCXI_P0SS_CSCOR,
        LF_RETURN   type I.


  RF_ELMST = SUPER->GET_STATUS( ).

*** Get Score Category
  move ME->GET_CSCOR( ) to LF_CSCOR.

***------------------------------------------------------------------------------------------------
*** Check Score String
  if LF_CSCOR is not initial.
    if ME->CHECK_SCSTR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Check Score Positions in Score String
  if LF_CSCOR is not initial.
    if ME->CHECK_SCORP( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Check Sum of Score String
  case ME->CHECK_SUM_SCSTR( ).
    when 0.
    when 1 or 2.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when 3 or 4.
      if ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_PROD.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      elseif ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      endif.
    when 5.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------------------------------------
*** Check initial Value
  if LF_CSCOR is not initial.
    if ME->CHECK_INITIAL_SCSTR_VALUE( ) is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Check Separators of Score String
  ME->CHECK_SEP_SCSTR( importing EF_RETURN = LF_RETURN ).
  if LF_RETURN eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------------------------------------
*** Check right Score Category
  if ( LF_CSCOR         eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH   and
       ME->GET_SHTDI( ) eq 'A'                                      ) or
     ( LF_CSCOR         eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS    and
       ME->GET_SHTDI( ) eq 'B'                                      ) or
       LF_CSCOR         is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                 IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_ICON.

  try.
      case ME->R_GATE->GET_STATUS( ).
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ICON_GREEN_LIGHT    to RF_ICON.
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y.
          move ICON_YELLOW_LIGHT   to RF_ICON.
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          move ICON_RED_LIGHT      to RF_ICON.
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_E.
          move ICON_FAILURE        to RF_ICON.
      endcase.
    catch /VCXI/CX_CKX.
      move ICON_FAILURE        to RF_ICON.
  endtry.

endmethod.
method GET_STATUS_MSG.

  data: LF_CSCOR    type ZVCXI_P0SS_CSCOR,
        LF_MSGTY    type SYMSGTY,
        LF_INDIC    type CHAR30,
        LF_MSGV1    type SYMSGV,
        LF_RETURN   type I.
  data: LT_INDIC_I  type ZVCXI_P0SS_TT_INDIC,
        LT_INDIC_V  type ZVCXI_P0SS_TT_INDIC.


  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Get Score Category
  move ME->GET_CSCOR( ) to LF_CSCOR.

***------------------------------------------------------------------------------------------------
*** Check Score String is filled
  if LF_CSCOR is not initial.
    case ME->CHECK_SCSTR( ).
      when 0.
***     Score String is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '180' ).
      when 1.
***     Score String is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '181' ).
    endcase.
  endif.

***------------------------------------------------------------------------------------------------
*** Check Score Positions in Score String
  if LF_CSCOR is not initial.
    case ME->CHECK_SCORP( ).
      when 0.
***     Score Positions in Score String are valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '187' ).
      when 1.
***     Score Positions in Score String are not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '188' ).
    endcase.
  endif.

***------------------------------------------------------------------------------------------------
*** Score String will be checked against Production Sheet Size!
  IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                           IF_MSGTY = 'I'
                           IF_MSGNO = '179' ).

***------------------------------------------------------------------------------------------------
*** Check Sum of Score String fit to dimension value
  if ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_PROD.
    LF_MSGTY = 'E'.
  elseif ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
    LF_MSGTY = 'W'.
  endif.

  case ME->CHECK_SUM_SCSTR( ).
    when 0.
***   No Check
    when 1.
***   Score String match Sheet Length.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '182' ).
    when 2.
***   Score String match Sheet Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '183' ).
    when 3.
***   Score String do not match Sheet Length.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '184' ).
    when 4.
***   Score String do not match Sheet Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '185' ).

    when 5.
***   Score String exceeds difference between Sales and Production trim.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '186' ).

  endcase.

***------------------------------------------------------------------------------------------------
*** Check Separators of Score String
  ME->CHECK_SEP_SCSTR( importing ET_INDIC_V  = LT_INDIC_V
                                 ET_INDIC_I  = LT_INDIC_I
                                 EF_RETURN   = LF_RETURN ).
  if LT_INDIC_V is not initial.
    clear: LF_MSGV1.
    loop at LT_INDIC_V into LF_INDIC.
      if LF_MSGV1 is initial.
        move LF_INDIC to LF_MSGV1.
      else.
        concatenate LF_MSGV1 LF_INDIC into LF_MSGV1 separated by ', '.
      endif.
    endloop.

*** Following Separators are valid: &1
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '190'
                             IF_MSGV1 = LF_MSGV1 ).

  endif.

  if LT_INDIC_I is not initial.
    clear: LF_MSGV1.
    loop at LT_INDIC_I into LF_INDIC.
      if LF_MSGV1 is initial.
        move LF_INDIC to LF_MSGV1.
      else.
        concatenate LF_MSGV1 LF_INDIC into LF_MSGV1 separated by ', '.
      endif.
    endloop.

*** Following Separators are invalid: &1
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '191'
                             IF_MSGV1 = LF_MSGV1 ).

  endif.

***------------------------------------------------------------------------------------------------
*** Check initial Value
  if ME->CHECK_INITIAL_SCSTR_VALUE( ) is not initial.
*** Score String contains initial Value.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '194' ).
  endif.

***------------------------------------------------------------------------------------------------
*** Check right Score Category
  if ( LF_CSCOR         eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH   and
       ME->GET_SHTDI( ) eq 'A'                                      ) or
     ( LF_CSCOR         eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS    and
       ME->GET_SHTDI( ) eq 'B'                                      ) or
       LF_CSCOR         is initial.

*** Score Category is valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '195' ).

  else.
*** Score Category is not valid.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '196' ).
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( IT_PRVDR = IT_GATE_PROVIDER ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_PR_SCSTR_MGR.

  check ME->R_GATE->IS_INUSE( ) eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Initialize BL Score Operation if it come a own event
  read table IT_PRVDR with key TABLE_LINE = ME->R_GATE transporting no fields.
  if SY-SUBRC = 0.
    clear: ME->R_BL_SCSOP.

*** Init BL Score Operation
    ME->INIT_BL_SCSOP( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Score String Manager Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_IPRVT_P0_SCSTR_MGR
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
       LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SCSTR_MGR.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

  if ME->R_PR_SCSTR_MGR is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_IPRVT_P0_SCSTR_MGR
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method INIT_BL_SCSOP.

  data:  LF_SHTDI           type        ZVCXI_P0SS_SHTDI,
         LF_CSCOR           type        ZVCXI_P0SS_CSCOR.

***------------------------------------------------------------------------------------------------
*** Get needed Values
  LF_SHTDI = ME->GET_SHTDI( ).
  LF_CSCOR = ME->GET_CSCOR( ).

***------------------------------------------------------------------------------------------------
*** Get new Reference
  case ME->GET_SCSOP( ).
    when ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING.
      create object ME->R_BL_SCSOP
        type
          ZCL_VCXI_P0SS_BL_SCSOP_CUT
        exporting
          IF_SHTDI                   = LF_SHTDI
          IF_CSCOR                   = LF_CSCOR.

    when ZCL_VCXI_P0SS_BL_SCSOP_SLIT=>C_SCSOP_SLIT_SCORE.
      create object ME->R_BL_SCSOP
        type
          ZCL_VCXI_P0SS_BL_SCSOP_SLIT
        exporting
          IF_SHTDI                    = LF_SHTDI
          IF_CSCOR                    = LF_CSCOR.

    when ZCL_VCXI_P0SS_BL_SCSOP_ATTACH=>C_SCSOP_ATTACHMENT.
      create object ME->R_BL_SCSOP
        type
          ZCL_VCXI_P0SS_BL_SCSOP_ATTACH
        exporting
          IF_SHTDI                      = LF_SHTDI
          IF_CSCOR                      = LF_CSCOR.

    when ZCL_VCXI_P0SS_BL_SCSOP_SHTPR=>C_SCSOP_SHTPR.
      create object ME->R_BL_SCSOP
        type
          ZCL_VCXI_P0SS_BL_SCSOP_SHTPR
        exporting
          IF_SHTDI                     = LF_SHTDI
          IF_CSCOR                     = LF_CSCOR.

    when ZCL_VCXI_P0SS_BL_SCSOP_CHOP=>C_SCSOP_CHOP.
      create object ME->R_BL_SCSOP
        type
          ZCL_VCXI_P0SS_BL_SCSOP_CHOP
        exporting
          IF_SHTDI                    = LF_SHTDI
          IF_CSCOR                    = LF_CSCOR.
  endcase.

endmethod.
method IS_SCSOP_AFTER_DIV.

  if ME->GET_SCSOP( ) eq ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING       or
     ME->GET_SCSOP( ) eq ZCL_VCXI_P0SS_BL_SCSOP_ATTACH=>C_SCSOP_ATTACHMENT.
    move ABAP_TRUE to RF_AFTER_DIV.
  endif.

endmethod.
method SET_CSCOR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CSCOR ).

  move IF_CSCOR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CSCOR_CHANGED ).
  endif.

endmethod.
method SET_DIVDI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIVDI ).

  move IF_DIVDI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_FOVRR_SCSTR.

*** Set Setby for Score String
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_SCSTR( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_SCSTR( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_SCSOP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_LEOKY   type /VCXI/VKSR_S_LEOKY.

  move IF_SCSOP to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCSOP_CHANGED ).
  endif.



endmethod.
method SET_SCSTR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCSTR ).

  if IF_SCSTR is supplied.
    move IF_SCSTR to LS_PARAM-STRNG.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCSTR_CHANGED ).

    if IF_SETBY is initial.
***   Send Event -> Reset Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCSTR_RESET ).
    endif.
  endif.

endmethod.
method SET_SHTDI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).

  move IF_SHTDI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTDI_CHANGED ).
  endif.


endmethod.
method SET_SHTLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

  move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
  move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_SHTWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

  move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
  move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
