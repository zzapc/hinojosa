
class ZCL_VCXI_P3SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_PXSR_PR_RTESPV
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
protected section.

  methods GET_BL_PSTEP_CSTEP_ADSTP
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_ASMBL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_LABEL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP_CSTEP
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods GET_ICELM
    redefinition .
private section.
endclass. "ZCL_VCXI_P3SR_PR_RTESPV definition
class ZCL_VCXI_P3SR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_PXSR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CREATE_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Create Instance based on ID
    case IF_IPSTP.
***   Assembling
      when ZCL_VCXI_P3SR_BL_PSTEP_ASMBL=>C_IPSTP_ASMBL.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P3SR_BL_PSTEP_ASMBL
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Label Application
      when ZCL_VCXI_P3SR_BL_PSTEP_LABEL=>C_IPSTP_LABEL.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P3SR_BL_PSTEP_LABEL
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Additional Step
      when ZCL_VCXI_P3SR_BL_PSTEP_ADSTP=>C_IPSTP_ADSTP.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P3SR_BL_PSTEP_ADSTP
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    endcase.

***------------------------------------------------------------------------------------------------
    if RR_BL_PSTEP is bound.
***   Initialize Production Step
      RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
      RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
      RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = IT_PRVDR ).
    else.
***   Create via SUPER
      RR_BL_PSTEP = SUPER->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                            IT_PRVDR = IT_PRVDR
                                            IF_COMBW = IF_COMBW ).
    endif.

  endmethod.
  method GET_BL_PSTEP_CSTEP.

    SUPER->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = IR_GATE_CSTEP
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step Conversion Step - Assembling
    ME->GET_BL_PSTEP_CSTEP_ASMBL( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Label Application
    ME->GET_BL_PSTEP_CSTEP_LABEL( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Additional Step
    ME->GET_BL_PSTEP_CSTEP_ADSTP( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_ADSTP.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_ADSTP type ref to ZCL_VCXI_P3SS_PR_CSTEP_ADSTP,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Apply Additional Materials
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P3SS_PR_CSTEP_ADSTP.
    LR_PR_CSTEP_ADSTP = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_ADSTP is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Additional Material
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_ADMAT=>C_IPRVT_PX_MS_ADMAT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P3SR_BL_PSTEP_ADSTP=>C_IPSTP_ADSTP
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_ASMBL.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_ASMBL type ref to ZCL_VCXI_P3SS_PR_CSTEP_ASMBL,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Closing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P3SS_PR_CSTEP_ASMBL.
    LR_PR_CSTEP_ASMBL = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_ASMBL is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Joints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

*** Assembly Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XPART=>C_IPRVT_PX_XPART
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P3SR_BL_PSTEP_ASMBL=>C_IPSTP_ASMBL
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_LABEL.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_LABEL type ref to ZCL_VCXI_P3SS_PR_CSTEP_LABEL,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is an Label Application
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P3SS_PR_CSTEP_LABEL.
    LR_PR_CSTEP_LABEL = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_LABEL is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

*** Labels
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_LABEL=>C_IPRVT_PX_MS_LABEL
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE->IS_IN_LINE( IR_GATE ).
        append LR_GATE to LT_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P3SR_BL_PSTEP_LABEL=>C_IPSTP_LABEL
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_CSPLIT.

    data: LR_PR_OUTPUT  type ref to ZCL_VCXI_P3SS_PR_OUTPUT,
          LR_BL_ASBPROP type ref to ZCL_VCXI_P3SS_BL_ASBPROP.


*** Get Provider for Output
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( ).
    check LR_PR_OUTPUT is bound.

*** Get Cost Split Distribution by Backward Property (Outbound)
    LR_BL_ASBPROP = LR_PR_OUTPUT->ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX( ).
    check LR_BL_ASBPROP is bound and
          LINES( LR_BL_ASBPROP->T_CSPLIT ) gt 1.

*** Add Component Cost Split
    RT_CSPLIT = value #( for LS_CSPLIT in LR_BL_ASBPROP->T_CSPLIT
                                       where ( DCSPL is not initial )
                                       ( ICSPL   = LS_CSPLIT-ICSPL
                                         S_DCSPL = LS_CSPLIT-S_DCSPL
                                         COMPR   = LS_CSPLIT-COMPR
                                         QFACT   = LS_CSPLIT-QFACT ) ).

  endmethod.
  method GET_ICELM.

    move 'P3_AS' to RF_ICELM.

  endmethod.
