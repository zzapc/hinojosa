
class ZCL_VCXI_PXSS_BL_FASTD definition
  public
  create public .

public section.

  constants C_SFDAT_NONSTANDARD type ZVCXI_PXSS_SFDAT value 'N' ##NO_TEXT.
  constants C_SFDAT_STANDARD type ZVCXI_PXSS_SFDAT value 'S' ##NO_TEXT.
  constants C_XCSTY_FREESTYLE type ZVCXI_PXSS_XCSTY value 'F' ##NO_TEXT.
  constants C_XCSTY_SPEC type ZVCXI_PXSS_XCSTY value 'S' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_GATE_BY_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE optional
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT optional
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ID_BY_IPRVT
    importing
      !IF_IPRVT type /VCXI/VKSC_IPRVT
    returning
      value(RF_ID) type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods GET_LINKED_XCOMP
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_GATE_XCOMP_BACKWARD type /VCXI/VKSR_TT_GATE
      !ET_GATE_XCONI_BACKWARD type /VCXI/VKSR_TT_GATE
      !ET_GATE_XCONO_BACKWARD type /VCXI/VKSR_TT_GATE
      !ET_GATE_XCOMP_FORWARD type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_BY_GATE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_STRC
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    exporting
      !EF_SFDAT type ZVCXI_PXSS_SFDAT
      !ET_XCONG type ZVCXI_PXSS_TT_XCONG
    returning
      value(RT_FASTD_XCOMP) type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_XCOMP_BY_DATA
    importing
      !IR_GATE_DATA type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RR_GATE_XCOMP) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_XCONG
    importing
      !IT_GATE_XCOMP type /VCXI/VKSR_TT_GATE
    exporting
      value(ET_XCONR) type ZVCXI_PXSS_TT_XCONR
    returning
      value(RT_XCONG) type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods SET_DATA
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods SET_STRC
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !IT_XCONG type ZVCXI_PXSS_TT_XCONG optional
    exporting
      !ET_GATE_XCOMP type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_BUFFER,
           TABIX             type        I,
           R_SPVRE_FCOMP_IN  type ref to /VCXI/CL_VKSR_SPVRE,
           R_SPVRE_FCOMP_OUT type ref to /VCXI/CL_VKSR_SPVRE,
         end of YS_BUFFER .
  types:
    YT_BUFFER type table of YS_BUFFER with default key .
  types:
    begin of YS_XCON_SPVRE,
           R_SPVRE_XCONO type ref to /VCXI/CL_VKSR_SPVRE,
           R_SPVRE_XCONI type ref to /VCXI/CL_VKSR_SPVRE,
         end of   YS_XCON_SPVRE .
  types:
    YT_XCON_SPVRE type table of YS_XCON_SPVRE with default key .

  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  class-data T_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF .
  data T_SPVCE type /VCXI/CKX_TT_OBJECT .

  methods ADD_SPVRE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IF_ID type /VCXI/CKX_ID
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_BY_GATE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IF_COPY_CHILDREN type ABAP_BOOL
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_XCOMP
    importing
      !IF_ID type /VCXI/CKX_ID
      !IF_XCSTY type ZVCXI_PXSS_XCSTY
    exporting
      !ER_SPVRE_XCOMP type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CONV
    importing
      !IR_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP
    importing
      !IR_SPVRE_CSTEP type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_FREESTYLE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_INPUT
    importing
      !IR_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_OUTPUT
    importing
      !IR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SPEC
    importing
      !IR_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    changing
      !CF_SFDAT type ZVCXI_PXSS_SFDAT
      !CS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_XCOMP
    importing
      !IR_SPVRE_XCOMP type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    exporting
      !ER_SPVRE_SPEC type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_INPUT type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_CONV type ref to /VCXI/CL_VKSR_SPVRE
      !ER_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods COPY_FROM_GATE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CREATE_XCON
    importing
      !IT_XCON_SPVRE type YT_XCON_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FIND_SPVRE_PARENT
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_PXSS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods GET_SPVCE
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_SPVCE_PARENT type ref to /VCXI/CL_VKSC_SPVCE
    returning
      value(RR_SPVCE) type ref to /VCXI/CL_VKSC_SPVCE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE optional
      !IF_ID type /VCXI/CKX_ID
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE optional
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE optional
    raising
      /VCXI/CX_CKX .
  methods MERGE_XCONG_TO_XCONR
    importing
      !IR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV
      !IT_XCONG type ZVCXI_PXSS_TT_XCONG
    changing
      !CT_XCONR type ZVCXI_PXSS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods REMOVE_XCOMP
    importing
      !IR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods RESTORE_SPVRE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
      !IF_GATKY type /VCXI/VKSR_GATKY optional
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE optional
      !IT_SPVRE_CURR type /VCXI/VKSR_TT_SPVRE
      !IF_LEVEL type I default 0
      !IT_PRVDR type /VCXI/VKSR_TT_GATE optional
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE .
private section.
endclass. "ZCL_VCXI_PXSS_BL_FASTD definition
class ZCL_VCXI_PXSS_BL_FASTD implementation.
  method ADD_SPVRE.

    data:  LF_ID_PARENT type        /VCXI/CKX_ID.
    data:  LR_SPVCE     type ref to /VCXI/CL_VKSC_SPVCE.

    clear ER_SPVRE.

*** Get Parent Customizing Element if bound
    if IR_SPVRE_PARENT is bound.
      move IR_SPVRE_PARENT->R_SPVCE to LR_SPVCE.
    endif.

*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = IF_ID
                              IR_SPVCE_PARENT = LR_SPVCE ).

*** Create
    create object ER_SPVRE
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append ER_SPVRE to CT_SPVRE.

*** Set InUse
    ER_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  endmethod.
  method ADD_SPVRE_BY_GATE.

    data: LS_PRVDR_DEF   type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILD type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Add Runtime Element based on ID of Gate
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                             IF_ID           = IR_GATE->F_ID
                   importing ER_SPVRE        = ER_SPVRE
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Copy values from Gate
    ME->COPY_FROM_GATE( IR_GATE  = IR_GATE
                        IR_SPVRE = ER_SPVRE ).


***--------------------------------------------------------------------------------------
    if IF_COPY_CHILDREN eq ABAP_TRUE.
***   Get Child Provider
      LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                      IF_INUSE = ABAP_TRUE ).
        loop at LT_GATE into LR_GATE.
          if not LINE_EXISTS( LT_GATE_CHILD[ TABLE_LINE = LR_GATE ] ).
            append LR_GATE to LT_GATE_CHILD.
          endif.
        endloop.
      endloop.
      IR_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

***   Copy Children
      loop at LT_GATE_CHILD into LR_GATE.
        ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                         IR_SPVRE_PARENT  = ER_SPVRE
                                         IF_COPY_CHILDREN = IF_COPY_CHILDREN
                               changing  CT_SPVRE         = CT_SPVRE ).
      endloop.
    endif.

  endmethod.
  method ADD_XCOMP.

    data: LR_SPVRE_SOV type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Find Root Element
    ME->GET_SPVRE( exporting IF_ID    = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV )
                   importing ER_SPVRE = LR_SPVRE_SOV
                   changing  CT_SPVRE = CT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Create Component
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_SOV
                             IF_ID           = IF_ID
                   importing ER_SPVRE        = ER_SPVRE_XCOMP
                   changing  CT_SPVRE        = CT_SPVRE ).

***--------------------------------------------------------------------------------------
    if IF_XCSTY eq C_XCSTY_SPEC.
***   Create Specification
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_XCOMP
                               IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC )
                     importing ER_SPVRE        = ER_SPVRE_SPEC
                     changing  CT_SPVRE        = CT_SPVRE ).

***   Create Input
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'INPUT'
                     importing ER_SPVRE        = ER_SPVRE_INPUT
                     changing  CT_SPVRE        = CT_SPVRE ).

***   Create Conversion
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'CONV'
                     importing ER_SPVRE        = ER_SPVRE_CONV
                     changing  CT_SPVRE        = CT_SPVRE ).

***   Create Output
      ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'OUTPUT'
                     importing ER_SPVRE        = ER_SPVRE_OUTPUT
                     changing  CT_SPVRE        = CT_SPVRE ).
    endif.

  endmethod.
  method ANALYZE_CONV.

    data: LR_SPVRE_CSTEP type ref to /VCXI/CL_VKSR_SPVRE.


*** Analyze Conversion Step
    loop at IT_SPVRE into LR_SPVRE_CSTEP
                    where TABLE_LINE->R_PARENT eq IR_SPVRE_CONV.

      ME->ANALYZE_CSTEP( exporting IR_SPVRE_CSTEP = LR_SPVRE_CSTEP
                                   IT_SPVRE       = IT_SPVRE
                                   IT_PRVDR       = IT_PRVDR
                                   IR_BL_FDMDL    = IR_BL_FDMDL
                         changing  CS_FASTD_XCOMP = CS_FASTD_XCOMP
                                   CF_SFDAT       = CF_SFDAT ).
    endloop.

  endmethod.
  method ANALYZE_CSTEP.

    data: LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***--------------------------------------------------------------------------------------
*** Add Conversion Step to Fast Data Component Data
    append value #( IPARE = IR_SPVRE_CSTEP->R_PARENT->GET_ID( )
                    ISELF = IR_SPVRE_CSTEP->GET_ID( )
                    GATKY = IR_SPVRE_CSTEP->F_GATKY
                  ) to CS_FASTD_XCOMP-T_DATA assigning <S_FASTD_XCOMP_DATA>.

*** Look for Gate for further Information
    <S_FASTD_XCOMP_DATA>-R_GATE = ME->GET_GATE_BY_SPVRE( exporting IR_SPVRE = IR_SPVRE_CSTEP
                                                                   IT_PRVDR = IT_PRVDR
                                                         changing  CF_SFDAT = CF_SFDAT ).
    if <S_FASTD_XCOMP_DATA>-R_GATE is bound and
       <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
***   Get Data using Fast Data Integration
      <S_FASTD_XCOMP_DATA>-R_DATA = cast ZIF_VCXI_PXSS_FDI( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_DATA( importing ET_FDMEX = <S_FASTD_XCOMP_DATA>-T_FDMEX ).
    endif.

***--------------------------------------------------------------------------------------
*** Loop at Children of Output
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT eq IR_SPVRE_CSTEP.
      ME->ANALYZE_SPVRE( exporting IR_SPVRE       = LR_SPVRE_CHILD
                                   IT_SPVRE       = IT_SPVRE
                                   IT_PRVDR       = IT_PRVDR
                                   IR_BL_FDMDL    = IR_BL_FDMDL
                         changing  CF_SFDAT       = CF_SFDAT
                                   CS_FASTD_XCOMP = CS_FASTD_XCOMP ).
    endloop.

  endmethod.
  method ANALYZE_FREESTYLE.

    data: LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE_CHILD  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***--------------------------------------------------------------------------------------
*** Loop at Children of Parent
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT eq IR_SPVRE_PARENT.
***   Look for Gate for further Information
      LR_GATE_CHILD = ME->GET_GATE_BY_SPVRE( exporting IR_SPVRE = LR_SPVRE_CHILD
                                                       IT_PRVDR = IT_PRVDR
                                             changing  CF_SFDAT = CF_SFDAT ).
    "  check LR_GATE_CHILD is bound and
"            LR_GATE_CHILD->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
      check LR_GATE_CHILD is bound.
      try.
        check LR_GATE_CHILD->R_CLSPR is bound.
        cast ZIF_VCXI_PXSS_FDI( LR_GATE_CHILD->R_CLSPR ).
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
***   Add Element to Fast Data Component Data
      append value #( IPARE  = IR_SPVRE_PARENT->GET_ID( )
                      ISELF  = LR_SPVRE_CHILD->GET_ID( )
                      GATKY  = LR_SPVRE_CHILD->F_GATKY
                      R_GATE = LR_GATE_CHILD
                    ) to CS_FASTD_XCOMP-T_DATA assigning <S_FASTD_XCOMP_DATA>.

***   Get Data using Fast Data Integration
      <S_FASTD_XCOMP_DATA>-R_DATA = cast ZIF_VCXI_PXSS_FDI( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_DATA( importing ET_FDMEX = <S_FASTD_XCOMP_DATA>-T_FDMEX ).

***   Process also lower-level children
      ME->ANALYZE_FREESTYLE( exporting IR_SPVRE_PARENT = LR_SPVRE_CHILD
                                       IT_SPVRE        = IT_SPVRE
                                       IT_PRVDR        = IT_PRVDR
                                       IR_BL_FDMDL     = IR_BL_FDMDL
                              changing CF_SFDAT        = CF_SFDAT
                                       CS_FASTD_XCOMP  = CS_FASTD_XCOMP ).
    endloop.

  endmethod.
  METHOD analyze_input.

    DATA: lr_spvre_child TYPE REF TO /vcxi/cl_vksr_spvre,
          lr_gate_child  TYPE REF TO /vcxi/cl_vksr_gate.
    FIELD-SYMBOLS: <s_fastd_xcomp_data> TYPE zvcxi_pxss_s_fastd_xcomp_data.


***--------------------------------------------------------------------------------------
*** Loop at Children of Input
    LOOP AT it_spvre INTO lr_spvre_child
                    WHERE table_line->r_parent = ir_spvre_input.
***   Add Element to Fast Data Component Data
      APPEND VALUE #( ipare = ir_spvre_input->get_id( )
                      iself = lr_spvre_child->get_id( )
                      gatky = lr_spvre_child->f_gatky
                    ) TO cs_fastd_xcomp-t_data ASSIGNING <s_fastd_xcomp_data>.

***   Look for Gate for further Information
      <s_fastd_xcomp_data>-r_gate = me->get_gate_by_spvre( EXPORTING ir_spvre = lr_spvre_child
                                                                     it_prvdr = it_prvdr
                                                           CHANGING  cf_sfdat = cf_sfdat ).

      IF <s_fastd_xcomp_data>-r_gate IS BOUND AND
         <s_fastd_xcomp_data>-r_gate->r_clspr IS INSTANCE OF zif_vcxi_pxss_fdi.
***     Get Data using Fast Data Integration
        <s_fastd_xcomp_data>-r_data = CAST zif_vcxi_pxss_fdi( <s_fastd_xcomp_data>-r_gate->r_clspr )->get_data( IMPORTING et_fdmex = <s_fastd_xcomp_data>-t_fdmex ).
      ENDIF.

***--------------------------------------------------------------------------------------
***   Loop at Grand-Children
      LOOP AT it_spvre INTO DATA(lr_spvre_child_sub)
                      WHERE table_line->r_parent EQ lr_spvre_child.
        me->analyze_spvre( EXPORTING ir_spvre       = lr_spvre_child_sub
                                     it_spvre       = it_spvre
                                     it_prvdr       = it_prvdr
                                     ir_bl_fdmdl    = ir_bl_fdmdl
                           CHANGING  cf_sfdat       = cf_sfdat
                                     cs_fastd_xcomp = cs_fastd_xcomp ).
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.
  method ANALYZE_OUTPUT.

    data: LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE_CHILD  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***--------------------------------------------------------------------------------------
*** Loop at Children of Output
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT = IR_SPVRE_OUTPUT.
***   Add Element to Fast Data Component Data
      append value #( IPARE = IR_SPVRE_OUTPUT->GET_ID( )
                      ISELF = LR_SPVRE_CHILD->GET_ID( )
                      GATKY = LR_SPVRE_CHILD->F_GATKY
                    ) to CS_FASTD_XCOMP-T_DATA assigning <S_FASTD_XCOMP_DATA>.

***   Look for Gate for further Information
      <S_FASTD_XCOMP_DATA>-R_GATE = ME->GET_GATE_BY_SPVRE( exporting IR_SPVRE = LR_SPVRE_CHILD
                                                                     IT_PRVDR = IT_PRVDR
                                                           changing  CF_SFDAT = CF_SFDAT ).
      if <S_FASTD_XCOMP_DATA>-R_GATE is bound and
         <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
***     Get Data using Fast Data Integration
        <S_FASTD_XCOMP_DATA>-R_DATA = cast ZIF_VCXI_PXSS_FDI( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_DATA( importing ET_FDMEX = <S_FASTD_XCOMP_DATA>-T_FDMEX ).
      endif.

***--------------------------------------------------------------------------------------
***   Loop at Grand-Children
      loop at IT_SPVRE into data(LR_SPVRE_CHILD_SUB)
                      where TABLE_LINE->R_PARENT eq LR_SPVRE_CHILD.
        ME->ANALYZE_SPVRE( exporting IR_SPVRE       = LR_SPVRE_CHILD_SUB
                                     IT_SPVRE       = IT_SPVRE
                                     IT_PRVDR       = IT_PRVDR
                                     IR_BL_FDMDL    = IR_BL_FDMDL
                           changing  CF_SFDAT       = CF_SFDAT
                                     CS_FASTD_XCOMP = CS_FASTD_XCOMP ).
      endloop.
    endloop.

  endmethod.
  method ANALYZE_SPEC.

    data: LT_PARAM type /VCXI/VKSR_TT_PARAM.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Gate of Specification
    LR_GATE = ME->GET_GATE_BY_SPVRE( exporting IR_SPVRE = IR_SPVRE_SPEC
                                               IT_PRVDR = IT_PRVDR
                                     changing  CF_SFDAT = CF_SFDAT ).
    if LR_GATE is bound.
***   Get Plant
      CS_FASTD_XCOMP-WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LR_GATE->R_CLSPR )->GET_WERKS( ).

***   Check for parameter that were set by User
      LT_PARAM = LR_GATE->GET_PARAM_ALL( ).
      read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                          transporting no fields.
      if SY-SUBRC eq 0.
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
      endif.
    endif.

  endmethod.
  method ANALYZE_SPVRE.

    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***--------------------------------------------------------------------------------------
*** Only add Elements with Provider Relationship
    LR_GATE = ME->GET_GATE_BY_SPVRE( exporting IR_SPVRE = IR_SPVRE
                                               IT_PRVDR = IT_PRVDR
                                     changing  CF_SFDAT = CF_SFDAT ).
    if LR_GATE is bound.
***   Add Element to Fast Data Component Data
      append value #( IPARE  = IR_SPVRE->R_PARENT->GET_ID( )
                      ISELF  = IR_SPVRE->GET_ID( )
                      GATKY  = IR_SPVRE->F_GATKY
                      R_GATE = LR_GATE
                    ) to CS_FASTD_XCOMP-T_DATA assigning <S_FASTD_XCOMP_DATA>.

      if LR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
***     Get Data using Fast Data Integration
        <S_FASTD_XCOMP_DATA>-R_DATA = cast ZIF_VCXI_PXSS_FDI( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_DATA( importing ET_FDMEX = <S_FASTD_XCOMP_DATA>-T_FDMEX ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Loop at Children of Output
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT = IR_SPVRE.
      ME->ANALYZE_SPVRE( exporting IR_SPVRE       = LR_SPVRE_CHILD
                                   IT_SPVRE       = IT_SPVRE
                                   IT_PRVDR       = IT_PRVDR
                                   IR_BL_FDMDL    = IR_BL_FDMDL
                         changing  CF_SFDAT       = CF_SFDAT
                                   CS_FASTD_XCOMP = CS_FASTD_XCOMP ).
    endloop.

  endmethod.
  method ANALYZE_XCOMP.

    clear: ER_SPVRE_SPEC,
           ER_SPVRE_INPUT,
           ER_SPVRE_CONV,
           ER_SPVRE_OUTPUT.

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Element of Specification
    try.
        ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_XCOMP
                                 IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC )
                                 IT_SPVRE        = IT_SPVRE
                       importing ER_SPVRE        = ER_SPVRE_SPEC ).
      catch /VCXI/CX_CKX.
        clear ER_SPVRE_SPEC.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Element of Input
    if ER_SPVRE_INPUT is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'INPUT'
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_INPUT ).
    endif.

*** Get Supervised Runtime Element of Conversion
    if ER_SPVRE_CONV is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'CONV'
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_CONV ).
    endif.

*** Get Supervised Runtime Element of Output
    if ER_SPVRE_OUTPUT is requested.
      ME->GET_SPVRE( exporting IR_SPVRE_PARENT = ER_SPVRE_SPEC
                               IF_ID           = 'OUTPUT'
                               IT_SPVRE        = IT_SPVRE
                     importing ER_SPVRE        = ER_SPVRE_OUTPUT ).
    endif.

  endmethod.
method CONSTRUCTOR.

***--------------------------------------------------------------------------------------
*** Buffer Gate for which the BL Instance was created
  move IR_GATE to ME->R_GATE.

*** Get Supervised Customizing Elements
  ME->T_SPVCE = ME->R_GATE->GET_SPVCE( ).
  if ME->T_SPVCE is initial.
*** No Supervised Cust.Element are defined - check SmartVC Customizing.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_PXSS'
                                          IF_MSGNO = '101' ).
  endif.

*** Get Provider Type Definitions
  ME->T_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( ).

endmethod.
  method COPY_FROM_GATE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_PARAM type /VCXI/VKSR_TT_PARAM.

*** Copy Leading Object
    IR_SPVRE->SET_LEOKY( IS_LEOKY = IR_GATE->GET_LEOKY( ) ).

*** Get all superviable Parameter
    LT_PARAM = IR_GATE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ).

*** Copy Parameter
    loop at LT_PARAM into LS_PARAM.
      IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
    endloop.

  endmethod.
  method CREATE_XCON.

    data: LS_XCON_SPVRE type YS_XCON_SPVRE.
    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_XCONR type ZVCXI_PXSS_TT_XCONR.
    data: LR_PR_SOV  type ref to ZCL_VCXI_PXSS_PR_SOV.


***--------------------------------------------------------------------------------------
*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Get all Provider after Supervisor
    LT_PRVDR = ME->R_GATE->GET_PRVDR( ).

*** Get current Connections
    LT_XCONR = LR_PR_SOV->GET_XCONR( ).

***--------------------------------------------------------------------------------------
*** Define new Connections
    loop at IT_XCON_SPVRE into LS_XCON_SPVRE.
      append value #( R_GATE_OUT = ME->GET_GATE_BY_SPVRE( IR_SPVRE = LS_XCON_SPVRE-R_SPVRE_XCONO
                                                          IT_PRVDR = LT_PRVDR )
                      R_GATE_IN  = ME->GET_GATE_BY_SPVRE( IR_SPVRE = LS_XCON_SPVRE-R_SPVRE_XCONI
                                                          IT_PRVDR = LT_PRVDR )
                    ) to LT_XCONR.
    endloop.

*** Set new Connections
    LR_PR_SOV->SET_XCONR( IT_XCONR = LT_XCONR ).
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

  endmethod.
  method FIND_SPVRE_PARENT.

    data: LR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE.


    loop at IT_SPVRE into LR_SPVRE.
      if LR_SPVRE->GET_ID( ) eq IF_IPARE.
        RR_SPVRE = LR_SPVRE.
      endif.
    endloop.

  endmethod.
  method GET_GATE_BY_SPVRE.

*** Get Provider
    data(LT_PRVDR) = cond #( when IT_PRVDR is supplied then IT_PRVDR
                                                       else ME->R_GATE->GET_PRVDR( ) ).

*** Search for matching Provider
    read table LT_PRVDR into RR_GATE
                        with key TABLE_LINE->F_GATKY = IR_SPVRE->F_GATKY.
    if SY-SUBRC ne 0.
      if CF_SFDAT is supplied.
***     Unknown Provider lead to Non-Standard VC
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
      else.
***     No provider matches the given Supervised Runtime Element
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_PXSS'
                                              IF_MSGNO = '103' ).
      endif.
    endif.

  endmethod.
  method GET_ID_BY_IPRVT.

    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF
                               with key IPRVT = IF_IPRVT.
    if SY-SUBRC eq 0.
      move LS_PRVDR_DEF-ID to RF_ID.
    else.
***   Provider Type &1 not defined for Fast Data.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '102'
                                            IF_MSGV1 = IF_IPRVT ).
    endif.

  endmethod.
  method GET_LINKED_XCOMP.

    data: LS_XCONR type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR       type ZVCXI_PXSS_TT_XCONR,
          LT_XCONR_XCOMP type ZVCXI_PXSS_TT_XCONR.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_XCONR> type ZVCXI_PXSS_S_XCONR.


    clear: ET_GATE_XCOMP_BACKWARD,
           ET_GATE_XCONI_BACKWARD,
           ET_GATE_XCONO_BACKWARD,
           ET_GATE_XCOMP_FORWARD.

    check IR_BL_FDMDL   is bound and
          IR_GATE_XCOMP is bound.

*** Get Connections
    ME->GET_XCONG( exporting IT_GATE_XCOMP = IR_BL_FDMDL->T_GATE_XCOMP
                   importing ET_XCONR      = LT_XCONR ).

*** Get Component of Connections
    LT_XCONR_XCOMP = LT_XCONR.
    loop at IR_BL_FDMDL->T_GATE_XCOMP into LR_GATE.
      loop at LT_XCONR_XCOMP assigning <S_XCONR>.
        if LR_GATE->IS_IN_LINE( IR_GATE = <S_XCONR>-R_GATE_IN ).
          <S_XCONR>-R_GATE_IN = LR_GATE.
        endif.
        if LR_GATE->IS_IN_LINE( IR_GATE = <S_XCONR>-R_GATE_OUT ).
          <S_XCONR>-R_GATE_OUT = LR_GATE.
        endif.
      endloop.
    endloop.

*** Backward
    if ET_GATE_XCOMP_BACKWARD is requested or
       ET_GATE_XCONI_BACKWARD is requested or
       ET_GATE_XCONO_BACKWARD is requested.
***   Get components
      ET_GATE_XCOMP_BACKWARD = value #( ( IR_GATE_XCOMP ) ).
      loop at ET_GATE_XCOMP_BACKWARD into LR_GATE.
        loop at LT_XCONR_XCOMP into LS_XCONR where R_GATE_IN = LR_GATE.
          collect LS_XCONR-R_GATE_OUT into ET_GATE_XCOMP_BACKWARD.
        endloop.
      endloop.

***   Get Connection In and Out
      loop at ET_GATE_XCOMP_BACKWARD into LR_GATE.
        loop at LT_XCONR assigning <S_XCONR>.
          if LR_GATE->IS_IN_LINE( IR_GATE = <S_XCONR>-R_GATE_IN ).
            collect <S_XCONR>-R_GATE_IN  into ET_GATE_XCONI_BACKWARD.
            collect <S_XCONR>-R_GATE_OUT into ET_GATE_XCONO_BACKWARD.
          endif.
        endloop.
      endloop.
    endif.

*** Forward
    if ET_GATE_XCOMP_FORWARD is requested.
      ET_GATE_XCOMP_FORWARD = value #( ( IR_GATE_XCOMP ) ).
      loop at ET_GATE_XCOMP_FORWARD into LR_GATE.
        loop at LT_XCONR into LS_XCONR where R_GATE_IN = LR_GATE.
          collect LS_XCONR-R_GATE_OUT into ET_GATE_XCOMP_FORWARD.
        endloop.
      endloop.
    endif.

  endmethod.
  method GET_PRVDR_SOV.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SOV ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_SPVCE.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SPVCE  type ref to /VCXI/CL_VKSC_SPVCE.


    loop at ME->T_SPVCE into LR_OBJECT.
      move LR_OBJECT ?to LR_SPVCE.

      if LR_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( )       eq IF_ID and
         LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) eq IR_SPVCE_PARENT.
        move LR_SPVCE to RR_SPVCE.
        exit.
      endif.
    endloop.

    if RR_SPVCE is not bound.
      if IR_SPVCE_PARENT is not bound.
***     Supervised Cust.Element &1 can't be found.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_PXSS'
                                              IF_MSGNO = '104'
                                              IF_MSGV1 = IF_ID ).
      else.
***     Supervised Cust.Element &1 can't be found as child of &2.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_PXSS'
                                              IF_MSGNO = '105'
                                              IF_MSGV1 = IF_ID
                                              IF_MSGV2 = IR_SPVCE_PARENT->/VCXI/IF_CKX_OBJECT~GET_ID( ) ).
      endif.
    endif.

  endmethod.
  method GET_SPVRE.

    data:  LF_ID_PARENT type        /VCXI/CKX_ID.
    data:  LR_SPVCE     type ref to /VCXI/CL_VKSC_SPVCE.

    clear ER_SPVRE.

*** Fill Changeable only Input is supplied
    if CT_SPVRE is not supplied.
      CT_SPVRE = IT_SPVRE.
    endif.

*** Get Parent Customizing Element
    if IR_SPVRE_PARENT is bound.
      LR_SPVCE = IR_SPVRE_PARENT->R_SPVCE.
    endif.

*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = IF_ID
                              IR_SPVCE_PARENT = LR_SPVCE ).

*** Find Element
    loop at CT_SPVRE into ER_SPVRE.
      if ER_SPVRE->R_PARENT  eq IR_SPVRE_PARENT and
         ER_SPVRE->R_SPVCE   eq LR_SPVCE.
        exit.
      else.
        clear ER_SPVRE.
      endif.
    endloop.

*** Create if needed
    if ER_SPVRE is not bound.
      if CT_SPVRE is supplied.
        create object ER_SPVRE
          exporting
            IR_SPVCE  = LR_SPVCE
            IR_PARENT = IR_SPVRE_PARENT.
        append ER_SPVRE to CT_SPVRE.
      else.
***     Supervised Runtime Element &1 not found.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_PXSS'
                                              IF_MSGNO = '106'
                                              IF_MSGV1 = IF_ID ).
      endif.
    endif.

  endmethod.
  method GET_SPVRE_BY_GATE.

    data:  LR_SPVRE   type ref to /VCXI/CL_VKSR_SPVRE.


    loop at IT_SPVRE into LR_SPVRE.
      if LR_SPVRE->F_GATKY eq IR_GATE->F_GATKY.
        RR_SPVRE = LR_SPVRE.
      endif.
    endloop.
    if RR_SPVRE is not bound.
***   No Supervised Runtime Element matches the given Gate
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '107' ).
    endif.

  endmethod.
  method GET_STRC.

    data: LT_SPVRE type /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP   type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE_XCOMP  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_SPEC   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV   type ref to /VCXI/CL_VKSR_SPVRE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


    clear: EF_SFDAT,
           ET_XCONG.

***--------------------------------------------------------------------------------------
*** Get current Supervised Elements
    LT_SPVRE = ME->R_GATE->GET_SPVRE( ).

*** Get all Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( ).


***--------------------------------------------------------------------------------------
*** Process all assigned Components
    loop at IR_BL_FDMDL->T_GATE_XCOMP into LR_GATE_XCOMP
                                     where TABLE_LINE is bound
                                      and  TABLE_LINE->F_FREED ne ABAP_TRUE.

***   Get Supverised Element of Component Gate
      LR_SPVRE_XCOMP = ME->GET_SPVRE_BY_GATE( IR_GATE  = LR_GATE_XCOMP
                                              IT_SPVRE = LT_SPVRE ).

***   Analyze Component
      ME->ANALYZE_XCOMP( exporting IR_SPVRE_XCOMP  = LR_SPVRE_XCOMP
                                   IT_SPVRE        = LT_SPVRE
                         importing ER_SPVRE_SPEC   = LR_SPVRE_SPEC
                                   ER_SPVRE_INPUT  = LR_SPVRE_INPUT
                                   ER_SPVRE_CONV   = LR_SPVRE_CONV
                                   ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT ).
      append initial line to RT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.

***   Get Gate, ID and Position of Component
      <S_FASTD_XCOMP>-R_GATE = LR_GATE_XCOMP.
      <S_FASTD_XCOMP>-ID     = <S_FASTD_XCOMP>-R_GATE->F_ID.
      <S_FASTD_XCOMP>-POSID  = <S_FASTD_XCOMP>-R_GATE->GET_POSID( ).
      <S_FASTD_XCOMP>-XCSTY  = cond #( when LR_SPVRE_SPEC is bound then C_XCSTY_SPEC else C_XCSTY_FREESTYLE ).

      case <S_FASTD_XCOMP>-XCSTY.
***--------------------------------------------------------------------------------------
***     Specification-based Component
        when C_XCSTY_SPEC.
***       Analyze Specification Element
          ME->ANALYZE_SPEC( exporting IR_SPVRE_SPEC  = LR_SPVRE_SPEC
                                      IT_SPVRE       = LT_SPVRE
                                      IT_PRVDR       = LT_PRVDR
                            changing  CF_SFDAT       = EF_SFDAT
                                      CS_FASTD_XCOMP = <S_FASTD_XCOMP> ).

***       Analyze Output Element
          ME->ANALYZE_OUTPUT( exporting IR_SPVRE_OUTPUT = LR_SPVRE_OUTPUT
                                        IT_SPVRE        = LT_SPVRE
                                        IT_PRVDR        = LT_PRVDR
                                        IR_BL_FDMDL     = IR_BL_FDMDL
                              changing  CS_FASTD_XCOMP  = <S_FASTD_XCOMP>
                                        CF_SFDAT        = EF_SFDAT ).

***       Analyze Conversion Element
          ME->ANALYZE_CONV( exporting IR_SPVRE_CONV  = LR_SPVRE_CONV
                                      IT_SPVRE       = LT_SPVRE
                                      IT_PRVDR       = LT_PRVDR
                                      IR_BL_FDMDL    = IR_BL_FDMDL
                            changing  CS_FASTD_XCOMP = <S_FASTD_XCOMP>
                                      CF_SFDAT       = EF_SFDAT ).

***       Analyze Input Element
          ME->ANALYZE_INPUT( exporting IR_SPVRE_INPUT = LR_SPVRE_INPUT
                                       IT_SPVRE       = LT_SPVRE
                                       IT_PRVDR       = LT_PRVDR
                                       IR_BL_FDMDL    = IR_BL_FDMDL
                             changing  CS_FASTD_XCOMP = <S_FASTD_XCOMP>
                                       CF_SFDAT       = EF_SFDAT ).

***--------------------------------------------------------------------------------------
***     Freestyle Component
        when C_XCSTY_FREESTYLE.
***       Analyze all lower-levels
          ME->ANALYZE_FREESTYLE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCOMP
                                           IT_SPVRE        = LT_SPVRE
                                           IT_PRVDR        = LT_PRVDR
                                           IR_BL_FDMDL     = IR_BL_FDMDL
                                 changing  CS_FASTD_XCOMP  = <S_FASTD_XCOMP>
                                           CF_SFDAT        = EF_SFDAT ).
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Connections
    if ET_XCONG is requested.
      ET_XCONG = ME->GET_XCONG( IT_GATE_XCOMP = IR_BL_FDMDL->T_GATE_XCOMP ).
    endif.

  endmethod.
  method GET_XCOMP_BY_DATA.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP.


    check IR_GATE_DATA is bound.

    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ R_GATE = IR_GATE_DATA ] ) or
         LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ GATKY = IR_GATE_DATA->F_GATKY ] ).
        RR_GATE_XCOMP = LS_FASTD_XCOMP-R_GATE.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_XCONG.

    data: LS_XCONR  type ZVCXI_PXSS_S_XCONR.
    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV,
          LR_GATE   type ref to /VCXI/CL_VKSR_GATE.


*** Get Specification Overview Provider
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Filter X-Connections as References
    loop at LR_PR_SOV->GET_XCONR( ) into LS_XCONR.
      loop at IT_GATE_XCOMP into LR_GATE where TABLE_LINE is bound.
        if LS_XCONR-R_GATE_IN is bound and
           LS_XCONR-R_GATE_IN->IS_IN_LINE( IR_GATE = LR_GATE ).
          append LS_XCONR to ET_XCONR.
        endif.
        if LS_XCONR-R_GATE_OUT is bound and
           LS_XCONR-R_GATE_OUT->IS_IN_LINE( IR_GATE = LR_GATE ).
          append LS_XCONR to ET_XCONR.
        endif.
      endloop.
    endloop.

*** Map to GUIDs
    loop at ET_XCONR into LS_XCONR.
      append value #( GXCON_OUT = cast ZCL_VCXI_PXSS_PR_XCONO( LS_XCONR-R_GATE_OUT->R_CLSPR )->GET_GXCON( )
                      GXCON_IN  = cast ZCL_VCXI_PXSS_PR_XCONI( LS_XCONR-R_GATE_IN->R_CLSPR  )->GET_GXCON( )
                    ) to RT_XCONG.
    endloop.

  endmethod.
  method MERGE_XCONG_TO_XCONR.

    types: begin of YS_XCON_MAP,
             R_GATE type ref to /VCXI/CL_VKSR_GATE,
             GXCON  type        ZVCXI_PXSS_GXCON,
           end   of YS_XCON_MAP .

    data: LS_XCONG  type ZVCXI_PXSS_S_XCONG.
    data: LT_XCON_MAP type standard table of YS_XCON_MAP with default key.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE.


    check IR_PR_SOV is bound.

***--------------------------------------------------------------------------------------
*** Build Mapping
    loop at IR_PR_SOV->GET_PRVDR_XCONI( ) into LR_GATE.
      append value #( R_GATE = LR_GATE
                      GXCON = cast ZCL_VCXI_PXSS_PR_XCONI( LR_GATE->R_CLSPR )->GET_GXCON( )
                    ) to LT_XCON_MAP.
    endloop.
    loop at IR_PR_SOV->GET_PRVDR_XCONO( ) into LR_GATE.
      append value #( R_GATE = LR_GATE
                      GXCON = cast ZCL_VCXI_PXSS_PR_XCONO( LR_GATE->R_CLSPR )->GET_GXCON( )
                    ) to LT_XCON_MAP.
    endloop.


***--------------------------------------------------------------------------------------
*** Add new Connections
    loop at IT_XCONG into LS_XCONG.
      append value #( R_GATE_OUT = value #( LT_XCON_MAP[ GXCON = LS_XCONG-GXCON_OUT ]-R_GATE optional )
                      R_GATE_IN  = value #( LT_XCON_MAP[ GXCON = LS_XCONG-GXCON_IN  ]-R_GATE optional )
                    ) to CT_XCONR.
    endloop.


  endmethod.
  method REMOVE_XCOMP.

    data: LT_SPVRE type /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CHILD  type ref to /VCXI/CL_VKSR_SPVRE.


*** Find Supervised Runtime Element
    check LINE_EXISTS( CT_SPVRE[ TABLE_LINE->F_GATKY = IR_GATE_XCOMP->F_GATKY ] ).
    append CT_SPVRE[ TABLE_LINE->F_GATKY = IR_GATE_XCOMP->F_GATKY ] to LT_SPVRE.


    loop at LT_SPVRE into LR_SPVRE_PARENT.
***   Remove Parent from List
      delete CT_SPVRE where TABLE_LINE eq LR_SPVRE_PARENT.

***   Look for its children
      loop at CT_SPVRE into LR_SPVRE_CHILD where TABLE_LINE->R_PARENT = LR_SPVRE_PARENT.
        append LR_SPVRE_CHILD to LT_SPVRE.
      endloop.
    endloop.

  endmethod.
  method RESTORE_SPVRE.

    data: LR_SPVRE  type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Don't restore Elements that are in the Provider List
    if IT_PRVDR is supplied and
       IF_LEVEL lt -1.
      if IR_GATE is bound.
        check not LINE_EXISTS( IT_PRVDR[ TABLE_LINE = IR_GATE ] ).
      endif.
      if IF_GATKY is not initial.
        check not LINE_EXISTS( IT_PRVDR[ TABLE_LINE->F_GATKY = IF_GATKY ] ).
      endif.
      if IR_SPVRE is bound and
         IR_SPVRE->F_GATKY is not initial.
        check not LINE_EXISTS( IT_PRVDR[ TABLE_LINE->F_GATKY = IR_SPVRE->F_GATKY ] ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Restore Element
    if IR_GATE is bound.
      ER_SPVRE = IT_SPVRE_CURR[ TABLE_LINE->F_GATKY = IR_GATE->F_GATKY ].
    endif.
    if IF_GATKY is not initial.
      ER_SPVRE = IT_SPVRE_CURR[ TABLE_LINE->F_GATKY = IF_GATKY ].
    endif.
    if IR_SPVRE is bound.
      ER_SPVRE = IR_SPVRE.
    endif.
    check ER_SPVRE is bound.
    append ER_SPVRE to CT_SPVRE_NEW.

***--------------------------------------------------------------------------------------
*** Restore Sub-Levels
    if IF_LEVEL ne 0.
      loop at IT_SPVRE_CURR into LR_SPVRE
                            where TABLE_LINE->R_PARENT = ER_SPVRE.
        if IT_PRVDR is supplied.
          ME->RESTORE_SPVRE( exporting IR_SPVRE      = LR_SPVRE
                                       IT_SPVRE_CURR = IT_SPVRE_CURR
                                       IF_LEVEL      = IF_LEVEL - 1
                                       IT_PRVDR      = IT_PRVDR
                             changing  CT_SPVRE_NEW  = CT_SPVRE_NEW ).
        else.
          ME->RESTORE_SPVRE( exporting IR_SPVRE      = LR_SPVRE
                                       IT_SPVRE_CURR = IT_SPVRE_CURR
                                       IF_LEVEL      = IF_LEVEL - 1
                             changing  CT_SPVRE_NEW  = CT_SPVRE_NEW ).
        endif.
      endloop.
    endif.

  endmethod.
  method SET_DATA.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


***--------------------------------------------------------------------------------------
*** Process Structure with existing Gate
    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP where R_GATE is bound.
***   Set Data to Component
      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_GATE is bound
                                                              and  R_DATA is bound.

***     Set Data using Fast Data Integration
        cast ZIF_VCXI_PXSS_FDI( LS_FASTD_XCOMP_DATA-R_GATE->R_CLSPR )->SET_DATA( IR_DATA = LS_FASTD_XCOMP_DATA-R_DATA ).
      endloop.
    endloop.

  endmethod.
  method SET_STRC.

    types: begin of YS_BUFFER_DATA,
             R_SPVRE type ref to /VCXI/CL_VKSR_SPVRE,
             R_DATA  type ref to DATA,
             T_FDMEX type ZVCXI_PXSS_TT_FDMEX,
           end   of YS_BUFFER_DATA.

    data: LF_POSID  type /VCXI/VKSR_POSID.
    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA,
          LS_BUFFER_DATA      type YS_BUFFER_DATA,
          LS_XCONR            type ZVCXI_PXSS_S_XCONR,
          LS_PARAM            type /VCXI/VKSR_S_PARAM.
    data: LT_SPVRE_CURR   type /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW    type /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR        type /VCXI/VKSR_TT_GATE,
          LT_BUFFER_XCOMP type /VCXI/VKSR_TT_SPVRE,
          LT_BUFFER_DATA  type table of YS_BUFFER_DATA,
          LT_XCONR        type ZVCXI_PXSS_TT_XCONR.
    data: LR_PR_SOV       type ref to ZCL_VCXI_PXSS_PR_SOV,
          LR_GATE_XCOMP   type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE_XCOMP  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_SPEC   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_INPUT  type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_CONV   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_RTESPV type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_SELF   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

    free: ET_GATE_XCOMP.

***--------------------------------------------------------------------------------------
*** Get current Supervised Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).
    LT_SPVRE_NEW  = LT_SPVRE_CURR.

*** Get all Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( ).

    if IT_XCONG is supplied.
***   Get Specification Overview
      LR_PR_SOV = ME->GET_PRVDR_SOV( ).
      check LR_PR_SOV is bound.

***   Get current Connections of Specification Overview
      LT_XCONR = LR_PR_SOV->GET_XCONR( ).
    endif.

***--------------------------------------------------------------------------------------
*** Remove old Components from List
    loop at IR_BL_FDMDL->T_GATE_XCOMP into LR_GATE_XCOMP.
      ME->REMOVE_XCOMP( exporting IR_GATE_XCOMP = LR_GATE_XCOMP
                        changing  CT_SPVRE      = LT_SPVRE_NEW ).
    endloop.

*** Filter X-Connections as References
    loop at IR_BL_FDMDL->T_GATE_XCOMP into LR_GATE_XCOMP.
      loop at LT_XCONR into LS_XCONR.
        if ( LS_XCONR-R_GATE_IN  is bound and LS_XCONR-R_GATE_IN->IS_IN_LINE(  IR_GATE = LR_GATE_XCOMP ) ) or
           ( LS_XCONR-R_GATE_OUT is bound and LS_XCONR-R_GATE_OUT->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ) ).
          delete LT_XCONR.
        endif.
      endloop.
    endloop.


*** Process new Structure
    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.

***--------------------------------------------------------------------------------------
***   Use existing Component?
      if LS_FASTD_XCOMP-R_GATE is bound.
        case LS_FASTD_XCOMP-XCSTY.
***       For Specification-based Components
          when C_XCSTY_SPEC.
***         Restore Component with 2 Sub-Levels (Spec + Input/Conversion/Output)
            ME->RESTORE_SPVRE( exporting IR_GATE       = LS_FASTD_XCOMP-R_GATE
                                         IT_SPVRE_CURR = LT_SPVRE_CURR
                                         IF_LEVEL      = 2
                               importing ER_SPVRE      = LR_SPVRE_XCOMP
                               changing  CT_SPVRE_NEW  = LT_SPVRE_NEW ).

            ME->ANALYZE_XCOMP( exporting IR_SPVRE_XCOMP  = LR_SPVRE_XCOMP
                                         IT_SPVRE        = LT_SPVRE_CURR
                               importing ER_SPVRE_SPEC   = LR_SPVRE_SPEC
                                         ER_SPVRE_INPUT  = LR_SPVRE_INPUT
                                         ER_SPVRE_CONV   = LR_SPVRE_CONV
                                         ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT ).
***       For Freestyle Components
          when C_XCSTY_FREESTYLE.
***         Restore just the Component itself
            ME->RESTORE_SPVRE( exporting IR_GATE       = LS_FASTD_XCOMP-R_GATE
                                         IT_SPVRE_CURR = LT_SPVRE_CURR
                                         IF_LEVEL      = 0
                               importing ER_SPVRE      = LR_SPVRE_XCOMP
                               changing  CT_SPVRE_NEW  = LT_SPVRE_NEW ).
***         Restore Routing Supervisor
            ME->GET_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCOMP
                                     IF_ID           = 'RTESPV'
                                     IT_SPVRE        = LT_SPVRE_CURR
                           importing ER_SPVRE        = LR_SPVRE_RTESPV ).
            if LR_SPVRE_RTESPV is bound.
              append LR_SPVRE_RTESPV to LT_SPVRE_NEW.
            endif.
        endcase.
      else.
***     Create new Component (along with Spec + Input/Conversion/Output if needed)
        ME->ADD_XCOMP( exporting IF_ID           = LS_FASTD_XCOMP-ID
                                 IF_XCSTY        = LS_FASTD_XCOMP-XCSTY
                       importing ER_SPVRE_XCOMP  = LR_SPVRE_XCOMP
                                 ER_SPVRE_SPEC   = LR_SPVRE_SPEC
                                 ER_SPVRE_INPUT  = LR_SPVRE_INPUT
                                 ER_SPVRE_CONV   = LR_SPVRE_CONV
                                 ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT
                       changing  CT_SPVRE        = LT_SPVRE_NEW ).
      endif.
      append LR_SPVRE_XCOMP to LT_BUFFER_XCOMP.

***   Set Position
      LR_SPVRE_XCOMP->SET_POSID( IF_POSID = LS_FASTD_XCOMP-POSID ).

***--------------------------------------------------------------------------------------
***   Set Plant if needed
      if LR_SPVRE_SPEC is bound.
        LS_PARAM = LR_SPVRE_SPEC->GET_PARAM( IF_PARID = ZCL_VCXI_PXSS_PR_SPEC=>C_PARID_WERKS ).

        if LS_PARAM-ATWRT ne LS_FASTD_XCOMP-WERKS.
          LS_PARAM-ATWRT = LS_FASTD_XCOMP-WERKS.
          LS_PARAM-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          LR_SPVRE_SPEC->SET_PARAM( IS_PARAM = LS_PARAM ).
          LR_SPVRE_SPEC->SET_EVENT( IF_IEVNT = ZCL_VCXI_PXSS_PR_SPEC=>C_IEVNT_O_WERKS_CHANGED ).
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Set Data to Component
      clear LF_POSID.
      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA.
***     Use sequence as Position ID
        LF_POSID += 1.

***     Define Parent Supervised Element
        case LS_FASTD_XCOMP-XCSTY.
***       For Specification-based Components
          when C_XCSTY_SPEC.
            LR_SPVRE_PARENT = switch #( LS_FASTD_XCOMP_DATA-IPARE when 'INPUT'  then LR_SPVRE_INPUT
                                                                  when 'CONV'   then LR_SPVRE_CONV
                                                                  when 'OUTPUT' then LR_SPVRE_OUTPUT
                                                                                else ME->FIND_SPVRE_PARENT( IF_IPARE = LS_FASTD_XCOMP_DATA-IPARE
                                                                                                            IT_SPVRE = LT_SPVRE_NEW ) ).
***       For Freestyle Components
          when C_XCSTY_FREESTYLE.
            if LS_FASTD_XCOMP_DATA-IPARE is initial or
               LS_FASTD_XCOMP_DATA-IPARE eq LR_SPVRE_XCOMP->GET_ID( ).
***           Use Component as Parent
              LR_SPVRE_PARENT = LR_SPVRE_XCOMP.
            else.
***           Find Parent as child of Compoent
              ME->GET_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_XCOMP
                                       IF_ID           = LS_FASTD_XCOMP_DATA-IPARE
                                       IT_SPVRE        = LT_SPVRE_NEW
                             importing ER_SPVRE        = LR_SPVRE_PARENT ).
            endif.
        endcase.


***     Use Element
        if LS_FASTD_XCOMP_DATA-R_GATE is bound or
           LS_FASTD_XCOMP_DATA-GATKY is not initial.
***       Restore Element and it's sub elements, if not handled via Provider (own Sub Elements under e.g CSTEP)
          ME->RESTORE_SPVRE( exporting IR_GATE       = LS_FASTD_XCOMP_DATA-R_GATE
                                       IF_GATKY      = LS_FASTD_XCOMP_DATA-GATKY
                                       IT_SPVRE_CURR = LT_SPVRE_CURR
                                       IF_LEVEL      = -1     "Unlimited levels
                                       IT_PRVDR      = LT_PRVDR
                             importing ER_SPVRE      = LR_SPVRE_SELF
                             changing  CT_SPVRE_NEW  = LT_SPVRE_NEW ).
        else.
***       Create new Element
          ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_PARENT
                                   IF_ID           = LS_FASTD_XCOMP_DATA-ISELF
                         importing ER_SPVRE        = LR_SPVRE_SELF
                         changing  CT_SPVRE        = LT_SPVRE_NEW ).

        endif.
        check LR_SPVRE_SELF is bound.

***     Set Position
        LR_SPVRE_SELF->SET_POSID( IF_POSID = LF_POSID ).

***     Buffer Fast Data Integration Data to use once Gates are all available
        if LS_FASTD_XCOMP_DATA-R_DATA is bound.
          append value #( R_SPVRE = LR_SPVRE_SELF
                          R_DATA  = LS_FASTD_XCOMP_DATA-R_DATA
                          T_FDMEX = LS_FASTD_XCOMP_DATA-T_FDMEX ) to LT_BUFFER_DATA.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Set via Supervisor
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

*** Get all Provider after Supervisor
    LT_PRVDR = ME->R_GATE->GET_PRVDR( ).

*** Determine new Components
    loop at LT_BUFFER_XCOMP into LR_SPVRE_XCOMP where TABLE_LINE->F_GATKY is not initial.
      LR_GATE = value #( LT_PRVDR[ TABLE_LINE->F_GATKY = LR_SPVRE_XCOMP->F_GATKY ] optional ).
      check LR_GATE is bound.
      append LR_GATE to ET_GATE_XCOMP.
    endloop.

*** Set Data using Fast Data Integration
    loop at LT_BUFFER_DATA into LS_BUFFER_DATA where R_SPVRE->F_GATKY is not initial.
      LR_GATE = value #( LT_PRVDR[ TABLE_LINE->F_GATKY = LS_BUFFER_DATA-R_SPVRE->F_GATKY ] optional ).
      check LR_GATE is bound and
            LR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_FDI.
      cast ZIF_VCXI_PXSS_FDI( LR_GATE->R_CLSPR )->SET_DATA( IR_DATA  = LS_BUFFER_DATA-R_DATA
                                                            IT_FDMEX = LS_BUFFER_DATA-T_FDMEX ).
    endloop.

    if IT_XCONG is supplied.
***   Merge old and new Connections
      ME->MERGE_XCONG_TO_XCONR( exporting IR_PR_SOV = LR_PR_SOV
                                          IT_XCONG  = IT_XCONG
                                changing  CT_XCONR  = LT_XCONR ).
***   Set new Connections
      LR_PR_SOV->SET_XCONR( IT_XCONR = LT_XCONR ).
      ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).
    endif.

  endmethod.
