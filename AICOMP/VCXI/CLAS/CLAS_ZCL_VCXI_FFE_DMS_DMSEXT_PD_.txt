
class ZCL_VCXI_FFE_DMS_DMSEXT_PD definition
  public
  inheriting from ZCL_VCXI_XCE_DMS_DMSEXT
  create public .

public section.

  data F_APDIM type ZVCXI_FFS_APDIM read-only .
  data F_DATE type DATS read-only .
  data S_PD type ZVCXI_FFE_DMS_S_PD read-only .
  data T_PDINK type ZVCXI_FFE_DMS_TT_PDINK .

  methods CONSTRUCTOR
    importing
      !IF_GUID type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_INK
    importing
      !IF_MATNR type MATNR
    returning
      value(RR_CUST_INK) type ref to ZCL_VCXI_FFSS_CUST_INK
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_INKTN
    importing
      !IF_INKTN type ZVCXI_FFS_INKTN
    returning
      value(RR_CUST_INKTN) type ref to ZCL_VCXI_FFSS_CUST_INKTN
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_PRINT
    returning
      value(RR_CUST_PRINT) type ref to ZCL_VCXI_FFSS_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_TOOL_ANILOX
    importing
      !IF_ANITN type ZVCXI_FFS_ANITN
    returning
      value(RR_CUST_TOOL_ANILOX) type ref to ZCL_VCXI_FFSS_CUST_TOOL_ANILOX
    raising
      /VCXI/CX_CKX .
  methods SET_PD
    importing
      !IS_PD type ZVCXI_FFE_DMS_S_PD
    raising
      /VCXI/CX_CKX .
  methods SET_PDINK
    importing
      !IT_PDINK type ZVCXI_FFE_DMS_TT_PDINK
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS
    importing
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .

  methods REFRESH
    redefinition .
  methods SAVE
    redefinition .
  methods VALIDATE
    redefinition .
protected section.

  methods VALIDATE_PDINK
    importing
      !IS_PDINK type ZVCXI_FFE_DMS_S_PDINK
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .

  methods GET_XML_DREF
    redefinition .
private section.

  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_FFE_DMS_DMSEXT_PD definition
class ZCL_VCXI_FFE_DMS_DMSEXT_PD implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_GUID = IF_GUID ).

*** Define Default Date
    ME->F_DATE = SY-DATUM.

***--------------------------------------------------------------------------------------
*** Load from DB
    ME->LOAD_FROM_DB( ).

  endmethod.
  method GET_CUST_INK.

    if IF_MATNR       is not initial and
       ME->S_PD-WERKS is not initial.
***   Get Customizing
      RR_CUST_INK = ZCL_VCXI_FFSS_CUST_INK=>GET_INSTANCE_INK( IF_MATNR = IF_MATNR
                                                              IF_WERKS = ME->S_PD-WERKS
                                                              IF_DATE  = ME->F_DATE ).
    endif.

  endmethod.
  method GET_CUST_INKTN.

    check IF_INKTN       is not initial and
          ME->S_PD-WERKS is not initial.
    RR_CUST_INKTN = ZCL_VCXI_FFSS_CUST_INKTN=>GET_INSTANCE_INKTN( IF_MATNR = IF_INKTN
                                                                  IF_WERKS = ME->S_PD-WERKS
                                                                  IF_DATE  = ME->F_DATE ).

  endmethod.
  method GET_CUST_PRINT.

    if ME->S_PD-WERKS is not initial.
***   Get Customizing
      RR_CUST_PRINT = ZCL_VCXI_FFSS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = ME->S_PD-WERKS ).
    endif.

  endmethod.
  method GET_CUST_TOOL_ANILOX.

    check IF_ANITN       is not initial and
          ME->S_PD-WERKS is not initial.
    RR_CUST_TOOL_ANILOX = ZCL_VCXI_FFSS_CUST_TOOL_ANILOX=>GET_INSTANCE_TOOL_ANILOX( IF_MATNR = IF_ANITN
                                                                                    IF_WERKS = ME->S_PD-WERKS
                                                                                    IF_DATE  = ME->F_DATE ).

  endmethod.
  method GET_XML_DREF.

    RT_DATA = SUPER->GET_XML_DREF( ).

    append value #( NAME = 'S_PD'       VALUE = ref #( ME->S_PD    ) ) to RT_DATA.
    append value #( NAME = 'T_PDINK'    VALUE = ref #( ME->T_PDINK ) ) to RT_DATA.

  endmethod.
  method LOAD_FROM_DB.

    data: LS_TD200 type ZVCXI_FFE_TD200.


***--------------------------------------------------------------------------------------
*** Get Print Design Document Header (Extension Data)
    select single *
           into LS_TD200
           from ZVCXI_FFE_TD200
          where DOKAR eq ME->F_DOKAR
           and  DOKNR eq ME->F_DOKNR
           and  DOKTL eq ME->F_DOKTL
           and  DOKVR eq ME->F_DOKVR.

    check SY-SUBRC eq 0.
    ME->S_PD = LS_TD200-S_PD.

***--------------------------------------------------------------------------------------
*** Get Print Design Document Ink (Extension Data)
    select * from ZVCXI_FFE_TD210
           into corresponding fields of table ME->T_PDINK
          where DOKAR eq ME->F_DOKAR
           and  DOKNR eq ME->F_DOKNR
           and  DOKVR eq ME->F_DOKVR
           and  DOKTL eq ME->F_DOKTL
          order by CINKN.

***--------------------------------------------------------------------------------------
*** Set Plant and Adjust Print Desing Inks
    clear ME->S_PD-WERKS.  "force reset of plant
    ME->SET_WERKS( IF_WERKS = LS_TD200-WERKS ).

  endmethod.
  method REFRESH.

    SUPER->REFRESH( ).

    free: ME->S_PD,
          ME->T_PDINK.

    ME->LOAD_FROM_DB(  ).

  endmethod.
  method SAVE.

    SUPER->SAVE( IF_UPDATE_TASK = IF_UPDATE_TASK ).

    if IF_UPDATE_TASK eq ABAP_TRUE.
      call function 'ZVCXI_FFE_DMS_DB_SAVE_PD'
        in update task
        exporting
          IF_DOKAR = ME->F_DOKAR
          IF_DOKNR = ME->F_DOKNR
          IF_DOKVR = ME->F_DOKVR
          IF_DOKTL = ME->F_DOKTL
          IS_PD    = ME->S_PD
          IT_PDINK = ME->T_PDINK.
    else.
      call function 'ZVCXI_FFE_DMS_DB_SAVE_PD'
        exporting
          IF_DOKAR = ME->F_DOKAR
          IF_DOKNR = ME->F_DOKNR
          IF_DOKVR = ME->F_DOKVR
          IF_DOKTL = ME->F_DOKTL
          IS_PD    = ME->S_PD
          IT_PDINK = ME->T_PDINK.
    endif.

  endmethod.
  method SET_PD.

*** Update Plant first
    if ME->S_PD-WERKS ne IS_PD-WERKS.
      ME->SET_WERKS( IF_WERKS = IS_PD-WERKS ).
    endif.

*** Afterwards update Print Design Header Data if changes remain
    if ME->S_PD ne IS_PD.
      ME->S_PD = IS_PD.
      ME->SET_CHANGED( ABAP_TRUE ).
    endif.

  endmethod.
  method SET_PDINK.

    data: LS_PDINK type ZVCXI_FFE_DMS_S_PDINK.
    data: LT_PDINK type ZVCXI_FFE_DMS_TT_PDINK.
    data: LR_CUST_PRINT       type ref to ZCL_VCXI_FFSS_CUST_PRINT,
          LR_CUST_INKTN       type ref to ZCL_VCXI_FFSS_CUST_INKTN,
          LR_CUST_TOOL_ANILOX type ref to ZCL_VCXI_FFSS_CUST_TOOL_ANILOX.

*** Get Printing Customizing
    LR_CUST_PRINT = ME->GET_CUST_PRINT( ).

***--------------------------------------------------------------------------------------
    loop at IT_PDINK into LS_PDINK.
***   Get Color Code Definiton
      if LS_PDINK-COLCO is not initial.
        if LR_CUST_PRINT is bound.
***       Get Ink Type according to Customizing
          LS_PDINK-TINK = LR_CUST_PRINT->GET_COLCO_TINK( IF_COLCO = LS_PDINK-COLCO ).

***       Get Material according to Customizing
          LR_CUST_PRINT->GET_COLCO_MATNR( exporting IF_COLCO = LS_PDINK-COLCO
                                                    IF_TPRIN = ME->S_PD-TPRIN
                                                    IF_DCONF = ME->F_DATE
                                          importing EF_MATNR = LS_PDINK-MATNR ).

        else.
***       Remove information if not valid
          clear: LS_PDINK-TINK, LS_PDINK-MATNR.
        endif.
      endif.

***   Ink Type Definition
      case ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = LS_PDINK-TINK ).
***     Traditional Inks
        when ZCL_VCXI_FFSS_CUST_PRINT=>C_PRTEC_ANALOG.
          clear: LS_PDINK-S_APVOL,
                 LS_PDINK-S_APVOP.

***     Digital Inks
        when ZCL_VCXI_FFSS_CUST_PRINT=>C_PRTEC_DIGITAL.
          clear: LS_PDINK-COLCO,
                 LS_PDINK-INKTN,
                 LS_PDINK-FSLVE,
                 LS_PDINK-APCTN,
                 LS_PDINK-MSLTN,
                 LS_PDINK-ANITN.
          data(LR_CUST_INK) = ME->GET_CUST_INK( IF_MATNR = LS_PDINK-MATNR ).
          if LR_CUST_INK is bound.
            case ME->F_APDIM.
              when ZCL_VCXI_FFSS_PR_MS_DINK=>C_APDIM_VOLUME.
                LS_PDINK-S_APWGT = LR_CUST_INK->CALC_APWGT( IS_APVOL = LS_PDINK-S_APVOL
                                                            IS_APVOP = LS_PDINK-S_APVOP
                                                            IF_UOM   = LS_PDINK-APWGT_UOM ).
              when ZCL_VCXI_FFSS_PR_MS_DINK=>C_APDIM_MASS.
                LS_PDINK-S_APVOL = LR_CUST_INK->CALC_APVOL( IS_APWGT = LS_PDINK-S_APWGT
                                                            IS_APVOP = LS_PDINK-S_APVOP
                                                            IF_UOM   = LS_PDINK-APVOL_UOM ).
            endcase.
          endif.
      endcase.

***   Get Ink Tool Number Information
      try.
          LR_CUST_INKTN = ME->GET_CUST_INKTN( IF_INKTN = LS_PDINK-INKTN ).
        catch /VCXI/CX_CKX.
          clear LR_CUST_INKTN.
      endtry.
      if LR_CUST_INKTN is bound and
         LR_CUST_INKTN->IS_RELEASED( ).
        LS_PDINK-S_COVRG = LR_CUST_INKTN->S_COVRG.
        LS_PDINK-S_APWGT = LR_CUST_INKTN->S_APWGT.
        LS_PDINK-FSLVE   = LR_CUST_INKTN->F_FSLVE.
      endif.

***   Usage of Sleeve as Ink Tool
      if LS_PDINK-FSLVE eq ABAP_TRUE.
        clear LS_PDINK-MSLTN.    "No Mounting Sleeve needed
      endif.

***   Get Anilox Roll Tool Number Information
      try.
          LR_CUST_TOOL_ANILOX = ME->GET_CUST_TOOL_ANILOX( IF_ANITN = LS_PDINK-ANITN ).
        catch /VCXI/CX_CKX.
          clear LR_CUST_TOOL_ANILOX.
      endtry.
      if LR_CUST_TOOL_ANILOX is bound and
         LR_CUST_TOOL_ANILOX->IS_RELEASED( ).
        LS_PDINK-S_APWGT = LR_CUST_TOOL_ANILOX->S_APWGT.
      endif.

***   Initialize initial UoMs
      if LS_PDINK-COVRG_UOM is initial.
        LS_PDINK-COVRG_UOM = '%'.
      endif.
      if LS_PDINK-APWGT_UOM is initial.
        LS_PDINK-APWGT_UOM   = 'GM2'.
        break CHECK_AGAIN. " Hardcoded Unit
      endif.
      if LS_PDINK-APVOP is not initial.
        if LS_PDINK-APVOL_UOM is initial.
          LS_PDINK-APVOL_UOM   = 'CCM'.
          break CHECK_AGAIN. " Hardcoded Unit
        endif.
        if LS_PDINK-APVOP_UOM is initial.
          LS_PDINK-APVOP_UOM   = 'M2'.
          break CHECK_AGAIN. " Hardcoded Unit
        endif.
      endif.

      append LS_PDINK to LT_PDINK.
    endloop.

***--------------------------------------------------------------------------------------
*** Mark as changed
    if LT_PDINK ne ME->T_PDINK.
      ME->T_PDINK = LT_PDINK.
      ME->SET_CHANGED( IF_CHANGED = ABAP_TRUE ).
    endif.

  endmethod.
  method SET_WERKS.

    check ME->S_PD-WERKS ne IF_WERKS.

    ME->S_PD-WERKS = IF_WERKS.
    ME->SET_CHANGED( ABAP_TRUE ).

*** Redetermine Print Design Ink Details base on changed plant
    ME->SET_PDINK( IT_PDINK = ME->T_PDINK ).

  endmethod.
  method VALIDATE.

    data: LS_PDINK type ZVCXI_FFE_DMS_S_PDINK,
          LS_PRWID type ZVCXI_FFS_S_PRWID.


*** Call Super
    SUPER->VALIDATE( importing EF_VALID = EF_VALID
                               ER_MSG   = ER_MSG ).

***--------------------------------------------------------------------------------------
*** Validate Print Design Data
    if ME->S_PD-TPRIN is initial.
***   Print Type is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '001' ).
    endif.

    if ME->S_PD-PRCAT is initial.
***   Print Category is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '002' ).
    endif.

    if ME->S_PD-RENEX is initial.
***   Repeat Next is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '003' ).
    endif.

    if ME->S_PD-REBEH is initial.
***   Repeat Behind is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '004' ).
    endif.

    if ME->S_PD-S_OPRIW-OPRIW is initial.
***   Overall Print Width is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '005' ).
    endif.

    if ME->S_PD-S_PRRWI-PRRWI is initial.
***   Repeat Width is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '006' ).
    endif.

    if ME->S_PD-S_PRRLE-PRRLE is initial.
***   Repeat Length is not maintained.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '007' ).
    endif.

*** Check Overall Print
    LS_PRWID-PRWID     = ME->S_PD-S_PRRWI-PRRWI * ME->S_PD-RENEX.
    LS_PRWID-PRWID_UOM = ME->S_PD-S_PRRWI-PRRWI_UOM.
    if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY(   IF_CALCV_1     = ME->S_PD-S_OPRIW-OPRIW
                                                      IF_CALCV_UOM_1 = ME->S_PD-S_OPRIW-OPRIW_UOM
                                                      IF_CALCV_2     = LS_PRWID-PRWID
                                                      IF_CALCV_UOM_2 = LS_PRWID-PRWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
***   Overall Print Width is lower then Repeat Next * Repeat Width.
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '008' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Ink Data
    loop at ME->T_PDINK into LS_PDINK.
      ME->VALIDATE_PDINK( IS_PDINK = LS_PDINK
                          IR_MSG   = ER_MSG ).
    endloop.

***--------------------------------------------------------------------------------------
*** Check if valid based on messages
    if LINES( ER_MSG->T_MSG ) eq 0.
      move ABAP_TRUE to EF_VALID.
    else.
      move ABAP_FALSE to EF_VALID.
    endif.

  endmethod.
  method VALIDATE_PDINK.

    data: LS_RELEN type ZVCXI_FFS_S_RELEN.
    data: LR_CUST_INKTN type ref to ZCL_VCXI_FFSS_CUST_INKTN.


***--------------------------------------------------------------------------------------
    if IS_PDINK-MATNR is initial.
***   Ink Material Number is not maintained.
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '009' ).
    endif.

    if IS_PDINK-TINK is initial.
***   Ink Type is not maintained.
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '010' ).
    endif.

    if IS_PDINK-INKSI is initial.
***   Ink Side is not maintained.
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '011' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Tool Data
    if IS_PDINK-INKTN is not initial.
***   Get Ink Tool Information
      LR_CUST_INKTN = ZCL_VCXI_FFSS_CUST_INKTN=>GET_INSTANCE_INKTN( IF_MATNR = IS_PDINK-INKTN
                                                                    IF_WERKS = ME->S_PD-WERKS ).

      if LR_CUST_INKTN          is bound      and
         LR_CUST_INKTN->F_MATNR is not initial.

        if LR_CUST_INKTN->S_COVRG-COVRG is initial.
***       Coverage is not maintained.
          IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '021' ).
        endif.
        if LR_CUST_INKTN->S_APWGT-APWGT is initial.
***       Application Weight is not maintained.
          IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '022' ).
        endif.
****     Check Circumference of each Tool
*        LS_RELEN-RELEN     = ME->S_PD-S_PRRLE-PRRLE * ME->S_PD-REBEH.
*        LS_RELEN-RELEN_UOM = ME->S_PD-S_PRRLE-PRRLE_UOM.
*        if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LR_CUST_INKTN->S_CIRCU-CIRCU
*                                                        IF_CALCV_UOM_1 = LR_CUST_INKTN->S_CIRCU-CIRCU_UOM
*                                                        IF_CALCV_2     = LS_RELEN-RELEN
*                                                        IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
*                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
****       Circumference is lower then Repeat behind * Repeat Length.
*          IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
*                               IF_MSGTY = 'E'
*                               IF_MSGNO = '023' ).
*        endif.
****     Check Print Width of each Tool lower then Overall Print Width
*        if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LR_CUST_INKTN->S_PRWID-PRWID
*                                                        IF_CALCV_UOM_1 = LR_CUST_INKTN->S_PRWID-PRWID_UOM
*                                                        IF_CALCV_2     = ME->S_PD-S_OPRIW-OPRIW
*                                                        IF_CALCV_UOM_2 = ME->S_PD-S_OPRIW-OPRIW_UOM
*                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
****       Print Width (Tool) is lower then Overall Print Width.
*          IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
*                               IF_MSGTY = 'E'
*                               IF_MSGNO = '024' ).
*        endif.

***     Check Tool Status
        if LR_CUST_INKTN->IS_RELEASED( ) ne ABAP_TRUE.
***       Ink Tool is not released.
          IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '025').
        endif.
      endif.
    else.
***   Ink Tool is not maintained.
      IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFE_DMS'
                           IF_MSGTY = 'E'
                           IF_MSGNO = '026').

    endif.

  endmethod.
