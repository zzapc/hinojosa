
class ZCL_VCXI_P0SS_UI_SHEET_SE definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_SHEET_SE_VIS type ZVCXI_P0SS_S_SHEET_SE_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SHEET_SE_VIS
    importing
      !IS_SHEET_SE_VIS type ZVCXI_P0SS_S_SHEET_SE_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_UC_DIV_E type SYUCOMM value 'UC0100_DIV_E'. "#EC NOTEXT
  data R_PR_SHEET_SE type ref to ZCL_VCXI_P0SS_PR_SHEET_SE .
  data F_CURSOR type SCRFNAME .
  constants C_UC_DIV_C type SYUCOMM value 'UC0100_DIV_C'. "#EC NOTEXT

  methods MODIFY_SCREEN_DIV
    raising
      /VCXI/CX_CKX .
  methods INIT_ACTIV_AREA
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_UI_SHEET_SE definition
class ZCL_VCXI_P0SS_UI_SHEET_SE implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

**** Bind UI to Dynpro
*  call function 'ZVCXI_P0SS_UI_SHEET_SE_BIND'
*    exporting
*      IR_UI_SHEET_SE = ME
*    importing
*      ES_DYNP        = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SHEET_SE.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

***       Modify Division Screen Elements
          ME->MODIFY_SCREEN_DIV( ).

          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
***       Set all Visible Button's to active
          if SCREEN-GROUP4    eq 'BUT' and
             SCREEN-INVISIBLE eq 0.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

  ME->INIT_ACTIV_AREA( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_SHEET_SE_VIS.

  data:  LS_DTRIL    type ZVCXI_P0SS_S_DTRIL,
         LS_DTRIW    type ZVCXI_P0SS_S_DTRIW,
         LS_TRIPL    type ZVCXI_P0SS_S_TRIPL,
         LS_TRIPS    type ZVCXI_P0SS_S_TRIPS,
         LS_TRISL    type ZVCXI_P0SS_S_TRISL,
         LS_TRISS    type ZVCXI_P0SS_S_TRISS,
         LS_SHTNL    type ZVCXI_P0SS_S_SHTNL,
         LS_SHTNW    type ZVCXI_P0SS_S_SHTNW,
         LS_LTITO    type ZVCXI_P0S_S_LTITO.

***--------------------------------------------------------------------------------------
*** Tool Info
  if ME->S_SHEET_SE_VIS-TDCUT ne IS_SHEET_SE_VIS-TDCUT.
    ME->R_PR_SHEET_SE->SET_TDCUT( IF_TDCUT = IS_SHEET_SE_VIS-TDCUT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
  if ME->S_SHEET_SE_VIS-DCUTT ne IS_SHEET_SE_VIS-DCUTT.
    ME->R_PR_SHEET_SE->SET_DCUTT( IF_DCUTT = IS_SHEET_SE_VIS-DCUTT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
*** Set Tool Life Time
  if ME->S_SHEET_SE_VIS-LTITO ne IS_SHEET_SE_VIS-LTITO.
    move-corresponding IS_SHEET_SE_VIS to LS_LTITO.
    ME->R_PR_SHEET_SE->SET_LTITO( IS_LTITO = LS_LTITO
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
  if ME->S_SHEET_SE_VIS-SHTDI ne IS_SHEET_SE_VIS-SHTDI.
    ME->R_PR_SHEET_SE->SET_SHTDI( IF_SHTDI = IS_SHEET_SE_VIS-SHTDI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** CAD Drawing number and Attachment Tooling Text
  if ME->S_SHEET_SE_VIS-ATTOT ne IS_SHEET_SE_VIS-ATTOT.
    ME->R_PR_SHEET_SE->SET_ATTOT( IF_ATTOT = IS_SHEET_SE_VIS-ATTOT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SHEET_SE_VIS-DRAWN ne IS_SHEET_SE_VIS-DRAWN.
    ME->R_PR_SHEET_SE->SET_DRAWN( IF_DRAWN = IS_SHEET_SE_VIS-DRAWN
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

***--------------------------------------------------------------------------------------
*** Set Division Type
  if ME->S_SHEET_SE_VIS-TDIVI ne IS_SHEET_SE_VIS-TDIVI.
    ME->R_PR_SHEET_SE->SET_TDIVI( IF_TDIVI = IS_SHEET_SE_VIS-TDIVI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Division Details only if a type is maintained
  if ME->R_PR_SHEET_SE->GET_TDIVI( ) is not initial.
    if ME->S_SHEET_SE_VIS-SDIVI ne IS_SHEET_SE_VIS-SDIVI.
      ME->R_PR_SHEET_SE->SET_SDIVI( IF_SDIVI = IS_SHEET_SE_VIS-SDIVI
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Division Ups always for Sawing - Chopping only for choosen Sequence.
    if ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'S' or
     ( ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'C' and
       ME->R_PR_SHEET_SE->GET_SDIVI( ) eq 'L' ).
      if ME->S_SHEET_SE_VIS-DUPSL ne IS_SHEET_SE_VIS-DUPSL.
        ME->R_PR_SHEET_SE->SET_DUPSL( IF_DUPSL = IS_SHEET_SE_VIS-DUPSL
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.
    if ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'S' or
     ( ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'C' and
       ME->R_PR_SHEET_SE->GET_SDIVI( ) eq 'W' ).
      if ME->S_SHEET_SE_VIS-DUPSW ne IS_SHEET_SE_VIS-DUPSW.
        ME->R_PR_SHEET_SE->SET_DUPSW( IF_DUPSW = IS_SHEET_SE_VIS-DUPSW
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

*** Set Division Trim
    if ME->S_SHEET_SE_VIS-DTRIL ne IS_SHEET_SE_VIS-DTRIL.
      move-corresponding IS_SHEET_SE_VIS to LS_DTRIL.
      ME->R_PR_SHEET_SE->SET_DTRIL( IS_DTRIL = LS_DTRIL
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if ME->S_SHEET_SE_VIS-DTRIW ne IS_SHEET_SE_VIS-DTRIW.
      move-corresponding IS_SHEET_SE_VIS to LS_DTRIW.
      ME->R_PR_SHEET_SE->SET_DTRIW( IS_DTRIW = LS_DTRIW
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Set Trim Sales
  if ME->S_SHEET_SE_VIS-TRISL ne IS_SHEET_SE_VIS-TRISL.
    move-corresponding IS_SHEET_SE_VIS to LS_TRISL.
    ME->R_PR_SHEET_SE->SET_TRISL( IS_TRISL = LS_TRISL
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
  if ME->S_SHEET_SE_VIS-TRISS ne IS_SHEET_SE_VIS-TRISS.
    move-corresponding IS_SHEET_SE_VIS to LS_TRISS.
    ME->R_PR_SHEET_SE->SET_TRISS( IS_TRISS = LS_TRISS
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Trim Production
  if ME->S_SHEET_SE_VIS-TRIPL ne IS_SHEET_SE_VIS-TRIPL.
    move-corresponding IS_SHEET_SE_VIS to LS_TRIPL.
    ME->R_PR_SHEET_SE->SET_TRIPL( IS_TRIPL = LS_TRIPL
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
  if ME->S_SHEET_SE_VIS-TRIPS ne IS_SHEET_SE_VIS-TRIPS.
    move-corresponding IS_SHEET_SE_VIS to LS_TRIPS.
    ME->R_PR_SHEET_SE->SET_TRIPS( IS_TRIPS = LS_TRIPS
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

***--------------------------------------------------------------------------------------
*** Set Net Sheet Sizes
  if ME->S_SHEET_SE_VIS-SHTNL ne IS_SHEET_SE_VIS-SHTNL.
    move-corresponding IS_SHEET_SE_VIS to LS_SHTNL.
    ME->R_PR_SHEET_SE->SET_SHTNL( IS_SHTNL = LS_SHTNL
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.
  if ME->S_SHEET_SE_VIS-SHTNW ne IS_SHEET_SE_VIS-SHTNW.
    move-corresponding IS_SHEET_SE_VIS to LS_SHTNW.
    ME->R_PR_SHEET_SE->SET_SHTNW( IS_SHTNW = LS_SHTNW
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  case IF_UCOMM.
*** Toggle Button Flag for Sheet Divison
    when C_UC_DIV_E.
      move ABAP_TRUE  to ME->R_PR_SHEET_SE->F_DIV_ACTIV.
    when C_UC_DIV_C.
      move ABAP_FALSE to ME->R_PR_SHEET_SE->F_DIV_ACTIV.

  endcase.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SHEET_SE.

endmethod.
method INIT_ACTIV_AREA.

  check ME->R_PR_SHEET_SE->F_DIV_ACTIV eq ABAP_UNDEFINED.

  if ME->S_SHEET_SE_VIS-TDIVI is not initial.
    move ABAP_TRUE  to ME->R_PR_SHEET_SE->F_DIV_ACTIV.
  endif.

endmethod.
method INIT_VIS.

  data:  LF_PTYPE    type ZVCXI_P0S_PTYPE.
  data:  LS_SHTGL    type ZVCXI_P0SS_S_SHTGL,
         LS_SHTGW    type ZVCXI_P0SS_S_SHTGW,
         LS_DTRIL    type ZVCXI_P0SS_S_DTRIL,
         LS_DTRIW    type ZVCXI_P0SS_S_DTRIW,
         LS_TRISL    type ZVCXI_P0SS_S_TRISL,
         LS_TRISS    type ZVCXI_P0SS_S_TRISS,
         LS_TRIPL    type ZVCXI_P0SS_S_TRIPL,
         LS_TRIPS    type ZVCXI_P0SS_S_TRIPS,
         LS_SHTNL    type ZVCXI_P0SS_S_SHTNL,
         LS_SHTNW    type ZVCXI_P0SS_S_SHTNW,
         LS_LTITO    type ZVCXI_P0S_S_LTITO.

  free: ME->S_SHEET_SE_VIS.

***--------------------------------------------------------------------------------------
*** Get Tooling/CAD Info's
  move ME->R_PR_SHEET_SE->GET_TDCUT( )         to ME->S_SHEET_SE_VIS-TDCUT.
  move ME->R_PR_SHEET_SE->GET_TDCUT_DESCR( )   to ME->S_SHEET_SE_VIS-TDCUT_DESCR.
  move ME->R_PR_SHEET_SE->GET_DCUTT( )         to ME->S_SHEET_SE_VIS-DCUTT.
  move ME->R_PR_SHEET_SE->GET_DRAWN( )         to ME->S_SHEET_SE_VIS-DRAWN.
  move ME->R_PR_SHEET_SE->GET_ATTOT( )         to ME->S_SHEET_SE_VIS-ATTOT.
  move ME->R_PR_SHEET_SE->GET_LTITO( )         to LS_LTITO.
  move-corresponding LS_LTITO                  to ME->S_SHEET_SE_VIS.
  move ME->R_PR_SHEET_SE->GET_SHTDI( )         to ME->S_SHEET_SE_VIS-SHTDI.
  move ME->R_PR_SHEET_SE->GET_SHTDI_DESCR( )   to ME->S_SHEET_SE_VIS-SHTDI_DESCR.

*** Tool Link Icon
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'TLINK' ) eq ABAP_TRUE.
    move ICON_CONNECT                          to ME->S_SHEET_SE_VIS-TLINK_ICON.
    move 'Linked to Tool'(T01)                 to ME->S_SHEET_SE_VIS-TLINK_DESCR.
  else.
    move ICON_DISCONNECT                       to ME->S_SHEET_SE_VIS-TLINK_ICON.
    move 'Not linked to Tool'(T02)             to ME->S_SHEET_SE_VIS-TLINK_DESCR.
  endif.

*** Material X-Plant Status of Tool
  if ME->S_SHEET_SE_VIS-DCUTT is not initial.
    ZCL_VCXI_P0M_SERVICE=>GET_MSTAE( exporting IF_MATNR = ME->S_SHEET_SE_VIS-DCUTT
                                     importing EF_MSTAE = ME->S_SHEET_SE_VIS-MSTAE
                                               EF_DESCR = ME->S_SHEET_SE_VIS-MSTAE_DESCR ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Gross Sheet Size
  move ME->R_PR_SHEET_SE->GET_SHTGL( )         to LS_SHTGL.
  move ME->R_PR_SHEET_SE->GET_SHTGW( )         to LS_SHTGW.
  move-corresponding LS_SHTGL                  to ME->S_SHEET_SE_VIS.
  move-corresponding LS_SHTGW                  to ME->S_SHEET_SE_VIS.

***--------------------------------------------------------------------------------------
*** Get Division Definitions
  move ME->R_PR_SHEET_SE->GET_TDIVI( )         to ME->S_SHEET_SE_VIS-TDIVI.
  move ME->R_PR_SHEET_SE->GET_TDIVI_DESCR( )   to ME->S_SHEET_SE_VIS-TDIVI_DESCR.
  move ME->R_PR_SHEET_SE->GET_SDIVI( )         to ME->S_SHEET_SE_VIS-SDIVI.
  move ME->R_PR_SHEET_SE->GET_SDIVI_DESCR( )   to ME->S_SHEET_SE_VIS-SDIVI_DESCR.
  move ME->R_PR_SHEET_SE->GET_DUPSL( )         to ME->S_SHEET_SE_VIS-DUPSL.
  move ME->R_PR_SHEET_SE->GET_DUPSW( )         to ME->S_SHEET_SE_VIS-DUPSW.
  move ME->R_PR_SHEET_SE->GET_DTRIL( )         to LS_DTRIL.
  move ME->R_PR_SHEET_SE->GET_DTRIW( )         to LS_DTRIW.
  move-corresponding LS_DTRIL                  to ME->S_SHEET_SE_VIS.
  move-corresponding LS_DTRIW                  to ME->S_SHEET_SE_VIS.


***--------------------------------------------------------------------------------------
*** Get Side and LE/TR Trim Sales and Product
  ME->R_PR_SHEET_SE->GET_TRIPL( importing ES_TRIPL = LS_TRIPL ).
  ME->R_PR_SHEET_SE->GET_TRIPS( importing ES_TRIPS = LS_TRIPS ).
  move-corresponding LS_TRIPL                  to ME->S_SHEET_SE_VIS.
  move-corresponding LS_TRIPS                  to ME->S_SHEET_SE_VIS.
  ME->R_PR_SHEET_SE->GET_TRISL( importing ES_TRISL = LS_TRISL ).
  ME->R_PR_SHEET_SE->GET_TRISS( importing ES_TRISS = LS_TRISS ).
  move-corresponding LS_TRISL                  to ME->S_SHEET_SE_VIS.
  move-corresponding LS_TRISS                  to ME->S_SHEET_SE_VIS.

*** Set Indicator for Activ flag.
  if ME->R_PR_SHEET_SE->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.
    move '<- Active Trim'(ACT) to ME->S_SHEET_SE_VIS-STRIM_ACTIV.
    clear: ME->S_SHEET_SE_VIS-PTRIM_ACTIV.
  else.
    clear: ME->S_SHEET_SE_VIS-STRIM_ACTIV.
    move '<- Active Trim'(ACT) to ME->S_SHEET_SE_VIS-PTRIM_ACTIV.
  endif.
***--------------------------------------------------------------------------------------
*** Get Net Sheet Size
  ME->R_PR_SHEET_SE->GET_SHTNL( importing ES_SHTNL = LS_SHTNL ).
  ME->R_PR_SHEET_SE->GET_SHTNW( importing ES_SHTNW = LS_SHTNW ).
  move-corresponding LS_SHTNL                  to ME->S_SHEET_SE_VIS.
  move-corresponding LS_SHTNW                  to ME->S_SHEET_SE_VIS.

*** Set Parameter ID for Product Type
  LF_PTYPE = ME->R_PR_SHEET_SE->GET_PTYPE( ).
  set parameter id 'ZVCXI_P0SS_PTYPE' field LF_PTYPE.

endmethod.
method MODIFY_SCREEN_DIV.

*** -----------------------------------------------------------------------
*** Divisions Active
  if ME->R_PR_SHEET_SE->F_DIV_ACTIV eq ABAP_TRUE.
***
    if SCREEN-GROUP1 eq 'DIV' and
       SCREEN-GROUP2 eq 'E'.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-OUTPUT.
      move 1 to SCREEN-INVISIBLE.
      move 0 to SCREEN-ACTIVE.
    elseif SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP2 eq 'C'.
      move 1 to SCREEN-INPUT.
    elseif SCREEN-NAME = 'INITIAL_LINE1'.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-OUTPUT.
      move 1 to SCREEN-INVISIBLE.
      move 0 to SCREEN-ACTIVE.
    endif.

    if SCREEN-GROUP1 eq 'DIV' and
       SCREEN-GROUP3 eq 'TRL'.
      if ME->R_PR_SHEET_SE->GET_DUPSL( ) le 1.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif ME->R_PR_SHEET_SE->GET_DUPSL( ) gt 1.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.
      endif.

    elseif SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP3 eq 'TRW'.
      if ME->R_PR_SHEET_SE->GET_DUPSW( ) le 1.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif ME->R_PR_SHEET_SE->GET_DUPSW( ) gt 1.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.
      endif.
    endif.

*** -----------------------------------------------------------------------
*** No Divison Type maintained
    if ME->R_PR_SHEET_SE->GET_TDIVI( ) is initial.
      if SCREEN-GROUP1 eq 'DIV' and
         SCREEN-GROUP3 eq 'SEQ'.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'TRI'.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'TYP'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'UPL'.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'UPW'.
        move 0 to SCREEN-INPUT.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.
      endif.

*** -----------------------------------------------------------------------
*** Chopping Division
    elseif ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'C'.
      if SCREEN-GROUP1 eq 'DIV' and
         SCREEN-GROUP3 eq 'SEQ'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
          move 2 to SCREEN-REQUIRED.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.
      endif.

*** -----------------------------------------------------------------------
***   No Sequence Maintained
      if ME->R_PR_SHEET_SE->GET_SDIVI( ) is initial.

        if SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP3 eq 'TYP'.
          if SCREEN-GROUP2 eq 'INP'.
            move 1 to SCREEN-INPUT.
          endif.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPL'.
          move 0 to SCREEN-INPUT.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPW'.
          move 0 to SCREEN-INPUT.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.
        endif.

*** -----------------------------------------------------------------------
***   Sequence Length first
      elseif ME->R_PR_SHEET_SE->GET_SDIVI( ) eq 'L'.

        if SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP3 eq 'TYP'.
          if SCREEN-GROUP2 eq 'INP'.
            move 1 to SCREEN-INPUT.
          endif.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPL'.
          if SCREEN-GROUP2 eq 'INP'.
            move 1 to SCREEN-INPUT.
            move 2 to SCREEN-REQUIRED.
          endif.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPW'.
          move 0 to SCREEN-INPUT.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.
        endif.

*** -----------------------------------------------------------------------
***   Sequence Width first
      elseif ME->R_PR_SHEET_SE->GET_SDIVI( ) eq 'W'.

        if SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP3 eq 'TYP'.
          if SCREEN-GROUP2 eq 'INP'.
            move 1 to SCREEN-INPUT.
          endif.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPL'.
          move 0 to SCREEN-INPUT.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'DIV' and
               SCREEN-GROUP3 eq 'UPW'.
          if SCREEN-GROUP2 eq 'INP'.
            move 1 to SCREEN-INPUT.
            move 2 to SCREEN-REQUIRED.
          endif.
          move 1 to SCREEN-OUTPUT.
          move 0 to SCREEN-INVISIBLE.
          move 1 to SCREEN-ACTIVE.
        endif.


      endif.

*** -----------------------------------------------------------------------
*** Sawing Division
    elseif ME->R_PR_SHEET_SE->GET_TDIVI( ) eq 'S'.
      if SCREEN-GROUP1 eq 'DIV' and
         SCREEN-GROUP3 eq 'SEQ'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
          move 2 to SCREEN-REQUIRED.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'TYP'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'UPL'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
          move 2 to SCREEN-REQUIRED.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      elseif SCREEN-GROUP1 eq 'DIV' and
             SCREEN-GROUP3 eq 'UPW'.
        if SCREEN-GROUP2 eq 'INP'.
          move 1 to SCREEN-INPUT.
          move 2 to SCREEN-REQUIRED.
        endif.
        move 1 to SCREEN-OUTPUT.
        move 0 to SCREEN-INVISIBLE.
        move 1 to SCREEN-ACTIVE.

      endif.
    endif.

*** -----------------------------------------------------------------------
*** Division Inactive
  else.
    if SCREEN-GROUP1 eq 'DIV' and
       SCREEN-GROUP2 eq 'E'.
      move 0 to SCREEN-INPUT.
    elseif SCREEN-GROUP1 eq 'DIV' and
           SCREEN-GROUP2 eq 'C'.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-OUTPUT.
      move 1 to SCREEN-INVISIBLE.
      move 0 to SCREEN-ACTIVE.
    elseif SCREEN-NAME = 'INITIAL_LINE1'.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-OUTPUT.
      move 1 to SCREEN-INVISIBLE.
      move 0 to SCREEN-ACTIVE.
    elseif SCREEN-GROUP1 eq 'DIV'.
      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-OUTPUT.
      move 1 to SCREEN-INVISIBLE.
      move 0 to SCREEN-ACTIVE.
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
