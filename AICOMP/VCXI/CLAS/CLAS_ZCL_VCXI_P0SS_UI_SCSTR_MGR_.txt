
class ZCL_VCXI_P0SS_UI_SCSTR_MGR definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.
  type-pools VRM .

  data S_SCSTR_MGR_VIS type ZVCXI_P0SS_S_SCSTR_MGR_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SCSTR_MGR_VIS
    importing
      !IS_SCSTR_MGR_VIS type ZVCXI_P0SS_S_SCSTR_MGR_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data F_CURSOR type SCRFNAME .
  data R_GRID_SCSTR type ref to ZCL_VCXI_P0SS_GRID_SCSTR .
  data R_GRID_TRIM_ALLOC type ref to ZCL_VCXI_P0SS_GRID_TRIM_ALLOC .
  data R_PR_SCSTR_MGR type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_SCSOP
    importing
      !IF_SCRFNAME type SCRFNAME
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_UI_SCSTR_MGR definition
class ZCL_VCXI_P0SS_UI_SCSTR_MGR implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_P0SS_UI_SCSTR_MGR_BIND'
    exporting
      IR_UI_SCSTR_MGR = ME
    importing
      ES_DYNP         = ME->S_DYNP.

*** Create Grid for GRID_SCSTR
  create object ME->R_GRID_SCSTR
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_GRID_SCSTR'.

*** Create Grid for GRID_TRIM_ALLOC
  create object ME->R_GRID_TRIM_ALLOC
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_GRID_TRIM_ALLOC'.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SCSTR_MGR.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_SCSTR is bound.
    ME->R_GRID_SCSTR->DO_FREE( ).
    clear ME->R_GRID_SCSTR.
  endif.

  if ME->R_GRID_TRIM_ALLOC is bound.
    ME->R_GRID_TRIM_ALLOC->DO_FREE( ).
    clear ME->R_GRID_TRIM_ALLOC.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

*** Init Vis
  ME->INIT_VIS( ).

*** Init Grid
  if ME->R_GRID_SCSTR is bound.
    if ME->R_GRID_SCSTR->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_SCSTR->F_REFRESH_REQ.
    endif.
    ME->R_GRID_SCSTR->REFRESH_GRID( ).
  endif.

  if ME->R_GRID_TRIM_ALLOC is bound.
    if ME->R_GRID_TRIM_ALLOC->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_TRIM_ALLOC->F_REFRESH_REQ.
    endif.
    ME->R_GRID_TRIM_ALLOC->REFRESH_GRID( ).
  endif.

*** Set Valid Drop Downs
  ME->SET_DDVAL_SCSOP( IF_SCRFNAME = 'ZVCXI_P0SS_S_SCSTR_MGR_VIS-SOPCR'
                       IF_CSCOR    = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS ).
  ME->SET_DDVAL_SCSOP( IF_SCRFNAME = 'ZVCXI_P0SS_S_SCSTR_MGR_VIS-SOPLE'
                       IF_CSCOR    = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH ).
endmethod.
method DO_UPDATE_SCSTR_MGR_VIS.

*** Set Score Operation - Length
  if ME->S_SCSTR_MGR_VIS-SOPLE ne IS_SCSTR_MGR_VIS-SOPLE.
    ME->R_PR_SCSTR_MGR->SET_SOPLE( IF_SOPLE = IS_SCSTR_MGR_VIS-SOPLE
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Score Operation - Cross
  if ME->S_SCSTR_MGR_VIS-SOPCR ne IS_SCSTR_MGR_VIS-SOPCR.
    ME->R_PR_SCSTR_MGR->SET_SOPCR( IF_SOPCR = IS_SCSTR_MGR_VIS-SOPCR
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_SCSTR is bound.
    ME->R_GRID_SCSTR->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID_TRIM_ALLOC is bound.
    ME->R_GRID_TRIM_ALLOC->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SCSTR_MGR.

endmethod.
method INIT_VIS.

  free: ME->S_SCSTR_MGR_VIS.

*** Get Score Operation - Length
  move ME->R_PR_SCSTR_MGR->GET_SOPLE( )       to ME->S_SCSTR_MGR_VIS-SOPLE.
  move ME->R_PR_SCSTR_MGR->GET_SOPLE_DESCR( ) to ME->S_SCSTR_MGR_VIS-SOPLE_DESCR.

*** Get Score Operation - Cross
  move ME->R_PR_SCSTR_MGR->GET_SOPCR( )       to ME->S_SCSTR_MGR_VIS-SOPCR.
  move ME->R_PR_SCSTR_MGR->GET_SOPCR_DESCR( ) to ME->S_SCSTR_MGR_VIS-SOPCR_DESCR.

*** Get Base String Width
  move ME->R_PR_SCSTR_MGR->GET_BSTRW( )       to ME->S_SCSTR_MGR_VIS-BSTRW.

*** Get Base String Length
  move ME->R_PR_SCSTR_MGR->GET_BSTRL( )       to ME->S_SCSTR_MGR_VIS-BSTRL.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_DDVAL_SCSOP.

  data:          LF_ID      type       VRM_ID.
  data:          LS_SCSOP   type       ZVCXI_P0SS_S_SCSOP.
  data:          LT_SCSOP   type       ZVCXI_P0SS_TT_SCSOP,
                 LT_VALUE   type       VRM_VALUES.
  field-symbols: <S_VALUE>  type       VRM_VALUE.

***------------------------------------------------------------------------------------------------
*** Get all Operations which are valid
  LT_SCSOP = ME->R_PR_SCSTR_MGR->GET_ALL_VALID_SCSOP( IF_CSCOR = IF_CSCOR ).

  delete LT_SCSOP where CSCOR ne IF_CSCOR.

*** Get right descriptions and add to search help structure
  loop at LT_SCSOP into LS_SCSOP.
    append initial line to LT_VALUE assigning <S_VALUE>.
    move LS_SCSOP-SCSOP to <S_VALUE>-KEY.
    move ZCL_VCXI_P0SS_CUST_SCSTR=>GET_SCSOP_DESCR( IF_SCSOP = LS_SCSOP-SCSOP ) to <S_VALUE>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
  move IF_SCRFNAME to LF_ID.
  call function 'VRM_SET_VALUES'
    exporting
      ID     = LF_ID
      VALUES = LT_VALUE.

endmethod.
