
class ZCL_VCXI_XCSS_GRID_DOC definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  events OPEN_USER
    exporting
      value(IR_GATE_USER) type ref to /VCXI/CL_VKSR_GATE .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSS_S_DOC_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  data R_DOC_USER type ref to ZIF_VCXI_XCSS_DOC_USER .
  data R_GATE_DOC_MGR type ref to /VCXI/CL_VKSR_GATE .
  constants C_FIELDNAME_S_DOC_KEY type FIELDNAME value 'S_DOC_KEY' ##NO_TEXT.
  constants C_FIELDNAME_USAGE type FIELDNAME value 'USAGE' ##NO_TEXT.
  data F_TEXT_CREATE type TEXT40 .

  methods CREATE_DOC
    importing
      !IF_ID type /VCXI/CKX_ID optional
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods SET_ACTUSE
    importing
      !IS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY
      !IF_ACTUSE type ZVCXI_XCSS_ACTUSE
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods GET_DISABLED_ADD
    redefinition .
  methods GET_DISABLED_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DOUBLE_CLICK
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods HANDLE_TOOLBAR
    redefinition .
  methods HANDLE_UCOMM
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_GRID_DOC definition
class ZCL_VCXI_XCSS_GRID_DOC implementation.
  method ADD_PRVDR.

    data: LF_POSID type /VCXI/VKSR_POSID,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_BL_DOC type ref to ZCL_VCXI_XCSS_BL_DOC.

***--------------------------------------------------------------------------------------
*** If we have only one Provider
    if IF_ID is initial and LINES( ME->T_PRVDR_DEF ) le 1.
      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
      if SY-SUBRC is initial.
        move LS_PRVDR_DEF-ID to LF_ID.
      endif.
    else.
      move IF_ID to LF_ID.
    endif.

*** Get Position to add based on Cursor in Grid
    LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
    if LT_GATE is not initial.
      LF_POSID = LT_GATE[ 1 ]->GET_POSID( ).
    endif.

*** Add 5 to insert after selected position
    LF_POSID += C_POSID_5.

***--------------------------------------------------------------------------------------
*** Call Pop-Up and Request Document Number, Part, Version
    try.
        LR_BL_DOC = ZCL_VCXI_XCSS_POPUP_DOC=>REQUEST_DOC_KEY( IF_DOKAR = conv #( LF_ID ) ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    check LR_BL_DOC          is bound       and
          LR_BL_DOC->F_DOKAR is not initial and
          LR_BL_DOC->F_DOKNR is not initial and
          LR_BL_DOC->F_DOKTL is not initial and
          LR_BL_DOC->F_DOKVR is not initial.

*** Add Document using the DMS Document Manager
    LT_GATE = cast ZCL_VCXI_XCSS_PR_DOC_MGR( ME->R_GATE_DOC_MGR->R_CLSPR )->ADD_DOCS( IT_DOC_KEY = value #( ( LR_BL_DOC->GET_DOC_KEY( ) ) )
                                                                                      IF_POSID   = LF_POSID ).
    RR_GATE = value #( LT_GATE[ 1 ] optional ).

*** Set Usage if possible
    ME->SET_ACTUSE( IS_DOC_KEY = value #( DOKAR = LR_BL_DOC->F_DOKAR
                                          DOKNR = LR_BL_DOC->F_DOKNR
                                          DOKTL = LR_BL_DOC->F_DOKTL
                                          DOKVR = LR_BL_DOC->F_DOKVR )
                    IF_ACTUSE = ABAP_TRUE ).

*** Request Refresh
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method CONSTRUCTOR.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.


    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type
    ME->F_IPRVT = ZCL_VCXI_XCSS_PR_DOC=>C_IPRVT_DOC.

*** Check if provided Gate is for Document User
    if IR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSS_DOC_USER.
      ME->R_DOC_USER ?= IR_GATE->R_CLSPR.
    endif.

*** Get Gate of Document Manager
    if IR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSS_PR_DOC_MGR.
      ME->R_GATE_DOC_MGR = IR_GATE.
    else.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_DOC_MGR=>C_IPRVT_DOC_MGR
                                       IF_INUSE = ABAP_TRUE ).
      if LT_GATE is not initial.
        ME->R_GATE_DOC_MGR = LT_GATE[ 1 ].
      endif.
    endif.

  endmethod.
  method CREATE_DOC.

    data: LF_POSID type /VCXI/VKSR_POSID,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_BL_DOC type ref to ZCL_VCXI_XCSS_BL_DOC.

***--------------------------------------------------------------------------------------
*** If we have only one Provider
    if IF_ID is initial and LINES( ME->T_PRVDR_DEF ) le 1.
      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
      if SY-SUBRC is initial.
        move LS_PRVDR_DEF-ID to LF_ID.
      endif.
    else.
      move IF_ID to LF_ID.
    endif.

*** Get Position to add based on Cursor in Grid
    LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
    if LT_GATE is not initial.
      LF_POSID = LT_GATE[ 1 ]->GET_POSID( ).
    endif.

*** Add 5 to insert after selected position
    LF_POSID += C_POSID_5.

***--------------------------------------------------------------------------------------
*** Create DMS Document using PopUp
    try.
        LR_BL_DOC = ZCL_VCXI_XCSS_POPUP_DOC=>START( IF_DOKAR = conv #( LF_ID ) ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    check LR_BL_DOC          is bound       and
          LR_BL_DOC->F_DOKAR is not initial and
          LR_BL_DOC->F_DOKNR is not initial and
          LR_BL_DOC->F_DOKTL is not initial and
          LR_BL_DOC->F_DOKVR is not initial.

    if ME->R_DOC_USER is bound.
***   Create Document via Document User (provide possibility to enhance data)
      ME->R_DOC_USER->CREATE_DOC( LR_BL_DOC ).
    else.
***   Add Document using the DMS Document Manager
      cast ZCL_VCXI_XCSS_PR_DOC_MGR( ME->R_GATE_DOC_MGR->R_CLSPR )->ADD_DOCS( IT_DOC_KEY = value #( ( LR_BL_DOC->GET_DOC_KEY( ) ) )
                                                                              IF_POSID   = LF_POSID ).
    endif.

*** Request Refresh
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method DEL_PRVDR.

    break TBD. "-> go back to standard?

    data: LT_GATE type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

*** Free Selected Gates
    LT_GATE = ME->GET_SELECTED_GATES( ).
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.

***   Check if Gate is changeable and can be deleted
      if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
        LR_GATE->SET_EVENT( 'DEACTIVATED' ).
      endif.
    endloop.

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method GET_DISABLED_ADD.

    data:  LF_LOCKED       type /VCXI/CKX_LOCKED.
    data:  LS_PRVDR_DEF    type /VCXI/VKSR_S_PRVDR_DEF.

***--------------------------------------------------------------------------------------
*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      return.
    endif.

*** Do general DVC Check if Function is activ
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE_DOC_MGR
                                                  IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      return.
    endif.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      RF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).
      check RF_DISABLED eq ABAP_FALSE.
      exit.
    endloop.

  endmethod.
  method GET_DISABLED_DEL.

    data:  LF_LOCKED       type        /VCXI/CKX_LOCKED.
    data:  LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.

***--------------------------------------------------------------------------------------
*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      return.
    endif.

*** Do general DVC Check if Function is activ
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE_DOC_MGR
                                                  IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      return.
    endif.

*** Check if irrelevant Provider available
    if ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_TRUE.
      move ABAP_FALSE to RF_DISABLED.
      return.
    endif.

*** Get delete Button in Grid or not in Grid
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      RF_DISABLED = ME->CHECK_PRVDR_DEL( IF_ID = LS_PRVDR_DEF-ID ).
      check RF_DISABLED eq ABAP_FALSE.
      return.
    endloop.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_COLPOS type I.
    field-symbols: <S_FCAT> type LVC_S_FCAT.


***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE_DOC_MGR->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE_DOC_MGR->IS_INUSE( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.

***     Set Technical Fields
        when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

***     Set Where-Used as Icon
        when 'USAGE'.
          move ABAP_TRUE    to <S_FCAT>-ICON.

***     Active Use Flag
        when 'ACTUSE'.
          move ABAP_TRUE  to <S_FCAT>-CHECKBOX.

          if ME->R_DOC_USER is not bound.
            move ABAP_TRUE to <S_FCAT>-TECH.

          elseif LF_LOCKED eq ABAP_TRUE and
                 LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
            move ABAP_TRUE  to <S_FCAT>-HOTSPOT.
          endif.
      endcase.

***--------------------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ACTUSE'.  <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DOKAR'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DOKTL'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DOKVR'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DKTXT'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DOKFI'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DOKST'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'USAGE'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_DOC_GRID type ZVCXI_XCSS_S_DOC_GRID.
    data: LT_DOC_USED  type ZVCXI_XCS_TT_DOC_KEY,
          LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_GATE_USER type /VCXI/VKSR_TT_GATE.
    data: LR_PR_DOC type ref to ZCL_VCXI_XCSS_PR_DOC,
          LR_GATE   type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type        ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get active usages if calling gate is for Document User
    if ME->R_DOC_USER is bound.
      LT_DOC_USED = ME->R_DOC_USER->GET_USAGE( ).
    endif.

*** Get Gates of Documents
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ME->F_IPRVT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
***   Get Document Data
      move LR_GATE->R_CLSPR  ?to LR_PR_DOC.
      check LR_PR_DOC is bound.

      clear: LS_DOC_GRID.

      move LR_GATE->GET_POSID( )         to LS_DOC_GRID-POSID.
      move LR_GATE->F_GATKY              to LS_DOC_GRID-GATKY.
      move LR_GATE                       to LS_DOC_GRID-R_GATE.

      LS_DOC_GRID-S_DOC_KEY = LR_PR_DOC->GET_DOC_KEY( ).

      move LR_PR_DOC->GET_DKTXT( )       to LS_DOC_GRID-DKTXT.
      move LR_PR_DOC->GET_DOKFI( )       to LS_DOC_GRID-DOKFI.
      move LR_PR_DOC->GET_DOKST( )       to LS_DOC_GRID-DOKST.

***--------------------------------------------------------------------------------------
***   Get Document Usage
      LT_GATE_USER = LR_PR_DOC->GET_DOC_USER( ).
      if LT_GATE_USER is not initial.
        LS_DOC_GRID-USAGE = |{ ICON_REFERENCE_LIST } ({ LINES( LT_GATE_USER ) })|.
***     Set Field Hotspot
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = ME->C_FIELDNAME_USAGE
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT
                          changing  CT_STYL      = LS_DOC_GRID-T_STYL ).
      endif.

***   Set the Active Use Flag for the used Documents
      if LINE_EXISTS( LT_DOC_USED[ TABLE_LINE = LS_DOC_GRID-S_DOC_KEY ] ).
        move ABAP_TRUE to LS_DOC_GRID-ACTUSE.
      endif.

***--------------------------------------------------------------------------------------
***   Update Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_DOC_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

    move 'B'  to RS_LAYOUT-SEL_MODE.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LR_PR_DOC type ref to ZCL_VCXI_XCSS_PR_DOC,
          LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_CX_CKX type ref to /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type        ANY,
                   <R_GATE> type        ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          check SY-TABIX  eq E_ROW-INDEX.

***       Open Subscreen
          assign component C_FIELDNAME_RGATE of structure <S_DATA> to <R_GATE>.
          check <R_GATE> is assigned.
          move <R_GATE> to LR_GATE.

***       Check Gate is bound and Provider has PR Class
          check LR_GATE          is bound and
                LR_GATE->R_CLSPR is bound.

          try.
              move LR_GATE->R_CLSPR ?to LR_PR_DOC.
              check LR_PR_DOC is bound.
              case E_COLUMN.
                when 'DOKFI'.
***               Open Document
                  LR_PR_DOC->OPEN_DOC( ).
                when others.
***               Open Document Info Record
                  LR_PR_DOC->OPEN_DOC_RECORD( ).
              endcase.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_PR_DOC.
          endtry.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_DOC_GRID type ZVCXI_XCSS_S_DOC_GRID.
    data: LT_GATE_USER type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_USER_DOC type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.
        read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
        move-corresponding <S_DATA> to LS_DOC_GRID.


        case E_COLUMN_ID-FIELDNAME.
***--------------------------------------------------------------------------------------
***       Activate Usage
          when 'ACTUSE'.
            ME->SET_ACTUSE( IS_DOC_KEY = LS_DOC_GRID-S_DOC_KEY
                            IF_ACTUSE  = switch #( LS_DOC_GRID-ACTUSE when ABAP_TRUE then ABAP_FALSE
                                                                                     else ABAP_TRUE ) ).
            ME->CHECK_CHANGED_DATA( ).

***--------------------------------------------------------------------------------------
***       Navigate to Where-Used
          when 'USAGE'.
***         If Application Events are enabled
            check ME->F_APPL_EVENTS eq ABAP_TRUE.

***         Check Gate is bound and Provider has PR Class
            check LS_DOC_GRID-R_GATE          is bound and
                  LS_DOC_GRID-R_GATE->R_CLSPR is bound and
                  LS_DOC_GRID-R_GATE->R_CLSPR is instance of ZCL_VCXI_XCSS_PR_DOC.

***         Get User of Document
            LT_GATE_USER = cast ZCL_VCXI_XCSS_PR_DOC( LS_DOC_GRID-R_GATE->R_CLSPR )->GET_DOC_USER( ).
            check LT_GATE_USER is not initial.

***         Display User of Document
            if LINES( LT_GATE_USER ) eq 1.
***           Display Related Node
              raise event OPEN_USER exporting IR_GATE_USER = LT_GATE_USER[ 1 ].

            else.
***           Display Popup Users of DMS Document
              LR_GATE_USER_DOC = cast ZCL_VCXI_XCSS_PR_DOC( LS_DOC_GRID-R_GATE->R_CLSPR )->DISPLAY_POPUP_USER_DOC( ).
              check LR_GATE_USER_DOC is bound.
              raise event OPEN_USER exporting IR_GATE_USER = LR_GATE_USER_DOC.
            endif.

        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LF_FCODE     type        UI_FUNC,
          LF_TEXT      type        GUI_TEXT,
          LF_DISABLED  type        CUA_ACTIVE.
    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LR_CX_CKX    type ref to /VCXI/CX_CKX.

    try.
        case E_UCOMM.
          when 'CREATE'.
            move ABAP_UNDEFINED to ME->F_REFRESH_REQ.

            loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
              clear: LF_FCODE, LF_TEXT.

***           Get Function Code
              concatenate 'ADD' LS_PRVDR_DEF-ID into LF_FCODE separated by '@'.

***           Get Description
              move LS_PRVDR_DEF-DESCR to LF_TEXT.

***           Check if Provider can be "added"/created
              LF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).

              concatenate 'CREATE' LS_PRVDR_DEF-ID into LF_FCODE separated by '@'.

***           Add Function
              E_OBJECT->ADD_FUNCTION( FCODE    = LF_FCODE
                                      TEXT     = LF_TEXT
                                      DISABLED = LF_DISABLED ).

            endloop.

          when others.
            SUPER->HANDLE_MENU_BUTTON( E_OBJECT = E_OBJECT
                                       E_UCOMM  = E_UCOMM ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LS_TOOLBAR      type        STB_BUTTON.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

    try.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements
        clear LS_TOOLBAR.
        move 'ADD'                    to LS_TOOLBAR-FUNCTION.
        move ME->F_TEXT_ADD           to LS_TOOLBAR-TEXT.
        move F_BTYPE_ADD              to LS_TOOLBAR-BUTN_TYPE.
        move ICON_LINK                to LS_TOOLBAR-ICON.
        move ME->GET_DISABLED_ADD( )  to LS_TOOLBAR-DISABLED.
        append LS_TOOLBAR             to E_OBJECT->MT_TOOLBAR.

        clear LS_TOOLBAR.
        move 'DEL'                    to LS_TOOLBAR-FUNCTION.
        move ME->F_TEXT_DEL           to LS_TOOLBAR-TEXT.
        move C_BTYPE_BUTTON           to LS_TOOLBAR-BUTN_TYPE.
        move ICON_UNLINK              to LS_TOOLBAR-ICON.
        move ME->GET_DISABLED_DEL( )  to LS_TOOLBAR-DISABLED.
        append LS_TOOLBAR             to E_OBJECT->MT_TOOLBAR.


        clear LS_TOOLBAR.
        move 'CREATE'                 to LS_TOOLBAR-FUNCTION.
        move ME->F_TEXT_CREATE        to LS_TOOLBAR-TEXT.
        move F_BTYPE_ADD              to LS_TOOLBAR-BUTN_TYPE.
        move ICON_CREATE              to LS_TOOLBAR-ICON.
        move ME->GET_DISABLED_ADD( )  to LS_TOOLBAR-DISABLED.
        append LS_TOOLBAR             to E_OBJECT->MT_TOOLBAR.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UCOMM.

    data:  LF_ID         type        /VCXI/CKX_ID.
    data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
***     Trigger Create of Document with specific ID
        if E_UCOMM cp 'CREATE@*'.
          move E_UCOMM+7 to LF_ID.
          ME->CREATE_DOC( IF_ID = LF_ID ).
        endif.

        case E_UCOMM.
          when 'CREATE'.
***         Trigger general Create of Document
            ME->CREATE_DOC( ).
          when others.
***         Process Standard Commands
            SUPER->HANDLE_UCOMM( E_UCOMM = E_UCOMM ).
        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.

  endmethod.
  method INIT_TOOLBAR_DEF.

    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.


    clear: ME->T_PRVDR_DEF.

    LT_PRVDR_DEF = ME->R_GATE_DOC_MGR->GET_PRVDR_DEF( IF_IPRVT = ME->F_IPRVT
                                                      IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***   Check if provider is used for GRID
      check ME->CHECK_PRVDR_REL( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.
      append LS_PRVDR_DEF to ME->T_PRVDR_DEF.
    endloop.

    if LINES( ME->T_PRVDR_DEF ) eq 1.
***   Set Type of Add Button
      move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
      move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

***   Set Button Text
      concatenate 'Link'(003)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD    separated by SPACE.
      concatenate 'Unlink'(004)  LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL    separated by SPACE.
      concatenate 'Create'(001)  LS_PRVDR_DEF-DESCR into ME->F_TEXT_CREATE separated by SPACE.

    else.

***   Set Type of Add Button
      move C_BTYPE_MENU to ME->F_BTYPE_ADD.
      move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

***   Set Button Text
      move 'Link'(003)    to ME->F_TEXT_ADD.
      move 'Unlink'(004)  to ME->F_TEXT_DEL.
      move 'Create'(001)  to ME->F_TEXT_CREATE.

    endif.

  endmethod.
  method REFRESH_GRID.

    data: LF_INITIAL_REFRESH   type          ABAP_BOOL.
    data: LS_LAYOUT            type          LVC_S_LAYO.
    data: LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS,
          LT_FCAT              type          LVC_T_FCAT.
    field-symbols: <T_DATA>    type standard table.

*** Check if Abap_True -> Abap_undefined if a Usercommand is handled (e.g. add)
    if ME->F_REFRESH_REQ eq ABAP_TRUE.

      check ME->F_FREED       ne ABAP_TRUE and
            ME->F_REFRESH_REQ eq ABAP_TRUE.
      move ABAP_FALSE to ME->F_REFRESH_REQ.

      if ME->R_GRID is not bound.
        move ABAP_TRUE to LF_INITIAL_REFRESH.
      endif.

***   Initialize if needed
      ME->INIT_CONTAINER( ).
      ME->INIT_GRID( ).
      ME->INIT_STYLE( ).

***   Get Grid Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

***   Get Layout, Field Catalog and Toolbar Exclusion
      move ME->GET_FIELDCAT( )          to LT_FCAT.

***   Call DVC Servcie - Modify Fieldcat
      if ME->R_GATE_DOC_MGR is bound.
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_FCAT( exporting IR_GATE    = ME->R_GATE_DOC_MGR
                                                      IF_CC_NAME = ME->F_CONTAINER_NAME
                                            changing  CT_FCAT    = LT_FCAT ).
      endif.

      move ME->GET_LAYOUT( )            to LS_LAYOUT.
      move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

      if LF_INITIAL_REFRESH ne ABAP_TRUE.
***     Get the Scroll id for ALV Grid
        ME->R_GRID->GET_SCROLL_INFO_VIA_ID( importing ES_COL_INFO = ME->S_SCROLL_COL
                                                      ES_ROW_NO   = ME->S_SCROLL_ROW ).

****    Get the Current cell
        ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                                ES_COL_ID = ME->S_COL
                                                ES_ROW_NO = ME->S_ROW_NO ).
      endif.

***   Refresh ALV Grid
      ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
        exporting
          IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
          IS_LAYOUT                     = LS_LAYOUT
        changing
          IT_FIELDCATALOG               = LT_FCAT
          IT_OUTTAB                     = <T_DATA>
        exceptions
          INVALID_PARAMETER_COMBINATION = 1
          PROGRAM_ERROR                 = 2
          TOO_MANY_LINES                = 3
          others                        = 4 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      if LF_INITIAL_REFRESH ne ABAP_TRUE.
***     Set the original Scroll ID for ALV grid
        ME->R_GRID->SET_SCROLL_INFO_VIA_ID( IS_COL_INFO = ME->S_SCROLL_COL
                                            IS_ROW_NO   = ME->S_SCROLL_ROW ).

***     Set Current Cell
        ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                             IS_COLUMN_ID = ME->S_COL
                                             IS_ROW_NO    = ME->S_ROW_NO ).
      endif.
    endif.

    move ABAP_FALSE to ME->F_REFRESH_REQ.

  endmethod.
  method SET_ACTUSE.

    data: LT_DOC_KEY type ZVCXI_XCS_TT_DOC_KEY.


    check ME->R_DOC_USER is bound.

*** Add/Remove Document to the used Documents ot the User
    LT_DOC_KEY = ME->R_DOC_USER->GET_USAGE( ).
    if IF_ACTUSE eq ABAP_TRUE.
      append IS_DOC_KEY to LT_DOC_KEY.
    else.
      delete LT_DOC_KEY where TABLE_LINE = IS_DOC_KEY.
    endif.
    ME->R_DOC_USER->SET_USAGE( IT_DOC_KEY = LT_DOC_KEY
                               IF_SETBY   = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Hotspot Click
    set handler ME->HANDLE_HOTSPOT_CLICK for ME->R_GRID.

  endmethod.
