
class ZCL_VCXI_FFSS_UI_MS_CORE definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces ZIF_VCXI_FFS_SHCO .

  data S_MS_CORE_VIS type ZVCXI_FFSS_S_MS_CORE_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_MS_CORE_VIS
    importing
      !IS_MS_CORE_VIS type ZVCXI_FFSS_S_MS_CORE_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE .
  constants C_UC_SHCO type SYUCOMM value 'SHCO' ##NO_TEXT.

  methods HANDLE_UC_SHCO
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_UI_MS_CORE definition
class ZCL_VCXI_FFSS_UI_MS_CORE implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_MS_CORE_BIND'
      exporting
        IR_UI_MS_CORE = ME
      importing
        ES_DYNP       = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_MS_CORE.

      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE,
          LF_SETBY  type        /VCXI/VKSR_SETBY,
          LF_FSHCO  type        ZVCXI_FFS_FSHCO,
          LF_CRCUT  type        ZVCXI_FFS_CRCUT.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Set Flag - Shared Core
          if SCREEN-GROUP1 eq 'FSH'.
            if ME->R_PR_MS_CORE->IS_FSHCO_AVAILABLE( ) eq ABAP_FALSE.
              move 0 to SCREEN-ACTIVE.
              clear: LF_FSHCO.
              ME->R_PR_MS_CORE->SET_FSHCO( exporting IF_FSHCO = LF_FSHCO ).
            endif.
          endif.

***       Set Shared Core Button Visibility
          if SCREEN-GROUP1 eq 'SHC'.
            if ME->R_PR_MS_CORE->IS_BUTTON_SHCO_AVAILABLE( ) eq ABAP_FALSE.
              move 0 to SCREEN-ACTIVE.
            else.
              move 1 to SCREEN-ACTIVE.
            endif.
          endif.

***       Set Shared Core ID
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_MS_CORE_VIS-ISHCO'.
            clear LF_FSHCO.
            ME->R_PR_MS_CORE->GET_FSHCO( importing EF_FSHCO = LF_FSHCO ).
            if LF_FSHCO eq ABAP_TRUE.
              move 1 to SCREEN-ACTIVE.
            else.
              move 0 to SCREEN-ACTIVE.
            endif.
          endif.

***       Set Core Material in case of Shared Core
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_MS_CORE_VIS-MATNR' and
             ME->S_MS_CORE_VIS-ISHCO is not initial.
            move 0 to SCREEN-INPUT.
          endif.

***       Set Rolls/Core
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_MS_CORE_VIS-ROPCO'.
            clear: LF_CRCUT.
            ME->R_PR_MS_CORE->GET_CRCUT( importing EF_CRCUT = LF_CRCUT ).
            if LF_CRCUT eq ABAP_FALSE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

*** Initialize VIS
    ME->INIT_VIS( ).

  endmethod.
  method DO_UPDATE_MS_CORE_VIS.

    data: LF_ISHCO  type ZVCXI_FFS_ISHCO.

    check ME->R_PR_MS_CORE is bound.

*** Set Material Number
    if ME->S_MS_CORE_VIS-MATNR ne IS_MS_CORE_VIS-MATNR.
      ME->R_PR_MS_CORE->SET_MATNR( IF_MATNR = IS_MS_CORE_VIS-MATNR
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Rolls/Core
    if ME->S_MS_CORE_VIS-ROPCO ne IS_MS_CORE_VIS-ROPCO.
      ME->R_PR_MS_CORE->SET_ROPCO( IF_ROPCO = IS_MS_CORE_VIS-ROPCO
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Margin
    if ME->S_MS_CORE_VIS-S_COMAR ne IS_MS_CORE_VIS-S_COMAR.
      ME->R_PR_MS_CORE->SET_COMAR( IS_COMAR = IS_MS_CORE_VIS-S_COMAR
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Target Core Length
    if ME->S_MS_CORE_VIS-S_CLETA ne IS_MS_CORE_VIS-S_CLETA.
      ME->R_PR_MS_CORE->SET_CLETA( IS_CLETA = IS_MS_CORE_VIS-S_CLETA
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
    endif.

*** Set Flag - Shared Core
    if ME->S_MS_CORE_VIS-FSHCO ne IS_MS_CORE_VIS-FSHCO.
      ME->R_PR_MS_CORE->SET_FSHCO( IF_FSHCO = IS_MS_CORE_VIS-FSHCO
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Shared Core ID
    move IS_MS_CORE_VIS-ISHCO to LF_ISHCO.
    if IS_MS_CORE_VIS-FSHCO is initial.
      clear LF_ISHCO.
    endif.
    if ME->S_MS_CORE_VIS-ISHCO ne LF_ISHCO.
      ME->R_PR_MS_CORE->SET_ISHCO( IF_ISHCO = LF_ISHCO
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_SHCO.
        ME->HANDLE_UC_SHCO( ).

    endcase.

  endmethod.
  method HANDLE_UC_SHCO.

    data: LF_ICORE    type ZVCXI_FFS_ICORE.
    data: LS_SHCO     type ZVCXI_FFS_S_SHCO.
    data: LT_SHCO     type ZVCXI_FFS_TT_SHCO.

*** Start Popup
    ZCL_VCXI_FFS_POPUP_SHCO=>START( exporting IR_SHCO   = ME
                                              IF_LOCKED = ME->R_GATE->IS_LOCKED( )
                                    importing EF_ICORE  = LF_ICORE ).

    if LF_ICORE is not initial.
      move ME->ZIF_VCXI_FFS_SHCO~GET_SHCO( ) to LT_SHCO.

      read table LT_SHCO into LS_SHCO with key ICORE = LF_ICORE.
      check LS_SHCO-R_GATE is bound.

      ME->R_UIGATE->OPEN_SUBSCREEN( exporting IR_GATE = LS_SHCO-R_GATE ).
      ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_SHCO-R_GATE->F_GATKY ).
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_SHCO-R_GATE->F_GATKY ).
    endif.

  endmethod.
  method INIT_VIS.

    free: ME->S_MS_CORE_VIS.
    check ME->R_PR_MS_CORE is bound.

***--------------------------------------------------------------------------------------
*** Material
    move ME->R_PR_MS_CORE->GET_MATNR( )       to ME->S_MS_CORE_VIS-MATNR.
    move ME->R_PR_MS_CORE->GET_MATNR_DESCR( ) to ME->S_MS_CORE_VIS-MATNR_DESCR.

***--------------------------------------------------------------------------------------
*** Get Core Information
    ME->R_PR_MS_CORE->GET_CRDII( importing ES_CRDII = ME->S_MS_CORE_VIS-S_CRDII ).
    ME->R_PR_MS_CORE->GET_CRLEN( importing ES_CRLEN = ME->S_MS_CORE_VIS-S_CRLEN ).
    ME->R_PR_MS_CORE->GET_CRWTH( importing ES_CRWTH = ME->S_MS_CORE_VIS-S_CRWTH ).
    ME->R_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT = ME->S_MS_CORE_VIS-S_CRWGT ).
    ME->R_PR_MS_CORE->GET_ROPCO( receiving RF_ROPCO = ME->S_MS_CORE_VIS-ROPCO ).
    ME->R_PR_MS_CORE->GET_COMAR( receiving RS_COMAR = ME->S_MS_CORE_VIS-S_COMAR ).
    ME->R_PR_MS_CORE->GET_CLETA( importing ES_CLETA = ME->S_MS_CORE_VIS-S_CLETA ).
    ME->R_PR_MS_CORE->GET_FSHCO( importing EF_FSHCO = ME->S_MS_CORE_VIS-FSHCO ).
    ME->R_PR_MS_CORE->GET_ISHCO( importing EF_ISHCO = ME->S_MS_CORE_VIS-ISHCO ).
    ME->R_PR_MS_CORE->GET_CRCUT( importing EF_CRCUT = ME->S_MS_CORE_VIS-CRCUT ).
    ME->R_PR_MS_CORE->GET_TCORE( importing EF_TCORE = ME->S_MS_CORE_VIS-TCORE
                                           EF_DESCR = ME->S_MS_CORE_VIS-TCORE_DESCR ).

*** Define DropDown Values for Shared Core ID
    ME->R_PR_MS_CORE->SET_DDVAL_ISHCO( ).

  endmethod.
  method ZIF_VCXI_FFS_SHCO~GET_INFO.

    data: LS_SHCO type ZVCXI_FFS_S_SHCO.
    data: LT_SHCO type ZVCXI_FFS_TT_SHCO.

    check ME->R_PR_MS_CORE is bound.
***--------------------------------------------------------------------------------------
*** Get MS Core data
    move ME->R_PR_MS_CORE->GET_MATNR( ) to RS_INFO_VIS-MATNR.
    move ME->R_PR_MS_CORE->GET_DESCR( ) to RS_INFO_VIS-MATNR_DESCR.
    ME->R_PR_MS_CORE->GET_CRLEN( importing ES_CRLEN = RS_INFO_VIS-S_CRLEN ).

*** Get Usage List
    ME->R_PR_MS_CORE->GET_ISHCO_USAGE_LIST( importing ET_SHCO = LT_SHCO ).

*** Calculate Total Target Core Length
    loop at LT_SHCO into LS_SHCO.
      RS_INFO_VIS-CLETT = RS_INFO_VIS-CLETT + LS_SHCO-CLETA.
    endloop.
    move LS_SHCO-CLETA_UOM to RS_INFO_VIS-CLETT_UOM.

  endmethod.
  method ZIF_VCXI_FFS_SHCO~GET_SHCO.

    check ME->R_PR_MS_CORE is bound.

*** Get Usage List
    ME->R_PR_MS_CORE->GET_ISHCO_USAGE_LIST( importing ET_SHCO = RT_SHCO ).

  endmethod.
  method ZIF_VCXI_FFS_SHCO~SET_SHCO.

    data: LF_ICORE      type        ZVCXI_FFS_ICORE,
          LF_ROPCO      type        ZVCXI_FFS_ROPCO.
    data: LS_SHCO       type        ZVCXI_FFS_S_SHCO.
    data: LT_GATE_CORE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_CORE  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

*** Add all Shared Cores
    LT_GATE_CORE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                          IF_INUSE = ABAP_TRUE ).

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CORE ).

    loop at LT_GATE_CORE into LR_GATE_CORE.
      clear: LF_ROPCO, LF_ICORE.

      try.
          move LR_GATE_CORE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_CORE.
      endtry.
      check LR_PR_MS_CORE is bound.

      move LR_PR_MS_CORE->GET_ICORE( ) to LF_ICORE.
      LR_PR_MS_CORE->GET_ROPCO( receiving RF_ROPCO = LF_ROPCO ).

      read table IT_SHCO into LS_SHCO with key ICORE = LF_ICORE.
      check SY-SUBRC is initial.

      check LS_SHCO-ROPCO ne LF_ROPCO.
      LR_PR_MS_CORE->SET_ROPCO( IF_ROPCO = LS_SHCO-ROPCO
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endloop.

  endmethod.
