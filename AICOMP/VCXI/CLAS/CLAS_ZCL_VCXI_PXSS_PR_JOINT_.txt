
class ZCL_VCXI_PXSS_PR_JOINT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PX_JOINT type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_JOINT' ##NO_TEXT.
  constants C_PARID_JOILE type /VCXI/VKS_PARID value 'ZVCXI_P0_JOILE' ##NO_TEXT.
  constants C_PARID_JOIPO type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIPO' ##NO_TEXT.
  constants C_PARID_JOIWI type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIWI' ##NO_TEXT.
  constants C_PARID_NOSTI type /VCXI/VKS_PARID value 'ZVCXI_P0_NOSTI' ##NO_TEXT.
  constants C_PARID_STILE type /VCXI/VKS_PARID value 'ZVCXI_P0_STILE' ##NO_TEXT.
  constants C_PARID_STITP type /VCXI/VKS_PARID value 'ZVCXI_P0_STITP' ##NO_TEXT.

  methods GET_JOILE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRL type ZVCXI_P0SS_FOVRL
    returning
      value(RS_JOILE) type ZVCXI_P0S_S_JOILE
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_JOITY) type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRW type ZVCXI_P0SS_FOVRW
    returning
      value(RS_JOIWI) type ZVCXI_P0S_S_JOIWI
    raising
      /VCXI/CX_CKX .
  methods GET_NOSTI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRS type ZVCXI_P0SS_FOVRS
    returning
      value(RF_NOSTI) type ZVCXI_P0SS_NOSTI
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_JOIDIM
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_JOIDIM) type ref to ZIF_VCXI_PXSS_JOIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_STITP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRS type ZVCXI_P0SS_FOVRS
    returning
      value(RS_STITP) type ZVCXI_P0SS_S_STITP
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods REQ_JOILE
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REQ_JOIWI
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REQ_STITCH
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_JOILE
    importing
      !IS_JOILE type ZVCXI_P0S_S_JOILE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRL type ZVCXI_P0SS_FOVRL optional
    raising
      /VCXI/CX_CKX .
  methods SET_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRW type ZVCXI_P0SS_FOVRW optional
    raising
      /VCXI/CX_CKX .
  methods SET_NOSTI
    importing
      !IF_NOSTI type ZVCXI_P0SS_NOSTI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRS type ZVCXI_P0SS_FOVRS optional
    raising
      /VCXI/CX_CKX .
  methods SET_STITP
    importing
      !IS_STITP type ZVCXI_P0SS_S_STITP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRS type ZVCXI_P0SS_FOVRS optional
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_JOILE type /VCXI/VKSC_IEVNT value 'RECALC_JOILE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_JOIPO type /VCXI/VKSC_IEVNT value 'RECALC_JOIPO' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_JOIWI type /VCXI/VKSC_IEVNT value 'RECALC_JOIWI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_STITCH type /VCXI/VKSC_IEVNT value 'RECALC_STITCH' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_JOILE_CHANGED type /VCXI/VKSC_IEVNT value 'JOILE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIPO_CHANGED type /VCXI/VKSC_IEVNT value 'JOIPO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOITY_CHANGED type /VCXI/VKSC_IEVNT value 'JOITY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIWI_CHANGED type /VCXI/VKSC_IEVNT value 'JOIWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOSTI_CHANGED type /VCXI/VKSC_IEVNT value 'NOSTI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STITP_CHANGED type /VCXI/VKSC_IEVNT value 'STITP_CHANGED' ##NO_TEXT.

  methods CHECK_JOILE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOITY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIWI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_JOILE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_JOIPO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_JOIWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_STITCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_JOINT definition
class ZCL_VCXI_PXSS_PR_JOINT implementation.
  method CHECK_JOILE.

*** Check Joint Type requires Joint Length
    check ME->REQ_JOILE( ).

***----------------------------------------------------------------------------
*** Check Joint Length
    if ME->GET_JOILE( )-JOILE is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Joint Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '457' ).
      endif.
      exit.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Joint Length is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '458' ).
      endif.
    endif.

  endmethod.
  method CHECK_JOITY.

    data: LF_JOITY type ZVCXI_P0S_JOITY,
          LF_EXIST type ABAP_BOOL.


*** Get current Joint Type
    LF_JOITY = ME->GET_JOITY( ).

***----------------------------------------------------------------------------
    if LF_JOITY is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Joint Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '451' ).
      endif.
      exit.
    endif.


***----------------------------------------------------------------------------
*** Check if Joint Type is Valid
    if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY ) is not initial.

***   Check if Joint Type is allowed for Joint Position
      ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_JOIPO( exporting IF_JOITY = LF_JOITY
                                                           IF_JOIPO = ME->GET_JOIPO( )
                                                 importing EF_EXIST = LF_EXIST ).
      if LF_EXIST eq ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Joint Type is maintained and valid for Joint Position.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '454' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Joint Type is maintained but not valid for Joint Position.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '453' ).
        endif.
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Joint Type is maintained but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '452' ).
      endif.
    endif.

  endmethod.
  method CHECK_JOIWI.

*** Check Joint Type requires Joint Width
    check ME->REQ_JOIWI( ).

***----------------------------------------------------------------------------
*** Check Joint Width
    if ME->GET_JOIWI( )-JOIWI is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Joint Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '455' ).
      endif.
      exit.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Joint Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '456' ).
      endif.
    endif.

  endmethod.
  method GET_DESCR.

    data: LF_DESCR  type /VCXI/CKX_DESCR.


    RF_DESCR = SUPER->GET_DESCR( ).

*** Get Description of Joint
    ME->GET_JOITY( importing EF_DESCR = LF_DESCR ).
    if LF_DESCR is not initial.
      RF_DESCR = |{ RF_DESCR } - { LF_DESCR }|.
    endif.

  endmethod.
  method GET_JOILE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).
    move LS_PARAM-ATFLV to RS_JOILE-JOILE.
    move LS_PARAM-UNIT  to RS_JOILE-JOILE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRL is requested.
      EF_FOVRL = cond #( when ME->REQ_JOILE( ) ne ABAP_TRUE                then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

  endmethod.
  method GET_JOIPO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).
    move LS_PARAM-ATWRT to RF_JOIPO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOITY.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.


***----------------------------------------------------------------------------
*** Get Leading Object
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to RF_JOITY.
    move LS_LEOKY-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DESCR( IF_JOITY = RF_JOITY ).
    endif.

  endmethod.
  method GET_JOIWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).
    move LS_PARAM-ATFLV to RS_JOIWI-JOIWI.
    move LS_PARAM-UNIT  to RS_JOIWI-JOIWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRW is requested.
      EF_FOVRW = cond #( when ME->REQ_JOIWI( ) ne ABAP_TRUE                then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

  endmethod.
  method GET_NOSTI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOSTI ).
    move LS_PARAM-ATFLV to RF_NOSTI.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRS is requested.
      EF_FOVRS = cond #( when ME->REQ_STITCH( ) ne ABAP_TRUE               then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

  endmethod.
  method GET_PRVDR_JOIDIM.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Joint Dimension provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_JOIDIM=>C_IPRVT_PX_JOIDIM
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Joint Dimension Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_JOIDIM.
          check RR_JOIDIM is bound.
          move LR_GATE to ER_GATE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_JOIDIM, ER_GATE.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Joint Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_JOITY( ) ).

*** Check Joint Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_JOIWI( ) ).
*** Check Joint Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_JOILE( ) ).


  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Joint Type
    ME->CHECK_JOITY( IR_MESSAGE = IR_MESSAGE ).

*** Check Joint Width
    ME->CHECK_JOIWI( IR_MESSAGE = IR_MESSAGE ).
*** Check Joint Length
    ME->CHECK_JOILE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_STITP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STITP ).
    move LS_PARAM-ATFLV to RS_STITP-STITP.
    move LS_PARAM-UNIT  to RS_STITP-STITP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRS is requested.
      EF_FOVRS = cond #( when ME->REQ_STITCH( ) ne ABAP_TRUE               then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_JOIPO.
        ME->HANDLE_RECALC_JOIPO( ).
      when C_IEVNT_I_RECALC_JOIWI.
        ME->HANDLE_RECALC_JOIWI( ).
      when C_IEVNT_I_RECALC_JOILE.
        ME->HANDLE_RECALC_JOILE( ).
      when C_IEVNT_I_RECALC_STITCH.
        ME->HANDLE_RECALC_STITCH( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_JOILE.

    data: LF_FOVRL  type ZVCXI_P0SS_FOVRL.
    data: LR_JOIDIM type ref to ZIF_VCXI_PXSS_JOIDIM.


    ME->GET_JOILE( importing EF_FOVRL = LF_FOVRL ).
    case LF_FOVRL.
***   No recalculation when overriden
      when ABAP_TRUE.
        return.

***   Reset if not allowed for Joint Type
      when ABAP_UNDEFINED.
        ME->SET_JOILE( IF_SETBY = SPACE ).

***   Calculate Joint Length based on Joint Dimension Provider
      when ABAP_FALSE.
        LR_JOIDIM = ME->GET_PRVDR_JOIDIM( ).
        if LR_JOIDIM is bound.
          ME->SET_JOILE( IS_JOILE = LR_JOIDIM->GET_JOIDIM( )-S_JOILE ).
        else.
          ME->SET_JOILE( IF_SETBY = SPACE ).
        endif.
    endcase.

  endmethod.
  method HANDLE_RECALC_JOIPO.

    data: LR_JOIDIM type ref to ZIF_VCXI_PXSS_JOIDIM.


*** Set Joint Position based on Joint Dimension Provider
    LR_JOIDIM = ME->GET_PRVDR_JOIDIM( ).
    if LR_JOIDIM is bound.
      ME->SET_JOIPO( IF_JOIPO = LR_JOIDIM->GET_JOIDIM( )-JOIPO ).
    endif.

  endmethod.
  method HANDLE_RECALC_JOIWI.

    data: LF_FOVRW  type ZVCXI_P0SS_FOVRW.
    data: LR_JOIDIM type ref to ZIF_VCXI_PXSS_JOIDIM.


    ME->GET_JOIWI( importing EF_FOVRW = LF_FOVRW ).
    case LF_FOVRW.
***   No recalculation when overriden
      when ABAP_TRUE.
        return.

***   Reset if not allowed for Joint Type
      when ABAP_UNDEFINED.
        ME->SET_JOIWI( IF_SETBY = SPACE ).

***   Calculate Joint Width based on Joint Dimension Provider
      when ABAP_FALSE.
        LR_JOIDIM = ME->GET_PRVDR_JOIDIM( ).
        if LR_JOIDIM is bound.
          ME->SET_JOIWI( IS_JOIWI = LR_JOIDIM->GET_JOIDIM( )-S_JOIWI ).
        else.
          ME->SET_JOIWI( IF_SETBY = SPACE ).
        endif.
    endcase.

  endmethod.
  method HANDLE_RECALC_STITCH.

    data: LF_FOVRS type ZVCXI_P0SS_FOVRS,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_TD311 type ZVCXI_P0S_TD311.


    ME->GET_NOSTI( importing EF_FOVRS = LF_FOVRS
                             EF_SETBY = LF_SETBY ).
    case LF_FOVRS.
***   No recalculation when overriden
      when ABAP_TRUE.
        return.

***   Reset if not allowed for Joint Type
      when ABAP_UNDEFINED.
        ME->SET_NOSTI( IF_SETBY = SPACE ).
        ME->SET_STITP( IF_SETBY = SPACE ).

***   Get Settings from Customizing
      when ABAP_FALSE.
        check LF_SETBY is initial.  "Load Customizing just once
        LS_TD311 = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_STITCH_DEF( IF_WERKS = ME->GET_WERKS( ) ).
        if LS_TD311 is not initial.
          ME->SET_NOSTI( IF_NOSTI = LS_TD311-NOSTI ).
          ME->SET_STITP( IS_STITP = LS_TD311-S_STITP ).
        else.
          ME->SET_NOSTI( IF_SETBY = SPACE ).
          ME->SET_STITP( IF_SETBY = SPACE ).
        endif.
    endcase.

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method REQ_JOILE.

    RF_RESULT = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = ME->GET_JOITY( ) )-FRJLE.

  endmethod.
  method REQ_JOIWI.

    RF_RESULT = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = ME->GET_JOITY( ) )-FRJWI.

  endmethod.
  method REQ_STITCH.

    data: LF_EXIST type ABAP_BOOL.

    ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_MCONSU( exporting IF_JOITY = ME->GET_JOITY( )
                                                          IF_ISVCE = 'MC_JSTITCH'
                                                          IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF
                                                importing EF_EXIST = LF_EXIST ).

    if LF_EXIST eq ABAP_TRUE.
      RF_RESULT = ABAP_TRUE.
    endif.

  endmethod.
  method SET_JOILE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).

    if IS_JOILE is supplied.
      LS_PARAM-ATFLV = IS_JOILE-JOILE.
      LS_PARAM-UNIT  = IS_JOILE-JOILE_UOM.
    endif.

*** Identify correct SETBY
    if IF_FOVRL is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRL when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOILE_CHANGED ).
    endif.

  endmethod.
  method SET_JOIPO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).

    if IF_JOIPO is supplied.
      LS_PARAM-ATWRT = IF_JOIPO.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIPO_CHANGED ).
    endif.

  endmethod.
  method SET_JOITY.

    data:  LF_CHANGED type  ABAP_BOOL.
    data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.


    move IF_JOITY to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED =  ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOITY_CHANGED ).
    endif.

  endmethod.
  method SET_JOIWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).

    if IS_JOIWI is supplied.
      LS_PARAM-ATFLV = IS_JOIWI-JOIWI.
      LS_PARAM-UNIT  = IS_JOIWI-JOIWI_UOM.
    endif.

*** Identify correct SETBY
    if IF_FOVRW is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRW when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIWI_CHANGED ).
    endif.

  endmethod.
  method SET_NOSTI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOSTI ).

    if IF_NOSTI is supplied.
      LS_PARAM-ATFLV = IF_NOSTI.
    endif.

*** Identify correct SETBY
    if IF_FOVRS is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRS when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOSTI_CHANGED ).
    endif.

  endmethod.
  method SET_STITP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STITP ).

    if IS_STITP is supplied.
      LS_PARAM-ATFLV = IS_STITP-STITP.
      LS_PARAM-UNIT  = IS_STITP-STITP_UOM.
    endif.

*** Identify correct SETBY
    if IF_FOVRS is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRS when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STITP_CHANGED ).
    endif.

  endmethod.
