
class ZCL_VCXI_FBSS_ND_BCOMP definition
  public
  inheriting from ZCL_VCXI_F0SS_ND_XCOMP
  create public .

public section.

  methods HANDLE_UC_POPUP_SEL
    redefinition .
protected section.

  methods INIT_PRVDR_DEF
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_ND_BCOMP definition
class ZCL_VCXI_FBSS_ND_BCOMP implementation.
  method HANDLE_UC_POPUP_SEL.

    data: LF_ID         type        /VCXI/CKX_ID,
          LF_TRECL      type        ZVCXI_FBS_TRECL,
          LF_PARAM_VAL  type        /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_RECLO      type        ZVCXI_FBSSC_S_BAGTY_RECLO.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX,
          LR_PR_BCOMP   type ref to ZCL_VCXI_FBSS_PR_BCOMP,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Determine Action
    try.
***     Special treatment for Reclosing
        if IF_FCODE cs ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
          move IF_FCODE+4 to LF_ID.

          read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.
          if SY-SUBRC is initial.

***         Get Bag component PR
            if ME->R_GATE is bound.
              try .
                  move ME->R_GATE->R_CLSPR ?to LR_PR_BCOMP.
                catch CX_SY_MOVE_CAST_ERROR.
                  clear LR_PR_BCOMP.
              endtry.
            endif.

            if LINES( LS_PRVDR_DEF-T_RECLO ) gt 1.
***           Call Popup to decide because there are more than 1 entry
              if LR_PR_BCOMP is bound.
                LR_PR_BCOMP->DISPLAY_POPUP_RECLO_STEPS( exporting IT_RECLO = LS_PRVDR_DEF-T_RECLO
                                                        importing EF_TRECL = LF_TRECL ).
              endif.
            else.
              read table LS_PRVDR_DEF-T_RECLO into LS_RECLO index 1.
              if SY-SUBRC is initial.
                move LS_RECLO-TRECL to LF_TRECL.
              endif.
            endif.

***         Add the Reclosing Conversion Step
            move ME->ADD_PRVDR( IF_ID = LF_ID ) to LR_GATE.
            if LR_GATE is bound and LF_TRECL is not initial.
              if LR_PR_BCOMP is bound.
                move LF_TRECL to LF_PARAM_VAL.

***             Set Reclosing Type parameter
                LR_PR_BCOMP->SET_PRVDR_PARAM( exporting IR_GATE = LR_GATE
                                                        IF_PARAM_VAL = LF_PARAM_VAL ).
              endif.
            endif.
          endif.

        elseif IF_FCODE cp 'ADD@*'.
          move IF_FCODE+4 to LF_ID.
          ME->ADD_PRVDR( IF_ID = LF_ID ).
        endif.

        case IF_FCODE.
          when C_UC_MSG.
***         Show Messages
            ME->HANDLE_UC_SHOW_MSG( ).

          when C_UC_RTESPV.
***         Open Routing Supervisor
            ME->OPEN_RTESPV( ).
        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_PRVDR_DEF.

    data: LF_ACTIV_PRVDR type NUMC3.
    data: LS_CSTEP type ZVCXI_FBSSC_S_BAGTY_CSTEP.
    data: LT_PRVDR type /VCXI/VKSR_TT_GATE,
          LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_RECLO type ZVCXI_FBSSC_TT_BAGTY_RECLO.
    data: LR_PR_INPUT type ref to ZCL_VCXI_FBSS_PR_INPUT,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_PRVDR_DEF> type ZVCXI_F0SS_S_PRVDR_DEF.


*** Call Super
    SUPER->INIT_PRVDR_DEF( ).

*** Filter results
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_GATE index 1.
    check LR_GATE is bound.

    try .
        move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.
    check LR_PR_INPUT is bound.

*** Get Bag Type Conversion
    LR_PR_INPUT->GET_BAGTY_CONV( importing ET_CSTEP     = LT_CSTEP
                                           ET_RECLO     = LT_RECLO ).

    loop at ME->T_PRVDR_DEF assigning <S_PRVDR_DEF>.
      clear LF_ACTIV_PRVDR.

      read table LT_CSTEP into LS_CSTEP with key ICSTP = <S_PRVDR_DEF>-ID.
      if SY-SUBRC is initial.
        loop at <S_PRVDR_DEF>-T_GATE_SEQ into LR_GATE.
***       Get all Active Provider with searched ID
          check LR_GATE->F_ID eq <S_PRVDR_DEF>-ID.
          add 1 to LF_ACTIV_PRVDR.
        endloop.

        if LF_ACTIV_PRVDR lt LS_CSTEP-QTYMA.
          if LS_CSTEP-ICSTP eq ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
            move LT_RECLO[] to <S_PRVDR_DEF>-T_RECLO[].
          endif.

          continue.
        endif.
      endif.

      delete table ME->T_PRVDR_DEF from <S_PRVDR_DEF>.
    endloop.

  endmethod.
endclass. "ZCL_VCXI_FBSS_ND_BCOMP implementation
