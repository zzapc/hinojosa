
class ZCL_VCXI_XCSU_PR_SHIPUNIT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_SHIPUNIT type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSU_SHIPUNIT' ##NO_TEXT.
  constants C_PARID_SAPOS type /VCXI/VKS_PARID value 'ZVCXI_XC_SAPOS' ##NO_TEXT.
  constants C_PARID_SAQTY type /VCXI/VKS_PARID value 'ZVCXI_XC_SAQTY' ##NO_TEXT.
  constants C_PARID_SHUNT type /VCXI/VKS_PARID value 'ZVCXI_XC_SHUNT' ##NO_TEXT.
  data F_RESET_SHUNT type ABAP_BOOL .

  methods ADD_PACKMAT
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CALC_ADJ_DIMEN_UPTO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods CALC_DETAILS
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_PACKP
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_PACKP) type ZVCXI_XCSU_PACKP
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_SHUNT
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_SHUNT) type ZVCXI_XCSU_SHUNT
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_SHUTY
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_SHUTY) type ZVCXI_XCSU_SHUTY
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ADJ_DIMEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE optional
    changing
      value(CT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_ADJ_LIMIT
    importing
      !IT_LIMIT type ZVCXI_XCSU_TT_LIMIT optional
    returning
      value(RT_LIMIT) type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_COUNT
    returning
      value(RF_COUNT) type /VCXI/VKS_POSID
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SHIPMGR
    exporting
      !EF_SHSCH type ZVCXI_XCSU_SHSCH
      !ET_PREV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ET_BASE_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ET_AGGR_ADJ_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !ER_PREV_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE
      !ER_NEXT_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE
      !EF_CPACK type ZVCXI_XCSU_CPACK
      !ES_BASE_PRQTY type ZVCXI_XCSU_S_PRQTY
      !ER_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU
    changing
      !CS_PREV_TBQTY type ZVCXI_XCSU_S_TBQTY optional
    raising
      /VCXI/CX_CKX .
  methods GET_DIMEN
    exporting
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_DIMEN
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_LIMIT
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PACKP
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PRQTY
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_HUPI
    exporting
      !EF_PICHP type PL_CHECKPROF
      !ET_HUPII type ZVCXI_XCSU_TT_HUPII
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT
    exporting
      !ET_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NEXT_PACKMAT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_NEXT_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP
    exporting
      !EF_PACKP type ZVCXI_XCSU_PACKP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PALOP_PACKMAT
    returning
      value(RT_PALOP_PACKMAT) type ZVCXI_XCSU_TT_PALOP_PACKMAT
    raising
      /VCXI/CX_CKX .
  methods GET_PICHP
    returning
      value(RF_PICHP) type PL_CHECKPROF
    raising
      /VCXI/CX_CKX .
  methods GET_PIREU
    returning
      value(RF_PIREU) type ZVCXI_XCSU_PIREU
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_DFLT_DEF
    returning
      value(RT_PMATY_DFLT_DEF) type ZVCXI_XCSU_TT_PMATY_DFLT_DEF
    raising
      /VCXI/CX_CKX .
  methods GET_PREV_PACKMAT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PREV_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRQTY
    exporting
      !ES_PRQTY type ZVCXI_XCSU_S_PRQTY
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_SAPOS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SAPOS) type ZVCXI_XCSU_SAPOS
    raising
      /VCXI/CX_CKX .
  methods GET_SAQTY
    returning
      value(RS_SAQTY) type ZVCXI_XCSU_S_SAQTY
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT
    returning
      value(RF_SHUNT) type ZVCXI_XCSU_SHUNT
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_SETBY
    returning
      value(RF_SETBY) type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY
    returning
      value(RF_SHUTY) type ZVCXI_XCSU_SHUTY
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TBQTY
    returning
      value(RS_TBQTY) type ZVCXI_XCSU_S_TBQTY
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods INIT_SHUTY
    raising
      /VCXI/CX_CKX .
  methods SET_ADJ_DIMEN
    importing
      !IT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods SET_DIMEN
    importing
      !IT_DIMEN type ZVCXI_XCSU_TT_DIMEN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_DIMEN
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_LIMIT
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PACKP
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRQTY
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_LIMIT
    importing
      !IT_LIMIT type ZVCXI_XCSU_TT_LIMIT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PACKMAT_INUSE
    importing
      value(IF_INUSE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_PACKP
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PALOP_PACKMAT
    importing
      !IT_PALOP_PACKMAT type ZVCXI_XCSU_TT_PALOP_PACKMAT
    raising
      /VCXI/CX_CKX .
  methods SET_PRQTY
    importing
      !IS_PRQTY type ZVCXI_XCSU_S_PRQTY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SAPOS
    importing
      !IF_SAPOS type ZVCXI_XCSU_SAPOS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SAQTY
    importing
      !IS_SAQTY type ZVCXI_XCSU_S_SAQTY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TBQTY
    importing
      !IS_TBQTY type ZVCXI_XCSU_S_TBQTY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_DIMID_DIMLESS type DIMID value 'AAAADL' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SAQTY type /VCXI/VKSC_IEVNT value 'INIT_SAQTY' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DETAILS type /VCXI/VKSC_IEVNT value 'RECALC_DETAILS' ##NO_TEXT.
  constants C_IEVNT_I_REQ_REDET_DFLT type /VCXI/VKSC_IEVNT value 'REQ_REDET_DFLT' ##NO_TEXT.
  constants C_IEVNT_I_RESET_PMATY type /VCXI/VKSC_IEVNT value 'RESET_PMATY' ##NO_TEXT.
  constants C_IEVNT_I_RESET_SHUNT type /VCXI/VKSC_IEVNT value 'RESET_SHUNT' ##NO_TEXT.
  constants C_IEVNT_I_RESET_SHUTY type /VCXI/VKSC_IEVNT value 'RESET_SHUTY' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_DIMEN_CHANGED type /VCXI/VKSC_IEVNT value 'DIMEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LIMIT_CHANGED type /VCXI/VKSC_IEVNT value 'LIMIT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PACKP_CHANGED type /VCXI/VKSC_IEVNT value 'PACKP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRQTY_CHANGED type /VCXI/VKSC_IEVNT value 'PRQTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REDET_DFLT_REQ type /VCXI/VKSC_IEVNT value 'REDET_DFLT_REQ' ##NO_TEXT.
  constants C_IEVNT_O_REQUEST_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'REQUEST_SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_REQ_RECALC_PACKMAT type /VCXI/VKSC_IEVNT value 'REQUEST_RECALC_PACKMAT_DETAIL' ##NO_TEXT.
  constants C_IEVNT_O_SAPOS_CHANGED type /VCXI/VKSC_IEVNT value 'SAPOS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SAQTY_CHANGED type /VCXI/VKSC_IEVNT value 'SAQTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHUNT_CHANGED type /VCXI/VKSC_IEVNT value 'SHUNT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHUTY_CHANGED type /VCXI/VKSC_IEVNT value 'SHUTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TBQTY_CHANGED type /VCXI/VKSC_IEVNT value 'TBQTY_CHANGED' ##NO_TEXT.
  constants C_PARID_DIMEN type /VCXI/VKS_PARID value 'ZVCXI_XC_DIMEN' ##NO_TEXT.
  constants C_PARID_LIMIT type /VCXI/VKS_PARID value 'ZVCXI_XC_LIMIT' ##NO_TEXT.
  constants C_PARID_PACKP type /VCXI/VKS_PARID value 'ZVCXI_XC_PACKP' ##NO_TEXT.
  constants C_PARID_PRQTY type /VCXI/VKS_PARID value 'ZVCXI_XC_PRQTY' ##NO_TEXT.
  constants C_PARID_TBQTY type /VCXI/VKS_PARID value 'ZVCXI_XC_TBQTY' ##NO_TEXT.
  data F_DIMID type DIMID .
  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU .
  data R_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR .
  data S_COMOD type ZVCXI_XCSU_S_COMOD .
  data T_ADJ_LIMIT type ZVCXI_XCSU_TT_LIMIT .

  methods HANDLE_INIT_SAQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_ADJ_DIMEN
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
      !IT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods CALC_ADJ_LIMIT
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
      !IT_LIMIT type ZVCXI_XCSU_TT_LIMIT
    returning
      value(RT_LIMIT) type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods CALC_PACKMAT_DETAILS
    raising
      /VCXI/CX_CKX .
  methods CALC_TBQTY
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIMEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LIMIT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PACKP
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PMATY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRQTY
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHUNT
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHUTY
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CLEAR_FOR_SHUNT
    raising
      /VCXI/CX_CKX .
  methods CLEAR_FOR_SHUTY
    raising
      /VCXI/CX_CKX .
  methods GET_PACKMAT_EFFCT
    returning
      value(RT_PACKMAT_EFFCT) type ZVCXI_XCSU_TT_PACKMAT_EFFCT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DETAILS
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RESET_PMATY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RESET_SHUNT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RESET_SHUTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods INIT_CUST_SHIPU
    raising
      /VCXI/CX_CKX .
  methods INIT_DIMEN
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_SHIPUNIT definition
class ZCL_VCXI_XCSU_PR_SHIPUNIT implementation.
method ADD_PACKMAT.

  data:  LF_ISVCE         type        ZVCXI_XCS_ISVCE.
  data:  LS_PRVDR_DEF     type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF     type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_PACKMAT    type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
         LR_PR_CPM        type ref to ZCL_VCXI_XCSU_PR_CPM.


*** Get right Packaging Material SVC ID
  LF_ISVCE = ME->R_CUST_SHIPU->GET_ISVCE_FOR_PMATY( IF_PMATY = IF_PMATY ).

***------------------------------------------------------------------------------------------------
*** Find ID of Packaging Material
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ISVCE.
  if SY-SUBRC ne 0.
*** Provider Definition for Packaging Material not found.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSU'
                                          IF_MSGNO = '069' ).
  endif.

***------------------------------------------------------------------------------------------------
*** Create Element
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
  check RR_GATE is bound.

*** Set InUse
  RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  try.
      move RR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_PACKMAT.
  endtry.

  if LR_PR_PACKMAT is bound.
***------------------------------------------------------------------------------------------------
*** Set Packaging Material Type
    LR_PR_PACKMAT->SET_PMATY( IF_PMATY = IF_PMATY
                              IF_SETBY = IF_SETBY ).
  else.

    try.
        move RR_GATE->R_CLSPR ?to LR_PR_CPM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_CPM.
    endtry.

    if LR_PR_CPM is bound.
***------------------------------------------------------------------------------------------------
*** Set Packaging Material Type
      LR_PR_CPM->SET_PMATY( IF_PMATY = IF_PMATY
                            IF_SETBY = IF_SETBY ).
    endif.
  endif.


endmethod.
method CALC_ADJ_DIMEN.

  data:          LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data:          LR_PR_PACKMAT type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM     type ref to ZCL_VCXI_XCSU_PR_CPM,
                 LR_GATE       type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_DIMEN>     type        ZVCXI_XCSU_S_DIMEN.

*** all dimensions should persist
  RT_DIMEN = IT_DIMEN.
  LT_GATE  = IT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** adjust for each packmat
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.
      RT_DIMEN = LR_PR_PACKMAT->CALC_ADJ_DIMEN( IT_DIMEN = RT_DIMEN ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.
        RT_DIMEN = LR_PR_CPM->CALC_ADJ_DIMEN( IT_DIMEN = RT_DIMEN ).
      endif.
    endif.
  endloop.

*** Dimension should not be less than zero after adjustments.
  loop at RT_DIMEN assigning <S_DIMEN>.
    if <S_DIMEN>-DIMVA lt 0.
      <S_DIMEN>-DIMVA = 0.
    endif.
  endloop.

endmethod.
method CALC_ADJ_DIMEN_UPTO.

  data:          LF_MSGV1               type        SYMSGV,
                 LF_MSGV2               type        SYMSGV,
                 LF_SHUTY               type        ZVCXI_XCSU_SHUTY,
                 LF_SHUNT               type        ZVCXI_XCSU_SHUNT,
                 LF_PACKP               type        ZVCXI_XCSU_PACKP,
                 LF_FMNSH               type        ZVCXI_XCSU_FMNSH,
                 LF_FOVRR_PACKP         type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_PRQTY         type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_DIMEN         type        ZVCXI_XCS_FOVRR.
  data:          LS_PRQTY               type        ZVCXI_XCSU_S_PRQTY,
                 LS_BASE_PRQTY          type        ZVCXI_XCSU_S_PRQTY,
                 LS_SAQTY               type        ZVCXI_XCSU_S_SAQTY.
  data:          LT_DIMEN               type        ZVCXI_XCSU_TT_DIMEN,
                 LT_PREV_DIMEN          type        ZVCXI_XCSU_TT_DIMEN,
                 LT_BASE_DIMEN          type        ZVCXI_XCSU_TT_DIMEN,
                 LT_LIMIT               type        ZVCXI_XCSU_TT_LIMIT,
                 LT_ADJ_LIMIT           type        ZVCXI_XCSU_TT_LIMIT,
                 LT_PACKMAT_EFFCT       type        ZVCXI_XCSU_TT_PACKMAT_EFFCT.
  data:          LR_CX_ILLEGAL_FUNC     type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND  type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING    type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR   type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_DIMEN>              type        ZVCXI_XCSU_S_DIMEN.

*** retrieve override values
  LF_FOVRR_PACKP = ME->GET_FOVRR_PACKP( ).
  LF_FOVRR_PRQTY = ME->GET_FOVRR_PRQTY( ).
  LF_FOVRR_DIMEN = ME->GET_FOVRR_DIMEN( ).

  if LF_FOVRR_DIMEN eq ABAP_FALSE.
*** retrieve initial values
    LF_SHUTY = ME->GET_SHUTY( ).
    LF_SHUNT = ME->GET_SHUNT( ).
    ME->GET_PACKP( importing EF_PACKP = LF_PACKP ).
    ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).
    LS_SAQTY = ME->GET_SAQTY( ).

    ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).
    ME->GET_LIMIT( importing ET_LIMIT = LT_LIMIT ).

    LT_PACKMAT_EFFCT = ME->GET_PACKMAT_EFFCT( ).

*** find shipping manager to retrieve previous dimensions and adjusted limits
    ME->GET_DETAIL_SHIPMGR( importing ET_PREV_DIMEN     = LT_PREV_DIMEN
                                      ET_BASE_DIMEN     = LT_BASE_DIMEN
                                      ES_BASE_PRQTY     = LS_BASE_PRQTY
                                      ET_AGGR_ADJ_LIMIT = LT_ADJ_LIMIT ).

*** no processing if basic shipping unit values have not been enetered
    check: LF_SHUTY is not initial,
           LF_SHUNT is not initial.

    if LT_ADJ_LIMIT ne ME->T_ADJ_LIMIT.
      move LT_ADJ_LIMIT to ME->T_ADJ_LIMIT.
***   Send Event - Set Limit's changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIMIT_CHANGED ).
    endif.

*** get FM name for calculating details.
    LF_FMNSH = ME->R_CUST_SHIPU->GET_FMNSH_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).

    if LF_FMNSH is not initial.
      try.

          call function LF_FMNSH
            exporting
              IF_SHUTY         = LF_SHUTY
              IF_SHUNT         = LF_SHUNT
              IF_PACKP         = LF_PACKP
              IF_FOVRR_PACKP   = LF_FOVRR_PACKP
              IS_PRQTY         = LS_PRQTY
              IF_FOVRR_PRQTY   = LF_FOVRR_PRQTY
              IS_SAQTY         = LS_SAQTY
              IT_DIMEN         = LT_DIMEN
              IF_FOVRR_DIMEN   = LF_FOVRR_DIMEN
              IT_PREV_DIMEN    = LT_PREV_DIMEN
              IT_BASE_DIMEN    = LT_BASE_DIMEN
              IS_BASE_PRQTY    = LS_BASE_PRQTY
              IT_LIMIT         = LT_LIMIT
              IT_ADJ_LIMIT     = LT_ADJ_LIMIT
              IT_PACKMAT_EFFCT = LT_PACKMAT_EFFCT
              IR_CUST_SHIPU    = ME->R_CUST_SHIPU
              IS_COMOD         = ME->S_COMOD
            importing
              ET_DIMEN         = RT_DIMEN.

        catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***          Function Module call failed: Could not call the function &1.
          move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '001'
                            F_MSGV1 = LF_MSGV1.

        catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***       Function Module call failed: Parameter &1 in function &2 missing.
          move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '003'
                            F_MSGV1 = LF_MSGV1
                            F_MSGV2 = LF_MSGV2.

        catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***       Function Module call failed: Obligatory parameter &2 of &2 not filled.
          move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '003'
                            F_MSGV1 = LF_MSGV1
                            F_MSGV2 = LF_MSGV2.

        catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***       Function Module call failed: Unknown Error while calling function &1.
          move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '004'
                            F_MSGV1 = LF_MSGV1.
      endtry.
***   Dimensions can not be less than zero after function call.
      loop at RT_DIMEN assigning <S_DIMEN>.
        if <S_DIMEN>-DIMVA lt 0.
          <S_DIMEN>-DIMVA = 0.
        endif.
      endloop.
    endif.


*** adjust for each packmat
    ME->GET_ADJ_DIMEN( exporting IR_GATE  = IR_GATE
                       changing  CT_DIMEN = RT_DIMEN ).

  else.
*** dimensions were overridden.
    ME->GET_DIMEN( importing ET_DIMEN = RT_DIMEN ).
  endif.

endmethod.
method CALC_ADJ_LIMIT.

  data:          LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data:          LR_PR_PACKMAT type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM     type ref to ZCL_VCXI_XCSU_PR_CPM,
                 LR_GATE       type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_LIMIT>     type        ZVCXI_XCSU_S_LIMIT.

*** ensure all input limits persist (although possibly changed later)
  RT_LIMIT = IT_LIMIT.
  LT_GATE  = IT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** adjust for each packmat
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.
      RT_LIMIT = LR_PR_PACKMAT->CALC_ADJ_LIMIT( IT_LIMIT = RT_LIMIT ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.
        RT_LIMIT = LR_PR_CPM->CALC_ADJ_LIMIT( IT_LIMIT = RT_LIMIT ).
      endif.
    endif.
  endloop.

*** No Limits should be less than zero after adjustments.
  loop at RT_LIMIT assigning <S_LIMIT>.
    if <S_LIMIT>-DIMVA lt 0.
      <S_LIMIT>-DIMVA = 0.
    endif.
  endloop.

endmethod.
method CALC_DETAILS.

  data:          LF_MSGV1              type        SYMSGV,
                 LF_MSGV2              type        SYMSGV,
                 LF_SHUTY              type        ZVCXI_XCSU_SHUTY,
                 LF_SHUNT              type        ZVCXI_XCSU_SHUNT,
                 LF_PACKP              type        ZVCXI_XCSU_PACKP,
                 LF_FMNSH              type        ZVCXI_XCSU_FMNSH,
                 LF_FOVRR_PACKP        type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_PRQTY        type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_DIMEN        type        ZVCXI_XCS_FOVRR,
                 LF_UPDATE_PACKP       type        ABAP_BOOL,
                 LF_UPDATE_PRQTY       type        ABAP_BOOL,
                 LF_UPDATE_DIMEN       type        ABAP_BOOL,
                 LF_WERKS              type        WERKS_D.
  data:          LS_PRQTY              type        ZVCXI_XCSU_S_PRQTY,
                 LS_BASE_PRQTY         type        ZVCXI_XCSU_S_PRQTY,
                 LS_SAQTY              type        ZVCXI_XCSU_S_SAQTY.
  data:          LT_LIMIT              type        ZVCXI_XCSU_TT_LIMIT,
                 LT_ADJ_LIMIT          type        ZVCXI_XCSU_TT_LIMIT,
                 LT_DIMEN              type        ZVCXI_XCSU_TT_DIMEN,
                 LT_PREV_DIMEN         type        ZVCXI_XCSU_TT_DIMEN,
                 LT_BASE_DIMEN         type        ZVCXI_XCSU_TT_DIMEN,
                 LT_PACKMAT_EFFCT      type        ZVCXI_XCSU_TT_PACKMAT_EFFCT.
  data:          LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_DIMEN>             type        ZVCXI_XCSU_S_DIMEN.

*** Retrieve initial values
  LF_SHUTY = ME->GET_SHUTY( ).
  LF_SHUNT = ME->GET_SHUNT( ).

*** No processing if basic shipping unit values have not been enetered
  if LF_SHUTY is not initial and
     LF_SHUNT is not initial.

*** Process all Packaging Materials in case any Dimension Effects are changed
    ME->CALC_PACKMAT_DETAILS( ).
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Go ahead if I am still alive
    check ME->R_GATE          is bound and
          ME->R_GATE->F_FREED ne ABAP_TRUE.

    ME->GET_PACKP( importing EF_PACKP = LF_PACKP ).
    ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).
    LS_SAQTY = ME->GET_SAQTY( ).

    ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).
    ME->GET_LIMIT( importing ET_LIMIT = LT_LIMIT ).

    LT_PACKMAT_EFFCT = ME->GET_PACKMAT_EFFCT( ).

*** Retrieve override values
    LF_FOVRR_PACKP = ME->GET_FOVRR_PACKP( ).
    LF_FOVRR_PRQTY = ME->GET_FOVRR_PRQTY( ).
    LF_FOVRR_DIMEN = ME->GET_FOVRR_DIMEN( ).

    LF_WERKS = ME->GET_WERKS( ).

*** Find shipping manager to retrieve previous dimensions and adjusted limits
    ME->GET_DETAIL_SHIPMGR( importing ET_PREV_DIMEN     = LT_PREV_DIMEN
                                      ET_BASE_DIMEN     = LT_BASE_DIMEN
                                      ES_BASE_PRQTY     = LS_BASE_PRQTY
                                      ET_AGGR_ADJ_LIMIT = LT_ADJ_LIMIT ).

    if LT_ADJ_LIMIT ne ME->T_ADJ_LIMIT.
      move LT_ADJ_LIMIT to ME->T_ADJ_LIMIT.
***   Send Event - Set Limit's changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIMIT_CHANGED ).
    endif.

*** Explicitly specify that no updates are made unless changed later
    LF_UPDATE_PACKP = ABAP_FALSE.
    LF_UPDATE_PRQTY = ABAP_FALSE.
    LF_UPDATE_DIMEN = ABAP_FALSE.

*** Get FM name for calculating details.
    LF_FMNSH = ME->R_CUST_SHIPU->GET_FMNSH_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).

    if LF_FMNSH is not initial.
      try.
          call function LF_FMNSH
            exporting
              IF_SHUTY         = LF_SHUTY
              IF_SHUNT         = LF_SHUNT
              IF_PACKP         = LF_PACKP
              IF_FOVRR_PACKP   = LF_FOVRR_PACKP
              IS_PRQTY         = LS_PRQTY
              IF_FOVRR_PRQTY   = LF_FOVRR_PRQTY
              IS_SAQTY         = LS_SAQTY
              IT_DIMEN         = LT_DIMEN
              IF_FOVRR_DIMEN   = LF_FOVRR_DIMEN
              IT_PREV_DIMEN    = LT_PREV_DIMEN
              IT_BASE_DIMEN    = LT_BASE_DIMEN
              IS_BASE_PRQTY    = LS_BASE_PRQTY
              IT_LIMIT         = LT_LIMIT
              IT_ADJ_LIMIT     = LT_ADJ_LIMIT
              IT_PACKMAT_EFFCT = LT_PACKMAT_EFFCT
              IR_CUST_SHIPU    = ME->R_CUST_SHIPU
              IS_COMOD         = ME->S_COMOD
              IF_WERKS         = LF_WERKS
            importing
              EF_PACKP         = LF_PACKP
              EF_UPDATE_PACKP  = LF_UPDATE_PACKP
              ES_PRQTY         = LS_PRQTY
              EF_UPDATE_PRQTY  = LF_UPDATE_PRQTY
              ET_DIMEN         = LT_DIMEN
              EF_UPDATE_DIMEN  = LF_UPDATE_DIMEN.

        catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***       Function Module call failed: Could not call the function &1.
          move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '001'
                            F_MSGV1 = LF_MSGV1.

        catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
          move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '003'
                            F_MSGV1 = LF_MSGV1
                            F_MSGV2 = LF_MSGV2.

        catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
          move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
          move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '003'
                            F_MSGV1 = LF_MSGV1
                            F_MSGV2 = LF_MSGV2.

        catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
          move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
          raise exception type /VCXI/CX_CKX
                          exporting
                            F_MSGTY = 'E'
                            F_MSGID = 'ZVCXI_XCS'
                            F_MSGNO = '004'
                            F_MSGV1 = LF_MSGV1.

      endtry.

    endif.

*** Update results as dictated
    if LF_UPDATE_PACKP eq ABAP_TRUE and LF_FOVRR_PACKP eq ABAP_FALSE.
      ME->SET_PACKP( IF_PACKP = LF_PACKP ).
    endif.

    if LF_UPDATE_PRQTY eq ABAP_TRUE and LF_FOVRR_PRQTY eq ABAP_FALSE.
***   Previous Quantity can not be less than zero after fucntion call
      if LS_PRQTY-PRQTY lt 0.
        LS_PRQTY-PRQTY = 0.
      endif.
      ME->SET_PRQTY( IS_PRQTY = LS_PRQTY ).
    endif.

    if LF_UPDATE_DIMEN eq ABAP_TRUE and LF_FOVRR_DIMEN eq ABAP_FALSE.
***   Dimensions can not be less than zero after function call
      loop at LT_DIMEN assigning <S_DIMEN>.
        if <S_DIMEN>-DIMVA lt 0.
          <S_DIMEN>-DIMVA = 0.
        endif.
      endloop.
      ME->SET_ADJ_DIMEN( IT_DIMEN = LT_DIMEN ).
    endif.

*** calculate total base quantity
    ME->CALC_TBQTY( ).

*** Re-process Packaging Materials so that they reflect any changes in shipunit dimen
    ME->CALC_PACKMAT_DETAILS( ).

  endif.

endmethod.
method CALC_PACKMAT_DETAILS.

*** Do not start Calculation Directly -> Set Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQ_RECALC_PACKMAT ).

endmethod.
method CALC_TBQTY.

  data: LS_PRQTY      type ZVCXI_XCSU_S_PRQTY,
        LS_SAQTY      type ZVCXI_XCSU_S_SAQTY,
        LS_TBQTY      type ZVCXI_XCSU_S_TBQTY,
        LS_PREV_TBQTY type ZVCXI_XCSU_S_TBQTY.

  ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).
  LS_SAQTY = ME->GET_SAQTY( ).
  LS_TBQTY = ME->GET_TBQTY( ).

*** Get Previous Total Base Quantity
  ME->GET_DETAIL_SHIPMGR( changing CS_PREV_TBQTY = LS_PREV_TBQTY ).

  try.
      LS_TBQTY-TBQTY = LS_SAQTY-SAQTY + ( LS_PRQTY-PRQTY * LS_PREV_TBQTY-TBQTY ).
    catch CX_SY_ARITHMETIC_OVERFLOW into data(LR_CX_SY_ARITHMETIC_OVERFLOW).
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY_ARITHMETIC_OVERFLOW ).
  endtry.
  ME->SET_TBQTY( IS_TBQTY = LS_TBQTY ).

endmethod.
method CALL_SHLP_PACKP.

  data: LF_SHUNT   type ZVCXI_XCSU_SHUNT,
        LF_WERKS   type WERKS_D,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  LF_WERKS = ME->GET_WERKS( ).
  LF_SHUNT = ME->GET_SHUNT( ).

  RF_PACKP = ZCL_VCXI_XCSU_SHLP_PACKP=>CALL_SHLP( IF_SHUNT   = LF_SHUNT
                                                  IF_DISPLAY = LF_DISPLAY
                                                  IF_WERKS   = LF_WERKS ).

endmethod.
method CALL_SHLP_SHUNT.

  data: LF_SHUTY   type ZVCXI_XCSU_SHUTY,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  LF_SHUTY = ME->GET_SHUTY( ).

  RF_SHUNT = ZCL_VCXI_XCSU_SHLP_SHUNT=>CALL_SHLP( IF_SHUTY   = LF_SHUTY
                                                  IF_DISPLAY = LF_DISPLAY ).

endmethod.
method CALL_SHLP_SHUTY.

  data: LF_SHSCH   type ZVCXI_XCSU_SHSCH,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  ME->GET_DETAIL_SHIPMGR( importing EF_SHSCH = LF_SHSCH ).

  RF_SHUTY = ZCL_VCXI_XCSU_SHLP_SHUTY=>CALL_SHLP( IF_SHSCH   = LF_SHSCH
                                                  IF_DISPLAY = LF_DISPLAY ).

endmethod.
method CHECK_DIMEN.

*** RF_SUBRC = 0 => All obliatory Dimensions are maintained.
*** RF_SUBRC = 1 => Obligatory Dimension & is lower equal 0.
*** RF_SUBRC = 2 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 9 => No Dimension is obligatory.

  data: LS_DIMEN              type        ZVCXI_XCSU_S_DIMEN.
  data: LT_DIMEN_CUST         type        ZVCXI_XCSU_TT_SHUTY_DIMEN,
        LT_DIMEN              type        ZVCXI_XCSU_TT_DIMEN.
  data: LF_SHUTY              type        ZVCXI_XCSU_SHUTY.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 2.
    if IR_MESSAGE is bound.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    endif.
    exit.
  endif.

***--------------------------------------------------------------------------------------
  ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).
  LF_SHUTY = ME->GET_SHUTY( ).
  LT_DIMEN_CUST = ME->R_CUST_SHIPU->GET_OBLIG_DIMEN_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).

*** start Positiv
  RF_SUBRC = 0.

*** No obligatory Dimension was returned
  if lines( LT_DIMEN_CUST ) lt 1.
    RF_SUBRC = 9.
    exit.
  endif.

  loop at LT_DIMEN into LS_DIMEN.

    if LS_DIMEN-DIMVA gt 0.
      continue.
    endif.

    read table LT_DIMEN_CUST with key DIMEN = LS_DIMEN-DIMEN transporting no fields.
    check SY-SUBRC eq 0.

*** Obligatory Dimension & is lower equal 0.
    RF_SUBRC = 1.
    if IR_MESSAGE is bound.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '071'
                               IF_MSGV1 = LS_DIMEN-DIMEN ).
    endif.

  endloop.

endmethod.
method CHECK_LIMIT.
*** RF_SUBRC = 0 => All Limits checks have passed.
*** RF_SUBRC = 1 => Check for Limit & & has failed.
*** RF_SUBRC = 2 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 9 => Limit Check is not needed.

  data: LS_LIMIT              type        ZVCXI_XCSU_S_LIMIT,
        LS_DIMEN              type        ZVCXI_XCSU_S_DIMEN.
  data: LT_LIMIT              type        ZVCXI_XCSU_TT_LIMIT,
        LT_DIMEN              type        ZVCXI_XCSU_TT_DIMEN.
  data: LF_MSGV1              type        SYMSGV,
        LF_MSGV2              type        SYMSGV,
        LF_VALID              type        ABAP_BOOL,
        LF_FMNCH              type        ZVCXI_XCSU_FMNCH.
  data: LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
        LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
        LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
        LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 2.
    if IR_MESSAGE is bound.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    endif.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Get Limits and Dimensions
  ME->GET_LIMIT( importing ET_LIMIT = LT_LIMIT ).
  ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).

*** start Positiv
  RF_SUBRC = 0.

*** Check if Limit Check is needed or not
  if lines( LT_LIMIT ) lt 1 or
     lines( LT_DIMEN ) lt 1.
    RF_SUBRC = 9.
    exit.
  endif.

  loop at LT_LIMIT into LS_LIMIT.
    LF_FMNCH = ME->R_CUST_SHIPU->GET_FMNCH_FOR_LIMIT( IF_LIMIT = LS_LIMIT-LIMIT ).

    if LF_FMNCH is initial.
      continue.
    endif.

    read table LT_DIMEN into LS_DIMEN with key DIMEN = LS_LIMIT-DIMEN.

    try.
        call function LF_FMNCH
          exporting
            IS_LIMIT = LS_LIMIT
            IS_DIMEN = LS_DIMEN
          importing
            EF_VALID = LF_VALID.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***     Function Module call failed: Could not call the function &1.
        move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '001'
                          F_MSGV1 = LF_MSGV1.

      catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
        move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
        move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
        move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '004'
                          F_MSGV1 = LF_MSGV1.
    endtry.

    if LF_VALID eq ABAP_FALSE.
***   Check for Limit & & has failed.
      RF_SUBRC = 1.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                 IF_MSGTY = 'W'
                                 IF_MSGNO = '052'
                                 IF_MSGV1 = LS_LIMIT-LIMIT
                                 IF_MSGV2 = LS_LIMIT-DIMEN ).
      endif.
    endif.

  endloop.

endmethod.
method CHECK_PACKP.
*** RF_SUBRC = 0 => Packing Pattern is maintained.
*** RF_SUBRC = 1 => Packing Pattern is not maintained.
*** RF_SUBRC = 2 => Packing Pattern is not vaild for Shipping Unit.
*** RF_SUBRC = 3 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 4 => Packing Pattern is not vaild for Shipping Unit and Plant.

  data: LF_SHUNT type ZVCXI_XCSU_SHUNT,
        LF_PACKP type ZVCXI_XCSU_PACKP,
        LF_WERKS type WERKS_D.
  data: LT_PACKP type ZVCXI_XCSU_TT_PACKP.

  LF_WERKS = ME->GET_WERKS( ).
  LF_SHUNT = ME->GET_SHUNT( ).
  ME->GET_PACKP( importing EF_PACKP = LF_PACKP ).

***--------------------------------------------------------------------------------------
*** Start Positiv
  RF_SUBRC = 0.

***--------------------------------------------------------------------------------------
*** Check if it is initial or not
  if LF_PACKP is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid for Shipping Unit
  LT_PACKP = ME->R_CUST_SHIPU->GET_PACKP_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).
  read table LT_PACKP with key PACKP = LF_PACKP transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid for Shipping Unit
  LT_PACKP = ME->R_CUST_SHIPU->GET_PACKP_FOR_SHUNT( IF_SHUNT = LF_SHUNT
                                                    IF_WERKS = LF_WERKS ).
  read table LT_PACKP with key PACKP = LF_PACKP transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 4.
    exit.
  endif.

endmethod.
method CHECK_PMATY.
*** RF_SUBRC = 0 => All Packing Material Types in right Order and Quantity is maintained. (64)
*** RF_SUBRC = 1 => Packing Material Type &1 allowed count: &2 current count: &3.
*** RF_SUBRC = 2 => Packing Material Type &1 not allowed for Shipping Unit &2.
*** RF_SUBRC = 3 => PPacking Material Type &1 SeqID &2 is not in right Order.
*** RF_SUBRC = 4 => Mandatory Packing Material Type &1 not maintained.
*** RF_SUBRC = 5 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 6 => &1 - &2 requires at least one Packaging Material.

  data:          LF_SHUNT          type        ZVCXI_XCSU_SHUNT,
                 LF_COUNT          type        INT4,
                 LF_NUMC           type        NUMC3,
                 LF_NUMC_COUNT     type        NUMC3,
                 LF_PMATY          type        ZVCXI_XCSU_PMATY,
                 LF_INDEX          type        INT4.
  data:          LS_PMATY_SET      type        ZVCXI_XCS_TC183.
  data:          LT_POS_PMATY      type        ZVCXI_XCSU_TT_POS_PMATY,
                 LT_PMATY_SET      type        ZVCXI_XCSU_TT_SHUNT_PMATY,
                 LT_GATE           type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM       type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT     type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM         type ref to ZCL_VCXI_XCSU_PR_CPM.
  field-symbols: <S_POS_PMATY>     type        ZVCXI_XCSU_S_POS_PMATY,
                 <S_PMATY_SET>     type        ZVCXI_XCS_TC183.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 5.
    if IR_MESSAGE is bound.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    endif.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).


  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Save Packaging Material Type of Packaging Materials.
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.
      append initial line to LT_POS_PMATY assigning <S_POS_PMATY>.
      <S_POS_PMATY>-POSID = LR_GATE->GET_POSID( ).
      <S_POS_PMATY>-PMATY = LR_PR_PACKMAT->GET_PMATY( ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.
        append initial line to LT_POS_PMATY assigning <S_POS_PMATY>.
        <S_POS_PMATY>-POSID = LR_GATE->GET_POSID( ).
        <S_POS_PMATY>-PMATY = LR_PR_CPM->GET_PMATY( ).
      endif.
    endif.
  endloop.


  LF_SHUNT = ME->GET_SHUNT( ).
  LT_PMATY_SET = ME->R_CUST_SHIPU->GET_PMATY_SET_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).

***--------------------------------------------------------------------------------------
*** is at leas one Packaging Material required=
  if ME->R_CUST_SHIPU->IS_PM_REQ( IF_SHUNT = LF_SHUNT ) eq ABAP_TRUE and
     LT_GATE is initial.
    RF_SUBRC = 6.
    if IR_MESSAGE is bound.
***   &1 - requires at least one Packaging Material.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '072'
                               IF_MSGV1 = LF_SHUNT ).
    endif.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** check to make sure that minimum and maximum requirements have been satisfied
  loop at LT_PMATY_SET assigning <S_PMATY_SET>
  where MNCNT gt 0.
    read table LT_POS_PMATY with key PMATY = <S_PMATY_SET>-PMATY
    transporting no fields.
    check SY-SUBRC ne 0.
    if IR_MESSAGE is bound.
***   Mandatory Packing Material Type &1 not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '068'
                               IF_MSGV1 = <S_PMATY_SET>-PMATY ).
    endif.
    RF_SUBRC = 4.
  endloop.

  check RF_SUBRC = 0.

  loop at LT_POS_PMATY assigning <S_POS_PMATY>.
    if SY-TABIX eq 1.
      move SY-TABIX to LF_INDEX.
      move 1 to LF_COUNT.
    else.
      if <S_POS_PMATY>-PMATY ne LF_PMATY.
***     Check if Previous Count was okay for Packaging Material
        loop at LT_PMATY_SET assigning <S_PMATY_SET> where PMATY eq LF_PMATY.
          check SY-INDEX ge LF_INDEX.

          if LF_COUNT lt <S_PMATY_SET>-MNCNT.
            clear: LF_NUMC, LF_NUMC_COUNT.
            move <S_PMATY_SET>-MNCNT to LF_NUMC.
            write LF_COUNT to LF_NUMC_COUNT.
            if IR_MESSAGE is bound.
***           Packing Material Type &1 allowed count: &2 current count: &3.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                       IF_MSGTY = 'W'
                                       IF_MSGNO = '065'
                                       IF_MSGV1 = <S_PMATY_SET>-PMATY
                                       IF_MSGV2 = LF_NUMC
                                       IF_MSGV3 = LF_NUMC_COUNT ).
            endif.
            RF_SUBRC = 1.
          endif.

          if LF_COUNT gt <S_PMATY_SET>-MXCNT.
            clear: LF_NUMC, LF_NUMC_COUNT.
            write <S_PMATY_SET>-MXCNT to LF_NUMC.
            write LF_COUNT to LF_NUMC_COUNT.
            if IR_MESSAGE is bound.
***           Packing Material Type &1 allowed count: &2 current count: &3.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                       IF_MSGTY = 'W'
                                       IF_MSGNO = '065'
                                       IF_MSGV1 = <S_PMATY_SET>-PMATY
                                       IF_MSGV2 = LF_NUMC
                                       IF_MSGV3 = LF_NUMC_COUNT ).
            endif.

            RF_SUBRC = 1.
          endif.
          exit.

        endloop.
        add 1 to LF_INDEX.
        move 1 to LF_COUNT.
      else.
        add 1 to LF_COUNT.
      endif.
    endif.

*** Save Prev. Packaging Material
    move <S_POS_PMATY>-PMATY to LF_PMATY.
  endloop.

  check RF_SUBRC = 0.
***--------------------------------------------------------------------------------------
*** Check to make sure that there are no Packaging Material types that are not permitted
  sort LT_POS_PMATY by PMATY.
  loop at LT_POS_PMATY assigning <S_POS_PMATY>.
    at new PMATY.
      if <S_POS_PMATY>-PMATY is initial.
        continue.
      endif.
      read table LT_PMATY_SET transporting no fields with key PMATY = <S_POS_PMATY>-PMATY.
      if SY-SUBRC ne 0.
        clear: LF_NUMC.
        move SY-TABIX to LF_NUMC.
        if IR_MESSAGE is bound.
***       Packing Material Type &1 not allowed for Shipping Unit &2.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                   IF_MSGTY = 'W'
                                   IF_MSGNO = '066'
                                   IF_MSGV1 = <S_POS_PMATY>-PMATY
                                   IF_MSGV2 = LF_SHUNT ).
        endif.
        RF_SUBRC = 2.
      endif.
    endat.
  endloop.


  check RF_SUBRC = 0.
***--------------------------------------------------------------------------------------
*** Check to make sure Packaging Materials are in the correct sequence
*** First prepare set to make right sequence order
  sort LT_POS_PMATY by POSID.
  delete adjacent duplicates from LT_POS_PMATY comparing PMATY.

*** -----------------------------------------------------------------------
*** Do check
  loop at LT_POS_PMATY assigning <S_POS_PMATY>.

    LF_INDEX = SY-TABIX.

    loop at LT_PMATY_SET into LS_PMATY_SET.
      if LS_PMATY_SET-PMATY ne <S_POS_PMATY>-PMATY.
        delete LT_PMATY_SET.
      else.
        exit.
      endif.
    endloop.

    check LT_PMATY_SET is initial.
    clear: LF_NUMC.
    move LF_INDEX to LF_NUMC.
    if IR_MESSAGE is bound.
***   Packing Material Type &1 SeqID &2 is not in right Order.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '067'
                               IF_MSGV1 = <S_POS_PMATY>-PMATY
                               IF_MSGV2 = LF_NUMC ).
    endif.
    RF_SUBRC = 3.
    exit.

  endloop.

endmethod.
method CHECK_PRQTY.
*** RF_SUBRC = 0 => Previous Quantity is maintained.
*** RF_SUBRC = 1 => Previous Material Quantity is not maintained.

  data: LS_PRQTY  type ZVCXI_XCSU_S_PRQTY.

*** start Positiv
  RF_SUBRC = 0.

  ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).

  if LS_PRQTY-PRQTY is initial.
    RF_SUBRC = 1.
    exit.
  endif.

endmethod.
method CHECK_SHUNT.
*** RF_SUBRC = 0 => Shipping Unit is maintained.
*** RF_SUBRC = 1 => Shipping Unit is not maintained.
*** RF_SUBRC = 2 => Shipping Unit is not vaild for Shipping Unit Type.
*** RF_SUBRC = 3 => Shipping & Unitizing Customizing is not instantiated.

  data: LF_SHUNT type ZVCXI_XCSU_SHUNT,
        LF_SHUTY type ZVCXI_XCSU_SHUTY.
  data: LT_SHUNT type ZVCXI_XCSU_TT_SHUNT.


  LF_SHUNT = ME->GET_SHUNT( ).
  LF_SHUTY = ME->GET_SHUTY( ).

***--------------------------------------------------------------------------------------
*** Start Positiv
  RF_SUBRC = 0.

***--------------------------------------------------------------------------------------
*** Check if it is initial or not
  if LF_SHUNT is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid for Shipping Unit Type
  LT_SHUNT = ME->R_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).
  read table LT_SHUNT with key SHUNT = LF_SHUNT transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

endmethod.
method CHECK_SHUTY.
*** RF_SUBRC = 0 => Shipping Unit Type is maintained.
*** RF_SUBRC = 1 => Shipping Unit Type is not maintained.
*** RF_SUBRC = 2 => Shipping Unit Type is not vaild for Shipping Scheme.
*** RF_SUBRC = 3 => Shipping & Unitizing Customizing is not instantiated.

  data: LF_SHUTY type ZVCXI_XCSU_SHUTY,
        LF_SHSCH type ZVCXI_XCSU_SHSCH.
  data: LT_SHUTY type ZVCXI_XCSU_TT_SHUTY.


  LF_SHUTY = ME->GET_SHUTY( ).
  ME->GET_DETAIL_SHIPMGR( importing EF_SHSCH = LF_SHSCH ).

***--------------------------------------------------------------------------------------
*** Start Positiv
  RF_SUBRC = 0.

*** Check if it is initial or not
  if LF_SHUTY is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid for Shipping Scheme
  LT_SHUTY = ME->R_CUST_SHIPU->GET_SHUTY_FOR_SHSCH( IF_SHSCH = LF_SHSCH ).
  read table LT_SHUTY with key SHUTY = LF_SHUTY transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

endmethod.
method CLEAR_FOR_SHUNT.

  data:          LS_PRQTY       type        ZVCXI_XCSU_S_PRQTY,
                 LS_SAQTY       type        ZVCXI_XCSU_S_SAQTY,
                 LS_TBQTY       type        ZVCXI_XCSU_S_TBQTY.
  data:          LT_LIMIT       type        ZVCXI_XCSU_TT_LIMIT,
                 LT_DIMEN       type        ZVCXI_XCSU_TT_DIMEN,
                 LT_GATE        type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_LIMIT>      type        ZVCXI_XCSU_S_LIMIT,
                 <S_DIMEN>      type        ZVCXI_XCSU_S_DIMEN.

  check ME->GET_SHUNT( ) is initial.

***--------------------------------------------------------------------------------------
*** Delete all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).
*** Free Packaging Materials.
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

***--------------------------------------------------------------------------------------
*** Delete all child configured packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                   IF_INUSE = ABAP_TRUE ).
*** Free Packaging Materials.
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

*** Clear Previous Values
  ME->SET_PACKP( IF_PACKP = SPACE
                 IF_SETBY = SPACE ).

  ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).
  LS_PRQTY-PRQTY = 0.
  ME->SET_PRQTY( IS_PRQTY = LS_PRQTY
                 IF_SETBY = SPACE ).

  LS_SAQTY = ME->GET_SAQTY( ).
  LS_SAQTY-SAQTY = 0.
  ME->SET_SAQTY( IS_SAQTY = LS_SAQTY
                 IF_SETBY = SPACE ).

  LS_TBQTY = ME->GET_TBQTY( ).
  LS_TBQTY-TBQTY = 0.
  ME->SET_TBQTY( IS_TBQTY = LS_TBQTY
                 IF_SETBY = SPACE ).

  ME->GET_LIMIT( importing ET_LIMIT = LT_LIMIT ).
  clear: LT_LIMIT.
  ME->SET_LIMIT( IT_LIMIT = LT_LIMIT
                 IF_SETBY = SPACE ).

  ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).
  loop at LT_DIMEN assigning <S_DIMEN>.
    <S_DIMEN>-DIMVA = 0.
  endloop.
  ME->SET_DIMEN( IT_DIMEN = LT_DIMEN
                 IF_SETBY = SPACE ).

endmethod.
method CLEAR_FOR_SHUTY.

  check ME->GET_SHUTY( ) is initial.

*** Clear Previous Values
  ME->SET_SHUNT( IF_SHUNT = SPACE
                 IF_SETBY = SPACE ).

endmethod.
method CONSTRUCTOR.

  data: LF_SYSOM type /VCXI/VKS_SYSOM.
  data: LS_CMPRK type /VCXI/VKC_S_CMPRK.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Configuratin informations
  ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK
                                         EF_SYSOM = LF_SYSOM ).

  ME->S_COMOD-CMATN = LS_CMPRK-CMATN.
  ME->S_COMOD-PRFID = LS_CMPRK-PRFID.
  ME->S_COMOD-MSYST = LF_SYSOM.

endmethod.
method GET_ADJ_DIMEN.

  data:          LF_DO_DELETE type        ABAP_BOOL.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM  type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

***--------------------------------------------------------------------------------------
  if IR_GATE is supplied.
*** Sort Gates before applying the filter
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

    loop at LT_GATE into LR_GATE.
      if LR_GATE eq IR_GATE.
        LF_DO_DELETE = ABAP_TRUE.
      endif.
      if LF_DO_DELETE eq ABAP_TRUE.
        delete LT_GATE.
      endif.
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust for each Packmat
  CT_DIMEN = ME->CALC_ADJ_DIMEN( IT_GATE  = LT_GATE
                                 IT_DIMEN = CT_DIMEN ).

endmethod.
method GET_ADJ_LIMIT.

  data:          LT_GATE     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM type        /VCXI/VKSR_TT_GATE.

*** Get shipping unit limits
  if IT_LIMIT is initial.
    ME->GET_LIMIT( importing ET_LIMIT = RT_LIMIT ).
  else.
    move IT_LIMIT to RT_LIMIT.
  endif.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** adjust for each packmat
  RT_LIMIT = ME->CALC_ADJ_LIMIT( IT_GATE  = LT_GATE
                                 IT_LIMIT = RT_LIMIT ).

endmethod.
method GET_COUNT.

  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

*** Get Provider Definitions -> Sibling
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Get all my Siblings
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE  = ABAP_TRUE
                                       IF_SORTED = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        add 10 to RF_COUNT.
        if ME->R_GATE = LR_GATE.
          exit.
        endif.
      endloop.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
method GET_DESCR.

  RF_DESCR = ME->GET_SHUNT_DESCR( ).
  if RF_DESCR is initial.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_DETAIL_SHIPMGR.

  clear: ET_PREV_DIMEN, ET_BASE_DIMEN, ES_BASE_PRQTY, ET_AGGR_ADJ_LIMIT, EF_SHSCH, EF_CPACK, ER_PREV_SHIPUNIT, ER_NEXT_SHIPUNIT,
  ER_DFLT_SHIPU.
  check ME->R_PR_SHIPMGR is bound.

  if ET_PREV_DIMEN is requested.
    ET_PREV_DIMEN = ME->R_PR_SHIPMGR->GET_PREV_DIMEN( IR_GATE = ME->R_GATE ).
  endif.

  if ET_BASE_DIMEN is requested.
    ET_BASE_DIMEN = ME->R_PR_SHIPMGR->GET_BASE_DIMEN( ).
  endif.

  if ES_BASE_PRQTY is requested.
    ES_BASE_PRQTY = ME->R_PR_SHIPMGR->GET_BASE_PRQTY( ).
  endif.


  if ET_AGGR_ADJ_LIMIT is requested.
    ET_AGGR_ADJ_LIMIT = ME->R_PR_SHIPMGR->GET_AGGR_ADJ_LIMIT( IR_GATE = ME->R_GATE ).
  endif.

  if EF_SHSCH is requested.
    EF_SHSCH = ME->R_PR_SHIPMGR->GET_SHSCH( ).
  endif.

  if EF_CPACK is requested.
    EF_CPACK = ME->R_PR_SHIPMGR->GET_CPACK( ).
  endif.

  if CS_PREV_TBQTY is requested.
    if ME->R_PR_SHIPMGR->IS_BASE_SHIPUNIT( IR_GATE = ME->R_GATE ) eq ABAP_TRUE.
      CS_PREV_TBQTY-TBQTY = 1.
    else.
      CS_PREV_TBQTY = ME->R_PR_SHIPMGR->GET_PREV_TBQTY( IR_GATE = ME->R_GATE ).
    endif.
  endif.

  if ER_PREV_SHIPUNIT is requested.
    ER_PREV_SHIPUNIT = ME->R_PR_SHIPMGR->GET_PREV_SHIPUNIT( IR_GATE = ME->R_GATE ).
  endif.

  if ER_NEXT_SHIPUNIT is requested.
    ER_NEXT_SHIPUNIT = ME->R_PR_SHIPMGR->GET_NEXT_SHIPUNIT( IR_GATE = ME->R_GATE ).
  endif.

  if ER_DFLT_SHIPU is requested.
    ER_DFLT_SHIPU = ME->R_PR_SHIPMGR->GET_DFLT_SHIPU( ).
  endif.

endmethod.
method GET_DIMEN.

  data:  LS_PARAM   type        /VCXI/VKSR_S_PARAM.
  data:  LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIMEN ).

  try.
      if LS_PARAM-STRNG is not initial.
        call transformation ID
               source xml LS_PARAM-STRNG
               result TABLE = ET_DIMEN.
      endif.

    catch CX_TRANSFORMATION_ERROR into LR_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
  endtry.

  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOVRR_DIMEN.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Dimensions
  ME->GET_DIMEN( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_FOVRR_LIMIT.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Effects
  ME->GET_LIMIT( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_FOVRR_PACKP.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Consumption Scheme
  ME->GET_PACKP( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_FOVRR_PRQTY.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Packaging Material Quantity
  ME->GET_PRQTY( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
  method GET_HUPI.

    data: LS_PRQTY type ZVCXI_XCSU_S_PRQTY,
          LS_PMQTY type ZVCXI_XCSU_S_PMQTY.
    data: LR_GATE_SHIPUNIT_PREV type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPUNIT_PREV   type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
    field-symbols: <S_HUPII> type ZVCXI_XCSU_S_HUPII.


    clear ET_HUPII.

*** Return Check Profile
    if EF_PICHP is requested.
      EF_PICHP = ME->GET_PICHP( ).
    endif.

*** Get Previous Quantity
    ME->GET_PRQTY( importing ES_PRQTY = LS_PRQTY ).

***--------------------------------------------------------------------------------------
*** Get previous Shipping Unit
    ME->GET_DETAIL_SHIPMGR( importing ER_PREV_SHIPUNIT = LR_GATE_SHIPUNIT_PREV ).
    if LR_GATE_SHIPUNIT_PREV is bound.
      LR_PR_SHIPUNIT_PREV ?= LR_GATE_SHIPUNIT_PREV->R_CLSPR.
      if LR_PR_SHIPUNIT_PREV->GET_PIREU( ).
***     Add included Packing Instruction
        append value #( ITMTY   = ZCL_VCXI_XCI_BOB_HUPI=>C_ITMTY_HUPI    "Subordinate packing instruction
                        S_PMQTY = value #( PMQTY     = LS_PRQTY-PRQTY
                                           PMQTY_UOM = LS_PRQTY-PRQTY_UOM )
                        R_ITEM  = LR_GATE_SHIPUNIT_PREV
                      ) to ET_HUPII.
      else.
***     Get Information of previous Shipping Unit
        LR_PR_SHIPUNIT_PREV->GET_HUPI( importing ET_HUPII = ET_HUPII ).
***     Adjust based on Previous Quantity
        loop at ET_HUPII assigning <S_HUPII>.
          <S_HUPII>-PMQTY = <S_HUPII>-PMQTY * LS_PRQTY-PRQTY.
        endloop.
      endif.
    else.
***   Add included Packing Instruction
      append value #( ITMTY   = ZCL_VCXI_XCI_BOB_HUPI=>C_ITMTY_MATERIAL     "Finished Good Material
                      S_PMQTY = value #( PMQTY     = LS_PRQTY-PRQTY
                                         PMQTY_UOM = LS_PRQTY-PRQTY_UOM )
                    ) to ET_HUPII.
    endif.

***--------------------------------------------------------------------------------------
*** Get all child Packaging Materials
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE_PACKMAT).
      data(LR_PR_PACKMAT) = cast ZCL_VCXI_XCSU_PR_PACKMAT( LR_GATE_PACKMAT->R_CLSPR ).
      check LR_PR_PACKMAT->GET_PIREM( ) is not initial.
      LR_PR_PACKMAT->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).

***   Add Packaging Material
      append value #( ITMTY   = ZCL_VCXI_XCI_BOB_HUPI=>C_ITMTY_PACKMAT      "Packaging materials
                      S_PMQTY = LS_PMQTY
                      R_ITEM  = LR_GATE_PACKMAT
                    ) to ET_HUPII.
    endloop.

  endmethod.
method GET_LIMIT.

  data:  LS_PARAM   type        /VCXI/VKSR_S_PARAM.
  data:  LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIMIT ).

  try.
      if LS_PARAM-STRNG is not initial.
        call transformation ID
               source xml LS_PARAM-STRNG
               result TABLE = ET_LIMIT.
      endif.

    catch CX_TRANSFORMATION_ERROR into LR_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
  endtry.

  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_NEXT_PACKMAT.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE,
        LT_GATE_CPM    type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  if IR_GATE is not bound.
*** No Previous Gate exists for unbound Gate
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_XCSU'
        F_MSGNO = '102'.

  endif.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).


  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
*** Determine if next gate
    check LR_GATE->GET_POSID( ) gt IR_GATE->GET_POSID( ).
    if RR_NEXT_GATE is bound.
      if LR_GATE->GET_POSID( ) lt RR_NEXT_GATE->GET_POSID( ).
        move LR_GATE to RR_NEXT_GATE.
      endif.
    else.
      move LR_GATE to RR_NEXT_GATE.
    endif.
  endloop.

endmethod.
method GET_PACKMAT_EFFCT.

  data:          LS_EFFCT         type        ZVCXI_XCSU_S_EFFCT,
                 LS_PMQTY         type        ZVCXI_XCSU_S_PMQTY.
  data:          LT_GATE          type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM      type        /VCXI/VKSR_TT_GATE,
                 LT_EFFCT         type        ZVCXI_XCSU_TT_EFFCT.
  data:          LR_PR_PACKMAT    type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM    type ref to ZCL_VCXI_XCSU_PR_CPM,
                 LR_GATE          type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_PACKMAT_EFFCT> type       ZVCXI_XCSU_S_PACKMAT_EFFCT.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Add each Dimension Effect along with related infomration to return table
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.

*** Packaging Material
    if LR_PR_PACKMAT is bound.
      LR_PR_PACKMAT->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).
      loop at LT_EFFCT into LS_EFFCT.
        append initial line to RT_PACKMAT_EFFCT assigning <S_PACKMAT_EFFCT>.
        move LR_PR_PACKMAT->GET_PMATY( ) to <S_PACKMAT_EFFCT>-PMATY.
        move LR_PR_PACKMAT->GET_PMATN( ) to <S_PACKMAT_EFFCT>-PMATN.
        LR_PR_PACKMAT->GET_CONSC( importing EF_CONSC = <S_PACKMAT_EFFCT>-CONSC ).
        LR_PR_PACKMAT->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
        move-corresponding LS_PMQTY to <S_PACKMAT_EFFCT>.
        move-corresponding LS_EFFCT to <S_PACKMAT_EFFCT>.
      endloop.

    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.

***   Add Configured Packaging Material
      if LR_PR_CPM is bound.
        LR_PR_CPM->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).
        loop at LT_EFFCT into LS_EFFCT.
          append initial line to RT_PACKMAT_EFFCT assigning <S_PACKMAT_EFFCT>.
          move LR_PR_CPM->GET_PMATY( ) to <S_PACKMAT_EFFCT>-PMATY.
          LR_PR_CPM->GET_CONSC( importing EF_CONSC = <S_PACKMAT_EFFCT>-CONSC ).
          LR_PR_CPM->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
          move-corresponding LS_PMQTY to <S_PACKMAT_EFFCT>.
          move-corresponding LS_EFFCT to <S_PACKMAT_EFFCT>.
        endloop.
      endif.
    endif.

  endloop.

endmethod.
method GET_PACKP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PACKP ).
  move LS_PARAM-ATWRT to EF_PACKP.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_PACKP_DESCR.

  data: LF_PACKP type ZVCXI_XCSU_PACKP.

  check ME->R_CUST_SHIPU is bound.

  ME->GET_PACKP( importing EF_PACKP = LF_PACKP ).
  RF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_PACKP( IF_PACKP = LF_PACKP ).

endmethod.
method GET_PALOP_PACKMAT.

  data:          LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM        type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT      type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM          type ref to ZCL_VCXI_XCSU_PR_CPM.
  field-symbols: <S_PALOP_PACKMAT>  type        ZVCXI_XCSU_S_PALOP_PACKMAT.

***--------------------------------------------------------------------------------------
*** Get all Packaging Materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.

***   Get Details
      append initial line to RT_PALOP_PACKMAT assigning <S_PALOP_PACKMAT>.
      move LR_PR_PACKMAT->GET_PMATY( )       to <S_PALOP_PACKMAT>-PMATY.
      move LR_PR_PACKMAT->GET_PMATN( )       to <S_PALOP_PACKMAT>-PMATN.
      move LR_PR_PACKMAT->GET_PMATN_SETBY( ) to <S_PALOP_PACKMAT>-PMATN_SETBY.
      LR_PR_PACKMAT->GET_CONSC( importing EF_CONSC = <S_PALOP_PACKMAT>-CONSC
                                          EF_SETBY = <S_PALOP_PACKMAT>-CONSC_SETBY ).

***   Get Effects for Dimension
      LR_PR_PACKMAT->GET_EFFCT( importing ET_EFFCT = <S_PALOP_PACKMAT>-T_EFFCT ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.

***     Get Details
        append initial line to RT_PALOP_PACKMAT assigning <S_PALOP_PACKMAT>.
        move LR_PR_CPM->GET_PMATY( )         to <S_PALOP_PACKMAT>-PMATY.
        move 'CONFIG'                        to <S_PALOP_PACKMAT>-PMATN.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_USER to <S_PALOP_PACKMAT>-PMATN_SETBY.
        LR_PR_CPM->GET_CONSC( importing EF_CONSC = <S_PALOP_PACKMAT>-CONSC
                                        EF_SETBY = <S_PALOP_PACKMAT>-CONSC_SETBY ).

***     Get Effects for Dimension
        LR_PR_CPM->GET_EFFCT( importing ET_EFFCT = <S_PALOP_PACKMAT>-T_EFFCT ).
      endif.
    endif.
  endloop.

endmethod.
  method GET_PICHP.

    check ME->R_CUST_SHIPU is bound.
    RF_PICHP = ME->R_CUST_SHIPU->GET_PICHP_FOR_SHUNT( IF_SHUNT = ME->GET_SHUNT( ) ).

  endmethod.
  method GET_PIREU.

*** Units with Packing Instr. Status Check Profile are relevant
    if ME->GET_PICHP( ) is not initial.
      RF_PIREU = ABAP_TRUE.
    endif.

  endmethod.
method GET_PMATY_DFLT_DEF.

  data:          LF_POSID                    type        /VCXI/VKS_POSID.
  data:          LT_GATE                     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM                 type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE                     type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PACKMAT               type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
                 LR_PR_CPM                   type ref to ZCL_VCXI_XCSU_PR_CPM.
  field-symbols: <S_PMATY_DFLT_DEF>          type        ZVCXI_XCSU_S_PMATY_DFLT_DEF.

***--------------------------------------------------------------------------------------
*** Get all Packaging Materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE  = ABAP_TRUE
                                       IF_SORTED = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

***--------------------------------------------------------------------------------------
*** Build Structure
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.

      append initial line to RT_PMATY_DFLT_DEF assigning <S_PMATY_DFLT_DEF>.
      add 10 to LF_POSID.
      move LF_POSID                          to <S_PMATY_DFLT_DEF>-POSID.
      move LR_PR_PACKMAT->GET_PMATY( )       to <S_PMATY_DFLT_DEF>-PMATY.
      move LR_PR_PACKMAT->GET_PMATN( )       to <S_PMATY_DFLT_DEF>-PMATN.
      move LR_PR_PACKMAT->GET_PMATN_SETBY( ) to <S_PMATY_DFLT_DEF>-SETBY.

    else.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_CPM.
      endtry.
      check LR_PR_CPM is bound.

      append initial line to RT_PMATY_DFLT_DEF assigning <S_PMATY_DFLT_DEF>.
      add 10 to LF_POSID.
      move LF_POSID                          to <S_PMATY_DFLT_DEF>-POSID.
      move LR_PR_CPM->GET_PMATY( )       to <S_PMATY_DFLT_DEF>-PMATY.

    endif.
  endloop.

endmethod.
method GET_PREV_PACKMAT.

  data: LT_GATE        type        /VCXI/VKSR_TT_GATE,
        LT_GATE_CPM    type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


  if IR_GATE is not bound.
*** No Previous Gate exists for unbound Gate
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_XCSU'
        F_MSGNO = '101'.

  endif.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
*** Determine if PREV gate
    check LR_GATE->GET_POSID( ) lt IR_GATE->GET_POSID( ).
    if RR_PREV_GATE is bound.
      if LR_GATE->GET_POSID( ) gt RR_PREV_GATE->GET_POSID( ).
        move LR_GATE to RR_PREV_GATE.
      endif.
    else.
      move LR_GATE to RR_PREV_GATE.
    endif.
  endloop.

endmethod.
method GET_PRQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRQTY ).
  move LS_PARAM-ATFLV to ES_PRQTY-PRQTY.
  move LS_PARAM-UNIT  to ES_PRQTY-PRQTY_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
  method GET_SAPOS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SAPOS ).
    RF_SAPOS = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
method GET_SAQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SAQTY ).
  move LS_PARAM-ATFLV to RS_SAQTY-SAQTY.
  move LS_PARAM-UNIT  to RS_SAQTY-SAQTY_UOM.

endmethod.
method GET_SHUNT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHUNT ).
  move LS_PARAM-ATWRT to RF_SHUNT.

endmethod.
method GET_SHUNT_DESCR.

  data: LF_SHUNT type ZVCXI_XCSU_SHUNT.

  check ME->R_CUST_SHIPU is bound.

  LF_SHUNT = ME->GET_SHUNT( ).
  RF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).

endmethod.
method GET_SHUNT_SETBY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHUNT ).
  move LS_PARAM-SETBY to RF_SETBY.

endmethod.
method GET_SHUTY.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_SHUTY.

endmethod.
method GET_SHUTY_DESCR.

  data: LF_SHUTY type ZVCXI_XCSU_SHUTY.

  check ME->R_CUST_SHIPU is bound.

  LF_SHUTY = ME->GET_SHUTY( ).
  RF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

****------------------------------------------------------------------
**** Check Limit
  case ME->CHECK_LIMIT( ).
    when 0 or 9.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

****------------------------------------------------------------------
**** Check Dimen
  case ME->CHECK_DIMEN( ).
    when 0 or 9.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

****------------------------------------------------------------------
**** Check Packaging Pattern
  case ME->CHECK_PACKP( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Previous Quantity
  case ME->CHECK_PRQTY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

****------------------------------------------------------------------
**** Check Shipping Unit
  case ME->CHECK_SHUNT( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

****------------------------------------------------------------------
**** Check Shipping Unit Type
  case ME->CHECK_SHUTY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

****------------------------------------------------------------------
**** Check Packaging Material Type
  case ME->CHECK_PMATY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

****------------------------------------------------------------------
**** Check Limit
  if ME->CHECK_LIMIT( IR_MESSAGE = IR_MESSAGE ) eq 0.
*** All Limits checks have passed.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '051' ).
  endif.

****------------------------------------------------------------------
**** Check Dimen
  if ME->CHECK_DIMEN( IR_MESSAGE = IR_MESSAGE ) eq 0.
*** All obliatory Dimensions are maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '070' ).
  endif.

****------------------------------------------------------------------
**** Check Packaging Pattern
  case ME->CHECK_PACKP( ).
    when 0.
***   Packing Pattern is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '053' ).
    when 1.
***   Packing Pattern is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '054' ).
    when 2.
***   Packing Pattern is not vaild for Shipping Unit.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '055' ).
    when 3.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    when 4.
***   Packing Pattern is not vaild for Shipping Unit and Plant.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '073' ).
  endcase.

***------------------------------------------------------------------
*** Check Previous Quantity
  case ME->CHECK_PRQTY( ).
    when 0.
***   Previous Quantity is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '056' ).
    when 1.
***   Previous Quantity is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '057' ).
  endcase.

****------------------------------------------------------------------
**** Check Shipping Unit
  case ME->CHECK_SHUNT( ).
    when 0.
***   Shipping Unit is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '058' ).
    when 1.
***   Shipping Unit is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '059' ).
    when 2.
***   Shipping Unit is not vaild for Shipping Unit Type.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '060' ).
    when 3.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
  endcase.

****------------------------------------------------------------------
**** Check Shipping Unit Type
  case ME->CHECK_SHUTY( ).
    when 0.
***   Shipping Unit Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '061' ).
    when 1.
***   Shipping Unit Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '062' ).
    when 2.
***   Shipping Unit Type is not vaild for Shipping Scheme.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '063' ).
    when 3.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
  endcase.


****------------------------------------------------------------------
**** Check Packaging Material Type
  if ME->CHECK_PMATY( IR_MESSAGE = IR_MESSAGE ) eq 0.
*** All Packing Material Types in right Order and Quantity maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '064' ).
  endif.

endmethod.
method GET_TBQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TBQTY ).
  move LS_PARAM-ATFLV to RS_TBQTY-TBQTY.
  move LS_PARAM-UNIT  to RS_TBQTY-TBQTY_UOM.

endmethod.
  method GET_WERKS.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.

    if ME->R_PR_SHIPMGR is bound.
      RF_WERKS = ME->R_PR_SHIPMGR->GET_WERKS( ).
    else.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                       IF_INUSE = ABAP_TRUE ).
      check LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_XCSU_PR_SHIPMGR( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    endif.

  endmethod.
method HANDLE_EVENT.

  data: LR_GATE_SHIPMGR  type ref to /VCXI/CL_VKSR_GATE.
  data: LF_OWN_EVENT     type        ABAP_BOOL,
        LF_SHIPMGR_EVENT type        ABAP_BOOL.


*** Try to catch own events
  read table IT_GATE_PROVIDER with key TABLE_LINE = ME->R_GATE
                              transporting no fields.
  if SY-SUBRC = 0.
    move ABAP_TRUE to LF_OWN_EVENT.
  endif.

*** Try to Get Shipping Manager Event
  move ME->R_GATE->GET_PARENT( ) to LR_GATE_SHIPMGR.
  if LR_GATE_SHIPMGR is bound.
    read table IT_GATE_PROVIDER with key TABLE_LINE = LR_GATE_SHIPMGR
                                transporting no fields.
    if SY-SUBRC = 0.
      move ABAP_TRUE to LF_SHIPMGR_EVENT.
    endif.
  endif.


  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      check LF_OWN_EVENT eq ABAP_TRUE.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      check LF_OWN_EVENT     eq ABAP_TRUE or
            LF_SHIPMGR_EVENT eq ABAP_TRUE.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_RESET_SHUNT.
      check LF_OWN_EVENT eq ABAP_TRUE.
      ME->HANDLE_RESET_SHUNT( ).

    when C_IEVNT_I_RESET_SHUTY.
      check LF_OWN_EVENT eq ABAP_TRUE.
      ME->HANDLE_RESET_SHUTY( ).

    when C_IEVNT_I_RESET_PMATY.
      ME->HANDLE_RESET_PMATY( ).

    when C_IEVNT_I_RECALC_DETAILS.
      ME->HANDLE_RECALC_DETAILS( IT_GATE = IT_GATE_PROVIDER ).

*** Redetermination of Default Requested
    when C_IEVNT_I_REQ_REDET_DFLT.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REDET_DFLT_REQ ).

    when C_IEVNT_I_INIT_SAQTY.
      ME->HANDLE_INIT_SAQTY( ).

  endcase.
endmethod.
method HANDLE_INIT_REFERENCES.

  data:          LT_GATE               type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE.

*** Get Shipping Manager
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to ME->R_PR_SHIPMGR.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: ME->R_PR_SHIPMGR.
        endtry.
      endloop.

    catch /VCXI/CX_CKX.
      clear: ME->R_PR_SHIPMGR.
  endtry.

*** Get Customizing Reference
  if ME->R_CUST_SHIPU is not bound.
    ME->INIT_CUST_SHIPU( ).
  endif.

*** Send Event -> Request Set Default
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).

endmethod.
  method HANDLE_INIT_SAQTY.

    data: LS_SAQTY type ZVCXI_XCSU_S_SAQTY.


    data(LF_SAPOS) = ME->GET_SAPOS( ).
    check LF_SAPOS is not initial.

    if ME->R_CUST_SHIPU is bound.
      ME->R_CUST_SHIPU->GET_SAPOS( exporting IF_SAPOS = LF_SAPOS
                                   importing ES_SAQTY = LS_SAQTY ).
    endif.

    ME->SET_SAQTY( IS_SAQTY = LS_SAQTY ).

  endmethod.
method HANDLE_RECALC_DETAILS.

  data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
        LR_PREV_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
        LR_NEXT_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE.
  data: LF_DO_RECALC     type         ABAP_BOOL.

***  Get Previous and next SHIPUNIT
  ME->GET_DETAIL_SHIPMGR( importing ER_NEXT_SHIPUNIT = LR_NEXT_SHIPUNIT
                                    ER_PREV_SHIPUNIT = LR_PREV_SHIPUNIT ).

  loop at IT_GATE into LR_GATE.

*** Gate has same ID as me
    if LR_GATE->F_ID eq ME->R_GATE->F_ID.
***   Only Recalc if it is next, previous, me or deleted
      check LR_GATE              eq LR_NEXT_SHIPUNIT or
            LR_GATE              eq LR_PREV_SHIPUNIT or
            LR_GATE              eq ME->R_GATE       or
            LR_GATE->IS_INUSE( ) eq ABAP_FALSE.
      LF_DO_RECALC = ABAP_TRUE.
    else.

***   Gate is Parent
      if LR_GATE eq ME->R_GATE->GET_PARENT( ).
        check LR_PREV_SHIPUNIT is initial.
***     Do only recalc if you have no previous always Recalc
        LF_DO_RECALC = ABAP_TRUE.
      else.

***     Gate is a Child
        if LR_GATE->GET_PARENT( ) eq ME->R_GATE or
           LR_GATE->IS_INUSE( )   eq ABAP_FALSE.
***       Do always Recalc
          LF_DO_RECALC = ABAP_TRUE.
        endif.
      endif.
    endif.

    check LF_DO_RECALC eq ABAP_TRUE.
    exit.

  endloop.

  check LF_DO_RECALC eq ABAP_TRUE.

  ME->CALC_DETAILS( ).

endmethod.
method HANDLE_RESET_PMATY.

  data: LF_CPACK        type        ZVCXI_XCSU_CPACK,
        LF_GUID         type        /VCXI/CKX_GUID,
        LF_WERKS        type        WERKS_D,
        LF_SHUTY        type        ZVCXI_XCSU_SHUTY,
        LF_SHUNT        type        ZVCXI_XCSU_SHUNT,
        LF_CLEAR        type        ABAP_BOOL.
  data: LS_CPACK_SHUTY  type        ZVCXI_XCSUC_S_CPACK_SHUTY.
  data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
        LR_CPACK        type ref to ZCL_VCXI_XCSUC_CPACK,
        LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT,
        LR_APPDATA      type ref to /VCXI/CL_VKSR_APPDATA.

*** Check that Shipping Manager's Packaging Code is not initial and new Packaging Materials
*** will be load via Defaulting
  ME->GET_DETAIL_SHIPMGR( importing EF_CPACK = LF_CPACK ).
  check LF_CPACK is not initial.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

*** Shipping Unit Type and Unit
  LF_SHUTY = ME->GET_SHUTY( ).
  LF_SHUNT = ME->GET_SHUNT( ).

***----------------------------------------------------------------------------
*** Get Default Packaging Code Instance and Check if Packaging Material is defined
  move LF_CPACK to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

  try.
      move LR_OBJECT ?to LR_CPACK.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_CPACK.
  endtry.

  check LR_CPACK is bound.
  loop at LR_CPACK->T_CPACK_SHUTY into LS_CPACK_SHUTY
  where   SHUTY = LF_SHUTY
    and   SHUNT = LF_SHUNT
    and ( WERKS = LF_WERKS
     or   WERKS = SPACE ).

    if SY-SUBRC = 0.
      LF_CLEAR = ABAP_TRUE.
      exit.
    endif.
  endloop.

  check LF_CLEAR eq ABAP_TRUE.

*** Get existing Packaging Materials (by Provider Type)
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                   IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    LR_GATE->DO_FREE( ).
  endloop.

  ME->R_GATE->RAISE_EVENTS( ).

endmethod.
method HANDLE_RESET_SHUNT.

*** Clear values influenced by Shipping Unit
  ME->CLEAR_FOR_SHUNT( ).

*** Set Reset Flag -> UI Refresh Grid!!
  move ABAP_TRUE to ME->F_RESET_SHUNT.

endmethod.
method HANDLE_RESET_SHUTY.

*** Init Shipping Unit type
  ME->INIT_SHUTY( ).

endmethod.
method HANDLE_SET_DEFAULT.

*** Make it only if we have the ref to our shipping Manager
  check ME->R_PR_SHIPMGR is bound.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_CUST_SHIPU.

  data:  LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHIPMGR   type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.

*** Get Reference to Shipping Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPMGR.
    endtry.
  endif.

  if LR_PR_SHIPMGR is bound.
    if LR_PR_SHIPMGR->R_CUST_SHIPU is not bound.
***   Process Events to ensure Shipping Manager has initialized its References
      ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).
    endif.
*** Use same Reference to Shipping & Unitization Customizing
    move LR_PR_SHIPMGR->R_CUST_SHIPU to ME->R_CUST_SHIPU.
  else.
    clear ME->R_CUST_SHIPU.
  endif.

endmethod.
method INIT_DIMEN.

  data:          LT_DIMEN      type ZVCXI_XCSU_TT_DIMEN,
                 LT_DIMEN_CUST type ZVCXI_XCSU_TT_SHUTY_DIMEN.
  data:          LS_DIMEN_CUST type ZVCXI_XCS_TC171.
  data:          LF_SHUTY      type ZVCXI_XCSU_SHUTY.
  field-symbols: <S_DIMEN>     type ZVCXI_XCSU_S_DIMEN.

  check ME->R_CUST_SHIPU is bound.
  LF_SHUTY = ME->GET_SHUTY( ).
  check LF_SHUTY is not initial and
        ME->GET_FOVRR_DIMEN( ) eq ABAP_FALSE.
*** Load Dimensions if it is initial.
  LT_DIMEN_CUST = ME->R_CUST_SHIPU->GET_DIMEN_FOR_SHUTY( IF_SHUTY = LF_SHUTY ).
  check LT_DIMEN_CUST is not initial.

  ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).

  clear: LT_DIMEN.

  loop at LT_DIMEN_CUST into LS_DIMEN_CUST.
    append initial line to LT_DIMEN assigning <S_DIMEN>.
    move-corresponding LS_DIMEN_CUST to <S_DIMEN>.
    case ME->S_COMOD-MSYST.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LS_DIMEN_CUST-UOMME to <S_DIMEN>-DIMVA_UOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        move LS_DIMEN_CUST-UOMIM to <S_DIMEN>-DIMVA_UOM.
    endcase.
  endloop.

  ME->SET_DIMEN( IT_DIMEN = LT_DIMEN ).

endmethod.
method INIT_SHUTY.

  if ME->R_CUST_SHIPU is not bound.
    ME->INIT_CUST_SHIPU( ).
  endif.

*** Clear values influenced by Shipping Unit Type
  ME->CLEAR_FOR_SHUTY( ).

*** Init Dimensions
  ME->INIT_DIMEN( ).

endmethod.
method SET_ADJ_DIMEN.

  data:          LF_INITIAL  type        ABAP_BOOL.
  data:          LT_GATE     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM type        /VCXI/VKSR_TT_GATE,
                 LT_DIMEN    type        ZVCXI_XCSU_TT_DIMEN.

*** all dimensions should be maintained.
  append lines of IT_DIMEN to LT_DIMEN.

  LF_INITIAL = ABAP_TRUE.
  loop at LT_DIMEN transporting no fields where DIMVA > 0.
    LF_INITIAL = ABAP_FALSE.
  endloop.

*** only adjust if dimensions are not initial
  if LF_INITIAL eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                     IF_INUSE = ABAP_TRUE ).

    LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                         IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE_CPM to LT_GATE.

*** adjust for each packmat
    LT_DIMEN = ME->CALC_ADJ_DIMEN( IT_GATE  = LT_GATE
                                   IT_DIMEN = LT_DIMEN ).

  endif.

  ME->SET_DIMEN( IT_DIMEN = LT_DIMEN ).

endmethod.
method SET_DIMEN.

  data:          LF_CHANGED type        ABAP_BOOL.
  data:          LS_PARAM   type        /VCXI/VKSR_S_PARAM,
                 LS_DIMEN   type        ZVCXI_XCSU_S_DIMEN.
  data:          LT_DIMEN   type        ZVCXI_XCSU_TT_DIMEN.
  data:          LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.
  field-symbols: <S_DIMEN>  type        ZVCXI_XCSU_S_DIMEN.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIMEN ).

  if IT_DIMEN is supplied and
     IF_SETBY is not initial.

    if LS_PARAM-STRNG is not initial.

***   Set Dimension with defined System of Measure
      ME->GET_DIMEN( importing ET_DIMEN = LT_DIMEN ).

      loop at LT_DIMEN assigning <S_DIMEN>.
        read table IT_DIMEN with key DIMEN = <S_DIMEN>-DIMEN
                            into LS_DIMEN.
        check SY-SUBRC = 0.

***     Do Unit Converison
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_DIMEN>-DIMVA_UOM
                                                           IF_UOM_IN    = LS_DIMEN-DIMVA_UOM
                                                           IF_VALUE_IN  = LS_DIMEN-DIMVA
                                                 importing EF_VALUE_OUT = <S_DIMEN>-DIMVA
                                                           EF_UOM_OUT   = <S_DIMEN>-DIMVA_UOM ).
      endloop.

    else.
      move IT_DIMEN to LT_DIMEN.
    endif.

    try.
        call transformation ID
               source TABLE = LT_DIMEN
               result xml LS_PARAM-STRNG.

      catch CX_TRANSFORMATION_ERROR into LR_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
    endtry.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
  endif.

  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIMEN_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
      if LS_PARAM-STRNG is initial.
***     If also Value is initial -> Initialize Dimensions
        ME->INIT_DIMEN( ).
      endif.
    endif.
  endif.

endmethod.
method SET_FOVRR_DIMEN.

*** Set Setby for Effects
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_DIMEN( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_DIMEN( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_FOVRR_LIMIT.

*** Set Setby for Effects
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_LIMIT( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_LIMIT( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_FOVRR_PACKP.

*** Set Setby for Consumption Scheme
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_PACKP( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_PACKP( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_FOVRR_PRQTY.

*** Set Setby for Packaging Material Quantity
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_PRQTY( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_PRQTY( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_LIMIT.

  data:          LF_CHANGED type        ABAP_BOOL.
  data:          LS_PARAM   type        /VCXI/VKSR_S_PARAM,
                 LS_LIMIT   type        ZVCXI_XCSU_S_LIMIT.
  data:          LT_LIMIT   type        ZVCXI_XCSU_TT_LIMIT.
  data:          LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.
  field-symbols: <S_LIMIT>  type        ZVCXI_XCSU_S_LIMIT.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIMIT ).

  if IT_LIMIT is supplied and
     IT_LIMIT is not initial.

    if LS_PARAM-STRNG is not initial.

***   Set Limit with defined System of Measure
      ME->GET_LIMIT( importing ET_LIMIT = LT_LIMIT ).

      loop at LT_LIMIT assigning <S_LIMIT>.
        read table IT_LIMIT with key DIMEN = <S_LIMIT>-DIMEN
                                     LIMIT = <S_LIMIT>-LIMIT
                            into LS_LIMIT.
        check SY-SUBRC = 0.

***     Do Unit Converison
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_LIMIT>-DIMVA_UOM
                                                           IF_UOM_IN    = LS_LIMIT-DIMVA_UOM
                                                           IF_VALUE_IN  = LS_LIMIT-DIMVA
                                                 importing EF_VALUE_OUT = <S_LIMIT>-DIMVA
                                                           EF_UOM_OUT   = <S_LIMIT>-DIMVA_UOM ).
      endloop.

    else.
      move IT_LIMIT to LT_LIMIT.
    endif.

    try.
        call transformation ID
               source TABLE = LT_LIMIT
               result xml LS_PARAM-STRNG.

      catch CX_TRANSFORMATION_ERROR into LR_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
    endtry.

  elseif IT_LIMIT is supplied and
         IT_LIMIT is initial.
    clear: LS_PARAM-STRNG.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
  endif.

  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIMIT_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_PACKMAT_INUSE.

  data:          LT_GATE          type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_CPM      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all child packaging materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** Add each Dimension Effect along with related infomration to return table
  loop at LT_GATE into LR_GATE.
    LR_GATE->SET_INUSE( IF_INUSE = IF_INUSE ).
  endloop.

endmethod.
method SET_PACKP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PACKP ).

  if IF_PACKP is supplied.
    move IF_PACKP to LS_PARAM-ATWRT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PACKP_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_PALOP_PACKMAT.

  data:  LF_PMATY           type        ZVCXI_XCSU_PMATY.
  data:  LS_PALOP_PACKMAT   type        ZVCXI_XCSU_S_PALOP_PACKMAT.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_GATE_CPM        type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PACKMAT      type ref to ZCL_VCXI_XCSU_PR_PACKMAT,
         LR_PR_CPM          type ref to ZCL_VCXI_XCSU_PR_CPM.

***--------------------------------------------------------------------------------------
*** Get all Packaging Materials
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                   IF_INUSE  = ABAP_TRUE ).

  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  append lines of LT_GATE_CPM to LT_GATE.

*** make sure gates are in correct order that they are applied
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PACKMAT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_PACKMAT.
    endtry.
    if LR_PR_PACKMAT is bound.

***   Get Key
      move LR_PR_PACKMAT->GET_PMATY( ) to LF_PMATY.

***   Find Result Entry
      read table IT_PALOP_PACKMAT into LS_PALOP_PACKMAT
                                  with key PMATY = LF_PMATY.
      check SY-SUBRC eq 0.

***   Set Packaging Material Infos
      LR_PR_PACKMAT->SET_PMATN( IF_PMATN = LS_PALOP_PACKMAT-PMATN
                                IF_SETBY = LS_PALOP_PACKMAT-PMATN_SETBY ).
      LR_PR_PACKMAT->SET_CONSC( IF_CONSC = LS_PALOP_PACKMAT-CONSC
                                IF_SETBY = LS_PALOP_PACKMAT-CONSC_SETBY ).
    else.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CPM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_CPM.
      endtry.
      if LR_PR_CPM is bound.

***     Get Key
        move LR_PR_CPM->GET_PMATY( ) to LF_PMATY.

***     Find Result Entry
        read table IT_PALOP_PACKMAT into LS_PALOP_PACKMAT
                                    with key PMATY = LF_PMATY.
        check SY-SUBRC eq 0.

***     Set Packaging Material Infos
        LR_PR_CPM->SET_CONSC( IF_CONSC = LS_PALOP_PACKMAT-CONSC
                              IF_SETBY = LS_PALOP_PACKMAT-CONSC_SETBY ).
      endif.
    endif.
  endloop.

endmethod.
method SET_PRQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRQTY ).

  if IS_PRQTY is supplied.
    move IS_PRQTY-PRQTY     to LS_PARAM-ATFLV.
    move IS_PRQTY-PRQTY_UOM to LS_PARAM-UNIT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRQTY_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_SAPOS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SAPOS ).

  move IF_SAPOS     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SAPOS_CHANGED ).
  endif.

endmethod.
method SET_SAQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SAQTY ).

  move IS_SAQTY-SAQTY     to LS_PARAM-ATFLV.
  move IS_SAQTY-SAQTY_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SAQTY_CHANGED ).
  endif.

endmethod.
method SET_SHUNT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHUNT ).

  move IF_SHUNT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHUNT_CHANGED ).
  endif.

endmethod.
method SET_SHUTY.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_SHUTY to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHUTY_CHANGED ).
  endif.


endmethod.
method SET_TBQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TBQTY ).

  move IS_TBQTY-TBQTY     to LS_PARAM-ATFLV.
  move IS_TBQTY-TBQTY_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TBQTY_CHANGED ).
  endif.

endmethod.
