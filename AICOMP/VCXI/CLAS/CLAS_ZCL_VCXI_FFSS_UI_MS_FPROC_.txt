
class ZCL_VCXI_FFSS_UI_MS_FPROC definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  data S_MS_FPROC_VIS type ZVCXI_FFSS_S_MS_FPROC_VIS read-only .
  constants C_DYNNR_PSCALE type DYNNR value '0110' ##NO_TEXT.
  constants C_DYNNR_BLANK type DYNNR value '9999' ##NO_TEXT.
  constants C_PURCH type SYUCOMM value 'PURCH' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_OUT_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_MS_FPROC_VIS
    importing
      !IS_MS_FPROC_VIS type ZVCXI_FFSS_S_MS_FPROC_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_REGISTERED_UI_INFO
    redefinition .
protected section.

  data R_PR_MS_FPROC type ref to ZCL_VCXI_FFSS_PR_MS_FPROC .
  data R_GRID_PSCALE type ref to ZCL_VCXI_XCS_GRID_PSCALE .
  data R_GRID_CSTEP_INB type ref to ZCL_VCXI_FFSS_GRID_CSTEP_INB .
  constants C_UC_IN_FSTRC type SYUCOMM value 'IN_FSTRC' ##NO_TEXT.
  constants C_UC_IN_FPROP type SYUCOMM value 'IN_FPROP' ##NO_TEXT.
  constants C_UC_FP_FSTRC type SYUCOMM value 'FP_FSTRC' ##NO_TEXT.
  constants C_UC_FP_OPEN type SYUCOMM value 'OPEN' ##NO_TEXT.

  methods HANDLE_UC_FPROP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FSTRC
    importing
      !IF_UCOMM type SYUCOMM optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OPEN
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods TOGGLE_PURCH
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_UI_MS_FPROC definition
class ZCL_VCXI_FFSS_UI_MS_FPROC implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_MS_FPROC_BIND'
      exporting
        IR_UI_MS_FPROC = ME
      importing
        ES_DYNP        = ME->S_DYNP
        EF_ACTIVE_TAB  = ME->F_ACTIVE_TAB.

*** Create Grid for Price Scale
    create object ME->R_GRID_PSCALE
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0110CC_PSCALE'.

*** Create Grid for CStep Inbound
    create object ME->R_GRID_CSTEP_INB
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_CSTEP_INB'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_MS_FPROC.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->DO_FREE( ).
      clear ME->R_GRID_PSCALE.
    endif.

    if ME->R_GRID_CSTEP_INB is bound.
      ME->R_GRID_CSTEP_INB->DO_FREE( ).
      clear ME->R_GRID_CSTEP_INB.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       If No Dummy Material, then set to read only
          if ME->R_PR_MS_FPROC->IS_DUMMY( ) eq ABAP_FALSE.
            if SCREEN-GROUP1                eq 'DUM'.
              move 0 to SCREEN-INPUT.
              if SCREEN-GROUP3 eq 'HID'.  "Hide by Screen Group
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
              endif.
            endif.
          else.
***         If Dummy Material set the Purchased Flag
            if SCREEN-GROUP1                eq 'PUR'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_MS_FPROC_VIS-FOVRR_MAKTX' and
             ME->S_MS_FPROC_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Disable Material Description if generated
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_MS_FPROC_VIS-MATNR_DESCR' and
             ME->S_MS_FPROC_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Hide Purchasing Infos (e.g Vendor) if not purchased
          if ME->S_MS_FPROC_VIS-PURCH eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK and
             SCREEN-GROUP2            eq 'APU'.  "Acitve Purchasing
            move 1 to SCREEN-INVISIBLE.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Check Open Supervisor is allowed
          if SCREEN-NAME eq '0100FP_BT_OPEN'.
            if ME->R_PR_MS_FPROC->IS_DUMMY( ) eq ABAP_TRUE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Check Gusset is allowed
          if ME->R_PR_MS_FPROC->IS_GUSSET_ALLOWED( ) ne ABAP_TRUE.
            if SCREEN-GROUP2 eq 'GUS'.
              move 0 to SCREEN-ACTIVE.
            endif.
          endif.

***       Check if Input has only one Inbound
          if SCREEN-GROUP1 = '1IN'.
            if ME->R_PR_MS_FPROC->IS_ONLY_ONE_IN( ) eq ABAP_TRUE.
              move 0 to SCREEN-ACTIVE.
            endif.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          if SCREEN-NAME eq '0100FRM_CSTEP'.
            if ME->R_GRID_CSTEP_INB is bound.
              if ME->R_GRID_CSTEP_INB->IS_ENABLED( ) eq ABAP_FALSE.
***             Hide ALV
                ME->R_GRID_CSTEP_INB->DO_FREE( ).

***             Hide Frame
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
              endif.
            endif.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Refresh Grid
    if ME->R_GRID_PSCALE is bound.
      if ME->R_GRID_PSCALE->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_PSCALE->F_REFRESH_REQ.
      endif.
      ME->R_GRID_PSCALE->REFRESH_GRID( ).
    endif.

    if ME->R_GRID_CSTEP_INB is bound.
      if ME->R_GRID_CSTEP_INB->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_CSTEP_INB->F_REFRESH_REQ.
      endif.
      ME->R_GRID_CSTEP_INB->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_MS_FPROC_VIS.

    data: LF_MAKTX type MAKTX.

    check ME->R_PR_MS_FPROC is bound.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if ME->S_MS_FPROC_VIS-MATNR ne IS_MS_FPROC_VIS-MATNR.
      ME->R_PR_MS_FPROC->SET_MATNR( IF_MATNR = IS_MS_FPROC_VIS-MATNR
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material description
    if ME->S_MS_FPROC_VIS-MATNR_DESCR ne IS_MS_FPROC_VIS-MATNR_DESCR or
       ME->S_MS_FPROC_VIS-FOVRR_MAKTX ne IS_MS_FPROC_VIS-FOVRR_MAKTX.
      LF_MAKTX = IS_MS_FPROC_VIS-MATNR_DESCR.

      if IS_MS_FPROC_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        ME->R_PR_MS_FPROC->SET_MAKTX( IF_MAKTX = LF_MAKTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_MS_FPROC->SET_MAKTX( IF_MAKTX = LF_MAKTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Procurement Option
    if ME->S_MS_FPROC_VIS-PURCH ne IS_MS_FPROC_VIS-PURCH.
      ME->R_PR_MS_FPROC->SET_PURCH( IF_PURCH = IS_MS_FPROC_VIS-PURCH
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    if ME->S_MS_FPROC_VIS-FPTOS ne IS_MS_FPROC_VIS-FPTOS.
      ME->R_PR_MS_FPROC->SET_FPTOS( IF_FPTOS = IS_MS_FPROC_VIS-FPTOS
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Vendor
    if ME->S_MS_FPROC_VIS-LIFNR ne IS_MS_FPROC_VIS-LIFNR.
      ME->R_PR_MS_FPROC->SET_LIFNR( IF_LIFNR = IS_MS_FPROC_VIS-LIFNR
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Reverse Film Structure
    if ME->S_MS_FPROC_VIS-FRFST ne IS_MS_FPROC_VIS-FRFST.
      ME->R_PR_MS_FPROC->SET_FRFST( IF_FRFST = IS_MS_FPROC_VIS-FRFST
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Style
    if ME->S_MS_FPROC_VIS-FISTY ne IS_MS_FPROC_VIS-FISTY.
      ME->R_PR_MS_FPROC->SET_FISTY( IF_FISTY = IS_MS_FPROC_VIS-FISTY
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Film Width
    if ME->S_MS_FPROC_VIS-PFWID ne IS_MS_FPROC_VIS-PFWID.
      ME->R_PR_MS_FPROC->SET_PFWID( IS_PFWID = IS_MS_FPROC_VIS-S_PFWID
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Trim Requirement on Width
    if ME->S_MS_FPROC_VIS-PTRQW ne IS_MS_FPROC_VIS-PTRQW.
      ME->R_PR_MS_FPROC->SET_PTRQW( IS_PTRQW = IS_MS_FPROC_VIS-S_PTRQW
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Thickness
    if ME->S_MS_FPROC_VIS-FITHI ne IS_MS_FPROC_VIS-FITHI.
      ME->R_PR_MS_FPROC->SET_FITHI( IS_FITHI = IS_MS_FPROC_VIS-S_FITHI
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Density
    if ME->S_MS_FPROC_VIS-FIDEN ne IS_MS_FPROC_VIS-FIDEN.
      ME->R_PR_MS_FPROC->SET_FIDEN( IS_FIDEN = IS_MS_FPROC_VIS-S_FIDEN
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Left Gusset
    if ME->S_MS_FPROC_VIS-GULEF ne IS_MS_FPROC_VIS-GULEF.
      ME->R_PR_MS_FPROC->SET_GULEF( IS_GULEF = IS_MS_FPROC_VIS-S_GULEF
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Right Gusset
    if ME->S_MS_FPROC_VIS-GURIG ne IS_MS_FPROC_VIS-GURIG.
      ME->R_PR_MS_FPROC->SET_GURIG( IS_GURIG = IS_MS_FPROC_VIS-S_GURIG
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Folding Type
    if ME->S_MS_FPROC_VIS-TFOLD ne IS_MS_FPROC_VIS-TFOLD.
      ME->R_PR_MS_FPROC->SET_TFOLD( IF_TFOLD = IS_MS_FPROC_VIS-TFOLD
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Minimum Lot Size
    if ME->S_MS_FPROC_VIS-LOTMI ne IS_MS_FPROC_VIS-LOTMI.
      ME->R_PR_MS_FPROC->SET_LOTMI( IS_LOTMI = IS_MS_FPROC_VIS-S_LOTMI
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Reduction on Width
    if ME->S_MS_FPROC_VIS-REDUW ne IS_MS_FPROC_VIS-REDUW.
      ME->R_PR_MS_FPROC->SET_REDUW( IS_REDUW = IS_MS_FPROC_VIS-S_REDUW
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Ignore Trim Req.
    if ME->S_MS_FPROC_VIS-FITRW ne IS_MS_FPROC_VIS-FITRW.
      ME->R_PR_MS_FPROC->SET_FITRW( IF_FITRW = IS_MS_FPROC_VIS-FITRW
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_CSTEP_INB is bound.
      ME->R_GRID_CSTEP_INB->CHECK_CHANGED_DATA( ).
    endif.

    case IF_UCOMM.
      when C_UC_IN_FSTRC or C_UC_FP_FSTRC.
        ME->HANDLE_UC_FSTRC( IF_UCOMM = IF_UCOMM ).

      when C_PURCH.
        ME->TOGGLE_PURCH( ).

      when C_UC_IN_FPROP.
        ME->HANDLE_UC_FPROP( ).

      when C_UC_FP_OPEN.
        ME->HANDLE_UC_OPEN( ).
    endcase.

  endmethod.
  method GET_REGISTERED_UI_INFO.

*** Display Blank subscreen if no Price Scale should be shown
    if R_PR_MS_FPROC->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      move ME->C_DYNNR_BLANK to  RS_DYNP-DYNNR.
    else.
      move ME->C_DYNNR_PSCALE to RS_DYNP-DYNNR.
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_MS_FPROC.

  endmethod.
  method HANDLE_UC_FPROP.

    data: LR_BL_FIBPROP    type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIFPROP    type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

*** Get Film Property
    ME->R_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP ).
    ME->R_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).

*** Start Popup
    ZCL_VCXI_FFSS_POPUP_FIPROP=>START( IR_BL_FIBPROP = LR_BL_FIBPROP
                                       IR_BL_FIFPROP = LR_BL_FIFPROP
                                       IS_FIWID      = ME->S_MS_FPROC_VIS-S_FIWID
                                       IS_FITIN      = ME->S_MS_FPROC_VIS-S_FITIN  ).

  endmethod.
  method HANDLE_UC_FSTRC.

    data: LF_LOCKED    type  ABAP_BOOL,
          LF_FISTX_OLD type  ZVCXI_FFS_FISTX,
          LF_FISTX_NEW type  ZVCXI_FFS_FISTX.
    data: LR_BL_FISTRUCT    type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.


    if IF_UCOMM eq C_UC_FP_FSTRC.
***   Check if it`s locked only if is a Dummy material
      if ME->R_PR_MS_FPROC->IS_DUMMY( ) eq ABAP_TRUE.
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      endif.
    endif.

*** Get Film Structure XML
    ME->R_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT
                                                                    EF_FISTX       = LF_FISTX_OLD ).

*** Start Popup
    check LR_BL_FISTRUCT is bound.
    ZCL_VCXI_FFSS_POPUP_FISTRUCT=>START( IR_BL_FISTRUCT = LR_BL_FISTRUCT
                                         IF_LOCKED      = LF_LOCKED ).

    LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX_NEW ).

    if LF_FISTX_OLD ne LF_FISTX_NEW.
      ME->R_PR_MS_FPROC->SET_FISTX( IF_FISTX = LF_FISTX_NEW ).
    endif.

  endmethod.
  method HANDLE_UC_OPEN.

    data: LR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE.

***-------------------------------------------------------------------------------------
*** Open Film Procurement Configuration
    ME->R_PR_MS_FPROC->OPEN( importing ER_GATE_XCONI = LR_GATE_XCONI ).

*** Display new Element
    if LR_GATE_XCONI is bound.
      ME->R_UIGATE->OPEN_SUBSCREEN(   IR_GATE  = LR_GATE_XCONI ).
      ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).
    endif.

  endmethod.
  method INIT_VIS.

    free: ME->S_MS_FPROC_VIS.
    check ME->R_PR_MS_FPROC is bound.

***--------------------------------------------------------------------------------------
*** Material
    ME->R_PR_MS_FPROC->GET_MATNR( receiving RF_MATNR = ME->S_MS_FPROC_VIS-MATNR ).

*** Material Description
    ME->R_PR_MS_FPROC->GET_MATNR_DESCR( receiving RF_DESCR = ME->S_MS_FPROC_VIS-MATNR_DESCR ).

*** Material Description - Overwrite Flag
    ME->R_PR_MS_FPROC->GET_MAKTX( importing EF_FOVRR = ME->S_MS_FPROC_VIS-FOVRR_MAKTX ).

*** Film Type
    ME->R_PR_MS_FPROC->GET_TFILM( importing EF_TFILM = ME->S_MS_FPROC_VIS-TFILM ).

*** Reverse Film Structure (Flag)
    ME->R_PR_MS_FPROC->GET_FRFST( importing EF_FRFST = ME->S_MS_FPROC_VIS-FRFST ).

*** Film Style
    ME->R_PR_MS_FPROC->GET_FISTY( importing EF_FISTY       = ME->S_MS_FPROC_VIS-FISTY
                                            EF_FISTY_DESCR = ME->S_MS_FPROC_VIS-FISTY_DESCR ).

*** Procurement Option
    ME->R_PR_MS_FPROC->GET_PURCH( receiving RF_PURCH = ME->S_MS_FPROC_VIS-PURCH ).
    ME->R_PR_MS_FPROC->GET_FPTOS( receiving RF_FPTOS = ME->S_MS_FPROC_VIS-FPTOS ).

*** Procurement Film Width
    ME->R_PR_MS_FPROC->GET_PFWID( importing ES_PFWID = ME->S_MS_FPROC_VIS-S_PFWID ).

*** Procurement Trim Requirement on Width
    ME->R_PR_MS_FPROC->GET_PTRQW( importing ES_PTRQW = ME->S_MS_FPROC_VIS-S_PTRQW ).

*** Vendor
    ME->R_PR_MS_FPROC->GET_LIFNR( receiving RF_LIFNR = ME->S_MS_FPROC_VIS-LIFNR ).

*** Film Tickness
    ME->R_PR_MS_FPROC->GET_FITHI( importing ES_FITHI = ME->S_MS_FPROC_VIS-S_FITHI ).

*** Film Density
    ME->R_PR_MS_FPROC->GET_FIDEN( importing ES_FIDEN = ME->S_MS_FPROC_VIS-S_FIDEN ).
    move ME->S_MS_FPROC_VIS-S_FIDEN-FIDEN_UOM to ME->S_MS_FPROC_VIS-FIDEN_UOMC6.

*** Left Gusset
    ME->R_PR_MS_FPROC->GET_GULEF( importing ES_GULEF = ME->S_MS_FPROC_VIS-S_GULEF ).

*** Right Gusset
    ME->R_PR_MS_FPROC->GET_GURIG( importing ES_GURIG = ME->S_MS_FPROC_VIS-S_GURIG ).

*** Folding Type
    ME->R_PR_MS_FPROC->GET_TFOLD( importing EF_TFOLD = ME->S_MS_FPROC_VIS-TFOLD
                                            EF_DESCR = ME->S_MS_FPROC_VIS-TFOLD_DESCR ).

*** Number of Layers
    ME->R_PR_MS_FPROC->GET_NOLAY( importing EF_NOLAY = ME->S_MS_FPROC_VIS-NOLAY ).


*** Minimum Lot Size
    ME->R_PR_MS_FPROC->GET_LOTMI( importing ES_LOTMI = ME->S_MS_FPROC_VIS-S_LOTMI ).


***--------------------------------------------------------------------------------------
*** Film Width (Inbound)
    ME->R_PR_MS_FPROC->GET_FIWID( importing ES_FIWID = ME->S_MS_FPROC_VIS-S_FIWID ).

*** Trim Requirement on Width (Inbound)
    ME->R_PR_MS_FPROC->GET_TREQW( importing ES_TREQW = ME->S_MS_FPROC_VIS-S_TREQW ).

*** Number of Ups (Inbound)
    ME->R_PR_MS_FPROC->GET_NOUPS( importing EF_NOUPS = ME->S_MS_FPROC_VIS-NOUPS ).

*** Internal Film Thickness (Inbound)
    ME->R_PR_MS_FPROC->GET_FITIN( importing ES_FITIN = ME->S_MS_FPROC_VIS-S_FITIN ).

*** Film Thickness External (Inbound)
    ME->R_PR_MS_FPROC->GET_FITEX( importing ES_FITEX = ME->S_MS_FPROC_VIS-S_FITEX ).

*** Surface Weight (Inbound)
    ME->R_PR_MS_FPROC->GET_SURWT( importing ES_SURWT = ME->S_MS_FPROC_VIS-S_SURWT ).
    move ME->S_MS_FPROC_VIS-S_SURWT-SURWT_UOM to ME->S_MS_FPROC_VIS-SURWT_UOMC6.


***--------------------------------------------------------------------------------------
*** Reduction on Width
    ME->R_PR_MS_FPROC->GET_REDUW( importing ES_REDUW = ME->S_MS_FPROC_VIS-S_REDUW ).

*** Flag - Ignore Trim Requirement on Width
    ME->R_PR_MS_FPROC->GET_FITRW( importing EF_FITRW = ME->S_MS_FPROC_VIS-FITRW ).

  endmethod.
  method TOGGLE_PURCH.

    data:  LF_PURCH type FLAG.

***----------------------------------------------------------------------------
*** Toggle Purchased flag depending on old value
    if ME->S_MS_FPROC_VIS-PURCH eq ABAP_TRUE.
      move ABAP_FALSE to LF_PURCH.
    else.
      move ABAP_TRUE to LF_PURCH.
    endif.

*** Set Purchased Flag
    ME->R_PR_MS_FPROC->SET_PURCH( IF_PURCH = LF_PURCH
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
