
class ZCL_VCXI_PXSS_CUST_PRINT definition
  public
  create protected .

public section.

  constants C_PRTEC_DIGITAL type ZVCXI_PXS_PRTEC value 'D' ##NO_TEXT.
  constants C_PRTEC_ANALOG type ZVCXI_PXS_PRTEC value 'A' ##NO_TEXT.

  methods GET_APDIM
    returning
      value(RF_APDIM) type ZVCXI_PXS_APDIM
    raising
      /VCXI/CX_CKX .
  methods GET_DEFAULT_INK
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
      !IF_TINK type ZVCXI_PXS_TINK
      !IF_NOCOL type ZVCXI_P0S_NOCOL optional
    exporting
      !EF_MATNR type MATNR
      !ES_COVRG type ZVCXI_P0S_S_COVRG
      !EF_ANITN type ZVCXI_PXS_ANITN
      !ES_APWGT type ZVCXI_PXS_S_APWGT
      !ES_APVOL type ZVCXI_PXS_S_APVOL .
  class-methods GET_MARKP_DESCR
    importing
      !IF_MARKP type ZVCXI_PXS_MARKP
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TMARK_DESCR
    importing
      !IF_TMARK type ZVCXI_PXS_TMARK
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TINK_DESCR
    importing
      !IF_TINK type ZVCXI_PXS_TINK
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_DESCR
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_FMRKA
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RF_FMRKA) type ZVCXI_PXS_FMRKA
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_DESCR
    importing
      !IF_COLCO type ZVCXI_PXS_COLCO
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_MATNR
    importing
      !IF_COLCO type ZVCXI_PXS_COLCO
      !IF_TPRIN type ZVCXI_PXS_TPRIN
      !IF_DCONF type /VCXI/VKCR_DCONF
    exporting
      !EF_MATNR type MATNR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PXSS_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_TINK
    importing
      !IF_COLCO type ZVCXI_P0SS_COLCO
    returning
      value(RF_TINK) type ZVCXI_PXS_TINK
    raising
      /VCXI/CX_CKX .
  class-methods GET_TINK_PRTEC
    importing
      !IF_TINK type ZVCXI_PXS_TINK
    returning
      value(RF_PRTEC) type ZVCXI_PXS_PRTEC
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_PRTEC
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RF_PRTEC) type ZVCXI_PXS_PRTEC
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_TINK
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RT_TINK_INFO) type ZVCXI_PXSS_TT_TINK_INFO
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_FAPCA
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RF_FAPCA) type ZVCXI_PXS_FAPCA
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      WERKS      type        WERKS_D,
      R_INSTANCE type ref to ZCL_VCXI_PXSS_CUST_PRINT,
    end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .
  types:
    YT_TD110 type standard table of ZVCXI_PXS_TD110 with default key .
  types:
    YT_TD111 type standard table of ZVCXI_PXS_TD111 with default key .
  types:
    YT_TD120 type standard table of ZVCXI_PXS_TD120 with default key .
  types:
    YT_TD121 type standard table of ZVCXI_PXS_TD121 with default key .
  types:
    YT_TD120T type standard table of ZVCXI_PXS_TD120T with default key .

  data F_WERKS type WERKS_D .
  class-data T_INSTANCE type YT_INSTANCE .
  data T_TD110 type YT_TD110 .
  data T_TD111 type YT_TD111 .
  data T_TD120 type YT_TD120 .
  data T_TD120T type YT_TD120T .
  data T_TD121 type YT_TD121 .
  class-data:
    T_TC110 type sorted table of ZVCXI_PXS_TC110 with unique key TINK .
  class-data:
    T_TC120 type sorted table of ZVCXI_PXS_TC120 with unique key TPRIN .

  methods CONSTRUCTOR
    importing
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
private section.

  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PXSS_CUST_PRINT definition
class ZCL_VCXI_PXSS_CUST_PRINT implementation.
  method CONSTRUCTOR.

    field-symbols: <S_INSTANCE> type YS_INSTANCE.

***---------------------------------------------------------------------------------
*** Set Plant
    move IF_WERKS to ME->F_WERKS.

*** Load from Database
    ME->LOAD_FROM_DB( ).

***---------------------------------------------------------------------------------
*** Add to Instance Buffer
    append initial line to T_INSTANCE assigning <S_INSTANCE>.
    move ME->F_WERKS to <S_INSTANCE>-WERKS.
    move ME          to <S_INSTANCE>-R_INSTANCE.

  endmethod.
  method GET_APDIM.

*** Calculate Application by Volume
    RF_APDIM = ZCL_VCXI_PXSS_PR_MS_DINK=>C_APDIM_VOLUME.

  endmethod.
  method GET_COLCO_DESCR.

*{   REPLACE        SBXK900204                                        1
*\    RF_DESCR = value #( ME->T_TD120T[ COLCO = IF_COLCO ]-DESCR optional ).
    RF_DESCR = value #( ME->T_TD120T[ COLCO = IF_COLCO WERKS = ME->F_WERKS ]-DESCR optional ).
*}   REPLACE

  endmethod.
  method GET_COLCO_MATNR.

    data: LS_TD121 type ZVCXI_PXS_TD121.
    data: LT_TD121 type YT_TD121.

***------------------------------------------------------------------
*** Find with Data based on Print Type
    LT_TD121 = ME->T_TD121.
    delete LT_TD121 where COLCO ne IF_COLCO
                     or   TPRIN ne IF_TPRIN
                     or   VALFR gt IF_DCONF.
    if LT_TD121 is initial.
***   Find with Data with no Print Type
      LT_TD121 = ME->T_TD121.
      delete LT_TD121 where COLCO ne IF_COLCO
                       or   TPRIN ne SPACE
                       or   VALFR gt IF_DCONF.
    endif.

***------------------------------------------------------------------
*** Get latest entry
    sort LT_TD121 by VALFR descending.
    read table LT_TD121 into LS_TD121 index 1.
    move SY-SUBRC to RF_RETURN.
    if SY-SUBRC eq 0.
      move LS_TD121-MATNR to EF_MATNR.
    endif.

  endmethod.
  method GET_COLCO_TINK.

    RF_TINK = value #( ME->T_TD120[ COLCO = IF_COLCO ]-TINK optional ).

  endmethod.
  method GET_DEFAULT_INK.

    data: LS_TD110 type ZVCXI_PXS_TD110,
          LS_TD111 type ZVCXI_PXS_TD111.
    data: LT_TD110 type YT_TD110,
          LT_TD111 type YT_TD111.

    clear: EF_MATNR,
           ES_COVRG,
           ES_APWGT,
           ES_APVOL.

***---------------------------------------------------------------------
*** Find with all values (Plant, Print Type and Ink Type)
    move ME->T_TD110 to LT_TD110.
    delete LT_TD110 where  WERKS ne ME->F_WERKS
                     or    TPRIN ne IF_TPRIN
                     or    TINK  ne IF_TINK.

    if LINES( LT_TD110 ) lt 1.
***   Find with only Plant and Ink Type
      move ME->T_TD110 to LT_TD110.
      delete LT_TD110 where  WERKS ne ME->F_WERKS
                       or    TPRIN ne SPACE
                       or    TINK  ne IF_TINK.

      if LINES( LT_TD110 ) lt 1.
***     Find with only Plant and Print Type
        move ME->T_TD110 to LT_TD110.
        delete LT_TD110 where  WERKS ne ME->F_WERKS
                         or    TPRIN ne IF_TPRIN
                         or    TINK  ne SPACE.


        if LINES( LT_TD110 ) lt 1.
***       Find with only Plant
          move ME->T_TD110 to LT_TD110.
          delete LT_TD110 where  WERKS ne ME->F_WERKS
                           or    TPRIN ne SPACE
                           or    TINK  ne SPACE.
        endif.
      endif.
    endif.

*** Find first Entry
    read table LT_TD110 into LS_TD110 index 1.
    check SY-SUBRC eq 0.
    move LS_TD110-MATNR   to EF_MATNR.
    move LS_TD110-ANITN   to EF_ANITN.
    move LS_TD110-S_APWGT to ES_APWGT.
    move LS_TD110-S_APVOL to ES_APVOL.

***----------------------------------------------------------------------------
    if ES_COVRG is requested.
***   Get Coverage per Ink
      move ME->T_TD111 to LT_TD111.
      delete LT_TD111 where WERKS ne LS_TD110-WERKS
                       or   TPRIN ne LS_TD110-TPRIN
                       or   TINK  ne LS_TD110-TINK
                       or   NOCOL gt IF_NOCOL.

      if LINES( LT_TD111 ) lt 1.
***     Find with only Plant and Ink Type
        move ME->T_TD111 to LT_TD111.
        delete LT_TD111 where  WERKS ne ME->F_WERKS
                         or    TPRIN ne SPACE
                         or    TINK  ne IF_TINK
                         or    NOCOL gt IF_NOCOL.

        if LINES( LT_TD111 ) lt 1.
***       Find with only Plant and Print Type
          move ME->T_TD111 to LT_TD111.
          delete LT_TD111 where  WERKS ne ME->F_WERKS
                           or    TPRIN ne IF_TPRIN
                           or    TINK  ne SPACE
                           or    NOCOL gt IF_NOCOL.

          if LINES( LT_TD111 ) lt 1.
***         Find with only Plant
            move ME->T_TD111 to LT_TD111.
            delete LT_TD111 where  WERKS ne ME->F_WERKS
                             or    TPRIN ne SPACE
                             or    TINK  ne SPACE
                             or    NOCOL gt IF_NOCOL.

          endif.
        endif.
      endif.

      sort LT_TD111 by NOCOL descending.
      read table LT_TD111 into LS_TD111 index 1.
      if SY-SUBRC eq 0.
        move LS_TD111-COVRG     to ES_COVRG-COVRG.
        move LS_TD111-COVRG_UOM to ES_COVRG-COVRG_UOM.
      endif.
    endif.

  endmethod.
  method GET_INSTANCE.

    data:  LS_INSTANCE type YS_INSTANCE.

    read table T_INSTANCE into LS_INSTANCE with key WERKS = IF_WERKS.
    if SY-SUBRC is initial.
      move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
    else.
      create object RR_INSTANCE
        exporting
          IF_WERKS = IF_WERKS.
    endif.

  endmethod.
  method GET_MARKP_DESCR.

    statics: LT_TC140T type sorted table of ZVCXI_PXS_TC140T with unique key MARKP.
    data: LS_TC140T type ZVCXI_PXS_TC140T.


    if not LINE_EXISTS( LT_TC140T[ MARKP = IF_MARKP ] ).
      select single *
         into LS_TC140T
         from ZVCXI_PXS_TC140T
        where MARKP eq IF_MARKP
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC140T = value #( MARKP = IF_MARKP ).
      endif.
      insert LS_TC140T into table LT_TC140T.
    endif.

    RF_DESCR = LT_TC140T[ MARKP = IF_MARKP ]-DESCR.

  endmethod.
  method GET_TINK_DESCR.

    statics: LT_TC110T type sorted table of ZVCXI_PXS_TC110T with unique key TINK.
    data: LS_TC110T type ZVCXI_PXS_TC110T.


    if not LINE_EXISTS( LT_TC110T[ TINK = IF_TINK ] ).
      select single *
         into LS_TC110T
         from ZVCXI_PXS_TC110T
        where TINK  eq IF_TINK
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC110T = value #( TINK = IF_TINK ).
      endif.
      insert LS_TC110T into table LT_TC110T.
    endif.

    RF_DESCR = LT_TC110T[ TINK = IF_TINK ]-DESCR.

  endmethod.
  method GET_TINK_PRTEC.

    data: LS_TC110 type ZVCXI_PXS_TC110.


    check IF_TINK is not initial.

    if not LINE_EXISTS( T_TC110[ TINK = IF_TINK ] ).
      select single *
         into LS_TC110
         from ZVCXI_PXS_TC110
        where TINK eq IF_TINK.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC110 = value #( TINK = IF_TINK ).
      endif.
      insert LS_TC110 into table T_TC110.
    endif.

    RF_PRTEC = T_TC110[ TINK = IF_TINK ]-PRTEC.

  endmethod.
  method GET_TMARK_DESCR.

    statics: LT_TC130T type sorted table of ZVCXI_PXS_TC130T with unique key TMARK.
    data: LS_TC130T type ZVCXI_PXS_TC130T.


    if not LINE_EXISTS( LT_TC130T[ TMARK = IF_TMARK ] ).
      select single *
         into LS_TC130T
         from ZVCXI_PXS_TC130T
        where TMARK eq IF_TMARK
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC130T = value #( TMARK = IF_TMARK ).
      endif.
      insert LS_TC130T into table LT_TC130T.
    endif.

    RF_DESCR = LT_TC130T[ TMARK = IF_TMARK ]-DESCR.

  endmethod.
  method GET_TPRIN_DESCR.

    statics: LT_TC120T type sorted table of ZVCXI_PXS_TC120T with unique key TPRIN.
    data: LS_TC120T type ZVCXI_PXS_TC120T.


    if not LINE_EXISTS( LT_TC120T[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC120T
         from ZVCXI_PXS_TC120T
        where TPRIN eq IF_TPRIN
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC120T = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC120T into table LT_TC120T.
    endif.

    RF_DESCR = LT_TC120T[ TPRIN = IF_TPRIN ]-DESCR.

  endmethod.
  method GET_TPRIN_FAPCA.

    data: LS_TC120 type ZVCXI_PXS_TC120.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( T_TC120[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC120
         from ZVCXI_PXS_TC120
        where TPRIN eq IF_TPRIN.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC120 = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC120 into table T_TC120.
    endif.

    RF_FAPCA = T_TC120[ TPRIN = IF_TPRIN ]-FAPCA.

  endmethod.
  method GET_TPRIN_FMRKA.

    data: LS_TC120 type ZVCXI_PXS_TC120.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( T_TC120[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC120
         from ZVCXI_PXS_TC120
        where TPRIN eq IF_TPRIN.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC120 = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC120 into table T_TC120.
    endif.

    RF_FMRKA = T_TC120[ TPRIN = IF_TPRIN ]-FMRKA.

  endmethod.
  method GET_TPRIN_PRTEC.

    data: LS_TC120 type ZVCXI_PXS_TC120.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( T_TC120[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC120
         from ZVCXI_PXS_TC120
        where TPRIN eq IF_TPRIN.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC120 = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC120 into table T_TC120.
    endif.

    RF_PRTEC = T_TC120[ TPRIN = IF_TPRIN ]-PRTEC.

  endmethod.
  method GET_TPRIN_TINK.

    types: begin of YS_BUFFER,
             TPRIN       type ZVCXI_PXS_TPRIN,
             T_TINK_INFO type ZVCXI_PXSS_TT_TINK_INFO,
           end of YS_BUFFER.
    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key TPRIN.
    data: LS_BUFFER type YS_BUFFER.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( LT_BUFFER[ TPRIN = IF_TPRIN ] ).
      select *
         into table @data(LT_TC121)
         from ZVCXI_PXS_TC121
        where TPRIN eq @IF_TPRIN
         order by POSID.
      if SY-SUBRC eq 0.
        select TINK, PRTEC
               into table @data(LT_TC110)
               from ZVCXI_PXS_TC110
               for all entries in @LT_TC121
             where TINK eq @LT_TC121-TINK.
      endif.

***   Add entry to Buffer
      LS_BUFFER = value #( TPRIN       = IF_TPRIN
                           T_TINK_INFO = value #( for LS_TC121 in LT_TC121
                                                      ( value #( base corresponding #( LS_TC121 )
                                                                 PRTEC = value #( LT_TC110[ TINK = LS_TC121-TINK ]-PRTEC optional )
                                                               ) ) ) ).
      insert LS_BUFFER into table LT_BUFFER.
    endif.

    RT_TINK_INFO = LT_BUFFER[ TPRIN = IF_TPRIN ]-T_TINK_INFO.

  endmethod.
  method LOAD_FROM_DB.

***--------------------------------------------------------------------------------------
*** Get Printing Default
    select * from ZVCXI_PXS_TD110
             into table ME->T_TD110
            where WERKS eq ME->F_WERKS
               or WERKS eq SPACE.                         "#EC CI_SUBRC

*** Get Printing Default Coverage
    select * from ZVCXI_PXS_TD111
             into table ME->T_TD111
            where WERKS eq ME->F_WERKS
               or WERKS eq SPACE.                         "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Color Code
    select * from ZVCXI_PXS_TD120
             into table ME->T_TD120
            where WERKS eq ME->F_WERKS
               or WERKS eq SPACE.                         "#EC CI_SUBRC

*** Get Color Code Material
    select * from ZVCXI_PXS_TD121
             into table ME->T_TD121
            where WERKS eq ME->F_WERKS
               or WERKS eq SPACE.                         "#EC CI_SUBRC

*** Get Color Code - Text
    select * from ZVCXI_PXS_TD120T
             into table ME->T_TD120T
            where LANGU eq SY-LANGU.                      "#EC CI_SUBRC

  endmethod.
