
class ZCL_VCXI_PXSS_PR_ALTUOM definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_OPQTY .

  constants C_IPRVT_PX_ALTUOM type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_ALTUOM' ##NO_TEXT.
  data R_BL_ALTUOM type ref to ZCL_VCXI_PXSS_BL_ALTUOM read-only .

  methods GET_PRVDR_FG
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_FG) type ref to ZIF_VCXI_PXSS_FG
    raising
      /VCXI/CX_CKX .
  methods GET_QITEM_AS_ALTUOM
    importing
      !IS_ALTUOM type ZVCXI_PXSS_S_ALTUOM
    returning
      value(RS_QITEM) type ZVCXI_XCSS_S_QITEM
    raising
      /VCXI/CX_CKX .
  methods GET_ALTUOM
    importing
      !IF_LRMEI type LRMEI
    exporting
      !EF_MEINS type MEINS
      !EF_MSEHL type MSEHL
    returning
      value(RS_ALTUOM) type ZVCXI_PXSS_S_ALTUOM
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RHNDL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RHNDL) type ref to ZCL_VCXI_PXSS_PR_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHIPMGR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SHIPMGR) type ref to ZCL_VCXI_XCSU_PR_SHIPMGR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHIPUNIT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
      !IF_ATTID_SHUTY type /VCXI/VKS_ATTID optional
      !IF_LAST type ABAP_BOOL optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SHIPUNIT) type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BL type /VCXI/VKSC_IEVNT value 'INIT_BL' ##NO_TEXT.

  methods HANDLE_INIT_BL
    raising
      /VCXI/CX_CKX .
  methods CHECK_QITEM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_QFACT
    returning
      value(RF_QFACT) type ZVCXI_XCS_QFACT
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_ALTUOM definition
class ZCL_VCXI_PXSS_PR_ALTUOM implementation.
  method CHECK_QITEM.

    data:  LS_QITEM_BASE  type ZVCXI_XCSS_S_QITEM.


    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE ).

    if LS_QITEM_BASE-QITEM     is not initial and
       LS_QITEM_BASE-QITEM_UOM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Item Quantity can be determined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '091' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Item Quantity can't be determined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '092' ).
      endif.
    endif.

  endmethod.
  method GET_ALTUOM.

    if ME->R_BL_ALTUOM is not bound.
      ME->HANDLE_INIT_BL( ).
    endif.

    check ME->R_BL_ALTUOM is bound.
    RS_ALTUOM = ME->R_BL_ALTUOM->GET_ALTUOM( exporting IR_GATE  = ME->R_GATE
                                                       IF_LRMEI = IF_LRMEI
                                             importing EF_MEINS = EF_MEINS ).

*** Return Description
    if EF_MSEHL is requested.
      call function 'CONVERSION_EXIT_CUNIT_OUTPUT'
        exporting
          INPUT          = RS_ALTUOM-LRMEI
        importing
          LONG_TEXT      = EF_MSEHL
        exceptions
          UNIT_NOT_FOUND = 1.
      if SY-SUBRC ne 0.
        clear EF_MSEHL.
      endif.
    endif.

  endmethod.
  method GET_KAUSF.

    move 0    to RS_KAUSF-KAUSF.
    move '%'  to RS_KAUSF-KAUSF_UOM.

  endmethod.
  method GET_PRVDR_FG.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_FG.

***------------------------------------------------------------------------------------------------
*** Find Provider for Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_FG.

  endmethod.
  method GET_PRVDR_RHNDL.

    clear: ER_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Roll Handling
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_RHNDL=>C_IPRVT_PX_RHNDL
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_RHNDL.

  endmethod.
  method GET_PRVDR_SHIPMGR.

    clear: ER_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SHIPMGR.

  endmethod.
  method GET_PRVDR_SHIPUNIT.

    data:  LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


    clear: ER_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Unit
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

*** Filter Shipping Units by Shipping Unit Type defined via Attribute
    if IF_ATTID_SHUTY is supplied.
      data(LR_PR_SHIPMGR) = ME->GET_PRVDR_SHIPMGR( ).
      check LR_PR_SHIPMGR is bound.
      LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = IF_ATTID_SHUTY
                                      changing  CT_GATE        = LT_GATE ).
    endif.

    loop at LT_GATE into LR_GATE.
***   Check if found Shipping Unit matches requestet Shipping Unit
      if IF_SHUNT is supplied.
        check cast ZCL_VCXI_XCSU_PR_SHIPUNIT( LR_GATE->R_CLSPR )->GET_SHUNT( ) eq IF_SHUNT.
      endif.

***   Return first or last match
      ER_GATE = LR_GATE.
      RR_PR_SHIPUNIT ?= ER_GATE->R_CLSPR.
      if IF_LAST ne ABAP_TRUE.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_QFACT.

    data(LR_FG) = ME->GET_PRVDR_FG( ).
    check LR_FG is bound.
    RF_QFACT = LR_FG->GET_QFACT( ).

  endmethod.
  method GET_QITEM_AS_ALTUOM.

    data: LS_QITEM_BASE type ZVCXI_XCSS_S_QITEM.


***--------------------------------------------------------------------------------------
*** Get Item Quantity
    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE ).

*** Check if conversion is needed
    if LS_QITEM_BASE-QITEM_UOM eq IS_ALTUOM-LRMEI.
      RS_QITEM-QITEM     = LS_QITEM_BASE-QITEM.
      RS_QITEM-QITEM_UOM = LS_QITEM_BASE-QITEM_UOM.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Apply UMREZ/UMREN
    if IS_ALTUOM-UMREZ ne 0.
      RS_QITEM-QITEM     = LS_QITEM_BASE-QITEM * ( IS_ALTUOM-UMREN / IS_ALTUOM-UMREZ ).
      RS_QITEM-QITEM_UOM = IS_ALTUOM-LRMEI.
    else.
      clear RS_QITEM-QITEM.
    endif.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Item Quantity
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_QITEM( ) ).

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Item Quantity
    ME->CHECK_QITEM( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_BL.
        ME->HANDLE_INIT_BL( ).

***   Calculation Quantity Changed
      when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

***   Item Quantity Changed
      when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).

    endcase.

  endmethod.
  method HANDLE_INIT_BL.

    data: LS_CMPRK type /VCXI/VKC_S_CMPRK.


***--------------------------------------------------------------------------------------
*** Get Configuration Info
    ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

*** Get Alternate Unit
    create object ME->R_BL_ALTUOM
      exporting
        IS_CMPRK = LS_CMPRK
        IF_ISVCE = ME->R_GATE->GET_PARENT( )->F_ID
        IF_WERKS = ME->R_GATE->GET_APPDATA( )->F_WERKS.

  endmethod.
  method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

    data: LS_QITEM_BASE type ZVCXI_XCSS_S_QITEM,
          LS_QITEM_SELF type ZVCXI_XCSS_S_QITEM.


    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE     "Qty in Base UOM (incl. possible Quantity Factor)
                                                 EF_UMREZ      = EF_UMREZ
                                                 EF_UMREN      = EF_UMREN
                                                 ES_QITEM_SELF = LS_QITEM_SELF ).  "Qty in Alt. UOM (incl. possible Quantity Factor)

*** Add Component Scrap in Percentage, if exists
    LS_QITEM_BASE-QITEM     = LS_QITEM_BASE-QITEM + LS_QITEM_BASE-QITEM * ME->GET_KAUSF( )-KAUSF / 100.

*** Qty in Base UoM w/o Quantity Factor (Header Quantity)
    ES_QCALC_BASE-QCALC     = LS_QITEM_BASE-QITEM / ME->GET_QFACT( ).
    ES_QCALC_BASE-QCALC_UOM = LS_QITEM_BASE-QITEM_UOM.

*** Qty in Base UoM with Quantity Factor (Item Quantity)
    ES_QCALC_SELF-QCALC     = LS_QITEM_BASE-QITEM.
    ES_QCALC_SELF-QCALC_UOM = LS_QITEM_BASE-QITEM_UOM.

  endmethod.
  method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

    data: LF_MEINS   type MEINS.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.


    clear: ES_QITEM_BASE,
           EF_UMREZ,
           EF_UMREN,
           ES_QITEM_SELF.

***--------------------------------------------------------------------------------------
*** Get Application Data
    move ME->R_GATE->GET_APPDATA( ) ?to LR_APPDATA.
    check LR_APPDATA is bound.

***--------------------------------------------------------------------------------------
*** Get Self Item Quantity
    if LR_APPDATA->S_AUQTY-AUQTY_UOM is initial.
***   No Alternate Unit found
      move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_SELF-QITEM.
      move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_SELF-QITEM_UOM.
    else.
***   Get Quantity with Alternate Unit
      move LR_APPDATA->S_AUQTY-AUQTY     to ES_QITEM_SELF-QITEM.
      move LR_APPDATA->S_AUQTY-AUQTY_UOM to ES_QITEM_SELF-QITEM_UOM.
    endif.

*** Mutiply by Quantity Factor
    ES_QITEM_SELF-QITEM = ES_QITEM_SELF-QITEM * ME->GET_QFACT( ).

***--------------------------------------------------------------------------------------
*** Get Alternate UoM Information of Base UoM
    data(LS_ALTUOM) = ME->GET_ALTUOM( exporting IF_LRMEI = ES_QITEM_SELF-QITEM_UOM
                                      importing EF_MEINS = LF_MEINS ).

*** Convert Quantity to match Alternative UoM
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = ES_QITEM_SELF-QITEM
                                                       IF_UOM_IN    = ES_QITEM_SELF-QITEM_UOM
                                                       IF_UOM_OUT   = LS_ALTUOM-LRMEI
                                             importing EF_VALUE_OUT = ES_QITEM_SELF-QITEM
                                                       EF_UOM_OUT   = ES_QITEM_SELF-QITEM_UOM ).

***--------------------------------------------------------------------------------------
*** Apply UMREZ/UMREN to calculate Base Quantity
    if LS_ALTUOM-UMREN ne 0.
***   Set Quantity with possible shortened value like SAP Logic of max. 3 decimals
      ES_QITEM_BASE-QITEM     = conv /VCXI/VSMR_OPQTY( ES_QITEM_SELF-QITEM * ( LS_ALTUOM-UMREZ / LS_ALTUOM-UMREN ) ).
      ES_QITEM_BASE-QITEM_UOM = LF_MEINS.
    else.
      clear ES_QITEM_BASE-QITEM.
    endif.

*** The conversion has already been applied. Therefore no furter conversion is required.
    move 1 to EF_UMREN.
    move 1 to EF_UMREZ.

  endmethod.
