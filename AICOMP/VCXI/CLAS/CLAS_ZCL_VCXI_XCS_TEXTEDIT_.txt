
class ZCL_VCXI_XCS_TEXTEDIT definition
  public
  abstract
  create public .

public section.

  constants C_INCLUDE_REGEX type STRING value 'INCLUDE [^ ]* OBJECT [^ ]* ID [^ ]* LANGUAGE( ..)' ##NO_TEXT.
  data F_REFRESH_REQ type ABAP_BOOL .

  methods INSERT_SO10_TEXT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TEXTEDIT
    raising
      /VCXI/CX_CKX .
  methods REMOVE_SO10_TEXT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_TEXT
  abstract
    raising
      /VCXI/CX_CKX .
  methods PASTE
    raising
      /VCXI/CX_CKX .
  methods COPY
    importing
      !IF_CUT type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IF_SO10 type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods PREVIEW
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_TABLINE_LENGTH type I value 132 ##NO_TEXT.
  data F_CONTAINER_NAME type SCRFNAME .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_SPLITTER type ref to CL_GUI_SPLITTER_CONTAINER .
  data R_CONTAINER_TEXTEDIT type ref to CL_GUI_CONTAINER .
  data R_CONTAINER_TOOLBAR type ref to CL_GUI_CONTAINER .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_TEXTEDIT type ref to CL_GUI_TEXTEDIT .
  data R_TOOLBAR type ref to ZCL_VCXI_XCS_TEXTEDIT_TOOLBAR .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .

  methods INIT_EDIT_MODE
    raising
      /VCXI/CX_CKX .
  methods READ_TEXT
  abstract
    returning
      value(RF_TEXT) type STRING
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TEXTEDIT
    raising
      /VCXI/CX_CKX .
  methods READ_TEXT_FROM_EDITOR
    returning
      value(RF_TEXT) type STRING
    raising
      /VCXI/CX_CKX .
  methods SEND_TEXT_TO_EDITOR
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_TEXTEDIT definition
class ZCL_VCXI_XCS_TEXTEDIT implementation.
method CONSTRUCTOR.

  move IR_GATE           to ME->R_GATE.
  move IR_UIGATE         to ME->R_UIGATE.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.

*** Create Toolbar Object
  if IF_SO10 eq ABAP_TRUE.
    create object ME->R_TOOLBAR
      exporting
        IR_GATE     = IR_GATE
        IR_UIGATE   = IR_UIGATE
        IR_TEXTEDIT = ME.
  endif.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
  method COPY.

    data: LF_RC   type I,
          LF_TEXT type STRING.
    data: LT_DATA type standard table of CHAR255.

    check ME->R_TEXTEDIT is bound.

    try.
***     Get Selected Text
        ME->R_TEXTEDIT->GET_SELECTED_TEXTSTREAM( importing SELECTED_TEXT = LF_TEXT ).
        CL_GUI_CFW=>FLUSH( ).

        call function 'CONVERT_STRING_TO_TABLE'
          exporting
            I_STRING         = LF_TEXT
            I_TABLINE_LENGTH = 255
          tables
            ET_TABLE         = LT_DATA.

***     Set Clipboard
        CL_GUI_FRONTEND_SERVICES=>CLIPBOARD_EXPORT( importing  DATA   = LT_DATA
                                                    changing   RC     = LF_RC
                                                    exceptions CNTL_ERROR           = 1
                                                               ERROR_NO_GUI         = 2
                                                               NOT_SUPPORTED_BY_GUI = 3
                                                               others               = 4 ).
        if SY-SUBRC ne 0.
          return.
        endif.

***     Cut Text
        if IF_CUT eq ABAP_TRUE.
          ME->R_TEXTEDIT->SET_SELECTED_TEXTSTREAM( SELECTED_TEXT = '' ).

          ME->R_TEXTEDIT->SET_TEXTMODIFIED_STATUS( exporting STATUS = CL_GUI_TEXTEDIT=>FALSE ).
          ME->UPDATE_TEXT( ).
          move ABAP_TRUE to ME->F_REFRESH_REQ.
          ME->REFRESH_TEXTEDIT( ).
        endif.

      catch CX_ROOT.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method DO_FREE.

***------------------------------------------------------------------------------------------------
*** Free Text Editor
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2 ).

      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TEXTEDIT.
    endif.

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->DO_FREE( ).
      clear ME->R_TOOLBAR.
    endif.



***------------------------------------------------------------------------------------------------
*** Free Textedit Container
    if ME->R_CONTAINER_TEXTEDIT is bound.
      ME->R_CONTAINER_TEXTEDIT->FREE( exceptions
                                        CNTL_ERROR        = 1
                                        CNTL_SYSTEM_ERROR = 2
                                        others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      if ME->R_CONTAINER eq ME->R_CONTAINER_TEXTEDIT.
        clear ME->R_CONTAINER.
      endif.
      clear ME->R_CONTAINER_TEXTEDIT.
    endif.

*** Free Toolbar Container
    if ME->R_CONTAINER_TOOLBAR is bound.
      ME->R_CONTAINER_TOOLBAR->FREE( exceptions
                                  CNTL_ERROR        = 1
                                  CNTL_SYSTEM_ERROR = 2 ).

      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER_TOOLBAR.
    endif.

*** Free Splitter Container
    if ME->R_CONTAINER_SPLITTER is bound.
      ME->R_CONTAINER_SPLITTER->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2 ).

      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER_SPLITTER.
    endif.

*** Free Custom Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method INIT_CONTAINER.

    check ME->R_CONTAINER is not bound.

*** Create Custom Container
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***------------------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Use Container for Text Edit
      ME->R_CONTAINER_TEXTEDIT = ME->R_CONTAINER.

***------------------------------------------------------------------------------------------------
    else.
***   Create Splitter
      create object ME->R_CONTAINER_SPLITTER
        exporting
          PARENT  = ME->R_CONTAINER
          ROWS    = 2
          COLUMNS = 1.
      check ME->R_CONTAINER_SPLITTER is bound.

***   Hide Slider
      ME->R_CONTAINER_SPLITTER->SET_ROW_SASH( ID = 1
                                         TYPE  = CL_GUI_SPLITTER_CONTAINER=>TYPE_MOVABLE
                                         VALUE = CL_GUI_SPLITTER_CONTAINER=>FALSE ).
      ME->R_CONTAINER_SPLITTER->SET_ROW_SASH( ID = 1
                                         TYPE  = CL_GUI_SPLITTER_CONTAINER=>TYPE_SASHVISIBLE
                                         VALUE = CL_GUI_SPLITTER_CONTAINER=>FALSE ).
***   Set Heigth of Toolbar
      ME->R_CONTAINER_SPLITTER->SET_ROW_MODE( MODE = CL_GUI_SPLITTER_CONTAINER=>MODE_ABSOLUTE ).
      ME->R_CONTAINER_SPLITTER->SET_ROW_HEIGHT( ID     = 1
                                                HEIGHT = CL_GUI_CFW=>COMPUTE_METRIC_FROM_DYNP( METRIC = CL_GUI_CONTROL=>METRIC_PIXEL
                                                                                               X_OR_Y = 'Y'
                                                                                               IN     = 1 ) ). " reserve space for supplied number of rows

***   Get Toolbar and Textedit Container
      ME->R_CONTAINER_TOOLBAR = ME->R_CONTAINER_SPLITTER->GET_CONTAINER( ROW    = 1
                                                                         COLUMN = 1 ).
      ME->R_CONTAINER_TEXTEDIT = ME->R_CONTAINER_SPLITTER->GET_CONTAINER( ROW    = 2
                                                                          COLUMN = 1 ).

***   Init Container in Toolbar
      ME->R_TOOLBAR->INIT_CONTAINER( ME->R_CONTAINER_TOOLBAR ).

    endif.

  endmethod.
  method INIT_EDIT_MODE.

    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE or
       ME->R_GATE->IS_INUSE( )  ne ABAP_TRUE.
***   In Not Edit Mode -> Set Textedit to display only
      if ME->R_TEXTEDIT is bound.
        ME->R_TEXTEDIT->SET_READONLY_MODE( READONLY_MODE = CL_GUI_TEXTEDIT=>TRUE ).
      endif.
    else.
***   If we are in Edit Mode -> Set Change mode!
      if ME->R_TEXTEDIT is bound.
        ME->R_TEXTEDIT->SET_READONLY_MODE( READONLY_MODE = CL_GUI_TEXTEDIT=>FALSE ).
      endif.
    endif.


*** Init Edit Mode of Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->INIT_EDIT_MODE( ).
    endif.

  endmethod.
  method INIT_TEXTEDIT.

    if ME->R_TEXTEDIT is not bound.
      create object ME->R_TEXTEDIT
        exporting
          PARENT                 = ME->R_CONTAINER_TEXTEDIT
        exceptions
          ERROR_CNTL_CREATE      = 1
          ERROR_CNTL_INIT        = 2
          ERROR_CNTL_LINK        = 3
          ERROR_DP_CREATE        = 4
          GUI_TYPE_NOT_SUPPORTED = 5
          others                 = 6.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

*** Disable Default Toolbar (can not be extended)
    if ME->R_TOOLBAR  is bound and
       ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->SET_TOOLBAR_MODE( TOOLBAR_MODE = 0 ).
    endif.

*** Init Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->INIT_TOOLBAR( ).
    endif.

  endmethod.
  method INSERT_SO10_TEXT.

    data: LF_TDNAME     type                   TDOBNAME,
          LF_TDOBJECT   type                   TDOBJECT,
          LF_TDID       type                   TDID,
          LF_LANG(2)    type                   C,
          LF_SPRAS      type                   SPRAS,
          LF_INSERT     type                   STRING,
          LF_LINK       type                   STRING,
          LF_POP_ANWSER type                   C.
    data: LS_SHLP_DESCR type                   SHLP_DESCR.
    data: LT_RETVAL type standard table of DDSHRETVAL,
          LT_TLINE  type                   TLINE_TAB.
    field-symbols: <S_INTERFACE> type         DDSHIFACE,
                   <S_RETVAL>    like line of LT_RETVAL.

*** Make sure we have an Instance
    check ME->R_TEXTEDIT is bound.

***--------------------------------------------------------------------------------------
*** Prepare Search help
    call function 'F4IF_GET_SHLP_DESCR'
      exporting
        SHLPNAME = 'ZVCXI_XCS_STXH'
      importing
        SHLP     = LS_SHLP_DESCR.
    loop at LS_SHLP_DESCR-INTERFACE assigning <S_INTERFACE>.
      case <S_INTERFACE>-SHLPFIELD.
        when 'TDNAME'.
          move 'X'      to <S_INTERFACE>-VALFIELD.
        when 'TDOBJECT'.
          move 'X'      to <S_INTERFACE>-VALFIELD.
          move 'TEXT'   to <S_INTERFACE>-VALUE.
        when 'TDID'.
          move 'X'      to <S_INTERFACE>-VALFIELD.
        when 'TDSPRAS'.
          move 'X'      to <S_INTERFACE>-VALFIELD.
          move SY-LANGU to <S_INTERFACE>-VALUE.
        when others.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Show Search help
    call function 'F4IF_START_VALUE_REQUEST'
      exporting
        SHLP          = LS_SHLP_DESCR
      tables
        RETURN_VALUES = LT_RETVAL.

    loop at LT_RETVAL assigning <S_RETVAL>.
      case <S_RETVAL>-FIELDNAME.
        when 'TDNAME'.
          move <S_RETVAL>-FIELDVAL to LF_TDNAME.
        when 'TDOBJECT'.
          move <S_RETVAL>-FIELDVAL to LF_TDOBJECT.
        when 'TDID'.
          move <S_RETVAL>-FIELDVAL to LF_TDID.
        when 'TDSPRAS'.
          move <S_RETVAL>-FIELDVAL to LF_LANG.
        when others.
      endcase.
    endloop.

    check LF_TDNAME is not initial.

    concatenate LF_TDNAME LF_TDOBJECT LF_TDID LF_LANG into LF_LINK separated by '/'.
    concatenate 'Insert text directly or as link?'(001) LF_LINK into LF_LINK separated by SPACE.

*** Show Pop-Up if the Text shall be inserted as Link or directly
    call function 'POPUP_TO_CONFIRM'
      exporting
        TITLEBAR              = 'Insert Text'(004)
        TEXT_QUESTION         = LF_LINK
        TEXT_BUTTON_1         = 'Direct'(002)
        TEXT_BUTTON_2         = 'Link'(003)
        DISPLAY_CANCEL_BUTTON = ABAP_TRUE
        DEFAULT_BUTTON        = '2'
      importing
        ANSWER                = LF_POP_ANWSER.


***--------------------------------------------------------------------------------------
*** Insert SO10 in Text as Link
    if LF_POP_ANWSER eq '2'.
      concatenate 'INCLUDE' LF_TDNAME 'OBJECT' LF_TDOBJECT 'ID' LF_TDID 'LANGUAGE' LF_LANG into LF_INSERT separated by SPACE.
      ME->R_TEXTEDIT->SET_SELECTED_TEXTSTREAM( exporting SELECTED_TEXT                 = LF_INSERT
                                                         ENABLE_EDITING_PROTECTED_TEXT = CL_GUI_TEXTEDIT=>FALSE ).
    elseif LF_POP_ANWSER eq '1'.
***   Insert SO10 in Text directly
      LF_SPRAS = LF_LANG.
      call function 'READ_TEXT'
        exporting
          ID                      = LF_TDID
          LANGUAGE                = LF_SPRAS
          NAME                    = LF_TDNAME
          OBJECT                  = LF_TDOBJECT
        tables
          LINES                   = LT_TLINE
        exceptions
          ID                      = 1
          LANGUAGE                = 2
          NAME                    = 3
          NOT_FOUND               = 4
          OBJECT                  = 5
          REFERENCE_CHECK         = 6
          WRONG_ACCESS_TO_ARCHIVE = 7
          others                  = 8.
      if SY-SUBRC ne 0.
        return.
      endif.

      call function 'IDMX_DI_TLINE_INTO_STRING'
        exporting
          IT_TLINE       = LT_TLINE
        importing
          EV_TEXT_STRING = LF_INSERT.

      ME->R_TEXTEDIT->SET_SELECTED_TEXTSTREAM( exporting SELECTED_TEXT                 = LF_INSERT
                                                         ENABLE_EDITING_PROTECTED_TEXT = CL_GUI_TEXTEDIT=>TRUE ).
    endif.

*** Update Control
    ME->R_TEXTEDIT->SET_TEXTMODIFIED_STATUS( exporting STATUS = CL_GUI_TEXTEDIT=>FALSE ).
    ME->UPDATE_TEXT( ).

    move ABAP_TRUE to ME->F_REFRESH_REQ.
    ME->REFRESH_TEXTEDIT( ).

  endmethod.
  method PASTE.

    data: LT_DATA   type standard table of CHAR255.

    check ME->R_TEXTEDIT is bound.

*** Get Clipboard
    CL_GUI_FRONTEND_SERVICES=>CLIPBOARD_IMPORT( importing  DATA                 = LT_DATA
                                                exceptions CNTL_ERROR           = 1
                                                           ERROR_NO_GUI         = 2
                                                           NOT_SUPPORTED_BY_GUI = 3
                                                           others               = 4 ).
    if SY-SUBRC ne 0.
      return.
    endif.

*** Insert Text
    try.
        ME->R_TEXTEDIT->SET_SELECTED_TEXT_AS_STREAM( SELECTED_TEXT = LT_DATA ).

        ME->R_TEXTEDIT->SET_TEXTMODIFIED_STATUS( exporting STATUS = CL_GUI_TEXTEDIT=>FALSE ).
        ME->UPDATE_TEXT( ).

        move ABAP_TRUE to ME->F_REFRESH_REQ.
        ME->REFRESH_TEXTEDIT( ).

      catch CX_ROOT.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method PREVIEW.

    data: LF_TEXT     type                   STRING,
          LF_TEMP     type                   STRING,
          LF_INSERT   type                   STRING,
          LF_SUBST    type                   STRING,
          LF_ELEM     type                   STRING,
          LF_PATTERN  type                   STRING,
          LF_TABIX    type                   SYTABIX,
          LF_INDEX    type                   SYINDEX,
          LF_TDNAME   type                   TDOBNAME,
          LF_TDOBJECT type                   TDOBJECT,
          LF_TDID     type                   TDID,
          LF_LANG(2)  type                   C,
          LF_SPRAS    type                   SPRAS.
    data: LT_FIND_POS type                   MATCH_RESULT_TAB,
          LT_TLINE    type                   TLINE_TAB,
          LT_ELEMS    type table of          STRING.
    field-symbols: <S_FIND_POS>   type MATCH_RESULT.

    try.
***     Get Text from GUI
        ME->R_TEXTEDIT->GET_TEXTSTREAM( importing  TEXT = LF_TEXT ).

***     Synchronize Automation Queue after Get Methods
        CL_GUI_CFW=>FLUSH( ).

***     GET_TEXTSTREAM uses CRLF but the index positions are with just one linebreak character
        replace all occurrences of CL_ABAP_CHAR_UTILITIES=>CR_LF in LF_TEXT with CL_ABAP_CHAR_UTILITIES=>NEWLINE.

        move LF_TEXT to LF_TEMP.
***     Find INCLUDEs
        find all occurrences of regex C_INCLUDE_REGEX in LF_TEMP results LT_FIND_POS.
        loop at LT_FIND_POS assigning <S_FIND_POS>.
          clear LF_SUBST.
          move LF_TEMP+<S_FIND_POS>-OFFSET(<S_FIND_POS>-LENGTH) to LF_SUBST.

          split LF_SUBST at SPACE into table LT_ELEMS.

***--------------------------------------------------------------------------------------
***       Deserialize SO10 Include Text
          do 4 times.
            move SY-INDEX to LF_INDEX.

            case LF_INDEX.
              when 1.
                move 'INCLUDE' to LF_PATTERN.
              when 2.
                move 'OBJECT' to LF_PATTERN.
              when 3.
                move 'ID' to LF_PATTERN.
              when 4.
                move 'LANGUAGE' to LF_PATTERN.
            endcase.

            read table LT_ELEMS with key TABLE_LINE = LF_PATTERN transporting no fields.
            if SY-SUBRC is initial.
              LF_TABIX = SY-TABIX + 1.
              read table LT_ELEMS into LF_ELEM index LF_TABIX.
              if SY-SUBRC is initial.
                case LF_INDEX.
                  when 1.
                    move LF_ELEM to LF_TDNAME.
                  when 2.
                    move LF_ELEM to LF_TDOBJECT.
                  when 3.
                    move LF_ELEM to LF_TDID.
                  when 4.
                    move LF_ELEM to LF_LANG.
                endcase.
              endif.
            endif.
          enddo.

***--------------------------------------------------------------------------------------
***       Read SO10 Text
          LF_SPRAS = LF_LANG.
          call function 'READ_TEXT'
            exporting
              ID                      = LF_TDID
              LANGUAGE                = LF_SPRAS
              NAME                    = LF_TDNAME
              OBJECT                  = LF_TDOBJECT
            tables
              LINES                   = LT_TLINE
            exceptions
              ID                      = 1
              LANGUAGE                = 2
              NAME                    = 3
              NOT_FOUND               = 4
              OBJECT                  = 5
              REFERENCE_CHECK         = 6
              WRONG_ACCESS_TO_ARCHIVE = 7
              others                  = 8.
          if SY-SUBRC is not initial.
            continue.
          endif.

          call function 'IDMX_DI_TLINE_INTO_STRING'
            exporting
              IT_TLINE       = LT_TLINE
            importing
              EV_TEXT_STRING = LF_INSERT.

          check LF_INSERT is not initial.
          replace first occurrence of LF_SUBST in LF_TEXT with LF_INSERT.

        endloop.

      catch CX_ROOT.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

*** Call to display Textedit Preview Popup
    ZCL_VCXI_XCS_POPUP_TEXTEDIT=>START( IF_TEXT = LF_TEXT ).

  endmethod.
method READ_TEXT_FROM_EDITOR.

*** Make sure we have an Instance
  check ME->R_TEXTEDIT is bound.

*** Get Text from GUI
  ME->R_TEXTEDIT->GET_TEXTSTREAM( importing  TEXT                   = RF_TEXT
                                  exceptions ERROR_CNTL_CALL_METHOD = 1
                                             NOT_SUPPORTED_BY_GUI   = 2
                                             others                 = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Synchronize Automation Queue after Get Methods
  CL_GUI_CFW=>FLUSH( ).

endmethod.
  method REFRESH_TEXTEDIT.

    data: LF_FROM type I.

*** Do only if we need to Refresh
    check ME->F_REFRESH_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ.

*** Get Cursor Position
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->GET_SELECTION_INDEXES( importing FROM_INDEX = LF_FROM ).
    endif.

*** Init Container and TextEditor
    ME->INIT_CONTAINER( ).
    ME->INIT_TEXTEDIT( ).
    ME->INIT_EDIT_MODE( ).

*** Send Text to Editor
    ME->SEND_TEXT_TO_EDITOR( ).

*** Set Cursor Position
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->SET_SELECTION_INDEXES( exporting FROM_INDEX = LF_FROM
                                                       TO_INDEX   = LF_FROM ).
    endif.

  endmethod.
  method REMOVE_SO10_TEXT.

    data:          LF_TEXT       type        STRING,
                   LF_INDEX_TO   type        I,
                   LF_SEL_POS    type        I.
    data:          LT_FIND_POS   type        MATCH_RESULT_TAB.
    field-symbols: <S_FIND_POS>  like line of LT_FIND_POS.

*** Make sure we have an Instance
    check ME->R_TEXTEDIT is bound.

    try.
***     Get Selection Postiton
        ME->R_TEXTEDIT->GET_SELECTION_INDEXES( importing FROM_INDEX = LF_SEL_POS ).

***     Get Text from GUI
        ME->R_TEXTEDIT->GET_TEXTSTREAM( importing  TEXT = LF_TEXT ).

***     Synchronize Automation Queue after Get Methods
        CL_GUI_CFW=>FLUSH( ).

***     GET_TEXTSTREAM uses CRLF but the index positions are with just one linebreak character
        replace all occurrences of CL_ABAP_CHAR_UTILITIES=>CR_LF in LF_TEXT with CL_ABAP_CHAR_UTILITIES=>NEWLINE.

***     Find INCLUDEs
        find all occurrences of regex C_INCLUDE_REGEX in LF_TEXT results LT_FIND_POS.
        loop at LT_FIND_POS assigning <S_FIND_POS>.

***       Find Include
          LF_INDEX_TO = <S_FIND_POS>-OFFSET + <S_FIND_POS>-LENGTH .

          if LF_SEL_POS >= <S_FIND_POS>-OFFSET and
             LF_SEL_POS <= LF_INDEX_TO.
            ME->R_TEXTEDIT->SET_SELECTION_INDEXES( exporting FROM_INDEX = <S_FIND_POS>-OFFSET
                                                             TO_INDEX   = LF_INDEX_TO ).

            ME->R_TEXTEDIT->SET_SELECTED_TEXTSTREAM( exporting SELECTED_TEXT                 = ''
                                                               ENABLE_EDITING_PROTECTED_TEXT = CL_GUI_TEXTEDIT=>TRUE ).
            ME->UPDATE_TEXT( ).
            exit.
          endif.
        endloop.

      catch CX_ROOT.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

*** Update Control
    ME->R_TEXTEDIT->SET_TEXTMODIFIED_STATUS( exporting STATUS = CL_GUI_TEXTEDIT=>FALSE ).
    ME->UPDATE_TEXT( ).

    move ABAP_TRUE to ME->F_REFRESH_REQ.
    ME->REFRESH_TEXTEDIT( ).

  endmethod.
  method SEND_TEXT_TO_EDITOR.

    data: LF_TEXT     type STRING,
          LF_INDEX_TO type I.
    data: LT_FIND_POS type MATCH_RESULT_TAB.
    field-symbols: <S_FIND_POS>   like line of    LT_FIND_POS.


    check ME->R_TEXTEDIT is bound.

***--------------------------------------------------------------------------------------
*** Read Text
    LF_TEXT = ME->READ_TEXT( ).

***--------------------------------------------------------------------------------------
*** Backward Compatibility
    replace all occurrences of '@@@' in LF_TEXT with CL_ABAP_CHAR_UTILITIES=>CR_LF.

*** Set Text to Text Editor
    ME->R_TEXTEDIT->SET_TEXTSTREAM( exporting
                                      TEXT                   = LF_TEXT
                                    exceptions
                                      ERROR_CNTL_CALL_METHOD = 1
                                      NOT_SUPPORTED_BY_GUI   = 2
                                      others                 = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Protect Includes
    try.
***     GET_TEXTSTREAM uses CRLF but the index positions are with just one linebreak character
        replace all occurrences of CL_ABAP_CHAR_UTILITIES=>CR_LF in LF_TEXT with CL_ABAP_CHAR_UTILITIES=>NEWLINE.

***     Find INCLUDEs
        find all occurrences of regex C_INCLUDE_REGEX in LF_TEXT results LT_FIND_POS.
        loop at LT_FIND_POS assigning <S_FIND_POS>.

***       Protect Include
          LF_INDEX_TO = <S_FIND_POS>-OFFSET + <S_FIND_POS>-LENGTH.
          ME->R_TEXTEDIT->SET_SELECTION_INDEXES( exporting FROM_INDEX = <S_FIND_POS>-OFFSET
                                                           TO_INDEX   = LF_INDEX_TO ).
          ME->R_TEXTEDIT->PROTECT_SELECTION( exporting PROTECT_MODE  = 1 ).
        endloop.

      catch CX_ROOT.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
