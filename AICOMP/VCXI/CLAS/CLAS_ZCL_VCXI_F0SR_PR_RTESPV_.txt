
class ZCL_VCXI_F0SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  abstract
  create public .

public section.

  constants C_IPRVT_F0_RTESPV type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SR_RTESPV' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
  methods GET_IMFXC
    exporting
      !ET_IMFXC_IN type ZVCXI_XCSP_TT_IMFXC
      !ET_IMFXC_OUT type ZVCXI_XCSP_TT_IMFXC
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RTESPV_BY_XCONO
    importing
      !IR_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE
      !IF_TABIX type I optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !EF_IMFXC type ZVCXI_XCSP_IMFXC
    returning
      value(RR_PR_RTESPV) type ref to ZCL_VCXI_F0SR_PR_RTESPV
    raising
      /VCXI/CX_CKX .

  methods EVALUATE_BL_PRTE
    redefinition .
  methods FILL_PROD
    redefinition .
  methods GET_EVQTY_BY_IMFXC
    redefinition .
  methods GET_EXQTY
    redefinition .
  methods GET_STATUS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods IS_FILL_PROD_ALLOWED
    redefinition .
  methods REFRESH_AUTO
    redefinition .
protected section.

  types:
    begin of YS_BUFFER,
           R_PR_RTESPV type ref to ZCL_VCXI_F0SR_PR_RTESPV,
           R_MFMI      type ref to DATA,
         end   of YS_BUFFER .
  types:
    YT_BUFFER type standard table of YS_BUFFER .

  constants C_IEVNT_I_RECALC_EVQTY_IN type /VCXI/VKSC_IEVNT value 'RECALC_EVQTY_IN' ##NO_TEXT.
  constants C_IEVNT_O_EVQTY_IN_CHANGED type /VCXI/VKSC_IEVNT value 'EVQTY_IN_CHANGED' ##NO_TEXT.
  data F_DESERIALIZE_REQ type ABAP_BOOL .
  data I_WERKS type /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS .

  methods CREATE_BL_PSTEP
    importing
      !IF_IPSTP type C
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IF_COMBW type ZVCXI_F0S_COMBW optional
    returning
      value(RR_BL_PSTEP) type ref to ZCL_VCXI_F0SR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_SHIPMGR
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_SHIPUNIT
    importing
      !IR_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_SHIPUNIT type /VCXI/VKSR_TT_GATE
      !IF_ATTID_SHUTY type /VCXI/VKS_ATTID
      !IF_IPSTP type /VCXI/VSMC_IPSTP
      !IF_COMBW type ZVCXI_F0S_COMBW optional
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_ICELM
  abstract
    returning
      value(RF_ICELM) type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RI_WERKS) type /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS
    raising
      /VCXI/CX_CKX .
  methods GET_XCOMP_RTESEL
    returning
      value(RT_XCOMP_RTESEL) type ZVCXI_F0SR_TT_XCOMP_RTESEL
    raising
      /VCXI/CX_CKX .
  methods GET_XCONR
    returning
      value(RT_XCONR) type ZVCXI_F0SS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REDETERMINE_DUMMY
    raising
      /VCXI/CX_CKX .
  methods SET_EVENT_HANDLER
    importing
      !IF_ACTIVATION type ABAP_BOOL
      !IR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OUTPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ET_GATE_CHILD type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_OUTPUT) type ref to ZCL_VCXI_F0SS_PR_OUTPUT
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_COMBI_PSTEP
    redefinition .
  methods HANDLE_DESERIALIZE
    redefinition .
  methods HANDLE_PROD_FILLED
    redefinition .
  methods HANDLE_REBUILD_BL_PSTEP
    redefinition .
  methods HANDLE_UPDATE_RTE_DEF
    redefinition .
  methods REFRESH_RANK
    redefinition .
  methods UPDATE_BL_PRTE_BY_RTE_DEF
    redefinition .
private section.

  class-data F_BUFFER_PROD_FILLED type ABAP_BOOL value ABAP_UNDEFINED ##NO_TEXT.
endclass. "ZCL_VCXI_F0SR_PR_RTESPV definition
class ZCL_VCXI_F0SR_PR_RTESPV implementation.
  method BUILD_RTE_COMBI_PSTEP.

    data: LR_RTE_PSTEP_CURR type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP_CURR  type ref to ZCL_VCXI_F0SR_BL_PSTEP.
    data: LR_RTE_PSTEP_PREV type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP_PREV  type ref to ZCL_VCXI_F0SR_BL_PSTEP.
    field-symbols: <S_RTE_COMBI_PSTEP> type /VCXI/VSMR_S_RTE_COMBI_PSTEP.


    loop at IT_RTE_PSTEP into LR_RTE_PSTEP_CURR.
      move LR_RTE_PSTEP_CURR->R_BLOBJ ?to LR_BL_PSTEP_CURR.

***   If we have two Prodcution Steps
      if LR_BL_PSTEP_PREV is bound.
***     Check if they should be combined
        if LR_BL_PSTEP_CURR->F_COMBW eq 'P' or  "Previous
           LR_BL_PSTEP_PREV->F_COMBW eq 'N'.    "Next

***       Create a new Combination Entry if non is active
          if <S_RTE_COMBI_PSTEP> is not assigned.
            append initial line to RT_RTE_COMBI_PSTEP assigning <S_RTE_COMBI_PSTEP>.
            append LR_RTE_PSTEP_PREV to <S_RTE_COMBI_PSTEP>-T_RTE_PSTEP.
          endif.

***       Add current PStep to Combination Entry
          append LR_RTE_PSTEP_CURR to <S_RTE_COMBI_PSTEP>-T_RTE_PSTEP.
        else.
***       End combination entry
          unassign <S_RTE_COMBI_PSTEP>.
        endif.
      endif.

***   Keep for next Round
      move LR_RTE_PSTEP_CURR to LR_RTE_PSTEP_PREV.
      move LR_BL_PSTEP_CURR  to LR_BL_PSTEP_PREV.
    endloop.

  endmethod.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_F0SR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

*** Request Auto Redetermination
    move ABAP_TRUE to ME->F_REDETERMINATION_REQ.

  endmethod.
  method CREATE_BL_PSTEP.

****------------------------------------------------------------------------------------------------
**** Create Instance based on ID
*    case IF_IPSTP.
*      when ZCL_VCXI_F0SR_BL_PSTEP_xxx=>C_IPSTP_xxx.
*        create object RR_BL_PSTEP
*          type ZCL_VCXI_F0SR_BL_PSTEP_xxx
*          exporting
*            IF_IPSTP   = IF_IPSTP
*            IF_DATE    = ME->F_DATE
*            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
*    endcase.

***------------------------------------------------------------------------------------------------
*** Initialize Production Step
    check RR_BL_PSTEP is bound.
    RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
    RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
    RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                               IT_PRVDR = IT_PRVDR ).

  endmethod.
  method EVALUATE_BL_PRTE.

    data: LS_MQTYI type ZVCXI_XCSP_S_MQTYI.

    if ME->R_RTESEL is bound.
***   Buffer Machine Quantity In of Selected Route
      move ME->R_RTESEL->S_MQTYI to LS_MQTYI.
    endif.

    SUPER->EVALUATE_BL_PRTE( IT_BL_PRTE = IT_BL_PRTE ).

*** If Machine Quantity of Selected Routes has changed by the Evaluation, inform others via event
    if ME->R_RTESEL is bound and
       LS_MQTYI     is not initial and
       ME->R_RTESEL->S_MQTYI ne LS_MQTYI.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EVQTY_IN_CHANGED ).
    endif.

  endmethod.
  method FILL_PROD.

    data: LS_EXQTY        type /VCXI/VKCR_S_EXQTY.
    data: LT_XCOMP_RTESEL type ZVCXI_F0SR_TT_XCOMP_RTESEL,
          LT_GATE_RTESPV  type /VCXI/VKSR_TT_GATE.
    data: LR_BL_RTESPV   type ref to ZCL_VCXI_F0SR_BL_RTESPV,
          LR_RTEFIL      type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV   type ref to ZCL_VCXI_F0SR_PR_RTESPV.

    check ME->R_BL_RTESPV is bound.

*** Get Explosion Quantity
    move ME->GET_EXQTY( ) to LS_EXQTY.

***--------------------------------------------------------------------------------------
*** Get Selected Route of Component
    LT_XCOMP_RTESEL = ME->GET_XCOMP_RTESEL( ).

*** Set Routes to Production
    move ME->R_BL_RTESPV ?to LR_BL_RTESPV.
    LR_BL_RTESPV->SET_F0_BL_PRTE( IT_XCOMP_RTESEL = LT_XCOMP_RTESEL
                                  IS_EXQTY        = LS_EXQTY ).

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor of Components
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                            IF_INUSE = ABAP_TRUE ).

*** Activate Event Handler
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
      LR_PR_RTESPV->SET_EVENT_HANDLER( IR_PR_RTESPV  = ME
                                       IF_ACTIVATION = ABAP_TRUE ).
    endloop.

*** Trigger Event without reference
    clear LR_RTEFIL.
    raise event PROD_FILLED exporting IR_BL_PRTE = LR_RTEFIL.

*** Deactivate Event Handler
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
      LR_PR_RTESPV->SET_EVENT_HANDLER( IR_PR_RTESPV  = ME
                                       IF_ACTIVATION = ABAP_FALSE ).
    endloop.

  endmethod.
  method GET_BL_PSTEP_SHIPMGR.
  endmethod.
  method GET_BL_PSTEP_SHIPUNIT.

    data: LT_GATE_SHIPUNIT type /VCXI/VKSR_TT_GATE,
          LT_GATE_PACKMAT  type /VCXI/VKSR_TT_GATE,
          LT_GATE_PSCALE   type /VCXI/VKSR_TT_GATE,
          LT_PRVDR         type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SHIPMGR    type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
          LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PACKMAT  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PSCALE   type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Shipping Manager
    LR_PR_SHIPMGR ?= IR_GATE_SHIPMGR->R_CLSPR.

*** Filter Shipping Units
    LT_GATE_SHIPUNIT = IT_GATE_SHIPUNIT.
    LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = IF_ATTID_SHUTY
                                    changing  CT_GATE        = LT_GATE_SHIPUNIT ).

*** Sort Shipping Units
    if LINES( LT_GATE_SHIPUNIT ) gt 1.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_SHIPUNIT ).
    endif.

*** Find all Provider for Price Scales
    LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                            IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials and Configured Packaging Materials
    LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                             IF_INUSE = ABAP_TRUE ).
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                           IF_INUSE = ABAP_TRUE ) to LT_GATE_PACKMAT.

    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = IR_GATE_SHIPMGR ) ne ABAP_TRUE.
        delete LT_GATE_PACKMAT.
        continue.
      endif.
    endloop.

*** Sort Packaging Materials
    if LINES( LT_GATE_PACKMAT ) gt 1.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_PACKMAT ).
    endif.

***------------------------------------------------------------------------------------------------
*** Create BL PStep for each Unit
    loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
***   Get Shipping Manager and Shipping Unit as Provider.
      LT_PRVDR = value #( ( IR_GATE_SHIPMGR )
                          ( LR_GATE_SHIPUNIT ) ).

***   Get Packaging Materials which are in line with Shipping Unit
      loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
        if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
          append LR_GATE_PACKMAT to LT_PRVDR.
        else.
          continue.
        endif.

***     Get Price Scales which are in line with Packaging Material
        loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
          if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) eq ABAP_TRUE.
            append LR_GATE_PSCALE to LT_PRVDR.
          endif.
        endloop.
      endloop.

***   Create BL PStep
      append ME->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                  IT_PRVDR = LT_PRVDR
                                  IF_COMBW = IF_COMBW ) to CT_BL_PSTEP.

    endloop.

  endmethod.
  method GET_EVQTY_BY_IMFXC.

*** Force Deserialize if currently requested
    if ME->F_DESERIALIZE_REQ eq ABAP_TRUE.
      ME->HANDLE_DESERIALIZE( ).
    endif.

*** Call Super
    RS_EVQTY = SUPER->GET_EVQTY_BY_IMFXC( IF_IMFXC = IF_IMFXC ).

  endmethod.
  method GET_EXQTY.

    data: LF_UMREZ   type        UMREZ.
    data: LS_QCALC   type        ZVCXI_XCSS_S_QCALC.
    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_OPQTY   type ref to ZIF_VCXI_XCSS_OPQTY,
          LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
*** Find Inline
    loop at LT_GATE into LR_GATE.
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endloop.
*** Take first
    if LR_OPQTY is not bound.
      read table LT_GATE into LR_GATE index 1.
      if SY-SUBRC eq 0.
        try.
            move LR_GATE->R_CLSPR ?to LR_OPQTY.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_OPQTY.
        endtry.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
    if LR_OPQTY is bound.
      LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = LS_QCALC
                                     EF_UMREZ      = LF_UMREZ ).
***   Use Base and multiply by Numerator
      RS_EXQTY-EXQTY     = LS_QCALC-QCALC * LF_UMREZ.
      RS_EXQTY-EXQTY_UOM = LS_QCALC-QCALC_UOM.
    else.
      LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
      move LR_APPDATA->S_OPQTY-OPQTY     to RS_EXQTY-EXQTY.
      move LR_APPDATA->S_OPQTY-OPQTY_UOM to RS_EXQTY-EXQTY_UOM.
    endif.

  endmethod.
  method GET_IMFXC.

    data: LF_IMFXC type        ZVCXI_XCSP_IMFXC.
    data: LS_XCONR type        ZVCXI_F0SS_S_XCONR.
    data: LT_GATE  type        /VCXI/VKSR_TT_GATE,
          LT_XCONR type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI  type ref to ZCL_VCXI_F0SS_PR_XCONI.


***--------------------------------------------------------------------------------------
*** Get Specification of current component
    ME->GET_PRVDR_SPEC( importing ER_GATE = LR_GATE_SPEC ).

*** Get Connections Inbound
    if ET_IMFXC_IN is requested.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONI=>C_IPRVT_XCONI
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        check LR_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
            check LR_PR_XCONI is bound.

            move LR_PR_XCONI->GET_GXCON( ) to LF_IMFXC.
            append LF_IMFXC to ET_IMFXC_IN.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.


    if ET_IMFXC_OUT is requested.
***--------------------------------------------------------------------------------------
***   Get X-Connections (References)
      LT_XCONR = ME->GET_XCONR( ).

***--------------------------------------------------------------------------------------
***   Get Connections Outbound
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONO=>C_IPRVT_XCONO
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
            if SY-SUBRC eq 0.
              check LS_XCONR-R_GATE_IN is bound.
              move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
              check LR_PR_XCONI is bound.
              move LR_PR_XCONI->GET_GXCON( ) to LF_IMFXC.
            else.
              clear LF_IMFXC.
            endif.

            append LF_IMFXC to ET_IMFXC_OUT.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_OUTPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_OUTPUT=>C_IPRVT_F0_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.
    check ER_GATE is bound.

***--------------------------------------------------------------------------------------
*** Find Child Provider for Output
    if ET_GATE_CHILD is requested.
      ET_GATE_CHILD = ER_GATE->GET_PRVDR( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                          IF_INUSE = ABAP_TRUE ).
    endif.

  endmethod.
  method GET_PRVDR_RTESPV_BY_XCONO.

    data: LF_TABIX type I.
    data: LT_GATE_CHILD type /VCXI/VKSR_TT_GATE,
          LT_IMFXC_IN   type ZVCXI_XCSP_TT_IMFXC,
          LT_IMFXC_OUT  type ZVCXI_XCSP_TT_IMFXC.
    data: LT_GATE_RTESPV type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV   type ref to ZCL_VCXI_F0SR_PR_RTESPV.


***--------------------------------------------------------------------------------------
    if IF_TABIX is not supplied.
***   Get Provider for Output including children
      ME->GET_PRVDR_OUTPUT( importing ET_GATE_CHILD = LT_GATE_CHILD ).
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).
      LF_TABIX = LINE_INDEX( LT_GATE_CHILD[ TABLE_LINE = IR_GATE_XCONO ] ).
    else.
      LF_TABIX = IF_TABIX.
    endif.

***--------------------------------------------------------------------------------------
*** Get x-Connect based on position of Gate in relation to Output
    ME->GET_IMFXC( importing ET_IMFXC_OUT = LT_IMFXC_OUT ).
    read table LT_IMFXC_OUT into EF_IMFXC index LF_TABIX.

*** Find Provider for Routing Supervisor of Components
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                            IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
***   Get Information by Routing Supervisor
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_RTESPV.
      endtry.

      check LR_PR_RTESPV is bound.

***   Get Inbound Connections
      refresh LT_IMFXC_IN.
      LR_PR_RTESPV->GET_IMFXC( importing ET_IMFXC_IN = LT_IMFXC_IN ).
      read table LT_IMFXC_IN with key TABLE_LINE = EF_IMFXC
                             transporting no fields.
      check SY-SUBRC is initial.

***   Return Routing Supervisor
      RR_PR_RTESPV = LR_PR_RTESPV.
      ER_GATE      = LR_GATE_RTESPV.
    endloop.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

    data:  LF_RETURN  type        I.
    data:  LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data:  LR_GATE    type ref to /VCXI/CL_VKSR_GATE.

    move /VCXI/CL_VKSR_SERVICE=>C_ELMST_G to RF_ELMST.

***--------------------------------------------------------------------------------------
    if ME->F_BUFFER_PROD_FILLED eq ABAP_UNDEFINED.
***   Fill Production is not required
      ME->CHECK_PROD_FILL( importing EF_RETURN = LF_RETURN ).
      if LF_RETURN eq 0.
        move ABAP_TRUE  to ME->F_BUFFER_PROD_FILLED.
      else.
        move ABAP_FALSE to ME->F_BUFFER_PROD_FILLED.
      endif.

***   Find Provider for Routing Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                       IF_INUSE = ABAP_TRUE ).
***   Set Status of others
      loop at LT_GATE into LR_GATE
                     where TABLE_LINE ne ME->R_GATE.
        LR_GATE->GET_STATUS( ).
      endloop.

***   Set own Status
      if ME->F_BUFFER_PROD_FILLED eq ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***   Clear Buffer
      move ABAP_UNDEFINED to ME->F_BUFFER_PROD_FILLED.

    else.
      if ME->F_BUFFER_PROD_FILLED eq ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Redetermination is not required
    if ME->F_REDETERMINATION_REQ ne ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LF_WERKS type WERKS_D.
    data: LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.
    field-symbols: <S_WERKS> type line of /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS.

***--------------------------------------------------------------------------------------
    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    if LR_PR_SPEC is bound.
***   Use Plant of Specification
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = LF_WERKS ).
    else.
***   Use Configuration Plant as provided by Application Data
      LF_WERKS = ME->R_GATE->GET_APPDATA( )->F_WERKS.
    endif.

***--------------------------------------------------------------------------------------
*** Filter to Plant
    append initial line to RI_WERKS assigning <S_WERKS>.
    move 'I'         to <S_WERKS>-SIGN.
    move 'EQ'        to <S_WERKS>-OPTION.
    move LF_WERKS    to <S_WERKS>-LOW.

  endmethod.
  method GET_XCOMP_RTESEL.

    data: LF_IMFXC                      type          ZVCXI_XCSP_IMFXC.
    data: LT_GATE_RTESPV type          /VCXI/VKSR_TT_GATE,
          LT_BUFFER      type          YT_BUFFER.
    data: LR_GATE_RTESPV   type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV     type ref to   ZCL_VCXI_F0SR_PR_RTESPV,
          LR_PR_RTESPV_OLD type ref to   ZCL_VCXI_F0SR_PR_RTESPV,
          LR_BL_PSTEP      type ref to   ZCL_VCXI_F0SR_BL_PSTEP.
    field-symbols: <S_XCOMP_RTESEL>     type          ZVCXI_F0SR_S_XCOMP_RTESEL,
                   <S_XCOMP_RTESEL_NEW> type          ZVCXI_F0SR_S_XCOMP_RTESEL,
                   <T_MFMI_OLD>         type standard table,
                   <T_MFMI_NEW>         type standard table,
                   <T_MFMI_TMP>         type standard table,
                   <S_MFMI>             type          ANY,
                   <T_MFSI>             type standard table,
                   <S_MFSI>             type          ANY,
                   <S_BUFFER>           type          YS_BUFFER.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor of Components
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).
    check LT_GATE_RTESPV is not initial.

***--------------------------------------------------------------------------------------
*** Process all Supervisor
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
      check LR_PR_RTESPV is bound.

***   Refresh Auto
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).

      if LR_PR_RTESPV->R_RTESEL is not bound.
***     No Selected Route defined.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '310' ).
      endif.

***   Add Selected Route to List
      append initial line to RT_XCOMP_RTESEL assigning <S_XCOMP_RTESEL>.
      move LR_PR_RTESPV->GET_ICELM( )      to <S_XCOMP_RTESEL>-ICELM.
      move LR_PR_RTESPV->R_RTESEL->COPY( ) to <S_XCOMP_RTESEL>-R_RTESEL.
      move LR_PR_RTESPV->R_BL_RTESPV       to <S_XCOMP_RTESEL>-R_BL_RTESPV.

      if <S_XCOMP_RTESEL>-R_RTESEL is not bound.
***     No Selected Route defined.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '310' ).
      endif.

***   Get x-Connects
      LR_PR_RTESPV->GET_IMFXC( importing ET_IMFXC_IN  = <S_XCOMP_RTESEL>-T_IMFXC_IN
                                         ET_IMFXC_OUT = <S_XCOMP_RTESEL>-T_IMFXC_OUT ).

      loop at <S_XCOMP_RTESEL>-T_IMFXC_IN into LF_IMFXC.
        append ABAP_TRUE to <S_XCOMP_RTESEL>-T_NEXTL.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Reassign MFMIs of Dummy Routes
    loop at RT_XCOMP_RTESEL assigning <S_XCOMP_RTESEL>
                            where R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL is initial.

***   Get Routing Supervisor (by Table Index)
      read table LT_GATE_RTESPV into LR_GATE_RTESPV index SY-TABIX.
      move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.

***   Assign Reference to MFMI
      check LR_PR_RTESPV->R_MFMI is bound.
      assign LR_PR_RTESPV->R_MFMI->* to <T_MFMI_OLD>.

***   Get X-Connect ID Outbound
      if LINES( <S_XCOMP_RTESEL>-T_IMFXC_OUT ) ne 1.
        raise exception type /VCXI/CX_CKX.
      endif.
      read table <S_XCOMP_RTESEL>-T_IMFXC_OUT into LF_IMFXC
                                              index 1.
      clear <S_XCOMP_RTESEL>-R_RTESEL.

      move LR_PR_RTESPV to LR_PR_RTESPV_OLD.

***   Find matching Inbound
      clear: LR_PR_RTESPV.
      loop at RT_XCOMP_RTESEL assigning <S_XCOMP_RTESEL_NEW>.
***     Get Routing Supervisor (by Table Index)
        read table LT_GATE_RTESPV into LR_GATE_RTESPV index SY-TABIX.
        move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.

***     Verify Match
        read table <S_XCOMP_RTESEL_NEW>-T_IMFXC_IN with key TABLE_LINE = LF_IMFXC
                                                   transporting no fields.
        if SY-SUBRC eq 0.
          exit.
        else.
          clear: LR_PR_RTESPV.
        endif.
      endloop.

      if LR_PR_RTESPV is not bound.
        raise exception type /VCXI/CX_CKX.
      endif.

***   Assign Reference to MFMI
      read table LT_BUFFER with key R_PR_RTESPV = LR_PR_RTESPV
                           assigning <S_BUFFER>.
      if SY-SUBRC ne 0.
        append initial line to LT_BUFFER assigning <S_BUFFER>.
        move LR_PR_RTESPV to <S_BUFFER>-R_PR_RTESPV.

        if LR_PR_RTESPV->R_MFMI is bound.
***       Create copy of MFMI New
          assign LR_PR_RTESPV->R_MFMI->* to <T_MFMI_TMP>.
          create data <S_BUFFER>-R_MFMI like <T_MFMI_TMP>.
          assign <S_BUFFER>-R_MFMI->* to <T_MFMI_NEW>.
          move <T_MFMI_TMP> to <T_MFMI_NEW>.
        else.
***       Create copy of MFMI Old for New
          create data <S_BUFFER>-R_MFMI like <T_MFMI_OLD>.
        endif.
      endif.

***   Get old MFMI
      read table <T_MFMI_OLD> assigning <S_MFMI> index 1.
      if SY-SUBRC ne 0.
        raise exception type /VCXI/CX_CKX.
      endif.

***   Get Production Step which consumes X-Connection ID
      LR_BL_PSTEP ?= ME->GET_BL_PSTEP_BY_IMFXC( IF_IMFXC   = LF_IMFXC
                                                IR_BL_PRTE = <S_XCOMP_RTESEL_NEW>-R_RTESEL ).
      if LR_BL_PSTEP is bound.
        LR_BL_PSTEP->REPLACE_MFSI_BY_MFMI( IF_IMFXC = LF_IMFXC
                                           IR_MFMI  = LR_PR_RTESPV_OLD->R_MFMI ).
      else.
***     Add old MFMI to New and keep reference
        assign <S_BUFFER>-R_MFMI->* to <T_MFMI_NEW>.
        append <S_MFMI> to <T_MFMI_NEW> assigning <S_MFMI>.

***     Keep information of MFSI
        assign LR_PR_RTESPV_OLD->R_MFSI->* to <T_MFSI>.
        if <T_MFSI> is assigned.
          read table <T_MFSI> assigning <S_MFSI> with key ('IMFXC') = LF_IMFXC.
          if SY-SUBRC eq 0.
            move-corresponding <S_MFSI> to <S_MFMI>.
          endif.
        endif.
      endif.

***   Set new MFMI to Selected Route
      <S_XCOMP_RTESEL_NEW>-R_RTESEL->SET_MFMI( IR_MFMI = <S_BUFFER>-R_MFMI ).

***   X-Connect no longer needed
      delete <S_XCOMP_RTESEL_NEW>-T_IMFXC_IN where TABLE_LINE eq LF_IMFXC.

    endloop.

*** Remove empty Routes
    delete RT_XCOMP_RTESEL where R_RTESEL is initial.

  endmethod.
  method GET_XCONR.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SOV type ref to ZCL_VCXI_F0SS_PR_SOV.

***--------------------------------------------------------------------------------------
*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC eq 0.
    move LR_GATE->R_CLSPR ?to LR_PR_SOV.
    check LR_PR_SOV is bound.

*** Get X-Connections (References)
    RT_XCONR = LR_PR_SOV->GET_XCONR( ).

  endmethod.
  method HANDLE_DESERIALIZE.

*** Deserialization requested
    move ABAP_TRUE to ME->F_DESERIALIZE_REQ.

*** Ensure all Events were processed before Deserialization
    ME->R_GATE->RAISE_EVENTS( ).

*** If Deserialization still required
    if ME->F_DESERIALIZE_REQ eq ABAP_TRUE.
      SUPER->HANDLE_DESERIALIZE( ).

***   Deserialization completed
      clear ME->F_DESERIALIZE_REQ.

***   Process Events that occure after Deserialization (e.g. Determination of Selected Route)
      ME->R_GATE->RAISE_EVENTS( ).

    else.
***   Already processed
      return.
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_RECALC_EVQTY_IN.
        ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EVQTY_IN_CHANGED ).

    endcase.

  endmethod.
  method HANDLE_PROD_FILLED.

    data: LR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_CX_CKX  type ref to /VCXI/CX_CKX.

    try.
***     Copy own selected route and ignore provided one
        move ME->R_RTESEL->COPY( ) to LR_BL_PRTE.

***     Continue with Standard
        SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = LR_BL_PRTE ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_REBUILD_BL_PSTEP.

    data: LF_SIMILAR      type          ABAP_BOOL.
    data: LT_BL_PSTEP_NEW type          ZVCXI_XCSR_TT_BL_PSTEP,
          LT_PSTEP_OLD    type          /VCXI/CKX_TT_OBJECT,
          LT_PSTEP_NEW    type          /VCXI/CKX_TT_OBJECT,
          LT_IPSEQ_OLD    type table of ZVCXI_XCSR_TT_RANGE_IPSEQ,
          LT_IPSEQ_NEW    type table of ZVCXI_XCSR_TT_RANGE_IPSEQ,
          LT_COMBW_OLD    type table of ZVCXI_F0S_COMBW,
          LT_COMBW_NEW    type table of ZVCXI_F0S_COMBW,
          LT_RTE_LDIM_OLD type          /VCXI/VSMR_TT_RTE_LDIM,
          LT_RTE_LVAL_OLD type          /VCXI/VSMR_TT_RTE_LVAL,
          LT_RTE_LDIM_NEW type          /VCXI/VSMR_TT_RTE_LDIM,
          LT_RTE_LVAL_NEW type          /VCXI/VSMR_TT_RTE_LVAL,
          LT_CSPLIT_NEW   type          ZVCXI_XCSR_TT_CSPLIT.
    data: LI_WERKS_OLD    type          /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS.
    data: LR_BL_PSTEP     type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_F0_BL_PSTEP  type ref to   ZCL_VCXI_F0SR_BL_PSTEP,
          LR_BL_PSTEP_OLD type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_PSTEP_NEW type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
          LR_MFMI_NEW     type ref to   DATA,
          LR_MFSI_NEW     type ref to   DATA.
    field-symbols: <T_MFMI_OLD> type standard table,
                   <T_MFMI_NEW> type standard table,
                   <T_MFSI_OLD> type standard table,
                   <T_MFSI_NEW> type standard table.

*** Be positiv
    move ABAP_TRUE to LF_SIMILAR.

***--------------------------------------------------------------------------------------
*** Compare Plant
    LI_WERKS_OLD = ME->I_WERKS.
    ME->I_WERKS  = ME->GET_WERKS( ).
    if LI_WERKS_OLD ne ME->I_WERKS.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***--------------------------------------------------------------------------------------
*** Get Production Steps of old BL PSteps
    loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
      append LR_BL_PSTEP->R_PSTEP to LT_PSTEP_OLD.
      append LR_BL_PSTEP->I_IPSEQ to LT_IPSEQ_OLD.

      move LR_BL_PSTEP ?to LR_F0_BL_PSTEP.
      append LR_F0_BL_PSTEP->F_COMBW to LT_COMBW_OLD.
    endloop.
    ME->GET_STRICT_LIMITS( exporting IT_BL_PSTEP = ME->T_BL_PSTEP
                           importing ET_RTE_LDIM = LT_RTE_LDIM_OLD
                                     ET_RTE_LVAL = LT_RTE_LVAL_OLD ).

*** Get new BL PSteps
    LT_BL_PSTEP_NEW = ME->GET_BL_PSTEP( ).

*** Get Production Steps of new BL PSteps
    loop at LT_BL_PSTEP_NEW into LR_BL_PSTEP.
      append LR_BL_PSTEP->R_PSTEP to LT_PSTEP_NEW.
      append LR_BL_PSTEP->I_IPSEQ to LT_IPSEQ_NEW.

      move LR_BL_PSTEP ?to LR_F0_BL_PSTEP.
      append LR_F0_BL_PSTEP->F_COMBW to LT_COMBW_NEW.
    endloop.
    ME->GET_STRICT_LIMITS( exporting IT_BL_PSTEP = LT_BL_PSTEP_NEW
                           importing ET_RTE_LDIM = LT_RTE_LDIM_NEW
                                     ET_RTE_LVAL = LT_RTE_LVAL_NEW ).

***--------------------------------------------------------------------------------------
*** Compare Strict Limits
    if LT_RTE_LDIM_OLD ne LT_RTE_LDIM_NEW or
       LT_RTE_LVAL_OLD ne LT_RTE_LVAL_NEW.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***--------------------------------------------------------------------------------------
*** Get Material Flow Material In
    LR_MFMI_NEW = ME->GET_MFMI( ).

    if ( ME->R_MFMI is     bound and LR_MFMI_NEW is     bound ) or
       ( ME->R_MFMI is not bound and LR_MFMI_NEW is not bound ).
      if ME->R_MFMI is bound and LR_MFMI_NEW is bound.
        assign ME->R_MFMI->*  to <T_MFMI_OLD>.
        assign LR_MFMI_NEW->* to <T_MFMI_NEW>.
        if <T_MFMI_OLD> ne <T_MFMI_NEW>.
          move ABAP_FALSE to LF_SIMILAR.
        endif.
      endif.
    else.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***--------------------------------------------------------------------------------------
*** Get Material Flow SFG In
    LR_MFSI_NEW = ME->GET_MFSI( ).

    if ( ME->R_MFSI is     bound and LR_MFSI_NEW is     bound ) or
       ( ME->R_MFSI is not bound and LR_MFSI_NEW is not bound ).
      if ME->R_MFSI is bound and LR_MFSI_NEW is bound.
        assign ME->R_MFSI->*  to <T_MFSI_OLD>.
        assign LR_MFSI_NEW->* to <T_MFSI_NEW>.
        if <T_MFSI_OLD> ne <T_MFSI_NEW>.
          move ABAP_FALSE to LF_SIMILAR.
        endif.
      endif.
    else.
      move ABAP_FALSE to LF_SIMILAR.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Cost Split if similar
    LT_CSPLIT_NEW = ME->GET_CSPLIT( ).
    if LF_SIMILAR eq ABAP_TRUE.
      if ME->T_CSPLIT ne LT_CSPLIT_NEW.
        move ABAP_FALSE to LF_SIMILAR.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Production Steps if similar
    if LF_SIMILAR eq ABAP_TRUE.
      if LT_PSTEP_OLD eq LT_PSTEP_NEW and
         LT_IPSEQ_OLD eq LT_IPSEQ_NEW.
        move ABAP_TRUE to LF_SIMILAR.
        loop at ME->T_BL_PSTEP into LR_BL_PSTEP_OLD.
          read table LT_BL_PSTEP_NEW into LR_BL_PSTEP_NEW index SY-TABIX.

          if LR_BL_PSTEP_OLD->COMPARE( IR_BL_PSTEP = LR_BL_PSTEP_NEW ) ne ABAP_TRUE.
            move ABAP_FALSE to LF_SIMILAR.
            exit.
          endif.
        endloop.
      else.
        move ABAP_FALSE to LF_SIMILAR.
      endif.
    endif.

    check LF_SIMILAR ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Use new BL PSteps
    move LR_MFMI_NEW     to ME->R_MFMI.
    move LR_MFSI_NEW     to ME->R_MFSI.
    move LT_CSPLIT_NEW   to ME->T_CSPLIT.
    move LT_BL_PSTEP_NEW to ME->T_BL_PSTEP.

    if LT_PSTEP_OLD ne LT_PSTEP_NEW       or
       LT_IPSEQ_OLD ne LT_IPSEQ_NEW       or
       LT_COMBW_OLD ne LT_COMBW_NEW       or
       LT_RTE_LDIM_OLD ne LT_RTE_LDIM_NEW or
       LT_RTE_LVAL_OLD ne LT_RTE_LVAL_NEW.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STRUC_CHANGED ).
    else.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BL_PSTEP_CHANGED ).
    endif.

  endmethod.
  method HANDLE_UPDATE_RTE_DEF.

*** Perform Super
    SUPER->HANDLE_UPDATE_RTE_DEF( ).

***----------------------------------------------------------------------------
*** Empty Route Definition could require Dummy Route -> Request Auto Redetermination
    if ME->T_RTE_DEF is initial.
      move ABAP_TRUE to ME->F_REDETERMINATION_REQ.
    endif.

  endmethod.
  method IS_DUMMY_ALLOWED.

*** Allow Fake Route if no Production Steps are needed.
    if ME->T_BL_PSTEP is initial.
      move ABAP_TRUE to RF_ALLOWED.
    endif.

  endmethod.
  method IS_FILL_PROD_ALLOWED.

    data: LT_PRVDR_RTESPV type /VCXI/VKSR_TT_GATE,
          LT_PRVDR        type /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV.

***--------------------------------------------------------------------------------------
*** Refresh Auto and get Selected Route
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
    read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                            transporting no fields.
    check SY-SUBRC eq 0.
*** Be positive
    move ABAP_TRUE to EF_ALLOWED.

*** Ignore own Element for Routing Supervisor check
    append ME->R_GATE to CT_GATE_IGNORE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_PRVDR_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                             IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR_RTESPV into LR_PRVDR.
***   Check Routing Supervisor is not ignored
      read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
      check SY-SUBRC ne 0.

***   Get PR Reference
      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).

***   Check if Fill is allowed
      LR_PR_RTESPV->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                          changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
      if EF_ALLOWED ne ABAP_TRUE.
        exit.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Check Status of all Provider
    check EF_ALLOWED eq ABAP_TRUE.
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR into LR_PRVDR.
***   Don't check other Routing Supervisors
      read table LT_PRVDR_RTESPV with key TABLE_LINE = LR_PRVDR
                                 transporting no fields.
      check SY-SUBRC ne 0.

***   Only check PR Class Status if Provider is in line to me
      if LR_PRVDR->IS_IN_LINE( IR_GATE = ME->R_GATE ) eq ABAP_TRUE or
         ME->IS_IN_LINE_RTESPV( IR_PRVDR        = LR_PRVDR
                                IT_PRVDR_RTESPV = LT_PRVDR_RTESPV ) eq ABAP_TRUE.
        if LR_PRVDR->R_CLSPR is bound and
           LR_PRVDR->R_CLSPR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      else.
***     Check Status through Gate (includes child status)
        if LR_PRVDR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      endif.
    endloop.

  endmethod.
  method REDETERMINE_DUMMY.

    data:  LT_BL_PRTE   type        ZVCXI_XCSR_TT_BL_PRTE.
    data:  LR_BL_PRTE   type ref to ZCL_VCXI_XCSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Remove all Machine Customizing Routes
    delete ME->T_RTEALT where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
    delete ME->T_RTEINV where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.
    delete ME->T_RTEHID where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST.

***--------------------------------------------------------------------------------------
*** Create Dummy Route
    LR_BL_PRTE = ME->CREATE_BL_PRTE( ).

*** Copy to clear shared references
    LR_BL_PRTE = LR_BL_PRTE->COPY( ).
    move /VCXI/CL_VSMR_RTE_MGR=>C_RSRCE_MACHCUST to LR_BL_PRTE->R_RTE_PRTE->F_RSRCE.

*** Set Technical Checks to On
    LR_BL_PRTE->SET_TECHC( IF_TECHC = ABAP_TRUE ).

    append LR_BL_PRTE to LT_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Validate Routes
    ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Run Evaluation if within Relevance Scope
    ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

  endmethod.
  method REFRESH_AUTO.

*** Checks prior to Refresh
    if IF_FORCE ne ABAP_TRUE.
      check ME->F_REDETERMINATION_REQ eq ABAP_TRUE.
    endif.

*** Process Standard
    SUPER->REFRESH_AUTO( IF_FORCE = IF_FORCE ).

*** Add Fake Route if allowed
    if ME->IS_DUMMY_ALLOWED( ) eq ABAP_TRUE.
      ME->REDETERMINE_DUMMY( ).
    endif.

  endmethod.
  method REFRESH_RANK.

    types: begin of YS_EVALU,
             R_BL_PRTE type ref to ZCL_VCXI_F0SR_BL_PRTE,
             S_TIME    type        ZVCXI_XCS_S_CALCV,
             S_MQTYI   type        ZVCXI_XCSP_S_MQTYI,
             F_IPRTE   type        STRING,
           end   of YS_EVALU,
           YT_EVALU type standard table of YS_EVALU with default key.

    data: LF_RANKV type /VCXI/VSMR_RANKV.
    data: LS_TIME  type ZVCXI_XCS_S_CALCV,
          LS_MQTYI type ZVCXI_XCSP_S_MQTYI.
    data: LT_EVALU type YT_EVALU.
    data: LR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE.
    field-symbols: <S_EVALU> type YS_EVALU.

***--------------------------------------------------------------------------------------
*** Collect Ranking Evaluation Information
    loop at ME->T_RTEALT into LR_BL_PRTE.
      append initial line to LT_EVALU assigning <S_EVALU>.
      move LR_BL_PRTE  ?to <S_EVALU>-R_BL_PRTE.

***   Set Base Unit for Time
      move 'MIN' to <S_EVALU>-S_TIME-CALCV_UOM.

***   Calculate total Setup Time
      if LR_BL_PRTE->S_MSSTI is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                            IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                            IF_CALCV_2     = LR_BL_PRTE->S_MSSTI-MSSTI
                                                            IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSSTI-MSSTI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                  importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                            EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
      endif.

***   Calculate total Run Time
      if LR_BL_PRTE->S_MSRTI is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                            IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                            IF_CALCV_2     = LR_BL_PRTE->S_MSRTI-MSRTI
                                                            IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSRTI-MSRTI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                  importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                            EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
      endif.

***   Calculate total Teardown Time
      if LR_BL_PRTE->S_MSTTI is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_EVALU>-S_TIME-CALCV
                                                            IF_CALCV_UOM_1 = <S_EVALU>-S_TIME-CALCV_UOM
                                                            IF_CALCV_2     = LR_BL_PRTE->S_MSTTI-MSTTI
                                                            IF_CALCV_UOM_2 = LR_BL_PRTE->S_MSTTI-MSTTI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_EVALU>-S_TIME-CALCV_UOM
                                                  importing EF_CALCV       = <S_EVALU>-S_TIME-CALCV
                                                            EF_CALCV_UOM   = <S_EVALU>-S_TIME-CALCV_UOM ).
      endif.

***   Operation Quantity in on First Machine
      move LR_BL_PRTE->S_MQTYI to <S_EVALU>-S_MQTYI.

***   Route ID
      move <S_EVALU>-R_BL_PRTE->GET_PRTE_ID_STRING( ) to <S_EVALU>-F_IPRTE.

    endloop.


***--------------------------------------------------------------------------------------
*** Sort Alternative Routes by time, Waste and Routing
    free: ME->T_RTEALT.
    sort LT_EVALU by S_TIME ascending S_MQTYI ascending F_IPRTE ascending.
    loop at LT_EVALU assigning <S_EVALU>.
      append <S_EVALU>-R_BL_PRTE to ME->T_RTEALT.
    endloop.

*** Assign Ranking by Time
    free: LF_RANKV.
    sort LT_EVALU by S_TIME ascending.
    loop at LT_EVALU assigning <S_EVALU>.
      if <S_EVALU>-S_TIME ne LS_TIME.
        add 1 to LF_RANKV.
        move <S_EVALU>-S_TIME to LS_TIME.
      endif.
      <S_EVALU>-R_BL_PRTE->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_TIME
                                                     IF_RANKV = LF_RANKV ).
    endloop.

*** Assign Ranking by Waste
    free: LF_RANKV.
    sort LT_EVALU by S_MQTYI ascending.
    loop at LT_EVALU assigning <S_EVALU>.
      if <S_EVALU>-S_MQTYI ne LS_MQTYI.
        add 1 to LF_RANKV.
        move <S_EVALU>-S_MQTYI to LS_MQTYI.
      endif.
      <S_EVALU>-R_BL_PRTE->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_MQTYI
                                                     IF_RANKV = LF_RANKV ).
    endloop.

  endmethod.
  method SET_EVENT_HANDLER.

    set handler ME->HANDLE_PROD_FILLED for IR_PR_RTESPV activation IF_ACTIVATION.

  endmethod.
method UPDATE_BL_PRTE_BY_RTE_DEF.

  data: LT_BL_PRTE     type ZVCXI_XCSR_TT_BL_PRTE,
        LT_RTE_DEF_OLD type ZVCXI_XCSR_TT_RTE_DEF.
  data: LR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE.


***------------------------------------------------------------------------------------------------
  if IT_RTE_DEF_OLD is supplied.
    move IT_RTE_DEF_OLD to LT_RTE_DEF_OLD.
  else.
    move ME->T_RTE_DEF  to LT_RTE_DEF_OLD.
  endif.

  if IT_BL_PRTE is supplied.
    move IT_BL_PRTE to LT_BL_PRTE.
  else.
    append lines of ME->T_RTEALT to LT_BL_PRTE.
    append lines of ME->T_RTEINV to LT_BL_PRTE.
    append lines of ME->T_RTEHID to LT_BL_PRTE.
  endif.


***------------------------------------------------------------------------------------------------
  if ME->T_RTE_DEF is not initial.
*** Standard Processing
    SUPER->UPDATE_BL_PRTE_BY_RTE_DEF( IT_RTE_DEF_OLD = LT_RTE_DEF_OLD
                                      IT_BL_PRTE     = LT_BL_PRTE ).

  else.
***------------------------------------------------------------------------------------------------
*** Special Processing for Dummy Routes
    loop at LT_BL_PRTE into LR_BL_PRTE.

***   Update Date
      LR_BL_PRTE->SET_DATE( IF_DATE = ME->F_DATE ).

***   Update Vendor required
      LR_BL_PRTE->SET_LIFNR_REQ( IF_LIFNR_REQ = ME->F_LIFNR_REQ ).

***   Update Material Flow Material In
      LR_BL_PRTE->SET_MFMI( IR_MFMI = ME->R_MFMI ).

***   Update Material Flow SFG In
      LR_BL_PRTE->SET_MFSI( IR_MFSI = ME->R_MFSI ).

***   Update Cost Split
      LR_BL_PRTE->SET_CSPLIT( IT_CSPLIT = ME->T_CSPLIT ).

    endloop.

*** Validate Routes
    ME->VALIDATE( changing CT_BL_PRTE = LT_BL_PRTE ).

*** Evaluate Routes
    ME->EVALUATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).

  endif.

endmethod.
