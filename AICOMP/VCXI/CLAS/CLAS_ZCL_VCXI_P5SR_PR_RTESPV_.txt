
class ZCL_VCXI_P5SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_PXSR_PR_RTESPV
  create public .

public section.

  data T_RHNDL_IN type ZVCXI_PXSR_TT_RHNDL .
  data T_RHNDL_OUT type ZVCXI_PXSR_TT_RHNDL .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
  methods GET_RHNDL_IN
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_DET_RHNDL_IN type /VCXI/VKSC_IEVNT value 'DETERMINE_RHNDL_IN' ##NO_TEXT.
  constants C_IEVNT_I_DET_RHNDL_OUT type /VCXI/VKSC_IEVNT value 'DETERMINE_RHNDL_OUT' ##NO_TEXT.
  constants C_IEVNT_O_RHNDL_IN_CHANGED type /VCXI/VKSC_IEVNT value 'RHNDL_IN_CHANGED' ##NO_TEXT.

  methods GET_BL_PSTEP_CSTEP_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_RWIND
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_SLIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_SSTEP_SLIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR_OUT type /VCXI/VKSR_TT_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DET_RHNDL_IN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DET_RHNDL_OUT
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP_CSTEP
    redefinition .
  methods GET_BL_PSTEP_SHIPMGR
    redefinition .
  methods GET_BL_PSTEP_SSTEP
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods GET_EVQTY_BY_FG
    redefinition .
  methods GET_ICELM
    redefinition .
  methods GET_MFMI
    redefinition .
  methods GET_MFSI
    redefinition .
  methods VALIDATE_RHNDL
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SR_PR_RTESPV definition
class ZCL_VCXI_P5SR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_P5SR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CREATE_BL_PRTE.

    data: LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

    if IR_RTE_PRTE is bound.
      move IR_RTE_PRTE to LR_RTE_PRTE.
    else.
      create object LR_RTE_PRTE.
    endif.

    create object RR_BL_PRTE
      type ZCL_VCXI_P5SR_BL_PRTE
      exporting
        IR_RTE_PRTE  = LR_RTE_PRTE
        IR_MFMI      = ME->R_MFMI
        IR_MFSI      = ME->R_MFSI
        IT_CSPLIT    = ME->T_CSPLIT
        IF_DATE      = ME->F_DATE
        IF_LIFNR_REQ = ABAP_TRUE.

*** Set Material Flow Ratio
    cast ZCL_VCXI_PXSR_BL_PRTE( RR_BL_PRTE )->SET_MFRAT( IF_MFRAT = ME->GET_MFRAT( ) ).

  endmethod.
  method CREATE_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Create Instance based on ID
    case IF_IPSTP.
***   Printing
      when ZCL_VCXI_P5SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P5SR_BL_PSTEP_PRINT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Slitting
      when ZCL_VCXI_P5SR_BL_PSTEP_SLIT=>C_IPSTP_SLIT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P5SR_BL_PSTEP_SLIT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Rewinding
      when ZCL_VCXI_P5SR_BL_PSTEP_RWIND=>C_IPSTP_RWIND.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P5SR_BL_PSTEP_RWIND
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Unitizing
      when ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_IPSTP_UNIT or
           ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_IPSTP_RPACK.
        create object RR_BL_PSTEP
          type ZCL_VCXI_P5SR_BL_PSTEP_UNIT
          exporting
            IF_IPSTP   = IF_IPSTP
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    endcase.

***------------------------------------------------------------------------------------------------
    if RR_BL_PSTEP is bound.
***   Initialize Production Step
      RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
      RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
      RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = IT_PRVDR ).
    else.
***   Create via SUPER
      RR_BL_PSTEP = SUPER->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                            IT_PRVDR = IT_PRVDR
                                            IF_COMBW = IF_COMBW ).
    endif.

  endmethod.
  method CREATE_BL_PSTEP_MANU.

    data: LR_BL_PSTEP_MANU type ref to ZCL_VCXI_P5SR_BL_PSTEP_MANU.


*** Create BL PStep
    create object LR_BL_PSTEP_MANU
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Mark as Manual
    LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC = ABAP_TRUE.

*** Default Machine Speed Rate
    LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST = '60'.

*** Return
    move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

  endmethod.
  method CREATE_BL_PSTEP_OUTSO.

    data: LR_BL_PSTEP_OUTSO type ref to ZCL_VCXI_P5SR_BL_PSTEP_OUTSO.


*** Create BL PStep
    create object LR_BL_PSTEP_OUTSO
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Mark as Outsourcing
    LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO = ABAP_TRUE.

*** Default Price Per
    LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP = '1000'.

*** Return
    move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP.

    SUPER->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = IR_GATE_CSTEP
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step Conversion Step - Printing
    ME->GET_BL_PSTEP_CSTEP_PRINT( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Slitting
    ME->GET_BL_PSTEP_CSTEP_SLIT( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Rewinding
    ME->GET_BL_PSTEP_CSTEP_RWIND( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_PRINT.

    types: begin of YS_PRPTH_PRVDR,
             PRPTH   type ZVCXI_PXS_PRPTH,
             T_PRVDR type /VCXI/VKSR_TT_GATE,
           end of YS_PRPTH_PRVDR.

    data: LF_ACONO type ZVCXI_P0SS_ACONO,
          LF_PRPTH type ZVCXI_PXS_PRPTH.
    data: LT_GATE_INK    type /VCXI/VKSR_TT_GATE,
          LT_GATE_MARK   type /VCXI/VKSR_TT_GATE,
          LT_PRPTH_PRVDR type table of YS_PRPTH_PRVDR.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_P5SS_PR_CSTEP_PRINT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_PRPTH_PRVDR> type YS_PRPTH_PRVDR.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Printing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_CSTEP_PRINT.
    LR_PR_CSTEP_PRINT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_PRINT is bound.

*** Get MS (Digital) Inks and filter to current Print
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_DINK=>C_IPRVT_PX_MS_DINK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    loop at LT_GATE_INK into LR_GATE.
      if not LR_GATE->IS_IN_LINE( IR_GATE ).
        delete LT_GATE_INK.
      endif.
    endloop.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_INK ).

*** Get Marking and filter to current Print
    LT_GATE_MARK = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                                          IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_MARK into LR_GATE.
      if not LR_GATE->IS_IN_LINE( IR_GATE ).
        delete LT_GATE_MARK.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Assign Inks and Markings to Print Path
    loop at LT_GATE_INK into LR_GATE.
      LF_ACONO = SY-TABIX.
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_PXSS_PR_MS_INK.
          LF_PRPTH = cast ZCL_VCXI_PXSS_PR_MS_INK( LR_GATE->R_CLSPR )->GET_PRPTH( ).
        when others.
          LF_PRPTH = 1.
      endcase.

      if LINE_EXISTS( LT_PRPTH_PRVDR[ PRPTH = LF_PRPTH ] ).
        assign LT_PRPTH_PRVDR[ PRPTH = LF_PRPTH ] to <S_PRPTH_PRVDR>.
      else.
        append value #( PRPTH = LF_PRPTH
                        T_PRVDR = value #( ( IR_GATE ) ) ) to LT_PRPTH_PRVDR assigning <S_PRPTH_PRVDR>.
      endif.
      append LR_GATE to <S_PRPTH_PRVDR>-T_PRVDR.

      loop at LT_GATE_MARK into LR_GATE.
        if cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_ACONO( ) eq LF_ACONO.
          append LR_GATE to <S_PRPTH_PRVDR>-T_PRVDR.
        endif.
      endloop.
    endloop.
    sort LT_PRPTH_PRVDR by PRPTH.

*** Fallback to ensure Print is created even w/o inks
    if LT_PRPTH_PRVDR is initial.
      append value #( T_PRVDR = value #( ( IR_GATE ) ) ) to LT_PRPTH_PRVDR.
    endif.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    loop at LT_PRPTH_PRVDR assigning <S_PRPTH_PRVDR>.
      append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P5SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT
                                  IT_PRVDR = <S_PRPTH_PRVDR>-T_PRVDR ) to CT_BL_PSTEP.
    endloop.

  endmethod.
  method GET_BL_PSTEP_CSTEP_RWIND.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_RWIND type ref to ZCL_VCXI_P5SS_PR_CSTEP_RWIND.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Rewinding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_CSTEP_RWIND.
    LR_PR_CSTEP_RWIND = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_RWIND is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P5SR_BL_PSTEP_RWIND=>C_IPSTP_RWIND
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_SLIT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_SLIT type ref to ZCL_VCXI_P5SS_PR_CSTEP_SLIT.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Slitting
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_CSTEP_SLIT.
    LR_PR_CSTEP_SLIT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_SLIT is bound.

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P5SR_BL_PSTEP_SLIT=>C_IPSTP_SLIT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_SHIPMGR.

    data: LF_IN_LINE type ABAP_BOOL.
    data: LT_GATE_SHIPMGR  type /VCXI/VKSR_TT_GATE,
          LT_GATE_SHIPUNIT type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SHIPMGR  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPMGR    type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
          LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_PSTEP_UNIT type ref to ZCL_VCXI_P5SR_BL_PSTEP_UNIT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                             IF_INUSE = ABAP_TRUE ).
    check LT_GATE_SHIPMGR is not initial.

***------------------------------------------------------------------------------------------------
*** Process the Shipping Manager
    loop at LT_GATE_SHIPMGR into LR_GATE_SHIPMGR.
***   Find Provider for Shipping Units
      LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                                IF_INUSE = ABAP_TRUE ).
      check LT_GATE_SHIPUNIT is not initial.

***   Filter by Shipping Manager
      loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
        if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
          delete LT_GATE_SHIPUNIT.
        endif.
      endloop.
      check LT_GATE_SHIPUNIT is not initial.

***------------------------------------------------------------------------------------------------
***   Shipping Units Packed Roll
      ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                           IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                           IF_ATTID_SHUTY   = ZCL_VCXI_P5SU_PR_SHIPMGR=>C_ATTID_SHUTY_PACKED
                                           IF_IPSTP         = ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_IPSTP_RPACK
                                           IF_COMBW         = ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_COMBW_PREV
                                 changing  CT_BL_PSTEP      = CT_BL_PSTEP ).

***   Shipping Units HU
      ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                           IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                           IF_ATTID_SHUTY   = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                           IF_IPSTP         = ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_IPSTP_UNIT
                                 changing  CT_BL_PSTEP      = CT_BL_PSTEP ).
    endloop.


***------------------------------------------------------------------------------------------------
*** Merge Production Steps of same Shipping Unit (across multiple Shipping Manager)
    clear LR_BL_PSTEP_UNIT.
    loop at CT_BL_PSTEP into data(LR_BL_PSTEP)
                        where TABLE_LINE->F_IPSTP = ZCL_VCXI_P5SR_BL_PSTEP_UNIT=>C_IPSTP_RPACK.
      if LR_BL_PSTEP_UNIT is bound.
        LR_BL_PSTEP_UNIT->MERGE( IR_BL_PSTEP_UNIT = cast #( LR_BL_PSTEP ) ).
        delete CT_BL_PSTEP.
      else.
        LR_BL_PSTEP_UNIT ?= LR_BL_PSTEP.
      endif.
    endloop.

  endmethod.
  method GET_BL_PSTEP_SSTEP.

    SUPER->GET_BL_PSTEP_SSTEP( exporting IR_GATE_SSTEP = IR_GATE_SSTEP
                                         IT_PRVDR_OUT  = IT_PRVDR_OUT
                               changing  CT_BL_PSTEP   = CT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** BL Production Step Separation Step - Slitting
    ME->GET_BL_PSTEP_SSTEP_SLIT( exporting IR_GATE      = IR_GATE_SSTEP
                                           IT_PRVDR_OUT = IT_PRVDR_OUT
                                 changing  CT_BL_PSTEP  = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_SSTEP_SLIT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SSTEP_SLIT type ref to ZCL_VCXI_P5SS_PR_SSTEP_SLIT,
          LR_GATE_OUTPUT   type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Slitting
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_SSTEP_SLIT.
    LR_PR_SSTEP_SLIT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_SSTEP_SLIT is bound.

*** Get Output
    ME->GET_PRVDR_OUTPUT( importing ER_GATE = LR_GATE_OUTPUT ).

*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).
    append LR_GATE_OUTPUT to LT_PRVDR.
    append lines of IT_PRVDR_OUT to LT_PRVDR.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_P5SR_BL_PSTEP_SLIT=>C_IPSTP_SLIT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_CSPLIT.

    data: LR_PR_OUTPUT  type ref to ZCL_VCXI_P5SS_PR_OUTPUT,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.


*** Get Provider for Output
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( ).
    check LR_PR_OUTPUT is bound.

*** Get Cost Split Distribution by Backward Property (Outbound)
    LR_BL_RLBPROP = LR_PR_OUTPUT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( ).
    check LR_BL_RLBPROP is bound and
          LINES( LR_BL_RLBPROP->T_CSPLIT ) gt 1.

*** Add Component Cost Split
    RT_CSPLIT = value #( for LS_CSPLIT in LR_BL_RLBPROP->T_CSPLIT
                                       where ( DCSPL is not initial )
                                       ( ICSPL   = LS_CSPLIT-ICSPL
                                         S_DCSPL = LS_CSPLIT-S_DCSPL
                                         COMPR   = LS_CSPLIT-COMPR
                                         QFACT   = LS_CSPLIT-QFACT ) ).

  endmethod.
  method GET_EVQTY_BY_FG.

    SUPER->GET_EVQTY_BY_FG( exporting IR_GATE_FG = IR_GATE_FG
                            importing ES_EVQTY   = ES_EVQTY
                                      EF_NOUTT   = EF_NOUTT
                                      EF_NOUPS   = EF_NOUPS ).

    data(LS_WEBWI) = cast ZCL_VCXI_P5SS_PR_RLFG( IR_GATE_FG->R_CLSPR )->GET_WEBWI( ).

*** Convert Area to Length based on Web Width
    ES_EVQTY = corresponding #( ZCL_VCXI_P5SP_SERVICE=>CONV_A_TO_L( IS_CALCV = value #( CALCV     = ES_EVQTY-EVQTY
                                                                                        CALCV_UOM = ES_EVQTY-EVQTY_UOM )
                                                                    IS_RLDIM = value #( S_WEBWI = LS_WEBWI ) )
                                mapping EVQTY     = CALCV
                                        EVQTY_UOM = CALCV_UOM ).

  endmethod.
  method GET_ICELM.

    move 'P5_ROLL' to RF_ICELM.

  endmethod.
  method GET_MFMI.

    data: LS_MFMI  type ZVCXI_P5SR_S_MFMI.
    data: LT_GATE   type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_RLPROC type ref to ZCL_VCXI_P5SS_PR_MS_RLPROC,
          LR_GATE         type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_MFMI> type standard table.


***------------------------------------------------------------------------------------------------
*** Get Input Provider
    ME->GET_PRVDR_INPUT( importing ER_GATE = LR_GATE_INPUT ).
    check LR_GATE_INPUT is bound.

*** Find Provider for Procurement
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P5SS_PR_MS_RLPROC=>C_IPRVT_P5_MS_RLPROC
                                     IF_INUSE = ABAP_TRUE ).
*** Filter to direct Input Childs
    loop at LT_GATE into LR_GATE.
      if not LR_GATE_INPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ).
        delete LT_GATE.
      endif.
    endloop.
    check LT_GATE is not initial.
    LR_PR_MS_RLPROC ?= LT_GATE[ 1 ]->R_CLSPR.
    check LR_PR_MS_RLPROC is bound.

***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_MFMI type table of ZVCXI_P5SR_S_MFMI.
    assign RR_MFMI->* to <T_MFMI>.

    LS_MFMI-MATNR = LR_PR_MS_RLPROC->GET_MATNR( ).
    LS_MFMI-TEXT  = LR_PR_MS_RLPROC->GET_MAKTX( ).

    LS_MFMI-S_KAUSF   = LR_PR_MS_RLPROC->GET_KAUSF( ).

    LS_MFMI-MFISP     = 100.
    LS_MFMI-MFISP_UOM = '%'.
    LS_MFMI-MFICF     = 1.
    LS_MFMI-MFICP     = 1.

    LS_MFMI-SANKA     = LR_PR_MS_RLPROC->GET_SANKA( ).

*** Roll Dimension
    LS_MFMI-S_WEBWI = LR_PR_MS_RLPROC->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
    LS_MFMI-S_SURWT = LR_PR_MS_RLPROC->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( ).
    LS_MFMI-NOOUT   = 1.
    LS_MFMI-NOUPS   = LR_PR_MS_RLPROC->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).

*** Purchase Information
    LS_MFMI-PURCH    = LR_PR_MS_RLPROC->GET_PURCH( ).
    LS_MFMI-LIFNR    = LR_PR_MS_RLPROC->GET_LIFNR( ).
    LS_MFMI-T_PSCALE = ME->GET_PSCALE( IR_GATE_PARENT = LT_GATE[ 1 ] ).

*** Append Material Flow Material to Data Reference
    append LS_MFMI to <T_MFMI>.

  endmethod.
  method GET_MFSI.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_MFSI> type standard table.


***--------------------------------------------------------------------------------------
*** Get Input Provider
    ME->GET_PRVDR_INPUT( importing ER_GATE = LR_GATE_INPUT ).
    check LR_GATE_INPUT is bound.

*** Find Provider for Connector In
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
*** Filter to direct Input Childs
    loop at LT_GATE into LR_GATE.
      if not LR_GATE_INPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ).
        delete LT_GATE.
      endif.
    endloop.
    check LT_GATE is not initial.

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_MFSI type table of ZVCXI_P5SR_S_MFSI.
    assign RR_MFSI->* to <T_MFSI>.

    loop at LT_GATE into LR_GATE.
***   Add Roll Dimension
      append value ZVCXI_P5SR_S_MFSI( S_WEBWI  = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_WEBWI( )
                                      S_SURWT  = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_SURWT( )
*                                      S_RLETA
                                      NOUPS    = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_NOUPS( )
                                      NOOUT     = '1'
                                    ) to <T_MFSI>.
    endloop.

  endmethod.
  method GET_RHNDL_IN.

*** We only consider the first Roll Handling Information for any Ingoing Connection
    read table ME->T_RHNDL_IN into RS_RHNDL index 1.

  endmethod.
  method HANDLE_DET_RHNDL_IN.
*** Called by Event Handling or direct on Validate

    data:  LT_RHNDL_IN type        ZVCXI_PXSR_TT_RHNDL.
    data:  LR_BL_PRTE  type ref to ZCL_VCXI_PXSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Get Ingoing Roll Handling of Selected Route
    try.
        move ME->R_RTESEL ?to LR_BL_PRTE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_BL_PRTE.
    endtry.
    if LR_BL_PRTE is bound.
      move LR_BL_PRTE->GET_RHNDL_IN( ) to LT_RHNDL_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Roll Handling
    if LT_RHNDL_IN ne ME->T_RHNDL_IN.
***   Set new Value
      move LT_RHNDL_IN to ME->T_RHNDL_IN.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RHNDL_IN_CHANGED ).
    endif.

  endmethod.
  method HANDLE_DET_RHNDL_OUT.

***--------------------------------------------------------------------------------------
*** Get new Roll Handling based on specification
    data(LT_RHNDL_OUT) = ME->GET_RHNDL_OUT( ).

***--------------------------------------------------------------------------------------
*** Compare Roll Handling Dimensions
    if LT_RHNDL_OUT ne ME->T_RHNDL_OUT.
***   Set new Value
      move LT_RHNDL_OUT to ME->T_RHNDL_OUT.

***   Re-Evaluate all Routes
      ME->HANDLE_REEVALUATE( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_DET_RHNDL_OUT.
        ME->HANDLE_DET_RHNDL_OUT( ).

      when C_IEVNT_I_DET_RHNDL_IN.
        ME->HANDLE_DET_RHNDL_IN( ).

    endcase.

  endmethod.
  method VALIDATE_RHNDL.

    data: LR_BL_PRTE type ref to ZCL_VCXI_PXSR_BL_PRTE.


    check IR_BL_PRTE is instance of ZCL_VCXI_PXSR_BL_PRTE.
    LR_BL_PRTE ?= IR_BL_PRTE.

*** Update Roll Handling for complete Route
    LR_BL_PRTE->SET_RHNDL_OUT( IT_RHNDL_OUT = ME->T_RHNDL_OUT ).

*** Update Route with new Roll Handling Information
    LR_BL_PRTE->UPDATE_RHNDL( ).
    RF_RECHECK = ABAP_TRUE.

    if LR_BL_PRTE eq ME->R_RTESEL.
***   Determine the new Roll Handling inbound for the selected route
      ME->HANDLE_DET_RHNDL_IN( ).
    endif.

  endmethod.
