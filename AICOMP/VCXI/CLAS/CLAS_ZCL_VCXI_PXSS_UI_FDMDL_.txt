
class ZCL_VCXI_PXSS_UI_FDMDL definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  abstract
  create public .

public section.

  types:
    YT_UCOMM type table of SYUCOMM with default key .

  constants C_UC_FOVRR_MAKTX type SYUCOMM value 'FOVRR_MAKTX' ##NO_TEXT.
  constants C_UC_NAV_OUT type SYUCOMM value 'NAV_OUT' ##NO_TEXT.
  constants C_UC_NAV_SHIPMGR type SYUCOMM value 'NAV_SHIPMGR' ##NO_TEXT.
  data F_CURSOR type SCRFNAME read-only .
  data R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL read-only .
  data S_TAB_DESCR type ZVCXI_XCS_S_TAB_DESCR read-only .

  methods GET_ACTIVE_TAB
    returning
      value(RF_TABNAME) type STRING
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_CPACK
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RF_CPACK) type ZVCXI_XCSU_CPACK
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_SHSCH
    importing
      !IF_CNTXT type ZVCXI_XCS_CNTXT
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UCOMM
  abstract
    returning
      value(RT_UCOMM) type YT_UCOMM .
  methods DO_UPDATE_FDMDL_VIS
    importing
      !IS_FDMDL_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_TAB_DYNP
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
      !IF_APPL_EVENTS type ABAP_BOOL
      !IF_TABPT type ZVCXI_XCS_TABPT default '0100S_TAB-TAB'
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  methods ON_CTMENU
    importing
      !IR_MENU type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .

  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  data F_APPL_EVENTS type ABAP_BOOL .
  data F_TABPT type ZVCXI_XCS_TABPT .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GATE_OUT type ref to /VCXI/CL_VKSR_GATE .
  data R_PR_FASTD type ref to ZCL_VCXI_PXSS_PR_FASTD .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_XCS_TT_TAB_LIST .

  methods MAPPING_TO_VIS
    importing
      !IS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA
    changing
      !CS_FDMDL_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods MAPPING_FROM_VIS
    importing
      !IS_FDMDL_VIS type ANY
    changing
      !CS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TAB
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_NAV_SHIPMGR
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_NAV_OUT
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
  abstract
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    importing
      !IF_CONTAINER_NAME type SCRFNAME default '0100CC_TOOLBAR_XFG'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR_FCODE
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_UI_FDMDL definition
class ZCL_VCXI_PXSS_UI_FDMDL implementation.
  method CALL_SHLP_CPACK.

    data: LF_DISPLAY type ABAP_BOOL,
          LF_WERKS   type WERKS_D.

    LF_DISPLAY = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                   else ABAP_TRUE ).

*** Get Plant of first FG/SFG
    case type of ME->R_BL_FDMDL->T_GATE_OUT[ 1 ]->R_CLSPR.
      when type ZCL_VCXI_PXSS_PR_XFG into data(LR_PR_XFG).
        LF_WERKS = LR_PR_XFG->GET_WERKS( ).
    endcase.

    RF_CPACK = ZCL_VCXI_XCSU_SHLP_CPACK=>CALL_SHLP( IF_WERKS   = LF_WERKS
                                                    IF_DISPLAY = LF_DISPLAY
                                                    IF_SHSCH   = IF_SHSCH ).

  endmethod.
  method CALL_SHLP_SHSCH.

    data: LF_DISPLAY type ABAP_BOOL.


    LF_DISPLAY = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                   else ABAP_TRUE ).

    RF_SHSCH = ZCL_VCXI_XCSU_SHLP_SHSCH=>CALL_SHLP( IS_CMPRK   = ME->R_GATE->GET_APPDATA( )->S_CMPRK
                                                    IF_CNTXT   = IF_CNTXT
                                                    IF_DISPLAY = LF_DISPLAY ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    ME->R_BL_FDMDL    = IR_BL_FDMDL.
    ME->F_APPL_EVENTS = IF_APPL_EVENTS.
    ME->F_TABPT       = IF_TABPT.

*** Evaluate starting FG/SFG Gate
    ME->R_GATE_OUT = IR_GATE_OUT.
    if not LINE_EXISTS( IR_BL_FDMDL->T_GATE_OUT[ TABLE_LINE = ME->R_GATE_OUT ] ).
      ME->R_GATE_OUT  = value #( IR_BL_FDMDL->T_GATE_OUT[ 1 ] optional ).
    endif.

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_FASTD.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

*** Call SUPER
    SUPER->DEACTIVATE( ).

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***------------------------------------------------------------------------------------------------
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------------------------------------
        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Set the Tabs which aren't in use as invisible.
          if SCREEN-NAME cs ME->F_TABPT.
            if not LINE_EXISTS( ME->T_TAB_LIST[ TABNAME = SCREEN-NAME ] ).
              move 1 to SCREEN-INVISIBLE.
            endif.
          endif.

***       Reopen Info Buttons and Tabs
          if SCREEN-GROUP1 eq 'INF' or
             SCREEN-NAME cs ME->F_TABPT.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Initialize Tab List for Outputs
    ME->INIT_TAB_LIST( ).

  endmethod.
  method DO_UPDATE_FDMDL_VIS.

    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.

    check ME->R_PR_FASTD is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE =  ME->R_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = ME->R_GATE_OUT
                                                         IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Update Fast Data Integration Information based on VIS Structure
    loop at LT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ).
        ME->MAPPING_FROM_VIS( exporting IS_FDMDL_VIS        = IS_FDMDL_VIS
                              changing  CS_FASTD_XCOMP_DATA = <S_FASTD_XCOMP_DATA> ).
      endloop.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    if IF_UCOMM cs ME->F_TABPT.
      ME->HANDLE_UC_TAB( IF_UCOMM = IF_UCOMM ).
    endif.

    case SUBSTRING_BEFORE( VAL = IF_UCOMM SUB = '@' ).
      when C_UC_NAV_OUT.
        ME->HANDLE_UC_NAV_OUT( IF_UCOMM = IF_UCOMM ).
      when C_UC_NAV_SHIPMGR.
        ME->HANDLE_UC_NAV_SHIPMGR( IF_UCOMM = IF_UCOMM ).
    endcase.

  endmethod.
  method GET_ACTIVE_TAB.

    RF_TABNAME = value #( ME->T_TAB_LIST[ R_GATE = ME->R_GATE_OUT ]-TABNAME optional ).

  endmethod.
  method GET_TAB_DYNP.

    RS_DYNP = ME->S_DYNP_BLANK.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_FASTD.

  endmethod.
  method HANDLE_TOOLBAR_FCODE.

    data: LF_UCOMM type SYUCOMM.


    try.
***     User Commands
        if FIND( VAL = FCODE SUB = '@' ) gt 0.
          LF_UCOMM = SUBSTRING_BEFORE( VAL = FCODE SUB = '@' ).
        else.
          LF_UCOMM = FCODE.
        endif.

        case LF_UCOMM.
          when C_FCODE_ADD.
            ME->HANDLE_UC_ADD( IF_UCOMM = FCODE ).

          when C_FCODE_DEL.
            ME->HANDLE_UC_DEL( ).

        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE.
          ME->R_UIFW->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.


*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Add Finished Good
    ME->R_BL_FDMDL->ADD_XFG( changing CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                      CT_XCONG       = LT_XCONG ).

*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method HANDLE_UC_DEL.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.


*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Delete Finished Good
    ME->R_BL_FDMDL->DEL_XFG( exporting IR_GATE_OUT    = ME->R_GATE_OUT
                             changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                       CT_XCONG       = LT_XCONG ).

*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method HANDLE_UC_NAV_OUT.

    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

        check ME->R_GATE_OUT is bound and
              ME->R_GATE_OUT->F_FREED is initial and
              TO_UPPER( ME->R_GATE_OUT->F_GATKY ) eq SUBSTRING_AFTER( VAL = IF_UCOMM SUB = '@' ).

***     Check Element has an own UI
        check ME->R_GATE_OUT->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = ME->R_GATE_OUT ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = ME->R_GATE_OUT->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = ME->R_GATE_OUT->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_NAV_SHIPMGR.

    data: LR_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE.


    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

        check ME->R_GATE_OUT is bound and
              ME->R_GATE_OUT->F_FREED is initial and
              TO_UPPER( ME->R_GATE_OUT->F_GATKY ) eq SUBSTRING_AFTER( VAL = IF_UCOMM SUB = '@' ).

        check ME->R_GATE_OUT->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XFG.
        cast ZCL_VCXI_PXSS_PR_XFG( ME->R_GATE_OUT->R_CLSPR )->GET_PRVDR_SHIPMGR( importing ER_GATE_SHIPMGR = LR_GATE_SHIPMGR ).

***     Check Gate is bound and Provider has an own UI
        check LR_GATE_SHIPMGR is bound and
              LR_GATE_SHIPMGR->F_FREED is initial and
              LR_GATE_SHIPMGR->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE_SHIPMGR ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_SHIPMGR->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_SHIPMGR->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_TAB.

    ME->R_GATE_OUT = value #( ME->T_TAB_LIST[ TABNAME = IF_UCOMM ]-R_GATE optional ).

    if ME->R_UIFW is instance of ZCL_VCXI_PXSS_UI_FASTD.
      cast ZCL_VCXI_PXSS_UI_FASTD( ME->R_UIFW )->SET_GATE_OUT( IR_GATE = ME->R_GATE_OUT ).
    endif.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = IF_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TAB_LIST.

    data: LF_TAB  type NUMC3,
          LF_ICON type ICON_D.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <F_DESCR> type /VCXI/CKX_DESCR.


    free: ME->T_TAB_LIST,
          ME->S_TAB_DESCR.

***----------------------------------------------------------------------------
*** Process Output Gates
    loop at ME->R_BL_FDMDL->T_GATE_OUT into LR_GATE.

      add 1 to LF_TAB.
      append value #( TABNAME = ME->F_TABPT && LF_TAB
                      R_GATE  = LR_GATE
                    ) to ME->T_TAB_LIST .

      assign component SUBSTRING_AFTER( VAL = ME->F_TABPT SUB = '-' ) && LF_TAB of structure ME->S_TAB_DESCR to <F_DESCR>.
      if SY-SUBRC eq 0.
        if LR_GATE->R_CLSPR is bound.
          <F_DESCR> = LR_GATE->R_CLSPR->GET_DESCR( ).
        else.
          <F_DESCR> = LR_GATE->GET_DESCR( ).
        endif.
      endif.

***   Get Status Icon
      ME->R_BL_FDMDL->GET_STATUS( exporting IR_GATE_OUT = LR_GATE
                                  importing EF_ICON     = LF_ICON ).

***   Enrich Description with Icon
      <F_DESCR> = |{ LF_ICON } { <F_DESCR> }|.

    endloop.

  endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED         type /VCXI/CKX_LOCKED,
          LF_INUSE          type /VCXI/VKSR_INUSE,
          LF_DISABLED       type ABAP_BOOL,
          LF_HIDDE_MULTIQTY type ABAP_BOOL.
    data: LT_EVENT  type CNTL_SIMPLE_EVENTS,
          LT_BTNGRP type TTB_BUTTON.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.


***--------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Create Toolbar
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Registered Events
      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS = LT_EVENT
                                            exceptions others = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Event Handler
      set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.
    endif.

***--------------------------------------------------------------------------------------
*** Remove all Buttons to start fresh
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Add Buttons to add and remove Fast Data Models
    ME->R_TOOLBAR->ADD_BUTTON_GROUP( exporting DATA_TABLE = value #( ( FUNCTION  = C_FCODE_ADD
                                                                       ICON      = ICON_INSERT_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_BUTTON
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Add'(F01) )
                                                                     ( FUNCTION  = C_FCODE_DEL
                                                                       ICON      = ICON_DELETE_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_BUTTON
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Delete'(F02) )
                                                                     ( BUTN_TYPE = CNTB_BTYPE_SEP )
                                                                   )
                                     exceptions others = 0 ).

  endmethod.
  method MAPPING_FROM_VIS.

    assign CS_FASTD_XCOMP_DATA-R_DATA->* to field-symbol(<S_DATA>).
    <S_DATA> = corresponding #( base ( <S_DATA> ) IS_FDMDL_VIS ).

  endmethod.
  method MAPPING_TO_VIS.

    assign IS_FASTD_XCOMP_DATA-R_DATA->* to field-symbol(<S_DATA>).
    check SY-SUBRC eq 0.

*** Move correspoinding fields, but except fields defined by Component Data
    data(LR_MAPPER) = CL_ABAP_CORRESPONDING=>CREATE( SOURCE      = <S_DATA>
                                                     DESTINATION = CS_FDMDL_VIS
                                                     MAPPING     = value CL_ABAP_CORRESPONDING=>MAPPING_TABLE( for LF_FDMEX in IS_FASTD_XCOMP_DATA-T_FDMEX
                                                                                                               ( LEVEL = 0 KIND = 2 SRCNAME = LF_FDMEX DSTNAME = LF_FDMEX ) ) ).
    LR_MAPPER->EXECUTE( exporting SOURCE      = <S_DATA>
                        changing  DESTINATION = CS_FDMDL_VIS ).

  endmethod.
  method ON_CTMENU.

    check ME->F_APPL_EVENTS eq ABAP_TRUE.

*** Navigation Options
    if ME->R_GATE_OUT is bound.
***   Finished Good/Part
      IR_MENU->ADD_FUNCTION( FCODE = C_UC_NAV_OUT && '@' && ME->R_GATE_OUT->F_GATKY
                             TEXT  = REPLACE( VAL = 'Navigate to &1'(M01) SUB = '&1' WITH = ME->R_GATE_OUT->GET_DESCR( ) ) ).

***   Shipping Manager
      if ME->R_GATE_OUT->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XFG.
        if cast ZCL_VCXI_PXSS_PR_XFG( ME->R_GATE_OUT->R_CLSPR )->GET_PRVDR_SHIPMGR( ) is bound.
          IR_MENU->ADD_FUNCTION( FCODE = C_UC_NAV_SHIPMGR && '@' && ME->R_GATE_OUT->F_GATKY
                                 TEXT  = 'Navigate to Shipping Manager'(M02) ).
        endif.
      endif.
    endif.

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.
    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
