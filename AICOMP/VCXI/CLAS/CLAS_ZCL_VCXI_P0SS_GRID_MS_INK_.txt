
class ZCL_VCXI_P0SS_GRID_MS_INK definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  type-pools ABAP .
  data F_DUMMY type ABAP_BOOL .
  constants C_POSID_15 type /VCXI/VKSR_POSID value 15. "#EC NOTEXT

  methods CHANGE_STYLE_INK
    importing
      !IF_COLCO type ZVCXI_P0SS_COLCO
      !IF_PURCH type CHAR1
      !IF_DUMMY type ABAP_BOOL
      !IF_CALCULATED type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods GET_DISABLED_ADD
    redefinition .
  methods GET_DISABLED_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_MS_INK definition
class ZCL_VCXI_P0SS_GRID_MS_INK implementation.
method ADD_PRVDR.

  data:  LF_NOCOL         type        ZVCXI_P0S_NOCOL,
         LF_NOCOL_TOOL    type        ZVCXI_P0S_NOCOL,
         LF_POSID_CHANGE  type        ABAP_BOOL,
         LF_POSID         type        /VCXI/VKSR_POSID,
         LF_POSID_END     type        /VCXI/VKSR_POSID.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SEL      type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT      type ref to ZCL_VCXI_P0SS_PR_PRINT.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
  LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE_SEL index 1.

  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_PRINT.
  endtry.

  check LR_PR_PRINT is bound.

  LF_NOCOL_TOOL = LR_PR_PRINT->GET_NOCOL_TOOL( ).

***--------------------------------------------------------------------------------------
*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE = ABAP_TRUE ).

*** Check if existing Inks are all Default
  loop at LT_GATE into LR_GATE.
    add 1 to LF_NOCOL.

    if LR_GATE eq LR_GATE_SEL.
      move ABAP_TRUE to LF_POSID_CHANGE.
    endif.

    move LR_GATE->GET_POSID( ) to LF_POSID_END.

    if LF_POSID_CHANGE eq ABAP_TRUE and
       LF_NOCOL        le LF_NOCOL_TOOL.
      move LR_GATE->GET_POSID( ) to LF_POSID.
    endif.
  endloop.


  RR_GATE = SUPER->ADD_PRVDR( IF_ID = IF_ID ).

  if LF_POSID is not initial.

*** Add 5 to insert after selected position
    add C_POSID_15 to LF_POSID_END.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID_END ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).

*** Set The right one
    add C_POSID_5 to LF_POSID.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).
  endif.

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = ZCL_VCXI_P0SS_PR_PRINT=>C_IEVNT_O_NOCOL_CHANGED ).
  ME->R_GATE->RAISE_EVENTS( ).

endmethod.
method CHANGE_STYLE_INK.

  free CT_STYL.

***------------------------------------------------------------------
*** If Ink is calculated -> Color Code and Coverage is not changeable.
  if IF_CALCULATED eq ABAP_TRUE.
*** Set Coverage = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Color Code = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COLCO'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  else.
*** Set Coverage = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Color Code = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COLCO'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

***------------------------------------------------------------------
*** Use of Color Code
  if IF_COLCO is not initial.
*** Set Material = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Varnish = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'VARNI'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  else.

*** Set Material = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endif.

***------------------------------------------------------------------
*** Purchase Ink
  case IF_PURCH.
    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
***   Set Vendor = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price Per = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).

    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
***   Set Vendor = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price Per = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).

    when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***   Set Vendor = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Price Per = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRICP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
  endcase.

***------------------------------------------------------------------
*** Purchase Ink
  if IF_DUMMY eq ABAP_TRUE.
*** Purchase =  Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCH'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Avg. =  Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'AVGCO'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Avg. Per = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'AVGCP'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  else.
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PURCH'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Avg. =  Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'AVGCO'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Avg. Per = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'AVGCP'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_P0SS_S_MS_INK_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK.

endmethod.
method DEL_PRVDR.

  SUPER->DEL_PRVDR( ).

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = ZCL_VCXI_P0SS_PR_PRINT=>C_IEVNT_O_NOCOL_CHANGED ).
  ME->R_GATE->RAISE_EVENTS( ).

endmethod.
method GET_DISABLED_ADD.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

  RF_DISABLED = SUPER->GET_DISABLED_ADD( ).

  check RF_DISABLED eq ABAP_FALSE.

*** Check if Ink is "Calculated"
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_TRUE.
        move ABAP_TRUE to RF_DISABLED.
      endif.
    catch /VCXI/CX_CKX.
      clear: RF_DISABLED.
  endtry.

endmethod.
method GET_DISABLED_DEL.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

  RF_DISABLED = SUPER->GET_DISABLED_DEL( ).

  check RF_DISABLED eq ABAP_FALSE.

*** Check if Ink is "Calculated"
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_TRUE.
        move ABAP_TRUE to RF_DISABLED.
      endif.
    catch /VCXI/CX_CKX.
      clear: RF_DISABLED.
  endtry.

endmethod.
method GET_FIELDCAT.

  data: LF_LOCKED type /VCXI/CKX_LOCKED,
        LF_INUSE  type /VCXI/VKSR_INUSE,
        LF_COLPOS type I,
        LF_LIFNR  type ABAP_BOOL,
        LF_PRICE  type ABAP_BOOL,
        LF_EDIT   type ABAP_BOOL.
  data: LS_MS_INK_GRID type ZVCXI_P0SS_S_MS_INK_GRID,
        LS_ATTRI       type /VCXI/VKS_S_ATTRI.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY,
                 <S_FCAT> type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Read Attribute Calculated
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
      if LS_ATTRI-ATTVA eq ABAP_FALSE.
        move ABAP_TRUE to LF_EDIT.
      endif.
    catch /VCXI/CX_CKX.
      move ABAP_TRUE to LF_EDIT.
  endtry.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_MS_INK_GRID.
    case LS_MS_INK_GRID-PURCH.
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
        LF_LIFNR = ABAP_TRUE.
        LF_PRICE = ABAP_TRUE.
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
        LF_LIFNR = ABAP_TRUE.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
        move ABAP_TRUE    to <S_FCAT>-TECH.
        move 0            to <S_FCAT>-COL_POS.

      when 'MATNR'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move LF_EDIT    to <S_FCAT>-EDIT.
        endif.

      when 'TEXT'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'COVRG'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move LF_EDIT    to <S_FCAT>-EDIT.
        endif.

      when 'VARNI'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'COLCO'.
        move ABAP_TRUE    to <S_FCAT>-F4AVAILABL.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move LF_EDIT    to <S_FCAT>-EDIT.
        endif.

      when 'INKTN'.
        move ABAP_TRUE    to <S_FCAT>-F4AVAILABL.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'LTITO'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'PURCH'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'LIFNR'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'PRICE' or 'PRICP'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.

      when 'AVGCO' or 'AVGCP'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.
    endcase.

***----------------------------------------------------------------------------
*** Hide Field if not purchase
    if LF_LIFNR ne ABAP_TRUE.
      if <S_FCAT>-FIELDNAME eq 'LIFNR' or
         <S_FCAT>-FIELDNAME eq 'LIFNR_DESCR'.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.
    endif.
    if LF_PRICE ne ABAP_TRUE.
      if <S_FCAT>-FIELDNAME eq 'PRICE' or
         <S_FCAT>-FIELDNAME eq 'PRICE_CURR' or
         <S_FCAT>-FIELDNAME eq 'PRICP' or
         <S_FCAT>-FIELDNAME eq 'PRICP_UOM'.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Hide Field if not dummy
    if ME->F_DUMMY ne ABAP_TRUE.
      if <S_FCAT>-FIELDNAME eq 'AVGCO' or
         <S_FCAT>-FIELDNAME eq 'AVGCO_UOM' or
         <S_FCAT>-FIELDNAME eq 'AVGCP' or
         <S_FCAT>-FIELDNAME eq 'AVGCP_UOM'.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Set Position for each Field
    move 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'MATNR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'MATNR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'TEXT'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'COLCO'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'COLCO_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'INKTN'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'VARNI'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'COVRG'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'COVRG_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LTITO'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LTITO_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PURCH'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'AVGCO'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'AVGCO_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'AVGCP'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'AVGCP_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LIFNR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'LIFNR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICE'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICE_CURR'.  <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICP'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
    if <S_FCAT>-FIELDNAME eq 'PRICP_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    add 1 to LF_COLPOS.
  endloop.

  sort RT_FCAT by COL_POS.

endmethod.
method GET_GRID_DATA.

  data: LF_DUMMY    type          ABAP_BOOL,
        LF_CALCULED type          ABAP_BOOL.
  data: LS_MS_INK_GRID type          ZVCXI_P0SS_S_MS_INK_GRID,
        LS_COVRG       type          ZVCXI_P0S_S_COVRG,
        LS_AVGCO       type          ZVCXI_XCS_S_AVGCO,
        LS_AVGCP       type          ZVCXI_XCS_S_AVGCP,
        LS_LTITO       type          ZVCXI_P0S_S_LTITO.
  data: LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_MS_INK type ref to   ZCL_VCXI_P0SS_PR_MS_INK,
        LR_APPDATA   type ref to   /VCXI/CL_VKSR_APPDATA.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

  clear: ME->F_DUMMY.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Ink
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_MS_INK_GRID, LF_DUMMY, LF_CALCULED.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
        check LR_PR_MS_INK is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( ) to LS_MS_INK_GRID-POSID.
        move LR_GATE->F_GATKY      to LS_MS_INK_GRID-GATKY.
        move LR_GATE               to LS_MS_INK_GRID-R_GATE.

        move LR_PR_MS_INK->GET_MATNR( )       to LS_MS_INK_GRID-MATNR.
        move LR_PR_MS_INK->GET_MATNR_DESCR( ) to LS_MS_INK_GRID-MATNR_DESCR.

        move LR_PR_MS_INK->GET_TEXT( )        to LS_MS_INK_GRID-TEXT.

        LR_PR_MS_INK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
        move-corresponding LS_COVRG     to LS_MS_INK_GRID.

        LR_PR_MS_INK->GET_COLCO( importing EF_COLCO = LS_MS_INK_GRID-COLCO ).
        move LR_PR_MS_INK->GET_COLCO_DESCR( IF_COLCO  = LS_MS_INK_GRID-COLCO ) to LS_MS_INK_GRID-COLCO_DESCR.

        move LR_PR_MS_INK->GET_INKTN( ) to LS_MS_INK_GRID-INKTN.
        move LR_PR_MS_INK->GET_LTITO( ) to LS_LTITO.
        move-corresponding LS_LTITO     to LS_MS_INK_GRID.

        LR_PR_MS_INK->GET_VARNI( importing EF_VARNI = LS_MS_INK_GRID-VARNI ).

        move LR_PR_MS_INK->GET_PURCH( )       to LS_MS_INK_GRID-PURCH.
        move LR_PR_MS_INK->GET_LIFNR( )       to LS_MS_INK_GRID-LIFNR.
        move LR_PR_MS_INK->GET_LIFNR_DESCR( ) to LS_MS_INK_GRID-LIFNR_DESCR.

        move LR_PR_MS_INK->GET_AVGCO( ) to LS_AVGCO.
        move-corresponding LS_AVGCO     to LS_MS_INK_GRID.

        move LR_PR_MS_INK->GET_AVGCP( ) to LS_AVGCP.
        move-corresponding LS_AVGCP     to LS_MS_INK_GRID.

        move LR_PR_MS_INK->GET_PRICE( ) to LS_MS_INK_GRID-S_PRICE.
        move LR_PR_MS_INK->GET_PRICP( ) to LS_MS_INK_GRID-S_PRICP.

        move LR_PR_MS_INK->IS_DUMMY( )  to LF_DUMMY.
        if LF_DUMMY eq ABAP_TRUE.
          move LF_DUMMY to ME->F_DUMMY.
        endif.

        move LR_PR_MS_INK->IS_CALCULATED( ) to LF_CALCULED.

*** -----------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_INK( exporting IF_COLCO      = LS_MS_INK_GRID-COLCO
                                        IF_PURCH      = LS_MS_INK_GRID-PURCH
                                        IF_DUMMY      = LF_DUMMY
                                        IF_CALCULATED = LF_CALCULED
                              changing  CT_STYL       = LS_MS_INK_GRID-T_STYL ).

***     Call DVC Servcie - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_MS_INK_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_MS_INK_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** Set Plant to Parameter for Search Help
*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    set parameter id 'WRK' field LR_APPDATA->F_WERKS.
  endif.


endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_ROW_ID            type          I.
  data:          LS_MS_INK_GRID       type          ZVCXI_P0SS_S_MS_INK_GRID,
                 LS_MODI              type          LVC_S_MODI,
                 LS_COVRG             type          ZVCXI_P0S_S_COVRG,
                 LS_AVGCO             type          ZVCXI_XCS_S_AVGCO,
                 LS_AVGCP             type          ZVCXI_XCS_S_AVGCP,
                 LS_PRICE             type          ZVCXI_XCS_S_PRICE,
                 LS_PRICP             type          ZVCXI_XCS_S_PRICP,
                 LS_LTITO             type          ZVCXI_P0S_S_LTITO.
  data:          LR_PR_MS_INK         type ref to   ZCL_VCXI_P0SS_PR_MS_INK,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        move SY-TABIX to LF_ROW_ID.
        read table ET_GOOD_CELLS with key ROW_ID = LF_ROW_ID
                                 transporting no fields.
        check SY-SUBRC eq 0.

        try.
            move-corresponding <S_DATA> to LS_MS_INK_GRID.
            check LS_MS_INK_GRID-R_GATE is bound.

            move LS_MS_INK_GRID-R_GATE->R_CLSPR ?to LR_PR_MS_INK.
            check LR_PR_MS_INK is bound.

***         Set Values to PR Class
            loop at ET_GOOD_CELLS into LS_MODI where ROW_ID = LF_ROW_ID.
              case LS_MODI-FIELDNAME.
                when 'MATNR'.
                  LR_PR_MS_INK->SET_MATNR( IF_MATNR = LS_MS_INK_GRID-MATNR
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'TEXT'.
                  LR_PR_MS_INK->SET_TEXT(  IF_TEXT  = LS_MS_INK_GRID-TEXT
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'COLCO'.
                  LR_PR_MS_INK->SET_COLCO( IF_COLCO = LS_MS_INK_GRID-COLCO
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'INKTN'.
                  LR_PR_MS_INK->SET_INKTN( IF_INKTN = LS_MS_INK_GRID-INKTN
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'LTITO'.
                  move-corresponding LS_MS_INK_GRID to LS_LTITO.
                  LR_PR_MS_INK->SET_LTITO( IS_LTITO = LS_LTITO
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'VARNI'.
                  LR_PR_MS_INK->SET_VARNI( IF_VARNI = LS_MS_INK_GRID-VARNI
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'COVRG'.
                  move-corresponding LS_MS_INK_GRID to LS_COVRG.
                  LR_PR_MS_INK->SET_COVRG( IS_COVRG = LS_COVRG
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'AVGCO'.
                  move-corresponding LS_MS_INK_GRID to LS_AVGCO.
                  LR_PR_MS_INK->SET_AVGCO( IS_AVGCO = LS_AVGCO
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'AVGCP'.
                  move-corresponding LS_MS_INK_GRID to LS_AVGCP.
                  LR_PR_MS_INK->SET_AVGCP( IS_AVGCP = LS_AVGCP
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'LIFNR'.
                  LR_PR_MS_INK->SET_LIFNR( IF_LIFNR = LS_MS_INK_GRID-LIFNR
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'PURCH'.
                  LR_PR_MS_INK->SET_PURCH( IF_PURCH = LS_MS_INK_GRID-PURCH
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'PRICE'.
                  move-corresponding LS_MS_INK_GRID to LS_PRICE.
                  LR_PR_MS_INK->SET_PRICE( IS_PRICE = LS_PRICE
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                when 'PRICP'.
                  move-corresponding LS_MS_INK_GRID to LS_PRICP.
                  LR_PR_MS_INK->SET_PRICP( IS_PRICP = LS_PRICP
                                           IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
              endcase.
            endloop.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
