
class ZCL_VCXI_XCSU_PR_CPMCNF definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_OPQTY .
  interfaces ZIF_VCXI_XCSU_CPMCNF
      abstract methods DET_EFFCT
                       GET_MATDE .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  data R_PR_CPM type ref to ZCL_VCXI_XCSU_PR_CPM .

  methods ADJUST_OPQTY_UMREZ_UMREN
    changing
      !CF_UMREZ type UMREZ
      !CF_UMREN type UMREN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_CPMCNF definition
class ZCL_VCXI_XCSU_PR_CPMCNF implementation.
method ADJUST_OPQTY_UMREZ_UMREN.

  data:  LS_PMQTY           type        ZVCXI_XCSU_S_PMQTY.

***------------------------------------------------------------------
*** Get Packaging Material Quantity
  if ME->R_PR_CPM is bound.
    ME->R_PR_CPM->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ) .
    move LS_PMQTY-PMQTY to CF_UMREZ.
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when ZIF_VCXI_XCSU_CPMCNF~C_IEVNT_I_REQ_REDET_EFFCT.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSU_CPMCNF~C_IEVNT_O_REDET_EFFCT_REQ ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_PR_CPM.

***------------------------------------------------------------------
*** Get Configured Packaging Material Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_CPM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_CPM.
    endtry.
  endif.

  if ME->R_PR_CPM is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

  data:  LS_TBQTY         type        ZVCXI_XCSU_S_TBQTY.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

*** Check References are bound
  if ME->R_PR_CPM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = ES_QCALC_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QCALC_BASE-QCALC.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QCALC_BASE-QCALC_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Base Quantity by Total Base Quantity of Shipping Unit
  ME->R_PR_CPM->GET_DETAIL_SHIPUNIT( importing ES_TBQTY = LS_TBQTY ).
  if LS_TBQTY-TBQTY ne 0.
    ES_QCALC_BASE-QCALC = ceil( ES_QCALC_BASE-QCALC / LS_TBQTY-TBQTY ).
  else.
    clear ES_QCALC_BASE-QCALC.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Numenator and Denominator
  ME->ADJUST_OPQTY_UMREZ_UMREN( changing CF_UMREZ = EF_UMREZ
                                         CF_UMREN = EF_UMREN ).

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QCALC_SELF-QCALC   = ES_QCALC_BASE-QCALC * EF_UMREZ / EF_UMREN.
  endif.
  ES_QCALC_SELF-QCALC_UOM = ES_QCALC_BASE-QCALC_UOM.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

  data:  LS_TBQTY         type        ZVCXI_XCSU_S_TBQTY.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

*** Check References are bound
  if ME->R_PR_CPM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QITEM( importing ES_QITEM_BASE = ES_QITEM_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_BASE-QITEM.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_BASE-QITEM_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Base Quantity by Total Base Quantity of Shipping Unit
  ME->R_PR_CPM->GET_DETAIL_SHIPUNIT( importing ES_TBQTY = LS_TBQTY ).
  if LS_TBQTY-TBQTY ne 0.
    ES_QITEM_BASE-QITEM = ceil( ES_QITEM_BASE-QITEM / LS_TBQTY-TBQTY ).
  else.
    clear ES_QITEM_BASE-QITEM.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Numenator and Denominator
  ME->ADJUST_OPQTY_UMREZ_UMREN( changing CF_UMREZ = EF_UMREZ
                                         CF_UMREN = EF_UMREN ).

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QITEM_SELF-QITEM   = ES_QITEM_BASE-QITEM * EF_UMREZ / EF_UMREN.
  endif.
  ES_QITEM_SELF-QITEM_UOM = ES_QITEM_BASE-QITEM_UOM.

endmethod.
