
class ZCL_VCXI_XCIU_TREE_SVCRT definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC
      !IR_CONTAINER type ref to CL_GUI_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_COLUMN_ID type TV_ITMNAME value 'ID'. "#EC NOTEXT
  constants C_UC_ADD_SVCRT type SYUCOMM value 'ADD_SVCRT'. "#EC NOTEXT
  constants C_UC_DEL_SVCRT type SYUCOMM value 'DEL_SVCRT'. "#EC NOTEXT
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data R_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC .

  methods BUILD_NODE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAULT_CONTEXT_REQ
    for event DEFAULT_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !MENU .
  methods HANDLE_DEFAULT_CONTEXT_SEL
    for event DEFAULT_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !FCODE .
  methods HANDLE_ITEM_CONTEXT_REQ
    for event ITEM_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !MENU .
  methods HANDLE_ITEM_CONTEXT_SEL
    for event ITEM_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE
      !ITEM_NAME .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_CONTEXT_REQ
    for event NODE_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !MENU .
  methods HANDLE_NODE_CONTEXT_SEL
    for event NODE_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_ADD_SVCRT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_SVCRT
    importing
      !IF_NODEKEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
private section.

  data R_CONTAINER type ref to CL_GUI_CONTAINER .
  data T_ITEM type TREEMCITAC .
  data T_NODE type TREEMCNOTA .
endclass. "ZCL_VCXI_XCIU_TREE_SVCRT definition
class ZCL_VCXI_XCIU_TREE_SVCRT implementation.
  method BUILD_NODE.

    data: LF_NODEKEY type TM_NODEKEY.
    data: LS_SVCRT type ZVCXI_XCI_S_SVCRT,
          LS_ARBPL type ZVCXI_XCI_S_ARBPL.
    field-symbols: <S_NODE> type TREEMCNODT,
                   <S_ITEM> type TREEMCITEN.

***----------------------------------------------------------------------------
*** Add Routing
    loop at ME->R_UI_IDAT_SVC->R_IDAT_SVC->T_SVCRT into LS_SVCRT.
      append initial line to ME->T_NODE assigning <S_NODE>.
      LF_NODEKEY = SY-TABIX.
      move LF_NODEKEY                             to <S_NODE>-NODE_KEY.
      move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD to <S_NODE>-RELATSHIP.
      move ABAP_TRUE                              to <S_NODE>-ISFOLDER.

      append initial line to ME->T_ITEM assigning <S_ITEM>.
      move <S_NODE>-NODE_KEY                     to <S_ITEM>-NODE_KEY.
      move C_COLUMN_ID                           to <S_ITEM>-ITEM_NAME.
      move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT to <S_ITEM>-CLASS.
      move LS_SVCRT-IEALI                        to <S_ITEM>-TEXT.

***----------------------------------------------------------------------------
***   Add Work Center
      loop at LS_SVCRT-T_ARBPL into LS_ARBPL.
        append initial line to ME->T_NODE assigning <S_NODE>.
        move SY-TABIX                               to <S_NODE>-NODE_KEY.
        move LF_NODEKEY                             to <S_NODE>-RELATKEY.
        move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD to <S_NODE>-RELATSHIP.
        move ABAP_TRUE                              to <S_NODE>-ISFOLDER.

        append initial line to ME->T_ITEM assigning <S_ITEM>.
        move <S_NODE>-NODE_KEY                       to <S_ITEM>-NODE_KEY.
        move C_COLUMN_ID                             to <S_ITEM>-ITEM_NAME.
        move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT   to <S_ITEM>-CLASS.
        concatenate '(' LS_ARBPL-WERKS ')'         into <S_ITEM>-TEXT.
        concatenate LS_ARBPL-ARBPL <S_ITEM>-TEXT   into <S_ITEM>-TEXT separated by SPACE.
      endloop.
    endloop.

  endmethod.
method CONSTRUCTOR.

  move IR_UI_IDAT_SVC to ME->R_UI_IDAT_SVC.
  move IR_CONTAINER   to ME->R_CONTAINER.

*** Initialize Tree
  ME->INIT_TREE( ).

*** Register the Tree Events
  ME->REGISTER_TREE_EVENTS( ).

endmethod.
method DO_FREE.

***--------------------------------------------------------------------------------------
*** Deactivate Event Handler
  set handler ME->HANDLE_DEFAULT_CONTEXT_REQ    for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_DEFAULT_CONTEXT_SEL    for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_CONTEXT_REQ       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_CONTEXT_SEL       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK      for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_CONTEXT_REQ       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_CONTEXT_SEL       for ME->R_TREE activation ABAP_FALSE.

*** Free Tree
  if ME->R_TREE is bound.
    ME->R_TREE->DELETE_ALL_NODES( ).
    free: ME->T_NODE,
          ME->T_ITEM,
          ME->R_TREE.
  endif.

***--------------------------------------------------------------------------------------
*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( ).
    clear ME->R_CONTAINER.
  endif.

***--------------------------------------------------------------------------------------
*** Clear References
  free: ME->R_UI_IDAT_SVC.

endmethod.
method HANDLE_DEFAULT_CONTEXT_REQ .

  data:  LF_DISABLED    type        CUA_ACTIVE.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.

***--------------------------------------------------------------------------------------
***   Add Customizing Element
*      if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq /VCXI/CL_VKSC_CUPRFL=>C_LOCKED_CUST.
*        move ABAP_FALSE to LF_DISABLED.
*      else.
*        move ABAP_TRUE  to LF_DISABLED.
*      endif.
      MENU->ADD_FUNCTION( FCODE    = C_UC_ADD_SVCRT
                          TEXT     = 'Add'(F01)
                          DISABLED = LF_DISABLED ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DEFAULT_CONTEXT_SEL .

  data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      case FCODE.
        when C_UC_ADD_SVCRT.
          ME->HANDLE_UC_ADD_SVCRT( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_CONTEXT_REQ .

  ME->HANDLE_NODE_CONTEXT_REQ( NODE_KEY = NODE_KEY
                               MENU     = MENU ).

endmethod.
method HANDLE_ITEM_CONTEXT_SEL .

  ME->HANDLE_NODE_CONTEXT_SEL( NODE_KEY = NODE_KEY
                               FCODE    = FCODE ).

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK .

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_NODE_CONTEXT_REQ .

*  data:  LF_DISABLED    type        CUA_ACTIVE.
*  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.
*
*  try.
**      if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq /VCXI/CL_VKSC_CUPRFL=>C_LOCKED_CUST.
**        move ABAP_FALSE to LF_DISABLED.
**      else.
**        move ABAP_TRUE  to LF_DISABLED.
**      endif.
*
****--------------------------------------------------------------------------------------
****   Add Customizing Element
*      MENU->ADD_FUNCTION( FCODE    = C_UC_ADD_SVCRT
*                          TEXT     = TEXT-F01
*                          DISABLED = LF_DISABLED ).
*
*      MENU->ADD_FUNCTION( FCODE    = C_UC_DEL_SVCRT
*                          TEXT     = TEXT-F02
*                          DISABLED = LF_DISABLED ).
*
*    catch /VCXI/CX_CKX into LR_CX_CKX.
*      LR_CX_CKX->SHOW_MESSAGE( ).
*  endtry.

endmethod.
method HANDLE_NODE_CONTEXT_SEL .

*  data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.
*
*  try.
*      case FCODE.
*        when C_UC_ADD_SVCEL.
*          ME->HANDLE_UC_ADD_SVCEL( IF_NODEKEY = NODE_KEY ).
*        when C_UC_DEL_SVCEL.
*          ME->HANDLE_UC_DEL_SVCEL( IF_NODEKEY = NODE_KEY ).
*      endcase.
*
*    catch /VCXI/CX_CKX into LR_CX_CKX.
*      LR_CX_CKX->SHOW_MESSAGE( ).
*  endtry.

endmethod.
method HANDLE_NODE_DOUBLE_CLICK .

  data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

  try.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_SVCRT.



endmethod.
method HANDLE_UC_DEL_SVCRT.



endmethod.
method INIT_TREE.

  data:  LS_HHDR   type  TREEMHHDR.

***----------------------------------------------------------------------------
*** Get the Hierarchy Column
  move 'ID'(C01)  to LS_HHDR-HEADING.
  move '30'       to LS_HHDR-WIDTH.

*** Create the Tree Instance
  create object ME->R_TREE
    exporting
      NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
      ITEM_SELECTION              = 'X'
      HIERARCHY_COLUMN_NAME       = C_COLUMN_ID
      HIERARCHY_HEADER            = LS_HHDR
    exceptions
      ILLEGAL_NODE_SELECTION_MODE = 1
      ILLEGAL_COLUMN_NAME         = 2
      others                      = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create the Tree Control
  ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                     PARENT                       = ME->R_CONTAINER
                                   exceptions
                                     LIFETIME_ERROR               = 1
                                     CNTL_SYSTEM_ERROR            = 2
                                     CREATE_ERROR                 = 3
                                     FAILED                       = 4
                                     TREE_CONTROL_ALREADY_CREATED = 5
                                     others                       = 6 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_TREE.

  data:  LT_EXPANDED_NODES  type        TREEMNOTAB,
         LT_TO_EXPAND_NODES type        TREEMNOTAB.

  free: ME->T_NODE,
        ME->T_ITEM.

***----------------------------------------------------------------------------
*** Get Expanded Nodes
  ME->R_TREE->GET_EXPANDED_NODES( importing
                                    NODE_KEY_TABLE       = LT_EXPANDED_NODES
                                  exceptions
                                    CONTROL_NOT_EXISTING = 1
                                    CONTROL_DEAD         = 2
                                    CNTL_SYSTEM_ERROR    = 3
                                    FAILED               = 4
                                    others               = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Delete all old Nodes
  ME->R_TREE->DELETE_ALL_NODES( ).

*** Build Node Table
  ME->BUILD_NODE( ).

***----------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = ME->T_NODE
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = ME->T_ITEM
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Filter Nodes to Expand
  ME->R_TREE->NODE_KEYS_IN_TREE( exporting
                                   NODE_KEY_TABLE    = LT_EXPANDED_NODES
                                 importing
                                   NODE_KEYS_IN_TREE = LT_TO_EXPAND_NODES ).

*** Expand the Nodes
  ME->R_TREE->EXPAND_NODES( exporting
                              NODE_KEY_TABLE          = LT_TO_EXPAND_NODES
                            exceptions
                              ERROR_IN_NODE_KEY_TABLE = 1
                              others                  = 2 ).


endmethod.
method REGISTER_TREE_EVENTS .

  data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
  field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_DEF_CONTEXT_MENU_REQ  to <S_EVENT>-EVENTID.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_DEFAULT_CONTEXT_REQ    for ME->R_TREE.
  set handler ME->HANDLE_DEFAULT_CONTEXT_SEL    for ME->R_TREE.
  set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_REQ       for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_SEL       for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK      for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_REQ       for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_SEL       for ME->R_TREE.

endmethod.
