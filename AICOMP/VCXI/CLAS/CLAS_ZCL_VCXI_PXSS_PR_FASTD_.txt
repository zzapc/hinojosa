
class ZCL_VCXI_PXSS_PR_FASTD definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PX_FASTD type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_FASTD' ##NO_TEXT.

  methods GET_BL_FDMDL
    returning
      value(RT_BL_FDMDL) type ZVCXI_PXSS_TT_BL_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SBH
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SBH) type ref to ZCL_VCXI_PXSS_PR_SBH
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
protected section.

  methods GET_PRVDR_FG
    exporting
      !ER_FG type ref to ZIF_VCXI_PXSS_FG
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_PXSS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_PRJ
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_PRJ) type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_FASTD definition
class ZCL_VCXI_PXSS_PR_FASTD implementation.
  method GET_BL_FDMDL.

    types: begin of YS_ALLOC,
             INDEX        type I,
             T_GATE_XCOMP type /VCXI/VKSR_TT_GATE,
             T_GATE_FG    type /VCXI/VKSR_TT_GATE,
           end of YS_ALLOC.

    data: LF_INDEX type I.
    data: LS_XCONR type ZVCXI_PXSS_S_XCONR,
          LS_ALLOC type YS_ALLOC.
    data: LT_GATE_FG    type /VCXI/VKSR_TT_GATE,
          LT_GATE_XCOMP type /VCXI/VKSR_TT_GATE,
          LT_XCONR      type ZVCXI_PXSS_TT_XCONR,
          LT_ALLOC      type table of YS_ALLOC.
    data: LR_PR_SOV type ref to ZCL_VCXI_PXSS_PR_SOV.
    data: LR_GATE_FG    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_ALLOC> type YS_ALLOC.

***--------------------------------------------------------------------------------------
*** Get Components
    LT_GATE_XCOMP = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_XCOMP=>C_IPRVT_PX_XCOMP
                                           IF_SORTED = ABAP_TRUE ).
    check LT_GATE_XCOMP is not initial.

*** Get Finished Goods
    LT_GATE_FG = ME->GET_PRVDR_FG( ).
    check LT_GATE_FG is not initial.

*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( ).
    check LR_PR_SOV is bound.

*** Get connected Componets
    LT_XCONR = LR_PR_SOV->GET_CONNECTED_XCOMP( ).


***--------------------------------------------------------------------------------------
*** Allocate connected Compoents to a Fast Data Model
    loop at LT_GATE_XCOMP into LR_GATE_XCOMP.
***   Is already assigned if not create assignment
      loop at LT_ALLOC assigning <S_ALLOC>.
        if LINE_EXISTS( <S_ALLOC>-T_GATE_XCOMP[ TABLE_LINE = LR_GATE_XCOMP ] ).
          exit.
        endif.
      endloop.
      if <S_ALLOC> is not assigned or
         not LINE_EXISTS( <S_ALLOC>-T_GATE_XCOMP[ TABLE_LINE = LR_GATE_XCOMP ] ).
        LF_INDEX += 1.
        append value #( INDEX        = LF_INDEX
                        T_GATE_XCOMP = value #( ( LR_GATE_XCOMP ) ) ) to LT_ALLOC assigning <S_ALLOC>.
      endif.

***   Add connected Components
      loop at LT_XCONR into LS_XCONR where R_GATE_IN eq LR_GATE_XCOMP.
***     Merge existing
        loop at LT_ALLOC into LS_ALLOC where INDEX ne <S_ALLOC>-INDEX.
          if LINE_EXISTS( LS_ALLOC-T_GATE_XCOMP[ TABLE_LINE = LS_XCONR-R_GATE_OUT ] ).
            append lines of LS_ALLOC-T_GATE_XCOMP to <S_ALLOC>-T_GATE_XCOMP.
            append lines of LS_ALLOC-T_GATE_FG    to <S_ALLOC>-T_GATE_FG.
            delete LT_ALLOC.
          endif.
        endloop.

***     Add connected Component
        if not LINE_EXISTS( <S_ALLOC>-T_GATE_XCOMP[ TABLE_LINE = LS_XCONR-R_GATE_OUT ] ).
          append LS_XCONR-R_GATE_OUT to <S_ALLOC>-T_GATE_XCOMP.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Allocate Finished Goods to a Fast Data Model
    loop at LT_GATE_FG into LR_GATE_FG.
      loop at LT_ALLOC assigning <S_ALLOC>.
        loop at <S_ALLOC>-T_GATE_XCOMP into LR_GATE_XCOMP.
          if LR_GATE_FG->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
            append LR_GATE_FG to <S_ALLOC>-T_GATE_FG.
            clear LR_GATE_FG. "mark as assigned
            exit.
          endif.
        endloop.

***     Assignment made?
        if LR_GATE_FG is not bound.
          exit.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Create Fast Data Models
    loop at LT_ALLOC assigning <S_ALLOC>.
      append ZCL_VCXI_PXSS_BL_FDMDL=>GET_INSTANCE( IR_GATE_FASTD = ME->R_GATE
                                                   IT_GATE_OUT   = <S_ALLOC>-T_GATE_FG
                                                   IT_GATE_XCOMP = <S_ALLOC>-T_GATE_XCOMP ) to RT_BL_FDMDL.
    endloop.

  endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ.

    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.
    RF_CADLS = LR_PR_CADIF_PRJ->GET_CADLS( ).

  endmethod.
  method GET_PRVDR_CADIF_PRJ.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_CADIF_PRJ.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_IPRVT_PX_CADIF_PRJ
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_CADIF_PRJ.

  endmethod.
  method GET_PRVDR_FG.

    clear ER_FG.

*** Find Provider for Finished Goods
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    if LINES( RT_GATE ) eq 1.
      ER_FG ?= RT_GATE[ 1 ]->R_CLSPR.
    endif.

  endmethod.
  method GET_PRVDR_SBH.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Sales BOM Header
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SBH=>C_IPRVT_PX_SBH ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SBH ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_PRVDR_SOV.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_PR_SOV ?= ER_GATE->R_CLSPR.

  endmethod.
  method HANDLE_GATE_FREED.

*** Free Instance Buffer
    ZCL_VCXI_PXSS_BL_FDMDL=>FREE_INSTANCE_BUFFER( IR_GATE_FASTD = ME->R_GATE ).

*** Super
    SUPER->HANDLE_GATE_FREED( ).

  endmethod.
