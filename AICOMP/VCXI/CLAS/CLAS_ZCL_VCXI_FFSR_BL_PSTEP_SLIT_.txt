
class ZCL_VCXI_FFSR_BL_PSTEP_SLIT definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_FFSR_ADJ_FIDIM .
  interfaces ZIF_VCXI_XCSR_BL_MANU .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_SLIT type /VCXI/VSMC_IPSTP value 'FF_PS_SLIT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_SLIT
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data T_MFCSP type /VCXI/CKX_TT_STRING .
  data S_FIDIM_IN type ZVCXI_FFSP_S_FIDIM .
  data T_FIDIM_OUT type ZVCXI_FFSP_TT_FIDIM .
  constants C_IATYP_AT_SLIT type /VCXI/VSMC_IATYP value 'FF_AT_SLIT' ##NO_TEXT.
  data S_WIDIM_IN type ZVCXI_FFSR_S_WIDIM .
  data T_WIDIM_OUT type ZVCXI_FFSR_TT_WIDIM .
  data T_MFMO_L type ZVCXI_FFSR_TT_MFMO_L .

  methods ADD_SPVRE_MFMO_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_ICORE_BY_FFG
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_ICORE) type ZVCXI_FFS_ICORE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_MFMO_L
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_FIOUT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_SLIT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_CSTEP_SLIT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_OUTPUT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_MFSO_L
    redefinition .
  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_SLIT definition
class ZCL_VCXI_FFSR_BL_PSTEP_SLIT implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

    data: LF_NOOUT     type        I.
    data: LS_FIDIM_OUT type        ZVCXI_FFSP_S_FIDIM,
          LS_RTE_SAREC type        /VCXI/VSMR_S_RTE_SAREC.
    field-symbols: <S_ARECN> type        /VCXI/VSMR_S_RTE_RANGE_ARECN.

***--------------------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

    loop at ME->T_FIDIM_OUT into LS_FIDIM_OUT.
***   Calculate Number of Outs
      add LS_FIDIM_OUT-NOOUT to LF_NOOUT.
    endloop.

***--------------------------------------------------------------------------------------
*** Aspect - Number of Outs
    try.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move LF_NOOUT               to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_SLIT=>C_IAATY_NOOUT
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).

      catch /VCXI/CX_CKX.
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Internal Film Thickness
    try.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->S_FIDIM_IN-FITIN   to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_SLIT=>C_IAATY_FITIN
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).

      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_NOOUT type        ZVCXI_XCS_NOOUT,
          LF_LDUOM type        /VCXI/VSMC_LDUOM,
          LF_LDVAL type        /VCXI/VSMR_LDVAL.
    data: LS_FIDIM type        ZVCXI_FFSP_S_FIDIM,
          LS_WIDIM type        ZVCXI_FFSR_S_WIDIM.
    data: LI_LVVAL  type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE  type        /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Prepare Values for Limits - Number of Outs
    loop at ME->T_FIDIM_OUT into LS_FIDIM.
      add LS_FIDIM-NOOUT to LF_NOOUT.
    endloop.

***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***--------------------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Winding Width (Inbound)
        when 'F0_LT_DI_WIWID'.
          move ME->S_WIDIM_IN-WIWID           to LF_LDVAL.
          move ME->S_WIDIM_IN-WIWID_UOM       to LF_LDUOM.

***     Internal Film Thickness (Processing)
        when 'FF_LT_DP_FITIN'.
          move ME->S_FIDIM_IN-FITIN           to LF_LDVAL.
          move ME->S_FIDIM_IN-FITIN_UOM       to LF_LDUOM.

***     Winding Width (Outbound)
        when 'FF_LT_DO_WIWID'.

***       Sending Multiple Dimension Limit Check
          loop at ME->T_WIDIM_OUT into LS_WIDIM.
            move LS_WIDIM-WIWID         to LF_LDVAL.
            move LS_WIDIM-WIWID_UOM     to LF_LDUOM.

***         Add each value entry as limit value
            IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                        IF_LDVAL = LF_LDVAL
                                        IF_LDUOM = LF_LDUOM ).
          endloop.
          continue.

***     Number of Outs
        when 'F0_LT_DO_NOOUT'.
          move LF_NOOUT                       to LF_LDVAL.
          move 'ST'                           to LF_LDUOM.

        when others.
          continue.
      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_FIOUT.

    data: LS_FIDIM_OUT type        ZVCXI_FFSP_S_FIDIM,
          LS_PARAM     type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_FIOUT type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'FIOUT'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

    loop at ME->T_FIDIM_OUT into LS_FIDIM_OUT.

***--------------------------------------------------------------------------------------
***   Create Supervisor Runtime Element
      create object LR_SPVRE_FIOUT
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_FIOUT to CT_SPVRE.

***   Set In Use
      LR_SPVRE_FIOUT->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Film Width
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_FIOUT=>C_PARID_FIWID       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_FIDIM_OUT-FIWID                          to LS_PARAM-ATFLV.
      move LS_FIDIM_OUT-FIWID_UOM                      to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_FIOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Repeat Length
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_FIOUT=>C_PARID_RELEN       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_FIDIM_OUT-RELEN                          to LS_PARAM-ATFLV.
      move LS_FIDIM_OUT-RELEN_UOM                      to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_FIOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Number Ups
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_FIOUT=>C_PARID_NOUPS       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_FIDIM_OUT-NOUPS                          to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_FIOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Number Outs
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_FIOUT=>C_PARID_NOOUT       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_FIDIM_OUT-NOOUT                          to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_FIOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

    endloop.

  endmethod.
  method ADD_SPVRE_MFMO_L.

    data: LS_MFMO_L type        ZVCXI_FFSR_S_MFMO_L,
          LS_LEOKY  type        /VCXI/VKSR_S_LEOKY.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMO_L type ref to /VCXI/CL_VKSR_SPVRE.

*** More than one Material defined
    check LINES( ME->T_MFMO_L ) gt 1.

***--------------------------------------------------------------------------------------
*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFMO_L.
      if LR_SPVRE_MFMO_L->GET_ID( ) eq 'MFMO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at ME->T_MFMO_L into LS_MFMO_L from 2.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMO_L
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMO_L to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFMO_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***   Set Material Number
      clear LS_LEOKY.
      move LS_MFMO_L-MATNR                              to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
      LR_SPVRE_MFMO_L->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    endloop.

  endmethod.
  method ADD_SPVRE_MFSO_L.

    data: LF_INDEX type        I,
          LF_IMFXC type        ZVCXI_XCSP_IMFXC,
          LF_MFCSP type        /VCXI/CKX_STRING.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_L type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_L.
      if LR_SPVRE_MFSO_L->GET_ID( ) eq 'MFSO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Check Mix of MFMO and MFSO
    if ME->T_MFMO_L is not initial and
       LINES( ME->T_FIDIM_OUT ) ne LINES( ME->T_MFMO_L ).
***   Mix of MFMO and MFSO not intended within Slitting.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_FFSR'
                                            IF_MSGNO = '101' ).
    endif.

***--------------------------------------------------------------------------------------
*** For each Film Dimension
    do LINES( ME->T_FIDIM_OUT ) times.
      move SY-INDEX to LF_INDEX.

      if ME->T_MFMO_L is not initial.
        check LF_INDEX le 1.
      endif.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFSO_L
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFSO_L to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFSO_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***   Get MF X-Connect
      read table ME->T_IMFXC_OUT into LF_IMFXC index LF_INDEX.
      if SY-SUBRC eq 0.
***     Set MF X-Connect
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
        move LF_IMFXC                                    to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

***   Cost Split IDs relevant for Material Flow
      read table ME->T_MFCSP into LF_MFCSP index LF_INDEX.
      if SY-SUBRC eq 0.
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MFSO=>C_PARID_MFCSP        to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG           to LS_PARAM-PARTY.
        move LF_MFCSP                                    to LS_PARAM-STRNG.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.
    enddo.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_SLIT type ref to ZCL_VCXI_FFSR_BL_PSTEP_SLIT.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_SLIT.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->S_FIDIM_IN  eq LR_BL_PSTEP_SLIT->S_FIDIM_IN and
       ME->T_FIDIM_OUT eq LR_BL_PSTEP_SLIT->T_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_IN eq LR_BL_PSTEP_SLIT->S_WIDIM_IN and
       ME->T_WIDIM_OUT eq LR_BL_PSTEP_SLIT->T_WIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Material Flow Material Out - Length
    if ME->T_MFMO_L eq LR_BL_PSTEP_SLIT->T_MFMO_L.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Material Flow relevant Cost Split IDs
    if ME->T_MFCSP eq LR_BL_PSTEP_SLIT->T_MFCSP.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

*** Initialize Manual Work Center Info
    move ZCL_VCXI_XCSP_PR_MANU=>C_PARID_MSRSR_L to ME->ZIF_VCXI_XCSR_BL_MANU~F_PARID_MSRSR.
    ME->INIT_MANU( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_SLIT type ref to ZCL_VCXI_FFSR_BL_PSTEP_SLIT.

*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_SLIT.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->S_FIDIM_IN    to LR_BL_PSTEP_SLIT->S_FIDIM_IN.
    move ME->T_FIDIM_OUT   to LR_BL_PSTEP_SLIT->T_FIDIM_OUT.

*** Winding Dimensions
    move ME->T_WIDIM_OUT   to LR_BL_PSTEP_SLIT->T_WIDIM_OUT.
    move ME->S_WIDIM_IN    to LR_BL_PSTEP_SLIT->S_WIDIM_IN.

***--------------------------------------------------------------------------------------
*** Material Flow Material Out - Length
    move ME->T_MFMO_L      to LR_BL_PSTEP_SLIT->T_MFMO_L.

*** Material Flow relevant Cost Split IDs
    move ME->T_MFCSP       to LR_BL_PSTEP_SLIT->T_MFCSP.

  endmethod.
  method DESERIALIZE.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML    = LF_XML
                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_WIDIM_IN   = ME->S_WIDIM_IN
                T_FIDIM_OUT  = ME->T_FIDIM_OUT
                T_WIDIM_OUT  = ME->T_WIDIM_OUT
                T_MFMO_L     = ME->T_MFMO_L
                T_MFCSP      = ME->T_MFCSP.

*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when C_IATYP_AT_SLIT.
        ME->FILL_SPVRE_ADDON_SLIT( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_SLIT.

***--------------------------------------------------------------------------------------
*** Add Film Out
    ME->ADD_SPVRE_FIOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = IR_SPVRE_ADDON
                         changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***--------------------------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***--------------------------------------------------------------------------------------
*** Standard
    move 'GRP_CONV'   to CF_ID_GRP.
    move 'ARBPL_CONV' to CF_ID_ARBPL.

***--------------------------------------------------------------------------------------
*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'GRP_CONV'    to CF_ID_GRP.
      move 'ARBPL_OUTSO' to CF_ID_ARBPL.
    endif.

***--------------------------------------------------------------------------------------
*** If Manual
    if ME->ZIF_VCXI_XCSR_BL_MANU~F_MANWC eq ABAP_TRUE.
      move 'GRP_CONV'    to CF_ID_GRP.
      move 'ARBPL_MANU'  to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_ICORE_BY_FFG.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.

*** Find Provider for MS Core that is inline with FFG
    loop at IT_PRVDR into LR_GATE.
      clear LR_PR_MS_CORE.
      check LR_GATE->R_CLSPR is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_CORE.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if IR_GATE_FFG->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
        exit.
      else.
        clear LR_PR_MS_CORE.
      endif.
    endloop.
    check LR_PR_MS_CORE is bound.

*** Return Core ID
    move LR_PR_MS_CORE->GET_ICORE( ) to RF_ICORE.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element for Activity
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_SLIT'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Add Film Out
    ME->ADD_SPVRE_FIOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                         changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method GET_SPVRE_MF.

***--------------------------------------------------------------------------------------
*** Always Try to add MFSI (after Route has added MFMI)
    if ME->T_IMFXC_IN is not initial.
      move ABAP_FALSE to CF_MFI.
    endif.

*** Add MFSI Length
    if CF_MFI ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSI_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFI.
    endif.

***--------------------------------------------------------------------------------------
*** Force new MFO
    move ABAP_FALSE to CF_MFO.

*** Add MFSO Length
    if CF_MFO ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFO.
    endif.

***--------------------------------------------------------------------------------------
*** Add MFMO Length
    ME->ADD_SPVRE_MFMO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE ).

  endmethod.
  method INIT_BY_CSTEP_SLIT.

    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP_SLIT type ref to ZCL_VCXI_FFSS_PR_CSTEP_SLIT,
          LR_BL_FIFPROP    type ref to ZCL_VCXI_FFSS_BL_FIFPROP.
    field-symbols: <S_FIDIM_OUT> type        ZVCXI_FFSP_S_FIDIM,
                   <S_WIDIM_OUT> type        ZVCXI_FFSR_S_WIDIM.


    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_CSTEP_SLIT.
          check LR_PR_CSTEP_SLIT is bound.

***--------------------------------------------------------------------------------------
***       Get Inbound Dimension
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_IN-S_FIWID ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_IN-S_FITIN ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_IN-S_FITEX ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_IN-S_SURWT ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_IN-NOUPS ).

***       Get Winding Dimension
          clear LR_BL_FIFPROP.
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
          if LR_BL_FIFPROP is bound.
***         Get Winding Width
            ME->S_WIDIM_IN-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_IN-S_FIWID ).
***         Get Winding Thickness
            ME->S_WIDIM_IN-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                               IS_FITIN = ME->S_FIDIM_IN-S_FITIN ).
***         Get Winding Surface Weight
            ME->S_WIDIM_IN-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_IN-S_SURWT
                                                               IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                               IS_WIWID = ME->S_WIDIM_IN-S_WIWID ).
          endif.

***--------------------------------------------------------------------------------------
***       Get Outbound Dimension
          insert initial line into table ME->T_FIDIM_OUT assigning <S_FIDIM_OUT>.
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = <S_FIDIM_OUT>-S_FIWID ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_FIDIM_OUT>-S_FITIN ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_FIDIM_OUT>-S_FITEX ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = <S_FIDIM_OUT>-S_SURWT ).
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_OUT>-NOUPS ).
          LR_PR_CSTEP_SLIT->GET_NOOUT( importing EF_NOOUT = <S_FIDIM_OUT>-NOOUT ).

***       Get Winding Dimension
          LR_PR_CSTEP_SLIT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
          if LR_BL_FIFPROP is bound.
            insert initial line into table ME->T_WIDIM_OUT assigning <S_WIDIM_OUT>.
***         Get Winding Width
            <S_WIDIM_OUT>-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = <S_FIDIM_OUT>-S_FIWID ).
***         Get Winding Thickness
            <S_WIDIM_OUT>-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = <S_FIDIM_OUT>-S_FIWID
                                                              IS_FITIN = <S_FIDIM_OUT>-S_FITIN ).
***         Get Winding Surface Weight
            <S_WIDIM_OUT>-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = <S_FIDIM_OUT>-S_SURWT
                                                              IS_FIWID = <S_FIDIM_OUT>-S_FIWID
                                                              IS_WIWID = <S_WIDIM_OUT>-S_WIWID ).
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method INIT_BY_OUTPUT.

    data: LF_ICORE       type        ZVCXI_FFS_ICORE.
    data: LS_CSPLIT    type        ZVCXI_FFSS_S_CSPLIT.
    data: LT_ICSPL       type        ZVCXI_XCSP_TT_ICSPL.
    data: LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OUTPUT   type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO    type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_BL_FIFPROP  type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIBPROP  type ref to ZCL_VCXI_FFSS_BL_FIBPROP.
    field-symbols: <S_FIDIM_OUT> type        ZVCXI_FFSP_S_FIDIM,
                   <S_WIDIM_OUT> type        ZVCXI_FFSR_S_WIDIM.

***--------------------------------------------------------------------------------------
*** Get Output Reference
    loop at IT_PRVDR into LR_GATE_OUTPUT.
      check LR_GATE_OUTPUT->R_CLSPR is bound.
      try.
          move LR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
    check LR_PR_OUTPUT is bound.

***--------------------------------------------------------------------------------------
*** Get Inbound Dimension
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_IN-S_FIWID ).
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_IN-S_FITIN ).
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_IN-S_FITEX ).
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_IN-S_SURWT ).
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_IN-NOUPS ).

*** Get Winding Dimension
    clear LR_BL_FIFPROP.
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width
      ME->S_WIDIM_IN-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_IN-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_IN-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_FITIN = ME->S_FIDIM_IN-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_IN-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_IN-S_SURWT
                                                         IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_WIWID = ME->S_WIDIM_IN-S_WIWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Outbound Dimension
    loop at IT_PRVDR into LR_GATE.
      clear: LR_BL_FIFPROP,
             LF_ICORE.

***   Only consider childs
      check LR_GATE_OUTPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ).

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.
      if LR_PR_FFG is bound.
        insert initial line into table ME->T_FIDIM_OUT assigning <S_FIDIM_OUT>.
        LR_PR_FFG->GET_FIWID( importing ES_FIWID = <S_FIDIM_OUT>-S_FIWID ).
        LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = <S_FIDIM_OUT>-S_FITIN ).
        LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = <S_FIDIM_OUT>-S_FITEX ).
        LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = <S_FIDIM_OUT>-S_SURWT ).
        LR_PR_FFG->GET_NOUPS( importing EF_NOUPS = <S_FIDIM_OUT>-NOUPS ).
        <S_FIDIM_OUT>-NOOUT = LR_PR_FFG->GET_NOOUT( ).

***     Get Film Property
        LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
        LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP ).

***     Get Core ID based on Finished Good
        LF_ICORE = ME->GET_ICORE_BY_FFG( IT_PRVDR    = IT_PRVDR
                                         IR_GATE_FFG = LR_GATE ).
      endif.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONO.
      endtry.
      if LR_PR_FCONO is bound.
        insert initial line into table ME->T_FIDIM_OUT assigning <S_FIDIM_OUT>.
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = <S_FIDIM_OUT>-S_FIWID ).
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_FIDIM_OUT>-S_FITIN ).
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_FIDIM_OUT>-S_FITEX ).
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = <S_FIDIM_OUT>-S_SURWT ).
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_OUT>-NOUPS ).
        <S_FIDIM_OUT>-NOOUT = LR_PR_FCONO->GET_NOOUT( ).

***     Get Film Property
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
        LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP ).

***     Get Core ID from XCONG
        move LR_PR_FCONO->GET_GXCON( ) to LF_ICORE.
      endif.

***   Get Winding Dimension
      if LR_BL_FIFPROP is bound.
        insert initial line into table ME->T_WIDIM_OUT assigning <S_WIDIM_OUT>.
        move LF_ICORE to <S_WIDIM_OUT>-ICORE.
***     Get Winding Width
        <S_WIDIM_OUT>-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = <S_FIDIM_OUT>-S_FIWID ).
***     Get Winding Thickness
        <S_WIDIM_OUT>-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = <S_FIDIM_OUT>-S_FIWID
                                                          IS_FITIN = <S_FIDIM_OUT>-S_FITIN ).
***     Get Winding Surface Weight
        <S_WIDIM_OUT>-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = <S_FIDIM_OUT>-S_SURWT
                                                          IS_FIWID = <S_FIDIM_OUT>-S_FIWID
                                                          IS_WIWID = <S_WIDIM_OUT>-S_WIWID ).
      endif.

***   Collect relevant Cost Split IDs
      if LR_BL_FIBPROP is bound.
        clear LT_ICSPL.
        loop at LR_BL_FIBPROP->T_CSPLIT into LS_CSPLIT
                                       where DCSPL ne 0.
          append LS_CSPLIT-ICSPL to LT_ICSPL.
        endloop.
        append ZCL_VCXI_FFSP_PR_MFSO_L=>CONV_TO_MFCSP( IT_ICSPL = LT_ICSPL ) to ME->T_MFCSP.
      endif.
    endloop.

  endmethod.
  method INIT_BY_SPEC.

    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize Material Flow Material Out - Length
    ME->INIT_BY_SPEC_MFMO_L( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    ME->INIT_BY_CSTEP_SLIT( IT_PRVDR = IT_PRVDR ).
    ME->INIT_BY_OUTPUT( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_MFMO_L.

    data:           LF_MATNR    type        MATNR.
    data:           LR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE,
                    LR_PR_FFG   type ref to ZCL_VCXI_FFSS_PR_FFG.
    field-symbols:  <S_MFMO_L>  type        ZVCXI_FFSR_S_MFMO_L.

    loop at IT_PRVDR into LR_GATE_FFG.
***--------------------------------------------------------------------------------------
***   Get FFG Reference
      try.
          try.
              move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
            catch CX_SY_MOVE_CAST_ERROR.
              clear LR_PR_FFG.
              continue.
          endtry.

          check LR_PR_FFG is bound.

***       Check if we have a dummy or a real material item
          LR_PR_FFG->GET_MATNR( importing EF_MATNR = LF_MATNR ).
          check LF_MATNR is not initial.

          append initial line to ME->T_MFMO_L assigning <S_MFMO_L>.

          move LR_GATE_FFG->GET_POSID( ) to <S_MFMO_L>-POSID.
          move LF_MATNR                  to <S_MFMO_L>-MATNR.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    sort ME->T_MFMO_L by POSID.

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML
                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_WIDIM_IN   = ME->S_WIDIM_IN
                T_FIDIM_OUT  = ME->T_FIDIM_OUT
                T_WIDIM_OUT  = ME->T_WIDIM_OUT
                T_MFMO_L     = ME->T_MFMO_L
                T_MFCSP      = ME->T_MFCSP
         result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_IN.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_IN to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_OUT.

    refresh: CT_FIDIM.
    append lines of ME->T_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append lines of ME->T_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    loop at ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL into data(LS_RHNDL).
      check LINE_EXISTS( ME->T_FIDIM_OUT[ SY-TABIX ] ).
      ME->T_FIDIM_OUT[ SY-TABIX ]-S_RLETA = LS_RHNDL-S_RLETA.
    endloop.

  endmethod.
