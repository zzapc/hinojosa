
class ZCL_VCXI_PXSS_GRID_ALTUOM definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  data F_INIT_SEL_ROW type SYST_TABIX .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_ALTUOM_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  data R_PR_ALTUOM type ref to ZCL_VCXI_PXSS_PR_ALTUOM .

  methods CHANGE_COLOR
    importing
      !IF_FNAME type LVC_FNAME
    changing
      !CT_SCOL type LVC_T_SCOL
    exceptions
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_ALTUOM definition
class ZCL_VCXI_PXSS_GRID_ALTUOM implementation.
  method CHANGE_COLOR.

    data: LS_SCOL type LVC_S_SCOL.

    LS_SCOL-FNAME     = IF_FNAME.
    LS_SCOL-COLOR-COL = 3.
    LS_SCOL-COLOR-INT = 1.
    LS_SCOL-COLOR-INV = 1.
    append LS_SCOL to CT_SCOL.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

    ME->R_PR_ALTUOM ?= ME->R_GATE->R_CLSPR.

  endmethod.
  method GET_FIELDCAT.

    data: LF_COLPOS      type I.
    field-symbols: <S_FCAT>     type        LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
***     Line Counter
        when 'CLINE'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.

***     Cell Color
        when 'T_SCOL'.
          move ABAP_TRUE to <S_FCAT>-TECH.
      endcase.

***----------------------------------------------------------------------------
***   Set Position for each Field
      <S_FCAT>-COL_POS = 0.
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'LRMEI'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MSEHL'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'OPQTY'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'OPQTY_UOM'.    <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'LAENG'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'BREIT'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'HOEHE'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MEABM'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'VOLUM'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'VOLEH'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'BRGEW'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NTGEW'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'GEWEI'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.

***   Hide the rest
      if <S_FCAT>-COL_POS eq 0.
        move ABAP_TRUE to <S_FCAT>-NO_OUT.
      endif.

    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LF_MEINS  type MEINS.
    data: LS_ALTUOM_GRID type ZVCXI_PXSS_S_ALTUOM_GRID,
          LS_QITEM       type ZVCXI_XCSS_S_QITEM.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.


    check ME->R_PR_ALTUOM is bound and
          ME->R_PR_ALTUOM->R_BL_ALTUOM is bound.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Grid Lines
    loop at ME->R_PR_ALTUOM->R_BL_ALTUOM->T_ALTUOM_DEF into data(LS_ALTUOM_DEF).

      clear LS_ALTUOM_GRID.

***   Set Line Counter
      LS_ALTUOM_GRID-CLINE = LS_ALTUOM_DEF-CLINE.

***   Get Alternate UoM Information
      LS_ALTUOM_GRID-S_ALTUOM = ME->R_PR_ALTUOM->GET_ALTUOM( exporting IF_LRMEI = LS_ALTUOM_DEF-LRMEI
                                                             importing EF_MEINS = LF_MEINS
                                                                       EF_MSEHL = LS_ALTUOM_GRID-MSEHL ).

***   Get Quantity Data
      clear LS_QITEM.
      try.
          LS_QITEM = ME->R_PR_ALTUOM->GET_QITEM_AS_ALTUOM( IS_ALTUOM = LS_ALTUOM_GRID-S_ALTUOM ).
        catch /VCXI/CX_CKX.
          clear LS_QITEM.
      endtry.
      check LS_QITEM-QITEM_UOM is not initial.

***   Fill Entry
      LS_ALTUOM_GRID-OPQTY     = LS_QITEM-QITEM.
      LS_ALTUOM_GRID-OPQTY_UOM = LS_QITEM-QITEM_UOM.

***   Add Line
      append initial line to <T_DATA> assigning <S_DATA>.

***   Highlight Base UoM
      if LS_ALTUOM_GRID-LRMEI eq LF_MEINS.
        move SY-TABIX to ME->F_INIT_SEL_ROW.

        ME->CHANGE_COLOR( exporting IF_FNAME = 'OPQTY'
                          changing  CT_SCOL  = LS_ALTUOM_GRID-T_SCOL ).
        ME->CHANGE_COLOR( exporting IF_FNAME = 'OPQTY_UOM'
                          changing  CT_SCOL  = LS_ALTUOM_GRID-T_SCOL ).
      endif.

      move-corresponding LS_ALTUOM_GRID to <S_DATA>.
    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

    move 'T_SCOL'  to RS_LAYOUT-CTAB_FNAME.

  endmethod.
  method REFRESH_GRID.

    data: LF_INITIAL_REFRESH   type ABAP_BOOL.


    check ME->F_FREED       ne ABAP_TRUE and
          ME->F_REFRESH_REQ eq ABAP_TRUE.

    if ME->R_GRID is not bound.
      move ABAP_TRUE to LF_INITIAL_REFRESH.
    endif.

*** Call Super Refresh
    SUPER->REFRESH_GRID( ).

    if LF_INITIAL_REFRESH eq ABAP_TRUE.
***   Set Initial Selected Row
      ME->R_GRID->SET_SELECTED_ROWS( exporting IT_INDEX_ROWS = value #( ( INDEX = ME->F_INIT_SEL_ROW ) ) ).
    endif.

  endmethod.
