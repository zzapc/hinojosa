
class ZCL_VCXI_P1SS_PR_CSTEP_GUIL definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_SCORES_AP .

  constants C_IEVNT_O_CUTHE_CHANGED type /VCXI/VKSC_IEVNT value 'CUTHE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOCUT_CHANGED type /VCXI/VKSC_IEVNT value 'NOCUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PCPCU_CHANGED type /VCXI/VKSC_IEVNT value 'PCPCU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTN_CHANGED type /VCXI/VKSC_IEVNT value 'SHTN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SPTRN_CHANGED type /VCXI/VKSC_IEVNT value 'SPTRN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRBOT_CHANGED type /VCXI/VKSC_IEVNT value 'TRBOT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRLEF_CHANGED type /VCXI/VKSC_IEVNT value 'TRLEF_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRLET_CHANGED type /VCXI/VKSC_IEVNT value 'TRLET_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRRIG_CHANGED type /VCXI/VKSC_IEVNT value 'TRRIG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRTOP_CHANGED type /VCXI/VKSC_IEVNT value 'TRTOP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRWIT_CHANGED type /VCXI/VKSC_IEVNT value 'TRWIT_CHANGED' ##NO_TEXT.
  constants C_PARID_CUTHE type /VCXI/VKS_PARID value 'ZVCXI_PX_CUTHE' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.
  constants C_PARID_ISCAP type /VCXI/VKS_PARID value 'ZVCXI_PX_ISCAP' ##NO_TEXT.
  constants C_PARID_NOCUT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOCUT' ##NO_TEXT.
  constants C_PARID_NOUTL type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTL' ##NO_TEXT.
  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.
  constants C_PARID_NOUTW type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTW' ##NO_TEXT.
  constants C_PARID_PCPCU type /VCXI/VKS_PARID value 'ZVCXI_PX_PCPCU' ##NO_TEXT.
  constants C_PARID_SCORE type /VCXI/VKS_PARID value 'ZVCXI_PX_SCORE' ##NO_TEXT.
  constants C_PARID_SHTNL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNL' ##NO_TEXT.
  constants C_PARID_SHTNW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNW' ##NO_TEXT.
  constants C_PARID_SPTNL type /VCXI/VKS_PARID value 'ZVCXI_PX_SPTNL' ##NO_TEXT.
  constants C_PARID_SPTNW type /VCXI/VKS_PARID value 'ZVCXI_PX_SPTNW' ##NO_TEXT.
  constants C_PARID_TRBOT type /VCXI/VKS_PARID value 'ZVCXI_PX_TRBOT' ##NO_TEXT.
  constants C_PARID_TRLEF type /VCXI/VKS_PARID value 'ZVCXI_PX_TRLEF' ##NO_TEXT.
  constants C_PARID_TRLET type /VCXI/VKS_PARID value 'ZVCXI_PX_TRLET' ##NO_TEXT.
  constants C_PARID_TRRIG type /VCXI/VKS_PARID value 'ZVCXI_PX_TRRIG' ##NO_TEXT.
  constants C_PARID_TRTOP type /VCXI/VKS_PARID value 'ZVCXI_PX_TRTOP' ##NO_TEXT.
  constants C_PARID_TRWIT type /VCXI/VKS_PARID value 'ZVCXI_PX_TRWIT' ##NO_TEXT.

  methods GET_CUTHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CUTHE) type ZVCXI_PXS_S_CUTHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_NOCUT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOCUT) type ZVCXI_PXS_NOCUT
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTL) type ZVCXI_PXS_NOUTL
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTW) type ZVCXI_PXS_NOUTW
    raising
      /VCXI/CX_CKX .
  methods GET_PCPCU
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_PCPCU) type ZVCXI_PXS_PCPCU
    raising
      /VCXI/CX_CKX .
  methods GET_SHTNL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNL) type ZVCXI_P0SS_S_SHTNL
    raising
      /VCXI/CX_CKX .
  methods GET_SHTNW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNW) type ZVCXI_P0SS_S_SHTNW
    raising
      /VCXI/CX_CKX .
  methods GET_SPTNL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SPTNL) type ZVCXI_PXS_SPTNL
    raising
      /VCXI/CX_CKX .
  methods GET_SPTNW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SPTNW) type ZVCXI_PXS_SPTNW
    raising
      /VCXI/CX_CKX .
  methods GET_TRBOT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRBOT) type ZVCXI_PXS_S_TRBOT
    raising
      /VCXI/CX_CKX .
  methods GET_TRLEF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRLEF) type ZVCXI_PXS_S_TRLEF
    raising
      /VCXI/CX_CKX .
  methods GET_TRLET
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRLET) type ZVCXI_PXS_S_TRLET
    raising
      /VCXI/CX_CKX .
  methods GET_TRRIG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRRIG) type ZVCXI_PXS_S_TRRIG
    raising
      /VCXI/CX_CKX .
  methods GET_TRTOP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRTOP) type ZVCXI_PXS_S_TRTOP
    raising
      /VCXI/CX_CKX .
  methods GET_TRWIT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TRWIT) type ZVCXI_PXS_S_TRWIT
    raising
      /VCXI/CX_CKX .
  methods SET_CUTHE
    importing
      !IS_CUTHE type ZVCXI_PXS_S_CUTHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_NOCUT
    importing
      !IF_NOCUT type ZVCXI_PXS_NOCUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTL
    importing
      !IF_NOUTL type ZVCXI_PXS_NOUTL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTW
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PCPCU
    importing
      !IF_PCPCU type ZVCXI_PXS_PCPCU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_SPTNL
    importing
      !IF_SPTNL type ZVCXI_PXS_SPTNL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SPTNW
    importing
      !IF_SPTNW type ZVCXI_PXS_SPTNW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRBOT
    importing
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLEF
    importing
      !IS_TRLEF type ZVCXI_PXS_S_TRLEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLET
    importing
      !IS_TRLET type ZVCXI_PXS_S_TRLET
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRRIG
    importing
      !IS_TRRIG type ZVCXI_PXS_S_TRRIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRTOP
    importing
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRWIT
    importing
      !IS_TRWIT type ZVCXI_PXS_S_TRWIT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_ADJUST_ISCAP type /VCXI/VKSC_IEVNT value 'ADJUST_ISCAP' ##NO_TEXT.
  constants C_IEVNT_I_ADJUST_SPTRN type /VCXI/VKSC_IEVNT value 'ADJUST_SPTRN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_NOCUT type /VCXI/VKSC_IEVNT value 'RECALC_NOCUT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_NOUTT type /VCXI/VKSC_IEVNT value 'RECALC_NOUTT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PCPCU type /VCXI/VKSC_IEVNT value 'RECALC_PCPCU' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SHTN type /VCXI/VKSC_IEVNT value 'RECALC_SHTN' ##NO_TEXT.
  constants C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SCORE_CHANGED type /VCXI/VKSC_IEVNT value 'SCORE_CHANGED' ##NO_TEXT.

  methods CHECK_HNDDIM
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_CUTHE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_GUIL
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOCUT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRLET
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRWIT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods GET_ISCAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ISCAP type ZVCXI_PXS_ISCAP
      !EF_FAALL type ZVCXI_PXSS_FAALL
    returning
      value(RT_ISCOR) type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_SCORE) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_ISCAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_SPTRN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOCUT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUTT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PCPCU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTN
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ISCAP
    importing
      !IF_ISCAP type ZVCXI_PXS_ISCAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
      !IF_FAALL type ZVCXI_PXSS_FAALL optional
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IT_SCORE type ZVCXI_PXSS_TT_SCORE_COM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNL
    importing
      !IS_SHTNL type ZVCXI_P0SS_S_SHTNL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNW
    importing
      !IS_SHTNW type ZVCXI_P0SS_S_SHTNW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CSTEP_GUIL definition
class ZCL_VCXI_P1SS_PR_CSTEP_GUIL implementation.
  method CHECK_CUTHE.

    if ME->GET_CUTHE( )-CUTHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Cut Height is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '503' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Cut Height is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '504' ).
      endif.
    endif.


    if ME->GET_PCPCU( ) is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     PC/Cut can't be calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '505' ).
      endif.
    endif.

  endmethod.
  method CHECK_GUIL.

    if ME->GET_NOUTT( )       le 1 and
       ME->GET_TRWIT( )-TRWIT is initial and
       ME->GET_TRLET( )-TRLET is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Define multiple outs or a trim.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '331' ).
      endif.
    endif.

  endmethod.
  method CHECK_HNDDIM.

    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.


*** Get Handling Dimensions
    LS_HNDDIM = ME->GET_HNDDIM( ).

*** Check Handling Dimension
    if LS_HNDDIM-HNDLE is not initial and
       LS_HNDDIM-HNDWI is not initial and
       LS_HNDDIM-HNDHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Handling Dimensions are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '451' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Handling Dimensions are not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '452' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOCUT.

    if ME->GET_NOCUT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Cuts are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '501' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Cuts are not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '502' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUT.

*** Check Number of Outs
    if ME->GET_NOUTW( ) is not initial and
       ME->GET_NOUTL( ) is not initial and
       ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs are fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '357' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        if ME->GET_NOUTW( ) is initial.
***       Number of Outs on Width is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '358' ).
        endif.
        if ME->GET_NOUTL( ) is initial.
***       Number of Outs on Length is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '359' ).
        endif.
        if ME->GET_NOUTT( ) is initial.
***       Number of Outs (total) is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '360' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_TRLET.

    data: LS_TRLET     type ZVCXI_PXS_S_TRLET,
          LS_TRLET_SUM type ZVCXI_PXS_S_TRLET,
          LS_TRTOP     type ZVCXI_PXS_S_TRTOP,
          LS_TRBOT     type ZVCXI_PXS_S_TRBOT.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRLET = ME->GET_TRLET( ).
    LS_TRTOP = ME->GET_TRTOP( ).
    LS_TRBOT = ME->GET_TRBOT( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRLET-TRLET_UOM
                                              importing EF_CALCV       = LS_TRLET_SUM-TRLET
                                                        EF_CALCV_UOM   = LS_TRLET_SUM-TRLET_UOM ).

***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRLET-TRLET eq LS_TRLET_SUM-TRLET.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Length correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '351' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Length not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '352' ).
      endif.
    endif.

  endmethod.
  method CHECK_TRWIT.

    data: LS_TRWIT     type ZVCXI_PXS_S_TRWIT,
          LS_TRWIT_SUM type ZVCXI_PXS_S_TRWIT,
          LS_TRLEF     type ZVCXI_PXS_S_TRLEF,
          LS_TRRIG     type ZVCXI_PXS_S_TRRIG.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRWIT = ME->GET_TRWIT( ).
    LS_TRLEF = ME->GET_TRLEF( ).
    LS_TRRIG = ME->GET_TRRIG( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRWIT-TRWIT_UOM
                                              importing EF_CALCV       = LS_TRWIT_SUM-TRWIT
                                                        EF_CALCV_UOM   = LS_TRWIT_SUM-TRWIT_UOM ).

***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRWIT-TRWIT eq LS_TRWIT_SUM-TRWIT.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Width correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '353' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Width not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '354' ).
      endif.
    endif.

  endmethod.
  method GET_CUTHE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUTHE ).
    move LS_PARAM-ATFLV to RS_CUTHE-CUTHE.
    move LS_PARAM-UNIT  to RS_CUTHE-CUTHE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_ISCAP.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).
    move LS_PARAM-STRNG to EF_ISCAP.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_ISCAP is not initial.

***----------------------------------------------------------------------------
*** Apply All
    EF_FAALL = switch #( EF_ISCAP when '*'   then ABAP_TRUE
                                  when SPACE then ABAP_FALSE
                                             else ABAP_UNDEFINED ).

*** Separate Score IDs
    if RT_ISCOR is requested.
      split EF_ISCAP at ',' into table RT_ISCOR.
    endif.

  endmethod.
  method GET_NOCUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCUT ).
    move LS_PARAM-ATFLV to RF_NOCUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUTL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTL ).
    move LS_PARAM-ATFLV to RF_NOUTL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUTW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).
    move LS_PARAM-ATFLV to RF_NOUTW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PCPCU.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCPCU ).
    move LS_PARAM-ATFLV to RF_PCPCU.
    move LS_PARAM-SETBY to EF_SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_SCORE.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_SCORE = RT_SCORE.
    endif.

    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SHTNL.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).
    move LS_PARAM-ATFLV to RS_SHTNL-SHTNL.
    move LS_PARAM-UNIT  to RS_SHTNL-SHTNL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTNW.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).
    move LS_PARAM-ATFLV to RS_SHTNW-SHTNW.
    move LS_PARAM-UNIT  to RS_SHTNW-SHTNW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SPTNL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SPTNL ).
    RF_SPTNL = LS_PARAM-STRNG.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SPTNW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SPTNW ).
    RF_SPTNW = LS_PARAM-STRNG.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Guillotining is needed
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_GUIL( ) ).

*** Check Number of Outs
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUT( ) ).

*** Check Number of Cuts
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOCUT( ) ).

*** Check Cut Height
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CUTHE( ) ).

***----------------------------------------------------------------------------
*** Check Trim on Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRLET( ) ).

*** Check Trim on Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRWIT( ) ).

***----------------------------------------------------------------------------
*** Check Handling Dimension
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_HNDDIM( ) ).


  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Guillotining is needed
    ME->CHECK_GUIL(  IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs
    ME->CHECK_NOUT(  IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Cuts
    ME->CHECK_NOCUT( IR_MESSAGE = IR_MESSAGE ).

*** Check Cut Height
    ME->CHECK_CUTHE( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Trim on Length
    ME->CHECK_TRLET( IR_MESSAGE = IR_MESSAGE ).

*** Check Trim on Width
    ME->CHECK_TRWIT( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Handling Dimensions
    ME->CHECK_HNDDIM( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TRBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRBOT ).
    move LS_PARAM-ATFLV to RS_TRBOT-TRBOT.
    move LS_PARAM-UNIT  to RS_TRBOT-TRBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLEF ).
    move LS_PARAM-ATFLV to RS_TRLEF-TRLEF.
    move LS_PARAM-UNIT  to RS_TRLEF-TRLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRLET.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLET ).
    move LS_PARAM-ATFLV to RS_TRLET-TRLET.
    move LS_PARAM-UNIT  to RS_TRLET-TRLET_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRRIG ).
    move LS_PARAM-ATFLV to RS_TRRIG-TRRIG.
    move LS_PARAM-UNIT  to RS_TRRIG-TRRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRTOP ).
    move LS_PARAM-ATFLV to RS_TRTOP-TRTOP.
    move LS_PARAM-UNIT  to RS_TRTOP-TRTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TRWIT.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWIT ).
    move LS_PARAM-ATFLV to RS_TRWIT-TRWIT.
    move LS_PARAM-UNIT  to RS_TRWIT-TRWIT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_ADJUST_ISCAP.

    data: LF_FAALL    type ZVCXI_PXSS_FAALL.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR    type ZVCXI_PXS_TT_ISCOR.

*** Process other Events first, to ensure Scores have been backwarded correctly
    ME->R_GATE->RAISE_EVENTS( ).

*** Don't adjust if all Scores are applied
    ME->GET_ISCAP( importing EF_FAALL = LF_FAALL ).
    check LF_FAALL ne ABAP_TRUE.

*** Get currently applied Scores (scores that are no longer available wouldn't be in the list)
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).
    LT_ISCOR = value #( for S_SCORE_AP in LT_SCORE_AP where ( FAPPL = ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).

*** Update list of applied scores
    ME->SET_ISCAP( IT_ISCOR = LT_ISCOR  ).

  endmethod.
  method HANDLE_ADJUST_SPTRN.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


*** Score Pattern Length
    data(LF_SPTNL) = ME->GET_SPTNL( importing EF_SETBY = LF_SETBY ).
    LF_SETBY = cond #( when LF_SETBY is initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                else LF_SETBY ).
    ME->SET_SPTNL( IF_SPTNL = ZCL_VCXI_PXSS_BL_SCORE=>ADJUST_SPTRN( IF_SPTRN = LF_SPTNL
                                                                    IF_NOUPS = ME->GET_NOUTL( ) )
                   IF_SETBY = LF_SETBY ).


*** Score Pattern Width
    data(LF_SPTNW) = ME->GET_SPTNW( importing EF_SETBY = LF_SETBY ).
    LF_SETBY = cond #( when LF_SETBY is initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                else LF_SETBY ).
    ME->SET_SPTNW( IF_SPTNW = ZCL_VCXI_PXSS_BL_SCORE=>ADJUST_SPTRN( IF_SPTRN = LF_SPTNW
                                                                    IF_NOUPS = ME->GET_NOUTW( ) )
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_ADJUST_ISCAP.
        ME->HANDLE_ADJUST_ISCAP( ).
      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).
      when C_IEVNT_I_ADJUST_SPTRN.
        ME->HANDLE_ADJUST_SPTRN( ).

      when C_IEVNT_I_RECALC_NOUTT.
        ME->HANDLE_RECALC_NOUTT( ).
      when C_IEVNT_I_RECALC_SHTN.
        ME->HANDLE_RECALC_SHTN( ).

      when C_IEVNT_I_RECALC_NOCUT.
        ME->HANDLE_RECALC_NOCUT( ).
      when C_IEVNT_I_RECALC_PCPCU.
        ME->HANDLE_RECALC_PCPCU( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP.


***--------------------------------------------------------------------------------------
*** Do only Recalc Folding Dimensions if they are not overridden.
    LS_HNDDIM = ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
    clear: LS_HNDDIM-HNDLE,
           LS_HNDDIM-HNDWI,
           LS_HNDDIM-HNDHE.

*** Get Corrugator Forward Property (Inbound)
    LR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( ).
    if LR_BL_CRFPROP is bound.

      LS_HNDDIM = LR_BL_CRFPROP->S_HNDDIM.

***   Apply Cut on Length
      data(LF_NOUTL) = ME->GET_NOUTL( ).
      if LF_NOUTL ne 0.
        LS_HNDDIM-HNDLE = LS_HNDDIM-HNDLE / LF_NOUTL.
      else.
        LS_HNDDIM-HNDLE = 0.
      endif.

***   Apply Cut on Width
      data(LF_NOUTW) = ME->GET_NOUTW( ).
      if LF_NOUTW ne 0.
        LS_HNDDIM-HNDWI = LS_HNDDIM-HNDWI / LF_NOUTW.
      else.
        LS_HNDDIM-HNDWI = 0.
      endif.
    endif.

*** Ensure no negative Values have been calculated
    LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
    LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
    LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method HANDLE_RECALC_NOCUT.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_NOCUT type ZVCXI_PXS_NOCUT.


*** Only Calculate if not set by User
    ME->GET_NOCUT( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

    try.
***     Calculate Cuts based on #Outs
        LF_NOCUT = ME->GET_NOUTT( ) - 1.
        if LF_NOCUT lt 0.
          clear LF_NOCUT.
        else.
***       One Cut for each Trim
          if ME->GET_TRLEF( )-TRLEF ne 0.
            LF_NOCUT += 1.
          endif.
          if ME->GET_TRRIG( )-TRRIG ne 0.
            LF_NOCUT += 1.
          endif.
          if ME->GET_TRTOP( )-TRTOP ne 0.
            LF_NOCUT += 1.
          endif.
          if ME->GET_TRBOT( )-TRBOT ne 0.
            LF_NOCUT += 1.
          endif.
        endif.

      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear LF_NOCUT.
    endtry.

    ME->SET_NOCUT( IF_NOCUT = LF_NOCUT ).

  endmethod.
  method HANDLE_RECALC_NOUTT.

    data: LF_NOUTT type ZVCXI_PXS_NOUTT.


    try.
        LF_NOUTT = ME->GET_NOUTL( ) *  ME->GET_NOUTW( ).
      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear LF_NOUTT.
    endtry.
    ME->SET_NOUTT( IF_NOUTT = LF_NOUTT ).

  endmethod.
  method HANDLE_RECALC_PCPCU.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_PCPCU type F.
    data: LS_HNDHE type ZVCXI_PXS_S_HNDHE,
          LS_CUTHE type ZVCXI_PXS_S_CUTHE.


    LF_PCPCU = ME->GET_PCPCU( importing EF_FOVRR = LF_FOVRR ).
    LS_HNDHE = ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRFPX( )->S_HNDDIM-S_HNDHE.

***--------------------------------------------------------------------------------------
*** Calculate PC per Cut
    if LF_FOVRR eq ABAP_FALSE.
      try.
***       Calculate PC based on Handling Height
          LS_CUTHE = ME->GET_CUTHE( ).

          if LS_HNDHE-HNDHE ne 0.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CUTHE-CUTHE
                                                                IF_CALCV_UOM_1 = LS_CUTHE-CUTHE_UOM
                                                                IF_CALCV_2     = LS_HNDHE-HNDHE
                                                                IF_CALCV_UOM_2 = LS_HNDHE-HNDHE_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                      importing EF_CALCV       = LF_PCPCU ).
          else.
            LF_PCPCU = 0.
          endif.
        catch CX_SY_ARITHMETIC_OVERFLOW.
          clear LF_PCPCU.
      endtry.

      ME->SET_PCPCU( IF_PCPCU = conv #( FLOOR( LF_PCPCU ) ) ).

***--------------------------------------------------------------------------------------
*** Calculate Cut Height
    else.
      try.
          LS_CUTHE = value #( CUTHE     = LS_HNDHE-HNDHE * LF_PCPCU
                              CUTHE_UOM = LS_HNDHE-HNDHE_UOM ).
        catch CX_SY_ARITHMETIC_OVERFLOW.
          clear LS_CUTHE-CUTHE.
      endtry.

      ME->SET_CUTHE( IS_CUTHE = LS_CUTHE ).
    endif.

  endmethod.
  method HANDLE_RECALC_SHTN.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_TRWIT type ZVCXI_PXS_S_TRWIT,
          LS_TRLET type ZVCXI_PXS_S_TRLET,
          LS_SHTNL type ZVCXI_P0SS_S_SHTNL,
          LS_SHTNW type ZVCXI_P0SS_S_SHTNW.


***----------------------------------------------------------------------------
*** Get Inbound Sheet
    ME->ZIF_VCXI_P1SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
*** Reduce Width by Trim
    if LS_SHTWI-SHTWI_UOM is not initial.
      LS_TRWIT = ME->GET_TRWIT( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
                                                          IF_CALCV_2     = LS_TRWIT-TRWIT
                                                          IF_CALCV_UOM_2 = LS_TRWIT-TRWIT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
                                                importing EF_CALCV       = LS_SHTNW-SHTNW
                                                          EF_CALCV_UOM   = LS_SHTNW-SHTNW_UOM ).
    endif.

*** Reduce Length by Trim
    if LS_SHTLE-SHTLE_UOM is not initial.
      LS_TRLET = ME->GET_TRLET( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_TRLET-TRLET
                                                          IF_CALCV_UOM_2 = LS_TRLET-TRLET_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTLE-SHTLE_UOM
                                                importing EF_CALCV       = LS_SHTNL-SHTNL
                                                          EF_CALCV_UOM   = LS_SHTNL-SHTNL_UOM ).
    endif.

***----------------------------------------------------------------------------
*** Set new Net Sheet
    ME->SET_SHTNW( IS_SHTNW = LS_SHTNW ).
    ME->SET_SHTNL( IS_SHTNL = LS_SHTNL ).

  endmethod.
  method SET_CUTHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CUTHE ).

    move IS_CUTHE-CUTHE     to LS_PARAM-ATFLV.
    move IS_CUTHE-CUTHE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CUTHE_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_ISCAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).

    if IT_ISCOR is supplied.
      concatenate lines of IT_ISCOR into LS_PARAM-STRNG separated by ','.
    endif.
    if IF_ISCAP is supplied.
      LS_PARAM-STRNG = IF_ISCAP.
    endif.
    if IF_FAALL is supplied and
       IF_FAALL ne ABAP_UNDEFINED.
      LS_PARAM-STRNG = switch #( IF_FAALL when ABAP_TRUE then '*' ).
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISCAP_CHANGED ).
    endif.

  endmethod.
  method SET_NOCUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCUT ).

    move IF_NOCUT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOCUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTL ).

    move IF_NOUTL  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).

    move IF_NOUTW  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_PCPCU.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCPCU ).

    if IF_PCPCU is supplied.
      LS_PARAM-ATFLV = IF_PCPCU.
    endif.

    if IF_FOVRR is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PCPCU_CHANGED ).
    endif.

  endmethod.
  method SET_SCORE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if IT_SCORE is supplied.
      call transformation ID
           source T_SCORE = IT_SCORE
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).

    move IS_SHTNL-SHTNL     to LS_PARAM-ATFLV.
    move IS_SHTNL-SHTNL_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).

    move IS_SHTNW-SHTNW     to LS_PARAM-ATFLV.
    move IS_SHTNW-SHTNW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method SET_SPTNL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SPTNL ).

    LS_PARAM-STRNG = IF_SPTNL.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SPTRN_CHANGED ).
    endif.

  endmethod.
  method SET_SPTNW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SPTNW ).

    LS_PARAM-STRNG = IF_SPTNW.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SPTRN_CHANGED ).
    endif.

  endmethod.
  method SET_TRBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRBOT ).

    move IS_TRBOT-TRBOT     to LS_PARAM-ATFLV.
    move IS_TRBOT-TRBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRBOT_CHANGED ).
    endif.

  endmethod.
  method SET_TRLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLEF ).

    move IS_TRLEF-TRLEF     to LS_PARAM-ATFLV.
    move IS_TRLEF-TRLEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRLEF_CHANGED ).
    endif.

  endmethod.
  method SET_TRLET.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRLET ).

    move IS_TRLET-TRLET     to LS_PARAM-ATFLV.
    move IS_TRLET-TRLET_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRLET_CHANGED ).
    endif.

  endmethod.
  method SET_TRRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRRIG ).

    move IS_TRRIG-TRRIG     to LS_PARAM-ATFLV.
    move IS_TRRIG-TRRIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRRIG_CHANGED ).
    endif.

  endmethod.
  method SET_TRTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRTOP ).

    move IS_TRTOP-TRTOP     to LS_PARAM-ATFLV.
    move IS_TRTOP-TRTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRTOP_CHANGED ).
    endif.

  endmethod.
  method SET_TRWIT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRWIT ).

    move IS_TRWIT-TRWIT     to LS_PARAM-ATFLV.
    move IS_TRWIT-TRWIT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRWIT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

*** Super
    RR_BL_CRFPROP = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Set Handling Dimensions to Forward Properties
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

*** Consider Outs in Forward Properties
    RR_BL_CRFPROP->APPLY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


*** Call SUPER
    RR_BL_CRBPROP = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Update Scores/Tapes
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM
                                                         ET_TAPE_COM  = LT_TAPE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM, LT_TAPE_COM.
    endtry.
    RR_BL_CRBPROP->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    RR_BL_CRBPROP->SET_TAPE_COM( IT_TAPE_COM = LT_TAPE_COM ).

*** Set Sheet FEFCO for further backwarding, but don't reset Product Information
    RR_BL_CRBPROP->SET_FEFCO_SHEET( IF_RESET = ABAP_FALSE ).

    data(LF_NOOUT) = ME->GET_NOUTT( ).

*** Apply Number of Outs to Cost Split and Cut Out Area
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = LF_NOOUT ).
    RR_BL_CRBPROP->SET_COUAR( IS_COUAR = value #( COUAR     = RR_BL_CRBPROP->S_COUAR-COUAR * LF_NOOUT
                                                  COUAR_UOM = RR_BL_CRBPROP->S_COUAR-COUAR_UOM ) ).

*** Apply Number of Outs to Folding Informamtion
    RR_BL_CRBPROP->SET_FOLDIM( IS_FOLDIM = value #( S_FOLLE = value #( FOLLE     = RR_BL_CRBPROP->S_FOLDIM-FOLLE * ME->GET_NOUTL( )
                                                                       FOLLE_UOM = RR_BL_CRBPROP->S_FOLDIM-FOLLE_UOM )
                                                    S_FOLWI = value #( FOLWI     = RR_BL_CRBPROP->S_FOLDIM-FOLWI * ME->GET_NOUTW( )
                                                                       FOLWI_UOM = RR_BL_CRBPROP->S_FOLDIM-FOLWI_UOM )
                                                    S_FOLHE = RR_BL_CRBPROP->S_FOLDIM-S_FOLHE ) ).

*** Apply Number of Outs to Joint Dimensions
    RR_BL_CRBPROP->SET_JOIDIM( IS_JOIDIM = value #( JOIWI     = RR_BL_CRBPROP->S_JOIDIM-JOIWI * switch #( RR_BL_CRBPROP->F_FLUTO when ZCL_VCXI_PCSS_CUST_FEFCO=>C_FLUTO_VERTICAL   then ME->GET_NOUTL( )
                                                                                                                                 when ZCL_VCXI_PCSS_CUST_FEFCO=>C_FLUTO_HORIZONTAL then ME->GET_NOUTW( ) )
                                                    JOIWI_UOM = RR_BL_CRBPROP->S_JOIDIM-JOIWI_UOM
                                                    JOILE     = RR_BL_CRBPROP->S_JOIDIM-JOILE * switch #( RR_BL_CRBPROP->F_FLUTO when ZCL_VCXI_PCSS_CUST_FEFCO=>C_FLUTO_VERTICAL   then ME->GET_NOUTW( )
                                                                                                                                 when ZCL_VCXI_PCSS_CUST_FEFCO=>C_FLUTO_HORIZONTAL then ME->GET_NOUTL( ) )
                                                    JOILE_UOM = RR_BL_CRBPROP->S_JOIDIM-JOILE_UOM
                                                    JOIPO     = RR_BL_CRBPROP->S_JOIDIM-JOIPO ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS.

*** Call SUPER
    RF_NOUPS = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number Outs (total)
    RF_NOUPS = RF_NOUPS * ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

***--------------------------------------------------------------------------------------
*** Get applied Scores table based on Score Communication (Outbound)
    ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_SCORE
                                                     IT_TAPE_COM       = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_TAPE_COM
                                                     IF_DIMEN_SCORE    = SPACE "No Scores allowed
                                                     IF_NOUPL          = ME->GET_NOUTL( )
                                                     IF_SPTNL          = ME->GET_SPTNL( )
                                                     IF_NOUPW          = ME->GET_NOUTW( )
                                                     IF_SPTNW          = ME->GET_SPTNW( )
                                                     IF_DIMEN_TRIM     = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                     IS_TRLEF          = ME->GET_TRLEF( )
                                                     IS_TRRIG          = ME->GET_TRRIG( )
                                                     IS_TRTOP          = ME->GET_TRTOP( )
                                                     IS_TRBOT          = ME->GET_TRBOT( )
                                                     IT_ISCOR          = ME->GET_ISCAP( )
                                           importing ET_SCORE_AP       = ET_SCORE_AP
                                                     ET_TAPE_AP        = ET_TAPE_AP
                                                     ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

***--------------------------------------------------------------------------------------
*** Score Status is always Automatic
    RF_SSCOR = 'A'.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.

    data: LT_ISCOR     type ZVCXI_PXS_TT_ISCOR,
          LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


***--------------------------------------------------------------------------------------
*** Set IDs to Parameter
    if IT_SCORE_AP is supplied.
      LT_ISCOR = value #( for S_SCORE_AP in IT_SCORE_AP where ( FAPPL eq ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).
      ME->SET_ISCAP( IT_ISCOR = LT_ISCOR ).
    endif.

*** Apply all Scores
    if IF_SCORE_FAALL is supplied.
      ME->SET_ISCAP( IF_FAALL = IF_SCORE_FAALL ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->GET_NOUTW( )  "Get Number of Outs on Width
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->GET_NOUTL( )  "Get Number of Outs on Length
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://scissors'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
