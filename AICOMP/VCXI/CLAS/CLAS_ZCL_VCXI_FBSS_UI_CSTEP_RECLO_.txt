
class ZCL_VCXI_FBSS_UI_CSTEP_RECLO definition
  public
  inheriting from ZCL_VCXI_FBSS_UI_CSTEP
  create public .

public section.

  data S_CSTEP_RECLO_VIS type ZVCXI_FBSS_S_CSTEP_RECLO_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_VIS
    redefinition .
protected section.

  data R_PR_CSTEP_RECLO type ref to ZCL_VCXI_FBSS_PR_CSTEP_RECLO .
  data R_GRID_MS_RECLO type ref to ZCL_VCXI_FBSS_GRID_MS_RECLO .

  methods SET_DDVAL_LCOUT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_CSTEP_RECLO definition
class ZCL_VCXI_FBSS_UI_CSTEP_RECLO implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_CSTEP_RECLO_BIND'
      exporting
        IR_UI_CSTEP_RECLO = ME
      importing
        ES_DYNP           = ME->S_DYNP.

*** Create Grid for GRID_MS_RECLO
    create object ME->R_GRID_MS_RECLO
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_MS_RECLO'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP_RECLO.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Deactivate MS_RECLO
    if ME->R_GRID_MS_RECLO is bound.
      ME->R_GRID_MS_RECLO->DO_FREE( ).
      clear ME->R_GRID_MS_RECLO.
    endif.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Super
    SUPER->DO_PBO( ).

***--------------------------------------------------------------------------------------
*** Initialize MS_RECLO Grid
    if ME->R_GRID_MS_RECLO is bound.
      if ME->R_GRID_MS_RECLO->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_MS_RECLO->F_REFRESH_REQ.
      endif.
      ME->R_GRID_MS_RECLO->REFRESH_GRID( ).
    endif.

***--------------------------------------------------------------------------------------
*** Define DropDown Values for Cutout Location
    ME->SET_DDVAL_LCOUT( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_RECLO_VIS type ZVCXI_FBSS_S_CSTEP_RECLO_VIS.


*** Call SUPER
    SUPER->DO_UPDATE_VIS( IS_VIS = IS_VIS ).

    check ME->R_PR_CSTEP_RECLO is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_CSTEP_RECLO_VIS.

***--------------------------------------------------------------------------------------
*** Reclosing Type
    if ME->S_CSTEP_RECLO_VIS-TRECL ne LS_CSTEP_RECLO_VIS-TRECL.
      ME->R_PR_CSTEP_RECLO->SET_TRECL( IF_TRECL = LS_CSTEP_RECLO_VIS-TRECL
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Reclosing Location
    if ME->S_CSTEP_RECLO_VIS-LRECL ne LS_CSTEP_RECLO_VIS-LRECL.
      ME->R_PR_CSTEP_RECLO->SET_LRECL( IF_LRECL = LS_CSTEP_RECLO_VIS-LRECL
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Cutout Location
    if ME->S_CSTEP_RECLO_VIS-LCOUT ne LS_CSTEP_RECLO_VIS-LCOUT.
      ME->R_PR_CSTEP_RECLO->SET_LCOUT( IF_LCOUT = LS_CSTEP_RECLO_VIS-LCOUT
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Cutout Area
    if ME->S_CSTEP_RECLO_VIS-S_COARE ne LS_CSTEP_RECLO_VIS-S_COARE.
      ME->R_PR_CSTEP_RECLO->SET_COARE( IS_COARE = LS_CSTEP_RECLO_VIS-S_COARE
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP_RECLO.

  endmethod.
  method INIT_VIS.

    SUPER->INIT_VIS( ).

    move ME->S_CSTEP_VIS to ME->S_CSTEP_RECLO_VIS-S_CSTEP_VIS.

    check ME->R_PR_CSTEP_RECLO is bound.

*** Reclosing Type
    ME->R_PR_CSTEP_RECLO->GET_TRECL( importing EF_TRECL = ME->S_CSTEP_RECLO_VIS-TRECL
                                               EF_DESCR = ME->S_CSTEP_RECLO_VIS-TRECL_DESCR ).

*** Reclosing Location
    ME->R_PR_CSTEP_RECLO->GET_LRECL( importing EF_LRECL = ME->S_CSTEP_RECLO_VIS-LRECL ).

*** Cutout Area
    ME->R_PR_CSTEP_RECLO->GET_COARE( importing ES_COARE = ME->S_CSTEP_RECLO_VIS-S_COARE ).

*** Cutout Location
    ME->R_PR_CSTEP_RECLO->GET_LCOUT( importing EF_LCOUT = ME->S_CSTEP_RECLO_VIS-LCOUT ).

  endmethod.
  method SET_DDVAL_LCOUT.

    data:           LF_ID         type        VRM_ID.
    data:           LS_BPINFO     type        ZVCXI_FBSS_S_BPINFO.
    data:           LT_VALUE      type        VRM_VALUES.
    data:           LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.
    field-symbols:  <S_VALUE>     type        VRM_VALUE.

    ME->R_PR_CSTEP_RECLO->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    loop at LR_BL_BGFPROP->T_BPINFO into LS_BPINFO.
      append initial line to LT_VALUE assigning <S_VALUE>.

      move LS_BPINFO-IBPAR                                          to <S_VALUE>-KEY.
      move ZCL_VCXI_FBSSC_BAGTY=>GET_IBPAR_DESCR( LS_BPINFO-IBPAR ) to <S_VALUE>-TEXT.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
    move 'ZVCXI_FBSS_S_CSTEP_RECLO_VIS-LCOUT' to LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUE.

  endmethod.
