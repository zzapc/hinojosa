
class ZCL_VCXI_XCSUC_GRID_DFLT definition
  public
  inheriting from ZCL_VCXI_XCSUC_GRID
  create public .

public section.

  data T_DFLT type ZVCXI_XCSUC_TT_DFLT read-only .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT optional
      !IR_S_CONTAINER type ref to CL_GUI_CONTAINER optional
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_REQ_TR type UI_FUNC value 'REQ_TR'. "#EC NOTEXT

  methods CHECK_DFLT_ENTRY
    importing
      !IF_VKORG type VKORG
      !IF_VTWEG type VTWEG
      !IF_SPART type SPART
      !IF_WERKS type WERKS_D
      !IF_KUNNR type KUNNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REQ_TR_DFLT
    importing
      !IF_GDFLT type ZVCXI_XCSU_GDFLT
      !IF_KORRNR type TRKORR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_COPY_DFLT
    importing
      !IS_DFLT type ZVCXI_XCSUC_S_DFLT_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE_DFLT
    importing
      !IS_DFLT type ZVCXI_XCSUC_S_DFLT_VIS
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods HANDLE_OPEN_DETAIL
    importing
      !IF_CHANGE type ABAP_BOOL default ABAP_FALSE
      !IF_GDFLT type ZVCXI_XCSU_GDFLT
    preferred parameter IF_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADD_DFLT
    raising
      /VCXI/CX_CKX .
  methods GET_DFLT
    exporting
      !ES_DFLT type ZVCXI_XCSUC_S_DFLT_VIS
      !EF_EXIT type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DFLT_COPY_TO
    importing
      !IS_DFLT type ZVCXI_XCSUC_S_DFLT_VIS
    exporting
      !ES_DFLT type ZVCXI_XCSUC_S_DFLT_VIS
      !EF_EXIT type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SELECTION
    importing
      !IF_DETAIL type ABAP_BOOL optional
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods REFRESH_DFLT
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods GET_TOOLBAR_EXCLUDING
    redefinition .
  methods SET_EVENT
    redefinition .
private section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_CHANGE type UI_FUNC value 'CHANGE'. "#EC NOTEXT
  constants C_FUNC_COPY type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  constants C_FUNC_DISP type UI_FUNC value 'DISPLAY'. "#EC NOTEXT
endclass. "ZCL_VCXI_XCSUC_GRID_DFLT definition
class ZCL_VCXI_XCSUC_GRID_DFLT implementation.
method CHECK_DFLT_ENTRY.

*** Check there is no Entry like the new one
  read table ME->T_DFLT with key VKORG = IF_VKORG
                                 VTWEG = IF_VTWEG
                                 SPART = IF_SPART
                                 WERKS = IF_WERKS
                                 KUNNR = IF_KUNNR
                        transporting no fields.
  check SY-SUBRC eq 0.

*** Raise Message - Shipping Unitization Default already exist.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSUC'
                                        IF_MSGNO = '210' ).

endmethod.
method CHECK_SELECTION.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Selection is only valid if Cells are selected
  if   IF_DETAIL eq ABAP_FALSE  and
     ( lines( LT_CELL ) gt 0 or
       lines( LT_ROW )  gt 0    ).
    move ABAP_TRUE to RF_OKAY.
*** Selection is only valid if one Cell is selected
  elseif IF_DETAIL eq ABAP_TRUE and
       ( lines( LT_CELL ) eq 1 or
         lines( LT_ROW )  eq 1 ).
    move ABAP_TRUE to RF_OKAY.
*** Selection is not valid
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCSUC_S_DFLT_GRID'
                      IF_CONTAINER_NAME = '0100CC_DFLT_OV_GRID'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).
endmethod.
method GET_DFLT.

  data:          LF_RETURN  type                   ABAP_BOOL.
  data:          LT_SVAL    type standard table of SVAL.
  data:          LR_CX_CKX  type ref to            /VCXI/CX_CKX.
  field-symbols: <S_FIELD>  type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'VKORG'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'VTWEG'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'SPART'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'WERKS'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'KUNNR'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please Enter new Shipping Default'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear: LT_SVAL, ES_DFLT.
      move ABAP_TRUE to EF_EXIT.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'VKORG'.
          move <S_FIELD>-VALUE to ES_DFLT-VKORG.
        when 'VTWEG'.
          move <S_FIELD>-VALUE to ES_DFLT-VTWEG.
        when 'SPART'.
          move <S_FIELD>-VALUE to ES_DFLT-SPART.
        when 'WERKS'.
          move <S_FIELD>-VALUE to ES_DFLT-WERKS.
        when 'KUNNR'.
          move <S_FIELD>-VALUE to ES_DFLT-KUNNR.
      endcase.
    endloop.

*** Check also there is no Entry like the new one
    try.
        ME->CHECK_DFLT_ENTRY( IF_VKORG = ES_DFLT-VKORG
                              IF_VTWEG = ES_DFLT-VTWEG
                              IF_SPART = ES_DFLT-SPART
                              IF_WERKS = ES_DFLT-WERKS
                              IF_KUNNR = ES_DFLT-KUNNR ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
        continue.
    endtry.
    exit.

  enddo.

endmethod.
method GET_DFLT_COPY_TO.

  data:          LF_RETURN  type                   ABAP_BOOL.
  data:          LT_SVAL    type standard table of SVAL.
  data:          LR_CX_CKX  type ref to            /VCXI/CX_CKX.
  field-symbols: <S_FIELD>  type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'VKORG'.
  <S_FIELD>-VALUE     = IS_DFLT-VKORG.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'VTWEG'.
  <S_FIELD>-VALUE     = IS_DFLT-VTWEG.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'SPART'.
  <S_FIELD>-VALUE     = IS_DFLT-SPART.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'WERKS'.
  <S_FIELD>-VALUE     = IS_DFLT-WERKS.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCSUC_S_DFLT'.
  <S_FIELD>-FIELDNAME = 'KUNNR'.
  <S_FIELD>-VALUE     = IS_DFLT-KUNNR.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please Enter new Shipping Default'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear: LT_SVAL, ES_DFLT.
      move ABAP_TRUE to EF_EXIT.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'VKORG'.
          move <S_FIELD>-VALUE to ES_DFLT-VKORG.
        when 'VTWEG'.
          move <S_FIELD>-VALUE to ES_DFLT-VTWEG.
        when 'SPART'.
          move <S_FIELD>-VALUE to ES_DFLT-SPART.
        when 'WERKS'.
          move <S_FIELD>-VALUE to ES_DFLT-WERKS.
        when 'KUNNR'.
          move <S_FIELD>-VALUE to ES_DFLT-KUNNR.
      endcase.
    endloop.

*** Check also there is no Entry like the new one
    try.
        ME->CHECK_DFLT_ENTRY( IF_VKORG = ES_DFLT-VKORG
                              IF_VTWEG = ES_DFLT-VTWEG
                              IF_SPART = ES_DFLT-SPART
                              IF_WERKS = ES_DFLT-WERKS
                              IF_KUNNR = ES_DFLT-KUNNR ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
        continue.
    endtry.
    exit.

  enddo.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Set GUID's and Log Data to only technical Fields
      when 'GDFLT' or 'CREBY' or 'CREAT' or 'CHABY' or 'CHAAT'.
        move ABAP_TRUE to <S_FCAT>-TECH.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data: LS_DFLT_GRID type ZVCXI_XCSUC_S_DFLT_GRID,
        LS_DFLT      type ZVCXI_XCSUC_S_DFLT,
        LS_LOG       type /VCXI/CKX_S_LOG,
        LS_LOG_EXT   type /VCXI/CKX_S_LOG_EXT.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

  ME->REFRESH_DFLT( ).

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Shipping Default Entries
  loop at ME->T_DFLT into LS_DFLT.

    clear: LS_DFLT_GRID.
    move-corresponding LS_DFLT to LS_DFLT_GRID.

*** Get Customer Name
    if LS_DFLT_GRID-KUNNR is not initial.
      select single NAME1
             into @LS_DFLT_GRID-NAME1
             from KNA1
            where KUNNR eq @LS_DFLT_GRID-KUNNR.
      if SY-SUBRC ne 0.
        clear LS_DFLT_GRID-NAME1.
      endif.
    endif.

*** Get Log Data
    move-corresponding LS_DFLT   to LS_LOG.
    LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
    move-corresponding LS_LOG_EXT to LS_DFLT_GRID.


*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_DFLT_GRID to <S_DATA>.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method GET_TOOLBAR_EXCLUDING.

*** Exlcude All Functions
*  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to RT_TOOLBAR_EXCLUDING.

  append CL_GUI_ALV_GRID=>MC_FC_AUF                    to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_AVERAGE                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_BACK_CLASSIC           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_ABC               to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_CHAIN             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_CRBATCH           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_CRWEB             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_LINEITEMS         to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_MASTER_DATA       to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_MORE              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_REPORT            to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_XINT              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_XML_EXPORT        to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CALL_XXL               to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CHECK                  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_COL_INVISIBLE          to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_COL_OPTIMIZE           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_COUNT                  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_CURRENT_VARIANT        to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_DATA_SAVE              to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_DELETE_FILTER          to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_DESELECT_ALL           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_DETAIL                 to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_EXPCRDATA              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_EXPCRDESIG             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_EXPCRTEMPL             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_EXPMDB                 to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_EXTEND                 to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_F4                     to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_FILTER                 to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_FIND                   to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_FIND_MORE              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_FIX_COLUMNS            to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_GRAPH                  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_HELP                   to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_HTML                   to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_INFO                   to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOAD_VARIANT           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW         to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_COPY               to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_CUT                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW         to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW         to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW      to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO               to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MAINTAIN_VARIANT       to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MAXIMUM                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_MINIMUM                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PC_FILE                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PRINT                  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PRINT_BACK             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_PRINT_PREV             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_REFRESH                to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_REPREP                 to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_SAVE_VARIANT           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_SELECT_ALL             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_SEND                   to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_SEPARATOR              to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_SORT                   to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_SORT_ASC               to RT_TOOLBAR_EXCLUDING.
*  append CL_GUI_ALV_GRID=>MC_FC_SORT_DSC               to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_SUBTOT                 to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_SUM                    to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_TO_OFFICE              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_TO_REP_TREE            to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_UNFIX_COLUMNS          to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_URL_COPY_TO_CLIPBOARD  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VARIANT_ADMIN          to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VIEWS                  to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VIEW_CRYSTAL           to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VIEW_EXCEL             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VIEW_GRID              to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_VIEW_LOTUS             to RT_TOOLBAR_EXCLUDING.
  append CL_GUI_ALV_GRID=>MC_FC_WORD_PROCESSOR         to RT_TOOLBAR_EXCLUDING.

endmethod.
method HANDLE_ADD_DFLT.

  data:          LF_EXIT             type               ABAP_BOOL.
  data:          LS_DFLT             type               ZVCXI_XCSUC_S_DFLT_VIS.

*** Get Default Info
  ME->GET_DFLT( importing ES_DFLT = LS_DFLT
                          EF_EXIT = LF_EXIT ).

  check LF_EXIT ne ABAP_TRUE.

*** Start UI
  ZCL_VCXI_XCSUC_UI_DFLT=>START_UI( IS_DFLT   = LS_DFLT
                                    IF_CHANGE = ABAP_TRUE ).

endmethod.
method HANDLE_COPY_DFLT.

  data: LF_EXIT      type        ABAP_BOOL,
        LF_GUID      type        /VCXI/CKX_GUID.
  data: LS_DFLT      type        ZVCXI_XCSUC_S_DFLT_VIS,
        LS_DFLT_DATA type        ZVCXI_XCSUC_S_DFLT.
  data: LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
        LR_DFLT      type ref to ZCL_VCXI_XCSUC_DFLT,
        LR_DFLT_NEW  type ref to ZCL_VCXI_XCSUC_DFLT.

  check IS_DFLT-GDFLT is not initial.

*** Ask for new one
  ME->GET_DFLT_COPY_TO( exporting IS_DFLT = IS_DFLT
                        importing ES_DFLT = LS_DFLT
                                  EF_EXIT = LF_EXIT ).

  check LF_EXIT ne ABAP_TRUE.

  clear: LF_GUID.
  move IS_DFLT-GDFLT to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_DFLT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_DFLT.
  endtry.

  check LR_DFLT is bound.

*** Do Locking
  LR_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Do Copy
  LR_DFLT_NEW = LR_DFLT->COPY( IF_GDFLT = LS_DFLT-GDFLT ).

*** Set new Values of Customer data
  if LR_DFLT_NEW is bound.
    move-corresponding LS_DFLT to LS_DFLT_DATA.
    LR_DFLT_NEW->SET_DFLT( IS_DFLT = LS_DFLT_DATA ).
*** Save Data
    LR_DFLT_NEW->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_SAVE ).
  endif.

*** Do Free old one and new one
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_FREE ).
  if LR_DFLT_NEW is bound.
    LR_DFLT_NEW->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_FREE ).
  endif.
endmethod.
method HANDLE_DELETE_DFLT.

  data: LF_GUID     type        /VCXI/CKX_GUID,
        LF_QUESTION type        CHAR128,
        LF_ANSWER   type        C,
        LF_REQ_TR   type        ABAP_BOOL.
  data: LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_DFLT     type ref to ZCL_VCXI_XCSUC_DFLT.

  check IS_DFLT-GDFLT is not initial.

  concatenate IS_DFLT-VKORG IS_DFLT-VTWEG IS_DFLT-SPART IS_DFLT-WERKS IS_DFLT-KUNNR into LF_QUESTION
  separated by '/'.
  concatenate 'Do you really wanna delete Shipping Default:'(Q02) LF_QUESTION into LF_QUESTION
  separated by SPACE.

  call function 'POPUP_TO_CONFIRM'
    exporting
      TITLEBAR       = 'Delete selected Shipping Default'(Q01)
      TEXT_QUESTION  = LF_QUESTION
      TEXT_BUTTON_1  = 'Yes'(Q03)
      TEXT_BUTTON_2  = 'Yes & Transport'(Q04)
      DEFAULT_BUTTON = '1'
    importing
      ANSWER         = LF_ANSWER
    exceptions
      TEXT_NOT_FOUND = 1
      others         = 2.
  if SY-SUBRC ne 0 or LF_ANSWER eq 'A'.
    exit.
  elseif LF_ANSWER eq '2'.
    move ABAP_TRUE to LF_REQ_TR.
  endif.


  clear: LF_GUID.
  move IS_DFLT-GDFLT to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_DFLT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_DFLT.
  endtry.

  check LR_DFLT is bound.
*** Do Locking
  LR_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Request Transport if needed
  if LF_REQ_TR eq ABAP_TRUE.
    LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_REQ_TR ).
  endif.

*** Do Deletion
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_DELETE ).

*** Do Save
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_SAVE ).

*** Do Free
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_FREE ).

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_CELL             type               LVC_S_CELL,
                 LS_ROW              type               LVC_S_ROW,
                 LS_DFLT             type               ZVCXI_XCSUC_S_DFLT_VIS.
  data:          LT_CELL             type               LVC_T_CELL,
                 LT_ROW              type               LVC_T_ROW,
                 LT_DFLT             type table of      ZVCXI_XCSUC_S_DFLT_VIS.
  data:          LR_CX_CKX           type ref to        /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard      table,
                 <S_DFLT>            type               ZVCXI_XCSUC_S_DFLT_VIS,
                 <S_DATA>            type               any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Packaging Material Assignment
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT assigning <S_DFLT>.
        move-corresponding <S_DATA> to <S_DFLT>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT assigning <S_DFLT>.
        move-corresponding <S_DATA> to <S_DFLT>.
      endloop.

      check lines( LT_DFLT ) eq 1.

      read table LT_DFLT into LS_DFLT index 1.
      ME->HANDLE_OPEN_DETAIL( IF_GDFLT  = LS_DFLT-GDFLT ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_OPEN_DETAIL.

  data: LS_DFLT     type        ZVCXI_XCSUC_S_DFLT,
        LS_DFLT_VIS type        ZVCXI_XCSUC_S_DFLT_VIS.
  data: LF_GUID     type        /VCXI/CKX_GUID.
  data: LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_DFLT     type ref to ZCL_VCXI_XCSUC_DFLT.

  check IF_GDFLT is not initial.
  clear: LF_GUID.
  move IF_GDFLT to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_DFLT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_DFLT.
  endtry.

  check LR_DFLT is bound.
*** Do Locking
  if IF_CHANGE eq ABAP_TRUE.
    LR_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

  read table T_DFLT into LS_DFLT with key GDFLT = IF_GDFLT.
  move-corresponding LS_DFLT to LS_DFLT_VIS.

*** Start UI
  ZCL_VCXI_XCSUC_UI_DFLT=>START_UI( IS_DFLT = LS_DFLT_VIS ).

endmethod.
method HANDLE_REQ_TR_DFLT.

  data: LF_GUID   type        /VCXI/CKX_GUID.
  data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
        LR_DFLT   type ref to ZCL_VCXI_XCSUC_DFLT.

  check IF_GDFLT is not initial.

  clear: LF_GUID.
  move IF_GDFLT to LF_GUID.
  LR_OBJECT = ZCL_VCXI_XCSUC_DFLT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  try.
      move LR_OBJECT ?to LR_DFLT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_DFLT.
  endtry.

  check LR_DFLT is bound.

*** Do Locking
  LR_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

*** Do Request Transport
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_REQ_TR ).
  LR_DFLT->ASSIGN_TRANSPORT( IF_KORRNR = IF_KORRNR ).

*** Do Save
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_SAVE ).

*** Do Free
  LR_DFLT->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSUC_DFLT=>C_FCODE_DFLT_FREE ).


endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
***   Authority Check
      BREAK CHECK_AUTHORITY_KFISCHER.


***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                     to LS_TOOLBAR-FUNCTION.
      move 'Add'(001)                     to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW                to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                     to LS_TOOLBAR-FUNCTION.
      move 'Delete'(002)                  to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW                to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar elements Copy
      clear LS_TOOLBAR.
      move C_FUNC_COPY                    to LS_TOOLBAR-FUNCTION.
      move 'Copy'(003)                    to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SYSTEM_COPY               to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Display
      clear LS_TOOLBAR.
      move C_FUNC_DISP                    to LS_TOOLBAR-FUNCTION.
      move 'Display'(004)                 to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DISPLAY                   to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Change
      clear LS_TOOLBAR.
      move C_FUNC_CHANGE                  to LS_TOOLBAR-FUNCTION.
      move 'Change'(005)                  to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_CHANGE                    to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR              to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

***   Insert Toolbar element Transport
      clear LS_TOOLBAR.
      move C_FUNC_REQ_TR                  to LS_TOOLBAR-FUNCTION.
      move 'Req.Transport'(006)           to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON                 to LS_TOOLBAR-BUTN_TYPE.
      move ICON_IMPORT_TRANSPORT_REQUEST  to LS_TOOLBAR-ICON.
      move LF_DISABLED                    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                   to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LF_KORRNR           type                   TRKORR.
  data:          LS_CELL             type                   LVC_S_CELL,
                 LS_ROW              type                   LVC_S_ROW,
                 LS_DFLT             type                   ZVCXI_XCSUC_S_DFLT_VIS.
  data:          LT_CELL             type                   LVC_T_CELL,
                 LT_ROW              type                   LVC_T_ROW,
                 LT_DFLT             type standard table of ZVCXI_XCSUC_S_DFLT_VIS.
  data:          LR_CX_CKX           type ref to            /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard          table,
                 <S_DFLT>            type                   ZVCXI_XCSUC_S_DFLT_VIS,
                 <S_DATA>            type                   any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Packaging Material Assignment
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT assigning <S_DFLT>.
        move-corresponding <S_DATA> to <S_DFLT>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT assigning <S_DFLT>.
        move-corresponding <S_DATA> to <S_DFLT>.
      endloop.

*** ---------------------------------------------------------------------------
***   handle UserCommand
      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Shipping Default - and Start Edit
          ME->HANDLE_ADD_DFLT( ).

        when C_FUNC_DEL.
***       Delete Shipping Default
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '003'.
          endif.

***       Delete all Shipping Defaults
          loop at LT_DFLT into LS_DFLT.
            ME->HANDLE_DELETE_DFLT( IS_DFLT = LS_DFLT ).
          endloop.

        when C_FUNC_COPY.
***     Copy Shipping Default
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Copy.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '005'.
          endif.

***       Copy all Shipping Defaults
          loop at LT_DFLT into LS_DFLT.
            ME->HANDLE_COPY_DFLT( IS_DFLT = LS_DFLT ).
          endloop.

        when C_FUNC_DISP.
***     Open Shipping Default in Display Mode
          if ME->CHECK_SELECTION( IF_DETAIL = ABAP_TRUE ) eq ABAP_FALSE.
***         Please Select only one Shipping Default.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '202'.
          endif.
          read table LT_DFLT into LS_DFLT index 1.
          ME->HANDLE_OPEN_DETAIL( IF_GDFLT = LS_DFLT-GDFLT ).

        when C_FUNC_CHANGE.
***     Open Shipping Default in Display Mode
          if ME->CHECK_SELECTION( IF_DETAIL = ABAP_TRUE ) eq ABAP_FALSE.
***         Please Select only one Shipping Default.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '202'.
          endif.
          read table LT_DFLT into LS_DFLT index 1.
          ME->HANDLE_OPEN_DETAIL( IF_GDFLT  = LS_DFLT-GDFLT
                                  IF_CHANGE = ABAP_TRUE ).

        when C_FUNC_REQ_TR.
***     Add all Shipping Defaults to Transport
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Add to Transport.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '111'.
          endif.

***       Popup to pick Transport
          call function 'G_TRANS_NUMBER'
            exporting
              CATEGORY  = 'CUST'
            importing
              KORRNR    = LF_KORRNR
            exceptions
              NO_NUMBER = 1
              others    = 2.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

          loop at LT_DFLT into LS_DFLT.
            ME->HANDLE_REQ_TR_DFLT( IF_GDFLT  = LS_DFLT-GDFLT
                                    IF_KORRNR = LF_KORRNR ).
          endloop.

        when others.
          exit.

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method REFRESH_DFLT.

  free: ME->T_DFLT.

  select *
         into corresponding fields of table ME->T_DFLT
         from ZVCXI_XCS_TD400
         order by VKORG VTWEG SPART WERKS KUNNR.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for F4Help, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
