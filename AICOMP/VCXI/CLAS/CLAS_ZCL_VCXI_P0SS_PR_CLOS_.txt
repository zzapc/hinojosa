
class ZCL_VCXI_P0SS_PR_CLOS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_MAIN_JOINT_CHANGED type /VCXI/VKSC_IEVNT value 'MAIN_JOINT_CHANGED'. "#EC NOTEXT
  constants C_IPRVT_P0_CLOS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_CLOS'. "#EC NOTEXT
  constants C_IPRVT_P0_CLOS_AS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_CLOS_AS'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods MULTI_JOIPO_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MAIN_JOINT
    exporting
      !EF_JOITY type ZVCXI_P0S_JOITY
      !EF_JOIPO type ZVCXI_P0S_JOIPO
      !ES_JOIWI type ZVCXI_P0S_S_JOIWI
      !ES_JOILE type ZVCXI_P0S_S_JOILE
      !EF_NOSTI type ZVCXI_P0SS_NOSTI
      !ES_STITP type ZVCXI_P0SS_S_STITP
      !EF_EXIST type ABAP_BOOL
      !EF_JOITY_DESCR type /VCXI/CKX_DESCR
      !EF_JOIPO_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS
    returning
      value(RT_PPASS) type ZVCXI_P0SS_TT_PPASS
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST_PRSTY
    exporting
      !EF_TPRST type ZVCXI_P0SS_TPRST
      !EF_PRSTY type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods SET_MAIN_JOINT
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY optional
      !IF_JOIPO type ZVCXI_P0S_JOIPO optional
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI optional
      !IS_JOILE type ZVCXI_P0S_S_JOILE optional
      !IF_NOSTI type ZVCXI_P0SS_NOSTI optional
      !IS_STITP type ZVCXI_P0SS_S_STITP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    preferred parameter IF_JOITY
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_JOINT_CHANGED type /VCXI/VKSC_IEVNT value 'JOINT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  data R_PR_SHEET type ref to ZCL_VCXI_P0SS_PR_SHEET .
  data R_PR_SPEC type ref to ZCL_VCXI_P0SS_PR_SPEC .
  constants C_ATTID_MULTI_JOIPO type /VCXI/VKS_ATTID value 'MULTI_JOIPO'. "#EC NOTEXT
  data F_MULTI_JOIPO type ABAP_BOOL .

  methods CHECK_STITCH_REQ
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTB
    returning
      value(RS_JEXTB) type ZVCXI_P0SS_S_JEXTB
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTT
    returning
      value(RS_JEXTT) type ZVCXI_P0SS_S_JEXTT
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_JOINT_CHANGED
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_PR_CLOS definition
class ZCL_VCXI_P0SS_PR_CLOS implementation.
method CHECK_STITCH_REQ.

  ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_MCONSU( exporting IF_JOITY = IF_JOITY
                                                        IF_ISVCE = 'MC_JSTITCH'
                                              importing EF_EXIST = RF_REQUIRED ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_JEXTB.

  check ME->R_PR_SHEET is bound.
  RS_JEXTB = ME->R_PR_SHEET->GET_JEXTB( ).

endmethod.
method GET_JEXTT.

  check ME->R_PR_SHEET is bound.
  RS_JEXTT = ME->R_PR_SHEET->GET_JEXTT( ).

endmethod.
method GET_MAIN_JOINT.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_JOINT        type ref to ZCL_VCXI_P0SS_PR_JOINT.

***------------------------------------------------------------------
*** Get Main Joint Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
        if LR_PR_JOINT is bound and
           LR_PR_JOINT->GET_FMJOI( ) eq ABAP_TRUE.
          exit.
        else.
          clear: LR_PR_JOINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.
  endloop.

  if LR_PR_JOINT is not bound.
    exit.
  else.
    move ABAP_TRUE to EF_EXIST.
  endif.
***------------------------------------------------------------------------------------------------
*** Get Requested Data
*** Joint Type
  if EF_JOITY is requested.
    EF_JOITY = LR_PR_JOINT->GET_JOITY( ).
  endif.

  if EF_JOITY_DESCR is requested.
    EF_JOITY_DESCR = LR_PR_JOINT->GET_JOITY_DESCR( ).
  endif.

*** Joint Position
  if EF_JOIPO is requested.
    EF_JOIPO = LR_PR_JOINT->GET_JOIPO( ).
  endif.

  if EF_JOIPO_DESCR is requested.
    EF_JOIPO_DESCR = LR_PR_JOINT->GET_JOIPO_DESCR( ).
  endif.

*** Joint Width
  if ES_JOIWI is requested.
    LR_PR_JOINT->GET_JOIWI( importing ES_JOIWI = ES_JOIWI ).
  endif.

*** Joint Length
  if ES_JOILE is requested.
    LR_PR_JOINT->GET_JOILE( importing ES_JOILE = ES_JOILE ).
  endif.

*** Stitch Length
  if EF_NOSTI is requested.
    LR_PR_JOINT->GET_NOSTI( importing EF_NOSTI = EF_NOSTI ).
  endif.

*** Stitch per
  if ES_STITP is requested.
    LR_PR_JOINT->GET_STITP( importing ES_STITP = ES_STITP ).
  endif.

endmethod.
method GET_PPASS.

  data:  LF_PPASS           type        ZVCXI_P0SS_PPASS.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_JOINT        type ref to ZCL_VCXI_P0SS_PR_JOINT.

***------------------------------------------------------------------
*** Get Main Joint Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
        check LR_PR_JOINT is bound.
        LF_PPASS = LR_PR_JOINT->GET_PPASS( ).
        append LF_PPASS to RT_PPASS.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_JOINT.
    endtry.
  endloop.

endmethod.
method GET_PROHE.

  check ME->R_PR_SPEC is bound.
  RS_PROHE = ME->R_PR_SPEC->GET_PROHE( ).

endmethod.
method GET_TPRST_PRSTY.

  check ME->R_PR_SPEC is bound.
  EF_TPRST = ME->R_PR_SPEC->GET_TPRST( ).
  EF_PRSTY = ME->R_PR_SPEC->GET_PRSTY( ).

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_JOINT_CHANGED.
      ME->HANDLE_JOINT_CHANGED( IT_PRVDR = IT_GATE_PROVIDER ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
         LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

*** Get Provider Definition
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( ).

***------------------------------------------------------------------------------------------------
  read table LT_PRVDR_DEF with key IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Get Sheet Reference
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to ME->R_PR_SHEET.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    if ME->R_PR_SHEET is not bound.
***   Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = ZCL_VCXI_P0SS_PR_SHEET=>C_IPRVT_P0_SHEET
          IF_MSGV2 = ME->R_GATE->F_ID ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
  read table LT_PRVDR_DEF with key IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Get Spec Reference
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    if ME->R_PR_SPEC is not bound.
***   Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
          IF_MSGV2 = ME->R_GATE->F_ID ).
    endif.
  endif.

endmethod.
method HANDLE_JOINT_CHANGED.

  data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_JOINT type ref to ZCL_VCXI_P0SS_PR_JOINT.

  loop at IT_PRVDR into LR_GATE.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_JOINT.
    endtry.

    check LR_PR_JOINT               is bound     and
          LR_PR_JOINT->GET_FMJOI( ) eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZCL_VCXI_P0SS_PR_CLOS=>C_IEVNT_O_MAIN_JOINT_CHANGED ).
    exit.

  endloop.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.
  data:  LT_ATTRI       type /VCXI/VKS_TT_ATTRI.

*** -------------------------------------------------------------------------------------------------
*** Init Multiple Joint Positions
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_MULTI_JOIPO.
  if SY-SUBRC = 0.
    ME->F_MULTI_JOIPO = LS_ATTRI-ATTVA.
  endif.

endmethod.
method MULTI_JOIPO_ALLOWED.

  RF_ALLOWED = ME->F_MULTI_JOIPO.

endmethod.
method SET_MAIN_JOINT.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_JOIWI           type        ZVCXI_P0S_S_JOIWI,
         LS_JOILE           type        ZVCXI_P0S_S_JOILE,
         LS_STITP           type        ZVCXI_P0SS_S_STITP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_JOINT        type ref to ZCL_VCXI_P0SS_PR_JOINT.
  data:  LF_NOSTI           type        ZVCXI_P0SS_NOSTI,
         LF_SETBY           type        /VCXI/VKSR_SETBY.

***------------------------------------------------------------------
*** Get Main Joint Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
        if LR_PR_JOINT is bound and
           LR_PR_JOINT->GET_FMJOI( ) eq ABAP_TRUE.
          exit.
        else.
          clear: LR_PR_JOINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.


***------------------------------------------------------------------------------------------------
*** Create Main Joint if it do not exist already
  if LR_PR_JOINT is not bound.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    if LR_GATE->IS_INUSE( ) ne ABAP_TRUE.
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Set Main Joint Flag
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
        check LR_PR_JOINT is bound.
        LR_PR_JOINT->SET_FMJOI( IF_FMJOI = ABAP_TRUE ).
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

  endif.

  check LR_PR_JOINT is bound.
***------------------------------------------------------------------------------------------------
*** Set Supplied Data
*** Joint Type
  if IF_JOITY is supplied and
     IF_JOITY ne LR_PR_JOINT->GET_JOITY( ).
    LR_PR_JOINT->SET_JOITY( IF_JOITY = IF_JOITY
                            IF_SETBY = IF_SETBY ).
  endif.

*** Joint Position
  if IF_JOIPO is supplied and
     IF_JOIPO ne LR_PR_JOINT->GET_JOIPO( ).
    LR_PR_JOINT->SET_JOIPO( IF_JOIPO = IF_JOIPO
                            IF_SETBY = IF_SETBY ).
  endif.

*** Joint Width
  LR_PR_JOINT->GET_JOIWI( importing EF_SETBY = LF_SETBY ).
  if IF_SETBY eq LF_SETBY or
     IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
     LF_SETBY is initial or
     IF_SETBY is supplied.
    LR_PR_JOINT->GET_JOIWI( importing ES_JOIWI = LS_JOIWI ).
    if IS_JOIWI       is supplied and
       IS_JOIWI-JOIWI ne LS_JOIWI-JOIWI.
      LR_PR_JOINT->SET_JOIWI( IS_JOIWI = IS_JOIWI
                              IF_SETBY = IF_SETBY ).
    endif.
  endif.

*** Joint Length
  LR_PR_JOINT->GET_JOILE( importing EF_SETBY = LF_SETBY ).
  if IF_SETBY eq LF_SETBY or
     IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
     LF_SETBY is initial or
     IF_SETBY is supplied.
    LR_PR_JOINT->GET_JOILE( importing EF_SETBY = LF_SETBY ).
    LR_PR_JOINT->GET_JOILE( importing ES_JOILE = LS_JOILE ).
    if IS_JOILE       is supplied and
       IS_JOILE-JOILE ne LS_JOILE-JOILE.
      LR_PR_JOINT->SET_JOILE( IS_JOILE = IS_JOILE
                              IF_SETBY = IF_SETBY ).
    endif.
  endif.

*** Number of Stitches
  LR_PR_JOINT->GET_NOSTI( importing EF_SETBY = LF_SETBY ).
  if IF_SETBY eq LF_SETBY or
     IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
     LF_SETBY is initial or
     IF_SETBY is supplied.
    LR_PR_JOINT->GET_NOSTI( importing EF_NOSTI = LF_NOSTI ).
    if IF_NOSTI is supplied and
       IF_NOSTI ne LF_NOSTI.
      LR_PR_JOINT->SET_NOSTI( IF_NOSTI = IF_NOSTI
                              IF_SETBY = IF_SETBY ).

      if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        LR_PR_JOINT->SET_STITP( IF_SETBY = IF_SETBY ).
      endif.
    endif.
  endif.

*** Stitch per
  LR_PR_JOINT->GET_STITP( importing EF_SETBY = LF_SETBY ).
  if IF_SETBY eq LF_SETBY or
     IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
     LF_SETBY is initial or
     IF_SETBY is supplied.
    LR_PR_JOINT->GET_STITP( importing ES_STITP = LS_STITP ).
    if IS_STITP       is supplied and
       IS_STITP-STITP ne LS_STITP-STITP.
      LR_PR_JOINT->SET_STITP( IS_STITP = IS_STITP
                              IF_SETBY = IF_SETBY ).

      if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        LR_PR_JOINT->SET_NOSTI( IF_SETBY = IF_SETBY ).
      endif.
    endif.
  endif.

endmethod.
