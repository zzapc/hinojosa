
class ZCL_VCXI_XCSS_PR_DOC definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_DOC type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSS_DOC' ##NO_TEXT.
  data R_BL_DOC type ref to ZCL_VCXI_XCSS_BL_DOC .

  methods DISPLAY_POPUP_USER_DOC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_DKTXT
    returning
      value(RF_DKTXT) type DKTXT
    raising
      /VCXI/CX_CKX .
  methods GET_DOC_KEY
    exporting
      !EF_DOKVR type DOKVR
      !EF_DOKTL type DOKTL_D
      !EF_DOKNR type DOKNR
    returning
      value(RS_DOC_KEY) type ZVCXI_XCS_S_DOC_KEY
    raising
      /VCXI/CX_CKX .
  methods GET_DOKAR
    returning
      value(RF_DOKAR) type DOKAR
    raising
      /VCXI/CX_CKX .
  methods GET_DOKFI
    returning
      value(RF_DOKFI) type ZVCXI_XCSS_DOKFI
    raising
      /VCXI/CX_CKX .
  methods GET_DOKST
    returning
      value(RF_DOKST) type DOKST
    raising
      /VCXI/CX_CKX .
  methods GET_DOC_USER
    importing
      !IF_SORTED type ABAP_BOOL default ABAP_FALSE
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods OPEN_DOC
    raising
      /VCXI/CX_CKX .
  methods OPEN_DOC_RECORD
    raising
      /VCXI/CX_CKX .
  methods SET_DOC_KEY
    importing
      !IF_DOKNR type DOKNR
      !IF_DOKTL type DOKTL_D
      !IF_DOKVR type DOKVR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_IEVNT_I_CLEAR_USAGE type /VCXI/VKSC_IEVNT value 'CLEAR_USAGE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_DOCUMENT type /VCXI/VKSC_IEVNT value 'INIT_DOCUMENT' ##NO_TEXT.
  constants C_IEVNT_O_DOC_KEY_CHANGED type /VCXI/VKSC_IEVNT value 'DOC_KEY_CHANGED' ##NO_TEXT.

  methods CHECK_UNLINK_DOC
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_DOCUMENT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CLEAR_USAGE
    raising
      /VCXI/CX_CKX .
  methods CHECK_LOEDK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSS_PR_DOC definition
class ZCL_VCXI_XCSS_PR_DOC implementation.
  method CHECK_LOEDK.

    check ME->R_BL_DOC is bound.

***----------------------------------------------------------------------------
*** Check Deletion Flag
    if ME->R_BL_DOC->F_LOEDK is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Document is marked for deletion
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = '26'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '131' ).
      endif.
    endif.

  endmethod.
  method CHECK_UNLINK_DOC.
*** 0 Allow Document Unlink
*** 1 Don't Allow Document Unlink.

    data: LF_ANSWER type          C.

    move 1 to RF_RETURN.

*** Document has Users
    if ME->GET_DOC_USER( ) is not initial.

***   Call Popup
      call function 'POPUP_TO_CONFIRM'
        exporting
          TITLEBAR              = 'Unlink Document'(005)
          TEXT_QUESTION         = text-004
          TEXT_BUTTON_1         = 'Unlink'(002)
          ICON_BUTTON_1         = 'ICON_UNLINK'
          TEXT_BUTTON_2         = 'Cancel'(003)
          ICON_BUTTON_2         = 'ICON_CANCEL'
          DEFAULT_BUTTON        = '1'
          DISPLAY_CANCEL_BUTTON = ' '
          START_COLUMN          = 100
          START_ROW             = 4
          POPUP_TYPE            = 'ICON_MESSAGE_WARNING'
        importing
          ANSWER                = LF_ANSWER
        exceptions
          TEXT_NOT_FOUND        = 1
          others                = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      if LF_ANSWER eq '1'.
        move 0 to RF_RETURN.
      endif.

*** Document do not have Users
    else.
      move 0 to RF_RETURN.
    endif.

  endmethod.
  method DISPLAY_POPUP_USER_DOC.

    types: begin of YS_OUTPUT,
             R_GATE type ref to /VCXI/CL_VKSR_GATE,
             DESCR  type /VCXI/CKX_DESCR,
           end of YS_OUTPUT.

    data: LF_TITLE type        LVC_TITLE,
          LF_INDEX type        I.
    data: LS_DOC_KEY  type ZVCXI_XCS_S_DOC_KEY.
    data: LT_OUTPUT type table of YS_OUTPUT,
          LT_ROWS   type        SALV_T_ROW.
    data: LT_GATE_USER type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_USER  type ref to /VCXI/CL_VKSR_GATE,
          LR_SALV_TABLE type ref to CL_SALV_TABLE,
          LR_SELECTIONS type ref to CL_SALV_SELECTIONS.


*** Get Document Key
    LS_DOC_KEY = ME->GET_DOC_KEY( ).

*** Collect User Information
    LT_GATE_USER = ME->GET_DOC_USER( ).
    loop at LT_GATE_USER into LR_GATE_USER.
      append value #( R_GATE    = LR_GATE_USER
                      DESCR     = LR_GATE_USER->GET_DESCR( )
                    ) to LT_OUTPUT.
    endloop.

*** Create SALV
    try.
        CL_SALV_TABLE=>FACTORY( importing R_SALV_TABLE = LR_SALV_TABLE
                                changing  T_TABLE      = LT_OUTPUT ).

      catch CX_SALV_MSG .
        raise exception type /VCXI/CX_CKX.
    endtry.
    check LR_SALV_TABLE is bound.

*** Set Popup Title
    concatenate 'Usages of'(001) LS_DOC_KEY-DOKNR into LF_TITLE separated by SPACE.
    LR_SALV_TABLE->GET_DISPLAY_SETTINGS( )->SET_LIST_HEADER( LF_TITLE ).

*** Set Selection Mode Single and mark first as selected
    LR_SELECTIONS = LR_SALV_TABLE->GET_SELECTIONS( ).
    LR_SELECTIONS->SET_SELECTION_MODE( IF_SALV_C_SELECTION_MODE=>SINGLE ).
    LR_SELECTIONS->SET_SELECTED_ROWS( value #( ( 1 ) ) ).

*** Set Popup Screen
    LR_SALV_TABLE->SET_SCREEN_POPUP( START_COLUMN = 120
                                     END_COLUMN   = 170
                                     START_LINE   = 1
                                     END_LINE     = 10 ).

*** Display Popup
    LR_SALV_TABLE->DISPLAY( ).

*** Check OK Button Pressed
    check SY-UCOMM eq '&ONT'.

*** Get Selected Row R_GATE
    clear LT_ROWS.
    LT_ROWS = LR_SELECTIONS->GET_SELECTED_ROWS( ).

    clear: LF_INDEX.
    read table LT_ROWS into LF_INDEX index 1.
    check SY-SUBRC eq 0.

    RR_GATE = value #( LT_GATE_USER[ LF_INDEX ] optional ).

  endmethod.
  method GET_DESCR.

    data: LF_DOKNR type DOKNR,
          LF_DOKTL type DOKTL_D,
          LF_DOKVR type DOKVR,
          LF_DOKAR type DOKAR,
          LF_DESCR type /VCXI/CKX_DESCR.

    ME->GET_DOC_KEY( importing EF_DOKNR = LF_DOKNR
                               EF_DOKTL = LF_DOKTL
                               EF_DOKVR = LF_DOKVR ).
    LF_DOKAR = ME->GET_DOKAR( ).

    if LF_DOKNR is not initial and
       LF_DOKTL is not initial and
       LF_DOKVR is not initial.
*** Convert Document Number to Output
      call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
        exporting
          INPUT  = LF_DOKNR
        importing
          OUTPUT = LF_DOKNR.

      concatenate LF_DOKNR LF_DOKTL LF_DOKVR into LF_DESCR separated by '/'.
      concatenate LF_DOKAR '-' LF_DESCR into RF_DESCR separated by SPACE.

    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
  method GET_DKTXT.

    check ME->R_BL_DOC is bound.

*** Get Descrition
    RF_DKTXT = ME->R_BL_DOC->GET_DESCR( ).

    if ME->R_BL_DOC->F_TMP eq ABAP_TRUE.
      concatenate '#TMP# -'(TMP) RF_DKTXT into RF_DKTXT.
    endif.

  endmethod.
  method GET_DOC_KEY.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move LS_LEOKY-LEOKY+0(25) to EF_DOKNR.
    move LS_LEOKY-LEOKY+25(3) to EF_DOKTL.
    move LS_LEOKY-LEOKY+28(2) to EF_DOKVR.

    if RS_DOC_KEY is requested.
      RS_DOC_KEY-DOKAR = ME->GET_DOKAR( ).
      RS_DOC_KEY-DOKNR = EF_DOKNR.
      RS_DOC_KEY-DOKTL = EF_DOKTL.
      RS_DOC_KEY-DOKVR = EF_DOKVR.
    endif.

  endmethod.
  method GET_DOC_USER.

    data: LS_DOC_KEY  type        ZVCXI_XCS_S_DOC_KEY.
    data: LT_GATE_USER type        /VCXI/VKSR_TT_GATE,
          LT_DOC_KEY   type        ZVCXI_XCS_TT_DOC_KEY.
    data: LR_GATE_USER type ref to /VCXI/CL_VKSR_GATE.


*** Get Document Key
    LS_DOC_KEY = ME->GET_DOC_KEY( ).

*** Get Gates of Users
    LT_GATE_USER = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_DOC_USER=>C_IPRVT_DOC_USER
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = IF_SORTED ).
    loop at LT_GATE_USER into LR_GATE_USER.
***   Get used DMS Document of User
      LT_DOC_KEY = cast ZIF_VCXI_XCSS_DOC_USER( LR_GATE_USER->R_CLSPR )->GET_USAGE( ).
      if LINE_EXISTS( LT_DOC_KEY[ TABLE_LINE = LS_DOC_KEY ] ).
        append LR_GATE_USER to RT_GATE.
      endif.
    endloop.

  endmethod.
  method GET_DOKAR.

*** Dokument Type is ID of Element
    RF_DOKAR = ME->R_GATE->F_ID.

  endmethod.
  method GET_DOKFI.

    check ME->R_BL_DOC is bound.
    RF_DOKFI = LINES( ME->R_BL_DOC->T_FILES ).

  endmethod.
  method GET_DOKST.

    check ME->R_BL_DOC is bound.

*** Get Document Status
    RF_DOKST = ME->R_BL_DOC->F_DOKST.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Deletion Flag
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_LOEDK( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Deletion Flag
    ME->CHECK_LOEDK( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_CLEAR_USAGE.

    data: LS_DOC_KEY    type        ZVCXI_XCS_S_DOC_KEY.
    data: LT_GATE_USER  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_USER  type ref to /VCXI/CL_VKSR_GATE.


*** Check Unlink Document
    if ME->CHECK_UNLINK_DOC( ) eq 0.
***   Get Document Key
      LS_DOC_KEY = ME->GET_DOC_KEY( ).

***   Get Gates of Users
      LT_GATE_USER = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSS_DOC_USER=>C_IPRVT_DOC_USER
                                            IF_INUSE = ABAP_TRUE ).
      loop at LT_GATE_USER into LR_GATE_USER.
***     Clear Design Document
        cast ZIF_VCXI_XCSS_DOC_USER( LR_GATE_USER->R_CLSPR )->CLEAR_USAGE( IS_DOC_KEY = LS_DOC_KEY ).
      endloop.

***   Free Element
      if ME->R_GATE->IS_INUSE( ) eq ABAP_TRUE.
        ME->R_GATE->DO_FREE( ).
      endif.

    else.
***   Restore In Use
      ME->R_GATE->SET_INUSE( ABAP_TRUE ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_DOCUMENT.
        ME->HANDLE_INIT_DOCUMENT( ).

      when C_IEVNT_I_CLEAR_USAGE.
        ME->HANDLE_CLEAR_USAGE( ).

    endcase.

  endmethod.
  method HANDLE_INIT_DOCUMENT.

    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.


    LS_DOC_KEY = ME->GET_DOC_KEY( ).

*** Only load Business Logic with insert Document Number
    check LS_DOC_KEY-DOKAR is not initial and
          LS_DOC_KEY-DOKNR is not initial and
          LS_DOC_KEY-DOKTL is not initial and
          LS_DOC_KEY-DOKVR is not initial.

    if ME->R_BL_DOC          is bound    and
       ME->R_BL_DOC->F_DOKAR eq LS_DOC_KEY-DOKAR and
       ME->R_BL_DOC->F_DOKNR eq LS_DOC_KEY-DOKNR and
       ME->R_BL_DOC->F_DOKTL eq LS_DOC_KEY-DOKTL and
       ME->R_BL_DOC->F_DOKVR eq LS_DOC_KEY-DOKVR.
***   Everything was loaded already...
      exit.
    endif.

*** Load BL for DMS Document
    ME->R_BL_DOC = ZCL_VCXI_XCSS_BL_DOC=>GET_INSTANCE( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                       IF_DOKNR = LS_DOC_KEY-DOKNR
                                                       IF_DOKTL = LS_DOC_KEY-DOKTL
                                                       IF_DOKVR = LS_DOC_KEY-DOKVR ).
*** Check "temporary" Status
    ME->R_BL_DOC->CHECK_TMP( ).

  endmethod.
  method OPEN_DOC.

    check ME->R_BL_DOC is bound.

*** Open Document
    ME->R_BL_DOC->OPEN_DOC( ).

  endmethod.
  method OPEN_DOC_RECORD.

    check ME->R_BL_DOC is bound.

*** Open Document Info Record
    ME->R_BL_DOC->OPEN_DOC_RECORD( ).

  endmethod.
  method SET_DOC_KEY.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_DOKNR to LS_LEOKY-LEOKY+0(25).
    move IF_DOKTL to LS_LEOKY-LEOKY+25(3).
    move IF_DOKVR to LS_LEOKY-LEOKY+28(2).
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Set Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DOC_KEY_CHANGED ).
    endif.

  endmethod.
