
class ZCL_VCXI_FBSS_PR_MS_HPART_P definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  interfaces ZIF_VCXI_XCS_PSCALE_MGR .
  interfaces ZIF_VCXI_FBSS_HANDLE_HPART .

  constants C_IPRVT_MS_HPART_P type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_MS_HPART_P' ##NO_TEXT.
  constants C_PARID_HPFCT type /VCXI/VKS_PARID value 'ZVCXI_FB_HPFCT' ##NO_TEXT.
  constants C_PARID_HPWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_HPWGT' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_TPHND type /VCXI/VKS_PARID value 'ZVCXI_FB_TPHND' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_HPFCT
    exporting
      !EF_HPFCT type ZVCXI_FBS_HPFCT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_HPWGT
    exporting
      !ES_HPWGT type ZVCXI_FBS_S_HPWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TPHND
    exporting
      !EF_TPHND type ZVCXI_FBS_TPHND
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_HPFCT
    importing
      !IF_HPFCT type ZVCXI_FBS_HPFCT default '1'
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_HPWGT
    importing
      !IS_HPWGT type ZVCXI_FBS_S_HPWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TPHND
    importing
      !IF_TPHND type ZVCXI_FBS_TPHND
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_MATNR_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods GET_WERKS
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_HPFCT type /VCXI/VKSC_IEVNT value 'INIT_HPFCT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HPWGT type /VCXI/VKSC_IEVNT value 'RECALC_HPWGT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_HPFCT_CHANGED type /VCXI/VKSC_IEVNT value 'HPFCT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HPWGT_CHANGED type /VCXI/VKSC_IEVNT value 'HPWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  data R_CUST_HPART_P type ref to ZCL_VCXI_FBSS_CUST_HPART_P .

  methods CHECK_HPFCT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_HPWGT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TPHND
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_HPFCT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HPWGT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
  methods HANDLE_INIT_PRICE
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_PR_MS_HPART_P definition
class ZCL_VCXI_FBSS_PR_MS_HPART_P implementation.
method CHECK_HPFCT.

*** 0 - Handle Part Factor is maintained.
*** 1 - Handle Part Factor is not maintained.

  data:  LF_HPFCT type ZVCXI_FBS_HPFCT.

  ME->GET_HPFCT( importing EF_HPFCT = LF_HPFCT ).

  if LF_HPFCT is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_HPWGT.

*** 0 - Handle Part Factor is maintained.
*** 1 - Handle Part Factor is not maintained.

  data:  LS_HPWGT type ZVCXI_FBS_S_HPWGT.

  ME->GET_HPWGT( importing ES_HPWGT = LS_HPWGT ).

  if LS_HPWGT-HPWGT is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_TPHND.

*** 0 - Handle Part Type is maintained.
*** 1 - Handle Part Type is not maintained.

  data:  LF_TPHND type ZVCXI_FBS_TPHND.

  ME->GET_TPHND( importing EF_TPHND = LF_TPHND ).

  if LF_TPHND is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_P to ME->F_PARID_PRICP.

  endmethod.
  method GET_DESCR.

    data: LF_TPHND type ZVCXI_FBS_TPHND,
          LF_MATNR type MATNR,
          LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_TC111T type ZVCXI_FBS_TC111T.

    ME->GET_TPHND( importing EF_TPHND = LF_TPHND ).

    move ME->GET_MATNR( ) to LF_MATNR.
    move ME->GET_MATNR_DESCR( ) to LF_DESCR.

    if LF_MATNR is initial and LF_TPHND is initial.
      SUPER->GET_DESCR( receiving RF_DESCR = RF_DESCR ).

    elseif LF_MATNR is initial.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC111T into LS_TC111T
                                                with key TPHND = LF_TPHND.
      check SY-SUBRC is initial.
      concatenate LF_TPHND '-' LS_TC111T-DESCR into RF_DESCR separated by SPACE.

    else.
      concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
    endif.

  endmethod.
  method GET_HPFCT.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HPFCT ).
    move LS_PARAM-ATFLV to EF_HPFCT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HPWGT.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HPWGT ).
    move LS_PARAM-ATFLV to ES_HPWGT-HPWGT.
    move LS_PARAM-UNIT  to ES_HPWGT-HPWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    SUPER->GET_MATNR_DESCR( receiving RF_DESCR = RF_DESCR ).

    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

      if LS_PARAM-SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        move LS_PARAM-STRNG to RF_DESCR.
      endif.
    endif.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Handle Part Type
    if ME->CHECK_TPHND( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Handle Part Factor
    if ME->CHECK_HPFCT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Handle Part Weight
    if ME->CHECK_HPWGT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Handle Part Type
    case ME->CHECK_TPHND( ).
      when 0.

***     Handle Part Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '401' ).


      when 1.

***     Handle Part Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '402' ).


    endcase.

*** Check Handle Part Factor
    case ME->CHECK_HPFCT( ).
      when 0.

***     Handle Part Factor is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '403' ).


      when 1.

***     Handle Part Factor is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '404' ).


    endcase.

*** Check Handle Part Weight
    case ME->CHECK_HPWGT( ).
      when 0.

***     Handle Part Weight is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '405' ).


      when 1.

***     Handle Part Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '406' ).


    endcase.

  endmethod.
  method GET_TPHND.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPHND ).
    move LS_PARAM-ATWRT to EF_TPHND.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_HPFCT.
        ME->HANDLE_INIT_HPFCT( ).

      when C_IEVNT_I_RECALC_HPWGT.
        ME->HANDLE_RECALC_HPWGT( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type /VCXI/VKCR_DCONF.
    data: LS_HPWGT type ZVCXI_FBS_S_HPWGT.


    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_HPART_P          is bound    and
       ME->R_CUST_HPART_P->F_MATNR eq LF_MATNR and
       ME->R_CUST_HPART_P->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR, ME->R_CUST_HPART_P.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_HPART_P = ZCL_VCXI_FBSS_CUST_HPART_P=>GET_INSTANCE_HPART_P( IF_MATNR = LF_MATNR
                                                                                 IF_WERKS = LF_WERKS
                                                                                 IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_HPART_P to ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Set Values for Real Handle Part (PC)
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
      if ME->R_CUST_HPART_P is bound.
        move: ME->R_CUST_HPART_P->S_HPWGT to LS_HPWGT.
      endif.

      ME->SET_HPWGT( IS_HPWGT = LS_HPWGT ).

    endif.

  endmethod.
  method HANDLE_INIT_HPFCT.

    data:  LF_HPFCT   type ZVCXI_FBS_HPFCT.

    ME->GET_HPFCT( importing EF_HPFCT = LF_HPFCT ).

*** Set Handle Part Factor initial value
    if LF_HPFCT is initial.
      move 1 to LF_HPFCT.
      ME->SET_HPFCT( exporting IF_HPFCT = LF_HPFCT ).
    endif.

  endmethod.
  method HANDLE_INIT_PRICE.

*** No Defaulting for Direct Procurement & Price - as we use Scales only
    if ME->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      SUPER->HANDLE_INIT_PRICE( ).
    else.
***   Clear Price Data
      ME->SET_PRICE( IF_SETBY = SPACE ).
      ME->SET_PRICP( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_HPWGT.

    data: LF_HPFCT type  ZVCXI_FBS_HPFCT.
    data: LS_HPARE type  ZVCXI_FBS_S_HPARE,
          LS_SURWT type  ZVCXI_F0S_S_SURWT,
          LS_HPWGT type  ZVCXI_FBS_S_HPWGT.

    check ME->IS_DUMMY( ) eq ABAP_FALSE.

*** Multiply Weight by Handle Part Factor
    ME->GET_HPFCT( importing EF_HPFCT = LF_HPFCT ).
    if LF_HPFCT gt 0 and
       ME->R_CUST_HPART_P is bound.
      LS_HPWGT-HPWGT     = ME->R_CUST_HPART_P->S_HPWGT-HPWGT * LF_HPFCT.
      LS_HPWGT-HPWGT_UOM = ME->R_CUST_HPART_P->S_HPWGT-HPWGT_UOM.
    endif.

*** Set Handle Part Weight
    ME->SET_HPWGT( IS_HPWGT = LS_HPWGT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_HPFCT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HPFCT ).

    move IF_HPFCT to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HPFCT_CHANGED ).

    endif.

  endmethod.
  method SET_HPWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HPWGT ).

    move IS_HPWGT-HPWGT     to LS_PARAM-ATFLV.
    move IS_HPWGT-HPWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HPWGT_CHANGED ).

    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).

    endif.

  endmethod.
  method SET_TPHND.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPHND ).

    move IF_TPHND to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_FBSS_HANDLE_HPART~GET_HPWGT.

    ME->GET_HPWGT( importing ES_HPWGT = ES_HPWGT
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_HANDLE_HPART~GET_TPHND.

    ME->GET_TPHND( importing EF_TPHND = EF_TPHND
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_HANDLE_HPART~SET_TPHND.

    ME->SET_TPHND( exporting IF_TPHND = IF_TPHND
                             IF_SETBY = IF_SETBY ).

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY.
    data: LT_GATE        type /VCXI/VKSR_TT_GATE.
    data: LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_GATE            type ref to /VCXI/CL_VKSR_GATE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).


    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

    data: LF_LOCKED type /VCXI/CKX_LOCKED.

    check ME->R_GATE is bound.
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    move LF_LOCKED to RF_CHANGEABLE.

  endmethod.
