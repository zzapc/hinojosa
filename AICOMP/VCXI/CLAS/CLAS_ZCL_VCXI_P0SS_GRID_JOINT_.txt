
class ZCL_VCXI_P0SS_GRID_JOINT definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SUBRC_4 type I value '4'. "#EC NOTEXT
  type-pools ABAP .
  data F_STREQ type ABAP_BOOL .
  data R_PR_CLOS type ref to ZCL_VCXI_P0SS_PR_CLOS .

  methods CHANGE_STYLE_JOINT
    importing
      !IF_FOVRS type ZVCXI_P0SS_FOVRS
      !IF_FOVRW type ZVCXI_P0SS_FOVRW
      !IF_FOVRL type ZVCXI_P0SS_FOVRL
      !IF_FMJOI type ZVCXI_P0SS_FMJOI
      !IF_STREQ type ABAP_BOOL
      !IF_MJOIP type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_JOINT_VIS
    importing
      !IR_PR_JOINT type ref to ZCL_VCXI_P0SS_PR_JOINT
    returning
      value(RS_JOINT_VIS) type ZVCXI_P0SS_S_JOINT_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods SET_JOINT_VIS
    importing
      !IR_PR_JOINT type ref to ZCL_VCXI_P0SS_PR_JOINT
      !IS_JOINT_VIS type ZVCXI_P0SS_S_JOINT_VIS
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_JOINT definition
class ZCL_VCXI_P0SS_GRID_JOINT implementation.
method ADD_PRVDR.

  data:          LF_EXIST             type        ABAP_BOOL,
                 LF_JOIPO             type        ZVCXI_P0S_JOIPO,
                 LF_SETBY             type        /VCXI/VKSR_SETBY.
  data:          LR_PR_JOINT          type ref to ZCL_VCXI_P0SS_PR_JOINT.
  data:          LS_JOIWI             type        ZVCXI_P0S_S_JOIWI,
                 LS_JOILE             type        ZVCXI_P0S_S_JOILE.

  RR_GATE = SUPER->ADD_PRVDR( IF_ID = IF_ID ).

*** Set Initialize Joint Data
  try.

      check RR_GATE is bound.
      move RR_GATE->R_CLSPR ?to LR_PR_JOINT.
      check LR_PR_JOINT is bound.

***   Get Main Joint Data
      ME->R_PR_CLOS->GET_MAIN_JOINT( importing EF_JOIPO = LF_JOIPO
                                               ES_JOIWI = LS_JOIWI
                                               ES_JOILE = LS_JOILE
                                               EF_EXIST = LF_EXIST ).
      if LF_EXIST eq ABAP_FALSE.
        LR_PR_JOINT->SET_FMJOI( IF_FMJOI = ABAP_TRUE ).
      endif.
***   Do only override if they are set by calc
      LR_PR_JOINT->SET_JOIPO( IF_JOIPO = LF_JOIPO ).

      LR_PR_JOINT->GET_JOIWI( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        LR_PR_JOINT->SET_JOIWI( IS_JOIWI = LS_JOIWI ).
      endif.

      LR_PR_JOINT->GET_JOILE( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        LR_PR_JOINT->SET_JOILE( IS_JOILE = LS_JOILE ).
      endif.

    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_JOINT.
  endtry.

*** Reorg position ID's
  RR_GATE->REORG_POSID( ).

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method CHANGE_STYLE_JOINT.

  data: LF_STYLE_ENABLED_JOIPO type LVC_STYLE,
        LF_STYLE_ENABLED_JOIWI type LVC_STYLE,
        LF_STYLE_ENABLED_JOILE type LVC_STYLE,
        LF_STYLE_ENABLED_STITC type LVC_STYLE,
        LF_STYLE_ENABLED_FOVRS type LVC_STYLE,
        LF_STYLE_HOTSPOT       type LVC_STYLE.

  free CT_STYL.

*** Editable
  if ME->F_STYLE_ENABLED = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
*** Not Editable
  else.
    LF_STYLE_HOTSPOT = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
  endif.

*** --------------------------------------------------------------------------------------------
*** Set Style Details -> only Editable
  move ME->F_STYLE_DISABLED to: LF_STYLE_ENABLED_JOIPO, LF_STYLE_ENABLED_JOIWI,
                                LF_STYLE_ENABLED_JOILE, LF_STYLE_ENABLED_STITC.
  LF_STYLE_ENABLED_FOVRS = ME->F_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.

  if IF_FOVRS eq ABAP_TRUE. move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_STITC. endif.
  if IF_FOVRL eq ABAP_TRUE. move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_JOILE. endif.
  if IF_FOVRW eq ABAP_TRUE. move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_JOIWI. endif.
  if IF_FMJOI eq ABAP_TRUE. move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_JOIPO. endif.
  if IF_MJOIP eq ABAP_TRUE. move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_JOIPO. endif.
  if IF_STREQ eq ABAP_TRUE. move LF_STYLE_HOTSPOT    to LF_STYLE_ENABLED_FOVRS. endif.

*** Set Joint Type = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOITY'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Type Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOITY_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Position = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOIPO'
                              IF_STYLE     = LF_STYLE_ENABLED_JOIPO
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Position Descripton = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOIPO_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Production Pass = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PPASS'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Width = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOIWI'
                              IF_STYLE     = LF_STYLE_ENABLED_JOIWI
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Width Unit = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOIWI_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Override Joint Width = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRW'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Length = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOILE'
                              IF_STYLE     = LF_STYLE_ENABLED_JOILE
                    changing  CT_STYL      = CT_STYL ).

*** Set Joint Length Unit = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'JOILE_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Override Joint Length = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRL'
                              IF_STYLE     = LF_STYLE_HOTSPOT
                    changing  CT_STYL      = CT_STYL ).

*** Set Number of Stitches = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOSTI'
                              IF_STYLE     = LF_STYLE_ENABLED_STITC
                    changing  CT_STYL      = CT_STYL ).

*** Set Stitch per = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'STITP'
                              IF_STYLE     = LF_STYLE_ENABLED_STITC
                    changing  CT_STYL      = CT_STYL ).

*** Set Stitch per Unit = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'STITP_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Override Stitching Settings = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRS'
                              IF_STYLE     = LF_STYLE_ENABLED_FOVRS
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_P0SS_S_JOINT_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT.

  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_CLOS.

    catch CX_SY_MOVE_CAST_ERROR.
      clear ME->R_PR_CLOS.
  endtry.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED type        /VCXI/CKX_LOCKED,
                 LF_INUSE  type        /VCXI/VKSR_INUSE,
                 LF_COLPOS type        INT4.
  field-symbols: <S_FCAT>  type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.

*** Set Right Colpos
    add 1 to LF_COLPOS.
    <S_FCAT>-COL_POS = LF_COLPOS.

    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'JOITY' or 'PPASS' or 'JOIWI'
        or 'JOILE'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'NOSTI' or 'STITP'.
        if ME->F_STREQ eq ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.
        else.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
        endif.

      when 'STITP_UOM'.
        if ME->F_STREQ eq ABAP_FALSE.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
        endif.

      when 'FMJOI'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.

      when 'FOVRL' or 'FOVRW'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
          move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
        endif.

      when 'FOVRS'.
        move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        if ME->F_STREQ eq ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
            move ABAP_TRUE    to <S_FCAT>-HOTSPOT.
          endif.
        else.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
        endif.

    endcase.
  endloop.

  sort RT_FCAT by COL_POS.

endmethod.
method GET_GRID_DATA.

  data:          LF_STREQ             type          ABAP_BOOL,
                 LF_MJOIP             type          ABAP_BOOL,
                 LF_TPRST             type          ZVCXI_P0SS_TPRST,
                 LF_PRSTY             type          ZVCXI_P0SS_PRSTY.
  data:          LS_JOINT_GRID        type          ZVCXI_P0SS_S_JOINT_GRID,
                 LS_JOINT_VIS         type          ZVCXI_P0SS_S_JOINT_VIS.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_JOINT          type ref to   ZCL_VCXI_P0SS_PR_JOINT,
                 LR_PR_CLOS           type ref to   ZCL_VCXI_P0SS_PR_CLOS.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  clear: ME->F_STREQ.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Multiple Joint Positions allowed?
  LF_MJOIP = ME->R_PR_CLOS->MULTI_JOIPO_ALLOWED( ).

*** Get Gates of Joint
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_JOINT_GRID, LF_STREQ.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_JOINT.
        check LR_PR_JOINT is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( ) to LS_JOINT_GRID-POSID.
        move LR_GATE->F_GATKY      to LS_JOINT_GRID-GATKY.
        move LR_GATE               to LS_JOINT_GRID-R_GATE.

        LS_JOINT_VIS = ME->GET_JOINT_VIS( IR_PR_JOINT = LR_PR_JOINT ).
        move-corresponding LS_JOINT_VIS to LS_JOINT_GRID.
        if LR_PR_JOINT->CHECK_STITCH( ) ne C_SUBRC_4.
          move ABAP_TRUE to: LF_STREQ,  ME->F_STREQ.
        endif.

*** --------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_JOINT( exporting IF_FOVRW = LS_JOINT_GRID-FOVRW
                                          IF_FOVRL = LS_JOINT_GRID-FOVRL
                                          IF_FOVRS = LS_JOINT_GRID-FOVRS
                                          IF_FMJOI = LS_JOINT_GRID-FMJOI
                                          IF_MJOIP = LF_MJOIP
                                          IF_STREQ = LF_STREQ
                                changing  CT_STYL  = LS_JOINT_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_JOINT_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_JOINT_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.



*** Set Parameter ID's for Product Style Type and Product Style
  try.
      move ME->R_GATE->R_CLSPR ?to LR_PR_CLOS.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.
  check LR_PR_CLOS is bound.

  LR_PR_CLOS->GET_TPRST_PRSTY( importing EF_TPRST = LF_TPRST
                                         EF_PRSTY = LF_PRSTY ).
  set parameter id 'ZVCXI_P0SS_TPRST' field LF_TPRST.
  set parameter id 'ZVCXI_P0SS_PRSTY' field LF_PRSTY.

endmethod.
method GET_JOINT_VIS.

  data:  LS_JOIWI type ZVCXI_P0S_S_JOIWI,
         LS_JOILE type ZVCXI_P0S_S_JOILE,
         LS_STITP type ZVCXI_P0SS_S_STITP.

*** Get Joint Type and Description
  move IR_PR_JOINT->GET_JOITY( )         to RS_JOINT_VIS-JOITY.
  move IR_PR_JOINT->GET_JOITY_DESCR( )   to RS_JOINT_VIS-JOITY_DESCR.

*** Get Joint Position
  move IR_PR_JOINT->GET_JOIPO( )         to RS_JOINT_VIS-JOIPO.
  move IR_PR_JOINT->GET_JOIPO_DESCR( )   to RS_JOINT_VIS-JOIPO_DESCR.

*** Get Flag Main Joint type
  move IR_PR_JOINT->GET_FMJOI( )         to RS_JOINT_VIS-FMJOI.

*** Get Production Pass
  move IR_PR_JOINT->GET_PPASS( )         to RS_JOINT_VIS-PPASS.

*** Get Joint Width and override Flag
  IR_PR_JOINT->GET_JOIWI( importing ES_JOIWI = LS_JOIWI ).
  move-corresponding LS_JOIWI            to RS_JOINT_VIS.
  move IR_PR_JOINT->GET_FOVRW( )         to RS_JOINT_VIS-FOVRW.

*** Get Joint Length and override Flag
  IR_PR_JOINT->GET_JOILE( importing ES_JOILE = LS_JOILE ).
  move-corresponding LS_JOILE            to RS_JOINT_VIS.
  move IR_PR_JOINT->GET_FOVRL( )         to RS_JOINT_VIS-FOVRL.

*** Get Stitching Setting and override Flag
  IR_PR_JOINT->GET_NOSTI( importing EF_NOSTI = RS_JOINT_VIS-NOSTI ).
  IR_PR_JOINT->GET_STITP( importing ES_STITP = LS_STITP ).
  move-corresponding LS_STITP            to RS_JOINT_VIS.

  move IR_PR_JOINT->GET_FOVRS( )         to RS_JOINT_VIS-FOVRS.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_JOINT_GRID        type          ZVCXI_P0SS_S_JOINT_GRID,
                 LS_JOINT_VIS         type          ZVCXI_P0SS_S_JOINT_VIS.
  data:          LR_PR_JOINT          type ref to   ZCL_VCXI_P0SS_PR_JOINT,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        try.
            move-corresponding <S_DATA> to LS_JOINT_GRID.
            check LS_JOINT_GRID-R_GATE is bound.

            move LS_JOINT_GRID-R_GATE->R_CLSPR ?to LR_PR_JOINT.
            check LR_PR_JOINT is bound.

***         Set Values to PR Class
            move-corresponding LS_JOINT_GRID to LS_JOINT_VIS.
            ME->SET_JOINT_VIS( IR_PR_JOINT  = LR_PR_JOINT
                               IS_JOINT_VIS = LS_JOINT_VIS ).

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_JOINT_GRID        type          ZVCXI_P0SS_S_JOINT_GRID.
  data:          LR_PR_JOINT          type ref to   ZCL_VCXI_P0SS_PR_JOINT,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.

        try.
            move-corresponding <S_DATA> to LS_JOINT_GRID.

            move LS_JOINT_GRID-R_GATE->R_CLSPR ?to LR_PR_JOINT.
            check LR_PR_JOINT is bound.

***         Set Values to PR Class
            case E_COLUMN_ID-FIELDNAME.

              when 'FOVRL'.
                case LS_JOINT_GRID-FOVRL.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_JOINT_GRID-FOVRL.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_JOINT_GRID-FOVRL.
                endcase.
                LR_PR_JOINT->SET_FOVRL( IF_FOVRL = LS_JOINT_GRID-FOVRL ).

              when 'FOVRW'.
                case LS_JOINT_GRID-FOVRW.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_JOINT_GRID-FOVRW.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_JOINT_GRID-FOVRW.
                endcase.
                LR_PR_JOINT->SET_FOVRW( IF_FOVRW = LS_JOINT_GRID-FOVRW ).

              when 'FOVRS'.
                case LS_JOINT_GRID-FOVRS.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_JOINT_GRID-FOVRS.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_JOINT_GRID-FOVRS.
                endcase.
                LR_PR_JOINT->SET_FOVRS( IF_FOVRS = LS_JOINT_GRID-FOVRS ).

            endcase.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Hotspot
  set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

endmethod.
method SET_JOINT_VIS.

  data:  LF_MJOIP       type ABAP_BOOL.
  data:  LS_STITP       type ZVCXI_P0SS_S_STITP,
         LS_JOIWI       type ZVCXI_P0S_S_JOIWI,
         LS_JOILE       type ZVCXI_P0S_S_JOILE,
         LS_JOINT_VIS   type ZVCXI_P0SS_S_JOINT_VIS.

*** Multiple Joint Positions allowed?
  LF_MJOIP = ME->R_PR_CLOS->MULTI_JOIPO_ALLOWED( ).

*** Get Current data to do Update only if Value changed.
  LS_JOINT_VIS = ME->GET_JOINT_VIS( IR_PR_JOINT = IR_PR_JOINT ).

*** Joint Type
  if IS_JOINT_VIS-JOITY ne LS_JOINT_VIS-JOITY.
    IR_PR_JOINT->SET_JOITY( IF_JOITY = IS_JOINT_VIS-JOITY
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Joint Positon only for Main Joint or Multiple Joint Positions allwoed
  if ( LS_JOINT_VIS-FMJOI eq ABAP_TRUE   or
       LF_MJOIP           eq abap_true ) and
       IS_JOINT_VIS-JOIPO ne LS_JOINT_VIS-JOIPO.
    IR_PR_JOINT->SET_JOIPO( IF_JOIPO = IS_JOINT_VIS-JOIPO
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Production Pass
  if IS_JOINT_VIS-PPASS ne LS_JOINT_VIS-PPASS.
    IR_PR_JOINT->SET_PPASS( IF_PPASS = IS_JOINT_VIS-PPASS
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Joint Width
  if IS_JOINT_VIS-FOVRW ne LS_JOINT_VIS-FOVRW.
    IR_PR_JOINT->SET_FOVRW( IF_FOVRW = IS_JOINT_VIS-FOVRW ).
  endif.
  if LS_JOINT_VIS-FOVRW eq ABAP_TRUE.
    if IS_JOINT_VIS-JOIWI ne LS_JOINT_VIS-JOIWI.
      move-corresponding IS_JOINT_VIS to LS_JOIWI.
      IR_PR_JOINT->SET_JOIWI( IS_JOIWI = LS_JOIWI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.


*** Joint Length
  if IS_JOINT_VIS-FOVRL ne LS_JOINT_VIS-FOVRL.
    IR_PR_JOINT->SET_FOVRL( IF_FOVRL = IS_JOINT_VIS-FOVRL ).
  endif.
  if LS_JOINT_VIS-FOVRL eq ABAP_TRUE.
    if IS_JOINT_VIS-JOILE ne LS_JOINT_VIS-JOILE.
      move-corresponding IS_JOINT_VIS to LS_JOILE.
      IR_PR_JOINT->SET_JOILE( IS_JOILE = LS_JOILE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.

*** Stitching Settings
  if IS_JOINT_VIS-FOVRS ne LS_JOINT_VIS-FOVRS.
    IR_PR_JOINT->SET_FOVRS( IF_FOVRS = IS_JOINT_VIS-FOVRS ).
  endif.
  if LS_JOINT_VIS-FOVRS eq ABAP_TRUE.
    if IS_JOINT_VIS-NOSTI ne LS_JOINT_VIS-NOSTI.
      IR_PR_JOINT->SET_NOSTI( IF_NOSTI = IS_JOINT_VIS-NOSTI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    if IS_JOINT_VIS-STITP ne LS_JOINT_VIS-STITP.
      move-corresponding IS_JOINT_VIS to LS_STITP.
      IR_PR_JOINT->SET_STITP( IS_STITP = LS_STITP
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.

endmethod.
