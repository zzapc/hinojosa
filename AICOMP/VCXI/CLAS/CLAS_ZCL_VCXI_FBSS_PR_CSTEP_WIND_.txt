
class ZCL_VCXI_FBSS_PR_CSTEP_WIND definition
  public
  inheriting from ZCL_VCXI_FBSS_PR_CSTEP
  create public .

public section.

  constants C_IPRVT_CSTEP_WIND type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_CSTEP_WIND' ##NO_TEXT.
  constants C_PARID_BGPRL type /VCXI/VKS_PARID value 'ZVCXI_FB_BGPRL' ##NO_TEXT.
  constants C_PARID_RLDIA type /VCXI/VKS_PARID value 'ZVCXI_FB_RLDIA' ##NO_TEXT.
  constants C_PARID_WMDRL type /VCXI/VKS_PARID value 'ZVCXI_FB_WMDRL' ##NO_TEXT.

  methods GET_BGPRL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BGPRL) type ZVCXI_FBS_BGPRL
    raising
      /VCXI/CX_CKX .
  methods GET_RLDIA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_RLDIA) type ZVCXI_FBS_S_RLDIA
    raising
      /VCXI/CX_CKX .
  methods GET_WMDRL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WMDRL) type ZVCXI_FBS_S_WMDRL
    raising
      /VCXI/CX_CKX .
  methods SET_BGPRL
    importing
      !IF_BGPRL type ZVCXI_FBS_BGPRL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLDIA
    importing
      !IS_RLDIA type ZVCXI_FBS_S_RLDIA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_WMDRL
    importing
      !IS_WMDRL type ZVCXI_FBS_S_WMDRL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_RLDIA type /VCXI/VKSC_IEVNT value 'RECALC_RLDIA' ##NO_TEXT.
  constants C_IEVNT_O_BGPRL_CHANGED type /VCXI/VKSC_IEVNT value 'BGPRL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLDIA_CHANGED type /VCXI/VKSC_IEVNT value 'RLDIA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WMDRL_CHANGED type /VCXI/VKSC_IEVNT value 'WMDRL_CHANGED' ##NO_TEXT.
  constants C_PI type CHAR10 value '3.14159265' ##NO_TEXT.

  methods CHECK_BGPRL
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RLDIA
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WMDRL
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLDIA
    raising
      /VCXI/CX_CKX .
  methods GET_MS_WNMAT_ADDWT
    returning
      value(RS_ADDWT) type ZVCXI_F0S_S_ADDWT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_HNDDIM
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_PR_CSTEP_WIND definition
class ZCL_VCXI_FBSS_PR_CSTEP_WIND implementation.
  method CHECK_BGPRL.

*** Check Bag/Roll
    if ME->GET_BGPRL( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Bag/Roll is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '490' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Bag/Roll is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '491' ).
      endif.
    endif.

  endmethod.
  method CHECK_RLDIA.

*** Check Roll Diameter
    if ME->GET_RLDIA( )-RLDIA is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Roll Diameter is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '494' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Diameter is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '495' ).
      endif.
    endif.

  endmethod.
  method CHECK_WMDRL.

*** Check Winding Mandrel
    if ME->GET_WMDRL( )-WMDRL is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Winding Mandrel is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '492' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Winding Mandrel is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '493' ).
      endif.
    endif.

  endmethod.
  method GET_BGPRL.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.


    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    RF_BGPRL = LR_BL_BGBPROP->S_WNDIM-BGPRL.

  endmethod.
  method GET_MS_WNMAT_ADDWT.

    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_MS_WNMAT=>C_IPRVT_FB_MS_WNMAT
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
***   Get Additional Weight of Winding Material
      data(LS_ADDWT) = cast ZCL_VCXI_FBSS_PR_MS_WNMAT( LR_GATE->R_CLSPR )->GET_ADDWT( ).

      check LS_ADDWT-ADDWT_UOM is not initial.

      if RS_ADDWT is initial.
        RS_ADDWT = LS_ADDWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ADDWT-ADDWT
                                                            IF_CALCV_UOM_1 = LS_ADDWT-ADDWT_UOM
                                                            IF_CALCV_2     = RS_ADDWT-ADDWT
                                                            IF_CALCV_UOM_2 = RS_ADDWT-ADDWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_ADDWT-ADDWT_UOM
                                                  importing EF_CALCV       = RS_ADDWT-ADDWT
                                                            EF_CALCV_UOM   = RS_ADDWT-ADDWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_RLDIA.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLDIA ).
    RS_RLDIA-RLDIA     = LS_PARAM-ATFLV.
    RS_RLDIA-RLDIA_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Bag/Roll
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BGPRL( ) ).

*** Check Winding Mandrel
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WMDRL( ) ).

*** Check Roll Diameter
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RLDIA( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Bag/Roll
    ME->CHECK_BGPRL( IR_MESSAGE = IR_MESSAGE ).

*** Check Winding Mandrel
    ME->CHECK_WMDRL( IR_MESSAGE = IR_MESSAGE ).

*** Check Roll Diameter
    ME->CHECK_RLDIA( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WMDRL.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WMDRL ).
    RS_WMDRL-WMDRL     = LS_PARAM-ATFLV.
    RS_WMDRL-WMDRL_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_RLDIA.
        ME->HANDLE_RECALC_RLDIA( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


***--------------------------------------------------------------------------------------
*** Only recalculate Handling Dimensions if they are not overridden.
    ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
*** Get Bag Forward Property (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    check LR_BL_BGFPROP is bound.
    data(LS_HNDDIM) = LR_BL_BGFPROP->S_HNDDIM.

*** Use Roll Diameter as Handling Dimension
    data(LS_RLDIA) = ME->GET_RLDIA( ).
    LS_HNDDIM-S_HNDLE = value #( HNDLE     = LS_RLDIA-RLDIA
                                 HNDLE_UOM = LS_RLDIA-RLDIA_UOM ).
    LS_HNDDIM-S_HNDHE = value #( HNDHE     = LS_RLDIA-RLDIA
                                 HNDHE_UOM = LS_RLDIA-RLDIA_UOM ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method HANDLE_RECALC_RLDIA.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_RLLEN type FLOAT.
    data: LS_RLDIA type ZVCXI_FBS_S_RLDIA.


***--------------------------------------------------------------------------------------
*** Only Recalculate Roll Diameter if not overridden
    LS_RLDIA = ME->GET_RLDIA( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.
    clear LS_RLDIA-RLDIA.

***--------------------------------------------------------------------------------------
*** Get Bag/Roll and Winding Mandrel
    data(LF_BGPRL) = ME->GET_BGPRL( ).
    data(LS_WMDRL) = ME->GET_WMDRL( ).

*** Get Handling Dimensions (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = data(LR_BL_BGFPROP) ).
    if LR_BL_BGFPROP is bound.
***   Calculate Roll Length to Handling Height Unit
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LR_BL_BGFPROP->S_HNDDIM-HNDLE * LF_BGPRL
                                                         IF_UOM_IN    = LR_BL_BGFPROP->S_HNDDIM-HNDLE_UOM
                                                         IF_UOM_OUT   = LR_BL_BGFPROP->S_HNDDIM-HNDHE_UOM
                                               importing EF_VALUE_OUT = LF_RLLEN ).



***   Roll Diameter = Square Root ( (Roll Length * Handling Height * 4 / Pi) + (Winding Mandrel^2) ).
      LS_RLDIA-RLDIA     = SQRT( ( LF_RLLEN * LR_BL_BGFPROP->S_HNDDIM-HNDHE * 4 / C_PI ) + ( LS_WMDRL-WMDRL * LS_WMDRL-WMDRL ) ).
      LS_RLDIA-RLDIA_UOM = LR_BL_BGFPROP->S_HNDDIM-HNDHE_UOM.
    endif.

    ME->SET_RLDIA( IS_RLDIA = LS_RLDIA ).

  endmethod.
  method SET_BGPRL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGPRL ).

    move IF_BGPRL     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGPRL_CHANGED ).
    endif.

  endmethod.
  method SET_RLDIA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Get current Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLDIA ).

    if IS_RLDIA is supplied.
      LS_PARAM-ATFLV = IS_RLDIA-RLDIA.
      LS_PARAM-UNIT  = IS_RLDIA-RLDIA_UOM.
    endif.

    if IF_FOVRR is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLDIA_CHANGED ).
    endif.

  endmethod.
  method SET_WMDRL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WMDRL ).

    LS_PARAM-ATFLV = IS_WMDRL-WMDRL.
    LS_PARAM-UNIT  = IS_WMDRL-WMDRL_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WMDRL_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

*** Super
    SUPER->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing EF_SETBY      = EF_SETBY
                                                        ER_BL_BGFPROP = ER_BL_BGFPROP ).
    check ER_BL_BGFPROP is bound.

***--------------------------------------------------------------------------------------
*** Add Additional Weight of all Winding Material
    ER_BL_BGFPROP->MERGE_ADDWT( IS_ADDWT = ME->GET_MS_WNMAT_ADDWT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Bag Forward Property XML
    if EF_BGFPX is requested.
      EF_BGFPX = ER_BL_BGFPROP->GET_BGFPX( ).
    endif.

  endmethod.
