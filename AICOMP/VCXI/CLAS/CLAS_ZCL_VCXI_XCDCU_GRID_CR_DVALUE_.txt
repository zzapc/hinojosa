
class ZCL_VCXI_XCDCU_GRID_CR_DVALUE definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_OVRRH,
                  OVRRH type ZVCXI_XCD_OVRRH,
                  OVRRH_DESCR type /VCXI/CKX_DESCR,
         end of YS_OVRRH .
  types:
    YT_OVRRH type standard table of YS_OVRRH with default key .

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC .
  data R_PART_DEFAU type ref to ZCL_VCXI_XCDCU_CR_PART_DEFAU .
  data T_OVRRH type YT_OVRRH .

  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods CALL_SHLP_IEXIT
    importing
      !IF_PARID type /VCXI/VKS_PARID
    returning
      value(RF_IEXIT) type ZVCXI_XCD_IEXIT
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_PAVAL
    importing
      !IF_PARID type /VCXI/VKS_PARID
    returning
      value(RF_PAVAL) type ZVCXI_XCD_PAVAL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods ADD_DVALUE
    raising
      /VCXI/CX_CKX .
  methods DELETE_DVALUE
    importing
      !IT_CR_DVALUE type ZVCXI_XCDC_TT_CR_DVALUE
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods INIT_OVRRH_DESCR
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_CR_DVALUE definition
class ZCL_VCXI_XCDCU_GRID_CR_DVALUE implementation.
method ADD_DVALUE.

  data:          LS_RETURN          type                   DDSHRETVAL,
                 LS_CD_DVALUE       type                   ZVCXI_XCDC_S_REGDVC_DEFAUEL,
                 LS_CR_DVALUE       type                   ZVCXI_XCDC_S_CR_DVALUE.
  data:          LT_RETURN          type table of          DDSHRETVAL,
                 LT_CD_DVALUE_SHLP  type standard table of ZVCXI_XCDCU_S_CD_DVALUE_SHLP.
  field-symbols: <S_CD_DVALUE_SHLP> type                   ZVCXI_XCDCU_S_CD_DVALUE_SHLP.

  check ME->R_CONDREC                      is bound and
        ME->R_CONDREC->R_CONDDEF           is bound and
        ME->R_CONDREC->R_CONDDEF->R_REGDVC is bound.
  loop at ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL into LS_CD_DVALUE.
*** Show only DVALUEs which are not already used.
    read table ME->R_CONDREC->T_CR_DVALUE
    with key PARID = LS_CD_DVALUE-PARID
    transporting no fields.
    check SY-SUBRC ne 0.

    append initial line to LT_CD_DVALUE_SHLP assigning <S_CD_DVALUE_SHLP>.
    move LS_CD_DVALUE-PARID to <S_CD_DVALUE_SHLP>-PARID.

  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_CD_DVALUE_SHLP'
      RETFIELD        = 'PARID'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_CD_DVALUE_SHLP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.
    clear: LS_CR_DVALUE-PARID.
    move  LS_RETURN-FIELDVAL to LS_CR_DVALUE-PARID.

*** Add Default Element
    ME->R_CONDREC->ADD_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).

  endloop.

endmethod.
method CALL_SHLP_IEXIT.

  data: LF_DISPLAY           type          ABAP_BOOL.
  data: LS_DEFAUELEX         type          ZVCXI_XCDC_S_REGDVC_DEFAUELEX,
        LS_CD_DVALUE_E_SHLP  type          ZVCXI_XCDCU_S_CD_DVALUE_E_SHLP,
        LS_RETURN            type          DDSHRETVAL.
  data: LT_RETURN            type table of DDSHRETVAL,
        LT_CD_DVALUE_E_SHLP  type table of ZVCXI_XCDCU_S_CD_DVALUE_E_SHLP.

  if ME->F_LOCKED eq ABAP_FALSE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  loop at ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUELEX into LS_DEFAUELEX
  where PARID = IF_PARID.
    move-corresponding LS_DEFAUELEX to LS_CD_DVALUE_E_SHLP.
    append LS_CD_DVALUE_E_SHLP to LT_CD_DVALUE_E_SHLP.
  endloop.

  if LT_CD_DVALUE_E_SHLP is not initial.
    call function 'F4IF_INT_TABLE_VALUE_REQUEST'
      exporting
        DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_CD_DVALUE_E_SHLP'
        RETFIELD        = 'IEXIT'
        VALUE_ORG       = 'S'
        MULTIPLE_CHOICE = SPACE
        DISPLAY         = LF_DISPLAY
      tables
        VALUE_TAB       = LT_CD_DVALUE_E_SHLP
        RETURN_TAB      = LT_RETURN
      exceptions
        PARAMETER_ERROR = 1
        NO_VALUES_FOUND = 2
        others          = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    read table LT_RETURN into LS_RETURN index 1.
    move LS_RETURN-FIELDVAL to RF_IEXIT.

  else.
*** No Values available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                          IF_MSGID = 'ZVCXI_XCDCU'
                                          IF_MSGNO = '203' ).
  endif.


endmethod.
method CALL_SHLP_PAVAL.

  data: LF_DISPLAY     type          ABAP_BOOL,
        LF_TABNAME     type          TABNAME,
        LF_FIELDNAME   type          FIELDNAME,
        LF_SEARCHHELP  type          SHLPNAME.
  data: LS_DEFAUEL     type          ZVCXI_XCDC_S_REGDVC_DEFAUEL,
        LS_SHLP        type          SHLP_DESCR_T,
        LS_RETURN      type          DDSHRETVAL.
  data: LT_RETURN      type table of DDSHRETVAL.

  if ME->F_LOCKED eq ABAP_FALSE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  read table ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL into LS_DEFAUEL
  with key PARID = IF_PARID.

  call function 'F4IF_DETERMINE_SEARCHHELP'
    exporting
      TABNAME           = LS_DEFAUEL-DATEL
      FIELDNAME         = SPACE
    importing
      SHLP              = LS_SHLP
    exceptions
      FIELD_NOT_FOUND   = 1
      NO_HELP_FOR_FIELD = 2
      INCONSISTENT_HELP = 3
      others            = 4.

  if SY-SUBRC eq 0.

*** Domain Values or Search help Values
    if LS_SHLP-SHLPTYPE eq 'FV'.
      move LS_SHLP-SHLPNAME to LF_TABNAME.
    else.
      move 'ZVCXI_XCD_TD330' to LF_TABNAME.
      move 'PAVAL'           to LF_FIELDNAME.
      move LS_SHLP-SHLPNAME  to LF_SEARCHHELP.
    endif.

    call function 'F4IF_FIELD_VALUE_REQUEST'
      exporting
        TABNAME           = LF_TABNAME
        FIELDNAME         = LF_FIELDNAME
        SEARCHHELP        = LF_SEARCHHELP
        DISPLAY           = LF_DISPLAY
      tables
        RETURN_TAB        = LT_RETURN
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3
        NO_VALUES_FOUND   = 4
        others            = 5.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    read table LT_RETURN into LS_RETURN index 1.
    move LS_RETURN-FIELDVAL to RF_PAVAL.

  else.
*** No SearchHelp available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                          IF_MSGID = 'ZVCXI_XCDCU'
                                          IF_MSGNO = '202' ).
  endif.

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_CR_DVALUE_GRID'
                      IF_CONTAINER_NAME = '0130CC_GRID_DVALUE'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CONDREC.
    catch CX_SY_MOVE_CAST_ERROR.
***   Condition Record Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDC'
          IF_MSGNO = '252' ).
  endtry.

  check ME->R_CONDREC is bound.
  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

*** Initialize Override Handling Option Description
  ME->INIT_OVRRH_DESCR( ).

endmethod.
method DELETE_DVALUE.

  data: LS_CR_DVALUE type ZVCXI_XCDC_S_CR_DVALUE.

  loop at IT_CR_DVALUE into LS_CR_DVALUE.
*** Delete by ID
    ME->R_CONDREC->DELETE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>     type                   LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'PAVAL' or 'IEXIT' or 'OVRRH'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.
        move ABAP_TRUE to <S_FCAT>-F4AVAILABL.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CR_DVALUE_GRID    type          ZVCXI_XCDCU_S_CR_DVALUE_GRID,
                 LS_CR_DVALUE         type          ZVCXI_XCDC_S_CR_DVALUE,
                 LS_DEFAUEL           type          ZVCXI_XCDC_S_REGDVC_DEFAUEL,
                 LS_OVRRH             type          YS_OVRRH.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Values
  loop at ME->R_CONDREC->T_CR_DVALUE into LS_CR_DVALUE.
    clear: LS_CR_DVALUE_GRID.

    move-corresponding LS_CR_DVALUE to LS_CR_DVALUE_GRID.

    read table ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEL
               into LS_DEFAUEL with key PARID = LS_CR_DVALUE-PARID.
    if SY-SUBRC = 0.
      move-corresponding LS_DEFAUEL to LS_CR_DVALUE_GRID.
    endif.

*** Get Description of Handling Option - Override
    read table ME->T_OVRRH with key OVRRH = LS_CR_DVALUE_GRID-OVRRH into LS_OVRRH.
    if SY-SUBRC = 0.
      move LS_OVRRH-OVRRH_DESCR to LS_CR_DVALUE_GRID-OVRRH_DESCR.
    endif.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CR_DVALUE_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED.

  data:          LS_CR_DVALUE         type          ZVCXI_XCDC_S_CR_DVALUE,
                 LS_CR_DVALUE_GRID    type          ZVCXI_XCDCU_S_CR_DVALUE_GRID,
                 LS_GOOD_CELLS        type          LVC_S_MODI.
  data:          LF_IEXIT             type          ZVCXI_XCD_IEXIT.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  try.

      SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                            E_ONF4          = E_ONF4
                                            E_ONF4_BEFORE   = E_ONF4_BEFORE
                                            E_ONF4_AFTER    = E_ONF4_AFTER
                                            E_UCOMM         = E_UCOMM ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS.

        clear: LS_CR_DVALUE_GRID, LS_CR_DVALUE.
        read table <T_DATA> assigning <S_DATA> index LS_GOOD_CELLS-ROW_ID.
        move-corresponding <S_DATA> to LS_CR_DVALUE_GRID.
        move-corresponding LS_CR_DVALUE_GRID to LS_CR_DVALUE.

***     Check Default Element
        if LS_GOOD_CELLS-FIELDNAME eq 'IEXIT'.
          assign component LS_GOOD_CELLS-FIELDNAME of structure LS_CR_DVALUE to <F_FIELD>.
          check SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to <F_FIELD>.

          check <f_field> is not initial.

          select single IEXIT from ZVCXI_XCD_TC131
          into LF_IEXIT
          where PARID = LS_CR_DVALUE-PARID
            and IEXIT = <F_FIELD>.

***       Add Protocol - Please maintain existing Default Exit for Default Value Exit.
          check SY-SUBRC ne 0.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_XCDCU'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '201'
                                                         I_FIELDNAME = 'IEXIT'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).

          ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

        endif.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_CR_DVALUE         type          ZVCXI_XCDC_S_CR_DVALUE.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_CR_DVALUE.
        ME->R_CONDREC->UPDATE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LF_GREGE             type          /VCXI/CKR_GREGE.
  data:          LS_CR_DVALUE_GRID    type          ZVCXI_XCDCU_S_CR_DVALUE_GRID.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        try.
            move-corresponding <S_DATA> to LS_CR_DVALUE_GRID.

***         Handle Double Click
            case E_COLUMN-FIELDNAME.
              when 'IEXIT'.

                check LS_CR_DVALUE_GRID-IEXIT            is not initial and
                      ME->R_CONDREC->R_CONDDEF->R_REGDVC is bound.

                LF_GREGE = ME->R_CONDREC->R_CONDDEF->R_REGDVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***             Call Registry UI
                call function '/VCXI/CKRU_REGISTRY_START'
                  starting new task 'REG'
                  exporting
                    IF_GREGE = LF_GREGE.


            endcase.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LS_CR_DVALUE_GRID    type          ZVCXI_XCDCU_S_CR_DVALUE_GRID,
                 LS_CR_DVALUE         type          ZVCXI_XCDC_S_CR_DVALUE.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        try.
            move-corresponding <S_DATA> to LS_CR_DVALUE_GRID.

            check ME->R_CONDREC                      is bound and
                  ME->R_CONDREC->R_CONDDEF           is bound and
                  ME->R_CONDREC->R_CONDDEF->R_REGDVC is bound.

***         Handle F4 call
            case E_FIELDNAME.
              when 'IEXIT'.
                LS_CR_DVALUE_GRID-IEXIT = ME->CALL_SHLP_IEXIT( IF_PARID = LS_CR_DVALUE_GRID-PARID ).
                if ME->F_LOCKED eq ABAP_TRUE.
                  move-corresponding LS_CR_DVALUE_GRID to LS_CR_DVALUE.
                  ME->R_CONDREC->UPDATE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
                endif.
                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
              when 'PAVAL'.
                LS_CR_DVALUE_GRID-PAVAL = ME->CALL_SHLP_PAVAL( IF_PARID = LS_CR_DVALUE_GRID-PARID ).
                if ME->F_LOCKED eq ABAP_TRUE.
                  move-corresponding LS_CR_DVALUE_GRID to LS_CR_DVALUE.
                  ME->R_CONDREC->UPDATE_CR_DVALUE( IS_CR_DVALUE = LS_CR_DVALUE ).
                endif.
                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
            endcase.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_CR_DVALUE    type          ZVCXI_XCDC_TT_CR_DVALUE.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_CR_DVALUE>   type          ZVCXI_XCDC_S_CR_DVALUE,
                 <S_DATA>        type          any.

  try.

***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***       Add new Default Value
          ME->ADD_DVALUE( ).

        when C_FUNC_DEL.
***       Delete Default Value
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Default Value's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_DVALUE assigning <S_CR_DVALUE>.
            move-corresponding <S_DATA> to <S_CR_DVALUE>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_DVALUE assigning <S_CR_DVALUE>.
            move-corresponding <S_DATA> to <S_CR_DVALUE>.
          endloop.

***       Delete Default Value's
          ME->DELETE_DVALUE( IT_CR_DVALUE = LT_CR_DVALUE ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method INIT_OVRRH_DESCR.

  data:          LT_DD07V  type table of DD07V.
  data:          LS_DD07V  type          DD07V.
  field-symbols: <S_OVRRH> type          YS_OVRRH.

*** Get Domain Values
  call function 'DDIF_DOMA_GET'
    exporting
      NAME          = 'ZVCXI_XCD_OVRRH'
      LANGU         = SY-LANGU
    tables
      DD07V_TAB     = LT_DD07V
    exceptions
      ILLEGAL_INPUT = 1
      others        = 2.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at LT_DD07V into LS_DD07V.
    append initial line to ME->T_OVRRH assigning <S_OVRRH>.
    move LS_DD07V-DOMVALUE_L to <S_OVRRH>-OVRRH.
    move LS_DD07V-DDTEXT     to <S_OVRRH>-OVRRH_DESCR.
  endloop.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_ONF4         for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
