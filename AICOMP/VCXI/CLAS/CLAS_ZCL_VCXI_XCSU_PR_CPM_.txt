
class ZCL_VCXI_XCSU_PR_CPM definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_CPM type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSU_CPM' ##NO_TEXT.
  constants C_PARID_PMATY type /VCXI/VKS_PARID value 'ZVCXI_XC_PMATY' ##NO_TEXT.

  methods CALC_ADJ_DIMEN
    importing
      !IT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    returning
      value(RT_DIMEN) type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods CALC_ADJ_LIMIT
    importing
      !IT_LIMIT type ZVCXI_XCSU_TT_LIMIT
    returning
      value(RT_LIMIT) type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods CALC_DETAILS
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_CONSC
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_CONSC) type ZVCXI_XCSU_CONSC
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_PAMAI
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_PAMAI) type ZVCXI_XCSU_PAMAI
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_PMATY
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_PMATY) type ZVCXI_XCSU_PMATY
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CREATE_VCPMC
    importing
      !IF_VCPMC type ZVCXI_XCSU_VCPMC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_VCPMC
    returning
      value(RT_VCPMC) type ZVCXI_XCSU_TT_VCPMC
    raising
      /VCXI/CX_CKX .
  methods GET_CONSC
    exporting
      !EF_CONSC type ZVCXI_XCSU_CONSC
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_CONSC_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COUNT
    returning
      value(RF_COUNT) type /VCXI/VKS_POSID
    raising
      /VCXI/CX_CKX .
  methods GET_CPMCNF_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SHIPMGR
    exporting
      !EF_CPACK type ZVCXI_XCSU_CPACK
      !EF_SHSCH type ZVCXI_XCSU_SHSCH
      !ER_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SHIPUNIT
    exporting
      !EF_SHUNT type ZVCXI_XCSU_SHUNT
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ER_NEXT_PACKMAT type ref to /VCXI/CL_VKSR_GATE
      !ER_PREV_PACKMAT type ref to /VCXI/CL_VKSR_GATE
      !EF_SHUTY type ZVCXI_XCSU_SHUTY
      !ES_TBQTY type ZVCXI_XCSU_S_TBQTY
    raising
      /VCXI/CX_CKX .
  methods GET_EFFCT
    exporting
      !ET_EFFCT type ZVCXI_XCSU_TT_EFFCT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_CONSC
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_EFFCT
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PMQTY
    returning
      value(RF_FOVRR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PAMAI
    returning
      value(RF_PAMAI) type ZVCXI_XCSU_PAMAI
    raising
      /VCXI/CX_CKX .
  methods GET_PAMAI_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY
    returning
      value(RF_PMATY) type ZVCXI_XCSU_PMATY
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PMQTY
    exporting
      !ES_PMQTY type ZVCXI_XCSU_S_PMQTY
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    returning
      value(RF_TEXT) type TEXT30
    raising
      /VCXI/CX_CKX .
  methods GET_VCPMC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_PMATY
    raising
      /VCXI/CX_CKX .
  methods SET_CONSC
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EFFCT
    importing
      !IT_EFFCT type ZVCXI_XCSU_TT_EFFCT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_CONSC
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PMQTY
    importing
      !IF_FOVRR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_PAMAI
    importing
      !IF_PAMAI type ZVCXI_XCSU_PAMAI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PMQTY
    importing
      !IS_PMQTY type ZVCXI_XCSU_S_PMQTY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_TEXT type TEXT30
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_DIMID_DIMLESS type DIMID value 'AAAADL' ##NO_TEXT.
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DETAILS type /VCXI/VKSC_IEVNT value 'RECALC_DETAILS' ##NO_TEXT.
  constants C_IEVNT_I_REDET_EFFCT type /VCXI/VKSC_IEVNT value 'REDET_EFFCT' ##NO_TEXT.
  constants C_IEVNT_I_RESET_PMATY type /VCXI/VKSC_IEVNT value 'RESET_PMATY' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_CONSC_CHANGED type /VCXI/VKSC_IEVNT value 'CONSC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_EFFCT_CHANGED type /VCXI/VKSC_IEVNT value 'EFFCT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PAMAI_CHANGED type /VCXI/VKSC_IEVNT value 'PAMAI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PMATY_CHANGED type /VCXI/VKSC_IEVNT value 'PMATY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PMQTY_CHANGED type /VCXI/VKSC_IEVNT value 'PMQTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REQUEST_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'REQUEST_SET_DEFAULT' ##NO_TEXT.
  constants C_PARID_CONSC type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSC' ##NO_TEXT.
  constants C_PARID_EFFCT type /VCXI/VKS_PARID value 'ZVCXI_XC_EFFCT' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_PAMAI type /VCXI/VKS_PARID value 'ZVCXI_XC_PAMAI' ##NO_TEXT.
  constants C_PARID_PMQTY_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PMQTY_A' ##NO_TEXT.
  constants C_PARID_PMQTY_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PMQTY_L' ##NO_TEXT.
  constants C_PARID_PMQTY_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PMQTY_P' ##NO_TEXT.
  constants C_PARID_PMQTY_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PMQTY_W' ##NO_TEXT.
  constants C_PARID_TEXT type /VCXI/VKS_PARID value 'ZVCXI_XC_TEXT' ##NO_TEXT.
  data F_DIMID type DIMID .
  data F_PARID_PMQTY type /VCXI/VKS_PARID .
  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU .
  data R_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR .
  data S_COMOD type ZVCXI_XCSU_S_COMOD .

  methods CHECK_CONSC
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PMATY
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PMQTY
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_VCPMC
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CLEAR_FOR_PMATY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DETAILS
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REDET_EFFCT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RESET_PMATY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods INIT_CUST_SHIPU
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
  methods INIT_EFFCT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_CPM definition
class ZCL_VCXI_XCSU_PR_CPM implementation.
method CALC_ADJ_DIMEN.

  data: LF_MSGV1 type SYMSGV,
        LF_MSGV2 type SYMSGV,
        LF_FMNDI type ZVCXI_XCSU_FMNDI.
  data: LS_EFFCT type ZVCXI_XCSU_S_EFFCT,
        LS_DIMEN type ZVCXI_XCSU_S_DIMEN.
  data: LT_EFFCT type ZVCXI_XCSU_TT_EFFCT.
  data: LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
        LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
        LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
        LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.

  check ME->R_CUST_SHIPU is bound.

*** All dimension input should be retained (although possibly adjusted later)
  append lines of IT_DIMEN to RT_DIMEN.

  ME->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

  loop at LT_EFFCT into LS_EFFCT.
    LF_FMNDI = ME->R_CUST_SHIPU->GET_FMNDI_FOR_EFFCT( IF_EFFCT = LS_EFFCT-EFFCT ).
    if LF_FMNDI is initial.
      continue.
    endif.

    read table RT_DIMEN into LS_DIMEN with key DIMEN = LS_EFFCT-DIMEN.
    if SY-SUBRC ne 0.
      continue.
    endif.

    try.
        call function LF_FMNDI
          exporting
            IS_DIMEN = LS_DIMEN
            IS_EFFCT = LS_EFFCT
          importing
            ES_DIMEN = LS_DIMEN.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***     Function Module call failed: Could not call the function &1.
        move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '001'
                          F_MSGV1 = LF_MSGV1.

      catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
        move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
        move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
        move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '004'
                          F_MSGV1 = LF_MSGV1.
    endtry.
    modify RT_DIMEN from LS_DIMEN transporting DIMVA where DIMEN = LS_DIMEN-DIMEN.
  endloop.

endmethod.
method CALC_ADJ_LIMIT.

  data:          LF_MSGV1              type        SYMSGV,
                 LF_MSGV2              type        SYMSGV,
                 LF_INITIAL_VALID      type        ABAP_BOOL.
  data:          LS_EFFCT              type        ZVCXI_XCSU_S_EFFCT,
                 LS_LIMIT              type        ZVCXI_XCSU_S_LIMIT,
                 LS_EFFCT_LIMIT        type        ZVCXI_XCS_TC131.
  data:          LT_EFFCT              type        ZVCXI_XCSU_TT_EFFCT,
                 LT_EFFCT_LIMIT        type        ZVCXI_XCSU_TT_EFFCT_LIMIT.
  data:          LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_LIMIT>             type        ZVCXI_XCSU_S_LIMIT.

  check ME->R_CUST_SHIPU is bound.

*** All limits input should be retained (although possibly adjusted later)
  append lines of IT_LIMIT to RT_LIMIT.

  ME->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

  loop at LT_EFFCT into LS_EFFCT.
    LT_EFFCT_LIMIT = ME->R_CUST_SHIPU->GET_LIMIT_SET_FOR_EFFCT( IF_EFFCT = LS_EFFCT-EFFCT ).

    loop at LT_EFFCT_LIMIT into LS_EFFCT_LIMIT.
      clear LS_LIMIT.
      read table RT_LIMIT into LS_LIMIT with key DIMEN = LS_EFFCT-DIMEN
                                                 LIMIT = LS_EFFCT_LIMIT-LIMIT.
      if SY-SUBRC ne 0.
        LS_LIMIT-LIMIT      = LS_EFFCT_LIMIT-LIMIT.
        LS_LIMIT-DIMVA      = LS_EFFCT-DIMVA.
        LS_LIMIT-DIMVA_UOM  = LS_EFFCT-DIMVA_UOM.
      endif.

      if LS_EFFCT_LIMIT-FMNLI is not initial.
        try.
            call function LS_EFFCT_LIMIT-FMNLI
              exporting
                IS_LIMIT         = LS_LIMIT
                IS_EFFCT         = LS_EFFCT
              importing
                ES_LIMIT         = LS_LIMIT
                ES_INITIAL_VALID = LF_INITIAL_VALID.

          catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***         Function Module call failed: Could not call the function &1.
            move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
            raise exception type /VCXI/CX_CKX
                            exporting
                              F_MSGTY = 'E'
                              F_MSGID = 'ZVCXI_XCS'
                              F_MSGNO = '001'
                              F_MSGV1 = LF_MSGV1.

          catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***         Function Module call failed: Parameter &1 in function &2 missing.
            move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
            move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
            raise exception type /VCXI/CX_CKX
                            exporting
                              F_MSGTY = 'E'
                              F_MSGID = 'ZVCXI_XCS'
                              F_MSGNO = '003'
                              F_MSGV1 = LF_MSGV1
                              F_MSGV2 = LF_MSGV2.

          catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***         Function Module call failed: Obligatory parameter &2 of &2 not filled.
            move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
            move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
            raise exception type /VCXI/CX_CKX
                            exporting
                              F_MSGTY = 'E'
                              F_MSGID = 'ZVCXI_XCS'
                              F_MSGNO = '003'
                              F_MSGV1 = LF_MSGV1
                              F_MSGV2 = LF_MSGV2.

          catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***         Function Module call failed: Unknown Error while calling function &1.
            move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
            raise exception type /VCXI/CX_CKX
                            exporting
                              F_MSGTY = 'E'
                              F_MSGID = 'ZVCXI_XCS'
                              F_MSGNO = '004'
                              F_MSGV1 = LF_MSGV1.
        endtry.
      else.
        LF_INITIAL_VALID = ABAP_FALSE.
      endif.

***   only update return limits with intial valids if function deems it to be ok
      if LS_LIMIT-DIMVA is not initial or LF_INITIAL_VALID eq ABAP_TRUE.
        read table RT_LIMIT assigning <S_LIMIT> with key LIMIT = LS_LIMIT-LIMIT
                                                         DIMEN = LS_LIMIT-DIMEN.
        if SY-SUBRC eq 0.
          <S_LIMIT>-DIMVA = LS_LIMIT-DIMVA.
          <S_LIMIT>-DIMVA_UOM  = LS_LIMIT-DIMVA_UOM.
        else.
          append LS_LIMIT to RT_LIMIT.
        endif.
      endif.
    endloop.
  endloop.

endmethod.
method CALC_DETAILS.

  data:          LF_MSGV1              type        SYMSGV,
                 LF_MSGV2              type        SYMSGV,
                 LF_PMATY              type        ZVCXI_XCSU_PMATY,
                 LF_PMATN              type        ZVCXI_XCSU_PMATN,
                 LF_CONSC              type        ZVCXI_XCSU_CONSC,
                 LF_FMNPA              type        ZVCXI_XCSU_FMNPA,
                 LF_FOVRR_CONSC        type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_PMQTY        type        ZVCXI_XCS_FOVRR,
                 LF_FOVRR_EFFCT        type        ZVCXI_XCS_FOVRR,
                 LF_UPDATE_CONSC       type        ABAP_BOOL,
                 LF_UPDATE_PMQTY       type        ABAP_BOOL,
                 LF_UPDATE_EFFCT       type        ABAP_BOOL.
  data:          LS_PMQTY              type        ZVCXI_XCSU_S_PMQTY.
  data:          LT_EFFCT              type        ZVCXI_XCSU_TT_EFFCT,
                 LT_DIMEN              type        ZVCXI_XCSU_TT_DIMEN.
  data:          LR_CUST_PACKMAT       type ref to ZCL_VCXI_XCSU_CUST_PACKMAT,
                 LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
                 LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
                 LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
                 LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.
  field-symbols: <S_EFFCT>             type        ZVCXI_XCSU_S_EFFCT.

  check ME->R_CUST_SHIPU is bound.

  LF_PMATY = GET_PMATY( ).
  GET_CONSC( importing EF_CONSC = LF_CONSC ).
  GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
  GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

  LF_FMNPA = ME->R_CUST_SHIPU->GET_FMNPA_FOR_PMATY( IF_PMATY = LF_PMATY ).

  LF_FOVRR_CONSC = ME->GET_FOVRR_CONSC( ).
  LF_FOVRR_EFFCT = ME->GET_FOVRR_EFFCT( ).
  LF_FOVRR_PMQTY = ME->GET_FOVRR_PMQTY( ).

*** retrieve dimensions of shipping unit
  ME->GET_DETAIL_SHIPUNIT( importing ET_DIMEN = LT_DIMEN ).

*** only execute if type and material are entered and a function moduel exists
  if LF_PMATY is not initial and
     LF_FMNPA is not initial.

    try.
        call function LF_FMNPA
          exporting
            IF_PMATY        = LF_PMATY
            IF_PMATN        = LF_PMATN
            IF_CONSC        = LF_CONSC
            IF_FOVRR_CONSC  = LF_FOVRR_CONSC
            IS_PMQTY        = LS_PMQTY
            IF_FOVRR_PMQTY  = LF_FOVRR_PMQTY
            IT_EFFCT        = LT_EFFCT
            IF_FOVRR_EFFCT  = LF_FOVRR_EFFCT
            IT_DIMEN        = LT_DIMEN
            IR_CUST_SHIPU   = ME->R_CUST_SHIPU
            IR_CUST_PACKMAT = LR_CUST_PACKMAT
            IS_COMOD        = ME->S_COMOD
          importing
            EF_CONSC        = LF_CONSC
            EF_UPDATE_CONSC = LF_UPDATE_CONSC
            ES_PMQTY        = LS_PMQTY
            EF_UPDATE_PMQTY = LF_UPDATE_PMQTY
            ET_EFFCT        = LT_EFFCT
            EF_UPDATE_EFFCT = LF_UPDATE_EFFCT.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***     Function Module call failed: Could not call the function &1.
        move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '001'
                          F_MSGV1 = LF_MSGV1.

      catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
        move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
        move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
        move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '004'
                          F_MSGV1 = LF_MSGV1.

    endtry.

    if LF_UPDATE_CONSC eq ABAP_TRUE and LF_FOVRR_CONSC ne ABAP_TRUE.
      ME->SET_CONSC( IF_CONSC = LF_CONSC ).
    endif.

    if LF_UPDATE_PMQTY eq ABAP_TRUE and LF_FOVRR_PMQTY ne ABAP_TRUE.
***   Packaging Material Quantity can not be less than zero after function call
      if LS_PMQTY-PMQTY lt 0.
        LS_PMQTY-PMQTY = 0.
      endif.
      ME->SET_PMQTY( IS_PMQTY = LS_PMQTY ).
    endif.

    if LF_UPDATE_EFFCT eq ABAP_TRUE and LF_FOVRR_EFFCT ne ABAP_TRUE.
***   Dimension Effects should not be zero after function call
      loop at LT_EFFCT assigning <S_EFFCT>.
        if <S_EFFCT>-DIMVA lt 0.
          <S_EFFCT>-DIMVA = 0.
        endif.
      endloop.

      ME->SET_EFFCT( IT_EFFCT = LT_EFFCT ).
    endif.

  endif.

endmethod.
method CALL_SHLP_CONSC.

  data: LF_PMATY   type ZVCXI_XCSU_PMATY,
        LF_WERKS   type WERKS_D,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  LF_WERKS = ME->GET_WERKS( ).
  LF_PMATY = ME->GET_PMATY( ).

  RF_CONSC = ZCL_VCXI_XCSU_SHLP_CONSC=>CALL_SHLP( IF_PMATY   = LF_PMATY
                                                  IF_DISPLAY = LF_DISPLAY
                                                  IF_WERKS   = LF_WERKS ).

endmethod.
method CALL_SHLP_PAMAI.

  data: LF_PMATY   type ZVCXI_XCSU_PMATY,
        LF_WERKS   type WERKS_D,
        LF_CPACK   type ZVCXI_XCSU_CPACK,
        LF_SHUTY   type ZVCXI_XCSU_SHUTY,
        LF_SHUNT   type ZVCXI_XCSU_SHUNT,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  LF_PMATY = ME->GET_PMATY( ).
  LF_WERKS = ME->GET_WERKS( ).

  ME->GET_DETAIL_SHIPMGR( importing EF_CPACK = LF_CPACK ).

  ME->GET_DETAIL_SHIPUNIT( importing EF_SHUNT = LF_SHUNT
                                     EF_SHUTY = LF_SHUTY ).



  RF_PAMAI = ZCL_VCXI_XCSU_SHLP_PAMAI=>CALL_SHLP( IF_WERKS   = LF_WERKS
                                                  IF_CPACK   = LF_CPACK
                                                  IF_SHUTY   = LF_SHUTY
                                                  IF_SHUNT   = LF_SHUNT
                                                  IF_PMATY   = LF_PMATY
                                                  IF_DISPLAY = LF_DISPLAY ).

endmethod.
method CALL_SHLP_PMATY.

  data: LF_SHUNT   type ZVCXI_XCSU_SHUNT,
        LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  ME->GET_DETAIL_SHIPUNIT( importing EF_SHUNT = LF_SHUNT ).

  RF_PMATY = ZCL_VCXI_XCSU_SHLP_PMATY=>CALL_SHLP( IF_SHUNT   = LF_SHUNT
                                                  IF_DISPLAY = LF_DISPLAY ).

endmethod.
method CHECK_CONSC.
*** RF_SUBRC = 0 => Consumption Scheme is maintained.
*** RF_SUBRC = 1 => Consumption Scheme is not maintained.
*** RF_SUBRC = 2 => Consumption Scheme is not vaild for Packaging Material Type.
*** RF_SUBRC = 3 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 4 => Consumption Scheme is not vaild for Packaging Material Type and Plant.

  data:          LF_PMATY  type ZVCXI_XCSU_PMATY,
                 LF_WERKS  type WERKS_D,
                 LF_CONSC  type ZVCXI_XCSU_CONSC.
  data:          LT_CONSC  type ZVCXI_XCSU_TT_CONSC.

  LF_WERKS = ME->GET_WERKS( ).
  LF_PMATY = ME->GET_PMATY( ).
  ME->GET_CONSC( importing EF_CONSC = LF_CONSC ).

***--------------------------------------------------------------------------------------
*** Start Positiv
  RF_SUBRC = 0.

***--------------------------------------------------------------------------------------
*** Check if it is initial or not
  if LF_CONSC is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid vor Packaging Material Type
  LT_CONSC = ME->R_CUST_SHIPU->GET_CONSC_FOR_PMATY( IF_PMATY = LF_PMATY ).
  read table LT_CONSC with key CONSC = LF_CONSC transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check if it is valid vor Packaging Material Type and Plant
  LT_CONSC = ME->R_CUST_SHIPU->GET_CONSC_FOR_PMATY( IF_PMATY = LF_PMATY
                                                    IF_WERKS = LF_WERKS ).
  read table LT_CONSC with key CONSC = LF_CONSC transporting no fields.

  if SY-SUBRC ne 0.
    RF_SUBRC = 4.
    exit.
  endif.

endmethod.
method CHECK_PMATY.
*** RF_SUBRC = 0 => Packaging Material Type is maintained.
*** RF_SUBRC = 1 => Packaging Material Type is not maintained.
*** RF_SUBRC = 2 => Packaging Material Type is not valid for Shipping Unit.
*** RF_SUBRC = 3 => Packaging Material Type is not valid for SmartVC Element.
*** RF_SUBRC = 4 => Shipping & Unitizing Customizing is not instantiated.
*** RF_SUBRC = 5 => Packaging Material Type is not valid for Packaging Code

  data:          LF_SHUNT type          ZVCXI_XCSU_SHUNT,
                 LF_ISVCE type          ZVCXI_XCS_ISVCE,
                 LF_PMATY type          ZVCXI_XCSU_PMATY,
                 LF_SHUTY type          ZVCXI_XCSU_SHUTY,
                 LF_WERKS type          WERKS_D,
                 LF_CPACK type          ZVCXI_XCSU_CPACK,
                 LF_GUID  type          /VCXI/CKX_GUID.
  data:          LT_PMATY type          ZVCXI_XCSU_TT_PMATY.
  data:          LR_CPACK type ref to   ZCL_VCXI_XCSUC_CPACK.

***--------------------------------------------------------------------------------------
*** Start Positiv
  RF_SUBRC = 0.

  ME->GET_DETAIL_SHIPUNIT( importing EF_SHUNT = LF_SHUNT ).
  LF_ISVCE = ME->R_GATE->F_ID.
  LF_PMATY = ME->GET_PMATY( ).

***--------------------------------------------------------------------------------------
*** Check if packaging Material Type is initial or not
  if LF_PMATY is initial.
    RF_SUBRC = 1.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Shipping & Unitizing Customizing is instantiated.
  if ME->R_CUST_SHIPU is not bound.
    RF_SUBRC = 4.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** make sure it is valid for shipping unit
  LT_PMATY = ME->R_CUST_SHIPU->GET_PMATY_FOR_SHUNT( IF_SHUNT = LF_SHUNT ).
  read table LT_PMATY with key PMATY = LF_PMATY transporting no fields.
  if SY-SUBRC ne 0.
    RF_SUBRC = 2.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** make sure it is valid for selected SVC Element
  LT_PMATY = ME->R_CUST_SHIPU->GET_PMATY_FOR_ISVCE( IF_ISVCE = LF_ISVCE ).
  read table LT_PMATY with key PMATY = LF_PMATY transporting no fields.
  if SY-SUBRC ne 0.
    RF_SUBRC = 3.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Check Packaging Material Type is valid for Packaging Code in case it is a Packaging Code
*** relevant type
  read table ZCL_VCXI_XCSUC_CPACK=>T_PMATY_CPACK_V with key TABLE_LINE = LF_PMATY transporting no fields.
  if SY-SUBRC eq 0.

    ME->GET_DETAIL_SHIPMGR( importing EF_CPACK = LF_CPACK ).

    if LF_CPACK is not initial.
      LF_WERKS = ME->GET_WERKS( ).
      ME->GET_DETAIL_SHIPUNIT( importing EF_SHUTY = LF_SHUTY ).

      move LF_CPACK to LF_GUID.

      try.
          LR_CPACK ?= ZCL_VCXI_XCSUC_CPACK=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_CPACK.
      endtry.

      check LR_CPACK is bound.

      if LR_CPACK->IS_PMATY_VALID( IF_WERKS = LF_WERKS
                                   IF_SHUTY = LF_SHUTY
                                   IF_SHUNT = LF_SHUNT
                                   IF_PMATY = LF_PMATY ) eq ABAP_FALSE.
        RF_SUBRC = 5.
        exit.
      endif.
    endif.
  endif.

endmethod.
method CHECK_PMQTY.
*** RF_SUBRC = 0 => Packaging Material Quantity is maintained.
*** RF_SUBRC = 1 => Packaging Material Quantity is not maintained.

  data: LS_PMQTY  type ZVCXI_XCSU_S_PMQTY.

*** start Positiv
  RF_SUBRC = 0.

  ME->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).

  if LS_PMQTY-PMQTY is initial.
    RF_SUBRC = 1.
    exit.
  endif.

endmethod.
method CHECK_VCPMC.
*** RF_SUBRC = 0 => Configuration of Configured Packaging Material Variant is maintained.
*** RF_SUBRC = 1 => Configuration of Configured Packaging Material Variant is not maintained.

*** -----------------------------------------------------------------
*** Check if we have an active Child Provider
  if ME->GET_VCPMC( ) is bound.
    RF_SUBRC = 0.
  else.
    RF_SUBRC = 1.
  endif.

endmethod.
method CLEAR_FOR_PMATY.

  data: LS_PMQTY     type ZVCXI_XCSU_S_PMQTY.

  check ME->GET_PMATY( ) is initial.

*** Clear all values related to pmaty
  ME->SET_CONSC( IF_CONSC = SPACE ).

  ME->GET_PMQTY( importing ES_PMQTY = LS_PMQTY ).
  LS_PMQTY-PMQTY = 0.
  ME->SET_PMQTY( IS_PMQTY = LS_PMQTY ).

endmethod.
method CONSTRUCTOR.

  data: LF_SYSOM type /VCXI/VKS_SYSOM.
  data: LS_CMPRK type /VCXI/VKC_S_CMPRK.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
  ME->INIT_DIM_PARAM( ).

*** Initialize Configuratin informations
  ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK
                                         EF_SYSOM = LF_SYSOM ).

  ME->S_COMOD-CMATN = LS_CMPRK-CMATN.
  ME->S_COMOD-PRFID = LS_CMPRK-PRFID.
  ME->S_COMOD-MSYST = LF_SYSOM.

endmethod.
method CREATE_VCPMC.

*** -----------------------------------------------------------------
*** First check if we already have an active Child Provider
  RR_GATE = ME->GET_VCPMC( ).

  if RR_GATE is bound.
    check RR_GATE->F_ID ne IF_VCPMC.
    RR_GATE->DO_FREE( ).
    free: RR_GATE.
  endif.

  check IF_VCPMC is not initial.

*** -----------------------------------------------------------------
*** Create Laminating Sheet Variant
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = IF_VCPMC ).

*** Set Inuse if not already done
  if RR_GATE->GET_USYNC( ) ne ABAP_TRUE.
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.

endmethod.
method GET_ALL_VCPMC.

  data:          LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
  field-symbols: <S_VCPMC>    type ZVCXI_XCSU_S_VCPMC.

*** Get all Child Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  if lines( LT_PRVDR_DEF ) lt 1.
    exit.
  endif.

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    read table RT_VCPMC with key VCPMC = LS_PRVDR_DEF-ID
                        transporting no fields.
    check SY-SUBRC ne 0.
    append initial line to RT_VCPMC assigning <S_VCPMC>.
    move LS_PRVDR_DEF-ID to <S_VCPMC>-VCPMC.
    move LS_PRVDR_DEF-DESCR to <S_VCPMC>-VCPMC_DESCR.
  endloop.

  sort RT_VCPMC by VCPMC.
  delete adjacent duplicates from RT_VCPMC.

endmethod.
method GET_CONSC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CONSC ).
  move LS_PARAM-ATWRT to EF_CONSC.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_CONSC_DESCR.

  data: LF_CONSC type ZVCXI_XCSU_CONSC.

  check ME->R_CUST_SHIPU is bound.
  ME->GET_CONSC( importing EF_CONSC = LF_CONSC ).
  RF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_CONSC( IF_CONSC = LF_CONSC ).

endmethod.
method GET_COUNT.

  data:          LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE_TMP        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE            type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

*** Get Provider Definitions -> Sibling
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
  delete adjacent duplicates from LT_PRVDR_DEF comparing IPRVT.

*** Get all my Siblings
  try.
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        LT_GATE_TMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                             IF_INUSE  = ABAP_TRUE ).
        append lines of LT_GATE_TMP to LT_GATE.
      endloop.

      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

      loop at LT_GATE into LR_GATE.
        add 10 to RF_COUNT.
        if ME->R_GATE = LR_GATE.
          exit.
        endif.
      endloop.

    catch /VCXI/CX_CKX.
      exit.
  endtry.

endmethod.
  method GET_CPMCNF_DESCR.

    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_CPMCNF type ref to ZIF_VCXI_XCSU_CPMCNF.


    LR_GATE = ME->GET_VCPMC( ).
    check LR_GATE is bound.
    try.
        move LR_GATE->R_CLSPR ?to LR_CPMCNF.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CPMCNF.
    endtry.

    check LR_CPMCNF is bound.
    RF_DESCR = LR_CPMCNF->GET_MATDE( ).

  endmethod.
method GET_DESCR.

  data: LF_CPMCNF_DESCR   type /VCXI/CKX_DESCR,
        LF_PMATY_DESCR    type /VCXI/CKX_DESCR.

  LF_CPMCNF_DESCR = ME->GET_CPMCNF_DESCR( ).

*** First Try Configured Packaging Material Descripition
  if LF_CPMCNF_DESCR is not initial.
    RF_DESCR = LF_CPMCNF_DESCR.
  else.
*** Then Packaging Material Type Description
    LF_PMATY_DESCR = ME->GET_PMATY_DESCR( ).
    if LF_PMATY_DESCR is not initial.
      RF_DESCR = LF_PMATY_DESCR.
*** And Last Element Description
    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.
  endif.

endmethod.
method GET_DETAIL_SHIPMGR.

  clear: EF_CPACK, EF_SHSCH, ER_DFLT_SHIPU.
  check ME->R_PR_SHIPMGR is bound.

  if EF_CPACK is requested.
    EF_CPACK = ME->R_PR_SHIPMGR->GET_CPACK( ).
  endif.

  if EF_SHSCH is requested.
    EF_SHSCH = ME->R_PR_SHIPMGR->GET_SHSCH( ).
  endif.

  if ER_DFLT_SHIPU is requested.
    ER_DFLT_SHIPU = ME->R_PR_SHIPMGR->GET_DFLT_SHIPU( ).
  endif.

endmethod.
method GET_DETAIL_SHIPUNIT.

  data:          LT_GATE               type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPUNIT        type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.

  try.

      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
              check LR_PR_SHIPUNIT is bound.
              exit.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: ET_DIMEN, EF_SHUNT.
        endtry.
      endloop.

    catch /VCXI/CX_CKX.
      clear: ET_DIMEN, EF_SHUNT.
  endtry.

  check LR_PR_SHIPUNIT is bound.
  if ET_DIMEN is requested.
    ET_DIMEN = LR_PR_SHIPUNIT->CALC_ADJ_DIMEN_UPTO( IR_GATE = ME->R_GATE ).
  endif.

  if EF_SHUNT is requested.
    EF_SHUNT = LR_PR_SHIPUNIT->GET_SHUNT( ).
  endif.

  if EF_SHUTY is requested.
    EF_SHUTY = LR_PR_SHIPUNIT->GET_SHUTY( ).
  endif.

  if ES_TBQTY is requested.
    ES_TBQTY = LR_PR_SHIPUNIT->GET_TBQTY( ).
  endif.

  if ER_PREV_PACKMAT is requested.
    ER_PREV_PACKMAT = LR_PR_SHIPUNIT->GET_PREV_PACKMAT( IR_GATE = ME->R_GATE ).
  endif.

  if ER_NEXT_PACKMAT is requested.
    ER_NEXT_PACKMAT = LR_PR_SHIPUNIT->GET_NEXT_PACKMAT( IR_GATE = ME->R_GATE ).
  endif.

endmethod.
method GET_EFFCT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
  data:  LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EFFCT ).

  try.
      if LS_PARAM-STRNG is not initial.
        call transformation ID
               source xml LS_PARAM-STRNG
               result TABLE = ET_EFFCT.
      endif.

    catch CX_TRANSFORMATION_ERROR into LR_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
  endtry.

  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FOVRR_CONSC.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Consumption Scheme
  ME->GET_CONSC( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_FOVRR_EFFCT.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Effects
  ME->GET_EFFCT( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_FOVRR_PMQTY.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Packaging Material Quantity
  ME->GET_PMQTY( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_PAMAI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAMAI ).
  move LS_PARAM-ATWRT to RF_PAMAI.

endmethod.
method GET_PAMAI_DESCR.

  data: LF_PAMAI type ZVCXI_XCSU_PAMAI.
  data: LS_DESCR type ZVCXI_XCS_TC360T.

  LF_PAMAI = ME->GET_PAMAI( ).
  read table ZCL_VCXI_XCSUC_CPACK=>T_PAMAI_DESCR into LS_DESCR with key PAMAI = LF_PAMAI
                                                                        LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_DESCR-DESCR to RF_DESCR.

endmethod.
method GET_PMATY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PMATY ).
  move LS_PARAM-ATWRT to RF_PMATY.

endmethod.
method GET_PMATY_DESCR.

  data: LF_PMATY type ZVCXI_XCSU_PMATY.

  check ME->R_CUST_SHIPU is bound.
  LF_PMATY = ME->GET_PMATY( ).
  RF_DESCR = ME->R_CUST_SHIPU->GET_DESCR_FOR_PMATY( IF_PMATY = LF_PMATY ).

endmethod.
method GET_PMQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PMQTY ).
  move LS_PARAM-ATFLV to ES_PMQTY-PMQTY.
  move LS_PARAM-UNIT  to ES_PMQTY-PMQTY_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Packaging Material Type
  case ME->CHECK_PMATY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Packaging Material Quantity
  case ME->CHECK_PMQTY( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Consumption Scheme
  case ME->CHECK_CONSC( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.


***------------------------------------------------------------------
*** Check Configuration of Configured Packaging Material Variant
  case ME->CHECK_VCPMC( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  data: LF_WERKS type WERKS_D.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Packaging Material Type
  case ME->CHECK_PMATY( ).
    when 0.
***   Packaging Material Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '008' ).
    when 1.
***   Packaging Material Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '009' ).
    when 2.
***   Packaging Material Type is not valid for Shipping Unit.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '010' ).
    when 3.
***   Packaging Material Type is not valid for SmartVC Element.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '011' ).
    when 4.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    when 5.
***   Packaging Material Type is not valid for Packaging Code.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '022' ).
  endcase.

***------------------------------------------------------------------
*** Check Packaging Material Quantity
  case ME->CHECK_PMQTY( ).
    when 0.
***   Packaging Material Quantity is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '012' ).
    when 1.
***   Packaging Material Quantity is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '013' ).
  endcase.

***------------------------------------------------------------------
*** Check Consumption Scheme
  case ME->CHECK_CONSC( ).
    when 0.
***   Consumption Scheme is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '014' ).
    when 1.
***   Consumption Scheme is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '015' ).
    when 2.
***   Consumption Scheme is not vaild for Packaging Material Type.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '016' ).
    when 3.
***   Shipping & Unitizing Customizing is not instantiated.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '118' ).
    when 4.
***   Consumption Scheme is not vaild for Packaging Material Type and Plant.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '023' ).
  endcase.

***------------------------------------------------------------------
*** Check Configuration of Configured Packaging Material Variant
  case ME->CHECK_VCPMC( ).
    when 0.
***   Configuration of Configured Packaging Material Variant is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '024' ).
    when 1.
***   Configuration of Configured Packaging Material Variant is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '025' ).
  endcase.

endmethod.
method GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.

endmethod.
  method GET_VCPMC.

    data:  LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get Active Configuration of Configured PackMat Varaint
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          check LR_GATE->GET_PARENT( ) eq ME->R_GATE.
          move LR_GATE to RR_GATE.
          exit.
        catch /VCXI/CX_CKX.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_WERKS.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.

    if ME->R_PR_SHIPMGR is bound.
      RF_WERKS = ME->R_PR_SHIPMGR->GET_WERKS( ).
    else.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                       IF_INUSE = ABAP_TRUE ).
      check LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_XCSU_PR_SHIPMGR( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    endif.

  endmethod.
method HANDLE_EVENT.

  data: LF_OWN_EVENT         type        ABAP_BOOL,
        LF_SHIPMGR_EVENT     type        ABAP_BOOL.
  data: LR_GATE_SHIPMGR      type ref to /VCXI/CL_VKSR_GATE.

*** ----------------------------------------------------------------------
*** Try to catch own events
  read table IT_GATE_PROVIDER with key TABLE_LINE = ME->R_GATE
                              transporting no fields.
  if SY-SUBRC = 0.
    move ABAP_TRUE to LF_OWN_EVENT.
  endif.

*** Try to Get Shipping Manager Event
  move ME->R_GATE->GET_PARENT( ) to LR_GATE_SHIPMGR.
  if LR_GATE_SHIPMGR is bound.
    read table IT_GATE_PROVIDER with key TABLE_LINE = LR_GATE_SHIPMGR
                                transporting no fields.
    if SY-SUBRC = 0.
      move ABAP_TRUE to LF_SHIPMGR_EVENT.
    endif.
  endif.

*** ----------------------------------------------------------------------
*** Do Event Handling
  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      check LF_OWN_EVENT     eq ABAP_TRUE or
            LF_SHIPMGR_EVENT eq ABAP_TRUE.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_REFERENCES.
      check LF_OWN_EVENT eq ABAP_TRUE.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_RESET_PMATY.
      check LF_OWN_EVENT eq ABAP_TRUE.
      ME->HANDLE_RESET_PMATY( ).

    when C_IEVNT_I_RECALC_DETAILS.
      ME->HANDLE_RECALC_DETAILS( IT_GATE = IT_GATE_PROVIDER ).

    when C_IEVNT_I_REDET_EFFCT.
      ME->HANDLE_REDET_EFFCT( ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:          LT_GATE               type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE.

*** Get Shipping Manager
  try.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to ME->R_PR_SHIPMGR.
              check ME->R_PR_SHIPMGR is bound.
              exit.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: ME->R_PR_SHIPMGR.
        endtry.
      endloop.

    catch /VCXI/CX_CKX.
      clear: ME->R_PR_SHIPMGR.
  endtry.

*** Get Customizing Reference
  if ME->R_CUST_SHIPU is not bound.
    ME->INIT_CUST_SHIPU( ).
  endif.

*** Send Event -> Request Set Default
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).

endmethod.
method HANDLE_RECALC_DETAILS.

  data:  LF_DO_RECALC      type        ABAP_BOOL.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PREV_PACKMAT   type ref to /VCXI/CL_VKSR_GATE,
         LR_NEXT_PACKMAT   type ref to /VCXI/CL_VKSR_GATE.

***  Get Previous and next Packmat
  ME->GET_DETAIL_SHIPUNIT( importing ER_NEXT_PACKMAT = LR_NEXT_PACKMAT
                                     ER_PREV_PACKMAT = LR_PREV_PACKMAT ).

  loop at IT_GATE into LR_GATE.
*** Gate is Parent
    if LR_GATE eq ME->R_GATE->GET_PARENT( ).
***   Do always recalc if Parent was changed!
      LF_DO_RECALC = ABAP_TRUE.
    else.
***   Gate has same ID as me
      if LR_GATE->F_ID eq ME->R_GATE->F_ID.
***     Only Recalc if it is next, previous, me or deleted
        check LR_GATE              eq LR_NEXT_PACKMAT or
              LR_GATE              eq LR_PREV_PACKMAT or
              LR_GATE              eq ME->R_GATE      or
              LR_GATE->IS_INUSE( ) eq ABAP_FALSE.
        LF_DO_RECALC = ABAP_TRUE.
      endif.
    endif.

    check LF_DO_RECALC eq ABAP_TRUE.
    exit.

  endloop.

  check LF_DO_RECALC eq ABAP_TRUE.

  ME->CALC_DETAILS( ).

endmethod.
  method HANDLE_REDET_EFFCT.

    data: LT_EFFCT type ZVCXI_XCSU_TT_EFFCT.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_CPMCNF type ref to ZIF_VCXI_XCSU_CPMCNF.
    field-symbols: <S_EFFCT> type ZVCXI_XCSU_S_EFFCT.

*** Get Effects
    ME->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

*** initialize Effects
    loop at LT_EFFCT assigning <S_EFFCT>.
      clear: <S_EFFCT>-DIMVA.
    endloop.

*** Redetermine Effects from CPMCNF
    LR_GATE = ME->GET_VCPMC( ).

    if LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_CPMCNF.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_CPMCNF.
      endtry.

***   Determine Effects
      check LR_CPMCNF is bound.
      LR_CPMCNF->DET_EFFCT( changing CT_EFFCT = LT_EFFCT ).
    endif.

    ME->SET_EFFCT( IT_EFFCT = LT_EFFCT ).

  endmethod.
method HANDLE_RESET_PMATY.

*** Initialize Packaging Material
  ME->INIT_PMATY( ).

endmethod.
method HANDLE_SET_DEFAULT.

*** Make it only if we have the ref to our shipping Manager
  check ME->R_PR_SHIPMGR is bound.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_CUST_SHIPU.

  data:  LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHIPMGR   type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.

*** Get Reference to Shipping Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPMGR.
    endtry.
  endif.

  if LR_PR_SHIPMGR is bound.
    if LR_PR_SHIPMGR->R_CUST_SHIPU is not bound.
***   Process Events to ensure Shipping Manager has initialized its References
      ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).
    endif.
*** Use same Reference to Shipping & Unitization Customizing
    move LR_PR_SHIPMGR->R_CUST_SHIPU to ME->R_CUST_SHIPU.
  else.
    clear ME->R_CUST_SHIPU.
  endif.

endmethod.
method INIT_DIM_PARAM.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PMQTY_A or
                          PARID eq C_PARID_PMQTY_L or
                          PARID eq C_PARID_PMQTY_P or
                          PARID eq C_PARID_PMQTY_W ).
    move LS_PARAM-PARID to ME->F_PARID_PMQTY.
*** Get dimension key matches parameter unit dimension key.
    call function 'DIMENSION_GET_FOR_UNIT'
      exporting
        LANGUAGE       = SY-LANGU
        UNIT           = LS_PARAM-UNIT
      importing
        DIMENSION      = ME->F_DIMID
      exceptions
        UNIT_NOT_FOUND = 1
        others         = 2.

    check SY-SUBRC = 0.
    exit.
  endloop.

endmethod.
method INIT_EFFCT.

  data:          LT_EFFCT      type ZVCXI_XCSU_TT_EFFCT,
                 LT_EFFCT_CUST type ZVCXI_XCSU_TT_PMATY_EFFCT.
  data:          LS_EFFCT_CUST type ZVCXI_XCS_TC191.
  data:          LF_PMATY      type ZVCXI_XCSU_PMATY.
  field-symbols: <S_EFFCT>     type ZVCXI_XCSU_S_EFFCT.

  check ME->R_CUST_SHIPU is bound.
  LF_PMATY = ME->GET_PMATY( ).
  check LF_PMATY is not initial.

*** Load Effects if it is initial.
  LT_EFFCT_CUST = ME->R_CUST_SHIPU->GET_EFFCT_FOR_PMATY( IF_PMATY = LF_PMATY ).
  check LT_EFFCT_CUST is not initial.

  ME->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

  clear: LT_EFFCT.

  loop at LT_EFFCT_CUST into LS_EFFCT_CUST.
    append initial line to LT_EFFCT assigning <S_EFFCT>.
    move-corresponding LS_EFFCT_CUST to <S_EFFCT>.
    case ME->S_COMOD-MSYST.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LS_EFFCT_CUST-UOMME to <S_EFFCT>-DIMVA_UOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        move LS_EFFCT_CUST-UOMIM to <S_EFFCT>-DIMVA_UOM.
    endcase.
  endloop.

  ME->SET_EFFCT( IT_EFFCT = LT_EFFCT ).

endmethod.
method INIT_PMATY.

  if ME->R_CUST_SHIPU is not bound.
    ME->INIT_CUST_SHIPU( ).
  endif.

*** Clear values influenced by Packaging Material Type
  ME->CLEAR_FOR_PMATY( ).

*** Initialize Effects
  ME->INIT_EFFCT( ).

endmethod.
method SET_CONSC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CONSC ).

  if IF_CONSC is supplied.
    move IF_CONSC to LS_PARAM-ATWRT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONSC_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_EFFCT.

  data:          LF_CHANGED type        ABAP_BOOL.
  data:          LS_PARAM   type        /VCXI/VKSR_S_PARAM,
                 LS_EFFCT   type        ZVCXI_XCSU_S_EFFCT.
  data:          LT_EFFCT   type        ZVCXI_XCSU_TT_EFFCT.
  data:          LR_ERROR   type ref to CX_TRANSFORMATION_ERROR.
  field-symbols: <S_EFFCT>  type        ZVCXI_XCSU_S_EFFCT.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EFFCT ).

  if IT_EFFCT is supplied.

    if LS_PARAM-STRNG is not initial.

***   Set Effects with defined System of Measure
      ME->GET_EFFCT( importing ET_EFFCT = LT_EFFCT ).

      loop at LT_EFFCT assigning <S_EFFCT>.
        read table IT_EFFCT with key DIMEN = <S_EFFCT>-DIMEN
                                     EFFCT = <S_EFFCT>-EFFCT
                            into LS_EFFCT.
        check SY-SUBRC = 0.

***     Do Unit Converison
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = <S_EFFCT>-DIMVA_UOM
                                                           IF_UOM_IN    = LS_EFFCT-DIMVA_UOM
                                                           IF_VALUE_IN  = LS_EFFCT-DIMVA
                                                 importing EF_VALUE_OUT = <S_EFFCT>-DIMVA
                                                           EF_UOM_OUT   = <S_EFFCT>-DIMVA_UOM ).
      endloop.

    else.
      move IT_EFFCT to LT_EFFCT.
    endif.

    try.
        call transformation ID
               source TABLE = LT_EFFCT
               result xml LS_PARAM-STRNG.

      catch CX_TRANSFORMATION_ERROR into LR_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_ERROR ).
    endtry.
  endif.

  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EFFCT_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_FOVRR_CONSC.

*** Set Setby for Consumption Scheme
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_CONSC( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_CONSC( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_FOVRR_PMQTY.

*** Set Setby for Packaging Material Quantity
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_PMQTY( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_PMQTY( IF_SETBY = SPACE ).
  endcase.

endmethod.
method SET_PAMAI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAMAI ).

  if IF_PAMAI is supplied.
    move IF_PAMAI to LS_PARAM-ATWRT.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAMAI_CHANGED ).
  endif.

endmethod.
method SET_PMATY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PMATY ).

  move IF_PMATY to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PMATY_CHANGED ).
  endif.

endmethod.
method SET_PMQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PMQTY ).

  if IS_PMQTY is supplied.
    move IS_PMQTY-PMQTY     to LS_PARAM-ATFLV.
    move IS_PMQTY-PMQTY_UOM to LS_PARAM-UNIT.
  else.
    if IF_SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PMQTY_CHANGED ).
    if IF_SETBY is initial.
***   Send Event -> Request Set Default
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REQUEST_SET_DEFAULT ).
    endif.
  endif.

endmethod.
method SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
