
class ZCL_VCXI_PXSS_PR_MS_DINK definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IEVNT_O_APVOL_CHANGED type /VCXI/VKSC_IEVNT value 'APVOL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_APWGT_CHANGED type /VCXI/VKSC_IEVNT value 'APWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COVRG_CHANGED type /VCXI/VKSC_IEVNT value 'COVRG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TINK_CHANGED type /VCXI/VKSC_IEVNT value 'TINK_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_MS_DINK type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_DINK' ##NO_TEXT.
  constants C_PARID_APVOL type /VCXI/VKS_PARID value 'ZVCXI_PX_APVOL' ##NO_TEXT.
  constants C_PARID_APWGT type /VCXI/VKS_PARID value 'ZVCXI_PX_APWGT' ##NO_TEXT.
  constants C_PARID_COVRG type /VCXI/VKS_PARID value 'ZVCXI_P0_COVRG' ##NO_TEXT.
  constants C_PARID_TINK type /VCXI/VKS_PARID value 'ZVCXI_PX_TINK' ##NO_TEXT.
  constants C_APDIM_VOLUME type ZVCXI_PXS_APDIM value 'VOLUME' ##NO_TEXT.
  constants C_APDIM_MASS type ZVCXI_PXS_APDIM value 'MASS' ##NO_TEXT.

  methods GET_APDIM
    returning
      value(RF_APDIM) type ZVCXI_PXS_APDIM
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_APVOL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_APVOL) type ZVCXI_PXS_S_APVOL
    raising
      /VCXI/CX_CKX .
  methods GET_APVOP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_APVOP) type ZVCXI_PXS_S_APVOP
    raising
      /VCXI/CX_CKX .
  methods GET_APWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_APWGT) type ZVCXI_PXS_S_APWGT
    raising
      /VCXI/CX_CKX .
  methods GET_COVRG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_COVRG_TOTAL type ZVCXI_P0S_S_COVRG
    returning
      value(RS_COVRG) type ZVCXI_P0S_S_COVRG
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_PRINT
    returning
      value(RR_CUST_PRINT) type ref to ZCL_VCXI_PXSS_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_PDINK
    returning
      value(RS_PDINK) type ZVCXI_PXE_DMS_S_PDINK
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRINT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PRINT) type ref to ZIF_VCXI_PXSS_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_SLDCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SLDCO) type ZVCXI_PXS_S_SLDCO
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_TINK
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_TINK) type ZVCXI_PXS_TINK
    raising
      /VCXI/CX_CKX .
  methods SET_APVOL
    importing
      !IS_APVOL type ZVCXI_PXS_S_APVOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_APWGT
    importing
      !IS_APWGT type ZVCXI_PXS_S_APWGT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COVRG
    importing
      !IS_COVRG type ZVCXI_P0S_S_COVRG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PDINK
    importing
      !IS_PDINK type ZVCXI_PXE_DMS_S_PDINK
    raising
      /VCXI/CX_CKX .
  methods SET_SLDCO
    importing
      !IS_SLDCO type ZVCXI_PXS_S_SLDCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TINK
    importing
      !IF_TINK type ZVCXI_PXS_TINK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_APVOP type /VCXI/VKSC_IEVNT value 'INIT_APVOP' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_APVOL type /VCXI/VKSC_IEVNT value 'RECALC_APVOL' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_APWGT type /VCXI/VKSC_IEVNT value 'RECALC_APWGT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_SLDCO_CHANGED type /VCXI/VKSC_IEVNT value 'SLDCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_APVOP type /VCXI/VKS_PARID value 'ZVCXI_PX_APVOP' ##NO_TEXT.
  constants C_PARID_SLDCO type /VCXI/VKS_PARID value 'ZVCXI_PX_SLDCO' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  data R_CUST_INK type ref to ZCL_VCXI_PXSS_CUST_INK .

  methods CHECK_APWGT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SLDCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TINK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_APVOP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_APVOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_APWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_APVOP
    importing
      !IS_APVOP type ZVCXI_PXS_S_APVOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_DINK definition
class ZCL_VCXI_PXSS_PR_MS_DINK implementation.
  method CHECK_APWGT.

*** Only check if Coverage is maintained
    check ME->GET_COVRG( )-COVRG is not initial.

*** Check Application Weight
    if ME->GET_APWGT( )-APWGT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Application Weight is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '204' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Application Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      endif.
    endif.

  endmethod.
  method CHECK_COVRG.

    data: LS_COVRG_TOTAL  type ZVCXI_P0S_S_COVRG.


*** Only check if Application Weight is maintained
    check ME->GET_APWGT( )-APWGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Total Coverage incl. Marking
    ME->GET_COVRG( importing ES_COVRG_TOTAL = LS_COVRG_TOTAL ).

***--------------------------------------------------------------------------------------
*** Check Coverage
    if LS_COVRG_TOTAL-COVRG gt 0 and
       LS_COVRG_TOTAL-COVRG le 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Coverage is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '201' ).
      endif.

    elseif LS_COVRG_TOTAL-COVRG gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is greater than 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '202' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '203' ).
      endif.

    endif.

  endmethod.
  method CHECK_SLDCO.

*** Check Solid Content
    if ME->GET_SLDCO( )-SLDCO is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Solid Content is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '206' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Solid Content is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '207' ).
      endif.
    endif.

  endmethod.
  method CHECK_TINK.

    data: LT_TINK_INFO type ZVCXI_PXSS_TT_TINK_INFO.
    data: LR_PRINT type ref to ZIF_VCXI_PXSS_PRINT.


*** Check Ink Type
    data(LF_TINK) = ME->GET_TINK( ).
    if LF_TINK is not initial.
      LR_PRINT = ME->GET_PRVDR_PRINT( ).
      if LR_PRINT is bound.
        LT_TINK_INFO = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LR_PRINT->GET_TPRIN( ) ).
      endif.
      if LINE_EXISTS( LT_TINK_INFO[ TINK = LF_TINK ] ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Ink Type is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '210' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Ink Type is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '211' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Ink Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '212' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_W to ME->F_PARID_PRICP.
    move C_PARID_AVGCO_W to ME->F_PARID_AVGCO.
    move C_PARID_AVGCP_A to ME->F_PARID_AVGCP.

  endmethod.
  method GET_APDIM.

    data(LR_CUST_PRINT) = ME->GET_CUST_PRINT( ).
    if LR_CUST_PRINT is bound.
      RF_APDIM = LR_CUST_PRINT->GET_APDIM( ).
    endif.

  endmethod.
  method GET_APVOL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APVOL ).
    move LS_PARAM-ATFLV to RS_APVOL-APVOL.
    move LS_PARAM-UNIT  to RS_APVOL-APVOL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_APVOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APVOP ).
    move LS_PARAM-ATFLV to RS_APVOP-APVOP.
    move LS_PARAM-UNIT  to RS_APVOP-APVOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_APWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).
    move LS_PARAM-ATFLV to RS_APWGT-APWGT.
    move LS_PARAM-UNIT  to RS_APWGT-APWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COVRG.

    data: LF_LINE type I.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_COVRG type ZVCXI_P0S_S_COVRG.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).
    move LS_PARAM-ATFLV to RS_COVRG-COVRG.
    move LS_PARAM-UNIT  to RS_COVRG-COVRG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Total Coverage including Marking
    if ES_COVRG_TOTAL is requested.
      ES_COVRG_TOTAL = RS_COVRG.

***   Get Counter of Ink
      ME->GET_PRVDR_PRINT( importing ER_GATE = LR_GATE ).
      check LR_GATE is bound.
      LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                    IF_INUSE  = ABAP_TRUE
                                    IF_SORTED = ABAP_TRUE ).
      LF_LINE = LINE_INDEX( LT_GATE[ TABLE_LINE = ME->R_GATE ] ).

***   Add assigned Marking
      LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                                    IF_INUSE = ABAP_TRUE ).
      loop at LT_GATE into LR_GATE.
        check cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_ACONO( ) eq LF_LINE.

***     Add Marking Coverage to Ink Coverage
        LS_COVRG = cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_COVRG( ).
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_COVRG_TOTAL-COVRG
                                                            IF_CALCV_UOM_1 = ES_COVRG_TOTAL-COVRG_UOM
                                                            IF_CALCV_2     = LS_COVRG-COVRG
                                                            IF_CALCV_UOM_2 = LS_COVRG-COVRG_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                  importing EF_CALCV       = ES_COVRG_TOTAL-COVRG
                                                            EF_CALCV_UOM   = ES_COVRG_TOTAL-COVRG_UOM ).
      endloop.
    endif.

  endmethod.
  method GET_CUST_PRINT.

*** Get Customizing
    RR_CUST_PRINT = ZCL_VCXI_PXSS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = ME->GET_WERKS( ) ).

  endmethod.
  method GET_PDINK.

    RS_PDINK = value #( MATNR   = ME->GET_MATNR( )
                        TINK    = ME->GET_TINK( )
                        S_COVRG = ME->GET_COVRG( )
                        S_APWGT = ME->GET_APWGT( )
                        S_APVOL = ME->GET_APVOL( )
                        S_APVOP = ME->GET_APVOP( ) ).

  endmethod.
  method GET_PRVDR_PRINT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PRINT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Printing
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_PRINT=>C_IPRVT_PX_PRINT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PRINT.

  endmethod.
  method GET_SLDCO.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move LS_PARAM-ATFLV to RS_SLDCO-SLDCO.
    move LS_PARAM-UNIT  to RS_SLDCO-SLDCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Ink Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TINK( ) ).

*** Check Coverage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COVRG( ) ).

*** Check Application Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_APWGT( ) ).

*** Check Solid Content
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SLDCO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Ink Type
    ME->CHECK_TINK( IR_MESSAGE = IR_MESSAGE ).

*** Check Coverage
    ME->CHECK_COVRG( IR_MESSAGE = IR_MESSAGE ).

*** Check Application Weight
    ME->CHECK_APWGT( IR_MESSAGE = IR_MESSAGE ).

*** Check Solid Content
    ME->CHECK_SLDCO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TINK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TINK ).
    move LS_PARAM-ATWRT to RF_TINK.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = RF_TINK ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_APVOP.
        ME->HANDLE_INIT_APVOP( ).
      when C_IEVNT_I_RECALC_APVOL.
        ME->HANDLE_RECALC_APVOL( ).
      when C_IEVNT_I_RECALC_APWGT.
        ME->HANDLE_RECALC_APWGT( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).

    endcase.

  endmethod.
  method HANDLE_INIT_APVOP.

*** Application Volume Per is always per 1 (square meter or square inch)
    ME->SET_APVOP( IS_APVOP = value #( APVOP     = 1
                                       APVOP_UOM = ME->GET_APVOP( )-APVOP_UOM ) ).

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type        MATNR,
          LF_WERKS type        WERKS_D,
          LF_DCONF type        DATS.
    data: LS_SLDCO type        ZVCXI_FFS_S_SLDCO.

***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_INK          is bound    and
       ME->R_CUST_INK->F_MATNR eq LF_MATNR and
       ME->R_CUST_INK->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR, ME->R_CUST_INK.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_INK = ZCL_VCXI_PXSS_CUST_INK=>GET_INSTANCE_INK( IF_MATNR = LF_MATNR
                                                                     IF_WERKS = LF_WERKS
                                                                     IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_INK to ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Set Values for Real Inks
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   Set Solid Content
      if ME->R_CUST_INK is bound.
        move ME->R_CUST_INK->S_SLDCO to LS_SLDCO.
      endif.
      ME->SET_SLDCO( IS_SLDCO = LS_SLDCO ).
    endif.

  endmethod.
  method HANDLE_RECALC_APVOL.

    data: LS_CALCV_WEIGHT type ZVCXI_XCS_S_CALCV,
          LS_APVOL        type ZVCXI_PXS_S_APVOL.


*** Not defined by Volume
    check ME->GET_APDIM( ) ne C_APDIM_VOLUME.

*** Get Material
    data(LF_MATNR) = ME->GET_MATNR( ).

    if LF_MATNR is not initial.
***   Get Application Weight
      data(LS_APWGT) = ME->GET_APWGT( ).
      data(LS_APVOP) = ME->GET_APVOP( ).

***   Convert to Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_APWGT-APWGT
                                                          IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
                                                          IF_CALCV_2     = LS_APVOP-APVOP
                                                          IF_CALCV_UOM_2 = LS_APVOP-APVOP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = LS_CALCV_WEIGHT-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV_WEIGHT-CALCV_UOM ).

***   Convert Weight to Volume based on Material
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = LF_MATNR
                                                               IF_VALUE_IN  = LS_CALCV_WEIGHT-CALCV
                                                               IF_UOM_IN    = LS_CALCV_WEIGHT-CALCV_UOM
                                                               IF_UOM_OUT   = ME->GET_APVOL( )-APVOL_UOM
                                                     importing EF_VALUE_OUT = LS_APVOL-APVOL
                                                               EF_UOM_OUT   = LS_APVOL-APVOL_UOM ).


***   Set calculated Application Volume
      ME->SET_APVOL( IS_APVOL = LS_APVOL ).
    else.
***   Initialize Application Volume
      ME->SET_APVOL( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_APWGT.

    data: LS_CALCV_WEIGHT type ZVCXI_XCS_S_CALCV,
          LS_APWGT        type ZVCXI_PXS_S_APWGT.


*** Not defined by Weight
    check ME->GET_APDIM( ) ne C_APDIM_MASS.

*** Get Material
    data(LF_MATNR) = ME->GET_MATNR( ).

    if LF_MATNR is not initial.
***   Get Application Volume
      data(LS_APVOL) = ME->GET_APVOL( ).
      data(LS_APVOP) = ME->GET_APVOP( ).

***   Convert Volum to Weight based on Material
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = LF_MATNR
                                                               IF_VALUE_IN  = LS_APVOL-APVOL
                                                               IF_UOM_IN    = LS_APVOL-APVOL_UOM
                                                               IF_UOM_OUT   = 'KG'
                                                     importing EF_VALUE_OUT = LS_CALCV_WEIGHT-CALCV
                                                               EF_UOM_OUT   = LS_CALCV_WEIGHT-CALCV_UOM ).

***   Convert to Mass Coverage
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_WEIGHT-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV_WEIGHT-CALCV_UOM
                                                          IF_CALCV_2     = LS_APVOP-APVOP
                                                          IF_CALCV_UOM_2 = LS_APVOP-APVOP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = ME->GET_APWGT( )-APWGT_UOM
                                                importing EF_CALCV       = LS_APWGT-APWGT
                                                          EF_CALCV_UOM   = LS_APWGT-APWGT_UOM ).

***   Set calculated Application Weight
      ME->SET_APWGT( IS_APWGT = LS_APWGT ).
    else.
***   Initialize Application Weight
      ME->SET_APWGT( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_APWGT type ZVCXI_PXS_S_APWGT,
          LS_SLDCO type ZVCXI_PXS_S_SLDCO,
          LS_SURWT type ZVCXI_PXS_S_SURWT.


*** Get Application Weight and Solid Content
    LS_APWGT = ME->GET_APWGT( ).
    LS_SLDCO = ME->GET_SLDCO( ).

*** Calculate Surface Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_APWGT-APWGT
        IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
        IF_CALCV_2     = LS_SLDCO-SLDCO
        IF_CALCV_UOM_2 = LS_SLDCO-SLDCO_UOM
        IF_UOM         = LS_APWGT-APWGT_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
      importing
        EF_CALCV       = LS_SURWT-SURWT
        EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

*** Set new Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_APVOL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APVOL ).

    if IS_APVOL is supplied.
      LS_PARAM-ATFLV = IS_APVOL-APVOL.
      LS_PARAM-UNIT  = IS_APVOL-APVOL_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_APVOL_CHANGED ).
    endif.

  endmethod.
  method SET_APVOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APVOP ).

    move IS_APVOP-APVOP     to LS_PARAM-ATFLV.
    move IS_APVOP-APVOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_APWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).

    if IS_APWGT is supplied.
      LS_PARAM-ATFLV = IS_APWGT-APWGT.
      LS_PARAM-UNIT  = IS_APWGT-APWGT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_APWGT_CHANGED ).
    endif.

  endmethod.
  method SET_COVRG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).

    LS_PARAM-ATFLV = IS_COVRG-COVRG.
    LS_PARAM-UNIT  = IS_COVRG-COVRG_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COVRG_CHANGED ).
    endif.

  endmethod.
  method SET_PDINK.

    ME->SET_MATNR( IF_MATNR = IS_PDINK-MATNR
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_TINK(  IF_TINK  = IS_PDINK-TINK
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_COVRG( IS_COVRG = IS_PDINK-S_COVRG
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_APWGT( IS_APWGT = IS_PDINK-S_APWGT
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_APVOL( IS_APVOL = IS_PDINK-S_APVOL
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_APVOP( IS_APVOP = IS_PDINK-S_APVOP
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method SET_SLDCO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move IS_SLDCO-SLDCO      to LS_PARAM-ATFLV.
    move IS_SLDCO-SLDCO_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SLDCO_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TINK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TINK ).

    move IF_TINK to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TINK_CHANGED ).
    endif.

  endmethod.
