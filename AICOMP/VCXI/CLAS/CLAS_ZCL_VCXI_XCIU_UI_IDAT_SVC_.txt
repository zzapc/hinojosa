
class ZCL_VCXI_XCIU_UI_IDAT_SVC definition
  public
  final
  create public .

public section.

  data R_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC read-only .
  data S_SVCEL_VIS type ZVCXI_XCIU_S_SVCEL_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_CURRENT_SVCEL
    returning
      value(RS_SVCEL) type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods OPEN_SVCEL
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IF_CSELF type /VCXI/VKSR_REPNR
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    raising
      /VCXI/CX_CKX .
  methods UPDATE
    importing
      !IS_SVCEL_VIS type ZVCXI_XCIU_S_SVCEL_VIS
    raising
      /VCXI/CX_CKX .
protected section.

  data F_CSELF type /VCXI/VKSR_REPNR .
  data F_ISELF type /VCXI/CKX_ID .
  data R_DOCKING type ref to CL_GUI_DOCKING_CONTAINER .
  data R_SPLITTER type ref to CL_GUI_SPLITTER_CONTAINER .
  data R_SVCEV_GRID type ref to ZCL_VCXI_XCIU_GRID_SVCEV .
  data R_SVCPA_GRID type ref to ZCL_VCXI_XCIU_GRID_SVCPA .
  data R_TREE_SVCEL type ref to ZCL_VCXI_XCIU_TREE_SVCEL .
  data R_TREE_SVCRT type ref to ZCL_VCXI_XCIU_TREE_SVCRT .

  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE_SVCEL
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE_SVCRT
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
private section.

  constants C_UC_BACK type SYUCOMM value 'BACK'. "#EC NOTEXT
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_EXIT type SYUCOMM value 'EXIT'. "#EC NOTEXT
  constants C_UC_SAVE type SYUCOMM value 'SAVE'. "#EC NOTEXT
  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE'. "#EC NOTEXT
endclass. "ZCL_VCXI_XCIU_UI_IDAT_SVC definition
class ZCL_VCXI_XCIU_UI_IDAT_SVC implementation.
method CONSTRUCTOR.

  move IR_IDAT_SVC to ME->R_IDAT_SVC.

endmethod.
method DO_FREE.

***--------------------------------------------------------------------------------------
*** Free Tree
  if ME->R_TREE_SVCEL is bound.
    ME->R_TREE_SVCEL->DO_FREE( ).
    free: ME->R_TREE_SVCEL.
  endif.
  if ME->R_TREE_SVCRT is bound.
    ME->R_TREE_SVCRT->DO_FREE( ).
    free: ME->R_TREE_SVCRT.
  endif.

*** Free Container
  if ME->R_SPLITTER is bound.
    ME->R_SPLITTER->FREE( ).
    free: ME->R_SPLITTER.
  endif.
  if ME->R_DOCKING is bound.
    ME->R_DOCKING->FREE( ).
    free: ME->R_DOCKING.
  endif.

***--------------------------------------------------------------------------------------
*** Free SmartVC Parameter Grid
  if ME->R_SVCPA_GRID is bound.
    ME->R_SVCPA_GRID->DO_FREE( ).
    free: ME->R_SVCPA_GRID.
  endif.

*** Free SmartVC Event Grid
  if ME->R_SVCEV_GRID is bound.
    ME->R_SVCEV_GRID->DO_FREE( ).
    free: ME->R_SVCEV_GRID.
  endif.

***--------------------------------------------------------------------------------------
*** Clear References
  free: ME->R_IDAT_SVC.

endmethod.
method DO_PBO.

  data:  LF_NIDAT  type ZVCXI_XCI_NIDAT.

*** Set Status
  set pf-status '0100' of program 'SAPLZVCXI_XCIU_UI_IDAT_SVC'.

*** Set Title
  move ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_NIDAT.
  if ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    set titlebar '0100_EDIT' of program 'SAPLZVCXI_XCIU_UI_IDAT_SVC'
                             with LF_NIDAT.
  else.
    set titlebar '0100_DISP' of program 'SAPLZVCXI_XCIU_UI_IDAT_SVC'
                             with LF_NIDAT.
  endif.

***----------------------------------------------------------------------------
*** Initialize Container
  ME->INIT_CONTAINER( ).

*** Initialize Tree
  ME->INIT_TREE_SVCEL( ).
  ME->R_TREE_SVCEL->REFRESH_TREE( ).

*** Initialize Tree
  ME->INIT_TREE_SVCRT( ).
  ME->R_TREE_SVCRT->REFRESH_TREE( ).

***----------------------------------------------------------------------------
*** Check selected Element is valid.
  if ME->F_ISELF is not initial.
    read table ME->R_IDAT_SVC->T_SVCEL with key ISELF = ME->F_ISELF
                                                CSELF = ME->F_CSELF
                                       transporting no fields.
    if SY-SUBRC ne 0.
      clear: ME->F_ISELF, ME->F_CSELF.
    endif.
  else.
    clear: ME->F_ISELF, ME->F_CSELF.
  endif.

***----------------------------------------------------------------------------
*** Initialize Vis
  ME->INIT_VIS( ).

*** Refresh SmartVC Parameter Grid
  if ME->R_SVCPA_GRID is not bound.
    create object ME->R_SVCPA_GRID
      exporting
        IR_UI_IDAT_SVC = ME.
  endif.
  move ABAP_TRUE to ME->R_SVCPA_GRID->F_REFRESH_REQ.
  ME->R_SVCPA_GRID->REFRESH_GRID( ).

*** Refresh SmartVC Event Grid
  if ME->R_SVCEV_GRID is not bound.
    create object ME->R_SVCEV_GRID
      exporting
        IR_UI_IDAT_SVC = ME.
  endif.
  move ABAP_TRUE to ME->R_SVCEV_GRID->F_REFRESH_REQ.
  ME->R_SVCEV_GRID->REFRESH_GRID( ).

***----------------------------------------------------------------------------
*** Modify Screen
  ME->MODIFY_SCREEN( ).

endmethod.
method DO_USER_COMMAND.

  if ME->R_SVCPA_GRID is bound.
*** Check for Changes
    ME->R_SVCPA_GRID->CHECK_DATA_CHANGED( ).
  endif.

  case IF_UCOMM.
    when C_UC_BACK.
      ME->HANDLE_UC_BACK( ).
    when C_UC_EXIT.
      ME->HANDLE_UC_EXIT( ).
    when C_UC_CANCEL.
      ME->HANDLE_UC_CANCEL( ).

    when C_UC_TOGGLE.
      ME->HANDLE_UC_TOGGLE( ).

    when C_UC_SAVE.
      ME->HANDLE_UC_SAVE( ).
  endcase.

endmethod.
method GET_CURRENT_SVCEL.

  read table ME->R_IDAT_SVC->T_SVCEL into RS_SVCEL with key ISELF = ME->F_ISELF
                                                            CSELF = ME->F_CSELF.

endmethod.
method HANDLE_UC_BACK.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method HANDLE_UC_CANCEL.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method HANDLE_UC_EXIT.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method HANDLE_UC_SAVE.

  data:  LF_NIDAT  type ZVCXI_XCI_NIDAT.

***------------------------------------------------------------------------------------------------
*** Perform Save and Commit
  ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).

  commit work and wait.

*** Relock after Commit
  ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

***------------------------------------------------------------------------------------------------
  LF_NIDAT = ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Integration Data & was saved.
  message id 'ZVCXI_XCIU' type 'S' number '101' with LF_NIDAT.

endmethod.
method HANDLE_UC_TOGGLE.

  if ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
  else.
    ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

endmethod.
method INIT_CONTAINER.

  check ME->R_DOCKING is not bound.

***----------------------------------------------------------------------------
*** Create the Docking Container Instance
  create object ME->R_DOCKING
    exporting
      REPID                       = 'SAPLZVCXI_XCIU_UI_IDAT_SVC'
      DYNNR                       = '0100'
      SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
      RATIO                       = 30
    exceptions
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      LIFETIME_DYNPRO_DYNPRO_LINK = 5
      others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create Splitter
  create object ME->R_SPLITTER
    exporting
      PARENT            = ME->R_DOCKING
      ROWS              = 2
      COLUMNS           = 1
    exceptions
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      OTHERS            = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method INIT_TREE_SVCEL.

  data:  LR_CONTAINER    type ref to CL_GUI_CONTAINER.

  if ME->R_TREE_SVCEL is not bound.
*** Get Container
    LR_CONTAINER = ME->R_SPLITTER->GET_CONTAINER( ROW    = 1
                                                  COLUMN = 1 ).
*** Create Tree
    create object ME->R_TREE_SVCEL
      exporting
        IR_UI_IDAT_SVC = ME
        IR_CONTAINER   = LR_CONTAINER.
  endif.

endmethod.
method INIT_TREE_SVCRT.

  data:  LR_CONTAINER    type ref to CL_GUI_CONTAINER.

  if ME->R_TREE_SVCRT is not bound.
*** Get Container
    LR_CONTAINER = ME->R_SPLITTER->GET_CONTAINER( ROW    = 2
                                                  COLUMN = 1 ).
*** Create Tree
    create object ME->R_TREE_SVCRT
      exporting
        IR_UI_IDAT_SVC = ME
        IR_CONTAINER   = LR_CONTAINER.
  endif.

endmethod.
method INIT_VIS.

  data:  LS_SVCEL     type ZVCXI_XCI_S_SVCEL.

  free: ME->S_SVCEL_VIS.

  check ME->F_ISELF is not initial.
  LS_SVCEL = ME->GET_CURRENT_SVCEL( ).
  check LS_SVCEL-ISELF is not initial.

  move-corresponding LS_SVCEL to ME->S_SVCEL_VIS.

endmethod.
method MODIFY_SCREEN.

  data:  LF_LOCKED   type           /VCXI/CKX_LOCKED.

*** Get Lock Status
  move ME->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Update Screen
  loop at screen.
*** Not changeable if nothing is selected
    if ME->F_ISELF is initial.
      move 0 to SCREEN-INPUT.
    endif.

*** Not changeable if not Locked
    if LF_LOCKED ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify screen.
  endloop.

endmethod.
method OPEN_SVCEL.

  move IF_ISELF to ME->F_ISELF.
  move IF_CSELF to ME->F_CSELF.

*** Refresh
  CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'UI_REFRESH' ).

endmethod.
method START.

  data: LR_UI_IDAT_SVC type ref to  ZCL_VCXI_XCIU_UI_IDAT_SVC.

  check IR_IDAT_SVC is bound.

  create object LR_UI_IDAT_SVC
    exporting IR_IDAT_SVC = IR_IDAT_SVC.

  call function 'ZVCXI_XCIU_UI_IDAT_SVC_START'
    exporting
      IR_UI_IDAT_SVC = LR_UI_IDAT_SVC.

endmethod.
method UPDATE.

  data:  LS_SVCEL     type ZVCXI_XCI_S_SVCEL.

  read table ME->R_IDAT_SVC->T_SVCEL into LS_SVCEL
                                     with key ISELF = IS_SVCEL_VIS-ISELF
                                              CSELF = IS_SVCEL_VIS-CSELF.
  check SY-SUBRC eq 0.

  move-corresponding IS_SVCEL_VIS to LS_SVCEL.

  ME->R_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

endmethod.
