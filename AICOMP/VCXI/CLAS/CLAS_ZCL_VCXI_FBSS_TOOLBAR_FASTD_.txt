
class ZCL_VCXI_FBSS_TOOLBAR_FASTD definition
  public
  inheriting from ZCL_VCXI_F0S_TOOLBAR_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BL_FASTD type ref to ZCL_VCXI_FBSS_BL_FASTD .

  methods ADD_HANDLE
    importing
      !IF_EXTENSION type STRING
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_RECLO
    importing
      !IF_EXTENSION type STRING
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods FILL_MENU_ADD_HANDLE
    importing
      !IR_MENU type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods FILL_MENU_ADD_RECLO
    importing
      !IR_MENU type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods DEL_HPARTS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    exporting
      !EF_SFDAT type ZVCXI_F0SS_SFDAT
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_TOOLBAR_FASTD definition
class ZCL_VCXI_FBSS_TOOLBAR_FASTD implementation.
  method ADD_HANDLE.

    data: LF_THNDL      type        ZVCXI_FBS_THNDL.

*** Set Extension as Handle Type
    move IF_EXTENSION to LF_THNDL.

*** Add Handle
    RR_GATE = ME->R_BL_FASTD->ADD_HANDLE( IF_THNDL = LF_THNDL ).

  endmethod.
  method ADD_PRVDR.

    data: LF_ID        type        /VCXI/CKX_ID,
          LF_EXTENSION type        STRING.

*** Provider ID with Extension (e.g specific parameter value)
    if IF_ID cs '@'.
      split IF_ID at '@' into LF_ID LF_EXTENSION.

      case LF_ID.
        when ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE ).
          RR_GATE = ME->ADD_HANDLE( IF_EXTENSION = LF_EXTENSION ).

        when ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IPRVT_CSTEP_RECLO ).
          RR_GATE = ME->ADD_RECLO( IF_EXTENSION = LF_EXTENSION ).

      endcase.
    else.
***   Create Provider directly
      RR_GATE = SUPER->ADD_PRVDR( IF_ID = IF_ID ).
    endif.

  endmethod.
  method ADD_RECLO.

    data: LF_TRECL       type        ZVCXI_FBS_TRECL.

*** Set Extension as Reclosing Type
    move IF_EXTENSION to LF_TRECL.

*** Add Conversion Step Reclosing
    RR_GATE = ME->R_BL_FASTD->ADD_CSTEP_RECLO( IF_TRECL = LF_TRECL ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS
                        IF_IPRVT          = SPACE ).

*** Create Business Logic Instance
    create object ME->R_BL_FASTD
      exporting
        IR_GATE = ME->R_GATE.

  endmethod.
  method DEL_HPARTS.

    data: LF_SFDAT     type        ZVCXI_F0SS_SFDAT.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_PART type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all Handle Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_HPART=>C_IPRVT_HPART ).

    loop at LT_GATE into LR_GATE.
***   Filter to effected Handles
      check IR_GATE->IS_PARENT( IR_GATE_CHILD = LR_GATE ) eq ABAP_TRUE.

***   Check if Handle Part still has "Standard Configuration"
      ME->R_BL_FASTD->GET_FASTD_BY_PART( exporting IR_GATE_PART = LR_GATE
                                         importing EF_SFDAT     = LF_SFDAT ).
      if LF_SFDAT ne ZCL_VCXI_FBSS_BL_FASTD=>C_SFDAT_STANDARD.
        exit.
      endif.
      append LR_GATE to LT_GATE_PART.
    endloop.

    move LF_SFDAT to EF_SFDAT.

*** Don't continue in case of Non-Standard Configuration
    check LF_SFDAT eq ZCL_VCXI_FBSS_BL_FASTD=>C_SFDAT_STANDARD.

***--------------------------------------------------------------------------------------
*** Delete Film Components by list of Parts
    check LT_GATE_PART is not initial.
    ME->R_BL_FASTD->DELETE_FCOMP_BY_PARTS( IT_GATE_PART = LT_GATE_PART ).

  endmethod.
  method DEL_PRVDR.

    data: LF_SFDAT  type        ZVCXI_F0SS_SFDAT.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Free selected Provider
    loop at ME->T_PRVDR_SELECTED into LR_GATE where TABLE_LINE is bound.

***   Provider ID with Extension (e.g specific parameter value)
      case LR_GATE->F_ID.
***--------------------------------------------------------------------------------------
***     Reclosing Conversion Step
        when ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IPRVT_CSTEP_RECLO ).

***       Check if Gate is changeable and can be deleted
          check ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.

          if LR_GATE->GET_USYNC( ) eq ABAP_FALSE.
            LR_GATE->SET_INUSE( IF_INUSE = ABAP_FALSE ).
          endif.

***       Free Reclosing Conversion Step
          LR_GATE->DO_FREE( ).


***--------------------------------------------------------------------------------------
***     Handle
        when ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE ).

***       Check if Gate is changeable and can be deleted
          check ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.

***       Try to delete Film Components of Handle Parts of Handles
          ME->DEL_HPARTS( exporting IR_GATE  = LR_GATE
                          importing EF_SFDAT = LF_SFDAT ).

***       Structural changes are not allowed, due to non-standard configuration.
          if LF_SFDAT eq ZCL_VCXI_FBSS_BL_FASTD=>C_SFDAT_NONSTANDARD.
            message id 'ZVCXI_FFSS' type 'W' number 501.
            continue.
          endif.

***       Check if Gate is changeable and can be deleted
          if LR_GATE->GET_USYNC( ) eq ABAP_FALSE.
            LR_GATE->SET_INUSE( IF_INUSE = ABAP_FALSE ).
          endif.

***       Free Handle
          LR_GATE->DO_FREE( ).

      endcase.
    endloop.

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method FILL_MENU_ADD_HANDLE.

    data: LF_ID       type        /VCXI/CKX_ID,
          LF_THNDL    type        ZVCXI_FBS_THNDL,
          LF_FCODE    type        UI_FUNC,
          LF_TEXT     type        GUI_TEXT,
          LF_DISABLED type        CUA_ACTIVE.
    data: LS_TC110T    type        ZVCXI_FBS_TC110T.
    data: LT_THNDL     type        /VCXI/CKX_TT_ID,
          LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE_BFG type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BFG   type ref to ZCL_VCXI_FBSS_PR_BFG,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.

***--------------------------------------------------------------------------------------
*** Get Provider ID of Handle
    LF_ID = ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE ).
    check LF_ID is not initial.

*** Get Finished Good Gate
    ME->R_BL_FASTD->GET_GATE_BFG( importing ER_GATE_BFG = LR_GATE_BFG ).
    check LR_GATE_BFG is bound.
    move LR_GATE_BFG->R_CLSPR ?to LR_PR_BFG.

*** Get Bag Customizing
    LR_PR_BFG->GET_IBAGT( importing ER_CUST_BAG = LR_CUST_BAG ).

***--------------------------------------------------------------------------------------
*** Get allowed Handle
    LT_THNDL = LR_CUST_BAG->GET_HANDLE( ).

    loop at LT_THNDL into LF_THNDL.
***   Get Function Code
      concatenate C_FCODE_ADD LF_ID LF_THNDL into LF_FCODE separated by '@'.

***   Get Description
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110T into LS_TC110T with key THNDL = LF_THNDL.
      if SY-SUBRC = 0.
        move LS_TC110T-DESCR  to  LF_TEXT.
      else.
        move LF_THNDL         to  LF_TEXT.
      endif.

***   Add Function
      IR_MENU->ADD_FUNCTION( FCODE    = LF_FCODE
                             TEXT     = LF_TEXT
                             DISABLED = LF_DISABLED ).
    endloop.

  endmethod.
  method FILL_MENU_ADD_RECLO.

    data: LF_ID       type        /VCXI/CKX_ID,
          LF_FCODE    type        UI_FUNC,
          LF_TEXT     type        GUI_TEXT,
          LF_DISABLED type        CUA_ACTIVE.
    data: LS_CSTEP  type        ZVCXI_FBSSC_S_BAGTY_CSTEP,
          LS_RECLO  type        ZVCXI_FBSSC_S_BAGTY_RECLO,
          LS_TC210T type        ZVCXI_FBS_TC210T.
    data: LT_CSTEP     type        ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_RECLO     type        ZVCXI_FBSSC_TT_BAGTY_RECLO,
          LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_BFG type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BFG   type ref to ZCL_VCXI_FBSS_PR_BFG,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.

***--------------------------------------------------------------------------------------
*** Get Provider ID of Conversion Step Reclosing
    LF_ID = ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IPRVT_CSTEP_RECLO ).
    check LF_ID is not initial.

*** Get Finished Good Gate
    ME->R_BL_FASTD->GET_GATE_BFG( importing ER_GATE_BFG = LR_GATE_BFG ).
    check LR_GATE_BFG is bound.
    move LR_GATE_BFG->R_CLSPR ?to LR_PR_BFG.

*** Get Bag Customizing
    LR_PR_BFG->GET_IBAGT( importing ER_CUST_BAG = LR_CUST_BAG ).

***--------------------------------------------------------------------------------------
*** Check maximum allowed Reclosing
    LT_CSTEP = LR_CUST_BAG->GET_CSTEP( ).
    read table LT_CSTEP into LS_CSTEP with key ICSTP = LF_ID.
    check SY-SUBRC eq 0.
    if LS_CSTEP-QTYMA ne 0.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IPRVT_CSTEP_RECLO ).
      if LINES( LT_GATE ) ge LS_CSTEP-QTYMA.
        move ABAP_TRUE to LF_DISABLED.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get allowed Reclosings
    LT_RECLO = LR_CUST_BAG->GET_RECLO( ).

    loop at LT_RECLO into LS_RECLO.
***   Get Function Code
      concatenate C_FCODE_ADD LF_ID LS_RECLO-TRECL into LF_FCODE separated by '@'.

***   Get Description
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC210T into LS_TC210T
                                                with key TRECL = LS_RECLO-TRECL.
      if SY-SUBRC = 0.
        move LS_TC210T-DESCR  to  LF_TEXT.
      else.
        move LS_RECLO-TRECL   to  LF_TEXT.
      endif.

***   Add Function
      IR_MENU->ADD_FUNCTION( FCODE    = LF_FCODE
                             TEXT     = LF_TEXT
                             DISABLED = LF_DISABLED ).
    endloop.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LR_SUBMENU type ref to CL_CTMENU,
          LR_MENU    type ref to CL_CTMENU,
          LR_CX_CKX  type ref to /VCXI/CX_CKX.


    try.
        case FCODE.
          when C_FCODE_ADD.
            move ABAP_UNDEFINED to ME->F_REFRESH_REQ.

***         Create DropDown Menu
            create object LR_MENU.

***         Create SubMenu for Handle
            create object LR_SUBMENU.
            ME->FILL_MENU_ADD_HANDLE( IR_MENU = LR_SUBMENU ).
            LR_MENU->ADD_SUBMENU( MENU = LR_SUBMENU
                                  TEXT = 'Handle'(M01) ).

***         Create SubMenu for Reclosing
            create object LR_SUBMENU.
            ME->FILL_MENU_ADD_RECLO( IR_MENU = LR_SUBMENU ).
            LR_MENU->ADD_SUBMENU( MENU = LR_SUBMENU
                                  TEXT = 'Reclosing'(M02) ).

        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( exporting  CONTEXT_MENU = LR_MENU
                                                        POSX         = POSX
                                                        POSY         = POSY
                                             exceptions CTMENU_ERROR = 1 ).
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_TOOLBAR_DEF.

*** Define "Add" Button as Menu
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text - Translate related
    move text-ADD to ME->F_TEXT_ADD.
    replace first occurrence of '&' in ME->F_TEXT_ADD with ''.

    move text-DEL to ME->F_TEXT_DEL.
    replace first occurrence of '&' in ME->F_TEXT_DEL with ''.

  endmethod.
