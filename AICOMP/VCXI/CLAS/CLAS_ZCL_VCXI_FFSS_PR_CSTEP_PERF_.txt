
class ZCL_VCXI_FFSS_PR_CSTEP_PERF definition
  public
  inheriting from ZCL_VCXI_FFSS_PR_CSTEP
  create public .

public section.

  constants C_PARID_COARE type /VCXI/VKS_PARID value 'ZVCXI_FB_COARE' ##NO_TEXT.
  constants C_PARID_DCUTT type /VCXI/VKS_PARID value 'ZVCXI_F0_DCUTT' ##NO_TEXT.
  constants C_PARID_LCOUT type /VCXI/VKS_PARID value 'ZVCXI_FB_LCOUT' ##NO_TEXT.
  constants C_PARID_NOLAS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOLAS' ##NO_TEXT.
  constants C_PARID_TPERF type /VCXI/VKS_PARID value 'ZVCXI_F0_TPERF' ##NO_TEXT.

  methods GET_DCUTT
    exporting
      !EF_DCUTT type ZVCXI_F0S_DCUTT
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR
      !EF_DESCR type /VCXI/CKX_DESCR
      !ES_BAPIRET2 type BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods GET_NOLAS
    exporting
      !EF_NOLAS type ZVCXI_F0S_NOLAS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TPERF
    exporting
      !EF_TPERF type ZVCXI_F0S_TPERF
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TPERF_FLASR
    returning
      value(RF_FLASR) type ZVCXI_F0S_FLASR
    raising
      /VCXI/CX_CKX .
  methods SET_DCUTT
    importing
      !IF_DCUTT type ZVCXI_F0S_DCUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_LCOUT
    importing
      !IF_LCOUT type ZVCXI_FBS_LCOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_NOLAS
    importing
      !IF_NOLAS type ZVCXI_F0S_NOLAS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TPERF
    importing
      !IF_TPERF type ZVCXI_F0S_TPERF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BY_TPERF type /VCXI/VKSC_IEVNT value 'INIT_BY_TPERF' ##NO_TEXT.
  constants C_IEVNT_O_COARE_CHANGED type /VCXI/VKSC_IEVNT value 'COARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_DCUTT_CHANGED type /VCXI/VKSC_IEVNT value 'DCUTT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LCOUT_CHANGED type /VCXI/VKSC_IEVNT value 'LCOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOLAS_CHANGED type /VCXI/VKSC_IEVNT value 'NOLAS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TPERF_CHANGED type /VCXI/VKSC_IEVNT value 'TPERF_CHANGED' ##NO_TEXT.

  methods CHECK_DCUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOLAS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TPERF
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BY_TPERF
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_CSTEP_PERF definition
class ZCL_VCXI_FFSS_PR_CSTEP_PERF implementation.
method CHECK_DCUTT.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_DCUTT( importing ER_CUST_MATNR = LR_CUST_MATNR
                             ES_BAPIRET2   = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_MATNR is bound.

endmethod.
method CHECK_NOLAS.

*** 0 - Number of Laser Lines is maintained.
*** 1 - Number of Laser Lines is not maintained.
*** 2 - Do not check.

  data: LF_NOLAS type  ZVCXI_F0S_NOLAS,
        LF_FLASR type  ZVCXI_F0S_FLASR.

  move 2 to RF_RETURN.

  move ME->GET_TPERF_FLASR( )     to LF_FLASR.
  check LF_FLASR eq ABAP_TRUE.

*** Get Number of Laser Lines
  ME->GET_NOLAS( importing EF_NOLAS = LF_NOLAS ).
  if LF_NOLAS is not initial.
    move 0 to RF_RETURN.
    return.
  endif.

*** Check if Mandatory
  if LF_FLASR eq ABAP_TRUE and LF_NOLAS is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_TPERF.

*** 0 - Perforation Type is maintained.
*** 1 - Perforation Type is not maintained.

  data: LF_TPERF  type  ZVCXI_F0S_TPERF.

  move 1 to RF_RETURN.

  ME->GET_TPERF( importing EF_TPERF = LF_TPERF ).
  if LF_TPERF is not initial.
    move 0 to RF_RETURN.
  endif.

endmethod.
  method GET_DCUTT.

    data: LF_DCONF type /VCXI/VKCR_DCONF.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.

***------------------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DCUTT ).
    move LS_PARAM-ATWRT to EF_DCUTT.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_DCUTT is not initial.

***------------------------------------------------------------------------------------------------
*** Get Instance of Material
    if ER_CUST_MATNR is requested.
      try.
          ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).
          ER_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = EF_DCUTT
                                                                 IF_WERKS = ME->GET_WERKS( )
                                                                 IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_MATNR.
      endtry.
    endif.

*** Get Material Description
    if EF_DESCR is requested.
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = EF_DCUTT
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.

      if SY-SUBRC ne 0.
        clear EF_DESCR.
      else.
        move LS_MAKT-MAKTX to EF_DESCR.
      endif.
    endif.

  endmethod.
  method GET_NOLAS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOLAS ).
    move LS_PARAM-ATFLV to EF_NOLAS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Perforation Type
    case ME->CHECK_TPERF( ) .
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

*** Check Number of Laser Lines
    case ME->CHECK_NOLAS( ) .
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

*** Check Die Cut Tool Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DCUTT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Perforation Type
    case ME->CHECK_TPERF( ).
      when 0.
***     Perforation Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '451' ).

      when 1.
***     Perforation Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '452' ).

    endcase.

***----------------------------------------------------------------------------
*** Check Number of Laser Lines
    case ME->CHECK_NOLAS( ).
      when 0.
***     Number of Laser Lines is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '453' ).

      when 1.
***     Number of Laser Lines is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '454' ).

    endcase.

***----------------------------------------------------------------------------
*** Check Die Cut Tool Number
    ME->CHECK_DCUTT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TPERF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPERF ).
    move LS_PARAM-ATWRT to EF_TPERF.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_TPERF is not initial.

    if EF_DESCR is requested.
***   Get Perforation Type Description
      select single DESCR
               from ZVCXI_F0S_TC030T
               into EF_DESCR
              where LANGU eq SY-LANGU
                and TPERF eq EF_TPERF.

      if SY-SUBRC ne 0.
        select single DESCR
                 from ZVCXI_F0S_TC030T
                 into EF_DESCR
                where TPERF eq EF_TPERF.
      endif.
    endif.

  endmethod.
  method GET_TPERF_FLASR.

    data: LF_TPERF  type  ZVCXI_F0S_TPERF.

    move ABAP_UNDEFINED to RF_FLASR.

*** Get Perforation Type
    ME->GET_TPERF( importing EF_TPERF = LF_TPERF ).
    check LF_TPERF is not initial.

*** Get Perforation Type  Flag - Laser
    RF_FLASR = ZCL_VCXI_F0S_CUST_PERF=>GET_FLASR( IF_TPERF = LF_TPERF ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_BY_TPERF.
        ME->HANDLE_INIT_BY_TPERF( ).

    endcase.

  endmethod.
  method HANDLE_INIT_BY_TPERF.

*** Get Laser Flag of Perforation Type
    case ME->GET_TPERF_FLASR( ).
***   Laser based Perforation
      when ABAP_TRUE.
        ME->SET_DCUTT( IF_DCUTT = SPACE
                       IF_SETBY = SPACE ).

***   Die Cutting based Perforation
      when ABAP_FALSE.
        ME->SET_NOLAS( IF_NOLAS = 0
                       IF_SETBY = SPACE ).

***   No valid Perforation Type
      when others.
        ME->SET_DCUTT( IF_DCUTT = SPACE
                       IF_SETBY = SPACE ).
        ME->SET_NOLAS( IF_NOLAS = 0
                       IF_SETBY = SPACE ).

    endcase.

  endmethod.
  method SET_DCUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DCUTT ).

    move IF_DCUTT           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DCUTT_CHANGED ).
    endif.

  endmethod.
  method SET_LCOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LCOUT ).

    move IF_LCOUT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LCOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOLAS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOLAS ).

    move IF_NOLAS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOLAS_CHANGED ).

    endif.

  endmethod.
  method SET_TPERF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPERF ).

    move IF_TPERF           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TPERF_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    ME->GET_TPERF( importing EF_TPERF = data(LF_TPERF)                "Perforation Type
                             EF_DESCR = data(LF_DESCR) ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL     = CR_NETGRAPH_JSON->GET_LABEL( IF_VALUE = LF_TPERF )
                                          IF_VALUE     = LF_DESCR
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://horizontal-grip'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
