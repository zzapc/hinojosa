
class ZCL_VCXI_P2SS_BL_FDMDL definition
  public
  inheriting from ZCL_VCXI_PXSS_BL_FDMDL
  create public .

public section.

  constants C_FDMDL_FCFG type ZVCXI_PXSS_FDMDL value 'FCFG' ##NO_TEXT.
  constants C_FDMDL_FCPART type ZVCXI_PXSS_FDMDL value 'FCPART' ##NO_TEXT.
  constants C_FDMDL_FCPRDTL type ZVCXI_PXSS_FDMDL value 'FCPRDTL' ##NO_TEXT.
  constants C_FDMDL_FCSHT type ZVCXI_PXSS_FDMDL value 'FCSHT' ##NO_TEXT.
  constants C_IFDMV_DCT type ZVCXI_PXSS_IFDMV value 'P2_DCT' ##NO_TEXT.
  constants C_IFDMV_FCPRDTL type ZVCXI_PXSS_IFDMV value 'P2_FCPRDTL' ##NO_TEXT.
  constants C_IFDMV_INL type ZVCXI_PXSS_IFDMV value 'P2_INL' ##NO_TEXT.
  constants C_IFDMV_SE_DCT type ZVCXI_PXSS_IFDMV value 'P2_SE_DCT' ##NO_TEXT.
  constants C_IFDMV_SHT type ZVCXI_PXSS_IFDMV value 'P2_SHT' ##NO_TEXT.
  constants C_SRCIN_PROC type ZVCXI_P2SS_SRCIN value 'PROC' ##NO_TEXT.
  constants C_SRCIN_RCUT type ZVCXI_P2SS_SRCIN value 'RCUT' ##NO_TEXT.

  methods GET_SRCIN
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_SRCIN) type ZVCXI_P2SS_SRCIN
    raising
      /VCXI/CX_CKX .
  methods ADJ_CSTEP_CLOS
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IS_FDI_CSTEP_CLOS type ZVCXI_P2SS_S_FDI_CSTEP_CLOS
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ADJ_SRCIN
    importing
      !IF_SRCIN type ZVCXI_P1SS_SRCIN
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .

  methods ADD_CSTEP
    redefinition .
  methods ADD_XFG
    redefinition .
  methods DET_IFDMV
    redefinition .
  methods GET_CLSUI
    redefinition .
  methods GET_XSHT
    redefinition .
  methods SET_XSHT
    redefinition .
protected section.

  methods GET_INIT_DCT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_INL
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_SHT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_SE_DCT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .

  methods INIT_FDMDL
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SS_BL_FDMDL definition
class ZCL_VCXI_P2SS_BL_FDMDL implementation.
  method ADD_CSTEP.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LR_GATE_OUT  type ref to /VCXI/CL_VKSR_GATE.


    case ME->F_IFDMV.
***   Adjust Output Gate for Separation
      when C_IFDMV_SE_DCT.
        loop at CT_FASTD_XCOMP into LS_FASTD_XCOMP.
          if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
            LR_GATE_OUT = LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ]-R_GATE.
            exit.
          endif.
        endloop.

      when others.
        LR_GATE_OUT = IR_GATE_OUT.
    endcase.

    SUPER->ADD_CSTEP( exporting IF_ISELF       = IF_ISELF
                                IR_GATE_OUT    = LR_GATE_OUT
                                IR_DATA        = IR_DATA
                                IT_FDMEX       = IT_FDMEX
                                IF_INDEX       = IF_INDEX
                      changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP ).

  endmethod.
  method ADD_XFG.

    data: LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


    check ME->F_IFDMV = C_IFDMV_SE_DCT.

*** Search for Separation Step
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).

***     Create new Connection
        try.
            append value #( GXCON_OUT = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                            GXCON_IN  = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                          ) to CT_XCONG assigning <S_XCONG>.
          catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_UUID_ERROR ).
        endtry.

***     Add new Connection Out
        append value #( IPARE = 'OUTPUT'
                        ISELF = 'FCCONO'
                        R_DATA = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                        T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Create new Component
        append value #( ID     = 'COMP_P2'
                        XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                        T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'FCCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN ) )
                                          ( IPARE = 'OUTPUT'  ISELF = 'FCFG' )
                                        )
                      ) to LT_FASTD_XCOMP.
      endif.
    endloop.

*** Add added components to overall component list
    append lines of LT_FASTD_XCOMP to CT_FASTD_XCOMP.

  endmethod.
  method ADJ_CSTEP_CLOS.

    data: LR_GATE_OUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


*** Ignore Fast Data Model "Procurement Detail"
    check ME->F_FDMDL ne C_FDMDL_FCPRDTL.

***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

***------------------------------------------------------------------------------------------------
*** Get Component for Conversion
    check CT_FASTD_XCOMP is not initial.
    LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                                       IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
    check LR_GATE_XCOMP is bound.
    assign CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ] to <S_FASTD_XCOMP>.

*** Add/Remove Closing Step
    if IS_FDI_CSTEP_CLOS-JOITY is not initial.
      if not LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CSTEP_CLOS' ] ).
        append value #( IPARE = 'CONV'
                        ISELF = 'CSTEP_CLOS'
                        R_DATA = new ZVCXI_P2SS_S_FDI_CSTEP_CLOS( IS_FDI_CSTEP_CLOS )
                      ) to <S_FASTD_XCOMP>-T_DATA.
      endif.
    else.
      delete <S_FASTD_XCOMP>-T_DATA where ISELF = 'CSTEP_CLOS'.
    endif.

  endmethod.
  method ADJ_SRCIN.

    data: LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.


*** Ignore Fast Data Model "Procurement Detail"
    check ME->F_FDMDL ne C_FDMDL_FCPRDTL.

*** Get excluded Gates
    LT_GATE_EXCLUDE = cond #( when IT_GATE_EXCLUDE is supplied then IT_GATE_EXCLUDE
                              else ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = IR_GATE_OUT
                                                         IT_FASTD_XCOMP = CT_FASTD_XCOMP ) ).

*** Start based on current Source
    case ME->GET_SRCIN( IR_GATE_OUT     = IR_GATE_OUT
                        IT_FASTD_XCOMP  = CT_FASTD_XCOMP
                        IT_GATE_EXCLUDE = LT_GATE_EXCLUDE ).
***--------------------------------------------------------------------------------------
      when C_SRCIN_PROC.    " Input Source - Procurement
        case IF_SRCIN.
          when C_SRCIN_RCUT.    " Input Source - Reel Cutting
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'MS_FCPROC'
                                              IF_ISELF_NEW    = 'RCUT'
*                                              IR_DATA         = new ZVCXI_P2SS_S_FDI_RCUT( xxx = ABAP_TRUE )
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
        endcase.

***--------------------------------------------------------------------------------------
      when C_SRCIN_RCUT.    " Input Source - Reel Cutting
        case IF_SRCIN.
          when C_SRCIN_PROC.    " Input Source - Procurement
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'RCUT'
                                              IF_ISELF_NEW    = 'MS_FCPROC'
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
        endcase.
    endcase.

  endmethod.
  method DET_IFDMV.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Get Configuration Structure
    SUPER->DET_IFDMV( importing ET_FASTD_XCOMP = ET_FASTD_XCOMP ).
    check ME->T_GATE_OUT is not initial.

***------------------------------------------------------------------------------------------------
*** Identify Variant based on Outbound Gate
    case type of ME->T_GATE_OUT[ 1 ]->R_CLSPR.
***   Sheet
      when type ZCL_VCXI_PXSS_PR_XSHT.
        ME->F_IFDMV = C_IFDMV_SHT.
***   Procurement Details
      when type ZIF_VCXI_P4SS_PRDTL.
        ME->F_IFDMV = C_IFDMV_FCPRDTL.
    endcase.
    check ME->F_IFDMV is initial.

***------------------------------------------------------------------------------------------------
*** Identify Variant based on Fast Data Integration Information
    loop at ET_FASTD_XCOMP into LS_FASTD_XCOMP.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_SSS' ] ).
        ME->F_IFDMV = C_IFDMV_INL.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_DCUT' ] ).
        ME->F_IFDMV = C_IFDMV_DCT.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
        ME->F_IFDMV = C_IFDMV_SE_DCT.
        exit.
      endif.
    endloop.

    if ME->F_IFDMV is initial and
       LINES( ME->T_GATE_OUT ) eq 1.
***   Fallback to Sheet
      ME->F_IFDMV = C_IFDMV_SHT.
    endif.

  endmethod.
  method GET_CLSUI.

    RF_CLSUI = 'ZCL_VCXI_P2SS_UI_FDMDL'.

  endmethod.
  method GET_INIT_DCT.

    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_FCPROC' )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_DCUT'  R_DATA = new ZVCXI_P2SS_S_FDI_CSTEP_DCUT( SCORE_FAALL = ABAP_TRUE )
                                                                                T_FDMEX = value #( ( conv #( 'TDCUT' ) )
                                                                                                   ( conv #( 'NOUTW' ) )
                                                                                                   ( conv #( 'NOUTL' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when 'FCFG'.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCFG' ) to <S_FASTD_XCOMP>-T_DATA.

      when 'FCPART'.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'FCPART'
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'FCPART'       ISELF = 'FCCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_INL.

    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_FCPROC' )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_SSS'  R_DATA = new ZVCXI_P2SS_S_FDI_CSTEP_SSS( DIMEN       = ZCL_VCXI_P2SS_PR_CSTEP_SSS=>C_DIMEN_LENGTH
                                                                                                                        NOUTT       = 1
                                                                                                                        SCORE_FAALL = ABAP_TRUE ) )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when 'FCFG'.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCFG' ) to <S_FASTD_XCOMP>-T_DATA.

      when 'FCPART'.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'FCPART'
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'FCPART'       ISELF = 'FCCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_SE_DCT.

***--------------------------------------------------------------------------------------
*** Create new Connection
    append ME->GET_NEW_XCONG( ) to CT_XCONG.
    append ME->GET_NEW_XCONG( ) to CT_XCONG.

***--------------------------------------------------------------------------------------
*** Procurement and Die Cut Separation
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_FCPROC' )
                                      ( IPARE = 'OUTPUT'  ISELF = 'SSTEP_DCUT'  R_DATA  = new ZVCXI_P2SS_S_FDI_SSTEP_DCUT( SCORE_FAALL = ABAP_TRUE )
                                                                                T_FDMEX = value #( ( conv #( 'TDCUT' ) ) ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'FCCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = CT_XCONG[ 1 ]-GXCON_OUT )
                                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'FCCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = CT_XCONG[ 2 ]-GXCON_OUT )
                                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP.

*** Folding Carton Finished Goods
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'FCCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = CT_XCONG[ 1 ]-GXCON_IN ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'FCFG' )
                                    )
                  ) to CT_FASTD_XCOMP.
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'FCCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = CT_XCONG[ 2 ]-GXCON_IN ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'FCFG' )
                                    )
                  ) to CT_FASTD_XCOMP.

  endmethod.
  method GET_INIT_SHT.

    data: LF_INDEX type I.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA,
                   <S_XCONG>            type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P2'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_FCPROC' )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when 'FCFG'.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCFG'    R_DATA = new ZVCXI_P2SS_S_FDI_FCFG( ECMA  = '0110'
                                                                                                GRAIO = 'V'
                                                                                                JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                            T_FDMEX = value #( ( conv #( 'NOUTT' ) )
                                                                               ( conv #( 'COMPR' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.


      when 'FCPART'.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCCONO'        R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                  T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'FCPART'   R_DATA = new ZVCXI_P2SS_S_FDI_FCPART( ECMA  = '0110'
                                                                                                        GRAIO = 'V'
                                                                                                        JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                                  T_FDMEX = value #( ( conv #( 'PARAT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'FCPART'       ISELF = 'FCCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.


      when C_FDMDL_FCSHT.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'FCCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Find Sheet Placeholder in Lamination Step
        loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
          check LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] ).
          LF_INDEX = LINE_INDEX( <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] ).

***       Replace Placeholder
          assign <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] to <S_FASTD_XCOMP_DATA>.
          <S_FASTD_XCOMP_DATA>-ISELF = 'FCSHT'.

***       Add Connection In
          insert value #( IPARE = 'FCSHT'       ISELF = 'FCCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                        ) into <S_FASTD_XCOMP>-T_DATA index LF_INDEX + 1.
        endloop.
    endcase.

  endmethod.
  method GET_SRCIN.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP.


    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
***   Search for Procurement
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                             ISELF = 'MS_FCPROC' ] ).
        RF_SRCIN = C_SRCIN_PROC.   " Input Source - Procurement
        ER_GATE  = LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                          ISELF = 'MS_FCPROC' ]-R_GATE.
      endif.

***   Search for Reel Cutting
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                             ISELF = 'RCUT' ] ) and
         LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'MS_REEL' ] ).
        RF_SRCIN = C_SRCIN_RCUT.   " Input Source - Reel Cutting
        ER_GATE  = LS_FASTD_XCOMP-T_DATA[ ISELF = 'MS_REEL' ]-R_GATE.
      endif.
    endloop.

  endmethod.
  method GET_XSHT.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FD_FCSHT> type ZVCXI_P2SS_S_FD_FCSHT,
                   <S_DATA>     type ANY.


*** Super call for checks
    SUPER->GET_XSHT( ).

*** Define Gate OUT
    LR_GATE_OUT = ME->T_GATE_OUT[ 1 ].

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P2SS_S_FD_FCSHT.
    assign RR_DATA->* to <S_FD_FCSHT>.


***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Get Source for Input
    <S_FD_FCSHT>-SRCIN = ME->GET_SRCIN( IR_GATE_OUT     = LR_GATE_OUT
                                        IT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                        IT_GATE_EXCLUDE = LT_GATE_EXCLUDE ).

*** Fill Sheet Structure based on Fast Data Integration Information
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        assign LS_FASTD_XCOMP_DATA-R_DATA->* to <S_DATA>.

***     Move correspoinding fields, but except fields defined by Component Data
        data(LR_MAPPER) = CL_ABAP_CORRESPONDING=>CREATE( SOURCE      = <S_DATA>
                                                         DESTINATION = <S_FD_FCSHT>
                                                         MAPPING     = value CL_ABAP_CORRESPONDING=>MAPPING_TABLE( for LF_FDMEX in LS_FASTD_XCOMP_DATA-T_FDMEX
                                                                                                                   ( LEVEL = 0 KIND = 2 SRCNAME = LF_FDMEX DSTNAME = LF_FDMEX ) ) ).
        LR_MAPPER->EXECUTE( exporting SOURCE      = <S_DATA>
                            changing  DESTINATION = <S_FD_FCSHT> ).
      endloop.
    endloop.

  endmethod.
  method INIT_FDMDL.

*** Get initial Structure based on Model Variant
    case IF_IFDMV.
      when C_IFDMV_SHT.
        ME->GET_INIT_SHT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_INL.
        ME->GET_INIT_INL( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_DCT.
        ME->GET_INIT_DCT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_SE_DCT.
        ME->GET_INIT_SE_DCT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                      CT_XCONG       = CT_XCONG ).
    endcase.

  endmethod.
  method SET_XSHT.

    data: LF_EXIST type ABAP_BOOL.
    data: LS_FD_FCSHT type ZVCXI_P2SS_S_FD_FCSHT.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG        type ZVCXI_PXSS_TT_XCONG,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_DATA>             type ANY,
                   <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Super call for checks
    SUPER->SET_XSHT( IS_DATA = IS_DATA ).

*** Define Gate OUT
    LR_GATE_OUT = ME->T_GATE_OUT[ 1 ].

*** "Cast" Structure
    move-corresponding IS_DATA to LS_FD_FCSHT.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME
                                               importing ET_XCONG    = LT_XCONG ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Update Fast Data Integration Information based on data structure
    loop at LT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ).
        assign <S_FASTD_XCOMP_DATA>-R_DATA->* to <S_DATA>.
        <S_DATA> = corresponding #( base ( <S_DATA> ) IS_DATA ).
      endloop.
    endloop.

*** Adjust by Input Source
    ME->ADJ_SRCIN( exporting IF_SRCIN        = LS_FD_FCSHT-SRCIN
                             IR_GATE_OUT     = LR_GATE_OUT
                             IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                   changing  CT_FASTD_XCOMP  = LT_FASTD_XCOMP
                             CT_XCONG        = LT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME
                              IT_FASTD_XCOMP = LT_FASTD_XCOMP
                              IT_XCONG       = LT_XCONG ).

  endmethod.
