
class ZCL_VCXI_PCSSC_UI_BOARD_G definition
  public
  create protected .

public section.

  data S_BOARD_G_VIS type ZVCXI_PCSSC_S_BOARD_G_VIS read-only .
  data S_DYNP_PAPER_G type /VCXI/CKX_S_DYNP_KEY read-only .

  methods DO_MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE
    importing
      !IS_BOARD_G type ZVCXI_PCSSC_S_BOARD_G_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CD
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FCODE_ADD_BOARD_P type UI_FUNC value 'GRID_BOARD_P_ADD'. "#EC NOTEXT
  constants C_FCODE_COPY_BOARD_P type UI_FUNC value 'GRID_BOARD_P_COPY'. "#EC NOTEXT
  constants C_FCODE_DEL_BOARD_P type UI_FUNC value 'GRID_BOARD_P_DEL'. "#EC NOTEXT
  constants C_UC_BACK type SYUCOMM value 'BACK'. "#EC NOTEXT
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_CHECK type SYUCOMM value 'CHECK'. "#EC NOTEXT
  constants C_UC_EXIT type SYUCOMM value 'EXIT'. "#EC NOTEXT
  constants C_UC_GFILTER type SYUCOMM value 'GFILTER'. "#EC NOTEXT
  constants C_UC_GFILTER_F type SYUCOMM value 'GFILTER_F'. "#EC NOTEXT
  constants C_UC_SAVE type SYUCOMM value 'SAVE'. "#EC NOTEXT
  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE'. "#EC NOTEXT
  data R_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G .
  data R_GRID_BOARD_P type ref to CL_GUI_ALV_GRID .
  data R_GRID_PAPER_G type ref to CL_GUI_ALV_GRID .
  data T_BOARD_P_GRID type ZVCXI_PCSSC_TT_BOARD_P_GRID .
  data T_PAPER_G_GRID type ZVCXI_PCSSC_TT_PAPER_G_GRID .

  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DBLCLK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR_BOARD_P
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods INIT_CONTAINER_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_PAPER_G
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_PAPER_G
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.

  data R_CONTAINER_BOARD_P type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_PAPER_G type ref to CL_GUI_CUSTOM_CONTAINER .

  methods GET_FIELDCAT_BOARD_P
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_PAPER_G
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_PAPER_G
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED_FIN_PAP_G
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_PAPER_G
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED .
  methods HANDLE_UC_ADD_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_GFILTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_BOARD_P
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_PAPER_G
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    importing
      !IR_GRID type ref to CL_GUI_ALV_GRID
    changing
      !CT_FCAT type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_UI_BOARD_G definition
class ZCL_VCXI_PCSSC_UI_BOARD_G implementation.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->R_BOARD_G->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

***----------------------------------------------------------------------------
*** Check Flute
  if IR_BOARD_G->R_FLUTE is not bound.
*** The Flute does not exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_PCSSC'
                                          IF_MSGNO = '160' ).
  endif.

***----------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_G=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_G=>C_ACTVT_DISPLAY
                                      IR_BOARD_G = IR_BOARD_G ).

  move IR_BOARD_G to R_BOARD_G.

endmethod.
method DO_FREE.

***------------------------------------------------------------------------------------------
*** Free Grid Board Plant
  if ME->R_GRID_BOARD_P is bound.
    ME->R_GRID_BOARD_P->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_BOARD_P.
  endif.

*** Free Container Board Plant
  if ME->R_CONTAINER_BOARD_P is bound.
    ME->R_CONTAINER_BOARD_P->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_BOARD_P.
  endif.

***------------------------------------------------------------------------------------------
*** Free Grid Paper Global
  if ME->R_GRID_PAPER_G is bound.
    ME->R_GRID_PAPER_G->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_PAPER_G.
  endif.

*** Free Container Paper Info
  if ME->R_CONTAINER_PAPER_G is bound.
    ME->R_CONTAINER_PAPER_G->FREE( exceptions
                                   CNTL_ERROR        = 1
                                   CNTL_SYSTEM_ERROR = 2
                                   others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_PAPER_G.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:             LF_LOCKED   type           /VCXI/CKX_LOCKED,
                    LF_INDEX    type           CHAR2,
                    LF_GRP      type           CHAR10,
                    LF_FIELD    type           FIELDNAME.
  field-symbols:    <F_FIELD>   type           any.

  check ME->R_BOARD_G is bound.
*** Get lock Status
  move ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Only show values if not in change mode
  loop at screen.
    if LF_LOCKED ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify screen.
  endloop.

*** Remove Fields that are not needed for Boards in Production Mode
  loop at screen.
    if ME->R_BOARD_G->S_MBOAR-BSTAL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
      if SCREEN-GROUP1 eq 'STC'.
        move 0 to SCREEN-ACTIVE.
      endif.
    endif.
    modify screen.
  endloop.

*** Modify Screen for Plant Board Description
  do 4 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'IDEST' LF_INDEX into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_G_VIS to <F_FIELD>.
    if <F_FIELD> is not assigned or
       <F_FIELD> is initial.
      concatenate 'D' LF_INDEX into LF_GRP.
      loop at screen.
        if SCREEN-GROUP1 eq LF_GRP.
          SCREEN-ACTIVE   = 0.
          SCREEN-REQUIRED = 0.
          SCREEN-INPUT    = 0.
        endif.
        modify screen.
      endloop.
    endif.
  enddo.

endmethod.
method DO_PBO.

  data:  LF_SDATE     type        ZVCXI_PCSSC_SDATE.
  data:  LI_WERKS     type        ZVCXI_PCSSC_TT_WERKS.

***----------------------------------------------------------------------------
*** Set Titlebar
  if ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    set titlebar '0210_TITLE' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  else.
    set titlebar '0200_TITLE' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  endif.

***----------------------------------------------------------------------------
*** Get Filter Values
  call function 'ZVCXI_PCSSC_GFILTER_GET'
    importing
      EI_WERKS = LI_WERKS
      EF_SDATE = LF_SDATE.

*** Switch Filter function if it is filled or not
  if LI_WERKS is not initial or
     LF_SDATE is not initial.
*** Set Status with Filter
    set pf-status '0200_STATUS_F' of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  else.
*** Set Status without Filter
    set pf-status '0200_STATUS'   of program 'SAPLZVCXI_PCSSC_UI_BOARD'.
  endif.

***----------------------------------------------------------------------------
*** Init VIS for Global Board Info
  ME->INIT_VIS( ).

*** Refresh Grids
  ME->REFRESH_GRID_BOARD_P( ).
  ME->REFRESH_GRID_PAPER_G( ).

endmethod.
method DO_UPDATE.

  data:             LF_INDEX          type    CHAR2,
                    LF_IDEST          type    FIELDNAME,
                    LF_DESCR          type    FIELDNAME.
  field-symbols:    <F_IDEST>         type    any,
                    <F_DESCR_NEW>     type    any.

*** Set changed Values
  if IS_BOARD_G-BOARD ne ME->R_BOARD_G->F_BOARD.
    ME->R_BOARD_G->SET_BOARD( IF_BOARD = IS_BOARD_G-BOARD ).
  endif.

  if IS_BOARD_G-VALFR ne ME->R_BOARD_G->F_VALFR.
    ME->R_BOARD_G->SET_VALFR( IF_VALFR = IS_BOARD_G-VALFR ).
  endif.

  if IS_BOARD_G-VALTO ne ME->R_BOARD_G->F_VALTO.
    ME->R_BOARD_G->SET_VALTO( IF_VALTO = IS_BOARD_G-VALTO ).
  endif.

*** Check if Valid From smaller than Valid To Date
  if ME->R_BOARD_G->F_VALTO <= ME->R_BOARD_G->F_VALFR.
*** The Valid To Date is smaller than the Valid From Date, please check.
    if ME->R_BOARD_G->F_BSAVI eq ABAP_TRUE.
      message id 'ZVCXI_PCSSC' type 'W' number '154'.
    else.
      message id 'ZVCXI_PCSSC' type 'E' number '154'.
    endif.
  endif.

  if IS_BOARD_G-STARC ne ME->R_BOARD_G->F_STARC.
    ME->R_BOARD_G->SET_STARC( IF_STARC = IS_BOARD_G-STARC ).
  endif.

*** Set Global Description
  do 4 times.
    move SY-INDEX to LF_INDEX.
    concatenate 'IDEST' LF_INDEX into LF_IDEST.
    concatenate 'DESCR' LF_INDEX into LF_DESCR.
    assign component LF_IDEST of structure IS_BOARD_G to <F_IDEST>.
    if <F_IDEST> is not initial.
      assign component LF_DESCR    of structure IS_BOARD_G  to <F_DESCR_NEW>.
      ME->R_BOARD_G->SET_BODSC( IF_IDEST = <F_IDEST>
                                IF_BODSC = <F_DESCR_NEW> ).
    endif.
  enddo.

endmethod.
method DO_USER_COMMAND.

*** Check for Changes
  if ME->R_GRID_PAPER_G is bound.
    ME->R_GRID_PAPER_G->CHECK_CHANGED_DATA( ).
  endif.

*** Handle User Command
  case IF_UCOMM.
    when C_UC_EXIT or C_UC_CANCEL or C_UC_BACK.
      if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE.
        ME->DO_FREE( ).
        leave to screen 0.
      endif.

*** Display/Change
    when C_UC_TOGGLE.
      ME->HANDLE_UC_TOGGLE( ).

*** Save Button
    when C_UC_SAVE.
      ME->HANDLE_UC_SAVE( ).

*** Change Document
    when 'CD'.
      ME->HANDLE_UC_CD( ).

*** Check the Instance
    when C_UC_CHECK.
      ME->HANDLE_UC_CHECK( ).

*** Global Filter
    when C_UC_GFILTER or
         C_UC_GFILTER_F.
      ME->HANDLE_UC_GFILTER( ).

  endcase.

endmethod.
method GET_FIELDCAT_BOARD_P.

  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_BOARD_P_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
*** Make Status ready for input
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'TXT04' or 'STATU' or 'STSMA'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'STATU_DESCR'.
***     Remove Board Status if it is not defined
        if ZCL_VCXI_PCSSC_BOARD_P=>IS_STATU_ACTIVE( IF_MBOAR = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                    IF_TBOAR = ME->R_BOARD_G->F_TBOAR ) eq ABAP_FALSE.
          move ABAP_TRUE    to <S_FCAT>-TECH.
        endif.

    endcase.
  endloop.

endmethod.
method GET_FIELDCAT_PAPER_G.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_PAPER_G_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
*** Get lock Status
  move ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** If Paper Mat and Wax Code are maintained on Plant Lvl, make em invisible
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'BPMAT'.
        if ME->R_BOARD_G->S_MBOAR-BPAPL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
        else.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.
        endif.
      when 'WAXCO'.
        if ME->R_BOARD_G->S_MBOAR-BWAXL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.
        else.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.
        endif.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA_BOARD_P.

  data:          LF_GFILTER_SDATE  type          ZVCXI_PCSSC_SDATE,
                 LF_GUID           type          /VCXI/CKX_GUID,
                 LF_GBOGV          type          ZVCXI_PCSSC_GBOGV.
  data:          LS_BOARD_P_GRID   type          ZVCXI_PCSSC_S_BOARD_P_GRID,
                 LS_TD110          type          ZVCXI_PCS_TD110.
  data:          LT_TD110          type table of ZVCXI_PCS_TD110.
  data:          LI_GFILTER_WERKS  type          ZVCXI_PCSSC_TT_WERKS.
  data:          LR_BOARD_P        type ref to   ZCL_VCXI_PCSSC_BOARD_P.
  field-symbols: <S_BODSC>         type          ZVCXI_PCSSC_S_BODSC.

  clear: ME->T_BOARD_P_GRID.

***--------------------------------------------------------------------------------------
*** Get Filter Values
  call function 'ZVCXI_PCSSC_GFILTER_GET'
    importing
      EI_WERKS = LI_GFILTER_WERKS
      EF_SDATE = LF_GFILTER_SDATE.

*** Get GUID of Global Version
  move ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GBOGV.

*** Select all Plant Versions (filtered by Plant)
  select * into table LT_TD110
           from ZVCXI_PCS_TD110
          where GBOGV eq LF_GBOGV.

  sort LT_TD110 by WERKS.

***--------------------------------------------------------------------------------------
*** Get Instance for all existing Boards
  loop at LT_TD110 into LS_TD110 where WERKS in LI_GFILTER_WERKS.
    if LF_GFILTER_SDATE is initial.
***   Get each Plant Version
      move LS_TD110-GBOPV to LF_GUID.
      move ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to LR_BOARD_P.
    else.
***   Use Valid Plant Version only
      if LR_BOARD_P is bound and
         LR_BOARD_P->F_WERKS eq LS_TD110-WERKS.
        continue.
      endif.
      try.
          LR_BOARD_P = ZCL_VCXI_PCSSC_BOARD_P=>GET_INSTANCE_BY_DATE( IR_BOARD_G = ME->R_BOARD_G
                                                                     IF_WERKS   = LS_TD110-WERKS
                                                                     IF_DATE    = LF_GFILTER_SDATE ).
        catch /VCXI/CX_CKX.
          clear: LR_BOARD_P.
      endtry.
    endif.
    check LR_BOARD_P is bound.

    clear LS_BOARD_P_GRID.
    move LR_BOARD_P->F_WERKS    to LS_BOARD_P_GRID-WERKS.
    move LR_BOARD_P->F_VALFR    to LS_BOARD_P_GRID-VALFR.
    move LR_BOARD_P->F_VALTO    to LS_BOARD_P_GRID-VALTO.
    move LR_BOARD_P             to LS_BOARD_P_GRID-BOARD_P.

*** Get Board Status
    move LR_BOARD_P->F_STATU    to LS_BOARD_P_GRID-STATU.

    ZCL_VCXI_PCSSC_BOARD_P=>GET_STATU_DESCR( exporting IF_MBOAR       = ME->R_BOARD_G->S_MBOAR-MBOAR
                                                       IF_TBOAR       = ME->R_BOARD_G->F_TBOAR
                                                       IF_STATU       = LS_BOARD_P_GRID-STATU
                                             importing EF_TXT04       = LS_BOARD_P_GRID-TXT04
                                                       EF_STATU_DESCR = LS_BOARD_P_GRID-STATU_DESCR
                                                       EF_STSMA       = LS_BOARD_P_GRID-STSMA ).

*** Board Description
    read table LR_BOARD_P->T_BODSC assigning <S_BODSC>
                                   with key LANGU = SY-LANGU.

    if SY-SUBRC eq 0.
      move <S_BODSC>-DESCR to LS_BOARD_P_GRID-DESCR.
    endif.

    append LS_BOARD_P_GRID to ME->T_BOARD_P_GRID.

  endloop.

  sort ME->T_BOARD_P_GRID by WERKS VALFR VALTO.

***---------------------------------------------------------------------------------------------------
*** Check Filter has not removed all entries
  if ME->T_BOARD_P_GRID is     initial and
     LT_TD110           is not initial.
*** No valid entries for defined Filter
    message id 'ZVCXI_PCSSC' type 'S' number '051' display like 'W'.
  endif.

endmethod.
method GET_GRID_DATA_PAPER_G.

  data:          LS_PAPER       type ZVCXI_PCSSC_S_PAPER,
                 LS_MAKT        type MAKT.
  field-symbols: <S_PAPER_GRID> type ZVCXI_PCSSC_S_PAPER_G_GRID.

  clear: T_PAPER_G_GRID.

***------------------------------------------------------------------------------------------
*** Move the Global Paper Instance to the Grid
  loop at ME->R_BOARD_G->T_PAPER into LS_PAPER.
    append initial line         to ME->T_PAPER_G_GRID assigning <S_PAPER_GRID>.
    move-corresponding LS_PAPER to <S_PAPER_GRID>.

*** Get Material Description
    if <S_PAPER_GRID>-BPMAT is not initial.
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = <S_PAPER_GRID>-BPMAT
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.
      if SY-SUBRC eq 0.
        move LS_MAKT-MAKTX to <S_PAPER_GRID>-MAKTX.
      endif.
    endif.
  endloop.

endmethod.
method GET_LAYOUT.

  move 'X'      to RS_LAYOUT-EDIT_MODE.
  move 'X'      to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL' to RS_LAYOUT-STYLEFNAME.

*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''       to RS_LAYOUT-EDIT.

endmethod.
method HANDLE_DATA_CHANGED_FIN_PAP_G.

  data:  LS_GOOD_CELLS     type        LVC_S_MODI,
         LS_PAPER_G_GRID   type        ZVCXI_PCSSC_S_PAPER_G_GRID,
         LS_PAPER          type        ZVCXI_PCSSC_S_PAPER.
  data:  LR_CX_CKX         type ref to /VCXI/CX_CKX.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      loop at ET_GOOD_CELLS into LS_GOOD_CELLS.
        at new ROW_ID.
          read table ME->T_PAPER_G_GRID into LS_PAPER_G_GRID index LS_GOOD_CELLS-ROW_ID.
          if SY-SUBRC eq 0.

            move-corresponding LS_PAPER_G_GRID to LS_PAPER.
            ME->R_BOARD_G->SET_PAPER( IS_PAPER = LS_PAPER ).

          endif.
        endat.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DATA_CHANGED_PAPER_G.

  data: LF_BPMAT type MATNR,
        LF_WAXCO type ZVCXI_PCSS_WAXCO.
  data:          LS_BAPIRETURN      type BAPIRETURN1.
  data:          LS_MOD_CELL        type LVC_S_MODI.

  loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
    case LS_MOD_CELL-FIELDNAME.
***----------------------------------------------------------------------------
      when 'BPMAT'.
        check LS_MOD_CELL-VALUE is not initial.
        translate LS_MOD_CELL-VALUE to upper case.
        move LS_MOD_CELL-VALUE to LF_BPMAT.

***     Bring value to internal Material Number Format
        call function 'CONVERSION_EXIT_MATN1_INPUT'
          exporting
            INPUT        = LF_BPMAT
          importing
            OUTPUT       = LF_BPMAT
          exceptions
            LENGTH_ERROR = 1.
        if SY-SUBRC ne 0.
          clear LF_BPMAT.
        endif.

***     Check if Material is valid
        call function 'BAPI_MATERIAL_EXISTENCECHECK'
          exporting
            MATERIAL_LONG = conv BAPIMATALL-MATERIAL_LONG( LF_BPMAT )
          importing
            RETURN        = LS_BAPIRETURN.

        if LS_BAPIRETURN-TYPE eq 'E'.
***       The material &1 does not exist or is not activated.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
              I_MSGID     = LS_BAPIRETURN-ID
              I_MSGTY     = LS_BAPIRETURN-TYPE
              I_MSGNO     = LS_BAPIRETURN-NUMBER
              I_MSGV1     = LS_MOD_CELL-VALUE
              I_FIELDNAME = LS_MOD_CELL-FIELDNAME
              I_ROW_ID    = LS_MOD_CELL-ROW_ID
              I_TABIX     = LS_MOD_CELL-TABIX ).
        endif.

***----------------------------------------------------------------------------
      when 'WAXCO'.
        check LS_MOD_CELL-VALUE is not initial.
        translate LS_MOD_CELL-VALUE to upper case.
        move LS_MOD_CELL-VALUE to LF_WAXCO.

***     Check if Wax Code is valid
        select single WAXCO
               from ZVCXI_PCS_TC240
               into LF_WAXCO
              where WAXCO = LF_WAXCO.

        if SY-SUBRC ne 0.
***       The wax code &1 does not exist.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY(
              I_MSGID     = 'ZVCXI_PCSSC'
              I_MSGTY     = 'E'
              I_MSGNO     = '151'
              I_MSGV1     = LS_MOD_CELL-VALUE
              I_FIELDNAME = LS_MOD_CELL-FIELDNAME
              I_ROW_ID    = LS_MOD_CELL-ROW_ID
              I_TABIX     = LS_MOD_CELL-TABIX ).
        endif.

    endcase.
  endloop.

endmethod.
method HANDLE_DBLCLK.

  data:  LF_GUID             type        /VCXI/CKX_GUID.
  data:  LS_BOARD_P_GRID     type        ZVCXI_PCSSC_S_BOARD_P_GRID.
  data:  LR_CX_CKX           type ref to /VCXI/CX_CKX.
  data:  LR_BOARD_P          type ref to ZCL_VCXI_PCSSC_BOARD_P.

  try.
***   Get line that got double clicked
      read table ME->T_BOARD_P_GRID into LS_BOARD_P_GRID index E_ROW-INDEX.
      check SY-SUBRC eq 0.

***   Get Instance
      move LS_BOARD_P_GRID-BOARD_P                     to LR_BOARD_P.
      move LR_BOARD_P->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.
      LR_BOARD_P ?= ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

      if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE and
        ME->R_BOARD_G->F_CHANGED  ne ABAP_TRUE.
***     Do Free for Board Details View
        ME->DO_FREE( ).

***     Call Global Board Setting Details
        ZCL_VCXI_PCSSC_UI_BOARD_P=>START( IR_BOARD_P = LR_BOARD_P  ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR_BOARD_P.

  data:  LF_DISABLED type        ABAP_BOOL.
  data:  LS_TOOLBAR  type        STB_BUTTON.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
      if ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

      clear LS_TOOLBAR.
      move C_FCODE_ADD_BOARD_P  to LS_TOOLBAR-FUNCTION.
      move '0'                  to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW      to LS_TOOLBAR-ICON.
      move LF_DISABLED          to LS_TOOLBAR-DISABLED.
      move 'Add'(T10)           to LS_TOOLBAR-TEXT.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FCODE_COPY_BOARD_P to LS_TOOLBAR-FUNCTION.
      move '0'                  to LS_TOOLBAR-BUTN_TYPE.
      move ICON_COPY_OBJECT     to LS_TOOLBAR-ICON.
      move LF_DISABLED          to LS_TOOLBAR-DISABLED.
      move 'Copy'(T11)          to LS_TOOLBAR-TEXT.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FCODE_DEL_BOARD_P  to LS_TOOLBAR-FUNCTION.
      move '0'                  to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW      to LS_TOOLBAR-ICON.
      move LF_DISABLED          to LS_TOOLBAR-DISABLED.
      move 'Delete'(T12)        to LS_TOOLBAR-TEXT.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_BOARD_P.

  data:          LF_RETURN           type          ABAP_BOOL,
                 LF_EXIT             type          ABAP_BOOL,
                 LF_WERKS            type          WERKS_D.
  data:          LT_SVAL             type table of SVAL.
  data:          LR_BOARD_P          type ref to   ZCL_VCXI_PCSSC_BOARD_P.
  field-symbols: <S_FIELD>           type          SVAL.

*** Check for open changes
  check ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE and
        ME->R_BOARD_G->F_CHANGED ne ABAP_TRUE.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_BOARD_P'.
  <S_FIELD>-FIELDNAME = 'WERKS'.

  do.
    clear: LF_WERKS.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Enter Plant'(T01)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'WERKS'.
    if SY-SUBRC = 0.
      move <S_FIELD>-VALUE to LF_WERKS.
    endif.

*** Make sure that there is an entry and that this Plant exists
    if LF_WERKS is not initial.
      select single WERKS
             from T001W
             into LF_WERKS
            where WERKS eq LF_WERKS.
      if SY-SUBRC eq 0.
        exit.
      else.
***     Please check the specified Plant. The entered Plant does not exist.
        message id 'ZVCXI_PCSSC' type 'S' number 157 display like 'E'.
      endif.
    endif.

  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  if LF_RETURN ne 'A'.
***----------------------------------------------------------------------
*** Create new Plant Board Instance
    LR_BOARD_P = ZCL_VCXI_PCSSC_BOARD_P=>CREATE( IR_BOARD_G = ME->R_BOARD_G
                                                 IF_WERKS   = LF_WERKS ).

***----------------------------------------------------------------------
*** Switch to Plant UI
    ME->DO_FREE( ).
    ZCL_VCXI_PCSSC_UI_BOARD_P=>START( IR_BOARD_P = LR_BOARD_P ).
  endif.

endmethod.
method HANDLE_UC_CD.

  data:  LF_CDOCL                type CDHDR-OBJECTCLAS,
         LF_CDOID                type CDHDR-OBJECTID,
         LF_APPLICATIONID        type REPID,
         LF_MSGV2                type SYMSGV.
  data:  LT_CDRED_STR            type CDRED_STR_TAB,
         LT_EDITPOS_WITH_HEADER  type standard table of CDRED.
  data:  LR_OBJECT_CD            type ref to /VCXI/IF_CKX_OBJECT_CD.

***----------------------------------------------------------------------------
*** Get Change Document Info
  try.
      move ME->R_BOARD_G ?to LR_OBJECT_CD.
      check LR_OBJECT_CD is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  LR_OBJECT_CD->GET_INFO( importing EF_CDOCL = LF_CDOCL
                                    EF_CDOID = LF_CDOID ).


***----------------------------------------------------------------------------
*** Read Change Documents
  call function 'CHANGEDOCUMENT_READ'
    exporting
      OBJECTCLASS       = LF_CDOCL
      OBJECTID          = LF_CDOID
    importing
      ET_CDRED_STR      = LT_CDRED_STR[]
    tables
      EDITPOS           = LT_EDITPOS_WITH_HEADER
    exceptions
      NO_POSITION_FOUND = 1
      others            = 2.
  case SY-SUBRC.
    when 0.
***   Display the Records
      LF_APPLICATIONID = LF_CDOCL.
      call function 'CHANGEDOCUMENT_DISPLAY'
        exporting
          I_APPLICATIONID  = LF_APPLICATIONID
          FLG_AUTOCONDENSE = 'X'
          I_OBJECTCLAS     = LF_CDOCL
          IT_CDRED_STR     = LT_CDRED_STR[]
        tables
          I_CDRED          = LT_EDITPOS_WITH_HEADER.
    when 1.
***   No change document positions found
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '649'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.
    when 2.
***   Error in change document creation/analysis: & &
      move SY-SUBRC to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '327'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.

  endcase.

endmethod.
method HANDLE_UC_CHECK.

*** Check the Global Board Version
  ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_CHECK ).

*** Display Messages
  ME->R_BOARD_G->R_MSG->DISPLAY_MSG( ).
*** Initialize Messages Table
  ME->R_BOARD_G->R_MSG->INIT_MSG( ).

endmethod.
method HANDLE_UC_COPY_BOARD_P.

  data:          LF_RETURN           type          ABAP_BOOL,
                 LF_EXIT             type          ABAP_BOOL,
                 LF_WERKS            type          WERKS_D.
  data:          LS_ROW              type          LVC_S_ROW,
                 LS_BOARD_P_GRID     type          ZVCXI_PCSSC_S_BOARD_P_GRID.
  data:          LT_ROWS             type          LVC_T_ROW,
                 LT_SVAL             type table of SVAL.
  data:          LR_BOARD_P_NEW      type ref to   ZCL_VCXI_PCSSC_BOARD_P.
  field-symbols: <S_FIELD>           type          SVAL.

***----------------------------------------------------------------------------
*** Get selected line
  ME->R_GRID_BOARD_P->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROWS ).

  read table LT_ROWS index 1 into LS_ROW .
  check SY-SUBRC eq 0.
  read table ME->T_BOARD_P_GRID into LS_BOARD_P_GRID index LS_ROW-INDEX.
  check SY-SUBRC eq 0.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_BOARD_P'.
  <S_FIELD>-FIELDNAME = 'WERKS'.
  <S_FIELD>-VALUE     = LS_BOARD_P_GRID-WERKS.

  do.
    clear: LF_WERKS.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Enter Plant'(T01)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'WERKS'.
    if SY-SUBRC = 0.
      move <S_FIELD>-VALUE to LF_WERKS.
    endif.

*** Make sure that there is an entry and that this Plant exists
    if LF_WERKS is not initial.
      select single WERKS
             from T001W
             into LF_WERKS
            where WERKS eq LF_WERKS.
      if SY-SUBRC eq 0.
        exit.
      else.
***     Please check the specified Plant. The entered Plant does not exist.
        message id 'ZVCXI_PCSSC' type 'S' number 157 display like 'E'.
      endif.
    endif.

  enddo.

  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  if LF_RETURN ne 'A'.
***----------------------------------------------------------------------------
*** Copy Plant Board
    LR_BOARD_P_NEW = LS_BOARD_P_GRID-BOARD_P->COPY_BOARD_P( IF_WERKS   = LF_WERKS
                                                            IR_BOARD_G = ME->R_BOARD_G ).

***----------------------------------------------------------------------------
*** Switch to Plant UI
    ME->DO_FREE( ).
    ZCL_VCXI_PCSSC_UI_BOARD_P=>START( IR_BOARD_P = LR_BOARD_P_NEW ).
  endif.


endmethod.
method HANDLE_UC_DEL_BOARD_P.

  data:  LF_ANSWER           type        ANSWER.
  data:  LS_ROW              type        LVC_S_ROW,
         LS_BOARD_P          type        ZVCXI_PCSSC_S_BOARD_P_GRID.
  data:  LT_ROWS             type        LVC_T_ROW.
  data:  LR_CX_CKX           type ref to /VCXI/CX_CKX.
  data:  LR_BOARD_P          type ref to ZCL_VCXI_PCSSC_BOARD_P.

  try.
***   Get selected line
      call method ME->R_GRID_BOARD_P->GET_SELECTED_ROWS
        importing
          ET_INDEX_ROWS = LT_ROWS.

      read table LT_ROWS index 1 into LS_ROW .
      read table ME->T_BOARD_P_GRID into LS_BOARD_P index LS_ROW-INDEX.
      check SY-SUBRC eq 0.

***   Move Plant Instance to Local Reference
      move LS_BOARD_P-BOARD_P                  to LR_BOARD_P.

***   Get Popup to make sure that Plant Board should be deleted
      call function 'POPUP_TO_CONFIRM'
        exporting
          TITLEBAR              = 'Delete Plant Version Board ID'(004)
          TEXT_QUESTION         = 'Do you really want to delete the Plant Version of the Board ID?'(003)
          DISPLAY_CANCEL_BUTTON = 'X'
        importing
          ANSWER                = LF_ANSWER.

***   If Popup was confirmed -> Delete Board ID
      if LF_ANSWER eq '1'.

***     Set the Plant Board to deleted
        LR_BOARD_P->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_DELETE ).

***     Save and Free
        LR_BOARD_P->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_SAVE ).

***     Relock the Global Instance again
        ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

***     Deleted successfully, data was saved.
        message id 'ZVCXI_PCSSC' type 'S' number '002'.

      else.
***     Action cancelled by User.
        message id 'ZVCXI_PCSSC' type 'S' number '003' with  SY-UNAME.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_GFILTER.

  data:  LF_CANCELED type ABAP_BOOL.

***----------------------------------------------------------------------------
*** Call Global Filter Popup
  call function 'ZVCXI_PCSSC_GFILTER_POPUP'
    importing
      EF_CANCELED = LF_CANCELED.

  check LF_CANCELED eq ABAP_FALSE.

endmethod.
method HANDLE_UC_SAVE.

*** Save the Global Board Version
  ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_SAVE ).

*** Check the Instance
  R_BOARD_G->DO_CHECK( ).

*** Display Messages
  ME->R_BOARD_G->R_MSG->DISPLAY_MSG( ).
*** Initialize Message Table
  ME->R_BOARD_G->R_MSG->INIT_MSG( ).

*** Saved successfully.
  message id 'ZVCXI_PCSSC' type 'S' number '001'.

endmethod.
method HANDLE_UC_TOGGLE.

  if ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
  else.
    ME->R_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

endmethod.
method HANDLE_UCOMM.

  data: LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
***     Add new Plant Version
        when C_FCODE_ADD_BOARD_P.
          ME->HANDLE_UC_ADD_BOARD_P( ).

***     Copy existing Plant Version
        when C_FCODE_COPY_BOARD_P.
          ME->HANDLE_UC_COPY_BOARD_P( ).

***     Delete existing Plant Version
        when C_FCODE_DEL_BOARD_P.
          ME->HANDLE_UC_DEL_BOARD_P( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER_BOARD_P.

  if ME->R_CONTAINER_BOARD_P is not bound.
    create object ME->R_CONTAINER_BOARD_P
      exporting
        CONTAINER_NAME              = '0200CC_BOARD_P'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_PAPER_G.

  if ME->R_CONTAINER_PAPER_G is not bound.
    create object ME->R_CONTAINER_PAPER_G
      exporting
        CONTAINER_NAME              = '0200CC_PAPER_G'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID_BOARD_P.

  if ME->R_GRID_BOARD_P is not bound.
    create object ME->R_GRID_BOARD_P
      exporting
        I_PARENT          = ME->R_CONTAINER_BOARD_P
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.


*** Set Event Handler
  set handler ME->HANDLE_TOOLBAR_BOARD_P          for ME->R_GRID_BOARD_P.
  set handler ME->HANDLE_UCOMM                    for ME->R_GRID_BOARD_P.
  set handler ME->HANDLE_DBLCLK                   for ME->R_GRID_BOARD_P.


endmethod.
method INIT_GRID_PAPER_G.

  if ME->R_GRID_PAPER_G is not bound.
    create object ME->R_GRID_PAPER_G
      exporting
        I_PARENT          = ME->R_CONTAINER_PAPER_G
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  ME->R_GRID_PAPER_G->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Handler
  set handler ME->HANDLE_DATA_CHANGED_PAPER_G       for ME->R_GRID_PAPER_G.
  set handler ME->HANDLE_DATA_CHANGED_FIN_PAP_G     for ME->R_GRID_PAPER_G.

endmethod.
method INIT_VIS.

  data:          LF_NUM          type          NUMC1,
                 LF_FIELD        type          FIELDNAME.
  data:          LS_LOG          type          /VCXI/CKX_S_LOG,
                 LS_LOG_EX       type          /VCXI/CKX_S_LOG_EXT,
                 LS_BODSC        type          ZVCXI_PCSSC_S_BODSC.
  field-symbols: <F_FIELD>       type          any.

  free: ME->S_BOARD_G_VIS.
***--------------------------------------------------------------------------------------
*** Fill the VIS Structure with current data
  move ME->R_BOARD_G->F_BOARD                                  to  S_BOARD_G_VIS-BOARD.
  move ME->R_BOARD_G->F_VALFR                                  to  S_BOARD_G_VIS-VALFR.
  move ME->R_BOARD_G->F_VALTO                                  to  S_BOARD_G_VIS-VALTO.
  move ME->R_BOARD_G->S_MBOAR-MBOAR                            to  S_BOARD_G_VIS-MBOAR.
  move ME->R_BOARD_G->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to  S_BOARD_G_VIS-FLUTE.
  move ME->R_BOARD_G->F_TBOAR                                  to  S_BOARD_G_VIS-TBOAR.
  move ME->R_BOARD_G->F_STARC                                  to  S_BOARD_G_VIS-STARC.

***--------------------------------------------------------------------------------------
*** Get Global Descriptions
  clear: LF_NUM, LF_FIELD.
  loop at ME->R_BOARD_G->T_BODSC into LS_BODSC where LANGU eq SY-LANGU.

    add 1 to LF_NUM.

    concatenate 'IDEST' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_G_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-IDEST.
    endif.

    concatenate 'IDEST_DESCR' LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_G_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-IDEST_DESCR.
    endif.

    concatenate 'DESCR'       LF_NUM into LF_FIELD.
    assign component LF_FIELD of structure ME->S_BOARD_G_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_BODSC-DESCR.
    endif.

  endloop.

***--------------------------------------------------------------------------------------
*** Creation and Change Log
  move R_BOARD_G->/VCXI/IF_CKX_OBJECT~GET_LOG( ) to LS_LOG.
  LS_LOG_EX = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
  move-corresponding LS_LOG_EX to S_BOARD_G_VIS.

endmethod.
method REFRESH_GRID_BOARD_P.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data:  LT_FCAT              type        LVC_T_FCAT,
         LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

*** Initialize if needed
  ME->INIT_CONTAINER_BOARD_P( ).
  ME->INIT_GRID_BOARD_P( ).

*** Get Grid Data
  ME->GET_GRID_DATA_BOARD_P( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_BOARD_P( )         to LT_FCAT.
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL   to LT_TOOLBAR_EXCLUDING.
  move ABAP_TRUE                           to LS_LAYOUT-CWIDTH_OPT.


*** Refresh ALV Grid
  ME->R_GRID_BOARD_P->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_BOARD_P_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_GRID_PAPER_G.

  data:  LS_LAYOUT            type        LVC_S_LAYO.
  data:  LT_FCAT              type        LVC_T_FCAT,
         LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

  if ME->R_BOARD_G->S_MBOAR-BPAPL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL and
     ME->R_BOARD_G->S_MBOAR-BWAXL ne ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_PAPER_G-REPID.
    move '9999'                     to ME->S_DYNP_PAPER_G-DYNNR.
  else.
    move 'SAPLZVCXI_PCSSC_UI_BOARD' to ME->S_DYNP_PAPER_G-REPID.
    move '0201'                     to ME->S_DYNP_PAPER_G-DYNNR.

*** Initialize if needed
    ME->INIT_CONTAINER_PAPER_G( ).
    ME->INIT_GRID_PAPER_G( ).

*** Get Grid Data
    ME->GET_GRID_DATA_PAPER_G( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
    move ME->GET_FIELDCAT_PAPER_G( )         to LT_FCAT.
    append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL   to LT_TOOLBAR_EXCLUDING.
    move ABAP_TRUE                           to LS_LAYOUT-CWIDTH_OPT.
    move ABAP_TRUE                           to LS_LAYOUT-NO_TOOLBAR.
    ME->REGISTER_F4_FIELDS( exporting IR_GRID = ME->R_GRID_PAPER_G
                            changing  CT_FCAT = LT_FCAT ).

*** Refresh ALV Grid
    ME->R_GRID_PAPER_G->SET_TABLE_FOR_FIRST_DISPLAY(
      exporting
        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
        IS_LAYOUT                     = LS_LAYOUT
      changing
        IT_FIELDCATALOG               = LT_FCAT
        IT_OUTTAB                     = T_PAPER_G_GRID
      exceptions
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method REGISTER_F4_FIELDS.

  data:          LS_F4        type          LVC_S_F4.
  data:          LT_F4        type          LVC_T_F4.
  field-symbols: <S_FCAT>     type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at CT_FCAT assigning <S_FCAT>.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if <S_FCAT>-F4AVAILABL eq ABAP_FALSE.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = <S_FCAT>-DOMNAME
          FIELDNAME         = SPACE
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.
        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = <S_FCAT>-REF_TABLE
            FIELDNAME         = <S_FCAT>-FIELDNAME
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.
      endif.

      if SY-SUBRC eq 0.
        move ABAP_TRUE to <S_FCAT>-F4AVAILABL.
      endif.
    endif.


    if <S_FCAT>-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move <S_FCAT>-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'                to LS_F4-REGISTER.
      move 'X'                to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  IR_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method START.

  data: LR_UI_BOARD_G type ref to  ZCL_VCXI_PCSSC_UI_BOARD_G,
        LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.

      create object LR_UI_BOARD_G
        exporting
          IR_BOARD_G = IR_BOARD_G.

      call function 'ZVCXI_PCSSC_UI_BOARD_G'
        exporting
          IR_UI_BOARD_G = LR_UI_BOARD_G.

***   Unlock Instance
      IR_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
  endtry.

endmethod.
