
class ZCL_VCXI_PXSS_CUST_PRSTY definition
  public
  create protected .

public section.

  methods CHECK_ELEMV
    importing
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_COMPLETE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOITY
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_VALID) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RT_BOXPA) type ZVCXI_P0SS_TT_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_ELEMV
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
    returning
      value(RS_ELEMV) type ZVCXI_P0SS_S_ELEMV
    raising
      /VCXI/CX_CKX .
  methods GET_FCUSD
    returning
      value(RF_FCUSD) type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods GET_FOLDIM
    importing
      !IF_TFOLD type ZVCXI_P0SS_TFOLD default 'C'
      !IF_ORIEN type ZVCXI_P0S_ORIEN
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
    returning
      value(RS_FOLDIM) type ZVCXI_PXS_S_FOLDIM
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
    returning
      value(RR_CUST_PRSTY) type ref to ZCL_VCXI_PXSS_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY optional
    exporting
      !EF_DEFAULT type ZVCXI_P0S_JOIPO
    returning
      value(RT_JOIPO) type ZVCXI_P0S_TT_JOIPO
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO optional
    exporting
      !EF_DEFAULT type ZVCXI_P0S_JOITY
    returning
      value(RT_JOITY) type ZVCXI_PXS_TT_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_PANOR
    returning
      value(RT_PANOR) type ZVCXI_PXS_TT_PANOR .
  methods GET_PRSTY
    returning
      value(RS_PRSTY) type ZVCXI_P0SSC_S_PRSTY
    raising
      /VCXI/CX_CKX .
  methods IS_IELEM_USED
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
    returning
      value(RF_USED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      TPRST      type        ZVCXI_P0SS_TPRST,
      PRSTY      type        ZVCXI_P0SS_PRSTY,
      R_INSTANCE type ref to ZCL_VCXI_PXSS_CUST_PRSTY,
    end   of YS_INSTANCE .
  types:
    YT_INSTANCE type sorted table of YS_INSTANCE with unique key TPRST PRSTY .

  class-data T_INSTANCE type YT_INSTANCE .
  data T_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM .
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .
  constants C_DIMEN_HEIGHT type ZVCXI_P0SS_DIMEN value 'H' ##NO_TEXT.
  constants C_DIMEN_LENGTH type ZVCXI_P0SS_DIMEN value 'L' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_P0SS_DIMEN value 'W' ##NO_TEXT.
  constants C_SEPARATOR_MINUS type CHAR01 value '-' ##NO_TEXT.
  constants C_SEPARATOR_PLUS type CHAR01 value '+' ##NO_TEXT.
  class-data:
    T_TC320  type sorted table of ZVCXI_P0S_TC320 with unique key IELEM .
  class-data:
    T_TC320T type sorted table of ZVCXI_P0S_TC320T with unique key IELEM LANGU .
private section.
endclass. "ZCL_VCXI_PXSS_CUST_PRSTY definition
class ZCL_VCXI_PXSS_CUST_PRSTY implementation.
  method CHECK_ELEMV.

    data: LS_TC320   type ZVCXI_P0S_TC320.


***--------------------------------------------------------------------------------------
*** Start positive
    RF_COMPLETE = ABAP_TRUE.

***--------------------------------------------------------------------------------------
    loop at T_TC320 into LS_TC320.
      if ME->IS_IELEM_USED( IF_IELEM = LS_TC320-IELEM
                            IF_BOXPA = IF_BOXPA ) eq ABAP_TRUE.
***     Element Value is maintained
        if ME->GET_ELEMV( IF_IELEM   = LS_TC320-IELEM
                          IT_ELEMENT = IT_ELEMENT )-ELEMV is not initial.
          if IR_MESSAGE is bound.
***         &1 is maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '040'
                                     IF_MSGV1 = value #( T_TC320T[ IELEM = LS_TC320-IELEM ]-DESCR default LS_TC320-IELEM ) ).
          endif.

***     Element Value is not maintained
        else.
          RF_COMPLETE = ABAP_FALSE.
          if IR_MESSAGE is bound.
***         &1 is not maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '041'
                                     IF_MSGV1 = value #( T_TC320T[ IELEM = LS_TC320-IELEM ]-DESCR default LS_TC320-IELEM ) ).
          endif.
        endif.
      endif.
    endloop.

  endmethod.
  method CHECK_JOIPO.

    data: LT_JOIPO type ZVCXI_P0S_TT_JOIPO.


    if IF_JOIPO is initial.
      RF_VALID = ABAP_FALSE.
      if IR_MESSAGE is bound.
***     Joint Position is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '045' ).
      endif.
    else.
      LT_JOIPO = ME->GET_JOIPO( ).
      if LINE_EXISTS( LT_JOIPO[ TABLE_LINE = IF_JOIPO ] ) or
         ( LT_JOIPO is initial and IF_JOIPO eq ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE ).
        RF_VALID = ABAP_TRUE.
        if IR_MESSAGE is bound.
***       Joint Position is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '043' ).
        endif.
      else.
        RF_VALID = ABAP_FALSE.
        if IR_MESSAGE is bound.
***       Joint Position is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '044' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_JOITY.

    data: LT_JOITY type ZVCXI_PXS_TT_JOITY.


    if IF_JOITY is initial.
      RF_VALID = ABAP_FALSE.
      if IR_MESSAGE is bound.
***     Joint Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '451' ).
      endif.
    else.
      if IF_JOIPO is not initial.
        LT_JOITY = ME->GET_JOITY( IF_JOIPO = IF_JOIPO ).
      else.
        LT_JOITY = ME->GET_JOITY( ).
      endif.
      if LINE_EXISTS( LT_JOITY[ TABLE_LINE = IF_JOITY ] ).
        RF_VALID = ABAP_TRUE.
        if IR_MESSAGE is bound.
***       Joint Type is maintained and valid for Joint Position.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '454' ).
        endif.
      else.
        RF_VALID = ABAP_FALSE.
        if IR_MESSAGE is bound.
***       Joint Type is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '452' ).
        endif.
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Get Elements Definition
    select *
           into table T_TC320
           from ZVCXI_P0S_TC320.

    select *
           into table T_TC320T
           from ZVCXI_P0S_TC320T
          where LANGU eq SY-LANGU.

  endmethod.
  method CONSTRUCTOR.

*** Get Instance of Product Style
    ME->R_PRSTY ?= ZCL_VCXI_P0SSC_PRSTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ZCL_VCXI_P0SSC_PRSTY=>ENCRYPT_GUID( IF_TPRST = IF_TPRST
                                                                                                                         IF_PRSTY = IF_PRSTY ) ).



  endmethod.
  method GET_BOXPA.

    data: LS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE.


    check ME->R_PRSTY is bound.

    loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE
                                      where BOXPA is not initial.
      collect LS_PRSTY_SCORE-BOXPA into RT_BOXPA.
    endloop.

  endmethod.
  method GET_ELEMV.

    data: LS_ELEMV     type ZVCXI_P0SS_S_ELEMV.
    data: LF_IELEM     type ZVCXI_P0SS_IELEM,
          LF_SEPARATOR type CHAR01.
    data: LT_IELEM     type table of ZVCXI_P0SS_IELEM.


    if IF_IELEM cs C_SEPARATOR_MINUS.
      move C_SEPARATOR_MINUS to LF_SEPARATOR.
    else.
      move C_SEPARATOR_PLUS to LF_SEPARATOR.
    endif.


    split IF_IELEM at LF_SEPARATOR into table LT_IELEM.

    loop at LT_IELEM into LF_IELEM.
      clear: LS_ELEMV.

      if LF_IELEM cs C_SEPARATOR_PLUS.
***     Calculation of Element Value based on different Elements
        LS_ELEMV = ME->GET_ELEMV( IF_IELEM   = LF_IELEM
                                  IT_ELEMENT = IT_ELEMENT ).
      else.
        if LINE_EXISTS( IT_ELEMENT[ IELEM = LF_IELEM ] ).
***       Get Element directly
          LS_ELEMV = IT_ELEMENT[ IELEM = LF_IELEM ]-S_ELEMV.
        else.
***       Get Element via Default Element on Product Style
          if LINE_EXISTS( ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = LF_IELEM ] ).
***         Default Element
            if ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = LF_IELEM ]-DVAEL is not initial.
              LS_ELEMV = ME->GET_ELEMV( IF_IELEM   = ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = LF_IELEM ]-DVAEL
                                        IT_ELEMENT = IT_ELEMENT ).
***         Default Value
            else.
              LS_ELEMV = value #( ELEMV     = ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = LF_IELEM ]-DVALU
                                  ELEMV_UOM = ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = LF_IELEM ]-DVALU_UOM ).
            endif.
          else.
***         Global Default Element
            if value #( ME->T_TC320[ IELEM = LF_IELEM ]-DVAEL optional ) is not initial.
              LS_ELEMV = ME->GET_ELEMV( IF_IELEM   = ME->T_TC320[ IELEM = LF_IELEM ]-DVAEL
                                        IT_ELEMENT = IT_ELEMENT ).
            endif.
          endif.
        endif.
      endif.
      check LS_ELEMV is not initial.

***   Perform Calculation
      if RS_ELEMV is initial.
        RS_ELEMV = LS_ELEMV.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                                                            IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                                                            IF_CALCV_2     = LS_ELEMV-ELEMV
                                                            IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
                                                            IF_OPERA       = LF_SEPARATOR
                                                            IF_UOM         = RS_ELEMV-ELEMV_UOM
                                                  importing EF_CALCV       = RS_ELEMV-ELEMV
                                                            EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_FCUSD.

    RF_FCUSD = ABAP_UNDEFINED.
    check ME->R_PRSTY is bound.
    RF_FCUSD = ME->R_PRSTY->S_PRSTY-FCUSD.

  endmethod.
  method GET_FOLDIM.

    data: LS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM,
          LS_ELEMV       type ZVCXI_P0SS_S_ELEMV.
    data: LT_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM.
    field-symbols: <F_VALUE>     type ANY,
                   <F_VALUE_UOM> type ANY.


    check ME->R_PRSTY is bound.

***--------------------------------------------------------------------------------------
*** Start Calculation with Folding Measurements
    LT_PRSTY_FOLDM = ME->R_PRSTY->GET_PRSTY_FOLDM( IF_TFOLD = IF_TFOLD
                                                   IF_ORIEN = IF_ORIEN ).
    loop at LT_PRSTY_FOLDM into LS_PRSTY_FOLDM.
      LS_ELEMV = ME->GET_ELEMV( IF_IELEM   = LS_PRSTY_FOLDM-IELEM
                                IT_ELEMENT = IT_ELEMENT ).

      if LS_PRSTY_FOLDM-ELEMD is not initial.
        LS_ELEMV-ELEMV = LS_ELEMV-ELEMV * ( LS_PRSTY_FOLDM-ELEMN / LS_PRSTY_FOLDM-ELEMD ).
      else.
***     Check Denominator on Folding Dimensions. Value 0 is not allowed!
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_P0SS'
                                              IF_MSGNO = '011' ).
      endif.
      check LS_ELEMV is not initial.

***--------------------------------------------------------------------------------------
***   Assign the right Handling Dimension
      case LS_PRSTY_FOLDM-DIMEN.
        when C_DIMEN_LENGTH.
          assign RS_FOLDIM-FOLLE     to <F_VALUE>.
          assign RS_FOLDIM-FOLLE_UOM to <F_VALUE_UOM>.
        when C_DIMEN_WIDTH.
          assign RS_FOLDIM-FOLWI     to <F_VALUE>.
          assign RS_FOLDIM-FOLWI_UOM to <F_VALUE_UOM>.
        when C_DIMEN_HEIGHT.
          assign RS_FOLDIM-FOLHE     to <F_VALUE>.
          assign RS_FOLDIM-FOLHE_UOM to <F_VALUE_UOM>.
      endcase.

      check <F_VALUE>     is assigned and
            <F_VALUE_UOM> is assigned.

      if <F_VALUE_UOM> is initial.
        move LS_ELEMV-ELEMV_UOM to <F_VALUE_UOM>.
      endif.

***   Do the defined Operation
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <F_VALUE>
                                                          IF_CALCV_UOM_1 = <F_VALUE_UOM>
                                                          IF_CALCV_2     = LS_ELEMV-ELEMV
                                                          IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
                                                          IF_OPERA       = LS_PRSTY_FOLDM-ELEMO
                                                          IF_UOM         = <F_VALUE_UOM>
                                                importing EF_CALCV       = <F_VALUE>
                                                          EF_CALCV_UOM   = <F_VALUE_UOM> ).

      unassign: <F_VALUE>, <F_VALUE_UOM>.
    endloop.


*** Ensure no negative Values have been calculated
    RS_FOLDIM-FOLLE = cond #( when RS_FOLDIM-FOLLE lt 0 then 0 else RS_FOLDIM-FOLLE ).
    RS_FOLDIM-FOLWI = cond #( when RS_FOLDIM-FOLWI lt 0 then 0 else RS_FOLDIM-FOLWI ).
    RS_FOLDIM-FOLHE = cond #( when RS_FOLDIM-FOLHE lt 0 then 0 else RS_FOLDIM-FOLHE ).

  endmethod.
  method GET_INSTANCE.

    data:  LS_INSTANCE type YS_INSTANCE.


    read table T_INSTANCE into LS_INSTANCE
                          with key TPRST = IF_TPRST
                                   PRSTY = IF_PRSTY.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_INSTANCE to RR_CUST_PRSTY.
    else.
***   Identify correct Sub-Class for Product Style
      break DEFINE_SUB_CLASSES.

      create object RR_CUST_PRSTY
        exporting
          IF_TPRST = IF_TPRST
          IF_PRSTY = IF_PRSTY.
    endif.

  endmethod.
  method GET_JOIPO.

    check ME->R_PRSTY is bound.

*** Filter by Joint Type if provided
    data(LT_TC341) = ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC341.
    if IF_JOITY is not initial.
      delete LT_TC341 where JOITY ne IF_JOITY.
    endif.

*** Determine Default based on Default Joint Type
    if EF_DEFAULT is requested and
       IF_JOITY is not supplied.
      ME->GET_JOITY( importing EF_DEFAULT = data(LF_JOITY_DEFAULT) ).
      delete LT_TC341 where JOITY ne LF_JOITY_DEFAULT.
    endif.

*** Collect Joint Positions
    loop at ME->R_PRSTY->T_PRSTY_JOITY into data(LS_PRSTY_JOITY).
      loop at LT_TC341 into data(LS_TC341)
                      where JOITY = LS_PRSTY_JOITY-JOITY.
        collect LS_TC341-JOIPO into RT_JOIPO.

***     Use only first defined Default
        if EF_DEFAULT is initial and
           LS_TC341-FMADE = ABAP_TRUE.
          EF_DEFAULT = LS_TC341-JOIPO.
        endif.
      endloop.
    endloop.

    if EF_DEFAULT is initial.
***   Use first Position as Fallback Default
      EF_DEFAULT = value #( RT_JOIPO[ 1 ] optional ).
    endif.

  endmethod.
  method GET_JOITY.

    check ME->R_PRSTY is bound.

*** Filter by Joint Position if provided
    data(LT_TC341) = ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC341.
    if IF_JOIPO is not initial.
      delete LT_TC341 where JOIPO ne IF_JOIPO.
    endif.

*** Collect Joint Types
    loop at ME->R_PRSTY->T_PRSTY_JOITY into data(LS_PRSTY_JOITY).
      check LINE_EXISTS( LT_TC341[ JOITY = LS_PRSTY_JOITY-JOITY ] ).
      collect LS_PRSTY_JOITY-JOITY into RT_JOITY.
    endloop.

*** Only consider Joint Types which are "Closed"
    loop at RT_JOITY into data(LF_JOITY).
      if ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DEF( IF_JOITY = LF_JOITY )-TFOLD ne ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
        delete RT_JOITY.
      endif.
    endloop.

*** Return defined Default if valid (based on joint position)
    if LINE_EXISTS( RT_JOITY[ TABLE_LINE = ME->R_PRSTY->S_PRSTY-JOITY ] ).
      EF_DEFAULT = ME->R_PRSTY->S_PRSTY-JOITY.
    endif.

    if EF_DEFAULT is initial.
***   Use first as Default
      EF_DEFAULT = value #( RT_JOITY[ 1 ] optional ).
    endif.

  endmethod.
  method GET_PANOR.

    data: LS_PRSTY_SCORE    type ZVCXI_P0SSC_S_PRSTY_SCORE.


    check ME->R_PRSTY is bound.
    loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
      collect LS_PRSTY_SCORE-PANOR into RT_PANOR.
    endloop.

  endmethod.
  method GET_PRSTY.

    check ME->R_PRSTY is bound.
    RS_PRSTY = ME->R_PRSTY->S_PRSTY.

  endmethod.
  method IS_IELEM_USED.

    data: LF_SEPARATOR   type CHAR01.
    data: LS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE.
    data: LT_PRSTY_SCORE type ZVCXI_P0SSC_TT_PRSTY_SCORE,
          LT_IELEM       type table of ZVCXI_P0SS_IELEM.


    check ME->R_PRSTY is bound and
          IF_IELEM is not initial.

***--------------------------------------------------------------------------------------
*** Special Handling for Custom Design
    if ME->GET_FCUSD( ) eq ABAP_TRUE.
      RF_USED = switch #( IF_IELEM when ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH then ABAP_TRUE
                                   when ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH  then ABAP_TRUE
                                   when ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT then ABAP_UNDEFINED
                                                                                 else ABAP_FALSE ).
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Get Scores
    LT_PRSTY_SCORE = ME->R_PRSTY->T_PRSTY_SCORE.
    if IF_BOXPA is supplied.
      delete  LT_PRSTY_SCORE where BOXPA ne IF_BOXPA.
    endif.

*** Element is used by Scores directly
    if LINE_EXISTS( LT_PRSTY_SCORE[ IELEM = IF_IELEM ] ).
      move ABAP_TRUE to RF_USED.
    else.
***   Check for combined use in Scores
      loop at LT_PRSTY_SCORE into LS_PRSTY_SCORE.
***     Try to get element in combination with '+'
        if LS_PRSTY_SCORE-IELEM cs C_SEPARATOR_MINUS.
          move C_SEPARATOR_MINUS to LF_SEPARATOR.
        elseif LS_PRSTY_SCORE-IELEM cs C_SEPARATOR_PLUS.
          move C_SEPARATOR_PLUS to LF_SEPARATOR.
        endif.

        clear: LT_IELEM.
        split LS_PRSTY_SCORE-IELEM at LF_SEPARATOR into table LT_IELEM.

        if LINE_EXISTS( LT_IELEM[ TABLE_LINE = IF_IELEM ] ).
          move ABAP_TRUE to RF_USED.
          exit.
        endif.

      endloop.
    endif.
    check RF_USED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Element used by Defaulting
    if LINE_EXISTS( ME->R_PRSTY->T_PRSTY_DELEM[ IELEM = IF_IELEM ] ).
      move ABAP_UNDEFINED to RF_USED.
    endif.

  endmethod.
