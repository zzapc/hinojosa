
class ZCL_VCXI_PXSS_PR_MS_ADMAT definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PX_MS_ADMAT type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_ADMAT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
protected section.

  constants C_IEVNT_O_AVGCO_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED' ##NO_TEXT.

  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
  methods CHECK_AVGCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_ADMAT definition
class ZCL_VCXI_PXSS_PR_MS_ADMAT implementation.
  method CHECK_AVGCO.

*** Check Avg. Consumption & Avg. Consuption Per
    if ME->GET_AVGCO( )-AVGCO is not initial and
       ME->GET_AVGCP( )-AVGCP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Avg. Consumption is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '351' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Avg. Consumption is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '352' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method GET_ADDWT.

    data: LF_NTGEW type NTGEW,
          LF_GEWEI type GEWEI.


    if ME->R_CUST_MATNR is not bound.
      ME->HANDLE_INIT_CUST_MATNR( ).
    endif.

    check ME->R_CUST_MATNR is bound.
    ME->R_CUST_MATNR->GET_NTGEW( exporting IS_AVGCO = ME->GET_AVGCO( )
                                 importing EF_NTGEW = LF_NTGEW
                                           EF_GEWEI = LF_GEWEI ).
    data(LS_AVGCP) = ME->GET_AVGCP( ).
    check LS_AVGCP-AVGCP ne 0.

    RS_ADDWT = value #( ADDWT     = conv #( LF_NTGEW / LS_AVGCP-AVGCP )
                        ADDWT_UOM = LF_GEWEI ).

  endmethod.
  method GET_AVGCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
    move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
    move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_AVGCP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
    move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
    move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Avg. Consumption
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_AVGCO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Avg. Consumption
    ME->CHECK_AVGCO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
method INIT_DIM_PARAM.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.


  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).


*** Avrg. Consumption Per
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCO_A or
                          PARID eq C_PARID_AVGCO_L or
                          PARID eq C_PARID_AVGCO_P or
                          PARID eq C_PARID_AVGCO_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCO.
    exit.
  endloop.

*** Avrg. Consumption Per
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCP_A or
                          PARID eq C_PARID_AVGCP_L or
                          PARID eq C_PARID_AVGCP_P or
                          PARID eq C_PARID_AVGCP_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCP.
    exit.
  endloop.

*** Price Per
  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PRICP_A or
                          PARID eq C_PARID_PRICP_L or
                          PARID eq C_PARID_PRICP_P or
                          PARID eq C_PARID_PRICP_W ).
    move LS_PARAM-PARID to ME->F_PARID_PRICP.
    exit.
  endloop.

endmethod.
  method SET_AVGCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

    move IS_AVGCO-AVGCO      to LS_PARAM-ATFLV.
    move IS_AVGCO-AVGCO_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
    endif.

  endmethod.
  method SET_AVGCP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

    move IS_AVGCP-AVGCP      to LS_PARAM-ATFLV.
    move IS_AVGCP-AVGCP_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
    endif.

  endmethod.
