
class ZCL_VCXI_XCSS_GRID_MTS definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSS_S_MTS_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods CHANGE_STYLE_MRP
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_MTS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_MRP_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_MTS_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods SET_MRP_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_MTS_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_DISABLED_ADD
    redefinition .
  methods GET_DISABLED_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_GRID_MTS definition
class ZCL_VCXI_XCSS_GRID_MTS implementation.
  method CHANGE_STYLE_MRP.

    data: LF_STYLE_ENABLED type  LVC_STYLE.
    data: LS_MRP_VIS type ZVCXI_XCSS_S_MRP_VIS.
    data: LR_PR_MRP type ref to ZCL_VCXI_XCSS_PR_MRP.


***--------------------------------------------------------------------------------------
    if IR_GATE is bound and
       IR_GATE->F_FREED is initial.
***   Get PR Class
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_MRP.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      check LR_PR_MRP is bound.
      LF_STYLE_ENABLED = ME->F_STYLE_ENABLED.
    else.
      LF_STYLE_ENABLED = ME->F_STYLE_DISABLED.
    endif.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_MRP_VIS.

***--------------------------------------------------------------------------------------
*** Enable/Disable Fields
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISPR'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISMM'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISPO'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISLS'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTMI'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTMA'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BSTFE'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'EISBE'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHANGE_STYLE_MTS.

    data: LF_STYLE_ENABLED type  LVC_STYLE.
    data: LS_MTS_VIS type ZVCXI_XCSS_S_MTS_VIS.
    data: LR_MTS type ref to ZIF_VCXI_XCSS_MTS.



***--------------------------------------------------------------------------------------
*** Get Interface Reference
    if IR_GATE is bound and
       IR_GATE->F_FREED is initial.
      try.
          check IR_GATE is bound.
          move IR_GATE->R_CLSPR ?to LR_MTS.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      check LR_MTS is bound.
      LF_STYLE_ENABLED = ME->F_STYLE_ENABLED.
    else.
      LF_STYLE_ENABLED = ME->F_STYLE_DISABLED.
    endif.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_MTS_VIS.

***--------------------------------------------------------------------------------------
*** Enable Fields
    if LF_STYLE_ENABLED eq CL_GUI_ALV_GRID=>MC_STYLE_ENABLED and
       LS_MTS_VIS-FMTSA ne ABAP_UNDEFINED.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FMTSA'
                                  IF_STYLE     = conv #( CL_GUI_ALV_GRID=>MC_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT )
                        changing  CT_STYL      = CT_STYL ).
    else.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FMTSA'
                                  IF_STYLE     = conv #( CL_GUI_ALV_GRID=>MC_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO )
                        changing  CT_STYL      = CT_STYL ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type
    ME->F_IPRVT = ZIF_VCXI_XCSS_MTS=>C_IPRVT_XCS_MTS.

  endmethod.
  method GET_DISABLED_ADD.

*** Disable as Tooling Info is controlled by its Parent Element
    RF_DISABLED = ABAP_TRUE.

  endmethod.
  method GET_DISABLED_DEL.

*** Disable as Tooling Info is controlled by its Parent Element
    RF_DISABLED = ABAP_TRUE.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE.
    field-symbols: <S_FCAT> type LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'POSID' or 'GATKY' or 'R_GATE' or 'R_GATE_MRP' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

***     Make-to-Stock Fields
        when 'FMTSA'.
          <S_FCAT>-CHECKBOX = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT    = ABAP_TRUE.
            <S_FCAT>-HOTSPOT = ABAP_TRUE.
          endif.

***     MRP Fields
        when 'DISPR' or 'DISMM' or 'DISPO' or
             'DISLS' or 'BSTMI' or 'BSTMA' or 'BSTFE' or 'EISBE'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT    = ABAP_TRUE.
          endif.

***     MRP Area Button
        when 'BTN_MRP_AREA'.
          <S_FCAT>-COLTEXT = 'MRP Areas'(C01).
          <S_FCAT>-STYLE   = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
          <S_FCAT>-ICON    = ABAP_TRUE.
      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT type LVC_S_LAYO.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE,
          LT_GATE_MRP type /VCXI/VKSR_TT_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <T_STYL> type          LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ME->F_IPRVT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
    loop at LT_GATE into data(LR_GATE).
***   MRP Settings
      cast ZIF_VCXI_XCSS_MTS( LR_GATE->R_CLSPR )->GET_FMTSA( importing ET_GATE = LT_GATE_MRP ).
      if LT_GATE_MRP is initial.
        append value #( ) to LT_GATE_MRP.    "Empty entry to activate MRP Settings through the Grid
      endif.

      loop at LT_GATE_MRP into data(LR_GATE_MRP).
        data(LF_TABIX) = SY-TABIX.
        if LR_GATE_MRP is bound.
          data(LT_MRP_AREA) = cast ZCL_VCXI_XCSS_PR_MRP( LR_GATE_MRP->R_CLSPR )->GET_PRVDR_MRP_AREA( ).
        else.
          clear LT_MRP_AREA.
        endif.

***     Add Line with Gate Key Data
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding value ZVCXI_XCSS_S_MTS_GRID( POSID        = LR_GATE->GET_POSID( )
                                                        GATKY        = LR_GATE->F_GATKY
                                                        R_GATE       = LR_GATE
                                                        R_GATE_MRP   = LR_GATE_MRP
                                                        BTN_MRP_AREA = switch #( lines( LT_MRP_AREA ) when 0 then ICON_ENTER_MORE else ICON_DISPLAY_MORE )
                                                      ) to <S_DATA>.
***     Get Visualization Data
        ME->GET_MTS_VIS( exporting IR_GATE = switch #( LF_TABIX when 1 then LR_GATE )    "only for first MRP of MTS
                         changing  CS_DATA = <S_DATA> ).
        ME->GET_MRP_VIS( exporting IR_GATE = LR_GATE_MRP
                         changing  CS_DATA = <S_DATA> ).

***     Set Style Details
        if LS_LAYOUT-STYLEFNAME is not initial.
          assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
          if SY-SUBRC eq 0.
            ME->CHANGE_STYLE_MTS( exporting IR_GATE = switch #( LF_TABIX when 1 then LR_GATE )    "only for first MRP of MTS
                                            IS_DATA = <S_DATA>
                                   changing CT_STYL = <T_STYL> ).
            ME->CHANGE_STYLE_MRP( exporting IR_GATE = LR_GATE_MRP
                                            IS_DATA = <S_DATA>
                                   changing CT_STYL = <T_STYL> ).
***         Call DVC Servcie - Modify Style
            ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                                 changing  CT_STYL = <T_STYL> ).
          endif.
        endif.
      endloop.
    endloop.

  endmethod.
  method GET_MRP_VIS.

    data: LS_MRP_VIS type ZVCXI_XCSS_S_MRP_VIS.
    data: LR_PR_MRP  type ref to ZCL_VCXI_XCSS_PR_MRP.


***--------------------------------------------------------------------------------------
*** Get PR Class
    try.
        check IR_GATE is bound.
        move IR_GATE->R_CLSPR ?to LR_PR_MRP.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_PR_MRP is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_MRP_VIS.

***--------------------------------------------------------------------------------------
*** Plant
    LS_MRP_VIS-WERKS = LR_PR_MRP->GET_WERKS( importing EF_DESCR = LS_MRP_VIS-WERKS_DESCR ).

*** MRP Profile
    LS_MRP_VIS-DISPR = LR_PR_MRP->GET_DISPR( ).

*** MRP Type
    LS_MRP_VIS-DISMM = LR_PR_MRP->GET_DISMM( importing EF_DIBEZ = LS_MRP_VIS-DIBEZ ).

*** MRP Controller
    LS_MRP_VIS-DISPO = LR_PR_MRP->GET_DISPO( ).

*** Lot Sizing Procedure in Materials Planning
    LS_MRP_VIS-DISLS = LR_PR_MRP->GET_DISLS( importing EF_LOSLT = LS_MRP_VIS-LOSLT ).

*** Minimum/Maximum/Fixed Lot Size
    LS_MRP_VIS-S_BSTMI = LR_PR_MRP->GET_BSTMI( ).
    LS_MRP_VIS-S_BSTMA = LR_PR_MRP->GET_BSTMA( ).
    LS_MRP_VIS-S_BSTFE = LR_PR_MRP->GET_BSTFE( ).

*** Safety Stock
    LS_MRP_VIS-S_EISBE = LR_PR_MRP->GET_EISBE( ).

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_MRP_VIS to CS_DATA.

  endmethod.
  method GET_MTS_VIS.

    data: LS_MTS_VIS type ZVCXI_XCSS_S_MTS_GRID.
    data: LR_MTS     type ref to ZIF_VCXI_XCSS_MTS.


***--------------------------------------------------------------------------------------
*** Get Interface Reference
    try.
        if IR_GATE is bound.
          LR_MTS ?= IR_GATE->R_CLSPR.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_MTS.
    endtry.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_MTS_VIS.

***--------------------------------------------------------------------------------------
    if LR_MTS is bound.
***   Description by MTS Material
      LS_MTS_VIS-DESCR = IR_GATE->R_CLSPR->GET_DESCR( ).

***   Make-to-Stock Flag
      LS_MTS_VIS-FMTSA = LR_MTS->GET_FMTSA( ).

    else.
***   Hide Make-to-Stock Flag
      LS_MTS_VIS-FMTSA = ABAP_UNDEFINED.
    endif.

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_MTS_VIS to CS_DATA.

  endmethod.
  method HANDLE_BUTTON_CLICK.

    data: LS_MTS_GRID type ZVCXI_XCSS_S_MTS_GRID.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type ANY,
                   <F_FIELD> type ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
        check SY-SUBRC eq 0.


        LS_MTS_GRID = corresponding #( <S_DATA> ).
        case ES_COL_ID-FIELDNAME.
***       Call
          when 'BTN_MRP_AREA'.
            ZCL_VCXI_XCSS_POPUP_MRP_AREA=>START( IF_LOCKED      = ME->R_GATE->IS_LOCKED( )
                                                 IR_GATE        = LS_MTS_GRID-R_GATE_MRP
                                                 IR_UIGATE      = ME->R_UIGATE
                                                 IF_APPL_EVENTS = ME->F_APPL_EVENTS ).
        endcase.

***     Process Events
        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_MTS_GRID type ZVCXI_XCSS_S_MTS_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          move-corresponding <S_DATA> to LS_MTS_GRID.

***       Set Values to Make-to-Stock Material
          if LS_MTS_GRID-R_GATE is bound and
             LS_MTS_GRID-R_GATE->F_FREED is initial.
            ME->SET_MTS_VIS( IR_GATE = LS_MTS_GRID-R_GATE
                             IS_DATA = <S_DATA> ).
          endif.

***       Set Values to MRP Settings
          if LS_MTS_GRID-R_GATE_MRP is bound and
             LS_MTS_GRID-R_GATE_MRP->F_FREED is initial.
            ME->SET_MRP_VIS( IR_GATE = LS_MTS_GRID-R_GATE_MRP
                             IS_DATA = <S_DATA> ).
          endif.
        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_MTS_GRID type ZVCXI_XCSS_S_MTS_GRID.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type ANY,
                   <F_FIELD> type ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        read table <T_DATA> assigning <S_DATA> index E_ROW_ID.
        check SY-SUBRC eq 0.

        assign component E_COLUMN_ID of structure <S_DATA> to <F_FIELD>.
        check SY-SUBRC eq 0.

***     Adjust Flag
        <F_FIELD> = switch #( <F_FIELD> when ABAP_TRUE  then ABAP_FALSE
                                        when ABAP_FALSE then ABAP_TRUE ).

***     Set Values to PR Class
        move-corresponding <S_DATA> to LS_MTS_GRID.
        ME->SET_MTS_VIS( IR_GATE = LS_MTS_GRID-R_GATE
                         IS_DATA = <S_DATA> ).

***     Process Events
        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Hotspot and Button
    set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.
    set handler ME->HANDLE_BUTTON_CLICK        for ME->R_GRID.

  endmethod.
  method SET_MRP_VIS.

    data: LS_MRP_VIS_OLD type ZVCXI_XCSS_S_MRP_VIS,
          LS_MRP_VIS_NEW type ZVCXI_XCSS_S_MRP_VIS.
    data: LR_PR_MRP  type ref to ZCL_VCXI_XCSS_PR_MRP.


***--------------------------------------------------------------------------------------
*** Get PR Class
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_XCSS_PR_MRP.
    LR_PR_MRP ?= IR_GATE->R_CLSPR.
    check LR_PR_MRP is bound.

*** Get old Values
    ME->GET_MRP_VIS( exporting IR_GATE = IR_GATE
                     changing  CS_DATA = LS_MRP_VIS_OLD ).
*** Get new Values
    move-corresponding IS_DATA to LS_MRP_VIS_NEW.


***--------------------------------------------------------------------------------------
*** MRP Profile
    if LS_MRP_VIS_OLD-DISPR ne LS_MRP_VIS_NEW-DISPR.
      LR_PR_MRP->SET_DISPR( IF_DISPR = LS_MRP_VIS_NEW-DISPR
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** MRP Type
    if LS_MRP_VIS_OLD-DISMM ne LS_MRP_VIS_NEW-DISMM.
      LR_PR_MRP->SET_DISMM( IF_DISMM = LS_MRP_VIS_NEW-DISMM
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** MRP Controller
    if LS_MRP_VIS_OLD-DISPO ne LS_MRP_VIS_NEW-DISPO.
      LR_PR_MRP->SET_DISPO( IF_DISPO = LS_MRP_VIS_NEW-DISPO
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Lot Sizing Procedure in Materials Planning
    if LS_MRP_VIS_OLD-DISLS ne LS_MRP_VIS_NEW-DISLS.
      LR_PR_MRP->SET_DISLS( IF_DISLS = LS_MRP_VIS_NEW-DISLS
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Minimum Lot Size
    if LS_MRP_VIS_OLD-S_BSTMI ne LS_MRP_VIS_NEW-S_BSTMI.
      LR_PR_MRP->SET_BSTMI( IS_BSTMI = LS_MRP_VIS_NEW-S_BSTMI
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Maximum Lot Size
    if LS_MRP_VIS_OLD-S_BSTMA ne LS_MRP_VIS_NEW-S_BSTMA.
      LR_PR_MRP->SET_BSTMA( IS_BSTMA = LS_MRP_VIS_NEW-S_BSTMA
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Fixed Lot Size
    if LS_MRP_VIS_OLD-S_BSTFE ne LS_MRP_VIS_NEW-S_BSTFE.
      LR_PR_MRP->SET_BSTFE( IS_BSTFE = LS_MRP_VIS_NEW-S_BSTFE
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Safety Stock
    if LS_MRP_VIS_OLD-S_EISBE ne LS_MRP_VIS_NEW-S_EISBE.
      LR_PR_MRP->SET_EISBE( IS_EISBE = LS_MRP_VIS_NEW-S_EISBE
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method SET_MTS_VIS.

    data: LS_MTS_VIS_OLD type ZVCXI_XCSS_S_MTS_VIS,
          LS_MTS_VIS_NEW type ZVCXI_XCSS_S_MTS_VIS.
    data: LR_MTS  type ref to ZIF_VCXI_XCSS_MTS.


***--------------------------------------------------------------------------------------
*** Get Interface Reference
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZIF_VCXI_XCSS_MTS.
    LR_MTS ?= IR_GATE->R_CLSPR.
    check LR_MTS is bound.

*** Get old Values
    ME->GET_MTS_VIS( exporting IR_GATE = IR_GATE
                     changing  CS_DATA = LS_MTS_VIS_OLD ).

*** Get new Values
    move-corresponding IS_DATA to LS_MTS_VIS_NEW.

*** Only if Make-to-Stock is allowed
    check LS_MTS_VIS_NEW-FMTSA ne ABAP_UNDEFINED.

***--------------------------------------------------------------------------------------
*** Make-to-Stock Flag
    if LS_MTS_VIS_NEW-FMTSA ne LS_MTS_VIS_OLD-FMTSA.
      LR_MTS->SET_FMTSA( IF_FMTSA = LS_MTS_VIS_NEW-FMTSA ).
    endif.

  endmethod.
