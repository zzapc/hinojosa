
class ZCL_VCXI_PCSS_PR_SPEC_CR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_ICONT .
  interfaces ZIF_VCXI_PCSS_SELFD .

  aliases C_ICONT_PROD
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_PROD .
  aliases C_ICONT_SALES
    for ZIF_VCXI_P0SS_ICONT~C_ICONT_SALES .
  aliases C_IEVNT_I_RECALC_BOARD_WIDTH
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_I_RECALC_BOARD_WIDTH .
  aliases C_IEVNT_I_RECALC_SIDERUN
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_I_RECALC_SIDERUN .
  aliases C_IEVNT_O_BOARD_WIDTH_CHANGED
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_O_BOARD_WIDTH_CHANGED .
  aliases C_IEVNT_O_ICONT_CHANGED
    for ZIF_VCXI_P0SS_ICONT~C_IEVNT_O_ICONT_CHANGED .
  aliases C_IEVNT_O_SIDE_RUN_CHANGED
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_O_SIDE_RUN_CHANGED .
  aliases C_IPRVT_P0_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_IPRVT_P0_ICONT .
  aliases C_IPRVT_PC_SELFD
    for ZIF_VCXI_PCSS_SELFD~C_IPRVT_PC_SELFD .
  aliases C_PARID_BOARW
    for ZIF_VCXI_PCSS_SELFD~C_PARID_BOARW .
  aliases C_PARID_ICONT
    for ZIF_VCXI_P0SS_ICONT~C_PARID_ICONT .
  aliases C_PARID_SIDRU
    for ZIF_VCXI_PCSS_SELFD~C_PARID_SIDRU .
  aliases GET_BOARW
    for ZIF_VCXI_PCSS_SELFD~GET_BOARW .
  aliases GET_COWID_ALL
    for ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL .
  aliases GET_FOVRS
    for ZIF_VCXI_PCSS_SELFD~GET_FOVRS .
  aliases GET_ICONT
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT .
  aliases GET_ICONT_DESCR
    for ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR .
  aliases GET_SIDRU
    for ZIF_VCXI_PCSS_SELFD~GET_SIDRU .
  aliases SET_BOARW
    for ZIF_VCXI_PCSS_SELFD~SET_BOARW .
  aliases SET_FOVRS
    for ZIF_VCXI_PCSS_SELFD~SET_FOVRS .
  aliases SET_ICONT
    for ZIF_VCXI_P0SS_ICONT~SET_ICONT .

  data F_VALID_BOARW type CHAR30 .
  constants C_IPRVT_PC_SPEC_CR type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_SPEC_CR'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_CODIA type /VCXI/VKS_PARID value 'ZVCXI_PC_CODIA'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT
  constants C_PARID_RODIA type /VCXI/VKS_PARID value 'ZVCXI_PC_RODIA'. "#EC NOTEXT
  constants C_PARID_ROLEN type /VCXI/VKS_PARID value 'ZVCXI_PC_ROLEN'. "#EC NOTEXT
  constants C_PARID_ROWID type /VCXI/VKS_PARID value 'ZVCXI_PC_ROWID'. "#EC NOTEXT
  class-data F_IPRVT_SPEC type /VCXI/VKSC_IPRVT .

  methods GET_TPRST
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRPRP_PAWID
    returning
      value(RS_PAWID) type ZVCXI_PCS_S_PAWID
    raising
      /VCXI/CX_CKX .
  methods GET_FPRPR
    returning
      value(RF_FPRPR) type ZVCXI_PCSS_FPRPR
    raising
      /VCXI/CX_CKX .
  methods GET_RODIM
    returning
      value(RS_RODIM) type ZVCXI_PCSP_S_RODIM
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE_DESCR
    returning
      value(RF_FLUTE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRBOA
    returning
      value(RF_PRBOA) type ZVCXI_PCSS_PRBOA
    raising
      /VCXI/CX_CKX .
  methods GET_PRBOA_DESCR
    returning
      value(RF_PRBOA_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods GET_SABOA
    returning
      value(RF_SABOA) type ZVCXI_PCSS_SABOA
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_RODIA
    importing
      !IF_FOVRR_RODIA type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_SABOA_DESCR
    returning
      value(RF_SABOA_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_SELFD
    returning
      value(RF_SELFD) type ZVCXI_PCSS_SELFD
    raising
      /VCXI/CX_CKX .
  methods SET_PRBOA
    importing
      !IF_PRBOA type ZVCXI_PCSS_PRBOA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    returning
      value(RR_GATE_PRBOA) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_SABOA
    importing
      !IF_SABOA type ZVCXI_PCSS_SABOA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    returning
      value(RR_GATE_SABOA) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_SELFD
    importing
      !IF_SELFD type ZVCXI_PCSS_SELFD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_SALES_ACTIV
    returning
      value(RF_SALES_ACTIV) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_ROWID
    returning
      value(RS_ROWID) type ZVCXI_PCS_S_ROWID
    raising
      /VCXI/CX_CKX .
  methods GET_ROLEN
    returning
      value(RS_ROLEN) type ZVCXI_PCS_S_ROLEN
    raising
      /VCXI/CX_CKX .
  methods GET_RODIA
    exporting
      value(ES_RODIA) type ZVCXI_PCS_S_RODIA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_CODIA
    returning
      value(RS_CODIA) type ZVCXI_PCS_S_CODIA
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods SET_FPRPR
    importing
      !IF_FPRPR type ZVCXI_PCSS_FPRPR
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD_CUST_NSTBG
    returning
      value(RF_NSTBG) type ZVCXI_PCSS_SELFD
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ROWID
    importing
      !IS_ROWID type ZVCXI_PCS_S_ROWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ROLEN
    importing
      !IS_ROLEN type ZVCXI_PCS_S_ROLEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RODIA
    importing
      !IS_RODIA type ZVCXI_PCS_S_RODIA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CODIA
    importing
      !IS_CODIA type ZVCXI_PCS_S_CODIA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_RODIA
    returning
      value(RF_FOVRR_RODIA) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TBOAR
    returning
      value(RF_VALID_TBOAR) type STRING
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_PRSTY type /VCXI/VKS_ATTID value 'PRSTY'. "#EC NOTEXT
  data F_VALID_TBOAR type STRING .
  constants C_ATTID_TPRST type /VCXI/VKS_ATTID value 'TPRST'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_RODIA type /VCXI/VKSC_IEVNT value 'RECALC_RODIA'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_CODIA_CHANGED type /VCXI/VKSC_IEVNT value 'CODIA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRR_RODIA_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRR_RODIA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRS_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_RODIA_CHANGED type /VCXI/VKSC_IEVNT value 'RODIA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ROLEN_CHANGED type /VCXI/VKSC_IEVNT value 'ROLEN_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ROWID_CHANGED type /VCXI/VKSC_IEVNT value 'ROWID_CHANGED'. "#EC NOTEXT
  constants C_PI type CHAR10 value '3.14159265'. "#EC NOTEXT
  data F_TPRST type ZVCXI_P0SS_TPRST .
  data F_PRSTY type ZVCXI_P0SS_PRSTY .

  methods GET_BOARD
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
    returning
      value(RR_PR_BOARD) type ref to ZCL_VCXI_PCSS_PR_BOARD
    raising
      /VCXI/CX_CKX .
  methods GET_PREPR_MGR
    returning
      value(RR_PR_PREPR_MGR) type ref to ZCL_VCXI_PCSS_PR_PREPR_MGR
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_COWID_BY_PAWID
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_BOARW
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CREATE_PREPR_MGR
    returning
      value(RR_GATE_PREPR_MGR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CALC_SIDERUN
    importing
      !IS_BOARW type ZVCXI_PCSS_S_BOARW
      !IS_ROWID type ZVCXI_PCS_S_ROWID
      !IS_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    importing
      !IF_POOTI type ZVCXI_P0S_POOTI
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods CHECK_BOARD
    returning
      value(RF_SUBRC) type SY-SUBRC
    raising
      /VCXI/CX_CKX .
  methods CREATE_BOARD
    returning
      value(RR_GATE_BOARD) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BOARD_WIDTH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RODIA
    raising
      /VCXI/CX_CKX .
  methods SET_SIDRU
    importing
      !IS_SIDRU type ZVCXI_P0SS_S_SIDRU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SIDERUN
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSS_PR_SPEC_CR definition
class ZCL_VCXI_PCSS_PR_SPEC_CR implementation.
method CALC_SIDERUN.

  data:  LF_NOUPW   type F,
         LF_NUPSS   type ZVCXI_PCSS_NUPSS.
  data:  LS_CALCV   type ZVCXI_XCS_S_CALCV,
         LS_BOARW   type ZVCXI_PCSS_S_BOARW.

  check IS_ROWID-ROWID is not initial.

*** Subtract Sidrun Min from Board Width TMP
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_BOARW-BOARW
                                                      IF_CALCV_UOM_1 = IS_BOARW-BOARW_UOM
                                                      IF_CALCV_2     = IS_SIDRU_MIN-SIDRU
                                                      IF_CALCV_UOM_2 = IS_SIDRU_MIN-SIDRU_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                            importing EF_CALCV       = LS_BOARW-BOARW
                                                      EF_CALCV_UOM   = LS_BOARW-BOARW_UOM ).


*** Check how many times the Sheet fits in the Board Grade Width
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BOARW-BOARW
                                                      IF_CALCV_UOM_1 = LS_BOARW-BOARW_UOM
                                                      IF_CALCV_2     = IS_ROWID-ROWID
                                                      IF_CALCV_UOM_2 = IS_ROWID-ROWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                            importing EF_CALCV       = LF_NOUPW ).


*** Multiply Sheet Width (based on how many times it fits) - Get First 10 decimal places!!
  move LF_NOUPW to LF_NUPSS.
  LS_CALCV-CALCV     = IS_ROWID-ROWID * floor( LF_NUPSS ).
  LS_CALCV-CALCV_UOM = IS_ROWID-ROWID_UOM.

*** Calculate Side Run
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_BOARW-BOARW
                                                      IF_CALCV_UOM_1 = IS_BOARW-BOARW_UOM
                                                      IF_CALCV_2     = LS_CALCV-CALCV
                                                      IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                      IF_UOM         = IS_BOARW-BOARW_UOM
                                            importing EF_CALCV       = RS_SIDRU-SIDRU
                                                      EF_CALCV_UOM   = RS_SIDRU-SIDRU_UOM ).

endmethod.
method CHECK_BOARD.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** As default -> no Board Info is available
  move 1 to RF_SUBRC.

*** First move Sales/Production Boardgrade to Active one
  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  else.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  endif.

  if LR_PR_BOARD is bound.
    move 0 to RF_SUBRC.
    exit.
  endif.

endmethod.
method CHECK_BOARW.

***  0 - No Board Width is needed.
***  1 - Board Width is maintained.
***  2 - Board Width is not maintained.
***  3 - Board Grade Width is not valid. Check BoardID Customizing.

  data:          LF_MBOAR       type        ZVCXI_PCSS_MBOAR,
                 LF_SELFD       type        ZVCXI_PCSS_SELFD,
                 LF_VALID       type        ABAP_BOOL.
  data:          LS_BOARW       type        ZVCXI_PCSS_S_BOARW,
                 LS_COWID       type        ZVCXI_PCS_S_COWID.
  data:          LT_GATE        type        /VCXI/VKSR_TT_GATE,
                 LT_COWID       type        ZVCXI_PCS_TT_COWID.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

***---------------------------------------------------------------------------
*** Get All Boards
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S to LF_MBOAR.
    when ABAP_FALSE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***           right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***---------------------------------------------------------------------------
  if LR_PR_BOARD is bound.
    LR_PR_BOARD->GET_SELFD( importing EF_SELFD = LF_SELFD ).
    if LF_SELFD eq ABAP_TRUE.
      ME->GET_BOARW( importing ES_BOARW = LS_BOARW ).

***   If needed Check Board Width against BoardID Customizing
      if ME->F_VALID_BOARW eq 'CUST'.
        LT_COWID = ME->ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL( ).
        loop at LT_COWID into LS_COWID.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BOARW-BOARW_UOM
                                                             IF_UOM_IN    = LS_COWID-COWID_UOM
                                                             IF_VALUE_IN  = LS_COWID-COWID
                                                   importing EF_VALUE_OUT = LS_COWID-COWID
                                                             EF_UOM_OUT   = LS_COWID-COWID_UOM ).

          if LS_BOARW-BOARW_UOM eq LS_COWID-COWID_UOM and
             LS_BOARW-BOARW     eq LS_COWID-COWID.
            LF_VALID = ABAP_TRUE.
            exit.
          endif.
        endloop.

        if LF_VALID eq ABAP_FALSE.
          RF_RESULT = 3.
          exit.
        endif.
      endif.

      if LS_BOARW-BOARW is not initial.
***     Selfdeckling is activated and Board Width is maintained.
        RF_RESULT = 1.
      else.
***     Selfdeckling is activated and Board Width is not maintained.
        RF_RESULT = 2.
      endif.
    else.
***   Selfdeckling is not activated.
      RF_RESULT = 0.
    endif.
  endif.

endmethod.
method CHECK_COWID_BY_PAWID.

  data:          LF_WERKS     type        WERKS_D.
  data:          LS_PAWID     type        ZVCXI_PCS_S_PAWID,
                 LS_PWIDT     type        ZVCXI_PCSS_S_PWIDT,
                 LS_PWIDTC    type        ZVCXI_PCSS_S_PWIDT.
  data:          LR_APPDATA   type ref to /VCXI/CL_VKSR_APPDATA.

*** Start Positiv
  RF_ALLOWED = ABAP_TRUE.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

*** Get Preprint Paper Width
  LS_PAWID = ME->GET_PRPRP_PAWID( ).

*** Get Paper Width Tolerance
  LS_PWIDT = ZCL_VCXI_PCSS_CUST_BOARD=>GET_PWIDT( IF_WERKS = LF_WERKS ).

  check LS_PAWID-PAWID is not initial.

*** Convert all Units
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_COWID-COWID_UOM
                                                     IF_UOM_IN    = LS_PAWID-PAWID_UOM
                                                     IF_VALUE_IN  = LS_PAWID-PAWID
                                           importing EF_VALUE_OUT = LS_PAWID-PAWID
                                                     EF_UOM_OUT   = LS_PAWID-PAWID_UOM ).

  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_COWID-COWID_UOM
                                                     IF_UOM_IN    = LS_PWIDT-PWIDT_UOM
                                                     IF_VALUE_IN  = LS_PWIDT-PWIDT
                                           importing EF_VALUE_OUT = LS_PWIDT-PWIDT
                                                     EF_UOM_OUT   = LS_PWIDT-PWIDT_UOM ).

*** Do the check
  LS_PWIDTC-PWIDT = LS_PAWID-PAWID - IS_COWID-COWID.
  check abs( LS_PWIDTC-PWIDT ) gt LS_PWIDT-PWIDT.
  move ABAP_FALSE to RF_ALLOWED.

endmethod.
method CHECK_SALES_ACTIV.

  if ME->GET_ICONT( ) eq ZCL_VCXI_PCSS_PR_SPEC_CR=>C_ICONT_SALES.
    RF_SALES_ACTIV = ABAP_TRUE.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method CREATE_BOARD.

  data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

*** Get Board Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  if lines( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Create Board
  RR_GATE_BOARD = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

endmethod.
method CREATE_PREPR_MGR.

  data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

*** Get Preprint Manager Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PCSS_PR_PREPR_MGR=>C_IPRVT_PC_PREPR_MGR
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  if lines( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PCSS_PR_PREPR_MGR=>C_IPRVT_PC_PREPR_MGR
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Create Preprint Manager
  RR_GATE_PREPR_MGR = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
  if RR_GATE_PREPR_MGR->IS_INUSE( ) eq ABAP_FALSE.
    RR_GATE_PREPR_MGR->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.

endmethod.
method GET_BOARD.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_BOARD        type ref to ZCL_VCXI_PCSS_PR_BOARD.

***------------------------------------------------------------------
*** Get all Boards
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Boards References
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        check LR_PR_BOARD is bound.

        check LR_PR_BOARD->GET_MBOAR( ) eq IF_MBOAR.
        move LR_PR_BOARD to RR_PR_BOARD.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_BOARD.
    endtry.
  endloop.

endmethod.
  method GET_BOARD_CUST_NSTBG.

    data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.


    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
    if LR_PR_BOARD is bound.
      RF_NSTBG = LR_PR_BOARD->GET_CUST_NSTBG( ).
    endif.
    check RF_NSTBG ne ABAP_TRUE.

    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
    if LR_PR_BOARD is bound.
      RF_NSTBG = LR_PR_BOARD->GET_CUST_NSTBG( ).
    endif.

  endmethod.
method GET_CALIP.

  data:  LS_CALIP     type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
         LR_CALIP     type ref to ZIF_VCXI_P0SS_CALIP.

***------------------------------------------------------------------------------------------------
*** Get Caliper Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_CALIP=>C_IPRVT_P0_CALIP
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CALIP.
        check LR_CALIP is bound.
        clear: LS_CALIP.
        LS_CALIP = LR_CALIP->GET_CALIP( IF_POOTI = IF_POOTI ).
        check LS_CALIP-CALIP is not initial.


        if RS_CALIP-CALIP is initial.
          move LS_CALIP to RS_CALIP.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_CALIP-CALIP
                                                              IF_CALCV_UOM_1 = RS_CALIP-CALIP_UOM
                                                              IF_CALCV_2     = LS_CALIP-CALIP
                                                              IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = RS_CALIP-CALIP_UOM
                                                    importing EF_CALCV       = RS_CALIP-CALIP
                                                              EF_CALCV_UOM   = RS_CALIP-CALIP_UOM ).
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_CALIP.
    endtry.
  endloop.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_CODIA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CODIA ).
  move LS_PARAM-ATFLV to RS_CODIA-CODIA.
  move LS_PARAM-UNIT  to RS_CODIA-CODIA_UOM.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FLUTE.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** First move Sales/Production Boardgrade to Active one
  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  else.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  endif.

*** Get Flute From Activ Board Grade
  check LR_PR_BOARD is bound.
  RF_FLUTE = LR_PR_BOARD->GET_FLUTE( ).

endmethod.
method GET_FLUTE_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_PCS_FLUTE'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_FLUTE   type                   ZVCXI_PCS_FLUTE.

  LF_FLUTE = ME->GET_FLUTE( ).

*** Return Flute Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_FLUTE into LS_D07V.
  check SY-SUBRC = 0.

  RF_FLUTE_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_FOVRR_RODIA.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get Set By of Roll Diameter
  ME->GET_RODIA( importing EF_SETBY = LF_SETBY ).

  check LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRR_RODIA.

endmethod.
method GET_FPRPR.

  data:  LR_PR_PREPR_MGR    type ref to ZCL_VCXI_PCSS_PR_PREPR_MGR.

***------------------------------------------------------------------
*** Preprint Manager
  LR_PR_PREPR_MGR = ME->GET_PREPR_MGR( ).

*** Get Preprint is available
  check LR_PR_PREPR_MGR is bound.
  move ABAP_TRUE to RF_FPRPR.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_PRBOA.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Production Board From Production Reference
  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  check LR_PR_BOARD is bound.
  RF_PRBOA = LR_PR_BOARD->GET_BOARD( ).

endmethod.
method GET_PRBOA_DESCR.

  data: LF_STRING      type        STRING.
  data: LT_BOARD_DESCR type        ZVCXI_PCSS_TT_BOARD_DESCR.
  data: LS_BOARD_DESCR type        ZVCXI_PCSS_S_BOARD_DESCR.
  data: LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Board from Sales Board Grade
  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  check LR_PR_BOARD is bound.

  move LR_PR_BOARD->GET_BOARD_DESCR( ) to LT_BOARD_DESCR.
  loop at LT_BOARD_DESCR into LS_BOARD_DESCR.
    check LS_BOARD_DESCR-DESCR is not initial.
    if SY-TABIX eq 1.
      move LS_BOARD_DESCR-DESCR to LF_STRING.
    else.
      concatenate LF_STRING LS_BOARD_DESCR-DESCR
             into LF_STRING separated by '/'.
    endif.
  endloop.

  move LF_STRING to RF_PRBOA_DESCR.

endmethod.
method GET_PREPR_MGR.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Preprint Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_PREPR_MGR=>C_IPRVT_PC_PREPR_MGR
                                   IF_INUSE  = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Preprint
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to RR_PR_PREPR_MGR.
        check RR_PR_PREPR_MGR is bound.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_PRPRP_PAWID.

  data:  LS_PRPRP_STR       type        ZVCXI_PCSS_S_PRPRP_STR.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRPRP_STR       type        ZVCXI_PCSS_TT_PRPRP_STR.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PREPR_MGR    type ref to ZCL_VCXI_PCSS_PR_PREPR_MGR.

***------------------------------------------------------------------
*** Preprint Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_PREPR_MGR=>C_IPRVT_PC_PREPR_MGR
                                   IF_INUSE  = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Preprint
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PREPR_MGR.
        check LR_PR_PREPR_MGR is bound.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  check LR_PR_PREPR_MGR is bound.
  LT_PRPRP_STR = LR_PR_PREPR_MGR->GET_PRPRP_STR( ).

  loop at LT_PRPRP_STR into LS_PRPRP_STR.

*** Do unit conversion if needed
    if RS_PAWID-PAWID is not initial.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_PAWID-PAWID_UOM
                                                         IF_UOM_IN    = LS_PRPRP_STR-PAWID_UOM
                                                         IF_VALUE_IN  = LS_PRPRP_STR-PAWID
                                               importing EF_VALUE_OUT = LS_PRPRP_STR-PAWID
                                                         EF_UOM_OUT   = LS_PRPRP_STR-PAWID_UOM ).
    endif.

    if LS_PRPRP_STR-PAWID gt RS_PAWID-PAWID.
      move-corresponding LS_PRPRP_STR to RS_PAWID.
    endif.

  endloop.

endmethod.
method GET_PRSTY.

  RF_PRSTY = ME->F_PRSTY.

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_PTYPE_DESCR.

endmethod.
method GET_RODIA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).
  move LS_PARAM-ATFLV to ES_RODIA-RODIA.
  move LS_PARAM-UNIT  to ES_RODIA-RODIA_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_RODIM.

  data: LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_RODIA type ZVCXI_PCS_S_RODIA.

*** Roll Length
  LS_ROLEN = ME->GET_ROLEN( ).
  move-corresponding LS_ROLEN   to RS_RODIM.

*** Roll Width
  LS_ROWID = ME->GET_ROWID( ).
  move-corresponding LS_ROWID   to RS_RODIM.

*** Roll Diameter
  ME->GET_RODIA( importing ES_RODIA = LS_RODIA ).
  move-corresponding LS_RODIA   to RS_RODIM.

*** Ups
  move 1                        to RS_RODIM-PCUPS.

*** PC Direction
  move 'A'                      to RS_RODIM-PCDIR.

endmethod.
method GET_ROLEN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).
  move LS_PARAM-ATFLV to RS_ROLEN-ROLEN.
  move LS_PARAM-UNIT  to RS_ROLEN-ROLEN_UOM.

endmethod.
method GET_ROWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).
  move LS_PARAM-ATFLV to RS_ROWID-ROWID.
  move LS_PARAM-UNIT  to RS_ROWID-ROWID_UOM.

endmethod.
method GET_SABOA.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Board from Sales Board Grade
  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  check LR_PR_BOARD is bound.
  RF_SABOA = LR_PR_BOARD->GET_BOARD( ).

endmethod.
method GET_SABOA_DESCR.

  data: LF_STRING      type        STRING.
  data: LT_BOARD_DESCR type        ZVCXI_PCSS_TT_BOARD_DESCR.
  data: LS_BOARD_DESCR type        ZVCXI_PCSS_S_BOARD_DESCR.
  data: LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Board from Sales Board Grade

  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  check LR_PR_BOARD is bound.

  move LR_PR_BOARD->GET_BOARD_DESCR( ) to LT_BOARD_DESCR.
  loop at LT_BOARD_DESCR into LS_BOARD_DESCR.
    check LS_BOARD_DESCR-DESCR is not initial.
    if SY-TABIX eq 1.
      move LS_BOARD_DESCR-DESCR to LF_STRING.
    else.
      concatenate LF_STRING LS_BOARD_DESCR-DESCR
             into LF_STRING separated by '/'.
    endif.
  endloop.

  move LF_STRING to RF_SABOA_DESCR.

endmethod.
method GET_SELFD.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** First move Sales/Production Boardgrade to Active one
  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  else.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  endif.

*** Get Self Deckling From Activ Board Grade
  check LR_PR_BOARD is bound.
  LR_PR_BOARD->GET_SELFD( importing EF_SELFD = RF_SELFD ).

endmethod.
method GET_STATUS.

  data: LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_CODIA type ZVCXI_PCS_S_CODIA.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Roll Width
  LS_ROWID = ME->GET_ROWID( ).
  if LS_ROWID-ROWID is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Roll Length
  LS_ROLEN = ME->GET_ROLEN( ).
  if LS_ROLEN-ROLEN is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Core Diameter
  LS_CODIA = ME->GET_CODIA( ).
  if LS_CODIA-CODIA is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Board Informations
  case ME->CHECK_BOARD( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Self Deckeling
  case ME->CHECK_BOARW( ).
    when 0 or 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when 2 or 3.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.


endmethod.
method GET_STATUS_MSG.

  data: LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_CODIA type ZVCXI_PCS_S_CODIA.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Roll Width
  LS_ROWID = ME->GET_ROWID( ).
  if LS_ROWID-ROWID is not initial.
***   Roll Width is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '050' ).
  else.
***   Roll Width is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '051' ).
  endif.

***------------------------------------------------------------------
*** Check Roll Length
  LS_ROLEN = ME->GET_ROLEN( ).
  if LS_ROLEN-ROLEN is not initial.
***   Roll Length is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '052' ).
  else.
***   Roll Length is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '053' ).
  endif.

***------------------------------------------------------------------
*** Check Core Diameter
  LS_CODIA = ME->GET_CODIA( ).
  if LS_CODIA-CODIA is not initial.
***   Core Diameter is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '054' ).
  else.
***   Core Diameter is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '055' ).
  endif.

***------------------------------------------------------------------
*** Check Board Informations
  case ME->CHECK_BOARD( ).
    when 0.
***   Board Information maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '015' ).
    when 1.
***   Board Information not maintained. Check Board ID or Purchased Sheet.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '016' ).
  endcase.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Self Deckeling
  case ME->CHECK_BOARW( ).
    when 1.
***   Board Grade Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '403' ).

    when 2.
***   Board Grade Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '404' ).

    when 3.
***   Board Grade Width is not valid. Check BoardID Customizing.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '406' ).

  endcase.

endmethod.
method GET_TPRST.

  RF_TPRST = ME->F_TPRST.

endmethod.
method GET_VALID_TBOAR.

  RF_VALID_TBOAR = ME->F_VALID_TBOAR.

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_RECALC_RODIA.
      ME->HANDLE_RECALC_RODIA( ).

    when C_IEVNT_I_RECALC_SIDERUN.
      ME->HANDLE_RECALC_SIDERUN( ).

    when C_IEVNT_I_RECALC_BOARD_WIDTH.
      ME->HANDLE_RECALC_BOARD_WIDTH( ).

  endcase.

endmethod.
method HANDLE_RECALC_BOARD_WIDTH.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR,
                 LF_SELFD     type        ZVCXI_PCSS_SELFD.
  data:          LS_BOARW     type        ZVCXI_PCSS_S_BOARW,
                 LS_BOARW_TMP type        ZVCXI_PCSS_S_BOARW,
                 LS_SIDRU     type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_TMP type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MIN type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MAX type        ZVCXI_P0SS_S_SIDRU,
                 LS_ROWID     type        ZVCXI_PCS_S_ROWID,
                 LS_COWID     type        ZVCXI_PCS_S_COWID.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE,
                 LT_COWID     type        ZVCXI_PCS_TT_COWID.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.


  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S to LF_MBOAR.
    when ABAP_FALSE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***       right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  check ME->GET_FOVRS( ) eq ABAP_FALSE.

  if LR_PR_BOARD is bound.
    LR_PR_BOARD->GET_SELFD( importing EF_SELFD = LF_SELFD ).
    if LF_SELFD eq ABAP_TRUE.

      LS_ROWID = ME->GET_ROWID( ).

****---------------------------------------------------------------------------
***   Get Board Grade Width from Board Grade Table
      LT_COWID = LR_PR_BOARD->GET_COWID( ).

***   Get Limits of Side run
      LR_PR_BOARD->GET_LIMIT_SIDRU( importing ES_SIDRU_MIN = LS_SIDRU_MIN
                                              ES_SIDRU_MAX = LS_SIDRU_MAX ).

***---------------------------------------------------------------------------
***   Do Corrugation Width calculation
      loop at LT_COWID into LS_COWID.

***     Check if Corrugation Width is allowed by Paper Width of Preprint
        check ME->CHECK_COWID_BY_PAWID( IS_COWID = LS_COWID ) eq ABAP_TRUE.

        move LS_COWID-COWID     to LS_BOARW_TMP-BOARW.
        move LS_COWID-COWID_UOM to LS_BOARW_TMP-BOARW_UOM.

***     Calculate Side Run
        if LS_ROWID-ROWID         is not initial and
           LS_ROWID-ROWID_UOM     is not initial and
           LS_BOARW_TMP-BOARW     is not initial and
           LS_BOARW_TMP-BOARW_UOM is not initial.

          LS_SIDRU_TMP = ME->CALC_SIDERUN( IS_SIDRU_MIN = LS_SIDRU_MIN
                                           IS_BOARW     = LS_BOARW_TMP
                                           IS_ROWID     = LS_ROWID ).

***       Convert Sidrun Limit to right unit
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SIDRU_TMP-SIDRU_UOM
                                                             IF_UOM_IN    = LS_SIDRU_MIN-SIDRU_UOM
                                                             IF_VALUE_IN  = LS_SIDRU_MIN-SIDRU
                                                   importing EF_VALUE_OUT = LS_SIDRU_MIN-SIDRU
                                                             EF_UOM_OUT   = LS_SIDRU_MIN-SIDRU_UOM ).

          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SIDRU_TMP-SIDRU_UOM
                                                             IF_UOM_IN    = LS_SIDRU_MAX-SIDRU_UOM
                                                             IF_VALUE_IN  = LS_SIDRU_MAX-SIDRU
                                                   importing EF_VALUE_OUT = LS_SIDRU_MAX-SIDRU
                                                             EF_UOM_OUT   = LS_SIDRU_MAX-SIDRU_UOM ).



***       Check Siderun agains limit
          if LS_SIDRU_MIN is not initial and
             LS_SIDRU_MAX is not initial.
            check LS_SIDRU_TMP-SIDRU ge LS_SIDRU_MIN-SIDRU and
                  LS_SIDRU_TMP-SIDRU le LS_SIDRU_MAX-SIDRU.
          endif.


          check LS_SIDRU-SIDRU is initial or
                LS_SIDRU_TMP-SIDRU lt LS_SIDRU-SIDRU.

***       Safe SideRun -> Best one
          move LS_SIDRU_TMP-SIDRU     to LS_SIDRU-SIDRU.
          move LS_SIDRU_TMP-SIDRU_UOM to LS_SIDRU-SIDRU_UOM.

***       Safe Board Grade Width according to best Side Run
          move LS_COWID-COWID     to LS_BOARW-BOARW.
          move LS_COWID-COWID_UOM to LS_BOARW-BOARW_UOM.

        endif.
      endloop.
    endif.
  endif.

***---------------------------------------------------------------------------
*** Set Value
  ME->SET_BOARW( IS_BOARW = LS_BOARW ).

endmethod.
method HANDLE_RECALC_RODIA.

  data: LS_RODIA type ZVCXI_PCS_S_RODIA,
        LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_CALIP type ZVCXI_P0SS_S_CALIP,
        LS_CODIA type ZVCXI_PCS_S_CODIA.
  data: LF_ROLEN type FLOAT.


*** Recalc only if Roll Diameter is not overriden
  check ME->GET_FOVRR_RODIA( ) eq ABAP_FALSE.

  ME->GET_RODIA( importing ES_RODIA = LS_RODIA ).
  LS_ROLEN = ME->GET_ROLEN( ).
  LS_CALIP = ME->GET_CALIP( IF_POOTI = '*' ).
  LS_CODIA = ME->GET_CODIA( ).

*** Convert Roll Length to Caliper Unit
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_CALIP-CALIP_UOM
                                                     IF_UOM_IN    = LS_ROLEN-ROLEN_UOM
                                                     IF_VALUE_IN  = LS_ROLEN-ROLEN
                                           importing EF_VALUE_OUT = LF_ROLEN ).

*** Roll Diametr = Square Root ( (Roll Length * Caliper * 4 / Pi) + (Core Diameter^2) ).
  LS_RODIA-RODIA = sqrt( ( LF_ROLEN * LS_CALIP-CALIP * 4 / C_PI ) + ( LS_CODIA-CODIA * LS_CODIA-CODIA ) ).

*** Set new Value
  ME->SET_RODIA( IS_RODIA = LS_RODIA ).

endmethod.
method HANDLE_RECALC_SIDERUN.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR.
  data:          LS_SIDRU     type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MIN type        ZVCXI_P0SS_S_SIDRU,
                 LS_BOARW     type        ZVCXI_PCSS_S_BOARW,
                 LS_ROWID     type        ZVCXI_PCS_S_ROWID.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Board Grade Width
  ME->GET_BOARW( importing ES_BOARW = LS_BOARW ).

  if LS_BOARW-BOARW is not initial.

*** Get Minimum Side Run for calculation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                     IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
    case ME->CHECK_SALES_ACTIV( ).
      when ABAP_TRUE.   move 'S' to LF_MBOAR.
      when ABAP_FALSE.  move 'P' to LF_MBOAR.
    endcase.

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
          endif.
          if LR_PR_BOARD               is bound     and
             LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***           right board found -> exit
            exit.
          else.
            clear: LR_PR_BOARD.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    if LR_PR_BOARD               is bound.
****---------------------------------------------------------------------------
***   Get Limits of Side run
      LR_PR_BOARD->GET_LIMIT_SIDRU( importing ES_SIDRU_MIN = LS_SIDRU_MIN ).
    endif.

    LS_ROWID = ME->GET_ROWID( ).

*** Calculate Side Run
    LS_SIDRU = ME->CALC_SIDERUN( IS_SIDRU_MIN = LS_SIDRU_MIN
                                 IS_BOARW     = LS_BOARW
                                 IS_ROWID     = LS_ROWID ).

  endif.

*** Set Calculated Side Run
  ME->SET_SIDRU( IS_SIDRU = LS_SIDRU ).

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI,
         LS_PRVDR_DEF   type /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_ATTRI       type /VCXI/VKS_TT_ATTRI,
         LT_PRVDR_DEF   type /VCXI/VKSR_TT_PRVDR_DEF.

*** -------------------------------------------------------------------------------------------------
*** Init Valid Board Types
*** Get Board Provider
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  if lines( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Get Valid Board Types via Attribute
  read table LS_PRVDR_DEF-T_ATTRI into LS_ATTRI
                                  with key ATTID = ZCL_VCXI_PCSS_PR_BOARD=>C_ATTID_VALID_TBOAR.

  ME->F_VALID_TBOAR = LS_ATTRI-ATTVA.

*** -------------------------------------------------------------------------------------------------
*** Init Product Style Type and Product Style
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_TPRST.
  if SY-SUBRC = 0.
    ME->F_TPRST = LS_ATTRI-ATTVA.
  endif.

  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_PRSTY.
  if SY-SUBRC = 0.
    ME->F_PRSTY = LS_ATTRI-ATTVA.
  endif.

*** -------------------------------------------------------------------------------------------------
*** Get Valid BoardGrade Width via Attribute
  LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'VALID_BOARW' ).
  ME->F_VALID_BOARW = LS_ATTRI-ATTVA.

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_CODIA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CODIA ).

  move IS_CODIA-CODIA     to LS_PARAM-ATFLV.
  move IS_CODIA-CODIA_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CODIA_CHANGED ).
  endif.

endmethod.
method SET_FOVRR_RODIA.

  case IF_FOVRR_RODIA.
*** Set Set By "User"
    when ABAP_TRUE.
      ME->SET_RODIA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Set By "Calc"
    when ABAP_FALSE.
      ME->SET_RODIA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endcase.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRR_RODIA_CHANGED ).

endmethod.
method SET_FPRPR.

  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PREPR_MGR    type ref to ZCL_VCXI_PCSS_PR_PREPR_MGR.

***------------------------------------------------------------------
*** Preprint Manager
  LR_PR_PREPR_MGR = ME->GET_PREPR_MGR( ).

*** Free Preprint
  if IF_FPRPR is initial.
    if LR_PR_PREPR_MGR is bound.
      LR_PR_PREPR_MGR->DO_FREE( ).
      free: LR_PR_PREPR_MGR.
    endif.
  else.

*** Set Preprint
    if LR_PR_PREPR_MGR is not bound.
***   Create Preprint
      LR_GATE = ME->CREATE_PREPR_MGR( ).

      check LR_GATE is bound.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PREPR_MGR.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.
    endif.
  endif.

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_PRBOA.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).

*** Free Board
  if IF_PRBOA is initial.
    if LR_PR_BOARD is bound.
      LR_PR_BOARD->DO_FREE( ).
    endif.
  else.
*** Set Production Board ID
    if LR_PR_BOARD is not bound.
***   Create Board
      LR_GATE = ME->CREATE_BOARD( ).

      check LR_GATE is bound.

      try.
          move LR_GATE->R_CLSPR ?to  LR_PR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.

***   Set Board Mode
      if LR_PR_BOARD is bound.
        RR_GATE_PRBOA = LR_GATE.
        LR_PR_BOARD->SET_MBOAR( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
      endif.

    endif.

    check LR_PR_BOARD is bound.
    LR_PR_BOARD->SET_BOARD( IF_BOARD = IF_PRBOA
                            IF_SETBY = IF_SETBY ).

  endif.

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
method SET_RODIA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).

  if IS_RODIA is supplied.
    move IS_RODIA-RODIA     to LS_PARAM-ATFLV.
    move IS_RODIA-RODIA_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIA_CHANGED ).
  endif.

endmethod.
method SET_ROLEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).

  move IS_ROLEN-ROLEN     to LS_PARAM-ATFLV.
  move IS_ROLEN-ROLEN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ROLEN_CHANGED ).
  endif.

endmethod.
method SET_ROWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).

  move IS_ROWID-ROWID     to LS_PARAM-ATFLV.
  move IS_ROWID-ROWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ROWID_CHANGED ).
  endif.

endmethod.
method SET_SABOA.

  data:  LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

  LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).

*** Free Board
  if IF_SABOA is initial.
    if LR_PR_BOARD is bound.
      LR_PR_BOARD->DO_FREE( ).
    endif.
  else.
*** Set Sales Board ID
    if LR_PR_BOARD is not bound.
***   Create Board
      LR_GATE = ME->CREATE_BOARD( ).

      check LR_GATE is bound.

      try.
          move LR_GATE->R_CLSPR ?to  LR_PR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.

***   Set Board Mode
      if LR_PR_BOARD is bound.
        RR_GATE_SABOA = LR_GATE.
        LR_PR_BOARD->SET_MBOAR( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
      endif.

    endif.

    check LR_PR_BOARD is bound.
    LR_PR_BOARD->SET_BOARD( IF_BOARD = IF_SABOA
                            IF_SETBY = IF_SETBY ).

  endif.

endmethod.
method SET_SELFD.

  data: LR_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** First move Sales/Production Boardgrade to Active one
  if ME->CHECK_SALES_ACTIV( ) eq ABAP_TRUE.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S ).
  else.
    LR_PR_BOARD = ME->GET_BOARD( IF_MBOAR = ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P ).
  endif.

*** Set Self Deckling on active Board ID
  check LR_PR_BOARD is bound.
  LR_PR_BOARD->SET_SELFD( IF_SELFD = IF_SELFD
                          IF_SETBY = IF_SETBY ).

endmethod.
method SET_SIDRU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).

  if IS_SIDRU is supplied.
    move IS_SIDRU-SIDRU     to LS_PARAM-ATFLV.
    move IS_SIDRU-SIDRU_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SIDE_RUN_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).
  move LS_PARAM-ATWRT to RF_ICONT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~GET_ICONT_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_ICONT'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_ICONT   type                   ZVCXI_P0S_ICONT.

  LF_ICONT = ME->GET_ICONT( ).

*** Return Context ID Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_ICONT into LS_D07V.
  check SY-SUBRC eq 0.

  RF_DESCR = LS_D07V-DDTEXT.

endmethod.
method ZIF_VCXI_P0SS_ICONT~SET_ICONT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICONT ).

  move IF_ICONT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICONT_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_BOARW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARW ).
  move LS_PARAM-ATFLV to ES_BOARW-BOARW.
  move LS_PARAM-UNIT  to ES_BOARW-BOARW_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR.
  data:          LS_BOARW     type        ZVCXI_PCSS_S_BOARW.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.
  field-symbols: <S_COWID>    type        ZVCXI_PCS_S_COWID.

***------------------------------------------------------------------------------------------------
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.   move ZCL_VCXI_PCSSC_BOARD_G=>C_MBOAR_SALES to LF_MBOAR.
    when ABAP_FALSE.  move ZCL_VCXI_PCSSC_BOARD_G=>C_MBOAR_PROD  to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***           right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Get Board Grade Width from Board Grade Table
  RT_COWID = LR_PR_BOARD->GET_COWID( ).

***------------------------------------------------------------------------------------------------
*** Convert Corrugation Width to Unit of Board Grade Width
  ME->ZIF_VCXI_PCSS_SELFD~GET_BOARW( importing ES_BOARW = LS_BOARW ).

  loop at RT_COWID assigning <S_COWID>.
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BOARW-BOARW_UOM
                                                       IF_UOM_IN    = <S_COWID>-COWID_UOM
                                                       IF_VALUE_IN  = <S_COWID>-COWID
                                             importing EF_VALUE_OUT = <S_COWID>-COWID
                                                       EF_UOM_OUT   = <S_COWID>-COWID_UOM ).
  endloop.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_FOVRS.

  data: LF_SETBY_BOARW type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_BOARW( importing EF_SETBY = LF_SETBY_BOARW ).

  check LF_SETBY_BOARW eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRS.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_SIDRU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).
  move LS_PARAM-ATFLV to ES_SIDRU-SIDRU.
  move LS_PARAM-UNIT  to ES_SIDRU-SIDRU_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_PCSS_SELFD~SET_BOARW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARW ).

  if IS_BOARW is supplied.
    move IS_BOARW-BOARW     to LS_PARAM-ATFLV.
    move IS_BOARW-BOARW_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARD_WIDTH_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSS_SELFD~SET_FOVRS.

  case IF_FOVRS.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_BOARW( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_BOARW( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRS_CHANGED ).

endmethod.
