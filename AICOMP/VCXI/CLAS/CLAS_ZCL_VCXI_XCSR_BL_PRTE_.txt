
class ZCL_VCXI_XCSR_BL_PRTE definition
  public
  create public .

public section.

  interfaces ZIF_VCXI_XCS_NGREP .

  types:
    YT_TD600 type standard table of ZVCXI_XCS_TD600 .

  constants C_DECIS_DISCARD type ZVCXI_XCSR_DECIS value 'DIS' ##NO_TEXT.
  constants C_DECIS_SELECT type ZVCXI_XCSR_DECIS value 'SEL' ##NO_TEXT.
  constants C_IRANK_RELCO type /VCXI/VSMR_IRANK value 'RELCO' ##NO_TEXT.
  constants C_IRANK_RELPO type /VCXI/VSMR_IRANK value 'RELPO' ##NO_TEXT.
  constants C_RSRCE_USER type /VCXI/VSMR_RSRCE value 'USER' ##NO_TEXT.
  constants C_TWOCE_MANWC type ZVCXI_XCS_TWOCE value 'M' ##NO_TEXT.
  constants C_TWOCE_OUTSO type ZVCXI_XCS_TWOCE value 'O' ##NO_TEXT.
  data F_DATE type DATS read-only .
  data F_DECIS type ZVCXI_XCSR_DECIS read-only .
  data F_LIFNR_REQ type ABAP_BOOL read-only .
  data F_TECHC type ZVCXI_XCSR_TECHC read-only .
  data R_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE read-only .
  data S_MQTYI type ZVCXI_XCSP_S_MQTYI read-only .
  data S_MSRTI type /VCXI/VSM_S_MSRTI read-only .
  data S_MSSTI type /VCXI/VSM_S_MSSTI read-only .
  data S_MSTTI type /VCXI/VSM_S_MSTTI read-only .
  data T_CSPLIT type ZVCXI_XCSR_TT_CSPLIT read-only .
  data T_EVTRC type ZVCXI_XCSR_TT_EVTRC read-only .
  class-data T_TD600 type YT_TD600 read-only .

  methods CHECK
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods COMPARE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_SIMILAR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE
      !IR_MFMI type ref to DATA
      !IR_MFSI type ref to DATA
      !IT_CSPLIT type ZVCXI_XCSR_TT_CSPLIT
      !IF_DATE type DATS
      !IF_LIFNR_REQ type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONVERT_TO_MQTYO
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    changing
      !CS_CALCV type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  methods COPY
    returning
      value(RR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  class-methods DESERIALIZE
    importing
      !IF_XML type STRING
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    returning
      value(RR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
  class-methods GET_ALLOWED_ARBPL
    importing
      !IF_TWOCE type ZVCXI_XCS_TWOCE
      !IF_WERKS type WERKS_D optional
      !IT_PSTEP type /VCXI/CKX_TT_OBJECT
    returning
      value(RT_ARBPL) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_IN
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP optional
    exporting
      !ER_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    changing
      !CS_EVQTY type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods GET_RELCO
    returning
      value(RF_RELCO) type ZVCXI_XCSR_RELCO
    raising
      /VCXI/CX_CKX .
  methods GET_RELPO
    returning
      value(RF_RELPO) type ZVCXI_XCSR_RELPO
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_MFMI
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CF_MFI type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods INIT_EVALUATION
    raising
      /VCXI/CX_CKX .
  methods INIT_RELPO
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_TIME
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_EVAL_WASTE type ZVCXI_XCSR_S_EVAL_WASTE
      !IS_QTY type ZVCXI_XCSP_S_QTY
    changing
      !CT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_WASTE
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_MQTYO type ZVCXI_XCSP_S_MQTYO
    changing
      !CT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    returning
      value(RF_XML) type STRING
    raising
      /VCXI/CX_CKX .
  methods SET_CSPLIT
    importing
      !IT_CSPLIT type ZVCXI_XCSR_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods SET_DATE
    importing
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods SET_DECIS
    importing
      !IF_DECIS type ZVCXI_XCSR_DECIS
    raising
      /VCXI/CX_CKX .
  methods GET_IQCFT
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR_REQ
    importing
      !IF_LIFNR_REQ type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_MFMI
    importing
      !IR_MFMI type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods SET_MFSI
    importing
      !IR_MFSI type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods SET_RELCO
    importing
      !IF_RELCO type ZVCXI_XCSR_RELCO
    raising
      /VCXI/CX_CKX .
  methods SET_TECHC
    importing
      !IF_TECHC type ZVCXI_XCSR_TECHC
    raising
      /VCXI/CX_CKX .
  methods UPDATE_EVTRC_BY_TIME
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME
    raising
      /VCXI/CX_CKX .
  methods UPDATE_EVTRC_BY_WASTE
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE
    changing
      !CT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME optional
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_XML_RTE_PSTEP,
      IPSTP           type /VCXI/VSMC_IPSTP,
      GUID_PSTEP      type /VCXI/CKX_GUID,
      GUID_RTE_PSEQ   type /VCXI/CKX_GUID,
      BL_PSTEP_CLSNA  type STRING,
      BL_PSTEP_XML    type STRING,
    end   of YS_XML_RTE_PSTEP .
  types:
    YT_XML_RTE_PSTEP type standard table of YS_XML_RTE_PSTEP with default key .
  types:
    begin of YS_XML_RTE_ARBPL,
      GUID_ARBPL       type /VCXI/CKX_GUID,
      LCVAL            type /VCXI/VSMC_LCVAL,
      T_MSG            type /VCXI/CKXM_TT_MSG,
      T_XML_RTE_PSTEP  type YT_XML_RTE_PSTEP,
    end   of YS_XML_RTE_ARBPL .
  types:
    YT_XML_RTE_ARBPL type standard table of YS_XML_RTE_ARBPL with default key .
  types:
    begin of YS_XML_RTE_PSEQ,
      GPSEQ                 type /VCXI/CKX_GUID,
      IPSEQ                 type /VCXI/VSMC_IPSEQ,
      GUID_RTE_PSEQ         type /VCXI/CKX_GUID,
      GUID_RTE_PSEQ_PARENT  type /VCXI/CKX_GUID,
    end   of YS_XML_RTE_PSEQ .
  types:
    YT_XML_RTE_PSEQ type standard table of YS_XML_RTE_PSEQ with default key .
  types:
    begin of YS_XML_RTE_PRTE,
      DATE            type DATS,
      LIFNR_REQ       type ABAP_BOOL,
      BL_PRTE_CLSNA   type STRING,
      INFO_XML        type STRING,
      RSRCE           type /VCXI/VSMR_RSRCE,
      RSTAT           type /VCXI/VSMR_RSTAT,
      GPRTE           type /VCXI/VSMC_GPRTE,
      IPRTE           type /VCXI/VSMC_IPRTE,
      T_XML_RTE_ARBPL type YT_XML_RTE_ARBPL,
      T_XML_RTE_PSEQ  type YT_XML_RTE_PSEQ,
    end   of YS_XML_RTE_PRTE .
  types:
    begin of YS_MAP_RTE_PSEQ,
      GUID_RTE_PSEQ type        /VCXI/CKX_GUID,
      R_RTE_PSEQ    type ref to /VCXI/CL_VSMR_RTE_PSEQ,
    end   of YS_MAP_RTE_PSEQ .
  types:
    YT_MAP_RTE_PSEQ type standard table of YS_MAP_RTE_PSEQ with default key .

  class-data F_TWOCE_M_DESCR type /VCXI/CKX_DESCR .
  class-data F_TWOCE_O_DESCR type /VCXI/CKX_DESCR .
  data R_MFMI type ref to DATA .
  data R_MFSI type ref to DATA .

  methods ADD_TIME
    importing
      !IS_MSSTI type /VCXI/VSM_S_MSSTI optional
      !IS_MSRTI type /VCXI/VSM_S_MSRTI optional
      !IS_MSTTI type /VCXI/VSM_S_MSTTI optional
    raising
      /VCXI/CX_CKX .
  methods CHECK_HELPER
    importing
      !IR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods CHECK_MANU
    importing
      !IR_BL_MANU type ref to ZIF_VCXI_XCSR_BL_MANU
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods CHECK_OUTSO
    importing
      !IR_BL_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods CHECK_TWOCE
    importing
      !IF_TWOCE type ZVCXI_XCS_TWOCE
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods CONV_MQTYO_TO_MQTYI
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    changing
      !CS_CALCV type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE_INFO
    importing
      !IF_XML type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_RRVAL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_RRVAL) type /VCXI/VSMC_RRVAL
    raising
      /VCXI/CX_CKX .
  methods GET_RTE_ATYPE
    importing
      !IR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RT_RTE_ATYPE) type /VCXI/VSMR_TT_RTE_ATYPE
    raising
      /VCXI/CX_CKX .
  methods GET_FEATURE
    importing
      !IR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods GET_RTE_SMVAL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_CALCV type ZVCXI_XCS_S_CALCV
    returning
      value(RT_RTE_SMVAL) type /VCXI/VSMR_TT_RTE_SMVAL
    raising
      /VCXI/CX_CKX .
  methods IS_RTE_ARBPL_MANU
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_MANWC) type ZVCXI_XCSR_MANWC
    raising
      /VCXI/CX_CKX .
  methods IS_RTE_ARBPL_OUTSO
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_OUTSO) type ZVCXI_XCSR_OUTSO
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_TIME_CMACH
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_EVAL_WASTE type ZVCXI_XCSR_S_EVAL_WASTE
      !IS_QTY type ZVCXI_XCSP_S_QTY
    changing
      !CT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_TIME_MANU
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_EVAL_WASTE type ZVCXI_XCSR_S_EVAL_WASTE
      !IS_QTY type ZVCXI_XCSP_S_QTY
    changing
      !CT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_TIME_OUTSO
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_EVAL_WASTE type ZVCXI_XCSR_S_EVAL_WASTE
      !IS_QTY type ZVCXI_XCSP_S_QTY
    changing
      !CT_EVAL_TIME type ZVCXI_XCSR_TT_EVAL_TIME
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_WASTE_CMACH
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_MQTYO type ZVCXI_XCSP_S_MQTYO
    changing
      !CT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_WASTE_MANU
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_MQTYO type ZVCXI_XCSP_S_MQTYO
    changing
      !CT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE
    raising
      /VCXI/CX_CKX .
  methods PREP_EVAL_WASTE_OUTSO
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IS_MQTYO type ZVCXI_XCSP_S_MQTYO
    changing
      !CT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE
    raising
      /VCXI/CX_CKX .
  methods ROUND_MQTYI
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    changing
      !CS_CALCV type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE_INFO
    returning
      value(RF_XML) type STRING
    raising
      /VCXI/CX_CKX .
  methods WRITE_PROTOCOL_MQTY
    importing
      !IR_PROTOCOL type ref to /VCXI/CL_CKXM_MESSAGE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
      !IS_MQTYO type ZVCXI_XCSP_S_MQTYO
    raising
      /VCXI/CX_CKX .
  methods WRITE_PROTOCOL_TIME
    importing
      !IR_PROTOCOL type ref to /VCXI/CL_CKXM_MESSAGE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IS_MSSTI type /VCXI/VSM_S_MSSTI
      !IS_MSRTI type /VCXI/VSM_S_MSRTI
      !IS_MSTTI type /VCXI/VSM_S_MSTTI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSR_BL_PRTE definition
class ZCL_VCXI_XCSR_BL_PRTE implementation.
method ADD_TIME.

*** Calculate total Setup Time
  if IS_MSSTI is not initial.
    if ME->S_MSSTI is initial.
      move IS_MSSTI to ME->S_MSSTI.
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_MSSTI-MSSTI
                                                          IF_CALCV_UOM_1 = ME->S_MSSTI-MSSTI_UOM
                                                          IF_CALCV_2     = IS_MSSTI-MSSTI
                                                          IF_CALCV_UOM_2 = IS_MSSTI-MSSTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_MSSTI-MSSTI_UOM
                                                importing EF_CALCV       = ME->S_MSSTI-MSSTI
                                                          EF_CALCV_UOM   = ME->S_MSSTI-MSSTI_UOM ).
    endif.
  endif.

*** Calculate total Run Time
  if IS_MSRTI is not initial.
    if ME->S_MSRTI is initial.
      move IS_MSRTI to ME->S_MSRTI.
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_MSRTI-MSRTI
                                                          IF_CALCV_UOM_1 = ME->S_MSRTI-MSRTI_UOM
                                                          IF_CALCV_2     = IS_MSRTI-MSRTI
                                                          IF_CALCV_UOM_2 = IS_MSRTI-MSRTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_MSRTI-MSRTI_UOM
                                                importing EF_CALCV       = ME->S_MSRTI-MSRTI
                                                          EF_CALCV_UOM   = ME->S_MSRTI-MSRTI_UOM ).
    endif.
  endif.

*** Calculate total Teardown Time
  if IS_MSTTI is not initial.
    if ME->S_MSTTI is initial.
      move IS_MSTTI to ME->S_MSTTI.
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_MSTTI-MSTTI
                                                          IF_CALCV_UOM_1 = ME->S_MSTTI-MSTTI_UOM
                                                          IF_CALCV_2     = IS_MSTTI-MSTTI
                                                          IF_CALCV_UOM_2 = IS_MSTTI-MSTTI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_MSTTI-MSTTI_UOM
                                                importing EF_CALCV       = ME->S_MSTTI-MSTTI
                                                          EF_CALCV_UOM   = ME->S_MSTTI-MSTTI_UOM ).
    endif.
  endif.

endmethod.
method CHECK.

  data:          LF_RRVAL       type        /VCXI/VSMC_RRVAL.
  data:          LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_BL_PSTEP    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_BL_MANU     type ref to ZIF_VCXI_XCSR_BL_MANU,
                 LR_BL_OUTSO    type ref to ZIF_VCXI_XCSR_BL_OUTSO.
  field-symbols: <S_MSG>        type        /VCXI/CKXM_S_MSG.

***----------------------------------------------------------------------------
*** Check Manual Work Center, Outsourcing and Limits
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    free: LR_RTE_ARBPL->T_MSG.

    if LR_RTE_ARBPL->R_ARBPL is not bound.
***   Work Center is missing
      append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
      <S_MSG>-MSGTY = 'E'.
      <S_MSG>-MSGID = 'ZVCXI_XCSR'.
      <S_MSG>-MSGNO = '151'.
    endif.

    read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    if SY-SUBRC ne 0.
***   Work Center has no Production Steps.
      append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
      <S_MSG>-MSGTY = 'E'.
      <S_MSG>-MSGID = 'ZVCXI_XCSR'.
      <S_MSG>-MSGNO = '152'.
      continue.
    endif.

***----------------------------------------------------------------------------
*** Check Manual Work Center
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_MANU.
        if LR_BL_MANU is bound and
           LR_BL_MANU->F_MANWC eq ABAP_TRUE.
          ME->CHECK_MANU( IR_BL_MANU   = LR_BL_MANU
                          IR_RTE_ARBPL = LR_RTE_ARBPL ).
***       Check Helper
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          ME->CHECK_HELPER( IR_BL_PSTEP  = LR_BL_PSTEP
                            IR_RTE_ARBPL = LR_RTE_ARBPL ).
          continue.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_MANU.
    endtry.

***----------------------------------------------------------------------------
*** Check Outsourcing
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
        if LR_BL_OUTSO is bound and
           LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
          ME->CHECK_OUTSO( IR_BL_OUTSO   = LR_BL_OUTSO
                           IR_RTE_ARBPL  = LR_RTE_ARBPL ).
***       Check Helper
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          ME->CHECK_HELPER( IR_BL_PSTEP  = LR_BL_PSTEP
                            IR_RTE_ARBPL = LR_RTE_ARBPL ).
          continue.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_OUTSO.
    endtry.

***----------------------------------------------------------------------------
*** Check Limits
    if LR_RTE_ARBPL->R_ARBPL is bound.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
***     Initialize Limits
        LR_RTE_PSTEP->INIT_LIMIT( ).

***     Add Limits if Technical Checks are not turned off.
        if ME->F_TECHC eq ABAP_TRUE.
          try.
              move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
              check LR_BL_PSTEP is bound.
              LR_BL_PSTEP->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).
            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.
        endif.

      endloop.

***   Run Checks on Work Center Level
      LR_RTE_ARBPL->CHECK_LIMITS( IF_DATE = ME->F_DATE ).

***   Check Run Speed Rate Value
      LF_RRVAL = ME->GET_RRVAL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      LR_RTE_ARBPL->CHECK_RRVAL( IF_DATE  = ME->F_DATE
                                 IF_RRVAL = LF_RRVAL ).
    endif.

    read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    if SY-SUBRC eq 0.
      try.
***       Check Helper
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          ME->CHECK_HELPER( IR_BL_PSTEP  = LR_BL_PSTEP
                            IR_RTE_ARBPL = LR_RTE_ARBPL ).

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_PSTEP.
      endtry.
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Set Status
  if ME->R_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                              IF_MSGTY_I = ABAP_FALSE ) is initial.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID   to ME->R_RTE_PRTE->F_RSTAT.
  else.
    move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID to ME->R_RTE_PRTE->F_RSTAT.
  endif.

endmethod.
method CHECK_HELPER.

  data:          LS_HELPER      type        ZVCXI_XCSR_S_HELPER.
  field-symbols: <S_MSG>        type        /VCXI/CKXM_S_MSG.

  check IR_BL_PSTEP->T_HELPER is not initial.
  read table IR_BL_PSTEP->T_HELPER into LS_HELPER index 1.
  if LS_HELPER-HELPN is initial or
     LS_HELPER-HELPT is initial.
*** Helper Definition not completed. Please specify No. of Helpers and Text.
    append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
    <S_MSG>-MSGTY = 'E'.
    <S_MSG>-MSGID = 'ZVCXI_XCSR'.
    <S_MSG>-MSGNO = '195'.
  endif.

endmethod.
method CHECK_MANU.

  field-symbols: <S_MSG>        type        /VCXI/CKXM_S_MSG.

  if IR_BL_MANU->S_MSRS-MSRSR is initial.
*** Machine Run Speed Rate is not maintained.
    append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
    <S_MSG>-MSGTY = 'E'.
    <S_MSG>-MSGID = 'ZVCXI_XCSR'.
    <S_MSG>-MSGNO = '161'.
  endif.

  if IR_BL_MANU->S_MSRS-MSRST is initial.
*** Machine Run Speed Time is not maintained.
    append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
    <S_MSG>-MSGTY = 'E'.
    <S_MSG>-MSGID = 'ZVCXI_XCSR'.
    <S_MSG>-MSGNO = '162'.
  endif.

*** Check Workcenter Type
  ME->CHECK_TWOCE( IF_TWOCE     = C_TWOCE_MANWC
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

endmethod.
method CHECK_OUTSO.

  data:          LF_WERKS    type        WERKS_D.
  data:          LS_PSCALE   type        ZVCXI_XCSR_S_PSCALE.
  data:          LR_CX_CKX   type ref to /VCXI/CX_CKX.
  field-symbols: <S_MSG>     type        /VCXI/CKXM_S_MSG.

***----------------------------------------------------------------------------
*** Check Price
  if IR_BL_OUTSO->T_PSCALE is initial.
    if IR_BL_OUTSO->S_PRICE-PRICE is initial.
***   Price is not maintained.
      append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
      <S_MSG>-MSGTY = 'E'.
      <S_MSG>-MSGID = 'ZVCXI_XCSR'.
      <S_MSG>-MSGNO = '171'.
    endif.

    if IR_BL_OUTSO->S_PRICP-PRICP is initial.
***   Price Per is not maintained.
      append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
      <S_MSG>-MSGTY = 'E'.
      <S_MSG>-MSGID = 'ZVCXI_XCSR'.
      <S_MSG>-MSGNO = '172'.
    endif.
  else.
    loop at IR_BL_OUTSO->T_PSCALE into LS_PSCALE.
      if LS_PSCALE-PRICE is initial.
***     Price is not maintained.
        append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        <S_MSG>-MSGTY = 'E'.
        <S_MSG>-MSGID = 'ZVCXI_XCSR'.
        <S_MSG>-MSGNO = '171'.
      endif.

      if LS_PSCALE-PRICP is initial.
***     Price Per is not maintained.
        append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        <S_MSG>-MSGTY = 'E'.
        <S_MSG>-MSGID = 'ZVCXI_XCSR'.
        <S_MSG>-MSGNO = '172'.
      endif.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Check Workcenter Type
  ME->CHECK_TWOCE( IF_TWOCE     = C_TWOCE_OUTSO
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

***----------------------------------------------------------------------------
*** Check Vendor
  if ( ME->F_LIFNR_REQ eq ABAP_TRUE and
       IR_BL_OUTSO->F_LIFNR is not initial )
  or   IR_BL_OUTSO->F_LIFNR is not initial.
    try.
        if IR_RTE_ARBPL is bound and
           IR_RTE_ARBPL->R_ARBPL is bound and
           IR_RTE_ARBPL->R_ARBPL->R_WERKS is bound.
          LF_WERKS = IR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        endif.
        ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = IR_BL_OUTSO->F_LIFNR
                                           IF_WERKS = LF_WERKS ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
        <S_MSG>-MSGTY = LR_CX_CKX->F_MSGTY.
        <S_MSG>-MSGID = LR_CX_CKX->F_MSGID.
        <S_MSG>-MSGNO = LR_CX_CKX->F_MSGNO.
        <S_MSG>-MSGV1 = LR_CX_CKX->F_MSGV1.
        <S_MSG>-MSGV2 = LR_CX_CKX->F_MSGV2.
        <S_MSG>-MSGV3 = LR_CX_CKX->F_MSGV3.
        <S_MSG>-MSGV4 = LR_CX_CKX->F_MSGV4.
    endtry.

  elseif ME->F_LIFNR_REQ eq ABAP_TRUE and
         IR_BL_OUTSO->F_LIFNR is initial.
*** Vendor is not maintained.
    append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
    <S_MSG>-MSGTY = 'E'.
    <S_MSG>-MSGID = 'ZVCXI_XCSR'.
    <S_MSG>-MSGNO = '173'.

  endif.

endmethod.
method CHECK_TWOCE.

  data:          LF_WERKS           type        WERKS_D,
                 LF_IPSTP           type        /VCXI/VSMC_IPSTP,
                 LF_MSGV1           type        SYMSGV.
  data:          LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP.
  field-symbols: <S_MSG>            type        /VCXI/CKXM_S_MSG.

  check IR_RTE_ARBPL->R_ARBPL is bound.

*** Get description of Workcenter type
  case IF_TWOCE.
    when C_TWOCE_OUTSO.
      move F_TWOCE_O_DESCR to LF_MSGV1.
    when C_TWOCE_MANWC.
      move F_TWOCE_M_DESCR to LF_MSGV1.
  endcase.

***--------------------------------------------------------------------------
*** Check Workcenter Type for each Production step
  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.

*** Get Plant
    move IR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_WERKS.


*** Get Id of Production Step
    check LR_RTE_PSTEP->R_PSTEP is bound.
    clear: LF_IPSTP.
    move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.

*** Check Pstep, Workcentr, Plant and Workcenter Type Combination is valid
    read table T_TD600 with key WERKS = LF_WERKS
                                ARBPL = IR_RTE_ARBPL->R_ARBPL->F_ARBPL
                                IPSTP = LF_IPSTP
                                TWOCE = IF_TWOCE
                       transporting no fields.

    if SY-SUBRC ne 0.
***   Workcenter Type &1 not valid for Production Step.
      append initial line to IR_RTE_ARBPL->T_MSG assigning <S_MSG>.
      <S_MSG>-GUIDM = LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      <S_MSG>-MSGTY = 'E'.
      <S_MSG>-MSGID = 'ZVCXI_XCSR'.
      <S_MSG>-MSGNO = '191'.
      <S_MSG>-MSGV1 = LF_MSGV1.
    endif.
  endloop.

endmethod.
method CLASS_CONSTRUCTOR.

  data: LS_DD07V type          DD07V.
  data: LT_DD07V type table of DD07V.

*** Load all Workcenter assignments
  select *
         from ZVCXI_XCS_TD600
         into table T_TD600.


*** Get description of Outsourcing/Manual Workcenter Type
  call function 'DDIF_DOMA_GET'
    exporting
      NAME          = 'ZVCXI_XCS_TWOCE'
      LANGU         = SY-LANGU
    tables
      DD07V_TAB     = LT_DD07V
    exceptions
      ILLEGAL_INPUT = 1
      others        = 2.

  check SY-SUBRC eq 0.

  loop at LT_DD07V into LS_DD07V.
    case LS_DD07V-DOMVALUE_L.
      when C_TWOCE_OUTSO.
        move LS_DD07V-DDTEXT to F_TWOCE_O_DESCR.
      when C_TWOCE_MANWC.
        move LS_DD07V-DDTEXT to F_TWOCE_M_DESCR.
    endcase.
  endloop.

endmethod.
method COMPARE.

*** Ignore: Route Source, Decision, Technical Checks (and thereby Status)

  data:          LR_RTE_ARBPL_ME     type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_ARBPL_OTHER  type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP_ME     type ref to   /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_RTE_PSTEP_OTHER  type ref to   /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_BL_PSTEP_ME      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_BL_PSTEP_OTHER   type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_DATADESCR        type ref to   CL_ABAP_DATADESCR.
  field-symbols: <T_MFMI_ME>         type standard table,
                 <T_MFMI_OTHER>      type standard table,
                 <T_MFSI_ME>         type standard table,
                 <T_MFSI_OTHER>      type standard table.

  check IR_BL_PRTE is bound.

***------------------------------------------------------------------------------------------------
*** Check same Material Flow Material In
  check ( ME->R_MFMI is     bound and IR_BL_PRTE->R_MFMI is     bound ) or
        ( ME->R_MFMI is not bound and IR_BL_PRTE->R_MFMI is not bound ).

  if ME->R_MFMI is bound and IR_BL_PRTE->R_MFMI is bound.
*** Compare Data Types
    LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_MFMI ).
    check LR_DATADESCR->APPLIES_TO_DATA_REF( P_DATA = IR_BL_PRTE->R_MFMI ) eq ABAP_TRUE.

*** Compare Content
    assign ME->R_MFMI->*         to <T_MFMI_ME>.
    assign IR_BL_PRTE->R_MFMI->* to <T_MFMI_OTHER>.
    check <T_MFMI_ME> eq <T_MFMI_OTHER>.
  endif.

***------------------------------------------------------------------------------------------------
*** Check same Material Flow SFG In
  check ( ME->R_MFSI is     bound and IR_BL_PRTE->R_MFSI is     bound ) or
        ( ME->R_MFSI is not bound and IR_BL_PRTE->R_MFSI is not bound ).

  if ME->R_MFSI is bound and IR_BL_PRTE->R_MFSI is bound.
*** Compare Data Types
    LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_MFSI ).
    check LR_DATADESCR->APPLIES_TO_DATA_REF( P_DATA = IR_BL_PRTE->R_MFSI ) eq ABAP_TRUE.

*** Compare Content
    assign ME->R_MFSI->*         to <T_MFSI_ME>.
    assign IR_BL_PRTE->R_MFSI->* to <T_MFSI_OTHER>.
    check <T_MFSI_ME> eq <T_MFSI_OTHER>.
  endif.

***------------------------------------------------------------------------------------------------
*** Check same Cost Split
  check ME->T_CSPLIT eq IR_BL_PRTE->T_CSPLIT.

***------------------------------------------------------------------------------------------------
*** Same amount of Work Center
  check lines( ME->R_RTE_PRTE->T_RTE_ARBPL ) eq lines( IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ).

*** Start positiv
  move ABAP_TRUE to RF_SIMILAR.

***------------------------------------------------------------------------------------------------
*** Look at Work Center
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL_ME.
    read table IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into  LR_RTE_ARBPL_OTHER
                                                   index SY-TABIX.
    if SY-SUBRC ne 0.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Compare Work Center
    if LR_RTE_ARBPL_ME->R_ARBPL ne LR_RTE_ARBPL_OTHER->R_ARBPL.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Same amount of Production Steps
    if lines( LR_RTE_ARBPL_ME->T_RTE_PSTEP ) ne lines( LR_RTE_ARBPL_OTHER->T_RTE_PSTEP ).
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

***------------------------------------------------------------------------------------------------
*** Look at Production Steps
    loop at LR_RTE_ARBPL_ME->T_RTE_PSTEP into LR_RTE_PSTEP_ME.
      read table LR_RTE_ARBPL_OTHER->T_RTE_PSTEP into LR_RTE_PSTEP_OTHER
                                                 index SY-TABIX.
      if SY-SUBRC ne 0.
        move ABAP_FALSE to RF_SIMILAR.
        exit.
      endif.

***   Compare Production Steps
      if LR_RTE_PSTEP_ME->R_PSTEP ne LR_RTE_PSTEP_OTHER->R_PSTEP.
        move ABAP_FALSE to RF_SIMILAR.
        exit.
      endif.

***------------------------------------------------------------------------------------------------
***   Compare BL PStep
      try.
          move LR_RTE_PSTEP_ME->R_BLOBJ    ?to LR_BL_PSTEP_ME.
          move LR_RTE_PSTEP_OTHER->R_BLOBJ ?to LR_BL_PSTEP_OTHER.

          check LR_BL_PSTEP_ME    is bound and
                LR_BL_PSTEP_OTHER is bound.

          if LR_BL_PSTEP_ME->COMPARE( IR_BL_PSTEP = LR_BL_PSTEP_OTHER ) ne ABAP_TRUE.
            move ABAP_FALSE to RF_SIMILAR.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          move ABAP_FALSE to RF_SIMILAR.
          exit.
      endtry.

    endloop.
  endloop.

endmethod.
method CONSTRUCTOR.

  move IR_RTE_PRTE  to ME->R_RTE_PRTE.
  move IF_DATE      to ME->F_DATE.
  move IR_MFMI      to ME->R_MFMI.
  move IR_MFSI      to ME->R_MFSI.
  move IT_CSPLIT    to ME->T_CSPLIT.
  move IF_LIFNR_REQ to ME->F_LIFNR_REQ.

*** Initialize Relevancy Points
  ME->INIT_RELPO( ).

endmethod.
method CONV_MQTYO_TO_MQTYI.
endmethod.
method CONVERT_TO_MQTYO.
endmethod.
method COPY.

  data:          LF_CLSNA            type          STRING.
  data: LR_RTE_PRTE_NEW  type ref to   /VCXI/CL_VSMR_RTE_PRTE,
        LR_RTE_ARBPL_ME  type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_ARBPL_NEW type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSTEP_ME  type ref to   /VCXI/CL_VSMR_RTE_PSTEP,
        LR_RTE_PSTEP_NEW type ref to   /VCXI/CL_VSMR_RTE_PSTEP,
        LR_RTE_PSEQ_NEW  type ref to   /VCXI/CL_VSMR_RTE_PSEQ,
        LR_BL_PSTEP_ME   type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
        LR_MFMI_NEW      type ref to   DATA,
        LR_MFSI_NEW      type ref to   DATA,
        LR_CLASSDESCR    type ref to   CL_ABAP_CLASSDESCR.
  field-symbols: <T_MFMI_ME>  type standard table,
                 <T_MFMI_NEW> type standard table,
                 <T_MFSI_ME>  type standard table,
                 <T_MFSI_NEW> type standard table.

***--------------------------------------------------------------------------------------
*** Create new Route
  create object LR_RTE_PRTE_NEW.

*** Copy Work Center
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL_ME.
*** Create new Work Center
    create object LR_RTE_ARBPL_NEW
      exporting
        IR_ARBPL = LR_RTE_ARBPL_ME->R_ARBPL
        IF_LCVAL = LR_RTE_ARBPL_ME->F_LCVAL.
    append LR_RTE_ARBPL_NEW to LR_RTE_PRTE_NEW->T_RTE_ARBPL.

*** Copy RTE Production Steps
    loop at LR_RTE_ARBPL_ME->T_RTE_PSTEP into LR_RTE_PSTEP_ME.
      if LR_RTE_PSTEP_ME->R_RTE_PSEQ is bound.
        create object LR_RTE_PSEQ_NEW
          exporting
            IR_PSEQ     = LR_RTE_PSTEP_ME->R_RTE_PSEQ->R_PSEQ
            IR_RTE_PSEQ = LR_RTE_PSTEP_ME->R_RTE_PSEQ->R_RTE_PSEQ.
        move LR_RTE_PSEQ_NEW->R_RTE_PSTEP to LR_RTE_PSTEP_NEW.
      else.
        create object LR_RTE_PSTEP_NEW
          exporting
            IR_PSTEP = LR_RTE_PSTEP_ME->R_PSTEP.
      endif.

***   Add Production Step
      append LR_RTE_PSTEP_NEW to LR_RTE_ARBPL_NEW->T_RTE_PSTEP.

***--------------------------------------------------------------------------------------
***   Copy Link Context Value
      move LR_RTE_PSTEP_ME->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

***   Copy BL PStep
      try.
          move LR_RTE_PSTEP_ME->R_BLOBJ ?to LR_BL_PSTEP_ME.
          if LR_BL_PSTEP_ME is bound.
            move LR_BL_PSTEP_ME->COPY( ) to LR_RTE_PSTEP_NEW->R_BLOBJ.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.
  endloop.

*** Copy MFMI
  if ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI_ME>.
    create data LR_MFMI_NEW like <T_MFMI_ME>.
    assign LR_MFMI_NEW->* to <T_MFMI_NEW>.
    move <T_MFMI_ME> to <T_MFMI_NEW>.
  endif.

*** Copy MFSI
  if ME->R_MFSI is bound.
    assign ME->R_MFSI->* to <T_MFSI_ME>.
    create data LR_MFSI_NEW like <T_MFSI_ME>.
    assign LR_MFSI_NEW->* to <T_MFSI_NEW>.
    move <T_MFSI_ME> to <T_MFSI_NEW>.
  endif.

***--------------------------------------------------------------------------------------
*** Create new Instance of same Subclass
  LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ).
  move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to LF_CLSNA.

  create object RR_BL_PRTE
    type
      (LF_CLSNA)
    exporting
      IR_RTE_PRTE  = LR_RTE_PRTE_NEW
      IR_MFMI      = LR_MFMI_NEW
      IR_MFSI      = LR_MFSI_NEW
      IT_CSPLIT    = ME->T_CSPLIT
      IF_DATE      = ME->F_DATE
      IF_LIFNR_REQ = ME->F_LIFNR_REQ.

*** Copy Data
  move ME->F_DECIS  to RR_BL_PRTE->F_DECIS.
  move ME->F_TECHC  to RR_BL_PRTE->F_TECHC.

endmethod.
method DESERIALIZE.

  data:          LS_XML_RTE_PRTE              type        YS_XML_RTE_PRTE,
                 LS_XML_RTE_PSEQ              type        YS_XML_RTE_PSEQ,
                 LS_XML_RTE_ARBPL             type        YS_XML_RTE_ARBPL,
                 LS_XML_RTE_PSTEP             type        YS_XML_RTE_PSTEP.
  data:          LT_MAP_RTE_PSEQ              type        YT_MAP_RTE_PSEQ,
                 LT_CSPLIT                    type        ZVCXI_XCSR_TT_CSPLIT.
  data:          LR_RTE_PRTE                  type ref to /VCXI/CL_VSMR_RTE_PRTE,
                 LR_PSEQ                      type ref to /VCXI/CL_VSMC_PSEQ,
                 LR_RTE_PSEQ_PARENT           type ref to /VCXI/CL_VSMR_RTE_PSEQ,
                 LR_RTE_PSEQ                  type ref to /VCXI/CL_VSMR_RTE_PSEQ,
                 LR_PSTEP                     type ref to /VCXI/CL_VSMC_PSTEP,
                 LR_RTE_PSTEP                 type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_ARBPL                     type ref to /VCXI/CL_VSMC_ARBPL,
                 LR_RTE_ARBPL                 type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_BL_PSTEP                  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_MFMI                      type ref to DATA,
                 LR_MFSI                      type ref to DATA,
                 LR_CX_SY_CREATE_OBJECT_ERROR type ref to CX_SY_CREATE_OBJECT_ERROR.
  field-symbols: <S_MAP_RTE_PSEQ>             type        YS_MAP_RTE_PSEQ.

***------------------------------------------------------------------------------------------------
*** Open XML
  call transformation ID
       source xml IF_XML
       result RTE_PRTE = LS_XML_RTE_PRTE.

  check LS_XML_RTE_PRTE-BL_PRTE_CLSNA is not initial.

***------------------------------------------------------------------------------------------------
*** Create Production Route
  create object LR_RTE_PRTE.

  move LS_XML_RTE_PRTE-RSRCE to LR_RTE_PRTE->F_RSRCE.
  move LS_XML_RTE_PRTE-RSTAT to LR_RTE_PRTE->F_RSTAT.

***------------------------------------------------------------------------------------------------
*** Production Sequences
  loop at LS_XML_RTE_PRTE-T_XML_RTE_PSEQ into LS_XML_RTE_PSEQ.
*** Get Sequence
    LR_PSEQ ?= /VCXI/CL_VSMC_PSEQ=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LS_XML_RTE_PSEQ-GPSEQ ).

*** Get Parent
    if LS_XML_RTE_PSEQ-GUID_RTE_PSEQ_PARENT is not initial.
      read table LT_MAP_RTE_PSEQ assigning <S_MAP_RTE_PSEQ>
                                 with key GUID_RTE_PSEQ = LS_XML_RTE_PSEQ-GUID_RTE_PSEQ_PARENT.
      move <S_MAP_RTE_PSEQ>-R_RTE_PSEQ to LR_RTE_PSEQ_PARENT.
    else.
      clear LR_RTE_PSEQ_PARENT.
    endif.

*** Create Routing Production Sequence
    create object LR_RTE_PSEQ
      exporting
        IR_PSEQ     = LR_PSEQ
        IR_RTE_PSEQ = LR_RTE_PSEQ_PARENT.

    append initial line to LT_MAP_RTE_PSEQ assigning <S_MAP_RTE_PSEQ>.
    move LS_XML_RTE_PSEQ-GUID_RTE_PSEQ to <S_MAP_RTE_PSEQ>-GUID_RTE_PSEQ.
    move LR_RTE_PSEQ                   to <S_MAP_RTE_PSEQ>-R_RTE_PSEQ.
  endloop.

***------------------------------------------------------------------------------------------------
*** Work Center
  loop at LS_XML_RTE_PRTE-T_XML_RTE_ARBPL into LS_XML_RTE_ARBPL.

    LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LS_XML_RTE_ARBPL-GUID_ARBPL ).

    create object LR_RTE_ARBPL
      exporting
        IR_ARBPL = LR_ARBPL
        IF_LCVAL = LS_XML_RTE_ARBPL-LCVAL.

    move LS_XML_RTE_ARBPL-T_MSG to LR_RTE_ARBPL->T_MSG.
    append LR_RTE_ARBPL to LR_RTE_PRTE->T_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Production Steps
    loop at LS_XML_RTE_ARBPL-T_XML_RTE_PSTEP into LS_XML_RTE_PSTEP.
      if LS_XML_RTE_PSTEP-GUID_RTE_PSEQ is not initial.
***     Read Production Step by Sequence Mapping
        read table LT_MAP_RTE_PSEQ assigning <S_MAP_RTE_PSEQ>
                                   with key GUID_RTE_PSEQ = LS_XML_RTE_PSTEP-GUID_RTE_PSEQ.
        check SY-SUBRC eq 0.
        move <S_MAP_RTE_PSEQ>-R_RTE_PSEQ->R_RTE_PSTEP to LR_RTE_PSTEP.
      else.
***     Get Production Step
        LR_PSTEP ?= /VCXI/CL_VSMC_PSTEP=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LS_XML_RTE_PSTEP-GUID_PSTEP ).
***     Get Routing Production Step without Sequence
        create object LR_RTE_PSTEP
          exporting
            IR_PSTEP = LR_PSTEP.
      endif.
      append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.

***   Define Link Context Value
      move LS_XML_RTE_ARBPL-LCVAL to LR_RTE_PSTEP->F_LCVAL.

***--------------------------------------------------------------------------------------
***   Deserialize BL Production Steps
      if LS_XML_RTE_PSTEP-BL_PSTEP_CLSNA is not initial.
        if LR_RTE_PSTEP->R_PSTEP is bound.
          move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_XML_RTE_PSTEP-IPSTP.
        endif.
        try.
            create object LR_BL_PSTEP
              type
                (LS_XML_RTE_PSTEP-BL_PSTEP_CLSNA)
              exporting
                IF_IPSTP                          = LS_XML_RTE_PSTEP-IPSTP
                IF_DATE                           = LS_XML_RTE_PRTE-DATE
                IR_APPDATA                        = IR_APPDATA.
          catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
        endtry.

        LR_BL_PSTEP->DESERIALIZE( IF_XML = LS_XML_RTE_PSTEP-BL_PSTEP_XML ).
        move LR_BL_PSTEP to LR_RTE_PSTEP->R_BLOBJ.
      endif.
    endloop.
  endloop.

***------------------------------------------------------------------------------------------------
*** Create BL Production Route
  try.
      create object RR_BL_PRTE
        type
          (LS_XML_RTE_PRTE-BL_PRTE_CLSNA)
        exporting
          IR_RTE_PRTE                     = LR_RTE_PRTE
          IR_MFMI                         = LR_MFMI
          IR_MFSI                         = LR_MFSI
          IT_CSPLIT                       = LT_CSPLIT
          IF_DATE                         = LS_XML_RTE_PRTE-DATE
          IF_LIFNR_REQ                    = LS_XML_RTE_PRTE-LIFNR_REQ.
    catch CX_SY_CREATE_OBJECT_ERROR into LR_CX_SY_CREATE_OBJECT_ERROR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
  endtry.

*** Deserialize from XML
  RR_BL_PRTE->DESERIALIZE_INFO( IF_XML = LS_XML_RTE_PRTE-INFO_XML ).

*** Perform Checks
  RR_BL_PRTE->CHECK( ).

endmethod.
method DESERIALIZE_INFO.

  data:          LF_MFMI_KIND               type          ABAP_TYPECATEGORY,
                 LF_MFMI_RELNAME            type          STRING,
                 LF_MFSI_KIND               type          ABAP_TYPECATEGORY,
                 LF_MFSI_RELNAME            type          STRING.
  data:          LR_CX_SY_CREATE_DATA_ERROR type ref to   CX_SY_CREATE_DATA_ERROR.
  field-symbols: <T_MFMI>                   type standard table,
                 <T_MFSI>                   type standard table.


  check IF_XML is not initial.

*** Open XML
  call transformation ID
       source xml IF_XML
       result TECHC        = ME->F_TECHC
              DECIS        = ME->F_DECIS
              MFMI_KIND    = LF_MFMI_KIND
              MFMI_RELNAME = LF_MFMI_RELNAME
              MFSI_KIND    = LF_MFSI_KIND
              MFSI_RELNAME = LF_MFSI_RELNAME
              T_CSPLIT     = ME->T_CSPLIT.


***------------------------------------------------------------------------------------------------
*** Deserialize MFMI
  if LF_MFMI_RELNAME is not initial.
    try.
        if LF_MFMI_KIND eq CL_ABAP_DATADESCR=>KIND_TABLE.
          create data ME->R_MFMI type table of (LF_MFMI_RELNAME).
        else.
          create data ME->R_MFMI type (LF_MFMI_RELNAME).
        endif.
      catch CX_SY_CREATE_DATA_ERROR into LR_CX_SY_CREATE_DATA_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_DATA_ERROR ).
    endtry.

    assign ME->R_MFMI->* to <T_MFMI>.

*** Open XML
    call transformation ID
         source xml IF_XML
         result T_MFMI = <T_MFMI>.
  endif.

***------------------------------------------------------------------------------------------------
*** Deserialize MFSI
  if LF_MFSI_RELNAME is not initial.
    try.
        if LF_MFSI_KIND eq CL_ABAP_DATADESCR=>KIND_TABLE.
          create data ME->R_MFSI type table of (LF_MFSI_RELNAME).
        else.
          create data ME->R_MFSI type (LF_MFSI_RELNAME).
        endif.
      catch CX_SY_CREATE_DATA_ERROR into LR_CX_SY_CREATE_DATA_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_DATA_ERROR ).
    endtry.

    assign ME->R_MFSI->* to <T_MFSI>.

*** Open XML
    call transformation ID
         source xml IF_XML
         result T_MFSI = <T_MFSI>.
  endif.

endmethod.
method GET_ALLOWED_ARBPL.

  data:          LF_GUID          type          /VCXI/CKX_GUID,
                 LF_IPSTP         type          /VCXI/VSMC_IPSTP.
  data:          LT_TD600_TMP     type          YT_TD600.
  data:          LS_TD600         type          ZVCXI_XCS_TD600.
  data:          LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL,
                 LR_OBJECT        type ref to   /VCXI/IF_CKX_OBJECT.


*** Filter by Plant and Worcenter Type
  move ZCL_VCXI_XCSR_BL_PRTE=>T_TD600 to LT_TD600_TMP.
  if IF_WERKS is supplied.
    delete LT_TD600_TMP where WERKS ne IF_WERKS
                         or   TWOCE ne IF_TWOCE.
  else.
    delete LT_TD600_TMP where TWOCE ne IF_TWOCE.
  endif.

*** Filter Workcenter by PStep
  if IT_PSTEP is not initial.
    loop at LT_TD600_TMP into LS_TD600.
*** Check against all Psteps
      loop at IT_PSTEP into LR_OBJECT.
        move LR_OBJECT->GET_ID( ) to LF_IPSTP.
***     Check if Workcenter support Production Step
        read table LT_TD600_TMP with key ARBPL = LS_TD600-ARBPL
                                         IPSTP = LF_IPSTP
                                transporting no fields.
        check SY-SUBRC ne 0.
        delete LT_TD600_TMP where ARBPL eq LS_TD600-ARBPL.
        continue.
      endloop.
    endloop.
  endif.

*** Get all allowed Workcenter
  loop at LT_TD600_TMP into LS_TD600.
    LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_TD600-WERKS
                                                 IF_ARBPL = LS_TD600-ARBPL ).
    LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

    if LR_ARBPL is bound.
      collect LR_ARBPL into RT_ARBPL.
    endif.
  endloop.

endmethod.
  method GET_EVQTY_IN.

    data: LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_MQTYO type ZVCXI_XCSP_S_MQTYO,
          LS_MQTYI type ZVCXI_XCSP_S_MQTYI.
    data: LT_EVAL_WASTE type ZVCXI_XCSR_TT_EVAL_WASTE.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL.


*** Initialize Evaluation
    ME->INIT_EVALUATION( ).

***----------------------------------------------------------------------------
*** Prepare Backwards Calculation
    data(LF_LINES) = LINES( ME->R_RTE_PRTE->T_RTE_ARBPL ).
    do LF_LINES times.
      try.
          data(LF_INDEX) = SY-INDEX - 1. "Offset from last Operation

***       Get Work Center based on offset from last operation (backward processing)
          LR_RTE_ARBPL = value #( ME->R_RTE_PRTE->T_RTE_ARBPL[ LF_LINES - LF_INDEX ] optional ).
          check LR_RTE_ARBPL is bound.

***       Convert to for last Operation
          if LF_INDEX = 0.
            LS_CALCV = value #( CALCV     = CS_EVQTY-EVQTY
                                CALCV_UOM = CS_EVQTY-EVQTY_UOM ).
            ME->CONVERT_TO_MQTYO( exporting IR_RTE_ARBPL = LR_RTE_ARBPL
                                  changing  CS_CALCV     = LS_CALCV ).
          else.
***         Get Quantity of previous Operation
            LS_CALCV = corresponding #( ME->T_EVTRC[ 1 ]-S_MQTYI mapping CALCV     = MQTYI
                                                                         CALCV_UOM = MQTYI_UOM ).
          endif.

***       Prepare Waste Determination (Add entry to Evaluation Trace)
          free: LT_EVAL_WASTE.
          ME->PREP_EVAL_WASTE( exporting IR_RTE_ARBPL  = LR_RTE_ARBPL
                                         IS_MQTYO      = value #( MQTYO     = LS_CALCV-CALCV
                                                                  MQTYO_UOM = LS_CALCV-CALCV_UOM )
                                changing CT_EVAL_WASTE = LT_EVAL_WASTE ).

***       Evaluate/Determine Waste
          IR_BL_RTESPV->EVALUATE_WASTE( changing CT_EVAL_WASTE = LT_EVAL_WASTE ).

***       Update Trace Info based on Work Center and prepare Time Calculation
          ME->UPDATE_EVTRC_BY_WASTE( IR_RTE_ARBPL  = LR_RTE_ARBPL
                                     IT_EVAL_WASTE = LT_EVAL_WASTE ).

***       Stop Evaluation on given Production Step
          if IR_BL_PSTEP is bound and
             LINE_EXISTS( LR_RTE_ARBPL->T_RTE_PSTEP[ TABLE_LINE->R_BLOBJ = IR_BL_PSTEP ] ).
            exit.
          endif.

***       Go to previous workcenter
          subtract 1 from LF_INDEX.

        catch /VCXI/CX_CKX.
          clear ME->T_EVTRC.
          exit.
      endtry.
    enddo.

***----------------------------------------------------------------------------
*** Get Quantity of first Operation
    if LINE_EXISTS( ME->T_EVTRC[ 1 ] ).
      CS_EVQTY = corresponding #( ME->T_EVTRC[ 1 ]-S_MQTYI mapping EVQTY     = MQTYI
                                                                   EVQTY_UOM = MQTYI_UOM ).
    endif.

*** Return Work Center, which the Quantity relates to
    ER_RTE_ARBPL = LR_RTE_ARBPL.

  endmethod.
  method GET_FEATURE.

*** Is IQ.catalyst in use for this machine
    check IR_RTE_CMACH is bound and
          IR_RTE_CMACH->R_MGRPV_SPEED is bound and
          ( IR_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSST eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_IQC or
            IR_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSRS eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_IQC or
            IR_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSTT eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_IQC or
            IR_RTE_CMACH->R_MGRPV_SPEED->S_MDS-MDSWA eq /VCXI/CL_VSMC_MGRPV_SPEED=>C_MDS_IQC ).

*** Get stored IQ.catalyst Features of Machine
    RT_FEATURE = ME->GET_IQCFT( IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Adjust Features based on Production Steps
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into data(LR_RTE_PSTEP)
                                     where TABLE_LINE->R_BLOBJ is instance of ZCL_VCXI_XCSR_BL_PSTEP.
      cast ZCL_VCXI_XCSR_BL_PSTEP( LR_RTE_PSTEP->R_BLOBJ )->ADJ_FEATURE( changing CT_FEATURE = RT_FEATURE ).
    endloop.

  endmethod.
  method GET_IQCFT.
  endmethod.
method GET_RELCO.

  data:  LS_RTE_RANK    type /VCXI/VSMR_S_RTE_RANK.

  read table ME->R_RTE_PRTE->T_RTE_RANK into LS_RTE_RANK
                                        with key IRANK = C_IRANK_RELCO.
  if SY-SUBRc eq 0.
    move LS_RTE_RANK-RANKV to RF_RELCO.
  endif.

endmethod.
method GET_RELPO.

  data:  LS_RTE_RANK    type /VCXI/VSMR_S_RTE_RANK.

  read table ME->R_RTE_PRTE->T_RTE_RANK into LS_RTE_RANK
                                        with key IRANK = C_IRANK_RELPO.
  if SY-SUBRc eq 0.
    move LS_RTE_RANK-RANKV to RF_RELPO.
  endif.

endmethod.
method GET_RRVAL.
endmethod.
  method GET_RTE_ATYPE.

    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP.


    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
***   Initialize Aspects
      LR_RTE_PSTEP->INIT_ASPECT( ).

      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          if LR_BL_PSTEP is bound.
***         Add Aspects to Routing Step
            LR_BL_PSTEP->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Get Add-ons
    RT_RTE_ATYPE = IR_RTE_ARBPL->GET_RTE_ATYPE_BY_RTE_PSTEP( ).

  endmethod.
method GET_RTE_SMVAL.
endmethod.
method GET_SPVRE_MFMI.

  data:          LS_MFMI        type          ZVCXI_XCSR_S_MFMI,
                 LS_LEOKY       type          /VCXI/VKSR_S_LEOKY,
                 LS_PARAM       type          /VCXI/VKSR_S_PARAM.
  data:          LR_SPVCE       type ref to   /VCXI/CL_VKSC_SPVCE,
                 LR_SPVRE_MFMI  type ref to   /VCXI/CL_VKSR_SPVRE.
  field-symbols: <T_MFMI>       type standard table,
                 <S_MFMI>       type          any.

  check ME->R_MFMI is bound.
  assign ME->R_MFMI->* to <T_MFMI>.

  loop at <T_MFMI> assigning <S_MFMI>.
    move-corresponding <S_MFMI> to LS_MFMI.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMI
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMI to CT_SPVRE.
    move   ABAP_TRUE     to CF_MFI.

*** Set In Use
    LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Leading Object
    move LS_MFMI-MATNR                                     to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
    LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Set Component Scrap
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_KAUSF              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI-KAUSF                                     to LS_PARAM-ATFLV.
    move LS_MFMI-KAUSF_UOM                                 to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Setup Percentage for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI-MFISP                                     to LS_PARAM-ATFLV.
    move LS_MFMI-MFISP_UOM                                 to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Consumption Factor for Material Flow In
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI-MFICF                                     to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Costing Relevant
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_SANKA              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI-SANKA                                     to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Text
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI-TEXT                                      to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Vendor Number
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
    move LS_MFMI-LIFNR                                     to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICE              to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
    move LS_MFMI-PRICE                                     to LS_PARAM-ATFLV.
    move LS_MFMI-PRICE_CURR                                to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

    BREAK CHECK_PRICE_UNIT_XCSR_MWALTZ.

**** Set Price Unit
*    clear LS_PARAM.
*    move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICP              to LS_PARAM-PARID.
*    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
*    move LS_MFMI-PRICP                                     to LS_PARAM-ATFLV.
*    move LS_MFMI-PRICP_UOM                                 to LS_PARAM-UNIT.
*    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
*    LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Price Scale Manager
    IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                            IT_PSCALE       = LS_MFMI-T_PSCALE
                                  changing  CT_SPVRE        = CT_SPVRE ).

  endloop.

endmethod.
  method INIT_EVALUATION.

*** Reset Evaluation Values
    clear: ME->S_MQTYI.
    clear: ME->S_MSSTI,
           ME->S_MSRTI,
           ME->S_MSTTI.

    free: ME->T_EVTRC.

  endmethod.
method INIT_RELPO.

  data:  LF_RELPO       type        /VCXI/VSMR_RANKV.

***----------------------------------------------------------------------------
*** Calculate Relevancy Points
  if ME->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
    LF_RELPO = ZCL_VCXI_XCSR_CUST_RELCO=>GET_RELPO_BY_BL_PRTE( IR_BL_PRTE = ME ).
  else.
    LF_RELPO = 0.
  endif.

***----------------------------------------------------------------------------
*** Set Relevancy Points as Ranking
  ME->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_RELPO
                                IF_RANKV = LF_RELPO ).

endmethod.
method IS_RTE_ARBPL_MANU.

  data:  LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_MANU     type ref to ZIF_VCXI_XCSR_BL_MANU.

***----------------------------------------------------------------------------
*** Get first Production Step
  read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
  check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Check Manual Work Center
  try.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_MANU.
      if LR_BL_MANU is bound and
         LR_BL_MANU->F_MANWC eq ABAP_TRUE.
        move ABAP_TRUE to RF_MANWC.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_BL_MANU.
  endtry.

endmethod.
method IS_RTE_ARBPL_OUTSO.

  data:  LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_OUTSO    type ref to ZIF_VCXI_XCSR_BL_OUTSO.

***----------------------------------------------------------------------------
*** Get first Production Step
  read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
  check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Check Outsourcing Work Center
  try.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
      if LR_BL_OUTSO is bound and
         LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
        move ABAP_TRUE to RF_OUTSO.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_BL_OUTSO.
  endtry.

endmethod.
  method PREP_EVAL_TIME.

*** Round PC up
    data(LS_QTY) = IS_QTY.
    if LS_QTY-QTY_UOM eq 'ST'.
      LS_QTY-QTY = CEIL( LS_QTY-QTY ).
    endif.

    case ABAP_TRUE.
      when ME->IS_RTE_ARBPL_MANU( IR_RTE_ARBPL = IR_RTE_ARBPL ).
***     Prepare Time Evaluation for Manual Operaiton
        ME->PREP_EVAL_TIME_MANU( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                           IS_EVAL_WASTE = IS_EVAL_WASTE
                                           IS_QTY        = LS_QTY
                                 changing  CT_EVAL_TIME  = CT_EVAL_TIME ).

      when ME->IS_RTE_ARBPL_OUTSO( IR_RTE_ARBPL = IR_RTE_ARBPL ).
***     Prepare Time Evaluation for Outsourcing Operation
        ME->PREP_EVAL_TIME_OUTSO( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                            IS_EVAL_WASTE = IS_EVAL_WASTE
                                            IS_QTY        = LS_QTY
                                  changing  CT_EVAL_TIME  = CT_EVAL_TIME ).
      when others.
***     Prepare Time Evaluation for Customizing Machine
        ME->PREP_EVAL_TIME_CMACH( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                            IS_EVAL_WASTE = IS_EVAL_WASTE
                                            IS_QTY        = LS_QTY
                                  changing  CT_EVAL_TIME  = CT_EVAL_TIME ).
    endcase.

  endmethod.
  method PREP_EVAL_TIME_CMACH.

*** Get Run Speed Rate Value
    data(LF_RRVAL) = ME->GET_RRVAL( IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Operation Quantity in provided Feature List
    data(LT_FEATURE) = IS_EVAL_WASTE-T_FEATURE.
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'opQty'  FTVAL = IS_QTY-QTY )
                                      changing  CT_FEATURE = LT_FEATURE ).

*** Add to Time Buffer w/o duplicates
    read table CT_EVAL_TIME assigning field-symbol(<S_EVAL_TIME>)
                            with key R_RTE_CMACH = IS_EVAL_WASTE-R_RTE_CMACH
                                     RRVAL       = LF_RRVAL
                                     T_RTE_SMVAL = IS_EVAL_WASTE-T_RTE_SMVAL
                                     T_RTE_ATYPE = IS_EVAL_WASTE-T_RTE_ATYPE
                                     T_FEATURE   = LT_FEATURE
                                     S_QTY       = IS_QTY.
    if SY-SUBRC ne 0.
      append value #( R_RTE_CMACH = IS_EVAL_WASTE-R_RTE_CMACH
                      RRVAL       = LF_RRVAL
                      T_RTE_SMVAL = IS_EVAL_WASTE-T_RTE_SMVAL
                      T_RTE_ATYPE = IS_EVAL_WASTE-T_RTE_ATYPE
                      T_FEATURE   = LT_FEATURE
                      S_QTY       = IS_QTY
                    ) to CT_EVAL_TIME assigning <S_EVAL_TIME>.
    endif.
    append IR_RTE_ARBPL to <S_EVAL_TIME>-T_RTE_ARBPL.

  endmethod.
  method PREP_EVAL_TIME_MANU.

    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_MANU   type ref to ZIF_VCXI_XCSR_BL_MANU.


***----------------------------------------------------------------------------
*** Get first Production Step
    read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Get Manual Work Center Info
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_MANU.
        check LR_BL_MANU is bound and
              LR_BL_MANU->F_MANWC eq ABAP_TRUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_MANU.
    endtry.

    check LR_BL_MANU is bound.

***----------------------------------------------------------------------------
*** Add as unique Entry to Buffer
    append value #( S_QTY       = IS_QTY
                    S_MSRS      = LR_BL_MANU->S_MSRS
                    T_RTE_ARBPL = value #( ( IR_RTE_ARBPL ) )
                  ) to CT_EVAL_TIME.

  endmethod.
  method PREP_EVAL_TIME_OUTSO.

    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO.


***----------------------------------------------------------------------------
*** Get first Production Step
    read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Get Outsourcing Info
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
        check LR_BL_OUTSO is bound and
              LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_OUTSO.
    endtry.

    check LR_BL_OUTSO is bound.

****----------------------------------------------------------------------------
**** Add as unique Entry to Buffer
*    append value #( S_OPQTY     = IS_OPQTY
*                    S_MSRS      = LR_BL_OUTSO->S_MSRS
*                    T_RTE_ARBPL = value #( ( IR_RTE_ARBPL ) )
*                  ) to CT_EVAL_TIME.      "No not needed for Evaluation

  endmethod.
  method PREP_EVAL_WASTE.

*** Add Trance Info (backward)
    insert initial line into ME->T_EVTRC assigning field-symbol(<S_EVTRC>) index 1.
    <S_EVTRC>-R_RTE_ARBPL = IR_RTE_ARBPL.
    <S_EVTRC>-S_MQTYO     = IS_MQTYO.


    case ABAP_TRUE.
      when ME->IS_RTE_ARBPL_MANU( IR_RTE_ARBPL = IR_RTE_ARBPL ).
***     Prepare Waste Evaluation for Manual Operation
        ME->PREP_EVAL_WASTE_MANU( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                            IS_MQTYO      = IS_MQTYO
                                   changing CT_EVAL_WASTE = CT_EVAL_WASTE ).

      when ME->IS_RTE_ARBPL_OUTSO( IR_RTE_ARBPL = IR_RTE_ARBPL ).
***     Prepare Waste Evaluation for Outsourcing Operation
        ME->PREP_EVAL_WASTE_OUTSO( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                             IS_MQTYO      = IS_MQTYO
                                    changing CT_EVAL_WASTE = CT_EVAL_WASTE ).
      when others.
***     Prepare Waste Evaluation for Customizing Machine
        ME->PREP_EVAL_WASTE_CMACH( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                             IS_MQTYO      = IS_MQTYO
                                    changing CT_EVAL_WASTE = CT_EVAL_WASTE ).
    endcase.

  endmethod.
  method PREP_EVAL_WASTE_CMACH.

    data: LS_CALCV  type ZVCXI_XCS_S_CALCV.


***----------------------------------------------------------------------------
*** Get Customizing Instance of Machine
    data(LR_RTE_CMACH) = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IF_DATE  = ME->F_DATE
                                                                IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
                                                                IF_LCVAL = IR_RTE_ARBPL->F_LCVAL ).

*** Perpare Operation Quantity
    LS_CALCV = value #( CALCV     = IS_MQTYO-MQTYO
                        CALCV_UOM = IS_MQTYO-MQTYO_UOM ).
    if LR_RTE_CMACH->R_MTYPE->F_RCALC eq /VCXI/CL_VSMC_MTYPE=>C_RCALC_I.
***   Convert Output to Input Quantity
      ME->CONV_MQTYO_TO_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                               changing  CS_CALCV     = LS_CALCV ).
    endif.

*** Define Operation Quantity
    data(LS_QTY) = value ZVCXI_XCSP_S_QTY( QTY     = LS_CALCV-CALCV
                                           QTY_UOM = LS_CALCV-CALCV_UOM ).

*** Get Add-on Type (with Aspects)
    data(LT_RTE_ATYPE) = ME->GET_RTE_ATYPE( IR_RTE_CMACH = LR_RTE_CMACH
                                            IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Collect Speed Machine Value Aspect
    data(LT_RTE_SMVAL) = ME->GET_RTE_SMVAL( IR_RTE_ARBPL = IR_RTE_ARBPL
                                            IS_CALCV     = value #( CALCV     = LS_QTY-QTY
                                                                    CALCV_UOM = LS_QTY-QTY_UOM ) ).

*** Get Features of Production Steps
    data(LT_FEATURE) = ME->GET_FEATURE( IR_RTE_CMACH = LR_RTE_CMACH
                                        IR_RTE_ARBPL = IR_RTE_ARBPL ).
*** Update Operation Quantity (w/o Waste)
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'opQtyYield'  FTVAL = LS_QTY-QTY )
                                      changing  CT_FEATURE = LT_FEATURE ).

***----------------------------------------------------------------------------
*** Add to Buffer w/o duplicates
    read table CT_EVAL_WASTE assigning field-symbol(<S_EVAL_WASTE>)
                              with key R_RTE_CMACH = LR_RTE_CMACH
                                       T_RTE_SMVAL = LT_RTE_SMVAL
                                       T_RTE_ATYPE = LT_RTE_ATYPE
                                       T_FEATURE   = LT_FEATURE
                                       S_QTY       = LS_QTY.
    if SY-SUBRC ne 0.
      append value #( R_RTE_CMACH = LR_RTE_CMACH
                      T_RTE_SMVAL = LT_RTE_SMVAL
                      T_RTE_ATYPE = LT_RTE_ATYPE
                      T_FEATURE   = LT_FEATURE
                      S_QTY       = LS_QTY
                    ) to CT_EVAL_WASTE assigning <S_EVAL_WASTE>.
    endif.
    append IR_RTE_ARBPL to <S_EVAL_WASTE>-T_RTE_ARBPL.

  endmethod.
  method PREP_EVAL_WASTE_MANU.

    data: LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_MSRWA type /VCXI/VSM_S_MSRWA.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_MANU   type ref to ZIF_VCXI_XCSR_BL_MANU.


***----------------------------------------------------------------------------
*** Get first Production Step
    read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Get Manual Work Center Info
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_MANU.
        check LR_BL_MANU is bound and
              LR_BL_MANU->F_MANWC eq ABAP_TRUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_MANU.
    endtry.

    check LR_BL_MANU is bound.

***----------------------------------------------------------------------------
*** Perpare Operation Quantity
    LS_CALCV = value #( CALCV     = IS_MQTYO-MQTYO
                        CALCV_UOM = IS_MQTYO-MQTYO_UOM ).
*** Convert Output to Input Quantity
    ME->CONV_MQTYO_TO_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                             changing  CS_CALCV     = LS_CALCV ).

*** Define Operation Quantity
    data(LS_QTY) = value ZVCXI_XCSP_S_QTY( QTY     = LS_CALCV-CALCV
                                           QTY_UOM = LS_CALCV-CALCV_UOM ).

***----------------------------------------------------------------------------
*** Calculate Run Waste
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                        IF_CALCV_2     = LR_BL_MANU->S_SCRAP-SCRAP
                                                        IF_CALCV_UOM_2 = LR_BL_MANU->S_SCRAP-SCRAP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_MSRWA-MSRWA
                                                        EF_CALCV_UOM   = LS_MSRWA-MSRWA_UOM ).

***----------------------------------------------------------------------------
*** Add as unique Entry to Buffer
    append value #( S_QTY       = LS_QTY
                    S_MSRWA     = LS_MSRWA
                    T_RTE_ARBPL = value #( ( IR_RTE_ARBPL ) )
                  ) to CT_EVAL_WASTE.

  endmethod.
  method PREP_EVAL_WASTE_OUTSO.

    data: LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_MSRWA type /VCXI/VSM_S_MSRWA.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_OUTSO   type ref to ZIF_VCXI_XCSR_BL_OUTSO.


***----------------------------------------------------------------------------
*** Get first Production Step
    read table IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Get Outsourcing Info
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
        check LR_BL_OUTSO is bound and
              LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BL_OUTSO.
    endtry.

    check LR_BL_OUTSO is bound.

***----------------------------------------------------------------------------
*** Perpare Operation Quantity
    LS_CALCV = value #( CALCV     = IS_MQTYO-MQTYO
                        CALCV_UOM = IS_MQTYO-MQTYO_UOM ).
*** Convert Output to Input Quantity
    ME->CONV_MQTYO_TO_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                             changing  CS_CALCV     = LS_CALCV ).

*** Define Operation Quantity
    data(LS_QTY) = value ZVCXI_XCSP_S_QTY( QTY     = LS_CALCV-CALCV
                                           QTY_UOM = LS_CALCV-CALCV_UOM ).

***----------------------------------------------------------------------------
*** Calculate Run Waste
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                        IF_CALCV_2     = LR_BL_OUTSO->S_SCRAP-SCRAP
                                                        IF_CALCV_UOM_2 = LR_BL_OUTSO->S_SCRAP-SCRAP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_MSRWA-MSRWA
                                                        EF_CALCV_UOM   = LS_MSRWA-MSRWA_UOM ).

***----------------------------------------------------------------------------
*** Add as unique Entry to Buffer
    append value #( S_QTY       = LS_QTY
                    S_MSRWA     = LS_MSRWA
                    T_RTE_ARBPL = value #( ( IR_RTE_ARBPL ) )
                  ) to CT_EVAL_WASTE.

  endmethod.
method ROUND_MQTYI.
endmethod.
method SERIALIZE.

  data:          LF_INDEX           type        I,
                 LF_GUID22          type        GUID_22.
  data:          LS_XML_RTE_PRTE    type        YS_XML_RTE_PRTE,
                 LS_MAP_RTE_PSEQ    type        YS_MAP_RTE_PSEQ.
  data:          LT_MAP_RTE_PSEQ    type        YT_MAP_RTE_PSEQ.
  data:          LR_PRTE            type ref to /VCXI/CL_VSMC_PRTE,
                 LR_RTE_ARBPL       type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_RTE_PSEQ        type ref to /VCXI/CL_VSMR_RTE_PSEQ,
                 LR_BL_PSTEP        type ref to ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_CLASSDESCR      type ref to CL_ABAP_CLASSDESCR.
  field-symbols: <S_MAP_RTE_PSEQ>   type        YS_MAP_RTE_PSEQ,
                 <S_XML_RTE_PSEQ>   type        YS_XML_RTE_PSEQ,
                 <S_XML_RTE_ARBPL>  type        YS_XML_RTE_ARBPL,
                 <S_XML_RTE_PSTEP>  type        YS_XML_RTE_PSTEP.

***--------------------------------------------------------------------------------------
*** Serialize Basic Infos
  move ME->F_DATE              to LS_XML_RTE_PRTE-DATE.
  move ME->F_LIFNR_REQ         to LS_XML_RTE_PRTE-LIFNR_REQ.
  move ME->SERIALIZE_INFO( )   to LS_XML_RTE_PRTE-INFO_XML.
  move ME->R_RTE_PRTE->F_RSRCE to LS_XML_RTE_PRTE-RSRCE.
  move ME->R_RTE_PRTE->F_RSTAT to LS_XML_RTE_PRTE-RSTAT.

*** Get Class Name
  LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ).
  move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to LS_XML_RTE_PRTE-BL_PRTE_CLSNA.

*** Get Production Route GUID & ID
  LR_PRTE = ME->R_RTE_PRTE->GET_PRTE( ).
  if LR_PRTE is bound.
    move LR_PRTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_XML_RTE_PRTE-GPRTE.
    move LR_PRTE->/VCXI/IF_CKX_OBJECT~GET_ID( )   to LS_XML_RTE_PRTE-IPRTE.
  endif.


***--------------------------------------------------------------------------------------
*** Serialize Production Sequences
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      if LR_RTE_PSTEP->R_RTE_PSEQ is bound.

***     Insert at the end of the list...
        LF_INDEX = lines( LT_MAP_RTE_PSEQ ) + 1.

        move LR_RTE_PSTEP->R_RTE_PSEQ to LR_RTE_PSEQ.
        do.
          read table LT_MAP_RTE_PSEQ with key R_RTE_PSEQ = LR_RTE_PSEQ
                                     transporting no fields.
          if SY-SUBRC eq 0.
            exit.
          else.
            call function 'GUID_CREATE'
              importing
                EV_GUID_22 = LF_GUID22.

            insert initial line into LT_MAP_RTE_PSEQ assigning <S_MAP_RTE_PSEQ> index LF_INDEX.
            move LF_GUID22   to <S_MAP_RTE_PSEQ>-GUID_RTE_PSEQ.
            move LR_RTE_PSEQ to <S_MAP_RTE_PSEQ>-R_RTE_PSEQ.
          endif.

          move LR_RTE_PSEQ->R_RTE_PSEQ to LR_RTE_PSEQ.
          if LR_RTE_PSEQ is not bound.
            exit.
          endif.
        enddo.
      endif.
    endloop.
  endloop.

  loop at LT_MAP_RTE_PSEQ into LS_MAP_RTE_PSEQ.
    append initial line to LS_XML_RTE_PRTE-T_XML_RTE_PSEQ assigning <S_XML_RTE_PSEQ>.
    move LS_MAP_RTE_PSEQ-GUID_RTE_PSEQ to <S_XML_RTE_PSEQ>-GUID_RTE_PSEQ.

    move LS_MAP_RTE_PSEQ-R_RTE_PSEQ->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( )   to <S_XML_RTE_PSEQ>-IPSEQ.
    move LS_MAP_RTE_PSEQ-R_RTE_PSEQ->R_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_XML_RTE_PSEQ>-GPSEQ.

    if LS_MAP_RTE_PSEQ-R_RTE_PSEQ->R_RTE_PSEQ is bound.
      read table LT_MAP_RTE_PSEQ into LS_MAP_RTE_PSEQ
                                 with key R_RTE_PSEQ = LS_MAP_RTE_PSEQ-R_RTE_PSEQ->R_RTE_PSEQ.
      move LS_MAP_RTE_PSEQ-GUID_RTE_PSEQ to <S_XML_RTE_PSEQ>-GUID_RTE_PSEQ_PARENT.
    endif.
  endloop.


***--------------------------------------------------------------------------------------
*** Serialize Work Center
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    append initial line to LS_XML_RTE_PRTE-T_XML_RTE_ARBPL assigning <S_XML_RTE_ARBPL>.

    if LR_RTE_ARBPL->R_ARBPL is bound.
      move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_XML_RTE_ARBPL>-GUID_ARBPL.
    endif.
    move LR_RTE_ARBPL->F_LCVAL                                  to <S_XML_RTE_ARBPL>-LCVAL.
    move LR_RTE_ARBPL->T_MSG                                    to <S_XML_RTE_ARBPL>-T_MSG.

*** Serialize Production Steps
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      append initial line to <S_XML_RTE_ARBPL>-T_XML_RTE_PSTEP assigning <S_XML_RTE_PSTEP>.
      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( )   to <S_XML_RTE_PSTEP>-IPSTP.
      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_XML_RTE_PSTEP>-GUID_PSTEP.

      if LR_RTE_PSTEP->R_RTE_PSEQ is bound.
        read table LT_MAP_RTE_PSEQ into LS_MAP_RTE_PSEQ
                                   with key R_RTE_PSEQ = LR_RTE_PSTEP->R_RTE_PSEQ.
        move LS_MAP_RTE_PSEQ-GUID_RTE_PSEQ to <S_XML_RTE_PSTEP>-GUID_RTE_PSEQ.
      endif.

***--------------------------------------------------------------------------------------
***   Serialize BL Production Steps
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

      if LR_BL_PSTEP is bound.
***     Get Class Name
        LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = LR_BL_PSTEP ).
        move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to <S_XML_RTE_PSTEP>-BL_PSTEP_CLSNA.

***     Get XML
        move LR_BL_PSTEP->SERIALIZE( ) to <S_XML_RTE_PSTEP>-BL_PSTEP_XML.
      endif.

    endloop.
  endloop.

***--------------------------------------------------------------------------------------
*** Create XML
  call transformation ID
       source RTE_PRTE = LS_XML_RTE_PRTE
       result xml RF_XML.

endmethod.
method SERIALIZE_INFO.

  data:          LF_MFMI_KIND       type          ABAP_TYPECATEGORY,
                 LF_MFMI_RELNAME    type          STRING,
                 LF_MFSI_KIND       type          ABAP_TYPECATEGORY,
                 LF_MFSI_RELNAME    type          STRING.
  data:          LR_DATADESCR       type ref to   CL_ABAP_DATADESCR,
                 LR_TABLEDESCR      type ref to   CL_ABAP_TABLEDESCR.
  field-symbols: <T_MFMI>           type standard table,
                 <T_MFSI>           type standard table.

***------------------------------------------------------------------------------------------------
*** Serialize MFMI
  if ME->R_MFMI is bound.
    LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_MFMI ).

    move LR_DATADESCR->KIND to LF_MFMI_KIND.
    case LR_DATADESCR->KIND.
      when CL_ABAP_DATADESCR=>KIND_TABLE.
        move LR_DATADESCR ?to LR_TABLEDESCR.
        LR_DATADESCR = LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).
    endcase.

    LF_MFMI_RELNAME = LR_DATADESCR->GET_RELATIVE_NAME( ).

    assign ME->R_MFMI->* to <T_MFMI>.
  endif.

***------------------------------------------------------------------------------------------------
*** Serialize MFSI
  if ME->R_MFSI is bound.
    LR_DATADESCR ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_MFSI ).

    move LR_DATADESCR->KIND to LF_MFSI_KIND.
    case LR_DATADESCR->KIND.
      when CL_ABAP_DATADESCR=>KIND_TABLE.
        move LR_DATADESCR ?to LR_TABLEDESCR.
        LR_DATADESCR = LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).
    endcase.

    LF_MFSI_RELNAME = LR_DATADESCR->GET_RELATIVE_NAME( ).

    assign ME->R_MFSI->* to <T_MFSI>.
  endif.

***------------------------------------------------------------------------------------------------
  if <T_MFMI> is assigned and
     <T_MFSI> is assigned.
*** Create XML
    call transformation ID
         source TECHC        = ME->F_TECHC
                DECIS        = ME->F_DECIS
                T_MFMI       = <T_MFMI>
                MFMI_KIND    = LF_MFMI_KIND
                MFMI_RELNAME = LF_MFMI_RELNAME
                T_MFSI       = <T_MFSI>
                MFSI_KIND    = LF_MFSI_KIND
                MFSI_RELNAME = LF_MFSI_RELNAME
                T_CSPLIT     = ME->T_CSPLIT
         result xml RF_XML.

  elseif <T_MFMI> is assigned.
*** Create XML
    call transformation ID
         source TECHC        = ME->F_TECHC
                DECIS        = ME->F_DECIS
                T_MFMI       = <T_MFMI>
                MFMI_KIND    = LF_MFMI_KIND
                MFMI_RELNAME = LF_MFMI_RELNAME
                T_CSPLIT     = ME->T_CSPLIT
         result xml RF_XML.

  elseif <T_MFSI> is assigned.
*** Create XML
    call transformation ID
         source TECHC        = ME->F_TECHC
                DECIS        = ME->F_DECIS
                T_MFSI       = <T_MFSI>
                MFSI_KIND    = LF_MFSI_KIND
                MFSI_RELNAME = LF_MFSI_RELNAME
                T_CSPLIT     = ME->T_CSPLIT
         result xml RF_XML.

  else.
*** Create XML
    call transformation ID
         source TECHC       = ME->F_TECHC
                DECIS       = ME->F_DECIS
                T_CSPLIT    = ME->T_CSPLIT
         result xml RF_XML.
  endif.

endmethod.
method SET_CSPLIT.

  move IT_CSPLIT to ME->T_CSPLIT.

endmethod.
method SET_DATE.

  move IF_DATE to ME->F_DATE.

endmethod.
method SET_DECIS.

  move IF_DECIS to ME->F_DECIS.

endmethod.
method SET_LIFNR_REQ.

  move IF_LIFNR_REQ to ME->F_LIFNR_REQ.

endmethod.
  method SET_MFMI.

    field-symbols: <R_MFMI>     type ANY,
                   <R_MFMI_NEW> type ANY.


    clear ME->R_MFMI.
    check IR_MFMI is bound.

*** Create new Data Reference to decouple
    try.
        assign IR_MFMI->* to <R_MFMI>.
        create data ME->R_MFMI like <R_MFMI>.
        assign ME->R_MFMI->* to <R_MFMI_NEW>.
        <R_MFMI_NEW> = <R_MFMI>.

      catch CX_ROOT into data(LR_CX_ROOT).               "#EC CATCH_ALL
        raise exception type /VCXI/CX_CKX.
    endtry.

  endmethod.
  method SET_MFSI.

    field-symbols: <R_MFSI>     type ANY,
                   <R_MFSI_NEW> type ANY.


    clear ME->R_MFSI.
    check IR_MFSI is bound.

*** Create new Data Reference to decouple
    try.
        assign IR_MFSI->* to <R_MFSI>.
        create data ME->R_MFSI like <R_MFSI>.
        assign ME->R_MFSI->* to <R_MFSI_NEW>.
        <R_MFSI_NEW> = <R_MFSI>.

      catch CX_ROOT into data(LR_CX_ROOT).               "#EC CATCH_ALL
        raise exception type /VCXI/CX_CKX.
    endtry.

  endmethod.
method SET_RELCO.

  data:  LF_RELCO type /VCXI/VSMR_RANKV.

  move IF_RELCO to LF_RELCO.
  ME->R_RTE_PRTE->SET_RTE_RANK( IF_IRANK = C_IRANK_RELCO
                                IF_RANKV = LF_RELCO ).

endmethod.
method SET_TECHC.

  move IF_TECHC to ME->F_TECHC.

endmethod.
  method UPDATE_EVTRC_BY_TIME.

*** Get Trace Info based on Work Center
    read table ME->T_EVTRC assigning field-symbol(<S_EVTRC>)
                           with key R_RTE_ARBPL = IR_RTE_ARBPL.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Find Time Information
    loop at IT_EVAL_TIME into data(LS_EVAL_TIME).
      if LINE_EXISTS( LS_EVAL_TIME-T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ).
        exit.
      else.
        clear LS_EVAL_TIME.
      endif.
    endloop.
    check LINE_EXISTS( LS_EVAL_TIME-T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ).

*** Add Time Information to Trace
    <S_EVTRC>-S_MSSTI = LS_EVAL_TIME-S_MSSTI.
    <S_EVTRC>-S_MSRSF = LS_EVAL_TIME-S_MSRSF.
    <S_EVTRC>-S_MSRS  = LS_EVAL_TIME-S_MSRS.
    <S_EVTRC>-S_MSRTI = LS_EVAL_TIME-S_MSRTI.
    <S_EVTRC>-S_MSTTI = LS_EVAL_TIME-S_MSTTI.

*** Calculate total Times
    ME->ADD_TIME( IS_MSSTI = <S_EVTRC>-S_MSSTI
                  IS_MSRTI = <S_EVTRC>-S_MSRTI
                  IS_MSTTI = <S_EVTRC>-S_MSTTI ).

***----------------------------------------------------------------------------
*** Check Run Time
    if LS_EVAL_TIME-S_MSRTI-MSRTI     is initial or
       LS_EVAL_TIME-S_MSRTI-MSRTI_UOM is initial.
***   No Runtime could be calculated.
      ME->R_RTE_PRTE->F_RSTAT = /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID.
      append value #( MSGID = 'ZVCXI_XCSR'
                      MSGTY = 'E'
                      MSGNO = '155' ) to IR_RTE_ARBPL->T_MSG.
    endif.

  endmethod.
  method UPDATE_EVTRC_BY_WASTE.

    data: LS_CALCV type ZVCXI_XCS_S_CALCV.


*** Get Trace Info based on Work Center
    read table ME->T_EVTRC assigning field-symbol(<S_EVTRC>)
                           with key R_RTE_ARBPL = IR_RTE_ARBPL.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Find Waste Information
    loop at IT_EVAL_WASTE into data(LS_EVAL_WASTE).
      if LINE_EXISTS( LS_EVAL_WASTE-T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ).
        exit.
      else.
        clear LS_EVAL_WASTE.
      endif.
    endloop.
    check LINE_EXISTS( LS_EVAL_WASTE-T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ).

*** Add Waste Information to Trace
    <S_EVTRC>-S_MSSWA = LS_EVAL_WASTE-S_MSSWA.
    <S_EVTRC>-S_MSRWF = LS_EVAL_WASTE-S_MSRWF.
    <S_EVTRC>-S_MSRWA = LS_EVAL_WASTE-S_MSRWA.

***----------------------------------------------------------------------------
*** Start with Operation Quantity used for Waste Determination
    LS_CALCV = value #( CALCV     = LS_EVAL_WASTE-S_QTY-QTY
                        CALCV_UOM = LS_EVAL_WASTE-S_QTY-QTY_UOM ).

*** Increase Operation Quantity by Run Waste
    if <S_EVTRC>-S_MSRWA-MSRWA is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = <S_EVTRC>-S_MSRWA-MSRWA
                                                          IF_CALCV_UOM_2 = <S_EVTRC>-S_MSRWA-MSRWA_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALCV-CALCV_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
    endif.

***----------------------------------------------------------------------------
*** Get Preparation for Time Evaluation
    if CT_EVAL_TIME is supplied.
      ME->PREP_EVAL_TIME( exporting IR_RTE_ARBPL  = IR_RTE_ARBPL
                                    IS_EVAL_WASTE = LS_EVAL_WASTE
                                    IS_QTY        = value #( QTY     = LS_CALCV-CALCV
                                                             QTY_UOM = LS_CALCV-CALCV_UOM )
                          changing  CT_EVAL_TIME  = CT_EVAL_TIME ).
    endif.

***----------------------------------------------------------------------------
*** Calculate Operation Quantity IN by adding setup waste
    if <S_EVTRC>-S_MSSWA-MSSWA is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = <S_EVTRC>-S_MSSWA-MSSWA
                                                          IF_CALCV_UOM_2 = <S_EVTRC>-S_MSSWA-MSSWA_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALCV-CALCV_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
    endif.

    if LS_EVAL_WASTE-R_RTE_CMACH is bound and
       LS_EVAL_WASTE-R_RTE_CMACH->R_MTYPE is bound and
       LS_EVAL_WASTE-R_RTE_CMACH->R_MTYPE->F_RCALC ne /VCXI/CL_VSMC_MTYPE=>C_RCALC_I.
***   Convert Output to Input Quantity
      ME->CONV_MQTYO_TO_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                               changing  CS_CALCV     = LS_CALCV  ).
    else.
***   Round Input Quantity
      ME->ROUND_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                       changing  CS_CALCV     = LS_CALCV  ).
    endif.

*** Set Machine Quantity In
    <S_EVTRC>-S_MQTYI = value #( MQTYI     = LS_CALCV-CALCV
                                 MQTYI_UOM = LS_CALCV-CALCV_UOM ).

*** Keep Machine Quantity In for Ranking
    ME->S_MQTYI = <S_EVTRC>-S_MQTYI.

  endmethod.
method WRITE_PROTOCOL_MQTY.

  data:  LF_ARBPL type STRING,
         LF_MQTYO type CHAR30,
         LF_MQTYI type CHAR30.

***--------------------------------------------------------------------------------------
*** Work Center
  move IR_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ARBPL.

*** Machine Quantity In
  write IS_MQTYI-MQTYI to LF_MQTYI unit IS_MQTYI-MQTYI_UOM.
  shift LF_MQTYI left deleting leading SPACE.
  concatenate LF_MQTYI IS_MQTYI-MQTYI_UOM into LF_MQTYI separated by SPACE.

*** Machine Quantity Out
  write IS_MQTYO-MQTYO to LF_MQTYO unit IS_MQTYO-MQTYO_UOM.
  shift LF_MQTYO left deleting leading SPACE.
  concatenate LF_MQTYO IS_MQTYO-MQTYO_UOM into LF_MQTYO separated by SPACE.

***--------------------------------------------------------------------------------------
*** &1: Quantity Out &2 / Quantity In &3
  IR_PROTOCOL->ADD_MESSAGE( IF_MSGTY = 'I'
                            IF_MSGID = 'ZVCXI_XCSR'
                            IF_MSGNO = '182'
                            IF_MSGV1 = LF_ARBPL
                            IF_MSGV2 = LF_MQTYI
                            IF_MSGV3 = LF_MQTYO ).

endmethod.
method WRITE_PROTOCOL_TIME.

  data:  LF_ARBPL type STRING,
         LF_MSSTI type CHAR30,
         LF_MSRTI type CHAR30,
         LF_MSTTI type CHAR30.

***--------------------------------------------------------------------------------------
*** Work Center
  move IR_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ARBPL.

*** Setup Time
  write IS_MSSTI-MSSTI to LF_MSSTI unit IS_MSSTI-MSSTI_UOM.
  shift LF_MSSTI left deleting leading SPACE.
  concatenate LF_MSSTI IS_MSSTI-MSSTI_UOM into LF_MSSTI separated by SPACE.

*** Runtime
  write IS_MSRTI-MSRTI to LF_MSRTI unit IS_MSRTI-MSRTI_UOM.
  shift LF_MSRTI left deleting leading SPACE.
  concatenate LF_MSRTI IS_MSRTI-MSRTI_UOM into LF_MSRTI separated by SPACE.

*** Teardown Time
  write IS_MSTTI-MSTTI to LF_MSTTI unit IS_MSTTI-MSTTI_UOM.
  shift LF_MSTTI left deleting leading SPACE.
  concatenate LF_MSTTI IS_MSTTI-MSTTI_UOM into LF_MSTTI separated by SPACE.

***--------------------------------------------------------------------------------------
*** &1: Setup Time &2 / Runtime &3 / Teardown Time &4
  IR_PROTOCOL->ADD_MESSAGE( IF_MSGTY = 'I'
                            IF_MSGID = 'ZVCXI_XCSR'
                            IF_MSGNO = '181'
                            IF_MSGV1 = LF_ARBPL
                            IF_MSGV2 = LF_MSSTI
                            IF_MSGV3 = LF_MSRTI
                            IF_MSGV4 = LF_MSTTI ).

endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_NODE_KEY_PREV type I.
    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into data(LR_RTE_ARBPL).
      free LT_ATTR.
***   Work Center and Plant as Attribute
      if LR_RTE_ARBPL->R_ARBPL is bound.
        CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LR_RTE_ARBPL->R_ARBPL->F_ARBPL
                                    changing  CT_ATTR  = LT_ATTR ).
        CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LR_RTE_ARBPL->R_ARBPL->GET_WERKS( )
                                    changing  CT_ATTR  = LT_ATTR ).
      endif.

***   Add Production Steps as Attribute
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into data(LR_RTE_PSTEP).
        CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL = switch #( SY-TABIX when 1 then 'Steps' else SPACE )
                                              IF_VALUE = LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                                    changing  CT_ATTR  = LT_ATTR ).
      endloop.

***   Add Node for Work Center
      data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                                                      IF_DESCR     = LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                                                      IF_ICON      = 'sap-icon://machine'
                                                      IF_GROUP_KEY = IF_GROUP_KEY
                                                      IT_ATTR      = LT_ATTR ).
***   Register Work Center to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_RTE_ARBPL
                                          IF_NODE_KEY = LF_NODE_KEY ).
***   Register Production Steps to Node
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_RTE_PSTEP
                                            IF_NODE_KEY = LF_NODE_KEY ).
      endloop.

***   Connect Work Center
      if LF_NODE_KEY_PREV is not initial.
        CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = LF_NODE_KEY_PREV
                                    IF_NODE_KEY_TO   = LF_NODE_KEY ).
      endif.
      LF_NODE_KEY_PREV = LF_NODE_KEY.
    endloop.

  endmethod.
