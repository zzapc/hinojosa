
class ZCL_VCXI_PCSS_PR_SCSTR_MGR definition
  public
  inheriting from ZCL_VCXI_P0SS_PR_SCSTR_MGR
  create public .

public section.

  constants C_SCSOP_CORRUGATION type ZVCXI_P0S_SCSOP value 'CORR'. "#EC NOTEXT
  constants C_SCSOP_SLOT_SCORE type ZVCXI_P0S_SCSOP value 'SLOT_SCORE'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods CHECK_NO_CALC
    redefinition .
  methods GET_ALL_VALID_SCSOP
    redefinition .
  methods GET_SCSOP
    redefinition .
  methods GET_VALID_INDIC
    redefinition .
  methods GET_ORIEN
    redefinition .
protected section.

  types:
    YT_PTYPE type standard table of ZVCXI_P0S_PTYPE with default key .

  constants C_ATTID_PTYPE_SLOT_SCORE type /VCXI/VKS_ATTID value 'PTYPE_SLOT_SCORE'. "#EC NOTEXT
  data T_PTYPE_SLOT_SCORE type YT_PTYPE .

  type-pools ABAP .
  methods IS_SLOT_SCORE_ACTIVE
    importing
      !IF_IGNORE_SHTPR type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BOARD
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_BOARD) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHEET
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_SHEET) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SCSOP_CORR
    changing
      value(CT_SCSOP) type ZVCXI_P0SS_TT_SCSOP
    raising
      /VCXI/CX_CKX .
  methods GET_SCSOP_SLOT_SCORE
    changing
      value(CT_SCSOP) type ZVCXI_P0SS_TT_SCSOP
    raising
      /VCXI/CX_CKX .
  methods GET_SCSOP_SLOT_SCORE_MAN
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    changing
      value(CT_SCSOP) type ZVCXI_P0SS_TT_SCSOP
    raising
      /VCXI/CX_CKX .
  methods INIT_PTYPE_SLOT_SCORE
    raising
      /VCXI/CX_CKX .

  methods GET_PRVDR_MS_SHTPR
    redefinition .
  methods GET_SCSOP_SHTPR
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_SCSTR_MGR definition
class ZCL_VCXI_PCSS_PR_SCSTR_MGR implementation.
method CHECK_NO_CALC.

  RF_NO_CALC = SUPER->CHECK_NO_CALC( IF_CSCOR   = IF_CSCOR
                                     IF_FNEST   = IF_FNEST
                                     IF_ACTIV   = IF_ACTIV
                                     IF_SCSOP   = IF_SCSOP ).

  if IF_CSCOR eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
*** Nested and Corrugation with Tapes -> No Calculation Possible
    if IF_FNEST              eq ABAP_TRUE                                        and
       ME->GET_SOPLE( )      ne ZCL_VCXI_PCSS_BL_SCSOP_CORR=>C_SCSOP_CORRUGATION and
       IF_SCSOP              eq ZCL_VCXI_PCSS_BL_SCSOP_CORR=>C_SCSOP_CORRUGATION and
       ME->IS_TAPE_ACTIVE( ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_NO_CALC.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

*** Do super
  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Product Type for Trigger Slot/Score Operation
  ME->INIT_PTYPE_SLOT_SCORE( ).

endmethod.
method GET_ALL_VALID_SCSOP.

  field-symbols: <S_SCSOP>  type        ZVCXI_P0SS_S_SCSOP.


  RT_SCSOP = SUPER->GET_ALL_VALID_SCSOP( IF_CSCOR = IF_CSCOR ).

  if RT_SCSOP is not initial.
***------------------------------------------------------------------------------------------------
*** Add Slot/Score to Length if Slot/Score is active
    read table RT_SCSOP with key SCSOP = C_SCSOP_SLOT_SCORE
                                 CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                        transporting no fields.
    if SY-SUBRC ne 0 and
       ME->IS_SLOT_SCORE_ACTIVE( ) eq ABAP_TRUE.
      append initial line to RT_SCSOP assigning <S_SCSOP>.
      <S_SCSOP>-SCSOP = C_SCSOP_SLOT_SCORE.
      <S_SCSOP>-CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
    endif.

  endif.

***------------------------------------------------------------------------------------------------
*** Return only requested Operations
  if IF_CSCOR is supplied.
    delete RT_SCSOP where CSCOR ne IF_CSCOR.
  endif.

endmethod.
method GET_ORIEN.

  data:  LR_GATE_SHEET type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHEET   type ref to ZCL_VCXI_PCSS_PR_SHEET.

  clear EF_ORIEN.

*** Get Sheet Provider
  LR_GATE_SHEET = ME->GET_PRVDR_SHEET( IR_GATE_SPEC = ME->R_GATE_SPEC ).
  check LR_GATE_SHEET is bound.

  try.
      move LR_GATE_SHEET->R_CLSPR ?to LR_PR_SHEET.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SHEET.
  endtry.
  check LR_PR_SHEET is bound.

*** Get Flute Orientation
  move LR_PR_SHEET->GET_FLUTO( ) to EF_ORIEN.

endmethod.
method GET_PRVDR_BOARD.

  data:  LF_ICONT       type        ZVCXI_P0S_ICONT,
         LF_MBOAR       type        ZVCXI_PCSS_MBOAR.
  data:  LT_GATE_BOARD  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_BOARD  type ref to /VCXI/CL_VKSR_GATE,
         LR_ICONT       type ref to ZIF_VCXI_P0SS_ICONT,
         LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

***------------------------------------------------------------------------------------------------
*** Get Context
  check IR_GATE_SPEC is bound.
  try.
      move IR_GATE_SPEC->R_CLSPR ?to LR_ICONT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_ICONT.
  endtry.
  check LR_ICONT is bound.
  move LR_ICONT->GET_ICONT( ) to LF_ICONT.

***------------------------------------------------------------------------------------------------
*** Get all Board Provider
  LT_GATE_BOARD = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                         IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_BOARD into LR_GATE_BOARD.
*** Check is child of Specification
    if LR_GATE_BOARD->GET_PARENT( ) eq IR_GATE_SPEC.

***   Check Board Mode against Context P
      try.
          move LR_GATE_BOARD->R_CLSPR ?to LR_PR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_BOARD, LR_GATE_BOARD.
      endtry.
      check LR_PR_BOARD is bound.
      move LR_PR_BOARD->GET_MBOAR( ) to LF_MBOAR.

      if ( LF_MBOAR eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S   and
           LF_ICONT eq ZCL_VCXI_PCSS_PR_SPEC=>C_ICONT_SALES    ) or
         ( LF_MBOAR eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P   and
           LF_ICONT eq ZCL_VCXI_PCSS_PR_SPEC=>C_ICONT_PROD     ) .
        exit.
      else.
        clear LR_GATE_BOARD.
      endif.
    endif.
  endloop.
  check LR_GATE_BOARD is bound.
  move LR_GATE_BOARD to RR_GATE_BOARD.

endmethod.
method GET_PRVDR_MS_SHTPR.

  data:  LT_GATE_MS_SHTPR type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_MS_SHTPR type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Sheet Procurement Provider
  LT_GATE_MS_SHTPR = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_MS_SHTPR=>C_IPRVT_PC_MS_SHTPR
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE_MS_SHTPR into LR_GATE_MS_SHTPR.
*** Check is child of Specification
    check LR_GATE_MS_SHTPR->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_MS_SHTPR to RR_GATE_MS_SHTPR.
    exit.
  endloop.

endmethod.
method GET_PRVDR_SHEET.

  data:  LT_GATE_SHEET type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SHEET type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get all Sheet Provider
  LT_GATE_SHEET = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_SHEET=>C_IPRVT_PC_SHEET
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE_SHEET into LR_GATE_SHEET.
*** Check is child of Specification
    check LR_GATE_SHEET->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_SHEET to RR_GATE_SHEET.
    exit.
  endloop.

endmethod.
method GET_SCSOP.

***------------------------------------------------------------------------------------------------
*** Get Score String Operation NONE
  ME->GET_SCSOP_NONE( changing CT_SCSOP = RT_SCSOP ).


***------------------------------------------------------------------------------------------------
*** Get Score String Operation Corrugation
  ME->GET_SCSOP_CORR( changing CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Sheet Procurement
  ME->GET_SCSOP_SHTPR( changing CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Slit/Score Manually choosen one! for Length scores
  ME->GET_SCSOP_SLIT_SCORE_MAN( exporting IF_CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                                changing  CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Chopping
  ME->GET_SCSOP_CHOP( changing CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Slot/Score Manually choosen one! for Length scores
  ME->GET_SCSOP_SLOT_SCORE_MAN( exporting IF_CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                                changing  CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Slit/Score
  ME->GET_SCSOP_SLIT_SCORE( changing CT_SCSOP = RT_SCSOP ).

*** Get Score String Operation Slit/Score Manually choosen one! for cross scores
  ME->GET_SCSOP_SLIT_SCORE_MAN( exporting IF_CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS
                                changing  CT_SCSOP = RT_SCSOP ).

***------------------------------------------------------------------------------------------------
*** Get Score String Operation Cutting
  ME->GET_SCSOP_CUTTING( changing CT_SCSOP = RT_SCSOP ).


***------------------------------------------------------------------------------------------------
*** Get Score String Operation Attachment (manually)
  ME->GET_SCSOP_ATTACH( exporting IF_CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                        changing  CT_SCSOP = RT_SCSOP ).

*** Get Score String Operation Attachment (manually)
  ME->GET_SCSOP_ATTACH( exporting IF_CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS
                        changing  CT_SCSOP = RT_SCSOP ).


***------------------------------------------------------------------------------------------------
*** Get Score String Operation Slot/Score
  ME->GET_SCSOP_SLOT_SCORE( changing CT_SCSOP = RT_SCSOP ).

endmethod.
method GET_SCSOP_CORR.

  data:          LT_PRVDR_CORR     type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_SCORE_L  type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_TAPE     type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_BOARD     type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_SCSOP>         type        ZVCXI_P0SS_S_SCSOP.

***------------------------------------------------------------------------------------------------
*** Check Provider for Specification
  check ME->R_GATE_SPEC is bound.

*** Check Provider for Sheet Dimension
  check ME->R_GATE_SHTDIM is bound.
  append ME->R_GATE_SHTDIM to LT_PRVDR_CORR.

*** Add Provider for Product Dimension if available
  if ME->R_GATE_PRODDIM is bound.
    append ME->R_GATE_PRODDIM to LT_PRVDR_CORR.
  endif.

*** Find Provider for Board
  LR_GATE_BOARD = ME->GET_PRVDR_BOARD( IR_GATE_SPEC = ME->R_GATE_SPEC ).
  check LR_GATE_BOARD is bound.
  append LR_GATE_BOARD to LT_PRVDR_CORR.

*** Find Provider for Tape
  LT_PRVDR_TAPE = ME->GET_PRVDR_TAPE( IR_GATE_SPEC = ME->R_GATE_SPEC ).
  append lines of LT_PRVDR_TAPE to LT_PRVDR_CORR.

  append ME->R_GATE to LT_PRVDR_CORR.

***------------------------------------------------------------------------------------------------
*** Add Operation for Length
  append initial line to CT_SCSOP assigning <S_SCSOP>.

  <S_SCSOP>-SCSOP = C_SCSOP_CORRUGATION.
  <S_SCSOP>-SHTDI = 'A'.
  <S_SCSOP>-CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
  if ME->GET_SOPLE( ) eq C_SCSOP_CORRUGATION.
    <S_SCSOP>-ACTIV = ABAP_TRUE.
*** If Score Operation is active add also right Score Provider
    LT_PRVDR_SCORE_L = ME->GET_PRVDR_SCORE( IR_GATE_SPEC  = ME->R_GATE_SPEC
                                            IF_CSCOR      = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH ).
    if LT_PRVDR_SCORE_L is not initial.
      append lines of LT_PRVDR_SCORE_L to LT_PRVDR_CORR.
    endif.
  endif.
  <S_SCSOP>-T_PRVDR = LT_PRVDR_CORR.

endmethod.                    "GET_SCSOP_CORR
method GET_SCSOP_SHTPR.

  data:          LT_PRVDR_SHTPR    type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_SCORE_C  type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_MS_SHTPR  type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_SHTPR    type ref to ZCL_VCXI_PCSS_PR_MS_SHTPR.
  field-symbols: <S_SCSOP>         type        ZVCXI_P0SS_S_SCSOP.

*** Get First Standard Length Scores
  SUPER->GET_SCSOP_SHTPR( changing CT_SCSOP = CT_SCSOP ).

*** Continue if we need slot/score
  check ME->IS_SLOT_SCORE_ACTIVE( IF_IGNORE_SHTPR = ABAP_TRUE ) eq ABAP_TRUE.

*** If already defined delete old Cross Score Operation for Sheet Procurement
  delete CT_SCSOP where CSCOR eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS
                    and SCSOP eq C_SCSOP_SHTPR.

***------------------------------------------------------------------------------------------------
*** Check Provider for Specification
  check ME->R_GATE_SPEC is bound.

*** Check Provider for Sheet Dimension
  check ME->R_GATE_SHTDIM is bound and
        ME->R_SHTDIM      is bound.

*** Check Provider for Cutting
  check ME->R_DCT is bound.

*** Find Provider for Sheet Procurement
  LR_GATE_MS_SHTPR = ME->GET_PRVDR_MS_SHTPR( IR_GATE_SPEC = ME->R_GATE_SPEC ).
  check LR_GATE_MS_SHTPR is bound.

***------------------------------------------------------------------------------------------------
*** Collect all Provider
*** Add Provider for Product Dimension if available
  append ME->R_GATE_SHTDIM      to LT_PRVDR_SHTPR.
  if ME->R_GATE_PRODDIM is bound.
    append ME->R_GATE_PRODDIM   to LT_PRVDR_SHTPR.
  endif.
  append LR_GATE_MS_SHTPR       to LT_PRVDR_SHTPR.
  append ME->R_GATE             to LT_PRVDR_SHTPR.

***------------------------------------------------------------------------------------------------
*** Add Operation for Cross if SL/SC or Cutting is activated
  try.
      move LR_GATE_MS_SHTPR->R_CLSPR ?to LR_PR_MS_SHTPR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_MS_SHTPR.
  endtry.

  check LR_PR_MS_SHTPR               is bound     and
        LR_PR_MS_SHTPR->GET_FSLSC( ) eq ABAP_TRUE.

*** Start and add new one!!!
  append initial line to CT_SCSOP assigning <S_SCSOP>.

  <S_SCSOP>-SCSOP = C_SCSOP_SHTPR.
  <S_SCSOP>-SHTDI = 'B'.
  <S_SCSOP>-CSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS.
  if ME->GET_SOPCR( ) eq C_SCSOP_SHTPR.
    <S_SCSOP>-ACTIV = ABAP_TRUE.
*** If Score Operation is active add also right Score Provider
    LT_PRVDR_SCORE_C = ME->GET_PRVDR_SCORE( IR_GATE_SPEC  = ME->R_GATE_SPEC
                                            IF_CSCOR      = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS ).
    if LT_PRVDR_SCORE_C is not initial.
      append lines of LT_PRVDR_SCORE_C to LT_PRVDR_SHTPR.
    endif.
  endif.
  <S_SCSOP>-T_PRVDR = LT_PRVDR_SHTPR.

endmethod.
method GET_SCSOP_SLOT_SCORE.

  data:          LT_PRVDR_SLOT     type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_SCORE_C  type        /VCXI/VKSR_TT_GATE.
  field-symbols: <S_SCSOP>         type        ZVCXI_P0SS_S_SCSOP.

***------------------------------------------------------------------------------------------------
*** Check Provider for Specification
  check ME->R_GATE_SPEC is bound.

*** Check Provider for Sheet Dimension
  check ME->R_GATE_SHTDIM is bound.

*** Only relevant if Slot/Score is active
  check ME->IS_SLOT_SCORE_ACTIVE( ) eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Collect all Provider
  append ME->R_GATE_SHTDIM to LT_PRVDR_SLOT.
*** Add Provider for Product Dimension if available
  if ME->R_GATE_PRODDIM is bound.
    append ME->R_GATE_PRODDIM to LT_PRVDR_SLOT.
  endif.
  append ME->R_GATE    to LT_PRVDR_SLOT.

***------------------------------------------------------------------------------------------------
*** Add Operation for Width
  append initial line to CT_SCSOP assigning <S_SCSOP>.

  <S_SCSOP>-SCSOP   = C_SCSOP_SLOT_SCORE.
  <S_SCSOP>-SHTDI   = 'B'.
  <S_SCSOP>-CSCOR   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS.
  <S_SCSOP>-T_PRVDR = LT_PRVDR_SLOT.
  if ME->GET_SOPCR( ) eq C_SCSOP_SLOT_SCORE.
    <S_SCSOP>-ACTIV = ABAP_TRUE.
*** If Score Operation is active add also right Score Provider
    LT_PRVDR_SCORE_C = ME->GET_PRVDR_SCORE( IR_GATE_SPEC  = ME->R_GATE_SPEC
                                            IF_CSCOR      = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS ).
    if LT_PRVDR_SCORE_C is not initial.
      append lines of LT_PRVDR_SCORE_C to <S_SCSOP>-T_PRVDR.
    endif.
  endif.

endmethod.
method GET_SCSOP_SLOT_SCORE_MAN.

  data:          LT_PRVDR_SLOT     type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_SCORE_L  type        /VCXI/VKSR_TT_GATE,
                 LT_PRVDR_SCORE_C  type        /VCXI/VKSR_TT_GATE.
  field-symbols: <S_SCSOP>         type        ZVCXI_P0SS_S_SCSOP.

***------------------------------------------------------------------------------------------------
*** Check Provider for Specification
  check ME->R_GATE_SPEC is bound.

*** Check Provider for Sheet Dimension
  check ME->R_GATE_SHTDIM is bound.

*** Only relevant if Slot/Score is active
  check ME->IS_SLOT_SCORE_ACTIVE( ) eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Start Doing
  if IF_CSCOR eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
    check ME->GET_SOPLE( )          eq C_SCSOP_SLOT_SCORE or
          ME->GET_SOPLE( )          eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_SPLIT.

*** Collect all Provider
    append ME->R_GATE_SHTDIM to LT_PRVDR_SLOT.
*** Add Provider for Product Dimension if available
    if ME->R_GATE_PRODDIM is bound.
      append ME->R_GATE_PRODDIM to LT_PRVDR_SLOT.
    endif.
    append ME->R_GATE    to LT_PRVDR_SLOT.

*** Add Operation for Length
    append initial line to CT_SCSOP assigning <S_SCSOP>.

    <S_SCSOP>-SCSOP   = C_SCSOP_SLOT_SCORE.
    <S_SCSOP>-SHTDI   = 'A'.
    <S_SCSOP>-CSCOR   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
    <S_SCSOP>-T_PRVDR = LT_PRVDR_SLOT.
    if ME->GET_SOPLE( ) eq C_SCSOP_SLOT_SCORE.
      <S_SCSOP>-ACTIV = ABAP_TRUE.
*** If Score Operation is active add also right Score Provider
      LT_PRVDR_SCORE_L = ME->GET_PRVDR_SCORE( IR_GATE_SPEC  = ME->R_GATE_SPEC
                                              IF_CSCOR      = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH ).
      if LT_PRVDR_SCORE_L is not initial.
        append lines of LT_PRVDR_SCORE_L to <S_SCSOP>-T_PRVDR.
      endif.
    endif.
  endif.

endmethod.
method GET_VALID_INDIC.

  data:  LF_INDIC      type        CHAR30.
  data:  LS_TRIPS      type        ZVCXI_P0SS_S_TRIPS,
         LS_TRIPL      type        ZVCXI_P0SS_S_TRIPL.

*** Get Standard Seperators
  RT_INDIC = SUPER->GET_VALID_INDIC( IF_IGNORE_SCORE_C  = IF_IGNORE_SCORE_C
                                     IF_IGNORE_SCORE_L  = IF_IGNORE_SCORE_L
                                     IF_IGNORE_TAPE     = IF_IGNORE_TAPE
                                     IF_IGNORE_DIVISION = IF_IGNORE_DIVISION ).

*** Get Side Trim if SlotScore is active
  if IF_IGNORE_SCORE_L eq ABAP_FALSE.
    read table RT_INDIC with key TABLE_LINE = ME->F_TSCOR_CUT
                        transporting no fields.
    if SY-SUBRC ne 0.
      LS_TRIPS = ME->GET_TRIPS( ).
      if LS_TRIPS-TRIPS is not initial.
        move ME->F_TSCOR_CUT to LF_INDIC.
        collect LF_INDIC into RT_INDIC.
      endif.
    endif.
  endif.

*** Get Length Trim if SlotScore is active
  if IF_IGNORE_SCORE_C eq ABAP_FALSE.
    read table RT_INDIC with key TABLE_LINE = ME->F_TSCOR_CUT
                        transporting no fields.
    if SY-SUBRC ne 0.
      LS_TRIPL = ME->GET_TRIPL( ).
      if LS_TRIPL-TRIPL is not initial.
        move ME->F_TSCOR_CUT to LF_INDIC.
        collect LF_INDIC into RT_INDIC.
      endif.
    endif.
  endif.

endmethod.
method INIT_PTYPE_SLOT_SCORE.

  data:          LF_ATTVA         type          /VCXI/VKS_ATTVA,
                 LF_PTYPE         type          ZVCXI_P0S_PTYPE.
  data:          LS_ATTRI         type          /VCXI/VKS_S_ATTRI.
  data:          LT_ATTVA         type table of /VCXI/VKS_ATTVA.

***----------------------------------------------------------------------------
*** Get Product Type Trigger for Slot/Score (by Attribute)
  try.
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_PTYPE_SLOT_SCORE ).
    catch /VCXI/CX_CKX.
      clear LS_ATTRI.
  endtry.

  if LS_ATTRI is not initial.
    condense LS_ATTRI-ATTVA no-gaps.
    split LS_ATTRI-ATTVA at ',' into table LT_ATTVA.
    loop at LT_ATTVA into LF_ATTVA.
      move LF_ATTVA to LF_PTYPE.
      collect LF_PTYPE into ME->T_PTYPE_SLOT_SCORE.
    endloop.
  endif.

endmethod.
method IS_SLOT_SCORE_ACTIVE.

  data:          LF_PTYPE          type        ZVCXI_P0S_PTYPE.
  data:          LR_PR_SPEC        type ref to ZCL_VCXI_P0SS_PR_SPEC,
                 LR_GATE_MS_SHTPR  type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_SHTPR    type ref to ZCL_VCXI_PCSS_PR_MS_SHTPR.

*** Get Specification
  check ME->R_GATE_SPEC is bound.
  try.
      move ME->R_GATE_SPEC->R_CLSPR ?to LR_PR_SPEC.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC.
  endtry.

*** Get Product Type
  check LR_PR_SPEC is bound.
  LF_PTYPE = LR_PR_SPEC->GET_PTYPE( ).

***------------------------------------------------------------------------------------------------
*** Check if Product Type can activate Slot/Score Operation
  read table ME->T_PTYPE_SLOT_SCORE with key TABLE_LINE = LF_PTYPE
                                    transporting no fields.

  check SY-SUBRC = 0.

*** Find Provider for Sheet Procurement
  if IF_IGNORE_SHTPR eq ABAP_FALSE.
    LR_GATE_MS_SHTPR = ME->GET_PRVDR_MS_SHTPR( IR_GATE_SPEC = ME->R_GATE_SPEC ).
    if LR_GATE_MS_SHTPR is bound.

***------------------------------------------------------------------------------------------------
***   Slot and Score is not relevant if we have it on the Sheet Procurement
      try.
          move LR_GATE_MS_SHTPR->R_CLSPR ?to LR_PR_MS_SHTPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_SHTPR.
      endtry.

      check LR_PR_MS_SHTPR               is bound     and
            LR_PR_MS_SHTPR->GET_FSLSC( ) eq ABAP_FALSE.
    endif.
  endif.

  move ABAP_TRUE to RF_ACTIVE.

endmethod.
