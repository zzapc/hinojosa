
class ZCL_VCXI_PFSS_PR_AREA_WGT_UCB definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PF_AREA_WGT_UCB type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_AREA_WGT_UCB'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAG
    returning
      value(RS_ABLAG) type ZVCXI_P0SS_S_ABLAG
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAN
    returning
      value(RS_ABLAN) type ZVCXI_P0SS_S_ABLAN
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAS
    returning
      value(RS_ABLAS) type ZVCXI_P0SS_S_ABLAS
    raising
      /VCXI/CX_CKX .
  methods GET_AREAO
    returning
      value(RS_AREAO) type ZVCXI_P0SS_S_AREAO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRGO
    returning
      value(RS_WDRGO) type ZVCXI_P0SS_S_WDRGO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRGP
    returning
      value(RS_WDRGP) type ZVCXI_P0SS_S_WDRGP
    raising
      /VCXI/CX_CKX .
  methods GET_WDRNO
    returning
      value(RS_WDRNO) type ZVCXI_P0SS_S_WDRNO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRNP
    returning
      value(RS_WDRNP) type ZVCXI_P0SS_S_WDRNP
    raising
      /VCXI/CX_CKX .
  methods GET_WDRSO
    returning
      value(RS_WDRSO) type ZVCXI_P0SS_S_WDRSO
    raising
      /VCXI/CX_CKX .
  methods GET_WDRSP
    returning
      value(RS_WDRSP) type ZVCXI_P0SS_S_WDRSP
    raising
      /VCXI/CX_CKX .
  methods GET_WWEGO
    returning
      value(RS_WWEGO) type ZVCXI_P0SS_S_WWEGO
    raising
      /VCXI/CX_CKX .
  methods GET_WWEGP
    returning
      value(RS_WWEGP) type ZVCXI_P0SS_S_WWEGP
    raising
      /VCXI/CX_CKX .
  methods GET_WWENO
    returning
      value(RS_WWENO) type ZVCXI_P0SS_S_WWENO
    raising
      /VCXI/CX_CKX .
  methods GET_WWENP
    returning
      value(RS_WWENP) type ZVCXI_P0SS_S_WWENP
    raising
      /VCXI/CX_CKX .
  methods GET_WWESO
    returning
      value(RS_WWESO) type ZVCXI_P0SS_S_WWESO
    raising
      /VCXI/CX_CKX .
  methods GET_WWESP
    returning
      value(RS_WWESP) type ZVCXI_P0SS_S_WWESP
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WWETW type /VCXI/VKSC_IEVNT value 'RECALC_WWETW'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WDRYW type /VCXI/VKSC_IEVNT value 'RECALC_WDRYW'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_O_WWENP_CHANGED type /VCXI/VKSC_IEVNT value 'WWENP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WWENO_CHANGED type /VCXI/VKSC_IEVNT value 'WWENO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRNP_CHANGED type /VCXI/VKSC_IEVNT value 'WDRNP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WDRNO_CHANGED type /VCXI/VKSC_IEVNT value 'WDRNO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAG_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAG_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAN_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAN_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAS_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AREAO_CHANGED type /VCXI/VKSC_IEVNT value 'AREAO_CHANGED'. "#EC NOTEXT
  constants C_PARID_WWENP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWENP'. "#EC NOTEXT
  constants C_PARID_WWENO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWENO'. "#EC NOTEXT
  constants C_PARID_WDRNP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRNP'. "#EC NOTEXT
  constants C_PARID_WDRNO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRNO'. "#EC NOTEXT
  constants C_PARID_ABLAG type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAG'. "#EC NOTEXT
  constants C_PARID_ABLAN type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAN'. "#EC NOTEXT
  constants C_PARID_ABLAS type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAS'. "#EC NOTEXT
  constants C_PARID_AREAO type /VCXI/VKS_PARID value 'ZVCXI_P0_AREAO'. "#EC NOTEXT
  data R_PR_SPEC_UCB type ref to ZCL_VCXI_PFSS_PR_SPEC_UCB .
  constants C_PARID_WWESP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWESP'. "#EC NOTEXT
  constants C_PARID_WWESO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWESO'. "#EC NOTEXT
  constants C_PARID_WDRSP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRSP'. "#EC NOTEXT
  constants C_PARID_WDRSO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRSO'. "#EC NOTEXT
  constants C_PARID_WWEGP type /VCXI/VKS_PARID value 'ZVCXI_P0_WWEGP'. "#EC NOTEXT
  constants C_PARID_WWEGO type /VCXI/VKS_PARID value 'ZVCXI_P0_WWEGO'. "#EC NOTEXT
  constants C_PARID_WDRGP type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRGP'. "#EC NOTEXT
  constants C_PARID_WDRGO type /VCXI/VKS_PARID value 'ZVCXI_P0_WDRGO'. "#EC NOTEXT

  methods CALC_WDRGO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRGP
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRSO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WDRSP
    raising
      /VCXI/CX_CKX .
  methods CALC_WWEGO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WWEGP
    raising
      /VCXI/CX_CKX .
  methods CALC_WWESO
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WWESP
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SPEC
    exporting
      !ES_GRAMM type ZVCXI_P0SS_S_GRAMM
      !ES_ABLAS type ZVCXI_P0SS_S_ABLAS
    raising
      /VCXI/CX_CKX .
  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods GET_WDRYW
    importing
      !IS_WDRYA type ZVCXI_P0SS_S_WDRYA
    returning
      value(RS_WDRYW) type ZVCXI_P0SS_S_WDRYW
    raising
      /VCXI/CX_CKX .
  methods GET_WWETW
    importing
      !IS_WWETA type ZVCXI_P0SS_S_WWETA
    returning
      value(RS_WWETW) type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AREA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WDRYW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WWETW
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAG
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAG type ZVCXI_P0SS_S_ABLAG
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAN
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAN type ZVCXI_P0SS_S_ABLAN
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAS
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAS type ZVCXI_P0SS_S_ABLAS
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_AREAO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AREAO type ZVCXI_P0SS_S_AREAO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRGO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRGO type ZVCXI_P0SS_S_WDRGO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRGP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRGP type ZVCXI_P0SS_S_WDRGP
    raising
      /VCXI/CX_CKX .
  methods SET_WDRNO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRNO type ZVCXI_P0SS_S_WDRNO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRNP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRNP type ZVCXI_P0SS_S_WDRNP
    raising
      /VCXI/CX_CKX .
  methods SET_WDRSO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRSO type ZVCXI_P0SS_S_WDRSO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WDRSP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WDRSP type ZVCXI_P0SS_S_WDRSP
    raising
      /VCXI/CX_CKX .
  methods SET_WWEGO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWEGO type ZVCXI_P0SS_S_WWEGO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWEGP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWEGP type ZVCXI_P0SS_S_WWEGP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWENO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWENO type ZVCXI_P0SS_S_WWENO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWENP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWENP type ZVCXI_P0SS_S_WWENP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWESO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWESO type ZVCXI_P0SS_S_WWESO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WWESP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WWESP type ZVCXI_P0SS_S_WWESP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PFSS_PR_AREA_WGT_UCB definition
class ZCL_VCXI_PFSS_PR_AREA_WGT_UCB implementation.
method CALC_WDRGO.

  data: LS_WDRGP     type ZVCXI_P0SS_S_WDRGP,
        LS_WDRGO     type ZVCXI_P0SS_S_WDRGO.

  LS_WDRGP = ME->GET_WDRGP( ).

  LS_WDRGO-WDRGO     = IS_OPQTY-OPQTY * LS_WDRGP-WDRGP.
  LS_WDRGO-WDRGO_UOM = LS_WDRGP-WDRGP_UOM.

  ME->SET_WDRGO( IS_WDRGO = LS_WDRGO ).

endmethod.
method CALC_WDRGP.

  data: LS_WDRGP     type ZVCXI_P0SS_S_WDRGP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_ABLAG     type ZVCXI_P0SS_S_ABLAG,
        LS_WDRYA     type ZVCXI_P0SS_S_WDRYA.

*** Get Unit of Net Weight
  LS_WDRGP = ME->GET_WDRGP( ).
  LS_ABLAG = ME->GET_ABLAG( ).

**** Get Weight of Gross Blank Area
  LS_WDRYA-WDRYA     = LS_ABLAG-ABLAG.
  LS_WDRYA-WDRYA_UOM = LS_ABLAG-ABLAG_UOM.
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_WDRYA ).

  LS_WDRGP-WDRGP     = LS_WDRYW-WDRYW.
  LS_WDRGP-WDRGP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRGP( IS_WDRGP = LS_WDRGP ).

endmethod.
method CALC_WDRSO.

  data: LS_WDRSP     type ZVCXI_P0SS_S_WDRSP,
        LS_WDRSO     type ZVCXI_P0SS_S_WDRSO.

  LS_WDRSP = ME->GET_WDRSP( ).

  LS_WDRSO-WDRSO     = IS_OPQTY-OPQTY * LS_WDRSP-WDRSP.
  LS_WDRSO-WDRSO_UOM = LS_WDRSP-WDRSP_UOM.

  ME->SET_WDRSO( IS_WDRSO = LS_WDRSO ).

endmethod.
method CALC_WDRSP.

  data: LS_WDRSP     type ZVCXI_P0SS_S_WDRSP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_ABLAS     type ZVCXI_P0SS_S_ABLAS,
        LS_WDRYA     type ZVCXI_P0SS_S_WDRYA.

*** Get Unit of Sold Weight
  LS_WDRSP = ME->GET_WDRSP( ).
  LS_ABLAS = ME->GET_ABLAS( ).

**** Get Weight of Sold Blank Area
  LS_WDRYA-WDRYA     = LS_ABLAS-ABLAS.
  LS_WDRYA-WDRYA_UOM = LS_ABLAS-ABLAS_UOM.
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_WDRYA ).

  LS_WDRSP-WDRSP     = LS_WDRYW-WDRYW.
  LS_WDRSP-WDRSP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRSP( IS_WDRSP = LS_WDRSP ).

endmethod.
method CALC_WWEGO.

  data: LS_WWEGP     type ZVCXI_P0SS_S_WWEGP,
        LS_WWEGO     type ZVCXI_P0SS_S_WWEGO.

  LS_WWEGP = ME->GET_WWEGP( ).

  LS_WWEGO-WWEGO     = IS_OPQTY-OPQTY * LS_WWEGP-WWEGP.
  LS_WWEGO-WWEGO_UOM = LS_WWEGP-WWEGP_UOM.

  ME->SET_WWEGO( IS_WWEGO = LS_WWEGO ).

endmethod.
method CALC_WWEGP.

  data: LS_ABLAG     type ZVCXI_P0SS_S_ABLAG,
        LS_WWETA     type ZVCXI_P0SS_S_WWETA,
        LS_WWEGP     type ZVCXI_P0SS_S_WWEGP,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Gross Blank Area
  LS_ABLAG = ME->GET_ABLAG( ).

*** Get Wet Weight Gross Blank Area
  LS_WWETA-WWETA      = LS_ABLAG-ABLAG.
  LS_WWETA-WWETA_UOM  = LS_ABLAG-ABLAG_UOM.
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_WWETA ).

*** Get Gross Weight per Piece
  LS_WWEGP-WWEGP     = LS_WWETW-WWETW.
  LS_WWEGP-WWEGP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWEGP( IS_WWEGP = LS_WWEGP ).

endmethod.
method CALC_WWESO.

  data: LS_WWESP     type ZVCXI_P0SS_S_WWESP,
        LS_WWESO     type ZVCXI_P0SS_S_WWESO.

  LS_WWESP = ME->GET_WWESP( ).

  LS_WWESO-WWESO     = IS_OPQTY-OPQTY * LS_WWESP-WWESP.
  LS_WWESO-WWESO_UOM = LS_WWESP-WWESP_UOM.

  ME->SET_WWESO( IS_WWESO = LS_WWESO ).

endmethod.
method CALC_WWESP.

  data: LS_ABLAS     type ZVCXI_P0SS_S_ABLAS,
        LS_WWESP     type ZVCXI_P0SS_S_WWESP,
        LS_WWETA     type ZVCXI_P0SS_S_WWETA,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Sold Blank Area
  LS_ABLAS = ME->GET_ABLAS( ).

*** Get Wet Weight Sold Blank Area
  LS_WWETA-WWETA      = LS_ABLAS-ABLAS.
  LS_WWETA-WWETA_UOM  = LS_ABLAS-ABLAS_UOM.
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_WWETA ).

*** Get Sold Weight per Piece
  LS_WWESP-WWESP     = LS_WWETW-WWETW.
  LS_WWESP-WWESP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWESP( IS_WWESP = LS_WWESP ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_ABLAG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).
  move LS_PARAM-ATFLV to RS_ABLAG-ABLAG.
  move LS_PARAM-UNIT  to RS_ABLAG-ABLAG_UOM.

endmethod.
method GET_ABLAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).
  move LS_PARAM-ATFLV to RS_ABLAN-ABLAN.
  move LS_PARAM-UNIT  to RS_ABLAN-ABLAN_UOM.

endmethod.
method GET_ABLAS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAS ).
  move LS_PARAM-ATFLV to RS_ABLAS-ABLAS.
  move LS_PARAM-UNIT  to RS_ABLAS-ABLAS_UOM.

endmethod.
method GET_AREAO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).
  move LS_PARAM-ATFLV to RS_AREAO-AREAO.
  move LS_PARAM-UNIT  to RS_AREAO-AREAO_UOM.

endmethod.
method GET_DETAIL_SPEC.

  data: LS_AGGRA     type ZVCXI_PFSS_S_AGGRA,
        LS_INGRA     type ZVCXI_PFSS_S_INGRA.

  check ME->R_PR_SPEC_UCB is bound.

***--------------------------------------------------------------------------------------
*** Calculate Sold Blank Area
  if ES_ABLAS is requested.

    LS_AGGRA = ME->R_PR_SPEC_UCB->GET_AGGRA( ).
    LS_INGRA = ME->R_PR_SPEC_UCB->GET_INGRA( ).

    ES_ABLAS = ME->GET_ABLAS( ).

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_AGGRA-AGGRA
        IF_CALCV_UOM_1 = LS_AGGRA-AGGRA_UOM
        IF_CALCV_2     = LS_INGRA-INGRA
        IF_CALCV_UOM_2 = LS_INGRA-INGRA_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
        IF_UOM         = ES_ABLAS-ABLAS_UOM
      importing
        EF_CALCV       = ES_ABLAS-ABLAS
        EF_CALCV_UOM   = ES_ABLAS-ABLAS_UOM ).

  endif.

***--------------------------------------------------------------------------------------
*** Get Grammage
  if ES_GRAMM is requested.
    ES_GRAMM = ME->R_PR_SPEC_UCB->GET_GRAMM( ).
  endif.

endmethod.
method GET_OPQTY.

  data:  LS_QITEM         type        ZVCXI_XCSS_S_QITEM.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QITEM( importing ES_QITEM_SELF = LS_QITEM ).
    move LS_QITEM-QITEM     to RS_OPQTY-OPQTY.
    move LS_QITEM-QITEM_UOM to RS_OPQTY-OPQTY_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY to RS_OPQTY.
  endif.

endmethod.
method GET_STATUS.

  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_WDRNP        type        ZVCXI_P0SS_S_WDRNP,
         LS_WWENP        type        ZVCXI_P0SS_S_WWENP.

  RF_ELMST = SUPER->GET_STATUS( ).

***---------------------------------------------------------------------------------------------
*** Check Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  if LS_ABLAN-ABLAN is initial
  or LS_ABLAN-ABLAN le 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endif.

***---------------------------------------------------------------------------------------------
*** Check Dry Weight per Piece
  LS_WDRNP = ME->GET_WDRNP( ).
  if LS_WDRNP-WDRNP is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endif.

***---------------------------------------------------------------------------------------------
*** Check Wet Weight per Piece
  LS_WWENP = ME->GET_WWENP( ).
  if LS_WWENP-WWENP is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  endif.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_WDRNP        type        ZVCXI_P0SS_S_WDRNP,
         LS_WWENP        type        ZVCXI_P0SS_S_WWENP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***-----------------------------------------------------------------------------------
*** Check Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  if LS_ABLAN-ABLAN le 0.
*** Check Dimensions. Net Blank Area can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '101' ).
  else.
*** Net Blank Area calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '102' ).
  endif.

***-----------------------------------------------------------------------------------
*** Check Dry Weight
  LS_WDRNP = ME->GET_WDRNP( ).
  if LS_WDRNP-WDRNP is initial.
*** Dry Weight can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '103' ).
  else.
*** Dry Weight calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '104' ).
  endif.

***-----------------------------------------------------------------------------------
*** Check Wet Weight
  LS_WWENP = ME->GET_WWENP( ).
  if LS_WWENP-WWENP is initial.
*** Wet Weight can't be calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '105' ).
  else.
*** Wet Weight calculated.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '106' ).
  endif.

endmethod.
method GET_WDRGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGO ).
  move LS_PARAM-ATFLV to RS_WDRGO-WDRGO.
  move LS_PARAM-UNIT  to RS_WDRGO-WDRGO_UOM.

endmethod.
method GET_WDRGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGP ).
  move LS_PARAM-ATFLV to RS_WDRGP-WDRGP.
  move LS_PARAM-UNIT  to RS_WDRGP-WDRGP_UOM.

endmethod.
method GET_WDRNO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNO ).
  move LS_PARAM-ATFLV to RS_WDRNO-WDRNO.
  move LS_PARAM-UNIT  to RS_WDRNO-WDRNO_UOM.

endmethod.
method GET_WDRNP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNP ).
  move LS_PARAM-ATFLV to RS_WDRNP-WDRNP.
  move LS_PARAM-UNIT  to RS_WDRNP-WDRNP_UOM.

endmethod.
method GET_WDRSO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSO ).
  move LS_PARAM-ATFLV to RS_WDRSO-WDRSO.
  move LS_PARAM-UNIT  to RS_WDRSO-WDRSO_UOM.

endmethod.
method GET_WDRSP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSP ).
  move LS_PARAM-ATFLV to RS_WDRSP-WDRSP.
  move LS_PARAM-UNIT  to RS_WDRSP-WDRSP_UOM.

endmethod.
method GET_WDRYW.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM.

***--------------------------------------------------------------------------------------
*** Get Specification Details
  ME->GET_DETAIL_SPEC( importing ES_GRAMM = LS_GRAMM ).

  check LS_GRAMM is not initial.

*** Calculate weight per requested Area
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_GRAMM-GRAMM
                                                      IF_CALCV_UOM_1 = LS_GRAMM-GRAMM_UOM
                                                      IF_CALCV_2     = IS_WDRYA-WDRYA
                                                      IF_CALCV_UOM_2 = IS_WDRYA-WDRYA_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                            importing EF_CALCV       = RS_WDRYW-WDRYW
                                                      EF_CALCV_UOM   = RS_WDRYW-WDRYW_UOM ).

endmethod.
method GET_WWEGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGO ).
  move LS_PARAM-ATFLV to RS_WWEGO-WWEGO.
  move LS_PARAM-UNIT  to RS_WWEGO-WWEGO_UOM.

endmethod.
method GET_WWEGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGP ).
  move LS_PARAM-ATFLV to RS_WWEGP-WWEGP.
  move LS_PARAM-UNIT  to RS_WWEGP-WWEGP_UOM.

endmethod.
method GET_WWENO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENO ).
  move LS_PARAM-ATFLV to RS_WWENO-WWENO.
  move LS_PARAM-UNIT  to RS_WWENO-WWENO_UOM.

endmethod.
method GET_WWENP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENP ).
  move LS_PARAM-ATFLV to RS_WWENP-WWENP.
  move LS_PARAM-UNIT  to RS_WWENP-WWENP_UOM.

endmethod.
method GET_WWESO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESO ).
  move LS_PARAM-ATFLV to RS_WWESO-WWESO.
  move LS_PARAM-UNIT  to RS_WWESO-WWESO_UOM.


endmethod.
method GET_WWESP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESP ).
  move LS_PARAM-ATFLV to RS_WWESP-WWESP.
  move LS_PARAM-UNIT  to RS_WWESP-WWESP_UOM.

endmethod.
method GET_WWETW.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM.

***--------------------------------------------------------------------------------------
*** Get Specification Details
  ME->GET_DETAIL_SPEC( importing ES_GRAMM = LS_GRAMM ).

  check LS_GRAMM is not initial.

*** Calculate weight per requested Area
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_GRAMM-GRAMM
                                                      IF_CALCV_UOM_1 = LS_GRAMM-GRAMM_UOM
                                                      IF_CALCV_2     = IS_WWETA-WWETA
                                                      IF_CALCV_UOM_2 = IS_WWETA-WWETA_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                            importing EF_CALCV       = RS_WWETW-WWETW
                                                      EF_CALCV_UOM   = RS_WWETW-WWETW_UOM ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_AREA.
      ME->HANDLE_RECALC_AREA( ).

    when C_IEVNT_I_RECALC_WDRYW.
      ME->HANDLE_RECALC_WDRYW( ).

    when C_IEVNT_I_RECALC_WWETW.
      ME->HANDLE_RECALC_WWETW( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC_UCB.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if ME->R_PR_SPEC_UCB is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_RECALC_AREA.

  data:          LS_ABLAS      type        ZVCXI_P0SS_S_ABLAS,
                 LS_ABLAG      type        ZVCXI_P0SS_S_ABLAG,
                 LS_ABLAN      type        ZVCXI_P0SS_S_ABLAN,
                 LS_AREAO      type        ZVCXI_P0SS_S_AREAO,
                 LS_OPQTY      type        /VCXI/VSMR_S_OPQTY.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_AREAO>     type        ZVCXI_P0SS_AREAO.

***--------------------------------------------------------------------------------------
*** Get Specification Details
  ME->GET_DETAIL_SPEC( importing ES_ABLAS = LS_ABLAS ).

***--------------------------------------------------------------------------------------
*** Set Sold Blank Area
  ME->SET_ABLAS( IS_ABLAS = LS_ABLAS ).

***--------------------------------------------------------------------------------------
*** Set Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  LS_ABLAN-ABLAN = LS_ABLAS-ABLAS.

*** Make sure we do not get a negative value
  if LS_ABLAN-ABLAN < 0.
    move 0 to LS_ABLAN-ABLAN.
  endif.

  ME->SET_ABLAN( IS_ABLAN = LS_ABLAN ).

***--------------------------------------------------------------------------------------
*** Set Gross Blank Area
  LS_ABLAG       = ME->GET_ABLAG( ).
  LS_ABLAG-ABLAG = LS_ABLAS-ABLAS.
  ME->SET_ABLAG( IS_ABLAG = LS_ABLAG ).

***--------------------------------------------------------------------------------------
*** Set Area per Order
  LS_AREAO = ME->GET_AREAO( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_AREAO-AREAO = LS_OPQTY-OPQTY * LS_ABLAN-ABLAN.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_AREAO-AREAO ).
      assign LR_DATA->* to <F_AREAO>.
      LS_AREAO-AREAO = <F_AREAO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_AREAO-AREAO < 0.
    move 0 to LS_AREAO-AREAO.
  endif.

  ME->SET_AREAO( IS_AREAO = LS_AREAO ).

endmethod.
method HANDLE_RECALC_WDRYW.

  data: LS_WDRNP     type ZVCXI_P0SS_S_WDRNP,
        LS_WDRNO     type ZVCXI_P0SS_S_WDRNO,
        LS_ABLAN     type ZVCXI_P0SS_S_ABLAN,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Dry Weight per Piece
  LS_WDRNP = ME->GET_WDRNP( ).
  LS_ABLAN = ME->GET_ABLAN( ).

*** Get Net Dry Weight per Net Blank Area
  LS_WDRYW = ME->GET_WDRYW( IS_WDRYA = LS_ABLAN ).

  LS_WDRNP-WDRNP     = LS_WDRYW-WDRYW.
  LS_WDRNP-WDRNP_UOM = LS_WDRYW-WDRYW_UOM.

*** Make sure we do not have a negative value
  if LS_WDRNP-WDRNP < 0.
    move 0 to LS_WDRNP-WDRNP.
  endif.

*** Set Net Dry Weight per Piece
  ME->SET_WDRNP( IS_WDRNP = LS_WDRNP ).

*** 2. Step: Set Dry Weight per Order
  LS_WDRNO = ME->GET_WDRNO( ).

***   Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

  if LS_WDRNP-WDRNP > 0.
*** Get Net Dry Weight per Order
    LS_WDRNO-WDRNO = LS_OPQTY-OPQTY * LS_WDRNP-WDRNP.
  else.
    move 0 to LS_WDRNO-WDRNO.
  endif.

*** Set Net Dry Weight per Order
  ME->SET_WDRNO( IS_WDRNO = LS_WDRNO ).

*** Calc/Set Sold Dry Weight per Piece/Order
  ME->CALC_WDRSP( ).
  ME->CALC_WDRSO( IS_OPQTY = LS_OPQTY ).

*** Calc/Set Gross Dry Weight per Piece/Order
  ME->CALC_WDRGP( ).
  ME->CALC_WDRGO( IS_OPQTY = LS_OPQTY ).

endmethod.
method HANDLE_RECALC_WWETW.

  data: LS_WWENP     type ZVCXI_P0SS_S_WWENP,
        LS_WWENO     type ZVCXI_P0SS_S_WWENO,
        LS_ABLAN     type ZVCXI_P0SS_S_ABLAN,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Wet Weight per Piece
  LS_WWENP = ME->GET_WWENP( ).
  LS_ABLAN = ME->GET_ABLAN( ).

*** Get Wet Weight per Net Blank Area
  LS_WWETW = ME->GET_WWETW( IS_WWETA = LS_ABLAN ).

  LS_WWENP-WWENP     = LS_WWETW-WWETW.
  LS_WWENP-WWENP_UOM = LS_WWETW-WWETW_UOM.

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP < 0.
    move 0 to LS_WWENP-WWENP.
  endif.

*** Set Net Wet Weight per Piece
  ME->SET_WWENP( IS_WWENP = LS_WWENP ).

*** 2. Step: Wet Weight per Order
  LS_WWENO = ME->GET_WWENO( ).

*** Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP > 0.
    LS_WWENO-WWENO = LS_OPQTY-OPQTY * LS_WWENP-WWENP.
  else.
    move 0 to LS_WWENO-WWENO.
  endif.

*** Set Net Wet Weight per Order
  ME->SET_WWENO( IS_WWENO = LS_WWENO ).

*** Calc/Set Sold Dry Weight per Piece/Order
  ME->CALC_WWESP( ).
  ME->CALC_WWESO( IS_OPQTY = LS_OPQTY ).

*** Calc/Set Gross Dry Weight per Piece/Order
  ME->CALC_WWEGP( ).
  ME->CALC_WWEGO( IS_OPQTY = LS_OPQTY ).

endmethod.
method SET_ABLAG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).

  move IS_ABLAG-ABLAG     to LS_PARAM-ATFLV.
  move IS_ABLAG-ABLAG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAG_CHANGED ).
  endif.

endmethod.
method SET_ABLAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).

  move IS_ABLAN-ABLAN     to LS_PARAM-ATFLV.
  move IS_ABLAN-ABLAN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAN_CHANGED ).
  endif.

endmethod.
method SET_ABLAS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAS ).

  move IS_ABLAS-ABLAS     to LS_PARAM-ATFLV.
  move IS_ABLAS-ABLAS_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAS_CHANGED ).
  endif.

endmethod.
method SET_AREAO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).

  move IS_AREAO-AREAO     to LS_PARAM-ATFLV.
  move IS_AREAO-AREAO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREAO_CHANGED ).
  endif.

endmethod.
method SET_WDRGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGO ).

  move IS_WDRGO-WDRGO     to LS_PARAM-ATFLV.
  move IS_WDRGO-WDRGO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRGP ).

  move IS_WDRGP-WDRGP     to LS_PARAM-ATFLV.
  move IS_WDRGP-WDRGP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRNO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNO ).

  move IS_WDRNO-WDRNO     to LS_PARAM-ATFLV.
  move IS_WDRNO-WDRNO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRNO_CHANGED ).
  endif.

endmethod.
method SET_WDRNP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRNP ).

  move IS_WDRNP-WDRNP     to LS_PARAM-ATFLV.
  move IS_WDRNP-WDRNP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRNP_CHANGED ).
  endif.

endmethod.
method SET_WDRSO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSO ).

  move IS_WDRSO-WDRSO     to LS_PARAM-ATFLV.
  move IS_WDRSO-WDRSO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WDRSP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WDRSP ).

  move IS_WDRSP-WDRSP     to LS_PARAM-ATFLV.
  move IS_WDRSP-WDRSP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWEGO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGO ).

  move IS_WWEGO-WWEGO     to LS_PARAM-ATFLV.
  move IS_WWEGO-WWEGO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWEGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWEGP ).

  move IS_WWEGP-WWEGP     to LS_PARAM-ATFLV.
  move IS_WWEGP-WWEGP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWENO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENO ).

  move IS_WWENO-WWENO     to LS_PARAM-ATFLV.
  move IS_WWENO-WWENO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWENO_CHANGED ).
  endif.

endmethod.
method SET_WWENP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWENP ).

  move IS_WWENP-WWENP     to LS_PARAM-ATFLV.
  move IS_WWENP-WWENP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWENP_CHANGED ).
  endif.

endmethod.
method SET_WWESO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESO ).

  move IS_WWESO-WWESO     to LS_PARAM-ATFLV.
  move IS_WWESO-WWESO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WWESP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WWESP ).

  move IS_WWESP-WWESP     to LS_PARAM-ATFLV.
  move IS_WWESP-WWESP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
