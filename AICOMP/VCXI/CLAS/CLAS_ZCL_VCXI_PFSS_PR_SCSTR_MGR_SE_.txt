
class ZCL_VCXI_PFSS_PR_SCSTR_MGR_SE definition
  public
  inheriting from ZCL_VCXI_PFSS_PR_SCSTR_MGR
  create public .

public section.

  data F_NO_CALC type ABAP_BOOL read-only .
  constants C_IPRVT_PF_SCSTR_MGR_SE type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_SCSTR_MGR_SE' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods CHECK_NO_CALC
    redefinition .
  methods GET_PTYPE
    redefinition .
  methods NO_SCORES
    redefinition .
protected section.

  methods INIT_CALC_INACTIVE
    raising
      /VCXI/CX_CKX .

  methods INIT_PRVDR_SPEC
    redefinition .
  methods GET_PRVDR_SCORE
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSS_PR_SCSTR_MGR_SE definition
class ZCL_VCXI_PFSS_PR_SCSTR_MGR_SE implementation.
  method CHECK_NO_CALC.

    case IF_CSCOR.
      when ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
        if ME->GET_SOPLE( ) ne ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING.
          move ABAP_TRUE to RF_NO_CALC.
        endif.

      when ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS.
        if ME->GET_SOPCR( ) ne ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING.
          move ABAP_TRUE to RF_NO_CALC.
        endif.
    endcase.

*** If we have no Components -> No Calculation can be done expect Cutting
    if ME->F_NO_CALC eq ABAP_TRUE and
       IF_SCSOP      ne ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING.
      move ME->F_NO_CALC to RF_NO_CALC.
    endif.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Calculation is inactive flag
  ME->INIT_CALC_INACTIVE( ).

endmethod.
  method GET_PRVDR_SCORE.

    data:  LT_GATE_SCORE_LAST  type        /VCXI/VKSR_TT_GATE.

    RT_GATE_SCORE = SUPER->GET_PRVDR_SCORE( IR_GATE_SPEC  = IR_GATE_SPEC
                                            IF_CSCOR      = IF_CSCOR ).

    LT_GATE_SCORE_LAST = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_LAST_SCORE( IT_GATE_SCORE = RT_GATE_SCORE
                                                                   IF_CSCOR      = IF_CSCOR ).

*** If we have more Scores which are only the last score -> clear and exit
    check LINES( LT_GATE_SCORE_LAST ) eq LINES( RT_GATE_SCORE ).
    clear: RT_GATE_SCORE.

  endmethod.
  method GET_PTYPE.

    data: LR_PR_SPEC_SE type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

    if ME->R_GATE_SPEC is not bound.
      ME->HANDLE_INIT_REFERENCES( ).
    endif.

    check ME->R_GATE_SPEC is bound.
    try.
        move ME->R_GATE_SPEC->R_CLSPR ?to LR_PR_SPEC_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SPEC_SE.
    endtry.

    check LR_PR_SPEC_SE is bound.
    RF_PTYPE = LR_PR_SPEC_SE->GET_PTYPE( ).

  endmethod.
method INIT_CALC_INACTIVE.

  check ME->R_GATE is bound.
  if ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ) is initial.

*** Component CO -> No Calcualtion is Possible
    ME->F_NO_CALC = ABAP_TRUE.
  endif.

endmethod.
  method INIT_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification CR
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
      read table LT_GATE into ME->R_GATE_SPEC index 1.
    endif.

    if ME->R_GATE_SPEC is not bound.
***   Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
          IF_MSGV2 = ME->R_GATE->F_ID ).
    endif.

  endmethod.
  method NO_SCORES.

*** Do only check if we have the calculation active!
    if ME->F_NO_CALC eq ABAP_FALSE.
      RF_RETURN = SUPER->NO_SCORES( IF_CSCOR = IF_CSCOR ).
    endif.

  endmethod.
