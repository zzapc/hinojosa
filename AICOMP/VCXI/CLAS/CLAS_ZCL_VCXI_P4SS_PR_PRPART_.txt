
class ZCL_VCXI_P4SS_PR_PRPART definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XPART
  create public .

public section.

  interfaces ZIF_VCXI_P3SS_APINFO .

  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'PRODH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P4_PRPART type /VCXI/VKSC_IPRVT value 'ZVCXI_P4SS_PRPART' ##NO_TEXT.
  constants C_PARID_FPTOS type /VCXI/VKS_PARID value 'ZVCXI_XC_FPTOS' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_PRODH type /VCXI/VKS_PARID value 'ZVCXI_XC_PRODH' ##NO_TEXT.
  constants C_PARID_PURCH type /VCXI/VKS_PARID value 'ZVCXI_XC_PURCH' ##NO_TEXT.
  constants C_PURCH_DIRECT type ZVCXI_XCS_PURCH value 'D' ##NO_TEXT.
  constants C_PURCH_DIRECT_PRICE type ZVCXI_XCS_PURCH value 'X' ##NO_TEXT.
  constants C_PURCH_STOCK type ZVCXI_XCS_PURCH value SPACE ##NO_TEXT.

  methods GET_PRVDR_PRDTL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PRDTL) type ref to ZIF_VCXI_P4SS_PRDTL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPLR
    importing
      !IF_CREATE type ABAP_BOOL default ABAP_FALSE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPLR) type ref to ZCL_VCXI_P4SS_PR_SPLR
    raising
      /VCXI/CX_CKX .
  methods GET_PURCH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PURCH) type ZVCXI_XCS_PURCH
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_MAKTX type MAKTX
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_PURCH
    importing
      !IF_PURCH type ZVCXI_XCS_PURCH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SANKA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SANKA) type SANKA
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FPTOS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPTOS) type ZVCXI_XCS_FPTOS
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPTOS
    importing
      !IF_FPTOS type ZVCXI_XCS_FPTOS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_HNDDIM
    redefinition .
  methods GET_MFINFO
    redefinition .
  methods GET_PRODH
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_IEVNT_I_INIT_SPLR type /VCXI/VKSC_IEVNT value 'INIT_SPLR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_APINFO type /VCXI/VKSC_IEVNT value 'RECALC_APINFO' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  data R_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR .

  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_SPLR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P4SS_PR_PRPART definition
class ZCL_VCXI_P4SS_PR_PRPART implementation.
  method CHECK_MAKTX.

***------------------------------------------------------------------------------------------------
    if ME->GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '021' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '022' ).
      endif.
    endif.

  endmethod.
  method CHECK_MATNR.

*** Check Material Number
    if ME->GET_MATNR( ) is not initial.
***   Check Material Instance was created
      if ME->R_CUST_MATNR is not bound.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Instance was not created.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '002' ).
        endif.

***   Check Material Number is valid
      elseif ME->R_CUST_MATNR->F_CHECK_MATNR ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Number is not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '003' ).
        endif.

***   Check Material Number is valid in Plant
      elseif ME->R_CUST_MATNR->F_CHECK_MAT_MARC ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Material Number is not valid in Plant.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '004'
                                   IF_MSGV1 = ME->GET_WERKS( ) ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Material is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '005' ).
        endif.
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '001' ).
      endif.
    endif.

  endmethod.
  method GET_DESCR.

    RF_DESCR = ME->GET_MAKTX( ).
    if RF_DESCR is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
method GET_FPTOS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPTOS ).
  move LS_PARAM-ATWRT to RF_FPTOS.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** No calculation available
    if ME->GET_PRVDR_PRDTL( ) is not bound.
      EF_FOVRR = ABAP_UNDEFINED.
    endif.

*** Don't calculate in case of actual Material
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
      EF_FOVRR = ABAP_UNDEFINED.
    endif.

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    if ME->IS_DUMMY( ).
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
      move LS_PARAM-STRNG to RF_MAKTX.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
***   Use Standard Material Description
      ME->GET_MATNR( importing EF_MAKTX = RF_MAKTX ).
    endif.

  endmethod.
  method GET_MATNR.

    data: LS_LEOKY type  /VCXI/VKSR_S_LEOKY,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    RF_MATNR = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.

    check RF_MATNR is not initial.

***----------------------------------------------------------------------------
    if EF_MAKTX is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = RF_MATNR
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.

      if SY-SUBRC ne 0.
        clear EF_MAKTX.
      else.
        EF_MAKTX = LS_MAKT-MAKTX.
      endif.
    endif.

  endmethod.
  method GET_MFINFO.

    data: LR_PR_SPLR type ref to ZCL_VCXI_P4SS_PR_SPLR.


    clear: EF_GXCON,
           EF_MATNR,
           EF_TEXT,
           EF_PURCH,
           EF_SANKA,
           EF_LIFNR,
           ER_GATE_PSCALE_MGR.

***------------------------------------------------------------------------------------------------
    EF_MATNR = ME->GET_MATNR( ).
    EF_PURCH = ME->GET_PURCH( ).
    EF_SANKA = ME->GET_SANKA( ).

    LR_PR_SPLR = ME->GET_PRVDR_SPLR( importing ER_GATE = ER_GATE_PSCALE_MGR ).
    if LR_PR_SPLR is bound.
      EF_LIFNR = LR_PR_SPLR->GET_LIFNR( ).
    endif.

  endmethod.
  method GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).
    move LS_PARAM-ATWRT to RF_PRODH.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method GET_PRVDR_PRDTL.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PRDTL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P4SS_PRDTL=>C_IPRVT_P4_PRDTL
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PRDTL.

  endmethod.
  method GET_PRVDR_SPLR.

    data: LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    clear: ER_GATE,
           RR_PR_SPLR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Supplier Information
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_SPLR=>C_IPRVT_P4_SPLR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.

***------------------------------------------------------------------------------------------------
    if SY-SUBRC is not initial and
       IF_CREATE eq ABAP_TRUE.
***   Get Provider Definition
      LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P4SS_PR_SPLR=>C_IPRVT_P4_SPLR ).
      check LT_PRVDR_DEF is not initial.

***   Create new Supplier Information
      ER_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LT_PRVDR_DEF[ 1 ]-ID ).
    endif.

***------------------------------------------------------------------------------------------------
*** Return PR Class reference
    check  ER_GATE is bound.
    RR_PR_SPLR ?= ER_GATE->R_CLSPR.


  endmethod.
  method GET_PURCH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
    RF_PURCH = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SANKA.

    if ME->R_CUST_MATNR is not bound.
***   Initialize Material Customizing to ensure we don't have a sequencing issue
      ME->HANDLE_INIT_CUST_MATNR( ).
    endif.
    check ME->R_CUST_MATNR is bound.

*** Costing Relevant based on Value Updating in Material Master
    RF_SANKA = ME->R_CUST_MATNR->F_WERTU.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Material Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MATNR( ) ).

*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Material Number
    ME->CHECK_MATNR( IR_MESSAGE = IR_MESSAGE ).

*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_CUST_MATNR.
        ME->HANDLE_INIT_CUST_MATNR( ).

      when C_IEVNT_I_INIT_PURCH.
        ME->HANDLE_INIT_PURCH( ).
      when C_IEVNT_I_INIT_SPLR.
        ME->HANDLE_INIT_SPLR( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

      when C_IEVNT_I_RECALC_APINFO.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P3SS_APINFO~C_IEVNT_O_APINFO_CHANGED ).
    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_CUST_PROC   type ref to ZCL_VCXI_P4SS_CUST_PROC,
          LR_PR_AREA_WGT type ref to ZCL_VCXI_PXSS_PR_AREA_WGT.


    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear ME->R_CUST_MATNR.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          LR_CUST_PROC ?= ZCL_VCXI_P4SS_CUST_PROC=>GET_INSTANCE_PROC( IF_MATNR = LF_MATNR
                                                                      IF_WERKS = LF_WERKS
                                                                      IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          clear LR_CUST_PROC.
      endtry.
    endif.

    ME->R_CUST_MATNR = LR_CUST_PROC.


***--------------------------------------------------------------------------------------
*** Set Values for Real Procurement
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_PRODH(  IF_PRODH  = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->F_PRODH )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_HNDDIM( IS_HNDDIM = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_HNDDIM )
                      IF_SETBY  = LF_SETBY ).

***   Adjust Area and Weight
      LR_PR_AREA_WGT = ME->GET_PRVDR_AREA_WGT( ).
      if LR_PR_AREA_WGT is bound.
        LR_PR_AREA_WGT->SET_SBLAR( IS_SBLAR = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_SBLAR )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_SBLWT( IS_SBLWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_SBLWT )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_COUAR( IS_COUAR = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_COUAR )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_COUWT( IS_COUWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_COUWT )
                                   IF_SETBY  = LF_SETBY ).
        LR_PR_AREA_WGT->SET_ADDWT( IS_ADDWT = cond #( when LR_CUST_PROC is bound then LR_CUST_PROC->S_ADDWT )
                                   IF_SETBY  = LF_SETBY ).
      endif.
    endif.

  endmethod.
  method HANDLE_INIT_PURCH.

*** Is Matrial a Dummy -> Set "Direct Procurement & Price"
    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE ).
    else.
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_STOCK ).
    endif.

*** Reset Procurement to Stock Flag
    ME->SET_FPTOS( IF_SETBY = SPACE ).

  endmethod.
  method HANDLE_INIT_SPLR.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


    case ME->GET_PURCH( ).
      when ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_STOCK.
***     Get current Supplier Information
        ME->GET_PRVDR_SPLR( importing ER_GATE = LR_GATE ).
        if LR_GATE is bound.
          LR_GATE->DO_FREE( ).
        endif.

      when ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE or
           ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT.
***     Create Supplier Information if needed
        ME->GET_PRVDR_SPLR( exporting IF_CREATE = ABAP_TRUE ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.
    data: LR_PRDET type ref to ZIF_VCXI_P4SS_PRDTL.


***--------------------------------------------------------------------------------------
*** Do only Recalc Folding Dimensions if they are not overridden.
    LS_HNDDIM = ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Get Procurement Details
    LR_PRDET = ME->GET_PRVDR_PRDTL( ).
    if LR_PRDET is bound.
      LS_HNDDIM = LR_PRDET->GET_HNDDIM( ).
    else.
      clear LS_HNDDIM.
    endif.

*** Ensure no negative Values have been calculated
    LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
    LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
    LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->IS_DUMMY( ).
***   Only calcualate if calculation is active
      ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

    else.
***   Initialize Material Description
      ME->SET_MAKTX( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method IS_DUMMY.

*** Is Matrial a Dummy
    RF_RETURN = ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                                         IF_MATNR = ME->GET_MATNR( ) ).

  endmethod.
method SET_FPTOS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPTOS ).

  if IF_FPTOS is supplied.
    LS_PARAM-ATWRT = IF_FPTOS.
  endif.

  LS_PARAM-SETBY = IF_SETBY.
  if LS_PARAM-SETBY is initial.
    clear LS_PARAM-ATWRT.
  endif.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_MATNR.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_MATNR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
    endif.

  endmethod.
  method SET_PRODH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).

    if IF_PRODH is supplied.
      LS_PARAM-ATWRT = IF_PRODH.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
  method SET_PURCH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

    move IF_PURCH to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_APINFO~GET_APINFO.

    data: LR_PR_AREA_WGT type ref to ZCL_VCXI_PXSS_PR_AREA_WGT.


***------------------------------------------------------------------------------------------------
*** Part Ratio
    RS_APINFO-PARAT = ME->GET_PARAT( ).

*** Handling Dimension
    RS_APINFO-S_HNDDIM = ME->GET_HNDDIM( ).

*** Area and Weight Infos
    LR_PR_AREA_WGT = ME->GET_PRVDR_AREA_WGT( ).
    check LR_PR_AREA_WGT is bound.

    RS_APINFO-S_SBLAR = LR_PR_AREA_WGT->GET_SBLAR( ).
    RS_APINFO-S_SBLWT = LR_PR_AREA_WGT->GET_SBLWT( ).
    RS_APINFO-S_COUAR = LR_PR_AREA_WGT->GET_COUAR( ).
    RS_APINFO-S_COUWT = LR_PR_AREA_WGT->GET_COUWT( ).
    RS_APINFO-S_ADDWT = LR_PR_AREA_WGT->GET_ADDWT( ).

*** Product Hierarchy
    RS_APINFO-PRODH = ME->GET_PRODH( ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    return. "No Structure/Communication for Procurement

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LR_DATA_SUPER type ref to DATA.
    field-symbols: <S_FDI_SUPER>  type ANY,
                   <S_FDI_PRPART> type ZVCXI_P4SS_S_FDI_PRPART.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P4SS_S_FDI_PRPART.
    assign RR_DATA->* to <S_FDI_PRPART>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_PRPART> = corresponding #( <S_FDI_SUPER> ).
    endif.


***--------------------------------------------------------------------------------------
*** Get Material Number
    <S_FDI_PRPART>-MATNR = ME->GET_MATNR( ).

*** Get Material Description
    <S_FDI_PRPART>-MAKTX = ME->GET_MAKTX( importing EF_FOVRR = <S_FDI_PRPART>-FOVRR_MAKTX ).

*** Is Dummy Material
    <S_FDI_PRPART>-DUMMY = ME->IS_DUMMY( ).

*** Get Procurement Option
    <S_FDI_PRPART>-PURCH = ME->GET_PURCH( ).

*** Get Handling Dimensions
    <S_FDI_PRPART>-S_HNDDIM = ME->GET_HNDDIM( importing EF_FOVRR = <S_FDI_PRPART>-FOVRR_HNDDIM ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_PRPART_OLD type ZVCXI_P4SS_S_FDI_PRPART,
          LS_FDI_PRPART_NEW type ZVCXI_P4SS_S_FDI_PRPART.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_PRPART_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_PRPART_NEW = corresponding #( <S_DATA> ).
    endif.

*** Set SUPER Data
    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = IR_DATA
                                       IR_DATA_OLD = LR_DATA_OLD
                                       IT_FDMEX    = IT_FDMEX ).


***--------------------------------------------------------------------------------------
*** Set Material Number
    if LS_FDI_PRPART_OLD-MATNR ne LS_FDI_PRPART_NEW-MATNR.
      ME->SET_MATNR( IF_MATNR = LS_FDI_PRPART_NEW-MATNR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Option
    if LS_FDI_PRPART_OLD-PURCH ne LS_FDI_PRPART_NEW-PURCH.
      ME->SET_PURCH( IF_PURCH = LS_FDI_PRPART_NEW-PURCH
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material Description
    if LS_FDI_PRPART_OLD-MAKTX        ne LS_FDI_PRPART_NEW-MAKTX or
       LS_FDI_PRPART_OLD-FOVRR_MAKTX  ne LS_FDI_PRPART_NEW-FOVRR_MAKTX.
      if LS_FDI_PRPART_NEW-FOVRR_MAKTX ne ABAP_FALSE.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_PRPART_NEW-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_PRPART_NEW-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Handling Dimension
    if LS_FDI_PRPART_OLD-S_HNDDIM     ne LS_FDI_PRPART_NEW-S_HNDDIM or
       LS_FDI_PRPART_OLD-FOVRR_HNDDIM ne LS_FDI_PRPART_NEW-FOVRR_HNDDIM.
      if LS_FDI_PRPART_NEW-FOVRR_HNDDIM ne ABAP_FALSE.
        ME->SET_HNDDIM( IS_HNDDIM = LS_FDI_PRPART_NEW-S_HNDDIM
                        IF_SETBY  = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_HNDDIM( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR  type CR_NETGRAPH_JSON->YT_ATTRIBUTE.
    data: LR_GATE_CSTEP_ASMBL type ref to /VCXI/CL_VKSR_GATE.


*** Get Assembly Conversion Step
    ME->GET_PRVDR_CSTEP_ASMBL( importing ER_GATE = LR_GATE_CSTEP_ASMBL ).

*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->GET_MAKTX( )
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://product'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

*** Add Line to Assembly Step
    CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( ME->R_GATE )
                                IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_CSTEP_ASMBL ) ).

  endmethod.
