
class ZCL_VCXI_XCIU_UIC_IDAT_SDOC definition
  public
  final
  create private .

public section.
  type-pools SLIS .

  types:
    YI_NIDAT type range of ZVCXI_XCI_NIDAT .
  types:
    YI_AUART type range of AUART .
  types:
    YI_VKORG type range of VKORG .
  types:
    YI_VTWEG type range of VTWEG .
  types:
    YI_SPART type range of SPART .
  types:
    YI_BSTKD type range of BSTKD .
  types:
    YI_BSTDK type range of BSTDK .
  types:
    YI_CREBY type range of /VCXI/CKX_CREBY .
  types:
    YI_CREAT type range of /VCXI/CKX_CREAT .
  types:
    YI_CHABY type range of /VCXI/CKX_CHABY .
  types:
    YI_CHAAT type range of /VCXI/CKX_CHAAT .

  data I_NIDAT type YI_NIDAT read-only .
  data I_AUART type YI_AUART read-only .
  data I_VKORG type YI_VKORG read-only .
  data I_VTWEG type YI_VTWEG read-only .
  data I_SPART type YI_SPART read-only .
  data I_BSTKD type YI_BSTKD read-only .
  data I_BSTDK type YI_BSTDK read-only .
  data I_CREBY type YI_CREBY read-only .
  data I_CREAT type YI_CREAT read-only .
  data I_CHABY type YI_CHABY read-only .
  data I_CHAAT type YI_CHAAT read-only .

  methods OPEN_IDAT_SDOC
    importing
      !IR_IDAT_SDOC type ref to ZCL_VCXI_XCI_IDAT_SDOC
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !II_NIDAT type YI_NIDAT
      !II_AUART type YI_AUART
      !II_VKORG type YI_VKORG
      !II_VTWEG type YI_VTWEG
      !II_SPART type YI_SPART
      !II_BSTKD type YI_BSTKD
      !II_BSTDK type YI_BSTDK
      !II_CREBY type YI_CREBY
      !II_CREAT type YI_CREAT
      !II_CHABY type YI_CHABY
      !II_CHAAT type YI_CHAAT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_BACK type SYUCOMM value 'BACK'. "#EC NOTEXT
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_CREATE type SYUCOMM value 'CREATE'. "#EC NOTEXT
  constants C_UC_DELETE type SYUCOMM value 'DELETE'. "#EC NOTEXT
  constants C_UC_EXIT type SYUCOMM value 'EXIT'. "#EC NOTEXT
  data R_GRID type ref to ZCL_VCXI_XCIU_GRID_IDAT_SDOC .

  methods CALL_SHLP_CUPRFL
    returning
      value(RR_CUPRFL) type ref to /VCXI/CL_VKSC_CUPRFL
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CREATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCIU_UIC_IDAT_SDOC definition
class ZCL_VCXI_XCIU_UIC_IDAT_SDOC implementation.
method CALL_SHLP_CUPRFL.

  data:  LS_SELFIELD   type          SLIS_SELFIELD,
         LS_CMPRK      type          /VCXI/VKC_S_CMPRK.
  data:  LT_CMPRK      type table of /VCXI/VKC_S_CMPRK,
         LT_EXCLUDING  type          SLIS_T_EXTAB.

***----------------------------------------------------------------------------
*** Get all SmartVC Models
  select CMATN PRFID
         into table LT_CMPRK
         from /VCXI/VKS_TC200
        order by CMATN PRFID.

***----------------------------------------------------------------------------
*** Exclude Functions
*  append  '&NT1' to LT_EXCLUDING.   " Okay
  append  '&ETA' to LT_EXCLUDING.
  append  '&ALL' to LT_EXCLUDING.
  append  '&SAL' to LT_EXCLUDING.
*  append  '&OUP' to LT_EXCLUDING.   " Sort Up
*  append  '&ODN' to LT_EXCLUDING.   " Sort Down
*  append  '%SC'  to LT_EXCLUDING.   " Search
*  append  '%SC+' to LT_EXCLUDING.   " Search More
*  append  '&ILT' to LT_EXCLUDING.   " Filter
  append  '&OL0' to LT_EXCLUDING.
  append  '&CRB' to LT_EXCLUDING.
  append  '&CRL' to LT_EXCLUDING.
  append  '&CRR' to LT_EXCLUDING.
  append  '&CRE' to LT_EXCLUDING.
*  append  '&AC1' to LT_EXCLUDING.  " Cancel

***----------------------------------------------------------------------------
*** Display Popup
  call function 'REUSE_ALV_POPUP_TO_SELECT'
    exporting
      I_TITLE               = 'Select SmartVC Model'(T01)
      I_SELECTION           = ABAP_TRUE
      I_ALLOW_NO_SELECTION  = ABAP_TRUE
      I_SCREEN_START_COLUMN = 10
      I_SCREEN_START_LINE   = 10
      I_SCREEN_END_COLUMN   = 85
      I_SCREEN_END_LINE     = 25
      I_TABNAME             = 'LT_CMPRK'
      I_STRUCTURE_NAME      = '/VCXI/VKC_S_CMPRK'
      IT_EXCLUDING          = LT_EXCLUDING
    importing
      ES_SELFIELD           = LS_SELFIELD
    tables
      T_OUTTAB              = LT_CMPRK
    exceptions
      PROGRAM_ERROR         = 1.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  check LS_SELFIELD-TABINDEX is not initial.


***----------------------------------------------------------------------------
*** Process Result
  read table LT_CMPRK into LS_CMPRK index LS_SELFIELD-TABINDEX.

*** Get Profile
  RR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_CMPRK ).

endmethod.
method DO_FREE.

  if ME->R_GRID is bound.
    ME->R_GRID->DO_FREE( ).
    clear ME->R_GRID.
  endif.

endmethod.
method DO_PBO.

  set pf-status '0100' of program 'SAPLZVCXI_XCIU_UIC_IDAT_SDOC'.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        IR_UIC_IDAT_SDOC = ME.
  endif.
  ME->R_GRID->REFRESH_GRID( ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when C_UC_BACK.
      ME->HANDLE_UC_BACK( ).
    when C_UC_EXIT.
      ME->HANDLE_UC_EXIT( ).
    when C_UC_CANCEL.
      ME->HANDLE_UC_CANCEL( ).

    when C_UC_CREATE.
      ME->HANDLE_UC_CREATE( ).
    when C_UC_DELETE.
      ME->HANDLE_UC_DELETE( ).
  endcase.

endmethod.
method HANDLE_UC_BACK.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method HANDLE_UC_CANCEL.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method HANDLE_UC_CREATE.

  data:          LF_RETURN      type          ABAP_BOOL,
                 LF_EXIT        type          ABAP_BOOL,
                 LF_AUART       type          AUART,
                 LF_VKORG       type          VKORG,
                 LF_VTWEG       type          VTWEG,
                 LF_SPART       type          SPART.
  data:          LT_SVAL        type table of SVAL.
  data:          LR_IDAT_SDOC   type ref to   ZCL_VCXI_XCI_IDAT_SDOC.
  field-symbols: <S_SVAL>       type          SVAL.


***------------------------------------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCI_TD200'.
  <S_SVAL>-FIELDNAME = 'AUART'.
  <S_SVAL>-FIELD_OBL = ABAP_TRUE.
  get parameter id 'AGT' field <S_SVAL>-VALUE.

  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCI_TD200'.
  <S_SVAL>-FIELDNAME = 'VKORG'.
  <S_SVAL>-FIELD_OBL = ABAP_TRUE.
  get parameter id 'VKO' field <S_SVAL>-VALUE.

  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCI_TD200'.
  <S_SVAL>-FIELDNAME = 'VTWEG'.
  <S_SVAL>-FIELD_OBL = ABAP_TRUE.
  get parameter id 'VTW' field <S_SVAL>-VALUE.

  append initial line to LT_SVAL assigning <S_SVAL>.
  <S_SVAL>-TABNAME   = 'ZVCXI_XCI_TD200'.
  <S_SVAL>-FIELDNAME = 'SPART'.
  <S_SVAL>-FIELD_OBL = ABAP_TRUE.
  get parameter id 'SPA' field <S_SVAL>-VALUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Create'(A10)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_SVAL>.
      case <S_SVAL>-FIELDNAME.
        when 'AUART'.
          move <S_SVAL>-VALUE to LF_AUART.
        when 'VKORG'.
          move <S_SVAL>-VALUE to LF_VKORG.
        when 'VTWEG'.
          move <S_SVAL>-VALUE to LF_VTWEG.
        when 'SPART'.
          move <S_SVAL>-VALUE to LF_SPART.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LF_AUART is not initial and
          LF_VKORG is not initial and
          LF_VTWEG is not initial and
          LF_SPART is not initial.

    exit.
  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Create Integration Data Sales Document
  LR_IDAT_SDOC = ZCL_VCXI_XCI_IDAT_SDOC=>CREATE( IF_AUART = LF_AUART
                                                 IF_VKORG = LF_VKORG
                                                 IF_VTWEG = LF_VTWEG
                                                 IF_SPART = LF_SPART ).

  ME->OPEN_IDAT_SDOC( IR_IDAT_SDOC = LR_IDAT_SDOC ).

endmethod.
method HANDLE_UC_DELETE.

  data:  LT_IDAT_SDOC  type        /VCXI/CKX_TT_OBJECT.
  data:  LR_IDAT_SDOC  type ref to ZCL_VCXI_XCI_IDAT_SDOC,
         LR_MSG        type ref to /VCXI/CL_CKXM_MESSAGE,
         LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX     type ref to /VCXI/CX_CKX.

  check ME->R_GRID is bound.
  LT_IDAT_SDOC = ME->R_GRID->GET_SELECTED_IDAT_SDOC( ).

  create object LR_MSG.

  loop at LT_IDAT_SDOC into LR_OBJECT.
    move LR_OBJECT ?to LR_IDAT_SDOC.

    try.
        if LR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
          LR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
        endif.

***     Perform Delete, Save Deletion and Free the Object
        LR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SDOC=>C_FCODE_DELETE ).
        LR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SDOC=>C_FCODE_SAVE ).
        LR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SDOC=>C_FCODE_FREE ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.
  endloop.

  commit work and wait.

*** Integration Data deleted.
  message id 'ZVCXI_XCIU' type 'S' number '102'.

*** Refresh Grid
  move ABAP_TRUE to ME->R_GRID->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_EXIT.

  ME->DO_FREE( ).

  leave to screen 0.

endmethod.
method OPEN_IDAT_SDOC.

*** Free current UI
  ME->DO_FREE( ).

*** Start UI
  ZCL_VCXI_XCIU_UI_IDAT_SDOC=>START( IR_IDAT_SDOC = IR_IDAT_SDOC ).

*** Unlock on leaving
  IR_IDAT_SDOC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).

endmethod.
method START.

  data: LR_UIC_IDAT_SDOC   type ref to ZCL_VCXI_XCIU_UIC_IDAT_SDOC.

  create object LR_UIC_IDAT_SDOC.

  move: II_NIDAT to LR_UIC_IDAT_SDOC->I_NIDAT,
        II_AUART to LR_UIC_IDAT_SDOC->I_AUART,
        II_VKORG to LR_UIC_IDAT_SDOC->I_VKORG,
        II_VTWEG to LR_UIC_IDAT_SDOC->I_VTWEG,
        II_SPART to LR_UIC_IDAT_SDOC->I_SPART,
        II_BSTKD to LR_UIC_IDAT_SDOC->I_BSTKD,
        II_BSTDK to LR_UIC_IDAT_SDOC->I_BSTDK,
        II_CREBY to LR_UIC_IDAT_SDOC->I_CREBY,
        II_CREAT to LR_UIC_IDAT_SDOC->I_CREAT,
        II_CHABY to LR_UIC_IDAT_SDOC->I_CHABY,
        II_CHAAT to LR_UIC_IDAT_SDOC->I_CHAAT.

  call function 'ZVCXI_XCIU_UIC_IDAT_SDOC_START'
    exporting
      IR_UIC_IDAT_SDOC = LR_UIC_IDAT_SDOC.

endmethod.
