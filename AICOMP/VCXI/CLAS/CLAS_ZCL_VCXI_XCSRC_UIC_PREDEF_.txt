
class ZCL_VCXI_XCSRC_UIC_PREDEF definition
  public
  final
  create protected .

public section.

  constants C_UC_TOGGLE type SYUCOMM value 'TOGGLE'. "#EC NOTEXT
  data R_MACHCUST type ref to /VCXI/CL_VSMC_MACHCUST read-only .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_COLUMN_DESCR type TV_ITMNAME value 'DESCR'. "#EC NOTEXT
  constants C_COLUMN_DYN type STRING value 'DYN_'. "#EC NOTEXT
  constants C_COLUMN_ID type TV_ITMNAME value 'ID'. "#EC NOTEXT
  constants C_LLAYO_AW type ZVCXI_XCSR_LLAYO value 'AW'. "#EC NOTEXT
  constants C_LLAYO_AWP type ZVCXI_XCSR_LLAYO value 'AWP'. "#EC NOTEXT
  constants C_UC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_UC_BACK type SYUCOMM value 'BACK'. "#EC NOTEXT
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_COPY type UI_FUNC value 'COPY'. "#EC NOTEXT
  constants C_UC_CSNEXT type SYUCOMM value 'CSNEXT'. "#EC NOTEXT
  constants C_UC_CSPREV type SYUCOMM value 'CSPREV'. "#EC NOTEXT
  constants C_UC_DEL type UI_FUNC value 'DEL'. "#EC NOTEXT
  constants C_UC_EXIT type SYUCOMM value 'EXIT'. "#EC NOTEXT
  constants C_UC_SAVE type SYUCOMM value 'SAVE'. "#EC NOTEXT
  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL .
  data F_LLAYO type ZVCXI_XCSR_LLAYO .
  data F_REFRESH_REQ_GRID type ABAP_BOOL .
  data F_REFRESH_REQ_TREE type ABAP_BOOL .
  data R_CONTAINER_TREE type ref to CL_GUI_DOCKING_CONTAINER .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data T_CSNEXT type /VCXI/CKX_TT_OBJECT .
  data T_CSPREV type /VCXI/CKX_TT_OBJECT .
  data T_PREDEF_RTE type /VCXI/CKX_TT_OBJECT .

  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods CHECK_DUPLICATES
    importing
      !IR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
  methods COUNT_DYN_COLUMN
    returning
      value(RF_COUNT) type I
    raising
      /VCXI/CX_CKX .
  methods FILL_DYN_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_GRID_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_GRID_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_GRID_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_GRID_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSNEXT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CSPREV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
  methods INIT_DETAIL_SCREEN
    importing
      !IR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
private section.

  methods HANDLE_PRTE_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCSRC_PREDEF_PRTE .
endclass. "ZCL_VCXI_XCSRC_UIC_PREDEF definition
class ZCL_VCXI_XCSRC_UIC_PREDEF implementation.
method BUILD_DYN_TABLE.

  data:          LF_COUNT       type        I,
                 LF_IDX_DYN     type        NUMC5,
                 LF_NAME        type        STRING.
  data:          LT_COMPONENT   type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
                 LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR,
                 LR_TYPEDESCR   type ref to CL_ABAP_TYPEDESCR.
  field-symbols: <S_COMPONENT>  type        CL_ABAP_STRUCTDESCR=>COMPONENT.


  check ME->R_DATA is not bound.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
  CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSRC_S_RTE_GRID'
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1              ).
  move LR_TYPEDESCR ?to LR_STRUCTDESCR.
  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).

***--------------------------------------------------------------------------------------
*** Count dynamic Columns for Work Center
  LF_COUNT = ME->COUNT_DYN_COLUMN( ).
  if LF_COUNT ge 1.
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_XCSR_ALVMA'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    if SY-SUBRC ne 0.
***   Error generating dynamic Grid.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSRC'
                                            IF_MSGNO = '010' ).
    endif.

    clear LF_IDX_DYN.
    do LF_COUNT times.
      add 1 to LF_IDX_DYN.
      concatenate C_COLUMN_DYN LF_IDX_DYN into LF_NAME.

      append initial line to LT_COMPONENT assigning <S_COMPONENT>.
      move LF_NAME       to <S_COMPONENT>-NAME.
      move LR_TYPEDESCR ?to <S_COMPONENT>-TYPE.
    enddo.
  endif.

***--------------------------------------------------------------------------------------
*** Create data type for table
  try.
      LR_STRUCTDESCR = CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ).
      LR_TABLEDESCR  = CL_ABAP_TABLEDESCR=>CREATE(  P_LINE_TYPE  = LR_STRUCTDESCR ).

    catch CX_SY_TYPE_CREATION.
***   Error generating dynamic Grid.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSRC'
                                            IF_MSGNO = '010' ).
  endtry.

  create data ME->R_DATA type handle LR_TABLEDESCR.

endmethod.
method CHECK_DUPLICATES.

  data:  LR_PREDEF_PRTE   type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE,
         LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.

*** Start positiv
  move ABAP_TRUE to RF_OKAY.

***------------------------------------------------------------------------------------------------
*** Loop at all other Routes
  loop at IR_PREDEF_PRTE->R_PREDEF_RTE->T_PREDEF_PRTE into LR_OBJECT
                                                     where TABLE_LINE ne IR_PREDEF_PRTE.
    move LR_OBJECT ?to LR_PREDEF_PRTE.

*** Compare Work Center
    if IR_PREDEF_PRTE->T_PREDEF_ARBPL eq LR_PREDEF_PRTE->T_PREDEF_ARBPL.
      move ABAP_FALSE to RF_OKAY.
      exit.
    endif.
  endloop.

endmethod.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

  data:  LF_GUID         type        /VCXI/CKX_GUID.
  data:  LT_PRTE         type        /VCXI/CKX_TT_OBJECT.
  data:  LR_PREDEF_RTE   type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.

  ME->R_MACHCUST = /VCXI/CL_VSMC_MACHCUST=>GET_INSTANCE( ).

*** Load Route Definitions
  LT_PRTE = ME->R_MACHCUST->GET_REGISTERED_OBJECT( IF_TOOBJ = /VCXI/CL_VSMC_PRTE=>C_TOOBJ_PRTE ).
  loop at LT_PRTE into LR_OBJECT.
    LF_GUID = LR_OBJECT->GET_GUID( ).
    LR_PREDEF_RTE ?= ZCL_VCXI_XCSRC_PREDEF_RTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    append LR_PREDEF_RTE to ME->T_PREDEF_RTE.
  endloop.
  /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                      changing  CT_OBJECT     = ME->T_PREDEF_RTE ).

*** Set Default List Layout
  move C_LLAYO_AWP to ME->F_LLAYO.

  set handler ME->HANDLE_PRTE_CHANGED for all instances.

endmethod.
method COUNT_DYN_COLUMN.

  data:  LF_COUNT         type        I.
  data:  LR_PREDEF_PRTE   type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE,
         LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.

  loop at ME->R_PREDEF_RTE->T_PREDEF_PRTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PRTE.
    check LR_PREDEF_PRTE->F_DELETED ne ABAP_TRUE.
    move LINES( LR_PREDEF_PRTE->T_PREDEF_ARBPL ) to LF_COUNT.
    if LF_COUNT gt RF_COUNT.
      move LF_COUNT to RF_COUNT.
    endif.
  endloop.

endmethod.
method DO_PBO.

*** Set PF-Status
  ME->SET_PF_STATUS( ).

*** Initialize Tree
  ME->INIT_TREE( ).
  ME->REFRESH_TREE( ).

*** Refresh Grid
  ME->REFRESH_GRID( ).

endmethod.
method DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      case CF_UCOMM.
        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_BACK.
          ME->HANDLE_UC_BACK( ).
        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_EXIT.
          ME->HANDLE_UC_EXIT( ).
        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_CANCEL.
          ME->HANDLE_UC_CANCEL( ).

        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_SAVE.
          ME->HANDLE_UC_SAVE( ).

        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_TOGGLE.
          ME->HANDLE_UC_TOGGLE( ).

*        when /VCXI/CL_VSMCU_UIFW=>C_UC_CHECK_S.
*          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_SINGLE ).
*        when /VCXI/CL_VSMCU_UIFW=>C_UC_CHECK_L.
*          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_LOCKED ).
*        when /VCXI/CL_VSMCU_UIFW=>C_UC_CHECK_A.
*          ME->HANDLE_UC_CHECK( IF_CHECK_RANGE = C_CHECK_RANGE_ALL ).

        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_CSPREV.
          ME->HANDLE_UC_CSPREV( ).
        when ZCL_VCXI_XCSRC_UIC_PREDEF=>C_UC_CSNEXT.
          ME->HANDLE_UC_CSNEXT( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  clear CF_UCOMM.

endmethod.
method FILL_DYN_TABLE.

  data:          LF_IDX_DYN           type          NUMC5,
                 LF_COLUMN            type          TV_ITMNAME,
                 LF_PSTEP             type          STRING,
                 LF_IPSTP             type          /VCXI/VSMC_IPSTP.
  data:          LS_RTE_GRID          type          ZVCXI_XCSRC_S_RTE_GRID,
                 LS_PREDEF_ARBPL      type          ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 LS_PREDEF_PSEQ       type          ZVCXI_XCSRC_S_PREDEF_PSEQ,
                 LS_MSG               type          /VCXI/CKXM_S_MSG.
  data:          LT_SORT              type          ABAP_SORTORDER_TAB.
  data:          LR_PREDEF_PRTE       type ref to   ZCL_VCXI_XCSRC_PREDEF_PRTE,
                 LR_OBJECT            type ref to   /VCXI/IF_CKX_OBJECT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <S_SORT>             type          ABAP_SORTORDER,
                 <F_FIELD>            type          any.

***------------------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at ME->R_PREDEF_RTE->T_PREDEF_PRTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PRTE.
    check LR_PREDEF_PRTE->F_DELETED ne ABAP_TRUE.

*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.

***------------------------------------------------------------------------------------------------
*** Build Fix Values
    clear: LS_RTE_GRID.
    move LR_PREDEF_PRTE                   to LS_RTE_GRID-R_PREDEF_PRTE.

    create object LS_RTE_GRID-R_MSG.

*** Check for Initial Route
    if LR_PREDEF_PRTE->T_PREDEF_ARBPL is initial.
***   Predefined Route has no Work Center/Production Step.
      LS_RTE_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSRC'
                                      IF_MSGTY = 'E'
                                      IF_MSGNO = '103' ).
    endif.

*** Check for Duplicates
    if ME->CHECK_DUPLICATES( IR_PREDEF_PRTE = LR_PREDEF_PRTE ) ne ABAP_TRUE.
***   An identical Predefined Route exists.
      LS_RTE_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSRC'
                                      IF_MSGTY = 'W'
                                      IF_MSGNO = '101' ).
    endif.

*** Add Messages from Work Center
    loop at LR_PREDEF_PRTE->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
      loop at LS_PREDEF_ARBPL-T_MSG into LS_MSG.
        LS_RTE_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = LS_MSG-MSGID
                                        IF_MSGTY = LS_MSG-MSGTY
                                        IF_MSGNO = LS_MSG-MSGNO
                                        IF_MSGV1 = LS_MSG-MSGV1
                                        IF_MSGV2 = LS_MSG-MSGV2
                                        IF_MSGV3 = LS_MSG-MSGV3
                                        IF_MSGV4 = LS_MSG-MSGV4 ).
      endloop.
    endloop.

*** Status Icon
    read table LS_RTE_GRID-R_MSG->T_MSG with key MSGTY = 'E'
                                        transporting no fields.
    if SY-SUBRC eq 0.
      write ICON_RED_LIGHT      to LS_RTE_GRID-STICO as icon.
    else.
      if LS_RTE_GRID-R_MSG->T_MSG is not initial.
        write ICON_YELLOW_LIGHT to LS_RTE_GRID-STICO as icon.
      else.
        write ICON_GREEN_LIGHT  to LS_RTE_GRID-STICO as icon.
      endif.
    endif.

*** ID and Description
    move LR_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT~GET_ID( )     to LS_RTE_GRID-IPRER.
    move LR_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( )  to LS_RTE_GRID-IPRER_DESCR.

*** Link Context Value
    move LR_PREDEF_PRTE->F_LCVAL to LS_RTE_GRID-LCVAL.

    move-corresponding LS_RTE_GRID to <S_DATA>.

***------------------------------------------------------------------------------------------------
*** Build Dynamic Values
    loop at LR_PREDEF_PRTE->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
***   Build Column Name
      move SY-TABIX to LF_IDX_DYN.
      concatenate C_COLUMN_DYN LF_IDX_DYN into LF_COLUMN.

***   Add Column to Sort
      read table LT_SORT with key NAME = LF_COLUMN
                         transporting no fields.
      if SY-SUBRC ne 0.
        append initial line to LT_SORT assigning <S_SORT>.
        move LF_COLUMN to <S_SORT>-NAME.
      endif.

***   Assign Dynamic Colum
      assign component LF_COLUMN of structure <S_DATA> to <F_FIELD>.

***   Set Value
      case ME->F_LLAYO.
***     Work Center (Plant)
        when C_LLAYO_AW.
          if LS_PREDEF_ARBPL-R_ARBPL is bound.
            move LS_PREDEF_ARBPL-R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <F_FIELD>.
          endif.

***     Work Center (Plant) [Production Step]
        when C_LLAYO_AWP.
          if LS_PREDEF_ARBPL-R_ARBPL is bound.
            move LS_PREDEF_ARBPL-R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <F_FIELD>.
          endif.

***       Build Production Steps
          clear LF_PSTEP.
          loop at LS_PREDEF_ARBPL-T_PREDEF_PSEQ into LS_PREDEF_PSEQ.
            concatenate LF_PSTEP ',' into LF_PSTEP.

            move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
            concatenate LF_PSTEP LF_IPSTP into LF_PSTEP separated by SPACE.

            at first.
              concatenate '[' LF_IPSTP into LF_PSTEP.
            endat.
            at last.
              concatenate LF_PSTEP ']' into LF_PSTEP.
            endat.
          endloop.
          concatenate <F_FIELD> LF_PSTEP into <F_FIELD> separated by SPACE.
      endcase.
    endloop.
  endloop.

*** Apply Sort
  if LT_SORT is not initial.
    sort <T_DATA> by (LT_SORT).
  endif.

endmethod.
method GET_FIELDCAT.

  data:          LS_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT,
                 LS_DFIES        type        DFIES.
  data:          LT_COMPONENT    type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:          LR_TABLEDESCR   type ref to CL_ABAP_TABLEDESCR,
                 LR_STRUCTDESCR  type ref to CL_ABAP_STRUCTDESCR,
                 LR_ELEMDESCR    type ref to CL_ABAP_ELEMDESCR.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

***------------------------------------------------------------------------------------------------
*** Standard Field Cat
  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCSRC_S_RTE_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Change Field catalog attributes
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Status (traffic light)
      when 'STICO'.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        move 'C'             to <S_FCAT>-JUST.

***   ID & Descripiton - Key Field
      when 'IPRER' or 'IPRER_DESCR'.
        move ABAP_TRUE       to <S_FCAT>-KEY.

    endcase.
  endloop.

***------------------------------------------------------------------------------------------------
*** Dynamic Field Catalog
  check ME->R_DATA is bound.
  LR_TABLEDESCR  ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ).
  LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).

  LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).
  loop at LT_COMPONENT into LS_COMPONENT.
    read table RT_FCAT with key FIELDNAME = LS_COMPONENT-NAME
                       transporting no fields.
    check SY-SUBRC ne 0.

    try.
        move LS_COMPONENT-TYPE ?to LR_ELEMDESCR.
        LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

        append initial line to RT_FCAT assigning <S_FCAT>.
        move-corresponding LS_DFIES to <S_FCAT>.
        move LS_COMPONENT-NAME to <S_FCAT>-FIELDNAME.
        move SY-TABIX          to <S_FCAT>-COL_POS.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method HANDLE_GRID_DOUBLE_CLICK.

  data:          LS_RTE_GRID      type          ZVCXI_XCSRC_S_RTE_GRID.
  data:          LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTE_GRID.

      check LS_RTE_GRID-R_PREDEF_PRTE is bound.
      ZCL_VCXI_XCSRC_POPUP_PRTE=>START( IR_PREDEF_PRTE = LS_RTE_GRID-R_PREDEF_PRTE ).

      move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_GRID_HOTSPOT_CLICK.

  data:          LS_RTE_GRID     type          ZVCXI_XCSRC_S_RTE_GRID.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

  try.
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
      check SY-SUBRC eq 0.

      case E_COLUMN_ID-FIELDNAME.
        when 'STICO'.
          move-corresponding <S_DATA> to LS_RTE_GRID.
          if LS_RTE_GRID-R_MSG is bound.
            LS_RTE_GRID-R_MSG->DISPLAY_MSG( ).
          endif.
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_GRID_TOOLBAR.

  data:          LF_LOCKED       type        /VCXI/CKX_LOCKED,
                 LF_PSEQD        type        /VCXI/VSMC_PSEQD.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
      move ME->R_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.
*      move ME->R_PREDEF_RTE->GET_PSEQD( )                             to LF_PSEQD.

***----------------------------------------------------------------------------
***   Insert Toolbar Elements
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD                 to <S_TOOLBAR>-FUNCTION.
      move 'Add'(B01)               to <S_TOOLBAR>-TEXT.
      move ICON_INSERT_ROW          to <S_TOOLBAR>-ICON.
      if LF_LOCKED ne ABAP_TRUE or
         LF_PSEQD  eq ABAP_TRUE.
        move ABAP_TRUE              to <S_TOOLBAR>-DISABLED.
      endif.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL                 to <S_TOOLBAR>-FUNCTION.
      move 'Delete'(B02)            to <S_TOOLBAR>-TEXT.
      move ICON_DELETE_ROW          to <S_TOOLBAR>-ICON.
      if LF_LOCKED ne ABAP_TRUE.
        move ABAP_TRUE              to <S_TOOLBAR>-DISABLED.
      endif.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_COPY                to <S_TOOLBAR>-FUNCTION.
      move 'Copy'(B03)              to <S_TOOLBAR>-TEXT.
      move ICON_COPY_OBJECT         to <S_TOOLBAR>-ICON.
      if LF_LOCKED ne ABAP_TRUE or
         LF_PSEQD  eq ABAP_TRUE.
        move ABAP_TRUE              to <S_TOOLBAR>-DISABLED.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_GRID_UCOMM.

  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_UC_ADD.
          ME->HANDLE_UC_ADD( ).
        when C_UC_DEL.
          ME->HANDLE_UC_DEL( ).
        when C_UC_COPY.
          ME->HANDLE_UC_COPY( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK .

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_NODE_DOUBLE_CLICK .

  data:  LR_USEROBJECT   type ref to OBJECT,
         LR_PREDEF_RTE   type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT_PREV  type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
***   Get User Object
      ME->R_TREE->NODE_GET_USER_OBJECT( exporting
                                          NODE_KEY       = NODE_KEY
                                        importing
                                          USER_OBJECT    = LR_USEROBJECT
                                        exceptions
                                          NODE_NOT_FOUND = 1
                                          others         = 2 ).
      if SY-SUBRC      ne     0     or
         LR_USEROBJECT is not bound.
        exit.
      endif.

      try.
          move LR_USEROBJECT ?to LR_PREDEF_RTE.
        catch CX_SY_MOVE_CAST_ERROR.
          raise exception type /VCXI/CX_CKX.
      endtry.

***   Maintain Callstack
      read table ME->T_CSPREV into LR_OBJECT_PREV index 1.
      if SY-SUBRC ne 0 or
         LR_OBJECT_PREV ne LR_PREDEF_RTE.
        insert LR_PREDEF_RTE into ME->T_CSPREV index 1.
      endif.

      free ME->T_CSNEXT.
      insert LR_PREDEF_RTE into ME->T_CSNEXT index 1.

***   Initialize Detail Screen
      ME->INIT_DETAIL_SCREEN( IR_PREDEF_RTE = LR_PREDEF_RTE ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_PRTE_CHANGED.

  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
method HANDLE_UC_ADD.

  data:  LR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE.

  LR_PREDEF_PRTE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>CREATE( IR_PREDEF_RTE = ME->R_PREDEF_RTE ).
  ZCL_VCXI_XCSRC_POPUP_PRTE=>START( IR_PREDEF_PRTE = LR_PREDEF_PRTE ).

  move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

endmethod.
method HANDLE_UC_BACK .

*** Use Callstack to go back or leave
  read table ME->T_CSPREV index 2 transporting no fields.
  if SY-SUBRC eq 0.
    ME->HANDLE_UC_CSPREV( ).
  else.
*** Check for changes and ask user to save them
    if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
      leave to screen 0.
    endif.
  endif.

endmethod.
method HANDLE_UC_CANCEL .

*** Check for changes and ask user to save them
  if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
    leave to screen 0.
  endif.

endmethod.
method HANDLE_UC_COPY.

  data:          LS_ROW           type          LVC_S_ROW,
                 LS_CELL          type          LVC_S_CELL,
                 LS_RTE_GRID      type          ZVCXI_XCSRC_S_RTE_GRID.
  data:          LT_ROW           type          LVC_T_ROW,
                 LT_CELL          type          LVC_T_CELL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

***------------------------------------------------------------------------------------------------
*** Get Selected Row
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if LT_ROW is initial.
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    check LT_CELL is not initial.
    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to LT_ROW.
    endloop.
  endif.
  check LT_ROW is not initial.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Copy from top to bottom
  sort LT_ROW by INDEX ascending.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_RTE_GRID.

    LS_RTE_GRID-R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_COPY ).

  endloop.

***--------------------------------------------------------------------------------------
*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

endmethod.
method HANDLE_UC_CSNEXT.

  data:  LR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

*** Delete current Object
  delete ME->T_CSNEXT index 1.

*** Read next Object from Callstack
  read table ME->T_CSNEXT into LR_OBJECT index 1.
  if SY-SUBRC eq 0.
*** Set current object to Callstack PREV
    insert LR_OBJECT into ME->T_CSPREV index 1.
*** Initialize Detail Screen
    move LR_OBJECT ?to LR_PREDEF_RTE.
    ME->INIT_DETAIL_SCREEN( IR_PREDEF_RTE = LR_PREDEF_RTE ).
  endif.

endmethod.
method HANDLE_UC_CSPREV.

  data:  LR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

*** Delete current Object
  delete ME->T_CSPREV index 1.

*** Read next Object from Callstack
  read table ME->T_CSPREV into LR_OBJECT index 1.
  if SY-SUBRC eq 0.
*** Set current object to Callstack NEXT
    insert LR_OBJECT into ME->T_CSNEXT index 1.
*** Initialize Detail Screen
    move LR_OBJECT ?to LR_PREDEF_RTE.
    ME->INIT_DETAIL_SCREEN( IR_PREDEF_RTE = LR_PREDEF_RTE ).
  endif.

endmethod.
method HANDLE_UC_DEL.

  data:          LS_ROW           type          LVC_S_ROW,
                 LS_CELL          type          LVC_S_CELL,
                 LS_RTE_GRID      type          ZVCXI_XCSRC_S_RTE_GRID.
  data:          LT_ROW           type          LVC_T_ROW,
                 LT_CELL          type          LVC_T_CELL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

***------------------------------------------------------------------------------------------------
*** Get Selected Row
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if LT_ROW is initial.
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    check LT_CELL is not initial.
    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to LT_ROW.
    endloop.
  endif.
  check LT_ROW is not initial.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Delete from bottom to top
  sort LT_ROW by INDEX descending.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_RTE_GRID.

    LS_RTE_GRID-R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_DELETE ).

  endloop.

***--------------------------------------------------------------------------------------
*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

endmethod.
method HANDLE_UC_EXIT .

*** Check for changes and ask user to save them
  if ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
    leave to screen 0.
  endif.

endmethod.
method HANDLE_UC_SAVE.

  data:  LR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

  loop at ME->T_PREDEF_RTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_RTE.
    LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_RTE=>C_FCODE_SAVE ).
  endloop.

  commit work and wait.

*** Successfully saved.
  message id 'ZVCXI_XCSRC' type 'S' number '001'.

*** No changes remain
  move ABAP_FALSE to ME->F_CHANGED.

*** Relock
  loop at ME->T_PREDEF_RTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_RTE.
    check LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endloop.

endmethod.
method HANDLE_UC_TOGGLE.

  data:  LR_PREDEF_RTE     type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
         LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.

***------------------------------------------------------------------
*** Only works if object is open
  check ME->R_PREDEF_RTE is bound.

  if ME->R_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
**** Check for changes and ask user to save them
*    check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.

*** Unlock all Routes
    loop at ME->T_PREDEF_RTE into LR_OBJECT.
      move LR_OBJECT ?to LR_PREDEF_RTE.
      LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
    endloop.
  else.
    ME->R_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Request Grid Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

endmethod.
method INIT_DETAIL_SCREEN.

*** Buffer Route
  move IR_PREDEF_RTE to ME->R_PREDEF_RTE.

*** Initialize Grid
  ME->INIT_GRID( ).

*** Request Grid Hard Refresh
  clear ME->R_DATA.
  move ABAP_TRUE to ME->F_REFRESH_REQ_GRID.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

***------------------------------------------------------------------------------------------------
*** Create Grid
  create object ME->R_GRID
    exporting
      I_PARENT          = CL_GUI_CONTAINER=>DEFAULT_SCREEN
      I_LIFETIME        = CL_GUI_ALV_GRID=>LIFETIME_DYNPRO
      I_APPL_EVENTS     = 'X'
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  set handler ME->HANDLE_GRID_DOUBLE_CLICK   for ME->R_GRID.
  set handler ME->HANDLE_GRID_TOOLBAR        for ME->R_GRID.
  set handler ME->HANDLE_GRID_UCOMM          for ME->R_GRID.
  set handler ME->HANDLE_GRID_HOTSPOT_CLICK  for ME->R_GRID.

endmethod.
method INIT_TREE.

  data:          LS_HHDR    type TREEMHHDR.
  data:          LT_EVENT   type CNTL_SIMPLE_EVENTS.
  field-symbols: <S_EVENT>  type CNTL_SIMPLE_EVENT.

  check ME->R_CONTAINER_TREE is not bound.

***------------------------------------------------------------------------------------------------
*** Create the Docking Container Instance
  create object ME->R_CONTAINER_TREE
    exporting
      SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
      RATIO                       = '25'
    exceptions
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      LIFETIME_DYNPRO_DYNPRO_LINK = 5
      others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Header Column Details
  move 'ID'(C01) to LS_HHDR-HEADING.
  move '40'      to LS_HHDR-WIDTH.

*** Create the Tree Instance
  create object ME->R_TREE
    exporting
      NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
      ITEM_SELECTION              = 'X'
      HIERARCHY_COLUMN_NAME       = C_COLUMN_ID
      HIERARCHY_HEADER            = LS_HHDR
    exceptions
      ILLEGAL_NODE_SELECTION_MODE = 1
      ILLEGAL_COLUMN_NAME         = 2
      others                      = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create the Tree Control
  ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                     PARENT                       = ME->R_CONTAINER_TREE
                                   exceptions
                                     LIFETIME_ERROR               = 1
                                     CNTL_SYSTEM_ERROR            = 2
                                     CREATE_ERROR                 = 3
                                     FAILED                       = 4
                                     TREE_CONTROL_ALREADY_CREATED = 5
                                     others                       = 6 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Add Column
  ME->R_TREE->ADD_COLUMN( exporting
                            NAME                = C_COLUMN_DESCR
                            WIDTH               = '40'
                            HEADER_TEXT         = 'Description'(C02)
                          exceptions
                            COLUMN_EXISTS       = 1
                            ILLEGAL_COLUMN_NAME = 2
                            TOO_MANY_COLUMNS    = 3
                            ILLEGAL_ALIGNMENT   = 4
                            others              = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_NODE_DOUBLE_CLICK   for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK   for ME->R_TREE.

***------------------------------------------------------------------------------------------------
*** Request Tree Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ_TREE.

endmethod.
  method REFRESH_GRID.

    data: LS_LAYOUT  type LVC_S_LAYO.
    data: LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS,
          LT_FCAT              type LVC_T_FCAT.
    field-symbols: <T_DATA> type standard table.


    check ME->F_REFRESH_REQ_GRID eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ_GRID.

***--------------------------------------------------------------------------------------
*** Keep Sort and Filter as long as we're reloading the same data
    if ME->R_DATA is bound.
      ME->R_GRID->GET_FILTER_CRITERIA( importing ET_FILTER = data(LT_FILTER) ).
      ME->R_GRID->GET_SORT_CRITERIA( importing ET_SORT = data(LT_SORT) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Grid Data
    clear ME->R_DATA.
    ME->BUILD_DYN_TABLE( ).
    ME->FILL_DYN_TABLE( ).
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Define Layout
    LS_LAYOUT = value #( CWIDTH_OPT = ABAP_TRUE
                         GRID_TITLE = ME->R_PREDEF_RTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                         STYLEFNAME = 'T_STYL' ).

*** Field Catalog
    LT_FCAT = ME->GET_FIELDCAT( ).

*** Exlcude Functions
    LT_TOOLBAR_EXCLUDING = value #( ( CL_GUI_ALV_GRID=>MC_FG_EDIT )
                                    ( CL_GUI_ALV_GRID=>MC_FC_HELP )
                                    ( CL_GUI_ALV_GRID=>MC_FC_INFO )
                                    ( CL_GUI_ALV_GRID=>MC_FC_SUM )
                                    ( CL_GUI_ALV_GRID=>MC_MB_SUBTOT )
                                    ( CL_GUI_ALV_GRID=>MC_MB_SUM )
                                    ( CL_GUI_ALV_GRID=>MC_MB_VARIANT )
                                  ).

***--------------------------------------------------------------------------------------
*** Refreh ALV Grid
    ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
      exporting
        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
        IS_LAYOUT                     = LS_LAYOUT
      changing
        IT_FIELDCATALOG               = LT_FCAT
        IT_OUTTAB                     = <T_DATA>
        IT_SORT = LT_SORT
        IT_FILTER = LT_FILTER
      exceptions
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
method REFRESH_TREE.

  data:          LT_NODE             type        TREEMCNOTA,
                 LT_ITEM             type        TREEMCITAC.
  data:          LR_PREDEF_RTE       type ref to ZCL_VCXI_XCSRC_PREDEF_RTE,
                 LR_OBJECT           type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_NODE>            type        TREEMCNODT,
                 <S_ITEM>            type        TREEMCITEN.

  check ME->F_REFRESH_REQ_TREE eq ABAP_TRUE.
  move aBAP_FALSE to ME->F_REFRESH_REQ_TREE.

*** Delete all old Nodes
  ME->R_TREE->DELETE_ALL_NODES( ).

***------------------------------------------------------------------------------------------------
  loop at ME->T_PREDEF_RTE into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_RTE.

*** Node Information
    append initial line to LT_NODE assigning <S_NODE>.
    <S_NODE>-NODE_KEY   = LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
    <S_NODE>-RELATSHIP  = CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD.
    <S_NODE>-STYLE      = CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT.
    <S_NODE>-ISFOLDER   = 'X'.
    <S_NODE>-USEROBJECT = LR_PREDEF_RTE.

*** Items
    append initial line to LT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move C_COLUMN_ID                                      to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT~GET_ID( )     to <S_ITEM>-TEXT.

    append initial line to LT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move C_COLUMN_DESCR                                   to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move LR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( )  to <S_ITEM>-TEXT.
  endloop.

***------------------------------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = LT_NODE
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = LT_ITEM
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method SET_PF_STATUS.

  data:  LT_EXCLUDE type standard table of SYUCOMM.

***----------------------------------------------------------------------------
*** Exclude SAVE when not changed
  if ME->F_CHANGED ne ABAP_TRUE.
    append C_UC_SAVE      to LT_EXCLUDE.
  endif.

*** Exclude CSPREV - When Callstack PREV not filled
  read table ME->T_CSPREV index 2 transporting no fields.
  if SY-SUBRC ne 0.
    append C_UC_CSPREV to LT_EXCLUDE.
  endif.
*** Exclude CSNEXT - When Callstack NEXT not filled
  read table ME->T_CSNEXT index 2 transporting no fields.
  if SY-SUBRC ne 0.
    append C_UC_CSNEXT to LT_EXCLUDE.
  endif.

*** If no Object, don't allow toggle
  if ME->R_PREDEF_RTE is not bound.
    append C_UC_TOGGLE  to LT_EXCLUDE.
  endif.

***----------------------------------------------------------------------------
*** Set PF-Status
  set pf-status '0100' of program 'SAPLZVCXI_XCSRC_UIC_PREDEF'
                       excluding LT_EXCLUDE.

endmethod.
method START.

  data:  LR_UIC_PREDEF  type ref to ZCL_VCXI_XCSRC_UIC_PREDEF.

  create object LR_UIC_PREDEF.

  call function 'ZVCXI_XCSRC_UIC_PREDEF_START'
    exporting
      IR_UIC_PREDEF = LR_UIC_PREDEF.

endmethod.
