
class ZCL_VCXI_FBSS_ND_INPUT definition
  public
  inheriting from ZCL_VCXI_F0SS_ND
  create public .

public section.

  constants C_UC_ADD type SYUCOMM value 'ADD' ##NO_TEXT.

  methods GET_FCODE
    redefinition .
  methods HANDLE_UC_POPUP_SEL
    redefinition .
protected section.

  data T_PRVDR_DEF type ZVCXI_F0SS_TT_PRVDR_DEF .

  methods ADD_PRVDR
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_PRVDR_DEF
    raising
      /VCXI/CX_CKX .

  methods INIT_NODE
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_ND_INPUT definition
class ZCL_VCXI_FBSS_ND_INPUT implementation.
  method ADD_PRVDR.

    data: LF_POSID type /VCXI/VKSR_POSID,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type ZVCXI_F0SS_S_PRVDR_DEF.

***--------------------------------------------------------------------------------------
*** Check ID
    check IF_ID is not initial.
    move IF_ID to LF_ID.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.
    LF_POSID = LINES( LS_PRVDR_DEF-T_GATE_SEQ ) * 10.

    if LS_PRVDR_DEF-R_PARENT_GATE->F_ID eq 'CONV'.
      move 5 to LF_POSID.
    else.
***   Add after selected position
      add 5 to LF_POSID.
    endif.

***--------------------------------------------------------------------------------------
*** Create Provider
    check LS_PRVDR_DEF-R_PARENT_GATE is bound.

    RR_GATE = LS_PRVDR_DEF-R_PARENT_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
    if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
      RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).

  endmethod.
  method GET_FCODE.

    data:           LS_PRVDR_DEF  type      ZVCXI_F0SS_S_PRVDR_DEF.
    data:           LR_GATE       type ref to /VCXI/CL_VKSR_GATE.
    field-symbols:  <S_FCODE>     type      YS_FCODE.

***--------------------------------------------------------------------------------------
*** Create Popup Menu Entries for Node
    SUPER->GET_FCODE( importing ET_FCODE = ET_FCODE ).
    check ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Create Separation Line
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_BLANK                      to <S_FCODE>-FCODE.
    move C_TEXT_SEP                      to <S_FCODE>-TEXT.

*** Add Split option
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_SPLIT                      to <S_FCODE>-FCODE.
    move text-S01                        to <S_FCODE>-TEXT.

***--------------------------------------------------------------------------------------
*** Initialize Provider Definitions
    ME->INIT_PRVDR_DEF( ).

    if LINES( ME->T_PRVDR_DEF ) is not initial.
***   Create Separation Line
      append initial line to ET_FCODE assigning <S_FCODE>.
      move C_UC_BLANK                      to <S_FCODE>-FCODE.
      move C_TEXT_SEP                      to <S_FCODE>-TEXT.
    endif.

*** Add Provider Relations
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
    if LS_PRVDR_DEF-R_PARENT_GATE is bound.
      move LS_PRVDR_DEF-R_PARENT_GATE to LR_GATE.
    endif.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      if LS_PRVDR_DEF-R_PARENT_GATE ne LR_GATE.
        append initial line to ET_FCODE assigning <S_FCODE>.
        move C_UC_BLANK                      to <S_FCODE>-FCODE.
        move C_TEXT_SEP                      to <S_FCODE>-TEXT.
      endif.

      append initial line to ET_FCODE assigning <S_FCODE>.
      concatenate C_UC_ADD LS_PRVDR_DEF-ID   into <S_FCODE>-FCODE separated by '@'.
      concatenate text-M01 LS_PRVDR_DEF-DESCR into <S_FCODE>-TEXT separated by SPACE.

      move LS_PRVDR_DEF-R_PARENT_GATE to LR_GATE.
    endloop.

  endmethod.
  method HANDLE_UC_POPUP_SEL.

    data: LF_ID         type        /VCXI/CKX_ID,
          LF_TRECL      type        ZVCXI_FBS_TRECL,
          LF_PARAM_VAL  type        /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_RECLO      type        ZVCXI_FBSSC_S_BAGTY_RECLO.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX,
          LR_PR_BCOMP   type ref to ZCL_VCXI_FBSS_PR_BCOMP,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

*** Call Super implementation
    SUPER->HANDLE_UC_POPUP_SEL( IF_FCODE = IF_FCODE ).

***--------------------------------------------------------------------------------------
*** Determine Action
    try.
***     Special treatment for Reclosing
        if IF_FCODE cs ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
          move IF_FCODE+4 to LF_ID.

          read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.
          if SY-SUBRC is initial.
***         Get Bag component PR
            if ME->R_GATE is bound.
              LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BCOMP=>C_IPRVT_FB_BCOMP ).
              read table LT_GATE into LR_GATE index 1.
              if LR_GATE is bound.
                try .
                    move LR_GATE->R_CLSPR ?to LR_PR_BCOMP.
                  catch CX_SY_MOVE_CAST_ERROR.
                    clear LR_PR_BCOMP.
                endtry.
              endif.
            endif.

***         Get the Reclosing Type
            if LINES( LS_PRVDR_DEF-T_RECLO ) gt 1.
***           Call Popup to decide because there are more than 1 entry
              if LR_PR_BCOMP is bound.
                LR_PR_BCOMP->DISPLAY_POPUP_RECLO_STEPS( exporting IT_RECLO = LS_PRVDR_DEF-T_RECLO
                                                        importing EF_TRECL = LF_TRECL ).
              endif.
            else.
              read table LS_PRVDR_DEF-T_RECLO into LS_RECLO index 1.
              if SY-SUBRC is initial.
                move LS_RECLO-TRECL to LF_TRECL.
              endif.
            endif.

***         Add the Reclosing Conversion Step
            move ME->ADD_PRVDR( IF_ID = LF_ID ) to LR_GATE.
            if LR_GATE is bound and LF_TRECL is not initial.
              if LR_PR_BCOMP is bound.
                move LF_TRECL to LF_PARAM_VAL.

***             Set Reclosing Type parameter
                LR_PR_BCOMP->SET_PRVDR_PARAM( exporting IR_GATE = LR_GATE
                                                        IF_PARAM_VAL = LF_PARAM_VAL ).
              endif.
            endif.
          endif.

        elseif IF_FCODE cp 'ADD@*'.
          move IF_FCODE+4 to LF_ID.
          ME->ADD_PRVDR( IF_ID = LF_ID ).

        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_NODE.

    data:           LF_IBAGT type ZVCXI_FBS_IBAGT.
    data:           LR_PR_INPUT         type ref to ZCL_VCXI_FBSS_PR_INPUT.
    field-symbols:  <S_NVAL>            type        YS_NVALS.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->INIT_NODE( ).

***--------------------------------------------------------------------------------------
*** Check Input Gate is INPUT
    try.
        move ME->R_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.

    check LR_PR_INPUT is bound.

*** Initialize Node Values from Gate
    move 2 to ME->F_NETTYPE.

*** Set Node Description
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 0.
    <S_NVAL>-VAL  = LR_PR_INPUT->GET_DESCR( ).

***--------------------------------------------------------------------------------------
*** Get Bag Type
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 2.
    move text-D01 to <S_NVAL>-VAL.

    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 3.
    LR_PR_INPUT->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    <S_NVAL>-VAL = LF_IBAGT.

***--------------------------------------------------------------------------------------
*** Set Status Icon
    ME->SET_STATUS_ICON( ).

  endmethod.
  method INIT_PRVDR_DEF.

    data: LF_ACTIV_PRVDR  type        NUMC3.
    data: LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_PRVDR        type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_CSTEP        type        ZVCXI_FBSSC_S_BAGTY_CSTEP.
    data: LT_GATE         type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF    type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_PRVDR        type        /VCXI/VKSR_TT_GATE,
          LT_CSTEP        type        ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_RECLO        type        ZVCXI_FBSSC_TT_BAGTY_RECLO.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_PARENT_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SPEC    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC      type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_PR_INPUT     type ref to ZCL_VCXI_FBSS_PR_INPUT.

    refresh: ME->T_PRVDR_DEF.
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    sort LT_PRVDR_DEF.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      clear: LF_ACTIV_PRVDR, LS_PRVDR.

***   Get Gates of Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
***     Get all Active Provider with searched ID
        check LR_GATE->F_ID eq LS_PRVDR_DEF-ID.
        add 1 to LF_ACTIV_PRVDR.
      endloop.

***   Check if there are less then maximal Provider
      check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

      move LS_PRVDR_DEF to LS_PRVDR-S_PRVDR_DEF.
      move LT_GATE      to LS_PRVDR-T_GATE_SEQ.
      move ME->R_GATE   to LS_PRVDR-R_PARENT_GATE.

      append LS_PRVDR to ME->T_PRVDR_DEF.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Specification
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into LR_GATE_SPEC index 1.
    check LR_GATE_SPEC is bound.

    try .
        move LR_GATE_SPEC->R_CLSPR ?to LR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SPEC.
    endtry.
    check LR_PR_SPEC is bound.

*** Get Conversion Steps
    refresh LT_PRVDR_DEF.
    LT_PRVDR_DEF = LR_GATE_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'CONV'.
    check LS_PRVDR_DEF-IPRVT is not initial.

*** Get Gates of Provider
    LT_GATE = LR_GATE_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_PARENT_GATE with key TABLE_LINE->F_ID = 'CONV'.
    check LR_PARENT_GATE is bound.

*** Get Bag Type Conversion
    try .
        move ME->R_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.
    check LR_PR_INPUT is bound.

*** Get Bag Type Conversion
    LR_PR_INPUT->GET_BAGTY_CONV( importing ET_CSTEP     = LT_CSTEP
                                           ET_RECLO     = LT_RECLO ).

*** Get Provider Definition
    refresh LT_PRVDR_DEF.
    LT_PRVDR_DEF = LR_PARENT_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    sort LT_PRVDR_DEF by ID.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    loop at LT_CSTEP into LS_CSTEP.
      clear: LF_ACTIV_PRVDR, LS_PRVDR.

      read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LS_CSTEP-ICSTP.
      check SY-SUBRC is initial.

***   Get Gates of Provider
      LT_GATE = LR_PARENT_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                           IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
***     Get all Active Provider with searched ID
        check LR_GATE->F_ID eq LS_PRVDR_DEF-ID.
        add 1 to LF_ACTIV_PRVDR.
      endloop.

***   Check if there are less then maximal Provider
      check LF_ACTIV_PRVDR lt LS_CSTEP-QTYMA.

      move LS_PRVDR_DEF to LS_PRVDR-S_PRVDR_DEF.
      move LT_GATE      to LS_PRVDR-T_GATE_SEQ.
      LR_PARENT_GATE->SORT_GATE( changing CT_GATE = LS_PRVDR-T_GATE_SEQ ).
      move LR_PARENT_GATE  to LS_PRVDR-R_PARENT_GATE.

      if LS_CSTEP-ICSTP eq ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
        move LT_RECLO[] to LS_PRVDR-T_RECLO[].
      endif.

      append LS_PRVDR to ME->T_PRVDR_DEF.
    endloop.

  endmethod.
