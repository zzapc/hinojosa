
class ZCL_VCXI_PXSS_CUST_CORE definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data S_CRDII type ZVCXI_PXS_S_CRDII .
  data S_CRLEN type ZVCXI_PXS_S_CRLEN .
  data S_CRWGT type ZVCXI_PXS_S_CRWGT .
  data S_CRWTH type ZVCXI_PXS_S_CRWTH .

  methods GET_CRWGT
    importing
      !IS_CLETA type ZVCXI_PXS_S_CLETA
    returning
      value(RS_CRWGT) type ZVCXI_PXS_S_CRWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CRDIO
    returning
      value(RS_CRDIO) type ZVCXI_FFS_S_CRDIO
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_CORE
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PXSS_CUST_CORE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_CRDII type /VCXI/CKXC_MAPID value 'CRDII' ##NO_TEXT.
  constants C_MAPID_CRLEN type /VCXI/CKXC_MAPID value 'CRLEN' ##NO_TEXT.
  constants C_MAPID_CRWGT type /VCXI/CKXC_MAPID value 'CRWGT' ##NO_TEXT.
  constants C_MAPID_CRWTH type /VCXI/CKXC_MAPID value 'CRWTH' ##NO_TEXT.
  constants C_SETID_CORE type /VCXI/CKXC_SETID value 'ZVCXI_PXSS_CORE' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_CUST_CORE definition
class ZCL_VCXI_PXSS_CUST_CORE implementation.
  method CONSTRUCTOR.

    try.

        SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                            IF_WERKS = IF_WERKS
                            IF_DATE  = IF_DATE ).

***     Load Data by Cross Classification Mapping
        ME->LOAD_BY_CCM( ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_CRDIO.

*** Inner Core Diameter + 2 * Core Wall Thickness
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_CRDII-CRDII
                                                        IF_CALCV_UOM_1 = ME->S_CRDII-CRDII_UOM
                                                        IF_CALCV_2     = ( ME->S_CRWTH-CRWTH * 2 )
                                                        IF_CALCV_UOM_2 = ME->S_CRWTH-CRWTH_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = ME->S_CRDII-CRDII_UOM
                                              importing EF_CALCV       = RS_CRDIO-CRDIO
                                                        EF_CALCV_UOM   = RS_CRDIO-CRDIO_UOM ).

  endmethod.
  method GET_CRWGT.

    data: LF_CALCV type F.


*** Calculate propotional Factor of Roll on Core
    if ME->S_CRLEN-CRLEN ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_CLETA-CLETA
                                                          IF_CALCV_UOM_1 = IS_CLETA-CLETA_UOM
                                                          IF_CALCV_2     = ME->S_CRLEN-CRLEN
                                                          IF_CALCV_UOM_2 = ME->S_CRLEN-CRLEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_CALCV ).
    endif.

*** Calculate Core Weight per Roll
    try.
        RS_CRWGT-CRWGT     = ME->S_CRWGT-CRWGT * LF_CALCV.
        RS_CRWGT-CRWGT_UOM = ME->S_CRWGT-CRWGT_UOM.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method GET_INSTANCE_CORE.

    data:  LS_INSTANCE type YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
          create object RR_INSTANCE
            exporting
              IF_MATNR = IF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE.

        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVN type  /VCXI/CKXC_S_MAPVN,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC.
    data: LT_SETVA  type  /VCXI/CKXC_TT_SETVA.

*** get Core Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = ME->C_SETID_CORE
                                             IF_OBJNUM = LF_OBJNUM
                                             IF_MCTXT  = 'SVC' ).

    loop at LT_SETVA into LS_SETVA.

      clear: LS_MAPVN, LS_MAPVC.

      case LS_SETVA-MAPID.

***     Core Inner Diameter
        when C_MAPID_CRDII.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_CRDII-CRDII.
            move LS_MAPVN-ATFLV_UOM to ME->S_CRDII-CRDII_UOM.
          endif.

***     Core Weight
        when C_MAPID_CRWGT.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_CRWGT-CRWGT.
            move LS_MAPVN-ATFLV_UOM to ME->S_CRWGT-CRWGT_UOM.
          endif.

***     Core Length
        when C_MAPID_CRLEN.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_CRLEN-CRLEN.
            move LS_MAPVN-ATFLV_UOM to ME->S_CRLEN-CRLEN_UOM.
          endif.

***     Core Wall Thickness
        when C_MAPID_CRWTH.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_CRWTH-CRWTH.
            move LS_MAPVN-ATFLV_UOM to ME->S_CRWTH-CRWTH_UOM.
          endif.

      endcase.

    endloop.

  endmethod.
