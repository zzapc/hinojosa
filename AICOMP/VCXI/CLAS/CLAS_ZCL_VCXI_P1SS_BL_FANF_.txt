
class ZCL_VCXI_P1SS_BL_FANF definition
  public
  create public .

public section.

  class-methods GET_DEFAULT
    importing
      !IF_WERKS type WERKS_D
      !IF_KUNAG type KUNAG
      !IF_KUNWE type KUNWE
    exporting
      !EF_FANDM type ZVCXI_P1S_FANDM
      !ES_FANDV type ZVCXI_P1S_S_FANDV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_FANHE
    importing
      !IS_FANSH type ZVCXI_P1S_S_FANSH
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_UOM type /VCXI/CKX_UOM
    returning
      value(RS_FANHE) type ZVCXI_P1S_S_FANHE
    raising
      /VCXI/CX_CKX .
  class-methods CALC_FANLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IS_FANSH type ZVCXI_P1S_S_FANSH
      !IF_UOM type /VCXI/CKX_UOM
    returning
      value(RS_FANLE) type ZVCXI_P1S_S_FANLE
    raising
      /VCXI/CX_CKX .
  class-methods CALC_FANSH_BY_FANHE
    importing
      !IS_FANHE type ZVCXI_P1S_S_FANHE
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    returning
      value(RS_FANSH) type ZVCXI_P1S_S_FANSH
    raising
      /VCXI/CX_CKX .
  class-methods CALC_FANSH_BY_FANLE
    importing
      !IS_FANLE type ZVCXI_P1S_S_FANLE
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
    returning
      value(RS_FANSH) type ZVCXI_P1S_S_FANSH
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_P1SS_BL_FANF definition
class ZCL_VCXI_P1SS_BL_FANF implementation.
  method CALC_FANHE.

*** Fanfold Height = Caliper * Fanfold Sheets
    try.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = IS_CALIP-CALIP * IS_FANSH-FANSH
                                                           IF_UOM_IN    = IS_CALIP-CALIP_UOM
                                                           IF_UOM_OUT   = IF_UOM
                                                 importing EF_VALUE_OUT = RS_FANHE-FANHE
                                                           EF_UOM_OUT   = RS_FANHE-FANHE_UOM ).
      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear RS_FANHE.
    endtry.

  endmethod.
  method CALC_FANLE.

*** Fanfold Length = Sheet Length * Fanfold Sheets
    try.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = IS_SHTLE-SHTLE * IS_FANSH-FANSH
                                                           IF_UOM_IN    = IS_SHTLE-SHTLE_UOM
                                                           IF_UOM_OUT   = IF_UOM
                                                 importing EF_VALUE_OUT = RS_FANLE-FANLE
                                                           EF_UOM_OUT   = RS_FANLE-FANLE_UOM ).
      catch CX_SY_ARITHMETIC_OVERFLOW.
        clear RS_FANLE.
    endtry.

  endmethod.
  method CALC_FANSH_BY_FANHE.

    data: LF_FANSH type F.


*** Fanfold Sheets = Fanfold Height / Caliper
    if IS_CALIP-CALIP ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_FANHE-FANHE
                                                          IF_CALCV_UOM_1 = IS_FANHE-FANHE_UOM
                                                          IF_CALCV_2     = IS_CALIP-CALIP
                                                          IF_CALCV_UOM_2 = IS_CALIP-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_FANSH ).
    endif.

    RS_FANSH-FANSH     = FLOOR( LF_FANSH ).  "stay below defined Height
    RS_FANSH-FANSH_UOM = 'ST'.

  endmethod.
  method CALC_FANSH_BY_FANLE.

    data: LF_FANSH type F.


*** Fanfold Sheets = Fanfold Length / Sheet Length
    if IS_SHTLE-SHTLE ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_FANLE-FANLE
                                                          IF_CALCV_UOM_1 = IS_FANLE-FANLE_UOM
                                                          IF_CALCV_2     = IS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_2 = IS_SHTLE-SHTLE_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_FANSH ).
    endif.

    RS_FANSH-FANSH     = CEIL( LF_FANSH ).  "Partial Sheet will be considered
    RS_FANSH-FANSH_UOM = 'ST'.

  endmethod.
  method GET_DEFAULT.

    types:
      begin of YS_BUFFER,
        WERKS   type WERKS_D,
        KUNAG   type KUNAG,
        KUNWE   type KUNWE,
        FANDM   type ZVCXI_P1S_FANDM,
        S_FANDV type ZVCXI_P1S_S_FANDV,
      end   of YS_BUFFER.

    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key WERKS KUNAG KUNWE.
    data: LS_TD110 type ZVCXI_P1S_TD110.

*** Check request is completely specified
    check IF_WERKS is not initial and
          IF_KUNWE is not initial and
          IF_KUNAG is not initial.

    if not LINE_EXISTS( LT_BUFFER[ WERKS = IF_WERKS
                                   KUNAG = IF_KUNAG
                                   KUNWE = IF_KUNWE ] ).
***   Get Customizing by Access Sequence
      select single *
             into LS_TD110
             from ZVCXI_P1S_TD110
            where WERKS eq IF_WERKS
             and  KUNNR eq IF_KUNWE.
      if SY-SUBRC ne 0.
        select single *
               into LS_TD110
               from ZVCXI_P1S_TD110
              where WERKS eq IF_WERKS
               and  KUNNR eq IF_KUNAG.
        if SY-SUBRC ne 0.
          select single *
                 into LS_TD110
                 from ZVCXI_P1S_TD110
                where WERKS eq IF_WERKS
                 and  KUNNR eq SPACE.
          if SY-SUBRC ne 0.
            select single *
                   into LS_TD110
                   from ZVCXI_P1S_TD110
                  where WERKS eq SPACE
                   and  KUNNR eq SPACE.
            if SY-SUBRC ne 0.
              clear LS_TD110.
            endif.
          endif.
        endif.
      endif.

***   Add to Buffer
      insert value #( WERKS   = IF_WERKS
                      KUNAG   = IF_KUNAG
                      KUNWE   = IF_KUNWE
                      FANDM   = LS_TD110-FANDM
                      S_FANDV = LS_TD110-S_FANDV ) into table LT_BUFFER.
    endif.

*** Get buffered Value
    EF_FANDM = LT_BUFFER[ WERKS = IF_WERKS
                          KUNAG = IF_KUNAG
                          KUNWE = IF_KUNWE ]-FANDM.
    ES_FANDV = LT_BUFFER[ WERKS = IF_WERKS
                          KUNAG = IF_KUNAG
                          KUNWE = IF_KUNWE ]-S_FANDV.

  endmethod.
