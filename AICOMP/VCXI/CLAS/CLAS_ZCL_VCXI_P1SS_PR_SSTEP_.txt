
class ZCL_VCXI_P1SS_PR_SSTEP definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_SSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_SCORES_AP .

  constants C_IPRVT_P1_SSTEP type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_SSTEP' ##NO_TEXT.
  constants C_PARID_ISCAP type /VCXI/VKS_PARID value 'ZVCXI_PX_ISCAP' ##NO_TEXT.
  constants C_PARID_SCORE type /VCXI/VKS_PARID value 'ZVCXI_PX_SCORE' ##NO_TEXT.

  methods GET_SHTNL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNL) type ZVCXI_P0SS_S_SHTNL
    raising
      /VCXI/CX_CKX .
  methods GET_SHTNW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNW) type ZVCXI_P0SS_S_SHTNW
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNL
    importing
      !IS_SHTNL type ZVCXI_P0SS_S_SHTNL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNW
    importing
      !IS_SHTNW type ZVCXI_P0SS_S_SHTNW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  methods CHECK_SHTN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_ISCAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ISCAP type ZVCXI_PXS_ISCAP
      !EF_FAALL type ZVCXI_PXSS_FAALL
    returning
      value(RT_ISCOR) type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_SCORE) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_ISCAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SCORE
    raising
      /VCXI/CX_CKX .
  methods SET_ISCAP
    importing
      !IF_ISCAP type ZVCXI_PXS_ISCAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
      !IF_FAALL type ZVCXI_PXSS_FAALL optional
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IT_SCORE type ZVCXI_PXSS_TT_SCORE_COM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.

  data C_IEVNT_I_ADJUST_ISCAP type /VCXI/VKSC_IEVNT value 'ADJUST_ISCAP' ##NO_TEXT.
  data C_IEVNT_I_RECALC_SCORE type /VCXI/VKSC_IEVNT value 'RECALC_SCORE' ##NO_TEXT.
  data C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  data C_IEVNT_O_SCORE_CHANGED type /VCXI/VKSC_IEVNT value 'SCORE_CHANGED' ##NO_TEXT.
  data C_IEVNT_O_SHTN_CHANGED type /VCXI/VKSC_IEVNT value 'SHTN_CHANGED' ##NO_TEXT.
  data C_PARID_SHTNL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNL' ##NO_TEXT.
  data C_PARID_SHTNW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNW' ##NO_TEXT.
endclass. "ZCL_VCXI_P1SS_PR_SSTEP definition
class ZCL_VCXI_P1SS_PR_SSTEP implementation.
  method CHECK_SHTN.

*** Check Number of Outs
    if ME->GET_SHTNW( )-SHTNW is not initial and
       ME->GET_SHTNL( )-SHTNL is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Net Sheet Dimension is fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '361' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Net Sheet Dimension is not fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '362' ).
      endif.
    endif.

  endmethod.
  method GET_ISCAP.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).
    move LS_PARAM-STRNG to EF_ISCAP.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_ISCAP is not initial.

***----------------------------------------------------------------------------
*** Apply All
    EF_FAALL = switch #( EF_ISCAP when '*'   then ABAP_TRUE
                                  when SPACE then ABAP_FALSE
                                             else ABAP_UNDEFINED ).

*** Separate Score IDs
    if RT_ISCOR is requested.
      split EF_ISCAP at ',' into table RT_ISCOR.
    endif.

  endmethod.
  method GET_SCORE.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_SCORE = RT_SCORE.
    endif.

    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SHTNL.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).
    move LS_PARAM-ATFLV to RS_SHTNL-SHTNL.
    move LS_PARAM-UNIT  to RS_SHTNL-SHTNL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTNW.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).
    move LS_PARAM-ATFLV to RS_SHTNW-SHTNW.
    move LS_PARAM-UNIT  to RS_SHTNW-SHTNW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Net Sheet
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SHTN( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Net Sheet
    ME->CHECK_SHTN( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_ADJUST_ISCAP.

    data: LF_FAALL    type ZVCXI_PXSS_FAALL.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR    type ZVCXI_PXS_TT_ISCOR.

*** Process other Events first, to ensure Scores have been backwarded correctly
    ME->R_GATE->RAISE_EVENTS( ).

*** Don't adjust if all Scores are applied
    ME->GET_ISCAP( importing EF_FAALL = LF_FAALL ).
    check LF_FAALL ne ABAP_TRUE.

*** Get currently applied Scores (scores that are no longer available wouldn't be in the list)
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).
    LT_ISCOR = value #( for S_SCORE_AP in LT_SCORE_AP where ( FAPPL = ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).

*** Update list of applied scores
    ME->SET_ISCAP( IT_ISCOR = LT_ISCOR  ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_ADJUST_ISCAP.
        ME->HANDLE_ADJUST_ISCAP( ).
      when C_IEVNT_I_RECALC_SCORE.
        ME->HANDLE_RECALC_SCORE( ).
    endcase.

  endmethod.
  method HANDLE_RECALC_SCORE.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LT_SCORE type ZVCXI_PXSS_TT_SCORE_COM.


*** Recalculate adjusted Scores
    LT_SCORE = ME->GET_SCORE( importing EF_SETBY = LF_SETBY ).
    ZCL_VCXI_PXSS_BL_SCORE=>RECALC_ADJ_SCORES( exporting IS_SHTNW     = ME->GET_SHTNW( )
                                                         IS_SHTNL     = ME->GET_SHTNL( )
                                               changing  CT_SCORE_COM = LT_SCORE ).
    if LF_SETBY is initial.
      LF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.
    ME->SET_SCORE( IT_SCORE = LT_SCORE
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method SET_ISCAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).

    if IT_ISCOR is supplied.
      concatenate lines of IT_ISCOR into LS_PARAM-STRNG separated by ','.
    endif.
    if IF_ISCAP is supplied.
      LS_PARAM-STRNG = IF_ISCAP.
    endif.
    if IF_FAALL is supplied and
       IF_FAALL ne ABAP_UNDEFINED.
      LS_PARAM-STRNG = switch #( IF_FAALL when ABAP_TRUE then '*' ).
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISCAP_CHANGED ).
    endif.

  endmethod.
  method SET_SCORE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if IT_SCORE is supplied.
      call transformation ID
           source T_SCORE = IT_SCORE
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).

    move IS_SHTNL-SHTNL     to LS_PARAM-ATFLV.
    move IS_SHTNL-SHTNL_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).

    move IS_SHTNW-SHTNW     to LS_PARAM-ATFLV.
    move IS_SHTNW-SHTNW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

*** Get applied Scores table based on Net Sheet Scores
    ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->GET_SCORE( )
                                                     IT_ISCOR          = ME->GET_ISCAP( )
                                           importing ET_SCORE_AP       = ET_SCORE_AP
                                                     ET_TAPE_AP        = ET_TAPE_AP
                                                     ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

    RF_SSCOR = 'M'.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.

    data: LT_ISCOR     type ZVCXI_PXS_TT_ISCOR,
          LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


***--------------------------------------------------------------------------------------
*** Set IDs to Parameter
    if IT_SCORE_AP is supplied.
      LT_ISCOR = value #( for S_SCORE_AP in IT_SCORE_AP where ( FAPPL eq ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).
      ME->SET_ISCAP( IT_ISCOR = LT_ISCOR ).
    endif.

*** Apply all Scores
    if IF_SCORE_FAALL is supplied.
      ME->SET_ISCAP( IF_FAALL = IF_SCORE_FAALL ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Net Scores
    if IT_SCORE_AP is supplied.
      LT_SCORE_COM = corresponding #( IT_SCORE_AP ).
***   Remove Trim Scores
      ZCL_VCXI_PXSS_BL_SCORE=>REMOVE_TRIM( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
      ZCL_VCXI_PXSS_BL_SCORE=>REMOVE_TRIM( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
      ME->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    endif.

  endmethod.
