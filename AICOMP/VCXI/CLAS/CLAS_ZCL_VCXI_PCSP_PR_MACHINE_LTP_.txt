
class ZCL_VCXI_PCSP_PR_MACHINE_LTP definition
  public
  inheriting from ZCL_VCXI_P0SP_PR_MACHINE_LTP
  create public .

public section.

  interfaces ZIF_VCXI_PCSP_OP_FLUTE .

  methods HANDLE_EVENT
    redefinition .
  methods GET_FEATURE
    redefinition .
protected section.

  constants C_IMATY_QUANTITY type /VCXI/VSMC_IMATY value 'PC_MA_QUANTITY' ##NO_TEXT.
  constants C_IEVNT_I_FORWARD_FLUTE type /VCXI/VKSC_IEVNT value 'FORWARD_FLUTE' ##NO_TEXT.

  methods HANDLE_FORWARD_FLUTE
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods DET_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_RRVAL
    redefinition .
  methods GET_RTE_SMVAL
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSP_PR_MACHINE_LTP definition
class ZCL_VCXI_PCSP_PR_MACHINE_LTP implementation.
method DET_FLUTE.

  data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_FLUTE type ref to ZIF_VCXI_PCSP_ADJ_FLUTE.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Flute of Corrugation Addon
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PCSP_ADJ_FLUTE=>C_IPRVT_PC_ADJ_FLUTE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_FLUTE.
        check LR_ADJ_FLUTE is bound.
        LR_ADJ_FLUTE->ADJ_FLUTE( changing CF_FLUTE = RF_FLUTE ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_FEATURE.

*** Get Super Features
    if IT_GATE_ADDON is supplied.
      RT_FEATURE = SUPER->GET_FEATURE( IT_GATE_ADDON = IT_GATE_ADDON ).
    else.
      RT_FEATURE = SUPER->GET_FEATURE( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Flute
    data(LF_FLUTE) = ME->ZIF_VCXI_PCSP_OP_FLUTE~GET_FLUTE( ).
    /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'flute'     FTVAL = LF_FLUTE )
                                      changing  CT_FEATURE = RT_FEATURE ).

  endmethod.
  method GET_RRVAL.

    SUPER->GET_RRVAL( ).

*** Return Flute Type
    RF_RRVAL = ME->ZIF_VCXI_PCSP_OP_FLUTE~GET_FLUTE( ).

  endmethod.
method GET_RTE_SMVAL.

  data:          LF_GMATY          type        /VCXI/VSMC_GMATY.
  field-symbols: <S_RTE_SMVAL>     type        /VCXI/VSMR_S_RTE_SMVAL,
                 <S_AVVAL>         type        /VCXI/VSMR_S_RTE_RANGE_AVVAL.

*** Get Super
  RT_RTE_SMVAL = SUPER->GET_RTE_SMVAL( ).

  check ME->R_RTE_CMACH          is bound and
        ME->R_RTE_CMACH->R_MTYPE is bound.

***----------------------------------------------------------------------------
*** Aspect - Quantity
  try.

***   Add Aspect only if it is found.
      LF_GMATY = ME->R_RTE_CMACH->R_MTYPE->GET_GMATY_BY_IMATY( IF_IMATY = C_IMATY_QUANTITY
                                                               IF_MMATY = /VCXI/CL_VSMC_MTYPE=>C_MMATY_VALUE ).

***   Set the Aspect for Lot Size
      append initial line to RT_RTE_SMVAL assigning <S_RTE_SMVAL>.
      move LF_GMATY       to <S_RTE_SMVAL>-GMATY.
      append initial line to <S_RTE_SMVAL>-I_AVVAL assigning <S_AVVAL>.
      move 'I'            to <S_AVVAL>-SIGN.
      move 'EQ'           to <S_AVVAL>-OPTION.
      move ''             to <S_AVVAL>-LOW.

    catch /VCXI/CX_CKX.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_FORWARD_FLUTE.
      ME->HANDLE_FORWARD_FLUTE( ).
  endcase.

endmethod.
  method HANDLE_FORWARD_FLUTE.

    data: LF_FLUTE         type        ZVCXI_PCS_FLUTE.


*** Determine Flute based on Add-ons
    LF_FLUTE = ME->DET_FLUTE( ).

*** Set Flute to Parameter
    ME->SET_FLUTE( IF_FLUTE = LF_FLUTE ).

*** Set Flute on Material Flow
    ME->SET_MFO_FLUTE( IF_FLUTE = LF_FLUTE ).

  endmethod.
  method SET_FLUTE.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PCSP_OP_FLUTE~C_PARID_FLUTE ).

    LS_PARAM-ATWRT = IF_FLUTE.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PCSP_OP_FLUTE~C_IEVNT_O_FLUTE_CHANGED ).
    endif.

  endmethod.
method SET_MFO_FLUTE.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MF_FLUTE  type ref to ZIF_VCXI_PCSP_MF_FLUTE.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).

*** Set Flute to all
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_MF_FLUTE.
        check LR_MF_FLUTE is bound.
        LR_MF_FLUTE->SET_FLUTE( IF_FLUTE = IF_FLUTE ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method ZIF_VCXI_PCSP_OP_FLUTE~GET_FLUTE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PCSP_OP_FLUTE~C_PARID_FLUTE ).
    RF_FLUTE = LS_PARAM-ATWRT.

  endmethod.
