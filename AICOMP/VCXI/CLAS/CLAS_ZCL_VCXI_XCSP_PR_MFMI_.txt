
class ZCL_VCXI_XCSP_PR_MFMI definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MF
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFI .
  interfaces ZIF_VCXI_XCSP_MFM .

  aliases C_IPRVT_XCS_MFI
    for ZIF_VCXI_XCSP_MFI~C_IPRVT_XCS_MFI .
  aliases C_PARID_KAUSF
    for ZIF_VCXI_XCSP_MFI~C_PARID_KAUSF .
  aliases C_PARID_LIFNR
    for ZIF_VCXI_XCSP_MFM~C_PARID_LIFNR .
  aliases C_PARID_MFICF
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFICF .
  aliases C_PARID_MFICP
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFICP .
  aliases C_PARID_MFISP
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFISP .
  aliases C_PARID_PRICE
    for ZIF_VCXI_XCSP_MFM~C_PARID_PRICE .
  aliases C_PARID_PRICP_A
    for ZIF_VCXI_XCSP_MFM~C_PARID_PRICP_A .
  aliases C_PARID_PRICP_L
    for ZIF_VCXI_XCSP_MFM~C_PARID_PRICP_L .
  aliases C_PARID_PRICP_P
    for ZIF_VCXI_XCSP_MFM~C_PARID_PRICP_P .
  aliases C_PARID_PRICP_W
    for ZIF_VCXI_XCSP_MFM~C_PARID_PRICP_W .
  aliases C_PARID_PURCH
    for ZIF_VCXI_XCSP_MFM~C_PARID_PURCH .
  aliases C_PARID_TEXT
    for ZIF_VCXI_XCSP_MFM~C_PARID_TEXT .
  aliases CALC_CONSU
    for ZIF_VCXI_XCSP_MFI~CALC_CONSU .
  aliases GET_CSPLIT
    for ZIF_VCXI_XCSP_MFI~GET_CSPLIT .
  aliases GET_KAUSF
    for ZIF_VCXI_XCSP_MFI~GET_KAUSF .
  aliases GET_LIFNR
    for ZIF_VCXI_XCSP_MFM~GET_LIFNR .
  aliases GET_LIFNR_DESCR
    for ZIF_VCXI_XCSP_MFM~GET_LIFNR_DESCR .
  aliases GET_MFICF
    for ZIF_VCXI_XCSP_MFI~GET_MFICF .
  aliases GET_MFICP
    for ZIF_VCXI_XCSP_MFI~GET_MFICP .
  aliases GET_MFISP
    for ZIF_VCXI_XCSP_MFI~GET_MFISP .
  aliases GET_PRICE
    for ZIF_VCXI_XCSP_MFM~GET_PRICE .
  aliases GET_PRICP
    for ZIF_VCXI_XCSP_MFM~GET_PRICP .
  aliases GET_PURCH
    for ZIF_VCXI_XCSP_MFM~GET_PURCH .
  aliases GET_TEXT
    for ZIF_VCXI_XCSP_MFM~GET_TEXT .
  aliases SET_LIFNR
    for ZIF_VCXI_XCSP_MFM~SET_LIFNR .
  aliases SET_MFICF
    for ZIF_VCXI_XCSP_MFI~SET_MFICF .
  aliases SET_MFICP
    for ZIF_VCXI_XCSP_MFI~SET_MFICP .
  aliases SET_MFISP
    for ZIF_VCXI_XCSP_MFI~SET_MFISP .
  aliases SET_PRICE
    for ZIF_VCXI_XCSP_MFM~SET_PRICE .
  aliases SET_PRICP
    for ZIF_VCXI_XCSP_MFM~SET_PRICP .
  aliases SET_PURCH
    for ZIF_VCXI_XCSP_MFM~SET_PURCH .
  aliases SET_TEXT
    for ZIF_VCXI_XCSP_MFM~SET_TEXT .

  constants C_PARID_SANKA type /VCXI/VKS_PARID value 'ZVCXI_XC_SANKA' ##NO_TEXT.
  data F_MATNR_DUMMY type MATNR .

  methods GET_SANKA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SANKA) type SANKA
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods IS_DUMMY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_KAUSF
    importing
      !IS_KAUSF type ZVCXI_XCSP_S_KAUSF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SANKA
    importing
      !IF_SANKA type SANKA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_INIT_MFICF
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_INIT_MFICF .
  aliases C_IEVNT_I_INIT_MFISP
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_INIT_MFISP .
  aliases C_IEVNT_I_REQ_OP_FORWARD
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_REQ_OP_FORWARD .
  aliases C_IEVNT_O_MFICF_CHANGED
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_MFICF_CHANGED .
  aliases C_IEVNT_O_MFISP_CHANGED
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_MFISP_CHANGED .
  aliases C_IEVNT_O_OP_FORWARD_REQ
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_OP_FORWARD_REQ .
  aliases F_PARID_PRICP
    for ZIF_VCXI_XCSP_MFM~F_PARID_PRICP .
  aliases HANDLE_INIT_MFICF
    for ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFICF .
  aliases HANDLE_INIT_MFISP
    for ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFISP .

  constants C_IEVNT_I_INIT_CUST_MATNR type /VCXI/VKSC_IEVNT value 'INIT_CUST_MATNR' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PRICE type /VCXI/VKSC_IEVNT value 'INIT_PRICE' ##NO_TEXT.
  constants C_IEVNT_I_INIT_PURCH type /VCXI/VKSC_IEVNT value 'INIT_PURCH' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRICE type /VCXI/VKSC_IEVNT value 'RECALC_PRICE' ##NO_TEXT.
  constants C_IEVNT_O_PURCH_CHANGED type /VCXI/VKSC_IEVNT value 'PURCH_CHANGED' ##NO_TEXT.
  data R_CUST_MATNR type ref to ZCL_VCXI_XCS_CUST_MATNR .

  methods CHECK_MATNR
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_CONSU
  abstract
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    returning
      value(RS_CONSU) type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
  methods GET_UOMCF
    returning
      value(RT_UOMCF) type ZVCXI_XCS_TT_UOMCF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRICE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PURCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRICE
    raising
      /VCXI/CX_CKX .
  methods INIT_MATNR_DUMMY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MFMI definition
class ZCL_VCXI_XCSP_PR_MFMI implementation.
method CHECK_MATNR.

*** Check Material Number is maintained
  if ME->GET_MATNR( ) is initial.
    move 1 to RF_RESULT.
    exit.
  endif.

*** Check Material Number is valid
  if ME->R_CUST_MATNR is not bound.
    move 2 to RF_RESULT.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Material Dummy
  ME->INIT_MATNR_DUMMY( ).

endmethod.
  method GET_SANKA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SANKA ).
    move LS_PARAM-ATWRT to RF_SANKA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    data: LS_PRICE type ZVCXI_XCS_S_PRICE,
          LS_PRICP type ZVCXI_XCS_S_PRICP.


    RF_ELMST = SUPER->GET_STATUS( ).

*** Check Material
    if ME->CHECK_MATNR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Only if Material is Purchased
    if ME->GET_PURCH( ) eq ABAP_TRUE.
***   Check Price
      LS_PRICE = ME->GET_PRICE( ).
      if LS_PRICE-PRICE is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***   Check Price Unit
      LS_PRICP = ME->GET_PRICP( ).
      if LS_PRICP-PRICP is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.
    endif.

*** Check Consumption
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CONSU( ) ).

  endmethod.
  method GET_STATUS_MSG.

    data: LF_WERKS type WERKS_D.
    data: LS_PRICE type ZVCXI_XCS_S_PRICE,
          LS_PRICP type ZVCXI_XCS_S_PRICP,
          LS_CONSU type ZVCXI_XCSP_S_CONSU.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Material
    case ME->CHECK_MATNR( ).
      when 1.
***     Material Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '204' ).
      when 2.
***     Material Instance was not created.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      when 3.
***     Material Number is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '206' ).
      when 4.
***     Material Number is not valid in Plant.
        LF_WERKS = ME->GET_WERKS( ).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '207'
                                 IF_MSGV1 = LF_WERKS ).
      when others.
***     Material is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '208' ).
    endcase.


*** Only if Material is Purchased
    if ME->GET_PURCH( ) eq ABAP_TRUE.
***   Check Price
      LS_PRICE = ME->GET_PRICE( ).
      if LS_PRICE-PRICE is not initial.
***     Price is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '213' ).
      else.
***     Price is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '214' ).
      endif.

***   Check Price Unit
      LS_PRICP = ME->GET_PRICP( ).
      if LS_PRICP-PRICP is not initial.
***     Price Unit is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '215' ).
      else.
***     Price Unit is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '216' ).
      endif.
    endif.

*** Check Consumption
    ME->CHECK_CONSU( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
method GET_UOMCF.
endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_REQ_OP_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OP_FORWARD_REQ ).

    when C_IEVNT_I_INIT_MFICF.
      ME->HANDLE_INIT_MFICF( ).

    when C_IEVNT_I_INIT_MFISP.
      ME->HANDLE_INIT_MFISP( ).

    when C_IEVNT_I_INIT_CUST_MATNR.
      ME->HANDLE_INIT_CUST_MATNR( ).

    when C_IEVNT_I_RECALC_PRICE.
      ME->HANDLE_RECALC_PRICE( ).

    when C_IEVNT_I_INIT_PURCH.
      ME->HANDLE_INIT_PURCH( ).

    when C_IEVNT_I_INIT_PRICE.
      ME->HANDLE_INIT_PRICE( ).
  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR   type        MATNR,
         LF_WERKS   type        WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

  if ME->R_CUST_MATNR          is bound    and
     ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
     ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear ME->R_CUST_MATNR.

*** Catch Error while Material Customizing Instanziation
  try.
***   Load the Customizing
      ME->R_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_MATNR
                                                                IF_WERKS = LF_WERKS
                                                                IF_DATE  = SY-DATUM ).

    catch /VCXI/CX_CKX.
***   In Production it is not needed to handle Exception
      exit.
  endtry.

endmethod.
method HANDLE_INIT_PRICE.

  data: LS_PRICE type ZVCXI_XCS_S_PRICE,
        LS_PRICP type ZVCXI_XCS_S_PRICP.


  if ME->GET_PURCH( ) ne ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT_PRICE.
*** Clear Price Data
    ME->SET_PRICE( IS_PRICE = LS_PRICE
                   IF_SETBY = SPACE ).
    ME->SET_PRICP( IS_PRICP = LS_PRICP
                   IF_SETBY = SPACE ).

*** Clear Vendor
    ME->SET_LIFNR( IF_LIFNR = SPACE
                   IF_SETBY = SPACE ).

*** Default only if it is initial.
  else.
    LS_PRICE = ME->GET_PRICE( ).

    if LS_PRICE-PRICE is initial.
      ME->SET_PRICE( IS_PRICE = ME->R_CUST_MATNR->S_PRICE ).
    endif.

    LS_PRICP = ME->GET_PRICP( ).
    if LS_PRICP-PRICP is initial.
***   Do Material Conversion
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_UOM_OUT   = LS_PRICP-PRICP_UOM
                                                               IF_UOM_IN    = ME->R_CUST_MATNR->S_PRICP-PRICP_UOM
                                                               IF_VALUE_IN  = ME->R_CUST_MATNR->S_PRICP-PRICP
                                                               IF_MATNR     = ME->GET_MATNR( )
                                                     importing EF_VALUE_OUT = LS_PRICP-PRICP
                                                               EF_UOM_OUT   = LS_PRICP-PRICP_UOM ).


      ME->SET_PRICP( IS_PRICP = LS_PRICP ).
    endif.
  endif.

endmethod.
method HANDLE_INIT_PURCH.

*** Is Matrial a Dummy -> Set "Direct Procurement & Price"
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = ME->GET_MATNR( ) ) eq ABAP_TRUE.
    ME->SET_PURCH( IF_PURCH = ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT_PRICE ).
  else.
    ME->SET_PURCH( IF_PURCH = ZIF_VCXI_XCSP_MFM=>C_PURCH_STOCK ).
  endif.

endmethod.
method HANDLE_RECALC_PRICE.

  data: LS_CONSU type        ZVCXI_XCSP_S_CONSU,
        LS_PSQTY type        ZVCXI_XCS_S_PSQTY,
        LS_PRICE type        ZVCXI_XCS_S_PRICE,
        LS_PRICP type        ZVCXI_XCS_S_PRICP.
  data: LT_GATE  type        /VCXI/VKSR_TT_GATE,
        LT_UOMCF type        ZVCXI_XCS_TT_UOMCF.
  data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
        LR_PSCALE_MGR type ref to ZIF_VCXI_XCS_PSCALE_MGR.

***------------------------------------------------------------------
*** Do only Recalculate Price for "Direct Procurement & Price"
  check ME->GET_PURCH( ) eq ZIF_VCXI_XCSP_MFM=>C_PURCH_DIRECT_PRICE.

***------------------------------------------------------------------
*** If we are connect to a Scale Manager -> Request Price depending on Consumption
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCS_PSCALE_MGR=>C_IPRVT_XCS_PSCALE_MGR
                                   IF_INUSE = ABAP_TRUE ).

*** Assign Reference of Price Scale Manager
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PSCALE_MGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PSCALE_MGR.
    endtry.
  endif.

  check LR_PSCALE_MGR is bound.

***----------------------------------------------------------------------------
*** Get Consumption and request new Price Scale
  LS_CONSU = ME->GET_CONSU( ).
  LS_PSQTY-PSQTY     = LS_CONSU-CONSU.
  LS_PSQTY-PSQTY_UOM = LS_CONSU-CONSU_UOM.

  LT_UOMCF = ME->GET_UOMCF( ).

  LR_PSCALE_MGR->GET_PSCALE( exporting IS_PSQTY = LS_PSQTY
                                       IT_UOMCF = LT_UOMCF
                             importing ES_PRICE = LS_PRICE
                                       ES_PRICP = LS_PRICP ).

*** Set new Price
  ME->SET_PRICE( IS_PRICE = LS_PRICE ).
  ME->SET_PRICP( IS_PRICP = LS_PRICP ).

endmethod.
method INIT_MATNR_DUMMY.

*** Get Dummy Material
  ME->F_MATNR_DUMMY = ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE  = ME->R_GATE ).

endmethod.
method IS_DUMMY.

  data: LF_MATNR type MATNR.

  move ME->GET_MATNR( ) to LF_MATNR.

*** Is Matrial a Dummy -> Set Purchase Flag!
  if ZCL_VCXI_XCS_CUST_MATNR=>IS_DUMMY_MATNR( IR_GATE  = ME->R_GATE
                                              IF_MATNR = LF_MATNR   ) eq ABAP_TRUE.
    RF_RETURN = ABAP_TRUE.
  else.
    RF_RETURN = ABAP_FALSE.
  endif.

endmethod.
method SET_KAUSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KAUSF ).

  move IS_KAUSF-KAUSF                      to LS_PARAM-ATFLV.
  move IS_KAUSF-KAUSF_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
  method SET_SANKA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SANKA ).

    if IF_SANKA is supplied.
      LS_PARAM-ATWRT = IF_SANKA.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
method ZIF_VCXI_XCSP_MFI~CALC_CONSU.

  constants: LC_MFISP     type ZVCXI_XCSP_MFISP value 100.
  data:      LF_MFISP_DIF type ZVCXI_XCSP_MFISP,
             LF_MFICF     type ZVCXI_XCSP_MFICF,
             LF_MFICP     type ZVCXI_XCSP_MFICP.
  data:      LS_MQTYI     type ZVCXI_XCSP_S_MQTYI,
             LS_MSSWA     type /VCXI/VSM_S_MSSWA,
             LS_CONSU     type ZVCXI_XCSP_S_CONSU,
             LS_MFISP     type ZVCXI_XCSP_S_MFISP.

  move IS_MQTYI to LS_MQTYI.

*** Get Setup %
  LS_MFISP = ME->GET_MFISP( ).

*** if Setup is not initial or ne 100% -> Adjust SetupWaste
  if IS_MSSWA-MSSWA_UOM is not initial and
     LS_MFISP-MFISP_UOM is not initial.

    LF_MFISP_DIF = LC_MFISP - LS_MFISP-MFISP.

*** Calculate the right Setup Waste
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_1 = IS_MSSWA-MSSWA_UOM
                                                        IF_CALCV_2     = LF_MFISP_DIF
                                                        IF_CALCV_UOM_2 = LS_MFISP-MFISP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = IS_MSSWA-MSSWA_UOM
                                              importing EF_CALCV       = LS_MSSWA-MSSWA
                                                        EF_CALCV_UOM   = LS_MSSWA-MSSWA_UOM ).


*** Subtract Setup Waste from Machine Quantity In
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYI-MQTYI
                                                        IF_CALCV_UOM_1 = LS_MQTYI-MQTYI_UOM
                                                        IF_CALCV_2     = LS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_2 = LS_MSSWA-MSSWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = LS_MQTYI-MQTYI_UOM
                                              importing EF_CALCV       = LS_MQTYI-MQTYI
                                                        EF_CALCV_UOM   = LS_MQTYI-MQTYI_UOM ).

  endif.

*** Apply Consumption Factor
  LF_MFICF = ME->GET_MFICF( ).
  LF_MFICP = ME->GET_MFICP( ).
  if LF_MFICP ne 0.
    LS_MQTYI-MQTYI = LS_MQTYI-MQTYI * LF_MFICF / LF_MFICP.
  else.
    clear LS_MQTYI-MQTYI.
  endif.

*** Convert Quantity to Consumption UOM
  LS_CONSU = ME->CONV_TO_CONSU( IS_MQTYI = LS_MQTYI ).

*** Set Consumption
  ME->SET_CONSU( IS_CONSU = LS_CONSU ).

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CONSU.

  RS_CONSU = ME->GET_CONSU( ).

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

*** Get Material Flow Manager if it is missing
  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  if LT_GATE is initial.
***--------------------------------------------------------------------------------------
*** Get via Operation
    ME->R_PR_MFMGR->GET_CSPLIT( importing EF_ICSPA = EF_ICSPA
                                          ES_DCSPL = ES_DCSPL
                                          EF_COMPF = EF_COMPF ).

***--------------------------------------------------------------------------------------
  else.
    if lines( LT_GATE ) gt 1.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    read table LT_GATE into LR_GATE index 1.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

*** Get ID of active Cost Split
    move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
    check EF_ICSPA is not initial.

*** Get active Cost Splits
    move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
    move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.

  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_KAUSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_XCSP_MFI~C_PARID_KAUSF ).
  move LS_PARAM-ATFLV to RS_KAUSF-KAUSF.
  move LS_PARAM-UNIT  to RS_KAUSF-KAUSF_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).
  move LS_PARAM-ATFLV to RF_MFICF.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).
  move LS_PARAM-ATFLV to RF_MFICP.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFISP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).
  move LS_PARAM-ATFLV to RS_MFISP-MFISP.
  move LS_PARAM-UNIT  to RS_MFISP-MFISP_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFICF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Initialize Consumption Factor
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).

  if LS_PARAM-ATFLV is initial and
     LS_PARAM-SETBY is initial.
    ME->SET_MFICF( IF_MFICF = 1
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

***----------------------------------------------------------------------------
*** Initialize Consumption Factor Per
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).

  if LS_PARAM-ATFLV is initial and
     LS_PARAM-SETBY is initial.
    ME->SET_MFICP( IF_MFICP = 1
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFISP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM,
         LS_MFISP   type ZVCXI_XCSP_S_MFISP.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).

  if  LS_PARAM-SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER
  and LS_PARAM-ATFLV is initial.
    LS_MFISP-MFISP = 100.
    LS_MFISP-MFISP_UOM = LS_PARAM-UNIT.

    ME->SET_MFISP( IS_MFISP = LS_MFISP
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).

  move IF_MFICF to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFICF_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).

  move IF_MFICP to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFICF_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFISP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).

  move IS_MFISP-MFISP     to LS_PARAM-ATFLV.
  move IS_MFISP-MFISP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFISP_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_LIFNR_DESCR.

  data: LF_LIFNR       type LIFNR,
        LF_LIFNR_DESCR type /VCXI/CKX_DESCR.

  LF_LIFNR = ME->GET_LIFNR( ).
  check LF_LIFNR is not initial.

  select single NAME1
         from LFA1
         into LF_LIFNR_DESCR
        where LIFNR eq LF_LIFNR.

  if SY-SUBRC = 0.
    move LF_LIFNR_DESCR to RF_LIFNR_DESCR.
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).
  move LS_PARAM-ATFLV to RS_PRICE-PRICE.
  move LS_PARAM-CURKY to RS_PRICE-PRICE_CURR.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).
  move LS_PARAM-ATFLV to RS_PRICP-PRICP.
  move LS_PARAM-UNIT  to RS_PRICP-PRICP_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_PURCH.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).
  move LS_PARAM-ATWRT to RF_PURCH.

endmethod.
method ZIF_VCXI_XCSP_MFM~GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.

endmethod.
method ZIF_VCXI_XCSP_MFM~SET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ZIF_VCXI_XCSP_MFM~SET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).

  move IS_PRICE-PRICE      to LS_PARAM-ATFLV.
  move IS_PRICE-PRICE_CURR to LS_PARAM-CURKY.
  move IF_SETBY            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ZIF_VCXI_XCSP_MFM~SET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).

  move IS_PRICP-PRICP     to LS_PARAM-ATFLV.
  move IS_PRICP-PRICP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ZIF_VCXI_XCSP_MFM~SET_PURCH.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PURCH ).

  move IF_PURCH to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PURCH_CHANGED ).
  endif.


endmethod.
method ZIF_VCXI_XCSP_MFM~SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
