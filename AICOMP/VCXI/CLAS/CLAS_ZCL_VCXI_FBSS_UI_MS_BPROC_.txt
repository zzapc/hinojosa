
class ZCL_VCXI_FBSS_UI_MS_BPROC definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  constants C_DYNNR_BLANK type DYNNR value '9999' ##NO_TEXT.
  constants C_DYNNR_PSCALE type DYNNR value '0110' ##NO_TEXT.
  constants C_PURCH type SYUCOMM value 'PURCH' ##NO_TEXT.
  data S_MS_BPROC_VIS type ZVCXI_FBSS_S_MS_BPROC_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_BF_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_BPROC_VIS
    importing
      !IS_MS_BPROC_VIS type ZVCXI_FBSS_S_MS_BPROC_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_REGISTERED_UI_INFO
    redefinition .
protected section.

  constants C_UC_BP_BGPROP type SYUCOMM value 'BP_BGPROP' ##NO_TEXT.
  constants C_UC_BP_OPEN type SYUCOMM value 'OPEN' ##NO_TEXT.
  data R_GRID_PSCALE type ref to ZCL_VCXI_XCS_GRID_PSCALE .
  data R_PR_MS_BPROC type ref to ZCL_VCXI_FBSS_PR_MS_BPROC .

  methods ADJUST_SCREEN_BY_OBDIM
    importing
      !IT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM
      !IT_IBDIM type ZCL_VCXI_FBSS_UI_BFG=>YT_IBDIM
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BGPROP
    importing
      !IF_UCOMM type SYUCOMM optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OPEN
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods TOGGLE_PURCH
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_UI_MS_BPROC definition
class ZCL_VCXI_FBSS_UI_MS_BPROC implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_MS_BPROC_BIND'
      exporting
        IR_UI_MS_BPROC = ME
      importing
        ES_DYNP        = ME->S_DYNP
        EF_ACTIVE_TAB  = ME->F_ACTIVE_TAB.

*** Create Grid for Price Scale
    create object ME->R_GRID_PSCALE
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0110CC_PSCALE'.

  endmethod.
  method ADJUST_SCREEN_BY_OBDIM.

    data: LF_IBDIM type ZVCXI_FBS_IBDIM,
          LF_INV   type I.
    data: LS_BGDIM type ZVCXI_FBSSC_S_BAGTY_BGDIM.

    move 0 to CS_SCREEN-INVISIBLE.
    loop at IT_IBDIM into LF_IBDIM.
      read table IT_BGDIM with key IBDIM = LF_IBDIM transporting no fields.
      check SY-SUBRC is not initial.
      add 1 to LF_INV.
    endloop.

    if LINES( IT_IBDIM ) eq LF_INV.
      move 1 to CS_SCREEN-INVISIBLE.
      move 0 to CS_SCREEN-ACTIVE.
      return.
    endif.

    move 0 to CS_SCREEN-INPUT.
    return.

*** Find the current field from screen and loop on it
    loop at IT_IBDIM into LF_IBDIM where TABLE_LINE cs CS_SCREEN-GROUP2.
      read table IT_BGDIM into LS_BGDIM with key IBDIM = LF_IBDIM.
      if SY-SUBRC is initial.

        case LS_BGDIM-OBDIM.
          when 'M' .
            move 2 to CS_SCREEN-REQUIRED.
            move 1 to CS_SCREEN-INPUT.
            move 1 to CS_SCREEN-ACTIVE.

          when 'O'.
            move 1 to CS_SCREEN-INPUT.
            move 1 to CS_SCREEN-ACTIVE.

        endcase.
        exit.

      else.
        move 0 to CS_SCREEN-INPUT.
        move 1 to CS_SCREEN-OUTPUT.
        move 1 to CS_SCREEN-ACTIVE.
      endif.

    endloop.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_MS_BPROC.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->DO_FREE( ).
      clear ME->R_GRID_PSCALE.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE,
          LF_IBAGT  type ZVCXI_FBS_IBAGT.
    data: LT_BGDIM type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_IBDIM type ZCL_VCXI_FBSS_UI_BFG=>YT_IBDIM.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.
    field-symbols: <S_IBDIM> type ZVCXI_FBS_IBDIM.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***--------------------------------------------------------------------------------------
***     Get Bag Type (Outbound)
        ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).

***     Get Bag Customizing
        LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).
        if LR_CUST_BAG is bound.
          LT_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
          LT_CSTEP = LR_CUST_BAG->GET_CSTEP( ).
        endif.

        loop at screen.

          case SCREEN-GROUP1.
            when 'GL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
            when 'GL2'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).
            when 'FL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_IBDIM>.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).

            when 'OL1'.
              refresh LT_IBDIM.

              insert initial line into table LT_IBDIM assigning <S_IBDIM>.
              move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_IBDIM>.

              ME->ADJUST_SCREEN_BY_OBDIM( exporting IT_IBDIM = LT_IBDIM
                                                    IT_BGDIM = LT_BGDIM
                                          changing CS_SCREEN = SCREEN ).

            when 'WIK'.
              read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                                  transporting no fields.
              if SY-SUBRC is not initial.
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
                move 0 to SCREEN-REQUIRED.
                move 0 to SCREEN-INPUT.
              endif.

            when others.
          endcase.

          modify screen.
        endloop.

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       If No Dummy Material, then set to read only
          if ME->R_PR_MS_BPROC->IS_DUMMY( ) eq ABAP_FALSE.
            if SCREEN-GROUP1                eq 'DUM'.
              move 0 to SCREEN-INPUT.
              if SCREEN-GROUP3 eq 'HID'.  "Hide by Screen Group
                move 1 to SCREEN-INVISIBLE.
                move 0 to SCREEN-ACTIVE.
              endif.
            endif.
          else.
****        if Dummy Material set the Purchased Flag
            if SCREEN-GROUP1              eq 'PUR'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME eq 'ZVCXI_FBSS_S_MS_BPROC_VIS-FOVRR_MAKTX' and
             ME->S_MS_BPROC_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Disable Material Description if generated
          if SCREEN-NAME eq 'ZVCXI_FBSS_S_MS_BPROC_VIS-MATNR_DESCR' and
             ME->S_MS_BPROC_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Hide Purchasing Infos (e.g Vendor) if not purchased
          if ME->S_MS_BPROC_VIS-PURCH eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK and
             SCREEN-GROUP2            eq 'APU'.  "Active Purchasing
            move 1 to SCREEN-INVISIBLE.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

***       Check Open Supervisor is allowed
          if SCREEN-NAME eq '0100BP_BT_OPEN'.
            if ME->R_PR_MS_BPROC->IS_DUMMY( ) eq ABAP_TRUE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Refresh Grid
    if ME->R_GRID_PSCALE is bound.
      if ME->R_GRID_PSCALE->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_PSCALE->F_REFRESH_REQ.
      endif.
      ME->R_GRID_PSCALE->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_BPROC_VIS.

    data: LF_MAKTX type MAKTX.

    check ME->R_PR_MS_BPROC is bound.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if ME->S_MS_BPROC_VIS-MATNR ne IS_MS_BPROC_VIS-MATNR.
      ME->R_PR_MS_BPROC->SET_MATNR( IF_MATNR = IS_MS_BPROC_VIS-MATNR
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if ME->S_MS_BPROC_VIS-MATNR_DESCR ne IS_MS_BPROC_VIS-MATNR_DESCR or
       ME->S_MS_BPROC_VIS-FOVRR_MAKTX ne IS_MS_BPROC_VIS-FOVRR_MAKTX.
      LF_MAKTX = IS_MS_BPROC_VIS-MATNR_DESCR.

      if IS_MS_BPROC_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        ME->R_PR_MS_BPROC->SET_MAKTX( IF_MAKTX = LF_MAKTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_MS_BPROC->SET_MAKTX( IF_MAKTX = LF_MAKTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Procurement Option
    if ME->S_MS_BPROC_VIS-PURCH ne IS_MS_BPROC_VIS-PURCH.
      ME->R_PR_MS_BPROC->SET_PURCH( IF_PURCH = IS_MS_BPROC_VIS-PURCH
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    if ME->S_MS_BPROC_VIS-FPTOS ne IS_MS_BPROC_VIS-FPTOS.
      ME->R_PR_MS_BPROC->SET_FPTOS( IF_FPTOS = IS_MS_BPROC_VIS-FPTOS
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Vendor
    if ME->S_MS_BPROC_VIS-LIFNR ne IS_MS_BPROC_VIS-LIFNR.
      ME->R_PR_MS_BPROC->SET_LIFNR( IF_LIFNR = IS_MS_BPROC_VIS-LIFNR
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Bag Type
    if ME->S_MS_BPROC_VIS-IBAGT ne IS_MS_BPROC_VIS-IBAGT.
      ME->R_PR_MS_BPROC->SET_IBAGT( IF_IBAGT = IS_MS_BPROC_VIS-IBAGT
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag Width
    if ME->S_MS_BPROC_VIS-S_BGWID ne IS_MS_BPROC_VIS-S_BGWID.
      ME->R_PR_MS_BPROC->SET_BGWID( IS_BGWID = IS_MS_BPROC_VIS-S_BGWID
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag Height
    if ME->S_MS_BPROC_VIS-S_BGHEI ne IS_MS_BPROC_VIS-S_BGHEI.
      ME->R_PR_MS_BPROC->SET_BGHEI( IS_BGHEI = IS_MS_BPROC_VIS-S_BGHEI
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag Weight
    if ME->S_MS_BPROC_VIS-S_BGWGT ne IS_MS_BPROC_VIS-S_BGWGT.
      ME->R_PR_MS_BPROC->SET_BGWGT( IS_BGWGT = IS_MS_BPROC_VIS-S_BGWGT
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Overlap on Width
    if ME->S_MS_BPROC_VIS-S_OLWID ne IS_MS_BPROC_VIS-S_OLWID.
      ME->R_PR_MS_BPROC->SET_OLWID( IS_OLWID = IS_MS_BPROC_VIS-S_OLWID
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Left Gusset
    if ME->S_MS_BPROC_VIS-S_GULEF ne IS_MS_BPROC_VIS-S_GULEF.
      ME->R_PR_MS_BPROC->SET_GULEF( IS_GULEF = IS_MS_BPROC_VIS-S_GULEF
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Right Gusset
    if ME->S_MS_BPROC_VIS-S_GURIG ne IS_MS_BPROC_VIS-S_GURIG.
      ME->R_PR_MS_BPROC->SET_GURIG( IS_GURIG = IS_MS_BPROC_VIS-S_GURIG
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Top Gusset
    if ME->S_MS_BPROC_VIS-S_GUTOP ne IS_MS_BPROC_VIS-S_GUTOP.
      ME->R_PR_MS_BPROC->SET_GUTOP( IS_GUTOP = IS_MS_BPROC_VIS-S_GUTOP
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bottom Gusset
    if ME->S_MS_BPROC_VIS-S_GUBOT ne IS_MS_BPROC_VIS-S_GUBOT.
      ME->R_PR_MS_BPROC->SET_GUBOT( IS_GUBOT = IS_MS_BPROC_VIS-S_GUBOT
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Top Fold
    if ME->S_MS_BPROC_VIS-S_FOTOP ne IS_MS_BPROC_VIS-S_FOTOP.
      ME->R_PR_MS_BPROC->SET_FOTOP( IS_FOTOP = IS_MS_BPROC_VIS-S_FOTOP
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bottom Fold
    if ME->S_MS_BPROC_VIS-S_FOBOT ne IS_MS_BPROC_VIS-S_FOBOT.
      ME->R_PR_MS_BPROC->SET_FOBOT( IS_FOBOT = IS_MS_BPROC_VIS-S_FOBOT
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Wicketing Type
    if ME->S_MS_BPROC_VIS-TWICK ne IS_MS_BPROC_VIS-TWICK.
      ME->R_PR_MS_BPROC->SET_TWICK( IF_TWICK = IS_MS_BPROC_VIS-TWICK
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Wicket Lip
    if ME->S_MS_BPROC_VIS-S_WILIP ne IS_MS_BPROC_VIS-S_WILIP.
      ME->R_PR_MS_BPROC->SET_WILIP( IS_WILIP = IS_MS_BPROC_VIS-S_WILIP
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Hole Diameter
    if ME->S_MS_BPROC_VIS-S_WIHDI ne IS_MS_BPROC_VIS-S_WIHDI.
      ME->R_PR_MS_BPROC->SET_WIHDI( IS_WIHDI = IS_MS_BPROC_VIS-S_WIHDI
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Hole Space
    if ME->S_MS_BPROC_VIS-S_WIHSP ne IS_MS_BPROC_VIS-S_WIHSP.
      ME->R_PR_MS_BPROC->SET_WIHSP( IS_WIHSP = IS_MS_BPROC_VIS-S_WIHSP
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Bag/Stack
    if ME->S_MS_BPROC_VIS-WIBST ne IS_MS_BPROC_VIS-WIBST.
      ME->R_PR_MS_BPROC->SET_WIBST( IF_WIBST = IS_MS_BPROC_VIS-WIBST
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Handling Dimension
    if ME->S_MS_BPROC_VIS-S_HNDDIM ne IS_MS_BPROC_VIS-S_HNDDIM.
      ME->R_PR_MS_BPROC->SET_HNDDIM( IS_HNDDIM = IS_MS_BPROC_VIS-S_HNDDIM
                                     IF_SETBY  = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->CHECK_CHANGED_DATA( ).
    endif.

    case IF_UCOMM.

      when C_PURCH.
        ME->TOGGLE_PURCH( ).

      when C_UC_BP_BGPROP.
        ME->HANDLE_UC_BGPROP( IF_UCOMM = IF_UCOMM ).

      when C_UC_BP_OPEN.
        ME->HANDLE_UC_OPEN( ).

    endcase.

  endmethod.
  method GET_REGISTERED_UI_INFO.

*** Display Blank subscreen if no Price Scale should be shown
    if R_PR_MS_BPROC->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      move C_DYNNR_BLANK to  RS_DYNP-DYNNR.
    else.
      move C_DYNNR_PSCALE to RS_DYNP-DYNNR.
    endif.

  endmethod.
  method HANDLE_UC_BGPROP.

    data: LF_LOCKED    type  ABAP_BOOL,
          LF_BGBPX_OLD type  ZVCXI_FBS_BGBPX,
          LF_BGBPX_NEW type  ZVCXI_FBS_BGBPX,
          LF_BGFPX_OLD type  ZVCXI_FBS_BGFPX,
          LF_BGFPX_NEW type  ZVCXI_FBS_BGFPX.
    data: LS_BGDATA    type ZVCXI_FBSS_S_BGDATA.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


    if IF_UCOMM eq C_UC_BP_BGPROP.
***   Check if it`s locked only if is a Dummy material
      if ME->R_PR_MS_BPROC->IS_DUMMY( ) eq ABAP_TRUE.
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      endif.
    endif.

*** Get Bag Backward Property XML (Outbound)
    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP  = LR_BL_BGBPROP
                                                                    EF_BGBPX       = LF_BGBPX_OLD ).

*** Get Bag Forward Property XML (Outbound)
    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP  = LR_BL_BGFPROP
                                                                    EF_BGFPX       = LF_BGFPX_OLD ).

***--------------------------------------------------------------------------------------
*** Get Bag Basic data information
    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LS_BGDATA-IBAGT ).

    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_BGDATA-S_BGHEI ).

    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_BGDATA-S_BGWID ).

    ME->R_PR_MS_BPROC->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_BGDATA-S_BGWGT ).

*** Start Popup
    ZCL_VCXI_FBSS_POPUP_BGPROP=>START( IR_GATE       = ME->R_GATE
                                       IR_UIGATE     = ME->R_UIGATE
                                       IR_BL_BGBPROP = LR_BL_BGBPROP
                                       IR_BL_BGFPROP = LR_BL_BGFPROP
                                       IS_BGDATA     = LS_BGDATA
                                       IF_LOCKED     = LF_LOCKED ).

***--------------------------------------------------------------------------------------
*** Set new values of Bag Forward Property XML
    move LR_BL_BGFPROP->GET_BGFPX( ) to LF_BGFPX_NEW.
    if LF_BGFPX_OLD ne LF_BGFPX_NEW.
      ME->R_PR_MS_BPROC->SET_BGFPX( IF_BGFPX = LF_BGFPX_NEW ).
    endif.

***--------------------------------------------------------------------------------------
*** Set new values of Bag Backward Property XML
    move LR_BL_BGBPROP->GET_BGBPX( ) to LF_BGBPX_NEW.
    if LF_BGBPX_OLD ne LF_BGBPX_NEW.
      ME->R_PR_MS_BPROC->SET_BGBPX( IF_BGBPX = LF_BGBPX_NEW ).
    endif.

  endmethod.
  method HANDLE_UC_OPEN.

    data: LR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE.

***-------------------------------------------------------------------------------------
*** Open Bag Procurement Configuration
    ME->R_PR_MS_BPROC->OPEN( importing ER_GATE_XCONI = LR_GATE_XCONI ).

*** Display new Element
    if LR_GATE_XCONI is bound.
      ME->R_UIGATE->OPEN_SUBSCREEN(   IR_GATE  = LR_GATE_XCONI ).
      ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).
      ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).
    endif.

  endmethod.
  method INIT_VIS.

    free: ME->S_MS_BPROC_VIS.
    check ME->R_PR_MS_BPROC is bound.

***--------------------------------------------------------------------------------------
*** Material Number
    move ME->R_PR_MS_BPROC->GET_MATNR( ) to ME->S_MS_BPROC_VIS-MATNR.

*** Material Description
    move ME->R_PR_MS_BPROC->GET_MATNR_DESCR( ) to ME->S_MS_BPROC_VIS-MATNR_DESCR.

*** Material Description - Overwrite Flag
    ME->R_PR_MS_BPROC->GET_MAKTX( importing EF_FOVRR = ME->S_MS_BPROC_VIS-FOVRR_MAKTX ).

***--------------------------------------------------------------------------------------
*** Bag Type and Description
    ME->R_PR_MS_BPROC->GET_IBAGT( importing EF_IBAGT = ME->S_MS_BPROC_VIS-IBAGT
                                            EF_DESCR = ME->S_MS_BPROC_VIS-IBAGT_DESCR ).

*** Vendor
    ME->R_PR_MS_BPROC->GET_LIFNR( receiving RF_LIFNR = ME->S_MS_BPROC_VIS-LIFNR ).

*** Procurement Option
    ME->R_PR_MS_BPROC->GET_PURCH( receiving RF_PURCH = ME->S_MS_BPROC_VIS-PURCH ).
    ME->R_PR_MS_BPROC->GET_FPTOS( receiving RF_FPTOS = ME->S_MS_BPROC_VIS-FPTOS ).

*** Bag Width
    ME->R_PR_MS_BPROC->GET_BGWID( importing ES_BGWID = ME->S_MS_BPROC_VIS-S_BGWID ).

*** Bag Height
    ME->R_PR_MS_BPROC->GET_BGHEI( importing ES_BGHEI = ME->S_MS_BPROC_VIS-S_BGHEI ).

*** Bag Weight
    ME->R_PR_MS_BPROC->GET_BGWGT( importing ES_BGWGT = ME->S_MS_BPROC_VIS-S_BGWGT ).

***--------------------------------------------------------------------------------------
*** Overlap on Width
    ME->R_PR_MS_BPROC->GET_OLWID( importing ES_OLWID = ME->S_MS_BPROC_VIS-S_OLWID ).

***--------------------------------------------------------------------------------------
*** Left Gusset
    ME->R_PR_MS_BPROC->GET_GULEF( importing ES_GULEF = ME->S_MS_BPROC_VIS-S_GULEF ).

*** Right Gusset
    ME->R_PR_MS_BPROC->GET_GURIG( importing ES_GURIG = ME->S_MS_BPROC_VIS-S_GURIG ).

*** Top Gusset
    ME->R_PR_MS_BPROC->GET_GUTOP( importing ES_GUTOP = ME->S_MS_BPROC_VIS-S_GUTOP ).

*** Bottom Gusset
    ME->R_PR_MS_BPROC->GET_GUBOT( importing ES_GUBOT = ME->S_MS_BPROC_VIS-S_GUBOT ).

***--------------------------------------------------------------------------------------
*** Top Fold
    ME->R_PR_MS_BPROC->GET_FOTOP( importing ES_FOTOP = ME->S_MS_BPROC_VIS-S_FOTOP ).

*** Bottom Fold
    ME->R_PR_MS_BPROC->GET_FOBOT( importing ES_FOBOT = ME->S_MS_BPROC_VIS-S_FOBOT ).

***--------------------------------------------------------------------------------------
*** Wicket Type
    ME->R_PR_MS_BPROC->GET_TWICK( importing EF_TWICK = ME->S_MS_BPROC_VIS-TWICK ).

*** Wicket Lip
    ME->R_PR_MS_BPROC->GET_WILIP( importing ES_WILIP = ME->S_MS_BPROC_VIS-S_WILIP ).

*** Hole Diameter
    ME->R_PR_MS_BPROC->GET_WIHDI( importing ES_WIHDI = ME->S_MS_BPROC_VIS-S_WIHDI ).

*** Hole Space
    ME->R_PR_MS_BPROC->GET_WIHSP( importing ES_WIHSP = ME->S_MS_BPROC_VIS-S_WIHSP ).

*** Bag/Stack
    ME->R_PR_MS_BPROC->GET_WIBST( importing EF_WIBST = ME->S_MS_BPROC_VIS-WIBST ).

***--------------------------------------------------------------------------------------
*** Handling Dimension
    ME->S_MS_BPROC_VIS-S_HNDDIM = ME->R_PR_MS_BPROC->GET_HNDDIM( ).

  endmethod.
  method TOGGLE_PURCH.

    data:  LF_PURCH type FLAG.

***--------------------------------------------------------------------------------------
*** Toggle Purchased flag depending on old value
    if ME->S_MS_BPROC_VIS-PURCH eq ABAP_TRUE.
      move ABAP_FALSE to LF_PURCH.
    else.
      move ABAP_TRUE to LF_PURCH.
    endif.

*** Set Purchased Flag
    ME->R_PR_MS_BPROC->SET_PURCH( IF_PURCH = LF_PURCH
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
