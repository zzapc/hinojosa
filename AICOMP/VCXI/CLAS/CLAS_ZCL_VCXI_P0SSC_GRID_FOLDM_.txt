
class ZCL_VCXI_P0SSC_GRID_FOLDM definition
  public
  inheriting from ZCL_VCXI_P0SSC_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .

  type-pools ABAP .
  methods CHANGE_STYLE_FOLDM
    importing
      !IF_NEW type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_FOLDM
    importing
      !IT_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UC_DELTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SSC_GRID_FOLDM definition
class ZCL_VCXI_P0SSC_GRID_FOLDM implementation.
method CHANGE_STYLE_FOLDM.

  data: LF_STYLE_ENABLED type LVC_STYLE.

  if IF_NEW = ABAP_TRUE.
    move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED.
  else.
    move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED.
  endif.


*** Set Folding Type = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TFOLD'
                              IF_STYLE     = LF_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Orientation = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ORIEN'
                              IF_STYLE     = LF_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Dimension = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DIMEN'
                              IF_STYLE     = LF_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Element ID = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'IELEM'
                              IF_STYLE     = LF_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Numerator = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMN'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Denominator = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMD'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Operation = Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ELEMO'
                              IF_STYLE     = LF_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_PRSTY.
    catch CX_SY_MOVE_CAST_ERROR.
***   Product Style Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_P0SSC'
          IF_MSGNO = '101' ).
  endtry.

  move 'Folding Measurement'(001) to ME->F_DESCR.

  check ME->R_PRSTY is bound.
  ME->F_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

endmethod.
method DELETE_FOLDM.

  data:  LS_PRSTY_FOLDM  type          ZVCXI_P0SSC_S_PRSTY_FOLDM.

*** Process Result
  loop at IT_PRSTY_FOLDM into LS_PRSTY_FOLDM.

*** Delete Product Type
    ME->R_PRSTY->DELETE_FOLDM( IS_PRSTY_FOLDM = LS_PRSTY_FOLDM ).

  endloop.

endmethod.
method GET_FIELDCAT.

  data:  LF_LOCKED            type                   /VCXI/CKX_LOCKED,
         LF_DRDN_HDL          type                   INT4.
  data:  LT_DROPDOWN          type                   LVC_T_DRAL,
         LT_D07V              type standard table of DD07V,
         LT_TC320T            type standard table of ZVCXI_P0S_TC320T.
  data:  LS_D07V              type                   DD07V,
         LS_TC320T            type                   ZVCXI_P0S_TC320T.
  field-symbols: <S_FCAT>     type                   LVC_S_FCAT,
                 <S_DROPDOWN> type                   LVC_S_DRAL.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Locked Status
  LF_LOCKED = ME->R_PRSTY->IS_LOCKED( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.

    case <S_FCAT>-FIELDNAME.
      when 'TPRST' or 'PRSTY' or 'T_STYL' or 'NLINE'
        or 'DD_HANDLE_TFOLD'  or 'DD_HANDLE_ORIEN' or 'DD_HANDLE_DIMEN'
        or 'DD_HANDLE_IELEM'  or 'DD_HANDLE_ELEMO'
        or 'INIT_KEY'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'TFOLD' or 'ORIEN' or 'DIMEN' or 'IELEM' or 'ELEMO'.
        if LF_LOCKED eq ABAP_TRUE.
          add 1 to LF_DRDN_HDL.
          move ABAP_TRUE          to <S_FCAT>-EDIT.
          move ABAP_TRUE          to <S_FCAT>-F4AVAILABL.
          move LF_DRDN_HDL        to <S_FCAT>-DRDN_HNDL.
          move ABAP_TRUE          to <S_FCAT>-DRDN_ALIAS.
          concatenate 'DD_HANDLE_'
                <S_FCAT>-FIELDNAME into <S_FCAT>-DRDN_FIELD.

          move '!'                to <S_FCAT>-CHECKTABLE.
        endif.

***     Add Conversion exits.
        case <S_FCAT>-FIELDNAME.
          when 'TFOLD'.
            move 'ZP001'            to <S_FCAT>-CONVEXIT.
          when 'DIMEN'.
            move 'ZP002'            to <S_FCAT>-CONVEXIT.
          when 'ELEMO'.
            move 'ZP003'            to <S_FCAT>-CONVEXIT.
          when 'ORIEN'.
            move 'ZP004'            to <S_FCAT>-CONVEXIT.
        endcase.

      when 'ELEMN' or 'ELEMD'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

    endcase.

*** Add DropDown Handle
    check <S_FCAT>-DRDN_HNDL is not initial.

*** Get special values for Element ID
    if <S_FCAT>-FIELDNAME eq 'IELEM'.

      select * from ZVCXI_P0S_TC320T
               into corresponding fields of table LT_TC320T
              where LANGU = SY-LANGU.

      loop at LT_TC320T into LS_TC320T.
        append initial line to LT_DROPDOWN assigning <S_DROPDOWN>.
        <S_DROPDOWN>-HANDLE = <S_FCAT>-DRDN_HNDL.
        concatenate LS_TC320T-IELEM LS_TC320T-DESCR into <S_DROPDOWN>-VALUE separated by SPACE.
        <S_DROPDOWN>-INT_VALUE = LS_TC320T-IELEM.

      endloop.

*** Get Fix Value Domain
    else.
***   Get Domain Values
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = <S_FCAT>-DOMNAME
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.

      loop at LT_D07V into LS_D07V.
        append initial line to LT_DROPDOWN assigning <S_DROPDOWN>.
        <S_DROPDOWN>-HANDLE = <S_FCAT>-DRDN_HNDL.
        concatenate LS_D07V-DOMVALUE_L LS_D07V-DDTEXT into <S_DROPDOWN>-VALUE separated by SPACE.
        <S_DROPDOWN>-INT_VALUE = LS_D07V-DOMVALUE_L.
      endloop.
    endif.

  endloop.


  check LT_DROPDOWN is not initial.
  ME->R_GRID->SET_DROP_DOWN_TABLE( IT_DROP_DOWN_ALIAS = LT_DROPDOWN ).

endmethod.
method GET_GRID_DATA.

  data:          LS_PRSTY_FOLDM       type                   ZVCXI_P0SSC_S_PRSTY_FOLDM,
                 LS_PRSTY_FOLDM_GRID  type                   ZVCXI_P0SSC_S_PRSTY_FOLDM_GRID.
  field-symbols: <T_DATA>             type standard          table,
                 <S_DATA>             type                   any.


*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get Product Style - Folding Measurements Entries
  loop at ME->R_PRSTY->T_PRSTY_FOLDM into LS_PRSTY_FOLDM.
    clear: LS_PRSTY_FOLDM_GRID.

    move-corresponding LS_PRSTY_FOLDM to LS_PRSTY_FOLDM_GRID.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_FOLDM( exporting IF_NEW  = ABAP_FALSE
                            changing  CT_STYL = LS_PRSTY_FOLDM_GRID-T_STYL ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_PRSTY_FOLDM_GRID to <S_DATA>.

  endloop.

*** --------------------------------------------------------------------------------------------
*** Add 10 Initial Entries with Flag New Line
  clear: LS_PRSTY_FOLDM_GRID.
  move ABAP_TRUE to LS_PRSTY_FOLDM_GRID-NLINE.
  move 1         to LS_PRSTY_FOLDM_GRID-DD_HANDLE_TFOLD.
  move 2         to LS_PRSTY_FOLDM_GRID-DD_HANDLE_ORIEN.
  move 3         to LS_PRSTY_FOLDM_GRID-DD_HANDLE_DIMEN.
  move 4         to LS_PRSTY_FOLDM_GRID-DD_HANDLE_IELEM.
  move 5         to LS_PRSTY_FOLDM_GRID-DD_HANDLE_ELEMO.


*** --------------------------------------------------------------------------------------------
*** Set Style Details
  ME->CHANGE_STYLE_FOLDM( exporting IF_NEW  = ABAP_TRUE
                          changing  CT_STYL = LS_PRSTY_FOLDM_GRID-T_STYL ).

  if ME->R_PRSTY->IS_LOCKED( ) eq ABAP_TRUE.
    do 10 times.
*** --------------------------------------------------------------------------------------------
*** Add Entry -> only in Edit Mode
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_PRSTY_FOLDM_GRID to <S_DATA>.

    enddo.
  endif.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED.

  data: LF_IELEM            type          ZVCXI_P0SS_IELEM.
  data: LS_PRSTY_FOLDM      type          ZVCXI_P0SSC_S_PRSTY_FOLDM,
        LS_PRSTY_FOLDM_GRID type          ZVCXI_P0SSC_S_PRSTY_FOLDM_GRID,
        LS_GOOD_CELLS       type          LVC_S_MODI.
  data: LR_CX_CKX           type ref to   /VCXI/CX_CKX.
  field-symbols: <S_MOD_CELLS> type          LVC_S_MODI,
                 <T_DATA>      type standard table,
                 <S_DATA>      type          ANY,
                 <F_FIELD>     type          ANY.


  try.
***----------------------------------------------------------------------------
***   Call SUPER
      SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                            E_ONF4          = E_ONF4
                                            E_ONF4_BEFORE   = E_ONF4_BEFORE
                                            E_ONF4_AFTER    = E_ONF4_AFTER
                                            E_UCOMM         = E_UCOMM ).

***----------------------------------------------------------------------------
***   Igonore SPACE on Orientation
      loop at ER_DATA_CHANGED->MT_MOD_CELLS assigning <S_MOD_CELLS>
                                            where FIELDNAME eq 'ORIEN'
                                             and  VALUE     eq SPACE
                                             and  ERROR     eq ABAP_TRUE.
        <S_MOD_CELLS>-ERROR = SPACE.
        delete ER_DATA_CHANGED->MT_PROTOCOL where FIELDNAME = <S_MOD_CELLS>-FIELDNAME
                                             and  ROW_ID    = <S_MOD_CELLS>-ROW_ID.
      endloop.

***----------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PRSTY_FOLDM_GRID.
        move-corresponding LS_PRSTY_FOLDM_GRID to LS_PRSTY_FOLDM.

***     If it was already there and the Key Fields are initial -> delete line and set New Line Flag
        if LS_PRSTY_FOLDM-TFOLD is initial or
           LS_PRSTY_FOLDM-DIMEN is initial or
           LS_PRSTY_FOLDM-IELEM is initial.

          ME->R_PRSTY->DELETE_FOLDM( IS_PRSTY_FOLDM = LS_PRSTY_FOLDM ).

          move ABAP_TRUE to LS_PRSTY_FOLDM_GRID-NLINE.
          move-corresponding LS_PRSTY_FOLDM_GRID to <S_DATA>.
        endif.

      endloop.

      loop at ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS.
***     Check Default Element
        if LS_GOOD_CELLS-FIELDNAME eq 'IELEM'.
          assign component LS_GOOD_CELLS-FIELDNAME of structure LS_PRSTY_FOLDM to <F_FIELD>.
          check SY-SUBRC = 0.
          move LS_GOOD_CELLS-VALUE to <F_FIELD>.

          select single IELEM from ZVCXI_P0S_TC320
          into LF_IELEM
          where IELEM = <F_FIELD>.

***       Add Protocol - Please maintain existing Element ID for Default Value Element.
          check SY-SUBRC ne 0.
          ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_P0SSC'
                                                         I_MSGTY     = 'E'
                                                         I_MSGNO     = '090'
                                                         I_FIELDNAME = 'IELEM'
                                                         I_ROW_ID    = LS_GOOD_CELLS-ROW_ID ).

          ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

        endif.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.                    "HANDLE_DATA_CHANGED
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_PRSTY_FOLDM       type          ZVCXI_P0SSC_S_PRSTY_FOLDM,
                 LS_PRSTY_FOLDM_GRID  type          ZVCXI_P0SSC_S_PRSTY_FOLDM_GRID.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PRSTY_FOLDM_GRID.
        move-corresponding LS_PRSTY_FOLDM_GRID to LS_PRSTY_FOLDM.
        move-corresponding ME->R_PRSTY->S_PRSTY to LS_PRSTY_FOLDM.

        if LS_PRSTY_FOLDM_GRID-NLINE eq ABAP_TRUE.
***       If it was an Initial Line -> Add
          ME->R_PRSTY->ADD_FOLDM( IS_PRSTY_FOLDM = LS_PRSTY_FOLDM ).

        else.
***       If it was already there -> Update
          ME->R_PRSTY->UPDATE_FOLDM( IS_PRSTY_FOLDM = LS_PRSTY_FOLDM ).

        endif.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_PRSTY->IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar Element Delete
      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_DELTE.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_PRSTY_FOLDM  type          ZVCXI_P0SSC_TT_PRSTY_FOLDM.
  field-symbols: <T_DATA>        type standard table,
                 <S_PRSTY_FOLDM> type          ZVCXI_P0SSC_S_PRSTY_FOLDM,
                 <S_DATA>        type          any.

*** Get Product Style Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete Joint Type
  if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
*** No Row Selected. Please Select all Row's you wanna Delete.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_P0SSC'
        F_MSGNO = '002'.
  endif.

*** Get Selected Joint Type
  loop at LT_CELL into LS_CELL.
    read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_FOLDM assigning <S_PRSTY_FOLDM>.
    move-corresponding <S_DATA> to <S_PRSTY_FOLDM>.
  endloop.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC = 0.

    append initial line to LT_PRSTY_FOLDM assigning <S_PRSTY_FOLDM>.
    move-corresponding <S_DATA> to <S_PRSTY_FOLDM>.
  endloop.

*** Delete Selected Joint Types
  ME->DELETE_FOLDM( IT_PRSTY_FOLDM = LT_PRSTY_FOLDM ).

endmethod.
method HANDLE_USER_COMMAND.

  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      case E_UCOMM.

        when C_FUNC_DEL.
          ME->HANDLE_UC_DELTE( ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
