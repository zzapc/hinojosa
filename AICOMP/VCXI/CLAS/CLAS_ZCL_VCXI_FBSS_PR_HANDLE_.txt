
class ZCL_VCXI_FBSS_PR_HANDLE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_NGREP .

  types:
    YT_TC112 type standard table of ZVCXI_FBS_TC112 with default key .

  constants C_IPRVT_HANDLE type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_HANDLE' ##NO_TEXT.
  constants C_PARID_COARE type /VCXI/VKS_PARID value 'ZVCXI_FB_COARE' ##NO_TEXT.
  constants C_PARID_HNARE type /VCXI/VKS_PARID value 'ZVCXI_FB_HNARE' ##NO_TEXT.
  constants C_PARID_HNWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_HNWGT' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.
  constants C_PARID_LCOUT type /VCXI/VKS_PARID value 'ZVCXI_FB_LCOUT' ##NO_TEXT.
  constants C_PARID_LHNDL type /VCXI/VKS_PARID value 'ZVCXI_FB_LHNDL' ##NO_TEXT.
  constants C_PARID_THNDL type /VCXI/VKS_PARID value 'ZVCXI_FB_THNDL' ##NO_TEXT.
  constants C_IEVNT_O_THNDL_CHANGED type /VCXI/VKSC_IEVNT value 'THNDL_CHANGED' ##NO_TEXT.

  methods GET_COARE
    exporting
      !ES_COARE type ZVCXI_FBS_S_COARE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_HNARE
    exporting
      !ES_HNARE type ZVCXI_FBS_S_HNARE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_HNWGT
    exporting
      !ES_HNWGT type ZVCXI_FBS_S_HNWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LCOUT
    exporting
      !EF_LCOUT type ZVCXI_FBS_LCOUT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LHNDL
    exporting
      !EF_LHNDL type ZVCXI_FBS_LHNDL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_THNDL
    exporting
      !EF_THNDL type ZVCXI_FBS_THNDL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_COARE
    importing
      !IS_COARE type ZVCXI_FBS_S_COARE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_LCOUT
    importing
      !IF_LCOUT type ZVCXI_FBS_LCOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_LHNDL
    importing
      !IF_LHNDL type ZVCXI_FBS_LHNDL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_THNDL
    importing
      !IF_THNDL type ZVCXI_FBS_THNDL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_HANDLE_HPART type /VCXI/VKSC_IEVNT value 'INIT_HANDLE_HPART' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNARE type /VCXI/VKSC_IEVNT value 'RECALC_HNARE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNWGT type /VCXI/VKSC_IEVNT value 'RECALC_HNWGT' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_HNARE_CHANGED type /VCXI/VKSC_IEVNT value 'HNARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HNWGT_CHANGED type /VCXI/VKSC_IEVNT value 'HNWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LCOUT_CHANGED type /VCXI/VKSC_IEVNT value 'LCOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COARE_CHANGED type /VCXI/VKSC_IEVNT value 'COARE_CHANGED' ##NO_TEXT.

  methods SET_HNARE
    importing
      !IS_HNARE type ZVCXI_FBS_S_HNARE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNWGT
    importing
      !IS_HNWGT type ZVCXI_FBS_S_HNWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods CHECK_COARE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LCOUT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_THNDL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_HANDLE_HPART
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNARE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_HANDLE definition
class ZCL_VCXI_FBSS_PR_HANDLE implementation.
method CHECK_COARE.

*** 0 - Handle Cutout Area is maintained.
*** 1 - Handle Cutout Area is not maintained.
*** 2 - Do not check.

  data: LF_THNDL type  ZVCXI_FBS_THNDL.
  data: LS_COARE type  ZVCXI_FBS_S_COARE,
        LS_TC110 type  ZVCXI_FBS_TC110.

  move 2 to RF_RETURN.

  ME->GET_COARE( importing ES_COARE = LS_COARE ).
  if LS_COARE-COARE is not initial.
    move 0 to RF_RETURN.
    return.
  endif.

*** Get Handle Type Cutout Options
  ME->GET_THNDL( importing EF_THNDL = LF_THNDL ).
  read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110 into LS_TC110 with key THNDL = LF_THNDL.

*** Check if Mandatory
  if LS_TC110-OHNCO eq 'M' and LS_COARE-COARE is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_LCOUT.

*** 0 - Handle Cutout Location is maintained.
*** 1 - Handle Cutout Location is not maintained.
*** 2 - Do not check.

  data: LF_THNDL type  ZVCXI_FBS_THNDL,
        LF_LCOUT type  ZVCXI_FBS_LCOUT.
  data: LS_TC110 type  ZVCXI_FBS_TC110.

  move 2 to RF_RETURN.

  ME->GET_LCOUT( importing EF_LCOUT = LF_LCOUT ).
  if LF_LCOUT is not initial.
    move 0 to RF_RETURN.
    return.
  endif.

*** Get Handle Type Cutout Options
  ME->GET_THNDL( importing EF_THNDL = LF_THNDL ).
  read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110 into LS_TC110 with key THNDL = LF_THNDL.

*** Check if Mandatory
  if LS_TC110-OHNCO eq 'M' and LF_LCOUT is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_THNDL.

*** 0 - Handle type is maintained and valid.
*** 1 - Handle type is maintained and not valid.
*** 2 - Handle type is not maintained.

  data: LF_THNDL type  ZVCXI_FBS_THNDL,
        LF_IBAGT type ZVCXI_FBS_IBAGT.
  data: LS_TC110 type  ZVCXI_FBS_TC110.
  data: LT_GATE  type  /VCXI/VKSR_TT_GATE,
        LT_THNDL type /VCXI/CKX_TT_ID.
  data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE,
        LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.

  move 0 to RF_RETURN.

  ME->GET_THNDL( importing EF_THNDL = LF_THNDL ).

***--------------------------------------------------------------------------------------
*** Get Bag Making
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BMAKE=>C_IPRVT_BMAKE
                                   IF_INUSE  = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC is initial.
    try .
        move LR_GATE->R_CLSPR ?to LR_PR_BMAKE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_BMAKE.
    endtry.
  endif.

  if LR_PR_BMAKE is bound.
    move LR_PR_BMAKE->GET_CUST_BAG( ) to LR_CUST_BAG.
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_HANDLE( ) to LT_THNDL.
    endif.
  endif.

  read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110 with key THNDL = LF_THNDL transporting no fields.
  if SY-SUBRC is not initial.
    move 2 to RF_RETURN.
    return.
  else.
    read table LT_THNDL with key TABLE_LINE = LF_THNDL transporting no fields.
    if SY-SUBRC is not initial.
      move 1 to RF_RETURN.
    endif.
  endif.

endmethod.
  method GET_COARE.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).
    move LS_PARAM-ATFLV to ES_COARE-COARE.
    move LS_PARAM-UNIT  to ES_COARE-COARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_DESCR.

    data: LF_THNDL  type ZVCXI_FBS_THNDL.
    data: LS_TC110T type ZVCXI_FBS_TC110T.

    ME->GET_THNDL( importing EF_THNDL = LF_THNDL ).

    if LF_THNDL is initial.
      SUPER->GET_DESCR( receiving RF_DESCR = RF_DESCR ).
    else.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC110T into LS_TC110T
                                                with key THNDL = LF_THNDL.
      check SY-SUBRC is initial.

      move LS_TC110T-DESCR to RF_DESCR.
    endif.

  endmethod.
  method GET_HNARE.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNARE ).
    move LS_PARAM-ATFLV to ES_HNARE-HNARE.
    move LS_PARAM-UNIT  to ES_HNARE-HNARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HNWGT.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNWGT ).
    move LS_PARAM-ATFLV to ES_HNWGT-HNWGT.
    move LS_PARAM-UNIT  to ES_HNWGT-HNWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LCOUT.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LCOUT ).
    move LS_PARAM-ATWRT to EF_LCOUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LHNDL.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LHNDL ).
    move LS_PARAM-ATWRT to EF_LHNDL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Handle Type
    case ME->CHECK_THNDL( ) .
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

*** Check Handle Cutout Area
    case ME->CHECK_COARE( ) .
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

*** Check Handle Cutout Location
    case ME->CHECK_LCOUT( ) .
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Handle Type
    case ME->CHECK_THNDL( ).
      when 0.
***     Handle type is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '355' ).


      when 1.
***     Handle type is maintained but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '356' ).

      when 2.
***     Handle type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '357' ).
    endcase.

*** Check Handle Cutout Area
    case ME->CHECK_COARE( ).
      when 0.

***     Handle Cutout Area is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '351' ).


      when 1.

***     Handle Cutout Area is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '352' ).

    endcase.

*** Check Handle Cutout Location
    case ME->CHECK_LCOUT( ).
      when 0.

***     Handle Cutout Location is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '353' ).


      when 1.

***     Handle Cutout Location is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '354' ).

    endcase.

  endmethod.
  method GET_THNDL.

    data: LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to EF_THNDL.
    move LS_LEOKY-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_HNARE.
        ME->HANDLE_RECALC_HNARE( ).

      when C_IEVNT_I_RECALC_HNWGT.
        ME->HANDLE_RECALC_HNWGT( ).

      when C_IEVNT_I_INIT_HANDLE_HPART .
        ME->HANDLE_INIT_HANDLE_HPART( ).

    endcase.

  endmethod.
  method HANDLE_INIT_HANDLE_HPART.

    data: LF_THNDL     type ZVCXI_FBS_THNDL,
          LF_TPHND_DEF type ZVCXI_FBS_TPHND,
          LF_TPHND     type ZVCXI_FBS_IBPAR.
    data: LS_TC112     type ZVCXI_FBS_TC112.
    data: LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_HANDLE_HPART type ref to ZIF_VCXI_FBSS_HANDLE_HPART.


*** Get Handle Type
    ME->GET_THNDL( importing EF_THNDL = LF_THNDL ).

***--------------------------------------------------------------------------------------
*** Get existing Handle Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_FBSS_HANDLE_HPART=>C_IPRVT_HANDLE_HPART
                                     IF_INUSE = ABAP_TRUE ).

*** Create used Handle Parts
    loop at ZCL_VCXI_FBSSC_BAGTY=>T_TC112 into LS_TC112 where THNDL = LF_THNDL.
      clear LR_GATE.

      move LS_TC112-TPHND to LF_TPHND_DEF.

***   Find existing
      loop at LT_GATE into LR_GATE.
        move LR_GATE->R_CLSPR ?to LR_HANDLE_HPART.
        check LR_HANDLE_HPART is bound.

        LR_HANDLE_HPART->GET_TPHND( importing EF_TPHND = LF_TPHND ).

        if LF_TPHND eq LF_TPHND_DEF and LS_TC112-QTYMI > 0.
          delete LT_GATE.
          LS_TC112-QTYMI = LS_TC112-QTYMI - 1.
          LS_TC112-QTYMA = LS_TC112-QTYMA - 1.
        elseif LF_TPHND eq LF_TPHND_DEF and LS_TC112-QTYMA > 0.
          delete LT_GATE.
          LS_TC112-QTYMA = LS_TC112-QTYMA - 1.
        endif.
      endloop.

***   Create new Handle Part
      if LS_TC112-QTYMI > 0.

        do LS_TC112-QTYMI times.

          clear LR_GATE.

          LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_TC112-ICELM ).
          check LR_GATE is bound.
          if LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
            LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
          endif.

          move LR_GATE->R_CLSPR ?to LR_HANDLE_HPART.

          check LR_HANDLE_HPART is bound.

***       Set Handle Part Type
          LR_HANDLE_HPART->SET_TPHND( IF_TPHND = LF_TPHND_DEF ).

        enddo.

      endif.

    endloop.

***--------------------------------------------------------------------------------------
*** Free not used Handle Parts
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

  endmethod.
  method HANDLE_RECALC_HNARE.

    data: LS_HPARE type ZVCXI_FBS_S_HPARE,
          LS_HNARE type ZVCXI_FBS_S_HNARE.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_HPART type ref to ZCL_VCXI_FBSS_PR_HPART.


***--------------------------------------------------------------------------------------
*** Get Handle Parts (Length)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_HPART=>C_IPRVT_HPART
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_HPART.

***   Get Sum of Handle Part Area
      LR_PR_HPART->GET_HPARE( importing ES_HPARE = LS_HPARE ).
      if LS_HNARE is initial.
        move LS_HPARE-HPARE     to LS_HNARE-HNARE.
        move LS_HPARE-HPARE_UOM to LS_HNARE-HNARE_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_HPARE-HPARE
                                                            IF_CALCV_UOM_1 = LS_HPARE-HPARE_UOM
                                                            IF_CALCV_2     = LS_HNARE-HNARE
                                                            IF_CALCV_UOM_2 = LS_HNARE-HNARE_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_HNARE-HNARE_UOM
                                                  importing EF_CALCV       = LS_HNARE-HNARE
                                                            EF_CALCV_UOM   = LS_HNARE-HNARE_UOM ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Handle Area
    ME->SET_HNARE( IS_HNARE = LS_HNARE ).

  endmethod.
  method HANDLE_RECALC_HNWGT.

    data: LS_HPWGT type ZVCXI_FBS_S_HPWGT,
          LS_HNWGT type ZVCXI_FBS_S_HNWGT.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_HANDLE_HPART type ref to ZIF_VCXI_FBSS_HANDLE_HPART.


***--------------------------------------------------------------------------------------
*** Get Handle Parts
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_FBSS_HANDLE_HPART=>C_IPRVT_HANDLE_HPART
                                     IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_HANDLE_HPART.

***   Get Sum of Handle Part Weight
      LR_HANDLE_HPART->GET_HPWGT( importing ES_HPWGT = LS_HPWGT ).
      if LS_HNWGT is initial.
        move LS_HPWGT-HPWGT     to LS_HNWGT-HNWGT.
        move LS_HPWGT-HPWGT_UOM to LS_HNWGT-HNWGT_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_HPWGT-HPWGT
                                                            IF_CALCV_UOM_1 = LS_HPWGT-HPWGT_UOM
                                                            IF_CALCV_2     = LS_HNWGT-HNWGT
                                                            IF_CALCV_UOM_2 = LS_HNWGT-HNWGT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_HNWGT-HNWGT_UOM
                                                  importing EF_CALCV       = LS_HNWGT-HNWGT
                                                            EF_CALCV_UOM   = LS_HNWGT-HNWGT_UOM ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Handle Weight
    ME->SET_HNWGT( IS_HNWGT = LS_HNWGT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_COARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).

    move IS_COARE-COARE     to LS_PARAM-ATFLV.
    move IS_COARE-COARE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COARE_CHANGED ).

    endif.

  endmethod.
  method SET_HNARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNARE ).

    move IS_HNARE-HNARE     to LS_PARAM-ATFLV.
    move IS_HNARE-HNARE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNARE_CHANGED ).

    endif.

  endmethod.
  method SET_HNWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNWGT ).

    move IS_HNWGT-HNWGT     to LS_PARAM-ATFLV.
    move IS_HNWGT-HNWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNWGT_CHANGED ).

    endif.

  endmethod.
  method SET_LCOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LCOUT ).

    move IF_LCOUT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LCOUT_CHANGED ).

    endif.

  endmethod.
  method SET_LHNDL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LHNDL ).

    move IF_LHNDL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_THNDL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_LEOKY   type /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move IF_THNDL           to LS_LEOKY-LEOKY.
    move IF_SETBY           to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_THNDL_CHANGED ).

    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Attribute Data
    ME->GET_THNDL( importing EF_THNDL = data(LF_THNDL) ).                "Handle Type
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_THNDL
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_SHAPE     = ZCL_VCXI_XCS_NETGRAPH_JSON=>C_SHAPE_CIRCLE
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***--------------------------------------------------------------------------------------
*** Register Handle Parts to Handle
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_FBSS_HANDLE_HPART=>C_IPRVT_HANDLE_HPART
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE
                                          IF_NODE_KEY = LF_NODE_KEY ).
***   Register Bag Films to Handle Part
      loop at LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                  IF_INUSE  = ABAP_TRUE ) into LR_GATE.
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE
                                            IF_NODE_KEY = LF_NODE_KEY ).
      endloop.
    endloop.

  endmethod.
