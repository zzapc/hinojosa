
class ZCL_VCXI_P0SS_PR_AREA_WGT_MCH definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_P0_AREA_WGT_MCH type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_AREA_WGT_MCH'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAG
    returning
      value(RS_ABLAG) type ZVCXI_P0SS_S_ABLAG
    raising
      /VCXI/CX_CKX .
  methods GET_WGRPO
    returning
      value(RS_WGRPO) type ZVCXI_P0SS_S_WGRPO
    raising
      /VCXI/CX_CKX .
  methods GET_WGRPP
    returning
      value(RS_WGRPP) type ZVCXI_P0SS_S_WGRPP
    raising
      /VCXI/CX_CKX .
  methods GET_WNEPP
    returning
      value(RS_WNEPP) type ZVCXI_P0SS_S_WNEPP
    raising
      /VCXI/CX_CKX .
  methods GET_WNEPO
    returning
      value(RS_WNEPO) type ZVCXI_P0SS_S_WNEPO
    raising
      /VCXI/CX_CKX .
  methods GET_ABLAN
    returning
      value(RS_ABLAN) type ZVCXI_P0SS_S_ABLAN
    raising
      /VCXI/CX_CKX .
  methods GET_AREAO
    returning
      value(RS_AREAO) type ZVCXI_P0SS_S_AREAO
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAG
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAG type ZVCXI_P0SS_S_ABLAG
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_ABLAN
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_ABLAN type ZVCXI_P0SS_S_ABLAN
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WGRPO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WGRPO type ZVCXI_P0SS_S_WGRPO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WGRPP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WGRPP type ZVCXI_P0SS_S_WGRPP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WNEPO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WNEPO type ZVCXI_P0SS_S_WNEPO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WNEPP
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_WNEPP type ZVCXI_P0SS_S_WNEPP
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_WEIGHT type /VCXI/VKSC_IEVNT value 'RECALC_WEIGHT'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAG_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAG_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_ABLAN_CHANGED type /VCXI/VKSC_IEVNT value 'ABLAN_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_AREAO_CHANGED type /VCXI/VKSC_IEVNT value 'AREAO_CHANGED'. "#EC NOTEXT
  constants C_PARID_ABLAG type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAG'. "#EC NOTEXT
  constants C_PARID_ABLAN type /VCXI/VKS_PARID value 'ZVCXI_P0_ABLAN'. "#EC NOTEXT
  constants C_PARID_AREAO type /VCXI/VKS_PARID value 'ZVCXI_P0_AREAO'. "#EC NOTEXT
  constants C_PARID_WGRPO type /VCXI/VKS_PARID value 'ZVCXI_P0_WGRPO'. "#EC NOTEXT
  constants C_PARID_WGRPP type /VCXI/VKS_PARID value 'ZVCXI_P0_WGRPP'. "#EC NOTEXT
  constants C_PARID_WNEPO type /VCXI/VKS_PARID value 'ZVCXI_P0_WNEPO'. "#EC NOTEXT
  constants C_PARID_WNEPP type /VCXI/VKS_PARID value 'ZVCXI_P0_WNEPP'. "#EC NOTEXT
  constants C_IEVNT_O_WGRPO_CHANGED type /VCXI/VKSC_IEVNT value 'WGRPO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WGRPP_CHANGED type /VCXI/VKSC_IEVNT value 'WGRPP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WNEPO_CHANGED type /VCXI/VKSC_IEVNT value 'WNEPO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WNEPP_CHANGED type /VCXI/VKSC_IEVNT value 'WNEPP_CHANGED'. "#EC NOTEXT

  methods GET_OPQTY
    returning
      value(RS_OPQTY) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AREA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WEIGHT
    raising
      /VCXI/CX_CKX .
  methods SET_AREAO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_AREAO type ZVCXI_P0SS_S_AREAO
    preferred parameter IF_SETBY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_AREA_WGT_MCH definition
class ZCL_VCXI_P0SS_PR_AREA_WGT_MCH implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_ABLAG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).
  move LS_PARAM-ATFLV to RS_ABLAG-ABLAG.
  move LS_PARAM-UNIT  to RS_ABLAG-ABLAG_UOM.

endmethod.
method GET_ABLAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).
  move LS_PARAM-ATFLV to RS_ABLAN-ABLAN.
  move LS_PARAM-UNIT  to RS_ABLAN-ABLAN_UOM.

endmethod.
method GET_AREAO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).
  move LS_PARAM-ATFLV to RS_AREAO-AREAO.
  move LS_PARAM-UNIT  to RS_AREAO-AREAO_UOM.

endmethod.
method GET_OPQTY.

  data:  LS_QITEM         type        ZVCXI_XCSS_S_QITEM.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get Operation Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    LR_OPQTY->GET_QITEM( importing ES_QITEM_SELF = LS_QITEM ).
    move LS_QITEM-QITEM     to RS_OPQTY-OPQTY.
    move LS_QITEM-QITEM_UOM to RS_OPQTY-OPQTY_UOM.
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY to RS_OPQTY.
  endif.

endmethod.
method GET_STATUS.

  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_ABLAG        type        ZVCXI_P0SS_S_ABLAG,
         LS_WGRPP        type        ZVCXI_P0SS_S_WGRPP,
         LS_WNEPP        type        ZVCXI_P0SS_S_WNEPP.

  RF_ELMST = SUPER->GET_STATUS( ).

  try.

***---------------------------------------------------------------------------------------------
***   Check Net Blank Area
      LS_ABLAN = ME->GET_ABLAN( ).
      if LS_ABLAN-ABLAN is initial
      or LS_ABLAN-ABLAN le 0.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Gross Blank Area
      LS_ABLAG = ME->GET_ABLAG( ).
      if LS_ABLAG-ABLAG is initial
      or LS_ABLAG-ABLAG le 0.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Net Weight per Piece
      LS_WNEPP = ME->GET_WNEPP( ).
      if LS_WNEPP-WNEPP is initial
      or LS_WNEPP-WNEPP le 0.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Gross Weight per Piece
      LS_WGRPP = ME->GET_WGRPP( ).
      if LS_WGRPP-WGRPP is initial
      or LS_WGRPP-WGRPP le 0.

***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

    catch /VCXI/CX_CKX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_E ).
  endtry.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  data:  LS_ABLAN        type        ZVCXI_P0SS_S_ABLAN,
         LS_ABLAG        type        ZVCXI_P0SS_S_ABLAG,
         LS_WGRPP        type        ZVCXI_P0SS_S_WGRPP,
         LS_WNEPP        type        ZVCXI_P0SS_S_WNEPP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***-----------------------------------------------------------------------------------
*** Check Net Blank Area
  LS_ABLAN = ME->GET_ABLAN( ).
  if LS_ABLAN-ABLAN is initial.

*** Net Blank Area is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '510' ).

  else.
*** Net Blank Area is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '511' ).
  endif.

***-----------------------------------------------------------------------------------
*** Check Gross Blank Area
  LS_ABLAG = ME->GET_ABLAG( ).
  if LS_ABLAG-ABLAG is initial.

*** Gross Blank Area is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '512' ).

  else.
*** Gross Blank Area is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '513' ).
  endif.

***---------------------------------------------------------------------------------------------
*** Check Net Weight per Piece
  LS_WNEPP = ME->GET_WNEPP( ).
  if LS_WNEPP-WNEPP is initial.

*** Net Weight per Piece is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '514' ).

  else.
*** Net Weight per Piece is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '515' ).
  endif.

***---------------------------------------------------------------------------------------------
*** Check Gross Weight per Piece
  LS_WGRPP = ME->GET_WGRPP( ).
  if LS_WGRPP-WGRPP is initial.

*** Gross Weight per Piece is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '516' ).

  else.
*** Gross Weight per Piece is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '517' ).
  endif.

endmethod.
method GET_WGRPO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRPO ).
  move LS_PARAM-ATFLV to RS_WGRPO-WGRPO.
  move LS_PARAM-UNIT  to RS_WGRPO-WGRPO_UOM.

endmethod.
method GET_WGRPP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRPP ).
  move LS_PARAM-ATFLV to RS_WGRPP-WGRPP.
  move LS_PARAM-UNIT  to RS_WGRPP-WGRPP_UOM.

endmethod.
method GET_WNEPO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPO ).
  move LS_PARAM-ATFLV to RS_WNEPO-WNEPO.
  move LS_PARAM-UNIT  to RS_WNEPO-WNEPO_UOM.

endmethod.
method GET_WNEPP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPP ).
  move LS_PARAM-ATFLV to RS_WNEPP-WNEPP.
  move LS_PARAM-UNIT  to RS_WNEPP-WNEPP_UOM.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_AREA.
      ME->HANDLE_RECALC_AREA( ).

    when C_IEVNT_I_RECALC_WEIGHT.
      ME->HANDLE_RECALC_WEIGHT( ).

  endcase.

endmethod.
method HANDLE_RECALC_AREA.

  data:          LS_AREAO      type        ZVCXI_P0SS_S_AREAO,
                 LS_ABLAN      type        ZVCXI_P0SS_S_ABLAN,
                 LS_OPQTY      type        /VCXI/VSMR_S_OPQTY.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_AREAO>     type        ZVCXI_P0SS_AREAO.

***--------------------------------------------------------------------------------------
*** Set area per Order
  LS_AREAO = ME->GET_AREAO( ).
  LS_ABLAN = ME->GET_ABLAN( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_AREAO-AREAO = LS_OPQTY-OPQTY * LS_ABLAN-ABLAN.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_AREAO-AREAO ).
      assign LR_DATA->* to <F_AREAO>.
      LS_AREAO-AREAO = <F_AREAO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_AREAO-AREAO < 0.
    move 0 to LS_AREAO-AREAO.
  endif.

  ME->SET_AREAO( IS_AREAO = LS_AREAO ).

endmethod.
method HANDLE_RECALC_WEIGHT.

  data:          LS_WNEPO      type        ZVCXI_P0SS_S_WNEPO,
                 LS_WNEPP      type        ZVCXI_P0SS_S_WNEPP,
                 LS_WGRPO      type        ZVCXI_P0SS_S_WGRPO,
                 LS_WGRPP      type        ZVCXI_P0SS_S_WGRPP,
                 LS_OPQTY      type        /VCXI/VSMR_S_OPQTY.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_WNEPO>     type        ZVCXI_P0SS_WNEPO,
                 <F_WGRPO>     type        ZVCXI_P0SS_WGRPO.

***--------------------------------------------------------------------------------------
*** Set Net Weight per Order
  LS_WNEPO = ME->GET_WNEPO( ).
  LS_WNEPP = ME->GET_WNEPP( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_WNEPO-WNEPO = LS_OPQTY-OPQTY * LS_WNEPP-WNEPP.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_WNEPO-WNEPO ).
      assign LR_DATA->* to <F_WNEPO>.
      LS_WNEPO-WNEPO = <F_WNEPO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_WNEPO-WNEPO < 0.
    move 0 to LS_WNEPO-WNEPO.
  endif.

  ME->SET_WNEPO( IS_WNEPO = LS_WNEPO ).

***--------------------------------------------------------------------------------------
*** Set Gross Weight per Order
  LS_WGRPO = ME->GET_WGRPO( ).
  LS_WGRPP = ME->GET_WGRPP( ).

*** Get Operation Quantity
  try.
      LS_OPQTY       = ME->GET_OPQTY( ).
      LS_WGRPO-WGRPO = LS_OPQTY-OPQTY * LS_WGRPP-WGRPP.
    catch CX_SY_ARITHMETIC_OVERFLOW
          CX_SY_CONVERSION_OVERFLOW.
      LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_WGRPO-WGRPO ).
      assign LR_DATA->* to <F_WGRPO>.
      LS_WGRPO-WGRPO = <F_WGRPO>.
  endtry.

*** Make sure we do not get a negative value
  if LS_WGRPO-WGRPO < 0.
    move 0 to LS_WGRPO-WGRPO.
  endif.

  ME->SET_WGRPO( IS_WGRPO = LS_WGRPO ).

endmethod.
method SET_ABLAG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAG ).

  move IS_ABLAG-ABLAG     to LS_PARAM-ATFLV.
  move IS_ABLAG-ABLAG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAG_CHANGED ).
  endif.

endmethod.
method SET_ABLAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ABLAN ).

  move IS_ABLAN-ABLAN     to LS_PARAM-ATFLV.
  move IS_ABLAN-ABLAN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ABLAN_CHANGED ).
  endif.

endmethod.
method SET_AREAO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AREAO ).

  move IS_AREAO-AREAO     to LS_PARAM-ATFLV.
  move IS_AREAO-AREAO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AREAO_CHANGED ).
  endif.

endmethod.
method SET_WGRPO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRPO ).

  move IS_WGRPO-WGRPO     to LS_PARAM-ATFLV.
  move IS_WGRPO-WGRPO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WGRPO_CHANGED ).
  endif.

endmethod.
method SET_WGRPP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRPP ).

  move IS_WGRPP-WGRPP     to LS_PARAM-ATFLV.
  move IS_WGRPP-WGRPP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WGRPP_CHANGED ).
  endif.

endmethod.
method SET_WNEPO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPO ).

  move IS_WNEPO-WNEPO     to LS_PARAM-ATFLV.
  move IS_WNEPO-WNEPO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WNEPO_CHANGED ).
  endif.

endmethod.
method SET_WNEPP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WNEPP ).

  move IS_WNEPP-WNEPP     to LS_PARAM-ATFLV.
  move IS_WNEPP-WNEPP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WNEPP_CHANGED ).
  endif.

endmethod.
