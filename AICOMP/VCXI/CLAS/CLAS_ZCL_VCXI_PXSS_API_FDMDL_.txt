
class ZCL_VCXI_PXSS_API_FDMDL definition
  public
  create public .

public section.

  data F_FDMDL type ZVCXI_PXSS_FDMDL read-only .
  data F_IFDMV type ZVCXI_PXSS_IFDMV read-only .

  methods ADD_CSTEP
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IR_SVCEL_OUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_DATA type ref to DATA optional
      !IT_FDMEX type ZVCXI_PXSS_TT_FDMEX optional
      !IF_INDEX type I optional
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ADD_SUB_API_FDMDL
    importing
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
      !IF_IFDMV type ZVCXI_PXSS_IFDMV
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    returning
      value(RR_API_FDMDL) type ref to ZCL_VCXI_PXSS_API_FDMDL
    raising
      /VCXI/CX_CKX .
  methods ADD_XFG
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL optional .
  methods DELETE
    raising
      /VCXI/CX_CKX .
  methods DEL_SUB_API_FDMDL
    importing
      !IR_API_FDMDL_SUB type ref to ZCL_VCXI_PXSS_API_FDMDL
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods DEL_XFG
    importing
      !IR_SVCEL_OUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_STRC
    exporting
      !EF_SFDAT type ZVCXI_PXSS_SFDAT
      !ET_XCONG type ZVCXI_PXSS_TT_XCONG
    returning
      value(RT_FDAPI_XCOMP) type ZVCXI_PXSS_TT_FDAPI_XCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_SUB_API_FDMDL
    importing
      !IF_DEPTH type I default '-1'
    returning
      value(RT_API_FDMDL) type ZVCXI_PXSS_TT_API_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_UI_FDMDL
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW optional
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE optional
      !IF_APPL_EVENTS type ABAP_BOOL
    returning
      value(RR_UI_FDMDL) type ref to ZCL_VCXI_PXSS_UI_FDMDL
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_EXCLUDE
    importing
      !IR_SVCEL_OUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RT_SVCEL_EXCLUDE) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_OUT
    returning
      value(RT_SVCEL) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods SET_STRC
    importing
      !IT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !IT_XCONG type ZVCXI_PXSS_TT_XCONG optional
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL .

  methods CONV_API_TO_GATE
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CONV_API_TO_XCOMP
    importing
      !IT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
    returning
      value(RT_FASTD_XCOMP) type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods CONV_XCOMP_TO_API
    importing
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RT_FDAPI_XCOMP) type ZVCXI_PXSS_TT_FDAPI_XCOMP
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_API_FDMDL definition
class ZCL_VCXI_PXSS_API_FDMDL implementation.
  method ADD_CSTEP.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = CT_FDAPI_XCOMP ).

*** Convert SmartVC API Element to Gate
    LR_GATE_OUT = ME->CONV_API_TO_GATE( IR_SVCEL       = IR_SVCEL_OUT
                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Add Conversion Step
    ME->R_BL_FDMDL->ADD_CSTEP( exporting IF_ISELF       = IF_ISELF
                                         IR_GATE_OUT    = LR_GATE_OUT
                                         IR_DATA        = IR_DATA
                                         IT_FDMEX       = IT_FDMEX
                                         IF_INDEX       = IF_INDEX
                                changing CT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Perform Mapping for Component Structure
    CT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method ADD_SUB_API_FDMDL.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = CT_FDAPI_XCOMP ).

*** Add Sub Model
    LR_BL_FDMDL = ME->R_BL_FDMDL->ADD_SUB_BL_FDMDL( exporting IF_FDMDL       = IF_FDMDL
                                                              IF_IFDMV       = IF_IFDMV
                                                    changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                                              CT_XCONG       = CT_XCONG ).

*** Perform Mapping for Component Structure
    CT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Create Fast Data Model API
    RR_API_FDMDL = new #( IR_BL_FDMDL = LR_BL_FDMDL ).

  endmethod.
  method ADD_XFG.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = CT_FDAPI_XCOMP ).

*** Add Finished Good
    ME->R_BL_FDMDL->ADD_XFG( changing CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                      CT_XCONG       = CT_XCONG ).

*** Perform Mapping for Component Structure
    CT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method CONSTRUCTOR.

    ME->R_BL_FDMDL = IR_BL_FDMDL.

*** Update Information
    ME->F_FDMDL = ME->R_BL_FDMDL->F_FDMDL.
    ME->F_IFDMV = ME->R_BL_FDMDL->F_IFDMV.

  endmethod.
  method CONV_API_TO_GATE.

    data: LF_GATKY type /VCXI/VKSR_GATKY.
    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


    LF_GATKY = IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Find by Output Gate
    RR_GATE = value #( ME->R_BL_FDMDL->T_GATE_OUT[ TABLE_LINE->F_GATKY = LF_GATKY ] optional ).
    if RR_GATE is bound.
      exit.
    endif.

    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
***   Find by Component
      if LS_FASTD_XCOMP-R_GATE is bound and
         LS_FASTD_XCOMP-R_GATE->F_GATKY eq LF_GATKY.
        RR_GATE = LS_FASTD_XCOMP-R_GATE.
      endif.
      if RR_GATE is bound.
        exit.
      endif.

***   Find by Data
      LT_GATE = value #( for S_DATA in LS_FASTD_XCOMP-T_DATA where ( R_GATE is bound ) ( S_DATA-R_GATE ) ).
      RR_GATE = value #( LT_GATE[ TABLE_LINE->F_GATKY = LF_GATKY ] optional ).
      if RR_GATE is bound.
        exit.
      endif.
    endloop.

  endmethod.
  method CONV_API_TO_XCOMP.

    data: LS_FDAPI_XCOMP      type ZVCXI_PXSS_S_FDAPI_XCOMP,
          LS_FDAPI_XCOMP_DATA type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Perform Mapping for Component Structure
    loop at IT_FDAPI_XCOMP into LS_FDAPI_XCOMP.
      append corresponding #( LS_FDAPI_XCOMP except T_DATA ) to RT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.

***   Get Gate by SVC API Element
      if LS_FDAPI_XCOMP-R_SVCEL is bound.
        <S_FASTD_XCOMP>-R_GATE = value #( ME->R_BL_FDMDL->T_GATE_XCOMP[ TABLE_LINE->F_GATKY = LS_FDAPI_XCOMP-R_SVCEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ] ).
      endif.

***   Perform Mapping for Data
      loop at LS_FDAPI_XCOMP-T_DATA into LS_FDAPI_XCOMP_DATA.
        append corresponding #( LS_FDAPI_XCOMP_DATA ) to <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA>.

***     Use Gate Key to restore existing Gates
        if LS_FDAPI_XCOMP_DATA-R_SVCEL is bound.
          <S_FASTD_XCOMP_DATA>-GATKY = LS_FDAPI_XCOMP_DATA-R_SVCEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
        endif.
      endloop.
    endloop.

  endmethod.
  method CONV_XCOMP_TO_API.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    field-symbols: <S_FDAPI_XCOMP>      type ZVCXI_PXSS_S_FDAPI_XCOMP,
                   <S_FDAPI_XCOMP_DATA> type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA.


*** Perform Mapping for Component Structure
    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
      append corresponding #( LS_FASTD_XCOMP except T_DATA ) to RT_FDAPI_XCOMP assigning <S_FDAPI_XCOMP>.

***   Get SVC API Element by Gate Key
      if LS_FASTD_XCOMP-R_GATE is bound.
        <S_FDAPI_XCOMP>-R_SVCEL = /VCXI/CL_VKSRA_SVC_ELEMENT=>GET_INSTANCE_BY_GATE( IR_GATE = LS_FASTD_XCOMP-R_GATE ).
      endif.

***   Perform Mapping for Data
      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA.
        append corresponding #( LS_FASTD_XCOMP_DATA ) to <S_FDAPI_XCOMP>-T_DATA assigning <S_FDAPI_XCOMP_DATA>.

***     Get SVC API Element by Gate Key
        if LS_FASTD_XCOMP_DATA-R_GATE is bound.
          <S_FDAPI_XCOMP_DATA>-R_SVCEL = /VCXI/CL_VKSRA_SVC_ELEMENT=>GET_INSTANCE_BY_GATE( IR_GATE = LS_FASTD_XCOMP_DATA-R_GATE ).
        elseif LS_FASTD_XCOMP_DATA-GATKY is not initial.
          <S_FDAPI_XCOMP_DATA>-R_SVCEL ?= /VCXI/CL_VKSRA_SVC_ELEMENT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_FASTD_XCOMP_DATA-GATKY ) ).
        endif.

      endloop.
    endloop.

  endmethod.
  method DEL_SUB_API_FDMDL.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = CT_FDAPI_XCOMP ).

*** Delete Sub Fast Data Model
    ME->R_BL_FDMDL->DEL_SUB_BL_FDMDL( exporting IR_BL_FDMDL_SUB = IR_API_FDMDL_SUB->R_BL_FDMDL
                                      changing  CT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                                CT_XCONG        = CT_XCONG ).

*** Perform Mapping for Component Structure
    CT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method DEL_XFG.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = CT_FDAPI_XCOMP ).

*** Convert SmartVC API Element to Gate
    LR_GATE_OUT = ME->CONV_API_TO_GATE( IR_SVCEL       = IR_SVCEL_OUT
                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Delete Finished Good
    ME->R_BL_FDMDL->DEL_XFG( exporting IR_GATE_OUT    = LR_GATE_OUT
                             changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                       CT_XCONG       = CT_XCONG ).

*** Perform Mapping for Component Structure
    CT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method DELETE.

    ME->R_BL_FDMDL->DELETE( ).

  endmethod.
  method GET_DESCR.

    RF_DESCR = ME->R_BL_FDMDL->GET_DESCR( ).

  endmethod.
  method GET_STRC.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.


    clear: EF_SFDAT,
           ET_XCONG.

*** Get Component Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing EF_SFDAT    = EF_SFDAT
                                                                     ET_XCONG    = ET_XCONG ).

*** Perform Mapping for Component Structure
    RT_FDAPI_XCOMP = ME->CONV_XCOMP_TO_API( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method GET_SUB_API_FDMDL.

    loop at ME->R_BL_FDMDL->GET_SUB_BL_FDMDL( IF_DEPTH = IF_DEPTH ) into data(LR_BL_FDMDL).
***   Create Fast Data Model API
      append new #( IR_BL_FDMDL = LR_BL_FDMDL ) to RT_API_FDMDL.
    endloop.

  endmethod.
  method GET_SVCEL_EXCLUDE.

    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.


*** Get current Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Find by Output Gate
    data(LR_GATE_OUT) = ME->CONV_API_TO_GATE( IR_SVCEL       = IR_SVCEL_OUT
                                              IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->R_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Perform Mapping for excluded Elements
    loop at LT_GATE_EXCLUDE into data(LR_GATE_EXCLUDE).
      append /VCXI/CL_VKSRA_SVC_ELEMENT=>GET_INSTANCE_BY_GATE( IR_GATE = LR_GATE_EXCLUDE ) to RT_SVCEL_EXCLUDE.
    endloop.

  endmethod.
  method GET_SVCEL_OUT.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


    loop at ME->R_BL_FDMDL->T_GATE_OUT into LR_GATE.
      append /VCXI/CL_VKSRA_SVC_ELEMENT=>GET_INSTANCE_BY_GATE( IR_GATE = LR_GATE ) to RT_SVCEL.
    endloop.

  endmethod.
  method GET_UI_FDMDL.

*** Create UI Instance
    RR_UI_FDMDL = ME->R_BL_FDMDL->GET_UI_FDMDL( IR_UIFW        = IR_UIFW
                                                IR_UIGATE      = IR_UIGATE
                                                IF_APPL_EVENTS = IF_APPL_EVENTS ).

  endmethod.
  method SET_STRC.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.


*** Perform Mapping for Component Structure
    LT_FASTD_XCOMP = ME->CONV_API_TO_XCOMP( IT_FDAPI_XCOMP = IT_FDAPI_XCOMP ).

*** Set Component Structure
    if IT_XCONG is supplied.
      ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                            IT_XCONG       = IT_XCONG ).
    else.
      ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ).
    endif.

  endmethod.
