
class ZCL_VCXI_XCI_BOB_MAT definition
  public
  create public .

public section.

  types:
    YT_BAPIPAREX    type STANDARD TABLE OF BAPIPAREX .
  types:
    YT_BAPIPAREXX   type STANDARD TABLE OF BAPIPAREXX .
  types:
    YT_BAPI_MAKT_GA type STANDARD TABLE OF BAPI_MAKT_GA .
  types:
    YT_BAPI_MARM_GA type STANDARD TABLE OF BAPI_MARM_GA .
  types:
    YT_BAPI_MEAN_GA type STANDARD TABLE OF BAPI_MEAN_GA .
  types:
    YT_BAPI_MLTX_GA type STANDARD TABLE OF BAPI_MLTX_GA .
  types:
    YT_BAPI_MLAN_GA type STANDARD TABLE OF BAPI_MLAN_GA .

  constants C_TDID_BDATA type TDID value 'GRUN' ##NO_TEXT.
  constants C_TDID_INSPE type TDID value 'PRUE' ##NO_TEXT.
  data F_CUOBJ type CUOBJ read-only .
  data S_CLIENTDATA type BAPI_MARA_GA .
  data S_FORECASTPARAMETERS type BAPI_MPOP_GA .
  data S_LIFOVALUATIONDATA type BAPI_MYMS_GA .
  data S_PLANNINGDATA type BAPI_MPGD_GA .
  data S_PLANTDATA type BAPI_MARC_GA .
  data S_PRTDATA type BAPI_MFHM_GA .
  data S_SALESDATA type BAPI_MVKE_GA .
  data S_STORAGELOCATIONDATA type BAPI_MARD_GA .
  data S_STORAGETYPEDATA type BAPI_MLGT_GA .
  data S_VALUATIONDATA type BAPI_MBEW_GA .
  data S_WAREHOUSENUMBERDATA type BAPI_MLGN_GA .
  data T_EXTENSIONOUT type YT_BAPIPAREX .
  data T_INTERNATIONALARTNOS type YT_BAPI_MEAN_GA .
  data T_MATERIALDESCRIPTION type YT_BAPI_MAKT_GA .
  data T_MATERIALLONGTEXT type YT_BAPI_MLTX_GA .
  data T_TAXCLASSIFICATIONS type YT_BAPI_MLAN_GA .
  data T_UNITSOFMEASURE type YT_BAPI_MARM_GA .

  methods CHANGE_CONFIG
    importing
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
      !IF_ENQUEUE type ABAP_BOOL default ABAP_TRUE
      !IT_VALUE type /VCXI/VKCR_TT_VALUE optional
    preferred parameter IF_COMMIT
    raising
      /VCXI/CX_CKX .
  methods CHANGE_PRICE
    importing
      !IF_BUDAT type BUDAT default SY-DATUM
      !IF_VALPR type VALPR
      !IF_PEINH type PEINH optional
      !IF_XBLNR type XBLNR1 optional
      !IF_BKTXT type BKTXT optional
    returning
      value(RF_BELNR) type CK_BELNR
    raising
      /VCXI/CX_CKX .
  methods CREATE_CLASSI
    importing
      !IF_CLNAM type KLASSE_D
      !IF_CLTYP type KLASSENART
      !IT_ALLOC_NUM type TT_BAPI1003_ALLOC_VALUES_NUM optional
      !IT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR optional
      !IT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR optional
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods CREATE_CONFIG
    importing
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
      !IF_ENQUEUE type ABAP_BOOL default ABAP_TRUE
      !IF_CUOBJ type CUOBJ optional
      !IT_VALUE type /VCXI/VKCR_TT_VALUE optional
    raising
      /VCXI/CX_CKX .
  methods DECRYPT_EXTENSIONS
    importing
      !IF_STRUCTURE type TE_STRUC
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE
    importing
      !IF_XML type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods GET_CLASSI
    importing
      !IF_CLTYP type KLASSENART optional
      !IF_CLNAM type KLASSE_D optional
    exporting
      !ET_ALLOC_LIST type TT_BAPI1003_ALLOC_LIST
      !ET_ALLOC_NUM type TT_BAPI1003_ALLOC_VALUES_NUM
      !ET_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR
      !ET_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods GET_CSPL
    importing
      !IF_CSPLIT type CSPLIT optional
    exporting
      !ES_MAKV type MAKV
      !ET_MAKG type CKT_MAKG
      !ET_MAKZ type CKF_MAKZ_TABKZ
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR
    importing
      !IF_LANGU type SYLANGU default SY-LANGU
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_LONGTEXT
    importing
      !IF_ID type TDID
      !IF_LANGU type SYLANGU default SY-LANGU
    returning
      value(RF_TEXT) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_LOVC
    returning
      value(RT_VALUE) type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR .
  methods GET_MATNR_AS_MSGV
    returning
      value(RF_MSGV) type SYMSGV .
  methods GET_MRP_AREA
    importing
      !II_BERID type MD_RANGE_T_BERID optional
    returning
      value(RT_MDMA) type CMD_BS_MAT_T_MDMA
    raising
      /VCXI/CX_CKX .
  methods GET_PVER
    returning
      value(RT_MKAL) type CMD_BS_MAT_T_MKAL
    raising
      /VCXI/CX_CKX .
  methods GET_QMAT
    returning
      value(RT_QMAT) type ZVCXI_XCI_TT_QMAT
    raising
      /VCXI/CX_CKX .
  methods GET_SVC
    returning
      value(RR_SVC) type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
  methods GET_VCSTA
    importing
      !IF_INIT type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_VCSTA) type ZVCXI_XCI_VCSTA
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_WRK02
    returning
      value(RF_WRK02) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D optional
      !IF_BWKEY type BWKEY optional
      !IF_BWTAR type BWTAR_D optional
      !IF_VKORG type VKORG optional
      !IF_VTWEG type VTWEG optional
      !IF_LGORT type LGORT_D optional
      !IF_LGNUM type LGNUM optional
      !IF_LGTYP type LGTYP optional
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods RENEW_MATNR
    raising
      /VCXI/CX_CKX .
  methods RUN_CONFIG
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_DATE type DATS default SY-DATUM
    exporting
      !EF_CHANGED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SAVE
    importing
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ET_BAPIRET2 type TT_BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods SAVE_CSPL
    importing
      !IF_ENQUEUE type ABAP_BOOL default ABAP_TRUE
      !IS_MAKV type MAKV
      !IT_MAKG type CKT_MAKG
      !IT_MAKZ type CKF_MAKZ_TABKZ
    raising
      /VCXI/CX_CKX .
  methods SAVE_MRP_AREA
    importing
      !IT_MDMA type CMD_BS_MAT_T_MDMA
      !IT_MDMA_X type CMD_BS_MAT_T_MDMA_X
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods SAVE_PVER
    importing
      !IT_MKAL type MDG_BS_MAT_T_MKAL
      !IT_MKAL_X type ZVCXI_XCI_TT_MKAL_X
    raising
      /VCXI/CX_CKX .
  methods SAVE_QMAT
    importing
      !IT_QMAT type ZVCXI_XCI_TT_QMAT
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    exporting
      !ET_DATA type ABAP_TRANS_SRCBIND_TAB
    returning
      value(RF_XML) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods SET_LONGTEXT
    importing
      !IF_ID type TDID
      !IF_TEXT type STRING
      !IF_LANGU type SYLANGU default SY-LANGU
    returning
      value(RF_CHANGED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
    raising
      /VCXI/CX_CKX .
  methods SET_VCSTA
    importing
      !IF_VCLOCK type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_DISST
    importing
      !IF_DISST type DISST optional
      !IF_MULTL type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_BAPI_SAVE_IN,
      S_CLIENTDATA           type  BAPI_MARA,
      S_CLIENTDATAX          type  BAPI_MARAX,
      S_PLANTDATA            type  BAPI_MARC,
      S_PLANTDATAX           type  BAPI_MARCX,
      S_FORECASTPARAMETERS   type  BAPI_MPOP,
      S_FORECASTPARAMETERSX  type  BAPI_MPOPX,
      S_PLANNINGDATA         type  BAPI_MPGD,
      S_PLANNINGDATAX        type  BAPI_MPGDX,
      S_STORAGELOCATIONDATA  type  BAPI_MARD,
      S_STORAGELOCATIONDATAX type  BAPI_MARDX,
      S_VALUATIONDATA        type  BAPI_MBEW,
      S_VALUATIONDATAX       type  BAPI_MBEWX,
      S_WAREHOUSENUMBERDATA  type  BAPI_MLGN,
      S_WAREHOUSENUMBERDATAX type  BAPI_MLGNX,
      S_SALESDATA            type  BAPI_MVKE,
      S_SALESDATAX           type  BAPI_MVKEX,
      S_STORAGETYPEDATA      type  BAPI_MLGT,
      S_STORAGETYPEDATAX     type  BAPI_MLGTX,
      T_MATERIALDESCRIPTION  type  T_BAPI_MAKT,
      T_UNITSOFMEASURE       type  T_BAPI_MARM,
      T_UNITSOFMEASUREX      type  T_BAPI_MARMX,
      T_INTERNATIONALARTNOS  type  T_BAPI_MEAN,
      T_MATERIALLONGTEXT     type  T_BAPI_MLTX,
      T_TAXCLASSIFICATIONS   type  T_BAPI_MLAN,
      T_PRTDATA              type  T_BAPI_MFHM,
      T_PRTDATAX             type  T_BAPI_MFHMX,
      T_EXTENSIONIN          type  T_BAPIPAREX,
      T_EXTENSIONINX         type  T_BAPIPAREXX,
    end of YS_BAPI_SAVE_IN .
  types:
    YT_MA29V type table of MA29V with key MANDT MATNR .

  data F_VCSTA type ZVCXI_XCI_VCSTA .

  class-methods FIND_LL_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_DISST type DISST
    returning
      value(RT_MA29V) type YT_MA29V
    exceptions
      /VCXI/CX_CKX .
  class-methods MAP_TO_BAPRET2
    importing
      !IT_MAT_MSG type CMD_BS_MAT_T_MAT_MSG optional
    changing
      !CT_BAPIRET2 type BAPIRETTAB .
  methods BUILD_BAPIMATHEAD
    changing
      !CS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
    returning
      value(RS_HEADDATA) type BAPIMATHEAD
    raising
      /VCXI/CX_CKX .
  methods CHANGE_LOVC
    importing
      !IT_VALUE type /VCXI/VKCR_TT_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_CLTABLE_IN
    returning
      value(RT_CLTABLE) type TT_CLTABLE
    raising
      /VCXI/CX_CKX .
  methods GET_EXTENSIONIN
    exporting
      !ET_EXTENSIONINX type T_BAPIPAREXX
    returning
      value(RT_EXTENSIONIN) type T_BAPIPAREX
    raising
      /VCXI/CX_CKX .
  methods GET_MAKT
    returning
      value(RS_MAKT) type MAKT
    raising
      /VCXI/CX_CKX .
  methods GET_MARA
    returning
      value(RS_MARA) type MARA
    raising
      /VCXI/CX_CKX .
  methods GET_MARC
    returning
      value(RS_MARC) type MARC
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPI_DATA
    returning
      value(RS_BAPI_SAVE_IN) type YS_BAPI_SAVE_IN
    raising
      /VCXI/CX_CKX .
  methods SET_CONFIG_TO_MM
    importing
      !IF_STDPD type STDPD optional
      !IF_CUOBJ type CUOBJ optional
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_MAT definition
class ZCL_VCXI_XCI_BOB_MAT implementation.
method BUILD_BAPIMATHEAD.


***--------------------------------------------------------------------------------------
*** Prepare header data for BAPI
  RS_HEADDATA-MATERIAL   = ME->S_CLIENTDATA-MATERIAL.
  RS_HEADDATA-IND_SECTOR = ME->S_CLIENTDATA-IND_SECTOR.
  RS_HEADDATA-MATL_TYPE  = ME->S_CLIENTDATA-MATL_TYPE.

  if ME->S_CLIENTDATA-MAINT_STAT ca 'K'.
    move ABAP_TRUE to RS_HEADDATA-BASIC_VIEW.      "K
  endif.
  if ME->S_CLIENTDATA-MAINT_STAT ca 'V'.
    move ABAP_TRUE to RS_HEADDATA-SALES_VIEW.      "V
  endif.
  if ME->S_CLIENTDATA-MAINT_STAT ca 'E'.
    move ABAP_TRUE to RS_HEADDATA-PURCHASE_VIEW.   "E
  endif.

***--------------------------------------------------------------------------------------
*** Create Sales Data View
  if CS_BAPI_SAVE_IN-S_SALESDATA-SALES_ORG  is not initial or
     CS_BAPI_SAVE_IN-S_SALESDATA-DISTR_CHAN is not initial.
    move ABAP_TRUE to RS_HEADDATA-SALES_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_SALESDATA,
           CS_BAPI_SAVE_IN-S_SALESDATAX.
  endif.

*** Create Plant Data View
  if CS_BAPI_SAVE_IN-S_PLANTDATA-PLANT is not initial.
**** Create Plant Data View
    if ME->S_PLANTDATA-MAINT_STAT ca 'V'.
      move ABAP_TRUE to RS_HEADDATA-SALES_VIEW.      "V
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'E'.
      move ABAP_TRUE to RS_HEADDATA-PURCHASE_VIEW.   "E
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'D'.
      move ABAP_TRUE to RS_HEADDATA-MRP_VIEW.        "D
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'P'.
      move ABAP_TRUE to RS_HEADDATA-FORECAST_VIEW.   "P
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'A'.
      move ABAP_TRUE to RS_HEADDATA-WORK_SCHED_VIEW. "A
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'F'.
      move ABAP_TRUE to RS_HEADDATA-PRT_VIEW.        "F
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'L'.
      move ABAP_TRUE to RS_HEADDATA-STORAGE_VIEW.    "L
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'S'.
      move ABAP_TRUE to RS_HEADDATA-WAREHOUSE_VIEW.  "S
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'Q'.
      move ABAP_TRUE to RS_HEADDATA-QUALITY_VIEW.    "Q
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'B'.
      move ABAP_TRUE to RS_HEADDATA-ACCOUNT_VIEW.    "B
    endif.
    if ME->S_PLANTDATA-MAINT_STAT ca 'G'.
      move ABAP_TRUE to RS_HEADDATA-COST_VIEW.       "G
    endif.
  else.
    clear: CS_BAPI_SAVE_IN-S_PLANTDATA,
           CS_BAPI_SAVE_IN-S_PLANTDATAX.
  endif.

*** Create Forecast Parameters View
  if CS_BAPI_SAVE_IN-S_FORECASTPARAMETERS-PLANT is not initial.
    move ABAP_TRUE to RS_HEADDATA-FORECAST_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_FORECASTPARAMETERS,
           CS_BAPI_SAVE_IN-S_FORECASTPARAMETERSX.
  endif.

*** Clear Planning Data if not used
  if CS_BAPI_SAVE_IN-S_PLANNINGDATA-PLANT is initial.
    clear: CS_BAPI_SAVE_IN-S_PLANNINGDATA,
           CS_BAPI_SAVE_IN-S_PLANNINGDATAX.
  endif.

*** Create Storage Location Data View
  if CS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA-PLANT    is not initial or
     CS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA-STGE_LOC is not initial.
    move ABAP_TRUE to RS_HEADDATA-STORAGE_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA,
           CS_BAPI_SAVE_IN-S_STORAGELOCATIONDATAX.
  endif.

*** Create Valuation Data View
  if CS_BAPI_SAVE_IN-S_VALUATIONDATA-VAL_AREA is not initial or
     CS_BAPI_SAVE_IN-S_VALUATIONDATA-VAL_TYPE is not initial.
    move ABAP_TRUE to RS_HEADDATA-ACCOUNT_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_VALUATIONDATA,
           CS_BAPI_SAVE_IN-S_VALUATIONDATAX.
  endif.

*** Create Warehouse Number Data View
  if CS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATA-WHSE_NO is not initial.
    move ABAP_TRUE to RS_HEADDATA-WAREHOUSE_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATA,
           CS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATAX.
  endif.

*** Create Storage Type Data View
  if CS_BAPI_SAVE_IN-S_STORAGETYPEDATA-WHSE_NO   is not initial or
     CS_BAPI_SAVE_IN-S_STORAGETYPEDATA-STGE_TYPE is not initial.
    move ABAP_TRUE to RS_HEADDATA-STORAGE_VIEW.
  else.
    clear: CS_BAPI_SAVE_IN-S_STORAGETYPEDATA,
           CS_BAPI_SAVE_IN-S_STORAGETYPEDATAX.
  endif.

*** Clear Production Resource Tool (PRT) Data if not used
  delete CS_BAPI_SAVE_IN-T_PRTDATA  where PLANT is initial.
  delete CS_BAPI_SAVE_IN-T_PRTDATAX where PLANT is initial.
  if CS_BAPI_SAVE_IN-T_PRTDATA is not initial.
*** Create PRT View
    move ABAP_TRUE to RS_HEADDATA-PRT_VIEW.
  endif.

endmethod.
  method CHANGE_CONFIG.

    types: begin of YS_OBJEK_MARC,
             MATNR type MATNR,
             WERKS type WERKS_D,
           end   of YS_OBJEK_MARC.

    data: LF_OBJEK type CUOBN,
          LF_VCSTA type ZVCXI_XCI_VCSTA.
    data: LS_OBJEK_MARC   type YS_OBJEK_MARC.
    data: LT_CONFIG       type IBCO2_INSTANCE_TAB2.
    field-symbols:  <S_CONFIG>      type IBCO2_INSTANCE_REC2.


***--------------------------------------------------------------------------------------
*** Get Configuration Object Nubmer
    if ME->F_CUOBJ is initial.
***   No configuration defined for material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '503'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Enqueue Material
    if IF_ENQUEUE eq ABAP_TRUE.
      ME->ENQUEUE( ).
    endif.

***--------------------------------------------------------------------------------------
*** Buffer Status before runnint configuration
    LF_VCSTA = ME->F_VCSTA.

*** Update LO-VC Configuration
    if IT_VALUE is supplied.
      ME->CHANGE_LOVC( IT_VALUE = IT_VALUE ).     "Run Configuration would remove the configuration values again
    else.
***   Run Configuration Profile
      ME->RUN_CONFIG( IF_LOCKED = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
*** Read the updated Configuration
    call function 'CUCB_GET_CONFIGURATION'
      exporting
        INSTANCE                     = ME->F_CUOBJ
      importing
        CONFIGURATION                = LT_CONFIG
      exceptions
        INVALID_INPUT                = 1
        INVALID_INSTANCE             = 2
        INSTANCE_IS_A_CLASSIFICATION = 3
        others                       = 4.

    if SY-SUBRC ne 0.
***   Error while reading configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'ZVCXI_XCI'
                                                      IF_MSGNO = '502'
                                                      IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                                      IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

*** Refresh Status as its reset during Configuration Run
    if LF_VCSTA eq 'L'.
      ME->F_VCSTA = LF_VCSTA.
    else.
      ME->F_VCSTA = ME->GET_VCSTA( IF_INIT = ABAP_FALSE ).
    endif.

***--------------------------------------------------------------------------------------
*** Change VC Status
    loop at LT_CONFIG assigning <S_CONFIG>.
      case ME->F_VCSTA.
        when 'L'.
***       Locked
          move '2' to <S_CONFIG>-CONF-CSTATUS.

        when 'V'.
***       Valid
          move '1' to <S_CONFIG>-CONF-CSTATUS.

        when 'I'.
***       Inconsistent as Locked
          <S_CONFIG>-CONF-CSTATUS = '2'.
          ME->F_VCSTA = 'L'.

        when others.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Set and save new configuration to database
    call function 'CUCB_SET_CONFIGURATION'
      exporting
        ROOT_INSTANCE                = ME->F_CUOBJ
      changing
        CONFIGURATION                = LT_CONFIG
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        others                       = 3.

    if SY-SUBRC ne 0.
***   Error while saving configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '501'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

    LS_OBJEK_MARC-MATNR = ME->GET_MATNR( ).
    LS_OBJEK_MARC-WERKS = ME->GET_WERKS( ).
    LF_OBJEK = LS_OBJEK_MARC.

*** Save Configuration to DB
    call function 'CUD0_CONFIGURATION_TO_DB'
      exporting
        INSTANCE           = ME->F_CUOBJ
        OBJECT             = LF_OBJEK
        OBJECTID           = 'MARC'
      importing
        NEW_INSTANCE       = ME->F_CUOBJ
      exceptions
        INSTANCE_NOT_FOUND = 01
        NO_CHANGES         = 02.

    if SY-SUBRC ne 0.
***   Error while saving configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '501'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

*** Allocate configuration to Material Variant
    call function 'CUCB_ALLOCATE_MATERIAL_VARIANT'
      exporting
        IV_INSTANCE                  = ME->F_CUOBJ
        IV_MATERIAL_VARIANT          = LS_OBJEK_MARC-MATNR
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        others                       = 3.

    if SY-SUBRC ne 0.
***   Error while saving configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '501'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    else.
      if IF_COMMIT eq ABAP_TRUE.
        call function 'BAPI_TRANSACTION_COMMIT'
          exporting
            WAIT = 'X'.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Dequeue Material
    if IF_ENQUEUE eq ABAP_TRUE.
      ME->DEQUEUE( ).
    endif.

  endmethod.
  method CHANGE_LOVC.

    data: LS_INSTANCE type IBCO2_INSTANCE_REC2,
          LS_CABN     type CABN,
          LS_VALUE    type /VCXI/VKCR_S_VALUE.
    data: LT_CABN type TT_CABN.
    field-symbols: <S_VALUE> type IBCO2_VALUE_REC.

***--------------------------------------------------------------------------------------
*** Check Configuration Object Nubmer
    if ME->F_CUOBJ is initial.
***   No configuration defined for material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '503'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get current LO-VC Configuration
    call function 'CUCB_GET_SINGLE_INSTANCE'
      exporting
        INSTANCE                     = ME->F_CUOBJ
      importing
        INSTANCE_REC                 = LS_INSTANCE
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2.
    if SY-SUBRC ne 0.
***   Error while reading configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'ZVCXI_XCI'
                                                      IF_MSGNO = '502'
                                                      IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                                      IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

*** Load all Characteristics assigned to Configuration Material
    LT_CABN = /VCXI/CL_VKC_SERVICE=>GET_CABN_OF_CMATN( IF_CMATN = conv #( ME->S_PLANTDATA-PS_CONF_MAT ) ).

***--------------------------------------------------------------------------------------
*** Update LO-VC Configuration Values
    loop at LT_CABN into LS_CABN.
***   Get new Value
      LS_VALUE = value #( IT_VALUE[ ATINN = LS_CABN-ATINN ]
                          default value #( IT_VALUE[ ATNAM = LS_CABN-ATNAM ] optional ) ).
      if LS_VALUE is initial.
***     Value was deleted
        delete LS_INSTANCE-VALUES where ATINN = LS_CABN-ATINN.
      else.
***     Update with Characteristic Definition
        LS_VALUE = corresponding #( base ( LS_VALUE ) LS_CABN ).

        if LINE_EXISTS( LS_INSTANCE-VALUES[ ATINN = LS_CABN-ATINN ] ).
          assign LS_INSTANCE-VALUES[ ATINN = LS_CABN-ATINN ] to <S_VALUE>.
        else.
          append value #( ATINN = LS_CABN-ATINN ) to LS_INSTANCE-VALUES assigning <S_VALUE>.
        endif.
        <S_VALUE> = corresponding #( LS_VALUE ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set updated LO-VC Configuration
    call function 'CUCB_SET_SINGLE_CONFIGURATION'
      importing
        EV_INSTANCE                  = ME->F_CUOBJ
      changing
        CS_CONFIGURATION             = LS_INSTANCE
      exceptions
        NO_DATA                      = 1
        INVALID_INSTANCE             = 2
        INSTANCE_IS_A_CLASSIFICATION = 3.
    if SY-SUBRC ne 0.
***   Error while saving configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '501'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

  endmethod.
  method CHANGE_PRICE.

    data: LF_BDATJ type BDATJ,
          LF_POPER type POPER.
    data: LT_MATPR type CKMPR_MAT_PRICE.


***--------------------------------------------------------------------------------------
*** Get Company Code
    select single BUKRS
           into @data(LF_BUKRS)
           from T001K
          where BWKEY = @ME->S_VALUATIONDATA-VAL_AREA.
    if SY-SUBRC ne 0.
***   Valuation area & does not exist (table T001K)
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'M3'
                                            IF_MSGNO = '153'
                                            IF_MSGV1 = ME->S_VALUATIONDATA-VAL_AREA ).
    endif.

*** Get Fiscal Year and Posting Period
    call function 'FI_PERIOD_DETERMINE'
      exporting
        I_BUKRS = LF_BUKRS
        I_BUDAT = IF_BUDAT
      importing
        E_GJAHR = LF_BDATJ
        E_POPER = LF_POPER
      exceptions
        others  = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Check Fiscal Year and Posting Period
    call function 'FI_PERIOD_CHECK'
      exporting
        I_BUKRS = LF_BUKRS
        I_GJAHR = LF_BDATJ
        I_KOART = '+'
        I_KONTO = '+'
        I_MONAT = LF_POPER
      exceptions
        others  = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Prepare Material Data
    LT_MATPR = value #( ( PP-MATNR = ME->GET_MATNR( )
                          PP-BWKEY = ME->S_VALUATIONDATA-VAL_AREA
                          PP-BWTAR = ME->S_VALUATIONDATA-VAL_TYPE ) ).

*** Use Proposal to fill/complete Material Table
    call function 'PRICES_PROPOSE'
      exporting
        ACTUAL_BDATJ  = LF_BDATJ
        ACTUAL_POPER  = LF_POPER
        BUKRS         = LF_BUKRS
      tables
        T_MATPR       = LT_MATPR
      exceptions
        DATA_ERROR    = 1
        ERROR_MESSAGE = 8    "catches Error Messages
        others        = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Update Valuation Price and Price Unit
    loop at LT_MATPR assigning field-symbol(<S_MATPR>).
      read table <S_MATPR>-CR assigning field-symbol(<S_CR>) with key CURTP = '10'.
      check SY-SUBRC eq 0.

      case <S_MATPR>-PP-VPRSV.
        when 'S'.    "Standard price
          <S_CR>-NEWSTPRS = IF_VALPR.
          <S_CR>-MANPAE_S = 'X'.
        when 'V'.    "Moving average price/periodic unit price
          <S_CR>-NEWPVPRS = IF_VALPR.
          <S_CR>-MANPAE_V = 'X'.
      endcase.

      if IF_PEINH is supplied.
        <S_CR>-NEWPEINH = IF_PEINH.
      endif.

      clear <S_MATPR>-PP-XERROR.
    endloop.

***--------------------------------------------------------------------------------------
*** Refresh Buffer
    call function 'CKML_BUFFER_REFRESH_ALL'.

*** Price Change
    call function 'PRICES_CHANGE'
      exporting
        ACTUAL_BDATJ  = LF_BDATJ
        ACTUAL_POPER  = LF_POPER
        BUKRS         = LF_BUKRS
        BUDAT         = IF_BUDAT
        XBLNR         = IF_XBLNR
      tables
        T_MATPR       = LT_MATPR
      exceptions
        ERROR_MESSAGE = 8    "catches Error Messages
        others        = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.


*** Price Changes performed?
    if LINE_EXISTS( LT_MATPR[ PP-XERROR = ' ' ] ).
***   Post Price
      call function 'PRICES_POST'
        exporting
          I_BKTXT       = IF_BKTXT
          BUKRS         = LF_BUKRS
          LIS_UPDATE    = 'X'
        importing
          O_BELNR       = RF_BELNR
        tables
          T_MATPR       = LT_MATPR
        exceptions
          ERROR_MESSAGE = 8    "catches Error Messages
          others        = 9.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    else.
***   No price changes were carried out.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'CKPRCH'
                                            IF_MSGNO = '046' ).
    endif.

  endmethod.
  method CREATE_CLASSI.

    data: LT_ALLOC_NUM  type TT_BAPI1003_ALLOC_VALUES_NUM,
          LT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR,
          LT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR.


    clear ET_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Buffer Input for function module call
    LT_ALLOC_NUM  = IT_ALLOC_NUM.
    LT_ALLOC_CHAR = IT_ALLOC_CHAR.
    LT_ALLOC_CURR = IT_ALLOC_CURR.

*** Create Material Classification via BAPI
    call function 'BAPI_OBJCL_CREATE'
      exporting
        OBJECTKEYNEW_LONG = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_MATNR( ) )
        OBJECTTABLENEW    = 'MARA'
        CLASSNUMNEW       = IF_CLNAM
        CLASSTYPENEW      = IF_CLTYP
      tables
        ALLOCVALUESNUM    = LT_ALLOC_NUM
        ALLOCVALUESCHAR   = LT_ALLOC_CHAR
        ALLOCVALUESCURR   = LT_ALLOC_CURR
        RETURN            = ET_BAPIRET2.


***--------------------------------------------------------------------------------------
*** Raise Exception from BAPI Message
    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
      call function 'BAPI_TRANSACTION_ROLLBACK'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
    else.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method CREATE_CONFIG.

    data: LS_MARC     type MARC,
          LS_INSTANCE type IBCO2_INSTANCE_REC2.


***--------------------------------------------------------------------------------------
*** Don't create Configuration twice
    LS_MARC = ME->GET_MARC( ).
    if LS_MARC-CUOBJ is not initial.
***   Configuration for material &1 plant &2 already created.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '504'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

    check ME->S_PLANTDATA-PS_CONF_MAT is not initial.

*** Enqueue Material
    if IF_ENQUEUE eq ABAP_TRUE.
      ME->ENQUEUE( ).
    endif.

    clear ME->F_CUOBJ.

***--------------------------------------------------------------------------------------
*** Copy Source Configuration
    if IF_CUOBJ is not initial.
      call function 'CUCB_COPY_CONFIGURATION'
        exporting
          SOURCE_INSTANCE              = IF_CUOBJ
          IV_ONLY_SINGLE_LEVEL         = ABAP_TRUE
          IV_INVALID_POSSIBLE          = ABAP_TRUE
        importing
          ES_INSTANCE_REC              = LS_INSTANCE
        exceptions
          INVALID_INSTANCE             = 1
          INSTANCE_IS_A_CLASSIFICATION = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
***   Use created Configuration
      ME->F_CUOBJ = LS_INSTANCE-INSTANCE.
    endif.

***--------------------------------------------------------------------------------------
*** Update material with link to configurable material
    ME->SET_CONFIG_TO_MM( IF_MATNR = ME->GET_MATNR( )
                          IF_WERKS = ME->GET_WERKS( )
                          IF_STDPD = conv STDPD( ME->S_PLANTDATA-PS_CONF_MAT ) ).

*** Run Configuration to create CUOBJ
    ME->RUN_CONFIG( IF_LOCKED = ABAP_TRUE ).

*** Change/Save Configuration
    if IT_VALUE is supplied.
      ME->CHANGE_CONFIG( IF_COMMIT  = ABAP_FALSE
                         IF_ENQUEUE = ABAP_FALSE
                         IT_VALUE   = IT_VALUE ).
    else.
      ME->CHANGE_CONFIG( IF_COMMIT  = ABAP_FALSE
                         IF_ENQUEUE = ABAP_FALSE ).
    endif.

*** Update new configuration object number for material
    ME->SET_CONFIG_TO_MM( IF_MATNR = ME->GET_MATNR( )
                          IF_WERKS = ME->GET_WERKS( )
                          IF_CUOBJ = ME->F_CUOBJ ).

***--------------------------------------------------------------------------------------
*** Dequeue Material
    if IF_ENQUEUE eq ABAP_TRUE.
      ME->DEQUEUE( ).
    endif.

  endmethod.
  method DECRYPT_EXTENSIONS.

    data: LF_LENGTH   type I.
    data: LS_EXTENSIONOUT type BAPIPAREX.


***--------------------------------------------------------------------------------------
*** Decrypt Extensions (e.g DDIC BAPI_TE_*)
    read table ME->T_EXTENSIONOUT into LS_EXTENSIONOUT with key STRUCTURE = IF_STRUCTURE.
    describe field LS_EXTENSIONOUT-STRUCTURE length LF_LENGTH in character mode.
    CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C( exporting  IM_CONTAINER           = LS_EXTENSIONOUT+LF_LENGTH
                                                   importing  EX_VALUE               = CS_DATA
                                                   exceptions ILLEGAL_PARAMETER_TYPE = 1 ).

  endmethod.
  method DEQUEUE.

    call function 'DEQUEUE_EMMARAE'
      exporting
        MANDT = SY-MANDT
        MATNR = ME->GET_MATNR( ).

  endmethod.
  method DESERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


    check IF_XML is not initial.

*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Open XML
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

  endmethod.
  method ENQUEUE.

*** Lock Material
    call function 'ENQUEUE_EMMARAE'
      exporting
        MANDT          = SY-MANDT
        MATNR          = ME->GET_MATNR( )
        _WAIT          = ABAP_TRUE
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.

    if SY-SUBRC is not initial.
***   Material & is locked by the user &
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'M3'
                                                      IF_MSGNO = '020'
                                                      IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                                      IF_MSGV2 = SY-MSGV1
                                                      IF_TEMP  = ABAP_TRUE ).
    endif.

  endmethod.
  method FIND_LL_MATNR.

    data: LF_DISST_LOWER type /VCXI/VKC_DISST.
    data: LT_MAST  type table of MAST,
          LT_STPOX type table of STPOX,
          LT_MAKG  type table of MAKG,
          LT_MAKZ  type table of MAKZ.

*** Define Lower Level Code
    LF_DISST_LOWER = IF_DISST + 1.

*** Get BOM Assignments
    select *
           into table LT_MAST
           from MAST
           where MATNR eq IF_MATNR.

    loop at LT_MAST into data(LS_MAST).
***   Search LL Material
      refresh LT_STPOX.
      call function 'CS_BOM_EXPL_MAT_V2'
        exporting
          AUSKZ                 = ABAP_FALSE
          BREMS                 = 'X'
          CAPID                 = '    '
          DATUV                 = SY-DATUM
          MEHRS                 = ABAP_FALSE
          MTNRV                 = LS_MAST-MATNR
          STLAL                 = LS_MAST-STLAL
          STLAN                 = LS_MAST-STLAN
          SVWVO                 = 'X'
          WERKS                 = LS_MAST-WERKS
          VRSVO                 = 'X'
        tables
          STB                   = LT_STPOX
        exceptions
          ALT_NOT_FOUND         = 1
          CALL_INVALID          = 2
          MATERIAL_NOT_FOUND    = 3
          MISSING_AUTHORIZATION = 4
          NO_BOM_FOUND          = 5
          NO_PLANT_DATA         = 6
          NO_SUITABLE_BOM_FOUND = 7
          CONVERSION_ERROR      = 8
          others                = 9.

***   Add Materials to return table
      loop at LT_STPOX into data(LS_STPOX)
                      where DISST is not initial
                       and  DISST le IF_DISST
                       and  IDNRK ne IF_MATNR.
***     Add Main Material
        insert value #( MATNR = LS_STPOX-IDNRK
                        DISST = LF_DISST_LOWER ) into table RT_MA29V.

***     Add Co-Products if exists
        refresh: LT_MAKG, LT_MAKZ.
        call function 'MATERIAL_COSTS_SPLIT_READ'
          exporting
            MATNR                 = LS_STPOX-IDNRK
            WERKS                 = LS_MAST-WERKS
          tables
            TMAKG                 = LT_MAKG
            TMAKZ                 = LT_MAKZ
          exceptions
            COSTS_SPLIT_NOT_FOUND = 0.
        loop at LT_MAKZ into data(LS_MAKZ) where KUPPL ne LS_STPOX-IDNRK.
          append value #( MATNR = LS_MAKZ-KUPPL
                          DISST = LF_DISST_LOWER
                          KZKUP = ABAP_TRUE ) to RT_MA29V.
        endloop.

***     Add Lower Level Materials
        append lines of FIND_LL_MATNR( IF_MATNR = LS_STPOX-IDNRK
                                       IF_DISST = conv #( LF_DISST_LOWER ) ) to RT_MA29V.

      endloop.
    endloop.

  endmethod.
  method GET_CLASSI.

    data: LF_READ_VALUATIONS type ABAP_BOOL.


    clear: ET_ALLOC_LIST,
           ET_ALLOC_NUM,
           ET_ALLOC_CHAR,
           ET_ALLOC_CURR,
           ET_BAPIRET2.

***--------------------------------------------------------------------------------------
    if IF_CLTYP is supplied and
       IF_CLNAM is supplied.
***   Read a specific Class
      call function 'BAPI_OBJCL_GETDETAIL'
        exporting
          OBJECTKEY_LONG  = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_MATNR( ) )
          OBJECTTABLE     = 'MARA'
          CLASSTYPE       = IF_CLTYP
          CLASSNUM        = IF_CLNAM
        tables
          ALLOCVALUESNUM  = ET_ALLOC_NUM
          ALLOCVALUESCHAR = ET_ALLOC_CHAR
          ALLOCVALUESCURR = ET_ALLOC_CURR
          RETURN          = ET_BAPIRET2.

***--------------------------------------------------------------------------------------
    else.
***   Read also Classification Values
      if ET_ALLOC_NUM is requested or
         ET_ALLOC_CHAR is requested or
         ET_ALLOC_CURR is requested.
        LF_READ_VALUATIONS = ABAP_TRUE.
      endif.

***   Read all Classifications
      call function 'BAPI_OBJCL_GETCLASSES'
        exporting
          OBJECTKEY_IMP_LONG = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_MATNR( ) )
          OBJECTTABLE_IMP    = 'MARA'
          CLASSTYPE_IMP      = IF_CLTYP
          READ_VALUATIONS    = LF_READ_VALUATIONS
        tables
          ALLOCLIST          = ET_ALLOC_LIST
          ALLOCVALUESNUM     = ET_ALLOC_NUM
          ALLOCVALUESCHAR    = ET_ALLOC_CHAR
          ALLOCVALUESCURR    = ET_ALLOC_CURR
          RETURN             = ET_BAPIRET2.
    endif.

***--------------------------------------------------------------------------------------
*** Raise Exception from BAPI Message
    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
    endif.

  endmethod.
method GET_CLTABLE_IN.

  field-symbols: <S_CLTABLE>   type CLTABLE.


*** Convert MARA
  append initial line to RT_CLTABLE assigning <S_CLTABLE>.
  move 'MARA' to <S_CLTABLE>-TNAME.
  CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting  IM_VALUE     = ME->GET_MARA( )
                                                 importing  EX_CONTAINER = <S_CLTABLE>-TABLE
                                                 exceptions others       = 0 ).

*** Convert MARC
  append initial line to RT_CLTABLE assigning <S_CLTABLE>.
  move 'MARC' to <S_CLTABLE>-TNAME.
  CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting  IM_VALUE     = ME->GET_MARC( )
                                                 importing  EX_CONTAINER = <S_CLTABLE>-TABLE
                                                 exceptions others       = 0 ).

*** Convert MAKT
  append initial line to RT_CLTABLE assigning <S_CLTABLE>.
  move 'MAKT' to <S_CLTABLE>-TNAME.
  CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting  IM_VALUE     = ME->GET_MAKT( )
                                                 importing  EX_CONTAINER = <S_CLTABLE>-TABLE
                                                 exceptions others       = 0 ).

endmethod.
  method GET_CSPL.

    clear: ES_MAKV,
           ET_MAKG,
           ET_MAKZ.

    call function 'MATERIAL_COSTS_SPLIT_READ'
      exporting
        MATNR                 = ME->GET_MATNR( )
        WERKS                 = ME->GET_WERKS( )
        CSPLIT                = IF_CSPLIT
      importing
        MAKV_EXP              = ES_MAKV
      tables
        TMAKG                 = ET_MAKG
        TMAKZ                 = ET_MAKZ
      exceptions
        COSTS_SPLIT_NOT_FOUND = 0.

  endmethod.
  method GET_DESCR.

    RF_MAKTX = value #( ME->T_MATERIALDESCRIPTION[ LANGU = IF_LANGU ]-MATL_DESC optional ).

  endmethod.
  method GET_EXTENSIONIN.

    data: LF_STRUC_NAME    type        TE_STRUC.
    data: LS_EXTENSIONOUT  type        BAPIPAREX.
    data: LR_STRUC  type ref to DATA,
          LR_STRUCX type ref to DATA.
    field-symbols: <S_EXTENSIONIN>  type        BAPIPAREX,
                   <S_EXTENSIONINX> type        BAPIPAREXX,
*{   REPLACE        SBXK900074                                        1
*\                   <F_MATNR>        type        MATNR,
                   <F_MATERIAL>      type        MATNR18,
                   <F_MATERIAL_LONG> type        MATNR40,
*}   REPLACE
                   <S_STRUC>        type        ANY,
                   <S_STRUCX>       type        ANY.



*** Map Extensions of MARA, MARC etc.
    loop at ME->T_EXTENSIONOUT into LS_EXTENSIONOUT.

***   Fill X-Structure depending on Extension Structure Type
      clear:    LF_STRUC_NAME.

      unassign: <S_EXTENSIONIN>,
                <S_STRUC>,
                <S_STRUCX>.

      free:     LR_STRUC,
                LR_STRUCX.

      move LS_EXTENSIONOUT-STRUCTURE to LF_STRUC_NAME.

***   Fill Extension Data Structure
      insert initial line into table RT_EXTENSIONIN assigning <S_EXTENSIONIN>.
      move LF_STRUC_NAME to <S_EXTENSIONIN>-STRUCTURE.

***   Create dynamic data structure for each extension structure
      create data LR_STRUC type (LF_STRUC_NAME).
      assign LR_STRUC->* to <S_STRUC>.

***   Read Extension Data
      call method CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C
        exporting
          IM_CONTAINER           = LS_EXTENSIONOUT+30
        importing
          EX_VALUE               = <S_STRUC>
        exceptions
          ILLEGAL_PARAMETER_TYPE = 1
          others                 = 2.

***   Set material number
*{   REPLACE        SBXK900074                                        2
*\      assign component 'MATERIAL' of structure <S_STRUC> to <F_MATNR>.
*\      move ME->S_CLIENTDATA-MATERIAL to <F_MATNR>.
      assign component 'MATERIAL' of structure <S_STRUC> to <F_MATERIAL>.
      if SY-SUBRC eq 0.
        <F_MATERIAL> = ME->S_CLIENTDATA-MATERIAL.
      endif.
      assign component 'MATERIAL_LONG' of structure <S_STRUC> to <F_MATERIAL_LONG>.
      if SY-SUBRC eq 0.
        <F_MATERIAL_LONG> = ME->S_CLIENTDATA-MATERIAL_LONG.
      endif.
*}   REPLACE

***   Set Extension Data
      call method CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
        exporting
          IM_VALUE               = <S_STRUC>
        importing
          EX_CONTAINER           = <S_EXTENSIONIN>+30
        exceptions
          ILLEGAL_PARAMETER_TYPE = 1
          others                 = 2.

***   Create dynamic X-structure for each extension structure
      concatenate LS_EXTENSIONOUT-STRUCTURE 'X' into LF_STRUC_NAME.

      insert initial line into table ET_EXTENSIONINX assigning <S_EXTENSIONINX>.
      move LF_STRUC_NAME to <S_EXTENSIONINX>-STRUCTURE.

      create data LR_STRUCX type (LF_STRUC_NAME).
      assign LR_STRUCX->* to <S_STRUCX>.

***   Fill X-Structure
      /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = <S_STRUC>
                                           changing  CS_X_STRUC = <S_STRUCX> ).

***   Move X-Structure Values into Extension Structure
      call method CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
        exporting
          IM_VALUE               = <S_STRUCX>
        importing
          EX_CONTAINER           = <S_EXTENSIONINX>+30
        exceptions
          ILLEGAL_PARAMETER_TYPE = 1
          others                 = 2.

    endloop.

  endmethod.
method GET_LONGTEXT.

  data: LS_MLTX type BAPI_MLTX.

  loop at ME->T_MATERIALLONGTEXT into LS_MLTX
                                where TEXT_ID eq IF_ID
                                  and LANGU   eq IF_LANGU.

    if RF_TEXT is initial.
      move LS_MLTX-TEXT_LINE to RF_TEXT.
    else.
      concatenate RF_TEXT LS_MLTX-TEXT_LINE into RF_TEXT separated by CL_ABAP_CHAR_UTILITIES=>CR_LF.
    endif.
  endloop.

endmethod.
  method GET_LOVC.

    data: LS_INSTANCE type IBCO2_INSTANCE_REC2,
          LS_CABN     type CABN,
          LS_VALUE    type IBCO2_VALUE_REC.
    data: LT_CABN type TT_CABN.


***--------------------------------------------------------------------------------------
*** Check Configuration Object Nubmer
    if ME->F_CUOBJ is initial.
***   No configuration defined for material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '503'
                                            IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                            IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get current LO-VC Configuration
    call function 'CUCB_GET_SINGLE_INSTANCE'
      exporting
        INSTANCE                     = ME->F_CUOBJ
      importing
        INSTANCE_REC                 = LS_INSTANCE
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2.
    if SY-SUBRC ne 0.
***   Error while reading configuration of material &1 plant &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'ZVCXI_XCI'
                                                      IF_MSGNO = '502'
                                                      IF_MSGV1 = ME->GET_MATNR_AS_MSGV( )
                                                      IF_MSGV2 = ME->GET_WERKS( ) ).
    endif.

*** Load all Characteristics assigned to Configuration Material
    LT_CABN = /VCXI/CL_VKC_SERVICE=>GET_CABN_OF_CMATN( IF_CMATN = conv #( ME->S_PLANTDATA-PS_CONF_MAT ) ).

***--------------------------------------------------------------------------------------
*** Update LO-VC Configuration Values
    loop at LT_CABN into LS_CABN.
      LS_VALUE = value #( LS_INSTANCE-VALUES[ ATINN = LS_CABN-ATINN ] optional ).
      append corresponding #( base ( corresponding #( LS_CABN ) ) LS_VALUE ) to RT_VALUE.
    endloop.

  endmethod.
  method GET_MAKT.

***--------------------------------------------------------------------------------------
*** Get MAKT
    call function 'MAKT_GET_BILD'
      exporting
        MATNR  = ME->GET_MATNR( )
        SPRAS  = SY-LANGU
      importing
        WMAKT  = RS_MAKT
      exceptions
        others = 0.


  endmethod.
  method GET_MARA.

***--------------------------------------------------------------------------------------
*** Get MARA
    call function 'MARA_GET_BILD'
      exporting
        MATNR  = ME->GET_MATNR( )
      importing
        WMARA  = RS_MARA
      exceptions
        others = 0.

  endmethod.
  method GET_MARC.

***--------------------------------------------------------------------------------------
*** Get MARC
    call function 'MARC_SINGLE_READ'
      exporting
        MATNR  = ME->GET_MATNR( )
        WERKS  = ME->GET_WERKS( )
      importing
        WMARC  = RS_MARC
      exceptions
        others = 0.

  endmethod.
  method GET_MATNR.

    RF_MATNR = ME->S_CLIENTDATA-MATERIAL_LONG.

  endmethod.
  method GET_MATNR_AS_MSGV.

*** Convert Material into external format
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = ME->GET_MATNR( )
      importing
        OUTPUT = RF_MSGV.

  endmethod.
  method GET_MRP_AREA.

    data: LS_SELECTION type CMD_BS_MAT_S_MAT_MDMA_SELECT.


*** Define Selection
    LS_SELECTION-RANGE_MATNR   = value #( ( SIGN = 'I'  OPTION = 'EQ'  LOW = ME->GET_MATNR( ) ) ).
    if ME->GET_WERKS( ) is not initial.
      LS_SELECTION-RANGE_WERKS = value #( ( SIGN = 'I'  OPTION = 'EQ'  LOW = ME->GET_WERKS( ) ) ).
    endif.
    LS_SELECTION-RANGE_BERID = II_BERID.

*** Read MRP Area
    CL_CMD_BS_MAT_MDMA_API=>GET_INSTANCE( )->READ( exporting IS_SELECTION = LS_SELECTION
                                                   importing ET_MDMA      = RT_MDMA ).

  endmethod.
  method GET_PVER.

    data: LS_SELECTION type CMD_BS_MAT_S_MAT_MKAL_SELECT.

*** Define Selection
    LS_SELECTION-MATNR_RANGE   = value #( ( SIGN = 'I'  OPTION = 'EQ'  LOW = ME->GET_MATNR( ) ) ).
    if ME->GET_WERKS( ) is not initial.
      LS_SELECTION-WERKS_RANGE = value #( ( SIGN = 'I'  OPTION = 'EQ'  LOW = ME->GET_WERKS( ) ) ).
    endif.

*** Read Production Versions
    CL_CMD_BS_MAT_MKAL_API=>GET_INSTANCE( )->READ( exporting IS_SELECTION = LS_SELECTION
                                                   importing ET_MKAL      = RT_MKAL ).

  endmethod.
  method GET_QMAT.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D.


    LF_MATNR = ME->GET_MATNR( ).
    LF_WERKS = ME->GET_WERKS( ).

    select *
           into table RT_QMAT
           from QMAT
          where MATNR eq LF_MATNR
           and  WERKS eq LF_WERKS.

  endmethod.
method GET_SVC.

*** Get Configuration Instance
  check ME->F_CUOBJ is not initial.

*** Get SmartVC Instance
  RR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = ME->F_CUOBJ ) ).

endmethod.
method GET_VCSTA.

  check ME->F_CUOBJ is not initial.

  if ME->F_VCSTA is initial.
*** Get SAP VC Status
    call function 'CE_I_GET_STATUS'
      exporting
        INSTANCE           = ME->F_CUOBJ
      exceptions
        FREE               = 1
        INCOMPLETE         = 2
        LOCKED             = 3
        INSTANCE_NOT_FOUND = 4
        STATUS_NOT_FOUND   = 5
        others             = 6.

    case SY-SUBRC.
      when 1.
***     Free -> Valid
        move 'V' to ME->F_VCSTA.
      when 2.
***     Incomplete -> Invalid
        move 'I' to ME->F_VCSTA.
      when 3.
***     Locked
        move 'L' to ME->F_VCSTA.

        if IF_INIT ne ABAP_TRUE.
***       Run Config was called and check is needed to find the real status
          call function 'CEI0_DDB_CHECK'
            exporting
              FREE           = 'X'
              NO_VALUE_POPUP = 'X'
              ONLY_INFO      = 'X'
            exceptions
              INCONSISTENCY  = 1
              INCOMPLETE     = 2
              VERIFICATION   = 3
              NOT_ASSIGNED   = 4.

          case SY-SUBRC.
            when '0'.
***           No message found => Consistent
              move 'V' to ME->F_VCSTA.
            when '1'.
***           Inconsistency found
              move 'I' to ME->F_VCSTA.
            when others.

          endcase.
        endif.

    endcase.
  endif.

  move ME->F_VCSTA to RF_VCSTA.

endmethod.
  method GET_WERKS.

    RF_WERKS = ME->S_PLANTDATA-PLANT.

  endmethod.
  method GET_WRK02.

*** Consider Special Procurement Type
    if ME->S_PLANTDATA-PROC_TYPE eq 'F' and
       ME->S_PLANTDATA-SPPROCTYPE is not initial.
      select single WRK02
             into RF_WRK02
             from T460A
            where WERKS eq ME->S_PLANTDATA-PLANT
             and  SOBSL eq ME->S_PLANTDATA-SPPROCTYPE.
      if RF_WRK02 is initial.
        move ME->S_PLANTDATA-PLANT to RF_WRK02.
      endif.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    else.
      move ME->S_PLANTDATA-PLANT to RF_WRK02.
    endif.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'S_CLIENTDATA'          VALUE = ref #( ME->S_CLIENTDATA ) )
                       ( NAME = 'S_FORECASTPARAMETERS'  VALUE = ref #( ME->S_FORECASTPARAMETERS ) )
                       ( NAME = 'S_LIFOVALUATIONDATA'   VALUE = ref #( ME->S_LIFOVALUATIONDATA ) )
                       ( NAME = 'S_PLANNINGDATA'        VALUE = ref #( ME->S_PLANNINGDATA ) )
                       ( NAME = 'S_PLANTDATA'           VALUE = ref #( ME->S_PLANTDATA ) )
                       ( NAME = 'S_PRTDATA'             VALUE = ref #( ME->S_PRTDATA ) )
                       ( NAME = 'S_SALESDATA'           VALUE = ref #( ME->S_SALESDATA ) )
                       ( NAME = 'S_STORAGELOCATIONDATA' VALUE = ref #( ME->S_STORAGELOCATIONDATA ) )
                       ( NAME = 'S_STORAGETYPEDATA'     VALUE = ref #( ME->S_STORAGETYPEDATA ) )
                       ( NAME = 'S_VALUATIONDATA'       VALUE = ref #( ME->S_VALUATIONDATA ) )
                       ( NAME = 'S_WAREHOUSENUMBERDATA' VALUE = ref #( ME->S_WAREHOUSENUMBERDATA ) )
                       ( NAME = 'T_EXTENSIONOUT'        VALUE = ref #( ME->T_EXTENSIONOUT ) )
                       ( NAME = 'T_INTERNATIONALARTNOS' VALUE = ref #( ME->T_INTERNATIONALARTNOS ) )
                       ( NAME = 'T_MATERIALDESCRIPTION' VALUE = ref #( ME->T_MATERIALDESCRIPTION ) )
                       ( NAME = 'T_MATERIALLONGTEXT'    VALUE = ref #( ME->T_MATERIALLONGTEXT ) )
                       ( NAME = 'T_TAXCLASSIFICATIONS'  VALUE = ref #( ME->T_TAXCLASSIFICATIONS ) )
                       ( NAME = 'T_UNITSOFMEASURE'      VALUE = ref #( ME->T_UNITSOFMEASURE ) )
                       ( NAME = 'F_CUOBJ'               VALUE = ref #( ME->F_CUOBJ ) )
                       ( NAME = 'F_VCSTA'               VALUE = ref #( ME->F_VCSTA ) )
                      ).

  endmethod.
  method INIT_FROM_DB.

    data: LF_MATERIAL type BAPI_MARA_GA-MATERIAL,
          LF_BWKEY    type BWKEY.
    data: LS_BAPIRETURN type BAPIRETURN,
          LS_BAPIRET2   type BAPIRET2.
    data: LT_BAPIRETURN type table of BAPIRETURN.


    LF_MATERIAL = IF_MATNR.

*** Select Valuation Area if not supplied
    if IF_BWKEY is supplied.
      LF_BWKEY = IF_BWKEY.
    else.
      if IF_WERKS is supplied.
        select single BWKEY into LF_BWKEY from T001W where WERKS eq IF_WERKS.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Read all Data from Material
    call function 'BAPI_MATERIAL_GET_ALL'
      exporting
        MATERIAL            = LF_MATERIAL
        PLANT               = IF_WERKS
        VAL_AREA            = LF_BWKEY
        VAL_TYPE            = IF_BWTAR
        SALESORG            = IF_VKORG
        DISTR_CHAN          = IF_VTWEG
        STGE_LOC            = IF_LGORT
        WHSENUMBER          = IF_LGNUM
        STGE_TYPE           = IF_LGTYP
      importing
        CLIENTDATA          = ME->S_CLIENTDATA
        PLANTDATA           = ME->S_PLANTDATA
        FORECASTPARAMETERS  = ME->S_FORECASTPARAMETERS
        PLANNINGDATA        = ME->S_PLANNINGDATA
        STORAGELOCATIONDATA = ME->S_STORAGELOCATIONDATA
        VALUATIONDATA       = ME->S_VALUATIONDATA
        WAREHOUSENUMBERDATA = ME->S_WAREHOUSENUMBERDATA
        SALESDATA           = ME->S_SALESDATA
        STORAGETYPEDATA     = ME->S_STORAGETYPEDATA
        PRTDATA             = ME->S_PRTDATA
        LIFOVALUATIONDATA   = ME->S_LIFOVALUATIONDATA
      tables
        MATERIALDESCRIPTION = ME->T_MATERIALDESCRIPTION
        UNITSOFMEASURE      = ME->T_UNITSOFMEASURE
        INTERNATIONALARTNOS = ME->T_INTERNATIONALARTNOS
        MATERIALLONGTEXT    = ME->T_MATERIALLONGTEXT
        TAXCLASSIFICATIONS  = ME->T_TAXCLASSIFICATIONS
        EXTENSIONOUT        = ME->T_EXTENSIONOUT
        RETURN              = LT_BAPIRETURN.


***--------------------------------------------------------------------------------------
*** Map BAPI Return Messages to BAPIRET2
    loop at LT_BAPIRETURN into LS_BAPIRETURN.
      call function 'BALW_RETURN_TO_RET2'
        exporting
          RETURN_IN = LS_BAPIRETURN
        importing
          RETURN_OU = LS_BAPIRET2.
      append LS_BAPIRET2 to ET_BAPIRET2.
    endloop.

*** Raise Exception from BAPI Message
    read table ET_BAPIRET2 into LS_BAPIRET2
                           with key TYPE = 'E'.
    if SY-SUBRC eq 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Configuration Object
    ME->F_CUOBJ = ME->GET_MARC( )-CUOBJ.

  endmethod.
method MAP_BAPI_DATA.

  field-symbols: <S_UNITSOFMEASURE_GA> type        BAPI_MARM_GA,
                 <S_UNITSOFMEASURE>    type        BAPI_MARM,
                 <S_PRTDATA>           type        BAPI_MFHM,
                 <S_PRTDATAX>          type        BAPI_MFHMX,
                 <S_UNITSOFMEASUREX>   type        BAPI_MARMX.

**---------------------------------------------------------------------
** Read client data
  move-corresponding ME->S_CLIENTDATA to RS_BAPI_SAVE_IN-S_CLIENTDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_CLIENTDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_CLIENTDATAX ).

** Always set Material Status field
  move ABAP_TRUE to RS_BAPI_SAVE_IN-S_CLIENTDATAX-PUR_STATUS.

**---------------------------------------------------------------------
** Map plant data
  move-corresponding ME->S_PLANTDATA to RS_BAPI_SAVE_IN-S_PLANTDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_PLANTDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_PLANTDATAX ).

** Always set Material Status field
  if ME->S_PLANTDATA-PLANT is not initial.
    move ABAP_TRUE to RS_BAPI_SAVE_IN-S_PLANTDATAX-PUR_STATUS.
  endif.

**---------------------------------------------------------------------
** Map forecast parameters data
  move-corresponding ME->S_FORECASTPARAMETERS to RS_BAPI_SAVE_IN-S_FORECASTPARAMETERS.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_FORECASTPARAMETERS
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_FORECASTPARAMETERSX ).

**---------------------------------------------------------------------
** Map planning data
  move-corresponding ME->S_PLANNINGDATA to RS_BAPI_SAVE_IN-S_PLANNINGDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_PLANNINGDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_PLANNINGDATAX ).

**---------------------------------------------------------------------
** Map storage location data
  move-corresponding ME->S_STORAGELOCATIONDATA to RS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_STORAGELOCATIONDATAX ).

**---------------------------------------------------------------------
** Map valuation data
  move-corresponding ME->S_VALUATIONDATA to RS_BAPI_SAVE_IN-S_VALUATIONDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_VALUATIONDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_VALUATIONDATAX ).

**---------------------------------------------------------------------
** Map warehouse data
  move-corresponding ME->S_WAREHOUSENUMBERDATA to RS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATAX ).

**---------------------------------------------------------------------
** Map sales data
  move-corresponding ME->S_SALESDATA to RS_BAPI_SAVE_IN-S_SALESDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_SALESDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_SALESDATAX ).

**---------------------------------------------------------------------
** Map storage type data
  move-corresponding ME->S_STORAGETYPEDATA to RS_BAPI_SAVE_IN-S_STORAGETYPEDATA.
  /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = RS_BAPI_SAVE_IN-S_STORAGETYPEDATA
                                       changing  CS_X_STRUC = RS_BAPI_SAVE_IN-S_STORAGETYPEDATAX ).

***---------------------------------------------------------------------
*** Map material description data
  move ME->T_MATERIALDESCRIPTION to RS_BAPI_SAVE_IN-T_MATERIALDESCRIPTION.

***---------------------------------------------------------------------
*** Map units of measure data
  loop at ME->T_UNITSOFMEASURE assigning <S_UNITSOFMEASURE_GA>.
    insert initial line into table RS_BAPI_SAVE_IN-T_UNITSOFMEASURE assigning <S_UNITSOFMEASURE>.
    insert initial line into table RS_BAPI_SAVE_IN-T_UNITSOFMEASUREX assigning <S_UNITSOFMEASUREX>.

    move-corresponding <S_UNITSOFMEASURE_GA> to <S_UNITSOFMEASURE>.

    /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = <S_UNITSOFMEASURE>
                                         changing  CS_X_STRUC = <S_UNITSOFMEASUREX> ).
  endloop.

***---------------------------------------------------------------------
*** Map international art nos
  move ME->T_INTERNATIONALARTNOS[] to RS_BAPI_SAVE_IN-T_INTERNATIONALARTNOS[].

***---------------------------------------------------------------------
*** Map Material Long Text
  move ME->T_MATERIALLONGTEXT[] to RS_BAPI_SAVE_IN-T_MATERIALLONGTEXT[].

***---------------------------------------------------------------------
*** Map Tax classifications
  move ME->T_TAXCLASSIFICATIONS[] to RS_BAPI_SAVE_IN-T_TAXCLASSIFICATIONS[].

***---------------------------------------------------------------------
*** Map PRT data
  if ME->S_PRTDATA is not initial.
    insert corresponding #( ME->S_PRTDATA ) into table RS_BAPI_SAVE_IN-T_PRTDATA assigning <S_PRTDATA>.
    insert initial line into table RS_BAPI_SAVE_IN-T_PRTDATAX assigning <S_PRTDATAX>.
    /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = ME->S_PRTDATA
                                         changing  CS_X_STRUC = <S_PRTDATAX> ).
  endif.

***---------------------------------------------------------------------
*** Map Extensions of MARA & MARC
  RS_BAPI_SAVE_IN-T_EXTENSIONIN = ME->GET_EXTENSIONIN( importing ET_EXTENSIONINX = RS_BAPI_SAVE_IN-T_EXTENSIONINX ).

endmethod.
  method MAP_TO_BAPRET2.

    data: LS_BAPIRET2 type BAPIRET2.


    loop at IT_MAT_MSG into data(LS_MAT_MSG).
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = LS_MAT_MSG-MSGTY
          CL     = LS_MAT_MSG-MSGID
          NUMBER = LS_MAT_MSG-MSGNO
          PAR1   = LS_MAT_MSG-MSGV1
          PAR2   = LS_MAT_MSG-MSGV2
          PAR3   = LS_MAT_MSG-MSGV3
          PAR4   = LS_MAT_MSG-MSGV4
        importing
          RETURN = LS_BAPIRET2.
      append LS_BAPIRET2 to CT_BAPIRET2.
    endloop.

  endmethod.
  method RENEW_MATNR.

    data: LS_BAPIRETURN1 type          BAPIRETURN1.
    data: LT_MATNR       type table of BAPIMATINR.

***--------------------------------------------------------------------------------------
*** Get standard material number from internal interval
    call function 'BAPI_STDMATERIAL_GETINTNUMBER'
      exporting
        MATERIAL_TYPE   = ME->S_CLIENTDATA-MATL_TYPE
      importing
        RETURN          = LS_BAPIRETURN1
      tables
        MATERIAL_NUMBER = LT_MATNR.

*** Take the first Number
    if LT_MATNR is not initial.
      ME->SET_MATNR( IF_MATNR = LT_MATNR[ 1 ]-MATERIAL_LONG ).
    else.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = LS_BAPIRETURN1-TYPE
                                            IF_MSGID = LS_BAPIRETURN1-ID
                                            IF_MSGNO = LS_BAPIRETURN1-NUMBER
                                            IF_MSGV1 = LS_BAPIRETURN1-MESSAGE_V1
                                            IF_MSGV2 = LS_BAPIRETURN1-MESSAGE_V2
                                            IF_MSGV3 = LS_BAPIRETURN1-MESSAGE_V3
                                            IF_MSGV4 = LS_BAPIRETURN1-MESSAGE_V4 ).
    endif.

  endmethod.
method RUN_CONFIG.

  data:  LF_DISPLAY    type C.
  data:  LS_INOB       type INOB.
  data:  LT_OBJTABLE   type TT_CLTABLE.


***----------------------------------------------------------------------------
*** Define Link between Internal Number and Object
  LS_INOB-CUOBJ  = ME->F_CUOBJ.
  LS_INOB-ROBTAB = 'MARA'.
  LS_INOB-ROBJEK = conv MATNR( ME->S_PLANTDATA-PS_CONF_MAT ).

*** Defined Change/Display Mode
  if IF_LOCKED is not initial.
    clear LF_DISPLAY.
  else.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

*** Get Application Data In
  LT_OBJTABLE = ME->GET_CLTABLE_IN( ).

***----------------------------------------------------------------------------
*** Run Configuration
  call function 'CE_C_PROCESSING'
    exporting
      INSTANCE                       = LS_INOB-CUOBJ
      DATE                           = IF_DATE
      DISPLAY                        = LF_DISPLAY
      OBJECT_ID                      = LS_INOB-ROBTAB
      OBJECT                         = LS_INOB-ROBJEK
      OWNER_ID                       = 'MARC'
      PLANT                          = ME->GET_WERKS( )
      NO_DIALOG                      = ABAP_TRUE
      SUB_TYPE                       = '05'
      TYPE                           = 'E'
    importing
      NEW_INSTANCE                   = ME->F_CUOBJ
    tables
      APPLICATION_INPUT              = LT_OBJTABLE
    exceptions
      INTERNAL_ERROR                 = 1
      INSTANCE_NOT_FOUND             = 2
      REFERENCE_INSTANCE_NOT_FOUND   = 3
      INSTANCE_IS_A_CLASSIFICATION   = 4
      NO_PLANT                       = 5
      NO_QUANTITY                    = 6
      NO_CONNECTION_TO_CONFIGURATION = 7
      MATERIAL_VARIANT_NOT_ALLOWED   = 8
      INTERNAL_ERROR_ECM             = 9
      EOASL_NOT_ALLOWED              = 10
      MAXASL_NOT_ALLOWED             = 11
      XC_UNPROCESSED_DATA            = 12
      XC_FAILURE_PROCESSING_DATA     = 13
      NO_BOM                         = 14
      NO_KNOWLEDGE_BASE_FOUND        = 15
      ORDER_BOM_ERROR                = 16.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
  if EF_CHANGED is requested.
    try.
***     Get CBase for Configuration
        CL_CBASE=>GET_CURRENT_CBASE_BY_INSTANCE( exporting IV_INSTANCE = ME->F_CUOBJ
                                                 importing EO_CBASE    = data(LR_CBASE) ).
***     Get current Change Status
        if LR_CBASE is bound and
           not LR_CBASE->CFG_UNCHANGED( ).
          EF_CHANGED = ABAP_TRUE.
        endif.
      catch CX_CBASE_ERROR into data(LR_CBASE_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CBASE_ERROR ).
    endtry.
  endif.

***------------------------------------------------------------------------------------------------
*** Reset VC Status and to force new determination
  clear ME->F_VCSTA.

endmethod.
  method SAVE.

    data: LF_TDNAME       type THEAD-TDNAME.
    data: LS_BAPIRET2     type BAPIRET2.
    data: LS_HEADDATA     type BAPIMATHEAD,
          LS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN.


***--------------------------------------------------------------------------------------
*** Map all data to BAPI used to create material
    LS_BAPI_SAVE_IN = ME->MAP_BAPI_DATA( ).

*** Build Header Segment with Control Information
    LS_HEADDATA = ME->BUILD_BAPIMATHEAD( changing CS_BAPI_SAVE_IN = LS_BAPI_SAVE_IN ).

***--------------------------------------------------------------------------------------
*** Create material with bapi: BAPI_MATERIAL_SAVEDATA
    call function 'BAPI_MATERIAL_SAVEDATA'
      exporting
        HEADDATA             = LS_HEADDATA
        CLIENTDATA           = LS_BAPI_SAVE_IN-S_CLIENTDATA
        CLIENTDATAX          = LS_BAPI_SAVE_IN-S_CLIENTDATAX
        PLANTDATA            = LS_BAPI_SAVE_IN-S_PLANTDATA
        PLANTDATAX           = LS_BAPI_SAVE_IN-S_PLANTDATAX
        FORECASTPARAMETERS   = LS_BAPI_SAVE_IN-S_FORECASTPARAMETERS
        FORECASTPARAMETERSX  = LS_BAPI_SAVE_IN-S_FORECASTPARAMETERSX
        PLANNINGDATA         = LS_BAPI_SAVE_IN-S_PLANNINGDATA
        PLANNINGDATAX        = LS_BAPI_SAVE_IN-S_PLANNINGDATAX
        STORAGELOCATIONDATA  = LS_BAPI_SAVE_IN-S_STORAGELOCATIONDATA
        STORAGELOCATIONDATAX = LS_BAPI_SAVE_IN-S_STORAGELOCATIONDATAX
        VALUATIONDATA        = LS_BAPI_SAVE_IN-S_VALUATIONDATA
        VALUATIONDATAX       = LS_BAPI_SAVE_IN-S_VALUATIONDATAX
        WAREHOUSENUMBERDATA  = LS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATA
        WAREHOUSENUMBERDATAX = LS_BAPI_SAVE_IN-S_WAREHOUSENUMBERDATAX
        SALESDATA            = LS_BAPI_SAVE_IN-S_SALESDATA
        SALESDATAX           = LS_BAPI_SAVE_IN-S_SALESDATAX
        STORAGETYPEDATA      = LS_BAPI_SAVE_IN-S_STORAGETYPEDATA
        STORAGETYPEDATAX     = LS_BAPI_SAVE_IN-S_STORAGETYPEDATAX
      tables
        MATERIALDESCRIPTION  = LS_BAPI_SAVE_IN-T_MATERIALDESCRIPTION
        UNITSOFMEASURE       = LS_BAPI_SAVE_IN-T_UNITSOFMEASURE
        UNITSOFMEASUREX      = LS_BAPI_SAVE_IN-T_UNITSOFMEASUREX
        INTERNATIONALARTNOS  = LS_BAPI_SAVE_IN-T_INTERNATIONALARTNOS
        MATERIALLONGTEXT     = LS_BAPI_SAVE_IN-T_MATERIALLONGTEXT
        TAXCLASSIFICATIONS   = LS_BAPI_SAVE_IN-T_TAXCLASSIFICATIONS
        PRTDATA              = LS_BAPI_SAVE_IN-T_PRTDATA
        PRTDATAX             = LS_BAPI_SAVE_IN-T_PRTDATAX
        EXTENSIONIN          = LS_BAPI_SAVE_IN-T_EXTENSIONIN
        EXTENSIONINX         = LS_BAPI_SAVE_IN-T_EXTENSIONINX
        RETURNMESSAGES       = ET_BAPIRET2.


    check IF_COMMIT eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Check for error messages when creating material
    read table ET_BAPIRET2 into LS_BAPIRET2 with key TYPE = 'E'.
    if SY-SUBRC is initial.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
***   Raise Exception from BAPI Message
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).

    else.
***   No error message found - commit transaction
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method SAVE_CSPL.

    data: LF_MATNR  type          MATNR.
    data: LS_MAKV type          MAKV,
          LS_MAKG type          MAKG,
          LS_MAKZ type          MAKZ.
    data: LT_MAKG  type table of MAKG,
          LT_MAKZ  type table of MAKZ,
          LT_MAKVB type table of MAKVB,
          LT_MAKGB type table of MAKGB,
          LT_MAKZB type table of MAKZB.
    field-symbols: <S_MAKVB> type MAKVB,
                   <S_MAKGB> type MAKGB,
                   <S_MAKZB> type MAKZB.


*** Only if Material Number matches
    check IS_MAKV-MATNR eq ME->GET_MATNR( ).

***--------------------------------------------------------------------------------------
*** Enqueue Material
    if IF_ENQUEUE eq ABAP_TRUE.
      ME->ENQUEUE( ).
    endif.

*** Read current Cost Split
    ME->GET_CSPL( exporting IF_CSPLIT = IS_MAKV-CSPLIT
                  importing ES_MAKV   = LS_MAKV
                            ET_MAKG   = LT_MAKG
                            ET_MAKZ   = LT_MAKZ ).

***--------------------------------------------------------------------------------------
*** Material Cost Distribution Procedure
    append corresponding #( IS_MAKV ) to LT_MAKVB assigning <S_MAKVB>.
    <S_MAKVB>-UKZ = cond #( when LS_MAKV is initial then 'I'
*                            when IS_MAKV is initial then 'D'
                            when LS_MAKV ne IS_MAKV then 'U' ).
    <S_MAKVB>-CRULE = value #( IT_MAKG[ 1 ]-CRULE optional ).


*** Material Cost Distribution Groups
    loop at IT_MAKG into LS_MAKG where CSPLIT = IS_MAKV-CSPLIT.
      append corresponding #( LS_MAKG ) to LT_MAKGB assigning <S_MAKGB>.

      read table LT_MAKG with key MATNR  = LS_MAKG-MATNR
                                  WERKS  = LS_MAKG-WERKS
                                  CSPLIT = LS_MAKG-CSPLIT
                                  SCZUO  = LS_MAKG-SCZUO
                         transporting no fields.
      if SY-SUBRC eq 0.
        delete LT_MAKG index SY-TABIX.
        <S_MAKGB>-UKZ = 'U'.
      else.
        <S_MAKGB>-UKZ = 'I'.
      endif.
    endloop.

    loop at LT_MAKG into LS_MAKG where CSPLIT = IS_MAKV-CSPLIT.
      append corresponding #( LS_MAKG ) to LT_MAKGB assigning <S_MAKGB>.
      <S_MAKGB>-UKZ = 'D'.
    endloop.

*** Material Cost Distribution Equivalence Numbers
    loop at IT_MAKZ into LS_MAKZ where CSPLIT = IS_MAKV-CSPLIT.
      append corresponding #( LS_MAKZ ) to LT_MAKZB assigning <S_MAKZB>.

      read table LT_MAKZ with key MATNR  = LS_MAKZ-MATNR
                                  WERKS  = LS_MAKZ-WERKS
                                  CSPLIT = LS_MAKZ-CSPLIT
                                  SCZUO  = LS_MAKZ-SCZUO
                                  KUPPL  = LS_MAKZ-KUPPL
                                  BWART  = LS_MAKZ-BWART
                                  DATUB  = LS_MAKZ-DATUB
                         transporting no fields.
      if SY-SUBRC eq 0.
        delete LT_MAKZ index SY-TABIX.
        <S_MAKZB>-UKZ = 'U'.
      else.
        <S_MAKZB>-UKZ = 'I'.
      endif.
    endloop.

    loop at LT_MAKZ into LS_MAKZ.
      append corresponding #( LS_MAKZ ) to LT_MAKZB assigning <S_MAKZB>.
      <S_MAKZB>-UKZ = 'D'.
    endloop.

***--------------------------------------------------------------------------------------
*** Update
    call function 'MATERIAL_COSTS_SPLIT_UPDATE'
      in update task
      tables
        TMAKV = LT_MAKVB
        TMAKG = LT_MAKGB
        TMAKZ = LT_MAKZB.

***--------------------------------------------------------------------------------------
*** Commit Changes
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

  endmethod.
  method SAVE_MRP_AREA.

    data: LT_MESSAGE type CMD_BS_MAT_T_MAT_MSG,
          LT_MARC    type CMD_BS_MAT_T_MARC,
          LT_MARC_X  type CMD_BS_MAT_T_MARC_X.
    data: LR_MAT_API type ref to CL_CMD_BS_MAT_API.


    clear ET_BAPIRET2.

    data(LF_MATNR) = ME->GET_MATNR( ).
    data(LF_WERKS) = ME->GET_WERKS( ).

*** Check mandatory fields
    if LF_MATNR is initial or LF_WERKS is initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( 'Invalid Call' ).
    endif.

***--------------------------------------------------------------------------------------
    loop at IT_MDMA into data(LS_MDMA).
***   Check Planning time fence
      call function 'MARC_DISMM_FXHOR'
        exporting
          P_DISMM        = LS_MDMA-DISMM
          P_FXHOR        = LS_MDMA-FXHOR
          P_DISGR        = LS_MDMA-DISGR
        exceptions
          ERR_MARC_FXHOR = 01.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Check Reorder Point
      call function 'MARC_DISMM_MINBE'
        exporting
          P_DISMM                = LS_MDMA-DISMM
          P_MINBE                = LS_MDMA-MINBE
          P_DISPR                = LS_MDMA-DISPR
        exceptions
          P_ERR_MARC_DISMM_MINBE = 1
          ERR_T438A              = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Check MRP Controller
      call function 'MARC_DISPO'
        exporting
          P_DISPO        = LS_MDMA-DISPO
          P_WERKS        = LS_MDMA-WERKS
        exceptions
          ERR_MARC_DISPO = 01
          ERR_T024D      = 02.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Check Lot Sizing Procedure in Materials Planning
      call function 'MARC_DISLS'
        exporting
          P_DISLS        = LS_MDMA-DISLS
          P_MTART        = ME->S_CLIENTDATA-MATL_TYPE
          P_WERKS        = LS_MDMA-WERKS
          P_DISMM        = LS_MDMA-DISMM
          P_LDISLS       = LS_MDMA-DISLS
        exceptions
          ERR_MARC_DISLS = 01
          ERR_T439A      = 02
          ERR_T134       = 03
          ERR_T438A      = 04.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Check Fixed Lot Size
      call function 'MARC_BSTFE'
        exporting
          P_BSTFE          = LS_MDMA-BSTFE
          P_DISPR          = LS_MDMA-DISPR
          P_DISLS          = LS_MDMA-DISLS
        exceptions
          P_ERR_MARC_BSTFE = 01
          ERR_T439A        = 02.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Check Maximum Stock Level
      call function 'MARC_MABST'
        exporting
          P_DISLS          = LS_MDMA-DISLS
          P_MABST          = LS_MDMA-MABST
          P_MINBE          = LS_MDMA-MINBE
          P_LMABST         = 0
          P_LMINBE         = 0
          P_DISPR          = LS_MDMA-DISPR
          P_EISBE          = LS_MDMA-EISBE
        exceptions
          P_ERR_MARC_MABST = 1
          ERR_T439A        = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    endloop.

***--------------------------------------------------------------------------------------
*** Save MRP Areas
    CL_CMD_BS_MAT_MDMA_API=>GET_INSTANCE( )->SAVE( exporting IT_MDMA    = IT_MDMA
                                                             IT_MDMA_X  = IT_MDMA_X
                                                   importing ET_MESSAGE = LT_MESSAGE ).

*** Map Messages to BAPIRET2
    MAP_TO_BAPRET2( exporting IT_MAT_MSG  = LT_MESSAGE
                    changing  CT_BAPIRET2 = ET_BAPIRET2 ).

*** Check for error messages when creating material
    read table ET_BAPIRET2 into data(LS_BAPIRET2) with key TYPE = 'E'.
    if SY-SUBRC is initial.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
***   Raise Exception from BAPI Message
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).

    else.
***   No error message found - commit transaction
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

***--------------------------------------------------------------------------------------
*** Update Plant Data of Material
    LT_MARC   = value #( ( MATNR = LF_MATNR
                           WERKS = LF_WERKS
                           DIBER = cond #( when IT_MDMA is not initial then ABAP_TRUE ) ) ).
    LT_MARC_X = value #( ( MATNR = LF_MATNR
                           WERKS = LF_WERKS
                           DIBER = ABAP_TRUE ) ).
    CL_CMD_BS_MAT_API=>GET_INSTANCE( importing EO_BO = LR_MAT_API ).
    LR_MAT_API->SAVE( exporting IS_DATA    = value #( MARC_TAB   = LT_MARC
                                                      MARC_X_TAB = LT_MARC_X )
                      importing ET_MESSAGE = LT_MESSAGE ).

*** Map Messages to BAPIRET2
    MAP_TO_BAPRET2( exporting IT_MAT_MSG  = LT_MESSAGE
                    changing  CT_BAPIRET2 = ET_BAPIRET2 ).

*** Check for error messages when creating material
    read table ET_BAPIRET2 into LS_BAPIRET2 with key TYPE = 'E'.
    if SY-SUBRC is initial.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
***   Raise Exception from BAPI Message
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).

    else.
***   No error message found - commit transaction
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method SAVE_PVER.

    data: LF_VERKZ type MARC-VERKZ.
    data: LS_MKAL   type MDG_BS_MAT_S_MKAL,
          LS_MKAL_X type ZVCXI_XCI_S_MKAL_X.
    data: LT_DATA_INS type CMD_BS_MAT_T_MKAL,
          LT_DATA_UPD type CMD_BS_MAT_T_MKAL,
          LT_DATA_DEL type CMD_BS_MAT_T_MKAL,
          LT_MKAL_X   type CMD_BS_MAT_T_MKAL_X,
          LT_MARC     type CMD_BS_MAT_T_MARC,
          LT_MARC_X   type CMD_BS_MAT_T_MARC_X,
          LT_MESSAGE  type CMD_BS_MAT_T_MAT_MSG.
    data: LR_MAT_API  type ref to CL_CMD_BS_MAT_API.

***--------------------------------------------------------------------------------------
*** Allocate Insert/Update/Delete to corresponding Tables
    loop at IT_MKAL into LS_MKAL.
      check LS_MKAL-MATNR eq ME->GET_MATNR( ) and
            LS_MKAL-WERKS eq ME->GET_WERKS( ).

***   Get Update Structure
      LS_MKAL_X = value #( IT_MKAL_X[ MATNR = LS_MKAL-MATNR
                                      WERKS = LS_MKAL-WERKS
                                      VERID = LS_MKAL-VERID ] optional ).
      case LS_MKAL_X-UPDKZ.
        when 'I'.
          LF_VERKZ = ABAP_TRUE.
          append LS_MKAL to LT_DATA_INS.
        when 'U'.
          LF_VERKZ = ABAP_TRUE.
          append LS_MKAL to LT_DATA_UPD.
          append corresponding #( LS_MKAL_X ) to LT_MKAL_X.
        when 'D'.
          LF_VERKZ = switch #( LF_VERKZ when ABAP_TRUE then ABAP_TRUE
                                                  else ABAP_FALSE ).

          append LS_MKAL to LT_DATA_DEL.
        when others.
          LF_VERKZ = ABAP_TRUE.
          continue.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Save Production Versions
    CL_CMD_BS_MAT_MKAL_API=>GET_INSTANCE( )->SAVE( exporting IT_DATA_INS  = LT_DATA_INS
                                                             IT_DATA_UPD  = LT_DATA_UPD
                                                             IT_DATA_DEL  = LT_DATA_DEL
                                                             IT_MKAL_X    = LT_MKAL_X
                                                   importing ET_MESSAGE   = LT_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Update Plant Data of Material
    LT_MARC   = value #( ( MATNR = ME->GET_MATNR( )
                           WERKS = ME->GET_WERKS( )
                           VERKZ = LF_VERKZ ) ).
    LT_MARC_X = value #( ( MATNR = ME->GET_MATNR( )
                           WERKS = ME->GET_WERKS( )
                           VERKZ = ABAP_TRUE ) ).
    CL_CMD_BS_MAT_API=>GET_INSTANCE( importing EO_BO = LR_MAT_API ).
    LR_MAT_API->SAVE( exporting IS_DATA    = value #( MARC_TAB   = LT_MARC
                                                      MARC_X_TAB = LT_MARC_X )
                      importing ET_MESSAGE = LT_MESSAGE ).

  endmethod.
  method SAVE_QMAT.

    data: LS_QMAT      type QMAT,
          LS_BAPI_QMAT type BAPI1001004_QMAT,
          LS_BAPIRET2  type BAPIRET2.
    data: LT_BAPI_QMAT type table of BAPI1001004_QMAT,
          LT_BAPIRET2  type table of BAPIRET2.


***--------------------------------------------------------------------------------------
*** Prepare BAPI Data
    loop at IT_QMAT into LS_QMAT.
      check LS_QMAT-MATNR eq ME->GET_MATNR( ) and
            LS_QMAT-WERKS eq ME->GET_WERKS( ).

      clear LS_BAPI_QMAT.
      call function 'MAP2E_QMAT_TO_BAPI1001004_QMAT'
        exporting
          QMAT             = LS_QMAT
        changing
          BAPI1001004_QMAT = LS_BAPI_QMAT.

      append LS_BAPI_QMAT to LT_BAPI_QMAT.
    endloop.

***--------------------------------------------------------------------------------------
*** Save Insepection Type Data
    call function 'BAPI_MATINSPCTRL_SAVEREPLICA'
      tables
        RETURN         = LT_BAPIRET2
        INSPECTIONCTRL = LT_BAPI_QMAT.

***--------------------------------------------------------------------------------------
*** Check for error messages when creating Inspection Data
    read table LT_BAPIRET2 into LS_BAPIRET2 with key TYPE = 'E'.
    if SY-SUBRC is initial.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
***   Raise Exception from BAPI Message
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).

    else.
***   No error message found - commit transaction
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method SERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


*** Get Data References for XML Serialize/Deserialize
    ET_DATA = ME->GET_XML_DREF( ).

*** Create XML
    if RF_XML is requested.
      call transformation ID
           source (ET_DATA)
           result xml RF_XML.
    endif.

  endmethod.
method SET_CONFIG_TO_MM.

  data: LF_SUBRC    type          SY-SUBRC.
  data: LT_MARA_UEB type table of MARA_UEB,
        LT_MARC_UEB type table of MARC_UEB,
        LT_MERRDAT  type table of MERRDAT.

***--------------------------------------------------------------------------------------
*** Prepare parameters for function module
  LT_MARA_UEB = value #( ( MANDT = SY-MANDT
                           MATNR = IF_MATNR
                           TCODE = 'MM02' ) ).
  LT_MARC_UEB = value #( ( MANDT = SY-MANDT
                           MATNR = IF_MATNR
                           WERKS = IF_WERKS
                           STDPD = IF_STDPD
                           CUOBJ = IF_CUOBJ ) ).

*** Update material with Config. Material and link to configuration object
  call function 'MATERIAL_MAINTAIN_DARK'
    exporting
      SPERRMODUS             = SPACE    "Done manually
      P_KZ_NO_WARN           = 'X'
      KZ_PRF                 = 'I'
    tables
      AMARA_UEB              = LT_MARA_UEB
      AMARC_UEB              = LT_MARC_UEB
      AMERRDAT               = LT_MERRDAT
    exceptions
      KSTATUS_EMPTY          = 1
      TKSTATUS_EMPTY         = 2
      T130M_ERROR            = 3
      INTERNAL_ERROR         = 4
      TOO_MANY_ERRORS        = 5
      UPDATE_ERROR           = 6
      ERROR_PROPAGATE_HEADER = 7
      others                 = 8.

  move SY-SUBRC to LF_SUBRC.

*** Check for error messages
  read table LT_MERRDAT with key MSGTY = 'E' transporting no fields.
  if SY-SUBRC eq 0.
    move '4' to LF_SUBRC.
  endif.

  if LF_SUBRC ne 0.
*** Rollback
    call function 'BAPI_TRANSACTION_ROLLBACK'.

*** Error while saving configuration of material &1 plant &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCI'
                                          IF_MSGNO = '501'
                                          IF_MSGV1 = IF_MATNR
                                          IF_MSGV2 = IF_WERKS ).
  else.
*** NO error message was found - commit
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.
  endif.

endmethod.
method SET_LONGTEXT.

  data: LF_TEXT  type STRING,
        LF_MATNR type MATNR.
  data: LT_TEXT  type table of STRING.
  field-symbols: <S_MLTX> type BAPI_MLTX_GA.


*** Use local field for S4 Adjustments (Long Material)
  move ME->S_CLIENTDATA-MATERIAL   to LF_MATNR.

***----------------------------------------------------------------------------
*** Get Longtext
  LF_TEXT = ME->GET_LONGTEXT( IF_ID    = IF_ID
                              IF_LANGU = IF_LANGU ).
  if IF_TEXT ne LF_TEXT.
    move ABAP_TRUE to RF_CHANGED.

*** First remove old text entries from Material Text Table
    delete ME->T_MATERIALLONGTEXT where TEXT_ID eq IF_ID
                                   and  LANGU   eq IF_LANGU.

*** Get Text splitted by new line
    split IF_TEXT at CL_ABAP_CHAR_UTILITIES=>CR_LF into table LT_TEXT.

*** Create Text Table
    loop at LT_TEXT into LF_TEXT.

      insert initial line into table ME->T_MATERIALLONGTEXT assigning <S_MLTX>.
      move 'MATERIAL'                       to <S_MLTX>-APPLOBJECT.
      move LF_MATNR                         to <S_MLTX>-TEXT_NAME.
      move IF_ID                            to <S_MLTX>-TEXT_ID.
      move IF_LANGU                         to <S_MLTX>-LANGU.
      move LF_TEXT                          to <S_MLTX>-TEXT_LINE.

      if SY-TABIX eq 1.
        move '*'                            to <S_MLTX>-FORMAT_COL.
      else.
        move '/'                            to <S_MLTX>-FORMAT_COL.
      endif.

    endloop.
  endif.

endmethod.
  method SET_MATNR.

    field-symbols: <S_MLTX>       type          BAPI_MLTX_GA.


*** Update Material Number in Client Data
    ME->S_CLIENTDATA-MATERIAL      = IF_MATNR.
    ME->S_CLIENTDATA-MATERIAL_LONG = IF_MATNR.

*** Update Material Number in Text Table
    loop at ME->T_MATERIALLONGTEXT assigning <S_MLTX>.
      move IF_MATNR to <S_MLTX>-TEXT_NAME.
    endloop.

  endmethod.
method SET_VCSTA.

  if IF_VCLOCK eq ABAP_TRUE.
    move 'L' to ME->F_VCSTA.
  else.
    if ME->F_VCSTA eq 'I'.
      return.
    endif.

    move 'V' to ME->F_VCSTA.
  endif.

endmethod.
  method UPDATE_DISST.

    data: LF_MATNR type MATNR,
          LF_DISST type DISST.
    data: LT_MA29V type YT_MA29V.


***--------------------------------------------------------------------------------------
*** Get Material Number
    LF_MATNR = ME->GET_MATNR( ).

*** Identify Lower-Level Code
    if IF_DISST is supplied.
      LF_DISST = IF_DISST.

***   Add Main Material for Update
      append value #( MATNR = LF_MATNR
                      DISST = LF_DISST ) to LT_MA29V.
    else.
***   Use existing Lower-Level Codes
      select single DISST
             into LF_DISST
             from MARA
            where MATNR eq LF_MATNR.
      check SY-SUBRC eq 0.
    endif.

***--------------------------------------------------------------------------------------
*** Add Lower Level Materials
    if IF_MULTL eq ABAP_TRUE.
      append lines of FIND_LL_MATNR( IF_MATNR = LF_MATNR
                                     IF_DISST = LF_DISST ) to LT_MA29V.
    endif.

***--------------------------------------------------------------------------------------
*** Update Lower-Level Codes on Database
    call function 'CS_FF_MARA_DISST_UPDATE'
      tables
        TMA29V          = LT_MA29V
      exceptions
        ERROR_IN_UPDATE = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
