
class ZCL_VCXI_XCS_PR_PSCALE_MGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_PSCALE_MGR .

  aliases C_IPRVT_XCS_PSCALE_MGR
    for ZIF_VCXI_XCS_PSCALE_MGR~C_IPRVT_XCS_PSCALE_MGR .
  aliases GET_PSCALE
    for ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE .
  aliases IS_CHANGEABLE
    for ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE .
protected section.
private section.
endclass. "ZCL_VCXI_XCS_PR_PSCALE_MGR definition
class ZCL_VCXI_XCS_PR_PSCALE_MGR implementation.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LF_DIMID type DIMID.
    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY,
          LS_UOMCF       type ZVCXI_XCS_S_UOMCF.
    data: LT_GATE        type /VCXI/VKSR_TT_GATE.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***       Convert Price Scale Quantity if needed
          if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
            clear LS_UOMCF.
            read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
            if SY-SUBRC ne 0.
***           Get match based on dimension
              LF_DIMID = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_PSQTY-PSQTY_UOM ).
              loop at IT_UOMCF into LS_UOMCF.
                if ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_UOMCF-UOM ) = LF_DIMID.
                  exit.
                else.
                  clear LS_UOMCF.
                endif.
              endloop.
              check LS_UOMCF-UOM is not initial.
***           Convert Unit within same Dimension
              ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_UOMCF-UOMCF
                                                                 IF_UOM_IN    = LS_UOMCF-UOM
                                                                 IF_UOM_OUT   = LS_PSQTY-PSQTY_UOM
                                                       importing EF_VALUE_OUT = LS_UOMCF-UOMCF
                                                                 EF_UOM_OUT   = LS_UOMCF-UOM ).
            endif.
            if SY-SUBRC eq 0 and LS_UOMCF-UOMCF is not initial.
              LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
              LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
            else.
              continue.
            endif.
          endif.

***       Check conversion was successful
          check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***       Compare
          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PSCALE.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
    if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
      clear LS_UOMCF.
      read table IT_UOMCF into LS_UOMCF with key UOM = ES_PRICP-PRICP_UOM.
      if SY-SUBRC ne 0.
***     Get match based on dimension
        LF_DIMID = ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = ES_PRICP-PRICP_UOM ).
        loop at IT_UOMCF into LS_UOMCF.
          if ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LS_UOMCF-UOM ) = LF_DIMID.
            exit.
          else.
            clear LS_UOMCF.
          endif.
        endloop.
        check LS_UOMCF-UOM is not initial.
***     Convert Unit within same Dimension
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_UOMCF-UOMCF
                                                           IF_UOM_IN    = LS_UOMCF-UOM
                                                           IF_UOM_OUT   = ES_PRICP-PRICP_UOM
                                                 importing EF_VALUE_OUT = LS_UOMCF-UOMCF
                                                           EF_UOM_OUT   = LS_UOMCF-UOM ).
      endif.

      ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
      if LS_UOMCF-UOMCF is not initial.
        ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
      endif.
    endif.

  endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Always Yes as default
  move ABAP_TRUE to RF_CHANGEABLE.

endmethod.
endclass. "ZCL_VCXI_XCS_PR_PSCALE_MGR implementation
