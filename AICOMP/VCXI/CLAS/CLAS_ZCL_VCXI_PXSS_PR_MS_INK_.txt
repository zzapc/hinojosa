
class ZCL_VCXI_PXSS_PR_MS_INK definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IEVNT_O_ANITN_CHANGED type /VCXI/VKSC_IEVNT value 'ANITN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_APCTN_CHANGED type /VCXI/VKSC_IEVNT value 'APCTN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_APWGT_CHANGED type /VCXI/VKSC_IEVNT value 'APWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COLCO_CHANGED type /VCXI/VKSC_IEVNT value 'COLCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COVRG_CHANGED type /VCXI/VKSC_IEVNT value 'COVRG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FSLVE_CHANGED type /VCXI/VKSC_IEVNT value 'FSLVE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_INKTD_CHANGED type /VCXI/VKSC_IEVNT value 'INKTD_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_INKTN_CHANGED type /VCXI/VKSC_IEVNT value 'INKTN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MSLTN_CHANGED type /VCXI/VKSC_IEVNT value 'MSLTN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRPTH_CHANGED type /VCXI/VKSC_IEVNT value 'PRPTH_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TINK_CHANGED type /VCXI/VKSC_IEVNT value 'TINK_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_MS_INK type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_INK' ##NO_TEXT.
  constants C_PARID_ANITN type /VCXI/VKS_PARID value 'ZVCXI_PX_ANITN' ##NO_TEXT.
  constants C_PARID_APCTN type /VCXI/VKS_PARID value 'ZVCXI_PX_APCTN' ##NO_TEXT.
  constants C_PARID_APWGT type /VCXI/VKS_PARID value 'ZVCXI_PX_APWGT' ##NO_TEXT.
  constants C_PARID_COLCO type /VCXI/VKS_PARID value 'ZVCXI_PX_COLCO' ##NO_TEXT.
  constants C_PARID_COVRG type /VCXI/VKS_PARID value 'ZVCXI_P0_COVRG' ##NO_TEXT.
  constants C_PARID_FSLVE type /VCXI/VKS_PARID value 'ZVCXI_PX_FSLVE' ##NO_TEXT.
  constants C_PARID_INKTD type /VCXI/VKS_PARID value 'ZVCXI_PX_INKTD' ##NO_TEXT.
  constants C_PARID_INKTN type /VCXI/VKS_PARID value 'ZVCXI_PX_INKTN' ##NO_TEXT.
  constants C_PARID_MSLTN type /VCXI/VKS_PARID value 'ZVCXI_PX_MSLTN' ##NO_TEXT.
  constants C_PARID_PRPTH type /VCXI/VKS_PARID value 'ZVCXI_PX_PRPTH' ##NO_TEXT.
  constants C_PARID_TINK type /VCXI/VKS_PARID value 'ZVCXI_PX_TINK' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ANITN
    exporting
      !ER_CUST_TOOL_ANILOX type ref to ZCL_VCXI_PXSS_CUST_TOOL_ANILOX
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RELEA type ABAP_BOOL
      !ES_BAPIRET2 type BAPIRET2
    returning
      value(RF_ANITN) type ZVCXI_PXS_ANITN
    raising
      /VCXI/CX_CKX .
  methods GET_APCTN
    exporting
      !ER_CUST_TOOL_ADPCYL type ref to ZCL_VCXI_PXSS_CUST_TOOL_ADPCYL
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RELEA type ABAP_BOOL
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !ES_BAPIRET2 type BAPIRET2
    returning
      value(RF_APCTN) type ZVCXI_PXS_APCTN
    raising
      /VCXI/CX_CKX .
  methods GET_APWGT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_APWGT) type ZVCXI_PXS_S_APWGT
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_COLCO) type ZVCXI_PXS_COLCO
    raising
      /VCXI/CX_CKX .
  methods GET_COVRG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_COVRG_TOTAL type ZVCXI_P0S_S_COVRG
    returning
      value(RS_COVRG) type ZVCXI_P0S_S_COVRG
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_PRINT
    returning
      value(RR_CUST_PRINT) type ref to ZCL_VCXI_PXSS_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_FSLVE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FSLVE) type ZVCXI_PXS_FSLVE
    raising
      /VCXI/CX_CKX .
  methods GET_INKTD
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_INKTD) type ZVCXI_PXS_INKTD
    raising
      /VCXI/CX_CKX .
  methods GET_INKTN
    exporting
      !ER_CUST_TOOL_INK type ref to ZCL_VCXI_PXSS_CUST_TOOL_INK
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RELEA type ABAP_BOOL
      !ES_BAPIRET2 type BAPIRET2
    returning
      value(RF_INKTN) type ZVCXI_PXS_INKTN
    raising
      /VCXI/CX_CKX .
  methods GET_MSLTN
    exporting
      !ER_CUST_TOOL_MNTSLV type ref to ZCL_VCXI_PXSS_CUST_TOOL_MNTSLV
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RELEA type ABAP_BOOL
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !ES_BAPIRET2 type BAPIRET2
    returning
      value(RF_MSLTN) type ZVCXI_PXS_MSLTN
    raising
      /VCXI/CX_CKX .
  methods GET_PDINK
    returning
      value(RS_PDINK) type ZVCXI_PXE_DMS_S_PDINK
    raising
      /VCXI/CX_CKX .
  methods GET_PRPTH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PRPTH) type ZVCXI_PXS_PRPTH
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRINT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PRINT) type ref to ZIF_VCXI_PXSS_PRINT
    raising
      /VCXI/CX_CKX .
  methods GET_SLDCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SLDCO) type ZVCXI_PXS_S_SLDCO
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_TINK
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_TINK) type ZVCXI_PXS_TINK
    raising
      /VCXI/CX_CKX .
  methods SET_ANITN
    importing
      !IF_ANITN type ZVCXI_PXS_ANITN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_APCTN
    importing
      !IF_APCTN type ZVCXI_PXS_APCTN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_APWGT
    importing
      !IS_APWGT type ZVCXI_PXS_S_APWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COLCO
    importing
      !IF_COLCO type ZVCXI_PXS_COLCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COVRG
    importing
      !IS_COVRG type ZVCXI_P0S_S_COVRG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FSLVE
    importing
      !IF_FSLVE type ZVCXI_PXS_FSLVE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_INKTD
    importing
      !IF_INKTD type ZVCXI_PXS_INKTD optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_INKTN
    importing
      !IF_INKTN type ZVCXI_PXS_INKTN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_MSLTN
    importing
      !IF_MSLTN type ZVCXI_PXS_MSLTN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PDINK
    importing
      !IS_PDINK type ZVCXI_PXE_DMS_S_PDINK
    raising
      /VCXI/CX_CKX .
  methods SET_PRPTH
    importing
      !IF_PRPTH type ZVCXI_PXS_PRPTH
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SLDCO
    importing
      !IS_SLDCO type ZVCXI_PXS_S_SLDCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TINK
    importing
      !IF_TINK type ZVCXI_PXS_TINK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TOOL_DATA
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_LOAD_TOOL_DATA type /VCXI/VKSC_IEVNT value 'LOAD_TOOL_DATA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_APCTN type /VCXI/VKSC_IEVNT value 'RECALC_APCTN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_INKTD type /VCXI/VKSC_IEVNT value 'RECALC_INKTD' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MSLTN type /VCXI/VKSC_IEVNT value 'RECALC_MSLTN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_SLDCO_CHANGED type /VCXI/VKSC_IEVNT value 'SLDCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IFUNC_CHECK_COLCO type ZVCXI_XCD_IFUNC value 'CHECK_COLCO' ##NO_TEXT.
  constants C_PARID_SLDCO type /VCXI/VKS_PARID value 'ZVCXI_PX_SLDCO' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  data R_CUST_INK type ref to ZCL_VCXI_PXSS_CUST_INK .

  methods CHECK_ANITN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_APWGT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_COLCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SLDCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TINK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_DATA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_TOOL_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_INKTD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_APCTN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MSLTN
    raising
      /VCXI/CX_CKX .
  methods CHECK_APCTN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MSLTN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_INK definition
class ZCL_VCXI_PXSS_PR_MS_INK implementation.
  method CHECK_ANITN.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_ANILOX type ref to ZCL_VCXI_PXSS_CUST_TOOL_ANILOX.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_ANITN( importing ER_CUST_TOOL_ANILOX = LR_CUST_TOOL_ANILOX
                             ES_BAPIRET2         = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_TOOL_ANILOX is bound.

  endmethod.
  method CHECK_APCTN.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_ADPCYL type ref to ZCL_VCXI_PXSS_CUST_TOOL_ADPCYL.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_APCTN( importing ER_CUST_TOOL_ADPCYL = LR_CUST_TOOL_ADPCYL
                             ES_BAPIRET2         = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_TOOL_ADPCYL is bound.

  endmethod.
  method CHECK_APWGT.

*** Check Application Weight
    if ME->GET_APWGT( )-APWGT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Application Weight is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '204' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Application Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '205' ).
      endif.
    endif.

  endmethod.
  method CHECK_COLCO.

*** Do Active Check
    check ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                     IF_IFUNC = C_IFUNC_CHECK_COLCO ) eq ABAP_TRUE.

*** Check Color Code
    if ME->GET_COLCO( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Color Code is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '208' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Color Code is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '209' ).
      endif.
    endif.

  endmethod.
  method CHECK_COVRG.

    data: LS_COVRG_TOTAL  type ZVCXI_P0S_S_COVRG.

***--------------------------------------------------------------------------------------
*** Get Total Coverage incl. Marking
    ME->GET_COVRG( importing ES_COVRG_TOTAL = LS_COVRG_TOTAL ).

***--------------------------------------------------------------------------------------
*** Check Coverage
    if LS_COVRG_TOTAL-COVRG gt 0 and
       LS_COVRG_TOTAL-COVRG le 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Coverage is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '201' ).
      endif.

    elseif LS_COVRG_TOTAL-COVRG gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is greater than 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '202' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '203' ).
      endif.

    endif.

  endmethod.
  method CHECK_MSLTN.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_MNTSLV type ref to ZCL_VCXI_PXSS_CUST_TOOL_MNTSLV.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_MSLTN( importing ER_CUST_TOOL_MNTSLV = LR_CUST_TOOL_MNTSLV
                             ES_BAPIRET2         = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_TOOL_MNTSLV is bound.

  endmethod.
  method CHECK_SLDCO.

*** Check Solid Content
    if ME->GET_SLDCO( )-SLDCO is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Solid Content is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '206' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Solid Content is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '207' ).
      endif.
    endif.

  endmethod.
  method CHECK_TINK.

    data: LT_TINK_INFO type ZVCXI_PXSS_TT_TINK_INFO.
    data: LR_PRINT type ref to ZIF_VCXI_PXSS_PRINT.


*** Check Ink Type
    data(LF_TINK) = ME->GET_TINK( ).
    if LF_TINK is not initial.
      LR_PRINT = ME->GET_PRVDR_PRINT( ).
      if LR_PRINT is bound.
        LT_TINK_INFO = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LR_PRINT->GET_TPRIN( ) ).
      endif.
      if LINE_EXISTS( LT_TINK_INFO[ TINK = LF_TINK ] ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Ink Type is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '210' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Ink Type is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '211' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Ink Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '212' ).
      endif.
    endif.

  endmethod.
  method CHECK_TOOL_DATA.

    data: LF_ELMST type /VCXI/VKSR_ELMST,
          LF_MSGTY type SYMSGTY.
    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_INK type ref to ZCL_VCXI_PXSS_CUST_TOOL_INK.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_INKTN( importing ER_CUST_TOOL_INK = LR_CUST_TOOL_INK
                             ES_BAPIRET2      = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_TOOL_INK is bound.

*** Define Element Status and Message Type based on Release Status
    if LR_CUST_TOOL_INK->IS_RELEASED( ).
      LF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      LF_MSGTY = 'E'.
    else.
      LF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      LF_MSGTY = 'I'.
    endif.

***----------------------------------------------------------------------------
*** Check Application Weigth
    data(LS_APWGT) = ME->GET_APWGT( ).
    if not ZCL_VCXI_PXSS_CUST_TOOL_INK=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_INK->S_APWGT-APWGT
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_INK->S_APWGT-APWGT_UOM
                                                               IF_VALUE_VC   = LS_APWGT-APWGT
                                                               IF_UOM_VC     = LS_APWGT-APWGT_UOM
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Coverage
    if not ZCL_VCXI_PXSS_CUST_TOOL_INK=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_INK->S_COVRG-COVRG
                                                               IF_VALUE_VC   = ME->GET_COVRG( )-COVRG
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_W to ME->F_PARID_PRICP.
    move C_PARID_AVGCO_W to ME->F_PARID_AVGCO.
    move C_PARID_AVGCP_A to ME->F_PARID_AVGCP.

  endmethod.
  method GET_ANITN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ANITN ).
    move LS_PARAM-ATWRT to RF_ANITN.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_ANITN is not initial.

***----------------------------------------------------------------------------
    if ER_CUST_TOOL_ANILOX is requested or
       EF_RELEA is requested.
      try.
***       Get Anilox Roll Tool Customizing Instance
          ER_CUST_TOOL_ANILOX = ZCL_VCXI_PXSS_CUST_TOOL_ANILOX=>GET_INSTANCE_TOOL_ANILOX( IF_MATNR = RF_ANITN
                                                                                          IF_WERKS = ME->GET_WERKS( )
                                                                                          IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_TOOL_ANILOX.
      endtry.
    endif.

*** Release Status
    if EF_RELEA is requested and
       ER_CUST_TOOL_ANILOX is bound and
       ER_CUST_TOOL_ANILOX->IS_RELEASED( ).
      EF_RELEA = ABAP_TRUE.
    else.
      EF_RELEA = ABAP_FALSE.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_ANITN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method GET_APCTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APCTN ).
    move LS_PARAM-ATWRT to RF_APCTN.
    move LS_PARAM-SETBY to EF_SETBY.


    if EF_FOVRR is requested.
      EF_FOVRR = cond #( when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                           else ABAP_FALSE ).
    endif.

    check RF_APCTN is not initial.

***----------------------------------------------------------------------------
    if ER_CUST_TOOL_ADPCYL is requested or
       EF_RELEA is requested.
      try.
***       Get Adapter/Print Cylinder Customizing Instance
          ER_CUST_TOOL_ADPCYL = ZCL_VCXI_PXSS_CUST_TOOL_ADPCYL=>GET_INSTANCE_TOOL_ADPCYL( IF_MATNR = RF_APCTN
                                                                                          IF_WERKS = ME->GET_WERKS( )
                                                                                          IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_TOOL_ADPCYL.
      endtry.
    endif.

*** Release Status
    if EF_RELEA is requested and
       ER_CUST_TOOL_ADPCYL is bound and
       ER_CUST_TOOL_ADPCYL->IS_RELEASED( ).
      EF_RELEA = ABAP_TRUE.
    else.
      EF_RELEA = ABAP_FALSE.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_APCTN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method GET_APWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).
    move LS_PARAM-ATFLV to RS_APWGT-APWGT.
    move LS_PARAM-UNIT  to RS_APWGT-APWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COLCO.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_CUST_PRINT type ref to ZCL_VCXI_PXSS_CUST_PRINT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COLCO ).
    move LS_PARAM-ATWRT to RF_COLCO.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      LR_CUST_PRINT = ME->GET_CUST_PRINT( ).
      if LR_CUST_PRINT is bound.
        EF_DESCR = LR_CUST_PRINT->GET_COLCO_DESCR( IF_COLCO = RF_COLCO ).
      endif.
    endif.

  endmethod.
  method GET_COVRG.

    data: LF_LINE type I.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_COVRG type ZVCXI_P0S_S_COVRG.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).
    move LS_PARAM-ATFLV to RS_COVRG-COVRG.
    move LS_PARAM-UNIT  to RS_COVRG-COVRG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Total Coverage including Marking
    if ES_COVRG_TOTAL is requested.
      ES_COVRG_TOTAL = RS_COVRG.

***   Get Counter of Ink
      ME->GET_PRVDR_PRINT( importing ER_GATE = LR_GATE ).
      check LR_GATE is bound.
      LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_MS_INK=>C_IPRVT_PX_MS_INK
                                    IF_INUSE  = ABAP_TRUE
                                    IF_SORTED = ABAP_TRUE ).
      LF_LINE = LINE_INDEX( LT_GATE[ TABLE_LINE = ME->R_GATE ] ).

***   Add assigned Marking
      LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK
                                    IF_INUSE = ABAP_TRUE ).
      loop at LT_GATE into LR_GATE.
        check cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_ACONO( ) eq LF_LINE.

***     Add Marking Coverage to Ink Coverage
        LS_COVRG = cast ZCL_VCXI_PXSS_PR_MARK( LR_GATE->R_CLSPR )->GET_COVRG( ).
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_COVRG_TOTAL-COVRG
                                                            IF_CALCV_UOM_1 = ES_COVRG_TOTAL-COVRG_UOM
                                                            IF_CALCV_2     = LS_COVRG-COVRG
                                                            IF_CALCV_UOM_2 = LS_COVRG-COVRG_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                  importing EF_CALCV       = ES_COVRG_TOTAL-COVRG
                                                            EF_CALCV_UOM   = ES_COVRG_TOTAL-COVRG_UOM ).
      endloop.
    endif.

  endmethod.
  method GET_CUST_PRINT.

*** Get Customizing
    RR_CUST_PRINT = ZCL_VCXI_PXSS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = ME->GET_WERKS( ) ).

  endmethod.
  method GET_FSLVE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSLVE ).
    move LS_PARAM-ATWRT to RF_FSLVE.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_INKTD.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


    if ME->GET_INKTN( importing EF_DESCR = LF_DESCR ) is initial.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTD ).
      move LS_PARAM-STRNG to RF_INKTD.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
      RF_INKTD = LF_DESCR.
      EF_FOVRR = ABAP_UNDEFINED.
    endif.

  endmethod.
  method GET_INKTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTN ).
    move LS_PARAM-ATWRT to RF_INKTN.
    move LS_PARAM-SETBY to EF_SETBY.

*** Release Status Default
    EF_RELEA = ABAP_UNDEFINED.

    check RF_INKTN is not initial.

***----------------------------------------------------------------------------
    if ER_CUST_TOOL_INK is requested or
       EF_RELEA is requested.
      try.
***       Get Ink Tool Customizing Instance
          ER_CUST_TOOL_INK = ZCL_VCXI_PXSS_CUST_TOOL_INK=>GET_INSTANCE_TOOL_INK( IF_MATNR = RF_INKTN
                                                                                 IF_WERKS = ME->GET_WERKS( )
                                                                                 IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_TOOL_INK.
      endtry.
    endif.

*** Release Status
    if EF_RELEA is requested and
       ER_CUST_TOOL_INK is bound and
       ER_CUST_TOOL_INK->IS_RELEASED( ).
      EF_RELEA = ABAP_TRUE.
    else.
      EF_RELEA = ABAP_FALSE.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_INKTN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method GET_MSLTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSLTN ).
    move LS_PARAM-ATWRT to RF_MSLTN.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = cond #( when ME->GET_FSLVE( ) eq ABAP_TRUE                then ABAP_UNDEFINED  "No Mounting Sleeve in case of Printing Sleeve
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                           else ABAP_FALSE ).
    endif.

    check RF_MSLTN is not initial.

***----------------------------------------------------------------------------
    if ER_CUST_TOOL_MNTSLV is requested or
       EF_RELEA is requested.
      try.
***       Get Mounting Sleeve Tool Customizing Instance
          ER_CUST_TOOL_MNTSLV = ZCL_VCXI_PXSS_CUST_TOOL_MNTSLV=>GET_INSTANCE_TOOL_MNTSLV( IF_MATNR = RF_MSLTN
                                                                                          IF_WERKS = ME->GET_WERKS( )
                                                                                          IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_TOOL_MNTSLV.
      endtry.
    endif.

*** Release Status
    if EF_RELEA is requested and
       ER_CUST_TOOL_MNTSLV is bound and
       ER_CUST_TOOL_MNTSLV->IS_RELEASED( ).
      EF_RELEA = ABAP_TRUE.
    else.
      EF_RELEA = ABAP_FALSE.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_MSLTN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method GET_PDINK.

    RS_PDINK = value #( MATNR   = ME->GET_MATNR( )
                        TINK    = ME->GET_TINK( )
                        COLCO   = ME->GET_COLCO( )
                        INKTN   = ME->GET_INKTN( )
                        S_COVRG = ME->GET_COVRG( )
                        FSLVE   = ME->GET_FSLVE( )
                        APCTN   = ME->GET_APCTN( )
                        MSLTN   = ME->GET_MSLTN( )
                        ANITN   = ME->GET_ANITN( )
                        S_APWGT = ME->GET_APWGT( ) ).

  endmethod.
  method GET_PRPTH.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRPTH ).

    move LS_PARAM-ATFLV to RF_PRPTH.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_PRINT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PRINT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Printing
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_PRINT=>C_IPRVT_PX_PRINT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PRINT.

  endmethod.
  method GET_SLDCO.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move LS_PARAM-ATFLV to RS_SLDCO-SLDCO.
    move LS_PARAM-UNIT  to RS_SLDCO-SLDCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Ink Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TINK( ) ).

*** Check Coverage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COVRG( ) ).

*** Check Application Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_APWGT( ) ).

*** Check Solid Content
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SLDCO( ) ).

*** Check Color Code
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COLCO( ) ).

***----------------------------------------------------------------------------
*** Check Tool Data
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TOOL_DATA( ) ).
*** Check Adapter/Print Cylinder Tool Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_APCTN( ) ).
*** Check Mounting Sleeve Tool Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MSLTN( ) ).
*** Check Anilox Roll Tool Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ANITN( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Ink Type
    ME->CHECK_TINK( IR_MESSAGE = IR_MESSAGE ).

*** Check Coverage
    ME->CHECK_COVRG( IR_MESSAGE = IR_MESSAGE ).

*** Check Application Weight
    ME->CHECK_APWGT( IR_MESSAGE = IR_MESSAGE ).

*** Check Solid Content
    ME->CHECK_SLDCO( IR_MESSAGE = IR_MESSAGE ).

*** Check Color Code
    ME->CHECK_COLCO( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Tool Data
    ME->CHECK_TOOL_DATA( IR_MESSAGE = IR_MESSAGE ).

*** Check Adapter/Print Cylinder Tool Number
    ME->CHECK_APCTN( IR_MESSAGE = IR_MESSAGE ).

*** Check Mounting Sleeve Tool Number
    ME->CHECK_MSLTN( IR_MESSAGE = IR_MESSAGE ).

*** Check Anilox Roll Tool Number
    ME->CHECK_ANITN( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TINK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TINK ).
    move LS_PARAM-ATWRT to RF_TINK.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = RF_TINK ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).


      when C_IEVNT_I_RECALC_INKTD.
        ME->HANDLE_RECALC_INKTD( ).
      when C_IEVNT_I_LOAD_TOOL_DATA.
        ME->HANDLE_LOAD_TOOL_DATA( ).

      when C_IEVNT_I_RECALC_APCTN.
        ME->HANDLE_RECALC_APCTN( ).
      when C_IEVNT_I_RECALC_MSLTN.
        ME->HANDLE_RECALC_MSLTN( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type        MATNR,
          LF_WERKS type        WERKS_D,
          LF_DCONF type        DATS.
    data: LS_SLDCO type        ZVCXI_FFS_S_SLDCO.

***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_INK          is bound    and
       ME->R_CUST_INK->F_MATNR eq LF_MATNR and
       ME->R_CUST_INK->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR, ME->R_CUST_INK.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_INK = ZCL_VCXI_PXSS_CUST_INK=>GET_INSTANCE_INK( IF_MATNR = LF_MATNR
                                                                     IF_WERKS = LF_WERKS
                                                                     IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_INK to ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Set Values for Real Inks
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   Set Solid Content
      if ME->R_CUST_INK is bound.
        move ME->R_CUST_INK->S_SLDCO to LS_SLDCO.
      endif.
      ME->SET_SLDCO( IS_SLDCO = LS_SLDCO ).
    endif.

  endmethod.
  method HANDLE_LOAD_TOOL_DATA.

*** Ensure a tool has been specified
    check ME->GET_INKTN( ) is not initial or
          ME->GET_ANITN( ) is not initial.

*** Load Tool Data
    ME->SET_TOOL_DATA( ).

  endmethod.
  method HANDLE_RECALC_APCTN.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_APCTN type ZVCXI_PXS_APCTN.


*** Only calcualate if calculation is active
    ME->GET_APCTN( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

*** Set new Adapter/Print Cylinder
    ME->SET_APCTN( IF_APCTN = LF_APCTN ).

  endmethod.
  method HANDLE_RECALC_INKTD.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->GET_INKTN( ) is initial.
***   Only calcualate if calculation is active
      ME->GET_INKTD( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->SET_INKTD( IF_INKTD = LF_MAKTX ).

    else.
***   Initialize Tool Description
      ME->SET_INKTD( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_MSLTN.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MSLTN type ZVCXI_PXS_MSLTN.


    if ME->GET_FSLVE( ) is initial.
***   Only calcualate if calculation is active
      ME->GET_MSLTN( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

      break TBD.

***   Set new Mounting Sleeve
      ME->SET_MSLTN( IF_MSLTN = LF_MSLTN ).

    else.
***   Initialize Mounting Sleeve
      ME->SET_MSLTN( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_APWGT type ZVCXI_PXS_S_APWGT,
          LS_SLDCO type ZVCXI_PXS_S_SLDCO,
          LS_SURWT type ZVCXI_PXS_S_SURWT.


*** Get Application Weight and Solid Content
    LS_APWGT = ME->GET_APWGT( ).
    LS_SLDCO = ME->GET_SLDCO( ).

*** Calculate Surface Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_APWGT-APWGT
        IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
        IF_CALCV_2     = LS_SLDCO-SLDCO
        IF_CALCV_UOM_2 = LS_SLDCO-SLDCO_UOM
        IF_UOM         = LS_APWGT-APWGT_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
      importing
        EF_CALCV       = LS_SURWT-SURWT
        EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

*** Set new Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_ANITN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ANITN ).

    if IF_ANITN is supplied.
      LS_PARAM-ATWRT = IF_ANITN.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ANITN_CHANGED ).
    endif.

  endmethod.
  method SET_APCTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APCTN ).

    if IF_APCTN is supplied.
      LS_PARAM-ATWRT = IF_APCTN.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_APCTN_CHANGED ).
    endif.

  endmethod.
  method SET_APWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_APWGT ).

    move IS_APWGT-APWGT     to LS_PARAM-ATFLV.
    move IS_APWGT-APWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_APWGT_CHANGED ).
    endif.

  endmethod.
method SET_COLCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COLCO ).

  move IF_COLCO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COLCO_CHANGED ).
  endif.

endmethod.
method SET_COVRG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).

  LS_PARAM-ATFLV = IS_COVRG-COVRG.
  LS_PARAM-UNIT  = IS_COVRG-COVRG_UOM.
  LS_PARAM-SETBY = IF_SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COVRG_CHANGED ).
  endif.

endmethod.
  method SET_FSLVE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSLVE ).

    if IF_FSLVE is supplied.
      LS_PARAM-ATWRT = IF_FSLVE.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FSLVE_CHANGED ).
    endif.

  endmethod.
  method SET_INKTD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTD ).

    move IF_INKTD  to LS_PARAM-STRNG.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INKTD_CHANGED ).
    endif.

  endmethod.
  method SET_INKTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INKTN ).

    move IF_INKTN  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INKTN_CHANGED ).
    endif.

  endmethod.
  method SET_MSLTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MSLTN ).

    if IF_MSLTN is supplied.
      LS_PARAM-ATWRT = IF_MSLTN.
    endif.
    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MSLTN_CHANGED ).
    endif.

  endmethod.
  method SET_PDINK.

*** Are Adapter/Print Cylinder allowed
    ME->GET_PRVDR_PRINT( )->GET_TPRIN( importing EF_FAPCA = data(LF_FAPCA) ).


    ME->SET_MATNR( IF_MATNR = IS_PDINK-MATNR
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_TINK(  IF_TINK  = IS_PDINK-TINK
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_COLCO( IF_COLCO = IS_PDINK-COLCO
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_INKTN( IF_INKTN = IS_PDINK-INKTN
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_COVRG( IS_COVRG = IS_PDINK-S_COVRG
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_FSLVE( IF_FSLVE = IS_PDINK-FSLVE
                   IF_SETBY = switch #( LF_FAPCA when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER else SPACE ) ).
    ME->SET_APCTN( IF_APCTN = IS_PDINK-APCTN
                   IF_SETBY = switch #( LF_FAPCA when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER else SPACE ) ).
    ME->SET_MSLTN( IF_MSLTN = IS_PDINK-MSLTN
                   IF_SETBY = switch #( LF_FAPCA when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER else SPACE ) ).
    ME->SET_ANITN( IF_ANITN = IS_PDINK-ANITN
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    ME->SET_APWGT( IS_APWGT = IS_PDINK-S_APWGT
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method SET_PRPTH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRPTH ).

    LS_PARAM-ATFLV = IF_PRPTH.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRPTH_CHANGED ).
    endif.

  endmethod.
  method SET_SLDCO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move IS_SLDCO-SLDCO      to LS_PARAM-ATFLV.
    move IS_SLDCO-SLDCO_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SLDCO_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TINK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TINK ).

    move IF_TINK to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TINK_CHANGED ).
    endif.

  endmethod.
  method SET_TOOL_DATA.

    data: LR_CUST_TOOL_INK    type ref to ZCL_VCXI_PXSS_CUST_TOOL_INK,
          LR_CUST_TOOL_ANILOX type ref to ZCL_VCXI_PXSS_CUST_TOOL_ANILOX.


***--------------------------------------------------------------------------------------
*** Get Tool Instance
    ME->GET_INKTN( importing ER_CUST_TOOL_INK    = LR_CUST_TOOL_INK ).
    ME->GET_ANITN( importing ER_CUST_TOOL_ANILOX = LR_CUST_TOOL_ANILOX ).

***--------------------------------------------------------------------------------------
*** Application Weight
    if LR_CUST_TOOL_ANILOX is bound.
      ME->SET_APWGT( IS_APWGT = LR_CUST_TOOL_ANILOX->S_APWGT ).
    elseif LR_CUST_TOOL_INK is bound.
      ME->SET_APWGT( IS_APWGT = LR_CUST_TOOL_INK->S_APWGT ).
    endif.

*** Coverage
    if LR_CUST_TOOL_INK is bound.
      ME->SET_COVRG( IS_COVRG = LR_CUST_TOOL_INK->S_COVRG ).
    endif.

*** Sleeve Flag
    if LR_CUST_TOOL_INK is bound.
      ME->SET_FSLVE( IF_FSLVE = LR_CUST_TOOL_INK->F_FSLVE ).
    endif.

  endmethod.
