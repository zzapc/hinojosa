
class ZCL_VCXI_FBSS_GRID_BGICS definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_FBSS_S_BGICS_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IT_BGICS type ZVCXI_FBSS_TT_BGICS
      !IR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG
      !IF_LOCKED type /VCXI/CKX_LOCKED default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods GET_BGICS
    returning
      value(RT_BGICS) type ZVCXI_FBSS_TT_BGICS
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_TC030T type standard table of ZVCXI_FBS_TC030T .

  data T_BGICS type ZVCXI_FBSS_TT_BGICS .
  data R_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.

  methods ADD_CSTEP
    importing
      !IF_ICSTP type ZVCXI_FBS_ICSTP
    raising
      /VCXI/CX_CKX .
  methods CHECK_CSTEP
    importing
      !IS_BGICS type ZVCXI_FBSS_S_BGICS
    exporting
      !EF_QTYMI type /VCXI/VKSC_QTYMI
      !EF_QTYMA type /VCXI/VKSC_QTYMI
      !EF_DESCR type /VCXI/CKX_DESCR
      !EF_RETURN type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_CSTEP_ADD
    importing
      !IF_ICSTP type ZVCXI_FBS_ICSTP
    returning
      value(RF_DISABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DELETE_CSTEP
    importing
      !IT_BGICS type ZVCXI_FBSS_TT_BGICS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event MENU_BUTTON of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_UCOMM
      !SENDER .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods UPDATE_CSTEP
    importing
      !IS_BGICS type ZVCXI_FBSS_S_BGICS
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_GRID_BGICS definition
class ZCL_VCXI_FBSS_GRID_BGICS implementation.
  method ADD_CSTEP.

    field-symbols: <S_BGICS> type ZVCXI_FBSS_S_BGICS.

    insert initial line into table ME->T_BGICS assigning <S_BGICS>.
    move: IF_ICSTP to <S_BGICS>-ICSTP,
          ZCL_VCXI_FBSSC_BAGTY=>C_COUNT_MIN1 to <S_BGICS>-CCSTP.

  endmethod.
method CHECK_CSTEP.

*** 0 - No error .
*** 1 - Conversion & not allowed
*** 2 - Minimum & Conversion & .
*** 3 - Maximum & Conversion & .

  data: LF_DESCR  type        /VCXI/CKX_DESCR.
  data: LS_CSTEP  type        ZVCXI_FBSSC_S_BAGTY_CSTEP,
        LS_TC030T type        ZVCXI_FBS_TC030T.
  data: LT_CSTEP  type        ZVCXI_FBSSC_TT_BAGTY_CSTEP.
  data: LR_CX_CKX type ref to /VCXI/CX_CKX.

  move ME->R_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.

  read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T with key ICSTP = IS_BGICS-ICSTP.
  move LS_TC030T-DESCR to EF_DESCR.

  read table LT_CSTEP into LS_CSTEP with key ICSTP = IS_BGICS-ICSTP.
  if SY-SUBRC ne 0.
    move 1 to EF_RETURN.
  endif.

  if LS_CSTEP-QTYMI gt IS_BGICS-CCSTP .
    move 2 to EF_RETURN.
    move LS_CSTEP-QTYMI to EF_QTYMI.
  endif.

  if LS_CSTEP-QTYMA lt IS_BGICS-CCSTP .
    move 3 to EF_RETURN.
    move LS_CSTEP-QTYMA to EF_QTYMA.
  endif.

endmethod.
  method CHECK_CSTEP_ADD.

    move ABAP_FALSE to RF_DISABLE.
    read table ME->T_BGICS with key ICSTP = IF_ICSTP
                           transporting no fields.
    if SY-SUBRC is initial.
      move ABAP_TRUE to RF_DISABLE.
    endif.

  endmethod.
  method CHECK_SEL_DELETE.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.

    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
    if LINES( LT_CELL ) gt 0 or
       LINES( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

    move IF_LOCKED to ME->F_LOCKED.
    move IT_BGICS[] to ME->T_BGICS[].
    move IR_CUST_BAG to ME->R_CUST_BAG.

  endmethod.
  method DELETE_CSTEP.

    data: LS_BGICS type ZVCXI_FBSS_S_BGICS,
          LS_INDEX type ZVCXI_FBSS_S_BGICS.

*** Process Result
    loop at IT_BGICS into LS_BGICS.
***   Delete Conv. Step
      read table ME->T_BGICS into LS_INDEX with key ICSTP = LS_BGICS-ICSTP.
      check SY-SUBRC is initial.

      delete ME->T_BGICS index SY-TABIX.
    endloop.

  endmethod.
  method GET_BGICS.

    move ME->T_BGICS[] to RT_BGICS[].

  endmethod.
  method GET_FIELDCAT.

    field-symbols: <S_FCAT> type LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL' or 'ICSTP'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

***     Adjust Field Label of Conv. Steps
        when 'ICSTP_DESCR'.
          move text-D02 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.
          move: 1   to <S_FCAT>-COL_POS,
                15  to <S_FCAT>-OUTPUTLEN.

        when 'CCSTP'.
          move text-D01 to : <S_FCAT>-SCRTEXT_L, <S_FCAT>-SCRTEXT_M,
                             <S_FCAT>-SCRTEXT_S, <S_FCAT>-REPTEXT.

          move: 2   to <S_FCAT>-COL_POS,
                15  to <S_FCAT>-OUTPUTLEN.

          move ME->F_LOCKED to <S_FCAT>-EDIT.

      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_BGICS      type ZVCXI_FBSS_S_BGICS,
          LS_BGICS_GRID type ZVCXI_FBSS_S_BGICS_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

    loop at ME->T_BGICS into LS_BGICS.
      clear: LS_BGICS_GRID.

      move: LS_BGICS to LS_BGICS_GRID-S_BGICS.

***   Get Bag Part description
      if ME->R_CUST_BAG is bound.
        ME->R_CUST_BAG->GET_CSTEP_INFO( exporting IF_ICSTP = LS_BGICS-ICSTP
                                        importing EF_DESCR = LS_BGICS_GRID-ICSTP_DESCR ).
      endif.

***--------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_BGICS_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    move 'T_STYL'  to RS_LAYOUT-STYLEFNAME.

*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
    move ''       to RS_LAYOUT-EDIT.

  endmethod.
  method HANDLE_DATA_CHANGED.

    data: LF_QTYMI  type                /VCXI/VKSC_QTYMI,
          LF_QTYMA  type                /VCXI/VKSC_QTYMI,
          LF_DESCR  type                /VCXI/CKX_DESCR,
          LF_RETURN type                I.
    data: LS_BGICS      type                ZVCXI_FBSS_S_BGICS,
          LS_BGICS_GRID type                ZVCXI_FBSS_S_BGICS_GRID,
          LS_GOOD_CELLS type                LVC_S_MODI.
    data:           LR_CX_CKX     type ref to         /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type                ANY.

    SUPER->HANDLE_DATA_CHANGED( exporting ER_DATA_CHANGED = ER_DATA_CHANGED
                                          E_ONF4          = E_ONF4
                                          E_ONF4_BEFORE   = E_ONF4_BEFORE
                                          E_ONF4_AFTER    = E_ONF4_AFTER
                                          E_UCOMM         = E_UCOMM ).

    try.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          read table ER_DATA_CHANGED->MT_GOOD_CELLS into LS_GOOD_CELLS with key ROW_ID = SY-TABIX .
          check SY-SUBRC eq 0.

          move-corresponding <S_DATA>       to LS_BGICS_GRID.
          move-corresponding LS_BGICS_GRID  to LS_BGICS.
          move LS_GOOD_CELLS-VALUE          to LS_BGICS-CCSTP.

          ME->CHECK_CSTEP( exporting IS_BGICS  = LS_BGICS
                           importing EF_DESCR  = LF_DESCR
                                     EF_QTYMI  = LF_QTYMI
                                     EF_QTYMA  = LF_QTYMA
                                     EF_RETURN = LF_RETURN ).

          case LF_RETURN.
            when 1.

***           Conversion &1 not allowed.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_FBSS'
                                                             I_MSGTY     = 'E'
                                                             I_MSGNO     = '480'
                                                             I_FIELDNAME = 'ICSTP'
                                                             I_ROW_ID    = LS_GOOD_CELLS-ROW_ID
                                                             I_MSGV1     = LF_DESCR ).
            when 2.

***           Minimum &1 Conversion &2 needed.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_FBSS'
                                                             I_MSGTY     = 'E'
                                                             I_MSGNO     = '481'
                                                             I_FIELDNAME = 'ICSTP'
                                                             I_ROW_ID    = LS_GOOD_CELLS-ROW_ID
                                                             I_MSGV1     = LF_QTYMI
                                                             I_MSGV2     = LF_DESCR ).

            when 3.

***           Maximum &1 Conversion &2 allowed.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( exporting I_MSGID     = 'ZVCXI_FBSS'
                                                             I_MSGTY     = 'E'
                                                             I_MSGNO     = '482'
                                                             I_FIELDNAME = 'ICSTP'
                                                             I_ROW_ID    = LS_GOOD_CELLS-ROW_ID
                                                             I_MSGV1     = LF_QTYMA
                                                             I_MSGV2     = LF_DESCR ).

          endcase.

        endloop.

        ER_DATA_CHANGED->DISPLAY_PROTOCOL( ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_BGICS      type ZVCXI_FBSS_S_BGICS,
          LS_BGICS_GRID type ZVCXI_FBSS_S_BGICS_GRID.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.


    check E_MODIFIED eq ABAP_TRUE.

    try.

        SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                       ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.

          read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
          check SY-SUBRC eq 0.

          move-corresponding <S_DATA> to LS_BGICS_GRID.
          move-corresponding LS_BGICS_GRID to LS_BGICS.

***       Update
          ME->UPDATE_CSTEP( IS_BGICS = LS_BGICS ).

        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LF_DISABLED type        ABAP_BOOL,
          LF_FCODE    type        UI_FUNC,
          LF_TEXT     type        GUI_TEXT,
          LF_DESCR    type        /VCXI/CKX_DESCR.
    data: LS_CSTEP  type ZVCXI_FBSSC_S_BAGTY_CSTEP.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    check E_OBJECT is bound.
    check E_UCOMM eq C_FCODE_ADD.

    try.

        if ME->F_LOCKED eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

        move ME->R_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.

        loop at LT_CSTEP into LS_CSTEP.
          clear: LF_FCODE, LF_TEXT.

***       Get Function Code
          concatenate C_FCODE_ADD LS_CSTEP-ICSTP into LF_FCODE separated by '@'.

***       Get Description
          ME->R_CUST_BAG->GET_CSTEP_INFO( exporting IF_ICSTP = LS_CSTEP-ICSTP
                                          importing EF_DESCR = LF_DESCR ).
          move LF_DESCR to LF_TEXT.

***       Check if Entry can be added
          LF_DISABLED = ME->CHECK_CSTEP_ADD( IF_ICSTP = LS_CSTEP-ICSTP ).

***       Add Function
          E_OBJECT->ADD_FUNCTION( FCODE    = LF_FCODE
                                  TEXT     = LF_TEXT
                                  DISABLED = LF_DISABLED ).
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data:  LF_DISABLED     type        ABAP_BOOL.
    data:  LT_CSTEP        type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.
    field-symbols: <S_TOOLBAR> type STB_BUTTON.

    try.

        if ME->F_LOCKED eq ABAP_FALSE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

        if ME->R_CUST_BAG is bound.
          move ME->R_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
          if LINES( LT_CSTEP ) is initial.
            move ABAP_TRUE to LF_DISABLED.

            if LINES( ME->T_BGICS ) is not initial.
              move ABAP_FALSE to LF_DISABLED.
            endif.
          endif.
        endif.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements Add, Delete
        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_ADD               to <S_TOOLBAR>-FUNCTION,
              text-T02                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_MENU              to <S_TOOLBAR>-BUTN_TYPE,
              ICON_INSERT_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

        if LINES( ME->T_BGICS ) is initial.
          move ABAP_TRUE to LF_DISABLED.
        endif.

        insert initial line into table E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
        move: C_FCODE_DELETE            to <S_TOOLBAR>-FUNCTION,
              text-T03                  to <S_TOOLBAR>-TEXT,
              C_BTYPE_BUTTON            to <S_TOOLBAR>-BUTN_TYPE,
              ICON_DELETE_ROW           to <S_TOOLBAR>-ICON,
              LF_DISABLED               to <S_TOOLBAR>-DISABLED.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_USER_COMMAND.

    data: LF_UCOMM type SYUCOMM,
          LF_ICSTP type ZVCXI_FBS_ICSTP.
    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.
    data: LT_CELL  type LVC_T_CELL,
          LT_ROW   type LVC_T_ROW,
          LT_BGICS type ZVCXI_FBSS_TT_BGICS.
    data: LR_CX_CKX type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>  type standard table,
                   <S_BGICS> type          ZVCXI_FBSS_S_BGICS,
                   <S_DATA>  type          ANY.

    try.
***     Get Handles
        assign ME->R_DATA->* to <T_DATA>.
        free: <T_DATA>.
        ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

        ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
        ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

***     Pre-check User command
        split E_UCOMM at '@' into LF_UCOMM LF_ICSTP.

        case LF_UCOMM.
          when C_FCODE_ADD.
***         Add new Conv. Step
            ME->ADD_CSTEP( IF_ICSTP = LF_ICSTP ).

          when C_FCODE_DELETE.
***         Delete Conv. Step
            if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***           No rows selected. Please select all rows you want to delete.
              raise exception type /VCXI/CX_CKX
                exporting
                  F_MSGTY = 'E'
                  F_MSGID = 'ZVCXI_FBSSC'
                  F_MSGNO = '056'.
            endif.

***         Get Selected Conv. Step
            loop at LT_CELL into LS_CELL.
              read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BGICS assigning <S_BGICS>.
              move-corresponding <S_DATA> to <S_BGICS>.
            endloop.

            loop at LT_ROW into LS_ROW.
              read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
              check SY-SUBRC = 0.

              insert initial line into table LT_BGICS assigning <S_BGICS>.
              move-corresponding <S_DATA> to <S_BGICS>.
            endloop.

***         Delete Selected Conv. Step
            ME->DELETE_CSTEP( IT_BGICS = LT_BGICS ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Add Event for UserCommand and Toolbar
    set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
    set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
    set handler ME->HANDLE_MENU_BUTTON  for ME->R_GRID.

  endmethod.
  method UPDATE_CSTEP.

    field-symbols: <S_BGICS> type ZVCXI_FBSS_S_BGICS.

    read table ME->T_BGICS assigning <S_BGICS> with key ICSTP = IS_BGICS-ICSTP.
    check SY-SUBRC is initial.

    move IS_BGICS-CCSTP to <S_BGICS>-CCSTP.

  endmethod.
