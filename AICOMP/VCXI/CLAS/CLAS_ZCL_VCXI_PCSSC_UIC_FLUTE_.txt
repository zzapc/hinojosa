
class ZCL_VCXI_PCSSC_UIC_FLUTE definition
  public
  final
  create public .

public section.

  data S_DYNP type /VCXI/CKX_S_DYNP_KEY read-only .
  data S_FLUTE_VIS type ZVCXI_PCSSC_S_FLUTE_VIS read-only .

  methods HANDLE_UC_CD
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
  methods DO_MODIFY_SCREEN
    importing
      !IF_REPID type SYREPID
      !IF_DYNNR type SYDYNNR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    importing
      !IF_REPID type SYREPID
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE
    importing
      !IS_FLUTE_VIS type ZVCXI_PCSSC_S_FLUTE_VIS
    raising
      /VCXI/CX_CKX .
  class-methods START
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_SAVE type SYUCOMM value 'SAVE'. "#EC NOTEXT
  data F_VALFR type DATS .
  data F_WERKS type WERKS_D .
  data R_FLUTE type ref to ZCL_VCXI_PCSSC_FLUTE .
  data R_GRID_FLUTE type ref to CL_GUI_ALV_GRID .
  data R_GRID_FPAPI type ref to CL_GUI_ALV_GRID .
  data R_GRID_FPLAI type ref to CL_GUI_ALV_GRID .
  data T_FLUTE_GRID type ZVCXI_PCSSC_TT_FLUTE_GRID .
  data T_FPAPI_GRID type ZVCXI_PCSSC_TT_FPAPI_GRID .
  data T_FPLAI_GRID type ZVCXI_PCSSC_TT_FPLAI_GRID .
  constants C_FCODE_ADD_FPLAI type UI_FUNC value 'GRID_FPLAI_ADD'. "#EC NOTEXT
  constants C_FCODE_ADD_FPAPI type UI_FUNC value 'GRID_FPAPI_ADD'. "#EC NOTEXT
  constants C_FCODE_DEL_FPLAI type UI_FUNC value 'GRID_FPLAI_DEL'. "#EC NOTEXT
  constants C_FCODE_DEL_FPAPI type UI_FUNC value 'GRID_FPAPI_DEL'. "#EC NOTEXT
  data F_STYLE_ENABLED type LVC_STYLE .
  data F_STYLE_DISABLED type LVC_STYLE .

  methods HANDLE_UC_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADD_FPLAI
    importing
      !IS_FPLAI type ZVCXI_PCSSC_S_FPLAI optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADD_FPAPI
    importing
      !IS_FPAPI type ZVCXI_PCSSC_S_FPAPI optional
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHANGE_STYLE_FPLAI
    importing
      !IF_CHANGE type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_FPAPI
    importing
      !IF_CHANGE type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods CALL_FL_CUST
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED_FIN_FPAPI
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_FIN_FPLAI
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED_FPAPI
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FPLAI
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DBLCLK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR_FPAPI
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR_FPLAI
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods INIT_CONTAINER_FLUTE
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_FPAPI
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_FPLAI
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_FLUTE
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_FPAPI
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_FPLAI
    raising
      /VCXI/CX_CKX .
  methods INIT_STYLE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS_FPAPI
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS_FPLAI
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
private section.

  data F_REFRESH_REQ type ABAP_BOOL .
  data R_CONTAINER_FLUTE type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_FPAPI type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_FPLAI type ref to CL_GUI_CUSTOM_CONTAINER .

  methods GET_FIELDCAT_FLUTE
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_FPAPI
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_FPLAI
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_FPAPI
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA_FPLAI
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_FLUTE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_FPAPI
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_FPLAI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOGGLE
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_UIC_FLUTE definition
class ZCL_VCXI_PCSSC_UIC_FLUTE implementation.
method CALL_FL_CUST.

  call function 'VIEWCLUSTER_MAINTENANCE_CALL'
    exporting
      VIEWCLUSTER_NAME             = 'ZVCXI_PCSS_FBPID'
      MAINTENANCE_ACTION           = 'S'
    exceptions
      CLIENT_REFERENCE             = 1
      FOREIGN_LOCK                 = 2
      VIEWCLUSTER_NOT_FOUND        = 3
      VIEWCLUSTER_IS_INCONSISTENT  = 4
      MISSING_GENERATED_FUNCTION   = 5
      NO_UPD_AUTH                  = 6
      NO_SHOW_AUTH                 = 7
      OBJECT_NOT_FOUND             = 8
      NO_TVDIR_ENTRY               = 9
      NO_CLIENTINDEP_AUTH          = 10
      INVALID_ACTION               = 11
      SAVING_CORRECTION_FAILED     = 12
      SYSTEM_FAILURE               = 13
      UNKNOWN_FIELD_IN_DBA_SELLIST = 14
      MISSING_CORR_NUMBER          = 15
      others                       = 16.

  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX
     exporting
        F_MSGTY = 'I'
        F_MSGID = SY-MSGID
        F_MSGNO = SY-MSGNO
        F_MSGV1 = SY-MSGV1
        F_MSGV2 = SY-MSGV2
        F_MSGV3 = SY-MSGV3
        F_MSGV4 = SY-MSGV4.
  endif.

endmethod.
method CHANGE_STYLE.

  data:          LS_STYL              type          LVC_S_STYL.
  data:          LT_STYL              type table of LVC_S_STYL.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
*** Get Style Table
  move CT_STYL to LT_STYL.
  clear CT_STYL.

*** Set Fieldname and Style
  clear LS_STYL.
  LS_STYL-FIELDNAME   = IF_FIELDNAME.
  LS_STYL-STYLE       = IF_STYLE.
  append LS_STYL      to LT_STYL.

*** Add Style Table
  sort LT_STYL.
  CT_STYL[] = LT_STYL[].

endmethod.
method CHANGE_STYLE_FPAPI.

  free CT_STYL.

***------------------------------------------------------------------
*** if it is changeable
  if IF_CHANGE eq ABAP_TRUE.
*** Paper Factor = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BPFAC'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  else.

*** Paper Factor = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BPFAC'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.

endmethod.
method CHANGE_STYLE_FPLAI.

  free CT_STYL.

***------------------------------------------------------------------
*** if it is changeable
  if IF_CHANGE eq ABAP_TRUE.
*** Flute Height =  Edit
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BGWHT'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Flute Height Unit = Edit
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BGWHT_UOM'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Starch Factor = Edit
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'STARF'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  else.
*** Flute Height =  Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BGWHT'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Flute Height Unit = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BGWHT_UOM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Starch Factor = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'STARF'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).
  endif.
endmethod.
method CHECK_FOR_CHANGES.

  data:  LF_ANSWER          type C.

*** If Changes are allowed
  if ME->R_FLUTE is bound and
     ME->R_FLUTE->F_CHANGED eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = 'Changed data will be lost. Do you want to save?'(Q01)
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    case LF_ANSWER.
      when '1'.
***     Save and than go on
        ME->HANDLE_UC_SAVE( ).
        move ABAP_FALSE to RF_CANCELED.
      when '2'.
***     Do nothing but go on
        move ABAP_FALSE to RF_CANCELED.
      when 'A'.
***     Cancel
        move ABAP_TRUE to RF_CANCELED.
    endcase.
  endif.

endmethod.
method CONSTRUCTOR.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Default Plant with User-Setting
  get parameter id 'WRK' field ME->F_WERKS.

endmethod.
method DO_FREE.

***------------------------------------------------------------------------------------------
*** Flute
*** Free Grid Flute
  if ME->R_GRID_FLUTE is bound.
    ME->R_GRID_FLUTE->FREE( exceptions
                            CNTL_ERROR        = 1
                            CNTL_SYSTEM_ERROR = 2
                            others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_FLUTE.
  endif.

*** Free Container Flute
  if ME->R_CONTAINER_FLUTE is bound.
    ME->R_CONTAINER_FLUTE->FREE( exceptions
                                 CNTL_ERROR        = 1
                                 CNTL_SYSTEM_ERROR = 2
                                 others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_FLUTE.
  endif.

***------------------------------------------------------------------------------------------
*** Paper Info
*** Free Grid Paper Info
  if ME->R_GRID_FPAPI is bound.
    ME->R_GRID_FPAPI->FREE( exceptions
                            CNTL_ERROR        = 1
                            CNTL_SYSTEM_ERROR = 2
                            others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_FPAPI.
  endif.

*** Free Container Paper Info
  if ME->R_CONTAINER_FPAPI is bound.
    ME->R_CONTAINER_FPAPI->FREE( exceptions
                                 CNTL_ERROR        = 1
                                 CNTL_SYSTEM_ERROR = 2
                                 others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_FPAPI.
  endif.

***------------------------------------------------------------------------------------------
*** Plant Info
*** Free Grid Plant Info
  if ME->R_GRID_FPLAI is bound.
    ME->R_GRID_FPLAI->FREE( exceptions
                            CNTL_ERROR        = 1
                            CNTL_SYSTEM_ERROR = 2
                            others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID_FPLAI.
  endif.

*** Free Container Paper Info
  if ME->R_CONTAINER_FPLAI is bound.
    ME->R_CONTAINER_FPLAI->FREE( exceptions
                                 CNTL_ERROR        = 1
                                 CNTL_SYSTEM_ERROR = 2
                                 others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_FPLAI.
  endif.
endmethod.
method DO_MODIFY_SCREEN.

  data: LF_LOCKED   type           /VCXI/CKX_LOCKED.

  check ME->R_FLUTE is bound.
*** Get lock Status
  move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Lock all Fields which are not Filter Fields
  loop at screen.
    check SCREEN-GROUP2 ne 'FIL'.
    if LF_LOCKED ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify screen.
  endloop.

endmethod.
method DO_PBO.

*** Set Titlebar
  if ME->R_FLUTE is bound.
    if ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      set titlebar '0110_TITLE' of program 'SAPLZVCXI_PCSSC_UI_FLUTE'.
    else.
      set titlebar '0100_TITLE' of program 'SAPLZVCXI_PCSSC_UI_FLUTE'.
    endif.
  else.
    set titlebar '0100_TITLE' of program 'SAPLZVCXI_PCSSC_UI_FLUTE'.
  endif.

*** Set Status
  set pf-status 'STATUS_0100' of program IF_REPID.

*** Define Subscreen.
  if ME->R_FLUTE is not bound.
    move IF_REPID to ME->S_DYNP-REPID.
    move '9999'   to ME->S_DYNP-DYNNR.
  else.
    move IF_REPID to ME->S_DYNP-REPID.
    move '0101'   to ME->S_DYNP-DYNNR.
  endif.

  ME->REFRESH_GRID_FLUTE( ).

  if ME->R_FLUTE is bound.
*** Init VIS structure for selection and open sub ALVs for Paper and Plant Info
    ME->INIT_VIS( ).
    ME->REFRESH_GRID_FPLAI( ).
    ME->REFRESH_GRID_FPAPI( ).
  endif.

endmethod.
method DO_UPDATE.

*** Plant Changed
  if IS_FLUTE_VIS-WERKS ne ME->F_WERKS.
    move IS_FLUTE_VIS-WERKS to ME->F_WERKS.
    move ABAP_TRUE          to ME->F_REFRESH_REQ.
  endif.

*** Valid From Changed
  if IS_FLUTE_VIS-VALFR ne ME->F_VALFR.
    move IS_FLUTE_VIS-VALFR to ME->F_VALFR.
    move ABAP_TRUE          to ME->F_REFRESH_REQ.
  endif.

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when 'EXIT' or 'CANCEL' or 'BACK'.
      if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE.
        ME->DO_FREE( ).

        if ME->R_FLUTE is bound.
***       Unlock current Flute
          ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
        endif.

        leave to screen 0.
        exit.
      endif.

*** Display/Change
    when 'TOGGLE'.
      if ME->R_FLUTE is bound.
        ME->HANDLE_UC_TOGGLE( ).
      else.
***     Please select a Flute first
        message id 'ZVCXI_PCSSC' type 'W' number '301'.
      endif.

*** Check
    when 'CHECK'.
      ME->HANDLE_UC_CHECK( ).

*** Basic Flute Settings
    when 'FLCUST'.
      ME->DO_FREE( ).
      ME->CALL_FL_CUST( ).

*** Save Button
    when C_UC_SAVE.
      ME->HANDLE_UC_SAVE( ).

*** Change Document
    when 'CD'.
      ME->HANDLE_UC_CD( ).
  endcase.

endmethod.
method GET_FIELDCAT_FLUTE.

  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_FLUTE_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.

      when 'FLUTE' or 'WERKS'.
        move ABAP_FALSE    to <S_FCAT>-EDIT.

    endcase.
  endloop.
endmethod.
method GET_FIELDCAT_FPAPI.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_FPAPI_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.


*** Get lock Status
  move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'BPFAC'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

*** Set lines to invisible
      when 'NLINE' or 'T_STYL'.
        move ABAP_TRUE      to <S_FCAT>-TECH.

    endcase.
  endloop.

endmethod.
method GET_FIELDCAT_FPLAI.

  data:          LF_LOCKED  type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>   type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_PCSSC_S_FPLAI_GRID'
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get lock Status
  move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.

      when 'BGWHT' or 'BGWHT_UOM' or 'STARF'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

*** Set lines to invisible
      when 'NLINE' or 'T_STYL'.
        move ABAP_TRUE      to <S_FCAT>-TECH.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA_FLUTE.

  data:          LS_TC210   type          ZVCXI_PCS_TC210,
                 LS_TC210T  type          ZVCXI_PCS_TC210T.
  data:          LT_TC210   type table of ZVCXI_PCS_TC210.
  data:          LT_TC210T  type table of ZVCXI_PCS_TC210T.
  field-symbols: <S_FLUTE>  type          ZVCXI_PCSSC_S_FLUTE_GRID.

  clear: ME->T_FLUTE_GRID.

***----------------------------------------------------------------------------
*** Load Header
  select *
         into table LT_TC210
         from ZVCXI_PCS_TC210.

***----------------------------------------------------------------------------
*** Load Description
  select *
         into table LT_TC210T
         from ZVCXI_PCS_TC210T.


  loop at LT_TC210 into LS_TC210.
    loop at LT_TC210T into LS_TC210T
      where FLUTE eq LS_TC210-FLUTE and
            LANGU eq SY-LANGU.
      append initial line to ME->T_FLUTE_GRID assigning <S_FLUTE>.
      move LS_TC210-FLUTE  to <S_FLUTE>-FLUTE.
      move LS_TC210T-DESCR to <S_FLUTE>-DESCR.
    endloop.

*** Logon Language is not available -> Try to get EN!
    if SY-SUBRC ne 0.
      read table LT_TC210T into LS_TC210T with key FLUTE = LS_TC210-FLUTE
                                                   LANGU = 'EN'.
      check SY-SUBRC = 0.
      append initial line to ME->T_FLUTE_GRID assigning <S_FLUTE>.
      move LS_TC210-FLUTE  to <S_FLUTE>-FLUTE.
      move LS_TC210T-DESCR to <S_FLUTE>-DESCR.
    endif.

  endloop.

endmethod.
method GET_GRID_DATA_FPAPI.

  data:          LF_WERKS        type          WERKS_D,
                 LF_DISPLAY      type          ABAP_BOOL,
                 LF_CHANGE       type          ABAP_BOOL.
  data:          LS_FPAPI        type          ZVCXI_PCSSC_S_FPAPI.
  data:          LS_FPAPI_GRID   type          ZVCXI_PCSSC_S_FPAPI_GRID.
  field-symbols: <S_FPAPI_GRID>  type          ZVCXI_PCSSC_S_FPAPI_GRID.

  clear: ME->T_FPAPI_GRID.

***----------------------------------------------------------------------------
*** Get Grid Data for Paper Info
  if ME->F_WERKS is not initial.
*** Get Lines that are valid for all Plants
    loop at ME->R_FLUTE->T_FPAPI into LS_FPAPI
                                  where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                                  and   WERKS eq ' '.
      append initial line to ME->T_FPAPI_GRID assigning <S_FPAPI_GRID>.
      clear: LS_FPAPI_GRID.

      move-corresponding LS_FPAPI to LS_FPAPI_GRID.
      move-corresponding LS_FPAPI_GRID to <S_FPAPI_GRID>.
    endloop.
*** Also get data for selected Plant
    loop at ME->R_FLUTE->T_FPAPI into LS_FPAPI
                                  where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                                  and   WERKS eq F_WERKS.
      append initial line to ME->T_FPAPI_GRID assigning <S_FPAPI_GRID>.
      clear: LS_FPAPI_GRID.

      move-corresponding LS_FPAPI      to LS_FPAPI_GRID.
      move-corresponding LS_FPAPI_GRID to <S_FPAPI_GRID>.
    endloop.


  else.
*** If we have no Plant, show all Values
    loop at ME->R_FLUTE->T_FPAPI into LS_FPAPI
                                  where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      append initial line to ME->T_FPAPI_GRID assigning <S_FPAPI_GRID>.
      clear: LS_FPAPI_GRID.

      move-corresponding LS_FPAPI      to LS_FPAPI_GRID.
      move-corresponding LS_FPAPI_GRID to <S_FPAPI_GRID>.
    endloop.
  endif.

*** Filter for Valid From Date and By Authority for Display
  loop at ME->T_FPAPI_GRID into LS_FPAPI_GRID.
***   Filter by Valid From
    if ME->F_VALFR is not initial.
      if ME->F_VALFR gt LS_FPAPI_GRID-VALFR.
        delete ME->T_FPAPI_GRID.
        continue.
      endif.
    endif.

*** Filter by authority
    if LS_FPAPI_GRID-WERKS ne LF_WERKS or
       SY-TABIX            eq 1.
      move LS_FPAPI_GRID-WERKS to LF_WERKS.
***   Get Display Authority
      try.
***       Start Positiv
          LF_DISPLAY = ABAP_TRUE.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DISPLAY
                                            IF_WERKS = LF_WERKS ).
        catch /VCXI/CX_CKX.
          clear: LF_DISPLAY.
      endtry.
    endif.
    if LF_DISPLAY eq ABAP_FALSE.
      delete ME->T_FPAPI_GRID.
      continue.
    endif.
  endloop.

*** --------------------------------------------------------------------------------------------
*** Add Work Center Description and Change Style
  loop at ME->T_FPAPI_GRID assigning <S_FPAPI_GRID>.

*** Get Workcenter Description
    if <S_FPAPI_GRID>-WERKS is not initial and
       <S_FPAPI_GRID>-ARBPL is not initial.
      select single KTEXT
             into <S_FPAPI_GRID>-WCDSC
             from CRHD_V1
            where ARBPL = <S_FPAPI_GRID>-ARBPL
             and  WERKS = <S_FPAPI_GRID>-WERKS
             and  SPRAS = SY-LANGU.
    endif.

*** Set Style by Authority
    if <S_FPAPI_GRID>-WERKS ne LF_WERKS or
       SY-TABIX             eq 1.
      move <S_FPAPI_GRID>-WERKS to LF_WERKS.
***   Get Display Authority
      try.
***       Start Positiv
          LF_CHANGE = ABAP_TRUE.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_EDIT
                                            IF_WERKS = LF_WERKS ).
        catch /VCXI/CX_CKX.
          clear: LF_CHANGE.
      endtry.
    endif.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_FPAPI( exporting IF_CHANGE = LF_CHANGE
                            changing  CT_STYL   = <S_FPAPI_GRID>-T_STYL ).
  endloop.

endmethod.
method GET_GRID_DATA_FPLAI.

  data:          LF_WERKS        type          WERKS_D,
                 LF_DISPLAY      type          ABAP_BOOL,
                 LF_CHANGE       type          ABAP_BOOL.
  data:          LS_FPLAI        type          ZVCXI_PCSSC_S_FPLAI.
  data:          LS_FPLAI_GRID   type          ZVCXI_PCSSC_S_FPLAI_GRID.
  field-symbols: <S_FPLAI_GRID>  type          ZVCXI_PCSSC_S_FPLAI_GRID.

  clear: ME->T_FPLAI_GRID.

***----------------------------------------------------------------------------
*** Get Grid Data for Plant Info
  if ME->F_WERKS is not initial.
*** Get Lines that are valid for all Plants
    loop at ME->R_FLUTE->T_FPLAI into LS_FPLAI
                             where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                             and   WERKS eq ' '.
      append initial line to ME->T_FPLAI_GRID assigning <S_FPLAI_GRID>.
      clear: LS_FPLAI_GRID.

      move-corresponding LS_FPLAI      to LS_FPLAI_GRID.
      move-corresponding LS_FPLAI_GRID to <S_FPLAI_GRID>.
    endloop.

*** Also get Grid Data for selected Plant
    loop at ME->R_FLUTE->T_FPLAI into LS_FPLAI
                                 where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )
                                 and   WERKS eq F_WERKS.
      append initial line to ME->T_FPLAI_GRID assigning <S_FPLAI_GRID>.
      clear: LS_FPLAI_GRID.

      move-corresponding LS_FPLAI to LS_FPLAI_GRID.
      move-corresponding LS_FPLAI_GRID to <S_FPLAI_GRID>.
    endloop.

  else.
*** If we have no Plant, show all Values
    clear: ME->T_FPLAI_GRID.
    loop at ME->R_FLUTE->T_FPLAI into LS_FPLAI
                                  where FLUTE eq ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
      append initial line to ME->T_FPLAI_GRID assigning <S_FPLAI_GRID>.
      clear: LS_FPLAI_GRID.

      move-corresponding LS_FPLAI      to LS_FPLAI_GRID.
      move-corresponding LS_FPLAI_GRID to <S_FPLAI_GRID>.
    endloop.
  endif.

*** Filter for Valid From Date and By Authority for Display
  loop at ME->T_FPLAI_GRID into LS_FPLAI_GRID.
    if ME->F_VALFR is not initial.
      if ME->F_VALFR gt LS_FPLAI_GRID-VALFR.
        delete ME->T_FPLAI_GRID.
        continue.
      endif.
    endif.

*** Filter by authority
    if LS_FPLAI_GRID-WERKS ne LF_WERKS or
       SY-TABIX            eq 1.
      move LS_FPLAI_GRID-WERKS to LF_WERKS.
***   Get Display Authority
      try.
***       Start Positiv
          LF_DISPLAY = ABAP_TRUE.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DISPLAY
                                            IF_WERKS = LF_WERKS ).
        catch /VCXI/CX_CKX.
          clear: LF_DISPLAY.
      endtry.
    endif.
    if LF_DISPLAY eq ABAP_FALSE.
      delete ME->T_FPLAI_GRID.
      continue.
    endif.

  endloop.

***--------------------------------------------------------------------------------------------
*** Add Work Center Description and Change Style
  loop at ME->T_FPLAI_GRID assigning <S_FPLAI_GRID>.

*** Get Workcenter Description
    if <S_FPLAI_GRID>-WERKS is not initial and
       <S_FPLAI_GRID>-ARBPL is not initial.
      select single KTEXT
             into <S_FPLAI_GRID>-WCDSC
             from CRHD_V1
            where ARBPL = <S_FPLAI_GRID>-ARBPL
             and  WERKS = <S_FPLAI_GRID>-WERKS
             and  SPRAS = SY-LANGU.
    endif.

*** Set Style by Authority
    if <S_FPLAI_GRID>-WERKS ne LF_WERKS or
       SY-TABIX             eq 1.
      move <S_FPLAI_GRID>-WERKS to LF_WERKS.
***   Get Display Authority
      try.
***       Start Positiv
          LF_CHANGE = ABAP_TRUE.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_EDIT
                                            IF_WERKS = LF_WERKS ).
        catch /VCXI/CX_CKX.
          clear: LF_CHANGE.
      endtry.
    endif.


*** --------------------------------------------------------------------------------------------
*** Set Style Details
    ME->CHANGE_STYLE_FPLAI( exporting IF_CHANGE = LF_CHANGE
                            changing  CT_STYL   = <S_FPLAI_GRID>-T_STYL ).
  endloop.

endmethod.
method GET_LAYOUT.

  move 'X'      to RS_LAYOUT-EDIT_MODE.
  move 'X'      to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL' to RS_LAYOUT-STYLEFNAME.

*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''       to RS_LAYOUT-EDIT.

endmethod.
method HANDLE_ADD_FPAPI.

  data:          LF_RETURN           type          ABAP_BOOL.
  data:          LS_FPAPI            type          ZVCXI_PCSSC_S_FPAPI.
  data:          LT_SVAL             type table of SVAL.
  data:          LR_CX_CKX           type ref to   /VCXI/CX_CKX.
  field-symbols: <S_FIELD>           type          SVAL.

  move-corresponding IS_FPAPI to LS_FPAPI.
  move ME->R_FLUTE->F_FLUTE to LS_FPAPI-FLUTE.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPAPI'.
  <S_FIELD>-FIELDNAME = 'VALFR'.
  <S_FIELD>-VALUE     = LS_FPAPI-VALFR.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPAPI'.
  <S_FIELD>-FIELDNAME = 'WERKS'.
  <S_FIELD>-VALUE     = LS_FPAPI-WERKS.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPAPI'.
  <S_FIELD>-FIELDNAME = 'ARBPL'.
  <S_FIELD>-VALUE     = LS_FPAPI-ARBPL.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPAPI'.
  <S_FIELD>-FIELDNAME = 'BPAID'.
  <S_FIELD>-VALUE     = LS_FPAPI-BPAID.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please enter the Values'(T30)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC <> 0.
      exit.
    endif.

*** If the user continues, store the changed values and try to add the line again
    if LF_RETURN ne 'A'.
      check LT_SVAL is not initial.
***   Valid From
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'VALFR'.
      if SY-SUBRC = 0.
        if <S_FIELD>-VALUE eq 0.
***       Please specify the Valid from Date.
          message TEXT-F04 type 'S' display like 'E'.
          clear: LF_RETURN.
          continue.
        endif.
        move <S_FIELD>-VALUE to LS_FPAPI-VALFR.
      endif.
***   Plant
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'WERKS'.
      if SY-SUBRC = 0.
        move <S_FIELD>-VALUE to LS_FPAPI-WERKS.
      endif.
***   Work Center
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'ARBPL'.
      if SY-SUBRC = 0.
        move <S_FIELD>-VALUE to LS_FPAPI-ARBPL.
      endif.
      if LS_FPAPI-ARBPL is not initial and
         LS_FPAPI-WERKS is initial.
***     Please specify the Plant for your Workcenter.
        message TEXT-F05 type 'S' display like 'E'.
        clear: LF_RETURN.
        continue.
      endif.
***   Paper ID
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'BPAID'.

      if <S_FIELD>-VALUE is not initial.
        read table ME->R_FLUTE->T_FSTRUCT with key  FLUTE = ME->R_FLUTE->F_FLUTE
                                                    BPAID = <S_FIELD>-VALUE
                                          transporting no fields.

        if SY-SUBRC eq 0.
          move <S_FIELD>-VALUE                     to LS_FPAPI-BPAID.
        else.
***       Please check the specified Liner. The entered Liner does not exist for this Flute.
          message TEXT-F01 type 'S' display like 'E'.
          clear: LF_RETURN.
          continue.
        endif.
      else.
***     Please enter a Liner.
        message TEXT-F03 type 'S' display like 'E'.
        clear: LF_RETURN.
        continue.
      endif.

***   Check Authority for Create
      try.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_CREATE
                                            IF_WERKS = LS_FPAPI-WERKS ).
        catch /VCXI/CX_CKX into LR_CX_CKX.
          LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I').
          continue.
      endtry.


      read table ME->R_FLUTE->T_FPAPI with key FLUTE = LS_FPAPI-FLUTE
                                               WERKS = LS_FPAPI-WERKS
                                               ARBPL = LS_FPAPI-ARBPL
                                               BPAID = LS_FPAPI-BPAID
                                               VALFR = LS_FPAPI-VALFR
                                            transporting no fields.

      if SY-SUBRC ne 0.
***     Add the Line
        ME->R_FLUTE->ADD_FPAPI( IS_FPAPI = LS_FPAPI ).
        exit.
      else.
***     Please check the specified Values. An entry with this key already exists.
        message TEXT-F02 type 'S' display like 'E'.
      endif.
    else.
      exit.
    endif.

  enddo.

endmethod.
method HANDLE_ADD_FPLAI.

  data:          LF_RETURN           type          ABAP_BOOL.
  data:          LS_FPLAI            type          ZVCXI_PCSSC_S_FPLAI.
  data:          LT_SVAL             type table of SVAL.
  data:          LR_CX_CKX           type ref to   /VCXI/CX_CKX.
  field-symbols: <S_FIELD>           type          SVAL.


  move-corresponding IS_FPLAI to LS_FPLAI.
  move ME->R_FLUTE->F_FLUTE to LS_FPLAI-FLUTE.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPLAI'.
  <S_FIELD>-FIELDNAME = 'VALFR'.
  <S_FIELD>-VALUE     = LS_FPLAI-VALFR.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPLAI'.
  <S_FIELD>-FIELDNAME = 'WERKS'.
  <S_FIELD>-VALUE     = LS_FPLAI-WERKS.

  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_PCSSC_S_FPLAI'.
  <S_FIELD>-FIELDNAME = 'ARBPL'.
  <S_FIELD>-VALUE     = LS_FPLAI-ARBPL.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Please enter the Values'(T30)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC <> 0.
      exit.
    endif.

*** If the user continues, store the changed values and try to add the line again
    if LF_RETURN ne 'A'.
      check LT_SVAL is not initial.
***   Valid From
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'VALFR'.
      if SY-SUBRC = 0.
        if <S_FIELD>-VALUE eq 0.
***       Please specify the Valid from Date.
          message TEXT-F04 type 'S' display like 'E'.
          clear: LF_RETURN.
          continue.
        endif.
        move <S_FIELD>-VALUE to LS_FPLAI-VALFR.
      endif.
***   Plant
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'WERKS'.
      if SY-SUBRC = 0.
        move <S_FIELD>-VALUE to LS_FPLAI-WERKS.
      endif.
***   Work Center
      read table LT_SVAL assigning <S_FIELD> with key FIELDNAME = 'ARBPL'.
      if SY-SUBRC = 0.
        move <S_FIELD>-VALUE to LS_FPLAI-ARBPL.
      endif.
      if LS_FPLAI-ARBPL is not initial and
         LS_FPLAI-WERKS is initial.
***     Please specify the Plant for your Workcenter.
        message TEXT-F05 type 'S' display like 'E'.
        clear: LF_RETURN.
        continue.
      endif.

***   Check Authority for Create
      try.
          ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_CREATE
                                            IF_WERKS = LS_FPLAI-WERKS ).
        catch /VCXI/CX_CKX into LR_CX_CKX.
          LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I').
          continue.
      endtry.

      read table ME->R_FLUTE->T_FPLAI with key FLUTE = LS_FPLAI-FLUTE
                                               WERKS = LS_FPLAI-WERKS
                                               ARBPL = LS_FPLAI-ARBPL
                                               VALFR = LS_FPLAI-VALFR
                                      transporting no fields.

      if SY-SUBRC ne 0.
***     Add the Line
        ME->R_FLUTE->ADD_FPLAI( IS_FPLAI = LS_FPLAI ).
        exit.
      else.
***     Please check the specified Values. An entry with this key already exists.
        message TEXT-F02 type 'S' display like 'E'.
      endif.

    else.
      exit.
    endif.

  enddo.

endmethod.
method HANDLE_DATA_CHANGED_FIN_FPAPI.

  data:  LS_GOOD_CELLS   type        LVC_S_MODI,
         LS_FPAPI_GRID   type        ZVCXI_PCSSC_S_FPAPI_GRID,
         LS_FPAPI        type        ZVCXI_PCSSC_S_FPAPI.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  check E_MODIFIED eq ABAP_TRUE.

  loop at ET_GOOD_CELLS into LS_GOOD_CELLS.
    try.
        at new ROW_ID.
          read table ME->T_FPAPI_GRID into LS_FPAPI_GRID index LS_GOOD_CELLS-ROW_ID.
          if SY-SUBRC eq 0.
            move-corresponding LS_FPAPI_GRID to LS_FPAPI.
            move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_FPAPI-FLUTE.

            if LS_FPAPI_GRID-NLINE eq ABAP_TRUE.
***           If it was an Initial Line -> Add
              ME->R_FLUTE->ADD_FPAPI( IS_FPAPI = LS_FPAPI ).

            else.
***           If it was already there -> Update
              ME->R_FLUTE->UPDATE_FPAPI( IS_FPAPI = LS_FPAPI ).

            endif.
          endif.
        endat.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.
  endloop.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DATA_CHANGED_FIN_FPLAI.

  data:  LS_GOOD_CELLS   type        LVC_S_MODI,
         LS_FPLAI_GRID   type        ZVCXI_PCSSC_S_FPLAI_GRID,
         LS_FPLAI        type        ZVCXI_PCSSC_S_FPLAI.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  check E_MODIFIED eq ABAP_TRUE.

  loop at ET_GOOD_CELLS into LS_GOOD_CELLS.
    try.
        at new ROW_ID.
          read table ME->T_FPLAI_GRID into LS_FPLAI_GRID index LS_GOOD_CELLS-ROW_ID.
          if SY-SUBRC eq 0.
            move-corresponding LS_FPLAI_GRID to LS_FPLAI.
            move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_FPLAI-FLUTE.

            if LS_FPLAI_GRID-NLINE eq ABAP_TRUE.
***           If it was an Initial Line -> Add
              ME->R_FLUTE->ADD_FPLAI( IS_FPLAI = LS_FPLAI ).

            else.
***           If it was already there -> Update
              ME->R_FLUTE->UPDATE_FPLAI( IS_FPLAI = LS_FPLAI ).

            endif.
          endif.
        endat.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.
  endloop.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DATA_CHANGED_FPAPI.

  data:          LS_FPAPI         type        ZVCXI_PCSSC_S_FPAPI.
  data:          LS_FPAPI_GRID    type        ZVCXI_PCSSC_S_FPAPI_GRID.
  data:          LR_CX_CKX        type ref to /VCXI/CX_CKX.
  field-symbols: <S_FPAPI_GRID>   type        ZVCXI_PCSSC_S_FPAPI_GRID.

  try.

      loop at ME->T_FPAPI_GRID assigning <S_FPAPI_GRID>.
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.

        move <S_FPAPI_GRID>-VALFR                         to LS_FPAPI_GRID-VALFR.
        move <S_FPAPI_GRID>-WERKS                         to LS_FPAPI_GRID-WERKS.
        move <S_FPAPI_GRID>-ARBPL                         to LS_FPAPI_GRID-ARBPL.

        move <S_FPAPI_GRID>-BPAID                         to LS_FPAPI_GRID-BPAID.
        move <S_FPAPI_GRID>-BPFAC                         to LS_FPAPI_GRID-BPFAC.

        move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_FPAPI-FLUTE.
        move-corresponding LS_FPAPI_GRID to LS_FPAPI.

***     If it was already there and the Key Fields are initial -> delete line and set New Line Flag
        if LS_FPAPI-WERKS is initial or
           LS_FPAPI-ARBPL is initial or
           LS_FPAPI-BPAID is initial or
           LS_FPAPI-VALFR is initial.


          ME->R_FLUTE->DELETE_FPAPI( IS_FPAPI = LS_FPAPI ).

          move ABAP_TRUE to <S_FPAPI_GRID>-NLINE.
        endif.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DATA_CHANGED_FPLAI.

  data:          LS_FPLAI         type        ZVCXI_PCSSC_S_FPLAI,
                 LS_FPLAI_GRID    type        ZVCXI_PCSSC_S_FPLAI_GRID.
  data:          LR_CX_CKX        type ref to /VCXI/CX_CKX.
  field-symbols: <S_FPLAI_GRID>   type        ZVCXI_PCSSC_S_FPLAI_GRID.


  try.

      loop at ME->T_FPLAI_GRID assigning <S_FPLAI_GRID>.
        read table ER_DATA_CHANGED->MT_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.

        move <S_FPLAI_GRID>-VALFR                         to LS_FPLAI_GRID-VALFR.
        move <S_FPLAI_GRID>-WERKS                         to LS_FPLAI_GRID-WERKS.
        move <S_FPLAI_GRID>-ARBPL                         to LS_FPLAI_GRID-ARBPL.

        move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LS_FPLAI-FLUTE.
        move-corresponding LS_FPLAI_GRID to LS_FPLAI.

***     If it was already there and the Key Fields are initial -> delete line and set New Line Flag
        if LS_FPLAI-WERKS is initial or
           LS_FPLAI-ARBPL is initial or
           LS_FPLAI-VALFR is initial.

          ME->R_FLUTE->DELETE_FPLAI( IS_FPLAI = LS_FPLAI ).

          move ABAP_TRUE to <S_FPLAI_GRID>-NLINE.
        endif.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DBLCLK.

  data:  LF_GUID       type        /VCXI/CKX_GUID.
  data:  LS_FLUTE_GRID type        ZVCXI_PCSSC_S_FLUTE_GRID.
  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
***   Check if Flute Customizing can be displayed
      ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DISPLAY ).

***   Get line that got double clicked
      read table ME->T_FLUTE_GRID into LS_FLUTE_GRID index E_ROW-INDEX.
      check SY-SUBRC eq 0.

      if ME->R_FLUTE is bound.
***     If selected Flute was changed, ask if they should be safed
        ME->CHECK_FOR_CHANGES( ).

***     Unlock current Flute
        ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      endif.

***   Get Instance
      move LS_FLUTE_GRID-FLUTE to LF_GUID.
      ME->R_FLUTE ?= ZCL_VCXI_PCSSC_FLUTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR_FPAPI.

  data:          LF_DISABLED_ADD type        ABAP_BOOL,
                 LF_DISABLED_DEL type        ABAP_BOOL.
  data:          LS_TOOLBAR      type        STB_BUTTON.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
***     Check Authority for Create or delete
        try.
            ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_CREATE ).
          catch /VCXI/CX_CKX.
            move ABAP_TRUE to LF_DISABLED_ADD.
        endtry.
        try.
            ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DELETE ).
          catch /VCXI/CX_CKX.
            move ABAP_TRUE to LF_DISABLED_DEL.
        endtry.
      else.
        move ABAP_TRUE to: LF_DISABLED_ADD, LF_DISABLED_DEL.
      endif.

      clear LS_TOOLBAR.
      move 'GRID_FPAPI_ADD'   to LS_TOOLBAR-FUNCTION.
      move '0'                to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW    to LS_TOOLBAR-ICON.
      move LF_DISABLED_ADD    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move 'GRID_FPAPI_DEL'   to LS_TOOLBAR-FUNCTION.
      move '0'                to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW    to LS_TOOLBAR-ICON.
      move LF_DISABLED_DEL    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR_FPLAI.

  data:          LF_DISABLED_ADD type        ABAP_BOOL,
                 LF_DISABLED_DEL type        ABAP_BOOL.
  data:          LS_TOOLBAR      type        STB_BUTTON.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
***     Check Authority for Create or delete
        try.
            ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_CREATE ).
          catch /VCXI/CX_CKX.
            move ABAP_TRUE to LF_DISABLED_ADD.
        endtry.
        try.
            ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DELETE ).
          catch /VCXI/CX_CKX.
            move ABAP_TRUE to LF_DISABLED_DEL.
        endtry.
      else.
        move ABAP_TRUE to: LF_DISABLED_ADD, LF_DISABLED_DEL.
      endif.

      clear LS_TOOLBAR.
      move 'GRID_FPLAI_ADD'   to LS_TOOLBAR-FUNCTION.
      move '0'                to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW    to LS_TOOLBAR-ICON.
      move LF_DISABLED_ADD    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move 'GRID_FPLAI_DEL'   to LS_TOOLBAR-FUNCTION.
      move '0'                to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW    to LS_TOOLBAR-ICON.
      move LF_DISABLED_DEL    to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_CD.

  data:  LF_CDOCL                type CDHDR-OBJECTCLAS,
         LF_CDOID                type CDHDR-OBJECTID,
         LF_APPLICATIONID        type REPID,
         LF_MSGV2                type SYMSGV.
  data:  LT_CDRED_STR            type CDRED_STR_TAB,
         LT_EDITPOS_WITH_HEADER  type standard table of CDRED.
  data:  LR_OBJECT_CD            type ref to /VCXI/IF_CKX_OBJECT_CD.

***----------------------------------------------------------------------------
*** Get Change Document Info
  try.
      move ME->R_FLUTE ?to LR_OBJECT_CD.
      check LR_OBJECT_CD is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  LR_OBJECT_CD->GET_INFO( importing EF_CDOCL = LF_CDOCL
                                    EF_CDOID = LF_CDOID ).


***----------------------------------------------------------------------------
*** Read Change Documents
  call function 'CHANGEDOCUMENT_READ'
    exporting
      OBJECTCLASS       = LF_CDOCL
      OBJECTID          = LF_CDOID
    importing
      ET_CDRED_STR      = LT_CDRED_STR[]
    tables
      EDITPOS           = LT_EDITPOS_WITH_HEADER
    exceptions
      NO_POSITION_FOUND = 1
      others            = 2.
  case SY-SUBRC.
    when 0.
***   Display the Records
      LF_APPLICATIONID = LF_CDOCL.
      call function 'CHANGEDOCUMENT_DISPLAY'
        exporting
          I_APPLICATIONID  = LF_APPLICATIONID
          FLG_AUTOCONDENSE = 'X'
          I_OBJECTCLAS     = LF_CDOCL
          IT_CDRED_STR     = LT_CDRED_STR[]
        tables
          I_CDRED          = LT_EDITPOS_WITH_HEADER.
    when 1.
***   No change document positions found
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '649'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.
    when 2.
***   Error in change document creation/analysis: & &
      move SY-SUBRC to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '327'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.

  endcase.

endmethod.
method HANDLE_UC_CHECK.

  data:  LR_MSG    type ref to /VCXI/CL_CKXM_MESSAGE,
         LR_CX_CKX type ref to /VCXI/CX_CKX.

  check ME->R_FLUTE is bound.

  try.
***   Check the Flute
      ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_CHECK ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      create object LR_MSG.
      LR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      LR_MSG->DISPLAY_MSG( ).
  endtry.

endmethod.
method HANDLE_UC_SAVE.

*** Save the Flute
  ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_SAVE ).

*** Saved successfully.
  message id 'ZVCXI_PCSSC' type 'S' number '001'.

endmethod.
method HANDLE_UC_TOGGLE.

  data: LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      else.
        ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
  endtry.

endmethod.
method HANDLE_UCOMM.

  data: LS_ROW          type        LVC_S_ROW,
        LS_FPLAI        type        ZVCXI_PCSSC_S_FPLAI,
        LS_FPAPI        type        ZVCXI_PCSSC_S_FPAPI,
        LS_FPLAI_GRID   type        ZVCXI_PCSSC_S_FPLAI_GRID,
        LS_FPAPI_GRID   type        ZVCXI_PCSSC_S_FPAPI_GRID.
  data: LT_ROWS         type        LVC_T_ROW.
  data: LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
***     Add Flute based Factors
        when C_FCODE_ADD_FPLAI.
***       Get selected line
          call method ME->R_GRID_FPLAI->GET_SELECTED_ROWS
            importing
              ET_INDEX_ROWS = LT_ROWS.

          read table LT_ROWS index 1 into LS_ROW .
          read table ME->T_FPLAI_GRID into LS_FPLAI_GRID index LS_ROW-INDEX.
          if SY-SUBRC eq 0.
            move-corresponding LS_FPLAI_GRID to LS_FPLAI.
          endif.
          ME->HANDLE_ADD_FPLAI( IS_FPLAI = LS_FPLAI ).

***     Add Paper Factors
        when C_FCODE_ADD_FPAPI.
***       Get selected line
          call method ME->R_GRID_FPAPI->GET_SELECTED_ROWS
            importing
              ET_INDEX_ROWS = LT_ROWS.

          read table LT_ROWS index 1 into LS_ROW .
          read table ME->T_FPAPI_GRID into LS_FPAPI_GRID index LS_ROW-INDEX.
          if SY-SUBRC eq 0.
            move-corresponding LS_FPAPI_GRID to LS_FPAPI.
          endif.
          ME->HANDLE_ADD_FPAPI( IS_FPAPI = LS_FPAPI ).

***     Delete Flute based Factors
        when C_FCODE_DEL_FPLAI.
***       Get selected line
          call method ME->R_GRID_FPLAI->GET_SELECTED_ROWS
            importing
              ET_INDEX_ROWS = LT_ROWS.

          read table LT_ROWS index 1 into LS_ROW .
          read table ME->T_FPLAI_GRID into LS_FPLAI_GRID index LS_ROW-INDEX.
          check SY-SUBRC eq 0.

***       Check Authority for Delete
          try.
              ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DELETE
                                                IF_WERKS = LS_FPLAI_GRID-WERKS ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I').
              exit.
          endtry.

          move-corresponding LS_FPLAI_GRID to LS_FPLAI.
          move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to LS_FPLAI-FLUTE. "needs to be removed

          ME->R_FLUTE->DELETE_FPLAI( IS_FPLAI = LS_FPLAI ).

***     Delete Paper Factors
        when C_FCODE_DEL_FPAPI.
***       Get selected line
          call method ME->R_GRID_FPAPI->GET_SELECTED_ROWS
            importing
              ET_INDEX_ROWS = LT_ROWS.

          read table LT_ROWS index 1 into LS_ROW .
          read table ME->T_FPAPI_GRID into LS_FPAPI_GRID index LS_ROW-INDEX.
          check SY-SUBRC eq 0.

***       Check Authority for Delete
          try.
              ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_DELETE
                                                IF_WERKS = LS_FPAPI_GRID-WERKS ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I').
              exit.
          endtry.

          move-corresponding LS_FPAPI_GRID to LS_FPAPI.
          move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to LS_FPAPI-FLUTE. "needs to be removed

          ME->R_FLUTE->DELETE_FPAPI( IS_FPAPI = LS_FPAPI ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER_FLUTE.

  if ME->R_CONTAINER_FLUTE is not bound.
    create object ME->R_CONTAINER_FLUTE
      exporting
        CONTAINER_NAME              = '0100CC_FLUTE'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_FPAPI.

  if ME->R_CONTAINER_FPAPI is not bound.
    create object ME->R_CONTAINER_FPAPI
      exporting
        CONTAINER_NAME              = '0101CC_FPAPI'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_CONTAINER_FPLAI.

  if ME->R_CONTAINER_FPLAI is not bound.
    create object ME->R_CONTAINER_FPLAI
      exporting
        CONTAINER_NAME              = '0101CC_FPLAI'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID_FLUTE.

  if ME->R_GRID_FLUTE is not bound.
    create object ME->R_GRID_FLUTE
      exporting
        I_PARENT          = ME->R_CONTAINER_FLUTE
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Set Event Handler
  set handler ME->HANDLE_DBLCLK    for ME->R_GRID_FLUTE.

*** Set Flag for ALV Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method INIT_GRID_FPAPI.

  if ME->R_GRID_FPAPI is not bound.
    create object ME->R_GRID_FPAPI
      exporting
        I_PARENT          = ME->R_CONTAINER_FPAPI
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  call method R_GRID_FPAPI->REGISTER_EDIT_EVENT
    exporting
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER
    exceptions
      ERROR      = 1
      others     = 2.
  if SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.                                 " IF SY-SUBRC NE 0

*** Set Event Handler
  set handler ME->HANDLE_TOOLBAR_FPAPI            for ME->R_GRID_FPAPI.
  set handler ME->HANDLE_UCOMM                    for ME->R_GRID_FPAPI.
  set handler ME->HANDLE_DATA_CHANGED_FPAPI       for ME->R_GRID_FPAPI.
  set handler ME->HANDLE_DATA_CHANGED_FIN_FPAPI   for ME->R_GRID_FPAPI.

*** Register F4-Fields
  ME->REGISTER_F4_FIELDS_FPAPI( ).

endmethod.
method INIT_GRID_FPLAI.

  if ME->R_GRID_FPLAI is not bound.
    create object ME->R_GRID_FPLAI
      exporting
        I_PARENT          = ME->R_CONTAINER_FPLAI
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

*** Register events
  call method R_GRID_FPLAI->REGISTER_EDIT_EVENT
    exporting
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER
    exceptions
      ERROR      = 1
      others     = 2.
  if SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.                                 " IF SY-SUBRC NE 0

*** Set Event Handler
  set handler ME->HANDLE_TOOLBAR_FPLAI            for ME->R_GRID_FPLAI.
  set handler ME->HANDLE_UCOMM                    for ME->R_GRID_FPLAI.
  set handler ME->HANDLE_DATA_CHANGED_FPLAI       for ME->R_GRID_FPLAI.
  set handler ME->HANDLE_DATA_CHANGED_FIN_FPLAI   for ME->R_GRID_FPLAI.

*** Register F4-Fields
  ME->REGISTER_F4_FIELDS_FPLAI( ).

endmethod.
method INIT_STYLE.

***----------------------------------------------------------------------------
*** Set Right Style Definition based on is any change allowed
  if ME->R_FLUTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
  else.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
  endif.

*** Set general Style Disabled
  ME->F_STYLE_DISABLED = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.

endmethod.
method INIT_VIS.

  free: ME->S_FLUTE_VIS.

*** Get Flute with Description
  move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_GUID( )          to ME->S_FLUTE_VIS-FLUTE.
  move ME->R_FLUTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( )         to ME->S_FLUTE_VIS-FLDSC.

*** Get Plant with Description
  move ME->F_WERKS                                           to ME->S_FLUTE_VIS-WERKS.

  select single NAME1
         into ME->S_FLUTE_VIS-PLDSC
         from T001W
        where WERKS = ME->F_WERKS.

*** Get Valid From Data for Paper and Plant Info
  move ME->F_VALFR                                           to ME->S_FLUTE_VIS-VALFR.

endmethod.
method REFRESH_GRID_FLUTE.

  data:          LS_LAYOUT            type        LVC_S_LAYO.
  data:          LT_FCAT              type        LVC_T_FCAT.
  data:          LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

*** Initialize if needed
  ME->INIT_CONTAINER_FLUTE( ).
  ME->INIT_GRID_FLUTE( ).

*** Get Grid Data
  ME->GET_GRID_DATA_FLUTE( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_FLUTE( )            to LT_FCAT.
  move ME->GET_LAYOUT( )                    to LS_LAYOUT.
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL    to LT_TOOLBAR_EXCLUDING.

  move 'X' to LS_LAYOUT-CWIDTH_OPT.
  move 'X' to LS_LAYOUT-NO_TOOLBAR.


*** Relfreh ALV Grid
  ME->R_GRID_FLUTE->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_FLUTE_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_GRID_FPAPI.

  data:          LS_LAYOUT            type        LVC_S_LAYO.
  data:          LT_FCAT              type        LVC_T_FCAT.
  data:          LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

*** Initialize if needed
  ME->INIT_CONTAINER_FPAPI( ).
  ME->INIT_GRID_FPAPI( ).

  ME->INIT_STYLE( ).

*** Get Grid Data
  ME->GET_GRID_DATA_FPAPI( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_FPAPI( )    to LT_FCAT.
  move ME->GET_LAYOUT( )            to LS_LAYOUT.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

*** Refresh ALV Grid
  ME->R_GRID_FPAPI->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_FPAPI_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_GRID_FPLAI.

  data:          LS_LAYOUT            type        LVC_S_LAYO.
  data:          LT_FCAT              type        LVC_T_FCAT.
  data:          LT_TOOLBAR_EXCLUDING type        UI_FUNCTIONS.

*** Initialize if needed
  ME->INIT_CONTAINER_FPLAI( ).
  ME->INIT_GRID_FPLAI( ).

  ME->INIT_STYLE( ).

*** Get Grid Data
  ME->GET_GRID_DATA_FPLAI( ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT_FPLAI( )    to LT_FCAT.
  move ME->GET_LAYOUT( )            to LS_LAYOUT.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

*** Relfreh ALV Grid
  ME->R_GRID_FPLAI->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = T_FPLAI_GRID
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REGISTER_F4_FIELDS_FPAPI.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT,
         LS_SHLP      type                   SHLP_DESCR_T.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Catalog for Paper Info
  LT_FCAT = ME->GET_FIELDCAT_FPAPI( ).

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
      call function 'DD_SHLP_GET_HELPMETHOD'
        exporting
          TABNAME           = LS_FCAT-REF_TABLE
          FIELDNAME         = LS_FCAT-FIELDNAME
          LANGU             = SY-LANGU
        changing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          others            = 3.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
*      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID_FPAPI->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method REGISTER_F4_FIELDS_FPLAI.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT,
         LS_SHLP      type                   SHLP_DESCR_T.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.


***----------------------------------------------------------------------------
*** Get Field Catalog for Plant Info
  LT_FCAT = ME->GET_FIELDCAT_FPLAI( ).

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
      call function 'DD_SHLP_GET_HELPMETHOD'
        exporting
          TABNAME           = LS_FCAT-REF_TABLE
          FIELDNAME         = LS_FCAT-FIELDNAME
          LANGU             = SY-LANGU
        changing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          others            = 3.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
*      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID_FPLAI->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method START.

  data: LR_UIC_FLUTE type ref to  ZCL_VCXI_PCSSC_UIC_FLUTE.

  create object LR_UIC_FLUTE.

  call function 'ZVCXI_PCSSC_UI_FLUTE_START'
    exporting
      IR_UIC_FLUTE = LR_UIC_FLUTE
    importing
      ES_DYNP      = LR_UIC_FLUTE->S_DYNP.

endmethod.
