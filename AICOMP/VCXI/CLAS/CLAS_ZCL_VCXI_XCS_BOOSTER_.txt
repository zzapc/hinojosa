
class ZCL_VCXI_XCS_BOOSTER definition
  public
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_H .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_TOOBJ_BOOSTER type /VCXI/CKX_TOOBJ value 'BOOSTER' ##NO_TEXT.
  data F_CHANGED type ABAP_BOOL read-only .
  data F_GBSTR type ZVCXI_XCS_GBSTR read-only .
  data F_GPBST type ZVCXI_XCS_GPBST read-only .
  data F_IBSTR type ZVCXI_XCS_IBSTR read-only .
  data F_NIDAT type ZVCXI_XCI_NIDAT read-only .
  data F_DELETED type ABAP_BOOL read-only .

  methods CONSTRUCTOR
    importing
      !IF_GBSTR type ZVCXI_XCS_GBSTR
    raising
      /VCXI/CX_CKX .
  methods DELETE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_CMPRK
    returning
      value(RS_CMPRK) type /VCXI/VKC_S_CMPRK
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_IBSTR
    importing
      !IF_IBSTR type ZVCXI_XCS_IBSTR
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
    returning
      value(RR_BOOSTER) type ref to ZCL_VCXI_XCS_BOOSTER
    raising
      /VCXI/CX_CKX .
  class-methods LOAD_ALL
    returning
      value(RT_BOOSTER) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_LANGU type LANGU default SY-LANGU
      !IF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_GPBST
    importing
      !IF_GPBST type ZVCXI_XCS_GPBST
    raising
      /VCXI/CX_CKX .
  methods SET_IBSTR
    importing
      !IF_IBSTR type ZVCXI_XCS_IBSTR
    raising
      /VCXI/CX_CKX .
  methods SET_NIDAT
    importing
      !IF_NIDAT type ZVCXI_XCI_NIDAT
    raising
      /VCXI/CX_CKX .
protected section.

  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
  data T_DESCR type /VCXI/CKX_TT_DESCR .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods HANDLE_DELETE .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
private section.

  data F_DELAYED_LOAD_CHILDREN type ABAP_BOOL .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data S_LOG type /VCXI/CKX_S_LOG .
endclass. "ZCL_VCXI_XCS_BOOSTER definition
class ZCL_VCXI_XCS_BOOSTER implementation.
  method /VCXI/IF_CKX_OBJECT_H~GET_CHILDREN.

    data: LR_BOOSTER   type ref to   ZCL_VCXI_XCS_BOOSTER.  "#EC NEEDED

***--------------------------------------------------------------------------------------
*** Load Children if load was delayed
    if ME->F_DELAYED_LOAD_CHILDREN eq ABAP_TRUE.
      move ABAP_FALSE to ME->F_DELAYED_LOAD_CHILDREN.

      select GBSTR into table @data(LT_GBSTR)
             from ZVCXI_XCS_TD030
            where GPBST eq @ME->F_GBSTR.

      loop at LT_GBSTR into data(LF_GBSTR).
        LR_BOOSTER ?= ZCL_VCXI_XCS_BOOSTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( LF_GBSTR ) ).
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Return Children for current Element
    loop at T_INSTANCE into data(LS_INSTANCE).
      check cast ZCL_VCXI_XCS_BOOSTER( LS_INSTANCE-R_OBJECT )->F_GPBST eq ME->F_GBSTR.
      check cast ZCL_VCXI_XCS_BOOSTER( LS_INSTANCE-R_OBJECT )->F_DELETED eq ABAP_FALSE.
      append LS_INSTANCE-R_OBJECT to RT_CHILDREN.
    endloop.

*** Sort Elements by ID
    /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                        changing  CT_OBJECT     = RT_CHILDREN ).

  endmethod.
  method /VCXI/IF_CKX_OBJECT_H~GET_PARENT.

    check ME->F_GPBST is not initial.

*** Return Instance for Parent Booster GUID
    RR_PARENT = ZCL_VCXI_XCS_BOOSTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( ME->F_GPBST ) ).

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
    if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
***   Object is not locked - No changes possible!
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/CKX'
          F_MSGNO = '201'.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.

    if ME->F_NIDAT is not initial.
      try.
***       Get Instance
          LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).
        catch /VCXI/CX_CKX. "#EC NO_HANDLER
***       Ignore
      endtry.

      try.
          if LR_IDAT_SVC is bound.
***         Try to Lock Integration Data
            if LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
              LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
            endif.
          endif.

        catch /VCXI/CX_CKX.
***       Error during locking
          return.
      endtry.

    endif.

*** Set Lock
    move ABAP_TRUE to ME->F_LOCKED.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

    check ME->F_CHANGED is initial.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.

    if ME->F_NIDAT is not initial.
      try.
***       Get Instance
          LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).
          check LR_IDAT_SVC is bound.

***       Try to Unlock Integration Data
          LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).

        catch /VCXI/CX_CKX.
***       Error during locking
          return.
      endtry.

    endif.

*** Unlock
    move ABAP_FALSE to ME->F_LOCKED.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

    move ME->F_LOCKED to RF_LOCKED.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR.

    data:  LT_DESCR type /VCXI/CKX_TT_DESCR.

    try.
        LT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ).
        RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear RF_DESCR.
    endtry.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

    move ME->T_DESCR to RT_DESCR.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_GUID.

    move ME->F_GBSTR to RF_GUID.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.

    move ME->F_IBSTR to RF_ID.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

    data: LF_GBSTR type ZVCXI_XCS_GBSTR.
    data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.
    data: LR_BOOSTER type ref to ZCL_VCXI_XCS_BOOSTER.

***------------------------------------------------------------------------------------------------
*** Get Instance with GUID
    read table T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_OBJECT to RR_OBJECT.
    else.
      move IF_GUID to LF_GBSTR.
      create object LR_BOOSTER
        exporting
          IF_GBSTR = LF_GBSTR.
      move LR_BOOSTER to RR_OBJECT.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_LOG.

    move ME->S_LOG to RS_LOG.

  endmethod.
  method CONSTRUCTOR.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.
    field-symbols: <S_INSTANCE>      type        /VCXI/CKX_S_OBJECT_INSTANCE.


    move C_TOOBJ_BOOSTER to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

    move IF_GBSTR  to ME->F_GBSTR.

*** Delay Load of Children
    move ABAP_TRUE to ME->F_DELAYED_LOAD_CHILDREN.


    if ME->F_GBSTR is not initial.

***   Load from DB
      ME->LOAD_FROM_DB( ).

    else.

      try.
***     Create new GUID
          ME->F_GBSTR = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
        catch CX_UUID_ERROR.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endtry.

***   Write Create Log Entry
      move SY-UNAME     to ME->S_LOG-CREBY.
      get time stamp field ME->S_LOG-CREAT.

***   Set lock for new object
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

    endif.


***--------------------------------------------------------------------------------------
*** Add instance to instance buffer
    append initial line to T_INSTANCE assigning <S_INSTANCE>.
    move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_INSTANCE>-GUID.
    move ME                                  to <S_INSTANCE>-R_OBJECT.

*** Set Event Handler
    set handler ME->HANDLE_CHANGED        for ME.

    if ME->F_NIDAT is not initial.
      try.
***       Get Instance
          LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).

          set handler ME->HANDLE_CHANGED  for LR_IDAT_SVC.

        catch /VCXI/CX_CKX.                             "#EC NO_HANDLER
***       Ignore
      endtry.
    endif.


*** Raise Events
    raise event /VCXI/IF_CKX_OBJECT~CREATED.

  endmethod.
  method DELETE.

    ME->HANDLE_DELETE( ).

  endmethod.
  method DO_FREE.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.


    delete T_INSTANCE where R_OBJECT eq ME.

    if ME->F_NIDAT is not initial.
      try.
***       Get Instance
          LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).

***       Free Instance
          LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_FREE ).

***       Unregister Event
          set handler ME->HANDLE_CHANGED      for LR_IDAT_SVC activation SPACE.

        catch /VCXI/CX_CKX.                             "#EC NO_HANDLER
***       Ignore
      endtry.
    endif.

  endmethod.
  method GET_CMPRK.

    data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.

    if ME->F_NIDAT is not initial.
      try.
***       Get Instance
          LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).
        catch /VCXI/CX_CKX. "#EC NO_HANDLER
      endtry.
      check LR_IDAT_SVC is bound.

      move LR_IDAT_SVC->R_CUPRFL->R_CVC_CUPRFL->S_CMPRK to RS_CMPRK.

    endif.

  endmethod.
  method GET_INSTANCE_BY_IBSTR.

*** Load first matching Booster GUIDs
    select single GBSTR
           into @data(LF_GBSTR)
           from ZVCXI_XCS_TD030
           inner join ZVCXI_XCI_TD100
            on ZVCXI_XCI_TD100~NIDAT eq ZVCXI_XCS_TD030~NIDAT
          where ZVCXI_XCS_TD030~IBSTR eq @IF_IBSTR
           and  ZVCXI_XCI_TD100~CMATN eq @IS_CMPRK-CMATN
           and  ZVCXI_XCI_TD100~PRFID eq @IS_CMPRK-PRFID.
    check SY-SUBRC eq 0.

*** Get Instance
    RR_BOOSTER ?= ZCL_VCXI_XCS_BOOSTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( LF_GBSTR ) ).

  endmethod.
  method HANDLE_CHANGED.

*** Set Changed Flag
    move ABAP_TRUE to ME->F_CHANGED.

  endmethod.
  method HANDLE_DELETE.

***--------------------------------------------------------------------------------------
*** Mark as deleted
    move ABAP_TRUE to ME->F_DELETED.
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method HANDLE_SAVE.

    data: LR_IDAT_SVC   type ref to ZCL_VCXI_XCI_IDAT_SVC.

    try.

        check ME->F_CHANGED eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
***     Handle Integration Data Instance
        if ME->F_NIDAT is not initial.
          try.
***           Get Instance
              LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( ME->F_NIDAT ) ).
            catch /VCXI/CX_CKX.                         "#EC NO_HANDLER
***           invalid instance -> ignore
          endtry.
        endif.

***--------------------------------------------------------------------------------------
***     Set Changed Info to Log
        move SY-UNAME     to ME->S_LOG-CHABY.
        get time stamp field ME->S_LOG-CHAAT.

***--------------------------------------------------------------------------------------
        if ME->F_DELETED eq ABAP_FALSE.

***       Handle Integration Data Instance
          if LR_IDAT_SVC is bound.

***         Save Integration Data
            LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
***         Update (new) Integration Data Number
            move LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_ID( ) to ME->F_NIDAT.

          endif.

***       Save Booster
          call function 'ZVCXI_XCS_DB_SAVE_BOOSTER'
            in update task
            exporting
              IF_GBSTR = ME->F_GBSTR
              IF_GPBST = ME->F_GPBST
              IF_IBSTR = ME->F_IBSTR
              IF_NIDAT = ME->F_NIDAT
              IS_LOG   = ME->S_LOG
              IT_DESCR = ME->T_DESCR.

        else.

***       Delete Booster
          call function 'ZVCXI_XCS_DB_DEL_BOOSTER'
            in update task
            exporting
              IF_GBSTR = ME->F_GBSTR.

***       Handle Integration Data Instance
          if LR_IDAT_SVC is bound.

***         Unregister Event Handler
            set handler ME->HANDLE_CHANGED      for LR_IDAT_SVC activation SPACE.

***         Perform Delete, Save Deletion and Free the Object
            LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_DELETE ).
            LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
            LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_FREE ).

          endif.

        endif.

***------------------------------------------------------------------------------------------------
***     All changes are handled
        move ABAP_FALSE to ME->F_CHANGED.
        commit work and wait.

***------------------------------------------------------------------------------------------------
***     Relock
        check ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        rollback work.
        raise exception LR_CX_CKX.
    endtry.

  endmethod.
  method LOAD_ALL.

*** Load all Booster GUIDs
    select GBSTR into table @data(LT_GBSTR)
      from ZVCXI_XCS_TD030.

    loop at LT_GBSTR into data(LF_GBSTR).
      try.
***       Get Instance and append to return table
          append ZCL_VCXI_XCS_BOOSTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( LF_GBSTR ) ) to RT_BOOSTER.
        catch /VCXI/CX_CKX. "#EC NO_HANDLER
      endtry.
    endloop.

  endmethod.
  method LOAD_FROM_DB.

    check ME->F_GBSTR is not initial.

*** Load from DB
    select single * into @data(LS_TD030)
      from ZVCXI_XCS_TD030
      where GBSTR eq @ME->F_GBSTR.

    if SY-SUBRC ne 0.
      raise exception type /VCXI/CX_CKX.
    endif.

    select * into table @data(LT_TD030T)
      from ZVCXI_XCS_TD030T
      where GBSTR eq @ME->F_GBSTR.

*** Set Data
    move LS_TD030-GPBST to ME->F_GPBST.
    move LS_TD030-IBSTR to ME->F_IBSTR.
    move LS_TD030-NIDAT to ME->F_NIDAT.
    move LS_TD030-S_LOG to ME->S_LOG.

*** Set Description
    loop at LT_TD030T into data(LS_TD030T).
      append value #( LANGU = LS_TD030T-LANGU DESCR = LS_TD030T-DESCR ) to ME->T_DESCR.
    endloop.

  endmethod.
  method SAVE.

    check ME->F_CHANGED eq ABAP_TRUE.

    ME->HANDLE_SAVE( ).

  endmethod.
  method SET_DESCR.

    field-symbols: <S_DESCR> type /VCXI/CKX_S_DESCR.

    if LINE_EXISTS( ME->T_DESCR[ LANGU = IF_LANGU ] ).
      assign ME->T_DESCR[ LANGU = IF_LANGU ] to <S_DESCR>.
    else.
      append initial line to ME->T_DESCR assigning <S_DESCR>.
      move IF_LANGU to <S_DESCR>-LANGU.
    endif.

    check <S_DESCR> is assigned.
    move IF_DESCR to <S_DESCR>-DESCR.

    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method SET_GPBST.

    check IF_GPBST ne ME->F_GPBST.

    move IF_GPBST to ME->F_GPBST.

    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method SET_IBSTR.

    check IF_IBSTR ne ME->F_IBSTR.

    move IF_IBSTR to ME->F_IBSTR.

    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
  method SET_NIDAT.

    check IF_NIDAT ne ME->F_NIDAT.

    move IF_NIDAT to ME->F_NIDAT.

    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
