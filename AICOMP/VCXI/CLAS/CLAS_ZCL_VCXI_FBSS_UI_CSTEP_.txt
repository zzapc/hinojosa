
class ZCL_VCXI_FBSS_UI_CSTEP definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_CSTEP_VIS type ZVCXI_FBSS_S_CSTEP_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PR_CSTEP type ref to ZCL_VCXI_FBSS_PR_CSTEP .
  constants C_UC_BGPROP_IN type SYUCOMM value 'BGPROP_IN' ##NO_TEXT.
  constants C_UC_BGPROP_OUT type SYUCOMM value 'BGPROP_OUT' ##NO_TEXT.
  data R_TEXTEDIT type ref to ZCL_VCXI_F0S_TEXTEDIT .

  methods HANDLE_UC_BGPROP
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_CSTEP definition
class ZCL_VCXI_FBSS_UI_CSTEP implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Create Text Editor for Long Text
    create object ME->R_TEXTEDIT
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_TEXTEDIT_LTEXT'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_TEXTEDIT is bound.
***   Update the Long Text before leaving the screen
      if ME->R_TEXTEDIT is bound.
        ME->R_TEXTEDIT->UPDATE_TEXT( ).
      endif.
      ME->R_TEXTEDIT->DO_FREE( ).
      clear ME->R_TEXTEDIT.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Handling Dimension changeable if Override Flag is set
          if SCREEN-GROUP1 eq 'OHD'.
            if ME->S_CSTEP_VIS-FOVRR_HNDDIM eq ABAP_FALSE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

***--------------------------------------------------------------------------------------
*** Get TextEdit Conversion Text
    if ME->R_TEXTEDIT is bound.
      move ABAP_TRUE to ME->R_TEXTEDIT->F_REFRESH_REQ.
      ME->R_TEXTEDIT->REFRESH_TEXTEDIT( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_VIS  type ZVCXI_FBSS_S_CSTEP_VIS.


    check ME->R_PR_CSTEP is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_CSTEP_VIS.

***--------------------------------------------------------------------------------------
*** Update Handling Dimension if it is "Overriden"
    if ME->S_CSTEP_VIS-FOVRR_HNDDIM eq ABAP_TRUE and
       ME->S_CSTEP_VIS-S_HNDDIM ne LS_CSTEP_VIS-S_HNDDIM.
      ME->R_PR_CSTEP->SET_HNDDIM( IS_HNDDIM = LS_CSTEP_VIS-S_HNDDIM
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag Override Handling Dimension
    if ME->S_CSTEP_VIS-FOVRR_HNDDIM ne LS_CSTEP_VIS-FOVRR_HNDDIM.
      ME->R_PR_CSTEP->SET_HNDDIM( IF_FOVRR = LS_CSTEP_VIS-FOVRR_HNDDIM ).
    endif.

***--------------------------------------------------------------------------------------
*** Update TextEdit Long Text
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->UPDATE_TEXT( ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

***--------------------------------------------------------------------------------------
*** Update TextEdit
    if ME->R_TEXTEDIT is bound.
      ME->R_TEXTEDIT->UPDATE_TEXT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_BGPROP_IN or C_UC_BGPROP_OUT.
        ME->HANDLE_UC_BGPROP( IF_UCOMM = IF_UCOMM ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP.

  endmethod.
  method HANDLE_UC_BGPROP.

    data: LS_BGDATA     type        ZVCXI_FBSS_S_BGDATA.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

    case IF_UCOMM.
      when C_UC_BGPROP_IN.

***     Get Bag Backward Property XML (Inbound)
        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).

***     Get Bag Forward Property XML (Inbound)
        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).

***--------------------------------------------------------------------------------------
*** Get Bag Basic data information

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = LS_BGDATA-IBAGT ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI( importing ES_BGHEI = LS_BGDATA-S_BGHEI ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID( importing ES_BGWID = LS_BGDATA-S_BGWID ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = LS_BGDATA-S_BGWGT ).

      when C_UC_BGPROP_OUT.

***     Get Bag Backward Property XML (Outbound)
        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).

***     Get Bag Forward Property XML (Outbound)
        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).

***--------------------------------------------------------------------------------------
*** Get Bag Basic data information

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LS_BGDATA-IBAGT ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_BGDATA-S_BGHEI ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_BGDATA-S_BGWID ).

        ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_BGDATA-S_BGWGT ).

    endcase.

    check LR_BL_BGBPROP is bound.
    check LR_BL_BGFPROP is bound.



*** Start Popup
    ZCL_VCXI_FBSS_POPUP_BGPROP=>START( IR_GATE       = ME->R_GATE
                                       IR_UIGATE     = ME->R_UIGATE
                                       IR_BL_BGBPROP = LR_BL_BGBPROP
                                       IR_BL_BGFPROP = LR_BL_BGFPROP
                                       IS_BGDATA     = LS_BGDATA  ).

  endmethod.
  method INIT_VIS.

    check ME->R_PR_CSTEP is bound.
    free: ME->S_CSTEP_VIS.

***--------------------------------------------------------------------------------------
*** Bag Type (Inbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT( importing EF_IBAGT = ME->S_CSTEP_VIS-IBAGTIN
                                                                 EF_DESCR = ME->S_CSTEP_VIS-IBAGT_DESCRIN ).

*** Bag Type Width (Inbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID( importing ES_BGWID = ME->S_CSTEP_VIS-S_BGWIDIN ).

*** Bag Type Height (Inbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI( importing ES_BGHEI = ME->S_CSTEP_VIS-S_BGHEIIN ).

*** Bag Type Weight (Inbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = ME->S_CSTEP_VIS-S_BGWGTIN ).

***--------------------------------------------------------------------------------------
*** Handling Dimension
    ME->S_CSTEP_VIS-S_HNDDIM = ME->R_PR_CSTEP->GET_HNDDIM( importing EF_FOVRR = ME->S_CSTEP_VIS-FOVRR_HNDDIM ).

***--------------------------------------------------------------------------------------
*** Bag Type (Outbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = ME->S_CSTEP_VIS-IBAGTOUT
                                                                 EF_DESCR = ME->S_CSTEP_VIS-IBAGT_DESCROUT ).

*** Bag Type Width (Outbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = ME->S_CSTEP_VIS-S_BGWIDOUT ).

*** Bag Type Height (Outbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = ME->S_CSTEP_VIS-S_BGHEIOUT ).

*** Bag Type Weight (Outbound)
    ME->R_PR_CSTEP->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = ME->S_CSTEP_VIS-S_BGWGTOUT ).

  endmethod.
