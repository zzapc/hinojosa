
class ZCL_VCXI_FFSP_PR_ADDON_EXTR definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_ADDON
  create public .

public section.

  interfaces ZIF_VCXI_FFSP_ADJ_FIDIM .
  interfaces ZIF_VCXI_FFSP_CONV_WTL .

  constants C_PARID_AVGCO_W type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCO_W' ##NO_TEXT.
  constants C_PARID_AVGCP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_AVGCP_A' ##NO_TEXT.
  constants C_PARID_EXWID type /VCXI/VKS_PARID value 'ZVCXI_FF_EXWID' ##NO_TEXT.
  constants C_PARID_FBLOF type /VCXI/VKS_PARID value 'ZVCXI_F0_FBLOF' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_NOOUT type /VCXI/VKS_PARID value 'ZVCXI_XC_NOOUT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_IAATY_EXWID type /VCXI/VSMC_IAATY value 'FF_AA_EXWID' ##NO_TEXT.
  constants C_IAATY_FITIN type /VCXI/VSMC_IAATY value 'FF_AA_FITIN' ##NO_TEXT.

  methods GET_FIDIM
    returning
      value(RS_FIDIM) type ZVCXI_FFSP_S_FIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    exporting
      !ES_AVGCO type ZVCXI_XCS_S_AVGCO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    exporting
      !ES_AVGCP type ZVCXI_XCS_S_AVGCP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_EXWID
    exporting
      !ES_EXWID type ZVCXI_FFS_S_EXWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FBLOF
    exporting
      !EF_FBLOF type ZVCXI_F0S_FBLOF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITEX
    exporting
      !ES_FITEX type ZVCXI_FFS_S_FITEX
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITIN
    exporting
      !ES_FITIN type ZVCXI_FFS_S_FITIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIWID
    exporting
      value(ES_FIWID) type ZVCXI_F0S_S_FIWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOOUT
    exporting
      !EF_NOOUT type ZVCXI_XCS_NOOUT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_NOUPS type ZVCXI_F0S_NOUPS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RELEN
    exporting
      !ES_RELEN type ZVCXI_FFS_S_RELEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      value(ES_SURWT) type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EXWID
    importing
      !IS_EXWID type ZVCXI_FFS_S_EXWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FBLOF
    importing
      !IF_FBLOF type ZVCXI_F0S_FBLOF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOOUT
    importing
      !IF_NOOUT type ZVCXI_XCS_NOOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_IEVNT_O_MQTY_CONV_CHANGED type /VCXI/VKSC_IEVNT value 'MQTY_CONV_CHANGED' ##NO_TEXT.

  methods GET_RTE_SAREC
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSP_PR_ADDON_EXTR definition
class ZCL_VCXI_FFSP_PR_ADDON_EXTR implementation.
  method GET_AVGCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AVGCO_W ).
    move LS_PARAM-ATFLV to ES_AVGCO-AVGCO.
    move LS_PARAM-UNIT  to ES_AVGCO-AVGCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_AVGCP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AVGCP_A ).
    move LS_PARAM-ATFLV to ES_AVGCP-AVGCP.
    move LS_PARAM-UNIT  to ES_AVGCP-AVGCP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_EXWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).
    move LS_PARAM-ATFLV to ES_EXWID-EXWID.
    move LS_PARAM-UNIT  to ES_EXWID-EXWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FBLOF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBLOF ).
    move LS_PARAM-ATWRT to EF_FBLOF.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIDIM.

    data: LF_FBLOF type ZVCXI_F0S_FBLOF.

***--------------------------------------------------------------------------------------
*** Film Width
    ME->GET_FIWID( importing ES_FIWID = RS_FIDIM-S_FIWID ).

*** Repeat Length
    ME->GET_RELEN( importing ES_RELEN = RS_FIDIM-S_RELEN ).

*** Internal Film Thickness
    ME->GET_FITIN( importing ES_FITIN = RS_FIDIM-S_FITIN ).

*** External Film Thickness
    ME->GET_FITEX( importing ES_FITEX = RS_FIDIM-S_FITEX ).

*** Surface Weight
    ME->GET_SURWT( importing ES_SURWT = RS_FIDIM-S_SURWT ).

*** Number of Ups
    ME->GET_NOUPS( importing EF_NOUPS = RS_FIDIM-NOUPS ).

*** Number of Outs
    ME->GET_NOOUT( importing EF_NOOUT = RS_FIDIM-NOOUT ).

***--------------------------------------------------------------------------------------
*** Special Handling of Blocked Films
    ME->GET_FBLOF( importing EF_FBLOF = LF_FBLOF ).
    if LF_FBLOF eq ABAP_TRUE.
      multiply RS_FIDIM-S_FITIN-FITIN by 2.
      multiply RS_FIDIM-S_FITEX-FITEX by 2.
      multiply RS_FIDIM-S_SURWT-SURWT by 2.
    endif.

  endmethod.
  method GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOOUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).
    move LS_PARAM-ATFLV to EF_NOOUT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RTE_SAREC.

    data: LF_GAATY type /VCXI/VSMC_GAATY.
    data: LS_FITIN type ZVCXI_FFS_S_FITIN,
          LS_EXWID type ZVCXI_FFS_S_EXWID.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.
    field-symbols: <S_RTE_SAREC> type /VCXI/VSMR_S_RTE_SAREC,
                   <S_ARECN>     type /VCXI/VSMR_S_RTE_RANGE_ARECN.

*** Get Super
    RT_RTE_SAREC = SUPER->GET_RTE_SAREC( ).

    check ME->R_RTE_CADDON          is bound and
          ME->R_RTE_CADDON->R_ATYPE is bound.

***--------------------------------------------------------------------------------------
*** Aspect - Internal Film Thickness
    try.
        ME->GET_FITIN( importing ES_FITIN = LS_FITIN ).

        LF_GAATY = ME->R_RTE_CADDON->R_ATYPE->GET_GAATY_BY_IAATY( IF_IAATY = C_IAATY_FITIN
                                                                  IF_MAATY = /VCXI/CL_VSMC_ATYPE=>C_MAATY_REC ).
        append initial line to RT_RTE_SAREC assigning <S_RTE_SAREC>.
        move LF_GAATY                                     to <S_RTE_SAREC>-GAATY.
        move 1                                            to <S_RTE_SAREC>-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to <S_RTE_SAREC>-ASORT.

        append initial line      to <S_RTE_SAREC>-I_ARECN assigning <S_ARECN>.
        move 'I'                 to <S_ARECN>-SIGN.
        move 'LE'                to <S_ARECN>-OPTION.
        move LS_FITIN-FITIN      to <S_ARECN>-LOW.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Extrusion Width
    try.
        ME->GET_EXWID( importing ES_EXWID = LS_EXWID ).

        LF_GAATY = ME->R_RTE_CADDON->R_ATYPE->GET_GAATY_BY_IAATY( IF_IAATY = C_IAATY_EXWID
                                                                  IF_MAATY = /VCXI/CL_VSMC_ATYPE=>C_MAATY_REC ).
        append initial line to RT_RTE_SAREC assigning <S_RTE_SAREC>.
        move LF_GAATY                                     to <S_RTE_SAREC>-GAATY.
        move 1                                            to <S_RTE_SAREC>-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to <S_RTE_SAREC>-ASORT.

        append initial line      to <S_RTE_SAREC>-I_ARECN assigning <S_ARECN>.
        move 'I'                 to <S_ARECN>-SIGN.
        move 'LE'                to <S_ARECN>-OPTION.
        move LS_EXWID-EXWID      to <S_ARECN>-LOW.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.


  endmethod.
  method GET_STATUS.

    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

    RF_ELMST = SUPER->GET_STATUS( ).

*** Check Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).
    if LS_AVGCO-AVGCO is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Average Consumption Per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).
    if LS_AVGCP-AVGCP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).
    if LS_AVGCO-AVGCO is not initial.
***   Average Consumption is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '051' ).
    else.
***   Average Consumption is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '052' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Average Consumption Per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).
    if LS_AVGCP-AVGCP is not initial.
***   Average Consumption Per is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '053' ).
    else.
***   Average Consumption Per is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '054' ).
    endif.

  endmethod.
  method GET_SURWT.

    data: LS_AVGCO type        ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type        ZVCXI_XCS_S_AVGCP.
    data: LR_PARAM type ref to /VCXI/CL_VKSC_PARAM.

***------------------------------------------------------------------------------------------------
*** Get Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).

*** Get Average Consumption per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).

***------------------------------------------------------------------------------------------------
*** Determine Unit of Surface Weight
    LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = 'ZVCXI_F0_SURWT' ).
    check LR_PARAM is bound.

*** Use Metric Unit of Measure
    break SUPPORT_IMPERIAL.
*    case F_SYSOM.
*      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LR_PARAM->F_UOMKY_M to ES_SURWT-SURWT_UOM.
*      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
*        move LR_PARAM->F_UOMKY_I to ES_SURWT-SURWT_UOM.
*    endcase.


***------------------------------------------------------------------------------------------------
*** Calculate Surface Weight
    if LS_AVGCP-AVGCP gt 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = LS_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = ES_SURWT-SURWT_UOM
                                                importing EF_CALCV       = ES_SURWT-SURWT
                                                          EF_CALCV_UOM   = ES_SURWT-SURWT_UOM ).
    endif.

  endmethod.
  method SET_AVGCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AVGCO_W ).

    move IS_AVGCO-AVGCO                      to LS_PARAM-ATFLV.
    move IS_AVGCO-AVGCO_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
    endif.

  endmethod.
  method SET_AVGCP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AVGCP_A ).

    move IS_AVGCP-AVGCP                      to LS_PARAM-ATFLV.
    move IS_AVGCP-AVGCP_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
    endif.

  endmethod.
  method SET_EXWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).

    move IS_EXWID-EXWID     to LS_PARAM-ATFLV.
    move IS_EXWID-EXWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
    endif.

  endmethod.
  method SET_FBLOF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBLOF ).

    move IF_FBLOF to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX                      to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN                      to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID                      to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_NOOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).

    move IF_NOOUT to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN                      to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSP_ADJ_FIDIM~C_IEVNT_O_FIDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSP_ADJ_FIDIM~CALC_FIDIM_OUT.

    data: LS_FIDIM_IN   type        ZVCXI_FFSP_S_FIDIM,
          LS_FIDIM_OUT  type        ZVCXI_FFSP_S_FIDIM.


***--------------------------------------------------------------------------------------
*** Use Extrusion Dimensions as base
    move ME->GET_FIDIM( ) to LS_FIDIM_OUT.

***--------------------------------------------------------------------------------------
*** Collect inbound Dimensions
    loop at CT_FIDIM into LS_FIDIM_IN.
***   Adjust Film Width
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FIDIM_IN-FIWID
                                                      IF_CALCV_UOM_1 = LS_FIDIM_IN-FIWID_UOM
                                                      IF_CALCV_2     = LS_FIDIM_OUT-FIWID
                                                      IF_CALCV_UOM_2 = LS_FIDIM_OUT-FIWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_FIDIM_IN-FIWID     to LS_FIDIM_OUT-FIWID.
        move LS_FIDIM_IN-FIWID_UOM to LS_FIDIM_OUT-FIWID_UOM.
      endif.

***   Calculate Internal Thickness
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIDIM_IN-FITIN
                                                          IF_CALCV_UOM_1 = LS_FIDIM_IN-FITIN_UOM
                                                          IF_CALCV_2     = LS_FIDIM_OUT-FITIN
                                                          IF_CALCV_UOM_2 = LS_FIDIM_OUT-FITIN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = LS_FIDIM_OUT-FITIN
                                                          EF_CALCV_UOM   = LS_FIDIM_OUT-FITIN_UOM ).

***   Calculate External Thickness
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIDIM_IN-FITEX
                                                          IF_CALCV_UOM_1 = LS_FIDIM_IN-FITEX_UOM
                                                          IF_CALCV_2     = LS_FIDIM_OUT-FITEX
                                                          IF_CALCV_UOM_2 = LS_FIDIM_OUT-FITEX_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = LS_FIDIM_OUT-FITEX
                                                          EF_CALCV_UOM   = LS_FIDIM_OUT-FITEX_UOM ).
***   Calculate Surface Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIDIM_IN-SURWT
                                                          IF_CALCV_UOM_1 = LS_FIDIM_IN-SURWT_UOM
                                                          IF_CALCV_2     = LS_FIDIM_OUT-SURWT
                                                          IF_CALCV_UOM_2 = LS_FIDIM_OUT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = LS_FIDIM_OUT-SURWT
                                                          EF_CALCV_UOM   = LS_FIDIM_OUT-SURWT_UOM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Return only defined Dimension
    free CT_FIDIM.
    append LS_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSP_CONV_WTL~CONV_LENGTH_TO_WEIGHT.

    data: LF_NOOUT type ZVCXI_XCS_NOOUT.
    data: LS_EXWID type ZVCXI_FFS_S_EXWID,
          LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP,
          LS_CALCV type ZVCXI_XCS_S_CALCV.

*** Get Extrusion Width
    ME->GET_EXWID( importing ES_EXWID = LS_EXWID ).

*** Get Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).

*** Get Average Consumption per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).

*** Calculate Weight
    if LS_EXWID-EXWID is not initial and
       LS_AVGCP-AVGCP is not initial.

***   Calculate Area
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_QTY-QTY
                                                          IF_CALCV_UOM_1 = CS_QTY-QTY_UOM
                                                          IF_CALCV_2     = LS_EXWID-EXWID
                                                          IF_CALCV_UOM_2 = LS_EXWID-EXWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_AVGCP-AVGCP_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

***   Consider Consumption Per
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

      CS_QTY-QTY   = LS_AVGCO-AVGCO * LS_CALCV-CALCV.
    else.
      CS_QTY-QTY   = 0.
    endif.
    CS_QTY-QTY_UOM = LS_AVGCO-AVGCO_UOM.

*** Consider Number of Outs
    ME->GET_NOOUT( importing EF_NOOUT = LF_NOOUT ).
    if LF_NOOUT ne 0.
      CS_QTY-QTY = CS_QTY-QTY / LF_NOOUT.
    else.
      CS_QTY-QTY   = 0.
    endif.

  endmethod.
  method ZIF_VCXI_FFSP_CONV_WTL~CONV_WEIGHT_TO_LENGTH.

    data: LF_NOOUT type ZVCXI_XCS_NOOUT.
    data: LS_EXWID type ZVCXI_FFS_S_EXWID,
          LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP,
          LS_CALCV type ZVCXI_XCS_S_CALCV.

*** Get Extrusion Width
    ME->GET_EXWID( importing ES_EXWID = LS_EXWID ).

*** Get Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).

*** Get Average Consumption per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).

***--------------------------------------------------------------------------------------
*** Calculate Area
    if LS_AVGCO is not initial and
       LS_AVGCP is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_QTY-QTY
                                                          IF_CALCV_UOM_1 = CS_QTY-QTY_UOM
                                                          IF_CALCV_2     = LS_AVGCO-AVGCO
                                                          IF_CALCV_UOM_2 = LS_AVGCO-AVGCO_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
*** Consider Average Consumption Per
      LS_CALCV-CALCV   =  LS_CALCV-CALCV * LS_AVGCP-AVGCP.
    else.
      LS_CALCV-CALCV   = 0.
    endif.
    LS_CALCV-CALCV_UOM = LS_AVGCP-AVGCP_UOM.

*** Calculate Length
    if LS_EXWID-EXWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = LS_EXWID-EXWID
                                                          IF_CALCV_UOM_2 = LS_EXWID-EXWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = CS_QTY-QTY
                                                          EF_CALCV_UOM   = CS_QTY-QTY_UOM ).
    endif.

*** Consider Number of Outs
    ME->GET_NOOUT( importing EF_NOOUT = LF_NOOUT ).
    CS_QTY-QTY = CS_QTY-QTY * LF_NOOUT.

  endmethod.
