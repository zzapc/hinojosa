
class ZCL_VCXI_P0SR_BL_PSTEP_CUT definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P0SR_ADJ_PCDIM .
  interfaces ZIF_VCXI_P0SR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .

  constants C_IPSTP_P0_CUT type /VCXI/VSMC_IPSTP value 'P0_PS_CUT'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_P0_CUT
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data T_MFMO_P type ZVCXI_P0SR_TT_MFMO_P .
  constants C_IAATY_NOOUT type /VCXI/VSMC_IAATY value 'P0_AA_NOOUT'. "#EC NOTEXT
  data F_TDCUT type ZVCXI_P0SS_TDCUT .
  data S_PCDIM_IN type ZVCXI_P0SP_S_PCDIM .
  data T_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM .
  data S_TRIML type ZVCXI_P0SS_S_TRIML .
  data S_TRIMS type ZVCXI_P0SS_S_TRIMS .
  data F_NOOUT type ZVCXI_XCS_NOOUT .
  data S_MS_TOOL type ZVCXI_P0SR_S_MS_TOOL .

  methods ADD_SPVRE_MC_TOOL
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFMO_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_PCOUT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_CUT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_MFMO_P
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PCDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_SHEET
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_TOOL
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_TRIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_MFSO_P
    redefinition .
  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_CUT definition
class ZCL_VCXI_P0SR_BL_PSTEP_CUT implementation.
method ADD_ASPECTS_TO_RTE_PSTEP.

  data:          LS_RTE_SAREC  type        /VCXI/VSMR_S_RTE_SAREC.
  field-symbols: <S_ARECN>     type        /VCXI/VSMR_S_RTE_RANGE_ARECN.

***----------------------------------------------------------------------------
*** Get Super
  SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).


***----------------------------------------------------------------------------
*** Aspect - P0_AA_NOOUT
  try.
      clear LS_RTE_SAREC.
      move 1                                            to LS_RTE_SAREC-MAXSEL.
      move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
      append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
      move 'I'                    to <S_ARECN>-SIGN.
      move 'LE'                   to <S_ARECN>-OPTION.
      move ME->F_NOOUT            to <S_ARECN>-LOW.

      IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = C_IAATY_NOOUT
                                   II_ARECN  = LS_RTE_SAREC-I_ARECN
                                   IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                   IF_ASORT  = LS_RTE_SAREC-ASORT ).
    catch /VCXI/CX_CKX.
  endtry.

endmethod.
method ADD_LIMITS_TO_RTE_PSTEP.

  data: LF_LDUOM type        /VCXI/VSMC_LDUOM,
        LF_LDVAL type        /VCXI/VSMR_LDVAL.
  data:          LI_LVVAL               type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE               type        /VCXI/CKX_TT_OBJECT.
  data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
        LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_LVVAL>              type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    clear: LF_LDVAL,
           LF_LDUOM,
           LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Sheet Length (Inbound)
      when 'P0_LT_DI_SHTLEN'.
        move ME->S_PCDIM_IN-PCLEN      to LF_LDVAL.
        move ME->S_PCDIM_IN-PCLEN_UOM  to LF_LDUOM.

***   Sheet Width (Inbound)
      when 'P0_LT_DI_SHTWID'.
        move ME->S_PCDIM_IN-PCWID      to LF_LDVAL.
        move ME->S_PCDIM_IN-PCWID_UOM  to LF_LDUOM.


***   Cutting Type
      when 'P0_LT_VP_CUT_TYPE'.
        if ME->F_TDCUT ne 'ALL'.
          append initial line to LI_LVVAL assigning <S_LVVAL>.
          move 'I'                       to <S_LVVAL>-SIGN.
          move 'EQ'                      to <S_LVVAL>-OPTION.
          move ME->F_TDCUT               to <S_LVVAL>-LOW.
        else.
          append initial line to LI_LVVAL assigning <S_LVVAL>.
          move 'I'                       to <S_LVVAL>-SIGN.
          move 'CP'                      to <S_LVVAL>-OPTION.
          move '*'                       to <S_LVVAL>-LOW.
        endif.

***   LE/TR Trim
      when 'P0_LT_DP_LETRTRIM'.
        if ZIF_VCXI_P0SR_PCDIR~F_PCDIR eq 'A'.
          LF_LDVAL = ME->S_TRIML-TRIML.
          LF_LDUOM = ME->S_TRIML-TRIML_UOM.
        else.
          LF_LDVAL = ME->S_TRIMS-TRIMS.
          LF_LDUOM = ME->S_TRIMS-TRIMS_UOM.
        endif.

***   Side Trim
      when 'P0_LT_DP_SIDETRIM'.
        if ZIF_VCXI_P0SR_PCDIR~F_PCDIR eq 'A'.
          LF_LDVAL = ME->S_TRIMS-TRIMS.
          LF_LDUOM = ME->S_TRIMS-TRIMS_UOM.
        else.
          LF_LDVAL = ME->S_TRIML-TRIML.
          LF_LDUOM = ME->S_TRIML-TRIML_UOM.
        endif.

      when 'P0_LT_DP_OUTS_NUM'.
        move ME->F_NOOUT               to LF_LDVAL.
        move 'ST'                      to LF_LDUOM.

      when others.
        continue.
    endcase.


***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method ADD_SPVRE_MC_TOOL.

  data:  LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MC_TOOL    type ref to /VCXI/CL_VKSR_SPVRE.

  check ME->S_MS_TOOL-MATNR is not initial.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TOOL'
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***------------------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element
  create object LR_SPVRE_MC_TOOL
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_PARENT.
  append LR_SPVRE_MC_TOOL to CT_SPVRE.

***   Set In Use
  LR_SPVRE_MC_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
  clear LS_LEOKY.
  move ME->S_MS_TOOL-MATNR                         to LS_LEOKY-LEOKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
  LR_SPVRE_MC_TOOL->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCO_P   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move 1                                           to LS_PARAM-ATFLV.
  move 'ST'                                        to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
  clear LS_PARAM.
  move ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCP_P   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_MS_TOOL-LTITO                         to LS_PARAM-ATFLV.
  move ME->S_MS_TOOL-LTITO_UOM                     to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ADD_SPVRE_MFMO_P.

  data:  LS_MFMO_P           type        ZVCXI_P0SR_S_MFMO_P,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFMO_P     type ref to /VCXI/CL_VKSR_SPVRE.

*** More than one Material defined
  check lines( ME->T_MFMO_P ) gt 1.

***------------------------------------------------------------------------------------------------
*** Remove existing
  loop at CT_SPVRE into LR_SPVRE_MFMO_P.
    if LR_SPVRE_MFMO_P->GET_ID( ) eq 'MFMO_P'.
      delete CT_SPVRE.
    endif.
  endloop.

*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMO_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***------------------------------------------------------------------------------------------------
  loop at ME->T_MFMO_P into LS_MFMO_P from 2.
*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMO_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMO_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFMO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Material Number
    clear LS_LEOKY.
    move LS_MFMO_P-MATNR                              to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
    LR_SPVRE_MFMO_P->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  endloop.

endmethod.
method ADD_SPVRE_MFSO_P.

  data:  LF_TABIX            type        I,
         LF_IMFXC            type        ZVCXI_XCSP_IMFXC.
  data:  LS_PCDIM_OUT        type        ZVCXI_P0SP_S_PCDIM,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSO_P     type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Remove existing
  loop at CT_SPVRE into LR_SPVRE_MFSO_P.
    if LR_SPVRE_MFSO_P->GET_ID( ) eq 'MFSO_P'.
      delete CT_SPVRE.
    endif.
  endloop.

*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_P'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***------------------------------------------------------------------------------------------------
  loop at ME->T_PCDIM_OUT into LS_PCDIM_OUT.
    move SY-TABIX to LF_TABIX.

    if ME->T_MFMO_P is not initial.
      check LF_TABIX le 1.
    endif.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSO_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSO_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Get MF X-Connect
    read table ME->T_IMFXC_OUT into LF_IMFXC index LF_TABIX.
    if SY-SUBRC eq 0.
***   Set MF X-Connect
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LF_IMFXC                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSO_P->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.
  endloop.

endmethod.
method ADD_SPVRE_PCOUT.

  data:  LS_PCDIM_OUT        type        ZVCXI_P0SP_S_PCDIM,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_PCOUT      type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'PCOUT'
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

  loop at ME->T_PCDIM_OUT into LS_PCDIM_OUT.

***------------------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element
    create object LR_SPVRE_PCOUT
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_PCOUT to CT_SPVRE.

*** Set In Use
    LR_SPVRE_PCOUT->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set PC Type
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCTYP        to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCTYP                           to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCLEN       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCLEN                          to LS_PARAM-ATFLV.
    move LS_PCDIM_OUT-PCLEN_UOM                      to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCWID       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCWID                          to LS_PARAM-ATFLV.
    move LS_PCDIM_OUT-PCWID_UOM                      to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Height
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCHEI       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCHEI                          to LS_PARAM-ATFLV.
    move LS_PCDIM_OUT-PCHEI_UOM                      to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Ups
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCUPS       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCUPS                          to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number Outs
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_NOOUT       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-NOOUT                          to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set PC Direction
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCDIR        to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move LS_PCDIM_OUT-PCDIR                           to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_CUT type ref to ZCL_VCXI_P0SR_BL_PSTEP_CUT.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_CUT.

***----------------------------------------------------------------------------
*** PC Dimensions
  if ME->S_PCDIM_IN  eq LR_BL_PSTEP_CUT->S_PCDIM_IN and
     ME->T_PCDIM_OUT eq LR_BL_PSTEP_CUT->T_PCDIM_OUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Material Flow Material Out - PC
  if ME->T_MFMO_P eq LR_BL_PSTEP_CUT->T_MFMO_P.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Die Cut Type
  if ME->F_TDCUT eq LR_BL_PSTEP_CUT->F_TDCUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Number of Outs
  if ME->F_NOOUT eq LR_BL_PSTEP_CUT->F_NOOUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Trim
  if ME->S_TRIML   eq LR_BL_PSTEP_CUT->S_TRIML and
     ME->S_TRIMS   eq LR_BL_PSTEP_CUT->S_TRIMS.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Tool
  if ME->S_MS_TOOL eq LR_BL_PSTEP_CUT->S_MS_TOOL.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
  move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
  ME->INIT_OUTSO( ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_CUT type ref to ZCL_VCXI_P0SR_BL_PSTEP_CUT.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_CUT.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->S_PCDIM_IN    to LR_BL_PSTEP_CUT->S_PCDIM_IN.
  move ME->T_PCDIM_OUT   to LR_BL_PSTEP_CUT->T_PCDIM_OUT.

*** Material Flow Material Out - PC
  move ME->T_MFMO_P      to LR_BL_PSTEP_CUT->T_MFMO_P.

*** Die Cut Type
  move ME->F_TDCUT       to LR_BL_PSTEP_CUT->F_TDCUT.

*** Number of Outs
  move ME->F_NOOUT       to LR_BL_PSTEP_CUT->F_NOOUT.

*** Trim
  move ME->S_TRIML       to LR_BL_PSTEP_CUT->S_TRIML.
  move ME->S_TRIMS       to LR_BL_PSTEP_CUT->S_TRIMS.

*** Tool
  move ME->S_MS_TOOL     to LR_BL_PSTEP_CUT->S_MS_TOOL.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN
              T_PCDIM_OUT  = ME->T_PCDIM_OUT

              T_MFMO_P     = ME->T_MFMO_P

              F_TDCUT      = ME->F_TDCUT
              F_NOOUT      = ME->F_NOOUT

              S_TRIML      = ME->S_TRIML
              S_TRIMS      = ME->S_TRIMS

              S_MS_TOOL    = ME->S_MS_TOOL.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'P0_AT_CUT'.
      ME->FILL_SPVRE_ADDON_CUT( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                          IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_CUT.

***------------------------------------------------------------------------------------------------
*** Add PC Out
  ME->ADD_SPVRE_PCOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                 IR_SPVRE_PARENT = IR_SPVRE_ADDON
                       changing  CT_SPVRE        = CT_SPVRE ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Tool
  ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = IR_SPVRE_ADDON
                         changing  CT_SPVRE        = CT_SPVRE ).

endmethod.
method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Don't overrule existing
  check CF_ID_GRP   is initial and
        CF_ID_ARBPL is initial.

***------------------------------------------------------------------
*** Standard
  move 'GRP_CONV' to CF_ID_GRP.
  move 'CONV'     to CF_ID_ARBPL.

*** If Outsourcing
  if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
    move 'GRP_CONV' to CF_ID_GRP.
    move 'OUTSO'    to CF_ID_ARBPL.
  endif.

endmethod.
method GET_SPVRE_ACTVY.

  data:  LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_ACTVY  type ref to /VCXI/CL_VKSR_SPVRE.

***----------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_CUT'
                                      IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_ACTVY
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ARBPL.
  append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
  LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Add PC Out
  ME->ADD_SPVRE_PCOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                 IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                       changing  CT_SPVRE        = RT_SPVRE ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Tool
  ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                         changing  CT_SPVRE        = RT_SPVRE ).

endmethod.
method GET_SPVRE_MF.

*** Force new MFO
  move ABAP_FALSE to CF_MFO.

*** Call Super
  SUPER->GET_SPVRE_MF( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                 IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                       changing  CT_SPVRE       = CT_SPVRE
                                 CF_MFI         = CF_MFI
                                 CF_MFO         = CF_MFO ).

***------------------------------------------------------------------------------------------------
*** Add MFMO PC
  ME->ADD_SPVRE_MFMO_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                  IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                        changing  CT_SPVRE       = CT_SPVRE ).

endmethod.
method INIT_BY_SPEC.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get Size
  ME->INIT_BY_SPEC_PCDIM( IT_PRVDR = IT_PRVDR ).

*** Get Material Flow Material Out - PC
  ME->INIT_BY_SPEC_MFMO_P( IT_PRVDR = IT_PRVDR ).

*** Trim
  ME->INIT_BY_SPEC_TRIM( IT_PRVDR = IT_PRVDR ).

*** Sheet Data
  ME->INIT_BY_SPEC_SHEET( IT_PRVDR = IT_PRVDR ).

*** Get Tool Data
  ME->INIT_BY_SPEC_TOOL( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_MFMO_P.

  data:          LR_GATE_COMP_CO   type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_CO     type ref to ZCL_VCXI_P0SS_PR_COMP_CO.
  field-symbols: <S_MFMO_P>        type        ZVCXI_P0SR_S_MFMO_P.

***------------------------------------------------------------------------------------------------
*** Get Component CO Reference
  loop at IT_PRVDR into LR_GATE_COMP_CO.
    try.
        move LR_GATE_COMP_CO->R_CLSPR ?to LR_PR_COMP_CO.
        check LR_PR_COMP_CO is bound.
        append initial line to ME->T_MFMO_P assigning <S_MFMO_P>.

        move LR_GATE_COMP_CO->GET_POSID( ) to <S_MFMO_P>-POSID.
        move LR_PR_COMP_CO->GET_MATNR( )   to <S_MFMO_P>-MATNR.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  sort ME->T_MFMO_P by POSID.

endmethod.
method INIT_BY_SPEC_PCDIM.

  data:  LF_PCTYP          type        ZVCXI_P0SP_PCTYP,
         LF_SHTDI          type        ZVCXI_P0SS_SHTDI.
  data:  LS_PCDIM_OUT      type        ZVCXI_P0SP_S_PCDIM.
  data:  LR_GATE_SHTDIM    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_DCT       type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PRODDIM   type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PRODDIM        type ref to ZIF_VCXI_P0SS_PRODDIM,
         LR_DCT            type ref to ZIF_VCXI_P0SS_DCT.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
  loop at IT_PRVDR into LR_GATE_SHTDIM.
    try.
        move LR_GATE_SHTDIM->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

***------------------------------------------------------------------------------------------------
*** Get Die Cut Reference
  loop at IT_PRVDR into LR_GATE_DCT.
    try.
        move LR_GATE_DCT->R_CLSPR ?to LR_DCT.
        if LR_DCT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_DCT is bound.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions In
  ME->S_PCDIM_IN  = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NETWT ).

*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCTYP = LF_PCTYP
                                                      EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  move LR_DCT->GET_SHTDI( ) to LF_SHTDI.
  if LF_SHTDI is not initial.
    move LF_SHTDI                               to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
    move ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP.
  endif.

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move ME->S_PCDIM_IN-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

***------------------------------------------------------------------------------------------------
*** Get Component Prodcut Dimension Reference
  loop at IT_PRVDR into LR_GATE_PRODDIM.
    try.
        move LR_GATE_PRODDIM->R_CLSPR ?to LR_PRODDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    check LR_PRODDIM is bound.

*** Get PC Dimensions Out
    LS_PCDIM_OUT = LR_PRODDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_PRODDIM=>C_POOTI_PRODUCT ).
    move LF_PCTYP to LS_PCDIM_OUT-PCTYP.
    append LS_PCDIM_OUT to ME->T_PCDIM_OUT.
  endloop.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

***------------------------------------------------------------------------------------------------
*** Calculate Total Number of Outs if we have multiout
  clear ME->F_NOOUT.
  loop at ME->T_PCDIM_OUT into LS_PCDIM_OUT.
    add LS_PCDIM_OUT-NOOUT to ME->F_NOOUT.
  endloop.

endmethod.
method INIT_BY_SPEC_SHEET.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_DCT            type ref to ZIF_VCXI_P0SS_DCT.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_DCT.
        if LR_DCT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_DCT is bound.

***------------------------------------------------------------------------------------------------
*** Get Cutting Type
  move LR_DCT->GET_TDCUT( ) to ME->F_TDCUT.

endmethod.
method INIT_BY_SPEC_TOOL.

  data:  LS_LTITO          type        ZVCXI_P0S_S_LTITO.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_DCT            type ref to ZIF_VCXI_P0SS_DCT.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_DCT.
        if LR_DCT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_DCT is bound.


  move LR_DCT->GET_DCUTT( )     to ME->S_MS_TOOL-MATNR.
  if ME->S_MS_TOOL-MATNR is not initial.
    move LR_DCT->GET_LTITO( )   to LS_LTITO.
    move-corresponding LS_LTITO to ME->S_MS_TOOL.
  endif.

endmethod.
method INIT_BY_SPEC_TRIM.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM.

***------------------------------------------------------------------------------------------------
*** Get Sheet Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

***------------------------------------------------------------------------------------------------
*** Get Trim
  ME->S_TRIML = LR_SHTDIM->GET_TRIML( ).
  ME->S_TRIMS = LR_SHTDIM->GET_TRIMS( ).

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN
              T_PCDIM_OUT  = ME->T_PCDIM_OUT

              T_MFMO_P     = ME->T_MFMO_P

              F_TDCUT      = ME->F_TDCUT
              F_NOOUT      = ME->F_NOOUT

              S_TRIML      = ME->S_TRIML
              S_TRIMS      = ME->S_TRIMS

              S_MS_TOOL    = ME->S_MS_TOOL

       result xml RF_XML.

endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_IN.
endmethod.
method ZIF_VCXI_P0SR_ADJ_PCDIM~CALC_PCDIM_OUT.

  move ME->T_PCDIM_OUT to CT_PCDIM.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  field-symbols: <S_PCDIM_OUT>  type ZVCXI_P0SP_S_PCDIM.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

*** Turn PC Dimension IN
  ME->S_PCDIM_IN  = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_IN
                                    IF_PCDIR = IF_PCDIR ).

*** Turn PC Dimension OUT
  loop at ME->T_PCDIM_OUT assigning <S_PCDIM_OUT>.
    <S_PCDIM_OUT> = ME->TURN_PCDIM( IS_PCDIM = <S_PCDIM_OUT>
                                    IF_PCDIR = IF_PCDIR ).
  endloop.

endmethod.
