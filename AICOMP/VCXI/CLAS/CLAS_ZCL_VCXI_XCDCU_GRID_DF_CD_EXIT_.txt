
class ZCL_VCXI_XCDCU_GRID_DF_CD_EXIT definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  data R_DVCFILTER type ref to ZCL_VCXI_XCDC_DVCFILTER .
  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT

  methods ADD_CD_EXIT
    raising
      /VCXI/CX_CKX .
  methods CALL_ICELM_SHLP
    importing
      !IF_CMATN type /VCXI/VKC_CMATN
      !IF_PRFID type /VCXI/VKC_PRFID
    returning
      value(RT_DF_VALID) type ZVCXI_XCDC_TT_DF_VALID
    raising
      /VCXI/CX_CKX .
  methods DELETE_CD_EXIT
    importing
      !IT_DF_CD_EXIT type ZVCXI_XCDC_TT_CD_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  type-pools ABAP .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CHOOSE_FM
    importing
      !IF_FMNAM type RS38L_FNAM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_DF_CD_EXIT definition
class ZCL_VCXI_XCDCU_GRID_DF_CD_EXIT implementation.
method ADD_CD_EXIT.

  data:          LS_RETURN         type                   DDSHRETVAL,
                 LS_MAP            type                   DSELC,
                 LS_CD_EXIT        type                   ZVCXI_XCDC_S_CD_EXIT,
                 LS_CD_EXIT_SHLP   type                   ZVCXI_XCDCU_S_CD_EXIT_SHLP,
                 LS_DF_CD_EXIT     type                   ZVCXI_XCDC_S_CD_EXIT.
  data:          LT_CD_EXIT        type                   ZVCXI_XCDC_TT_CD_EXIT,
                 LT_DF_CD_EXIT     type                   ZVCXI_XCDC_TT_CD_EXIT,
                 LT_RETURN         type table of          DDSHRETVAL,
                 LT_MAP            type standard table of DSELC,
                 LT_CD_EXIT_SHLP   type standard table of ZVCXI_XCDCU_S_CD_EXIT_SHLP.
  field-symbols: <S_DF_CD_EXIT>    type                   ZVCXI_XCDC_S_CD_EXIT,
                 <F_FIELD>         type                   any.

*** Select all Valid Exits
  select *
         from ZVCXI_XCD_TC260
         into corresponding fields of table LT_CD_EXIT
         where FNAME is not null.

  sort LT_CD_EXIT by IEXIT FNAME.

  loop at LT_CD_EXIT into LS_CD_EXIT.
*** Show only Exits which are not already used.
    move-corresponding LS_CD_EXIT to LS_CD_EXIT_SHLP.
    collect LS_CD_EXIT_SHLP into LT_CD_EXIT_SHLP.
  endloop.

  LS_MAP-FLDNAME   = 'F0001'. "Field for Position 1
  LS_MAP-DYFLDNAME = 'IEXIT'.
  append LS_MAP to LT_MAP.

  LS_MAP-FLDNAME   = 'F0002'. "Field for Position 2
  LS_MAP-DYFLDNAME = 'FNAME'.
  append LS_MAP to LT_MAP.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      RETFIELD        = 'IEXIT'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_CD_EXIT_SHLP
      DYNPFLD_MAPPING = LT_MAP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  if SY-SUBRC eq 0.
    sort LT_RETURN by RECORDPOS.
    loop at LT_RETURN into LS_RETURN.
      read table LT_DF_CD_EXIT assigning <S_DF_CD_EXIT> index LS_RETURN-RECORDPOS.
      if SY-SUBRC ne 0.
        append initial line to LT_DF_CD_EXIT assigning <S_DF_CD_EXIT>.
      endif.
      assign component LS_RETURN-RETFIELD of structure <S_DF_CD_EXIT> to <F_FIELD>.
      check SY-SUBRC = 0.
      move LS_RETURN-FIELDVAL to <F_FIELD>.
      unassign <F_FIELD>.
    endloop.
  endif.

*** Process Result
  loop at LT_DF_CD_EXIT into LS_DF_CD_EXIT.

*** Add Condition Definition Exit
    ME->R_DVCFILTER->ADD_DF_CD_EXIT( IS_DF_CD_EXIT = LS_DF_CD_EXIT ).
  endloop.

endmethod.
method CALL_ICELM_SHLP.

*  data:          LF_CANCELED       type        ABAP_BOOL.
*  data:          LS_CMPRK          type        /VCXI/VKC_S_CMPRK.
*  data:          LT_OBJECT_ALL     type        /VCXI/CKX_TT_OBJECT,
*                 LT_OBJECT_STYLE   type        /VCXI/CKX_TT_OBJECT_STYLE,
*                 LT_OBJECT_SEL     type        /VCXI/CKX_TT_OBJECT.
*  data:          LR_CUPRFL         type ref to /VCXI/CL_VKSC_CUPRFL,
*                 LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
*                 LR_CUELMNT        type ref to /VCXI/CL_VKSC_CUELMNT,
*                 LR_CX_CKX         type ref to /VCXI/CX_CKX.
*  field-symbols: <S_OBJECT_STYLE>  type        /VCXI/CKX_S_OBJECT_STYLE,
*                 <S_DF_VALID>      type        ZVCXI_XCDC_S_DF_VALID.
*
****------------------------------------------------------------------------------------------------
**** Get Customizing Profile
*  LS_CMPRK-CMATN = IF_CMATN.
*  LS_CMPRK-PRFID = IF_PRFID.
*  LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_CMPRK ).
*
****------------------------------------------------------------------------------------------------
**** Get all Tree Elements
*  LT_OBJECT_ALL = LR_CUPRFL->GET_REGISTERED_CUELMNT( ).
*  /VCXI/CL_VKSC_SERVICE=>SORT_CUELMNT( changing CT_OBJECT = LT_OBJECT_ALL ).
*
**** Define Style
*  loop at LT_OBJECT_ALL into LR_OBJECT.
*    move LR_OBJECT ?to LR_CUELMNT.
*    check LR_CUELMNT is bound.
*
*    append initial line to LT_OBJECT_STYLE assigning <S_OBJECT_STYLE>.
*    move LR_OBJECT to <S_OBJECT_STYLE>-R_OBJECT.
*
**** Image
*    if LR_CUELMNT->R_REGELMNT             is bound and
*       LR_CUELMNT->R_REGELMNT->F_TIICO_ID is not initial.
*      move LR_CUELMNT->R_REGELMNT->F_TIICO_ID       to <S_OBJECT_STYLE>-IMAGE.
*    else.
*      if LR_CUELMNT->R_REG_ELMTY is bound.
*        move LR_CUELMNT->R_REG_ELMTY->F_TIICO_ID to <S_OBJECT_STYLE>-IMAGE.
*      endif.
*    endif.
*
**** Disable if no Registry Element is assigned
*    if LR_CUELMNT->R_REGELMNT is not bound.
*      move ABAP_TRUE to <S_OBJECT_STYLE>-DISABLED.
*    endif.
*  endloop.
*
****------------------------------------------------------------------------------------------------
**** Call Search Help
*  call function '/VCXI/CKX_OBJECT_POPUP_START'
*    exporting
*      IT_OBJECT_ALL    = LT_OBJECT_ALL
*      IT_OBJECT_STYLE  = LT_OBJECT_STYLE
*      IF_SORT_BY_ID    = ABAP_FALSE
*      IF_SORT_BY_DESCR = ABAP_FALSE
*      IF_EXPAND_ALL    = ABAP_TRUE
*      IF_SELMODE       = CL_COLUMN_TREE_MODEL=>NODE_SEL_MODE_MULTIPLE
*    importing
*      ET_OBJECT_SEL    = LT_OBJECT_SEL
*      EF_CANCELED      = LF_CANCELED.
*
*  check LF_CANCELED ne ABAP_TRUE.
*
****------------------------------------------------------------------------------------------------
**** Process all selected Customizing Elements
*  loop at LT_OBJECT_SEL into LR_OBJECT.
*    try.
*        append initial line to RT_DF_VALID assigning <S_DF_VALID>.
****     Get ID and Add to returning List
*        move LR_OBJECT->GET_ID( ) to <S_DF_VALID>-ICELM.
*        move IF_CMATN             to <S_DF_VALID>-CMATN.
*        move IF_PRFID             to <S_DF_VALID>-PRFID.
*
*      catch /VCXI/CX_CKX into LR_CX_CKX.
*        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
*    endtry.
*  endloop.
*
*  sort RT_DF_VALID.
*  delete adjacent duplicates from RT_DF_VALID.

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_DF_CD_EXIT_GRID'
                      IF_CONTAINER_NAME = '0100CC_GRID_CD_EXIT'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).


*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_DVCFILTER.
    catch CX_SY_MOVE_CAST_ERROR.
***   DVC Filter Instance Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDCU'
          IF_MSGNO = '052' ).
  endtry.

endmethod.
method DELETE_CD_EXIT.

  data: LS_DF_CD_EXIT type ZVCXI_XCDC_S_CD_EXIT.

  loop at IT_DF_CD_EXIT into LS_DF_CD_EXIT.
*** Delete
    ME->R_DVCFILTER->DELETE_DF_CD_EXIT( IS_DF_CD_EXIT = LS_DF_CD_EXIT ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT> type LVC_S_FCAT.

  RT_FCAT = SUPER->GET_FIELDCAT( ).

  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'SEXIT'.
        <S_FCAT>-TECH = ABAP_TRUE.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_DF_CD_EXIT_GRID     type          ZVCXI_XCDCU_S_DF_CD_EXIT_GRID,
                 LS_DF_CD_EXIT          type          ZVCXI_XCDC_S_CD_EXIT.
  field-symbols: <T_DATA>               type standard table,
                 <S_DATA>               type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Definition Exit
  loop at ME->R_DVCFILTER->T_DF_CD_EXIT into LS_DF_CD_EXIT.
    clear: LS_DF_CD_EXIT_GRID.

    move-corresponding LS_DF_CD_EXIT to LS_DF_CD_EXIT_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_DF_CD_EXIT_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_DF_CD_EXIT_GRID  type          ZVCXI_XCDCU_S_DF_CD_EXIT_GRID.
  data:          LR_CX_CKX           type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard table,
                 <S_DATA>            type          any.

  try.
***----------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Get Data
      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      check SY-SUBRC = 0.
      move-corresponding <S_DATA> to LS_DF_CD_EXIT_GRID.

***   Handle Double Click
      case E_COLUMN-FIELDNAME.
        when 'FNAME'.
          ME->HANDLE_UC_CHOOSE_FM( IF_FMNAM = LS_DF_CD_EXIT_GRID-FNAME ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_CHOOSE_FM.

  check IF_FMNAM is not initial.

  set parameter id 'LIB' field IF_FMNAM.
  call function 'ABAP4_CALL_TRANSACTION'
    exporting
      TCODE                   = 'SE37'
      SKIP_SCREEN             = 'X'
    exceptions
      CALL_TRANSACTION_DENIED = 1
      TCODE_INVALID           = 2
      others                  = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_DF_CD_EXIT   type          ZVCXI_XCDC_TT_CD_EXIT.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DF_CD_EXIT>  type          ZVCXI_XCDC_S_CD_EXIT,
                 <S_DATA>        type          any.

  try.

***   Get VALID Data
      assign ME->R_DATA->* to <T_DATA>.

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***       Add new Condition Definition Exit
          ME->ADD_CD_EXIT( ).

        when C_FUNC_DEL.
***     Delete Condition Validation
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Condition Validation's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_DF_CD_EXIT assigning <S_DF_CD_EXIT>.
            move-corresponding <S_DATA> to <S_DF_CD_EXIT>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_DF_CD_EXIT assigning <S_DF_CD_EXIT>.
            move-corresponding <S_DATA> to <S_DF_CD_EXIT>.
          endloop.

***       Delete Condition Validation's
          ME->DELETE_CD_EXIT( IT_DF_CD_EXIT = LT_DF_CD_EXIT ).

        when others.
          exit.

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

*** Not needed!

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
