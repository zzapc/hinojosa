
class ZCL_VCXI_XCSUC_GRID_DFLT_SP definition
  public
  inheriting from ZCL_VCXI_XCSUC_GRID
  create public .

public section.

  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL read-only .
  data S_DFLT_SHUNT type ZVCXI_XCS_TD430 read-only .
  data T_DFLT_P_SHUNT type ZVCXI_XCSUC_TT_SHUNT_P_DFLT read-only .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
      !IR_S_CONTAINER type ref to CL_GUI_CONTAINER optional
      !IS_DFLT_SHUNT type ZVCXI_XCS_TD430
    raising
      /VCXI/CX_CKX .
protected section.

  data R_DFLT type ref to ZCL_VCXI_XCSUC_DFLT .

  methods CHECK_SELECTION
    importing
      !IF_DETAIL type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods SET_EVENT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
private section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
endclass. "ZCL_VCXI_XCSUC_GRID_DFLT_SP definition
class ZCL_VCXI_XCSUC_GRID_DFLT_SP implementation.
method CHECK_SELECTION.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Actions is only available if Cells are selected
  if IF_DETAIL eq ABAP_FALSE.
    if lines( LT_CELL ) gt 0 or
       lines( LT_ROW )  gt 0.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.
  else.
    if lines( LT_CELL ) eq 1 or
       lines( LT_ROW )  eq 1.
      move ABAP_TRUE to RF_OKAY.
    else.
      move ABAP_FALSE to RF_OKAY.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  data: LS_SHUNT_P_DFLT type ZVCXI_XCSUC_S_SHUNT_P_DFLT.

  SUPER->CONSTRUCTOR( exporting IF_TABNAME        = 'ZVCXI_XCSUC_S_DFLT_SHUNTP_GRID'
                                IF_CONTAINER_NAME = '0150CC_DFLT_SHUNTP_GRID'
                                IR_CUSTOMIZING    = IR_CUSTOMIZING
                                IR_S_CONTAINER    = IR_S_CONTAINER ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_DFLT.
    catch CX_SY_MOVE_CAST_ERROR.
***   Default Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSUC'
          IF_MSGNO = '203' ).
  endtry.

  move IS_DFLT_SHUNT to ME->S_DFLT_SHUNT.

*** Extract Values
  loop at ME->R_DFLT->T_SHUNT_P_DFLT into LS_SHUNT_P_DFLT
  where SHUNT = ME->S_DFLT_SHUNT-SHUNT.
    append LS_SHUNT_P_DFLT to ME->T_DFLT_P_SHUNT.
  endloop.

  ME->F_LOCKED = ME->R_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Set GUID  and Shipping Unit to only technical Fields
      when 'GDFLT' or 'SHUNT'.
        move ABAP_TRUE to <S_FCAT>-TECH.
***   Make Exclude Editable
      when 'FEXCL'.
        move ABAP_TRUE to <S_FCAT>-CHECKBOX.
        if ME->R_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_DFLT_P_SHUNT_GRID type          ZVCXI_XCSUC_S_DFLT_SHUNTP_GRID,
                 LS_DFLT_P_SHUNT      type          ZVCXI_XCSUC_S_SHUNT_P_DFLT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Shipping Unit Packaging Material Entries
  loop at ME->T_DFLT_P_SHUNT into LS_DFLT_P_SHUNT.

    clear: LS_DFLT_P_SHUNT_GRID.
    move-corresponding LS_DFLT_P_SHUNT to LS_DFLT_P_SHUNT_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_DFLT_P_SHUNT_GRID to <S_DATA>.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE  to RS_LAYOUT-NO_TOOLBAR.
  move 'A'         to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_DFLT_P_SHUNT      type          ZVCXI_XCSUC_S_SHUNT_P_DFLT.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DFLT_P_SHUNT>     type          ZVCXI_XCSUC_S_SHUNT_P_DFLT,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_DFLT_P_SHUNT.

        read table ME->T_DFLT_P_SHUNT assigning <S_DFLT_P_SHUNT>
                                      with key SHUNT = LS_DFLT_P_SHUNT-SHUNT
                                               PMATY = LS_DFLT_P_SHUNT-PMATY.

        check SY-SUBRC eq 0.
        move-corresponding LS_DFLT_P_SHUNT to <S_DFLT_P_SHUNT>.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  ME->F_REFRESH_REQ = ABAP_TRUE.
  ME->F_CHANGED = ABAP_TRUE.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add Entry'(001)           to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete Entry'(002)        to LS_TOOLBAR-QUICKINFO.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LF_DISABLED         type               ABAP_BOOL,
                 LF_PMATY            type               ZVCXI_XCSU_PMATY,
                 LF_INDEX            type               I.
  data:          LS_CELL             type               LVC_S_CELL,
                 LS_ROW              type               LVC_S_ROW,
                 LS_DFLT_P_SHUNT     type               ZVCXI_XCSUC_S_SHUNT_P_DFLT.
  data:          LT_CELL             type               LVC_T_CELL,
                 LT_ROW              type               LVC_T_ROW,
                 LT_DFLT_P_SHUNT     type               ZVCXI_XCSUC_TT_SHUNT_P_DFLT.
  data:          LR_CX_CKX           type ref to        /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard      table,
                 <S_DFLT_P_SHUNT>    type               ZVCXI_XCSUC_S_SHUNT_P_DFLT,
                 <S_DATA>            type               any.

  try.

*** ---------------------------------------------------------------------------
***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** ---------------------------------------------------------------------------
***   Get Selected Shipping Unit Limit Assignment
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT_P_SHUNT assigning <S_DFLT_P_SHUNT>.
        move-corresponding <S_DATA> to <S_DFLT_P_SHUNT>.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_DFLT_P_SHUNT assigning <S_DFLT_P_SHUNT>.
        move-corresponding <S_DATA> to <S_DFLT_P_SHUNT>.
      endloop.

*** ---------------------------------------------------------------------------
***   handle UserCommand
      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Shipping Unit Limit Assignment
          if ME->R_DFLT->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
            move ABAP_TRUE to LF_DISABLED.
          endif.

          LF_PMATY = ZCL_VCXI_XCSU_SHLP_PMATY=>CALL_SHLP( IF_SHUNT   = ME->S_DFLT_SHUNT-SHUNT
                                                          IF_DISPLAY = LF_DISABLED ).

          check LF_PMATY is not initial.

          append initial line to ME->T_DFLT_P_SHUNT assigning <S_DFLT_P_SHUNT>.
          <S_DFLT_P_SHUNT>-SHUNT = ME->S_DFLT_SHUNT-SHUNT.
          <S_DFLT_P_SHUNT>-PMATY = LF_PMATY.

        when C_FUNC_DEL.
***     Delete Shipping Unit Limit Assignment
          if ME->CHECK_SELECTION( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCSUC'
                F_MSGNO = '003'.
          endif.

***       Delete all Shipping Unit Limit Assignments
          loop at ME->T_DFLT_P_SHUNT into LS_DFLT_P_SHUNT.
            LF_INDEX = SY-TABIX.
            read table LT_DFLT_P_SHUNT with key SHUNT = LS_DFLT_P_SHUNT-SHUNT
                                                PMATY = LS_DFLT_P_SHUNT-PMATY
                                       transporting no fields.
            check SY-SUBRC = 0.

            delete ME->T_DFLT_P_SHUNT index LF_INDEX.
          endloop.
      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.
      ME->F_CHANGED = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for F4Help, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
