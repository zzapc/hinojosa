
class ZCL_VCXI_XCSP_PR_MC_PACKMAT definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MC
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods CALC_CONSU
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_AVGCP_1 type ZVCXI_XCS_AVGCP value 1 ##NO_TEXT.
  constants C_IEVNT_I_INIT_AVGCO type /VCXI/VKSC_IEVNT value 'INIT_AVGCO' ##NO_TEXT.
  constants C_ATTID_AVGCO_ACTIV type /VCXI/VKS_ATTID value 'AVGCO_ACTIV' ##NO_TEXT.

  methods HANDLE_INIT_AVGCO
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MC_PACKMAT definition
class ZCL_VCXI_XCSP_PR_MC_PACKMAT implementation.
method CALC_CONSU.

  data:  LS_AVGCO         type ZVCXI_XCS_S_AVGCO,
         LS_AVGCP         type ZVCXI_XCS_S_AVGCP,
         LS_CONSU         type ZVCXI_XCSP_S_CONSU,
         LS_MQTYI         type ZVCXI_XCSP_S_MQTYI.

  if IS_MQTYI is not initial.

*** Get Average Consumption Weight
    move ME->GET_AVGCO( ) to LS_AVGCO.
    move ME->GET_AVGCP( ) to LS_AVGCP.

*** Calculate Consumption
    if LS_AVGCP-AVGCP is not initial.
      LS_MQTYI-MQTYI   = ceil( IS_MQTYI-MQTYI / LS_AVGCP-AVGCP ).
      LS_CONSU-CONSU   = ceil( LS_MQTYI-MQTYI * LS_AVGCO-AVGCO ).
    else.
      LS_CONSU-CONSU   = 0.
    endif.

    LS_CONSU-CONSU_UOM = LS_AVGCO-AVGCO_UOM.
  endif.

*** Set Consumption
  ME->SET_CONSU( IS_CONSU = LS_CONSU ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Specific Dimension Parameter
  ME->INIT_DIM_PARAM( ).

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  try.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
      move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
      move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.
    catch CX_SY_CONVERSION_OVERFLOW.
      clear RS_AVGCO.
  endtry.

endmethod.
method GET_AVGCP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_STATUS.

  data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Tool Details
  LS_AVGCO = ME->GET_AVGCO( ).
  LS_AVGCP = ME->GET_AVGCP( ).

*** Check Average Consumption
  if LS_AVGCO-AVGCO is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Average Consumption Unit
  if LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
  method GET_STATUS_MSG.

    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Average Consumption
    LS_AVGCO = ME->GET_AVGCO( ).
    if LS_AVGCO-AVGCO is not initial.
***   Average Consumption is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '253' ).
    else.
***   Average Consumption is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '254' ).
    endif.

*** Check Average Consumption Unit
    LS_AVGCP = ME->GET_AVGCP( ).
    if LS_AVGCP-AVGCP is not initial.
***   Average Consumption Unit is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '255' ).
    else.
***   Average Consumption Unit is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '256' ).
    endif.

  endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_AVGCO.
      ME->HANDLE_INIT_AVGCO( ).
  endcase.

endmethod.
method HANDLE_INIT_AVGCO.

  data: LS_AVGCP   type        ZVCXI_XCS_S_AVGCP.

  LS_AVGCP = ME->GET_AVGCP( ).

*** Initialize Average Consumption per only if it is empty
  check LS_AVGCP-AVGCP is initial.

  move C_AVGCP_1 to LS_AVGCP-AVGCP.

  ME->SET_AVGCP( IS_AVGCP = LS_AVGCP ).

endmethod.
method INIT_DIM_PARAM.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_CONSU_A or
                          PARID eq C_PARID_CONSU_L or
                          PARID eq C_PARID_CONSU_P or
                          PARID eq C_PARID_CONSU_W ).
    move LS_PARAM-PARID to ME->F_PARID_CONSU.
    exit.
  endloop.

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCO_A or
                          PARID eq C_PARID_AVGCO_L or
                          PARID eq C_PARID_AVGCO_P or
                          PARID eq C_PARID_AVGCO_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCO.
    exit.
  endloop.

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_AVGCP_A or
                          PARID eq C_PARID_AVGCP_L or
                          PARID eq C_PARID_AVGCP_P or
                          PARID eq C_PARID_AVGCP_W ).
    move LS_PARAM-PARID to ME->F_PARID_AVGCP.
    exit.
  endloop.

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PRICP_A or
                          PARID eq C_PARID_PRICP_L or
                          PARID eq C_PARID_PRICP_P or
                          PARID eq C_PARID_PRICP_W ).
    move LS_PARAM-PARID to ME->F_PARID_PRICP.
    exit.
  endloop.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO     to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP     to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
  endif.

endmethod.
