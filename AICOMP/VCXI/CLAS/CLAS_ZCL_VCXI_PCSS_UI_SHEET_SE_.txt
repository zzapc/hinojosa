
class ZCL_VCXI_PCSS_UI_SHEET_SE definition
  public
  inheriting from ZCL_VCXI_P0SS_UI_SHEET_SE
  create public .

public section.

  data S_PC_SHEET_SE_VIS type ZVCXI_PCSS_S_SHEET_SE_VIS read-only .

  methods DO_UPDATE_PC_SHEET_SE_VIS
    importing
      !IS_PC_SHEET_SE_VIS type ZVCXI_PCSS_S_SHEET_SE_VIS
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods SHLP_BOARW
    importing
      !IF_DISPLAY type ABAP_BOOL
    changing
      !CS_BOARW type ZVCXI_PCSS_S_BOARW
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
protected section.

  constants C_FOVRS type SYUCOMM value 'UC0100_FOVRS'. "#EC NOTEXT
  data R_PC_PR_SHEET_SE type ref to ZCL_VCXI_PCSS_PR_SHEET_SE .

  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_UI_SHEET_SE definition
class ZCL_VCXI_PCSS_UI_SHEET_SE implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PCSS_UI_SHEET_SE_BIND'
    exporting
      IR_UI_SHEET_SE = ME
    importing
      ES_DYNP        = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PC_PR_SHEET_SE.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_UPDATE_PC_SHEET_SE_VIS.

  data: LS_BOARW        type ZVCXI_PCSS_S_BOARW,
        LS_SHEET_SE_VIS type ZVCXI_P0SS_S_SHEET_SE_VIS.

***--------------------------------------------------------------------------------------
*** Update General Data
  move-corresponding IS_PC_SHEET_SE_VIS to LS_SHEET_SE_VIS.
  ME->DO_UPDATE_SHEET_SE_VIS( IS_SHEET_SE_VIS = LS_SHEET_SE_VIS ).

***--------------------------------------------------------------------------------------
*** Update Self Deckeling Information - Board Grade Width if needed
  if ME->R_PC_PR_SHEET_SE->GET_FOVRS( ) eq ABAP_TRUE.
    if ME->S_PC_SHEET_SE_VIS-BOARW ne IS_PC_SHEET_SE_VIS-BOARW.
      move-corresponding IS_PC_SHEET_SE_VIS to LS_BOARW.
      ME->R_PC_PR_SHEET_SE->SET_BOARW( IS_BOARW = LS_BOARW
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
  endif.

*** Set Override Self-Deckeling
  if ME->S_PC_SHEET_SE_VIS-FOVRS ne IS_PC_SHEET_SE_VIS-FOVRS.
    ME->R_PC_PR_SHEET_SE->SET_FOVRS( IF_FOVRS = IS_PC_SHEET_SE_VIS-FOVRS ).
  endif.

endmethod.
method INIT_VIS.

  data:  LS_BOARW    type        ZVCXI_PCSS_S_BOARW,
         LS_SIDRU    type        ZVCXI_P0SS_S_SIDRU.

  SUPER->INIT_VIS( ).

  free: ME->S_PC_SHEET_SE_VIS.
  move-corresponding ME->S_SHEET_SE_VIS to ME->S_PC_SHEET_SE_VIS.

***--------------------------------------------------------------------------------------
*** Get Board width and Side Run
  ME->R_PC_PR_SHEET_SE->GET_BOARW( importing ES_BOARW = LS_BOARW ).
  ME->R_PC_PR_SHEET_SE->GET_SIDRU( importing ES_SIDRU = LS_SIDRU ).
  move-corresponding LS_BOARW               to ME->S_PC_SHEET_SE_VIS.
  move-corresponding LS_SIDRU               to ME->S_PC_SHEET_SE_VIS.
  move ME->R_PC_PR_SHEET_SE->GET_FOVRS( )   to ME->S_PC_SHEET_SE_VIS-FOVRS.

endmethod.
method SHLP_BOARW.

  data:  LS_RETURN type          DDSHRETVAL.
  data:  LT_COWID  type          ZVCXI_PCS_TT_COWID,
         LT_RETURN type table of DDSHRETVAL.

*** Get all allowed Corrugation Width
  LT_COWID = ME->R_PC_PR_SHEET_SE->GET_COWID_ALL( ).

*** Call Search Help
  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      RETFIELD        = 'COWID'
      VALUE_ORG       = 'S'
      DISPLAY         = IF_DISPLAY
    tables
      VALUE_TAB       = LT_COWID
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.

  if SY-SUBRC eq 0 and
     IF_DISPLAY ne ABAP_TRUE.
    read table LT_RETURN index 1 into LS_RETURN.
    if SY-SUBRC eq 0.
      try.
          call function 'RSDS_CONVERT_NUMBER'
            exporting
              INPUT  = LS_RETURN-FIELDVAL
            importing
              OUTPUT = CS_BOARW-BOARW.
        catch CX_ROOT.
      endtry.
    endif.
  endif.

endmethod.
