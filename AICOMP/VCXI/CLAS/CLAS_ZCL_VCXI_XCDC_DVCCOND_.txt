
class ZCL_VCXI_XCDC_DVCCOND definition
  public
  create protected .

public section.

  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03'. "#EC NOTEXT
  constants C_ACTVT_READ type ACTIV_AUTH value '33'. "#EC NOTEXT
  constants C_FCODE_TRIGGER_CHANGE type UI_FUNC value 'TRIGGER_CHANGE'. "#EC NOTEXT
  data F_CCCORACTIV type CCCORACTIV read-only .
  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .
  data F_TRANS_REQ type ABAP_BOOL .
  data T_GDVCF type /VCXI/CKX_TT_GUID .

  methods REQUEST_TRANSPORT
    raising
      /VCXI/CX_CKX .
  methods GET_CONDREC
    importing
      !IR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF optional
      !IS_CMPRK type /VCXI/VKC_S_CMPRK optional
      !IF_ICELM type /VCXI/CKX_ID optional
      !IT_IEALI type /VCXI/CKX_TT_ID optional
      !IF_DELETED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_CONDREC) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_CONDDEF
    importing
      !IS_CD_VALID type ZVCXI_XCDC_S_CD_VALID optional
      !IF_DELETED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_CONDDEF) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods UNLOCK_ALL
    returning
      value(RT_OBJECT) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods DO_CHECK
    importing
      !IF_CHECK_RANGE type CHAR1
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    returning
      value(RT_MSG_MAPPING) type /VCXI/CKX_TT_OBJECT_INSTANCE .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods DO_SAVE
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    returning
      value(RR_DVCCOND) type ref to ZCL_VCXI_XCDC_DVCCOND
    raising
      /VCXI/CX_CKX .
  methods IS_OBJECT_DELETED
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    returning
      value(RF_DELETED) type ABAP_BOOL .
  methods REGISTER_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods UNREGISTER_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
private section.

  data T_LOADED_CD_VALID type ZVCXI_XCDC_TT_CD_VALID .
  class-data R_DVCCOND type ref to ZCL_VCXI_XCDC_DVCCOND .
  data T_CONDDEF type /VCXI/CKX_TT_OBJECT .
  data T_CONDREC type /VCXI/CKX_TT_OBJECT .
  data T_OBJECT_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods RELOCK_ALL
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods UNLOCK_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    returning
      value(RF_UNLOCKED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods LOCK_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
    raising
      /VCXI/CX_CKX .
  methods FREE_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
      !IF_FCODE type UI_FUNC
    raising
      /VCXI/CX_CKX .
  methods SAVE_OBJECT
    importing
      !IR_OBJECT type ref to /VCXI/IF_CKX_OBJECT
      !IF_FCODE type UI_FUNC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods LOAD_CONDDEF
    importing
      !IS_CD_VALID type ZVCXI_XCDC_S_CD_VALID
    raising
      /VCXI/CX_CKX .
  methods INIT_ALL_CONDDEF
    raising
      /VCXI/CX_CKX .
  methods INIT_ALL_CONDREC
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCDC_DVCCOND definition
class ZCL_VCXI_XCDC_DVCCOND implementation.
method CONSTRUCTOR.

*** Get System/Client Parameters
  call function 'TR_SYS_PARAMS'
    importing
      SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
    exceptions
      NO_SYSTEMNAME      = 1
      NO_SYSTEMTYPE      = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method DO_CHECK.

  data:          LS_OBJECT_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:          LR_OBJECT_LOCKING  type ref to /VCXI/IF_CKX_OBJECT_LOCKING,
                 LR_CONDDEF         type ref to ZCL_VCXI_XCDC_CONDDEF,
                 LR_CONDREC         type ref to ZCL_VCXI_XCDC_CONDREC,
                 LR_CX_CKX          type ref to /VCXI/CX_CKX.
  field-symbols: <S_MSG_MAPPING>    type        /VCXI/CKX_S_OBJECT_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check all Objects
  loop at ME->T_OBJECT_INSTANCE into LS_OBJECT_INSTANCE.

*** Do only check not deleted Elements
    check ME->IS_OBJECT_DELETED( IR_OBJECT = LS_OBJECT_INSTANCE-R_OBJECT ) eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Check Range
    case IF_CHECK_RANGE.
      when 'A'.   "All
      when 'L'.   "Locked
        try.
            move LS_OBJECT_INSTANCE-R_OBJECT ?to LR_OBJECT_LOCKING.
            check LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.

          catch CX_SY_MOVE_CAST_ERROR.
            exit.
          catch /VCXI/CX_CKX into LR_CX_CKX.
            append initial line to RT_MSG_MAPPING assigning <S_MSG_MAPPING>.
            <S_MSG_MAPPING>-R_OBJECT = LS_OBJECT_INSTANCE-R_OBJECT.
            <S_MSG_MAPPING>-GUID     = IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
            exit.
        endtry.
      when others.
        exit.
    endcase.

***--------------------------------------------------------------------------------------
    try.
        try.
            move LS_OBJECT_INSTANCE-R_OBJECT ?to LR_CONDDEF.
            if LR_CONDDEF is bound.
***           Perform Check
              LR_CONDDEF->DO_CHECK( IR_MSG = IR_MSG ).
              continue.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_CONDDEF.
        endtry.

        try.
            move LS_OBJECT_INSTANCE-R_OBJECT ?to LR_CONDREC.
            if LR_CONDREC is bound.
***           Perform Check
              LR_CONDREC->DO_CHECK( IR_MSG = IR_MSG ).
              continue.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_CONDREC.
        endtry.

***--------------------------------------------------------------------------------------
***   Error Handling
      catch /VCXI/CX_CKX into LR_CX_CKX.
        append initial line to RT_MSG_MAPPING assigning <S_MSG_MAPPING>.
        <S_MSG_MAPPING>-R_OBJECT = LS_OBJECT_INSTANCE-R_OBJECT.
        <S_MSG_MAPPING>-GUID     = IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

  endloop.

endmethod.
method DO_FREE.

  data:  LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

***------------------------------------------------------------------------------------------------
*** Free Condition Definition
  loop at ME->T_CONDDEF into LR_OBJECT.
    ME->FREE_OBJECT( IR_OBJECT = LR_OBJECT
                     IF_FCODE  = ZCL_VCXI_XCDC_CONDDEF=>C_FCODE_CONDDEF_FREE ).
  endloop.
  free ME->T_CONDDEF.

***------------------------------------------------------------------------------------------------
*** Free Condition Record
  loop at ME->T_CONDREC into LR_OBJECT.
    ME->FREE_OBJECT( IR_OBJECT = LR_OBJECT
                     IF_FCODE  = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_FREE ).
  endloop.
  free ME->T_CONDREC.

endmethod.
method DO_SAVE.

  data:  LF_KORRNR    type        TRKORR.
  data:  LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
         LR_CX_CKX    type ref to /VCXI/CX_CKX.

  try.
      if ME->F_TRANS_REQ eq ABAP_TRUE.
***     Popup to pick Transport
        call function 'G_TRANS_NUMBER'
          exporting
            CATEGORY  = 'CUST'
          importing
            KORRNR    = LF_KORRNR
          exceptions
            NO_NUMBER = 1
            others    = 2.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Open Transport
        call function 'ZVCXI_XCDC_DB_OPEN_TRANSPORT'
          in update task
          exporting
            IF_TRKORR = LF_KORRNR.

***     Reset Transport Requested.
        ME->F_TRANS_REQ = ABAP_FALSE.
      endif.

***------------------------------------------------------------------------------------------------
***   Save Condition Definition
      loop at ME->T_CONDDEF into LR_OBJECT.
        ME->SAVE_OBJECT( IR_OBJECT = LR_OBJECT
                         IF_FCODE  = ZCL_VCXI_XCDC_CONDDEF=>C_FCODE_CONDDEF_SAVE ).
      endloop.

***------------------------------------------------------------------------------------------------
***   Save Condition Record
      loop at ME->T_CONDREC into LR_OBJECT.
        ME->SAVE_OBJECT( IR_OBJECT = LR_OBJECT
                         IF_FCODE  = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_SAVE ).
      endloop.

***------------------------------------------------------------------------------------------------
***   Write Transport
      call function 'ZVCXI_XCDC_DB_CLOSE_TRANSPORT'
        in update task.

***------------------------------------------------------------------------------------------------
***   All changes are handled
      move ABAP_FALSE to ME->F_CHANGED.

      commit work and wait.

***------------------------------------------------------------------------------------------------
***   Relock all locked Objects after Commit
      ME->RELOCK_ALL( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      rollback work.
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method FREE_OBJECT.

  data:  LR_OBJECT_ACTION type ref to /VCXI/IF_CKX_OBJECT_ACTION.

  try.
      move IR_OBJECT ?to LR_OBJECT_ACTION.
      check LR_OBJECT_ACTION is bound.

      LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = IF_FCODE ).

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method GET_CONDDEF.

  data:  LR_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF,
         LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.

***------------------------------------------------------------------------------------------------
*** Load Condition Defintions
  read table ME->T_LOADED_CD_VALID with key CMATN = IS_CD_VALID-CMATN
                                            PRFID = IS_CD_VALID-PRFID
                                            ICELM = IS_CD_VALID-ICELM
                                   transporting no fields.
  if SY-SUBRC ne 0.
    ME->LOAD_CONDDEF( IS_CD_VALID = IS_CD_VALID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Start with all Condition Definition
  move ME->T_CONDDEF to RT_CONDDEF.

*** Check Deletion Status
  if IF_DELETED ne ABAP_UNDEFINED.
    loop at RT_CONDDEF into LR_OBJECT.
      if ME->IS_OBJECT_DELETED( IR_OBJECT = LR_OBJECT ) ne IF_DELETED.
        delete RT_CONDDEF.
      endif.
    endloop.
  endif.

***------------------------------------------------------------------------------------------------
*** Apply Filter
  if IS_CD_VALID is supplied.
    loop at RT_CONDDEF into LR_OBJECT.
      move LR_OBJECT ?to LR_CONDDEF.
      read table LR_CONDDEF->T_CD_VALID with key CMATN = IS_CD_VALID-CMATN
                                                 PRFID = IS_CD_VALID-PRFID
                                                 ICELM = IS_CD_VALID-ICELM
                                        transporting no fields.
      if SY-SUBRC ne 0.
        delete RT_CONDDEF.
      endif.
    endloop.
  endif.

endmethod.
method GET_CONDREC.

  data:  LF_MATCH       type        ABAP_BOOL.
  data:  LS_CD_VALID    type        ZVCXI_XCDC_S_CD_VALID,
         LS_CR_FILTER   type        ZVCXI_XCDC_S_CR_FILTER.
  data:  LT_CONDDEF     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_CONDREC     type ref to ZCL_VCXI_XCDC_CONDREC,
         LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

***------------------------------------------------------------------------------------------------
*** If no Condition Definition is defined find all matching
  if IR_CONDDEF is not supplied.
    if IS_CMPRK is supplied or
       IF_ICELM is supplied.
      move IS_CMPRK to LS_CD_VALID-S_CMPRK.
      move IF_ICELM to LS_CD_VALID-ICELM.
      LT_CONDDEF = ME->GET_CONDDEF( IS_CD_VALID = LS_CD_VALID
                                    IF_DELETED  = IF_DELETED ).
    else.
      LT_CONDDEF = ME->GET_CONDDEF( IF_DELETED = IF_DELETED ).
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Start with all Condition Records
  move ME->T_CONDREC to RT_CONDREC.

***------------------------------------------------------------------------------------------------
*** Apply Filter
  loop at RT_CONDREC into LR_OBJECT.
    move LR_OBJECT ?to LR_CONDREC.

*** Check Deletion Status
    if IF_DELETED ne ABAP_UNDEFINED and
       ME->IS_OBJECT_DELETED( IR_OBJECT = LR_OBJECT ) ne IF_DELETED.
      delete RT_CONDREC.
      continue.
    endif.

*** Check Condition Definition
    if IR_CONDDEF is supplied.
      if LR_CONDREC->R_CONDDEF ne IR_CONDDEF.
        delete RT_CONDREC.
        continue.
      endif.
    else.
      read table LT_CONDDEF with key TABLE_LINE = LR_CONDREC->R_CONDDEF
                            transporting no fields.
      if SY-SUBRC ne 0.
        delete RT_CONDREC.
        continue.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Check Record Filter
    if LR_CONDREC->T_CR_FILTER is not initial.
      loop at LR_CONDREC->T_CR_FILTER into LS_CR_FILTER.
        move ABAP_TRUE to LF_MATCH.

        if IS_CMPRK is supplied.
***       Check Config Material
          if LS_CR_FILTER-CMATN is not initial and
             LS_CR_FILTER-CMATN ne IS_CMPRK-CMATN.
            clear LF_MATCH.
            continue.
          endif.

***       Check Profile
          if LS_CR_FILTER-PRFID is not initial and
             LS_CR_FILTER-PRFID ne IS_CMPRK-PRFID.
            clear LF_MATCH.
            continue.
          endif.
        endif.

***     Check Element ID
        if IF_ICELM is supplied and
           LS_CR_FILTER-ICELM is not initial and
           LS_CR_FILTER-ICELM ne IF_ICELM.
          clear LF_MATCH.
          continue.
        endif.

***     Check Alias
        if IT_IEALI           is supplied and
           LS_CR_FILTER-IEALI is not initial.
          read table IT_IEALI with key TABLE_LINE = LS_CR_FILTER-IEALI
                              transporting no fields.
          if SY-SUBRC ne 0.
            clear LF_MATCH.
            continue.
          endif.
        endif.

***     Match was found
        exit.
      endloop.

      if LF_MATCH ne ABAP_TRUE.
        delete RT_CONDREC.
      endif.
    endif.
  endloop.

endmethod.
method GET_INSTANCE.

  if ZCL_VCXI_XCDC_DVCCOND=>R_DVCCOND is not bound.
    create object ZCL_VCXI_XCDC_DVCCOND=>R_DVCCOND.
  endif.

  move ZCL_VCXI_XCDC_DVCCOND=>R_DVCCOND to RR_DVCCOND.

endmethod.
method HANDLE_CHANGED.

  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
method INIT_ALL_CONDDEF.

  data:  LF_GCODE  type                   ZVCXI_XCD_GCODE,
         LF_GUID   type                   /VCXI/CKX_GUID.
  data:  LT_GCODE  type standard table of ZVCXI_XCD_GCODE.

  select GCODE into table LT_GCODE
               from ZVCXI_XCD_TC200.

*** Get Instance for all Condition Definitions
  loop at LT_GCODE into LF_GCODE.
    move LF_GCODE to LF_GUID.
    ZCL_VCXI_XCDC_CONDDEF=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endloop.

endmethod.
method INIT_ALL_CONDREC.

  data:  LF_GCORE  type                   ZVCXI_XCD_GCORE,
         LF_GUID   type                   /VCXI/CKX_GUID.
  data:  LT_GCORE  type standard table of ZVCXI_XCD_GCORE.

  select GCORE into table LT_GCORE
               from ZVCXI_XCD_TD300.

*** Get Instance for all Condition Record
  loop at LT_GCORE into LF_GCORE.
    move LF_GCORE to LF_GUID.
    ZCL_VCXI_XCDC_CONDREC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endloop.

endmethod.
method IS_OBJECT_DELETED.

  data:  LR_CONDDEF   type ref to ZCL_VCXI_XCDC_CONDDEF,
         LR_CONDREC   type ref to ZCL_VCXI_XCDC_CONDREC.

  case IR_OBJECT->F_TOOBJ.
    when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
      move IR_OBJECT ?to LR_CONDDEF.
      move LR_CONDDEF->F_DELETED to RF_DELETED.

    when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
      move IR_OBJECT ?to LR_CONDREC.
      move LR_CONDREC->F_DELETED to RF_DELETED.

  endcase.

endmethod.                    "IS_OBJECT_DELETED
method LOAD_CONDDEF.

  data:  LF_GCODE  type                   ZVCXI_XCD_GCODE,
         LF_GUID   type                   /VCXI/CKX_GUID.
  data:  LT_GCODE  type standard table of ZVCXI_XCD_GCODE.

  if IS_CD_VALID is initial.
*** Load all
    select GCODE into table LT_GCODE
                 from ZVCXI_XCD_TC200.
  else.
*** Load CD - Validation
    select GCODE into table LT_GCODE
           from ZVCXI_XCD_TC201
          where CMATN eq IS_CD_VALID-CMATN
            and PRFID eq IS_CD_VALID-PRFID
            and ICELM eq IS_CD_VALID-ICELM.
  endif.

*** Get Instance for all Condition Definitions
  loop at LT_GCODE into LF_GCODE.
    move LF_GCODE to LF_GUID.
    ZCL_VCXI_XCDC_CONDDEF=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endloop.

*** Consider Validation as loaded
  append IS_CD_VALID to ME->T_LOADED_CD_VALID.

endmethod.
method LOCK_OBJECT.

  data:  LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

  try.
      move IR_OBJECT ?to LR_OBJECT_LOCKING.
      check LR_OBJECT_LOCKING is bound.

      check LR_OBJECT_LOCKING->IS_LOCKED( ) ne ABAP_TRUE.
      LR_OBJECT_LOCKING->DO_LOCK( ).

      if LR_OBJECT_LOCKING->IS_LOCKED( ) ne ABAP_TRUE.
***     Object could not be locked.
        raise exception type /VCXI/CX_CKX.
      endif.

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method REGISTER_OBJECT.

  field-symbols: <S_OBJECT_INSTANCE> type /VCXI/CKX_S_OBJECT_INSTANCE.

  check IR_OBJECT is bound.

  case IR_OBJECT->F_TOOBJ.
    when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
      collect IR_OBJECT into ME->T_CONDDEF.

    when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
      collect IR_OBJECT into ME->T_CONDREC.

  endcase.

*** Object Instance
  append initial line to ME->T_OBJECT_INSTANCE assigning <S_OBJECT_INSTANCE>.
  move IR_OBJECT->GET_GUID( ) to <S_OBJECT_INSTANCE>-GUID.
  move IR_OBJECT              to <S_OBJECT_INSTANCE>-R_OBJECT.

  set handler ME->HANDLE_CHANGED for IR_OBJECT.

endmethod.
method RELOCK_ALL.

  data:  LS_OBJECT_INSTANCE   type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_OBJECT_LOCKING    type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

  loop at ME->T_OBJECT_INSTANCE into LS_OBJECT_INSTANCE.
    try.
        move LS_OBJECT_INSTANCE-R_OBJECT ?to LR_OBJECT_LOCKING.
        check LR_OBJECT_LOCKING is bound.

        check LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.

***     Lock again
        LR_OBJECT_LOCKING->DO_LOCK( ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method REQUEST_TRANSPORT.

  move ABAP_TRUE to ME->F_TRANS_REQ.
  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
method SAVE_OBJECT.

  data:  LR_OBJECT_ACTION type ref to /VCXI/IF_CKX_OBJECT_ACTION.

  try.
      move IR_OBJECT ?to LR_OBJECT_ACTION.
      check LR_OBJECT_ACTION is bound.

      LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = IF_FCODE ).

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method UNLOCK_ALL.

  data:  LS_OBJECT_INSTANCE   type /VCXI/CKX_S_OBJECT_INSTANCE.

***------------------------------------------------------------------------------------------------
*** Unlock all Objects
  loop at ME->T_OBJECT_INSTANCE into LS_OBJECT_INSTANCE.
    if ME->UNLOCK_OBJECT( IR_OBJECT = LS_OBJECT_INSTANCE-R_OBJECT ) eq ABAP_TRUE.
      append LS_OBJECT_INSTANCE-R_OBJECT to RT_OBJECT.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
  move ABAP_FALSE to ME->F_CHANGED.

endmethod.
method UNLOCK_OBJECT.

  data:  LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

  try.
      move IR_OBJECT ?to LR_OBJECT_LOCKING.
      check LR_OBJECT_LOCKING is bound.

      check LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.

      LR_OBJECT_LOCKING->DO_UNLOCK( ).
      move ABAP_TRUE to RF_UNLOCKED.

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method UNREGISTER_OBJECT.

  check IR_OBJECT is bound.

  case IR_OBJECT->F_TOOBJ.
    when ZCL_VCXI_XCDC_CONDDEF=>C_TOOBJ_CONDDEF.
      delete ME->T_CONDDEF where TABLE_LINE eq IR_OBJECT.

    when ZCL_VCXI_XCDC_CONDREC=>C_TOOBJ_CONDREC.
      delete ME->T_CONDREC where TABLE_LINE eq IR_OBJECT.

  endcase.

  delete ME->T_OBJECT_INSTANCE where R_OBJECT eq IR_OBJECT.

  set handler ME->HANDLE_CHANGED for IR_OBJECT activation ABAP_FALSE.

endmethod.
