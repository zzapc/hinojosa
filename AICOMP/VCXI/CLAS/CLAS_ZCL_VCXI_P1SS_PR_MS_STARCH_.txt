
class ZCL_VCXI_P1SS_PR_MS_STARCH definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_P1_MS_STARCH type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_MS_STARCH' ##NO_TEXT.
  constants C_PARID_STARC type /VCXI/VKS_PARID value 'ZVCXI_PC_STARC' ##NO_TEXT.
  constants C_PARID_STARF type /VCXI/VKS_PARID value 'ZVCXI_PC_STARF' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SLDCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SLDCO) type ZVCXI_PXS_S_SLDCO
    raising
      /VCXI/CX_CKX .
  methods GET_STARC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_STARC) type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods GET_STARF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_STARF) type ZVCXI_PCS_STARF
    raising
      /VCXI/CX_CKX .
  methods SET_SLDCO
    importing
      !IS_SLDCO type ZVCXI_PXS_S_SLDCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_STARC
    importing
      !IF_STARC type ZVCXI_PCSS_STARC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    importing
      !IF_UOM type /VCXI/CKX_UOM optional
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_STARF
    importing
      !IF_STARF type ZVCXI_PCS_STARF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
protected section.

  constants C_IEVNT_O_AVGCO_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SLDCO_CHANGED type /VCXI/VKSC_IEVNT value 'SLDCO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STARC_CHANGED type /VCXI/VKSC_IEVNT value 'STARC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STARF_CHANGED type /VCXI/VKSC_IEVNT value 'STARF_CHANGED' ##NO_TEXT.
  constants C_PARID_SLDCO type /VCXI/VKS_PARID value 'ZVCXI_PX_SLDCO' ##NO_TEXT.
  data R_CUST_STARCH type ref to ZCL_VCXI_P1SS_CUST_STARCH .

  methods CHECK_SLDCO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_STARC
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_STARF
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_MS_STARCH definition
class ZCL_VCXI_P1SS_PR_MS_STARCH implementation.
  method CHECK_SLDCO.

*** Check Solid Content
    if ME->GET_SLDCO( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Solid Content is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '065' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Solid Content is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '066' ).

      endif.
    endif.

  endmethod.
  method CHECK_STARC.

*** Check Starch Code
    if ME->GET_STARC( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Starch Code is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '061' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Starch Code is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '062' ).
      endif.
    endif.

  endmethod.
  method CHECK_STARF.

*** Check Starch Factor
    if ME->GET_STARF( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Starch Factor is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '063' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Starch Factor is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '064' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_W to ME->F_PARID_PRICP.
    move C_PARID_AVGCO_W to ME->F_PARID_AVGCO.
    move C_PARID_AVGCP_A to ME->F_PARID_AVGCP.

  endmethod.
  method GET_AVGCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
    move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
    move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_AVGCP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
    move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
    move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SLDCO.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move LS_PARAM-ATFLV to RS_SLDCO-SLDCO.
    move LS_PARAM-UNIT  to RS_SLDCO-SLDCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STARC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARC ).
    move LS_PARAM-ATWRT to RF_STARC.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_STARC_DESCR( IF_STARC = RF_STARC ).
    endif.

  endmethod.
  method GET_STARF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARF ).
    move LS_PARAM-ATFLV to RF_STARF.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Starch Code is maintained
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_STARC( ) ).

*** Check Starch Factor is maintained
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_STARF( ) ).

*** Check Solid Content is maintained
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SLDCO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Starch Code
    ME->CHECK_STARC( IR_MESSAGE = IR_MESSAGE ).

*** Check Starch Factor
    ME->CHECK_STARF( IR_MESSAGE = IR_MESSAGE ).

*** Check Solid Content
    ME->CHECK_SLDCO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data: LS_AVGCO type        ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type        ZVCXI_XCS_S_AVGCP,
          LS_SLDCO type        ZVCXI_PXS_S_SLDCO.


*** Get Avarage Consumption and Avarage Consumption Per
    LS_AVGCO = ME->GET_AVGCO( ).
    LS_AVGCP = ME->GET_AVGCP( ).

*** Calculate Surface Weight
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = LS_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = LS_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    endif.
    check RS_SURWT-SURWT is not initial.

*** Consider Solid Content
    LS_SLDCO = ME->GET_SLDCO( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = LS_SLDCO-SLDCO
                                                        IF_CALCV_UOM_2 = LS_SLDCO-SLDCO_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = RS_SURWT-SURWT_UOM
                                              importing EF_CALCV       = RS_SURWT-SURWT
                                                        EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).

*** Apply Starch Factor
    RS_SURWT-SURWT = RS_SURWT-SURWT * ME->GET_STARF( ).

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D.

    move ME->GET_MATNR( )            to LF_MATNR.
    move ME->GET_WERKS( )            to LF_WERKS.

*** Only load Customizing with insert Materialnumber
    check LF_MATNR is not initial and
          LF_WERKS is not initial.

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
      exit.
    endif.

    clear ME->R_CUST_MATNR.

*** Load the Customizing
    ME->R_CUST_STARCH = ZCL_VCXI_P1SS_CUST_STARCH=>GET_INSTANCE_STARCH( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = LF_WERKS
                                                                        IF_DATE  = SY-DATUM ).

    ME->SET_AVGCO( exporting IS_AVGCO = ME->R_CUST_STARCH->S_AVGCO ).
    ME->SET_AVGCP( exporting IS_AVGCP = ME->R_CUST_STARCH->S_AVGCP ).
    ME->SET_SLDCO( exporting IS_SLDCO = ME->R_CUST_STARCH->S_SLDCO ).

    move ME->R_CUST_STARCH to ME->R_CUST_MATNR.

  endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO      to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP      to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
  method SET_SLDCO.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SLDCO ).

    move IS_SLDCO-SLDCO      to LS_PARAM-ATFLV.
    move IS_SLDCO-SLDCO_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SLDCO_CHANGED ).
    endif.

  endmethod.
method SET_STARC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARC ).

  move IF_STARC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STARC_CHANGED ).
  endif.

endmethod.
method SET_STARF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STARF ).

  move IF_STARF to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STARF_CHANGED ).
  endif.

endmethod.
