
class ZCL_VCXI_FFSS_PR_CSTEP_TREAT definition
  public
  inheriting from ZCL_VCXI_FFSS_PR_CSTEP
  create public .

public section.

  constants C_PARID_TRESI type /VCXI/VKS_PARID value 'ZVCXI_FF_TRESI' ##NO_TEXT.
  constants C_PARID_COMBW type /VCXI/VKS_PARID value 'ZVCXI_F0_COMBW' ##NO_TEXT.
  constants C_PARID_TTREA type /VCXI/VKS_PARID value 'ZVCXI_FF_TTREA' ##NO_TEXT.
  constants C_IPRVT_CSTEP_TREAT type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_CSTEP_TREAT' ##NO_TEXT.
  constants C_TRESI_SIDEAB type ZVCXI_FFS_TRESI value 'AB' ##NO_TEXT.
  constants C_TRESI_SIDEB type ZVCXI_FFS_TRESI value 'B' ##NO_TEXT.
  constants C_TRESI_SIDEA type ZVCXI_FFS_TRESI value 'A' ##NO_TEXT.
  constants C_COMBW_N type ZVCXI_F0S_COMBW value 'N' ##NO_TEXT.

  methods GET_COMBW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_COMBW type ZVCXI_F0S_COMBW
    raising
      /VCXI/CX_CKX .
  methods IS_CSTEP_INBOUND
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_TRESI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TRESI type ZVCXI_FFS_TRESI
    raising
      /VCXI/CX_CKX .
  methods GET_TTREA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TTREA type ZVCXI_FFS_TTREA
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_COMBW
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_COMBW type ZVCXI_F0S_COMBW
    raising
      /VCXI/CX_CKX .
  methods SET_TRESI
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_TRESI type ZVCXI_FFS_TRESI
    raising
      /VCXI/CX_CKX .
  methods SET_TTREA
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_TTREA type ZVCXI_FFS_TTREA
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_O_TRESI_CHANGED type /VCXI/VKSC_IEVNT value 'TRESI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COMBW_CHANGED type /VCXI/VKSC_IEVNT value 'COMBW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TTREA_CHANGED type /VCXI/VKSC_IEVNT value 'TTREA_CHANGED' ##NO_TEXT.

  methods CHECK_TRESI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TTREA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_CSTEP_TREAT definition
class ZCL_VCXI_FFSS_PR_CSTEP_TREAT implementation.
  method CHECK_TRESI.
*** 0 Treatment Side is maintained.
*** 1 Treatment Side is not maintained.

    data: LF_TRESI type ZVCXI_FFS_TRESI.

    move 0 to RF_RETURN.
***--------------------------------------------------------------------------------------
*** Get Treatment Side
    ME->GET_TRESI( importing EF_TRESI = LF_TRESI ).

    check LF_TRESI is initial.
    move 1 to RF_RETURN.

  endmethod.
  method CHECK_TTREA.
*** 0 Treatment Type is maintained.
*** 1 Treatment Type is not maintained.

    data: LF_TTREA type ZVCXI_FFS_TTREA.

    move 0 to RF_RETURN.
***--------------------------------------------------------------------------------------
*** Get Treatment Type
    ME->GET_TTREA( importing EF_TTREA = LF_TTREA ).

    check LF_TTREA is initial.
    move 1 to RF_RETURN.

  endmethod.
  method GET_COMBW.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMBW ).

    move LS_PARAM-ATWRT to EF_COMBW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Treatment Type
    if ME->CHECK_TTREA( ) is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Treatment Side
    if ME->CHECK_TRESI( ) is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Treatment Type
    if ME->CHECK_TTREA( ) is initial.
***   Treatment Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '386' ).
    else.
***   Treatment Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '387' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Treatment Side
    if ME->CHECK_TRESI( ) is initial.
***   Treatment Side is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '388' ).
    else.
***   Treatment Side is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '389' ).
    endif.

  endmethod.
  method GET_TRESI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRESI ).

    move LS_PARAM-ATWRT to EF_TRESI.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TTREA.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TTREA ).

    move LS_PARAM-ATWRT to EF_TTREA.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_TTREA is not initial.

    if EF_DESCR is requested.
***   Get Treatment Type Description
      select single DESCR
               from ZVCXI_FFS_TC150T
               into EF_DESCR
              where LANGU eq SY-LANGU
                and TTREA eq EF_TTREA.
    endif.

  endmethod.
  method IS_CSTEP_INBOUND.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_INPUT type ref to ZCL_VCXI_FFSS_PR_INPUT.

    move ABAP_FALSE to RF_RETURN.

*** Get Input Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    check SY-SUBRC is initial.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_INPUT.
    endtry.

    check LR_PR_INPUT is not initial.
    move ABAP_TRUE to RF_RETURN.

  endmethod.
  method SET_COMBW.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMBW ).

    move IF_COMBW to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COMBW_CHANGED ).
    endif.

  endmethod.
  method SET_TRESI.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRESI ).

    move IF_TRESI to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TRESI_CHANGED ).
    endif.

  endmethod.
  method SET_TTREA.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TTREA ).

    move IF_TTREA to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TTREA_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

    data: LF_TTREA        type ZVCXI_FFS_TTREA,
          LF_TRESI        type ZVCXI_FFS_TRESI.
    data: LR_BL_FISTRUCT  type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

    SUPER->ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX( importing EF_FISTX       = EF_FISTX
                                                        EF_SETBY       = EF_SETBY
                                                        ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

    check LR_BL_FISTRUCT is bound.

*** Get Treatment Type
    ME->GET_TTREA( importing EF_TTREA = LF_TTREA ).

*** Get Treatment Side
    ME->GET_TRESI( importing EF_TRESI = LF_TRESI ).

*** Apply treatment
    LR_BL_FISTRUCT->APPLY_TREAT( IF_TTREA = LF_TTREA
                                 IF_TRESI = LF_TRESI ).

***--------------------------------------------------------------------------------------
*** Get new Film Structure XML
    LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = EF_FISTX ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    ME->GET_TTREA( importing EF_TTREA = data(LF_TTREA)                "Treatment Type
                             EF_DESCR = data(LF_DESCR) ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL     = CR_NETGRAPH_JSON->GET_LABEL( IF_VALUE = LF_TTREA )
                                          IF_VALUE     = LF_DESCR
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://feed'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
