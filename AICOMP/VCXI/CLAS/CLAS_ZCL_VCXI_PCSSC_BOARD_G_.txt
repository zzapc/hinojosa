
class ZCL_VCXI_PCSSC_BOARD_G definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  data F_BSAVI type ZVCXI_PCSSC_BSAVI read-only .
  constants C_ACTVT_CREATE type ACTIV_AUTH value '01' ##NO_TEXT.
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06' ##NO_TEXT.
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03' ##NO_TEXT.
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02' ##NO_TEXT.
  constants C_BLEVL_GLOBAL type CHAR1 value 'G' ##NO_TEXT.
  constants C_CDOCL_BOARD_G type CDOBJECTCL value 'ZVCXI_PCSSC_BG' ##NO_TEXT.
  constants C_FCODE_BOARD_G_CHECK type UI_FUNC value 'BOARD_G_CHECK' ##NO_TEXT.
  constants C_FCODE_BOARD_G_DELETE type UI_FUNC value 'BOARD_G_DELETE' ##NO_TEXT.
  constants C_FCODE_BOARD_G_FREE type UI_FUNC value 'BOARD_G_FREE' ##NO_TEXT.
  constants C_FCODE_BOARD_G_SAVE type UI_FUNC value 'BOARD_G_SAVE' ##NO_TEXT.
  constants C_MBOAR_PROD type ZVCXI_PCSS_MBOAR value 'P' ##NO_TEXT.
  constants C_MBOAR_SALES type ZVCXI_PCSS_MBOAR value 'S' ##NO_TEXT.
  constants C_TOOBJ_BOARD type /VCXI/CKX_TOOBJ value 'BOARD' ##NO_TEXT.
  data F_BOARD type ZVCXI_PCS_BOARD read-only .
  data F_CHANGED type ABAP_BOOL read-only .
  data F_DELETED type ABAP_BOOL read-only .
  data F_GBOGV type ZVCXI_PCSSC_GBOGV read-only .
  data F_STARC type ZVCXI_PCSS_STARC read-only .
  data F_TBOAR type ZVCXI_PCSS_TBOAR read-only .
  data F_VALFR type ZVCXI_XCS_VALFR read-only .
  data F_VALTO type ZVCXI_XCS_VALTO read-only .
  data R_FLUTE type ref to ZCL_VCXI_PCSSC_FLUTE read-only .
  data R_MSG type ref to /VCXI/CL_CKXM_MESSAGE .
  data S_MBOAR type ZVCXI_PCSSC_S_MBOAR read-only .
  data T_BODSC type ZVCXI_PCSSC_TT_BODSC read-only .
  data T_DESCR type /VCXI/CKX_TT_DESCR read-only .
  data T_PAPER type ZVCXI_PCSSC_TT_PAPER read-only .

  class-methods FREE_ALL
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IR_BOARD_G type ref to ZCL_VCXI_PCSSC_BOARD_G optional
      !IF_MBOAR type ZVCXI_PCSS_MBOAR optional
      !IF_TBOAR type ZVCXI_PCSS_TBOAR optional
    raising
      /VCXI/CX_CKX .
  methods COPY_BOARD_G
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
    returning
      value(RR_BOARD_G) type ref to ZCL_VCXI_PCSSC_BOARD_G
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IR_FLUTE type ref to ZCL_VCXI_PCSSC_FLUTE
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
    returning
      value(RR_BOARD_G) type ref to ZCL_VCXI_PCSSC_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods DO_CHECK
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_DATE
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_DATE type DATS
    returning
      value(RR_BOARD_G) type ref to ZCL_VCXI_PCSSC_BOARD_G
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BY_DATE_RANGE
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_VALFR type ZVCXI_XCS_VALFR
      !IF_VALTO type ZVCXI_XCS_VALTO
    returning
      value(RT_R_BOARD_G) type ZVCXI_PCSSC_TT_R_BOARD_G
    raising
      /VCXI/CX_CKX .
  methods INIT_ALL_BOARDS
    raising
      /VCXI/CX_CKX .
  methods SET_BOARD
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
    raising
      /VCXI/CX_CKX .
  methods SET_BODSC
    importing
      !IF_IDEST type ZVCXI_PCSS_IDEST
      !IF_BODSC type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods SET_PAPER
    importing
      !IS_PAPER type ZVCXI_PCSSC_S_PAPER
    raising
      /VCXI/CX_CKX .
  methods SET_STARC
    importing
      !IF_STARC type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods SET_VALFR
    importing
      !IF_VALFR type DATS
    raising
      /VCXI/CX_CKX .
  methods SET_VALTO
    importing
      !IF_VALTO type DATS
    raising
      /VCXI/CX_CKX .
protected section.

  class-data:
    T_TC201  type table of ZVCXI_PCS_TC201 .
  class-data:
    T_TC220  type table of ZVCXI_PCS_TC220 .
  class-data:
    T_TC220T type table of ZVCXI_PCS_TC220T .

  methods CHECK_OBLIG_BPMAT
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_PAPER
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_STARC
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_VALFR
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_VALFR_VALTO .
  methods CONSTRUCTOR
    importing
      !IF_GBOGV type ZVCXI_PCSSC_GBOGV
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods CHECK_FLUTE
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_MBOAR
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods CHECK_TBOAR
    importing
      !IF_IGNORE_BSAVI type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type ABAP_BOOL .
  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    importing
      !IF_TBOAR type ZVCXI_PCSS_TBOAR
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IR_FLUTE type ref to ZCL_VCXI_PCSSC_FLUTE
    raising
      /VCXI/CX_CKX .
  methods LOAD_BODSC
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_BOARD_G definition
class ZCL_VCXI_PCSSC_BOARD_G implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

*** Create Menu
  create object RR_MENU.

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_CHECK.
      ME->HANDLE_CHECK( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move C_CDOCL_BOARD_G                     to EF_CDOCL.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_G=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_G=>C_ACTVT_EDIT
                                      IR_BOARD_G = ME ).

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LF_MBOAR type STRING,
         LF_VALFR type CHAR10,
         LF_VALTO type CHAR10.

  concatenate '(' ME->S_MBOAR-MBOAR ')' into LF_MBOAR.

  write ME->F_VALFR to LF_VALFR.
  write ME->F_VALTO to LF_VALTO.

  concatenate ME->F_BOARD LF_MBOAR LF_VALFR '-' LF_VALTO into RF_DESCR separated by SPACE.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GBOGV to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_BOARD to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GBOGV    type        ZVCXI_PCSSC_GBOGV.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_BOARD_G  type ref to ZCL_VCXI_PCSSC_BOARD_G.

  check IF_GUID is not initial.

  read table ZCL_VCXI_PCSSC_BOARD_G=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GBOGV.
*** Get new Instance
    create object LR_BOARD_G
      exporting
        IF_GBOGV = LF_GBOGV.

    move LR_BOARD_G ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method CHECK_AUTH.

  data:  LF_MBOAR  type ZVCXI_PCSS_MBOAR,
         LF_TBOAR  type ZVCXI_PCSS_TBOAR,
         LF_MSGV1  type SYMSGV,
         LF_MSGV2  type SYMSGV,
         LF_MSGV3  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Get Board Mode and Type
  if IR_BOARD_G is bound.
    move IR_BOARD_G->S_MBOAR-MBOAR to LF_MBOAR.
    move IR_BOARD_G->F_TBOAR       to LF_TBOAR.
  elseif IF_MBOAR is not initial and
         IF_TBOAR is not initial.
    move IF_MBOAR to LF_MBOAR.
    move IF_TBOAR to LF_TBOAR.
  else.
    raise exception type /VCXI/CX_CKX.
  endif.

***--------------------------------------------------------------------------------------
*** Check Authority for Board Customizing
    authority-check object 'Z_PC_BOARG'
             id 'ACTVT'       field IF_ACTVT
             id 'Z_PC_MBOAR'  field LF_MBOAR
             id 'Z_PC_TBOAR'  field LF_tBOAR.


***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

*** No authorization to &1 Global Board Grade with Mode: &2 and Type &3.
    move LF_MBOAR to LF_MSGV2.
    move LF_TBOAR to LF_MSGV3.
    raise exception type /VCXI/CX_CKX
       exporting
         F_MSGTY = 'E'
         F_MSGID = 'ZVCXI_PCSSC'
         F_MSGNO = '140'
         F_MSGV1 = LF_MSGV1
         F_MSGV2 = LF_MSGV2
         F_MSGV3 = LF_MSGV3.
  endif.

endmethod.
method CHECK_FLUTE.

  data:  LF_FLUTE    type ZVCXI_PCS_FLUTE,
         LF_MSGTY    type SYMSGTY.

  if ME->R_FLUTE is bound.
    select single FLUTE
           from ZVCXI_PCS_TC210
           into LF_FLUTE
           where FLUTE = ME->R_FLUTE->F_FLUTE.
  endif.

  if SY-SUBRC ne 0 or
     ME->R_FLUTE is not bound.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** The Flute does not exist.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '160' ).
  endif.

endmethod.
method CHECK_MBOAR.

  data:  LF_MBOAR    type ZVCXI_PCSS_MBOAR,
         LF_MSGTY    type SYMSGTY.

  select single MBOAR
         from ZVCXI_PCS_TC201
         into LF_MBOAR
         where MBOAR = ME->S_MBOAR-MBOAR.

  if SY-SUBRC ne 0.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** The Board Mode &1 does not exist.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '158'
                            IF_MSGV1 = ME->S_MBOAR-MBOAR ).
  endif.

endmethod.
method CHECK_OBLIG_BPMAT.

  data:  LF_MSGTY           type SYMSGTY.
  data:  LS_PAPER           type ZVCXI_PCSSC_S_PAPER,
         LS_FSTRUCT         type ZVCXI_PCSSC_S_FSTRUCT.

*** Make sure Papers are maintained on Plant Level
  check ME->S_MBOAR-BPAPL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL and
        ME->R_FLUTE       is bound.

*** Search for obligatory Liners
  loop at ME->T_PAPER into LS_PAPER.
    read table ME->R_FLUTE->T_FSTRUCT with key BPAID = LS_PAPER-BPAID
                                          into LS_FSTRUCT.

    if LS_FSTRUCT-OBLIG eq ABAP_TRUE and LS_PAPER-BPMAT is initial.
      if IF_IGNORE_BSAVI ne ABAP_TRUE.
        if ME->F_BSAVI eq ABAP_TRUE.
          move 'W' to LF_MSGTY.
        else.
          move 'E' to LF_MSGTY.
        endif.
      else.
        move 'E' to LF_MSGTY.
      endif.

***   "Please check Paper Material of obligatory Liner &1."
      ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                              IF_MSGTY = LF_MSGTY
                              IF_MSGNO = '153'
                              IF_MSGV1 =  LS_PAPER-BPAID ).
    endif.
  endloop.

endmethod.
method CHECK_PAPER.

  data: LF_MSGTY      type SYMSGTY.
  data: LS_PAPER      type ZVCXI_PCSSC_S_PAPER,
        LS_BAPIRETURN type BAPIRETURN1.

*** Check all Papers
  loop at ME->T_PAPER into LS_PAPER
                     where BPMAT is not initial.
*** Check if Material is valid
    call function 'BAPI_MATERIAL_EXISTENCECHECK'
      exporting
        MATERIAL_LONG = conv BAPIMATALL-MATERIAL_LONG( LS_PAPER-BPMAT )
      importing
        RETURN        = LS_BAPIRETURN.

    if LS_BAPIRETURN-TYPE eq 'E'.
      if IF_IGNORE_BSAVI ne ABAP_TRUE.
        if ME->F_BSAVI eq ABAP_TRUE.
          move 'W' to LF_MSGTY.
        else.
          move 'E' to LF_MSGTY.
        endif.
      else.
        move 'E' to LF_MSGTY.
      endif.

***   The material &1 does not exist or is not activated.
      ME->R_MSG->ADD_MESSAGE( IF_MSGTY = LF_MSGTY
                              IF_MSGID = LS_BAPIRETURN-ID
                              IF_MSGNO = LS_BAPIRETURN-NUMBER
                              IF_MSGV1 = LS_BAPIRETURN-MESSAGE_V1
                              IF_MSGV2 = LS_BAPIRETURN-MESSAGE_V2
                              IF_MSGV3 = LS_BAPIRETURN-MESSAGE_V3
                              IF_MSGV4 = LS_BAPIRETURN-MESSAGE_V4 ).
    endif.
  endloop.

endmethod.
method CHECK_STARC.

  data:  LF_MSGTY           type SYMSGTY.

*** Make sure Starch is maintained global
  check ME->S_MBOAR-BSTAL eq ZCL_VCXI_PCSSC_BOARD_G=>C_BLEVL_GLOBAL.

  if ME->F_STARC is initial.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** There is no Starch maintained for this BoardID, please check.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '206' ).
  endif.

endmethod.
method CHECK_TBOAR.

  data:  LF_TBOAR    type ZVCXI_PCSS_TBOAR,
         LF_MSGTY    type SYMSGTY.

  select single TBOAR
         from ZVCXI_PCS_TC230
         into LF_TBOAR
         where TBOAR = ME->F_TBOAR.

  if SY-SUBRC ne 0.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** The Board Type &1 does not exist.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '159'
                            IF_MSGV1 = ME->F_TBOAR ).
  endif.

endmethod.
method CHECK_VALFR.

  data:  LF_GBOGV    type ZVCXI_PCSSC_GBOGV,
         LF_COUNT    type I,
         LF_MSGTY    type SYMSGTY.

  LF_GBOGV = ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

  select count(*)
         into LF_COUNT
         from ZVCXI_PCS_TD100
        where GBOGV ne LF_GBOGV
         and  BOARD eq ME->F_BOARD
         and  VALFR eq ME->F_VALFR
         and  MBOAR eq ME->S_MBOAR-MBOAR.

  if SY-SUBRC eq 0.
    if IF_IGNORE_BSAVI ne ABAP_TRUE.
      if ME->F_BSAVI eq ABAP_TRUE.
        move 'W' to LF_MSGTY.
      else.
        move 'E' to LF_MSGTY.
      endif.
    else.
      move 'E' to LF_MSGTY.
    endif.

*** A Version with the same Valid From Date already exists.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = LF_MSGTY
                            IF_MSGNO = '152' ).
  endif.

endmethod.
method CHECK_VALFR_VALTO.

*** Check if Valid From smaller than Valid To Date
  if ME->F_VALTO <= ME->F_VALFR.
*** The Valid To Date is smaller than the Valid From Date, please check.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSSC'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '154' ).
  endif.

endmethod.
  method CLASS_CONSTRUCTOR.

***------------------------------------------------------------------
*** Load Board Modes
    select *
           into table T_TC201
           from ZVCXI_PCS_TC201.

***------------------------------------------------------------------
*** Get defined Global Description
    select *
            into table T_TC220
            from ZVCXI_PCS_TC220
           where MDEST eq C_BLEVL_GLOBAL
           order by IDEST.
    if T_TC220 is not initial.
***   Description Type Description
      select *
             into table T_TC220T
             from ZVCXI_PCS_TC220T
             for all entries in T_TC220
            where IDEST eq T_TC220-IDEST.
    endif.

  endmethod.
method CONSTRUCTOR.

  data:          LR_CX_CKX     type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***   Set Board Version GUID
      move IF_GBOGV      to ME->F_GBOGV.

      if IF_NEW ne ABAP_TRUE.
***------------------------------------------------------------------------------------------------
***     Load from DB for existing Boards
        ME->LOAD_FROM_DB( ).
      endif.

***------------------------------------------------------------------------------------------------
***   Define Type of Object
      move C_TOOBJ_BOARD to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***   Create Message
      create object ME->R_MSG.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to ZCL_VCXI_PCSSC_BOARD_G=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )     to  <S_INSTANCE>-GUID.
      move ME                                      ?to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method COPY_BOARD_G.

  data:          LF_GUID             type           /VCXI/CKX_GUID,
                 LF_WERKS            type           WERKS_D.
  data:          LS_BOARD_P          type           ZVCXI_PCS_TD110.
  data:          LT_BOARD_P          type table of  ZVCXI_PCS_TD110.
  data:          LR_BOARD_P          type ref to    ZCL_VCXI_PCSSC_BOARD_P,
                 LR_BOARD_P_NEW      type ref to    ZCL_VCXI_PCSSC_BOARD_P.
  field-symbols: <S_PAPER>           type           ZVCXI_PCSSC_S_PAPER.


***----------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_G=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_BOARD_G=>C_ACTVT_CREATE
                                      IF_MBOAR = IF_MBOAR
                                      IF_TBOAR = IF_TBOAR ).

***--------------------------------------------------------------------------------------
*** Create copy of current Instance
  RR_BOARD_G = ZCL_VCXI_PCSSC_BOARD_G=>CREATE( IF_BOARD   = IF_BOARD
                                               IR_FLUTE   = ME->R_FLUTE
                                               IF_MBOAR   = IF_MBOAR
                                               IF_TBOAR   = IF_TBOAR ).

*** Move Values from old Instance to new Instance and Set new Standard ValidFrom/To Date
  move SY-DATUM       to RR_BOARD_G->F_VALFR.
  move '99991231'     to RR_BOARD_G->F_VALTO.
  move ME->T_BODSC    to RR_BOARD_G->T_BODSC.

*** Copy Depending on Board Mode Settings
*** Global Starch
  if RR_BOARD_G->S_MBOAR-BSTAL eq C_BLEVL_GLOBAL and
     ME->S_MBOAR-BSTAL         eq C_BLEVL_GLOBAL.
    move ME->F_STARC    to RR_BOARD_G->F_STARC.
  endif.

*** Copy Paper Structure
  move ME->T_PAPER    to RR_BOARD_G->T_PAPER.

  loop at RR_BOARD_G->T_PAPER assigning <S_PAPER>.
*** Remove Paper Material if it is not Global -> Global
    if RR_BOARD_G->S_MBOAR-BPAPL ne C_BLEVL_GLOBAL or
       ME->S_MBOAR-BPAPL         ne C_BLEVL_GLOBAL.
      clear <S_PAPER>-BPMAT.
    endif.

*** Remove WaxCode if it is not Global -> Global
    if RR_BOARD_G->S_MBOAR-BWAXL ne C_BLEVL_GLOBAL or
       ME->S_MBOAR-BWAXL         ne C_BLEVL_GLOBAL.
      clear <S_PAPER>-WAXCO.
    endif.

  endloop.

*** Save the new Global Versions
  RR_BOARD_G->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_G=>C_FCODE_BOARD_G_SAVE ).

***--------------------------------------------------------------------------------------
*** Copy of Plant Version
  select * from ZVCXI_PCS_TD110
           into table LT_BOARD_P
         where GBOGV eq ME->F_GBOGV.

*** Sort by Plant and Dates to get current one
  sort LT_BOARD_P descending by WERKS VALFR VALTO.

  loop at LT_BOARD_P into LS_BOARD_P.
    move LS_BOARD_P-GBOPV to LF_GUID.
    move ZCL_VCXI_PCSSC_BOARD_P=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ) ?to LR_BOARD_P.

*** Make sure to copy Version for all maintained Plants
    if LF_WERKS is initial
    or LF_WERKS ne LR_BOARD_P->F_WERKS.
      LR_BOARD_P_NEW = LR_BOARD_P->COPY_BOARD_P( IF_WERKS   = LR_BOARD_P->F_WERKS
                                                 IR_BOARD_G = RR_BOARD_G ).
      move LR_BOARD_P->F_WERKS to LF_WERKS.
    endif.

    LR_BOARD_P_NEW->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_PCSSC_BOARD_P=>C_FCODE_BOARD_P_SAVE ).
    LR_BOARD_P_NEW->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
  endloop.

*** Relock of Global
  RR_BOARD_G->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

endmethod.
method CREATE.

  data:  LF_GBOGV    type        ZVCXI_PCSSC_GBOGV.

***----------------------------------------------------------------------------
*** Make sure that the needed basic data is provided
  if IR_FLUTE is not bound.
*** No Flute provided.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '101'
        IF_MSGV1 = 'Flute'(010) ).
  endif.
  if IF_MBOAR is initial.
*** No Board Mode provided.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '101'
        IF_MSGV1 = 'Board Mode'(011) ).
  endif.
  if IF_TBOAR is initial.
*** No Board Type provided.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '101'
        IF_MSGV1 = 'Board Type'(012) ).
  endif.

***----------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_G=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_BOARD_G=>C_ACTVT_CREATE
                                      IF_MBOAR = IF_MBOAR
                                      IF_TBOAR = IF_TBOAR ).

***----------------------------------------------------------------------------
*** Get new GUID
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GBOGV.

*** Create new Board
  create object RR_BOARD_G
    exporting
      IF_GBOGV = LF_GBOGV
      IF_NEW   = ABAP_TRUE.

***----------------------------------------------------------------------------
*** Initialization after creation of new object
  RR_BOARD_G->INIT_AFTER_CREATE( IF_TBOAR = IF_TBOAR
                                 IF_MBOAR = IF_MBOAR
                                 IR_FLUTE = IR_FLUTE ).
*** Save BoardID
  move IF_BOARD to RR_BOARD_G->F_BOARD.

endmethod.
method DO_CHECK.

  ME->R_MSG->INIT_MSG( ).

***----------------------------------------------------------------------------
*** Check Board Mode
  ME->CHECK_MBOAR( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check Board Type
  ME->CHECK_TBOAR( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check Flute
  ME->CHECK_FLUTE( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check obligatory Paper Materials
  ME->CHECK_OBLIG_BPMAT( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check Papers
  ME->CHECK_PAPER( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check if Version with same Valfr already exists
  ME->CHECK_VALFR( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

*** Check that Valfr is smaller than Valto
  ME->CHECK_VALFR_VALTO( ).

*** Check Starch is maintained
  ME->CHECK_STARC( IF_IGNORE_BSAVI = IF_IGNORE_BSAVI ).

endmethod.
  method FREE_ALL.

    data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.

*** Free all Plant Instances
    ZCL_VCXI_PCSSC_BOARD_P=>FREE_ALL( ).

*** Free all Global Instances
    loop at T_INSTANCE into LS_INSTANCE where R_OBJECT is instance of ZCL_VCXI_PCSSC_BOARD_G.
      cast ZCL_VCXI_PCSSC_BOARD_G( LS_INSTANCE-R_OBJECT )->HANDLE_FREE( ).
    endloop.

  endmethod.
method GET_INSTANCE_BY_DATE.

  data: LF_DATE type          STRING.


*** Get all Versions of Board
  select GBOGV, VALFR
          into table @data(LT_TD100)
          from ZVCXI_PCS_TD100
         where BOARD eq @IF_BOARD
           and MBOAR eq @IF_MBOAR
           and VALFR <= @IF_DATE
           and VALTO >= @IF_DATE.
  if SY-SUBRC ne 0.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_DATE
      importing
        DATE_EXTERNAL            = LF_DATE
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** No Global Board Version with ID & (Mode &) valid at Date & exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '102'
        IF_MSGV1 = IF_BOARD
        IF_MSGV2 = IF_MBOAR
        IF_MSGV3 = LF_DATE ).
  endif.

*** Find best matching Version and return Instance
  sort LT_TD100 by VALFR descending.
  RR_BOARD_G ?= ZCL_VCXI_PCSSC_BOARD_G=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv #( LT_TD100[ 1 ]-GBOGV ) ).

endmethod.
method GET_INSTANCE_BY_DATE_RANGE.

  data:  LF_GUID     type          /VCXI/CKX_GUID,
         LF_VALFR    type          STRING,
         LF_VALTO    type          STRING,
         LF_DATE     type          STRING.
  data:  LS_TD100    type          ZVCXI_PCS_TD100.
  data:  LT_TD100    type table of ZVCXI_PCS_TD100.
  data:  LR_BOARD_G  type ref to   ZCL_VCXI_PCSSC_BOARD_G.

*** Get all Versions of Board
  select *
          into table LT_TD100
          from ZVCXI_PCS_TD100
         where BOARD eq IF_BOARD
           and MBOAR eq IF_MBOAR
          and  VALFR >= IF_VALFR
          and  VALTO <= IF_VALTO.
  if SY-SUBRC ne 0.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_VALFR
      importing
        DATE_EXTERNAL            = LF_VALFR
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC <> 0.
      move IF_VALFR to LF_VALFR.
    endif.
    call function 'CONVERT_DATE_TO_EXTERNAL'
      exporting
        DATE_INTERNAL            = IF_VALTO
      importing
        DATE_EXTERNAL            = LF_VALTO
      exceptions
        DATE_INTERNAL_IS_INVALID = 1
        others                   = 2.
    if SY-SUBRC <> 0.
      move IF_VALTO to LF_VALTO.
    endif.
    concatenate LF_VALFR LF_VALTO into LF_DATE separated by '-'.
*** No Global Board Version with ID & (Mode &) valid at Date & exists.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '102'
        IF_MSGV1 = IF_BOARD
        IF_MSGV2 = IF_MBOAR
        IF_MSGV3 = LF_DATE ).
  endif.

*** Find best matching Version
  sort LT_TD100 by VALFR descending.
  loop at LT_TD100 into LS_TD100.

*** Get Instance
    move LS_TD100-GBOGV to LF_GUID.
    LR_BOARD_G ?= ZCL_VCXI_PCSSC_BOARD_G=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

    append LR_BOARD_G to RT_R_BOARD_G.
  endloop.

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CHECK.

*** Check the Instance
  ME->DO_CHECK( ).

endmethod.
method HANDLE_DELETE.

  data:  LF_COUNT type I.

***----------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_PCSSC_BOARD_G=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_PCSSC_BOARD_G=>C_ACTVT_DELETE
                                      IR_BOARD_G = ME ).

*** If not locked try to lock
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Check if Plant Versions exist
  select count(*)
         into LF_COUNT
         from ZVCXI_PCS_TD110
        where GBOGV eq ME->F_GBOGV.
  if SY-SUBRC eq 0.
*** Global can not be delete as long as there are Plant Versions assigned.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_PCSSC'
                                          IF_MSGNO = '110' ).
  endif.

*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete T_INSTANCE where R_OBJECT eq ME.

*** Unlock
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

*** Mark as Deleted to Hide
  move ABAP_TRUE to ME->F_DELETED.

endmethod.
method HANDLE_SAVE.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

  if ME->F_DELETED ne ABAP_TRUE.
*** Check for Incompletion before Save
    ME->DO_CHECK( ).
    read table ME->R_MSG->T_MSG with key MSGTY = 'E'
                                transporting no fields.
    if SY-SUBRC eq 0.
***   Not saved due to incompletion.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_PCSSC'
                                            IF_MSGNO = '004' ).
    endif.
  endif.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Save Global Board
    call function 'ZVCXI_PCSSC_DB_SAVE_BOARD_G'
      in update task
      exporting
        IF_GBOGV = ME->F_GBOGV
        IF_BOARD = ME->F_BOARD
        IF_VALFR = ME->F_VALFR
        IF_VALTO = ME->F_VALTO
        IF_MBOAR = ME->S_MBOAR-MBOAR
        IF_FLUTE = ME->R_FLUTE->F_FLUTE
        IF_STARC = ME->F_STARC
        IF_TBOAR = ME->F_TBOAR
        IS_LOG   = ME->S_LOG
        IT_BODSC = ME->T_BODSC
        IT_PAPER = ME->T_PAPER.
  else.
*** Delete Flute
    call function 'ZVCXI_PCSSC_DB_DEL_BOARD_G'
      in update task
      exporting
        IF_GBOGV = ME->F_GBOGV.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

*** Do Commit
  commit work and wait.

*** Relock
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

endmethod.
method INIT_AFTER_CREATE.

  data:          LS_TC201   type          ZVCXI_PCS_TC201.

***----------------------------------------------------------------------------
*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Set Board Type and Mode
  move IF_TBOAR to ME->F_TBOAR.

*** Set Flute
  move IR_FLUTE to ME->R_FLUTE.

*** Init Table for Global Paper Settings
  ME->R_FLUTE->SORT_PAPER( changing CT_PAPER = ME->T_PAPER ).

*** Load Description Board
  ME->LOAD_BODSC( ).

*** Load Board Mode
  select single *
         into LS_TC201
         from ZVCXI_PCS_TC201
        where MBOAR eq IF_MBOAR.
  move-corresponding LS_TC201       to ME->S_MBOAR.
  move               LS_TC201-BSAVI to ME->F_BSAVI.

*** Set default Validity Date
  move SY-DATUM     to ME->F_VALFR.
  move '99991231'   to ME->F_VALTO.

***----------------------------------------------------------------------------
*** Write Create Log Entry
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

*** Raise event for Creation
  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method INIT_ALL_BOARDS.

  data:  LF_GBOGV  type          ZVCXI_PCSSC_GBOGV,
         LF_GUID   type          /VCXI/CKX_GUID.
  data:  LT_GBOGV  type table of ZVCXI_PCSSC_GBOGV.

  select GBOGV into table LT_GBOGV
               from ZVCXI_PCS_TD100.

*** Get Instance for all Machine Groups
  loop at LT_GBOGV into LF_GBOGV.
    move LF_GBOGV to LF_GUID.
    ZCL_VCXI_PCSSC_BOARD_G=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  endloop.

endmethod.
method LOAD_BODSC.

  data: LS_TD101  type          ZVCXI_PCS_TD101,
        LS_TC220  type          ZVCXI_PCS_TC220,
        LS_TC220T type          ZVCXI_PCS_TC220T.
  data: LT_TD101  type table of ZVCXI_PCS_TD101.
  field-symbols: <S_BODSC>  type          ZVCXI_PCSSC_S_BODSC.

  free:  ME->T_BODSC.
  check T_TC220 is not initial.

***------------------------------------------------------------------
*** Get Global Description of Version
  select *
         into table LT_TD101
         from ZVCXI_PCS_TD101
         for all entries in T_TC220
        where GBOGV eq ME->F_GBOGV
         and  IDEST eq T_TC220-IDEST.

***------------------------------------------------------------------
  loop at T_TC220 into LS_TC220.
*** Get all maintained Languages
    loop at LT_TD101 into LS_TD101 where IDEST eq LS_TC220-IDEST.
      append initial line to ME->T_BODSC assigning <S_BODSC>.
      move LS_TC220-IDEST  to <S_BODSC>-IDEST.
      move LS_TD101-LANGU  to <S_BODSC>-LANGU.
      move LS_TD101-DESCR  to <S_BODSC>-DESCR.
    endloop.

*** Initial entry in System Language
    read table LT_TD101 into LS_TD101 with key IDEST = LS_TC220-IDEST
                                               LANGU = SY-LANGU.
    if SY-SUBRC ne 0.
***   Add initial entry
      append initial line to ME->T_BODSC assigning <S_BODSC>.
      move LS_TC220-IDEST  to <S_BODSC>-IDEST.
      move SY-LANGU        to <S_BODSC>-LANGU.
    endif.
  endloop.

*** Add Description of Description Type
  loop at ME->T_BODSC assigning <S_BODSC>.
    read table T_TC220T into LS_TC220T with key IDEST = <S_BODSC>-IDEST
                                                LANGU = <S_BODSC>-LANGU.
    if SY-SUBRC eq 0.
      move LS_TC220T-DESCR to <S_BODSC>-IDEST_DESCR.
    endif.
  endloop.

endmethod.
method LOAD_FROM_DB.

  data:          LF_GUID    type                   /VCXI/CKX_GUID.
  data:          LS_TD100   type                   ZVCXI_PCS_TD100,
                 LS_TD102   type                   ZVCXI_PCS_TD102,
                 LS_TC201   type                   ZVCXI_PCS_TC201.
  data:          LT_TD102   type standard table of ZVCXI_PCS_TD102.
  data:          LR_CX_CKX  type ref to            /VCXI/CX_CKX.
  field-symbols: <S_PAPER>  type                   ZVCXI_PCSSC_S_PAPER.


  free: ME->F_BOARD,
        ME->F_TBOAR,
        ME->F_VALFR,
        ME->F_VALTO,
        ME->F_STARC,
        ME->S_MBOAR,
        ME->S_LOG,
        ME->T_PAPER,
        ME->F_CHANGED.

***----------------------------------------------------------------------------
*** Load Header Board
  select single *
         into LS_TD100
         from ZVCXI_PCS_TD100
        where GBOGV eq ME->F_GBOGV.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Board
  move LS_TD100-BOARD  to ME->F_BOARD.
  move LS_TD100-TBOAR  to ME->F_TBOAR.
  move LS_TD100-MBOAR  to ME->S_MBOAR-MBOAR.
  move LS_TD100-VALFR  to ME->F_VALFR.
  move LS_TD100-VALTO  to ME->F_VALTO.
  move LS_TD100-STARC  to ME->F_STARC.

*** Load Flute
  move LS_TD100-FLUTE to LF_GUID.
  try.
      ME->R_FLUTE ?= ZCL_VCXI_PCSSC_FLUTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
  endtry.

*** Log
  move-corresponding LS_TD100       to ME->S_LOG.

***----------------------------------------------------------------------------
*** Load Description Board
  ME->LOAD_BODSC( ).

***----------------------------------------------------------------------------
*** Load Board Mode
  LS_TC201 = value #( T_TC201[ MBOAR = LS_TD100-MBOAR ] optional ).
  move-corresponding LS_TC201       to ME->S_MBOAR.
  move               LS_TC201-BSAVI to ME->F_BSAVI.

***----------------------------------------------------------------------------
*** Load Board Papers
  select *
         into table LT_TD102
         from ZVCXI_PCS_TD102
        where GBOGV eq ME->F_GBOGV.
  loop at LT_TD102 into LS_TD102.
    append initial line to ME->T_PAPER assigning <S_PAPER>.
    move-corresponding LS_TD102 to <S_PAPER>.
  endloop.
  if ME->R_FLUTE is bound.
    ME->R_FLUTE->SORT_PAPER( changing CT_PAPER = ME->T_PAPER ).
  endif.

endmethod.
method SET_BOARD.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Board
  if IF_BOARD ne F_BOARD.
    move IF_BOARD to F_BOARD.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method SET_BODSC.

    field-symbols: <S_BODSC> type ZVCXI_PCSSC_S_BODSC.


*** Check of the Lock-Status of the Object
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Description
    read table ME->T_BODSC assigning <S_BODSC> with key IDEST = IF_IDEST
                                                        LANGU = IF_LANGU.
    if SY-SUBRC ne 0.
***   Description Type &1 does not exist.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_PCSSC'
                                            IF_MSGNO = '103'
                                            IF_MSGV1 = IF_IDEST ).
    endif.

*** Only if changed
    check IF_BODSC ne <S_BODSC>-DESCR.

*** Set Description
    move IF_BODSC  to <S_BODSC>-DESCR.

*** Raise Changed Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_PCS_D100E'
          exporting
            GBOGV          = ME->F_GBOGV
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
        call function 'DEQUEUE_EZVCXI_PCS_D100E'
          exporting
            GBOGV = ME->F_GBOGV.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_PAPER.

  data:          LT_PAPER  type          ZVCXI_PCSSC_TT_PAPER.
  field-symbols: <S_PAPER> type          ZVCXI_PCSSC_S_PAPER.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Global Paper Settings
  move ME->T_PAPER to LT_PAPER.

  clear: ME->T_PAPER.

  loop at LT_PAPER assigning <S_PAPER> where BPAID = IS_PAPER-BPAID.
    move IS_PAPER-BPMAT       to <S_PAPER>-BPMAT.
    move IS_PAPER-WAXCO       to <S_PAPER>-WAXCO.
  endloop.

  move LT_PAPER to ME->T_PAPER.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_STARC.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Starch Code
  if IF_STARC ne F_STARC.
    move IF_STARC to F_STARC.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_VALFR.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Valid From Date
  if IF_VALFR ne F_VALFR.
    move IF_VALFR to F_VALFR.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_VALTO.

*** Make sure that object is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set new Valid To Date
  if IF_VALTO ne F_VALTO.
    move IF_VALTO to F_VALTO.
  endif.

*** Raise change event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
