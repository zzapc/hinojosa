
class ZCL_VCXI_P4M_MBQ_BL_PRCOMP definition
  public
  inheriting from ZCL_VCXI_PXM_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_AREA_WGT type ZVCXI_XCS_ISVCE value 'AREA_WGT' ##NO_TEXT.
  constants C_ISVCE_COMP_P4 type ZVCXI_XCS_ISVCE value 'COMP_P4' ##NO_TEXT.
  constants C_ISVCE_PRFG type ZVCXI_XCS_ISVCE value 'PRFG' ##NO_TEXT.
  constants C_ISVCE_PRPART type ZVCXI_XCS_ISVCE value 'PRPART' ##NO_TEXT.
  constants C_ISVCE_SPLR type ZVCXI_XCS_ISVCE value 'SPLR' ##NO_TEXT.
  constants C_SOKEY_PRFG type ZVCXI_XCM_MBQ_SOKEY value 'P4_PRFG' ##NO_TEXT.
  constants C_SOKEY_PRFG_ND type ZVCXI_XCM_MBQ_SOKEY value 'P4_PRFG_ND' ##NO_TEXT.
  constants C_SOKEY_PRPART type ZVCXI_XCM_MBQ_SOKEY value 'P4_PRPART' ##NO_TEXT.

  methods ADJUST_SVCEL_PRPART
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_PRPART
    importing
      !IR_SVCEL_PRPART type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods ADJUST_SVCEL_AREA_WGT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_PRFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_SPLR
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_PRFG
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ER_EA_PRFG type ref to ZCL_VCXI_P4SS_EA_PRFG
      !ER_SVCEL_SPLR type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_PRFG) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_SPLR
    importing
      !IR_SVCEL_PARENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RR_SVCEL_SPLR) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .

  methods ADJUST_SVCEL
    redefinition .
  methods GET_ACTDAT_MAT
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_MATDAT_MAKT
    redefinition .
  methods GET_MATDAT_MARA
    redefinition .
private section.
endclass. "ZCL_VCXI_P4M_MBQ_BL_PRCOMP definition
class ZCL_VCXI_P4M_MBQ_BL_PRCOMP implementation.
  method ADJUST_SVCEL.

*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
      when C_ISVCE_PRFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_PRFG( exporting IR_SVCEL         = IR_SVCEL
                                         IR_IDAT_SVC      = IR_IDAT_SVC
                                         IT_MATLI         = IT_MATLI
                                         IT_DMSLI         = IT_DMSLI
                               importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                               changing  CS_SVCEL         = CS_SVCEL ).

      when C_ISVCE_SPLR.
***     Adjust Supplier Information
        ME->ADJUST_SVCEL_SPLR( exporting IR_SVCEL         = IR_SVCEL
                                         IR_IDAT_SVC      = IR_IDAT_SVC
                                         IT_MATLI         = IT_MATLI
                                         IT_DMSLI         = IT_DMSLI
                               importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                               changing  CS_SVCEL         = CS_SVCEL ).

      when C_ISVCE_AREA_WGT.
***     Adjust Area and Weight
        ME->ADJUST_SVCEL_AREA_WGT( exporting IR_SVCEL         = IR_SVCEL
                                             IR_IDAT_SVC      = IR_IDAT_SVC
                                             IT_MATLI         = IT_MATLI
                                             IT_DMSLI         = IT_DMSLI
                                   importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                   changing  CS_SVCEL         = CS_SVCEL ).

    endcase.

  endmethod.
  method ADJUST_SVCEL_AREA_WGT.

    append value #( IEVNS = 10
                    IEVNT = ZCL_VCXI_P4SS_PR_AREA_WGT=>C_IEVNT_O_AREA_CHANGED )   to CS_SVCEL-T_SVCEV.
    append value #( IEVNS = 20
                    IEVNT = ZCL_VCXI_P4SS_PR_AREA_WGT=>C_IEVNT_O_WEIGHT_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_PRFG.

    data: LF_MATNR type MATNR.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_SPLR      type ref to ZCL_VCXI_P4SS_EA_SPLR.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Remove Customer Material Info
    delete CS_SVCEL-T_SVCPA where PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDMAT
                             or   PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDPTX.

*** Switch Procurement Option to "Direct Procurement"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P4SS_PR_PRFG=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P4SS_PR_PRFG=>C_PARID_PURCH ] to <S_PARAM>.

***   Get Supplier Information
      LR_EA_SPLR ?= ME->GET_SVCEL_SPLR( IR_SVCEL_PARENT = IR_SVCEL )->GET_CLSEA( ).
      if <S_PARAM>-ATWRT eq ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE and
         LR_EA_SPLR->GET_LIFNR( ) is not initial.
        <S_PARAM>-ATWRT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_PURCH_DIRECT.
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      endif.
    endif.

  endmethod.
  method ADJUST_SVCEL_PRPART.

    data: LF_MATNR type MATNR.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.


*** No adjustments for "non-dummies"
    if not cast ZCL_VCXI_P4SS_EA_PRPART( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Switch Procurement Option to "Direct Procurement"/"Stock"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P4SS_PR_PRPART=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P4SS_PR_PRPART=>C_PARID_PURCH ] to <S_PARAM>.

      if <S_PARAM>-ATWRT eq ZCL_VCXI_P4SS_PR_PRPART=>C_PURCH_DIRECT_PRICE and
         ME->GET_SVCEL_SPLR( IR_SVCEL_PARENT = IR_SVCEL )->GET_PARAM( IF_PARID = ZCL_VCXI_P4SS_PR_SPLR=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P4SS_PR_PRPART=>C_PARID_FPTOS ]-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                            else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

  endmethod.
  method ADJUST_SVCEL_SPLR.

    data: LR_EA_SPLR      type ref to ZCL_VCXI_P4SS_EA_SPLR.


***--------------------------------------------------------------------------------------
*** Get Supplier Information
    LR_EA_SPLR ?= IR_SVCEL->GET_CLSEA( ).

*** Skip Price Scales if switched to Direct Procurement
    if LR_EA_SPLR->GET_PURCH( ) eq ZCL_VCXI_P4SS_PR_PRFG=>C_PURCH_DIRECT_PRICE and
       LR_EA_SPLR->GET_LIFNR( ) is not initial.

***   Remove Information which is covered by Purchase Info Record
      delete CS_SVCEL-T_SVCPA where PARID eq ZCL_VCXI_P4SS_PR_SPLR=>C_PARID_BSTME
                                or  PARID eq ZCL_VCXI_P4SS_PR_SPLR=>C_PARID_IDNLF
                                or  PARID eq ZCL_VCXI_P4SS_PR_SPLR=>C_PARID_UMBSN
                                or  PARID eq ZCL_VCXI_P4SS_PR_SPLR=>C_PARID_UMBSZ.

***   Skip processing of Children
      EF_SKIP_CHILDREN = ABAP_TRUE.
    endif.

  endmethod.
  method ANALYZE.

    data: LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY,
          LF_MATNR type MATNR.
    data: LR_SVCEL_PRFG type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_PRFG    type ref to ZCL_VCXI_P4SS_EA_PRFG,
          LR_SVCEL      type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Procurement Finished Good
    LR_SVCEL_PRFG = ME->GET_SVCEL_PRFG( exporting IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP
                                        importing ER_EA_PRFG     = LR_EA_PRFG ).
    check LR_EA_PRFG    is bound and
          LR_SVCEL_PRFG is bound.


*** No new material for "non-dummies"
    if not cast ZCL_VCXI_P4SS_EA_PRFG( LR_SVCEL_PRFG->GET_CLSEA( ) )->IS_DUMMY( ).
      LF_SOKEY = C_SOKEY_PRFG_ND.
      LF_MATNR = cast ZCL_VCXI_P4SS_EA_PRFG( LR_SVCEL_PRFG->GET_CLSEA( ) )->GET_MATNR( ).
    else.
      LF_SOKEY = C_SOKEY_PRFG.
    endif.

***--------------------------------------------------------------------------------------
*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = LR_SVCEL_PRFG
                             IF_WERKS        = LR_EA_PRFG->GET_WERKS( )
                             IF_MATNR        = LF_MATNR
                   changing  CT_MATLI        = ET_MATLI ).

  endmethod.
  method ANALYZE_PRPART.

    data(LR_EA_PRPART) = cast ZCL_VCXI_P4SS_EA_PRPART( IR_SVCEL_PRPART->GET_CLSEA( ) ).

*** No new material for "non-dummies"
    if not LR_EA_PRPART->IS_DUMMY( ).
      return.
    endif.

****--------------------------------------------------------------------------------------
*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_PRPART
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_PRPART
                             IF_WERKS        = LR_EA_PRPART->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method GET_ACTDAT_MAT.

    field-symbols: <S_ACTDAT_MAT> type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.


    RR_ACTDAT = SUPER->GET_ACTDAT_MAT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                                 IF_DISST        = IF_DISST
                                       importing EF_SKIP         = EF_SKIP ).

    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MAT>.

*** Define as External Procurement
    <S_ACTDAT_MAT>-T_MATDAT_MARC[ PLANT = IF_WERKS ]-PROC_TYPE = 'F'.

  endmethod.
  method GET_ACTDAT_MMEXT.

    data: LR_EA_PRPART   type ref to ZCL_VCXI_P4SS_EA_PRPART,
          LR_EA_AREA_WGT type ref to ZCL_VCXI_PXSS_EA_AREA_WGT.
    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.

    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Procurement Part
      when C_SOKEY_PRPART.
        LR_EA_PRPART ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

***     Get Area and Weight
        LR_EA_AREA_WGT = LR_EA_PRPART->GET_PRVDR_AREA_WGT( ).
        check LR_EA_AREA_WGT is bound.

***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_P4E_MM_MMEXT=>C_CNTXT_P4.    "Procurement
        <S_ACTDAT_MMEXT>-S_P4_EXTVAL = value #( S_HNDDIM = LR_EA_PRPART->GET_HNDDIM( )
                                                S_SBLAR  = LR_EA_AREA_WGT->GET_SBLAR( )
                                                S_SBLWT  = LR_EA_AREA_WGT->GET_SBLWT( )
                                                S_COUAR  = LR_EA_AREA_WGT->GET_COUAR( )
                                                S_COUWT  = LR_EA_AREA_WGT->GET_COUWT( )
                                                S_ADDWT  = LR_EA_AREA_WGT->GET_ADDWT( ) ).
    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    data: LF_PURCH type ZVCXI_XCS_PURCH.
    data: LT_PSCALE  type ZVCXI_XCS_TT_PSCALE.
    data: LR_EA_SPLR type ref to ZCL_VCXI_P4SS_EA_SPLR,
          LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
*** Get Material Business Object of Reference Material
    ZCL_VCXI_XCM_MBQ_CUST=>READ_REFMAT( exporting IF_SOKEY   = IF_SOKEY
                                                  IF_WERKS   = IF_WERKS
                                        importing ER_BOB_MAT = LR_BOB_MAT ).

    case IF_SOKEY.
***   Procurement Finished Good
      when C_SOKEY_PRFG.
***     Get Procurement Option
        LF_PURCH = cast ZCL_VCXI_P4SS_EA_PRFG( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_PURCH( ).

***   Procurement Part
      when C_SOKEY_PRPART.
***     Get Procurement Option
        LF_PURCH = cast ZCL_VCXI_P4SS_EA_PRPART( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_PURCH( ).

      when others.
        EF_SKIP = ABAP_TRUE.
        return.
    endcase.

***--------------------------------------------------------------------------------------
*** Skip if not "Direct Procurement & Price"
    EF_SKIP = cond #( when LF_PURCH ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE then ABAP_TRUE
                                                                                 else ABAP_FALSE ).
    check EF_SKIP ne ABAP_TRUE.

*** Get Supplier Information
    LR_EA_SPLR ?= ME->GET_SVCEL_SPLR( IR_SVCEL_PARENT = IR_SVCEL_SOURCE )->GET_CLSEA( ).
    <S_ACTDAT_PURIR>-LIFNR = LR_EA_SPLR->GET_LIFNR( ).

*** Skip if vendor is missing
    EF_SKIP = cond #( when <S_ACTDAT_PURIR>-LIFNR is initial then ABAP_TRUE
                                                             else ABAP_FALSE ).
    check EF_SKIP ne ABAP_TRUE.

*** Get Price Scale
    LT_PSCALE = LR_EA_SPLR->GET_PSCALE( ).

    <S_ACTDAT_PURIR>-EKORG = ME->GET_EKORG( IF_WERKS = IF_WERKS
                                            IF_LIFNR = <S_ACTDAT_PURIR>-LIFNR ).
    <S_ACTDAT_PURIR>-WERKS = IF_WERKS.
    <S_ACTDAT_PURIR>-EKGRP = LR_BOB_MAT->S_PLANTDATA-PUR_GROUP.

*** Purchasing Info Record: General Data
    <S_ACTDAT_PURIR>-IDNLF = LR_EA_SPLR->GET_IDNLF( ).
    <S_ACTDAT_PURIR>-BSTME = LR_EA_SPLR->GET_BSTME( ).
    LR_EA_SPLR->GET_UMBS( importing EF_UMBSZ = <S_ACTDAT_PURIR>-UMBSZ
                                    EF_UMBSN = <S_ACTDAT_PURIR>-UMBSN ).

*** Condition Scale Header
    <S_ACTDAT_PURIR>-KONWA = LT_PSCALE[ 1 ]-PRICE_CURR.  "Condition Currency
    <S_ACTDAT_PURIR>-KPEIN = LT_PSCALE[ 1 ]-PRICP.       "Condition Pricing Unit
    <S_ACTDAT_PURIR>-KMEIN = LT_PSCALE[ 1 ]-PRICP_UOM.   "Condition Unit
    <S_ACTDAT_PURIR>-KODATAB = value #( ME->R_BOB_SDOC->T_VBKD[ POSNR = ME->F_POSNR ]-PRSDT
                                        default ME->R_BOB_SDOC->T_VBKD[ POSNR = 00000 ]-PRSDT ).

*** Validity Data shouldn't be in the future
    <S_ACTDAT_PURIR>-KODATAB = cond #( when <S_ACTDAT_PURIR>-KODATAB ge SY-DATUM then SY-DATUM
                                                                                 else <S_ACTDAT_PURIR>-KODATAB ).

*** Condition Scale
    <S_ACTDAT_PURIR>-T_CONDSCALE = value #( for LS_PSCALE in LT_PSCALE
                                            ( KSTBM = LS_PSCALE-PSQTY       " Condition scale quantity
                                              KBETR = LS_PSCALE-PRICE ) ).  " Condition Amount or Percentage


  endmethod.
  method GET_MATDAT_MAKT.

    RT_MATDAT_MAKT = SUPER->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_TMATN        = IF_TMATN ).

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Procurement Part
      when type ZCL_VCXI_P4SS_EA_PRPART into data(LR_EA_PRPART).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_PRPART->GET_MAKTX( ) ) ).
    endcase.

  endmethod.
  method GET_MATDAT_MARA.

*** Super
    RS_MATDAT_MARA = SUPER->GET_MATDAT_MARA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_SOKEY        = IF_SOKEY
                                             IF_WERKS        = IF_WERKS
                                             IF_TMATN        = IF_TMATN ).
*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Procurement Part
      when type ZCL_VCXI_P4SS_EA_PRPART into data(LR_EA_PRPART).
        RS_MATDAT_MARA-PROD_HIER = LR_EA_PRPART->GET_PRODH( ).
    endcase.

  endmethod.
  method GET_SVCEL_PRFG.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.


    clear ER_EA_PRFG.
    check IR_SVCEL_XCOMP is bound.

***--------------------------------------------------------------------------------------
*** Find Specification as Child
    loop at IR_SVCEL_XCOMP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'PRFG' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_PRFG = LR_SVCEL.

      try.
          move LR_SVCEL->GET_CLSEA( ) ?to ER_EA_PRFG.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          clear ER_EA_PRFG.
      endtry.
    endloop.

    check RR_SVCEL_PRFG is bound.

***--------------------------------------------------------------------------------------
*** Get Supplier Information if requested
    if ER_SVCEL_SPLR is requested.
      ER_SVCEL_SPLR = ME->GET_SVCEL_SPLR( IR_SVCEL_PARENT = RR_SVCEL_PRFG ).
    endif.

  endmethod.
  method GET_SVCEL_SPLR.

    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.

    check IR_SVCEL_PARENT is bound.

*** Find Supplier Information as Child
    loop at IR_SVCEL_PARENT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'SPLR' and
            LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.
      RR_SVCEL_SPLR = LR_SVCEL.
    endloop.

  endmethod.
