
class ZCL_VCXI_PXSR_BL_RTESPV definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_RTESPV
  create public .

public section.

  methods SET_PX_BL_PRTE
    importing
      !IT_XCOMP_RTESEL type ZVCXI_PXSR_TT_XCOMP_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
protected section.

  methods ADD_RELOCATE
    importing
      !IR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    exporting
      !ER_SPVRE_RELOCATE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods PROCESS_RHNDL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods PROCESS_RTESEL
    importing
      !IS_XCOMP_RTESEL type ZVCXI_PXSR_S_XCOMP_RTESEL
      !IR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_CORE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_ACTVY_RWIND
    importing
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_ADDON_RWIND
    importing
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IF_IATYP type /VCXI/VSMC_IATYP default 'PX_AT_RWIND'
      !IR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .

  methods BUILD_STRUCT
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods PROCESS_RTE_ARBPL
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSR_BL_RTESPV definition
class ZCL_VCXI_PXSR_BL_RTESPV implementation.
  method ADD_ACTVY_RWIND.

    data: LS_RHNDL type        ZVCXI_PXSR_S_RHNDL.
    data: LR_SPVRE_RWIND type ref to /VCXI/CL_VKSR_SPVRE.


    check IR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Find/Create Supervised Runtime Element
    ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_ARBPL
                             IF_ID           = 'ACTVY_RWIND'
                   importing ER_SPVRE        = LR_SPVRE_RWIND
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Set in Use
    LR_SPVRE_RWIND->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Use first Roll Handling Information
    read table IR_RHNDL->T_RHNDL into LS_RHNDL index 1.
    if SY-SUBRC eq 0.
***   Set Winding Side
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ACTVY_RWIND=>C_PARID_WISID
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-WISID
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Winding Direction
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ACTVY_RWIND=>C_PARID_WIDIR
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-WIDIR
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Eyemark Position
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ACTVY_RWIND=>C_PARID_EYEMP
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-EYEMP
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Core
    ME->ADD_SPVRE_MC_CORE( exporting IR_SPVRE_PARENT = LR_SPVRE_RWIND
                                     IR_RHNDL        = IR_RHNDL
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method ADD_ADDON_RWIND.

    data: LS_RHNDL type        ZVCXI_PXSR_S_RHNDL.
    data: LR_SPVRE_RWIND type ref to /VCXI/CL_VKSR_SPVRE.


    check IR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Find/Create Supervised Runtime Element
    ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_ARBPL
                             IF_ID           = IF_IATYP
                   importing ER_SPVRE        = LR_SPVRE_RWIND
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Set in Use
    LR_SPVRE_RWIND->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Use first Roll Handling Information
    read table IR_RHNDL->T_RHNDL into LS_RHNDL index 1.
    if SY-SUBRC eq 0.
***   Set Winding Side
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ADDON_RWIND=>C_PARID_WISID
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-WISID
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Winding Direction
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ADDON_RWIND=>C_PARID_WIDIR
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-WIDIR
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Eyemark Position
      LR_SPVRE_RWIND->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_ADDON_RWIND=>C_PARID_EYEMP
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                     ATWRT = LS_RHNDL-EYEMP
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Core
    ME->ADD_SPVRE_MC_CORE( exporting IR_SPVRE_PARENT = LR_SPVRE_RWIND
                                     IR_RHNDL        = IR_RHNDL
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method ADD_RELOCATE.

*** Check if Relocation is even needed
    check ME->R_GATE->GET_APPDATA( )->F_WERKS ne IR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***-------------------------------------------------------------------------------------–----------
*** Create Supervisor Runtime Element
    create object ER_SPVRE_RELOCATE
      exporting
        IR_SPVCE  = ME->GET_SPVCE( IF_ID           = 'RELOCATE'
                                   IR_SPVCE_PARENT = IR_SPVRE_ROOT->R_SPVCE )
        IR_PARENT = IR_SPVRE_ROOT.
    append ER_SPVRE_RELOCATE to CT_SPVRE.

*** Set In Use
    ER_SPVRE_RELOCATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***-------------------------------------------------------------------------------------–----------
*** Add Cost Split Manager
    if IR_BL_PRTE->T_CSPLIT is not initial.
      ME->ADD_CSPLIT_MGR( exporting IR_BL_PRTE       = IR_BL_PRTE
                                    IR_SPVRE_ARBPL   = ER_SPVRE_RELOCATE
                          changing  CT_SPVRE         = CT_SPVRE ).
    endif.

  endmethod.
  method ADD_SPVRE_MC_CORE.

    data: LS_RHNDL type ZVCXI_PXSR_S_RHNDL.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_CORE type ref to /VCXI/CL_VKSR_SPVRE.


    check IR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'MC_CORE'
                              IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
*** Add Cores
    loop at IR_RHNDL->T_RHNDL into LS_RHNDL.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_CORE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_CORE to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_CORE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Material Number
      LR_SPVRE_MC_CORE->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_RHNDL-S_MS_CORE-MATNR
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Target Roll Length
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_CORE=>C_PARID_RLETA
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_RHNDL-RLETA
                                                       UNIT  = LS_RHNDL-RLETA_UOM
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Number of Outs
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_CORE=>C_PARID_NOOUT
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_RHNDL-NOOUT
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Rolls/Core
      LR_SPVRE_MC_CORE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_PXSP_PR_MC_CORE=>C_PARID_RLPCR
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_RHNDL-RLPCR
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endloop.

  endmethod.
  method BUILD_STRUCT.

    data: LS_PARAM      type /VCXI/VKSR_S_PARAM.
    data: LT_SPVRE_CURR type /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE_GRP type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVCE     type ref to /VCXI/CL_VKSC_SPVCE.

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

*** Find Root
    loop at LT_SPVRE_CURR into ER_SPVRE_ROOT
                         where TABLE_LINE->R_PARENT is initial.
      append ER_SPVRE_ROOT to CT_SPVRE.

***   Update Explosion Quantity
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_ORGLC=>C_PARID_EXQTY_L     to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move IS_EXQTY-EXQTY                              to LS_PARAM-ATFLV.
      move IS_EXQTY-EXQTY_UOM                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      ER_SPVRE_ROOT->SET_PARAM( IS_PARAM = LS_PARAM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Create Level below Root
    loop at LT_SPVRE_CURR into LR_SPVRE_GRP
                         where TABLE_LINE->R_PARENT eq ER_SPVRE_ROOT.

***   Buffer Customizing Element
      move LR_SPVRE_GRP->R_SPVCE to LR_SPVCE.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_GRP
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = ER_SPVRE_ROOT.
      append LR_SPVRE_GRP to CT_SPVRE.
    endloop.

  endmethod.
  method GET_ARBPL_INFO.

    data: LF_ID_GRP    type        /VCXI/CKX_ID.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

***-------------------------------------------------------------------------------------–----------
*** Get ID of Group and Work Center where to be supervised to
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          LR_BL_PSTEP->GET_ARBPL_INFO( changing CF_ID_GRP   = LF_ID_GRP
                                                CF_ID_ARBPL = EF_ID_ARBPL ).
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.

*** No Groups
    move IR_SPVRE_ROOT to ER_SPVRE_GRP.

  endmethod.
  method PROCESS_RHNDL.

    data: LF_MANWC type        ZVCXI_XCSR_MANWC,
          LF_OUTSO type        ZVCXI_XCSR_OUTSO.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_MANU   type ref to ZIF_VCXI_XCSR_BL_MANU,
          LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO,
          LR_RHNDL     type ref to ZIF_VCXI_PXSR_RHNDL.


***--------------------------------------------------------------------------------------
*** Get last Roll Handing Information of all Production Step
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                     where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_PXSR_RHNDL.
      LR_RHNDL ?= LR_RTE_PSTEP->R_BLOBJ.
    endloop.

***--------------------------------------------------------------------------------------
*** Roll Handling
    if LR_RHNDL is bound.
***   Check for Manual Work Center
      if LR_RHNDL is instance of ZIF_VCXI_XCSR_BL_MANU.
        LF_MANWC = cast ZIF_VCXI_XCSR_BL_MANU( LR_RHNDL )->F_MANWC.
      endif.

***   Check for Outsourcing
      if LR_RHNDL is instance of ZIF_VCXI_XCSR_BL_OUTSO.
        LF_OUTSO = cast ZIF_VCXI_XCSR_BL_OUTSO( LR_RHNDL )->F_OUTSO.
      endif.

      if LF_MANWC ne ABAP_TRUE and
         LF_OUTSO ne ABAP_TRUE.
***     Add Add-on Rewinding
        ME->ADD_ADDON_RWIND( exporting IR_SPVRE_ARBPL = IR_SPVRE_ARBPL
                                       IR_RHNDL       = LR_RHNDL
                             changing  CT_SPVRE       = CT_SPVRE ).
      else.
***     Add Activity Rewinding
        ME->ADD_ACTVY_RWIND( exporting IR_SPVRE_ARBPL = IR_SPVRE_ARBPL
                                       IR_RHNDL       = LR_RHNDL
                             changing  CT_SPVRE       = CT_SPVRE ).
      endif.
    endif.

  endmethod.
  method PROCESS_RTE_ARBPL.

    data: LR_BL_PSTEP   type ref to ZCL_VCXI_XCSR_BL_PSTEP.


*** Call SUPER
    SUPER->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                        IR_RTE_ARBPL   = IR_RTE_ARBPL
                                        IR_BL_PRTE     = IR_BL_PRTE
                              importing ER_SPVRE_ARBPL = ER_SPVRE_ARBPL
                              changing  CT_SPVRE       = CT_SPVRE ).


***----------------------------------------------------------------------------
*** Process Roll Handling
    ME->PROCESS_RHNDL( exporting IR_RTE_ARBPL   = IR_RTE_ARBPL
                                 IR_SPVRE_ARBPL = ER_SPVRE_ARBPL
                       changing  CT_SPVRE       = CT_SPVRE ).

***----------------------------------------------------------------------------
*** Add Relocation after last Work Center
    if LINE_INDEX( IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL[ TABLE_LINE = IR_RTE_ARBPL ] ) eq LINES( IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL ).
***   Check if we're the FG (No Connection Out)
      check IR_RTE_ARBPL->T_RTE_PSTEP is not initial.
      LR_BL_PSTEP ?= IR_RTE_ARBPL->T_RTE_PSTEP[ 1 ]->R_BLOBJ.
      check LR_BL_PSTEP->T_IMFXC_OUT is initial or
            LR_BL_PSTEP->T_IMFXC_OUT[ 1 ] is initial.

***   Add Relocation Node if needed
      ME->ADD_RELOCATE( exporting IR_SPVRE_ROOT  = IR_SPVRE_ROOT
                                  IR_RTE_ARBPL   = IR_RTE_ARBPL
                                  IR_BL_PRTE     = IR_BL_PRTE
                        changing  CT_SPVRE       = CT_SPVRE ).
    endif.

  endmethod.
  method PROCESS_RTESEL.

    data: LF_INDEX      type        I.
    data: LR_SPVRE_PART type ref to /VCXI/CL_VKSR_SPVRE,
          LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP   type ref to ZCL_VCXI_XCSR_BL_PSTEP.


***--------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element for Component
    create object LR_SPVRE_PART
      exporting
        IR_SPVCE  = ME->GET_SPVCE( IF_ID           = IS_XCOMP_RTESEL-ICELM
                                   IR_SPVCE_PARENT = IR_SPVRE_ROOT->R_SPVCE )
        IR_PARENT = IR_SPVRE_ROOT.
    append LR_SPVRE_PART to CT_SPVRE_NEW.

***--------------------------------------------------------------------------------------
*** Process Work Center
    check IS_XCOMP_RTESEL-R_RTESEL is bound and
          IS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE is bound.

    loop at IS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      move SY-TABIX to LF_INDEX.

***   Get first Production Step
      read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index 1.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

***   First Work Center gets Inbound Connects
      if LF_INDEX eq 1.
        move IS_XCOMP_RTESEL-T_NEXTL    to LR_BL_PSTEP->T_NEXTL.
        move IS_XCOMP_RTESEL-T_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
      endif.

***   Last Work Center gets Outbound Connects
      if LF_INDEX eq LINES( IS_XCOMP_RTESEL-R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL ).
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          move IS_XCOMP_RTESEL-T_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
        endloop.
      endif.

***   Process Work Center through related BL Routing Supervisor
      ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_PART
                                       IR_RTE_ARBPL   = LR_RTE_ARBPL
                                       IR_BL_PRTE     = IS_XCOMP_RTESEL-R_RTESEL
                             changing  CT_SPVRE       = CT_SPVRE_NEW ).

    endloop.

  endmethod.
  method SET_PX_BL_PRTE.

    data: LS_XCOMP_RTESEL type        ZVCXI_PXSR_S_XCOMP_RTESEL.
    data: LT_SPVRE_CURR   type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW    type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVCE_BUFFER type        /VCXI/CKX_TT_OBJECT.
    data: LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Get Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

*** Find Root
    loop at LT_SPVRE_CURR into LR_SPVRE_ROOT
                         where TABLE_LINE->R_PARENT is initial.
      append LR_SPVRE_ROOT to LT_SPVRE_NEW.

      loop at LR_SPVRE_ROOT->R_SPVCE->T_PARAM into LR_OBJECT.
        check LR_OBJECT->GET_ID( ) eq ZCL_VCXI_XCSP_PR_ORGXC=>C_PARID_EXQTY_A or
              LR_OBJECT->GET_ID( ) eq ZCL_VCXI_XCSP_PR_ORGXC=>C_PARID_EXQTY_P.

***     Update Explosion Quantity
        LR_SPVRE_ROOT->SET_PARAM( IS_PARAM = value #( PARID = LR_OBJECT->GET_ID( )
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = IS_EXQTY-EXQTY
                                                      UNIT  = IS_EXQTY-EXQTY_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Process all Routes
    loop at IT_XCOMP_RTESEL into LS_XCOMP_RTESEL.
      if LS_XCOMP_RTESEL-R_BL_RTESPV is not bound.
***     No BL Routing Supervisor Instance to Process the Work Center.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_PXSR'
                                              IF_MSGNO = '051' ).
      endif.

***   Buffer Customizing Element during sub-processing
      LT_SPVCE_BUFFER = LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE.
      LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE = ME->T_SPVCE.

***   Process Selected Route through related BL Routing Supervisor
      LS_XCOMP_RTESEL-R_BL_RTESPV->PROCESS_RTESEL( exporting IS_XCOMP_RTESEL = LS_XCOMP_RTESEL
                                                             IR_SPVRE_ROOT   = LR_SPVRE_ROOT
                                                   changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).
***   Return to buffered Customizing Elements
      LS_XCOMP_RTESEL-R_BL_RTESPV->T_SPVCE = LT_SPVCE_BUFFER.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

  endmethod.
