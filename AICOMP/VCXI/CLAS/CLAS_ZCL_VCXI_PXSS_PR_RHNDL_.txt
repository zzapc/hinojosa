
class ZCL_VCXI_PXSS_PR_RHNDL definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_EYEMP_CHANGED type /VCXI/VKSC_IEVNT value 'EYEMP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PERMA_CHANGED type /VCXI/VKSC_IEVNT value 'PERMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PERMI_CHANGED type /VCXI/VKSC_IEVNT value 'PERMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDIMA_CHANGED type /VCXI/VKSC_IEVNT value 'RDIMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDIMI_CHANGED type /VCXI/VKSC_IEVNT value 'RDIMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDITA_CHANGED type /VCXI/VKSC_IEVNT value 'RDITA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDMMM_CHANGED type /VCXI/VKSC_IEVNT value 'RDMMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RDMTA_CHANGED type /VCXI/VKSC_IEVNT value 'RDMTA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEMA_CHANGED type /VCXI/VKSC_IEVNT value 'RLEMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLEMI_CHANGED type /VCXI/VKSC_IEVNT value 'RLEMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLETA_CHANGED type /VCXI/VKSC_IEVNT value 'RLETA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGMA_CHANGED type /VCXI/VKSC_IEVNT value 'RWGMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGMI_CHANGED type /VCXI/VKSC_IEVNT value 'RWGMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RWGTA_CHANGED type /VCXI/VKSC_IEVNT value 'RWGTA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIDIR_CHANGED type /VCXI/VKSC_IEVNT value 'WIDIR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WISID_CHANGED type /VCXI/VKSC_IEVNT value 'WISID_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_RHNDL type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_RHNDL' ##NO_TEXT.
  constants C_PARID_EYEMP type /VCXI/VKS_PARID value 'ZVCXI_PX_EYEMP' ##NO_TEXT.
  constants C_PARID_PERMA type /VCXI/VKS_PARID value 'ZVCXI_PX_PERMA' ##NO_TEXT.
  constants C_PARID_PERMI type /VCXI/VKS_PARID value 'ZVCXI_PX_PERMI' ##NO_TEXT.
  constants C_PARID_RDIMA type /VCXI/VKS_PARID value 'ZVCXI_PX_RDIMA' ##NO_TEXT.
  constants C_PARID_RDIMI type /VCXI/VKS_PARID value 'ZVCXI_PX_RDIMI' ##NO_TEXT.
  constants C_PARID_RDITA type /VCXI/VKS_PARID value 'ZVCXI_PX_RDITA' ##NO_TEXT.
  constants C_PARID_RDMMM type /VCXI/VKS_PARID value 'ZVCXI_PX_RDMMM' ##NO_TEXT.
  constants C_PARID_RDMTA type /VCXI/VKS_PARID value 'ZVCXI_PX_RDMTA' ##NO_TEXT.
  constants C_PARID_RLEMA type /VCXI/VKS_PARID value 'ZVCXI_PX_RLEMA' ##NO_TEXT.
  constants C_PARID_RLEMI type /VCXI/VKS_PARID value 'ZVCXI_PX_RLEMI' ##NO_TEXT.
  constants C_PARID_RLETA type /VCXI/VKS_PARID value 'ZVCXI_PX_RLETA' ##NO_TEXT.
  constants C_PARID_RWGMA type /VCXI/VKS_PARID value 'ZVCXI_PX_RWGMA' ##NO_TEXT.
  constants C_PARID_RWGMI type /VCXI/VKS_PARID value 'ZVCXI_PX_RWGMI' ##NO_TEXT.
  constants C_PARID_RWGTA type /VCXI/VKS_PARID value 'ZVCXI_PX_RWGTA' ##NO_TEXT.
  constants C_PARID_WIDIR type /VCXI/VKS_PARID value 'ZVCXI_PX_WIDIR' ##NO_TEXT.
  constants C_PARID_WISID type /VCXI/VKS_PARID value 'ZVCXI_PX_WISID' ##NO_TEXT.

  methods SET_RDIMTA
    importing
      !IF_RDMTA type ZVCXI_PXS_RDMTA optional
      !IS_RDIMTA type ZVCXI_PXS_S_RDIMTA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMMM
    importing
      !IF_RDMMM type ZVCXI_PXS_RDMMM optional
      !IS_RDIMMM type ZVCXI_PXS_S_RDIMMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMTA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_RDITA type ZVCXI_PXS_S_RDITA
      !ES_RLETA type ZVCXI_PXS_S_RLETA
      !ES_RWGTA type ZVCXI_PXS_S_RWGTA
      !EF_RDMTA type ZVCXI_PXS_RDMTA
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_RDIMTA) type ZVCXI_PXS_S_RDIMTA
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_RDMMM type ZVCXI_PXS_RDMMM
      !ES_RDIMI type ZVCXI_PXS_S_RDIMI
      !ES_RDIMA type ZVCXI_PXS_S_RDIMA
      !ES_RLEMI type ZVCXI_PXS_S_RLEMI
      !ES_RLEMA type ZVCXI_PXS_S_RLEMA
      !ES_RWGMI type ZVCXI_PXS_S_RWGMI
      !ES_RWGMA type ZVCXI_PXS_S_RWGMA
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_RDIMMM) type ZVCXI_PXS_S_RDIMMM
    raising
      /VCXI/CX_CKX .
  methods GET_EYEMP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_EYEMP) type ZVCXI_PXS_EYEMP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_WIDIM
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_WIDIM) type ref to ZIF_VCXI_PXSS_WIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PERMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PERMA) type ZVCXI_PXS_S_PERMA
    raising
      /VCXI/CX_CKX .
  methods GET_PERMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PERMI) type ZVCXI_PXS_S_PERMI
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RDIMA) type ZVCXI_PXS_S_RDIMA
    raising
      /VCXI/CX_CKX .
  methods GET_RDIMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RDIMI) type ZVCXI_PXS_S_RDIMI
    raising
      /VCXI/CX_CKX .
  methods GET_RDITA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RDITA) type ZVCXI_PXS_S_RDITA
    raising
      /VCXI/CX_CKX .
  methods GET_RLEMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RLEMA) type ZVCXI_PXS_S_RLEMA
    raising
      /VCXI/CX_CKX .
  methods GET_RLEMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RLEMI) type ZVCXI_PXS_S_RLEMI
    raising
      /VCXI/CX_CKX .
  methods GET_RLETA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RLETA) type ZVCXI_PXS_S_RLETA
    raising
      /VCXI/CX_CKX .
  methods GET_RWGMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RWGMA) type ZVCXI_PXS_S_RWGMA
    raising
      /VCXI/CX_CKX .
  methods GET_RWGMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RWGMI) type ZVCXI_PXS_S_RWGMI
    raising
      /VCXI/CX_CKX .
  methods GET_RWGTA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_RWGTA) type ZVCXI_PXS_S_RWGTA
    raising
      /VCXI/CX_CKX .
  methods GET_WIDIR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WIDIR) type ZVCXI_PXS_WIDIR
    raising
      /VCXI/CX_CKX .
  methods GET_WISID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WISID) type ZVCXI_PXS_WISID
    raising
      /VCXI/CX_CKX .
  methods GET_KUNWE
    returning
      value(RF_KUNWE) type KUNWE
    raising
      /VCXI/CX_CKX .
  methods GET_WISWG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WISWG) type ZVCXI_PXS_S_WISWG
    raising
      /VCXI/CX_CKX .
  methods GET_WITHI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WITHI) type ZVCXI_PXS_S_WITHI
    raising
      /VCXI/CX_CKX .
  methods GET_WIWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_WIWID) type ZVCXI_PXS_S_WIWID
    raising
      /VCXI/CX_CKX .
  methods SET_EYEMP
    importing
      !IF_EYEMP type ZVCXI_PXS_EYEMP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PERMA
    importing
      !IS_PERMA type ZVCXI_PXS_S_PERMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PERMI
    importing
      !IS_PERMI type ZVCXI_PXS_S_PERMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMA
    importing
      !IS_RDIMA type ZVCXI_PXS_S_RDIMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDIMI
    importing
      !IS_RDIMI type ZVCXI_PXS_S_RDIMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RDITA
    importing
      !IS_RDITA type ZVCXI_PXS_S_RDITA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEMA
    importing
      !IS_RLEMA type ZVCXI_PXS_S_RLEMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLEMI
    importing
      !IS_RLEMI type ZVCXI_PXS_S_RLEMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLETA
    importing
      !IS_RLETA type ZVCXI_PXS_S_RLETA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGMA
    importing
      !IS_RWGMA type ZVCXI_PXS_S_RWGMA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGMI
    importing
      !IS_RWGMI type ZVCXI_PXS_S_RWGMI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RWGTA
    importing
      !IS_RWGTA type ZVCXI_PXS_S_RWGTA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIDIR
    importing
      !IF_WIDIR type ZVCXI_PXS_WIDIR optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WISID
    importing
      !IF_WISID type ZVCXI_PXS_WISID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_CORE
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_CORE) type ref to ZCL_VCXI_PXSS_PR_MS_CORE
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_RHSRC
    returning
      value(RS_RHSRC) type ZVCXI_PXS_S_RHSRC
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_RDITA type /VCXI/VKSC_IEVNT value 'INIT_RDITA' ##NO_TEXT.
  constants C_IEVNT_I_INIT_WIDIM type /VCXI/VKSC_IEVNT value 'INIT_WIDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PERMA type /VCXI/VKSC_IEVNT value 'RECALC_PERMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PERMI type /VCXI/VKSC_IEVNT value 'RECALC_PERMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDIMA type /VCXI/VKSC_IEVNT value 'RECALC_RDIMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDIMI type /VCXI/VKSC_IEVNT value 'RECALC_RDIMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RDITA type /VCXI/VKSC_IEVNT value 'RECALC_RDITA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEMA type /VCXI/VKSC_IEVNT value 'RECALC_RLEMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEMI type /VCXI/VKSC_IEVNT value 'RECALC_RLEMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLETA type /VCXI/VKSC_IEVNT value 'RECALC_RLETA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGMA type /VCXI/VKSC_IEVNT value 'RECALC_RWGMA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGMI type /VCXI/VKSC_IEVNT value 'RECALC_RWGMI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RWGTA type /VCXI/VKSC_IEVNT value 'RECALC_RWGTA' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_WISWG_CHANGED type /VCXI/VKSC_IEVNT value 'WISWG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WITHI_CHANGED type /VCXI/VKSC_IEVNT value 'WITHI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIWID_CHANGED type /VCXI/VKSC_IEVNT value 'WIWID_CHANGED' ##NO_TEXT.
  constants C_PARID_WISWG type /VCXI/VKS_PARID value 'ZVCXI_PX_WISWG' ##NO_TEXT.
  constants C_PARID_WITHI type /VCXI/VKS_PARID value 'ZVCXI_PX_WITHI' ##NO_TEXT.
  constants C_PARID_WIWID type /VCXI/VKS_PARID value 'ZVCXI_PX_WIWID' ##NO_TEXT.

  methods CHECK_RDITA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RLETA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RWGTA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WISID
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_RDITA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_WIDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PERMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PERMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDIMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDIMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RDITA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLEMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLEMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RLETA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGMI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RWGTA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_WISWG
    importing
      !IS_WISWG type ZVCXI_PXS_S_WISWG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WITHI
    importing
      !IS_WITHI type ZVCXI_PXS_S_WITHI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIWID
    importing
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_RHNDL definition
class ZCL_VCXI_PXSS_PR_RHNDL implementation.
  method CHECK_RDITA.

*** Get Roll Diameter Target
    data(LS_RDITA) = ME->GET_RDITA( ).

*** Get Roll Diameter Minimum/Maximum
    data(LS_RDIMI) = ME->GET_RDIMI( ).
    data(LS_RDIMA) = ME->GET_RDIMA( ).


    if LS_RDITA-RDITA le 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Diameter Target is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.

    elseif LS_RDITA-RDITA lt LS_RDIMI-RDIMI or
           ( LS_RDIMA-RDIMA ne 0 and LS_RDITA-RDITA gt LS_RDIMA-RDIMA ).
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Diameter Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '153' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Roll Diameter Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      endif.
    endif.

  endmethod.
  method CHECK_RLETA.

*** Get Roll Length Target
    data(LS_RLETA) = ME->GET_RLETA( ).

*** Get Roll Length Minimum/Maximum
    data(LS_RLEMI) = ME->GET_RLEMI( ).
    data(LS_RLEMA) = ME->GET_RLEMA( ).


    if LS_RLETA-RLETA le 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Length Target is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.

    elseif LS_RLETA-RLETA lt LS_RLEMI-RLEMI or
           ( LS_RLEMA-RLEMA ne 0 and LS_RLETA-RLETA gt LS_RLEMA-RLEMA ).
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Length Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '153' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Roll Length Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      endif.
    endif.

  endmethod.
  method CHECK_RWGTA.

*** Get Roll Weight Target
    data(LS_RWGTA) = ME->GET_RWGTA( ).

*** Get Roll Weight Minimum/Maximum
    data(LS_RWGMI) = ME->GET_RWGMI( ).
    data(LS_RWGMA) = ME->GET_RWGMA( ).


    if LS_RWGTA-RWGTA le 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Weight Target is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.

    elseif LS_RWGTA-RWGTA lt LS_RWGMI-RWGMI or
           ( LS_RWGMA-RWGMA ne 0 and LS_RWGTA-RWGTA gt LS_RWGMA-RWGMA ).
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Weight Target is out of intervall minimum-maximum.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '153' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Roll Weight Target is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '151' ).
      endif.
    endif.

  endmethod.
  method CHECK_WISID.

    if ME->GET_WISID( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Roll Winding Side is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '160' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Roll Winding Side is not maintained or invalid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '161' ).
      endif.
    endif.

  endmethod.
  method GET_EYEMP.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).
    RF_EYEMP = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_KUNWE.

*** Get Ship-To based on Receiving Plant of Connection Out
    if ME->R_GATE->GET_PARENT( )->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XCONO.
***   Get related Connection In
      RF_KUNWE = cast ZCL_VCXI_PXSS_PR_XCONO( ME->R_GATE->GET_PARENT( )->R_CLSPR )->GET_KUNWE( ).

*** Otherwise get Ship-to Party of Application Data
    else.
      RF_KUNWE = cast ZCL_VCXI_XCS_APPDATA( ME->R_GATE->GET_APPDATA( ) )->S_KNA1_WE-KUNNR.
    endif.

  endmethod.
  method GET_PERMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMA ).
    move LS_PARAM-ATFLV to RS_PERMA-PERMA.
    move LS_PARAM-UNIT  to RS_PERMA-PERMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PERMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMI ).
    move LS_PARAM-ATFLV to RS_PERMI-PERMI.
    move LS_PARAM-UNIT  to RS_PERMI-PERMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_MS_CORE.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_MS_CORE.

*** Get MS Core Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_CORE=>C_IPRVT_PX_MS_CORE
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_PR_MS_CORE.
    endtry.

  endmethod.
  method GET_PRVDR_WIDIM.

    clear: ER_GATE,
           RR_WIDIM.

*** Get Provider
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_WIDIM=>C_IPRVT_PX_WIDIM
                                           IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.

    try.
        move ER_GATE->R_CLSPR ?to RR_WIDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ER_GATE,
               RR_WIDIM.
    endtry.

  endmethod.
  method GET_RDIMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMA ).
    move LS_PARAM-ATFLV to RS_RDIMA-RDIMA.
    move LS_PARAM-UNIT  to RS_RDIMA-RDIMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RDIMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMI ).
    move LS_PARAM-ATFLV to RS_RDIMI-RDIMI.
    move LS_PARAM-UNIT  to RS_RDIMI-RDIMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RDIMMM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMMM ).
    EF_RDMMM = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** Fallback
    if EF_RDMMM is initial.
      EF_RDMMM = 'D'.
    endif.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter Minimum
    if RS_RDIMMM is requested or
       ES_RDIMI  is requested or
       EF_FOVRR  is requested.
      ES_RDIMI = ME->GET_RDIMI( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Diameter Maximum
    if RS_RDIMMM is requested or
       ES_RDIMA  is requested or
       EF_FOVRR  is requested.
      ES_RDIMA = ME->GET_RDIMA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Minimum
    if RS_RDIMMM is requested or
       ES_RLEMI  is requested or
       EF_FOVRR  is requested.
      ES_RLEMI = ME->GET_RLEMI( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Maximum
    if RS_RDIMMM is requested or
       ES_RLEMA  is requested or
       EF_FOVRR  is requested.
      ES_RLEMA = ME->GET_RLEMA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Minimum
    if RS_RDIMMM is requested or
       ES_RWGMI  is requested or
       EF_FOVRR  is requested.
      ES_RWGMI = ME->GET_RWGMI( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Maximum
    if RS_RDIMMM is requested or
       ES_RWGMA  is requested or
       EF_FOVRR  is requested.
      ES_RWGMA = ME->GET_RWGMA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.


    if RS_RDIMMM is requested.
      RS_RDIMMM-RDMMM = EF_RDMMM.

***   Pick Dimension Value
      case RS_RDIMMM-RDMMM.
        when 'D'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RDIMI-RDIMI
                                       RDVMI_UOM = ES_RDIMI-RDIMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RDIMA-RDIMA
                                       RDVMA_UOM = ES_RDIMA-RDIMA_UOM ).
        when 'L'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RLEMI-RLEMI
                                       RDVMI_UOM = ES_RLEMI-RLEMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RLEMA-RLEMA
                                       RDVMA_UOM = ES_RLEMA-RLEMA_UOM ).
        when 'W'.
          RS_RDIMMM-S_RDVMI = value #( RDVMI     = ES_RWGMI-RWGMI
                                       RDVMI_UOM = ES_RWGMI-RWGMI_UOM ).
          RS_RDIMMM-S_RDVMA = value #( RDVMA     = ES_RWGMA-RWGMA
                                       RDVMA_UOM = ES_RWGMA-RWGMA_UOM ).
      endcase.
    endif.

  endmethod.
  method GET_RDIMTA.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMTA ).
    EF_RDMTA = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

*** Fallback
    if EF_RDMTA is initial.
      EF_RDMTA = 'D'.
    endif.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter Target
    if RS_RDIMTA is requested or
       ES_RDITA  is requested or
       EF_FOVRR  is requested.
      ES_RDITA = ME->GET_RDITA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Length Target
    if RS_RDIMTA is requested or
       ES_RLETA  is requested or
       EF_FOVRR  is requested.
      ES_RLETA = ME->GET_RLETA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

*** Get Roll Weight Target
    if RS_RDIMTA is requested or
       ES_RWGTA  is requested or
       EF_FOVRR  is requested.
      ES_RWGTA = ME->GET_RWGTA( importing EF_SETBY = LF_SETBY ).
      EF_FOVRR = cond #( when EF_FOVRR eq ABAP_TRUE                        then ABAP_TRUE
                         when LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).
    endif.

    if RS_RDIMTA is requested.
      RS_RDIMTA-RDMTA = EF_RDMTA.

***   Pick Dimension Value
      case RS_RDIMTA-RDMTA.
        when 'D'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RDITA-RDITA
                                       RDVTA_UOM = ES_RDITA-RDITA_UOM ).
        when 'L'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RLETA-RLETA
                                       RDVTA_UOM = ES_RLETA-RLETA_UOM ).
        when 'W'.
          RS_RDIMTA-S_RDVTA = value #( RDVTA     = ES_RWGTA-RWGTA
                                       RDVTA_UOM = ES_RWGTA-RWGTA_UOM ).
      endcase.
    endif.

  endmethod.
  method GET_RDITA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).
    move LS_PARAM-ATFLV to RS_RDITA-RDITA.
    move LS_PARAM-UNIT  to RS_RDITA-RDITA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RHSRC.

    RS_RHSRC = value #( RHSWI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC
                        RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC
                        RHSCO = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC ).

  endmethod.
  method GET_RLEMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMA ).
    move LS_PARAM-ATFLV to RS_RLEMA-RLEMA.
    move LS_PARAM-UNIT  to RS_RLEMA-RLEMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RLEMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMI ).
    move LS_PARAM-ATFLV to RS_RLEMI-RLEMI.
    move LS_PARAM-UNIT  to RS_RLEMI-RLEMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RLETA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLETA ).
    move LS_PARAM-ATFLV to RS_RLETA-RLETA.
    move LS_PARAM-UNIT  to RS_RLETA-RLETA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMA ).
    move LS_PARAM-ATFLV to RS_RWGMA-RWGMA.
    move LS_PARAM-UNIT  to RS_RWGMA-RWGMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMI ).
    move LS_PARAM-ATFLV to RS_RWGMI-RWGMI.
    move LS_PARAM-UNIT  to RS_RWGMI-RWGMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RWGTA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGTA ).
    move LS_PARAM-ATFLV to RS_RWGTA-RWGTA.
    move LS_PARAM-UNIT  to RS_RWGTA-RWGTA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Target Roll Diameter
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RDITA( ) ).

*** Check Target Roll Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RLETA( ) ).

*** Check Target Roll Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RWGTA( ) ).

***--------------------------------------------------------------------------------------
*** Check Winding Side
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WISID( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Roll Diameter Target
    ME->CHECK_RDITA( IR_MESSAGE = IR_MESSAGE ).

*** Check Roll Length Target
    ME->CHECK_RLETA( IR_MESSAGE = IR_MESSAGE ).

*** Check Roll Weight Target
    ME->CHECK_RWGTA( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Winding Side
    ME->CHECK_WISID( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      RF_WERKS = cast ZCL_VCXI_PXSS_PR_SPEC( LR_GATE->R_CLSPR )->GET_WERKS( ).
    else.
      LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
      RF_WERKS =  LR_APPDATA->F_WERKS.
    endif.

  endmethod.
  method GET_WIDIR.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIDIR ).
    RF_WIDIR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WISID.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISID ).
    RF_WISID = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WISWG.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISWG ).
    RS_WISWG = value #( WISWG     = LS_PARAM-ATFLV
                        WISWG_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WITHI.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WITHI ).
    RS_WITHI = value #( WITHI     = LS_PARAM-ATFLV
                        WITHI_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_WIWID.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWID ).
    RS_WIWID = value #( WIWID     = LS_PARAM-ATFLV
                        WIWID_UOM = LS_PARAM-UNIT ).
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).
    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Initialize Winding DimensionsInitial Winding Dimentions
      when C_IEVNT_I_INIT_WIDIM.
        ME->HANDLE_INIT_WIDIM( ).

***   Set Initial Roll Diameter Target
      when C_IEVNT_I_INIT_RDITA.
        ME->HANDLE_INIT_RDITA( ).

***   Recalculate Roll Diameter Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RDITA.
        ME->HANDLE_RECALC_RDITA( ).
      when C_IEVNT_I_RECALC_RDIMI.
        ME->HANDLE_RECALC_RDIMI( ).
      when C_IEVNT_I_RECALC_RDIMA.
        ME->HANDLE_RECALC_RDIMA( ).

***   Recalculate Roll Length Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RLETA.
        ME->HANDLE_RECALC_RLETA( ).
      when C_IEVNT_I_RECALC_RLEMI.
        ME->HANDLE_RECALC_RLEMI( ).
      when C_IEVNT_I_RECALC_RLEMA.
        ME->HANDLE_RECALC_RLEMA( ).

***   Recalculate Roll Weight Target/Minimum/Maximum
      when C_IEVNT_I_RECALC_RWGTA.
        ME->HANDLE_RECALC_RWGTA( ).
      when C_IEVNT_I_RECALC_RWGMI.
        ME->HANDLE_RECALC_RWGMI( ).
      when C_IEVNT_I_RECALC_RWGMA.
        ME->HANDLE_RECALC_RWGMA( ).

***   Recalculate Percentage Minimum/Maximum
      when C_IEVNT_I_RECALC_PERMI.
        ME->HANDLE_RECALC_PERMI( ).
      when C_IEVNT_I_RECALC_PERMA.
        ME->HANDLE_RECALC_PERMA( ).

    endcase.

  endmethod.
  method HANDLE_INIT_RDITA.

    break TBD.
*    data: LF_SETBY    type        /VCXI/VKSR_SETBY.
*    data: LS_RDITA    type        ZVCXI_FFS_S_RDITA.
*
****--------------------------------------------------------------------------------------
**** Load Default only if no value has be set before
**** and RLETA/RWGTA are not set by user
*    clear LF_SETBY.
*    ME->GET_RDITA( importing ES_RDITA = LS_RDITA
*                             EF_SETBY = LF_SETBY ).
*    check LF_SETBY is initial.
*
*    clear LF_SETBY.
*    ME->GET_RLETA( importing EF_SETBY = LF_SETBY ).
*    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*
*    clear LF_SETBY.
*    ME->GET_RWGTA( importing EF_SETBY = LF_SETBY ).
*    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*
**** Get Default Target Roll Diameter for Finished Goods
*    LS_RDITA = ME->GET_DEFAULT_RDITA( ).
*
****--------------------------------------------------------------------------------------
**** Set Roll Target Diameter
*    ME->SET_RDITA( exporting IS_RDITA = LS_RDITA
*                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method HANDLE_INIT_WIDIM.

    data(LR_WIDIM) = ME->GET_PRVDR_WIDIM( ).
    check LR_WIDIM is bound.

*** Set Winding Width, Winding Thickness and Surface Weight
    ME->SET_WIWID( IS_WIWID = LR_WIDIM->GET_WIWID( ) ).
    ME->SET_WITHI( IS_WITHI = LR_WIDIM->GET_WITHI( ) ).
    ME->SET_WISWG( IS_WISWG = LR_WIDIM->GET_WISWG( ) ).

  endmethod.
  method HANDLE_RECALC_PERMA.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_RDMMM type ZVCXI_PXS_RDMMM.
    data: LS_PERMA type ZVCXI_PXS_S_PERMA,
          LS_RDIMA type ZVCXI_PXS_S_RDIMA,
          LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_RLEMA type ZVCXI_PXS_S_RLEMA,
          LS_RLETA type ZVCXI_PXS_S_RLETA,
          LS_RWGMA type ZVCXI_PXS_S_RWGMA,
          LS_RWGTA type ZVCXI_PXS_S_RWGTA.


***--------------------------------------------------------------------------------------
*** Get current Value and check it's not set by User
    LS_PERMA = ME->GET_PERMA( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    clear LS_PERMA-PERMA.

***--------------------------------------------------------------------------------------
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).
    case LF_RDMMM.
***   Calculate Percentage by Diameter
      when 'D'.
        LS_RDIMA = ME->GET_RDIMA( ).
        LS_RDITA = ME->GET_RDITA( ).
        LS_PERMA-PERMA = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RDIMA-RDIMA
                                                                                               CALCV_UOM = LS_RDIMA-RDIMA_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RDITA-RDITA
                                                                                               CALCV_UOM = LS_RDITA-RDITA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX ).

***   Calculate Percentage by Length
      when 'L'.
        LS_RLEMA = ME->GET_RLEMA( ).
        LS_RLETA = ME->GET_RLETA( ).
        LS_PERMA-PERMA = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RLEMA-RLEMA
                                                                                               CALCV_UOM = LS_RLEMA-RLEMA_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RLETA-RLETA
                                                                                               CALCV_UOM = LS_RLETA-RLETA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX ).

***   Calculate Percentage by Weight
      when 'W'.
        LS_RWGMA = ME->GET_RWGMA( ).
        LS_RWGTA = ME->GET_RWGTA( ).
        LS_PERMA-PERMA = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RWGMA-RWGMA
                                                                                               CALCV_UOM = LS_RWGMA-RWGMA_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RWGTA-RWGTA
                                                                                               CALCV_UOM = LS_RWGTA-RWGTA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX ).
    endcase.

***--------------------------------------------------------------------------------------
*** Set Percentage Maximum
    ME->SET_PERMA( IS_PERMA = LS_PERMA ).

  endmethod.
  method HANDLE_RECALC_PERMI.

    data: LF_SETBY type /VCXI/VKSR_SETBY,
          LF_RDMMM type ZVCXI_PXS_RDMMM.
    data: LS_PERMI type ZVCXI_PXS_S_PERMI,
          LS_RDIMI type ZVCXI_PXS_S_RDIMI,
          LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_RLEMI type ZVCXI_PXS_S_RLEMI,
          LS_RLETA type ZVCXI_PXS_S_RLETA,
          LS_RWGMI type ZVCXI_PXS_S_RWGMI,
          LS_RWGTA type ZVCXI_PXS_S_RWGTA.


***--------------------------------------------------------------------------------------
*** Get current Value and check it's not set by User
    LS_PERMI = ME->GET_PERMI( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    clear LS_PERMI-PERMI.

***--------------------------------------------------------------------------------------
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).
    case LF_RDMMM.
***   Calculate Percentage by Diameter
      when 'D'.
        LS_RDIMI = ME->GET_RDIMI( ).
        LS_RDITA = ME->GET_RDITA( ).
        LS_PERMI-PERMI = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RDIMI-RDIMI
                                                                                               CALCV_UOM = LS_RDIMI-RDIMI_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RDITA-RDITA
                                                                                               CALCV_UOM = LS_RDITA-RDITA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN ).

***   Calculate Percentage by Length
      when 'L'.
        LS_RLEMI = ME->GET_RLEMI( ).
        LS_RLETA = ME->GET_RLETA( ).
        LS_PERMI-PERMI = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RLEMI-RLEMI
                                                                                               CALCV_UOM = LS_RLEMI-RLEMI_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RLETA-RLETA
                                                                                               CALCV_UOM = LS_RLETA-RLETA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN ).

***   Calculate Percentage by Weight
      when 'W'.
        LS_RWGMI = ME->GET_RWGMI( ).
        LS_RWGTA = ME->GET_RWGTA( ).
        LS_PERMI-PERMI = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_PERC_BY_DIMEN( IS_CALCV_DIMEN = value #( CALCV     = LS_RWGMI-RWGMI
                                                                                               CALCV_UOM = LS_RWGMI-RWGMI_UOM )
                                                                     IS_CALCV_DIMTA = value #( CALCV     = LS_RWGTA-RWGTA
                                                                                               CALCV_UOM = LS_RWGTA-RWGTA_UOM )
                                                                     IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN ).
    endcase.

***--------------------------------------------------------------------------------------
*** Set Percentage Minimum
    ME->SET_PERMI( IS_PERMI = LS_PERMI ).

  endmethod.
  method HANDLE_RECALC_RDIMA.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RDIMA type ZVCXI_PXS_S_RDIMA,
          LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_PERMA type ZVCXI_PXS_S_PERMA,
          LS_RLEMA type ZVCXI_PXS_S_RLEMA.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RDIMA.
    LS_RDIMA-RDIMA_UOM = ME->GET_RDIMA( )-RDIMA_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'D'.
***     Get Percentage and check it's set by User
        LS_PERMA = ME->GET_PERMA( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RDITA = ME->GET_RDITA( ).
***       Calculate Roll Diameter by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMA-PERMA
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RDITA-RDITA
                                                                                          CALCV_UOM = LS_RDITA-RDITA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX
                                                       changing CF_DIMEN       = LS_RDIMA-RDIMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
      when others.
***     Get Roll Diameter by Length
        LS_RLEMA = ME->GET_RLEMA( ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Diameter
        if LS_RLEMA-RLEMA is not initial and
           LR_PR_MS_CORE  is bound.
          LS_RDIMA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLDIA_BY_RLLEN( IS_RLLEN     = LS_RLEMA
                                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                                   IF_RLDIA_UOM = LS_RDIMA-RDIMA_UOM )
                                      mapping RDIMA     = RLDIA
                                              RDIMA_UOM = RLDIA_UOM ).
        else.
          clear LS_RDIMA-RDIMA.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Maximum
    ME->SET_RDIMA( IS_RDIMA = LS_RDIMA ).

  endmethod.
  method HANDLE_RECALC_RDIMI.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RDIMI type ZVCXI_PXS_S_RDIMI,
          LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_PERMI type ZVCXI_PXS_S_PERMI,
          LS_RLEMI type ZVCXI_PXS_S_RLEMI.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RDIMI.
    LS_RDIMI-RDIMI_UOM = ME->GET_RDIMI( )-RDIMI_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'D'.
***     Get Percentage and check it's set by User
        LS_PERMI = ME->GET_PERMI( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RDITA = ME->GET_RDITA( ).
***       Calculate Roll Diameter by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMI-PERMI
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RDITA-RDITA
                                                                                          CALCV_UOM = LS_RDITA-RDITA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN
                                                       changing CF_DIMEN       = LS_RDIMI-RDIMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
      when others.
***     Get Roll Diameter by Length
        LS_RLEMI = ME->GET_RLEMI( ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Diameter
        if LS_RLEMI-RLEMI is not initial and
           LR_PR_MS_CORE  is bound.
          LS_RDIMI = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLDIA_BY_RLLEN( IS_RLLEN     = LS_RLEMI
                                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                                   IF_RLDIA_UOM = LS_RDIMI-RDIMI_UOM )
                                      mapping RDIMI     = RLDIA
                                              RDIMI_UOM = RLDIA_UOM ).
        else.
          clear LS_RDIMI-RDIMI.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Minimum
    ME->SET_RDIMI( IS_RDIMI = LS_RDIMI ).

  endmethod.
  method HANDLE_RECALC_RDITA.

    data: LF_RDMTA type ZVCXI_PXS_RDMTA.
    data: LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_RLETA type ZVCXI_PXS_S_RLETA.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Diameter is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'D'.

    clear LS_RDITA.
    LS_RDITA-RDITA_UOM = ME->GET_RDITA( )-RDITA_UOM.

***--------------------------------------------------------------------------------------
*** Get Roll Diameter by Length
    LS_RLETA = ME->GET_RLETA( ).

*** Get Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

*** Calculate Roll Diameter
    if LS_RLETA-RLETA is not initial and
       LR_PR_MS_CORE  is bound.
      LS_RDITA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLDIA_BY_RLLEN( IS_RLLEN     = LS_RLETA
                                                                               IS_WITHI     = ME->GET_WITHI( )
                                                                               IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                               IF_RLDIA_UOM = LS_RDITA-RDITA_UOM )
                                  mapping RDITA     = RLDIA
                                          RDITA_UOM = RLDIA_UOM ).
    else.
      clear LS_RDITA-RDITA.
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Diameter Target
    ME->SET_RDITA( IS_RDITA = LS_RDITA ).

  endmethod.
  method HANDLE_RECALC_RLEMA.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type        /VCXI/VKSR_SETBY.
    data: LS_RLEMA type        ZVCXI_PXS_S_RLEMA,
          LS_RLETA type        ZVCXI_PXS_S_RLETA,
          LS_PERMA type        ZVCXI_PXS_S_PERMA,
          LS_RDIMA type        ZVCXI_PXS_S_RDIMA,
          LS_RWGMA type        ZVCXI_PXS_S_RWGMA,
          LS_CRDIO type        ZVCXI_PXS_S_CRDIO,
          LS_CRWGT type        ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RLEMA.
    LS_RLEMA-RLEMA_UOM = ME->GET_RLEMA( )-RLEMA_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Percentage
      when 'L'.
***     Get Percentage and check it's set by User
        LS_PERMA = ME->GET_PERMA( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RLETA = ME->GET_RLETA( ).
***       Calculate Roll Length by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMA-PERMA
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RLETA-RLETA
                                                                                          CALCV_UOM = LS_RLETA-RLETA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX
                                                       changing CF_DIMEN       = LS_RLEMA-RLEMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Diameter
      when 'D'.
***     Roll Diameter
        LS_RDIMA = ME->GET_RDIMA( ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Length
        if LS_RDIMA-RDIMA is not initial and
           LR_PR_MS_CORE  is bound.
          LS_RLEMA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLDIA( IS_RLDIA     = LS_RDIMA
                                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                                   IF_RLLEN_UOM = LS_RLEMA-RLEMA_UOM )
                                      mapping RLEMA     = RLLEN
                                              RLEMA_UOM = RLLEN_UOM ).
        else.
          clear LS_RLEMA-RLEMA.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Weight
      when 'W'.
***     Roll Weigth
        LS_RWGMA = ME->GET_RWGMA( ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Length
        if LS_RWGMA-RWGMA is not initial.
          LS_RLEMA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLWGT( IS_RLWGT = LS_RWGMA
                                                                                   IS_CRWGT = LS_CRWGT
                                                                                   IS_WIWID = ME->GET_WIWID( )
                                                                                   IS_WISWG = ME->GET_WISWG( ) )
                                      mapping RLEMA     = RLLEN
                                              RLEMA_UOM = RLLEN_UOM ).
        else.
          clear LS_RLEMA-RLEMA.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Length Maximum
    ME->SET_RLEMA( IS_RLEMA = LS_RLEMA ).

  endmethod.
  method HANDLE_RECALC_RLEMI.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type        /VCXI/VKSR_SETBY.
    data: LS_RLEMI type        ZVCXI_PXS_S_RLEMI,
          LS_RLETA type        ZVCXI_PXS_S_RLETA,
          LS_PERMI type        ZVCXI_PXS_S_PERMI,
          LS_RDIMI type        ZVCXI_PXS_S_RDIMI,
          LS_RWGMI type        ZVCXI_PXS_S_RWGMI,
          LS_CRDIO type        ZVCXI_PXS_S_CRDIO,
          LS_CRWGT type        ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RLEMI.
    LS_RLEMI-RLEMI_UOM = ME->GET_RLEMI( )-RLEMI_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Percentage
      when 'L'.
***     Get Percentage and check it's set by User
        LS_PERMI = ME->GET_PERMI( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RLETA = ME->GET_RLETA( ).
***       Calculate Roll Length by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMI-PERMI
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RLETA-RLETA
                                                                                          CALCV_UOM = LS_RLETA-RLETA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN
                                                       changing CF_DIMEN       = LS_RLEMI-RLEMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Diameter
      when 'D'.
***     Roll Diameter
        LS_RDIMI = ME->GET_RDIMI( ).

***     Get Core
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).

***     Calculate Roll Length
        if LS_RDIMI-RDIMI is not initial and
           LR_PR_MS_CORE  is bound.
          LS_RLEMI = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLDIA( IS_RLDIA     = LS_RDIMI
                                                                                   IS_WITHI     = ME->GET_WITHI( )
                                                                                   IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                                   IF_RLLEN_UOM = LS_RLEMI-RLEMI_UOM )
                                      mapping RLEMI     = RLLEN
                                              RLEMI_UOM = RLLEN_UOM ).
        else.
          clear LS_RLEMI-RLEMI.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Length by Weight
      when 'W'.
***     Roll Weigth
        LS_RWGMI = ME->GET_RWGMI( ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Length
        if LS_RWGMI-RWGMI is not initial.
          LS_RLEMI = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLWGT( IS_RLWGT = LS_RWGMI
                                                                                   IS_CRWGT = LS_CRWGT
                                                                                   IS_WIWID = ME->GET_WIWID( )
                                                                                   IS_WISWG = ME->GET_WISWG( ) )
                                      mapping RLEMI     = RLLEN
                                              RLEMI_UOM = RLLEN_UOM ).
        else.
          clear LS_RLEMI-RLEMI.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Length Minimum
    ME->SET_RLEMI( IS_RLEMI = LS_RLEMI ).

  endmethod.
  method HANDLE_RECALC_RLETA.

    data: LF_RDMTA type ZVCXI_PXS_RDMTA.
    data: LS_RDITA type ZVCXI_PXS_S_RDITA,
          LS_RLETA type ZVCXI_PXS_S_RLETA,
          LS_CRDIO type ZVCXI_PXS_S_CRDIO,
          LS_RWGTA type ZVCXI_PXS_S_RWGTA,
          LS_CRWGT type ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Length is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'L'.

    clear LS_RLETA.
    LS_RLETA-RLETA_UOM = ME->GET_RLETA( )-RLETA_UOM.

*** Get Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.

***--------------------------------------------------------------------------------------
      case LF_RDMTA.
***     Calculate Roll Length by Diameter
        when 'D'.
          LS_RDITA = ME->GET_RDITA( ).
***       Calculate Roll Length
          if LS_RDITA-RDITA is not initial.
            LS_RLETA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLDIA( IS_RLDIA     = LS_RDITA
                                                                                     IS_WITHI     = ME->GET_WITHI( )
                                                                                     IS_CRDIO     = LR_PR_MS_CORE->GET_CRDIO( )
                                                                                     IF_RLLEN_UOM = LS_RLETA-RLETA_UOM )
                                        mapping RLETA     = RLLEN
                                                RLETA_UOM = RLLEN_UOM ).
          else.
            clear LS_RLETA-RLETA.
          endif.

***--------------------------------------------------------------------------------------
***     Calculate Roll Length by Weight
        when 'W'.
          LS_RWGTA = ME->GET_RWGTA( ).
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
***       Calculate Roll Length
          if LS_RWGTA-RWGTA is not initial.
            LS_RLETA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLWGT( IS_RLWGT = LS_RWGTA
                                                                                     IS_CRWGT = LS_CRWGT
                                                                                     IS_WIWID = ME->GET_WIWID( )
                                                                                     IS_WISWG = ME->GET_WISWG( ) )
                                        mapping RLETA     = RLLEN
                                                RLETA_UOM = RLLEN_UOM ).
          else.
            clear LS_RLETA-RLETA.
          endif.
      endcase.
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Length Target
    ME->SET_RLETA( IS_RLETA = LS_RLETA ).

  endmethod.
  method HANDLE_RECALC_RWGMA.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RWGMA type ZVCXI_PXS_S_RWGMA,
          LS_RWGTA type ZVCXI_PXS_S_RWGTA,
          LS_PERMA type ZVCXI_PXS_S_PERMA,
          LS_RLEMA type ZVCXI_PXS_S_RLEMA,
          LS_CRWGT type ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RWGMA.
    LS_RWGMA-RWGMA_UOM = ME->GET_RWGMA( )-RWGMA_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'W'.
***     Get Percentage and check it's set by User
        LS_PERMA = ME->GET_PERMA( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RWGTA = ME->GET_RWGTA( ).
***       Calculate Roll Weight by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMA-PERMA
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RWGTA-RWGTA
                                                                                          CALCV_UOM = LS_RWGTA-RWGTA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MAX
                                                       changing CF_DIMEN       = LS_RWGMA-RWGMA ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Weight by Length
      when others.
***     Get Roll Length
        LS_RLEMA = ME->GET_RLEMA( ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Weight
        if LS_RLEMA-RLEMA is not initial.
          LS_RWGMA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLWGT_BY_RLLEN( IS_RLLEN = LS_RLEMA
                                                                                   IS_CRWGT = LS_CRWGT
                                                                                   IS_WIWID = ME->GET_WIWID( )
                                                                                   IS_WISWG = ME->GET_WISWG( ) )
                                      mapping RWGMA     = RLWGT
                                              RWGMA_UOM = RLWGT_UOM ).
        else.
          clear LS_RWGMA-RWGMA.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Weight Maximum
    ME->SET_RWGMA( IS_RWGMA = LS_RWGMA ).

  endmethod.
  method HANDLE_RECALC_RWGMI.

    data: LF_RDMMM type ZVCXI_PXS_RDMMM,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_RWGMI type ZVCXI_PXS_S_RWGMI,
          LS_RWGTA type ZVCXI_PXS_S_RWGTA,
          LS_PERMI type ZVCXI_PXS_S_PERMI,
          LS_RLEMI type ZVCXI_PXS_S_RLEMI,
          LS_CRWGT type ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


*** Get selected Dimension
    ME->GET_RDIMMM( importing EF_RDMMM = LF_RDMMM ).

*** Get Unit
    clear LS_RWGMI.
    LS_RWGMI-RWGMI_UOM = ME->GET_RWGMI( )-RWGMI_UOM.

    case LF_RDMMM.
***--------------------------------------------------------------------------------------
      when 'W'.
***     Get Percentage and check it's set by User
        LS_PERMI = ME->GET_PERMI( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***       Get Target
          LS_RWGTA = ME->GET_RWGTA( ).
***       Calculate Roll Weight by Percentage
          ZCL_VCXI_PXSS_BL_RHNDL=>CALC_DIMEN_BY_PERC( exporting IF_PERC        = LS_PERMI-PERMI
                                                                IS_CALCV_DIMTA = value #( CALCV     = LS_RWGTA-RWGTA
                                                                                          CALCV_UOM = LS_RWGTA-RWGTA_UOM )
                                                                IF_MINMAX      = ZCL_VCXI_PXSS_BL_RHNDL=>C_MIN
                                                       changing CF_DIMEN       = LS_RWGMI-RWGMI ).
        else.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***   Calculate Roll Weight by Length
      when others.
***     Get Roll Length
        LS_RLEMI = ME->GET_RLEMI( ).

***     Core Weight per Roll
        LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
        if LR_PR_MS_CORE is bound.
          LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
        endif.

***     Calculate Roll Weight
        if LS_RLEMI-RLEMI is not initial.
          LS_RWGMI = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLWGT_BY_RLLEN( IS_RLLEN = LS_RLEMI
                                                                                   IS_CRWGT = LS_CRWGT
                                                                                   IS_WIWID = ME->GET_WIWID( )
                                                                                   IS_WISWG = ME->GET_WISWG( ) )
                                      mapping RWGMI     = RLWGT
                                              RWGMI_UOM = RLWGT_UOM ).
        else.
          clear LS_RWGMI-RWGMI.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Set Roll Weight Minimum
    ME->SET_RWGMI( IS_RWGMI = LS_RWGMI ).

  endmethod.
  method HANDLE_RECALC_RWGTA.

    data: LF_RDMTA type ZVCXI_PXS_RDMTA.
    data: LS_RWGTA type ZVCXI_PXS_S_RWGTA,
          LS_CRWGT type ZVCXI_PXS_S_CRWGT.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.


***--------------------------------------------------------------------------------------
*** Check Roll Weight is not selected
    ME->GET_RDIMTA( importing EF_RDMTA = LF_RDMTA ).
    check LF_RDMTA ne 'W'.

    clear LS_RWGTA.
    LS_RWGTA-RWGTA_UOM = ME->GET_RWGTA( )-RWGTA_UOM.

***--------------------------------------------------------------------------------------
*** Core Weight per Roll
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.
      LR_PR_MS_CORE->GET_CRWGT( importing ES_CRWGT_PRL = LS_CRWGT ).
    endif.

*** Calculate Roll Weight
    LS_RWGTA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLWGT_BY_RLLEN( IS_RLLEN = ME->GET_RLETA( )
                                                                             IS_CRWGT = LS_CRWGT
                                                                             IS_WIWID = ME->GET_WIWID( )
                                                                             IS_WISWG = ME->GET_WISWG( ) )
                                mapping RWGTA     = RLWGT
                                        RWGTA_UOM = RLWGT_UOM ).

***--------------------------------------------------------------------------------------
*** Set Roll Weight Target
    ME->SET_RWGTA( IS_RWGTA = LS_RWGTA ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_EYEMP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EYEMP ).

    if IF_EYEMP is supplied.
      LS_PARAM-ATWRT = IF_EYEMP.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EYEMP_CHANGED ).
    endif.

  endmethod.
  method SET_PERMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMA ).

    if IS_PERMA is supplied.
      LS_PARAM-ATFLV = IS_PERMA-PERMA.
      LS_PARAM-UNIT  = IS_PERMA-PERMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PERMA_CHANGED ).
    endif.

  endmethod.
  method SET_PERMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PERMI ).

    if IS_PERMI is supplied.
      LS_PARAM-ATFLV = IS_PERMI-PERMI.
      LS_PARAM-UNIT  = IS_PERMI-PERMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PERMI_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMA ).

    if IS_RDIMA is supplied.
      LS_PARAM-ATFLV = IS_RDIMA-RDIMA.
      LS_PARAM-UNIT  = IS_RDIMA-RDIMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDIMA_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDIMI ).

    if IS_RDIMI is supplied.
      LS_PARAM-ATFLV = IS_RDIMI-RDIMI.
      LS_PARAM-UNIT  = IS_RDIMI-RDIMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDIMI_CHANGED ).
    endif.

  endmethod.
  method SET_RDIMMM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMMM ).

    if IF_RDMMM is supplied.
      LS_PARAM-ATWRT = IF_RDMMM.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if IS_RDIMMM is supplied.
      LS_PARAM-ATWRT = IS_RDIMMM-RDMMM.
      LS_PARAM-SETBY = IF_SETBY.
    endif.

    if IF_SETBY is initial.
      clear: LS_PARAM-ATWRT,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDMMM_CHANGED ).
    endif.

***--------------------------------------------------------------------------------------
    if IS_RDIMMM is supplied.
      case IS_RDIMMM-RDMMM.
***     Roll Diameter Minimum/Maximum
        when 'D'.
          ME->SET_RDIMI( IS_RDIMI = value #( RDIMI     = IS_RDIMMM-RDVMI
                                             RDIMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RDIMA( IS_RDIMA = value #( RDIMA     = IS_RDIMMM-RDVMA
                                             RDIMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Length and Weight
          ME->SET_RLEMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Length Minimum/Maximum
        when 'L'.
          ME->SET_RLEMI( IS_RLEMI = value #( RLEMI     = IS_RDIMMM-RDVMI
                                             RLEMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RLEMA( IS_RLEMA = value #( RLEMA     = IS_RDIMMM-RDVMA
                                             RLEMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Weight
          ME->SET_RDIMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RDIMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Weight Minimum/Maximum
        when 'W'.
          ME->SET_RWGMI( IS_RWGMI = value #( RWGMI     = IS_RDIMMM-RDVMI
                                             RWGMI_UOM = IS_RDIMMM-RDVMI_UOM )
                         IF_SETBY = IF_SETBY ).
          ME->SET_RWGMA( IS_RWGMA = value #( RWGMA     = IS_RDIMMM-RDVMA
                                             RWGMA_UOM = IS_RDIMMM-RDVMA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Length
          ME->SET_RDIMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RDIMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLEMA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

      endcase.
    endif.

  endmethod.
  method SET_RDIMTA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Set Parameter for Dimension
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDMTA ).

    if IF_RDMTA is supplied.
      LS_PARAM-ATWRT = IF_RDMTA.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if IS_RDIMTA is supplied.
      LS_PARAM-ATWRT = IS_RDIMTA-RDMTA.
      LS_PARAM-SETBY = IF_SETBY.
    endif.

    if IF_SETBY is initial.
      clear: LS_PARAM-ATWRT,
             LS_PARAM-SETBY.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDMTA_CHANGED ).
    endif.

***--------------------------------------------------------------------------------------
    if IS_RDIMTA is supplied.
      case IS_RDIMTA-RDMTA.
***     Roll Diameter Target
        when 'D'.
          ME->SET_RDITA( IS_RDITA = value #( RDITA     = IS_RDIMTA-RDVTA
                                             RDITA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Length and Weight
          ME->SET_RLETA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGTA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Length Target
        when 'L'.
          ME->SET_RLETA( IS_RLETA = value #( RLETA     = IS_RDIMTA-RDVTA
                                             RLETA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Weight
          ME->SET_RDITA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RWGTA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

***     Roll Weight Target
        when 'W'.
          ME->SET_RWGTA( IS_RWGTA = value #( RWGTA     = IS_RDIMTA-RDVTA
                                             RWGTA_UOM = IS_RDIMTA-RDVTA_UOM )
                         IF_SETBY = IF_SETBY ).
***       Reset Diameter and Length
          ME->SET_RDITA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
          ME->SET_RLETA( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).

      endcase.
    endif.

  endmethod.
  method SET_RDITA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RDITA ).

    if IS_RDITA is supplied.
      LS_PARAM-ATFLV = IS_RDITA-RDITA.
      LS_PARAM-UNIT  = IS_RDITA-RDITA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RDITA_CHANGED ).
    endif.

  endmethod.
  method SET_RLEMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMA ).

    if IS_RLEMA is supplied.
      LS_PARAM-ATFLV = IS_RLEMA-RLEMA.
      LS_PARAM-UNIT  = IS_RLEMA-RLEMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEMA_CHANGED ).
    endif.

  endmethod.
  method SET_RLEMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLEMI ).

    if IS_RLEMI is supplied.
      LS_PARAM-ATFLV = IS_RLEMI-RLEMI.
      LS_PARAM-UNIT  = IS_RLEMI-RLEMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLEMI_CHANGED ).
    endif.

  endmethod.
  method SET_RLETA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLETA ).

    if IS_RLETA is supplied.
      LS_PARAM-ATFLV = IS_RLETA-RLETA.
      LS_PARAM-UNIT  = IS_RLETA-RLETA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLETA_CHANGED ).
    endif.

  endmethod.
  method SET_RWGMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMA ).

    if IS_RWGMA is supplied.
      LS_PARAM-ATFLV = IS_RWGMA-RWGMA.
      LS_PARAM-UNIT  = IS_RWGMA-RWGMA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGMA_CHANGED ).
    endif.

  endmethod.
  method SET_RWGMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGMI ).

    if IS_RWGMI is supplied.
      LS_PARAM-ATFLV = IS_RWGMI-RWGMI.
      LS_PARAM-UNIT  = IS_RWGMI-RWGMI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGMI_CHANGED ).
    endif.

  endmethod.
  method SET_RWGTA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RWGTA ).

    if IS_RWGTA is supplied.
      LS_PARAM-ATFLV = IS_RWGTA-RWGTA.
      LS_PARAM-UNIT  = IS_RWGTA-RWGTA_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RWGTA_CHANGED ).
    endif.

  endmethod.
  method SET_WIDIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIDIR ).

    if IF_WIDIR is supplied.
      LS_PARAM-ATWRT = IF_WIDIR.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIDIR_CHANGED ).
    endif.

  endmethod.
  method SET_WISID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISID ).

    if IF_WISID is supplied.
      LS_PARAM-ATWRT = IF_WISID.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISID_CHANGED ).
    endif.

  endmethod.
  method SET_WISWG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISWG ).

    LS_PARAM-ATFLV = IS_WISWG-WISWG.
    LS_PARAM-UNIT  = IS_WISWG-WISWG_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISWG_CHANGED ).
    endif.

  endmethod.
  method SET_WITHI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WITHI ).

    LS_PARAM-ATFLV = IS_WITHI-WITHI.
    LS_PARAM-UNIT  = IS_WITHI-WITHI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WITHI_CHANGED ).
    endif.

  endmethod.
  method SET_WIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWID ).

    LS_PARAM-ATFLV = IS_WIWID-WIWID.
    LS_PARAM-UNIT  = IS_WIWID-WIWID_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIWID_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.
    field-symbols: <S_FDI_RHNDL> type ZVCXI_PXSS_S_FDI_RHNDL.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_RHNDL.
    assign RR_DATA->* to <S_FDI_RHNDL>.


***--------------------------------------------------------------------------------------
*** Get Roll Dimension Target
    case ME->GET_RDIMTA( importing ES_RDITA  = <S_FDI_RHNDL>-S_RDITA
                                   ES_RLETA  = <S_FDI_RHNDL>-S_RLETA
                                   ES_RWGTA  = <S_FDI_RHNDL>-S_RWGTA )-RDMTA.
      when 'D'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RDITA.
      when 'L'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RLETA.
      when 'W'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RWGTA.
    endcase.


***--------------------------------------------------------------------------------------
*** Get Roll Dimension Minimum/Maximum
    case ME->GET_RDIMMM( )-RDMMM.
      when 'D'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RDIMM.
      when 'L'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RLEMM.
      when 'W'.
        move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_RWGMM.
    endcase.

*** Get Roll Diameter Minimum/Maximum
    <S_FDI_RHNDL>-S_RDIMI = ME->GET_RDIMI( ).
    <S_FDI_RHNDL>-S_RDIMA = ME->GET_RDIMA( ).

*** Get Roll Length Minimum/Maximum
    <S_FDI_RHNDL>-S_RLEMI = ME->GET_RLEMI( ).
    <S_FDI_RHNDL>-S_RLEMA = ME->GET_RLEMA( ).

*** Get Roll Weight Minimum/Maximum
    <S_FDI_RHNDL>-S_RWGMI = ME->GET_RWGMI( ).
    <S_FDI_RHNDL>-S_RWGMA = ME->GET_RWGMA( ).

*** Get Percentage Minimum
    <S_FDI_RHNDL>-S_PERMI = ME->GET_PERMI( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to <S_FDI_RHNDL>-FOVRR_PERMM.
    endif.
*** Get Percentage Maximum
    <S_FDI_RHNDL>-S_PERMA = ME->GET_PERMA( ).


***--------------------------------------------------------------------------------------
*** Get Winding Side
    <S_FDI_RHNDL>-WISID = ME->GET_WISID( ).

*** Get Winding Direction
    <S_FDI_RHNDL>-WIDIR = ME->GET_WIDIR( ).

*** Get Eyemark Position
    <S_FDI_RHNDL>-EYEMP = ME->GET_EYEMP( ).


***--------------------------------------------------------------------------------------
*** Get Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.
      <S_FDI_RHNDL>-MATNR_CORE = LR_PR_MS_CORE->GET_MATNR( ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_RHNDL_OLD type ZVCXI_PXSS_S_FDI_RHNDL,
          LS_FDI_RHNDL_NEW type ZVCXI_PXSS_S_FDI_RHNDL.
    data: LR_DATA_OLD   type ref to DATA,
          LR_PR_MS_CORE type ref to ZCL_VCXI_PXSS_PR_MS_CORE.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_RHNDL_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_RHNDL_NEW = corresponding #( <S_DATA> ).
    endif.


***--------------------------------------------------------------------------------------
*** Set Roll Dimension Target
    if LS_FDI_RHNDL_OLD-FOVRR_RDITA ne LS_FDI_RHNDL_NEW-FOVRR_RDITA or
       LS_FDI_RHNDL_OLD-FOVRR_RLETA ne LS_FDI_RHNDL_NEW-FOVRR_RLETA or
       LS_FDI_RHNDL_OLD-FOVRR_RWGTA ne LS_FDI_RHNDL_NEW-FOVRR_RWGTA.
      ME->SET_RDIMTA( IF_RDMTA = cond #( when LS_FDI_RHNDL_NEW-FOVRR_RDITA eq ABAP_TRUE then 'D'
                                         when LS_FDI_RHNDL_NEW-FOVRR_RLETA eq ABAP_TRUE then 'L'
                                         when LS_FDI_RHNDL_NEW-FOVRR_RWGTA eq ABAP_TRUE then 'W' )
                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Diameter Target
    if LS_FDI_RHNDL_OLD-S_RDITA     ne LS_FDI_RHNDL_NEW-S_RDITA and
       LS_FDI_RHNDL_NEW-FOVRR_RDITA eq ABAP_TRUE.
      ME->SET_RDITA( exporting IS_RDITA = LS_FDI_RHNDL_NEW-S_RDITA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Length Target
    if LS_FDI_RHNDL_OLD-S_RLETA     ne LS_FDI_RHNDL_NEW-S_RLETA and
       LS_FDI_RHNDL_NEW-FOVRR_RLETA eq ABAP_TRUE.
      ME->SET_RLETA( exporting IS_RLETA = LS_FDI_RHNDL_NEW-S_RLETA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Weight Target
    if LS_FDI_RHNDL_OLD-S_RWGTA     ne LS_FDI_RHNDL_NEW-S_RWGTA and
       LS_FDI_RHNDL_NEW-FOVRR_RWGTA eq ABAP_TRUE.
      ME->SET_RWGTA( exporting IS_RWGTA = LS_FDI_RHNDL_NEW-S_RWGTA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Minimum/Maximum Dimension
    if LS_FDI_RHNDL_OLD-FOVRR_RDIMM ne LS_FDI_RHNDL_NEW-FOVRR_RDIMM or
       LS_FDI_RHNDL_OLD-FOVRR_RLEMM ne LS_FDI_RHNDL_NEW-FOVRR_RLEMM or
       LS_FDI_RHNDL_OLD-FOVRR_RWGMM ne LS_FDI_RHNDL_NEW-FOVRR_RWGMM.
      ME->SET_RDIMMM( IF_RDMMM = cond #( when LS_FDI_RHNDL_NEW-FOVRR_RDIMM eq ABAP_TRUE then 'D'
                                         when LS_FDI_RHNDL_NEW-FOVRR_RLEMM eq ABAP_TRUE then 'L'
                                         when LS_FDI_RHNDL_NEW-FOVRR_RWGMM eq ABAP_TRUE then 'W' )
                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Diameter Minimum/Maximum
    if LS_FDI_RHNDL_OLD-S_RDIMI     ne LS_FDI_RHNDL_NEW-S_RDIMI and
       LS_FDI_RHNDL_NEW-FOVRR_RDIMM eq ABAP_TRUE.
      ME->SET_RDIMI( exporting IS_RDIMI = LS_FDI_RHNDL_NEW-S_RDIMI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if LS_FDI_RHNDL_OLD-S_RDIMA     ne LS_FDI_RHNDL_NEW-S_RDIMA and
       LS_FDI_RHNDL_NEW-FOVRR_RDIMM eq ABAP_TRUE.
      ME->SET_RDIMA( exporting IS_RDIMA = LS_FDI_RHNDL_NEW-S_RDIMA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Length Minimum/Maximum
    if LS_FDI_RHNDL_OLD-S_RLEMI     ne LS_FDI_RHNDL_NEW-S_RLEMI and
       LS_FDI_RHNDL_NEW-FOVRR_RLEMM eq ABAP_TRUE.
      ME->SET_RLEMI( exporting IS_RLEMI = LS_FDI_RHNDL_NEW-S_RLEMI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if LS_FDI_RHNDL_OLD-S_RLEMA     ne LS_FDI_RHNDL_NEW-S_RLEMA and
       LS_FDI_RHNDL_NEW-FOVRR_RLEMM eq ABAP_TRUE.
      ME->SET_RLEMA( exporting IS_RLEMA = LS_FDI_RHNDL_NEW-S_RLEMA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Weight Minimum/Maximum
    if LS_FDI_RHNDL_OLD-S_RWGMI     ne LS_FDI_RHNDL_NEW-S_RWGMI and
       LS_FDI_RHNDL_NEW-FOVRR_RWGMM eq ABAP_TRUE.
      ME->SET_RWGMI( exporting IS_RWGMI = LS_FDI_RHNDL_NEW-S_RWGMI
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if LS_FDI_RHNDL_OLD-S_RWGMA     ne LS_FDI_RHNDL_NEW-S_RWGMA and
       LS_FDI_RHNDL_NEW-FOVRR_RWGMM eq ABAP_TRUE.
      ME->SET_RWGMA( exporting IS_RWGMA = LS_FDI_RHNDL_NEW-S_RWGMA
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Percentage Minimum
    if     LS_FDI_RHNDL_OLD-S_PERMI     ne LS_FDI_RHNDL_NEW-S_PERMI
        or LS_FDI_RHNDL_OLD-FOVRR_PERMM ne LS_FDI_RHNDL_NEW-FOVRR_PERMM.

      if LS_FDI_RHNDL_NEW-FOVRR_PERMM eq ABAP_TRUE.
        ME->SET_PERMI( exporting IS_PERMI = LS_FDI_RHNDL_NEW-S_PERMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_PERMI( exporting IS_PERMI = LS_FDI_RHNDL_NEW-S_PERMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Percentage Maximum
    if     LS_FDI_RHNDL_OLD-S_PERMA     ne LS_FDI_RHNDL_NEW-S_PERMA
        or LS_FDI_RHNDL_OLD-FOVRR_PERMM ne LS_FDI_RHNDL_NEW-FOVRR_PERMM.

      if LS_FDI_RHNDL_NEW-FOVRR_PERMM eq ABAP_TRUE.
        ME->SET_PERMA( exporting IS_PERMA = LS_FDI_RHNDL_NEW-S_PERMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_PERMA( exporting IS_PERMA = LS_FDI_RHNDL_NEW-S_PERMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Winding Side
    if LS_FDI_RHNDL_OLD-WISID ne LS_FDI_RHNDL_NEW-WISID and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'WISID' ] ).
      ME->SET_WISID( exporting IF_WISID = LS_FDI_RHNDL_NEW-WISID
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Winding Direction
    if LS_FDI_RHNDL_OLD-WIDIR ne LS_FDI_RHNDL_NEW-WIDIR and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'WIDIR' ] ).
      ME->SET_WIDIR( exporting IF_WIDIR = LS_FDI_RHNDL_NEW-WIDIR
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Eyemark Position
    if LS_FDI_RHNDL_OLD-EYEMP ne LS_FDI_RHNDL_NEW-EYEMP and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'EYEMP' ] ).
      ME->SET_EYEMP( exporting IF_EYEMP = LS_FDI_RHNDL_NEW-EYEMP
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***------------------------------------------------------------------------------------------------
*** Get and update Core
    LR_PR_MS_CORE = ME->GET_PRVDR_MS_CORE( ).
    if LR_PR_MS_CORE is bound.
      if LS_FDI_RHNDL_OLD-MATNR_CORE ne LS_FDI_RHNDL_NEW-MATNR_CORE and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'MATNR_CORE' ] ).
        LR_PR_MS_CORE->SET_MATNR( IF_MATNR = LS_FDI_RHNDL_NEW-MATNR_CORE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

  endmethod.
