
class ZCL_VCXI_PXSS_GRID_MARK definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_MARK_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  methods CHANGE_STYLE_MARK
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_MARK_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_MARK_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods CHECK_PRVDR_ADD
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_MARK definition
class ZCL_VCXI_PXSS_GRID_MARK implementation.
  method CHANGE_STYLE_MARK.

    free CT_STYL.

*** Set Marking Type = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TMARK'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Marking Type Description = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TMARK_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Marking Position = Editable if needed
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MARKP'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Marking Position Descripton = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MARKP_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Number Print = Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NUMPR'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Assigned Color Number = Editable if needed
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ACONO'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Coverage = Editable if needed
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Coverage Unit = Not Editable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG_UOM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHECK_PRVDR_ADD.

    data: LF_TPRIN type ZVCXI_PXS_TPRIN.

*** Get Print Type
    LF_TPRIN = cast ZIF_VCXI_PXSS_PRINT( ME->R_GATE->R_CLSPR )->GET_TPRIN( ).

*** Is Marking allowed for Print Type
    if ZCL_VCXI_PXSS_CUST_PRINT=>GET_TPRIN_FMRKA( IF_TPRIN = LF_TPRIN ).
      RF_DISABLED = SUPER->CHECK_PRVDR_ADD( IF_ID = IF_ID ).
    else.
      RF_DISABLED = ABAP_TRUE.
    endif.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button
  ME->F_IPRVT = ZCL_VCXI_PXSS_PR_MARK=>C_IPRVT_PX_MARK.

endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type          /VCXI/CKX_LOCKED,
          LF_INUSE  type          /VCXI/VKSR_INUSE.
    field-symbols: <T_DATA> type standard table,
                   <S_FCAT> type          LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
          move ABAP_TRUE  to <S_FCAT>-TECH.
          move 0          to <S_FCAT>-COL_POS.

        when 'TMARK' or 'MARKP' or 'NUMPR' or 'ACONO' or 'COVRG'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'TMARK_DESCR'.
          move 'Marking Type Descr.'(001)       to <S_FCAT>-COLTEXT.

        when 'MARKP_DESCR'.
          move 'Marking Position Descr.'(002)   to <S_FCAT>-COLTEXT.

      endcase.
    endloop.
  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT type LVC_S_LAYO.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <T_STYL> type          LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ME->F_IPRVT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
***   Add Line with Gate Key Data
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_PXSS_S_MARK_GRID( POSID  = LR_GATE->GET_POSID( )
                                                       GATKY  = LR_GATE->F_GATKY
                                                       R_GATE = LR_GATE
                                                     ) to <S_DATA>.

***   Get Visualization Data
      ME->GET_MARK_VIS( exporting IR_GATE = LR_GATE
                          changing  CS_DATA = <S_DATA> ).

***   Set Style Details
      if LS_LAYOUT-STYLEFNAME is not initial.
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_MARK( exporting IR_GATE = LR_GATE
                                           IS_DATA = <S_DATA>
                                  changing CT_STYL = <T_STYL> ).
***       Call DVC Servcie - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endif.
    endloop.

  endmethod.
  method GET_MARK_VIS.

    data: LS_MARK_VIS type ZVCXI_PXSS_S_MARK_VIS.
    data: LR_PR_MARK type ref to ZCL_VCXI_PXSS_PR_MARK.


***--------------------------------------------------------------------------------------
*** Get PR Class
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_MARK.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_PR_MARK is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_MARK_VIS.

***--------------------------------------------------------------------------------------
*** Marking Type
    LS_MARK_VIS-TMARK = LR_PR_MARK->GET_TMARK( importing EF_DESCR = LS_MARK_VIS-TMARK_DESCR ).

*** Marking Position
    LS_MARK_VIS-MARKP = LR_PR_MARK->GET_MARKP( importing EF_DESCR = LS_MARK_VIS-MARKP_DESCR ).

*** Number Print for Markings
    LS_MARK_VIS-NUMPR = LR_PR_MARK->GET_NUMPR( ).

*** Assigned Color Number
    LS_MARK_VIS-ACONO = LR_PR_MARK->GET_ACONO( ).

*** Coverage
    LS_MARK_VIS-S_COVRG = LR_PR_MARK->GET_COVRG( ).

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_MARK_VIS to CS_DATA.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_MARK_GRID type ZVCXI_PXSS_S_MARK_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          move-corresponding <S_DATA> to LS_MARK_GRID.

          check LS_MARK_GRID-R_GATE is bound and
                LS_MARK_GRID-R_GATE->F_FREED is initial.

***       Set Values to PR Class
          ME->SET_MARK_VIS( IR_GATE = LS_MARK_GRID-R_GATE
                            IS_DATA = <S_DATA> ).

        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method SET_MARK_VIS.

    data: LS_MARK_VIS_OLD type        ZVCXI_PXSS_S_MARK_VIS,
          LS_MARK_VIS_NEW type        ZVCXI_PXSS_S_MARK_VIS.
    data: LR_PR_MARK  type ref to ZCL_VCXI_PXSS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get PR Class
    check IR_GATE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_MARK.
    LR_PR_MARK ?= IR_GATE->R_CLSPR.
    check LR_PR_MARK is bound.

*** Get old Values
    ME->GET_MARK_VIS( exporting IR_GATE = IR_GATE
                      changing  CS_DATA = LS_MARK_VIS_OLD ).
*** Get new Values
    move-corresponding IS_DATA to LS_MARK_VIS_NEW.

***--------------------------------------------------------------------------------------
*** Marking Type
    if LS_MARK_VIS_NEW-TMARK ne LS_MARK_VIS_OLD-TMARK.
      LR_PR_MARK->SET_TMARK( IF_TMARK = LS_MARK_VIS_NEW-TMARK
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Marking Position
    if LS_MARK_VIS_NEW-MARKP ne LS_MARK_VIS_OLD-MARKP.
      LR_PR_MARK->SET_MARKP( IF_MARKP = LS_MARK_VIS_NEW-MARKP
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Number Print for Markings
    if LS_MARK_VIS_NEW-NUMPR ne LS_MARK_VIS_OLD-NUMPR.
      LR_PR_MARK->SET_NUMPR( IF_NUMPR = LS_MARK_VIS_NEW-NUMPR
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Assigned Color Number
    if LS_MARK_VIS_NEW-ACONO ne LS_MARK_VIS_OLD-ACONO.
      LR_PR_MARK->SET_ACONO( IF_ACONO = LS_MARK_VIS_NEW-ACONO
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Coverage
    if LS_MARK_VIS_NEW-S_COVRG ne LS_MARK_VIS_OLD-S_COVRG.
      LR_PR_MARK->SET_COVRG( IS_COVRG = LS_MARK_VIS_NEW-S_COVRG
                             IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
