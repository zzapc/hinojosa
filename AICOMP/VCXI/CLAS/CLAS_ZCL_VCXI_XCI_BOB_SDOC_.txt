
class ZCL_VCXI_XCI_BOB_SDOC definition
  public
  create public .

public section.

  types:
    YT_BAPICUCFG type standard table of BAPICUCFG .
  types:
    YT_BAPICUINS type standard table of BAPICUINS .
  types:
    YT_BAPICUPRT type standard table of BAPICUPRT .
  types:
    YT_BAPICUREF type standard table of BAPICUREF .
  types:
    YT_BAPICUVAL type standard table of BAPICUVAL .
  types:
    YT_KOMV type standard table of KOMV .
  types:
    YT_VBKD type standard table of VBKD .
  types:
    YT_VBEP type standard table of VBEP .
  types:
    YT_VBAP type standard table of VBAP .
  types:
    YT_VBPA type standard table of VBPA .

  data S_ORDER_VIEW type ORDER_VIEW .
  data S_VBAK type VBAK .
  data T_CFGS_INST type ZVCXI_XCI_TT_BAPICUINS .
  data T_CFGS_PART_OF type ZVCXI_XCI_TT_BAPICUPRT .
  data T_CFGS_REF type ZVCXI_XCI_TT_BAPICUCFG .
  data T_CFGS_REFINST type ZVCXI_XCI_TT_BAPICUREF .
  data T_CFGS_UPDKZ type ZVCXI_XCI_TT_CFGS_UPDKZ .
  data T_CFGS_VALUE type ZVCXI_XCI_TT_BAPICUVAL .
  data T_KOMV type YT_KOMV .
  data T_VBAP type YT_VBAP .
  data T_VBEP type YT_VBEP .
  data T_VBKD type YT_VBKD .
  data T_VBPA type YT_VBPA .
  data T_TEXT type BAPISDTEXT_T .

  methods ADD_CONFIG
    importing
      !IF_POSNR type POSNR
    exporting
      !EF_CONFIG_ID type CUX_CFG_ID
      !EF_INST_ID type CU_INST_ID
    raising
      /VCXI/CX_CKX .
  methods ADD_ITEM
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D optional
      !IF_KWMENG type KWMENG
      !IF_VRKME type VRKME optional
    returning
      value(RF_POSNR) type POSNR
    raising
      /VCXI/CX_CKX .
  methods COMPARE
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    returning
      value(RF_SIMILAR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE
    importing
      !IF_XML type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    importing
      !IF_POSNR type POSNR optional
      !IF_TDID type TDID
      !IF_LANGU type SYLANGU default SY-LANGU
    exporting
      !ET_BAPISDTEXT type BAPISDTEXT_T
    returning
      value(RF_TEXT) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_CONDSCALE
    importing
      !IF_KSCHL type KSCHL
      !IT_POSNR type ZVCXI_XCI_TT_POSNR
    exporting
      !EF_KONMS type KONMS
      !EF_KONWA type KONWA
      !EF_KPEIN type KPEIN
      !EF_KMEIN type KMEIN
      !EF_STFKZ type STFKZ
    returning
      value(RT_CONDSCALE) type ZVCXI_XCI_TT_CONDSCALE
    raising
      /VCXI/CX_CKX .
  methods GET_KOMG
    importing
      !IF_POSNR type POSNR
      !IF_PARVW type PARVW
    returning
      value(RS_KOMG) type KOMG .
  methods GET_POSNR_NEXT
    returning
      value(RF_POSNR) type POSNR
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_POSNR type POSNR
      !IF_TDID type TDID
      !IF_LANGU type SYLANGU default SY-LANGU
      !IF_TEXT type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_SVC
    importing
      !IF_POSNR type POSNR
    returning
      value(RR_SVC) type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_VBELN type VBELN
      !IS_ORDER_VIEW type ORDER_VIEW optional
    raising
      /VCXI/CX_CKX .
  methods RUN_CONFIG
    importing
      !IF_POSNR type POSNR
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
      !IF_NO_DIALOG type ABAP_BOOL default ABAP_TRUE
    returning
      value(RF_CUOBJ) type CUOBJ
    raising
      /VCXI/CX_CKX .
  methods SAVE
    importing
      !IF_TESTRUN type ABAP_BOOL default ABAP_FALSE
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    returning
      value(RR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    exporting
      !ET_DATA type ABAP_TRANS_SRCBIND_TAB
    returning
      value(RF_XML) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_BAPI_SAVE_IN,
      S_BAPISDHD1  type BAPISDHD1,
      T_BAPIPARNR  type standard table of BAPIPARNR  with default key,
      T_BAPISDITM  type standard table of BAPISDITM  with default key,
      T_BAPISCHDL  type standard table of BAPISCHDL  with default key,
      T_BAPICOND   type standard table of BAPICOND   with default key,
      T_BAPIPAREX  type standard table of BAPIPAREX  with default key,
      T_BAPISDTEXT type standard table of BAPISDTEXT with default key,
      T_BAPICUCFG  type standard table of BAPICUCFG  with default key,
      T_BAPICUINS  type standard table of BAPICUINS  with default key,
      T_BAPICUPRT  type standard table of BAPICUPRT  with default key,
      T_BAPICUVAL  type standard table of BAPICUVAL  with default key,
      T_BAPICUBLB  type standard table of BAPICUBLB  with default key,
      T_BAPICUVK   type standard table of BAPICUVK   with default key,
      T_BAPICUREF  type standard table of BAPICUREF  with default key,

    end of YS_BAPI_SAVE_IN .
  types:
    begin of YS_BAPI_SAVE_INX,
      S_BAPISDHD1X type BAPISDHD1X,
      T_BAPIPARNRC type standard table of BAPIPARNRC with default key,
      T_BAPISDITMX type standard table of BAPISDITMX with default key,
      T_BAPISCHDLX type standard table of BAPISCHDLX with default key,
      T_BAPICONDX  type standard table of BAPICONDX  with default key,
      T_BAPIPAREX  type standard table of BAPIPAREX with default key,
    end of YS_BAPI_SAVE_INX .
  types:
    begin of YS_BAPI_SAVE_RES,
      T_BAPIRET2       type standard table of BAPIRET2 with default key,
      S_BAPISDHD       type BAPISDHD,
      HEADER_STATUS    type BAPISDHDST,
      T_BAPISDIT       type ZVCXI_XCI_TT_BAPISDIT,
      T_SCHEDULE       type ZVCXI_XCI_TT_BAPISDHEDU,
      T_BUSINESS       type ZVCXI_XCI_TT_BAPISDBUSI,
      T_INCOMPLETE_LOG type ZVCXI_XCI_TT_BAPIINCOMP,
      T_EXTENSION      type ZVCXI_XCI_TT_BAPIPAREX,
      T_BAPICOND       type ZVCXI_XCI_TT_BAPICOND,
      T_PARTNERS       type ZVCXI_XCI_TT_BAPISDPART,
      T_TEXTHEADERS    type ZVCXI_XCI_TT_BAPISDTEHD,
      T_TEXTLINES      type ZVCXI_XCI_TT_BAPITEXTLI,
    end of YS_BAPI_SAVE_RES .

  class-methods GET_NEXT_CONFIG_ID
    importing
      !IT_CFGS_REFINST type ZVCXI_XCI_TT_BAPICUREF
    returning
      value(RF_CONFIG_ID) type CUX_CFG_ID
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPICONDX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPIPAREX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPIPARNRC
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPISCHDLX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPISDHD1X
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILL_BAPISDITMX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN
    changing
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods FILTER_BAPI_DATA_IN
    changing
      !CS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !CS_BAPI_SAVE_INX type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods GET_BAPISDLS
    returning
      value(RS_BAPISDLS) type BAPISDLS
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_IN
    returning
      value(RS_BAPI_SAVE_IN) type YS_BAPI_SAVE_IN
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_INX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN optional
    returning
      value(RS_BAPI_SAVE_INX) type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
  methods GET_CLTABLE_IN
    importing
      !IF_POSNR type POSNR
    returning
      value(RT_CLTABLE) type TT_CLTABLE
    raising
      /VCXI/CX_CKX .
  class-methods GET_TVAP
    importing
      !IF_PSTYV type PSTYV
    returning
      value(RS_TVAP) type TVAP
    raising
      /VCXI/CX_CKX .
  methods GET_TVAK
    returning
      value(RS_TVAK) type TVAK
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPICOND_TO_KOMV
    importing
      !IT_BAPICOND type ZVCXI_XCI_TT_BAPICOND
    changing
      !CT_KOMV type YT_KOMV
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPIPAREX_TO_VBAP
    importing
      !IT_BAPIPAREX type ZVCXI_XCI_TT_BAPIPAREX
    exporting
      !ES_BAPE_VBAP type BAPE_VBAP
    changing
      !CS_VBAP type VBAP
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPISDBUSI_TO_VBKD
    importing
      !IS_BAPISDBUSI type BAPISDBUSI
    changing
      !CS_VBKD type VBKD
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPISDHD_TO_VBAK
    importing
      !IS_BAPISDHD type BAPISDHD
    changing
      !CS_VBAK type VBAK
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPISDHEDU_TO_VBEP
    importing
      !IS_BAPISDHEDU type BAPISDHEDU
    changing
      !CS_VBEP type VBEP
    raising
      /VCXI/CX_CKX .
  methods MAP_BAPISDIT_TO_VBAP
    importing
      !IS_BAPISDIT type BAPISDIT
    changing
      !CS_VBAP type VBAP
    raising
      /VCXI/CX_CKX .
  methods MAP_VBAK_TO_BAPISDHD1
    importing
      !IS_VBAK type VBAK
    changing
      !CS_BAPISDHD1 type BAPISDHD1
    raising
      /VCXI/CX_CKX .
  methods MAP_VBAK_TO_BAPIPAREX
    importing
      !IS_VBAK type VBAK
    exporting
      !ES_BAPE_VBAK type BAPE_VBAK
    returning
      value(RS_BAPIPAREX) type BAPIPAREX
    raising
      /VCXI/CX_CKX .
  methods MAP_VBAP_TO_BAPIPAREX
    importing
      !IS_VBAP type VBAP
    exporting
      !ES_BAPE_VBAP type BAPE_VBAP
    returning
      value(RS_BAPIPAREX) type BAPIPAREX
    raising
      /VCXI/CX_CKX .
  methods MAP_VBEP_TO_BAPIPAREX
    importing
      !IS_VBEP type VBEP
    exporting
      !ES_BAPE_VBEP type BAPE_VBEP
    returning
      value(RS_BAPIPAREX) type BAPIPAREX
    raising
      /VCXI/CX_CKX .
  methods MAP_VBKD_TO_BAPIPAREX
    importing
      !IS_VBKD type VBKD
    exporting
      !ES_BAPE_VBKD type BAPE_VBKD
    returning
      value(RS_BAPIPAREX) type BAPIPAREX
    raising
      /VCXI/CX_CKX .
  methods MAP_VBAP_TO_BAPISDITM
    importing
      !IS_VBAP type VBAP
    changing
      !CS_BAPISDITM type BAPISDITM
    raising
      /VCXI/CX_CKX .
  methods MAP_VBEP_TO_BAPISCHDL
    importing
      !IS_VBEP type VBEP
    changing
      !CS_BAPISCHDL type BAPISCHDL
    raising
      /VCXI/CX_CKX .
  methods MAP_VBKD_TO_BAPISDHD1
    importing
      !IS_VBKD type VBKD
    changing
      !CS_BAPISDHD1 type BAPISDHD1
    raising
      /VCXI/CX_CKX .
  methods MAP_VBKD_TO_BAPISDITM
    importing
      !IS_VBKD type VBKD
    changing
      !CS_BAPISDITM type BAPISDITM
    raising
      /VCXI/CX_CKX .
  methods MAP_VBPA_TO_BAPIPARNR
    importing
      !IS_VBPA type VBPA
    returning
      value(RS_BAPIPARNR) type BAPIPARNR
    raising
      /VCXI/CX_CKX .
  methods PROCESS_BAPI_RES
    importing
      !IS_BAPI_SAVE_RES type YS_BAPI_SAVE_RES
      !IF_TESTRUN type ABAP_BOOL
      !IF_COMMIT type ABAP_BOOL
    returning
      value(RR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
private section.

  data S_TVAK type TVAK .
endclass. "ZCL_VCXI_XCI_BOB_SDOC definition
class ZCL_VCXI_XCI_BOB_SDOC implementation.
  method ADD_CONFIG.

    data: LF_CUOBJ     type CUOBJ,
          LF_CONFIG_ID type CUX_CFG_ID value '000001',
          LF_INST_ID   type CU_INST_ID value '00000001'.
    data: LS_VBAP type VBAP,
          LS_CUCO type CUCO.


***----------------------------------------------------------------------------
*** Get Position
    LS_VBAP = value #( ME->T_VBAP[ POSNR = IF_POSNR ] optional ).
    if LS_VBAP-POSNR ne IF_POSNR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check not LINE_EXISTS( ME->T_CFGS_REFINST[ POSEX = IF_POSNR ] ).

*** Get next Configuration ID
    LF_CONFIG_ID = ME->GET_NEXT_CONFIG_ID( IT_CFGS_REFINST = ME->T_CFGS_REFINST ).

***----------------------------------------------------------------------------
*** Get Profile Settings if already known for the item (if not continue w/o)
    select single CUOBJ
           from MARC
           into LF_CUOBJ
          where MATNR eq LS_VBAP-MATNR
           and  WERKS eq LS_VBAP-WERKS.
    if SY-SUBRC eq 0 and
       LF_CUOBJ is not initial.
      call function 'CUCB_GET_PROFILE_OF_INSTANCE'
        exporting
          INSTANCE                     = LF_CUOBJ
        importing
          PROFILE_WA                   = LS_CUCO
        exceptions
          INVALID_INSTANCE             = 1
          INSTANCE_IS_A_CLASSIFICATION = 2
          PROFILE_NOT_FOUND            = 3
          INVALID_INPUT                = 4.
      check SY-SUBRC eq 0.
    endif.


*** Reference Order Item / Instance in Configuration
    append value #( POSEX     = LS_VBAP-POSNR
                    CONFIG_ID = LF_CONFIG_ID
                    INST_ID   = LF_INST_ID
                  ) to ME->T_CFGS_REFINST.

*** Instances
    append value #( CONFIG_ID     = LF_CONFIG_ID
                    INST_ID       = LF_INST_ID
                    OBJ_TYPE      = LS_CUCO-OBTAB
                    CLASS_TYPE    = LS_CUCO-KLART
                    OBJ_KEY       = LS_CUCO-OBJEK
                    QUANTITY      = LS_VBAP-KWMENG
                    QUANTITY_UNIT = LS_VBAP-VRKME
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to ME->T_CFGS_INST.

*** Configuration Data
    append value #( POSEX         = LS_VBAP-POSNR
                    CONFIG_ID     = LF_CONFIG_ID
                    ROOT_ID       = LF_INST_ID
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to ME->T_CFGS_REF.

*** Update Flag for Configuration
    append value #( POSNR = LS_VBAP-POSNR
                    UPDKZ = 'I'
                  ) to ME->T_CFGS_UPDKZ.

***----------------------------------------------------------------------------
*** Return Information
    EF_CONFIG_ID = LF_CONFIG_ID.
    EF_INST_ID   = LF_INST_ID.

  endmethod.
  method ADD_ITEM.

    data: LF_WERKS type WERKS_D,
          LF_VRKME type VRKME,
          LF_UMREZ type UMREZ,
          LF_UMREN type UMREN.


***----------------------------------------------------------------------------
*** Search for General View
    select single MATNR, MEINS
           into @data(LS_MARA)
           from MARA
          where MATNR eq @IF_MATNR
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0.

*** Search for Sales View
    select single MATNR, VRKME, DWERK
           into @data(LS_MVKE)
           from MVKE
          where MATNR eq @IF_MATNR
           and  VKORG eq @ME->S_VBAK-VKORG
           and  VTWEG eq @ME->S_VBAK-VTWEG
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0.

*** Determine Plant
    LF_WERKS = cond #( when IF_WERKS is supplied then IF_WERKS
                                                 else LS_MVKE-DWERK ).
    LF_VRKME = cond #( when IF_VRKME      is supplied    then IF_VRKME
                       when LS_MVKE-VRKME is not initial then LS_MVKE-VRKME
                                                         else LS_MARA-MEINS ).

*** Search for Plant View
    select single MATNR, WERKS
           into @data(LT_MARC)
           from MARC
          where MATNR eq @IF_MATNR
           and  WERKS eq @LF_WERKS
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0.


*** Determine Conversion Factors
    try.
        if LF_VRKME ne LS_MARA-MEINS.
          CL_MD_PRODUCT_UNIT_CONVERSION=>CONVERT( exporting PRODUCT             = IF_MATNR
                                                            ALTERNATIVEUNIT     = LF_VRKME
                                                            NO_OUTPUT           = ABAP_TRUE
                                                  importing QUANTITYNUMERATOR   = LF_UMREZ
                                                            QUANTITYDENOMINATOR = LF_UMREN ).
        else.
          LF_UMREZ = 1.
          LF_UMREN = 1.
        endif.
      catch CX_MD_PRODUCT_UNIT_CONVERSION into data(LR_CX_MD).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_MD ).
    endtry.

***----------------------------------------------------------------------------
*** Add Item
    RF_POSNR = ME->GET_POSNR_NEXT( ).
    append value #( POSNR  = RF_POSNR
                    MATNR  = LS_MVKE-MATNR
                    WERKS  = LF_WERKS
                    SPART  = ME->S_VBAK-SPART
                    KWMENG = IF_KWMENG
                    VRKME  = LF_VRKME
                    MEINS  = LS_MARA-MEINS
                    UMVKZ  = LF_UMREZ
                    UMVKN  = LF_UMREN
                    STDAT  = SY-DATUM
                  ) to ME->T_VBAP assigning field-symbol(<S_VBAP>).

*** Schedule Lines Data
    append value #( POSNR = <S_VBAP>-POSNR
                    ETENR = '0001'
                    WMENG = <S_VBAP>-KWMENG
                    VRKME = <S_VBAP>-VRKME
                    MEINS = <S_VBAP>-MEINS
                  ) to ME->T_VBEP.

  endmethod.
  method COMPARE.

    check IR_BOB_SDOC is bound.

*** View for Mass Selection of Sales Orders
    check ME->S_ORDER_VIEW eq IR_BOB_SDOC->S_ORDER_VIEW.

*** Sales Document: Header Data
    if ME->S_ORDER_VIEW-HEADER eq ABAP_TRUE.
      check ME->S_VBAK eq IR_BOB_SDOC->S_VBAK.
    endif.

*** Sales Document: Item Data
    if ME->S_ORDER_VIEW-ITEM eq ABAP_TRUE.
      check ME->T_VBAP eq IR_BOB_SDOC->T_VBAP.
    endif.

*** Sales Document: Schedule Line Data
    if ME->S_ORDER_VIEW-SDSCHEDULE eq ABAP_TRUE.
      check ME->T_VBEP eq IR_BOB_SDOC->T_VBEP.
    endif.

*** Sales Document: Business Data
    if ME->S_ORDER_VIEW-BUSINESS eq ABAP_TRUE.
      check ME->T_VBKD eq IR_BOB_SDOC->T_VBKD.
    endif.

*** Sales Document: Partner
    if ME->S_ORDER_VIEW-PARTNER eq ABAP_TRUE.
      check ME->T_VBPA eq IR_BOB_SDOC->T_VBPA.
    endif.

*** Pricing Communications-Condition Record
    if ME->S_ORDER_VIEW-SDCOND eq ABAP_TRUE.
      check ME->T_KOMV eq IR_BOB_SDOC->T_KOMV.
    endif.

*** Configuration
    if ME->S_ORDER_VIEW-CONFIGURE eq ABAP_TRUE.
      check ME->T_CFGS_INST     eq IR_BOB_SDOC->T_CFGS_INST    and
            ME->T_CFGS_VALUE    eq IR_BOB_SDOC->T_CFGS_VALUE   and
            ME->T_CFGS_REFINST  eq IR_BOB_SDOC->T_CFGS_REFINST and
            ME->T_CFGS_PART_OF  eq IR_BOB_SDOC->T_CFGS_PART_OF and
            ME->T_CFGS_REF      eq IR_BOB_SDOC->T_CFGS_REF     and
            ME->T_CFGS_UPDKZ    eq IR_BOB_SDOC->T_CFGS_UPDKZ.
    endif.


    RF_SIMILAR = ABAP_TRUE.

  endmethod.
  method DEQUEUE.

    check ME->S_VBAK-VBELN is not initial.

*** Unlock Sales document
    call function 'DEQUEUE_EVVBAKE'
      exporting
        VBELN = ME->S_VBAK-VBELN.

  endmethod.
  method DESERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


    check IF_XML is not initial.

*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Open XML
*{   REPLACE        SX2K900207                                        1
*\    call transformation ID
*\         source xml IF_XML
*\         result (LT_DATA).

    data(LF_XML) = REPLACE( VAL = IF_XML SUB = '0E-14' WITH = '0.0' OCC = 0 ).

    call transformation ID
         source xml LF_XML
         result (LT_DATA).
*}   REPLACE

  endmethod.
  method ENQUEUE.

    check ME->S_VBAK-VBELN is not initial.

*** Lock Sales Document
    call function 'ENQUEUE_EVVBAKE'
      exporting
        MODE_VBAK      = 'E'
        VBELN          = ME->S_VBAK-VBELN
        _SCOPE         = '1'
        _WAIT          = 'X'
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2.

    if SY-SUBRC is not initial.
***   Sales document &1 is currently being processed by &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'V1'
                                                      IF_MSGNO = '042'
                                                      IF_MSGV1 = ME->S_VBAK-VBELN
                                                      IF_MSGV2 = SY-MSGV1
                                                      IF_TEMP  = ABAP_TRUE ).
    endif.

  endmethod.
  method FILL_BAPICONDX.

    types: begin of YS_KOMV_KEY,
             KPOSN type  KPOSN,
             STUNR type  STUNR,
             ZAEHK type  DZAEHK,
           end of YS_KOMV_KEY.

    data: LS_BAPICOND     type BAPICOND,
          LS_BAPICOND_OLD type BAPICOND,
          LS_KOMV_KEY     type YS_KOMV_KEY.
    data: LT_KOMV_KEY type standard table of YS_KOMV_KEY.
    field-symbols: <S_BAPICONDX> type BAPICONDX.


***--------------------------------------------------------------------------------------
*** Get all Conditions (New, Update and Deleted)
    LT_KOMV_KEY = value #( for S_BAPICOND in IS_BAPI_SAVE_IN-T_BAPICOND ( KPOSN = S_BAPICOND-ITM_NUMBER
                                                                          STUNR = S_BAPICOND-COND_ST_NO
                                                                          ZAEHK = S_BAPICOND-COND_COUNT ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_BAPICOND into LS_BAPICOND_OLD.
      if not LINE_EXISTS( LT_KOMV_KEY[ KPOSN = LS_BAPICOND_OLD-ITM_NUMBER
                                       STUNR = LS_BAPICOND_OLD-COND_ST_NO
                                       ZAEHK = LS_BAPICOND_OLD-COND_COUNT ] ).
        append value #( KPOSN = LS_BAPICOND_OLD-ITM_NUMBER
                        STUNR = LS_BAPICOND_OLD-COND_ST_NO
                        ZAEHK = LS_BAPICOND_OLD-COND_COUNT ) to LT_KOMV_KEY.
      endif.
    endloop.
    sort LT_KOMV_KEY.

***--------------------------------------------------------------------------------------
*** Conditions
    loop at LT_KOMV_KEY into LS_KOMV_KEY.
      append value #( ITM_NUMBER = LS_KOMV_KEY-KPOSN
                      COND_ST_NO = LS_KOMV_KEY-STUNR
                      COND_COUNT = LS_KOMV_KEY-ZAEHK ) to CS_BAPI_SAVE_INX-T_BAPICONDX assigning <S_BAPICONDX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPICOND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                          COND_ST_NO = LS_KOMV_KEY-STUNR
                                                          COND_COUNT = LS_KOMV_KEY-ZAEHK ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPICOND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                          COND_ST_NO = LS_KOMV_KEY-STUNR
                                                          COND_COUNT = LS_KOMV_KEY-ZAEHK ] ).
        <S_BAPICONDX>-UPDATEFLAG = 'I'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_BAPICOND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                             changing  CS_X_STRUC = <S_BAPICONDX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPICOND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                              COND_ST_NO = LS_KOMV_KEY-STUNR
                                                              COND_COUNT = LS_KOMV_KEY-ZAEHK ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPICOND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                              COND_ST_NO = LS_KOMV_KEY-STUNR
                                                              COND_COUNT = LS_KOMV_KEY-ZAEHK ] ).
        <S_BAPICONDX>-UPDATEFLAG = 'D'.

***   Update
      elseif IS_BAPI_SAVE_IN-T_BAPICOND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                             COND_ST_NO = LS_KOMV_KEY-STUNR
                                             COND_COUNT = LS_KOMV_KEY-ZAEHK ] ne
             IS_BAPI_SAVE_IN_OLD-T_BAPICOND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                             COND_ST_NO = LS_KOMV_KEY-STUNR
                                             COND_COUNT = LS_KOMV_KEY-ZAEHK ].
        <S_BAPICONDX>-UPDATEFLAG = 'U'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_BAPICOND[     ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                     COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                     COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_BAPICOND[ ITM_NUMBER = LS_KOMV_KEY-KPOSN
                                                                                                     COND_ST_NO = LS_KOMV_KEY-STUNR
                                                                                                     COND_COUNT = LS_KOMV_KEY-ZAEHK ]
                                             changing  CS_X_STRUC  = <S_BAPICONDX> ).

      endif.
    endloop.

  endmethod.
  method FILL_BAPIPAREX.

    data: LF_OFFSET type I,
          LF_OLD    type ABAP_BOOL.
    data: LS_BAPIPAREX     type BAPIPAREX,
          LS_BAPE_VBAP     type BAPE_VBAP,
          LS_BAPE_VBAP_OLD type BAPE_VBAP,
          LS_BAPE_VBAPX    type BAPE_VBAPX.
    field-symbols: <S_BAPIPAREX> type BAPIPAREX.


*** Process all Extensions
    loop at IS_BAPI_SAVE_IN-T_BAPIPAREX into LS_BAPIPAREX.
      describe field LS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.

      case LS_BAPIPAREX-STRUCTURE.
***------------------------------------------------------------------------------------------------
***     Look for VBAP Extension
        when 'BAPE_VBAP'.
          CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C( exporting IM_CONTAINER = LS_BAPIPAREX+LF_OFFSET
                                                         importing EX_VALUE     = LS_BAPE_VBAP ).
***       Find Old value
          LF_OLD = ABAP_FALSE.
          loop at IS_BAPI_SAVE_IN_OLD-T_BAPIPAREX into LS_BAPIPAREX where STRUCTURE = LS_BAPIPAREX-STRUCTURE.
            CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C( exporting IM_CONTAINER = LS_BAPIPAREX+LF_OFFSET
                                                           importing EX_VALUE     = LS_BAPE_VBAP_OLD ).
            if LS_BAPE_VBAP-POSNR eq LS_BAPE_VBAP_OLD-POSNR.
              LF_OLD = ABAP_FALSE.
            else.
              clear LS_BAPE_VBAP_OLD.
            endif.
          endloop.

          if LF_OLD eq ABAP_TRUE.
***         Fill X-Structure
            /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = LS_BAPE_VBAP
                                                           IS_DATA_OLD = LS_BAPE_VBAP_OLD
                                                 changing  CS_X_STRUC  = LS_BAPE_VBAPX ).
          else.
***         Fill X-Structure
            /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = LS_BAPE_VBAP
                                                 changing  CS_X_STRUC  = LS_BAPE_VBAPX ).
          endif.

***       Build Extension
          append value #( STRUCTURE = 'BAPE_VBAPX' ) to CS_BAPI_SAVE_INX-T_BAPIPAREX assigning <S_BAPIPAREX>.
          describe field <S_BAPIPAREX>-STRUCTURE length LF_OFFSET in character mode.
          CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_BAPE_VBAPX
                                                         importing EX_CONTAINER = <S_BAPIPAREX>+LF_OFFSET ).

      endcase.
    endloop.

  endmethod.
  method FILL_BAPIPARNRC.

*    data: LF_POSNR type POSNR.
*    data: LS_BAPISDITM     type BAPISDITM,
*          LS_BAPISDITM_OLD type BAPISDITM.
*    data: LT_POSNR    type standard table of POSNR.
*    field-symbols: <S_BAPISDITMX> type BAPISDITMX.
*
****--------------------------------------------------------------------------------------
**** Get all Position Numbers (New, Update and Deleted)
*    LT_POSNR = value #( for S_BAPISDITM in IS_BAPI_SAVE_IN-T_BAPISDITM ( S_BAPISDITM-ITM_NUMBER ) ).
*    loop at IS_BAPI_SAVE_IN_OLD-T_BAPISDITM into LS_BAPISDITM_OLD.
*      if not LINE_EXISTS( LT_POSNR[ TABLE_LINE = LS_BAPISDITM_OLD-ITM_NUMBER ] ).
*        append LS_BAPISDITM_OLD-ITM_NUMBER to LT_POSNR.
*      endif.
*    endloop.
*    sort LT_POSNR.
*
****--------------------------------------------------------------------------------------
**** Process all Items
*    loop at LT_POSNR into LF_POSNR.
*      append value #( ITM_NUMBER = LF_POSNR ) to CS_BAPI_SAVE_INX-T_BAPISDITMX assigning <S_BAPISDITMX>.
*
****   Insert
*      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ) and
*             LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ] ).
*        <S_BAPISDITMX>-UPDATEFLAG = 'I'.
*        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ]
*                                             changing  CS_X_STRUC = <S_BAPISDITMX> ).
*
****   Delete
*      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ) and
*             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ] ).
*        <S_BAPISDITMX>-UPDATEFLAG = 'D'.
*
****   Update
*      else.
*        <S_BAPISDITMX>-UPDATEFLAG = 'U'.
*        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ]
*                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ]
*                                             changing  CS_X_STRUC  = <S_BAPISDITMX> ).
*
*      endif.
*    endloop.

  endmethod.
  method FILL_BAPISCHDLX.

    types: begin of YS_VBEP_KEY,
             POSNR type POSNR,
             ETENR type ETENR,
           end of YS_VBEP_KEY.

    data: LS_BAPISCHDL     type BAPISCHDL,
          LS_BAPISCHDL_OLD type BAPISCHDL,
          LS_VBEP_KEY      type YS_VBEP_KEY.
    data: LT_VBEP_KEY type standard table of YS_VBEP_KEY.
    field-symbols: <S_BAPISCHDLX> type BAPISCHDLX.


***--------------------------------------------------------------------------------------
*** Get all Schedule Lines (New, Update and Deleted)
    LT_VBEP_KEY = value #( for S_BAPISCHDL in IS_BAPI_SAVE_IN-T_BAPISCHDL ( POSNR = S_BAPISCHDL-ITM_NUMBER
                                                                            ETENR = S_BAPISCHDL-SCHED_LINE ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_BAPISCHDL into LS_BAPISCHDL_OLD.
      if not LINE_EXISTS( LT_VBEP_KEY[ POSNR = LS_BAPISCHDL_OLD-ITM_NUMBER
                                       ETENR = LS_BAPISCHDL_OLD-SCHED_LINE ] ).
        append value #( POSNR = LS_BAPISCHDL_OLD-ITM_NUMBER
                        ETENR = LS_BAPISCHDL_OLD-SCHED_LINE ) to LT_VBEP_KEY.
      endif.
    endloop.
    sort LT_VBEP_KEY.

***--------------------------------------------------------------------------------------
*** Schedule Lines Data
    loop at LT_VBEP_KEY into LS_VBEP_KEY.
      append value #( ITM_NUMBER = LS_VBEP_KEY-POSNR
                      SCHED_LINE = LS_VBEP_KEY-ETENR ) to CS_BAPI_SAVE_INX-T_BAPISCHDLX assigning <S_BAPISCHDLX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISCHDL[ ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                           SCHED_LINE = LS_VBEP_KEY-ETENR ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISCHDL[     ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                           SCHED_LINE = LS_VBEP_KEY-ETENR ] ).
        <S_BAPISCHDLX>-UPDATEFLAG = 'I'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_BAPISCHDL[  ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                                                                  SCHED_LINE = LS_VBEP_KEY-ETENR ]
                                             changing  CS_X_STRUC = <S_BAPISCHDLX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISCHDL[ ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                               SCHED_LINE = LS_VBEP_KEY-ETENR ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISCHDL[     ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                               SCHED_LINE = LS_VBEP_KEY-ETENR ] ).
        <S_BAPISCHDLX>-UPDATEFLAG = 'D'.

***   Update
      elseif IS_BAPI_SAVE_IN-T_BAPISCHDL[     ITM_NUMBER = LS_VBEP_KEY-POSNR
                                              SCHED_LINE = LS_VBEP_KEY-ETENR ] ne
             IS_BAPI_SAVE_IN_OLD-T_BAPISCHDL[ ITM_NUMBER = LS_VBEP_KEY-POSNR
                                              SCHED_LINE = LS_VBEP_KEY-ETENR ].
        <S_BAPISCHDLX>-UPDATEFLAG = 'U'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_BAPISCHDL[     ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                                                                      SCHED_LINE = LS_VBEP_KEY-ETENR ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_BAPISCHDL[ ITM_NUMBER = LS_VBEP_KEY-POSNR
                                                                                                      SCHED_LINE = LS_VBEP_KEY-ETENR ]
                                             changing  CS_X_STRUC  = <S_BAPISCHDLX> ).

      endif.
    endloop.

  endmethod.
  method FILL_BAPISDHD1X.

    if ME->S_VBAK-VBELN is initial.
      CS_BAPI_SAVE_INX-S_BAPISDHD1X-UPDATEFLAG = 'I'.
      /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-S_BAPISDHD1
                                           changing  CS_X_STRUC = CS_BAPI_SAVE_INX-S_BAPISDHD1X ).
    else.
      CS_BAPI_SAVE_INX-S_BAPISDHD1X-UPDATEFLAG = 'U'.
      /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-S_BAPISDHD1
                                                     IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-S_BAPISDHD1
                                           changing  CS_X_STRUC  = CS_BAPI_SAVE_INX-S_BAPISDHD1X ).
    endif.

  endmethod.
  method FILL_BAPISDITMX.

    data: LF_POSNR type POSNR,
          LF_NIDAT type ZVCXI_XCI_NIDAT.
    data: LS_BAPISDITM     type BAPISDITM,
          LS_BAPISDITM_OLD type BAPISDITM.
    data: LT_POSNR    type standard table of POSNR.
    field-symbols: <S_BAPISDITMX> type BAPISDITMX.

***--------------------------------------------------------------------------------------
*** Get all Position Numbers (New, Update and Deleted)
    LT_POSNR = value #( for S_BAPISDITM in IS_BAPI_SAVE_IN-T_BAPISDITM ( S_BAPISDITM-ITM_NUMBER ) ).
    loop at IS_BAPI_SAVE_IN_OLD-T_BAPISDITM into LS_BAPISDITM_OLD.
      if not LINE_EXISTS( LT_POSNR[ TABLE_LINE = LS_BAPISDITM_OLD-ITM_NUMBER ] ).
        append LS_BAPISDITM_OLD-ITM_NUMBER to LT_POSNR.
      endif.
    endloop.
    sort LT_POSNR.

***--------------------------------------------------------------------------------------
*** Process all Items
    loop at LT_POSNR into LF_POSNR.
      append value #( ITM_NUMBER = LF_POSNR ) to CS_BAPI_SAVE_INX-T_BAPISDITMX assigning <S_BAPISDITMX>.

***   Insert
      if not LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ] ).
        <S_BAPISDITMX>-UPDATEFLAG = 'I'.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = IS_BAPI_SAVE_IN-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ]
                                             changing  CS_X_STRUC = <S_BAPISDITMX> ).

***   Delete
      elseif     LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ) and
             not LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ] ).
        <S_BAPISDITMX>-UPDATEFLAG = 'D'.

***   Update
      elseif LINE_EXISTS( IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ) and
             LINE_EXISTS( IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ] ).
        if IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ] ne IS_BAPI_SAVE_IN-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ].
          <S_BAPISDITMX>-UPDATEFLAG = 'U'.
        endif.
        /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-T_BAPISDITM[     ITM_NUMBER = LF_POSNR ]
                                                       IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-T_BAPISDITM[ ITM_NUMBER = LF_POSNR ]
                                             changing  CS_X_STRUC  = <S_BAPISDITMX> ).
      endif.

***   Force Configuration
      call function 'ZVCXI_XCC_IDAT_GET_NIDAT'
        exporting
          IF_POSNR = LF_POSNR
        importing
          EF_NIDAT = LF_NIDAT.
      if LF_NIDAT is not initial and
         not LINE_EXISTS( ME->T_CFGS_UPDKZ[ POSNR = LF_POSNR ] ).
        append value #( POSNR = LF_POSNR
                        UPDKZ = 'U' ) to ME->T_CFGS_UPDKZ.
      endif.
      if value #( ME->T_CFGS_UPDKZ[ POSNR = LF_POSNR ]-UPDKZ optional ) is not initial.
        <S_BAPISDITMX>-UPDATEFLAG = switch #( <S_BAPISDITMX>-UPDATEFLAG when SPACE then 'U' else <S_BAPISDITMX>-UPDATEFLAG ).
        <S_BAPISDITMX>-PO_ITM_NO  = ABAP_TRUE. "This triggers VC Processing as it ensures VBAP-POSEX is filled  (SAP Note 549563)
      endif.

***   Mark Item as Updated in case of changed Conditions
      loop at CS_BAPI_SAVE_INX-T_BAPICONDX transporting no fields
                                           where ITM_NUMBER eq LF_POSNR
                                            and  UPDATEFLAG ne SPACE.
        <S_BAPISDITMX>-UPDATEFLAG = switch #( <S_BAPISDITMX>-UPDATEFLAG when SPACE then 'U' else <S_BAPISDITMX>-UPDATEFLAG ).
        exit.
      endloop.

***   Remove Update Flag on CONFIG_ID and INST_ID (as we only pass the information w/o the intend to change anything)
      clear: <S_BAPISDITMX>-CONFIG_ID,
             <S_BAPISDITMX>-INST_ID.
    endloop.

  endmethod.
  method FILTER_BAPI_DATA_IN.

***------------------------------------------------------------------------------------------------
*** Remove Configuration
    loop at CS_BAPI_SAVE_IN-T_BAPISDITM into data(LS_BAPISDITM).
      if value #( ME->T_CFGS_UPDKZ[ POSNR = LS_BAPISDITM-ITM_NUMBER ]-UPDKZ optional ) is initial.
        data(LF_CONFIG_ID) = value #( CS_BAPI_SAVE_IN-T_BAPICUREF[ POSEX = LS_BAPISDITM-PO_ITM_NO ]-CONFIG_ID optional ).

***     Check any Item of Config ID is marked for update
        loop at CS_BAPI_SAVE_IN-T_BAPICUREF into data(LS_BAPICUREF) where CONFIG_ID = LF_CONFIG_ID.
          if value #( ME->T_CFGS_UPDKZ[ POSNR = LS_BAPICUREF-POSEX ]-UPDKZ optional ) is not initial.
            clear LF_CONFIG_ID.  "Don't filter
            exit.
          endif.
        endloop.

        check LF_CONFIG_ID is not initial.
        delete CS_BAPI_SAVE_IN-T_BAPICUCFG where CONFIG_ID eq LF_CONFIG_ID.
        delete CS_BAPI_SAVE_IN-T_BAPICUINS where CONFIG_ID eq LF_CONFIG_ID.
        delete CS_BAPI_SAVE_IN-T_BAPICUPRT where CONFIG_ID eq LF_CONFIG_ID.
        delete CS_BAPI_SAVE_IN-T_BAPICUVAL where CONFIG_ID eq LF_CONFIG_ID.
        delete CS_BAPI_SAVE_IN-T_BAPICUREF where CONFIG_ID eq LF_CONFIG_ID.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Remove Line Items w/o update
    loop at CS_BAPI_SAVE_INX-T_BAPISDITMX into data(LS_BAPISDITMX)
                                         where UPDATEFLAG is initial.
      delete CS_BAPI_SAVE_IN-T_BAPISDITM   where ITM_NUMBER = LS_BAPISDITMX-ITM_NUMBER.
      delete CS_BAPI_SAVE_INX-T_BAPISDITMX where ITM_NUMBER = LS_BAPISDITMX-ITM_NUMBER.
    endloop.

*** Remove Schedule Lines w/o update
    loop at CS_BAPI_SAVE_INX-T_BAPISCHDLX into data(LS_BAPISCHDLX)
                                         where UPDATEFLAG is initial.
      delete CS_BAPI_SAVE_IN-T_BAPISCHDL   where ITM_NUMBER = LS_BAPISCHDLX-ITM_NUMBER
                                            and  SCHED_LINE = LS_BAPISCHDLX-SCHED_LINE.
      delete CS_BAPI_SAVE_INX-T_BAPISCHDLX where ITM_NUMBER = LS_BAPISCHDLX-ITM_NUMBER
                                            and  SCHED_LINE = LS_BAPISCHDLX-SCHED_LINE.
    endloop.

*** Remove Conditions w/o update
    loop at CS_BAPI_SAVE_INX-T_BAPICONDX into data(LS_BAPICONDX)
                                         where UPDATEFLAG is initial.
      delete CS_BAPI_SAVE_IN-T_BAPICOND   where ITM_NUMBER = LS_BAPICONDX-ITM_NUMBER
                                           and  COND_ST_NO = LS_BAPICONDX-COND_ST_NO
                                           and  COND_COUNT = LS_BAPICONDX-COND_COUNT.
      delete CS_BAPI_SAVE_INX-T_BAPICONDX where ITM_NUMBER = LS_BAPICONDX-ITM_NUMBER
                                           and  COND_ST_NO = LS_BAPICONDX-COND_ST_NO
                                           and  COND_COUNT = LS_BAPICONDX-COND_COUNT.
    endloop.

***------------------------------------------------------------------------------------------------
*** Adjust Text Function
    break TBD.

  endmethod.
  method GET_BAPI_DATA_IN.

    data: LS_VBPA type VBPA,
          LS_VBAP type VBAP,
          LS_VBEP type VBEP.
    field-symbols: <S_BAPISDITM> type BAPISDITM,
                   <S_BAPISCHDL> type BAPISCHDL.

***--------------------------------------------------------------------------------------
*** Map Header
    ME->MAP_VBAK_TO_BAPISDHD1( exporting IS_VBAK      = ME->S_VBAK
                               changing  CS_BAPISDHD1 = RS_BAPI_SAVE_IN-S_BAPISDHD1 ).
    ME->MAP_VBKD_TO_BAPISDHD1( exporting IS_VBKD      = value #( ME->T_VBKD[ POSNR = '000000' ] optional )
                               changing  CS_BAPISDHD1 = RS_BAPI_SAVE_IN-S_BAPISDHD1 ).

*** VBAK and VBKD Extension
    append ME->MAP_VBAK_TO_BAPIPAREX( IS_VBAK = ME->S_VBAK )                                         to RS_BAPI_SAVE_IN-T_BAPIPAREX.
    append ME->MAP_VBKD_TO_BAPIPAREX( IS_VBKD = value #( ME->T_VBKD[ POSNR = '000000' ] optional ) ) to RS_BAPI_SAVE_IN-T_BAPIPAREX.


***--------------------------------------------------------------------------------------
*** Partner
    loop at ME->T_VBPA into LS_VBPA.
      append ME->MAP_VBPA_TO_BAPIPARNR( IS_VBPA = LS_VBPA ) to RS_BAPI_SAVE_IN-T_BAPIPARNR.
    endloop.

***--------------------------------------------------------------------------------------
*** Conditions
    perform MAP_KONV_TO_BAPICOND in program SAPLVBAK
            tables ME->T_KOMV
                   RS_BAPI_SAVE_IN-T_BAPICOND
             using ME->S_VBAK.

***--------------------------------------------------------------------------------------
*** Item Data
    loop at ME->T_VBAP into LS_VBAP.
      append initial line to RS_BAPI_SAVE_IN-T_BAPISDITM  assigning <S_BAPISDITM>.
      ME->MAP_VBAP_TO_BAPISDITM( exporting IS_VBAP      = LS_VBAP
                                 changing  CS_BAPISDITM = <S_BAPISDITM> ).
      ME->MAP_VBKD_TO_BAPISDITM( exporting IS_VBKD      = value #( ME->T_VBKD[ POSNR = LS_VBAP-POSNR ] optional )
                                 changing  CS_BAPISDITM = <S_BAPISDITM> ).

***   VBAP and VBKD Extension
      append ME->MAP_VBAP_TO_BAPIPAREX( IS_VBAP = LS_VBAP )                                                 to RS_BAPI_SAVE_IN-T_BAPIPAREX.
      append ME->MAP_VBKD_TO_BAPIPAREX( IS_VBKD = value #( ME->T_VBKD[ POSNR = LS_VBAP-POSNR ] optional ) ) to RS_BAPI_SAVE_IN-T_BAPIPAREX.

***   Add Configuration Reference for Sub-Items via VBAP to eusure POSNR is not reassigned by SAP
      if not LINE_EXISTS( ME->T_CFGS_REF[ POSEX = <S_BAPISDITM>-ITM_NUMBER ] ). "Items are not created if provided for root item
        <S_BAPISDITM>-CONFIG_ID = value #( ME->T_CFGS_REFINST[ POSEX = <S_BAPISDITM>-ITM_NUMBER ]-CONFIG_ID optional ).
        <S_BAPISDITM>-INST_ID   = value #( ME->T_CFGS_REFINST[ POSEX = <S_BAPISDITM>-ITM_NUMBER ]-INST_ID   optional ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Schedule Lines Data
    loop at ME->T_VBEP into LS_VBEP.
      append initial line to RS_BAPI_SAVE_IN-T_BAPISCHDL assigning <S_BAPISCHDL>.
      ME->MAP_VBEP_TO_BAPISCHDL( exporting IS_VBEP      = LS_VBEP
                                 changing  CS_BAPISCHDL = <S_BAPISCHDL> ).

***   VBEP Extension
      append ME->MAP_VBEP_TO_BAPIPAREX( IS_VBEP = LS_VBEP ) to RS_BAPI_SAVE_IN-T_BAPIPAREX.
    endloop.

***--------------------------------------------------------------------------------------
*** Sales Text
    RS_BAPI_SAVE_IN-T_BAPISDTEXT = ME->T_TEXT.

***--------------------------------------------------------------------------------------
*** Configuration Data
    RS_BAPI_SAVE_IN-T_BAPICUCFG = ME->T_CFGS_REF.
    RS_BAPI_SAVE_IN-T_BAPICUINS = ME->T_CFGS_INST.
    RS_BAPI_SAVE_IN-T_BAPICUPRT = ME->T_CFGS_PART_OF.
    RS_BAPI_SAVE_IN-T_BAPICUVAL = ME->T_CFGS_VALUE.
*   RS_BAPI_SAVE_IN-T_BAPICUBLB = ME->T_CFGS_BLOB.
*   RS_BAPI_SAVE_IN-T_BAPICUVK  = ME->T_CFGS_VK.
    RS_BAPI_SAVE_IN-T_BAPICUREF = ME->T_CFGS_REFINST.

*** Remove References that are already provided though the Item
    loop at RS_BAPI_SAVE_IN-T_BAPISDITM assigning <S_BAPISDITM>
                                       where CONFIG_ID is not initial
                                        and  INST_ID   is not initial.
      delete RS_BAPI_SAVE_IN-T_BAPICUREF where CONFIG_ID = <S_BAPISDITM>-CONFIG_ID
                                          and  INST_ID   = <S_BAPISDITM>-INST_ID.
    endloop.

  endmethod.
  method GET_BAPI_DATA_INX.

***--------------------------------------------------------------------------------------
*** Header
    ME->FILL_BAPISDHD1X( exporting IS_BAPI_SAVE_IN     = IS_BAPI_SAVE_IN
                                   IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                         changing  CS_BAPI_SAVE_INX    = RS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
*** Partner
*    loop at ME->T_VBPA into LS_VBPA.
*      append ME->MAP_VBPA_TO_BAPIPARNR( IS_VBPA = LS_VBPA ) to RS_BAPI_SAVE_IN-T_BAPIPARNR.
*    endloop.

***--------------------------------------------------------------------------------------
*** Conditions
    ME->FILL_BAPICONDX( exporting IS_BAPI_SAVE_IN     = IS_BAPI_SAVE_IN
                                  IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                        changing  CS_BAPI_SAVE_INX    = RS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
*** Item Data
    ME->FILL_BAPISDITMX( exporting IS_BAPI_SAVE_IN     = IS_BAPI_SAVE_IN
                                   IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                         changing  CS_BAPI_SAVE_INX    = RS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
*** Schedule Lines Data
    ME->FILL_BAPISCHDLX( exporting IS_BAPI_SAVE_IN     = IS_BAPI_SAVE_IN
                                   IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                         changing  CS_BAPI_SAVE_INX    = RS_BAPI_SAVE_INX ).

***--------------------------------------------------------------------------------------
*** Extensions
    ME->FILL_BAPIPAREX( exporting IS_BAPI_SAVE_IN     = IS_BAPI_SAVE_IN
                                  IS_BAPI_SAVE_IN_OLD = IS_BAPI_SAVE_IN_OLD
                        changing  CS_BAPI_SAVE_INX    = RS_BAPI_SAVE_INX ).

  endmethod.
  method GET_BAPISDLS.

    RS_BAPISDLS = value BAPISDLS( PRICING = 'C' ).

  endmethod.
  method GET_CLTABLE_IN.

    data: LS_VBAP    type VBAP,
          LS_SDCOM   type SDCOM,
          LS_VBPA_AG type VBPA_AG,
          LS_VBPA_WE type VBPA_WE.
    field-symbols: <S_CLTABLE>   type CLTABLE.

***----------------------------------------------------------------------------
*** Collect Infos
    LS_VBAP = value #( ME->T_VBAP[ POSNR = IF_POSNR ] optional ).
    check LS_VBAP is not initial.

*** Get Sold-To Party
    LS_VBPA_AG = value #( ME->T_VBPA[ POSNR = LS_VBAP-POSNR
                                      PARVW = 'AG' ]
                          default value #( ME->T_VBPA[ POSNR = SPACE
                                                       PARVW = 'AG' ] optional ) ).
*** Get Ship-to Party
    LS_VBPA_WE = value #( ME->T_VBPA[ POSNR = LS_VBAP-POSNR
                                      PARVW = 'WE' ]
                          default value #( ME->T_VBPA[ POSNR = SPACE
                                                       PARVW = 'WE' ] optional ) ).

***----------------------------------------------------------------------------
*** Communication between SD and Variant Configuration
    move-corresponding ME->S_VBAK to LS_SDCOM.
    move-corresponding LS_VBAP to LS_SDCOM.

    if LINE_EXISTS( ME->T_VBEP[ POSNR = IF_POSNR ] ).
      LS_SDCOM = corresponding #( base ( LS_SDCOM ) ME->T_VBEP[ POSNR = IF_POSNR ] ).
    endif.

    LS_SDCOM-WMENG = LS_VBAP-KWMENG.
    LS_SDCOM-MENGE = LS_VBAP-KWMENG.
    if ( LS_VBAP-PSTYV is not initial and GET_TVAP( IF_PSTYV = LS_VBAP-PSTYV )-ETERL eq SPACE ) or
       LS_SDCOM-MENGE is initial.
      LS_SDCOM-MENGE = LS_VBAP-ZMENG.
    endif.
    LS_SDCOM-MENGE = LS_SDCOM-MENGE * LS_VBAP-UMVKZ / LS_VBAP-UMVKN.   "Convert from Sales Unit

    append initial line to RT_CLTABLE assigning <S_CLTABLE>.
    <S_CLTABLE>-TNAME = 'SDCOM'.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_SDCOM
                                                   importing EX_CONTAINER = <S_CLTABLE>-TABLE ).
*VCSD_UPDATE

*** Sales Document Header Data
    append initial line to RT_CLTABLE assigning <S_CLTABLE>.
    <S_CLTABLE>-TNAME = 'VBAK'.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = ME->S_VBAK
                                                   importing EX_CONTAINER = <S_CLTABLE>-TABLE ).

*** Sales Document Item Data
    append initial line to RT_CLTABLE assigning <S_CLTABLE>.
    <S_CLTABLE>-TNAME = 'VBAP'.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_VBAP
                                                   importing EX_CONTAINER = <S_CLTABLE>-TABLE ).

*** Sales Document Business Data
    if LINE_EXISTS( ME->T_VBKD[ POSNR = IF_POSNR ] ).
      append initial line to RT_CLTABLE assigning <S_CLTABLE>.
      <S_CLTABLE>-TNAME = 'VBKD'.
      CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = value #( ME->T_VBKD[ POSNR = IF_POSNR ] optional )
                                                     importing EX_CONTAINER = <S_CLTABLE>-TABLE ).
    endif.

*MAEPV
*MAAPV
*VEDA

*** Partner Sold-To
    append initial line to RT_CLTABLE assigning <S_CLTABLE>.
    <S_CLTABLE>-TNAME = 'VBPA_AG'.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_VBPA_AG
                                                   importing EX_CONTAINER = <S_CLTABLE>-TABLE ).


*VBADR_AG

*** Partner Ship-To
    append initial line to RT_CLTABLE assigning <S_CLTABLE>.
    <S_CLTABLE>-TNAME = 'VBPA_WE'.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_VBPA_WE
                                                   importing EX_CONTAINER = <S_CLTABLE>-TABLE ).
*VBADR_WE
*VBPA_RG
*VBADR_RG
*VBPA_RE
*VBADR_RE

  endmethod.
  method GET_CONDSCALE.

    data: LF_POSNR type POSNR,
          LF_UMREZ type UMREZ,
          LF_UMREN type UMREN.
    data: LS_KOMV type KOMV,
          LS_VBAP type VBAP.


    check IF_KSCHL is not initial and
          IT_POSNR is not initial.

***--------------------------------------------------------------------------------------
*** Get Condition of Main Item
    LS_KOMV = value #( ME->T_KOMV[ KPOSN = IT_POSNR[ 1 ]
                                   KSCHL = IF_KSCHL
                                   KINAK = SPACE ] optional ).
    check LS_KOMV is not initial.

*** Get Basic
    EF_KONMS = ME->T_VBAP[ POSNR = IT_POSNR[ 1 ] ]-VRKME.
    EF_KONWA = LS_KOMV-WAERS.
    EF_KPEIN = LS_KOMV-KPEIN.
    EF_KMEIN = LS_KOMV-KMEIN.

*** Get Base Conversion Factor
    LF_UMREZ = ME->T_VBAP[ POSNR = IT_POSNR[ 1 ] ]-UMVKZ.
    LF_UMREN = ME->T_VBAP[ POSNR = IT_POSNR[ 1 ] ]-UMVKN.


***--------------------------------------------------------------------------------------
*** Price Scales for Main and MQ Item
    loop at IT_POSNR into LF_POSNR.
      LS_VBAP = value #( ME->T_VBAP[ POSNR = LF_POSNR ] optional ).
      check LS_VBAP-POSNR eq LF_POSNR.

***   Get Condition
      LS_KOMV = value #( ME->T_KOMV[ KPOSN = LS_VBAP-POSNR
                                     KSCHL = IF_KSCHL
                                     KINAK = SPACE ] optional ).
      check LS_KOMV is not initial.

***   Add Scale
      insert value #( KSTBM = LS_VBAP-KWMENG * ( LS_VBAP-UMVKZ / LS_VBAP-UMVKN ) * ( LF_UMREN / LF_UMREZ )
                      KBETR = LS_KOMV-KBETR ) into table RT_CONDSCALE.

    endloop.

*** Use Scale when MQ Items are in use
    EF_STFKZ = cond #( when LINES( IT_POSNR ) gt 1 then 'A'
                                              else SPACE ).

  endmethod.
  method GET_KOMG.

*** Prepare variance key for condition records
    RS_KOMG-VKORG = ME->S_VBAK-VKORG.
    RS_KOMG-VTWEG = ME->S_VBAK-VTWEG.
    RS_KOMG-WERKS = ME->T_VBAP[ POSNR = IF_POSNR ]-WERKS.
*{   INSERT         HEDK927942                                        1
    RS_KOMG-ZZLGORT = ME->T_VBAP[ POSNR = IF_POSNR ]-LGORT.

    data(LV_LGORT) = RS_KOMG-ZZLGORT. "JBL 13/05/2024 Mak as Assembly Center if LGORT exists in MDLG

    select count( * ) from MDLG
      where LGORT eq LV_LGORT.
    if SY-SUBRC is initial.
      RS_KOMG-ZZMONTAJE = ABAP_TRUE.
    endif.
*}   INSERT

*** Get Partner
    RS_KOMG-KUNNR = value #( ME->T_VBPA[ POSNR = IF_POSNR
                                         PARVW = IF_PARVW ]-KUNNR optional ).
    if RS_KOMG-KUNNR is initial.
      RS_KOMG-KUNNR = value #( ME->T_VBPA[ POSNR = ''
                                           PARVW = IF_PARVW ]-KUNNR optional ).
    endif.
*{   INSERT         HEDK927942                                        2
*** OPHJVC-427 - The content of the method GET_KOMG of class YCL_HP_SMD_MBQ_STP_S501 is copied here and that method is deleted
***Incoterm is necessary, so lines 37 to 42 are important
    data: LS_KOMG type KOMG.

    LS_KOMG = corresponding #( ME->S_VBAK ).
    LS_KOMG = corresponding #( ME->T_VBAP[ POSNR = iF_POSNR ] ).
    read table ME->T_VBKD with key POSNR = iF_POSNR transporting no fields.
    if SY-SUBRC eq 0.
      LS_KOMG = corresponding #( ME->T_VBKD[ POSNR = iF_POSNR ] ).
    else.
      LS_KOMG = corresponding #( ME->T_VBKD[ POSNR = 000000 ] ).
    endif.

*** Get Partner - Sold-To
    LS_KOMG-KUNAG = value #( ME->T_VBPA[ POSNR = iF_POSNR
                                         PARVW = 'AG' ]-KUNNR optional ).
    if LS_KOMG-KUNAG is initial.
    LS_KOMG-KUNAG = value #( ME->T_VBPA[ POSNR = ''
                                         PARVW = 'AG' ]-KUNNR optional ).
    endif.

*** Get Partner - Ship-To
    LS_KOMG-KUNWE = value #( ME->T_VBPA[ POSNR = iF_POSNR
                                         PARVW = 'WE' ]-KUNNR optional ).
    if LS_KOMG-KUNWE is initial.
    LS_KOMG-KUNWE = value #( ME->T_VBPA[ POSNR = ''
                                         PARVW = 'WE' ]-KUNNR optional ).
    endif.

*** Get Partner - Bill-To-Party
    LS_KOMG-KUNRE = value #( ME->T_VBPA[ POSNR = iF_POSNR
                                         PARVW = 'BP' ]-KUNNR optional ).
    if LS_KOMG-KUNRE is initial.
    LS_KOMG-KUNRE = value #( ME->T_VBPA[ POSNR = ''
                                         PARVW = 'BP' ]-KUNNR optional ).
    endif.

*** Get Partner - Payer
    LS_KOMG-KUNRG = value #( ME->T_VBPA[ POSNR = iF_POSNR
                                         PARVW = 'PY' ]-KUNNR optional ).
    if LS_KOMG-KUNRG is initial.
    LS_KOMG-KUNRG = value #( ME->T_VBPA[ POSNR = ''
                                         PARVW = 'PY' ]-KUNNR optional ).
    endif.

    try.
        YCL_HP_X_SRV_DATA=>MOVE_CORRESPONDING_KEEP_VALUES( exporting IS_STRUC_ADD = LS_KOMG
                                                           changing  CS_STRUC_ALL = RS_KOMG ).
      catch /VCXI/CX_CKX.
    endtry.
*}   INSERT

  endmethod.
  method GET_NEXT_CONFIG_ID.

    data: LF_CONFIG_ID type CUX_CFG_ID value '000001'.


    loop at IT_CFGS_REFINST into data(LS_CFGS_REFINST).
      if LF_CONFIG_ID le LS_CFGS_REFINST-CONFIG_ID.
        LF_CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID + 1.
        shift LF_CONFIG_ID right deleting trailing SPACE.
        translate LF_CONFIG_ID using ' 0'.
      endif.
    endloop.

    RF_CONFIG_ID = LF_CONFIG_ID.

  endmethod.
  method GET_POSNR_NEXT.

*** Get Settings of Sales Document Types
    data(LS_TVAK) = ME->GET_TVAK( ).

*** Get next available Position Number
    RF_POSNR = reduce #( init MAX = 0
                         for LS_VBAP in ME->T_VBAP
                         next MAX = cond #( when LS_VBAP-POSNR > MAX then LS_VBAP-POSNR else MAX ) ) + LS_TVAK-INCPO.

  endmethod.
method GET_SVC.

  data: LF_CUOBJ type CUOBJ.


*** Get Configuration Instance
  LF_CUOBJ = value #( ME->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ optional ).
  check LF_CUOBJ is not initial.

*** Get SmartVC Instance
  RR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).

endmethod.
  method GET_TEXT.

*** Get Text of Item/Header
    ET_BAPISDTEXT = value #( for LS_TEXT in ME->T_TEXT
                             where ( ITM_NUMBER = IF_POSNR
                                 and TEXT_ID    = IF_TDID
                                 and LANGU      = IF_LANGU )
                             ( LS_TEXT ) ).

*** Concatenate Text
    loop at ET_BAPISDTEXT into data(LS_BAPISDTEXT).
      if RF_TEXT is initial.
        move LS_BAPISDTEXT-TEXT_LINE to RF_TEXT.
      else.
        concatenate RF_TEXT LS_BAPISDTEXT-TEXT_LINE into RF_TEXT separated by CL_ABAP_CHAR_UTILITIES=>CR_LF.
      endif.
    endloop.

  endmethod.
  method GET_TVAK.

    if ME->S_TVAK-AUART ne ME->S_VBAK-AUART.
      select single *
             into ME->S_TVAK
             from TVAK
            where AUART eq ME->S_VBAK-AUART.
      if SY-SUBRC ne 0.
        clear ME->S_TVAK.
      endif.
    endif.

    RS_TVAK = ME->S_TVAK.

  endmethod.
  method GET_TVAP.

    call function 'SD_TVAP_SELECT'
      exporting
        I_PSTYV   = IF_PSTYV
      importing
        E_TVAP    = RS_TVAP
      exceptions
        NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'S_ORDER_VIEW'  VALUE = ref #( ME->S_ORDER_VIEW ) )

                       ( NAME = 'S_VBAK'        VALUE = ref #( ME->S_VBAK ) )      " Sales Document: Header Data
                       ( NAME = 'T_VBKD'        VALUE = ref #( ME->T_VBKD ) )      " Sales Document: Business Data
                       ( NAME = 'T_VBPA'        VALUE = ref #( ME->T_VBPA ) )      " Sales Document: Partner
                       ( NAME = 'T_VBAP'        VALUE = ref #( ME->T_VBAP ) )      " Sales Document: Item Data
                       ( NAME = 'T_VBEP'        VALUE = ref #( ME->T_VBEP ) )      " Sales Document: Schedule Line Data

                       ( NAME = 'T_KOMV'        VALUE = ref #( ME->T_KOMV ) )      " Pricing Communications-Condition Record

                       ( NAME = 'T_TEXT'        VALUE = ref #( ME->T_TEXT ) )      " Sales Document: Text

                       ( NAME = 'T_CFGS_UPDKZ'    VALUE = ref #( T_CFGS_UPDKZ ) )      " CU: Configuration Update Flag
                       ( NAME = 'T_CFGS_REF'      VALUE = ref #( T_CFGS_REF ) )        " CU: Configuration Data
                       ( NAME = 'T_CFGS_INST'     VALUE = ref #( T_CFGS_INST ) )       " CU: Instances of Several Configurations
                       ( NAME = 'T_CFGS_PART_OF'  VALUE = ref #( T_CFGS_PART_OF ) )    " CU: Part_Of Information for Several Configurations
                       ( NAME = 'T_CFGS_VALUE'    VALUE = ref #( T_CFGS_VALUE ) )      " CU: Characteristic Value Assignments for Several Configs
*                       ( NAME = 'T_CFGS_BLOB'     VALUE = ref #( T_CFGS_BLOB ) )       "
*                       ( NAME = 'T_CFGS_VK'       VALUE = ref #( T_CFGS_VK ) )         "
                       ( NAME = 'T_CFGS_REFINST'  VALUE = ref #( T_CFGS_REFINST ) )    " CU: Reference Order Item / Instance in Configuration
                      ).

  endmethod.
  method INIT_FROM_DB.

    data: LT_VBAKKEY     type table of SALES_KEY,
          LT_VBAK        type table of VBAK,
          LT_VBAPVB      type table of VBAPVB,
          LT_VBEPVB      type table of VBEPVB,
          LT_VBKDVB      type table of VBKDVB,
          LT_VBPAVB      type table of VBPAVB,
          LT_SADRVB      type table of SADRVB,
          LT_KOMV        type table of KOMV,
          LT_FXTHEAD     type table of THEADVB,
          LT_FXTLINE     type table of BAPITEXTLI,
          LT_FXBAPITHEAD type table of BAPISDTEHD,
          LT_FXBAPITLINE type table of BAPITEXTLI,
          LT_BAPICUREFM  type table of BAPICUREFM,
          LT_BAPICUCFGM  type table of BAPICUCFGM,
          LT_BAPICUINSM  type table of BAPICUINSM,
          LT_BAPICUPRTM  type table of BAPICUPRTM,
          LT_BAPICUVALM  type table of BAPICUVALM,
          LT_BAPICUBLBM  type table of BAPICUBLBM,
          LT_BAPICUVKM   type table of BAPICUVKM,
          LT_BAPIRET2    type table of BAPIRET2.


***--------------------------------------------------------------------------------------
*** Check Existance
    call function 'SD_VBAK_SINGLE_READ'
      exporting
        I_VBELN          = IF_VBELN
      exceptions
        RECORD_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Prepare Read
    LT_VBAKKEY = value #( ( VBELN = IF_VBELN ) ).

    if IS_ORDER_VIEW is supplied.
      ME->S_ORDER_VIEW = IS_ORDER_VIEW.
    else.
      ME->S_ORDER_VIEW = value #( HEADER     = ABAP_TRUE
                                  ITEM       = ABAP_TRUE
                                  SDSCHEDULE = ABAP_TRUE
                                  BUSINESS   = ABAP_TRUE
                                  PARTNER    = ABAP_TRUE
                                  SDCOND     = ABAP_TRUE
                                  CONFIGURE  = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
*** Load Information from DB
    call function 'SD_SALES_DOCUMENT_PREFETCH'
      exporting
        I_SALES_VIEW             = ME->S_ORDER_VIEW
        I_MEMORY_READ            = 'A'  "Only access SD database tables
        I_WITH_HEADER_CONDITIONS = 'X'
      tables
        I_VBAK_KEYTAB            = LT_VBAKKEY
        FXVBAK                   = LT_VBAK
        FXVBAP                   = LT_VBAPVB
        FXVBEP                   = LT_VBEPVB
        FXVBKD                   = LT_VBKDVB
        FXVBPA                   = LT_VBPAVB
        FXSADR                   = LT_SADRVB
*       FXVBUK                   =
*       FXVBUP                   =
        FXKOMV                   = ME->T_KOMV
*       FXKONH                   =
*       FXKONP                   =
*       FXKONM                   =
*       FXKONW                   =
*       FXVEDA                   =
        FXTHEAD                  = LT_FXTHEAD
        FXTLINE                  = LT_FXTLINE
*       FXVBFA                   =
        FCUREF                   = LT_BAPICUREFM
        FCUCFG                   = LT_BAPICUCFGM
        FCUINS                   = LT_BAPICUINSM
        FCUPRT                   = LT_BAPICUPRTM
        FCUVAL                   = LT_BAPICUVALM
        FCUBLB                   = LT_BAPICUBLBM
        FCUVK                    = LT_BAPICUVKM
*       FXFPLA                   =
*       FXFPLT                   =
*       FXVBUV                   =
        RETURN                   = LT_BAPIRET2.
*{   INSERT         HEDK927906                                        1

    if LT_VBAPVB is not initial.
      select * from VBAP
        into table @data(LT_VBAP)
        for all entries in @LT_VBAPVB
        where VBELN eq @LT_VBAPVB-VBELN.
      check SY-SUBRC is initial.
      sort LT_VBAP by VBELN POSNR ascending.
    endif.

    if LT_VBAP is not initial.
      loop at LT_VBAPVB assigning field-symbol(<FS_VBAP>).
        read table LT_VBAP into data(LS_VBAP) with key VBELN = <FS_VBAP>-VBELN
                                                       POSNR = <FS_VBAP>-POSNR
                                                        binary search.
        check SY-SUBRC is initial.
        <FS_VBAP>-CUOBJ = LS_VBAP-CUOBJ.
      endloop.
    endif.
*}   INSERT


*** Fill Attributes with loaded Information
    ME->S_VBAK = LT_VBAK[ 1 ].
    ME->T_VBPA = LT_VBPAVB.
    ME->T_VBAP = LT_VBAPVB.
    ME->T_VBEP = LT_VBEPVB.
    ME->T_VBKD = LT_VBKDVB.

*** Sales Document Text
    call function 'MAP_INT_TO_EXT_STRUCTURE'
      tables
        FXTHEAD       = LT_FXTHEAD
        FXTLINE       = LT_FXTLINE
        FXBAPITHEAD   = LT_FXBAPITHEAD
        FXBAPITLINE   = LT_FXBAPITLINE
      exceptions
        ENTRY_MISSING = 0.

    loop at LT_FXBAPITHEAD into data(LS_FXBAPITHEAD).
      loop at LT_FXBAPITLINE into data(LS_FXBAPITLINE)
                             where APPLOBJECT = LS_FXBAPITHEAD-APPLOBJECT
                              and  TEXT_NAME  = LS_FXBAPITHEAD-TEXT_NAME
                              and  TEXT_ID    = LS_FXBAPITHEAD-TEXT_ID
                              and  LANGU      = LS_FXBAPITHEAD-LANGU
                              and  LANGU_ISO  = LS_FXBAPITHEAD-LANGU_ISO.
        append initial line to ME->T_TEXT  assigning field-symbol(<S_TEXT>).
        <S_TEXT> = corresponding #( base ( <S_TEXT> ) LS_FXBAPITHEAD mapping DOC_NUMBER = SD_DOC ).
        <S_TEXT> = corresponding #( base ( <S_TEXT> ) LS_FXBAPITLINE mapping TEXT_LINE  = LINE ).
      endloop.
    endloop.

*** Configuration
    move-corresponding LT_BAPICUCFGM to ME->T_CFGS_REF.
    move-corresponding LT_BAPICUINSM to ME->T_CFGS_INST.
    move-corresponding LT_BAPICUPRTM to ME->T_CFGS_PART_OF.
    move-corresponding LT_BAPICUVALM to ME->T_CFGS_VALUE.
*    move-corresponding LT_BAPICUBLBM to ME->T_CFGS_BLOB.
*    move-corresponding LT_BAPICUVKM  to ME->T_CFGS_VK.
    move-corresponding LT_BAPICUREFM to ME->T_CFGS_REFINST.

  endmethod.
  method MAP_BAPICOND_TO_KOMV.

    data: LS_BAPICOND type BAPICOND.
    field-symbols:  <S_KOMV> type  KOMV.


    loop at IT_BAPICOND into LS_BAPICOND.
      read table CT_KOMV assigning <S_KOMV>
                         with key KPOSN = LS_BAPICOND-ITM_NUMBER
                                  STUNR = LS_BAPICOND-COND_ST_NO
                                  ZAEHK = LS_BAPICOND-COND_COUNT.
      if SY-SUBRC ne 0.
        append initial line to CT_KOMV assigning <S_KOMV>.
      endif.

***----------------------------------------------------------------------------
***   Map table fields
      move LS_BAPICOND-ITM_NUMBER      to <S_KOMV>-KPOSN.
      move LS_BAPICOND-COND_ST_NO      to <S_KOMV>-STUNR.
      move LS_BAPICOND-COND_COUNT      to <S_KOMV>-ZAEHK.
      move LS_BAPICOND-COND_TYPE       to <S_KOMV>-KSCHL.
      move LS_BAPICOND-COND_VALUE      to <S_KOMV>-KBETR.
      move LS_BAPICOND-CURRENCY        to <S_KOMV>-WAERS.
      move LS_BAPICOND-COND_UNIT       to <S_KOMV>-KMEIN.
      move LS_BAPICOND-COND_P_UNT      to <S_KOMV>-KPEIN.
*      move LS_BAPICOND-REFOBJTYPE      to <S_KOMV>-SWO_OBJTYP.
*      move LS_BAPICOND-REFOBJKEY       to <S_KOMV>-SWO_TYPEID.
*      move LS_BAPICOND-REFLOGSYS       to <S_KOMV>-LOGSYS.
      move LS_BAPICOND-APPLICATIO      to <S_KOMV>-KAPPL.
      move LS_BAPICOND-CONPRICDAT      to <S_KOMV>-KDATU.
      move LS_BAPICOND-CALCTYPCON      to <S_KOMV>-KRECH.
      move LS_BAPICOND-CONBASEVAL      to <S_KOMV>-KAWRT.
      move LS_BAPICOND-CONEXCHRAT      to <S_KOMV>-KKURS.
      move LS_BAPICOND-NUMCONVERT      to <S_KOMV>-KUMZA.
      move LS_BAPICOND-DENOMINATO      to <S_KOMV>-KUMNE.
      move LS_BAPICOND-CONDTYPE        to <S_KOMV>-KNTYP.
      move LS_BAPICOND-STAT_CON        to <S_KOMV>-KSTAT.
      move LS_BAPICOND-SCALETYPE       to <S_KOMV>-STFKZ.
      move LS_BAPICOND-ACCRUALS        to <S_KOMV>-KRUEK.
      move LS_BAPICOND-CONINVOLST      to <S_KOMV>-KRELI.
      move LS_BAPICOND-CONDORIGIN      to <S_KOMV>-KHERK.
      move LS_BAPICOND-GROUPCOND       to <S_KOMV>-KGRPE.
      move LS_BAPICOND-COND_UPDAT      to <S_KOMV>-KOUPD.
      move LS_BAPICOND-ACCESS_SEQ_LONG to <S_KOMV>-KOLNR.
      move LS_BAPICOND-CONDCOUNT       to <S_KOMV>-KOPOS.
      move LS_BAPICOND-ROUNDOFFDI      to <S_KOMV>-KDIFF.
      move LS_BAPICOND-CONDVALUE       to <S_KOMV>-KWERT.
*      move LS_BAPICOND-CURRENCY_2      to <S_KOMV>-WAERK.
      move LS_BAPICOND-CONDCNTRL       to <S_KOMV>-KSTEU.
      move LS_BAPICOND-CONDISACTI      to <S_KOMV>-KINAK.
      move LS_BAPICOND-CONDCLASS       to <S_KOMV>-KOAID.
      move LS_BAPICOND-FACTBASVAL      to <S_KOMV>-KFAKTOR.
      move LS_BAPICOND-SCALEBASIN      to <S_KOMV>-KZBZG.
      move LS_BAPICOND-SCALBASVAL      to <S_KOMV>-KSTBS.
      move LS_BAPICOND-UNITMEASUR      to <S_KOMV>-KONMS.
      move LS_BAPICOND-CURRENCKEY      to <S_KOMV>-KONWS.
      move LS_BAPICOND-CONDINCOMP      to <S_KOMV>-KFKIV.
      move LS_BAPICOND-CONDCONFIG      to <S_KOMV>-KVARC.
      move LS_BAPICOND-CONDCHAMAN      to <S_KOMV>-KMPRS.
      move LS_BAPICOND-COND_NO         to <S_KOMV>-KNUMH.
      move LS_BAPICOND-TAX_CODE        to <S_KOMV>-MWSK1.
      move LS_BAPICOND-VARCOND         to <S_KOMV>-VARCOND.
      move LS_BAPICOND-ACCOUNTKEY      to <S_KOMV>-KVSL1.
      move LS_BAPICOND-ACCOUNT_KE      to <S_KOMV>-KVSL2.
*      move LS_BAPICOND-WT_WITHCD      to <S_KOMV>-WT_WITHCD.
      move LS_BAPICOND-STRUCTCOND      to <S_KOMV>-KDUPL.
      move LS_BAPICOND-FACTCONBAS      to <S_KOMV>-KFAKTOR1.
      move LS_BAPICOND-CONDCOINHD_LONG to <S_KOMV>-ZAEKO.


***----------------------------------------------------------------------------
***   Special Handling
      if <S_KOMV>-WAERS is not initial.
***     Assumption: Field COND_VALUE contains currency value
        if LS_BAPICOND-COND_VALUE is not initial.
          clear <S_KOMV>-KBETR.
          call function 'BAPI_CURRENCY_CONV_TO_INTERNAL'
            exporting
              CURRENCY             = <S_KOMV>-WAERS
              AMOUNT_EXTERNAL      = conv BAPIKBETR( LS_BAPICOND-COND_VALUE )
              MAX_NUMBER_OF_DIGITS = 11
            importing
              AMOUNT_INTERNAL      = <S_KOMV>-KBETR.
        endif.
      else.
***     Assumption: Field COND_VALUE contains percentage value
        if LS_BAPICOND-COND_VALUE is not initial.
          clear <S_KOMV>-KBETR.
          <S_KOMV>-KBETR = LS_BAPICOND-COND_VALUE * 10.
        endif.
      endif.
    endloop.

  endmethod.
  method MAP_BAPIPAREX_TO_VBAP.

    data: LF_OFFSET type I.
    data: LS_BAPIPAREX  type BAPIPAREX.


*** Check we have a Position Number
    check CS_VBAP-POSNR is not initial.

    describe field LS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.

*** Look for VBAP Extension
    loop at IT_BAPIPAREX into LS_BAPIPAREX where STRUCTURE eq 'BAPE_VBAP'.
      CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C( exporting IM_CONTAINER = LS_BAPIPAREX+LF_OFFSET
                                                     importing EX_VALUE     = ES_BAPE_VBAP ).
      if ES_BAPE_VBAP-POSNR eq CS_VBAP-POSNR.
        CS_VBAP = corresponding #( base ( CS_VBAP ) ES_BAPE_VBAP except VBELN POSNR ).
        exit.
      else.
        clear ES_BAPE_VBAP.
      endif.
    endloop.

  endmethod.
  method MAP_BAPISDBUSI_TO_VBKD.

    CS_VBKD-FKDAT      = IS_BAPISDBUSI-BILL_DATE.
    CS_VBKD-BSTKD      = IS_BAPISDBUSI-PURCH_NO_C.
    CS_VBKD-BSTDK      = IS_BAPISDBUSI-PURCH_DATE.
    CS_VBKD-BSARK      = IS_BAPISDBUSI-PO_METHOD.
    CS_VBKD-IHREZ      = IS_BAPISDBUSI-REF_1.
    CS_VBKD-BSTKD_E    = IS_BAPISDBUSI-PURCH_NO_S.
    CS_VBKD-BSTDK_E    = IS_BAPISDBUSI-PO_DAT_S.
    CS_VBKD-BSARK_E    = IS_BAPISDBUSI-PO_METH_S.
    CS_VBKD-IHREZ_E    = IS_BAPISDBUSI-REF_1_S.
    CS_VBKD-POSEX_E    = IS_BAPISDBUSI-POITMNOS.
    CS_VBKD-KONDA      = IS_BAPISDBUSI-PRICE_GRP.
    CS_VBKD-KDGRP      = IS_BAPISDBUSI-CUST_GROUP.
    CS_VBKD-BZIRK      = IS_BAPISDBUSI-SALES_DIST.
    CS_VBKD-PLTYP      = IS_BAPISDBUSI-PRICE_LIST.
    CS_VBKD-INCO1      = IS_BAPISDBUSI-INCOTERMS1.
    CS_VBKD-INCO2      = IS_BAPISDBUSI-INCOTERMS2.
    CS_VBKD-KZAZU      = IS_BAPISDBUSI-ORDCOMBIND.
    CS_VBKD-PERFK      = IS_BAPISDBUSI-BILL_SCHED.
    CS_VBKD-PERRL      = IS_BAPISDBUSI-INVO_SCHED.
    CS_VBKD-MRNKZ      = IS_BAPISDBUSI-MN_INVOICE.
    CS_VBKD-KURRF      = IS_BAPISDBUSI-EXCHRATEFI.
    CS_VBKD-VALTG      = IS_BAPISDBUSI-ADD_VAL_DY.
    CS_VBKD-VALDT      = IS_BAPISDBUSI-FIX_VAL_DY.
    CS_VBKD-ZTERM      = IS_BAPISDBUSI-PMNTTRMS.
    CS_VBKD-ZLSCH      = IS_BAPISDBUSI-PAYMETHODE.
    CS_VBKD-KTGRD      = IS_BAPISDBUSI-ACCNT_ASGN.
    CS_VBKD-KURSK      = IS_BAPISDBUSI-EXCHG_RATE.
    CS_VBKD-PRSDT      = IS_BAPISDBUSI-PRICE_DATE.
    CS_VBKD-FBUDA      = IS_BAPISDBUSI-SERV_DATE.
    CS_VBKD-MSCHL      = IS_BAPISDBUSI-DUNN_KEY.
    CS_VBKD-MANSP      = IS_BAPISDBUSI-DUNN_BLOCK.
    CS_VBKD-WAKTION    = IS_BAPISDBUSI-PROMOTION.
    CS_VBKD-ABSSC      = IS_BAPISDBUSI-PAY_GUARAN.
    CS_VBKD-LCNUM      = IS_BAPISDBUSI-FINDOCPROC.
*    CS_VBKD-ABTNR      = IS_BAPISDBUSI-DEPARTM_NO.
    CS_VBKD-EMPST      = IS_BAPISDBUSI-REC_POINT.
    CS_VBKD-KDKG1      = IS_BAPISDBUSI-CUSTCONGR1.
    CS_VBKD-KDKG2      = IS_BAPISDBUSI-CUSTCONGR2.
    CS_VBKD-KDKG3      = IS_BAPISDBUSI-CUSTCONGR3.
    CS_VBKD-KDKG4      = IS_BAPISDBUSI-CUSTCONGR4.
    CS_VBKD-KDKG5      = IS_BAPISDBUSI-CUSTCONGR5.
    CS_VBKD-DELCO      = IS_BAPISDBUSI-DLV_TIME.
*    CS_VBKD-FAKTF      = IS_BAPISDBUSI-BIL_FORM.
    CS_VBKD-FFPRF      = IS_BAPISDBUSI-DLI_PROFIL.
*    CS_VBKD-RRREL      = IS_BAPISDBUSI-REV_TYPE.
*    CS_VBKD-ACDATV     = IS_BAPISDBUSI-BEGDEM_PER.
*    CS_VBKD-AKPRZ      = IS_BAPISDBUSI-DEPREC_PER.
    CS_VBKD-VKONT      = IS_BAPISDBUSI-FKK_CONACCT.
    CS_VBKD-WMINR      = IS_BAPISDBUSI-PRODCAT.
    CS_VBKD-VSART      = IS_BAPISDBUSI-DELIV_TYPE.
*    CS_VBKD-SDABW      = IS_BAPISDBUSI-S_PROC_IND.

  endmethod.
  method MAP_BAPISDHD_TO_VBAK.

    CS_VBAK-VBELN       = IS_BAPISDHD-DOC_NUMBER.
    CS_VBAK-ERDAT       = IS_BAPISDHD-REC_DATE.
    CS_VBAK-ERZET       = IS_BAPISDHD-REC_TIME.
    CS_VBAK-ERNAM       = IS_BAPISDHD-CREATED_BY.
    CS_VBAK-ANGDT       = IS_BAPISDHD-QT_VALID_F.
    CS_VBAK-BNDDT       = IS_BAPISDHD-QT_VALID_T.
    CS_VBAK-AUDAT       = IS_BAPISDHD-DOC_DATE.
*    CS_VBAK-VBTYP       = IS_BAPISDHD1-SD_DOC_CAT.
    CS_VBAK-TRVOG       = IS_BAPISDHD-TRAN_GROUP.
    CS_VBAK-AUART       = IS_BAPISDHD-DOC_TYPE.
    CS_VBAK-AUGRU       = IS_BAPISDHD-ORD_REASON.
    CS_VBAK-GWLDT       = IS_BAPISDHD-WAR_DATE.
    CS_VBAK-SUBMI       = IS_BAPISDHD-SD_COL_NUM.
    CS_VBAK-LIFSK       = IS_BAPISDHD-DLV_BLOCK.
    CS_VBAK-FAKSK       = IS_BAPISDHD-BILL_BLOCK.
    CS_VBAK-NETWR       = IS_BAPISDHD-NET_VAL_HD.
    CS_VBAK-WAERK       = IS_BAPISDHD-CURRENCY.
    CS_VBAK-VKORG       = IS_BAPISDHD-SALES_ORG.
    CS_VBAK-VTWEG       = IS_BAPISDHD-DISTR_CHAN.
    CS_VBAK-SPART       = IS_BAPISDHD-DIVISION.
    CS_VBAK-VKGRP       = IS_BAPISDHD-SALES_GRP.
    CS_VBAK-VKBUR       = IS_BAPISDHD-SALES_OFF.
    CS_VBAK-GSBER       = IS_BAPISDHD-BUS_AREA.
    CS_VBAK-GSKST       = IS_BAPISDHD-CT_AREA.
    CS_VBAK-GUEBG       = IS_BAPISDHD-CT_VALID_F.
    CS_VBAK-GUEEN       = IS_BAPISDHD-CT_VALID_T.
    CS_VBAK-KNUMV       = IS_BAPISDHD-CONDITIONS.
    CS_VBAK-VDATU       = IS_BAPISDHD-REQ_DATE_H.
    CS_VBAK-VPRGR       = IS_BAPISDHD-DATE_TYPE.
    CS_VBAK-AUTLF       = IS_BAPISDHD-COMPL_DLV.
    CS_VBAK-VBKLA       = IS_BAPISDHD-DOC_CLASS.
    CS_VBAK-VBKLT       = IS_BAPISDHD-DOC_INDIC.
    CS_VBAK-KALSM       = IS_BAPISDHD-SD_PRIC_PR.
    CS_VBAK-VSBED       = IS_BAPISDHD-SHIP_COND.
    CS_VBAK-FKARA       = IS_BAPISDHD-ORDBILLTYP.
    CS_VBAK-AWAHR       = IS_BAPISDHD-ORD_PROBAB.
    CS_VBAK-KTEXT       = IS_BAPISDHD-SEAR_PRPR.
    CS_VBAK-BSTNK       = IS_BAPISDHD-PURCH_NO.
    CS_VBAK-BSARK       = IS_BAPISDHD-PO_METHOD.
    CS_VBAK-BSTDK       = IS_BAPISDHD-PURCH_DATE.
    CS_VBAK-BSTZD       = IS_BAPISDHD-PO_SUPPLEM.
    CS_VBAK-IHREZ       = IS_BAPISDHD-REF_1.
    CS_VBAK-BNAME       = IS_BAPISDHD-ORDERER_NA.
    CS_VBAK-TELF1       = IS_BAPISDHD-TELEPHONE.
    CS_VBAK-MAHZA       = IS_BAPISDHD-DUN_COUNT.
    CS_VBAK-MAHDT       = IS_BAPISDHD-DUN_DATE.
    CS_VBAK-KUNNR       = IS_BAPISDHD-SOLD_TO.
    CS_VBAK-KOSTL       = IS_BAPISDHD-COSTCENTER.
    CS_VBAK-STAFO       = IS_BAPISDHD-UPDATE_GRP.
    CS_VBAK-STWAE       = IS_BAPISDHD-STAT_CURR.
    CS_VBAK-AEDAT       = IS_BAPISDHD-CH_ON.
    CS_VBAK-KVGR1       = IS_BAPISDHD-CUST_GRP1.
    CS_VBAK-KVGR2       = IS_BAPISDHD-CUST_GRP2.
    CS_VBAK-KVGR3       = IS_BAPISDHD-CUST_GRP3.
    CS_VBAK-KVGR4       = IS_BAPISDHD-CUST_GRP4.
    CS_VBAK-KVGR5       = IS_BAPISDHD-CUST_GRP5.
    CS_VBAK-KNUMA       = IS_BAPISDHD-AGREE_COND.
    CS_VBAK-KOKRS       = IS_BAPISDHD-CO_AREA.
    CS_VBAK-PS_PSP_PNR  = IS_BAPISDHD-WBS_ELEM.
    CS_VBAK-KURST       = IS_BAPISDHD-EXCHG_RATE.
    CS_VBAK-KKBER       = IS_BAPISDHD-C_CTR_AREA.
    CS_VBAK-KNKLI       = IS_BAPISDHD-CRED_ACCNT.
    CS_VBAK-GRUPP       = IS_BAPISDHD-CRED_GROUP.
    CS_VBAK-SBGRP       = IS_BAPISDHD-REPR_GROUP.
    CS_VBAK-CTLPC       = IS_BAPISDHD-RISK_CATEG.
    CS_VBAK-CMWAE       = IS_BAPISDHD-CURR_CRED.
    CS_VBAK-CMFRE       = IS_BAPISDHD-REL_DAT_DD.
    CS_VBAK-CMNUP       = IS_BAPISDHD-NEXT_CHDAT.
    CS_VBAK-CMNGV       = IS_BAPISDHD-NEXT_DATE.
*    CS_VBAK-AMTBL       = IS_BAPISDHD-REL_CREDIT
    CS_VBAK-HITYP_PR    = IS_BAPISDHD-HI_TYPE_PR.
    CS_VBAK-ABRVW       = IS_BAPISDHD-DLVSCHEDUS.
    CS_VBAK-ABDIS       = IS_BAPISDHD-PLAN_DLV.
    CS_VBAK-VGBEL       = IS_BAPISDHD-REF_DOC.
    CS_VBAK-OBJNR       = IS_BAPISDHD-OB_JNR_HD.
    CS_VBAK-BUKRS_VF    = IS_BAPISDHD-COMP_CODE.
    CS_VBAK-TAXK1       = IS_BAPISDHD-ALT_TAX_CL.
    CS_VBAK-TAXK2       = IS_BAPISDHD-TAX_CLASS2.
    CS_VBAK-TAXK3       = IS_BAPISDHD-TAX_CLASS3.
    CS_VBAK-TAXK4       = IS_BAPISDHD-TAX_CLASS4.
    CS_VBAK-TAXK5       = IS_BAPISDHD-TAX_CLASS5.
    CS_VBAK-TAXK6       = IS_BAPISDHD-TAX_CLASS6.
    CS_VBAK-TAXK7       = IS_BAPISDHD-TAX_CLASS7.
    CS_VBAK-TAXK8       = IS_BAPISDHD-TAX_CLASS8.
    CS_VBAK-TAXK9       = IS_BAPISDHD-TAX_CLASS9.
    CS_VBAK-XBLNR       = IS_BAPISDHD-REF_DOC_L.
    CS_VBAK-ZUONR       = IS_BAPISDHD-ASS_NUMBER.
    CS_VBAK-VGTYP       = IS_BAPISDHD-DOC_CAT_SD.
    CS_VBAK-KALSM_CH    = IS_BAPISDHD-KALSM_CH.
    CS_VBAK-AGRZR       = IS_BAPISDHD-ACC_PERIOD.
    CS_VBAK-AUFNR       = IS_BAPISDHD-ORDERID.
    CS_VBAK-QMNUM       = IS_BAPISDHD-NOTIF_NO.
    CS_VBAK-VBELN_GRP   = IS_BAPISDHD-MASTER_CON.
    CS_VBAK-SCHEME_GRP  = IS_BAPISDHD-REF_PROC.
    CS_VBAK-ABRUF_PART  = IS_BAPISDHD-CHECK_PART.
    CS_VBAK-ABHOD       = IS_BAPISDHD-PICK_UP_DA.
    CS_VBAK-ABHOV       = IS_BAPISDHD-PICK_UP_T1.
    CS_VBAK-ABHOB       = IS_BAPISDHD-PICK_UP_T2.
    CS_VBAK-RPLNR       = IS_BAPISDHD-NUM_PAY_CA.
    CS_VBAK-VZEIT       = IS_BAPISDHD-LINE_TIME.
    CS_VBAK-STCEG_L     = IS_BAPISDHD-TAX_DEST_CT.
    CS_VBAK-LANDTX      = IS_BAPISDHD-TAX_DEPART.
    CS_VBAK-XEGDR       = IS_BAPISDHD-EU_TRIANG.
    CS_VBAK-ENQUEUE_GRP = IS_BAPISDHD-MAST_CONTR.
    CS_VBAK-DAT_FZAU    = IS_BAPISDHD-CML_QTY_DA.
    CS_VBAK-FMBDAT      = IS_BAPISDHD-MS_DATE.
    CS_VBAK-VSNMR_V     = IS_BAPISDHD-VERSION.

  endmethod.
  method MAP_BAPISDHEDU_TO_VBEP.

    CS_VBEP-POSNR   = IS_BAPISDHEDU-ITM_NUMBER.
    CS_VBEP-ETENR   = IS_BAPISDHEDU-SCHED_LINE.

    CS_VBEP-ETTYP   = IS_BAPISDHEDU-SCHED_TYPE.
    CS_VBEP-LFREL   = IS_BAPISDHEDU-RELFORDEL.
    CS_VBEP-EDATU   = IS_BAPISDHEDU-REQ_DATE.
    CS_VBEP-EZEIT   = IS_BAPISDHEDU-REQ_TIME.
    CS_VBEP-WMENG   = IS_BAPISDHEDU-REQ_QTY.
    CS_VBEP-BMENG   = IS_BAPISDHEDU-CONFIR_QTY.
    CS_VBEP-VRKME   = IS_BAPISDHEDU-SALES_UNIT.
    CS_VBEP-LMENG   = IS_BAPISDHEDU-REQ_QTY1.
    CS_VBEP-MEINS   = IS_BAPISDHEDU-BASE_UOM.
    CS_VBEP-BDDAT   = IS_BAPISDHEDU-REQ_DATE1.
    CS_VBEP-BDART   = IS_BAPISDHEDU-REQ_TYPE.
    CS_VBEP-PLART   = IS_BAPISDHEDU-PLTYPE.
    CS_VBEP-VBELE   = IS_BAPISDHEDU-BUSIDOCNR.
    CS_VBEP-POSNE   = IS_BAPISDHEDU-BUSIITNR.
    CS_VBEP-ETENE   = IS_BAPISDHEDU-SCHED_LIN1.
    CS_VBEP-RSDAT   = IS_BAPISDHEDU-EARL_DATE.
    CS_VBEP-IDNNR   = IS_BAPISDHEDU-MAINT_REQ.
    CS_VBEP-BANFN   = IS_BAPISDHEDU-PREQ_NO.
    CS_VBEP-BSART   = IS_BAPISDHEDU-PO_TYPE.
    CS_VBEP-BSTYP   = IS_BAPISDHEDU-DOC_CAT.
    CS_VBEP-WEPOS   = IS_BAPISDHEDU-CONF_STAT.
    CS_VBEP-REPOS   = IS_BAPISDHEDU-IR_IND.
    CS_VBEP-LRGDT   = IS_BAPISDHEDU-RETURNDATE.
    CS_VBEP-PRGRS   = IS_BAPISDHEDU-DATE_TYPE.
    CS_VBEP-TDDAT   = IS_BAPISDHEDU-TP_DATE.
    CS_VBEP-MBDAT   = IS_BAPISDHEDU-MS_DATE.
    CS_VBEP-LDDAT   = IS_BAPISDHEDU-LOAD_DATE.
    CS_VBEP-WADAT   = IS_BAPISDHEDU-GI_DATE.
    CS_VBEP-CMENG   = IS_BAPISDHEDU-CORR_QTY.
    CS_VBEP-LIFSP   = IS_BAPISDHEDU-REQ_DLV_BL.
    CS_VBEP-GRSTR   = IS_BAPISDHEDU-GRP_DEFIN.
    CS_VBEP-ABART   = IS_BAPISDHEDU-RELEASTYP.
    CS_VBEP-ABRUF   = IS_BAPISDHEDU-FORCAST_NR.
*    CS_VBEP-ROMS1   = IS_BAPISDHEDU-
    CS_VBEP-ROMS2   = IS_BAPISDHEDU-SIZE2.
    CS_VBEP-ROMS3   = IS_BAPISDHEDU-SIZE3.
    CS_VBEP-ROMEI   = IS_BAPISDHEDU-UNIT_MEAS.
    CS_VBEP-RFORM   = IS_BAPISDHEDU-FORMULAKEY.
    CS_VBEP-UMVKZ   = IS_BAPISDHEDU-SALESQTYNR.
    CS_VBEP-UMVKN   = IS_BAPISDHEDU-SALESQTYDE.
    CS_VBEP-VERFP   = IS_BAPISDHEDU-AVAIL_CON.
    CS_VBEP-BWART   = IS_BAPISDHEDU-MOVE_TYPE.
    CS_VBEP-BNFPO   = IS_BAPISDHEDU-PREQ_ITEM.
    CS_VBEP-ETART   = IS_BAPISDHEDU-LINTYP_EDI.
    CS_VBEP-AUFNR   = IS_BAPISDHEDU-ORDERID.
    CS_VBEP-PLNUM   = IS_BAPISDHEDU-PLANORDNR.
    CS_VBEP-SERNR   = IS_BAPISDHEDU-BOMEXPL_NO.
    CS_VBEP-AESKD   = IS_BAPISDHEDU-CUSTCHSTAT.
    CS_VBEP-ABGES   = IS_BAPISDHEDU-GURANTEED.
    CS_VBEP-MBUHR   = IS_BAPISDHEDU-MS_TIME.
    CS_VBEP-TDUHR   = IS_BAPISDHEDU-TP_TIME.
    CS_VBEP-LDUHR   = IS_BAPISDHEDU-LOAD_TIME.
    CS_VBEP-WAUHR   = IS_BAPISDHEDU-GI_TIME.
    CS_VBEP-AULWE   = IS_BAPISDHEDU-ROUTESCHED.

  endmethod.
  method MAP_BAPISDIT_TO_VBAP.

    CS_VBAP-POSNR      = IS_BAPISDIT-ITM_NUMBER.
    CS_VBAP-UEPOS      = IS_BAPISDIT-HG_LV_ITEM.

    CS_VBAP-POSEX      = IS_BAPISDIT-PO_ITM_NO.
    CS_VBAP-MATNR      = IS_BAPISDIT-MATERIAL.
    CS_VBAP-GRPOS      = IS_BAPISDIT-ALTERN_ITM.
    CS_VBAP-CHARG      = IS_BAPISDIT-BATCH.
    CS_VBAP-GRKOR      = IS_BAPISDIT-DLV_GROUP.
    CS_VBAP-KZTLF      = IS_BAPISDIT-PART_DLV.
    CS_VBAP-ABGRU      = IS_BAPISDIT-REA_FOR_RE.
    CS_VBAP-FAKSP      = IS_BAPISDIT-BILL_BLOCK.
    CS_VBAP-WERKS      = IS_BAPISDIT-PLANT.
    CS_VBAP-LGORT      = IS_BAPISDIT-STGE_LOC.
    CS_VBAP-ZMENG      = IS_BAPISDIT-TARGET_QTY.
    CS_VBAP-ZIEME      = IS_BAPISDIT-TARGET_QU.
    CS_VBAP-PSTYV      = IS_BAPISDIT-ITEM_CATEG.
    CS_VBAP-ARKTX      = IS_BAPISDIT-SHORT_TEXT.
    CS_VBAP-NETWR      = IS_BAPISDIT-NET_VALUE.
    CS_VBAP-MVGR1      = IS_BAPISDIT-PRC_GROUP1.
    CS_VBAP-MVGR2      = IS_BAPISDIT-PRC_GROUP2.
    CS_VBAP-MVGR3      = IS_BAPISDIT-PRC_GROUP3.
    CS_VBAP-MVGR4      = IS_BAPISDIT-PRC_GROUP4.
    CS_VBAP-MVGR5      = IS_BAPISDIT-PRC_GROUP5.
    CS_VBAP-PRODH      = IS_BAPISDIT-PROD_HIER.
    CS_VBAP-MATKL      = IS_BAPISDIT-MATL_GROUP.
    CS_VBAP-UMZIZ      = IS_BAPISDIT-TARG_QTY_N.
    CS_VBAP-UMZIN      = IS_BAPISDIT-TARG_QTY_D.
    CS_VBAP-ABLFZ      = IS_BAPISDIT-ROUND_DLV.
    CS_VBAP-ABSFZ      = IS_BAPISDIT-MAX_DEVIAT.
    CS_VBAP-KBVER      = IS_BAPISDIT-MAX_DEV_PE.
    CS_VBAP-KEVER      = IS_BAPISDIT-MAX_DEV_DA.
*    CS_VBAP-VKAUS      = IS_BAPISDIT-USAGE_IND.
    CS_VBAP-FMENG      = IS_BAPISDIT-FIXED_QUAN.
    CS_VBAP-UEBTK      = IS_BAPISDIT-DELI_UNLIM.
    CS_VBAP-UEBTO      = IS_BAPISDIT-OVER_DLV_T.
    CS_VBAP-UNTTO      = IS_BAPISDIT-UNDER_DLV.
    CS_VBAP-SPART      = IS_BAPISDIT-DIVISION.
    CS_VBAP-GSBER      = IS_BAPISDIT-BUS_AREA.
*NET_VALUE  BAPICUREXT
*CURRENCY  WAERK
    CS_VBAP-CHSPL      = IS_BAPISDIT-BTCH_SPLIT.
    CS_VBAP-KWMENG     = IS_BAPISDIT-REQ_QTY.
    CS_VBAP-LSMENG     = IS_BAPISDIT-CUM_REQ_DE.
    CS_VBAP-KBMENG     = IS_BAPISDIT-CUM_CF_QTY.
    CS_VBAP-KLMENG     = IS_BAPISDIT-CUM_CON_QU.
    CS_VBAP-VRKME      = IS_BAPISDIT-SALES_UNIT.
*    CS_VBAP-UMVKZ      = IS_BAPISDIT-SALQTYNUM.
*    CS_VBAP-UMVKN      = IS_BAPISDIT-SALQTYDEN.
    CS_VBAP-BRGEW      = IS_BAPISDIT-GROSS_WEIG.
    CS_VBAP-NTGEW      = IS_BAPISDIT-NET_WEIGHT.
    CS_VBAP-GEWEI      = IS_BAPISDIT-UNIT_OF_WT.
    CS_VBAP-VOLUM      = IS_BAPISDIT-VOLUME.
    CS_VBAP-VOLEH      = IS_BAPISDIT-VOLUMEUNIT.
    CS_VBAP-LPRIO      = IS_BAPISDIT-DLV_PRIO.
    CS_VBAP-VSTEL      = IS_BAPISDIT-SHIP_POINT.
    CS_VBAP-ROUTE      = IS_BAPISDIT-ROUTE.
    CS_VBAP-ERNAM      = IS_BAPISDIT-CREATED_BY.
    CS_VBAP-TAXM1      = IS_BAPISDIT-TAX_CLASS1.
    CS_VBAP-TAXM2      = IS_BAPISDIT-TAX_CLASS2.
    CS_VBAP-TAXM3      = IS_BAPISDIT-TAX_CLASS3.
    CS_VBAP-TAXM4      = IS_BAPISDIT-TAX_CLASS4.
    CS_VBAP-TAXM5      = IS_BAPISDIT-TAX_CLASS5.
    CS_VBAP-TAXM6      = IS_BAPISDIT-TAX_CLASS6.
    CS_VBAP-TAXM7      = IS_BAPISDIT-TAX_CLASS7.
    CS_VBAP-TAXM8      = IS_BAPISDIT-TAX_CLASS8.
    CS_VBAP-TAXM9      = IS_BAPISDIT-TAX_CLASS9.
    CS_VBAP-VBEAF      = IS_BAPISDIT-FIX_SP_DAY.
    CS_VBAP-VBEAV      = IS_BAPISDIT-VAR_SP_DAY.
*PREC_DOC  VGREF
*NET_PRICE  BAPICUREXT
*COND_P_UNT  KPEIN
*COND_UNIT  KMEIN
*CONISOUNIT  ISO_ZIEME
*RETOURE  SHKZG_VA
*CASH_DISC  SKTOF
*AVAILCHECK  MTVFP
*SUM_REQUIR  SUMBD
    CS_VBAP-KONDM      = IS_BAPISDIT-MAT_PR_GRP.
*ACCT_ASSGT  KTGRM
*REBATE_GRP  BONUS
*COMM_GROUP  PROVG
*EUR_ART_NR  EANNR
*PRICE_OK  PRSOK
    CS_VBAP-BWTAR      = IS_BAPISDIT-VAL_TYPE.
*SEP_VALUAT  BWTEX
*BATCH_MGMT  XCHPF
*IND_BTCH  XCHAR
*MIN_DELY  MINLF
*UPDATE_GRP  STAFO
    CS_VBAP-WAVWR      = IS_BAPISDIT-COST_DOC_C.
    CS_VBAP-KZWI1     = IS_BAPISDIT-SUBTOT_PP1.
    CS_VBAP-KZWI2     = IS_BAPISDIT-SUBTOT_PP2.
    CS_VBAP-KZWI3     = IS_BAPISDIT-SUBTOT_PP3.
    CS_VBAP-KZWI4     = IS_BAPISDIT-SUBTOT_PP4.
    CS_VBAP-KZWI5     = IS_BAPISDIT-SUBTOT_PP5.
    CS_VBAP-KZWI6     = IS_BAPISDIT-SUBTOT_PP6.
*    CS_VBAP-FIXMG      = IS_BAPISDIT-FIXDAT_QTY.
*    CS_VBAP-SERNR      = IS_BAPISDIT-BOMEXPL_NO.
*    CS_VBAP-ABGRS      = IS_BAPISDIT-RESANALKEY.
*    CS_VBAP-BEDAE      = IS_BAPISDIT-REQMTS_TYP.
*    CS_VBAP-NACHL      = IS_BAPISDIT-NO_GR_POST.
    CS_VBAP-EXART      = IS_BAPISDIT-BUS_TRANST.
*    CS_VBAP-ZSCHL_K    = IS_BAPISDIT-OVERHD_KEY.
    CS_VBAP-KALSM_K    = IS_BAPISDIT-CSTG_SHEET.
    CS_VBAP-MFRGR      = IS_BAPISDIT-MATFRGTGRP.
*    CS_VBAP-PLAVO      = IS_BAPISDIT-PLDLVSHDIN.
*    CS_VBAP-KANNR      = IS_BAPISDIT-SEQ_NO.
    CS_VBAP-PMATN      = IS_BAPISDIT-PR_REF_MAT.
    CS_VBAP-AWAHR      = IS_BAPISDIT-ORDER_PROB.
    CS_VBAP-ANTLF      = IS_BAPISDIT-MAX_PL_DLV.
    CS_VBAP-SKOPF      = IS_BAPISDIT-ASSORT_MOD.
*    CS_VBAP-KMPMG      = IS_BAPISDIT-COMP_QUANT.
    CS_VBAP-PRCTR      = IS_BAPISDIT-PROFIT_CTR.
    CS_VBAP-AUFNR      = IS_BAPISDIT-ORDERID.
    CS_VBAP-OBJNR      = IS_BAPISDIT-OBJ_NR_IT.
**    CS_VBAP-VGBEL      = IS_BAPISDIT-REF_DOC.
**    CS_VBAP-VGPOS      = IS_BAPISDIT-REF_DOC_IT.
*    CS_VBAP-VGTYP      = IS_BAPISDIT-REF_DOC_CA.
    CS_VBAP-KDMAT      = IS_BAPISDIT-CUST_MAT35.
*    CS_VBAP-WKTNR      = IS_BAPISDIT-VAL_CONTR.
*    CS_VBAP-WKTPS      = IS_BAPISDIT-VAL_CON_I.
*    CS_VBAP-EAN11      = IS_BAPISDIT-EAN_UPC.
*    CS_VBAP-UEPVW      = IS_BAPISDIT-VW_UEPOS.
*    CS_VBAP-VKAUS      = IS_BAPISDIT-DLVSCHDUSE.
*    CS_VBAP-MATWA      = IS_BAPISDIT-MAT_ENTRD.
*    CS_VBAP-LOGSYS_EXT = IS_BAPISDIT-LOG_SYSTEM_OWN.

    CS_VBAP-KALNR = IS_BAPISDIT-COSTESTNR.
    CS_VBAP-KLVAR = IS_BAPISDIT-CSTG_VRNT.

    CS_VBAP-CUOBJ = IS_BAPISDIT-CONFIG.

  endmethod.
  method MAP_VBAK_TO_BAPIPAREX.

    data: LF_OFFSET type I.


*** Fill Structure
    move-corresponding IS_VBAK to ES_BAPE_VBAK.

***----------------------------------------------------------------------------
*** Build Extension
    RS_BAPIPAREX-STRUCTURE = 'BAPE_VBAK'.
    describe field RS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = ES_BAPE_VBAK
                                                   importing EX_CONTAINER = RS_BAPIPAREX+LF_OFFSET ).

  endmethod.
  method MAP_VBAK_TO_BAPISDHD1.

*REFOBJTYPE  1 Types  SWO_OBJTYP
*REFOBJKEY  1 Types SWO_TYPEID
*REFDOCTYPE  1 Types  REFDOCTYPE
    move IS_VBAK-AUART    to CS_BAPISDHD1-DOC_TYPE.
    move IS_VBAK-VBTYP    to CS_BAPISDHD1-SD_DOC_CAT.
    move IS_VBAK-SUBMI    to CS_BAPISDHD1-COLLECT_NO.
    move IS_VBAK-VKORG    to CS_BAPISDHD1-SALES_ORG.
    move IS_VBAK-VTWEG    to CS_BAPISDHD1-DISTR_CHAN.
    move IS_VBAK-SPART    to CS_BAPISDHD1-DIVISION.
    move IS_VBAK-VKGRP    to CS_BAPISDHD1-SALES_GRP.
    move IS_VBAK-VKBUR    to CS_BAPISDHD1-SALES_OFF.
    move IS_VBAK-VDATU    to CS_BAPISDHD1-REQ_DATE_H.
    move IS_VBAK-VPRGR    to CS_BAPISDHD1-DATE_TYPE.
    move IS_VBAK-BSTDK    to CS_BAPISDHD1-PURCH_DATE.
    move IS_VBAK-BSARK    to CS_BAPISDHD1-PO_METHOD.
    move IS_VBAK-BSTZD    to CS_BAPISDHD1-PO_SUPPLEM.
    move IS_VBAK-IHREZ    to CS_BAPISDHD1-REF_1.
    move IS_VBAK-BNAME    to CS_BAPISDHD1-NAME.
    move IS_VBAK-TELF1    to CS_BAPISDHD1-TELEPHONE.
    move IS_VBAK-LIFSK    to CS_BAPISDHD1-DLV_BLOCK.
    move IS_VBAK-FAKSK    to CS_BAPISDHD1-BILL_BLOCK.
    move IS_VBAK-AUGRU    to CS_BAPISDHD1-ORD_REASON.
    move IS_VBAK-AUTLF    to CS_BAPISDHD1-COMPL_DLV.
    move IS_VBAK-ANGDT    to CS_BAPISDHD1-QT_VALID_F.
    move IS_VBAK-BNDDT    to CS_BAPISDHD1-QT_VALID_T.
    move IS_VBAK-GUEBG    to CS_BAPISDHD1-CT_VALID_F.
    move IS_VBAK-GUEEN    to CS_BAPISDHD1-CT_VALID_T.
    move IS_VBAK-KVGR1    to CS_BAPISDHD1-CUST_GRP1.
    move IS_VBAK-KVGR2    to CS_BAPISDHD1-CUST_GRP2.
    move IS_VBAK-KVGR3    to CS_BAPISDHD1-CUST_GRP3.
    move IS_VBAK-KVGR4    to CS_BAPISDHD1-CUST_GRP4.
    move IS_VBAK-KVGR5    to CS_BAPISDHD1-CUST_GRP5.
    move IS_VBAK-AUART    to CS_BAPISDHD1-SD_DOC_CAT.
    move IS_VBAK-AUDAT    to CS_BAPISDHD1-DOC_DATE.
    move IS_VBAK-GWLDT    to CS_BAPISDHD1-WAR_DATE.
    move IS_VBAK-VSBED    to CS_BAPISDHD1-SHIP_COND.
    move IS_VBAK-KTEXT    to CS_BAPISDHD1-PP_SEARCH.
    move IS_VBAK-MAHZA    to CS_BAPISDHD1-DUN_COUNT.
    move IS_VBAK-MAHDT    to CS_BAPISDHD1-DUN_DATE.

    if not IS_VBAK-PS_PSP_PNR is initial.
      call function 'CJPN_INTERN_TO_EXTERN_CONV'
        exporting
          INT_NUM   = IS_VBAK-PS_PSP_PNR
        importing
          EXT_NUM   = CS_BAPISDHD1-WBS_ELEM
        exceptions
          NOT_FOUND = 1
          others    = 2.
      if SY-SUBRC ne 0.
        clear CS_BAPISDHD1-WBS_ELEM.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

    move IS_VBAK-ABRVW    to CS_BAPISDHD1-DLVSCHDUSE.
    move IS_VBAK-ABDIS    to CS_BAPISDHD1-PLDLVSTYP.
    move IS_VBAK-VGBEL    to CS_BAPISDHD1-REF_DOC.
    move IS_VBAK-BUKRS_VF to CS_BAPISDHD1-COMP_CDE_B.
    move IS_VBAK-TAXK1    to CS_BAPISDHD1-ALTTAX_CLS.
    move IS_VBAK-TAXK2    to CS_BAPISDHD1-TAX_CLASS2.
    move IS_VBAK-TAXK3    to CS_BAPISDHD1-TAX_CLASS3.
    move IS_VBAK-TAXK4    to CS_BAPISDHD1-TAX_CLASS4.
    move IS_VBAK-TAXK5    to CS_BAPISDHD1-TAX_CLASS5.
    move IS_VBAK-TAXK6    to CS_BAPISDHD1-TAX_CLASS6.
    move IS_VBAK-TAXK7    to CS_BAPISDHD1-TAX_CLASS7.
    move IS_VBAK-TAXK8    to CS_BAPISDHD1-TAX_CLASS8.
    move IS_VBAK-TAXK9    to CS_BAPISDHD1-TAX_CLASS9.
    move IS_VBAK-XBLNR    to CS_BAPISDHD1-REF_DOC_L.
    move IS_VBAK-ZUONR    to CS_BAPISDHD1-ASS_NUMBER.
    move IS_VBAK-VGTYP    to CS_BAPISDHD1-REFDOC_CAT.

    if IS_VBAK-WAERK is not initial.
      call function 'CURRENCY_CODE_SAP_TO_ISO'
        exporting
          SAP_CODE  = IS_VBAK-WAERK
        importing
          ISO_CODE  = CS_BAPISDHD1-CURR_ISO
        exceptions
          NOT_FOUND = 1
          others    = 2.
      if SY-SUBRC ne 0.
        clear CS_BAPISDHD1-CURR_ISO.
      endif.
    endif.

    move IS_VBAK-VBKLA    to CS_BAPISDHD1-DOC_CLASS.

    if not IS_VBAK-XBLNR is initial.
      call function 'REF_DOC_NO_CONVERSION_OUTBOUND'
        exporting
          I_REF_DOC_NO_LONG = IS_VBAK-XBLNR
        importing
          E_REF_DOC_NO_LONG = CS_BAPISDHD1-REF_DOC_L_LONG.
      if CS_BAPISDHD1-REF_DOC_L_LONG is initial.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

    move IS_VBAK-VSNMR_V  to CS_BAPISDHD1-VERSION.

  endmethod.
  method MAP_VBAP_TO_BAPIPAREX.

    data: LF_OFFSET type I.


*** Fill Structure
    move-corresponding IS_VBAP to ES_BAPE_VBAP.

***----------------------------------------------------------------------------
*** Build Extension
    RS_BAPIPAREX-STRUCTURE = 'BAPE_VBAP'.
    describe field RS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = ES_BAPE_VBAP
                                                   importing EX_CONTAINER = RS_BAPIPAREX+LF_OFFSET ).

  endmethod.
  method MAP_VBAP_TO_BAPISDITM.

    move IS_VBAP-POSNR      to CS_BAPISDITM-ITM_NUMBER.
    move IS_VBAP-UEPOS      to CS_BAPISDITM-HG_LV_ITEM.

*    move IS_VBAP-POSEX      to CS_BAPISDITM-PO_ITM_NO.
    move IS_VBAP-POSNR      to CS_BAPISDITM-PO_ITM_NO.          "Requiered for match in Configuration

    move IS_VBAP-MATNR      to CS_BAPISDITM-MATERIAL.
    move IS_VBAP-GRPOS      to CS_BAPISDITM-ALT_TO_ITM.
    move IS_VBAP-CHARG      to CS_BAPISDITM-BATCH.
    move IS_VBAP-GRKOR      to CS_BAPISDITM-DLV_GROUP.
    move IS_VBAP-KZTLF      to CS_BAPISDITM-PART_DLV.
    move IS_VBAP-ABGRU      to CS_BAPISDITM-REASON_REJ.
    move IS_VBAP-FAKSP      to CS_BAPISDITM-BILL_BLOCK.
    move IS_VBAP-WERKS      to CS_BAPISDITM-PLANT.
    move IS_VBAP-LGORT      to CS_BAPISDITM-STORE_LOC.
    move IS_VBAP-ZMENG      to CS_BAPISDITM-TARGET_QTY.
    move IS_VBAP-ZIEME      to CS_BAPISDITM-TARGET_QU.
    move IS_VBAP-PSTYV      to CS_BAPISDITM-ITEM_CATEG.
    move IS_VBAP-ARKTX      to CS_BAPISDITM-SHORT_TEXT.
    move IS_VBAP-MVGR1      to CS_BAPISDITM-PRC_GROUP1.
    move IS_VBAP-MVGR2      to CS_BAPISDITM-PRC_GROUP2.
    move IS_VBAP-MVGR3      to CS_BAPISDITM-PRC_GROUP3.
    move IS_VBAP-MVGR4      to CS_BAPISDITM-PRC_GROUP4.
    move IS_VBAP-MVGR5      to CS_BAPISDITM-PRC_GROUP5.
    move IS_VBAP-PRODH      to CS_BAPISDITM-PROD_HIERA.
    move IS_VBAP-MATKL      to CS_BAPISDITM-MATL_GROUP.
    move IS_VBAP-VRKME      to CS_BAPISDITM-SALES_UNIT.
    move IS_VBAP-UMZIZ      to CS_BAPISDITM-TRG_QTY_NO.
    move IS_VBAP-UMZIN      to CS_BAPISDITM-TRGQTY_DEN.
    move IS_VBAP-ABLFZ      to CS_BAPISDITM-RNDDLV_QTY.
    move IS_VBAP-ABSFZ      to CS_BAPISDITM-MAXDEVAMNT.
    move IS_VBAP-KBVER      to CS_BAPISDITM-MAXDEVPER.
    move IS_VBAP-KEVER      to CS_BAPISDITM-MAXDEV_DAY.
    move IS_VBAP-VKAUS      to CS_BAPISDITM-USAGE_IND.
    move IS_VBAP-FMENG      to CS_BAPISDITM-FIXED_QUAN.
    move IS_VBAP-UEBTK      to CS_BAPISDITM-UNLMT_DLV.
    move IS_VBAP-UEBTO      to CS_BAPISDITM-OVERDLVTOL.
    move IS_VBAP-UNTTO      to CS_BAPISDITM-UNDDLV_TOL.
    move IS_VBAP-SPART      to CS_BAPISDITM-DIVISION.
    move IS_VBAP-UMVKZ      to CS_BAPISDITM-SALQTYNUM.
    move IS_VBAP-UMVKN      to CS_BAPISDITM-SALQTYDEN.
    move IS_VBAP-BRGEW      to CS_BAPISDITM-GROSS_WGHT.
    move IS_VBAP-NTGEW      to CS_BAPISDITM-NET_WEIGHT.
    move IS_VBAP-GEWEI      to CS_BAPISDITM-UNTOF_WGHT.
    move IS_VBAP-VOLUM      to CS_BAPISDITM-VOLUME.
    move IS_VBAP-VOLEH      to CS_BAPISDITM-VOLUNIT.
    move IS_VBAP-LPRIO      to CS_BAPISDITM-DLV_PRIO.
    move IS_VBAP-VSTEL      to CS_BAPISDITM-SHIP_POINT.
    move IS_VBAP-ROUTE      to CS_BAPISDITM-ROUTE.
    move IS_VBAP-ERNAM      to CS_BAPISDITM-CREATED_BY.
    move IS_VBAP-TAXM1      to CS_BAPISDITM-TAX_CLASS1.
    move IS_VBAP-TAXM2      to CS_BAPISDITM-TAX_CLASS2.
    move IS_VBAP-TAXM3      to CS_BAPISDITM-TAX_CLASS3.
    move IS_VBAP-TAXM4      to CS_BAPISDITM-TAX_CLASS4.
    move IS_VBAP-TAXM5      to CS_BAPISDITM-TAX_CLASS5.
    move IS_VBAP-TAXM6      to CS_BAPISDITM-TAX_CLASS6.
    move IS_VBAP-TAXM7      to CS_BAPISDITM-TAX_CLASS7.
    move IS_VBAP-TAXM8      to CS_BAPISDITM-TAX_CLASS8.
    move IS_VBAP-TAXM9      to CS_BAPISDITM-TAX_CLASS9.
    move IS_VBAP-KONDM      to CS_BAPISDITM-MAT_PR_GRP.
    move IS_VBAP-BWTAR      to CS_BAPISDITM-VAL_TYPE.
    move IS_VBAP-FIXMG      to CS_BAPISDITM-FIXDAT_QTY.
    move IS_VBAP-SERNR      to CS_BAPISDITM-BOMEXPL_NO.
    move IS_VBAP-ABGRS      to CS_BAPISDITM-RESANALKEY.
    move IS_VBAP-BEDAE      to CS_BAPISDITM-REQMTS_TYP.
    move IS_VBAP-NACHL      to CS_BAPISDITM-NO_GR_POST.
    move IS_VBAP-EXART      to CS_BAPISDITM-BUS_TRANST.
    move IS_VBAP-ZSCHL_K    to CS_BAPISDITM-OVERHD_KEY.
    move IS_VBAP-KALSM_K    to CS_BAPISDITM-CSTG_SHEET.
    move IS_VBAP-MFRGR      to CS_BAPISDITM-MATFRGTGRP.
    move IS_VBAP-PLAVO      to CS_BAPISDITM-PLDLVSHDIN.
    move IS_VBAP-KANNR      to CS_BAPISDITM-SEQ_NO.
    move IS_VBAP-PMATN      to CS_BAPISDITM-PR_REF_MAT.
    move IS_VBAP-AWAHR      to CS_BAPISDITM-ORDER_PROB.
    move IS_VBAP-ANTLF      to CS_BAPISDITM-MAX_PL_DLV.
    move IS_VBAP-SKOPF      to CS_BAPISDITM-ASSORT_MOD.
    move IS_VBAP-KMPMG      to CS_BAPISDITM-COMP_QUANT.
    move IS_VBAP-PRCTR      to CS_BAPISDITM-PROFIT_CTR.
    move IS_VBAP-AUFNR      to CS_BAPISDITM-ORDERID.
    move IS_VBAP-VGBEL      to CS_BAPISDITM-REF_DOC.
    move IS_VBAP-VGPOS      to CS_BAPISDITM-REF_DOC_IT.
    move IS_VBAP-VGTYP      to CS_BAPISDITM-REF_DOC_CA.
    move IS_VBAP-KDMAT      to CS_BAPISDITM-CUST_MAT35.
    move IS_VBAP-WKTNR      to CS_BAPISDITM-VAL_CONTR.
    move IS_VBAP-WKTPS      to CS_BAPISDITM-VAL_CON_I.
    move IS_VBAP-EAN11      to CS_BAPISDITM-EAN_UPC.
    move IS_VBAP-UEPVW      to CS_BAPISDITM-VW_UEPOS.
    move IS_VBAP-VKAUS      to CS_BAPISDITM-DLVSCHDUSE.
    move IS_VBAP-MATWA      to CS_BAPISDITM-MAT_ENTRD.
    move IS_VBAP-LOGSYS_EXT to CS_BAPISDITM-LOG_SYSTEM_OWN.

  endmethod.
  method MAP_VBEP_TO_BAPIPAREX.

    data: LF_OFFSET type I.


*** Fill Structure
    move-corresponding IS_VBEP to ES_BAPE_VBEP.

***----------------------------------------------------------------------------
*** Build Extension
    RS_BAPIPAREX-STRUCTURE = 'BAPE_VBEP'.
    describe field RS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = ES_BAPE_VBEP
                                                   importing EX_CONTAINER = RS_BAPIPAREX+LF_OFFSET ).

  endmethod.
  method MAP_VBEP_TO_BAPISCHDL.

    move IS_VBEP-POSNR   to CS_BAPISCHDL-ITM_NUMBER.
    move IS_VBEP-ETENR   to CS_BAPISCHDL-SCHED_LINE.
    move IS_VBEP-BDDAT   to CS_BAPISCHDL-REQ_DATE.
    move IS_VBEP-PRGRS   to CS_BAPISCHDL-DATE_TYPE.
    move IS_VBEP-EZEIT   to CS_BAPISCHDL-REQ_TIME.
    move IS_VBEP-WMENG   to CS_BAPISCHDL-REQ_QTY.
    move IS_VBEP-LIFSP   to CS_BAPISCHDL-REQ_DLV_BL.
    move IS_VBEP-ETTYP   to CS_BAPISCHDL-SCHED_TYPE.
    move IS_VBEP-TDDAT   to CS_BAPISCHDL-TP_DATE.
    move IS_VBEP-MBDAT   to CS_BAPISCHDL-MS_DATE.
    move IS_VBEP-LDDAT   to CS_BAPISCHDL-LOAD_DATE.
    move IS_VBEP-WADAT   to CS_BAPISCHDL-GI_DATE.
    move IS_VBEP-TDUHR   to CS_BAPISCHDL-TP_TIME.
    move IS_VBEP-MBUHR   to CS_BAPISCHDL-MS_TIME.
    move IS_VBEP-LDUHR   to CS_BAPISCHDL-LOAD_TIME.
    move IS_VBEP-WAUHR   to CS_BAPISCHDL-GI_TIME.
*    move IS_VBEP- to CS_BAPISCHDL-REFOBJTYPE  SWO_OBJTYP
*    move IS_VBEP- to CS_BAPISCHDL-REFOBJKEY  SWO_TYPEID
*    move IS_VBEP- to CS_BAPISCHDL-REFLOGSYS  LOGSYS
    move IS_VBEP-EDATU   to CS_BAPISCHDL-DLV_DATE.
    move IS_VBEP-EZEIT   to CS_BAPISCHDL-DLV_TIME.
    move IS_VBEP-ABART   to CS_BAPISCHDL-REL_TYPE.
    move IS_VBEP-ETART   to CS_BAPISCHDL-PLAN_SCHED_TYPE.

  endmethod.
  method MAP_VBKD_TO_BAPIPAREX.

    data: LF_OFFSET type I.


*** Fill Structure
    move-corresponding IS_VBKD to ES_BAPE_VBKD.

***----------------------------------------------------------------------------
*** Build Extension
    RS_BAPIPAREX-STRUCTURE = 'BAPE_VBKD'.
    describe field RS_BAPIPAREX-STRUCTURE length LF_OFFSET in character mode.
    CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = ES_BAPE_VBKD
                                                   importing EX_CONTAINER = RS_BAPIPAREX+LF_OFFSET ).

  endmethod.
  method MAP_VBKD_TO_BAPISDHD1.

    move IS_VBKD-BSTKD    to CS_BAPISDHD1-PURCH_NO_C.
    move IS_VBKD-KONDA    to CS_BAPISDHD1-PRICE_GRP.
    move IS_VBKD-KDGRP    to CS_BAPISDHD1-CUST_GROUP.
    move IS_VBKD-BZIRK    to CS_BAPISDHD1-SALES_DIST.
    move IS_VBKD-PLTYP    to CS_BAPISDHD1-PRICE_LIST.
    move IS_VBKD-INCO1    to CS_BAPISDHD1-INCOTERMS1.
    move IS_VBKD-INCO2    to CS_BAPISDHD1-INCOTERMS2.
    move IS_VBKD-ZTERM    to CS_BAPISDHD1-PMNTTRMS.
    move IS_VBKD-PRSDT    to CS_BAPISDHD1-PRICE_DATE.
    move IS_VBKD-BSTKD_E  to CS_BAPISDHD1-PURCH_NO_S.
    move IS_VBKD-BSTKD_E  to CS_BAPISDHD1-PO_DAT_S.
    move IS_VBKD-BSARK_E  to CS_BAPISDHD1-PO_METH_S.
    move IS_VBKD-IHREZ_E  to CS_BAPISDHD1-REF_1_S.
    move IS_VBKD-KZAZU    to CS_BAPISDHD1-ORDCOMB_IN.
    move IS_VBKD-PERFK    to CS_BAPISDHD1-BILL_SCHED.
    move IS_VBKD-PERRL    to CS_BAPISDHD1-INVO_SCHED.
    move IS_VBKD-MRNKZ    to CS_BAPISDHD1-MN_INVOICE.
    move IS_VBKD-KURRF    to CS_BAPISDHD1-EXRATE_FI.
    move IS_VBKD-VALTG    to CS_BAPISDHD1-ADD_VAL_DY.
    move IS_VBKD-VALDT    to CS_BAPISDHD1-FIX_VAL_DY.
    move IS_VBKD-ZLSCH    to CS_BAPISDHD1-PYMT_METH.
    move IS_VBKD-KTGRD    to CS_BAPISDHD1-ACCNT_ASGN.
    move IS_VBKD-KURSK    to CS_BAPISDHD1-EXCHG_RATE.
    move IS_VBKD-FKDAT    to CS_BAPISDHD1-BILL_DATE.
    move IS_VBKD-FBUDA    to CS_BAPISDHD1-SERV_DATE.
    move IS_VBKD-MSCHL    to CS_BAPISDHD1-DUNN_KEY.
    move IS_VBKD-MANSP    to CS_BAPISDHD1-DUNN_BLOCK.
    move IS_VBKD-ABSSC    to CS_BAPISDHD1-PMTGAR_PRO.
    move IS_VBKD-ABTNR    to CS_BAPISDHD1-DEPARTM_NO.
    move IS_VBKD-EMPST    to CS_BAPISDHD1-REC_POINT.
    move IS_VBKD-LCNUM    to CS_BAPISDHD1-DOC_NUM_FI.
    move IS_VBKD-KDKG1    to CS_BAPISDHD1-CSTCNDGRP1.
    move IS_VBKD-KDKG2    to CS_BAPISDHD1-CSTCNDGRP2.
    move IS_VBKD-KDKG3    to CS_BAPISDHD1-CSTCNDGRP3.
    move IS_VBKD-KDKG4    to CS_BAPISDHD1-CSTCNDGRP4.
    move IS_VBKD-KDKG5    to CS_BAPISDHD1-CSTCNDGRP5.
    move IS_VBKD-DELCO    to CS_BAPISDHD1-DLV_TIME.
    move IS_VBKD-VKONT    to CS_BAPISDHD1-FKK_CONACCT.
    move IS_VBKD-CAMPAIGN to CS_BAPISDHD1-CAMPAIGN.
    move IS_VBKD-VSART    to CS_BAPISDHD1-SHIP_TYPE.
    move IS_VBKD-SDABW    to CS_BAPISDHD1-S_PROC_IND.

  endmethod.
  method MAP_VBKD_TO_BAPISDITM.

    move IS_VBKD-FKDAT      to CS_BAPISDITM-BILL_DATE.
    move IS_VBKD-BSTKD      to CS_BAPISDITM-PURCH_NO_C.
    move IS_VBKD-BSTDK      to CS_BAPISDITM-PURCH_DATE.
    move IS_VBKD-BSARK      to CS_BAPISDITM-PO_METHOD.
    move IS_VBKD-IHREZ      to CS_BAPISDITM-REF_1.
    move IS_VBKD-BSTKD_E    to CS_BAPISDITM-PURCH_NO_S.
    move IS_VBKD-BSTDK_E    to CS_BAPISDITM-PO_DAT_S.
    move IS_VBKD-BSARK_E    to CS_BAPISDITM-PO_METH_S.
    move IS_VBKD-IHREZ_E    to CS_BAPISDITM-REF_1_S.
    move IS_VBKD-POSEX_E    to CS_BAPISDITM-POITM_NO_S.
    move IS_VBKD-KONDA      to CS_BAPISDITM-PRICE_GRP.
    move IS_VBKD-KDGRP      to CS_BAPISDITM-CUST_GROUP.
    move IS_VBKD-BZIRK      to CS_BAPISDITM-SALES_DIST.
    move IS_VBKD-PLTYP      to CS_BAPISDITM-PRICE_LIST.
    move IS_VBKD-INCO1      to CS_BAPISDITM-INCOTERMS1.
    move IS_VBKD-INCO2      to CS_BAPISDITM-INCOTERMS2.
    move IS_VBKD-KZAZU      to CS_BAPISDITM-ORDCOMP_IN.
    move IS_VBKD-PERFK      to CS_BAPISDITM-BILL_SCHED.
    move IS_VBKD-PERRL      to CS_BAPISDITM-INVO_SCHED.
    move IS_VBKD-MRNKZ      to CS_BAPISDITM-MN_INVOICE.
    move IS_VBKD-KURRF      to CS_BAPISDITM-EX_RATE_FI.
    move IS_VBKD-VALTG      to CS_BAPISDITM-ADD_VAL_DY.
    move IS_VBKD-VALDT      to CS_BAPISDITM-FIX_VAL_DY.
    move IS_VBKD-ZTERM      to CS_BAPISDITM-PMNTTRMS.
    move IS_VBKD-ZLSCH      to CS_BAPISDITM-PYMT_METH.
    move IS_VBKD-KTGRD      to CS_BAPISDITM-ACCNT_ASGN.
    move IS_VBKD-KURSK      to CS_BAPISDITM-EXCHG_RATE.
    move IS_VBKD-PRSDT      to CS_BAPISDITM-PRICE_DATE.
    move IS_VBKD-FBUDA      to CS_BAPISDITM-SERV_DATE.
    move IS_VBKD-MSCHL      to CS_BAPISDITM-DUNN_KEY.
    move IS_VBKD-MANSP      to CS_BAPISDITM-DUNN_BLOCK.
    move IS_VBKD-WAKTION    to CS_BAPISDITM-PROMOTION.
    move IS_VBKD-ABSSC      to CS_BAPISDITM-PMTGAR_PRO.
    move IS_VBKD-LCNUM      to CS_BAPISDITM-DOC_NUM_FI.
    move IS_VBKD-ABTNR      to CS_BAPISDITM-DEPARTM_NO.
    move IS_VBKD-EMPST      to CS_BAPISDITM-REC_POINT.
    move IS_VBKD-KDKG1      to CS_BAPISDITM-CSTCNDGRP1.
    move IS_VBKD-KDKG2      to CS_BAPISDITM-CSTCNDGRP2.
    move IS_VBKD-KDKG3      to CS_BAPISDITM-CSTCNDGRP3.
    move IS_VBKD-KDKG4      to CS_BAPISDITM-CSTCNDGRP4.
    move IS_VBKD-KDKG5      to CS_BAPISDITM-CSTCNDGRP5.
    move IS_VBKD-DELCO      to CS_BAPISDITM-DLV_TIME.
    move IS_VBKD-FAKTF      to CS_BAPISDITM-BIL_FORM.
    move IS_VBKD-FFPRF      to CS_BAPISDITM-DLI_PROFIL.
    move IS_VBKD-RRREL      to CS_BAPISDITM-REV_TYPE.
    move IS_VBKD-ACDATV     to CS_BAPISDITM-BEGDEM_PER.
    move IS_VBKD-AKPRZ      to CS_BAPISDITM-DEPREC_PER.
    move IS_VBKD-VKONT      to CS_BAPISDITM-FKK_CONACCT.
    move IS_VBKD-WMINR      to CS_BAPISDITM-PRODCAT.
    move IS_VBKD-VSART      to CS_BAPISDITM-SHIP_TYPE.
    move IS_VBKD-SDABW      to CS_BAPISDITM-S_PROC_IND.

  endmethod.
  method MAP_VBPA_TO_BAPIPARNR.

    data: LF_PARTN_NUMB type KUNNR.
    data: LS_VBADR type VBADR,
          LS_TPAR  type TPAR.

    if IS_VBPA-ADRNR is not initial.
      call function 'SD_ADDRESS_GET'
        exporting
          FIF_ADDRESS_NUMBER      = IS_VBPA-ADRNR
        importing
          FES_ADDRESS             = LS_VBADR
        exceptions
          ADDRESS_NOT_FOUND       = 1
          ADDRESS_TYPE_NOT_EXISTS = 2
          NO_PERSON_NUMBER        = 3
          others                  = 4.
      if SY-SUBRC ne 0.
        raise exception type /VCXI/CX_CKX.
      endif.
    endif.

***---------------------------------------------------------------------
*** Get Partner Number by Partner Type
    call function 'TPAR_SINGLE_READ'
      exporting
        I_PARVW         = IS_VBPA-PARVW
      importing
        O_TPAR          = LS_TPAR
      exceptions
        NOT_FOUND       = 1
        PARAMETER_ERROR = 2.
    if SY-SUBRC ne 0.
      raise exception type /VCXI/CX_CKX.
    endif.

    case LS_TPAR-NRART.
      when 'KU'.                        "Customer
        LF_PARTN_NUMB = IS_VBPA-KUNNR.
      when 'LI'.                        "Vendor
        LF_PARTN_NUMB = IS_VBPA-LIFNR.
      when 'AP'.                        "Contact Persons
        LF_PARTN_NUMB = IS_VBPA-PARNR.
      when 'PE'.                        "Personnel Number
        LF_PARTN_NUMB = IS_VBPA-PERNR.
      when others.
        clear LF_PARTN_NUMB.
    endcase.

***---------------------------------------------------------------------
*** MAP structures VBPAVB & VBADR to BAPIPARN structure
    move IS_VBPA-PARVW         to RS_BAPIPARNR-PARTN_ROLE.
    move LF_PARTN_NUMB         to RS_BAPIPARNR-PARTN_NUMB.
    move IS_VBPA-POSNR         to RS_BAPIPARNR-ITM_NUMBER.
    move LS_VBADR-ANRED        to RS_BAPIPARNR-TITLE.
    move LS_VBADR-NAME1        to RS_BAPIPARNR-NAME.
    move LS_VBADR-NAME2        to RS_BAPIPARNR-NAME_2.
    move LS_VBADR-NAME3        to RS_BAPIPARNR-NAME_3.
    move LS_VBADR-NAME4        to RS_BAPIPARNR-NAME_4.
    move LS_VBADR-STRAS        to RS_BAPIPARNR-STREET.
    move LS_VBADR-LAND1        to RS_BAPIPARNR-COUNTRY.
    if not LS_VBADR-LAND1 is initial.
      call function 'COUNTRY_CODE_SAP_TO_ISO'
        exporting
          SAP_CODE = LS_VBADR-LAND1
        importing
          ISO_CODE = RS_BAPIPARNR-COUNTR_ISO
        exceptions
          others   = 0.
    endif.
    move LS_VBADR-PSTLZ        to RS_BAPIPARNR-POSTL_CODE.
    move LS_VBADR-PSTL2        to RS_BAPIPARNR-POBX_PCD.
    move LS_VBADR-PFORT        to RS_BAPIPARNR-POBX_CTY.
    move LS_VBADR-ORT01        to RS_BAPIPARNR-CITY.
    move LS_VBADR-ORT02        to RS_BAPIPARNR-DISTRICT.
    move LS_VBADR-REGIO        to RS_BAPIPARNR-REGION.
    move LS_VBADR-PFACH        to RS_BAPIPARNR-PO_BOX.
    move LS_VBADR-TELF1        to RS_BAPIPARNR-TELEPHONE.
    move LS_VBADR-TELF2        to RS_BAPIPARNR-TELEPHONE2.
    move LS_VBADR-TELBX        to RS_BAPIPARNR-TELEBOX.
    move LS_VBADR-TELFX        to RS_BAPIPARNR-FAX_NUMBER.
    move LS_VBADR-TELTX        to RS_BAPIPARNR-TELETEX_NO.
    move LS_VBADR-TELX1        to RS_BAPIPARNR-TELEX_NO.
    move LS_VBADR-SPRAS        to RS_BAPIPARNR-LANGU.
    if not LS_VBADR-SPRAS is initial.
      call function 'CONVERSION_EXIT_ISOLA_OUTPUT'
        exporting
          INPUT  = LS_VBADR-SPRAS
        importing
          OUTPUT = RS_BAPIPARNR-LANGU_ISO.
    endif.
    move IS_VBPA-ABLAD       to RS_BAPIPARNR-UNLOAD_PT.
    move IS_VBPA-LZONE       to RS_BAPIPARNR-TRANSPZONE.
    move LS_VBADR-TXJCD        to RS_BAPIPARNR-TAXJURCODE.
    move LS_VBADR-ADRNR        to RS_BAPIPARNR-ADDRESS.
    move LS_VBADR-ADRNP        to RS_BAPIPARNR-PRIV_ADDR.
    move LS_VBADR-ADDRESS_TYPE to RS_BAPIPARNR-ADDR_TYPE.

  endmethod.
  method PROCESS_BAPI_RES.

    data: LS_BAPIRET2   type BAPIRET2,
          LS_VBAK       type VBAK,
          LS_VBAP       type VBAP,
          LS_VBKD       type VBKD,
          LS_BAPISDIT   type BAPISDIT,
          LS_BAPISDHEDU type BAPISDHEDU,
          LS_BAPISDBUSI type BAPISDBUSI.

***----------------------------------------------------------------------------
    create object RR_MSG.
*** Add SmartVC Error Messages
    loop at IS_BAPI_SAVE_RES-T_BAPISDIT into LS_BAPISDIT
                                       where CONFIG is not initial.
      data(LR_MSG) = /VCXI/CL_VKSRA_SVC=>GET_MSG_BY_CUOBJ( IF_CUOBJ = LS_BAPISDIT-CONFIG ).
      if LR_MSG is bound and
         LR_MSG->T_MSG is not initial.
***     SmartVC Messages of Item &1
        RR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCI'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '201'
                             IF_MSGV1 = LS_BAPISDIT-ITM_NUMBER ).
        RR_MSG->MERGE( changing CR_MESSAGE = LR_MSG ).
      endif.
    endloop.

*** Add BAPI Messages
    loop at IS_BAPI_SAVE_RES-T_BAPIRET2 into LS_BAPIRET2.
      RR_MSG->ADD_MESSAGE( IF_MSGID = LS_BAPIRET2-ID
                           IF_MSGTY = LS_BAPIRET2-TYPE
                           IF_MSGNO = LS_BAPIRET2-NUMBER
                           IF_MSGV1 = LS_BAPIRET2-MESSAGE_V1
                           IF_MSGV2 = LS_BAPIRET2-MESSAGE_V2
                           IF_MSGV3 = LS_BAPIRET2-MESSAGE_V3
                           IF_MSGV4 = LS_BAPIRET2-MESSAGE_V4 ).
    endloop.

***----------------------------------------------------------------------------
*** Update Header Data
    if IS_BAPI_SAVE_RES-S_BAPISDHD is not initial.
      ME->MAP_BAPISDHD_TO_VBAK( exporting IS_BAPISDHD = IS_BAPI_SAVE_RES-S_BAPISDHD
                                changing  CS_VBAK     = ME->S_VBAK ).
    endif.

*** Update Condition Table
    if IS_BAPI_SAVE_RES-T_BAPICOND is not initial.
      clear ME->T_KOMV.    "Refresh completely
      ME->MAP_BAPICOND_TO_KOMV( exporting IT_BAPICOND = IS_BAPI_SAVE_RES-T_BAPICOND
                                changing  CT_KOMV     = ME->T_KOMV ).
    endif.

*** Update Item Data (incl. Extension)
    loop at IS_BAPI_SAVE_RES-T_BAPISDIT into LS_BAPISDIT.
      if not LINE_EXISTS( ME->T_VBAP[ POSNR = LS_BAPISDIT-ITM_NUMBER ] ).
        append value #( POSNR = LS_BAPISDIT-ITM_NUMBER ) to ME->T_VBAP.
      endif.
      ME->T_VBAP[ POSNR = LS_BAPISDIT-ITM_NUMBER ]-VBELN = ME->S_VBAK-VBELN.
      ME->MAP_BAPISDIT_TO_VBAP( exporting IS_BAPISDIT = LS_BAPISDIT
                                changing  CS_VBAP     = ME->T_VBAP[ POSNR = LS_BAPISDIT-ITM_NUMBER ] ).
      ME->MAP_BAPIPAREX_TO_VBAP( exporting IT_BAPIPAREX = IS_BAPI_SAVE_RES-T_EXTENSION
                                 changing  CS_VBAP      = ME->T_VBAP[ POSNR = LS_BAPISDIT-ITM_NUMBER ] ).
    endloop.

*** Update Schedule Lines
    loop at IS_BAPI_SAVE_RES-T_SCHEDULE into LS_BAPISDHEDU.
      if not LINE_EXISTS( ME->T_VBEP[ POSNR = LS_BAPISDHEDU-ITM_NUMBER
                                      ETENR = LS_BAPISDHEDU-SCHED_LINE ] ).
        append value #( POSNR = LS_BAPISDHEDU-ITM_NUMBER
                        ETENR = LS_BAPISDHEDU-SCHED_LINE ) to ME->T_VBEP.
      endif.
      ME->T_VBEP[ POSNR = LS_BAPISDHEDU-ITM_NUMBER
                  ETENR = LS_BAPISDHEDU-SCHED_LINE ]-VBELN = ME->S_VBAK-VBELN.
      ME->MAP_BAPISDHEDU_TO_VBEP( exporting IS_BAPISDHEDU = LS_BAPISDHEDU
                                  changing  CS_VBEP       = ME->T_VBEP[ POSNR = LS_BAPISDHEDU-ITM_NUMBER
                                                                        ETENR = LS_BAPISDHEDU-SCHED_LINE ] ).
    endloop.

*** Update Business Data
    loop at IS_BAPI_SAVE_RES-T_BUSINESS into LS_BAPISDBUSI.
      if not LINE_EXISTS( ME->T_VBKD[ POSNR = LS_BAPISDBUSI-ITM_NUMBER ] ).
        append value #( POSNR = LS_BAPISDBUSI-ITM_NUMBER ) to ME->T_VBKD.
      endif.
      ME->T_VBKD[ POSNR = LS_BAPISDBUSI-ITM_NUMBER ]-VBELN = ME->S_VBAK-VBELN.
      ME->MAP_BAPISDBUSI_TO_VBKD( exporting IS_BAPISDBUSI = LS_BAPISDBUSI
                                  changing  CS_VBKD       = ME->T_VBKD[ POSNR = LS_BAPISDBUSI-ITM_NUMBER ] ).
    endloop.

***----------------------------------------------------------------------------
    check IF_TESTRUN ne ABAP_TRUE and
          IF_COMMIT  eq ABAP_TRUE.
    if not LINE_EXISTS( IS_BAPI_SAVE_RES-T_BAPIRET2[ TYPE = 'E' ] ) and
       not LINE_EXISTS( IS_BAPI_SAVE_RES-T_BAPIRET2[ TYPE = 'A' ] ) and
       not LINE_EXISTS( IS_BAPI_SAVE_RES-T_BAPIRET2[ TYPE = 'X' ] ).
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
      commit work.
    else.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
    endif.

  endmethod.
  method RUN_CONFIG.

    data: LF_CONFIG_ID_OLD type CUX_CFG_ID,
          LF_CONFIG_ID_NEW type CUX_CFG_ID.
    data: LS_VBAP         type VBAP,
          LS_CFGS_REFINST type BAPICUREF,
          LS_CFGS_INST    type BAPICUINS,
          LS_INOB         type INOB,
          LS_OBJECT       type CLTABLE.
    data: LT_OBJTABLE       type TT_CLTABLE,
          LT_CONFIG_ID      type table of CUX_CFG_ID,
          LT_APPL_INSTANCES type CUIB_CORE_APPL_ITEM_T,
          LT_REFERENCE      type table of E1CUREF,
          LT_CFG_HEADERS    type CUXT_CUCFG_T,
          LT_INSTANCES      type CUXT_CUINS_T,
          LT_PART_OF        type CUXT_CUPRT_T,
          LT_VALUES         type CUXT_CUVAL_T,
          LT_VAR_KEYS       type CUXT_CUVK_T.
    field-symbols: <S_VBAP> type VBAP.


***----------------------------------------------------------------------------
*** Read/Validate Position Number
    LS_VBAP = value #( ME->T_VBAP[ POSNR = IF_POSNR ] optional ).
    check LS_VBAP is not initial.

*** Check/Update Configuration Date
    if LS_VBAP-STDAT is initial.
      LS_VBAP-STDAT = value #( ME->T_VBEP[ POSNR = LS_VBAP-POSNR ]-MBDAT optional ).
    endif.

*** Ensure POSEX is set, so configuration can run, as SAP uses it to match configuration to position
    ME->T_VBAP[ POSNR = IF_POSNR ]-POSEX = IF_POSNR.

*** Get Configuration
    LS_CFGS_REFINST = value #( ME->T_CFGS_REFINST[ POSEX = IF_POSNR ] optional ).
    check LS_CFGS_REFINST is not initial.

    LS_CFGS_INST = value #( ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                                             INST_ID   = LS_CFGS_REFINST-INST_ID ] optional ).
    check LS_CFGS_INST is not initial.

*** Only process Root Configurations
    check LINE_EXISTS( ME->T_CFGS_REF[ CONFIG_ID = LS_CFGS_INST-CONFIG_ID
                                       ROOT_ID   = LS_CFGS_INST-INST_ID ] ).

*** Fill Data
    LS_INOB-CUOBJ  = LS_VBAP-CUOBJ.
    LS_INOB-ROBTAB = LS_CFGS_INST-OBJ_TYPE.
    LS_INOB-ROBJEK = LS_CFGS_INST-OBJ_KEY.

*** Get Application Environment for Configuration
    LT_OBJTABLE = ME->GET_CLTABLE_IN( IF_POSNR = IF_POSNR ).

    call function 'CUXC_INIT'.

*** Set Configuration to CUXC via IDOC
    if IF_NO_DIALOG eq ABAP_TRUE.
      call function 'CUXC_IDOC_TO_MEMORY'
        tables
          CFG_INSTREF   = ME->T_CFGS_REFINST
          CFG_REF       = ME->T_CFGS_REF
          INST          = ME->T_CFGS_INST
          PART_OF       = ME->T_CFGS_PART_OF
          VALUE         = ME->T_CFGS_VALUE
*         cfg_blob      = ME->t_cfgs_blob
*         vkey          = ME->t_cfgs_vk
        exceptions
          ERROR_MESSAGE = 01
          others        = 02.
      if SY-SUBRC > 0.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'V4'
                                              IF_MSGNO = '223' ).
      endif.
    endif.

*** Validate CUOBJ
    call function 'CE_I_GET_INFORMATION'
      exporting
        INSTANCE           = LS_INOB-CUOBJ
      exceptions
        INSTANCE_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      if LS_INOB-CUOBJ(4) = '9999' or LS_INOB-CUOBJ(4) = '8999'.
        clear LS_INOB-CUOBJ.
      else.
***     Get from DB
        call function 'VC_I_GET_CONFIGURATION_IBASE'
          exporting
            INSTANCE           = LS_INOB-CUOBJ
          exceptions
            INSTANCE_NOT_FOUND = 1.
        if SY-SUBRC ne 0.
          clear LS_INOB-CUOBJ.
        endif.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Run Configuration
    call function 'CE_C_PROCESSING'
      exporting
        INSTANCE                       = LS_INOB-CUOBJ
        DATE                           = LS_VBAP-STDAT
        DISPLAY                        = IF_DISPLAY
        OBJECT_ID                      = LS_INOB-ROBTAB
        OBJECT                         = LS_INOB-ROBJEK
        OWNER_ID                       = 'VBPS'
        PLANT                          = LS_VBAP-WERKS
        NO_DIALOG                      = IF_NO_DIALOG
*       SUB_TYPE                       = '05'
        TYPE                           = 'S'
      importing
        NEW_INSTANCE                   = RF_CUOBJ
      tables
        APPLICATION_INPUT              = LT_OBJTABLE
      exceptions
        INTERNAL_ERROR                 = 1
        INSTANCE_NOT_FOUND             = 2
        REFERENCE_INSTANCE_NOT_FOUND   = 3
        INSTANCE_IS_A_CLASSIFICATION   = 4
        NO_PLANT                       = 5
        NO_QUANTITY                    = 6
        NO_CONNECTION_TO_CONFIGURATION = 7
        MATERIAL_VARIANT_NOT_ALLOWED   = 8
        INTERNAL_ERROR_ECM             = 9
        EOASL_NOT_ALLOWED              = 10
        MAXASL_NOT_ALLOWED             = 11
        XC_UNPROCESSED_DATA            = 12
        XC_FAILURE_PROCESSING_DATA     = 13
        NO_BOM                         = 14
        NO_KNOWLEDGE_BASE_FOUND        = 15
        ORDER_BOM_ERROR                = 16.

    if SY-SUBRC ne 0.
      case SY-SUBRC.
        when 12 or 13.
          ME->T_CFGS_REF[ POSEX = IF_POSNR ]-COMPLETE   = 'F'.
          ME->T_CFGS_REF[ POSEX = IF_POSNR ]-CONSISTENT = 'F'.
          ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                           INST_ID   = LS_CFGS_REFINST-INST_ID ]-COMPLETE   = 'F'.
          ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                           INST_ID   = LS_CFGS_REFINST-INST_ID ]-CONSISTENT = 'F'.
          RF_CUOBJ = LS_VBAP-CUOBJ.
          exit.
        when others.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endcase.
    endif.

    try.
***     Get CBase for Configuration
        CL_CBASE=>GET_CURRENT_CBASE_BY_INSTANCE( exporting IV_INSTANCE = RF_CUOBJ
                                                 importing EO_CBASE    = data(LR_CBASE) ).
***     Get Model
        LR_CBASE->GET_CONFIGURATION( importing ET_INSTANCES = data(LT_INSTANCE) ).

***     Update CUOBJ of Line Item
        ME->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ = RF_CUOBJ.

***     Update Sub-Items
        loop at LT_INSTANCE into data(LS_INSTANCE) where INSTANCE ne RF_CUOBJ
                                                    and  STREF-OBJECT_KEY is not initial.
***       Get Parent Position Number
          data(LF_UEPOS) = value #( ME->T_VBAP[ CUOBJ = LS_INSTANCE-PARENT ]-POSNR
                                    default value #( ME->T_VBAP[ CUOBJ = LR_CBASE->CONVERT_INSTANCE_TMP_TO_CBASE( IV_INSTANCE_TMP = LS_INSTANCE-PARENT ) ]-POSNR optional ) ).
          check LF_UEPOS is not initial.

***       Get own Position Number
          data(LF_POSNR) = value #( ME->T_VBAP[ UEPOS = LF_UEPOS
                                                STLTY = LS_INSTANCE-STREF-OBJECT_KEY(1)
                                                STLNR = LS_INSTANCE-STREF-OBJECT_KEY+1(8)
                                                STLKN = LS_INSTANCE-STREF-OBJECT_KEY+9(8) ]-POSNR optional ).
          check LF_POSNR is not initial.

***       Convert temporary CUOBJ and set to VBAP
          ME->T_VBAP[ POSNR = LF_POSNR ]-CUOBJ = LR_CBASE->CONVERT_INSTANCE_TMP_TO_CBASE( IV_INSTANCE_TMP = LS_INSTANCE-INSTANCE ).
        endloop.

      catch CX_CBASE_ERROR into data(LR_CX_CBASE_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CBASE_ERROR ).
    endtry.

***----------------------------------------------------------------------------
*** Define what Instances should be received (all as we provided Information for all)
    loop at ME->T_VBAP into LS_VBAP.
      call function 'CLUC_CONVERT_STRUCTURE'
        exporting
          I_WORKAREA = LS_VBAP
          I_TABNAME  = 'VBAP'
        importing
          E_OBJECT   = LS_OBJECT.

***   Ignore temporary CUOBJs (as they've not been processed yet)
      if LS_VBAP-CUOBJ(4) = '9999' or LS_VBAP-CUOBJ(4) = '8999'.
        call function 'CUCB_CHECK_EXISTENCE_OF_INSTA'
          exporting
            INSTANCE                     = LS_VBAP-CUOBJ
          exceptions
            IBASE_INSTANCE               = 0
            INOB_INSTANCE                = 0
            INVALID_INSTANCE             = 1
            INSTANCE_IS_A_CLASSIFICATION = 0.
        if SY-SUBRC ne 0.
          clear LS_VBAP-CUOBJ.
***       Buffer open Configuration as it can't be retrieved from SAP
          if LINE_EXISTS( ME->T_CFGS_REFINST[ POSEX = LS_VBAP-POSNR ] ).
            collect ME->T_CFGS_REFINST[ POSEX = LS_VBAP-POSNR ]-CONFIG_ID into LT_CONFIG_ID.
          endif.
        endif.
      endif.

      append value #( CONFIG_ID = value #( ME->T_CFGS_REFINST[ POSEX = LS_VBAP-POSNR ]-CONFIG_ID optional )
                      POSNR     = LS_VBAP-POSNR
                      UEPOS     = LS_VBAP-UEPOS
                      CUOBJ     = LS_VBAP-CUOBJ
                      OBJ_TYPE  = 'MARA'
                      OBJ_KEY   = LS_VBAP-MATNR
                      OBJ_TXT   = LS_VBAP-ARKTX
                      QUANTITY  = LS_VBAP-KWMENG
                      XSTPOS    = LS_VBAP-STPOS
                      OBJ_TNAME = 'VBAP'
                      OBJ_TABLE = LS_OBJECT-TABLE
                    ) to LT_APPL_INSTANCES.
    endloop.


*** Get Configuration
    call function 'CUXI_GET_MULTI_CONFIGURATION'
      exporting
        IT_APPL_INSTANCES            = LT_APPL_INSTANCES
        IV_IDOC_FORMAT               = ABAP_TRUE
      tables
        ET_REFERENCE                 = LT_REFERENCE
        E_TAB_CFG_HEADERS            = LT_CFG_HEADERS
        E_TAB_INSTANCES              = LT_INSTANCES
        E_TAB_PART_OF                = LT_PART_OF
        E_TAB_VALUES                 = LT_VALUES
        E_TAB_VAR_KEYS               = LT_VAR_KEYS
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        NO_ROOT_INSTANCE             = 3
        INTERNAL_ERROR               = 4
        INVALID_DATA                 = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Reapply not-processed Configurations (as they can't be requested from SAP yet)
    loop at LT_CONFIG_ID into LF_CONFIG_ID_OLD.
***   Get next Configuration ID
      LF_CONFIG_ID_NEW = ME->GET_NEXT_CONFIG_ID( IT_CFGS_REFINST = corresponding #( LT_REFERENCE ) ).

      loop at ME->T_CFGS_REFINST into LS_CFGS_REFINST       where CONFIG_ID eq LF_CONFIG_ID_OLD.
        LS_CFGS_REFINST-CONFIG_ID = LF_CONFIG_ID_NEW.
        append corresponding #( LS_CFGS_REFINST ) to LT_REFERENCE.
      endloop.
      loop at ME->T_CFGS_REF into data(LS_CFGS_REF)         where CONFIG_ID eq LF_CONFIG_ID_OLD.
        LS_CFGS_REF-CONFIG_ID = LF_CONFIG_ID_NEW.
        append corresponding #( LS_CFGS_REF ) to LT_CFG_HEADERS.
      endloop.
      loop at ME->T_CFGS_INST into LS_CFGS_INST             where CONFIG_ID eq LF_CONFIG_ID_OLD.
        LS_CFGS_INST-CONFIG_ID = LF_CONFIG_ID_NEW.
        append corresponding #( LS_CFGS_INST ) to LT_INSTANCES.
      endloop.
      loop at ME->T_CFGS_PART_OF into data(LS_CFGS_PART_OF) where CONFIG_ID eq LF_CONFIG_ID_OLD.
        LS_CFGS_PART_OF-CONFIG_ID = LF_CONFIG_ID_NEW.
        append corresponding #( LS_CFGS_PART_OF ) to LT_PART_OF.
      endloop.
      loop at ME->T_CFGS_VALUE into data(LS_CFGS_VALUE)     where CONFIG_ID eq LF_CONFIG_ID_OLD.
        LS_CFGS_VALUE-CONFIG_ID = LF_CONFIG_ID_NEW.
        append corresponding #( LS_CFGS_VALUE ) to LT_VALUES.
      endloop.
    endloop.

*** Update Configuration Data
    ME->T_CFGS_REFINST = corresponding #( LT_REFERENCE ).
    ME->T_CFGS_REF     = corresponding #( LT_CFG_HEADERS ).
    ME->T_CFGS_INST    = corresponding #( LT_INSTANCES ).
    ME->T_CFGS_PART_OF = corresponding #( LT_PART_OF ).
    ME->T_CFGS_VALUE   = corresponding #( LT_VALUES ).

  endmethod.
  method SAVE.

    data: LS_BAPI_SAVE_IN     type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_INX    type YS_BAPI_SAVE_INX,
          LS_BAPI_SAVE_RES    type YS_BAPI_SAVE_RES.
    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC.


***--------------------------------------------------------------------------------------
*** Map data to BAPI structures
    LS_BAPI_SAVE_IN = ME->GET_BAPI_DATA_IN( ).

*** Load current DB values for compare
    if ME->S_VBAK-VBELN is not initial.
      create object LR_BOB_SDOC.
      LR_BOB_SDOC->INIT_FROM_DB( IF_VBELN      = ME->S_VBAK-VBELN
                                 IS_ORDER_VIEW = ME->S_ORDER_VIEW ).
      LS_BAPI_SAVE_IN_OLD = LR_BOB_SDOC->GET_BAPI_DATA_IN( ).
    endif.

*** Build X-Structure
    LS_BAPI_SAVE_INX = ME->GET_BAPI_DATA_INX( IS_BAPI_SAVE_IN     = LS_BAPI_SAVE_IN
                                              IS_BAPI_SAVE_IN_OLD = LS_BAPI_SAVE_IN_OLD ).
    append lines of LS_BAPI_SAVE_INX-T_BAPIPAREX to LS_BAPI_SAVE_IN-T_BAPIPAREX.

*** Filter Data w/o changes
    ME->FILTER_BAPI_DATA_IN( changing CS_BAPI_SAVE_IN  = LS_BAPI_SAVE_IN
                                      CS_BAPI_SAVE_INX = LS_BAPI_SAVE_INX ).

***----------------------------------------------------------------------------
*** Initialize before BAPI Call
    call function 'CONFIGURATION_INITIALIZER'.
    call function 'SD_SALES_DOCUMENT_INIT'.
    call function 'CUXC_INIT'.

***----------------------------------------------------------------------------
*** Create or Update the Sales Document?
    if LS_BAPI_SAVE_INX-S_BAPISDHD1X-UPDATEFLAG eq 'I'.
***   Call BAPI to create
      call function 'SD_SALESDOCUMENT_CREATE'
        exporting
          SALES_HEADER_IN      = LS_BAPI_SAVE_IN-S_BAPISDHD1
          SALES_HEADER_INX     = LS_BAPI_SAVE_INX-S_BAPISDHD1X
          LOGIC_SWITCH         = ME->GET_BAPISDLS( )
          TESTRUN              = IF_TESTRUN
          BEHAVE_WHEN_ERROR    = 'P'
        importing
          SALES_HEADER_OUT     = LS_BAPI_SAVE_RES-S_BAPISDHD
          SALES_HEADER_STATUS  = LS_BAPI_SAVE_RES-HEADER_STATUS
        tables
          RETURN               = LS_BAPI_SAVE_RES-T_BAPIRET2
          SALES_ITEMS_IN       = LS_BAPI_SAVE_IN-T_BAPISDITM
          SALES_ITEMS_INX      = LS_BAPI_SAVE_INX-T_BAPISDITMX
          SALES_PARTNERS       = LS_BAPI_SAVE_IN-T_BAPIPARNR
          SALES_SCHEDULES_IN   = LS_BAPI_SAVE_IN-T_BAPISCHDL
          SALES_SCHEDULES_INX  = LS_BAPI_SAVE_INX-T_BAPISCHDLX
          SALES_CONDITIONS_IN  = LS_BAPI_SAVE_IN-T_BAPICOND
          SALES_CONDITIONS_INX = LS_BAPI_SAVE_INX-T_BAPICONDX
          SALES_TEXT           = LS_BAPI_SAVE_IN-T_BAPISDTEXT
          SALES_CFGS_REF       = LS_BAPI_SAVE_IN-T_BAPICUCFG
          SALES_CFGS_INST      = LS_BAPI_SAVE_IN-T_BAPICUINS
          SALES_CFGS_PART_OF   = LS_BAPI_SAVE_IN-T_BAPICUPRT
          SALES_CFGS_VALUE     = LS_BAPI_SAVE_IN-T_BAPICUVAL
          SALES_CFGS_BLOB      = LS_BAPI_SAVE_IN-T_BAPICUBLB
          SALES_CFGS_VK        = LS_BAPI_SAVE_IN-T_BAPICUVK
          SALES_CFGS_REFINST   = LS_BAPI_SAVE_IN-T_BAPICUREF
          EXTENSIONIN          = LS_BAPI_SAVE_IN-T_BAPIPAREX
          ITEMS_EX             = LS_BAPI_SAVE_RES-T_BAPISDIT
          SCHEDULE_EX          = LS_BAPI_SAVE_RES-T_SCHEDULE
          BUSINESS_EX          = LS_BAPI_SAVE_RES-T_BUSINESS
          INCOMPLETE_LOG       = LS_BAPI_SAVE_RES-T_INCOMPLETE_LOG
          EXTENSIONEX          = LS_BAPI_SAVE_RES-T_EXTENSION
          CONDITIONS_EX        = LS_BAPI_SAVE_RES-T_BAPICOND
          PARTNERS_EX          = LS_BAPI_SAVE_RES-T_PARTNERS
          TEXTHEADERS_EX       = LS_BAPI_SAVE_RES-T_TEXTHEADERS
          TEXTLINES_EX         = LS_BAPI_SAVE_RES-T_TEXTLINES.
    else.
***   Call BAPI to change Sales Docuement
      call function 'SD_SALESDOCUMENT_CHANGE'
        exporting
          SALESDOCUMENT       = ME->S_VBAK-VBELN
          ORDER_HEADER_IN     = LS_BAPI_SAVE_IN-S_BAPISDHD1
          ORDER_HEADER_INX    = LS_BAPI_SAVE_INX-S_BAPISDHD1X
          SIMULATION          = IF_TESTRUN
          CALL_FROM_BAPI      = 'X'
          BEHAVE_WHEN_ERROR   = 'P'
          LOGIC_SWITCH        = ME->GET_BAPISDLS( )
        importing
          SALES_HEADER_OUT    = LS_BAPI_SAVE_RES-S_BAPISDHD
          SALES_HEADER_STATUS = LS_BAPI_SAVE_RES-HEADER_STATUS
        tables
          RETURN              = LS_BAPI_SAVE_RES-T_BAPIRET2
          ITEM_IN             = LS_BAPI_SAVE_IN-T_BAPISDITM
          ITEM_INX            = LS_BAPI_SAVE_INX-T_BAPISDITMX
          SCHEDULE_IN         = LS_BAPI_SAVE_IN-T_BAPISCHDL
          SCHEDULE_INX        = LS_BAPI_SAVE_INX-T_BAPISCHDLX
*         PARTNERS            = LS_BAPI_SAVE_IN-T_BAPIPARNR
*         PARTNERCHANGES      = LS_BAPI_SAVE_INX-T_BAPIPARNRC
          CONDITIONS_IN       = LS_BAPI_SAVE_IN-T_BAPICOND
          CONDITIONS_INX      = LS_BAPI_SAVE_INX-T_BAPICONDX
          SALES_TEXT          = LS_BAPI_SAVE_IN-T_BAPISDTEXT
          SALES_CFGS_REF      = LS_BAPI_SAVE_IN-T_BAPICUCFG
          SALES_CFGS_INST     = LS_BAPI_SAVE_IN-T_BAPICUINS
          SALES_CFGS_PART_OF  = LS_BAPI_SAVE_IN-T_BAPICUPRT
          SALES_CFGS_VALUE    = LS_BAPI_SAVE_IN-T_BAPICUVAL
          SALES_CFGS_BLOB     = LS_BAPI_SAVE_IN-T_BAPICUBLB
          SALES_CFGS_VK       = LS_BAPI_SAVE_IN-T_BAPICUVK
          SALES_CFGS_REFINST  = LS_BAPI_SAVE_IN-T_BAPICUREF
          EXTENSIONIN         = LS_BAPI_SAVE_IN-T_BAPIPAREX
          ITEMS_EX            = LS_BAPI_SAVE_RES-T_BAPISDIT
          SCHEDULE_EX         = LS_BAPI_SAVE_RES-T_SCHEDULE
          BUSINESS_EX         = LS_BAPI_SAVE_RES-T_BUSINESS
          INCOMPLETE_LOG      = LS_BAPI_SAVE_RES-T_INCOMPLETE_LOG
          EXTENSIONEX         = LS_BAPI_SAVE_RES-T_EXTENSION
          CONDITIONS_EX       = LS_BAPI_SAVE_RES-T_BAPICOND
          PARTNERS_EX         = LS_BAPI_SAVE_RES-T_PARTNERS
          TEXTHEADERS_EX      = LS_BAPI_SAVE_RES-T_TEXTHEADERS
          TEXTLINES_EX        = LS_BAPI_SAVE_RES-T_TEXTLINES.
    endif.

*** Initialize Buffer of Integration Data Number
    call function 'ZVCXI_XCC_IDAT_INIT_NIDAT'.

*** Set Dialog Status
    call function 'DIALOG_SET_WITH_DIALOG'.

***----------------------------------------------------------------------------
*** Process BAPI Results
    RR_MSG = ME->PROCESS_BAPI_RES( IS_BAPI_SAVE_RES = LS_BAPI_SAVE_RES
                                   IF_TESTRUN       = IF_TESTRUN
                                   IF_COMMIT        = IF_COMMIT ).

  endmethod.
  method SERIALIZE.

*** Get Data References for XML Serialize/Deserialize
    ET_DATA = ME->GET_XML_DREF( ).

*** Create XML
    if RF_XML is requested.
      call transformation ID
           source (ET_DATA)
           result xml RF_XML.
    endif.

  endmethod.
  method SET_TEXT.

    data: LF_TEXT     type STRING,
          LF_FUNCTION type MSGFN.
    data: LT_TEXT type table of STRING.


***--------------------------------------------------------------------------------------
*** Get old Sales Document Text
    LF_TEXT = ME->GET_TEXT( IF_POSNR = IF_POSNR
                            IF_TDID  = IF_TDID
                            IF_LANGU = IF_LANGU ).

*** Determine Update Function
    LF_FUNCTION = cond #( when LF_TEXT eq IF_TEXT                                then SPACE            " No Update
                          when LF_TEXT is     initial and IF_TEXT is not initial then '009'            " Insert
                          when LF_TEXT is not initial and IF_TEXT is not initial then '004'            " Change
                          when LF_TEXT is not initial and IF_TEXT is     initial then '003' ).         " Delete
    check LF_FUNCTION is not initial.

***--------------------------------------------------------------------------------------
*** First remove old text entries from Sales Document Text Table
    delete ME->T_TEXT where ITM_NUMBER eq IF_POSNR
                       and  TEXT_ID    eq IF_TDID
                       and  LANGU      eq IF_LANGU.

*** Get Text splitted by new line
    if IF_TEXT is not initial.
      split IF_TEXT at CL_ABAP_CHAR_UTILITIES=>CR_LF into table LT_TEXT.
    else.
      LT_TEXT = value #( ( ) ).  " Initial line to process deletion
    endif.

*** Create Text Table
    loop at LT_TEXT into LF_TEXT.
      append value #( DOC_NUMBER = ME->S_VBAK-VBELN
                      ITM_NUMBER = IF_POSNR
                      TEXT_ID    = IF_TDID
                      LANGU      = IF_LANGU
*                       LANGU_ISO  = LF_LAISO
                      FORMAT_COL = switch #( SY-TABIX when 1 then '*' else '/' )
                      TEXT_LINE  = LF_TEXT
                      FUNCTION   = LF_FUNCTION ) to ME->T_TEXT.
    endloop.

  endmethod.
