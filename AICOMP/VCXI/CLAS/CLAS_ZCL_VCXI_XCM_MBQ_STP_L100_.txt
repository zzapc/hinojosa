
class ZCL_VCXI_XCM_MBQ_STP_L100 definition
  public
  inheriting from ZCL_VCXI_XCM_STP_L000
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .
protected section.

  data R_DCO_INPUT type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC .
  data R_DCO_OUTPUT type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC .

  methods GET_CPROC
    importing
      !IR_DCO_SDOC type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC
    returning
      value(RR_CPROC) type ref to /VCXI/CL_CKMC_CPROC
    raising
      /VCXI/CX_CKX .

  methods ANALYZE_RESULT_DCO
    redefinition .
  methods EXECUTE_SUBPROCESS
    redefinition .
  methods GET_SUBPROCESS
    redefinition .
  methods GET_SUBPROCESS_DCO
    redefinition .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_L100 definition
class ZCL_VCXI_XCM_MBQ_STP_L100 implementation.
  method ANALYZE_RESULT_DCO.

    data: LS_POSUPD type ZVCXI_XCI_S_CFGS_UPDKZ,
          LS_VBAP   type VBAP,
          LS_VBKD   type VBKD,
          LS_VBEP   type VBEP,
          LS_KOMV   type KOMV.
    data: LR_DCO_SDOC type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC.


***--------------------------------------------------------------------------------------
*** Map Resulting DCO of SubProcess
    IR_RPROC->MAP_DCO( changing CR_DCO = LR_DCO_SDOC ).
    check LR_DCO_SDOC is bound.

***--------------------------------------------------------------------------------------
*** Update Main DCO with marked Positions from Sub-DCO
    loop at LR_DCO_SDOC->T_POSUPD into LS_POSUPD.
***   Sales Document Item Data
      delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBAP where POSNR = LS_POSUPD-POSNR.
      append LR_DCO_SDOC->R_BOB_SDOC->T_VBAP[ POSNR = LS_POSUPD-POSNR ] to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBAP.

***   Sales Document Business Data
      delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBKD where POSNR = LS_POSUPD-POSNR.
      if LINE_EXISTS( LR_DCO_SDOC->R_BOB_SDOC->T_VBKD[ POSNR = LS_POSUPD-POSNR ] ).
        append LR_DCO_SDOC->R_BOB_SDOC->T_VBKD[ POSNR = LS_POSUPD-POSNR ] to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBKD.
      endif.

***   Sales Document Schedule Line Data
      delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBEP where POSNR = LS_POSUPD-POSNR.
      loop at LR_DCO_SDOC->R_BOB_SDOC->T_VBEP into LS_VBEP where POSNR eq LS_POSUPD-POSNR.
        append LS_VBEP to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBEP.
      endloop.

***   Pricing Communications-Condition Record
      delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_KOMV where KPOSN = LS_POSUPD-POSNR.
      loop at LR_DCO_SDOC->R_BOB_SDOC->T_KOMV into LS_KOMV where KPOSN eq LS_POSUPD-POSNR.
        append LS_KOMV to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_KOMV.
      endloop.


***--------------------------------------------------------------------------------------
***   Update Main DCO with marked Configurations from Sub-DCO
      loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_UPDKZ into data(LS_CFGS_UPDKZ) where POSNR = LS_POSUPD-POSNR.
***     Configuration Update Flag
        delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_UPDKZ where POSNR = LS_POSUPD-POSNR.
        append LS_CFGS_UPDKZ to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_UPDKZ.

        data(LF_CONFIG_ID) = value #( LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_REF[ POSEX = LS_POSUPD-POSNR ]-CONFIG_ID optional ).
        if LF_CONFIG_ID is not initial.
          delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_REF where CONFIG_ID eq LF_CONFIG_ID.
          loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_REF into data(LS_CFGS_REF) where CONFIG_ID eq LF_CONFIG_ID.
            append LS_CFGS_REF to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_REF.
          endloop.

          delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_INST where CONFIG_ID eq LF_CONFIG_ID.
          loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_INST into data(LS_CFGS_INST) where CONFIG_ID eq LF_CONFIG_ID.
            append LS_CFGS_INST to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_INST.
          endloop.

          delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_PART_OF where CONFIG_ID eq LF_CONFIG_ID.
          loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_PART_OF into data(LS_CFGS_PART_OF) where CONFIG_ID eq LF_CONFIG_ID.
            append LS_CFGS_PART_OF to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_PART_OF.
          endloop.

          delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_VALUE where CONFIG_ID eq LF_CONFIG_ID.
          loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_VALUE into data(LS_CFGS_VALUE) where CONFIG_ID eq LF_CONFIG_ID.
            append LS_CFGS_VALUE to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_VALUE.
          endloop.

          delete ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_REFINST where CONFIG_ID eq LF_CONFIG_ID.
          loop at LR_DCO_SDOC->R_BOB_SDOC->T_CFGS_REFINST into data(LS_CFGS_REFINST) where CONFIG_ID eq LF_CONFIG_ID.
            append LS_CFGS_REFINST to ME->R_DCO_OUTPUT->R_BOB_SDOC->T_CFGS_REFINST.
          endloop.
        endif.

      endloop.
    endloop.

  endmethod.
  method CONSTRUCTOR.

*** Super Constructor
    SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO to Required Input/Output
    ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
    ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

  endmethod.
  method EXECUTE_SUBPROCESS.

    IR_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_SUBMIT ).

  endmethod.
  method GET_CPROC.

    data: LF_MATNR type MATNR,
          LF_ICPRO type /VCXI/CKMC_ICPRO.


***------------------------------------------------------------------------------------------------
*** Get Material
    LF_MATNR = value #( IR_DCO_SDOC->R_BOB_SDOC->T_VBAP[ POSNR = IR_DCO_SDOC->F_POSNR ]-MATNR optional ).

***------------------------------------------------------------------------------------------------
*** Get customized Line Item Process
    select single ICPRO
           into LF_ICPRO
           from ZVCXI_XCM_TC020
          where MATNR eq LF_MATNR.
    if SY-SUBRC ne 0.
      clear LF_ICPRO.
    endif.

    if LF_ICPRO is initial.
***   No SmartMD Customizing Process could not be found.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                            IF_MSGTY = 'E'
                                            IF_MSGNO = '107' ).
    endif.

***------------------------------------------------------------------------------------------------
*** Get Customizing Process Instance based on ID
    if LF_ICPRO is not initial.
      RR_CPROC ?= /VCXI/CL_CKR_REGELMNT=>GET_INSTANCE_BY_ID( IF_IREGE = LF_ICPRO
                                                             IF_ELMTY = /VCXI/CL_CKMC_CPROC=>C_ELMTY_CPROC ).
    endif.

    if RR_CPROC is not bound.
***   SmartMD Customizing Process &1 could not be found.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                            IF_MSGTY = 'E'
                                            IF_MSGNO = '108'
                                            IF_MSGV1 = LF_ICPRO ).
    endif.

  endmethod.
  method GET_SUBPROCESS.

    data: LT_DCO   type        /VCXI/CKMR_TT_CLDCO.
    data: LR_DCO   type ref to /VCXI/CL_CKMR_CLDCO,
          LR_CPROC type ref to /VCXI/CL_CKMC_CPROC,
          LR_RPROC type ref to /VCXI/CL_CKMR_RPROC.

***------------------------------------------------------------------------------------------------
*** Create new Process and DCO if needed
    if ME->R_RPSEG->T_RPROC is initial.

***   Get DCOs for new Processes
      move ME->GET_SUBPROCESS_DCO( ) to LT_DCO.

      loop at LT_DCO into LR_DCO.
***     Get Customizing Process for Line Item
        LR_CPROC = ME->GET_CPROC( IR_DCO_SDOC = cast #( LR_DCO ) ).
        check LR_CPROC is bound.

***     Create Sub-Process
        LR_RPROC = /VCXI/CL_CKMR_RPROC=>CREATE( IR_DCO   = LR_DCO
                                                IR_CPROC = LR_CPROC ).

***     Add to Segment as Sub-Process
        ME->R_RPSEG->ADD_RPROC( IR_RPROC = LR_RPROC ).

      endloop.
    endif.

***------------------------------------------------------------------------------------------------
*** Return registered Processes
    move ME->R_RPSEG->T_RPROC to RT_RPROC.

  endmethod.
  method GET_SUBPROCESS_DCO.

    data: LF_POSNR type POSNR.
    data: LS_VBAP type VBAP.
    data: LR_DCO_SDOC type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC.


    if ME->R_DCO_INPUT->F_POSNR is initial.
***   Create subprocess for each selected position
      loop at ME->R_DCO_INPUT->S_START-T_POSNR into LF_POSNR.
***     Copy DCO by Serialize-Deserialize
        LR_DCO_SDOC ?= /VCXI/CL_CKMR_CLDCO=>DESERIALIZE( IF_XMLDC = ME->R_DCO_INPUT->SERIALIZE( ) ).

***     Set current position to work on
        LR_DCO_SDOC->SET_POSNR( IF_POSNR = LF_POSNR ).

***     Add DCO to return list
        append LR_DCO_SDOC to RT_DCO.
      endloop.

    else.
***   Create subprocess for each sub position
      loop at ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP into LS_VBAP
                                       where UEPOS eq ME->R_DCO_INPUT->F_POSNR.
***     Copy DCO by Serialize-Deserialize
        LR_DCO_SDOC ?= /VCXI/CL_CKMR_CLDCO=>DESERIALIZE( IF_XMLDC = ME->R_DCO_INPUT->SERIALIZE( ) ).

***     Set current position to work on
        LR_DCO_SDOC->SET_POSNR( IF_POSNR = LS_VBAP-POSNR ).

***     Add DCO to return list
        append LR_DCO_SDOC to RT_DCO.
      endloop.
    endif.

  endmethod.
