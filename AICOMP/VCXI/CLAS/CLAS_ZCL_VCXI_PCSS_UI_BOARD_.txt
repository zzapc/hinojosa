
class ZCL_VCXI_PCSS_UI_BOARD definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_BOARD_VIS type ZVCXI_PCSS_S_BOARD_VIS .
  data F_CURSOR type SCRFNAME .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_BOARD_VIS
    importing
      !IS_BOARD_VIS type ZVCXI_PCSS_S_BOARD_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_GRID_MS_BOARD type ref to ZCL_VCXI_PCSS_GRID_MS_BOARD .
  data R_PR_BOARD type ref to ZCL_VCXI_PCSS_PR_BOARD .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_UI_BOARD definition
class ZCL_VCXI_PCSS_UI_BOARD implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PCSS_UI_BOARD_BIND'
    exporting
      IR_UI_BOARD = ME
    importing
      ES_DYNP     = ME->S_DYNP.

*** Create Grid for Material Specification Board
  create object ME->R_GRID_MS_BOARD
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_MS_BOARD'.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_BOARD.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_MS_BOARD is bound.
    ME->R_GRID_MS_BOARD->DO_FREE( ).
    clear ME->R_GRID_MS_BOARD.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:          LF_LOCKED      type        /VCXI/CKX_LOCKED,
                 LF_INUSE       type        /VCXI/VKSR_INUSE,
                 LF_STRUC       type        FIELDNAME,
                 LF_FIELD       type        FIELDNAME,
                 LF_FIELD1      type        FIELDNAME,
                 LF_FIELD2      type        FIELDNAME,
                 LF_FIELD3      type        FIELDNAME,
                 LF_FIELD_ACT   type        FIELDNAME.
  data:          LR_CX_CKX      type ref to /VCXI/CX_CKX.
  field-symbols: <F_FIELD>      type        any.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

***     Modify Screen
        loop at screen.
***       No Classification Value -> No Output if not active
          if SCREEN-GROUP1 eq 'CLA'.
            clear: LF_STRUC, LF_FIELD, LF_FIELD1, LF_FIELD2, LF_FIELD3.
***         Determine Activation Field
            split SCREEN-NAME at '-' into LF_STRUC LF_FIELD.
            split LF_FIELD at '_' into LF_FIELD1 LF_FIELD2 LF_FIELD3.
            concatenate LF_FIELD1 'ACT' LF_FIELD3 into LF_FIELD_ACT separated by '_'.
            assign component LF_FIELD_ACT of structure ME->S_BOARD_VIS to <F_FIELD>.

***         Deactivate Field -> Not active or not found
            if  SY-SUBRC  ne 0       or
                <F_FIELD> is initial.
              SCREEN-INVISIBLE = 1.
              SCREEN-REQUIRED = 0.
              SCREEN-INPUT = 0.
              SCREEN-ACTIVE = 0.
            endif.
          endif.

***       Self Deckling Flag is not editable if we have it mandatory for the BoardID
          if   SCREEN-GROUP1                      eq 'FSD'         and
             ( ME->R_PR_BOARD->GET_CUST_NSTBG( )  eq ABAP_TRUE     or
               ME->R_PR_BOARD->IS_PREPR_ACTIVE( ) eq ABAP_TRUE ).
            SCREEN-INPUT = 0.
          endif.

          modify screen.
        endloop.

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

  if ME->R_GRID_MS_BOARD is bound.
    if ME->R_GRID_MS_BOARD->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_MS_BOARD->F_REFRESH_REQ.
    endif.
    ME->R_GRID_MS_BOARD->REFRESH_GRID( ).
  endif.

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_BOARD_VIS.

*** Set Board ID
  if ME->S_BOARD_VIS-BOARD ne IS_BOARD_VIS-BOARD.
    ME->R_PR_BOARD->SET_BOARD( IF_BOARD = IS_BOARD_VIS-BOARD
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Board Restricted
  if ME->S_BOARD_VIS-BOARS ne IS_BOARD_VIS-BOARS.
    ME->R_PR_BOARD->SET_BOARS( IF_BOARS = IS_BOARD_VIS-BOARS
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Self Deckling Flag
  if ME->S_BOARD_VIS-SELFD ne IS_BOARD_VIS-SELFD.
    ME->R_PR_BOARD->SET_SELFD( IF_SELFD = IS_BOARD_VIS-SELFD
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Work Center
  if ME->S_BOARD_VIS-ARBPL ne IS_BOARD_VIS-ARBPL.
    ME->R_PR_BOARD->SET_ARBPL( IF_ARBPL = IS_BOARD_VIS-ARBPL
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_MS_BOARD is bound.
    ME->R_GRID_MS_BOARD->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_BOARD.

endmethod.
method INIT_VIS.

  data:          LF_FIELD         type FIELDNAME,
                 LF_NUM           type NUMC1,
                 LF_STRING        type STRING,
                 LF_VALID_TBOAR   type CHAR100,
                 LF_MBOAR         type ZVCXI_PCSS_MBOAR,
                 LF_WERKS         type WERKS_D,
                 LF_RELEASED      type ABAP_BOOL.
  data:          LS_CALIP         type ZVCXI_P0SS_S_CALIP,
                 LS_CLASS_VALUE   type ZVCXI_PCSS_S_CLASS_VALUE,
                 LS_CLASS_VALUE_C type ZVCXI_PCSS_S_CLASS_VALUE_C,
                 LS_BOARD_DESCR   type ZVCXI_PCSS_S_BOARD_DESCR.
  data:          LT_CLASS_VALUE   type ZVCXI_PCSS_TT_CLASS_VALUE,
                 LT_CLASS_VALUE_C type ZVCXI_PCSS_TT_CLASS_VALUE_C,
                 LT_BOARD_DESCR   type ZVCXI_PCSS_TT_BOARD_DESCR.
  field-symbols: <F_FIELD>        type any.

  free: ME->S_BOARD_VIS.

*** Get Board ID
  move ME->R_PR_BOARD->GET_BOARD( )       to ME->S_BOARD_VIS-BOARD.
  move ME->R_PR_BOARD->GET_BOARD_DESCR( ) to LT_BOARD_DESCR.
  loop at LT_BOARD_DESCR into LS_BOARD_DESCR.
    check LS_BOARD_DESCR-DESCR is not initial.
    if SY-TABIX eq 1.
      move LS_BOARD_DESCR-DESCR to LF_STRING.
    else.
      concatenate LF_STRING LS_BOARD_DESCR-DESCR
             into LF_STRING separated by '/'.
    endif.
  endloop.

  move LF_STRING to ME->S_BOARD_VIS-BOARD_DESCR.

*** Get Caliper
  move ME->R_PR_BOARD->GET_CALIP( )       to LS_CALIP.
  move-corresponding LS_CALIP             to ME->S_BOARD_VIS.

*** Get Flute
  move ME->R_PR_BOARD->GET_FLUTE( )       to ME->S_BOARD_VIS-FLUTE.
  move ME->R_PR_BOARD->GET_FLUTE_DESCR( ) to ME->S_BOARD_VIS-FLUTE_DESCR.

*** Get Starch Code
  move ME->R_PR_BOARD->GET_STARC( )       to ME->S_BOARD_VIS-STARC.
  move ME->R_PR_BOARD->GET_STARC_DESCR( ) to ME->S_BOARD_VIS-STARC_DESCR.

*** Get Board Restricted
  move ME->R_PR_BOARD->GET_BOARS( )       to ME->S_BOARD_VIS-BOARS.
  move ME->R_PR_BOARD->GET_BOARS_DESCR( ) to ME->S_BOARD_VIS-BOARS_DESCR.

*** Get Self Deckeling Flag
  ME->R_PR_BOARD->GET_SELFD( importing EF_SELFD = ME->S_BOARD_VIS-SELFD ).

*** Get Work Center
  move ME->R_PR_BOARD->GET_ARBPL( )       to ME->S_BOARD_VIS-ARBPL.

*** Get Class Value - Numeric
  LT_CLASS_VALUE = ME->R_PR_BOARD->GET_CLASS_VALUE( ).

  loop at LT_CLASS_VALUE into LS_CLASS_VALUE.

    add 1 to LF_NUM.

    concatenate 'CLAVA_ACT' LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = ABAP_TRUE.
    endif.

    concatenate 'CLAVA_DESCR' LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLASS_VALUE-CLASS_DESCR.
    endif.

    concatenate 'CLAVA_VAL'   LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLASS_VALUE-CLAVA.
    endif.

    concatenate 'CLAVA_UOM'   LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLASS_VALUE-CLAVA_UOM.
    endif.

  endloop.

  clear: LF_NUM.
*** Get Class Value - Character
  LT_CLASS_VALUE_C = ME->R_PR_BOARD->GET_CLASS_VALUE_C( ).

  loop at LT_CLASS_VALUE_C into LS_CLASS_VALUE_C.

    add 1 to LF_NUM.

    concatenate 'CLAVC_ACT' LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = ABAP_TRUE.
    endif.

    concatenate 'CLAVC_DESCR' LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLASS_VALUE_C-CLASS_DESCR.
    endif.

    concatenate 'CLAVC_VAL'   LF_NUM into LF_FIELD separated by '_'.
    assign component LF_FIELD of structure ME->S_BOARD_VIS to <F_FIELD>.
    if SY-SUBRC = 0.
      <F_FIELD> = LS_CLASS_VALUE_C-CLAVC.
    endif.

  endloop.

*** Set Parameter of Valid Board Types and Mode
  LF_VALID_TBOAR = ME->R_PR_BOARD->GET_VALID_TBOAR( ).
  set parameter id 'ZVCXI_PCS_TBOAR' field LF_VALID_TBOAR.

  LF_MBOAR = ME->R_PR_BOARD->GET_MBOAR( ).
  set parameter id 'ZVCXI_PCS_MBOAR' field LF_MBOAR.

*** Set Plant as Parameter
  LF_WERKS = ME->R_PR_BOARD->GET_WERKS( ).
  set parameter id 'WRK' field LF_WERKS.

*** Set only Released BoardIDs are allowed
  move ABAP_TRUE to LF_RELEASED.
  set parameter id 'ZVCXI_PCS_RELEASED' field LF_RELEASED.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
