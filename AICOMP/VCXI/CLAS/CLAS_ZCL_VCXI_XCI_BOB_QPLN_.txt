
class ZCL_VCXI_XCI_BOB_QPLN definition
  public
  create public .

public section.

  data F_WERKS type WERKS_D read-only .
  data F_MATNR type MATNR read-only .
  constants C_PLNTY_QPLN type PLNTY value 'Q' ##NO_TEXT.

  class-methods CHECK_EXISTS
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !II_PLNAL type ZVCXI_XCI_TT_RANGE_PLNAL optional
    exporting
      !ET_MAPLB type MAPLB_TT
    returning
      value(RF_EXISTS) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods ASSIGN_MAT
    importing
      !IF_MATNR type MATNR
      !II_PLNAL type ZVCXI_XCI_TT_RANGE_PLNAL optional
    exporting
      !EF_ALREADY_ASSIGNED type ABAP_BOOL
      !ES_BAPIRET2 type BAPIRET2
    raising
      /VCXI/CX_CKX .
protected section.

  methods DEQUEUE
    importing
      !IF_PLNTY type PLNTY
      !IF_PLNNR type PLNNR
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    importing
      !IF_PLNTY type PLNTY
      !IF_PLNNR type PLNNR
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_QPLN definition
class ZCL_VCXI_XCI_BOB_QPLN implementation.
  method ASSIGN_MAT.

    data: LT_MAPLB type table of MAPLB,
          LT_PMAPL type table of PMAPL.
    field-symbols: <S_MAPLB> type MAPLB.


    clear: EF_ALREADY_ASSIGNED,
           ES_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Check if material is already assigned to Inspection Plan
    if ZCL_VCXI_XCI_BOB_QPLN=>CHECK_EXISTS( IF_MATNR = IF_MATNR
                                            IF_WERKS = ME->F_WERKS
                                            II_PLNAL = II_PLNAL ).
***   Material & plant & is already assigned to inspection plan.
      move ABAP_TRUE to EF_ALREADY_ASSIGNED.
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'I'
          CL     = 'ZVCXI_XCI'
          NUMBER = '601'
          PAR1   = conv SYMSGV( IF_MATNR )
          PAR2   = conv SYMSGV( ME->F_WERKS )
        importing
          RETURN = ES_BAPIRET2.
      exit.
    endif.


*** Get inspection plan data from material
    if not ZCL_VCXI_XCI_BOB_QPLN=>CHECK_EXISTS( exporting IF_MATNR = ME->F_MATNR
                                                          IF_WERKS = ME->F_WERKS
                                                          II_PLNAL = II_PLNAL
                                                importing ET_MAPLB = LT_MAPLB ).

***   Material &1 plant &2 has no inspection plant.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '602'
                                            IF_MSGV1 = ME->F_MATNR
                                            IF_MSGV2 = ME->F_WERKS ).
    endif.

***--------------------------------------------------------------------------------------
*** Update all Inspection Plans
    loop at LT_MAPLB assigning <S_MAPLB>.
***   Lock
      ME->ENQUEUE( IF_PLNTY = <S_MAPLB>-PLNTY
                   IF_PLNNR = <S_MAPLB>-PLNNR ).

***   Change Entry to new Material Number
      move IF_MATNR   to <S_MAPLB>-MATNR.
      move SY-DATUM   to <S_MAPLB>-ANDAT.
      move SY-UNAME   to <S_MAPLB>-ANNAM.
      move SY-DATUM   to <S_MAPLB>-AEDAT.
      move SY-UNAME   to <S_MAPLB>-AENAM.
      move 'I'        to <S_MAPLB>-VBKZ.
      move SY-DATUM   to <S_MAPLB>-DATUB.
    endloop.

*** Save all new Entry
    call function 'CZ_DU_MTK_SAVE'
      tables
        C_MATPL  = LT_MAPLB
        C_PMATPL = LT_PMAPL.

*** Unlock all Inspection Plans
    loop at LT_MAPLB assigning <S_MAPLB>.
      ME->DEQUEUE( IF_PLNTY = <S_MAPLB>-PLNTY
                   IF_PLNNR = <S_MAPLB>-PLNNR ).
    endloop.

***--------------------------------------------------------------------------------------
*** Check that Inspection Plan was assigned
    if not ZCL_VCXI_XCI_BOB_QPLN=>CHECK_EXISTS( IF_MATNR = IF_MATNR
                                                IF_WERKS = ME->F_WERKS
                                                II_PLNAL = II_PLNAL ).
***   Material &1 plant &2 could not be assigned to inspection plan.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '603'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = ME->F_WERKS ).
    else.
***   Inspection plan assignment done for material &1 in plant &2.
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'S'
          CL     = 'ZVCXI_XCI'
          NUMBER = '604'
          PAR1   = conv SYMSGV( IF_MATNR )
          PAR2   = conv SYMSGV( ME->F_WERKS )
        importing
          RETURN = ES_BAPIRET2.
    endif.

  endmethod.
  method CHECK_EXISTS.

*** Check if material is already assigned to Inspection Plan
    call function 'CP_DB_MAPL_READ'
      exporting
        DATUB      = SY-DATUM
        MATNR      = IF_MATNR
        WERKS      = IF_WERKS
        PLNTY      = C_PLNTY_QPLN
      tables
        MATPL      = ET_MAPLB
      exceptions
        NO_RECORDS = 1
        others     = 2.

*** Filter by Group Counter
    delete ET_MAPLB where PLNAL not in II_PLNAL.

    if ET_MAPLB is not initial.
***   Material & plant & is already assigned to inspection plan.
      RF_EXISTS = ABAP_TRUE.
    endif.

  endmethod.
  method CONSTRUCTOR.

    ME->F_MATNR = IF_MATNR.
    ME->F_WERKS = IF_WERKS.

  endmethod.
method DEQUEUE.

  call function 'DEQUEUE_EPPLKO'
    exporting
      PLNTY = IF_PLNTY
      PLNNR = IF_PLNNR.

endmethod.
  method ENQUEUE.

    call function 'ENQUEUE_EPPLKO'
      exporting
        PLNTY          = IF_PLNTY
        PLNNR          = IF_PLNNR
        _WAIT          = ABAP_TRUE
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( IF_TEMP = ABAP_TRUE ).
    endif.

  endmethod.
