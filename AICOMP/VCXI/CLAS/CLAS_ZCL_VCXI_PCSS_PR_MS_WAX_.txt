
class ZCL_VCXI_PCSS_PR_MS_WAX definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PC_MS_WAX type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_MS_WAX'. "#EC NOTEXT
  constants C_PARID_WAXCO type /VCXI/VKS_PARID value 'ZVCXI_PC_WAXCO'. "#EC NOTEXT
  constants C_PARID_WAXFA type /VCXI/VKS_PARID value 'ZVCXI_PC_WAXFA'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    returning
      value(RS_AVGCO) type ZVCXI_XCS_S_AVGCO
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    returning
      value(RS_AVGCP) type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  methods GET_WAXCO
    returning
      value(RF_WAXCO) type ZVCXI_PCSS_WAXCO
    raising
      /VCXI/CX_CKX .
  methods GET_WAXCO_DESCR
    returning
      value(RF_WAXCO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_WAXFA
    returning
      value(RF_WAXFA) type ZVCXI_PCS_WAXFA
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WAXCO
    importing
      !IF_WAXCO type ZVCXI_PCSS_WAXCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WAXFA
    importing
      !IF_WAXFA type ZVCXI_PCS_WAXFA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_AVGCO_CHANGED type /VCXI/VKSC_IEVNT value 'AVGCO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WAXCO_CHANGED type /VCXI/VKSC_IEVNT value 'WAXCO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WAXFA_CHANGED type /VCXI/VKSC_IEVNT value 'WAXFA_CHANGED'. "#EC NOTEXT
  data R_CUST_WAX type ref to ZCL_VCXI_PCSS_CUST_WAX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_MS_WAX definition
class ZCL_VCXI_PCSS_PR_MS_WAX implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_W.
  ME->F_PARID_AVGCO = C_PARID_AVGCO_W.
  ME->F_PARID_AVGCP = C_PARID_AVGCP_A.

endmethod.
method GET_AVGCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
  move LS_PARAM-ATFLV to RS_AVGCO-AVGCO.
  move LS_PARAM-UNIT  to RS_AVGCO-AVGCO_UOM.

endmethod.
method GET_AVGCP.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
  move LS_PARAM-ATFLV to RS_AVGCP-AVGCP.
  move LS_PARAM-UNIT  to RS_AVGCP-AVGCP_UOM.

endmethod.
method GET_STATUS.

  data:   LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Wax Code is maintained.
  if ME->GET_WAXCO( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Avg. Cons. is maintained.
  LS_AVGCO = ME->GET_AVGCO( ).
  if LS_AVGCO-AVGCO is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Avg. Cons. Per is maintained.
  LS_AVGCP = ME->GET_AVGCP( ).
  if LS_AVGCP-AVGCP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Wax Factor is maintained.
  if ME->GET_WAXFA( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:   LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Wax Code
  if ME->GET_WAXCO( ) is not initial.
*** Wax Code is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '303' ).
  else.
*** Wax Code is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '304' ).
  endif.

*** Check Avg Cons
  LS_AVGCO = ME->GET_AVGCO( ).
  if LS_AVGCO is not initial.
*** Avg Cons is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '305' ).
  else.
*** Avg Cons is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '306' ).
  endif.

*** Check Avg Cons Per
  LS_AVGCP = ME->GET_AVGCP( ).
  if LS_AVGCP is not initial.
*** Avg Cons Per is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '307' ).
  else.
*** Avg Cons Per is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '308' ).

  endif.

*** Check Wax Factor
  if ME->GET_WAXFA( ) is not initial.
*** Wax Factor is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '309' ).
  else.
*** Wax Factor is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '310' ).
  endif.

endmethod.
method GET_WAXCO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXCO ).
  move LS_PARAM-ATWRT to RF_WAXCO.

endmethod.
method GET_WAXCO_DESCR.

  data:  LF_WAXCO type ZVCXI_PCSS_WAXCO.

  LF_WAXCO = ME->GET_WAXCO( ).
  RF_WAXCO_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_WAXCO_DESCR( IF_WAXCO = LF_WAXCO ).

endmethod.
method GET_WAXFA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXFA ).
  move LS_PARAM-ATFLV to RF_WAXFA.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR type MATNR,
         LF_WERKS type WERKS_D.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.

*** Only load Customizing with insert Materialnumber
  check LF_MATNR is not initial and
        LF_WERKS is not initial.

  if ME->R_CUST_MATNR          is bound    and
     ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
     ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear ME->R_CUST_MATNR.

*** Load the Customizing
  ME->R_CUST_WAX = ZCL_VCXI_PCSS_CUST_WAX=>GET_INSTANCE_WAX( IF_MATNR = LF_MATNR
                                                             IF_WERKS = LF_WERKS
                                                             IF_DATE  = SY-DATUM ).

  ME->SET_AVGCO( exporting IS_AVGCO = ME->R_CUST_WAX->S_AVGCO ).
  ME->SET_AVGCP( exporting IS_AVGCP = ME->R_CUST_WAX->S_AVGCP ).

  move ME->R_CUST_WAX to ME->R_CUST_MATNR.

endmethod.
method SET_AVGCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

  move IS_AVGCO-AVGCO      to LS_PARAM-ATFLV.
  move IS_AVGCO-AVGCO_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_AVGCP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

  move IS_AVGCP-AVGCP      to LS_PARAM-ATFLV.
  move IS_AVGCP-AVGCP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AVGCO_CHANGED ).
  endif.

endmethod.
method SET_WAXCO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXCO ).

  move IF_WAXCO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WAXCO_CHANGED ).
  endif.

endmethod.
method SET_WAXFA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WAXFA ).

  move IF_WAXFA to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WAXFA_CHANGED ).
  endif.

endmethod.
