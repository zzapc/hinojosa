
class ZCL_VCXI_XCDCU_PART_FUNCT definition
  public
  final
  create public .

public section.
  type-pools ABAP .
  type-pools ICON .

  data F_FREED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .

  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_STRIPDESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_FUNCT type ref to ZIF_VCXI_XCDC_REGDVC_FUNCT
    raising
      /VCXI/CX_CKX .
protected section.

  data F_REFRESH_REQUESTED type ABAP_BOOL .
  data R_FUNCT type ref to ZIF_VCXI_XCDC_REGDVC_FUNCT .
  data T_FUNCT_GRID type ZVCXI_XCDCU_TT_FUNCT_GRID .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data T_FIELDCAT type LVC_T_FCAT .

  methods HANDLE_FUNCT_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_FUNCT .
  methods INIT_T_FUNCT_GRID .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_FUNCT_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FUNCT_SWITCH_ACTIVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CONTEXT_MENU_REQUEST
    for event CONTEXT_MENU_REQUEST of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods HANDLE_FUNCT_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FUNCT_ADD
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_FUNCT
    returning
      value(RF_IFUNC) type ZVCXI_XCD_IFUNC
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCDCU_PART_FUNCT definition
class ZCL_VCXI_XCDCU_PART_FUNCT implementation.
method BUILD_FIELDCAT .

  field-symbols:  <S_FIELDCAT> type LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_FUNCT_GRID'
    changing
      CT_FIELDCAT            = ME->T_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at ME->T_FIELDCAT assigning <S_FIELDCAT>.
    case <S_FIELDCAT>-FIELDNAME.
      when 'FUNAC'.
        move 'X' to <S_FIELDCAT>-NO_OUT.
      when 'ACTIVE_ICON'.
        move 'C'           to <S_FIELDCAT>-JUST.
        move 'Active'(T01) to <S_FIELDCAT>-COLTEXT.
        move 'Active'(T01) to <S_FIELDCAT>-SCRTEXT_L.
        move 'Active'(T01) to <S_FIELDCAT>-SCRTEXT_M.
        move 'Active'(T01) to <S_FIELDCAT>-SCRTEXT_S.
    endcase.
  endloop.

endmethod.
method CONSTRUCTOR .

  move IR_FUNCT        to ME->R_FUNCT.
  move ABAP_TRUE       to ME->F_REFRESH_REQUESTED.

  set handler ME->HANDLE_FUNCT_CHANGED for ME->R_FUNCT.

  call function 'ZVCXI_XCDCU_UI_SET_PART_FUNCT'
    exporting
      IR_PART_FUNCT = ME.

endmethod.
method DO_FREE .

  move ABAP_TRUE to ME->F_FREED.

  if ME->R_GRID is bound.
    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

  set handler ME->HANDLE_FUNCT_CHANGED for ME->R_FUNCT activation ABAP_FALSE.

endmethod.
method DO_PBO .

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      ME->INIT_CONTAINER( ).
      ME->INIT_GRID( ).
      ME->REFRESH_GRID_CONTENT( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method DO_USER_COMMAND.
endmethod.
method GET_SELECTED_FUNCT .

  data:  LS_FUNCT_GRID type         ZVCXI_XCDCU_S_FUNCT_GRID,
         LS_INDEX      type         LVC_S_ROW.
  data:  LT_INDEX      type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_FUNCT_GRID into LS_FUNCT_GRID index LS_INDEX-INDEX.
    check SY-SUBRC eq 0.
    move LS_FUNCT_GRID-IFUNC to RF_IFUNC.
  endif.

endmethod.
method GET_STRIPDESCR .

  data:  LF_COUNT  type STRING.

  describe table ME->R_FUNCT->T_REGDVC_FUNCT lines LF_COUNT.

  move 'Functions (&)'(001) to RF_DESCR.
  replace '&' in RF_DESCR with LF_COUNT.

endmethod.
method HANDLE_CONTEXT_MENU_REQUEST .

  data:  LF_IFUNC       type        ZVCXI_XCD_IFUNC.
  data:  LR_MENU        type ref to CL_CTMENU,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      LF_IFUNC = ME->GET_SELECTED_FUNCT( ).
      LR_MENU = ME->R_FUNCT->GET_ACTIONS_FUNCT( IF_IFUNC = LF_IFUNC ).

      E_OBJECT->CLEAR( ).

      if LR_MENU is bound.
        E_OBJECT->ADD_MENU( MENU = LR_MENU ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_FUNCT_ADD .

  data:          LF_RETURN      type                   ABAP_BOOL,
                 LF_EXIT        type                   ABAP_BOOL.
  data:          LT_SVAL        type standard table of SVAL.
  data:          LS_FUNCT       type                   ZVCXI_XCDC_S_REGDVC_FUNCT.
  field-symbols: <S_FIELD>      type                   SVAL,
                 <F_FIELD>      type                   any.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'IFUNC'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'DESCR'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'FUNAC'.


  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Function'(A20)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.

      if <S_FIELD>-VALUE is not initial.
        case <S_FIELD>-FIELDNAME.
          when 'IFUNC'.
            assign LS_FUNCT-IFUNC to <F_FIELD>.
          when 'DESCR'.
            assign LS_FUNCT-DESCR to <F_FIELD>.
          when 'FUNAC'.
            assign LS_FUNCT-FUNAC to <F_FIELD>.
        endcase.


        check <F_FIELD> is assigned.
        move <S_FIELD>-VALUE to <F_FIELD>.
        unassign <F_FIELD>.

      endif.
    endloop.

    check LS_FUNCT-IFUNC is not initial and
          LS_FUNCT-DESCR is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Add Function
  ME->R_FUNCT->ADD( IS_REGDVC_FUNCT = LS_FUNCT ).

endmethod.
method HANDLE_FUNCT_CHANGE .

  data:          LF_RETURN      type                   ABAP_BOOL,
                 LF_EXIT        type                   ABAP_BOOL,
                 LF_IFUNC       type                   ZVCXI_XCD_IFUNC.
  data:          LT_SVAL        type standard table of SVAL.
  data:          LS_FUNCT       type                   ZVCXI_XCDC_S_REGDVC_FUNCT.
  field-symbols: <S_FIELD>      type                   SVAL,
                 <F_FIELD>      type                   any.

*** Get selected Data
  LF_IFUNC = ME->GET_SELECTED_FUNCT( ).
  check LF_IFUNC is not initial.
  read table ME->R_FUNCT->T_REGDVC_FUNCT into LS_FUNCT with key IFUNC = LF_IFUNC.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'IFUNC'.
  <S_FIELD>-VALUE      = LS_FUNCT-IFUNC.
  <S_FIELD>-FIELD_ATTR = '02'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'DESCR'.
  <S_FIELD>-VALUE      = LS_FUNCT-DESCR.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_FUNCT'.
  <S_FIELD>-FIELDNAME = 'FUNAC'.
  <S_FIELD>-VALUE      = LS_FUNCT-FUNAC.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Change Function'(A21)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.

      if <S_FIELD>-VALUE is not initial.
        case <S_FIELD>-FIELDNAME.
          when 'IFUNC'.
            assign LS_FUNCT-IFUNC to <F_FIELD>.
          when 'DESCR'.
            assign LS_FUNCT-DESCR to <F_FIELD>.
          when 'FUNAC'.
            assign LS_FUNCT-FUNAC to <F_FIELD>.
        endcase.


        check <F_FIELD> is assigned.
        move <S_FIELD>-VALUE to <F_FIELD>.
        unassign <F_FIELD>.

      endif.
    endloop.

    check LS_FUNCT-IFUNC is not initial and
          LS_FUNCT-DESCR is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Change Function
  ME->R_FUNCT->CHANGE( IS_REGDVC_FUNCT = LS_FUNCT ).

endmethod.
method HANDLE_FUNCT_CHANGED .

  move ABAP_TRUE     to ME->F_REFRESH_REQUESTED.

endmethod.
method HANDLE_FUNCT_DELETE .

  data: LF_IFUNC type ZVCXI_XCD_IFUNC.

  LF_IFUNC = ME->GET_SELECTED_FUNCT( ).
  ME->R_FUNCT->DELETE( IF_IFUNC = LF_IFUNC ).

endmethod.
method HANDLE_FUNCT_SWITCH_ACTIVE .

  data: LF_IFUNC type ZVCXI_XCD_IFUNC,
        LF_FUNAC type ZVCXI_XCD_FUNAC.
  data: LS_FUNCT type ZVCXI_XCDC_S_REGDVC_FUNCT.

  LF_IFUNC = ME->GET_SELECTED_FUNCT( ).

  read table ME->R_FUNCT->T_REGDVC_FUNCT into LS_FUNCT
                                         with key IFUNC = LF_IFUNC.

  case LS_FUNCT-FUNAC.
    when ABAP_TRUE.
      move ABAP_FALSE to LF_FUNAC.
    when ABAP_FALSE.
      move ABAP_TRUE to LF_FUNAC.
  endcase.

  if SY-SUBRC eq 0.
*** Change the Attribute Mode
    ME->R_FUNCT->SWITCH_ACTIVE( IF_IFUNC = LF_IFUNC
                                IF_FUNAC = LF_FUNAC ).
  endif.

endmethod.
method HANDLE_USER_COMMAND .

  data:  LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_ADD.
          ME->HANDLE_FUNCT_ADD( ).

        when ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_SWITCH_ACTIVE.
          ME->HANDLE_FUNCT_SWITCH_ACTIVE( ).

        when ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_DEL.
          ME->HANDLE_FUNCT_DELETE( ).


        when ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_FCODE_CHANGE.
          ME->HANDLE_FUNCT_CHANGE( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
  endtry.

endmethod.
method INIT_CONTAINER .

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0220CC_FUNCT'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID .

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_GRID.

    ME->BUILD_FIELDCAT( ).

  endif.

endmethod.
method INIT_T_FUNCT_GRID .

  data:           LS_FUNCT       type ZVCXI_XCDC_S_REGDVC_FUNCT.
  field-symbols:  <S_FUNCT_GRID> type ZVCXI_XCDCU_S_FUNCT_GRID.

  free: ME->T_FUNCT_GRID.

  loop at ME->R_FUNCT->T_REGDVC_FUNCT into LS_FUNCT.
    append initial line to ME->T_FUNCT_GRID assigning <S_FUNCT_GRID>.
    move-corresponding LS_FUNCT to <S_FUNCT_GRID>.
    if LS_FUNCT-FUNAC eq ABAP_TRUE.
      move ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_ICON_ACTIVATED   to <S_FUNCT_GRID>-ACTIVE_ICON.
    else.
      move ZIF_VCXI_XCDC_REGDVC_FUNCT=>C_ICON_DEACTIVATED to <S_FUNCT_GRID>-ACTIVE_ICON.
    endif.
  endloop.

endmethod.
method REFRESH_GRID_CONTENT .

  data:   LS_LAYOUT            type LVC_S_LAYO.
  data:   LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  check ME->F_REFRESH_REQUESTED eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQUESTED.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_FUNCT_GRID( ).

  move 'X' to LS_LAYOUT-NO_TOOLBAR.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                             IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                             IS_LAYOUT                     = LS_LAYOUT
                                           changing
                                             IT_FIELDCATALOG               = ME->T_FIELDCAT
                                             IT_OUTTAB                     = ME->T_FUNCT_GRID
                                           exceptions
                                             INVALID_PARAMETER_COMBINATION = 1
                                             PROGRAM_ERROR                 = 2
                                             TOO_MANY_LINES                = 3
                                             others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
