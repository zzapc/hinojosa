
class ZCL_VCXI_FFSS_UI_FASTD definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data F_CURSOR type SCRFNAME read-only .
  data S_FASTD_RHNDL_VIS type ZVCXI_FFSS_S_FASTD_RHNDL_VIS .
  data S_FASTD_VIS type ZVCXI_FFSS_S_FASTD_VIS .
  constants C_UC_NAV_FFG type SYUCOMM value 'NAV_FFG' ##NO_TEXT.
  constants C_UC_NAV_SHIPMGR type SYUCOMM value 'NAV_SHIPMGR' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_FASTD_RHNDL_VIS
    importing
      !IS_FASTD_RHNDL_VIS type ZVCXI_FFSS_S_FASTD_RHNDL_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_FASTD_VIS
    importing
      !IS_FASTD_VIS type ZVCXI_FFSS_S_FASTD_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  methods ON_CTMENU
    importing
      !IR_MENU type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_FCODE_MTS type UI_FUNC value 'MTS' ##NO_TEXT.
  constants C_FCODE_MULTIQTY type UI_FUNC value 'MULTIQTY' ##NO_TEXT.
  constants C_FCODE_RTESPV type UI_FUNC value 'RTESPV' ##NO_TEXT.
  constants C_FCODE_TINFO type UI_FUNC value 'TINFO' ##NO_TEXT.
  constants C_UC_BOOSTER type SYUCOMM value 'BOOSTER' ##NO_TEXT.
  constants C_UC_FISTRUC type SYUCOMM value '0100FASTD_FSTRC' ##NO_TEXT.
  data F_APPL_EVENTS type ABAP_BOOL .
  data F_SFDAT type ZVCXI_F0SS_SFDAT .
  data R_BL_FASTD type ref to ZCL_VCXI_FFSS_BL_FASTD .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID_FASTD_INP type ref to ZCL_VCXI_FFSS_GRID_FASTD_INP .
  data R_GRID_FASTD_LAMI type ref to ZCL_VCXI_FFSS_GRID_FASTD_LAMI .
  data R_GRID_FASTD_PRINT type ref to ZCL_VCXI_FFSS_GRID_FASTD_PRINT .
  data R_PICTURE_RHNDL type ref to ZCL_VCXI_FFS_PICTURE_RHNDL .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .

  methods HANDLE_UC_NAV_FFG
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_NAV_SHIPMGR
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR_FCODE
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods HANDLE_UC_BOOSTER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FISTRUC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MTS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_MULTIQTY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_RTESPV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TINFO
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_RHNDL_VIS
    importing
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    importing
      !IR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods IS_RTESPV_DISABLED
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_UI_FASTD definition
class ZCL_VCXI_FFSS_UI_FASTD implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_FASTD_BIND'
      exporting
        IR_UI_FASTD = ME
      importing
        ES_DYNP     = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Define if Application Events should be triggered
enhancement-section APPL_EVENT_ON_ACTIVATE spots ZVCXI_FFSS_ES_UI_FASTD .
    ME->F_APPL_EVENTS = ABAP_TRUE.
end-enhancement-section.


***--------------------------------------------------------------------------------------
*** Create Roll Winding Picture
    if ME->R_PICTURE_RHNDL is not bound.
      create object ME->R_PICTURE_RHNDL
        exporting
          IR_GATE           = ME->R_GATE
          IR_UIGATE         = ME->R_UIGATE
          IF_CONTAINER_NAME = '0100CC_PICTURE'.
    endif.

***--------------------------------------------------------------------------------------
*** Create Grid for GRID_FASTD_INP
    create object ME->R_GRID_FASTD_INP
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_INP'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD.

*** Create Grid for GRID_FASTD_LAMI
    create object ME->R_GRID_FASTD_LAMI
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_LAMI'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD.

*** Create Grid for GRID_FASTD_PRINT
    create object ME->R_GRID_FASTD_PRINT
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_FASTD_PRINT'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS
        IR_BL_FASTD       = ME->R_BL_FASTD.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).


*** Create Business Logic Instance
    create object ME->R_BL_FASTD
      exporting
        IR_GATE = ME->R_GATE.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

***--------------------------------------------------------------------------------------
*** Free Grids
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->DO_FREE( ).
      clear ME->R_GRID_FASTD_INP.
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->DO_FREE( ).
      clear ME->R_GRID_FASTD_LAMI.
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->DO_FREE( ).
      clear ME->R_GRID_FASTD_PRINT.
    endif.

***--------------------------------------------------------------------------------------
*** Free Roll Winding Picture
    if ME->R_PICTURE_RHNDL is bound.
      ME->R_PICTURE_RHNDL->DO_FREE( ).
      clear ME->R_PICTURE_RHNDL.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Lock fields which should be display-only in non-standard configurations
          if ME->F_SFDAT ne ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
            if SCREEN-GROUP2 eq 'NSC'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***--------------------------------------------------------------------------------------
***       Hide Optimization of Slitting if not available
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_VIS-FOPSL' and
             ME->S_FASTD_VIS-FOPSL eq ABAP_UNDEFINED.
            SCREEN-INVISIBLE = 1.
            SCREEN-INPUT     = 0.
          endif.

***       Disable Slitting relevant Fields if Slitting is Optimized
          if SCREEN-GROUP1 eq 'SLI' and
             ME->S_FASTD_VIS-FOPSL eq ABAP_TRUE.
            SCREEN-INPUT = 0.
          endif.

***--------------------------------------------------------------------------------------
***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_VIS-FOVRR_MAKTX' and
             ME->S_FASTD_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Disable Material Description if generated
          if SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_VIS-MAKTX' and
             ME->S_FASTD_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***--------------------------------------------------------------------------------------
***       Set Target Fields
          case ABAP_TRUE.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RLETA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RWGTA' .
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RWGTA' .
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_FASTD_RHNDL_VIS-RLETA' .
                move 0 to SCREEN-INPUT.
              endif.

          endcase.

***--------------------------------------------------------------------------------------
***       Set Minimum - Maximum Fields
          case ABAP_TRUE.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM.
              if    SCREEN-GROUP1 eq 'LMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'LMM'.
                move 0 to SCREEN-INPUT.
              endif.
          endcase.

***--------------------------------------------------------------------------------------
***       Set Percentage Fields
          if ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
***         Deactivate the min/max groups if percentage is active
            if    SCREEN-GROUP1 eq 'DMM'
               or SCREEN-GROUP1 eq 'LMM'
               or SCREEN-GROUP1 eq 'WMM'.
              move 0 to SCREEN-INPUT.
            endif.
          else.
***         Only set PPM read-only, don't touch the other groups here
            if SCREEN-GROUP1 eq 'PMM'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***--------------------------------------------------------------------------------------
***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.


      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    data: LF_SFDAT       type        ZVCXI_F0SS_SFDAT.
    data: LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE.

    check ME->R_BL_FASTD is bound.

***--------------------------------------------------------------------------------------
*** Initialize Toolbar
    ME->INIT_CONTAINER( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Get Starting Gate
    ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_OUTPUT = LR_GATE_OUTPUT
                                            ER_GATE_FFG    = LR_GATE_FFG
                                            EF_SFDAT       = ME->F_SFDAT ).

***--------------------------------------------------------------------------------------
    check ME->R_GRID_FASTD_INP  is bound and
          ME->R_GRID_FASTD_LAMI is bound.

*** Get Fast Data Information from Finished Good
    ME->R_BL_FASTD->GET_FASTD_BY_OUT( exporting IR_GATE_OUT   = LR_GATE_FFG
                                      importing ET_FASTD_INP  = ME->R_GRID_FASTD_INP->T_FASTD_INP
                                                ET_FASTD_LAMI = ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI
                                                EF_SFDAT      = LF_SFDAT ).
    if LF_SFDAT eq ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_NONSTANDARD.
      move LF_SFDAT to ME->F_SFDAT.
    endif.

*** Initialize VIS
    ME->INIT_VIS( IR_GATE_OUTPUT = LR_GATE_OUTPUT
                  IR_GATE_FFG    = LR_GATE_FFG ).
*** Initialize Roll Handling VIS
    ME->INIT_RHNDL_VIS( IR_GATE_FFG = LR_GATE_FFG ).

***--------------------------------------------------------------------------------------
*** Refresh Input Film Grid
    if ME->R_GRID_FASTD_INP is bound.
      move ABAP_TRUE   to ME->R_GRID_FASTD_INP->F_REFRESH_REQ.
      move ME->F_SFDAT to ME->R_GRID_FASTD_INP->F_SFDAT.
      move LR_GATE_FFG to ME->R_GRID_FASTD_INP->R_GATE_OUT.
      ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
      ME->R_GRID_FASTD_INP->REFRESH_GRID( ).
    endif.

*** Refresh Lamination Grid
    if ME->R_GRID_FASTD_LAMI is bound.
      move ABAP_TRUE   to ME->R_GRID_FASTD_LAMI->F_REFRESH_REQ.
      move ME->F_SFDAT to ME->R_GRID_FASTD_LAMI->F_SFDAT.
      move LR_GATE_FFG to ME->R_GRID_FASTD_LAMI->R_GATE_OUT.
      ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
      ME->R_GRID_FASTD_LAMI->REFRESH_GRID( ).
    endif.

*** Refresh Printing Grid
    if ME->R_GRID_FASTD_INP   is bound and
       ME->R_GRID_FASTD_LAMI  is bound and
       ME->R_GRID_FASTD_PRINT is bound.
      move ME->R_GRID_FASTD_INP->T_FASTD_INP   to ME->R_GRID_FASTD_PRINT->T_FASTD_INP.
      move ME->R_GRID_FASTD_LAMI->T_FASTD_LAMI to ME->R_GRID_FASTD_PRINT->T_FASTD_LAMI.
      move ABAP_TRUE                           to ME->R_GRID_FASTD_PRINT->F_REFRESH_REQ.
      move LR_GATE_FFG                         to ME->R_GRID_FASTD_PRINT->R_GATE_OUT.
      move ME->F_SFDAT                         to ME->R_GRID_FASTD_PRINT->F_SFDAT.
      ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
      ME->R_GRID_FASTD_PRINT->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_FASTD_RHNDL_VIS.

    data: LS_RDITA       type        ZVCXI_FFS_S_RDITA.
    data: LT_PRVDR       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_FFG   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
          LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Starting Gate
    ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG = LR_GATE_FFG ).

*** Finsihed Good Film
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.

    check LR_PR_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling Provider
    LT_PRVDR = LR_GATE_FFG->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC is initial.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_RHNDL.
    endtry.

    if LR_PR_RHNDL is bound.

***--------------------------------------------------------------------------------------
***   Target Dimension
      if ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA ne IS_FASTD_RHNDL_VIS-FOVRR_RDITA or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA ne IS_FASTD_RHNDL_VIS-FOVRR_RLETA or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA ne IS_FASTD_RHNDL_VIS-FOVRR_RWGTA.
        LR_PR_RHNDL->SET_RDIMTA( IF_RDMTA = cond #( when IS_FASTD_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE then 'D'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE then 'L'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE then 'W' )
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Diameter Target
      if ME->S_FASTD_RHNDL_VIS-S_RDITA  ne IS_FASTD_RHNDL_VIS-S_RDITA and
         IS_FASTD_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDITA( IS_RDITA = IS_FASTD_RHNDL_VIS-S_RDITA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Length Target
      if ME->S_FASTD_RHNDL_VIS-S_RLETA  ne IS_FASTD_RHNDL_VIS-S_RLETA and
         IS_FASTD_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLETA( IS_RLETA = IS_FASTD_RHNDL_VIS-S_RLETA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Weight Target
      if ME->S_FASTD_RHNDL_VIS-S_RWGTA  ne IS_FASTD_RHNDL_VIS-S_RWGTA and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGTA( IS_RWGTA = IS_FASTD_RHNDL_VIS-S_RWGTA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***--------------------------------------------------------------------------------------
***   Minimum/Maximum Dimension
      if ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM ne IS_FASTD_RHNDL_VIS-FOVRR_RDIMM or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM ne IS_FASTD_RHNDL_VIS-FOVRR_RLEMM or
         ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM ne IS_FASTD_RHNDL_VIS-FOVRR_RWGMM.
        LR_PR_RHNDL->SET_RDIMMM( IF_RDMMM = cond #( when IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE then 'D'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE then 'L'
                                                    when IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE then 'W' )
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Diameter Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RDIMI  ne IS_FASTD_RHNDL_VIS-S_RDIMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDIMI( IS_RDIMI = IS_FASTD_RHNDL_VIS-S_RDIMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RDIMA  ne IS_FASTD_RHNDL_VIS-S_RDIMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RDIMA( IS_RDIMA = IS_FASTD_RHNDL_VIS-S_RDIMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Length Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RLEMI  ne IS_FASTD_RHNDL_VIS-S_RLEMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLEMI( IS_RLEMI = IS_FASTD_RHNDL_VIS-S_RLEMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RLEMA     ne IS_FASTD_RHNDL_VIS-S_RLEMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RLEMA( IS_RLEMA = IS_FASTD_RHNDL_VIS-S_RLEMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Roll Weight Minimum/Maximum
      if ME->S_FASTD_RHNDL_VIS-S_RWGMI  ne IS_FASTD_RHNDL_VIS-S_RWGMI and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGMI( IS_RWGMI = IS_FASTD_RHNDL_VIS-S_RWGMI
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_RHNDL_VIS-S_RWGMA  ne IS_FASTD_RHNDL_VIS-S_RWGMA and
         IS_FASTD_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
        LR_PR_RHNDL->SET_RWGMA( IS_RWGMA = IS_FASTD_RHNDL_VIS-S_RWGMA
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.


***--------------------------------------------------------------------------------------
***   Set Percentage Minimum
      if     ME->S_FASTD_RHNDL_VIS-S_PERMI     ne IS_FASTD_RHNDL_VIS-S_PERMI
          or ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.

        if IS_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
          LR_PR_RHNDL->SET_PERMI( IS_PERMI = IS_FASTD_RHNDL_VIS-S_PERMI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        else.
          LR_PR_RHNDL->SET_PERMI( IS_PERMI = IS_FASTD_RHNDL_VIS-S_PERMI
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
        endif.
      endif.

***   Set Percentage Maximum
      if     ME->S_FASTD_RHNDL_VIS-S_PERMA     ne IS_FASTD_RHNDL_VIS-S_PERMA
          or ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.

        if IS_FASTD_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
          LR_PR_RHNDL->SET_PERMA( IS_PERMA = IS_FASTD_RHNDL_VIS-S_PERMA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        else.
          LR_PR_RHNDL->SET_PERMA( IS_PERMA = IS_FASTD_RHNDL_VIS-S_PERMA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Set Winding Side
      if ME->S_FASTD_RHNDL_VIS-RWSID ne IS_FASTD_RHNDL_VIS-RWSID.
        LR_PR_RHNDL->SET_RWSID( exporting IF_RWSID = IS_FASTD_RHNDL_VIS-RWSID
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Winding Direction
      if ME->S_FASTD_RHNDL_VIS-RWDIR ne IS_FASTD_RHNDL_VIS-RWDIR.
        LR_PR_RHNDL->SET_RWDIR( exporting IF_RWDIR = IS_FASTD_RHNDL_VIS-RWDIR
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***   Set Eyemark Position
      if ME->S_FASTD_RHNDL_VIS-EYEMP ne IS_FASTD_RHNDL_VIS-EYEMP.
        LR_PR_RHNDL->SET_EYEMP( exporting IF_EYEMP = IS_FASTD_RHNDL_VIS-EYEMP
                                          IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.

***--------------------------------------------------------------------------------------
***   Set Percentage
      if ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM ne IS_FASTD_RHNDL_VIS-FOVRR_PERMM.
        ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM = IS_FASTD_RHNDL_VIS-FOVRR_PERMM.
      endif.

    endif.

***--------------------------------------------------------------------------------------
*** Get MS Core Provider
    LT_PRVDR = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC is initial.

    try.
        move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_CORE.
    endtry.

    if LR_PR_MS_CORE is bound.
*** Set Material Number
      if ME->S_FASTD_RHNDL_VIS-MATNR ne IS_FASTD_RHNDL_VIS-MATNR.
        LR_PR_MS_CORE->SET_MATNR( IF_MATNR = IS_FASTD_RHNDL_VIS-MATNR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

  endmethod.
  method DO_UPDATE_FASTD_VIS.

    data: LF_SLIT_OLD type        ABAP_BOOL,
          LF_SLIT_NEW type        ABAP_BOOL.
    data: LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OUTPUT   type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
          LR_PR_SHIPMGR  type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.

***--------------------------------------------------------------------------------------
*** Grids for Fast Data of Film
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Starting Gate
    ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG    = LR_GATE_FFG
                                            ER_GATE_OUTPUT = LR_GATE_OUTPUT ).

*** Finsihed Good Film
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_FFG.
    endtry.
    check LR_PR_FFG is bound.

*** Output
    try.
        move LR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_OUTPUT.
    endtry.
    check LR_PR_OUTPUT is bound.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if ME->S_FASTD_VIS-MAKTX        ne IS_FASTD_VIS-MAKTX  or
       ME->S_FASTD_VIS-FOVRR_MAKTX  ne IS_FASTD_VIS-FOVRR_MAKTX.
      if IS_FASTD_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        LR_PR_FFG->SET_MAKTX( IF_MAKTX = IS_FASTD_VIS-MAKTX
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        LR_PR_FFG->SET_MAKTX( IF_MAKTX = IS_FASTD_VIS-MAKTX
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Get Material Belonging to the Customer
    if ME->S_FASTD_VIS-KDMAT ne IS_FASTD_VIS-KDMAT.
      LR_PR_FFG->SET_KDMAT( IF_KDMAT = IS_FASTD_VIS-KDMAT
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Get Customer Description of Material
    if ME->S_FASTD_VIS-KDPTX ne IS_FASTD_VIS-KDPTX.
      LR_PR_FFG->SET_KDPTX( IF_KDPTX = IS_FASTD_VIS-KDPTX
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Width (Outbound)
    if ME->S_FASTD_VIS-S_FIWID ne IS_FASTD_VIS-S_FIWID.
      LR_PR_FFG->SET_FIWID( IS_FIWID = IS_FASTD_VIS-S_FIWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Shipping Manager Information
    LR_PR_SHIPMGR = LR_PR_FFG->GET_PRVDR_SHIPMGR( ).
    if LR_PR_SHIPMGR is bound.
      if ME->S_FASTD_VIS-SHSCH ne IS_FASTD_VIS-SHSCH.
        LR_PR_SHIPMGR->SET_SHSCH( IF_SHSCH = IS_FASTD_VIS-SHSCH
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if ME->S_FASTD_VIS-CPACK ne IS_FASTD_VIS-CPACK.
        LR_PR_SHIPMGR->SET_CPACK( IF_CPACK = IS_FASTD_VIS-CPACK
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Optimization of Slitting
    if ME->S_FASTD_VIS-FOPSL ne IS_FASTD_VIS-FOPSL.
      LR_PR_OUTPUT->SET_FOPSL( IF_FOPSL = IS_FASTD_VIS-FOPSL
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
*** Raise Events to Trigger Optimization before continuing
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

***--------------------------------------------------------------------------------------
*** Number of Films, Number of Outs, Trim
    if ME->S_FASTD_VIS-NOFIL   ne IS_FASTD_VIS-NOFIL or
       ME->S_FASTD_VIS-NOOUT   ne IS_FASTD_VIS-NOOUT or
       ME->S_FASTD_VIS-S_TRWID ne IS_FASTD_VIS-S_TRWID or
       IS_FASTD_VIS-FOPSL      eq ABAP_TRUE.

***   Avoid structural changes in non-standard configurations
      if ME->F_SFDAT ne ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
***     Check if Slitting used to be active
        if ME->S_FASTD_VIS-NOOUT ne 1 or
           ME->S_FASTD_VIS-S_TRWID-TRWID ne 0.
          move ABAP_TRUE to LF_SLIT_OLD.
        endif.
***     Check if Slitting should now be active
        if IS_FASTD_VIS-NOOUT ne 1 or
           IS_FASTD_VIS-S_TRWID-TRWID ne 0.
          move ABAP_TRUE to LF_SLIT_NEW.
        endif.

        if ME->S_FASTD_VIS-NOFIL ne IS_FASTD_VIS-NOFIL or
           LF_SLIT_OLD           ne LF_SLIT_NEW.
***       Structural changes are not allowed, due to non-standard configuration.
          message id 'ZVCXI_FFSS' type 'W' number 501.
          return.
        endif.

***     Set Number Out directly
        if ME->S_FASTD_VIS-NOOUT ne IS_FASTD_VIS-NOOUT.
          LR_PR_FFG->SET_NOOUT( IF_NOOUT = IS_FASTD_VIS-NOOUT
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endif.

***     Set Trim directly
        if ME->S_FASTD_VIS-S_TRWID ne IS_FASTD_VIS-S_TRWID.
          LR_PR_OUTPUT->SET_TRWID( IS_TRWID = IS_FASTD_VIS-S_TRWID
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endif.

      else.
***     Set through Fast Data
        ME->R_BL_FASTD->SET_NOFIL( IR_GATE_OUT = LR_GATE_FFG
                                   IF_NOFIL    = IS_FASTD_VIS-NOFIL
                                   IF_NOOUT    = IS_FASTD_VIS-NOOUT
                                   IS_TRWID    = IS_FASTD_VIS-S_TRWID ).
      endif.
    endif.

  endmethod.
  method DO_USER_COMMAND.

*** Grids for Fast Data of Film
    if ME->R_GRID_FASTD_INP is bound.
      ME->R_GRID_FASTD_INP->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_LAMI is bound.
      ME->R_GRID_FASTD_LAMI->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID_FASTD_PRINT is bound.
      ME->R_GRID_FASTD_PRINT->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** User Commands
    case IF_UCOMM.
      when C_UC_FISTRUC.
        ME->HANDLE_UC_FISTRUC( ).
    endcase.

*** Context Menu User Commands
    case SUBSTRING_BEFORE( VAL = IF_UCOMM SUB = '@' ).
      when C_UC_NAV_FFG.
        ME->HANDLE_UC_NAV_FFG( IF_UCOMM = IF_UCOMM ).
      when C_UC_NAV_SHIPMGR.
        ME->HANDLE_UC_NAV_SHIPMGR( IF_UCOMM = IF_UCOMM ).
    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_BL_FASTD.

  endmethod.
  method HANDLE_TOOLBAR_FCODE.

    try.

***     Other user Commands
        case FCODE.
          when C_FCODE_MULTIQTY.
            ME->HANDLE_UC_MULTIQTY( ).

          when C_FCODE_TINFO.
            ME->HANDLE_UC_TINFO( ).

          when C_FCODE_MTS.
            ME->HANDLE_UC_MTS( ).

          when C_FCODE_RTESPV.
            ME->HANDLE_UC_RTESPV( ).

          when C_UC_BOOSTER.
            ME->HANDLE_UC_BOOSTER( ).

        endcase.

***     If we switch Application Events off -> do manually Refresh Screen
        if ME->F_APPL_EVENTS eq ABAP_FALSE.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_BOOSTER.

***--------------------------------------------------------------------------------------
*** Call Booster Selection Popup
    ZCL_VCXI_XCS_POPUP_BOOSTER=>START( IR_GATE = ME->R_GATE ).

  endmethod.
  method HANDLE_UC_FISTRUC.

    data: LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

***--------------------------------------------------------------------------------------
*** Get Finsihed Good Film
    ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG = LR_GATE_FFG ).
    check LR_GATE_FFG is bound.
    try.
        move LR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
      catch CX_SY_MOVE_CAST_ERROR.
        raise exception type /VCXI/CX_CKX.
    endtry.
    check LR_PR_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Film Structure XML
    LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Start Popup
    ZCL_VCXI_FFSS_POPUP_FISTRUCT=>START( IR_BL_FISTRUCT = LR_BL_FISTRUCT ).

  endmethod.
  method HANDLE_UC_MTS.

*** Call Popup for Make-to-Stock Materials
    ZCL_VCXI_XCSS_POPUP_MTS=>START( IR_GATE        = ME->R_GATE
                                    IR_UIGATE      = ME->R_UIGATE
                                    IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_MULTIQTY.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Multi Quantity Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Call Popup for Mulit Quantiies
    ZCL_VCXI_XCSS_POPUP_MULTIQTY=>START( IR_GATE        = LT_GATE[ 1 ]
                                         IR_UIGATE      = ME->R_UIGATE
                                         IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method HANDLE_UC_NAV_FFG.

    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

***     Get Starting Gate
        ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG = data(LR_GATE_FFG) ).

        check LR_GATE_FFG is bound and
              LR_GATE_FFG->F_FREED is initial and
              TO_UPPER( LR_GATE_FFG->F_GATKY ) eq SUBSTRING_AFTER( VAL = IF_UCOMM SUB = '@' ).

***     Check Element has an own UI
        check LR_GATE_FFG->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE_FFG ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_FFG->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_FFG->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_NAV_SHIPMGR.

    data: LR_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE.


    try.
        check ME->F_APPL_EVENTS eq ABAP_TRUE.

***     Get Starting Gate
        ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG = data(LR_GATE_FFG) ).

        check LR_GATE_FFG is bound and
              LR_GATE_FFG->F_FREED is initial and
              TO_UPPER( LR_GATE_FFG->F_GATKY ) eq SUBSTRING_AFTER( VAL = IF_UCOMM SUB = '@' ).

        check LR_GATE_FFG->R_CLSPR is instance of ZCL_VCXI_F0SS_PR_XFG.
        cast ZCL_VCXI_F0SS_PR_XFG( LR_GATE_FFG->R_CLSPR )->GET_PRVDR_SHIPMGR( importing ER_GATE_SHIPMGR = LR_GATE_SHIPMGR ).

***     Check Gate is bound and Provider has an own UI
        check LR_GATE_SHIPMGR is bound and
              LR_GATE_SHIPMGR->F_FREED is initial and
              LR_GATE_SHIPMGR->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE_SHIPMGR ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_SHIPMGR->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_SHIPMGR->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_RTESPV.

    data: LT_GATE              type          /VCXI/VKSR_TT_GATE.


*** Get Gates of Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                     IF_INUSE  = ABAP_TRUE ).
    check LT_GATE is not initial.

*** Fill Production
    cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->FILL_PROD( ).

*** Production was updated.
    message id 'ZVCXI_XCSR' type 'S' number '371'.

  endmethod.
  method HANDLE_UC_TINFO.

*** Call Popup for Tooling Information
    ZCL_VCXI_XCSS_POPUP_TINFO=>START( IR_GATE        = ME->R_GATE
                                      IR_UIGATE      = ME->R_UIGATE
                                      IF_APPL_EVENTS = ME->F_APPL_EVENTS ).

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0100CC_TOOLBAR'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
method INIT_RHNDL_VIS.

  data: LF_SETBY      type /VCXI/VKSR_SETBY.
  data: LT_PRVDR      type /VCXI/VKSR_TT_GATE.
  data: LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
        LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE,
        LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE.


  clear ME->S_FASTD_RHNDL_VIS.

  check IR_GATE_FFG is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Handling Provider
  LT_PRVDR = IR_GATE_FFG->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC is initial.

  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_RHNDL.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_RHNDL.
  endtry.

  if LR_PR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension Target
    case LR_PR_RHNDL->GET_RDIMTA( importing ES_RDITA  = ME->S_FASTD_RHNDL_VIS-S_RDITA
                                            ES_RLETA  = ME->S_FASTD_RHNDL_VIS-S_RLETA
                                            ES_RWGTA  = ME->S_FASTD_RHNDL_VIS-S_RWGTA )-RDMTA.
      when 'D'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RDITA.
      when 'L'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RLETA.
      when 'W'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RWGTA.
    endcase.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension Minimum/Maximum
    case LR_PR_RHNDL->GET_RDIMMM( )-RDMMM.
      when 'D'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RDIMM.
      when 'L'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RLEMM.
      when 'W'.
        move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_RWGMM.
    endcase.

*** Get Roll Diameter Minimum/Maximum
    LR_PR_RHNDL->GET_RDIMI( importing ES_RDIMI = ME->S_FASTD_RHNDL_VIS-S_RDIMI ).
    LR_PR_RHNDL->GET_RDIMA( importing ES_RDIMA = ME->S_FASTD_RHNDL_VIS-S_RDIMA ).

*** Get Roll Length Minimum/Maximum
    LR_PR_RHNDL->GET_RLEMI( importing ES_RLEMI = ME->S_FASTD_RHNDL_VIS-S_RLEMI ).
    LR_PR_RHNDL->GET_RLEMA( importing ES_RLEMA = ME->S_FASTD_RHNDL_VIS-S_RLEMA ).

*** Get Roll Weight Minimum/Maximum
    LR_PR_RHNDL->GET_RWGMI( importing ES_RWGMI = ME->S_FASTD_RHNDL_VIS-S_RWGMI ).
    LR_PR_RHNDL->GET_RWGMA( importing ES_RWGMA = ME->S_FASTD_RHNDL_VIS-S_RWGMA ).

*** Get Percentage Minimum
    LR_PR_RHNDL->GET_PERMI( importing ES_PERMI = ME->S_FASTD_RHNDL_VIS-S_PERMI
                                      EF_SETBY = LF_SETBY ).
    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to ME->S_FASTD_RHNDL_VIS-FOVRR_PERMM.
    endif.

*** Get Percentage Maximum
    LR_PR_RHNDL->GET_PERMA( importing ES_PERMA = ME->S_FASTD_RHNDL_VIS-S_PERMA ).

***--------------------------------------------------------------------------------------
*** Get Winding Side
    LR_PR_RHNDL->GET_RWSID( importing EF_RWSID = ME->S_FASTD_RHNDL_VIS-RWSID ).

*** Get Winding Direction
    LR_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = ME->S_FASTD_RHNDL_VIS-RWDIR ).

*** Get Eyemark Position
    LR_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = ME->S_FASTD_RHNDL_VIS-EYEMP ).

    if ME->R_PICTURE_RHNDL is bound.
***   Refresh Winding Picture
      ME->R_PICTURE_RHNDL->REFRESH_PICTURE( IF_EYEMP = ME->S_FASTD_RHNDL_VIS-EYEMP
                                            IF_RWDIR = ME->S_FASTD_RHNDL_VIS-RWDIR
                                            IF_RWSID = ME->S_FASTD_RHNDL_VIS-RWSID ).
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Get MS Core Provider
  LT_PRVDR = LR_PRVDR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check SY-SUBRC is initial.

  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_MS_CORE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_CORE.
  endtry.

  if LR_PR_MS_CORE is bound.
***--------------------------------------------------------------------------------------
*** Material
    move LR_PR_MS_CORE->GET_MATNR( )       to ME->S_FASTD_RHNDL_VIS-MATNR.
    move LR_PR_MS_CORE->GET_MATNR_DESCR( ) to ME->S_FASTD_RHNDL_VIS-MATNR_DESCR.

  endif.

endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED         type /VCXI/CKX_LOCKED,
          LF_INUSE          type /VCXI/VKSR_INUSE,
          LF_DISABLED       type ABAP_BOOL,
          LF_HIDDE_MULTIQTY type ABAP_BOOL.
    data: LT_EVENT  type CNTL_SIMPLE_EVENTS,
          LT_BTNGRP type TTB_BUTTON.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.


***--------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Create Toolbar
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Registered Events
      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS = LT_EVENT
                                            exceptions others = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Event Handler
      set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.

    endif.

***--------------------------------------------------------------------------------------
*** Remove all Buttons to start fresh
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Button to Load Booster
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_IDATSPV=>C_IPRVT_IDATSPV
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_UC_BOOSTER
                                            ICON        = ICON_CONFIGURATION
                                            IS_DISABLED = LF_DISABLED
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Load Booster'(F06)
                                 exceptions others      = 0 ).
    endif.

*** Hide Multi Quantity if Manager is not acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_MULTIQTY_MGR=>C_IPRVT_XCS_MULTIQTY_MGR
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MULTIQTY
                                            ICON        = ICON_GRADUATE
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Multi Quantity'(F03)
                                 exceptions others      = 0 ).

    endif.

*** Hide Tooling Information if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_TINFO
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Tooling Information'(F05)
                                 exceptions others      = 0 ).

    endif.

*** Hide MTS if none is acitve
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_MTS=>C_IPRVT_XCS_MTS
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_MTS
                                            ICON        = ICON_TOOLS
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Make-to-Stock'(F07)
                                 exceptions others      = 0 ).

    endif.

*** Button to Run Routing Supervisor
    if ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                              IF_INUSE  = ABAP_TRUE ) is not initial.
      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE       = C_FCODE_RTESPV
                                            ICON        = ICON_EXECUTE_OBJECT
                                            IS_DISABLED = ME->IS_RTESPV_DISABLED( )
                                            BUTN_TYPE   = CNTB_BTYPE_BUTTON
                                            TEXT        = 'Fill Production'(F04)
                                 exceptions others      = 0 ).
    endif.

  endmethod.
  method INIT_VIS.

    data: LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
          LR_PR_OUTPUT  type ref to ZCL_VCXI_FFSS_PR_OUTPUT.

    free: ME->S_FASTD_VIS.

***--------------------------------------------------------------------------------------
*** Finsihed Good Film Provider
    if IR_GATE_FFG is bound.
      try.
          move IR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.
      check LR_PR_FFG is bound.

***   Get Material Description
      LR_PR_FFG->GET_MAKTX( importing EF_MAKTX = ME->S_FASTD_VIS-MAKTX
                                      EF_FOVRR = ME->S_FASTD_VIS-FOVRR_MAKTX ).

***   Get Material Belonging to the Customer
      LR_PR_FFG->GET_KDMAT( importing EF_KDMAT = ME->S_FASTD_VIS-KDMAT ).

***   Get Customer Description of Material
      LR_PR_FFG->GET_KDPTX( importing EF_KDPTX = ME->S_FASTD_VIS-KDPTX ).

***   Get Number of Outs
      ME->S_FASTD_VIS-NOOUT = LR_PR_FFG->GET_NOOUT( ).

***   Get Film Width (Outbound)
      LR_PR_FFG->GET_FIWID( importing ES_FIWID = ME->S_FASTD_VIS-S_FIWID ).

***   Get Repeat Length (Inbound)
      LR_PR_FFG->ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN( importing ES_RELEN = ME->S_FASTD_VIS-S_RELEN ).

***   Get Shipping Manager Information
      LR_PR_SHIPMGR = LR_PR_FFG->GET_PRVDR_SHIPMGR( ).
      if LR_PR_SHIPMGR is bound.
        ME->S_FASTD_VIS-SHSCH = LR_PR_SHIPMGR->GET_SHSCH( ).
        ME->S_FASTD_VIS-CPACK = LR_PR_SHIPMGR->GET_CPACK( ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Output Provider
    if IR_GATE_OUTPUT is bound.
      try.
          move IR_GATE_OUTPUT->R_CLSPR ?to LR_PR_OUTPUT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OUTPUT.
      endtry.
      check LR_PR_OUTPUT is bound.

***   Optimization of Slitting
      LR_PR_OUTPUT->GET_FOPSL( importing EF_FOPSL = ME->S_FASTD_VIS-FOPSL ).

***   Trim on the Width
      LR_PR_OUTPUT->GET_TRWID( importing ES_TRWID = ME->S_FASTD_VIS-S_TRWID ).

    endif.

***--------------------------------------------------------------------------------------
*** Count Number of Input Films
    move LINES( ME->R_GRID_FASTD_INP->T_FASTD_INP ) to ME->S_FASTD_VIS-NOFIL.

  endmethod.
  method IS_RTESPV_DISABLED.

    data: LF_ALLOWED type ABAP_BOOL.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      RF_DISABLED = ABAP_TRUE.

    else.
***   Start Negative
      RF_DISABLED = ABAP_TRUE.

***   Get Gates of Routing Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                       IF_INUSE  = ABAP_TRUE ).
      check LT_GATE is not initial.

***   Check if Fill Production is allowed
      cast ZCL_VCXI_XCSR_PR_RTESPV( LT_GATE[ 1 ]->R_CLSPR )->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED = LF_ALLOWED ).
      RF_DISABLED = switch #( LF_ALLOWED when ABAP_TRUE then ABAP_FALSE else ABAP_TRUE ).
    endif.

  endmethod.
  method ON_CTMENU.

    check ME->F_APPL_EVENTS eq ABAP_TRUE.

*** Get Starting Gate
    ME->R_BL_FASTD->GET_GATE_FFG( importing ER_GATE_FFG = data(LR_GATE_FFG) ).


*** Navigation Options
    if LR_GATE_FFG is bound.
***   Finished Good
      IR_MENU->ADD_FUNCTION( FCODE = C_UC_NAV_FFG && '@' && LR_GATE_FFG->F_GATKY
                             TEXT  = REPLACE( VAL = 'Navigate to &1'(M01) SUB = '&1' WITH = LR_GATE_FFG->GET_DESCR( ) ) ).

***   Shipping Manager
      if LR_GATE_FFG->R_CLSPR is instance of ZCL_VCXI_F0SS_PR_XFG.
        if cast ZCL_VCXI_F0SS_PR_XFG( LR_GATE_FFG->R_CLSPR )->GET_PRVDR_SHIPMGR( ) is bound.
          IR_MENU->ADD_FUNCTION( FCODE = C_UC_NAV_SHIPMGR && '@' && LR_GATE_FFG->F_GATKY
                                 TEXT  = 'Navigate to Shipping Manager'(M02) ).
        endif.
      endif.
    endif.

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.

    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
