
class ZCL_VCXI_P0SS_PR_COMP_SE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_CALIP .
  interfaces ZIF_VCXI_P0SS_PRODDIM .
  interfaces ZIF_VCXI_XCSS_OPQTY .

  aliases C_IEVNT_O_FOLDIM_CHANGED
    for ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_FOLDIM_CHANGED .
  aliases C_IEVNT_O_SHTP_CHANGED
    for ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_SHTP_CHANGED .
  aliases C_IPRVT_P0_PRODDIM
    for ZIF_VCXI_P0SS_PRODDIM~C_IPRVT_P0_PRODDIM .
  aliases C_PARID_FOLHE
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_FOLHE .
  aliases C_PARID_FOLLE
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_FOLLE .
  aliases C_PARID_FOLWI
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_FOLWI .
  aliases C_PARID_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_SHTPL .
  aliases C_PARID_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~C_PARID_SHTPW .
  aliases GET_FOLHE
    for ZIF_VCXI_P0SS_PRODDIM~GET_FOLHE .
  aliases GET_FOLLE
    for ZIF_VCXI_P0SS_PRODDIM~GET_FOLLE .
  aliases GET_FOLWI
    for ZIF_VCXI_P0SS_PRODDIM~GET_FOLWI .
  aliases GET_PCDIM
    for ZIF_VCXI_P0SS_PRODDIM~GET_PCDIM .
  aliases GET_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~GET_SHTPL .
  aliases GET_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~GET_SHTPW .
  aliases SET_FOLHE
    for ZIF_VCXI_P0SS_PRODDIM~SET_FOLHE .
  aliases SET_FOLLE
    for ZIF_VCXI_P0SS_PRODDIM~SET_FOLLE .
  aliases SET_FOLWI
    for ZIF_VCXI_P0SS_PRODDIM~SET_FOLWI .
  aliases SET_SHTPL
    for ZIF_VCXI_P0SS_PRODDIM~SET_SHTPL .
  aliases SET_SHTPW
    for ZIF_VCXI_P0SS_PRODDIM~SET_SHTPW .

  constants C_IPRVT_P0_COMP_SE type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_COMP_SE'. "#EC NOTEXT
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_P0_NOUPS'. "#EC NOTEXT

  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPN
    returning
      value(RF_COMPN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP
    returning
      value(RF_COMPP) type ZVCXI_P0SS_COMPP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COMPR
    returning
      value(RF_COMPR) type ZVCXI_P0SS_COMPR
    raising
      /VCXI/CX_CKX .
  methods GET_DIKEY
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    returning
      value(RF_NOUPS) type ZVCXI_P0SS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_DESCR
    returning
      value(RF_PRSTY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMPP
    importing
      !IF_COMPP type ZVCXI_P0SS_COMPP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMPR
    importing
      !IF_COMPR type ZVCXI_P0SS_COMPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DIKEY
    importing
      !IS_DIKEY type ZVCXI_P0SS_S_DIKEY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_P0SS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTY
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BAWGT type /VCXI/VKSC_IEVNT value 'INIT_BAWGT'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_CALIP type /VCXI/VKSC_IEVNT value 'INIT_CALIP'. "#EC NOTEXT
  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_SHTP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_SHTP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_COMPR_CHANGED type /VCXI/VKSC_IEVNT value 'COMPR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_DIKEY_CHANGED type /VCXI/VKSC_IEVNT value 'DIKEY_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED'. "#EC NOTEXT
  constants C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGP_A'. "#EC NOTEXT
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGT'. "#EC NOTEXT
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP'. "#EC NOTEXT
  constants C_PARID_COMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_COMPR'. "#EC NOTEXT
  constants C_PARID_DIKEY type /VCXI/VKS_PARID value 'ZVCXI_P0_DIKEY'. "#EC NOTEXT
  data R_PRODDIM type ref to ZIF_VCXI_P0SS_PRODDIM .
  data R_PR_SPEC type ref to ZCL_VCXI_P0SS_PR_SPEC .

  methods CHECK_COMPP
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMPR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIKEY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUPS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_SE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BAWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CALIP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_P0S_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_P0S_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_COMP_SE definition
class ZCL_VCXI_P0SS_PR_COMP_SE implementation.
method CHECK_COMPP.

*** 0 - Product Type is maintained and valid.
*** 1 - Product Type is maintained but not valid for AS
*** 2 - Product type is maintained but not valid.
*** 3 - Product Type is not maintained.

  data: LF_COMPP type ZVCXI_P0SS_COMPP,
        LF_PTYPE type ZVCXI_P0S_PTYPE.

*** Start Positiv
  RF_RESULT = 0.

  LF_COMPP = ME->GET_COMPP( ).

*** Check if Product Type is maintained.
  if LF_COMPP is initial.
    RF_RESULT = 3.
    exit.
  endif.

*** Check Product Type is valid
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100 with key PTYPE = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 2.
    exit.
  endif.

*** Check Product Type is valid
  LF_PTYPE = ME->GET_PTYPE_SE( ).
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC101 with key PTYPE = LF_PTYPE
                                                        COMPP = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 1.
    exit.
  endif.

endmethod.
method CHECK_COMPR.
*** 0 => Component Ratio is maintained
*** 1 => Component Ratio is not maintained

  if ME->GET_COMPR( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method CHECK_DIKEY.
*** 0 => Distribution Key is maintained
*** 1 => Distribution Key is not maintained

  data:  LS_DIKEY   type ZVCXI_P0SS_S_DIKEY.

  move ME->GET_DIKEY( ) to LS_DIKEY.
  if LS_DIKEY-DIKEY is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method CHECK_NOUPS.
*** 0 => Number Ups is maintained
*** 1 => Number Ups is not maintained

  if ME->GET_NOUPS( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_BOXPA.

  check ME->R_PR_SPEC is bound.

  RF_BOXPA = ME->R_PR_SPEC->GET_BOXPA( ).

endmethod.
method GET_BOXPA_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_DESCR = ME->R_PR_SPEC->GET_BOXPA_DESCR( ).

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_COMPN.

  data:          LT_PRVDR             type        /VCXI/VKSR_TT_GATE.
  data:          LR_PRVDR             type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_SE        type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

*** Get Gates of Components
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SPEC_SE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SPEC_SE.
  endtry.

  check LR_PR_SPEC_SE is bound.
  move LR_PR_SPEC_SE->GET_COMPN( IR_GATE = ME->R_GATE ) to RF_COMPN.

endmethod.
method GET_COMPP.

  check ME->R_PR_SPEC is bound.

  move ME->R_PR_SPEC->GET_PTYPE( ) to RF_COMPP.

endmethod.
method GET_COMPP_DESCR.

  check ME->R_PR_SPEC is bound.

  move ME->R_PR_SPEC->GET_PTYPE_DESCR( ) to RF_DESCR.

endmethod.
method GET_COMPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).
  move LS_PARAM-ATFLV to RF_COMPR.

endmethod.
method GET_DIKEY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).
  move LS_PARAM-ATFLV to RS_DIKEY-DIKEY.
  move LS_PARAM-UNIT  to RS_DIKEY-DIKEY_UOM.

endmethod.
method GET_MATDE.

  check ME->R_PR_SPEC is bound.

  RF_MATDE = ME->R_PR_SPEC->GET_MATDE( ).

endmethod.
method GET_NOUPS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
  move LS_PARAM-ATFLV to RF_NOUPS.

endmethod.
method GET_PROHE.

  check ME->R_PR_SPEC is bound.

  RS_PROHE = ME->R_PR_SPEC->GET_PROHE( ).

endmethod.
method GET_PROLE.

  check ME->R_PR_SPEC is bound.

  RS_PROLE = ME->R_PR_SPEC->GET_PROLE( ).

endmethod.
method GET_PROWI.

  check ME->R_PR_SPEC is bound.

  RS_PROWI = ME->R_PR_SPEC->GET_PROWI( ).

endmethod.
method GET_PRSTY.

  check ME->R_PR_SPEC is bound.

  RF_PRSTY = ME->R_PR_SPEC->GET_PRSTY( ).

endmethod.
method GET_PRSTY_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_PRSTY_DESCR = ME->R_PR_SPEC->GET_PRSTY_DESCR( ).

endmethod.
method GET_PTYPE_SE.

  data:          LT_PRVDR             type        /VCXI/VKSR_TT_GATE.
  data:          LR_PRVDR             type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_SE        type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

*** Get Gates of Components
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SPEC_SE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SPEC_SE.
  endtry.

  check LR_PR_SPEC_SE is bound.
  move LR_PR_SPEC_SE->GET_PTYPE( ) to RF_PTYPE.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

  try.

***---------------------------------------------------------------------------------------------
***   Check Component Product Type
      if ME->CHECK_COMPP( ) is initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Number Ups
      case ME->CHECK_NOUPS( ).
        when 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endcase.

***   Check Component Ratio
      case ME->CHECK_COMPR( ).
        when 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endcase.

***---------------------------------------------------------------------------------------------
***   Check Component Distribution Key
      case ME->CHECK_DIKEY( ).
        when 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endcase.

    catch /VCXI/CX_CKX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_E ).
  endtry.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***-----------------------------------------------------------------------------------
*** Check Component Product type
  case ME->CHECK_COMPP( ).
    when 0.
***   Product Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '901' ).

    when 1.
***   Product Type is maintained but not valid for SE
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '902' ).

    when 2.
***   Product type is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '903' ).
    when 3.
***   Product Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '904' ).

  endcase.

***-----------------------------------------------------------------------------------
*** Check Number Ups
  case ME->CHECK_NOUPS( ).
    when 0.
***   Number Ups is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '907' ).

    when 1.
***   Number Ups is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '908' ).

  endcase.

*** Check Component Ratio
  case ME->CHECK_COMPR( ).
    when 0.
***   Component Ratio is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '909' ).

    when 1.
***   Component Ratio is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '910' ).

  endcase.

***-----------------------------------------------------------------------------------
*** Check Component Distribution Key
  case ME->CHECK_DIKEY( ).
    when 0.
***   Distribution Key is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '905' ).

    when 1.
***   Distribution Key is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '906' ).

  endcase.

endmethod.
method GET_TPRST.

  check ME->R_PR_SPEC is bound.

  RF_TPRST = ME->R_PR_SPEC->GET_TPRST( ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_CALIP.
      ME->HANDLE_INIT_CALIP( ).

    when C_IEVNT_I_INIT_BAWGT.
      ME->HANDLE_INIT_BAWGT( ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).

    when C_IEVNT_I_REQ_SHTP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_SHTP_CHANGED ).

  endcase.

endmethod.
method HANDLE_INIT_BAWGT.

  data:  LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
         LS_BAWGP           type        ZVCXI_P0S_S_BAWGP,
         LS_WDRYW           type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA           type        ZVCXI_P0SS_S_WDRYA.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_WEIGHT          type ref to ZIF_VCXI_P0SS_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Set Default Area
  move 1000 to LS_BAWGP-BAWGP.
  move 'M2' to LS_BAWGP-BAWGP_UOM.

***------------------------------------------------------------------------------------------------
*** Get Weight References
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_WEIGHT=>C_IPRVT_P0_WEIGHT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        check LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_WEIGHT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_WEIGHT is bound.

    clear: LS_WDRYW, LS_WDRYA.
    LR_WEIGHT->GET_WDRYW( importing ES_WDRYW = LS_WDRYW
                                    ES_WDRYA = LS_WDRYA ).

    check LS_WDRYW-WDRYW is not initial.

*** Add Weights per Area
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BAWGP-BAWGP_UOM
                                                       IF_UOM_IN    = LS_WDRYA-WDRYA_UOM
                                                       IF_VALUE_IN  = LS_WDRYA-WDRYA
                                             importing EF_VALUE_OUT = LS_WDRYA-WDRYA
                                                       EF_UOM_OUT   = LS_WDRYA-WDRYA_UOM ).


    if LS_BAWGT-BAWGT is not initial.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BAWGT-BAWGT_UOM
                                                         IF_UOM_IN    = LS_WDRYW-WDRYW_UOM
                                                         IF_VALUE_IN  = LS_WDRYW-WDRYW
                                               importing EF_VALUE_OUT = LS_WDRYW-WDRYW
                                                         EF_UOM_OUT   = LS_WDRYW-WDRYW_UOM ).

      LS_BAWGT-BAWGT = LS_BAWGT-BAWGT + ( ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * LS_BAWGP-BAWGP ).
    else.
      LS_BAWGT-BAWGT     = ( LS_WDRYW-WDRYW / LS_WDRYA-WDRYA ) * LS_BAWGP-BAWGP.
      LS_BAWGT-BAWGT_UOM = LS_WDRYW-WDRYW_UOM.
    endif.

  endloop.

***------------------------------------------------------------------------------------------------
*** Set Base Weight and Base Weight Per
  ME->SET_BAWGT( IS_BAWGT = LS_BAWGT ).
  ME->SET_BAWGP( IS_BAWGP = LS_BAWGP ).

endmethod.
method HANDLE_INIT_CALIP.

  data:  LS_CALIP           type        ZVCXI_P0SS_S_CALIP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE.

***------------------------------------------------------------------------------------------------
*** Get Specification for SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  check LR_PR_SPEC_SE is bound.
  LS_CALIP = LR_PR_SPEC_SE->GET_CALIP( IF_POOTI = '*' ).

***------------------------------------------------------------------------------------------------
*** Set Caliper
  ME->SET_CALIP( IS_CALIP = LS_CALIP ).

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PR_SPEC.
  endtry.

  if ME->R_PR_SPEC is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Product Dimension Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PRODDIM.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PRODDIM.
  endtry.

  if ME->R_PRODDIM is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
  endif.

endmethod.
method SET_BOXPA.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_BOXPA( IF_BOXPA = IF_BOXPA
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_COMPP.

  data: LF_PTYPE     type ZVCXI_P0S_PTYPE.

  check ME->R_PR_SPEC is bound.

  move IF_COMPP to LF_PTYPE.
  ME->R_PR_SPEC->SET_PTYPE( IF_PTYPE = LF_PTYPE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_COMPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).

  move IF_COMPR           to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COMPR_CHANGED ).
  endif.

endmethod.
method SET_DIKEY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).

  move IS_DIKEY-DIKEY     to LS_PARAM-ATFLV.
  move IS_DIKEY-DIKEY_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIKEY_CHANGED ).
  endif.

endmethod.
method SET_MATDE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_MATDE( IF_MATDE = IF_MATDE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_NOUPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

  move IF_NOUPS           to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
  endif.

endmethod.
method SET_PROHE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROHE( IS_PROHE = IS_PROHE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PROLE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROLE( IS_PROLE = IS_PROLE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PROWI.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROWI( IS_PROWI = IS_PROWI
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRSTY.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PRSTY( IF_PRSTY = IF_PRSTY
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_CALIP~GET_CALIP.

  data: LF_POOTI    type          ZVCXI_P0S_POOTI,
        LF_CONTINUE type          ABAP_BOOL.
  data: LT_POOTI    type table of ZVCXI_P0S_POOTI.

  split IF_POOTI at ZIF_VCXI_P0SS_CALIP~C_POOTI_SEP into table LT_POOTI.

  loop at LT_POOTI into LF_POOTI.
    condense LF_POOTI.
    check LF_POOTI eq '*'     or
          LF_POOTI eq 'BASE'.

    LF_CONTINUE = ABAP_TRUE.
    exit.
  endloop.

  check LF_CONTINUE eq ABAP_TRUE.

  RS_CALIP = ME->GET_CALIP( ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLHE.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->GET_FOLHE( importing ES_FOLHE = ES_FOLHE
                                      EF_SETBY = EF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLLE.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->GET_FOLLE( importing ES_FOLLE = ES_FOLLE
                                      EF_SETBY = EF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOLWI.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->GET_FOLWI( importing ES_FOLWI = ES_FOLWI
                                      EF_SETBY = EF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_FOVRF.

  data: LF_SETBY_FOLLE type /VCXI/VKSR_SETBY,
        LF_SETBY_FOLWI type /VCXI/VKSR_SETBY,
        LF_SETBY_FOLHE type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_FOLHE( importing EF_SETBY = LF_SETBY_FOLHE ).
  ME->GET_FOLLE( importing EF_SETBY = LF_SETBY_FOLLE ).
  ME->GET_FOLWI( importing EF_SETBY = LF_SETBY_FOLWI ).

  check LF_SETBY_FOLLE eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
        LF_SETBY_FOLWI eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
        LF_SETBY_FOLHE eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRF.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_PCALI.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  RS_PCALI = ME->R_PRODDIM->GET_PCALI( ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_PCDIM.

***------------------------------------------------------------------------------------------------
  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

*** Get Dimensions via Product Interface
  check ME->R_PRODDIM is bound.
  RS_PCDIM = ME->R_PRODDIM->GET_PCDIM( IF_POOTI = IF_POOTI ).

  case IF_POOTI.
***------------------------------------------------------------------------------------------------
*** Product Dimension
    when ZIF_VCXI_P0SS_PRODDIM~C_POOTI_PRODUCT.
***   Number of Outs
      move ME->GET_NOUPS( ) to RS_PCDIM-NOOUT.

  endcase.

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_SHTPL.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  RS_SHTPL = ME->R_PRODDIM->GET_SHTPL( ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~GET_SHTPW.

  if ME->R_PRODDIM is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PRODDIM is bound.

  RS_SHTPW = ME->R_PRODDIM->GET_SHTPW( ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLHE.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_FOLHE( IS_FOLHE = IS_FOLHE
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLLE.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_FOLLE( IS_FOLLE = IS_FOLLE
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOLWI.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_FOLWI( IS_FOLWI = IS_FOLWI
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_FOVRF.

  case IF_FOVRF.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_FOLHE( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      ME->SET_FOLLE( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      ME->SET_FOLWI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_FOLHE( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      ME->SET_FOLLE( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      ME->SET_FOLWI( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P0SS_PRODDIM~C_IEVNT_O_FOVRF_CHANGED ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_PCALI.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_PCALI( IS_PCALI = IS_PCALI
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_SHTPL.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_SHTPL( IS_SHTPL = IS_SHTPL
                            IF_SETBY = IF_SETBY ).
endmethod.
method ZIF_VCXI_P0SS_PRODDIM~SET_SHTPW.

  check ME->R_PRODDIM is bound.

  ME->R_PRODDIM->SET_SHTPW( IS_SHTPW = IS_SHTPW
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = ES_QCALC_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QCALC_BASE-QCALC.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QCALC_BASE-QCALC_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Set Component Ratio as Numerator
  move ME->GET_COMPR( ) to EF_UMREZ.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QCALC_SELF-QCALC   = ES_QCALC_BASE-QCALC * EF_UMREZ / EF_UMREN.
  endif.
  ES_QCALC_SELF-QCALC_UOM = ES_QCALC_BASE-QCALC_UOM.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QITEM( importing ES_QITEM_BASE = ES_QITEM_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_BASE-QITEM.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_BASE-QITEM_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Set Component Ratio as Numerator
  move ME->GET_COMPR( ) to EF_UMREZ.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QITEM_SELF-QITEM   = ES_QITEM_BASE-QITEM * EF_UMREZ / EF_UMREN.
  endif.
  ES_QITEM_SELF-QITEM_UOM = ES_QITEM_BASE-QITEM_UOM.

endmethod.
