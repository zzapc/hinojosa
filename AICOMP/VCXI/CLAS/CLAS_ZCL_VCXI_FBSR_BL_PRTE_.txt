
class ZCL_VCXI_FBSR_BL_PRTE definition
  public
  inheriting from ZCL_VCXI_F0SR_BL_PRTE
  create public .

public section.

  methods GET_RHNDL_IN
    returning
      value(RT_RHNDL_IN) type ZVCXI_FFSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .

  methods GET_SPVRE_MFMI
    redefinition .
  methods CONVERT_TO_MQTYO
    redefinition .
protected section.

  constants C_ID_MFMI_P type /VCXI/CKX_ID value 'MFMI_P' ##NO_TEXT.
  constants C_ID_MFMI_L type /VCXI/CKX_ID value 'MFMI_L' ##NO_TEXT.

  methods GET_BGDIM_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    exporting
      !ET_BGDIM_OUT type ZVCXI_FBSP_TT_BGDIM
      !ET_BGDIM_IN type ZVCXI_FBSP_TT_BGDIM
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_MFMI_P
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_BGDIM type ZVCXI_FBSP_S_BGDIM
    raising
      /VCXI/CX_CKX .

  methods CONV_MQTYO_TO_MQTYI
    redefinition .
  methods ROUND_MQTYI
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSR_BL_PRTE definition
class ZCL_VCXI_FBSR_BL_PRTE implementation.
  method CONV_MQTYO_TO_MQTYI.

    data: LF_NOOUT_OUT type ZVCXI_XCS_NOOUT,
          LF_NOUPS_OUT type ZVCXI_F0S_NOUPS,
          LF_NOUPS_IN  type ZVCXI_F0S_NOUPS.
    data: LS_MQTYO     type ZVCXI_XCSP_S_MQTYO,
          LS_BGDIM_IN  type ZVCXI_FBSP_S_BGDIM,
          LS_BGDIM_OUT type ZVCXI_FBSP_S_BGDIM.
    data: LT_BGDIM_IN  type ZVCXI_FBSP_TT_BGDIM,
          LT_BGDIM_OUT type ZVCXI_FBSP_TT_BGDIM.


*** "cast" Machine Quantity Out
    LS_MQTYO = value #( MQTYO     = CS_CALCV-CALCV
                        MQTYO_UOM = CS_CALCV-CALCV_UOM ).

***--------------------------------------------------------------------------------------
*** Get Bag Dimension
    ME->GET_BGDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_BGDIM_IN  = LT_BGDIM_IN
                                          ET_BGDIM_OUT = LT_BGDIM_OUT ).

*** Collect Ups of all Dimension Outs (MFMO are suppressed by NOUPS = 0)
    loop at LT_BGDIM_OUT into LS_BGDIM_OUT where NOUPS ne 0.
      add LS_BGDIM_OUT-NOOUT to LF_NOOUT_OUT.
      add LS_BGDIM_OUT-NOUPS to LF_NOUPS_OUT.
    endloop.
    check SY-SUBRC eq 0.

    check LT_BGDIM_IN is not initial.

***--------------------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_BGDIM_OUT ) eq 0.
      CS_CALCV-CALCV = 0.

*** Logic "Single MFO"
    elseif LINES( LT_BGDIM_OUT ) eq 1.
***   Get PC Ups of Flow In
      loop at LT_BGDIM_IN into LS_BGDIM_IN.
***     Take maximum PC
        if LS_BGDIM_IN-NOUPS gt LF_NOUPS_IN.
          move LS_BGDIM_IN-NOUPS to LF_NOUPS_IN.
        endif.
      endloop.
      check LF_NOUPS_IN is not initial.

***   Convert it to Machine Quantity In using Ups Ratio (Due to S&U)
      CS_CALCV-CALCV = LS_MQTYO-MQTYO * LF_NOUPS_OUT / LF_NOUPS_IN.

*** Logic "Multiple MFO"
    else.
      check LF_NOOUT_OUT is not initial.
***   Convert it to Machine Quantity In using the Total Out
      CS_CALCV-CALCV = LS_MQTYO-MQTYO / LF_NOOUT_OUT.
    endif.

*** Round Bags if not unitized
    if LT_BGDIM_IN[ 1 ]-SHUNT is initial.
      CS_CALCV-CALCV = CEIL( CS_CALCV-CALCV ).
    endif.

  endmethod.
  method CONVERT_TO_MQTYO.

    data: LF_NOUPS_OUT type ZVCXI_F0S_NOUPS,
          LF_NOOUT     type ZVCXI_XCS_NOOUT.
    data: LT_BGDIM_OUT type ZVCXI_FBSP_TT_BGDIM.

***--------------------------------------------------------------------------------
*** Get Bag Dimension
    ME->GET_BGDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_BGDIM_OUT = LT_BGDIM_OUT ).

*** Ignore Dimension Outs of MFMO (suppressed by NOUPS = 0)
    delete LT_BGDIM_OUT where NOUPS = 0.

*** Collect Ups/Outs of all Bag Dimension Out
    LF_NOUPS_OUT = reduce #( init NOUPS_OUT = 0 for LS_BGDIM_OUT in LT_BGDIM_OUT next NOUPS_OUT = NOUPS_OUT + ( LS_BGDIM_OUT-NOUPS * LS_BGDIM_OUT-NOOUT ) ).
    LF_NOOUT =  reduce #( init NOOUT = 0 for LS_BGDIM_OUT in LT_BGDIM_OUT next NOOUT += LS_BGDIM_OUT-NOOUT ).

*** Calculate
    if LF_NOUPS_OUT is not initial.
      CS_CALCV-CALCV = conv ZVCXI_XCSP_MQTYO( CS_CALCV-CALCV / LF_NOUPS_OUT * LF_NOOUT ).

***   Round Bags if not unitized
      if LT_BGDIM_OUT[ 1 ]-SHUNT is initial.
        CS_CALCV-CALCV = CEIL( CS_CALCV-CALCV ).
      endif.
    else.
      clear CS_CALCV-CALCV.
    endif.

  endmethod.
  method FILL_SPVRE_MFMI_P.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Set Bag Width
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_BGWID to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                          to LS_PARAM-PARTY.
    move IS_BGDIM-BGWID                                             to LS_PARAM-ATFLV.
    move IS_BGDIM-BGWID_UOM                                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                           to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Bag Height
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_BGHEI to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                          to LS_PARAM-PARTY.
    move IS_BGDIM-BGHEI                                             to LS_PARAM-ATFLV.
    move IS_BGDIM-BGHEI_UOM                                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                           to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Bag Weight
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_BGWGT to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                          to LS_PARAM-PARTY.
    move IS_BGDIM-BGWGT                                             to LS_PARAM-ATFLV.
    move IS_BGDIM-BGWGT_UOM                                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                           to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

***  Set Bag Type
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_IBAGT to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                          to LS_PARAM-PARTY.
    move IS_BGDIM-IBAGT                                             to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                           to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Ups
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_NOUPS   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
    move IS_BGDIM-NOUPS                                               to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number of Outs
    clear LS_PARAM.
    move ZCL_VCXI_FBSP_PR_MFMI_P=>ZIF_VCXI_FBSP_BGDIM~C_PARID_NOOUT   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                            to LS_PARAM-PARTY.
    move IS_BGDIM-NOOUT                                               to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                             to LS_PARAM-SETBY.
    IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method GET_BGDIM_BY_RTE_ARBPL.

    data: LT_BGDIM type ZVCXI_FBSP_TT_BGDIM.
    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_ADJ_BGDIM type ref to ZIF_VCXI_FBSR_ADJ_BGDIM.
    field-symbols: <T_MFMI>  type standard table,
                   <T_MFSI>  type standard table,
                   <S_MFMI>  type ANY,
                   <S_MFSI>  type ANY,
                   <S_BGDIM> type ZVCXI_FBSP_S_BGDIM.

    refresh: ET_BGDIM_IN, ET_BGDIM_OUT.
***--------------------------------------------------------------------------------------
*** Material Flow Material In Dimensions
    if ME->R_MFMI is bound.
      assign ME->R_MFMI->* to <T_MFMI>.

      loop at <T_MFMI> assigning <S_MFMI>.
        append initial line to LT_BGDIM assigning <S_BGDIM>.
        move-corresponding <S_MFMI> to <S_BGDIM>.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
    if ME->R_MFSI is bound.
      assign ME->R_MFSI->* to <T_MFSI>.

      loop at <T_MFSI> assigning <S_MFSI>.
        append initial line to LT_BGDIM assigning <S_BGDIM>.
        move-corresponding <S_MFSI> to <S_BGDIM>.
      endloop.
    endif.

*** Forward Processing of Bag Dimension Changes
    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***----------------------------------------------------------------------------
***   Reset Number of Outs on next Work Center
      loop at LT_BGDIM assigning <S_BGDIM>.
        move 1 to <S_BGDIM>-NOOUT.
      endloop.

***--------------------------------------------------------------------------------------
***   Adjust PC Dimension IN
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_BGDIM.
            check LR_ADJ_BGDIM is bound.

            LR_ADJ_BGDIM->CALC_BGDIM_IN( changing CT_BGDIM = LT_BGDIM ).
            exit. " Only first Production Step inluences Bag Dimensions In
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   Keep Bag Dimension In at requested Work Center
      if LR_RTE_ARBPL eq IR_RTE_ARBPL.
        move LT_BGDIM to ET_BGDIM_IN.
      endif.

***--------------------------------------------------------------------------------------
***   Calculate Bag Out
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_BGDIM.
            check LR_ADJ_BGDIM is bound.

            LR_ADJ_BGDIM->CALC_BGDIM_OUT( changing CT_BGDIM = LT_BGDIM ).

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   Stop calculating at requested Work Center
      if LR_RTE_ARBPL eq IR_RTE_ARBPL.
        move LT_BGDIM to ET_BGDIM_OUT.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_RHNDL_IN.

    data: LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP_BMAKE type ref to ZCL_VCXI_FBSR_BL_PSTEP_BMAKE.

    check ME->R_RTE_PRTE is bound.

***--------------------------------------------------------------------------------------
*** Get first Work Center
    read table ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    check SY-SUBRC eq 0.

***--------------------------------------------------------------------------------------
*** Get Information of Production Step Bag Making
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_BMAKE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_BL_PSTEP_BMAKE.
      endtry.
      if LR_BL_PSTEP_BMAKE is bound.
        move LR_BL_PSTEP_BMAKE->T_RHNDL_IN to RT_RHNDL_IN.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_SPVRE_MFMI.

    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMI type ref to /VCXI/CL_VKSR_SPVRE.
    data: LS_MFMI type ZVCXI_FBSR_S_MFMI.
    field-symbols: <T_MFMI> type standard table,
                   <S_MFMI> type ANY.


    check ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      move-corresponding <S_MFMI> to LS_MFMI.

***--------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                          IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMI
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMI to CT_SPVRE.
      move   ABAP_TRUE     to CF_MFI.

***   Set In Use
      LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Leading Object
      move LS_MFMI-MATNR                                     to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
      LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***   Set Setup Percentage for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI-MFISP                                     to LS_PARAM-ATFLV.
      move LS_MFMI-MFISP_UOM                                 to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI-MFICF                                     to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor Per for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI-MFICP                                     to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Purchase Flag
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI-PURCH                                     to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Costing Relevant
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_SANKA              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI-SANKA                                     to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Text
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI-TEXT                                      to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Vendor Number
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI-LIFNR                                     to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Fill MFMI PC
      ME->FILL_SPVRE_MFMI_P( IR_SPVRE = LR_SPVRE_MFMI
                             IS_BGDIM = LS_MFMI-S_BGDIM ).

***--------------------------------------------------------------------------------------
***   Add Price Scale Manager
      IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                              IT_PSCALE       = LS_MFMI-T_PSCALE
                                    changing  CT_SPVRE        = CT_SPVRE ).

    endloop.

  endmethod.
  method ROUND_MQTYI.

    data:  LF_DIMID     type         DIMID.

    SUPER->ROUND_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                        changing  CS_CALCV     = CS_CALCV ).

*** In Case of PC adjust upwards
*** Get Dimensions of Unit
    if CS_CALCV-CALCV_UOM is not initial.
      call function 'DIMENSION_GET_FOR_UNIT'
        exporting
          UNIT           = CS_CALCV-CALCV_UOM
        importing
          DIMENSION      = LF_DIMID
        exceptions
          UNIT_NOT_FOUND = 1
          others         = 2.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      if LF_DIMID eq 'AAAADL'.
        CS_CALCV-CALCV = CEIL( CS_CALCV-CALCV ).
      endif.
    endif.

  endmethod.
