
class ZCL_VCXI_FFSS_PR_FCONO definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_XCONO
  create public .

public section.

  interfaces ZIF_VCXI_FFSS_COMM_PREV .
  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_F0SS_ANCHO .
  interfaces ZIF_VCXI_FFSS_WIDIM .

  constants C_IPRVT_FF_FCONO type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_FCONO' ##NO_TEXT.
  constants C_PARID_DIKEY type /VCXI/VKS_PARID value 'ZVCXI_FF_DIKEY' ##NO_TEXT.

  methods GET_LOTMI
    returning
      value(RS_LOTMI) type ZVCXI_F0S_S_LOTMI
    raising
      /VCXI/CX_CKX .
  methods GET_FOPSL
    returning
      value(RF_FOPSL) type ZVCXI_FFS_FOPSL
    raising
      /VCXI/CX_CKX .
  methods IS_FSLAL
    returning
      value(RF_FSLAL) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_DIKEY
    importing
      !IS_DIKEY type ZVCXI_FFS_S_DIKEY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOOUT
    importing
      !IF_NOOUT type ZVCXI_XCS_NOOUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RHNDL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RHNDL) type ref to ZCL_VCXI_FFSS_PR_RHNDL
    raising
      /VCXI/CX_CKX .

  methods GET_DIKEY
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_DIKEY type /VCXI/VKSC_IEVNT value 'RECALC_DIKEY' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RLEOP type /VCXI/VKSC_IEVNT value 'RECALC_RLEOP' ##NO_TEXT.
  constants C_IEVNT_I_REQ_RHNDL_DEFAULT type /VCXI/VKSC_IEVNT value 'REQ_RHNDL_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_DIKEY_CHANGED type /VCXI/VKSC_IEVNT value 'DIKEY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIFPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOOUT_CHANGED type /VCXI/VKSC_IEVNT value 'NOOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TRWID_CHANGED type /VCXI/VKSC_IEVNT value 'TRWID_CHANGED' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIFPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIFPX' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.
  constants C_PARID_TRWID type /VCXI/VKS_PARID value 'ZVCXI_F0_TRWID' ##NO_TEXT.

  methods HANDLE_RECALC_RLEOP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DIKEY
    raising
      /VCXI/CX_CKX .
  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_PR_FCONO definition
class ZCL_VCXI_FFSS_PR_FCONO implementation.
  method GET_DIKEY.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).
    move LS_PARAM-ATFLV to ES_DIKEY-DIKEY.
    move LS_PARAM-UNIT  to ES_DIKEY-DIKEY_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOPSL.

    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OUTPUT type ref to ZCL_VCXI_FFSS_PR_OUTPUT.

***--------------------------------------------------------------------------------------
*** Get Provider Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_OUTPUT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OUTPUT.
      endtry.
    endif.
    if LR_PR_OUTPUT is not bound.
      raise exception type /VCXI/CX_CKX.
    endif.

***--------------------------------------------------------------------------------------
*** Get Flag from Output Element
    LR_PR_OUTPUT->GET_FOPSL( importing EF_FOPSL = RF_FOPSL ).

  endmethod.
  method GET_LOTMI.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID.
    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

*** Get Film Width and Forward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_FIWID ).
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).

*** Get Mimimum Lot Size
    RS_LOTMI = LR_BL_FIFPROP->GET_LOTMI( IS_FIWID = LS_FIWID ).

  endmethod.
  method GET_PRVDR_RHNDL.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_RHNDL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Roll Handling
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_RHNDL.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_RECALC_DIKEY.
        ME->HANDLE_RECALC_DIKEY( ).

      when C_IEVNT_I_RECALC_RLEOP.
        ME->HANDLE_RECALC_RLEOP( ).
      when C_IEVNT_I_REQ_RHNDL_DEFAULT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_WIDIM~C_IEVNT_O_RHNDL_DEFAULT_REQ ).

    endcase.

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_NOOUT      type        ZVCXI_XCS_NOOUT,
          LF_NOOUT_SIBL type        ZVCXI_XCS_NOOUT,
          LF_SETBY      type        /VCXI/VKSR_SETBY.
    data: LS_DIKEY      type        ZVCXI_FFS_S_DIKEY,
          LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_SIBL type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_CALC type        ZVCXI_F0S_S_FIWID,
          LS_CALCV      type        ZVCXI_XCS_S_CALCV.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_PARENT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG      type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO    type ref to ZCL_VCXI_FFSS_PR_FCONO.

***--------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    ME->GET_DIKEY( importing ES_DIKEY = LS_DIKEY
                             EF_SETBY = LF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get all sibling provider
    LR_GATE_PARENT = ME->R_GATE->GET_PARENT( ).
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      if LR_GATE_PARENT->IS_PARENT( IR_GATE_CHILD = LR_GATE ) ne ABAP_TRUE.
        delete LT_GATE.
      endif.
    endloop.
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.

*** Only go on if not set by user and not empty
    check LF_SETBY is initial                          or
          LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_CALC or
          ( LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
            LS_DIKEY-DIKEY eq 0 ).

*** Loop through all siblings
    loop at LT_GATE into LR_GATE.
      clear: LS_FIWID_SIBL, LF_NOOUT_SIBL.

      try.

***       Cast to FFG
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
          LR_PR_FFG->GET_FIWID( importing ES_FIWID = LS_FIWID_SIBL ).
          LF_NOOUT_SIBL = LR_PR_FFG->GET_NOOUT( ).

        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.

      if LR_PR_FFG is not bound.
        try.

***         Cast to Film Connection Out
            move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
            LR_PR_FCONO->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_FIWID_SIBL ).
            LF_NOOUT_SIBL = LR_PR_FCONO->GET_NOOUT( ).

          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_PR_FCONO.
        endtry.
      endif.

***   Calculate Film Width * Number of Outs
      LS_FIWID_SIBL-FIWID = LS_FIWID_SIBL-FIWID * LF_NOOUT_SIBL.

***   Sum siblings
      if LS_FIWID_CALC is initial.
        move LS_FIWID_SIBL to LS_FIWID_CALC.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_CALC-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_CALC-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID_SIBL-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID_SIBL-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID_CALC-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID_CALC-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID_CALC-FIWID_UOM ).
      endif.
    endloop.

    if LINES( LT_GATE ) gt 1. " not only me
      if LS_FIWID_CALC-FIWID gt 0.
***     Get own Film Width
        ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_FIWID ).
***     Get own Number of Outs
        LF_NOOUT = ME->GET_NOOUT( ).
***     Calculate own Film Width * Number of Outs
        LS_FIWID-FIWID = LS_FIWID-FIWID * LF_NOOUT.

***     Divide own value by sum of siblings
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting
            IF_CALCV_1     = LS_FIWID-FIWID
            IF_CALCV_UOM_1 = LS_FIWID-FIWID_UOM
            IF_CALCV_2     = LS_FIWID_CALC-FIWID
            IF_CALCV_UOM_2 = LS_FIWID_CALC-FIWID_UOM
            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
          importing
            EF_CALCV       = LS_CALCV-CALCV
            EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
      else.
        move 0 to LS_CALCV-CALCV.
      endif.
    else.
***   Use 100 if only one Output
      move 100 to LS_CALCV-CALCV.
    endif.

    LS_CALCV-CALCV = LS_CALCV-CALCV * 100.
    if LS_CALCV-CALCV gt 100.
      move 100 to LS_CALCV-CALCV.
    endif.

    LS_DIKEY-DIKEY = LS_CALCV-CALCV.

*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_RLEOP.

    data: LF_IMFXC type ZVCXI_XCSP_IMFXC.
    data: LS_RHNDL type ZVCXI_FFSR_S_RHNDL,
          LS_RLEOP type ZVCXI_FFS_S_RLEOP.


***--------------------------------------------------------------------------------------
*** Get Roll Handling In of "connected" Routing Supervisor
    data(LT_GATE_RTESPV) = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                                  IF_INUSE  = ABAP_TRUE ).
    if LT_GATE_RTESPV is not initial.
      data(LR_PR_RTESPV_XCONO) = cast ZCL_VCXI_F0SR_PR_RTESPV( LT_GATE_RTESPV[ 1 ]->R_CLSPR ).
      data(LR_PR_RTESPV_XCONI) = LR_PR_RTESPV_XCONO->GET_PRVDR_RTESPV_BY_XCONO( exporting IR_GATE_XCONO = ME->R_GATE
                                                                                importing EF_IMFXC      = LF_IMFXC ).
    endif.

*** Get corresponding Roll Handling
    if LR_PR_RTESPV_XCONI is bound and
       LR_PR_RTESPV_XCONI is instance of ZIF_VCXI_FFSR_RTESPV_RHNDL_IN.
      LS_RHNDL = cast ZIF_VCXI_FFSR_RTESPV_RHNDL_IN( LR_PR_RTESPV_XCONI )->GET_RHNDL_IN( IF_IMFXC = LF_IMFXC ).
    endif.

    data(LR_PR_RHNDL) = ME->GET_PRVDR_RHNDL( ).
    check LR_PR_RHNDL is bound.

*** Update Roll Length for Optimization
    if LS_RHNDL is not initial.
      LR_PR_RHNDL->SET_RLEOP( IS_RLEOP = LS_RHNDL-S_RLEOP ).
    else.
      LR_PR_RHNDL->SET_RLEOP( ).  "Just active it w/o Roll Length
    endif.

  endmethod.
  method IS_FSLAL.

    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    check LR_BL_FIFPROP is bound.

*** Get Slitting Allowed
    RF_FSLAL = LR_BL_FIFPROP->IS_FSLAL( ).

  endmethod.
  method SET_DIKEY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).

    move IS_DIKEY-DIKEY     to LS_PARAM-ATFLV.
    move IS_DIKEY-DIKEY_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIKEY_CHANGED ).
    endif.

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).

    move IF_FIFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIFPX_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_NOOUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).

    move IF_NOOUT           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_ANCHO~ADD_XCON.

    move ME->R_GATE to RR_GATE.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS      type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.


*** Super
    SUPER->ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD( IT_GATE = IT_GATE ).

***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Forward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LF_FISTX type        ZVCXI_FFS_FISTX.
    data: LS_TREQW      type        ZVCXI_FFS_S_TREQW,
          LS_TREQW_NEXT type        ZVCXI_FFS_S_TREQW,
          LS_FITIN      type        ZVCXI_FFS_S_FITIN,
          LS_FITIN_NEXT type        ZVCXI_FFS_S_FITIN,
          LS_FITEX      type        ZVCXI_FFS_S_FITEX,
          LS_FITEX_NEXT type        ZVCXI_FFS_S_FITEX,
          LS_SURWT      type        ZVCXI_F0S_S_SURWT,
          LS_SURWT_NEXT type        ZVCXI_F0S_S_SURWT,
          LS_RELEN      type        ZVCXI_FFS_S_RELEN,
          LS_RELEN_NEXT type        ZVCXI_FFS_S_RELEN.
    data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT        type ref to ZIF_VCXI_FFSS_COMM_NEXT,
          LR_BL_FISTRUCT      type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FISTRUCT_NEXT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT,
          LR_BL_FIFPROP       type ref to ZCL_VCXI_FFSS_BL_FIFPROP,
          LR_BL_FIFPROP_NEXT  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.


***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***------------------------------------------------------------------------------------------------
***   Get largest Trim Requirement
      LR_COMM_NEXT->GET_TREQW( importing ES_TREQW = LS_TREQW_NEXT ).
      if LS_TREQW is initial or
         ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_TREQW_NEXT-TREQW
                                                      IF_CALCV_UOM_1 = LS_TREQW_NEXT-TREQW_UOM
                                                      IF_CALCV_2     = LS_TREQW-TREQW
                                                      IF_CALCV_UOM_2 = LS_TREQW-TREQW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
        move LS_TREQW_NEXT to LS_TREQW.
      endif.

***   Get Sum of Internal Thickness
      LR_COMM_NEXT->GET_FITIN( importing ES_FITIN = LS_FITIN_NEXT ).
      if LS_FITIN_NEXT is not initial.
        if LS_FITIN is initial.
          move LS_FITIN_NEXT to LS_FITIN.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITIN_NEXT-FITIN
                                                              IF_CALCV_UOM_1 = LS_FITIN_NEXT-FITIN_UOM
                                                              IF_CALCV_2     = LS_FITIN-FITIN
                                                              IF_CALCV_UOM_2 = LS_FITIN-FITIN_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITIN-FITIN_UOM
                                                    importing EF_CALCV       = LS_FITIN-FITIN
                                                              EF_CALCV_UOM   = LS_FITIN-FITIN_UOM ).

        endif.
      endif.

***   Get Sum of External Thickness
      LR_COMM_NEXT->GET_FITEX( importing ES_FITEX = LS_FITEX_NEXT ).
      if LS_FITEX_NEXT is not initial.
        if LS_FITEX is initial.
          move LS_FITEX_NEXT to LS_FITEX.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FITEX_NEXT-FITEX
                                                              IF_CALCV_UOM_1 = LS_FITEX_NEXT-FITEX_UOM
                                                              IF_CALCV_2     = LS_FITEX-FITEX
                                                              IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_FITEX-FITEX_UOM
                                                    importing EF_CALCV       = LS_FITEX-FITEX
                                                              EF_CALCV_UOM   = LS_FITEX-FITEX_UOM ).

        endif.
      endif.

***   Get Sum of Surface Weight
      LR_COMM_NEXT->GET_SURWT( importing ES_SURWT = LS_SURWT_NEXT ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Get Repeat Length if not different
      LR_COMM_NEXT->GET_RELEN( importing ES_RELEN = LS_RELEN_NEXT ).
      if LS_RELEN_NEXT-RELEN is not initial.
        if LS_RELEN is initial.
          move LS_RELEN_NEXT to LS_RELEN.
        else.
          if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_RELEN_NEXT-RELEN
                                                          IF_CALCV_UOM_1 = LS_RELEN_NEXT-RELEN_UOM
                                                          IF_CALCV_2     = LS_RELEN-RELEN
                                                          IF_CALCV_UOM_2 = LS_RELEN-RELEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ).
***         Clear Repeat if different
            clear LS_RELEN-RELEN.
          endif.
        endif.
      endif.

***   Combine Film Structure
      clear LR_BL_FISTRUCT_NEXT.
      LR_COMM_NEXT->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      if LR_BL_FISTRUCT is not bound.
        move LR_BL_FISTRUCT_NEXT to LR_BL_FISTRUCT.
      else.
        LR_BL_FISTRUCT->ADD_BL_FISTRUCT( IR_BL_FISTRUCT = LR_BL_FISTRUCT_NEXT ).
      endif.

***   Combine Film Forward Property
      clear LR_BL_FIFPROP_NEXT.
      LR_COMM_NEXT->GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      if LR_BL_FIFPROP is not bound.
        move LR_BL_FIFPROP_NEXT to LR_BL_FIFPROP.
      else.
        LR_BL_FIFPROP->MERGE( IR_BL_FIFPROP = LR_BL_FIFPROP_NEXT ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Trim Requirement on the Width
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

*** Forward Internal Film Thickness
    ME->SET_FITIN( IS_FITIN = LS_FITIN ).

*** Forward External Film Thickness
    ME->SET_FITEX( IS_FITEX = LS_FITEX ).

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Repeat Length
    ME->SET_RELEN( IS_RELEN = LS_RELEN ).

*** Forward Film Structure XML
    if LR_BL_FISTRUCT is bound.
      LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    else.
      clear LF_FISTX.
    endif.
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

*** Forward Film Forward Property XML
    if LR_BL_FIFPROP is bound.
      ME->SET_FIFPX( IF_FIFPX = LR_BL_FIFPROP->GET_FIFPX( ) ).
    else.
      ME->SET_FIFPX( IF_FIFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LF_NOOUT  type ZVCXI_XCS_NOOUT.
    data: LT_FIRNG  type ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_FIRNG>  type ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing EF_SETBY      = EF_SETBY
                                                     ER_BL_FIFPROP = ER_BL_FIFPROP ).

***--------------------------------------------------------------------------------------
*** Get Number of Outs
    LF_NOOUT = ME->GET_NOOUT( ).

    if LF_NOOUT          ne 0 and
       ME->GET_FOPSL(  ) ne ABAP_TRUE.
      move ER_BL_FIFPROP->T_FIRNG to LT_FIRNG.
      loop at LT_FIRNG assigning <S_FIRNG>.
***     Divide Film Width Minimum and Maximum by Number of Outs
        divide <S_FIRNG>-FIWMI by LF_NOOUT.
        divide <S_FIRNG>-FIWMA by LF_NOOUT.

***     Multiply Minimum Lot Size by Number of Outs
        multiply <S_FIRNG>-LOTMI by LF_NOOUT.
      endloop.
    else.
      clear LT_FIRNG.
    endif.
    ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).

***--------------------------------------------------------------------------------------
*** Get new Film Forward Property XML
    if EF_FIFPX is requested.
      EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing EF_FISTX = EF_FISTX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ES_FITEX
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ES_FITIN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.

*** Get Repeat Length (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN( importing ES_RELEN = ES_RELEN
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ES_SURWT
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

*** Get Trim Requirement on Width (Inbound)
    ME->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ES_TREQW
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIBPX.

    data: LF_NOOUT             type       ZVCXI_XCS_NOOUT.
    data: LS_DIKEY             type       ZVCXI_FFS_S_DIKEY.
    data: LT_CSPLIT            type       ZVCXI_FFSS_TT_CSPLIT.
    field-symbols: <S_CSPLIT>  type       ZVCXI_FFSS_S_CSPLIT.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing ER_BL_FIBPROP = ER_BL_FIBPROP ).

***--------------------------------------------------------------------------------------
*** Get Cost Split Distribution (Outbound)
    move ER_BL_FIBPROP->T_CSPLIT to LT_CSPLIT.

*** Apply Distribution Key
    ME->GET_DIKEY( importing ES_DIKEY = LS_DIKEY ).
    loop at LT_CSPLIT assigning <S_CSPLIT>.
      <S_CSPLIT>-S_DCSPL-DCSPL = <S_CSPLIT>-S_DCSPL-DCSPL * ( LS_DIKEY-DIKEY / 100 ).
    endloop.

*** Increase Component Ratio of Cost Split Distribution based on Number of Outs
    LF_NOOUT = ME->GET_NOOUT( ).
    loop at LT_CSPLIT assigning <S_CSPLIT>.
      multiply <S_CSPLIT>-COMPR by LF_NOOUT.
    endloop.

*** Set Cost Split Distribution (Inbound)
    ER_BL_FIBPROP->SET_CSPLIT( IT_CSPLIT = LT_CSPLIT ).

***--------------------------------------------------------------------------------------
*** Return Film Backward Property XML (Inbound)
    if EF_FIBPX is requested.
      move ER_BL_FIBPROP->GET_FIBPX( ) to EF_FIBPX.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIFPX ).
    move LS_PARAM-STRNG to EF_FIFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property Instance
    if ER_BL_FIFPROP is requested.
      ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( IF_FIFPX = EF_FIFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    ES_FIWID-FIWID *= ME->GET_NOOUT( ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS.

***------------------------------------------------------------------------------------------------
*** Get Number of Ups (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                                                     EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    EF_NOUPS *= ME->GET_NOOUT( ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_WIDIM~GET_MAKTX.

    ME->GET_MAKTX( importing EF_MAKTX = RF_MAKTX ).

  endmethod.
  method ZIF_VCXI_FFSS_WIDIM~GET_RHNDL_DFLT.
*** Default must be "static" to ensure S&U remains valid and can thereby not depend on the Work Center (SFG Default)

    data: LF_IMFXC type ZVCXI_XCSP_IMFXC.
    data: LS_RHNDL type ZVCXI_FFSR_S_RHNDL.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.


***--------------------------------------------------------------------------------------
*** Get Default Values based on Ship-to of Connection Out
    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    RS_RHNDL_DFLT = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_DFLT_FG( IF_WERKS = ME->GET_WERKS( )
                                                           IF_KUNWE = ME->GET_KUNWE( ) ).

***--------------------------------------------------------------------------------------
*** Get Roll Handling In of "connected" Routing Supervisor
    data(LT_GATE_RTESPV) = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                                  IF_INUSE  = ABAP_TRUE ).
    check LT_GATE_RTESPV is not initial.
    data(LR_PR_RTESPV_XCONO) = cast ZCL_VCXI_F0SR_PR_RTESPV( LT_GATE_RTESPV[ 1 ]->R_CLSPR ).
    data(LR_PR_RTESPV_XCONI) = LR_PR_RTESPV_XCONO->GET_PRVDR_RTESPV_BY_XCONO( exporting IR_GATE_XCONO = ME->R_GATE
                                                                              importing EF_IMFXC      = LF_IMFXC ).
    check LR_PR_RTESPV_XCONI is bound.

*** Get corresponding Roll Handling
    if LR_PR_RTESPV_XCONI is instance of ZIF_VCXI_FFSR_RTESPV_RHNDL_IN.
      LS_RHNDL = cast ZIF_VCXI_FFSR_RTESPV_RHNDL_IN( LR_PR_RTESPV_XCONI )->GET_RHNDL_IN( IF_IMFXC = LF_IMFXC ).
    endif.

*** Roll Handling not found by RTESPV -> use current values to avoid extra events
    if LS_RHNDL is initial.
      data(LR_PR_RHNDL) = ME->GET_PRVDR_RHNDL( ).
      if LR_PR_RHNDL is bound.
        LR_PR_RHNDL->GET_RWSID( importing EF_RWSID = LS_RHNDL-RWSID ).
        LR_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = LS_RHNDL-RWDIR ).
        LR_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = LS_RHNDL-EYEMP ).
      endif.
    endif.

*** Winding Information
    RS_RHNDL_DFLT-RWSID = LS_RHNDL-RWSID.
    RS_RHNDL_DFLT-RWDIR = LS_RHNDL-RWDIR.
    RS_RHNDL_DFLT-EYEMP = LS_RHNDL-EYEMP.

  endmethod.
  method ZIF_VCXI_FFSS_WIDIM~GET_WISWG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = data(LR_BL_FIFPROP) ).
    check LR_BL_FIFPROP is bound.

*** Get Film Width and Surface Weight (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = data(LS_FIWID) ).
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = data(LS_SURWT) ).

***--------------------------------------------------------------------------------------
*** Calculate Winding Surface Weight
    RS_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = LS_SURWT
                                         IS_FIWID = LS_FIWID
                                         IS_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = LS_FIWID ) ).

  endmethod.
  method ZIF_VCXI_FFSS_WIDIM~GET_WITHI.

*** Get Film Forward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = data(LR_BL_FIFPROP) ).
    check LR_BL_FIFPROP is bound.

*** Get Film Width and Thickness (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = data(LS_FIWID) ).
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = data(LS_FITIN) ).

*** Get Winding Thickness
    RS_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = LS_FIWID
                                         IS_FITIN = LS_FITIN ).

  endmethod.
  method ZIF_VCXI_FFSS_WIDIM~GET_WIWID.

*** Get Film Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = data(LR_BL_FIFPROP) ).
    check LR_BL_FIFPROP is bound.

*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = data(LS_FIWID) ).

*** Get Winding Width
    RS_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = LS_FIWID ).

  endmethod.
