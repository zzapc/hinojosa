
class ZCL_VCXI_P0SS_CUST_SCSTR definition
  public
  create protected .

public section.

  types:
    YT_TC380 type standard table of ZVCXI_P0S_TC380 with default key .
  types:
    YT_TC380T type standard table of ZVCXI_P0S_TC380T with default key .
  types:
    YT_TC381 type standard table of ZVCXI_P0S_TC381 with default key .
  types:
    YT_TC382 type standard table of ZVCXI_P0S_TC382 with default key .

  constants C_TSCOR_PRODUCT type ZVCXI_P0SS_TSCOR value 'P' ##NO_TEXT.
  constants C_SCSOP_SPLIT type ZVCXI_P0S_SCSOP value 'SPLIT' ##NO_TEXT.
  constants C_SSTRC_RELATIVE type ZVCXI_P0SS_SSTRC value 'R' ##NO_TEXT.
  constants C_SSTRC_ABSOLUTE type ZVCXI_P0SS_SSTRC value 'A' ##NO_TEXT.
  constants C_TSCOR_STD type ZVCXI_P0SS_TSCOR value '/' ##NO_TEXT.
  constants C_SCSOP_NONE type ZVCXI_P0S_SCSOP value 'NONE' ##NO_TEXT.

  class-methods ALLOC_TRIM
    importing
      !IF_PARID type /VCXI/VKS_PARID
      !IS_TRITO type ZVCXI_P0SS_S_TRITO
      !IF_PTYPE type ZVCXI_P0S_PTYPE
    exporting
      !ES_TRILT type ZVCXI_P0SS_S_TRILT
      !ES_TRIRB type ZVCXI_P0SS_S_TRIRB
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_INDIC
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IT_INDIC type ZVCXI_P0SS_TT_INDIC
    exporting
      !ET_INDIC_V type ZVCXI_P0SS_TT_INDIC
      !ET_INDIC_I type ZVCXI_P0SS_TT_INDIC
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_SCSTR_SCORP
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_SSTRC type ZVCXI_P0SS_SSTRC
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods CONV_SCSTR_TO_EXT
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_UOM type UNIT
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR_EXT
    raising
      /VCXI/CX_CKX .
  class-methods CONV_SCSTR_TO_INT
    importing
      !IF_SCSTR_EXT type ZVCXI_P0SS_SCSTR_EXT
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  class-methods FILTER_TAPE_SCSTR
    importing
      !IT_GATE_TAPE type /VCXI/VKSR_TT_GATE
    changing
      !CT_GATE_SCSTR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  class-methods GET_DEFAULT_SCSOP
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IT_VALID_SCSOP type ZVCXI_P0SS_TT_SCSOP
      !IF_WERKS type WERKS_D
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_ORIEN type ZVCXI_P0S_ORIEN
    returning
      value(RF_SCSOP) type ZVCXI_P0S_SCSOP
    raising
      /VCXI/CX_CKX .
  class-methods GET_LAST_SCORE
    importing
      !IT_GATE_SCORE type /VCXI/VKSR_TT_GATE
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    returning
      value(RT_GATE_SCORE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCSOP_DESCR
    importing
      !IF_SCSOP type ZVCXI_P0S_SCSOP
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCSTR_SCORP
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_SSTRC type ZVCXI_P0SS_SSTRC
      !IT_GATE_SCORE type /VCXI/VKSR_TT_GATE
      !IF_UOM type UNIT
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    returning
      value(RT_SCSTR_SCORP) type ZVCXI_P0SS_TT_SCSTR_SCORP
    raising
      /VCXI/CX_CKX .
  class-methods GET_SCSTR_TAPOS
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_SSTRC type ZVCXI_P0SS_SSTRC
      !IT_GATE_TAPE type /VCXI/VKSR_TT_GATE
      !IF_UOM type UNIT
    returning
      value(RT_SCSTR_TAPOS) type ZVCXI_P0SS_TT_SCSTR_TAPOS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INITIAL_SCSTR_VALUE
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_UOM type UNIT
    returning
      value(RF_INITIAL_VALUE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods GET_SUM_SCSTR
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
      !IF_UOM type UNIT
      !IF_SSTRC type ZVCXI_P0SS_SSTRC
    returning
      value(RS_SCORP_SUM) type ZVCXI_P0SS_S_SCORP
    raising
      /VCXI/CX_CKX .
  class-methods GET_TSCOR_INDIC
    importing
      !IT_GATE_SCORE type /VCXI/VKSR_TT_GATE
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    returning
      value(RT_INDIC) type ZVCXI_P0SS_TT_INDIC
    raising
      /VCXI/CX_CKX .
  class-methods GET_UNASSIGNED_INDIC
    importing
      !IF_SCSTR type ZVCXI_P0SS_SCSTR
    changing
      !CT_INDIC type ZVCXI_P0SS_TT_INDIC
    raising
      /VCXI/CX_CKX .
protected section.

  class-data T_TC380 type YT_TC380 .
  class-data T_TC380T type YT_TC380T .
  class-data T_TC381 type YT_TC381 .
  class-data T_TC382 type YT_TC382 .
  constants C_PTRLT_100 type ZVCXI_P0S_PTRLT value 100. "#EC NOTEXT

  class-methods GET_TTAPE_INDIC
    importing
      !IT_GATE_TAPE type /VCXI/VKSR_TT_GATE
    returning
      value(RT_INDIC) type ZVCXI_P0SS_TT_INDIC
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_CUST_SCSTR definition
class ZCL_VCXI_P0SS_CUST_SCSTR implementation.
method ALLOC_TRIM.

  data: LS_TC382 type ZVCXI_P0S_TC382.

  check IS_TRITO-TRITO     is not initial and
        IS_TRITO-TRITO_UOM is not initial.

***------------------------------------------------------------------------------------------------
*** Get the right allocation of Trim
  read table T_TC382 into LS_TC382 with key PARID = IF_PARID
                                            PTYPE = IF_PTYPE.

  if SY-SUBRC ne 0.
    read table T_TC382 into LS_TC382 with key PARID = IF_PARID.
  endif.
  check SY-SUBRC = 0.


*** Calculate trim allocation on left/top
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_TRITO-TRITO
                                                      IF_CALCV_UOM_1 = IS_TRITO-TRITO_UOM
                                                      IF_CALCV_2     = LS_TC382-PTRLT
                                                      IF_CALCV_UOM_2 = LS_TC382-PTRLT_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                      IF_UOM         = IS_TRITO-TRITO_UOM
                                            importing EF_CALCV       = ES_TRILT-TRILT
                                                      EF_CALCV_UOM   = ES_TRILT-TRILT_UOM ).
  if LS_TC382-PTRLT eq C_PTRLT_100.
    exit.
  else.
    ES_TRILT-TRILT = ceil( ES_TRILT-TRILT ).
  endif.
*** Calculate trim allocation on right/bottom
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_TRITO-TRITO
                                                      IF_CALCV_UOM_1 = IS_TRITO-TRITO_UOM
                                                      IF_CALCV_2     = ES_TRILT-TRILT
                                                      IF_CALCV_UOM_2 = ES_TRILT-TRILT_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                      IF_UOM         = IS_TRITO-TRITO_UOM
                                            importing EF_CALCV       = ES_TRIRB-TRIRB
                                                      EF_CALCV_UOM   = ES_TRIRB-TRIRB_UOM ).

endmethod.
method CHECK_INDIC.

  data: LF_SCSTR_VALUE type          /VCXI/CKX_STRING,
        LF_SEPERATOR   type          ABAP_BOOL,
        LF_INDIC       type          CHAR30.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP, LF_SEPERATOR.

***------------------------------------------------------------------------------------------------
*** Get value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
      catch CX_SY_CONVERSION_OVERFLOW.
        LF_SEPERATOR = ABAP_TRUE.
      catch CX_SY_CONVERSION_NO_NUMBER .
        LF_SEPERATOR = ABAP_TRUE.
    endtry.

    check LF_SEPERATOR eq ABAP_TRUE.
    move LF_SCSTR_VALUE to LF_INDIC.

    read table IT_INDIC with key TABLE_LINE = LF_INDIC transporting no fields.
    if SY-SUBRC eq 0.
      collect LF_INDIC into ET_INDIC_V.
    else.
      collect LF_INDIC into ET_INDIC_I.
    endif.
  endloop.

endmethod.
method CHECK_SCSTR_SCORP.
*** 0 = Score Positions are correct
*** 1 = Score Positions are not correct

  data:  LF_SCSTR_VALUE  type          /VCXI/CKX_STRING,
         LF_SCORP        type          ZVCXI_P0SS_SCORP,
         LF_SCORP_PREV   type          ZVCXI_P0SS_SCORP.
  data:  LT_SCSTR_VALUE  type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
***------------------------------------------------------------------------------------------------
*** Verify Score Position (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LF_SCORP.

        case IF_SSTRC.
***       Relative Position needs to be greater than 0
          when C_SSTRC_RELATIVE.
            if LF_SCORP ge 0.
              move 0 to RF_RESULT.
            else.
              move 1 to RF_RESULT.
            endif.

***       Absolute Position needs to be greater than previous
          when C_SSTRC_ABSOLUTE.
            if LF_SCORP ge LF_SCORP_PREV.
              move 0 to RF_RESULT.
            else.
              move 1 to RF_RESULT.
            endif.
        endcase.

***     Keep as Previous Position
        move LF_SCORP to LF_SCORP_PREV.

      catch CX_SY_CONVERSION_OVERFLOW.
        continue.
      catch CX_SY_CONVERSION_NO_NUMBER .
        continue.
    endtry.

***------------------------------------------------------------------------------------------------
*** Check if Result Code is still valid
    if RF_RESULT gt 0.
      exit.
    endif.
  endloop.

endmethod.
method CLASS_CONSTRUCTOR.

*** Get Score Operation
  select *
    from ZVCXI_P0S_TC380
    into table T_TC380.

*** Get Score Operation Description
  select *
    from ZVCXI_P0S_TC380T
    into table T_TC380T
    where LANGU = SY-LANGU.

*** Get Score Operation Default
  select *
    from ZVCXI_P0S_TC381
    into table T_TC381.

*** Get Score Trim Allocation
  select *
    from ZVCXI_P0S_TC382
    into table T_TC382.

endmethod.
method CONV_SCSTR_TO_EXT.

  data: LF_SCSTR_VALUE type          CHAR30.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP.

***------------------------------------------------------------------------------------------------
*** Get value in right Unit and external format
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
        write LS_SCORP-SCORP to LF_SCSTR_VALUE unit IF_UOM.
      catch CX_SY_CONVERSION_OVERFLOW.
      catch CX_SY_CONVERSION_NO_NUMBER .
    endtry.

    condense LF_SCSTR_VALUE no-gaps.

    if RF_SCSTR is initial.
      move LF_SCSTR_VALUE to RF_SCSTR.
    else.
      concatenate RF_SCSTR
                  LF_SCSTR_VALUE
             into RF_SCSTR separated by SPACE.
    endif.
  endloop.

endmethod.
method CONV_SCSTR_TO_INT.

  data: LF_SCSTR_VALUE type          CHAR30.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR_EXT at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP.

***------------------------------------------------------------------------------------------------
*** Get value in internal format
    try.
        call function 'RSDS_CONVERT_NUMBER'
          exporting
            INPUT  = LF_SCSTR_VALUE
            MYDEZI = ' '
          importing
            OUTPUT = LS_SCORP-SCORP.

        move LS_SCORP-SCORP to LF_SCSTR_VALUE.

      catch CX_ROOT.
    endtry.

    condense LF_SCSTR_VALUE no-gaps.

    if RF_SCSTR is initial.
      move LF_SCSTR_VALUE to RF_SCSTR.
    else.
      concatenate RF_SCSTR
                  LF_SCSTR_VALUE
             into RF_SCSTR separated by SPACE.
    endif.
  endloop.

endmethod.
method FILTER_TAPE_SCSTR.

  data: LF_SCSTR       type          ZVCXI_P0SS_SCSTR,
        LF_SCSTR_VALUE type          /VCXI/CKX_STRING,
        LF_SEPERATOR   type          ABAP_BOOL,
        LF_INDIC       type          CHAR30,
        LF_VALID       type          ABAP_BOOL.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING,
        LT_INDIC       type          ZVCXI_P0SS_TT_INDIC.
  data: LR_GATE_SCSTR  type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_SCSTR    type ref to   ZCL_VCXI_P0SS_PR_SCSTR.

***------------------------------------------------------------------------------------------------
*** Collect all needed Tape Types
  LT_INDIC = GET_TTAPE_INDIC( IT_GATE_TAPE = IT_GATE_TAPE ).

***------------------------------------------------------------------------------------------------
*** Filter Existing Score Strings
  loop at CT_GATE_SCSTR into LR_GATE_SCSTR.
    clear: LT_SCSTR_VALUE, LF_SCSTR, LF_VALID.

    try.
        move LR_GATE_SCSTR->R_CLSPR ?to LR_PR_SCSTR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCSTR.
    endtry.

*** No Score String -> Delete line
    if LR_PR_SCSTR is not bound.
      delete CT_GATE_SCSTR.
      continue.
    endif.

*** No Sheet Procurement Needed!
    if LR_PR_SCSTR->GET_SCSOP( ) eq ZCL_VCXI_P0SS_BL_SCSOP_SHTPR=>C_SCSOP_SHTPR.
      delete CT_GATE_SCSTR.
      continue.
    endif.

    move LR_PR_SCSTR->GET_SCSTR( ) to LF_SCSTR.
***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
    split LF_SCSTR at SPACE into table LT_SCSTR_VALUE.

    loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
      clear: LS_SCORP, LF_SEPERATOR.

***------------------------------------------------------------------------------------------------
***   Get value in right Unit (continue if it is a sperator)
      try.
          move LF_SCSTR_VALUE to LS_SCORP-SCORP.
        catch CX_SY_CONVERSION_OVERFLOW.
          LF_SEPERATOR = ABAP_TRUE.
        catch CX_SY_CONVERSION_NO_NUMBER .
          LF_SEPERATOR = ABAP_TRUE.
      endtry.

      check LF_SEPERATOR eq ABAP_TRUE.
      move LF_SCSTR_VALUE to LF_INDIC.

      read table LT_INDIC with key TABLE_LINE = LF_INDIC transporting no fields.
      if SY-SUBRC eq 0.
        LF_VALID = ABAP_TRUE.
        exit.
      endif.
    endloop.

*** Delete Score String if there is no Tape specified
    check LF_VALID ne ABAP_TRUE.
    delete CT_GATE_SCSTR.

  endloop.

endmethod.
method GET_DEFAULT_SCSOP.

  data: LS_TC381 type          ZVCXI_P0S_TC381.
  data: LT_TC381 type table of ZVCXI_P0S_TC381.

  do.
***------------------------------------------------------------------------------------------------
*** Fill local table fresh with all entries
    move T_TC381 to LT_TC381.

***------------------------------------------------------------------------------------------------
*** Apply different Access Sequences for Score String Operation
    case SY-INDEX.
      when 1.
***     Find all valid Entries with Plant, Product Type, Orientation, Score Category
        delete LT_TC381 where WERKS ne IF_WERKS
                         or   PTYPE ne IF_PTYPE
                         or   ORIEN ne IF_ORIEN
                         or   CSCOR ne IF_CSCOR.
      when 2.
***     Find all valid Entries with Product Type, Orientation, Score Category
        delete LT_TC381 where WERKS is not initial
                         or   PTYPE ne IF_PTYPE
                         or   ORIEN ne IF_ORIEN
                         or   CSCOR ne IF_CSCOR.
      when 3.
***     Find all valid Entries with Plant, Product Type, Score Category
        delete LT_TC381 where WERKS ne IF_WERKS
                         or   PTYPE ne IF_PTYPE
                         or   ORIEN is not initial
                         or   CSCOR ne IF_CSCOR.
      when 4.
***     Find all valid Entries with Product Type, Score Category
        delete LT_TC381 where WERKS is not initial
                         or   PTYPE ne IF_PTYPE
                         or   ORIEN is not initial
                         or   CSCOR ne IF_CSCOR.
      when 5.
***     Find all valid Entries with Plant, Score Category
        delete LT_TC381 where WERKS ne IF_WERKS
                         or   PTYPE is not initial
                         or   ORIEN is not initial
                         or   CSCOR ne IF_CSCOR.
      when 6.
***     Find all valid Entries with Score Category
        delete LT_TC381 where WERKS is not initial
                         or   PTYPE is not initial
                         or   ORIEN is not initial
                         or   CSCOR ne IF_CSCOR.

      when others.
        exit.
    endcase.

***------------------------------------------------------------------------------------------------
*** Check if Operations are valid
    loop at LT_TC381 into LS_TC381.
      read table IT_VALID_SCSOP with key CSCOR = IF_CSCOR
                                         SCSOP = LS_TC381-SCSOP
                                transporting no fields.
      check SY-SUBRC ne 0.
      delete LT_TC381.
    endloop.

*** If default was found - stop looking
    if lines( LT_TC381 ) ge 1.
      exit.
    endif.
  enddo.


***------------------------------------------------------------------------------------------------
*** Return Default Value
  read table LT_TC381 into LS_TC381 index 1.
  check SY-SUBRC eq 0.
  move LS_TC381-SCSOP to RF_SCSOP.

endmethod.
method GET_INITIAL_SCSTR_VALUE.

  data: LF_SCSTR_VALUE type          /VCXI/CKX_STRING.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP.

***------------------------------------------------------------------------------------------------
*** Get value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
        move IF_UOM         to LS_SCORP-SCORP_UOM.
      catch CX_SY_CONVERSION_OVERFLOW.
        continue.
      catch CX_SY_CONVERSION_NO_NUMBER .
        continue.
    endtry.

    check LS_SCORP-SCORP is initial.
    RF_INITIAL_VALUE = ABAP_TRUE.
    exit.

  endloop.

endmethod.
method GET_LAST_SCORE.

  data: LF_CSCOR             type          ZVCXI_P0SS_CSCOR,
        LF_LAST              type          I.
  data: LT_GATE_SCORE        type          /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SCORE        type ref to   /VCXI/CL_VKSR_GATE,
        LR_GATE_SCORE_FIRST  type ref to   /VCXI/CL_VKSR_GATE,
        LR_GATE_SCORE_LAST   type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_SCORE          type ref to   ZCL_VCXI_P0SS_PR_SCORE.

***------------------------------------------------------------------------------------------------
*** Check all Scores
  loop at IT_GATE_SCORE into LR_GATE_SCORE.

    try.
        move LR_GATE_SCORE->R_CLSPR ?to LR_PR_SCORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCORE.
    endtry.

    check LR_PR_SCORE is bound.
    LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = LF_CSCOR ).
*** Collect only right Score Category
    check IF_CSCOR eq LF_CSCOR.
    collect LR_GATE_SCORE into LT_GATE_SCORE.

  endloop.

*** Sort Scores
  check LT_GATE_SCORE is not initial.
  read table LT_GATE_SCORE into LR_GATE_SCORE_FIRST index 1.
  check LR_GATE_SCORE_FIRST is bound.
  LR_GATE_SCORE_FIRST->SORT_GATE( changing CT_GATE = LT_GATE_SCORE ).


*** Find Last (Could be scores from different Components!)
  loop at LT_GATE_SCORE into LR_GATE_SCORE.

*** Different Parents -> save last Score
    if LR_GATE_SCORE->GET_PARENT( ) ne LR_GATE_SCORE_FIRST->GET_PARENT( ).
      append LR_GATE_SCORE_LAST to RT_GATE_SCORE.
    endif.

*** Save Current as Last Score
    move LR_GATE_SCORE to LR_GATE_SCORE_LAST.
  endloop.
  append LR_GATE_SCORE_LAST to RT_GATE_SCORE.

endmethod.
method GET_SCSOP_DESCR.

  data: LS_TC380T type ZVCXI_P0S_TC380T.

  read table T_TC380T into LS_TC380T with key SCSOP = IF_SCSOP
                                              LANGU = SY-LANGU.
  if SY-SUBRC ne 0.
    read table T_TC380T into LS_TC380T with key SCSOP = IF_SCSOP
                                                LANGU = 'EN'.
  endif.
  check SY-SUBRC = 0.

  move LS_TC380T-DESCR to RF_DESCR.

endmethod.
method GET_SCSTR_SCORP.

  data:          LF_SCSTR_VALUE  type          /VCXI/CKX_STRING,
                 LF_SEPERATOR    type          ABAP_BOOL,
                 LF_INDIC        type          CHAR30.
  data:          LS_SCORP        type          ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_SUM    type          ZVCXI_P0SS_S_SCORP.
  data:          LT_SCSTR_VALUE  type table of /VCXI/CKX_STRING,
                 LT_INDIC        type          ZVCXI_P0SS_TT_INDIC.
  field-symbols: <S_SCSTR_SCORP> type          ZVCXI_P0SS_S_SCSTR_SCORP.

***------------------------------------------------------------------------------------------------
*** Collect all needed Score Types
  LT_INDIC = GET_TSCOR_INDIC( IT_GATE_SCORE = IT_GATE_SCORE
                              IF_CSCOR      = IF_CSCOR ).

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LF_SEPERATOR.

***------------------------------------------------------------------------------------------------
*** Get relative value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
        move IF_UOM         to LS_SCORP-SCORP_UOM.

        if IF_SSTRC eq C_SSTRC_RELATIVE.
          if  LS_SCORP_SUM-SCORP     is initial and
              LS_SCORP_SUM-SCORP_UOM is initial.
            move LS_SCORP-SCORP     to LS_SCORP_SUM-SCORP.
            move LS_SCORP-SCORP_UOM to LS_SCORP_SUM-SCORP_UOM.
          else.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORP_SUM-SCORP
                                                                IF_CALCV_UOM_1 = LS_SCORP_SUM-SCORP_UOM
                                                                IF_CALCV_2     = LS_SCORP-SCORP
                                                                IF_CALCV_UOM_2 = LS_SCORP-SCORP_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                IF_UOM         = LS_SCORP_SUM-SCORP_UOM
                                                      importing EF_CALCV       = LS_SCORP_SUM-SCORP
                                                                EF_CALCV_UOM   = LS_SCORP_SUM-SCORP_UOM ).
          endif.

        else.
          move LS_SCORP-SCORP     to LS_SCORP_SUM-SCORP.
          move LS_SCORP-SCORP_UOM to LS_SCORP_SUM-SCORP_UOM.
        endif.

      catch CX_SY_CONVERSION_OVERFLOW.
        LF_SEPERATOR = ABAP_TRUE.
      catch CX_SY_CONVERSION_NO_NUMBER .
        LF_SEPERATOR = ABAP_TRUE.
    endtry.


    if LF_SEPERATOR eq ABAP_TRUE.
      move LF_SCSTR_VALUE to LF_INDIC.

      read table LT_INDIC with key TABLE_LINE = LF_INDIC transporting no fields.
      if SY-SUBRC eq 0.
***     Indicator is an Score -> Save position
        append initial line to RT_SCSTR_SCORP assigning <S_SCSTR_SCORP>.
        move LF_INDIC to <S_SCSTR_SCORP>-TSCOR.
        move-corresponding LS_SCORP_SUM to <S_SCSTR_SCORP>.
        clear: LS_SCORP.

      endif.
    endif.
  endloop.

endmethod.
method GET_SCSTR_TAPOS.

  data:          LF_SCSTR_VALUE  type          /VCXI/CKX_STRING,
                 LF_SEPERATOR    type          ABAP_BOOL,
                 LF_INDIC        type          CHAR30.
  data:          LS_TAPOS        type          ZVCXI_P0SS_S_TAPOS,
                 LS_TAPOS_SUM    type          ZVCXI_P0SS_S_TAPOS.
  data:          LT_SCSTR_VALUE  type table of /VCXI/CKX_STRING,
                 LT_INDIC        type          ZVCXI_P0SS_TT_INDIC.
  field-symbols: <S_SCSTR_TAPOS> type          ZVCXI_P0SS_S_SCSTR_TAPOS.

***------------------------------------------------------------------------------------------------
*** Collect all needed Tape Types
  LT_INDIC = GET_TTAPE_INDIC( IT_GATE_TAPE = IT_GATE_TAPE ).

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_TAPOS, LF_SEPERATOR.

***------------------------------------------------------------------------------------------------
*** Get absolute value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_TAPOS-TAPOS.
        move IF_UOM         to LS_TAPOS-TAPOS_UOM.

        if IF_SSTRC eq C_SSTRC_RELATIVE.
          if  LS_TAPOS_SUM-TAPOS     is initial and
              LS_TAPOS_SUM-TAPOS_UOM is initial.
            move LS_TAPOS-TAPOS     to LS_TAPOS_SUM-TAPOS.
            move LS_TAPOS-TAPOS_UOM to LS_TAPOS_SUM-TAPOS_UOM.
          else.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TAPOS_SUM-TAPOS
                                                                IF_CALCV_UOM_1 = LS_TAPOS_SUM-TAPOS_UOM
                                                                IF_CALCV_2     = LS_TAPOS-TAPOS
                                                                IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                IF_UOM         = LS_TAPOS_SUM-TAPOS_UOM
                                                      importing EF_CALCV       = LS_TAPOS_SUM-TAPOS
                                                                EF_CALCV_UOM   = LS_TAPOS_SUM-TAPOS_UOM ).
          endif.

        else.
          move LS_TAPOS-TAPOS     to LS_TAPOS_SUM-TAPOS.
          move LS_TAPOS-TAPOS_UOM to LS_TAPOS_SUM-TAPOS_UOM.
        endif.


      catch CX_SY_CONVERSION_OVERFLOW.
        LF_SEPERATOR = ABAP_TRUE.
      catch CX_SY_CONVERSION_NO_NUMBER .
        LF_SEPERATOR = ABAP_TRUE.
    endtry.

    if LF_SEPERATOR eq ABAP_TRUE.
      move LF_SCSTR_VALUE to LF_INDIC.

      read table LT_INDIC with key TABLE_LINE = LF_INDIC transporting no fields.
      if SY-SUBRC eq 0.
***     Indicator is an Tape -> Save position
        append initial line to RT_SCSTR_TAPOS assigning <S_SCSTR_TAPOS>.
        move LF_INDIC to <S_SCSTR_TAPOS>-TTAPE.
        move-corresponding LS_TAPOS_SUM to <S_SCSTR_TAPOS>.

      endif.
    endif.
  endloop.

endmethod.
method GET_SUM_SCSTR.

  data: LF_SCSTR_VALUE type          /VCXI/CKX_STRING.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP.

***------------------------------------------------------------------------------------------------
*** Get value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
        move IF_UOM         to LS_SCORP-SCORP_UOM.
      catch CX_SY_CONVERSION_OVERFLOW.
        clear: RS_SCORP_SUM.
        exit.
      catch CX_SY_CONVERSION_NO_NUMBER .
        continue.
    endtry.

    if RS_SCORP_SUM is initial.
      move-corresponding LS_SCORP to RS_SCORP_SUM.
    else.
      if IF_SSTRC eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SSTRC_RELATIVE.
***     Relative Value (Calculate sum)
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SCORP_SUM-SCORP
                                                            IF_CALCV_UOM_1 = RS_SCORP_SUM-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SCORP_SUM-SCORP_UOM
                                                  importing EF_CALCV       = RS_SCORP_SUM-SCORP
                                                            EF_CALCV_UOM   = RS_SCORP_SUM-SCORP_UOM ).

      else.
***     Absolut Value (use last)
        move-corresponding LS_SCORP to RS_SCORP_SUM.
      endif.

    endif.
  endloop.

endmethod.
method GET_TSCOR_INDIC.

  data: LF_INDIC            type          CHAR30,
        LF_CSCOR            type          ZVCXI_P0SS_CSCOR.
  data: LT_GATE_SCORE_LAST  type          /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SCORE       type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_SCORE         type ref to   ZCL_VCXI_P0SS_PR_SCORE.

***------------------------------------------------------------------------------------------------
*** Get Last score -> will not be returned
  LT_GATE_SCORE_LAST = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_LAST_SCORE( IT_GATE_SCORE = IT_GATE_SCORE
                                                                 IF_CSCOR      = IF_CSCOR ).
***------------------------------------------------------------------------------------------------
*** Collect all needed Score Types
  loop at IT_GATE_SCORE into LR_GATE_SCORE.
    read table LT_GATE_SCORE_LAST with key TABLE_LINE = LR_GATE_SCORE
                                  transporting no fields.
    check SY-SUBRC ne 0.

    try.
        move LR_GATE_SCORE->R_CLSPR ?to LR_PR_SCORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCORE.
    endtry.

    check LR_PR_SCORE is bound.
    LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = LF_CSCOR ).
*** Collect only right Score Category
    check IF_CSCOR eq LF_CSCOR.

    move LR_PR_SCORE->GET_TSCOR( ) to LF_INDIC.
    collect LF_INDIC into RT_INDIC.

  endloop.

endmethod.
method GET_TTAPE_INDIC.

  data: LF_INDIC       type          CHAR30.
  data: LR_GATE_TAPE   type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_MS_TAPE  type ref to   ZCL_VCXI_P0SS_PR_MS_TAPE.

***------------------------------------------------------------------------------------------------
*** Collect all needed Tape Types
  loop at IT_GATE_TAPE into LR_GATE_TAPE.

    try.
        move LR_GATE_TAPE->R_CLSPR ?to LR_PR_MS_TAPE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_TAPE.
    endtry.

    check LR_PR_MS_TAPE is bound.
    move LR_PR_MS_TAPE->GET_TTAPE( ) to LF_INDIC.
    collect LF_INDIC into RT_INDIC.

  endloop.

endmethod.
method GET_UNASSIGNED_INDIC.

  data: LF_SCSTR_VALUE type          /VCXI/CKX_STRING,
        LF_SEPERATOR   type          ABAP_BOOL,
        LF_INDIC       type          CHAR30.
  data: LS_SCORP       type          ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_VALUE type table of /VCXI/CKX_STRING.

***------------------------------------------------------------------------------------------------
*** Start and Split Score String into Calculation Table
  split IF_SCSTR at SPACE into table LT_SCSTR_VALUE.

  loop at LT_SCSTR_VALUE into LF_SCSTR_VALUE.
    clear: LS_SCORP, LF_SEPERATOR.

***------------------------------------------------------------------------------------------------
*** Get value in right Unit (continue if it is a sperator)
    try.
        move LF_SCSTR_VALUE to LS_SCORP-SCORP.
      catch CX_SY_CONVERSION_OVERFLOW.
        LF_SEPERATOR = ABAP_TRUE.
      catch CX_SY_CONVERSION_NO_NUMBER .
        LF_SEPERATOR = ABAP_TRUE.
    endtry.

    check LF_SEPERATOR eq ABAP_TRUE.
    move LF_SCSTR_VALUE to LF_INDIC.

    read table CT_INDIC with key TABLE_LINE = LF_INDIC transporting no fields.
    if SY-SUBRC eq 0.
      delete CT_INDIC index SY-TABIX.
    endif.
  endloop.

endmethod.
