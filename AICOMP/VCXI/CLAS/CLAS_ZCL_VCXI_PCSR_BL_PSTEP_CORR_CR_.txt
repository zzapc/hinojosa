
class ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P0SR_PCDIR .
  interfaces ZIF_VCXI_PCSR_ADJ_FLUTE .
  interfaces ZIF_VCXI_PCSR_ADJ_RODIM .
  interfaces ZIF_VCXI_PCSR_CONV_ATR .

  constants C_IPSTP_CORR_CR type /VCXI/VSMC_IPSTP value 'PC_PS_CORR_CR'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_CORR_CR
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  constants C_IAATY_BOARD type /VCXI/VSMC_IAATY value 'PC_AA_BOARD'. "#EC NOTEXT
  constants C_IAATY_FLUTE type /VCXI/VSMC_IAATY value 'PC_AA_FLUTE'. "#EC NOTEXT
  data F_BOARD type ZVCXI_PCS_BOARD .
  data F_FLUTE type ZVCXI_PCS_FLUTE .
  data S_COWID type ZVCXI_PCS_S_COWID .
  data S_MS_STARCH type ZVCXI_PCSR_S_MS_STARCH .
  data S_RODIM_OUT type ZVCXI_PCSP_S_RODIM .
  data T_MS_PAPER type ZVCXI_PCSR_TT_MS_PAPER .
  data T_SCORE type ZVCXI_P0SR_TT_SCORE .

  methods INIT_BY_SPEC_BOARD
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PAPER
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_R
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_SCORE
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_STARCH
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_STARCH
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFMI_PAPER
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_COWID
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_RODIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_CORR_CR
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR definition
class ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR implementation.
method ADD_LIMITS_TO_RTE_PSTEP.

  data:          LF_SCORE_NUM     type        I,
                 LF_LDUOM         type        /VCXI/VSMC_LDUOM,
                 LF_LDVAL         type        /VCXI/VSMR_LDVAL.
  data:          LS_SCORE         type        ZVCXI_P0SR_S_SCORE,
                 LS_SCORE_FIRST   type        ZVCXI_P0SR_S_SCORE,
                 LS_SCORE_MIN     type        ZVCXI_P0SR_S_SCORE.
  data:          LI_LVVAL         type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE         type        /VCXI/CKX_TT_OBJECT.
  data:          LR_LTYPE         type ref to /VCXI/CL_VSMC_LTYPE,
                 LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_LVVAL>        type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Ananlyze Scores
  loop at ME->T_SCORE into LS_SCORE where CSCOR eq 'L'.
*** Count Length Scores
    add 1 to LF_SCORE_NUM.

*** Get First and minimal Score
    case LF_SCORE_NUM.
      when 1.
        move LS_SCORE to LS_SCORE_FIRST.
      when 2.
        move LS_SCORE to LS_SCORE_MIN.
      when others.
        if LS_SCORE-SCORP lt LS_SCORE_MIN-SCORP.
          move LS_SCORE to LS_SCORE_MIN.
        endif.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    free: LF_LDVAL,
          LF_LDUOM,
          LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Roll Length (Outbound)
      when 'PC_LT_DO_ROLEN'.
        move ME->S_RODIM_OUT-ROLEN       to LF_LDVAL.
        move ME->S_RODIM_OUT-ROLEN_UOM   to LF_LDUOM.

***   Roll Width (Outbound)
      when 'PC_LT_DO_ROWID'.
        move ME->S_RODIM_OUT-ROWID       to LF_LDVAL.
        move ME->S_RODIM_OUT-ROWID_UOM   to LF_LDUOM.

***   Roll Diameter (Outbound)
      when 'PC_LT_DO_RODIA'.
        move ME->S_RODIM_OUT-RODIA       to LF_LDVAL.
        move ME->S_RODIM_OUT-RODIA_UOM   to LF_LDUOM.

***   Board ID
      when 'PC_LT_VP_BOARD'.
        append initial line to LI_LVVAL  assigning <S_LVVAL>.
        move 'I'                         to <S_LVVAL>-SIGN.
        move 'EQ'                        to <S_LVVAL>-OPTION.
        move ME->F_BOARD                 to <S_LVVAL>-LOW.

***   Flute Type
      when 'PC_LT_VP_FLUTE'.
        append initial line to LI_LVVAL  assigning <S_LVVAL>.
        move 'I'                         to <S_LVVAL>-SIGN.
        move 'EQ'                        to <S_LVVAL>-OPTION.
        move ME->F_FLUTE                 to <S_LVVAL>-LOW.

***   Score Type
      when 'PC_LT_VP_SCORE_TYPE'.
        if ME->T_SCORE is not initial.
          loop at ME->T_SCORE into LS_SCORE.
            append initial line to LI_LVVAL assigning <S_LVVAL>.
            move 'I'                       to <S_LVVAL>-SIGN.
            move 'EQ'                      to <S_LVVAL>-OPTION.
            move LS_SCORE-TSCOR            to <S_LVVAL>-LOW.
          endloop.
        else.
***       Not applicable Limit
          IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
          continue.
        endif.

***   Number of Scores
      when 'PC_LT_DP_SCORE_NUM'.
        if LF_SCORE_NUM is not initial.
          move LF_SCORE_NUM                to LF_LDVAL.
          move 'ST'                        to LF_LDUOM.
        else.
***       Not applicable Limit
          IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
          continue.
        endif.

***   Distance from edge of the sheet to the first score
      when 'PC_LT_DP_DISTANCESCTOKN'.
        if LS_SCORE_FIRST-ISCOR is not initial.
          move LS_SCORE_FIRST-SCORP      to LF_LDVAL.
          move LS_SCORE_FIRST-SCORP_UOM  to LF_LDUOM.
        else.
          continue.
        endif.

***   Minimum Score Distance
      when 'PC_LT_DP_SCORE_DIST_MIN'.
        if LS_SCORE_MIN-ISCOR is not initial.
          move LS_SCORE_MIN-SCORP        to LF_LDVAL.
          move LS_SCORE_MIN-SCORP_UOM    to LF_LDUOM.
        else.
          continue.
        endif.

      when others.
        continue.
    endcase.

***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        sort LI_LVVAL.
        delete adjacent duplicates from LI_LVVAL.

        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method ADD_SPVRE_MC_STARCH.

  data:  LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MC_STARCH  type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_STARCH'
                                      IR_SPVCE_PARENT = IR_SPVRE_ADDON->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MC_STARCH
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ADDON.
  append LR_SPVRE_MC_STARCH to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MC_STARCH->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
  clear LS_LEOKY.
  move ME->S_MS_STARCH-MATNR                       to LS_LEOKY-LEOKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
  LR_SPVRE_MC_STARCH->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_AVGCO_W to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-AVGCO                       to LS_PARAM-ATFLV.
  move ME->S_MS_STARCH-AVGCO_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_AVGCP_A to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-AVGCP                       to LS_PARAM-ATFLV.
  move ME->S_MS_STARCH-AVGCP_UOM                   to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Starch Factor
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_STARF   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-STARF                       to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_PURCH   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-PURCH                       to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

  check ME->S_MS_STARCH-PURCH eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Set Price
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_PRICE   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-PRICE                       to LS_PARAM-ATFLV.
  move ME->S_MS_STARCH-PRICE_CURR                  to LS_PARAM-CURKY.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_PRICP_W  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-PRICP                        to LS_PARAM-ATFLV.
  move ME->S_MS_STARCH-PRICP_UOM                    to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Vendor
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_MC_STARCH=>C_PARID_LIFNR    to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
  move ME->S_MS_STARCH-LIFNR                        to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
  LR_SPVRE_MC_STARCH->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ADD_SPVRE_MFMI_PAPER.

  data:  LS_MS_PAPER         type        ZVCXI_PCSR_S_MS_PAPER,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFMI_PAPER type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_PAPER'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

  loop at ME->T_MS_PAPER into LS_MS_PAPER.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMI_PAPER
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMI_PAPER to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFMI_PAPER->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    clear LS_LEOKY.
    move LS_MS_PAPER-MATNR                            to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Paper ID
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_PAPER-BPAID                           to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Basis Weight
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_BAWGT   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
    move LS_MS_PAPER-BAWGT                            to LS_PARAM-ATFLV.
    move LS_MS_PAPER-BAWGT_UOM                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Basis Weight Per
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_BAWGP_A  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move LS_MS_PAPER-BAWGP                             to LS_PARAM-ATFLV.
    move LS_MS_PAPER-BAWGP_UOM                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Paper Width
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_PAWID    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_COWID-COWID                             to LS_PARAM-ATFLV.
    move ME->S_COWID-COWID_UOM                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set MFMI_PAPER Factor
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_MFICF  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_PAPER-BPFAC                           to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_PURCH   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move LS_MS_PAPER-PURCH                            to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

    check LS_MS_PAPER-PURCH eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_PRICE   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
    move LS_MS_PAPER-PRICE                            to LS_PARAM-ATFLV.
    move LS_MS_PAPER-PRICE_CURR                       to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
    clear LS_PARAM.
    move ZCL_VCXI_PCSP_PR_MFMI_PAPER=>C_PARID_PRICP_W  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move LS_MS_PAPER-PRICP                             to LS_PARAM-ATFLV.
    move LS_MS_PAPER-PRICP_UOM                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    LR_SPVRE_MFMI_PAPER->SET_PARAM( IS_PARAM = LS_PARAM ).

  endloop.

endmethod.
method ADD_SPVRE_MFSO_R.

  data:  LF_IMFXC            type        ZVCXI_XCSP_IMFXC.
  data:  LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MFSO_R     type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
  loop at CT_SPVRE into LR_SPVRE_MFSO_R.
    if LR_SPVRE_MFSO_R->GET_ID( ) eq 'MFSO_R'.
      delete CT_SPVRE.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_R'
                                      IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_MFSO_R
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_MFMGR.
  append LR_SPVRE_MFSO_R to CT_SPVRE.

*** Set In Use
  LR_SPVRE_MFSO_R->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
  read table ME->T_IMFXC_OUT into LF_IMFXC index 1.
  if SY-SUBRC eq 0.
*** Set MF X-Connect
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LF_IMFXC                                    to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MFSO_R->SET_PARAM( IS_PARAM = LS_PARAM ).
  endif.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_CORR_CR type ref to ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_CORR_CR.

***----------------------------------------------------------------------------
*** roll Dimensions
  if ME->S_RODIM_OUT eq LR_BL_PSTEP_CORR_CR->S_RODIM_OUT.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Board ID, Flute and Corrugation Width
  if ME->F_BOARD eq LR_BL_PSTEP_CORR_CR->F_BOARD and
     ME->F_FLUTE eq LR_BL_PSTEP_CORR_CR->F_FLUTE and
     ME->S_COWID eq LR_BL_PSTEP_CORR_CR->S_COWID.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Paper and Starch
  if ME->T_MS_PAPER  eq LR_BL_PSTEP_CORR_CR->T_MS_PAPER  and
     ME->S_MS_STARCH eq LR_BL_PSTEP_CORR_CR->S_MS_STARCH.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Scores
  if ME->T_SCORE eq LR_BL_PSTEP_CORR_CR->T_SCORE.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_CORR_CR type ref to ZCL_VCXI_PCSR_BL_PSTEP_CORR_CR.

*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_CORR_CR.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->S_RODIM_OUT   to LR_BL_PSTEP_CORR_CR->S_RODIM_OUT.

***----------------------------------------------------------------------------
*** Board ID, Flute and Corrugation Width
  move ME->F_BOARD       to LR_BL_PSTEP_CORR_CR->F_BOARD.
  move ME->F_FLUTE       to LR_BL_PSTEP_CORR_CR->F_FLUTE.
  move ME->S_COWID       to LR_BL_PSTEP_CORR_CR->S_COWID.

***----------------------------------------------------------------------------
*** Paper and Starch
  move ME->T_MS_PAPER    to LR_BL_PSTEP_CORR_CR->T_MS_PAPER.
  move ME->S_MS_STARCH   to LR_BL_PSTEP_CORR_CR->S_MS_STARCH.

***----------------------------------------------------------------------------
*** Scores
  move ME->T_SCORE       to LR_BL_PSTEP_CORR_CR->T_SCORE.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML

              S_PCDIM_OUT  = ME->S_RODIM_OUT

              F_BOARD      = ME->F_BOARD
              F_FLUTE      = ME->F_FLUTE
              S_COWID      = ME->S_COWID

              T_MS_PAPER   = ME->T_MS_PAPER
              S_MS_STARCH  = ME->S_MS_STARCH

              T_SCORE      = ME->T_SCORE.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'PC_AT_CORR_CR'.
      ME->FILL_SPVRE_ADDON_CORR_CR( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                              IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                    changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_CORR_CR.

  data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set PC Type
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_PCTYP   to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR               to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-PCTYP                           to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Length
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_ROLEN  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC              to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-ROLEN                          to LS_PARAM-ATFLV.
  move ME->S_RODIM_OUT-ROLEN_UOM                      to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Width
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_ROWID  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC              to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-ROWID                          to LS_PARAM-ATFLV.
  move ME->S_RODIM_OUT-ROWID_UOM                      to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Height
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_RODIA  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC              to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-RODIA                          to LS_PARAM-ATFLV.
  move ME->S_RODIM_OUT-RODIA_UOM                      to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Ups
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_PCUPS  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC              to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-PCUPS                          to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set PC Direction
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_PCDIR  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR              to LS_PARAM-PARTY.
  move ME->S_RODIM_OUT-PCDIR                          to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Board ID
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_BOARD  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR              to LS_PARAM-PARTY.
  move ME->F_BOARD                                    to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Flute
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_FLUTE  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR              to LS_PARAM-PARTY.
  move ME->F_FLUTE                                    to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Corrugation Width
  clear LS_PARAM.
  move ZCL_VCXI_PCSP_PR_ADDON_CORR_CR=>C_PARID_COWID  to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC              to LS_PARAM-PARTY.
  move ME->S_COWID-COWID                              to LS_PARAM-ATFLV.
  move ME->S_COWID-COWID_UOM                          to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC               to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Starch
  ME->ADD_SPVRE_MC_STARCH( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                           changing  CT_SPVRE       = CT_SPVRE ).

endmethod.
method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Standard (Overrule existing)
  move 'GRP_CORR' to CF_ID_GRP.
  move 'CORR'     to CF_ID_ARBPL.

endmethod.
method GET_SPVRE_MF.

***------------------------------------------------------------------------------------------------
*** Add Paper
  ME->ADD_SPVRE_MFMI_PAPER( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
  move ABAP_TRUE to CF_MFI.

***------------------------------------------------------------------------------------------------
*** Add MFSO Roll
  ME->ADD_SPVRE_MFSO_R( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                  IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                        changing  CT_SPVRE       = CT_SPVRE ).
  move ABAP_TRUE to CF_MFO.

endmethod.
method INIT_BY_SPEC.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get Board and Flute
  ME->INIT_BY_SPEC_BOARD( IT_PRVDR = IT_PRVDR ).

*** Get roll Dimensions
  ME->INIT_BY_SPEC_RODIM( IT_PRVDR = IT_PRVDR ).

*** Get Corrugatioin Width
  ME->INIT_BY_SPEC_COWID( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Starch
  ME->INIT_BY_SPEC_STARCH( IT_PRVDR = IT_PRVDR ).

*** Paper
  ME->INIT_BY_SPEC_PAPER( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Scores
  ME->INIT_BY_SPEC_SCORE( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_BOARD.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_BOARD       type ref to ZCL_VCXI_PCSS_PR_BOARD.

***------------------------------------------------------------------------------------------------
*** Get Board Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        if LR_PR_BOARD is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_BOARD is bound.

***------------------------------------------------------------------------------------------------
  move LR_PR_BOARD->GET_BOARD( ) to ME->F_BOARD.
  move LR_PR_BOARD->GET_FLUTE( ) to ME->F_FLUTE.

endmethod.
method INIT_BY_SPEC_COWID.

  data:  LS_BOARW          type        ZVCXI_PCSS_S_BOARW.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SELFD          type ref to ZIF_VCXI_PCSS_SELFD.

***------------------------------------------------------------------------------------------------
*** Get SPEC_CR Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SELFD.
        if LR_SELFD is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SELFD is bound.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions
  LR_SELFD->GET_BOARW( importing ES_BOARW = LS_BOARW ).
  move LS_BOARW-BOARW     to ME->S_COWID-COWID.
  move LS_BOARW-BOARW_UOM to ME->S_COWID-COWID_UOM.

endmethod.
method INIT_BY_SPEC_PAPER.

  data: LF_BPAID type        ZVCXI_PCS_BPAID.
  data: LS_BAWGT type        ZVCXI_PCS_S_BAWGT,
        LS_BAWGP type        ZVCXI_PCS_S_BAWGP.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MS_PAPER type ref to ZCL_VCXI_PCSS_PR_MS_PAPER,
        LR_PR_MS_PRPRP type ref to ZCL_VCXI_PCSS_PR_MS_PRPRP.
  field-symbols: <S_MS_PAPER>      type        ZVCXI_PCSR_S_MS_PAPER.


  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_PAPER.
        check LR_PR_MS_PAPER is bound.

        append initial line to ME->T_MS_PAPER assigning <S_MS_PAPER>.

        move LR_PR_MS_PAPER->GET_MATNR( ) to <S_MS_PAPER>-MATNR.
        move LR_PR_MS_PAPER->GET_BPAID( ) to <S_MS_PAPER>-BPAID.

        move LR_PR_MS_PAPER->GET_BAWGT( ) to LS_BAWGT.
        move-corresponding LS_BAWGT       to <S_MS_PAPER>.
        move LR_PR_MS_PAPER->GET_BAWGP( ) to LS_BAWGP.
        move-corresponding LS_BAWGP       to <S_MS_PAPER>.

        move LR_PR_MS_PAPER->GET_BPFAC( ) to <S_MS_PAPER>-BPFAC.

***     Purchasing Info
        move LR_PR_MS_PAPER->GET_PURCH( ) to <S_MS_PAPER>-PURCH.
        move LR_PR_MS_PAPER->GET_LIFNR( ) to <S_MS_PAPER>-LIFNR.
        move LR_PR_MS_PAPER->GET_PRICE( ) to <S_MS_PAPER>-S_PRICE.
        move LR_PR_MS_PAPER->GET_PRICP( ) to <S_MS_PAPER>-S_PRICP.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Replace Paper with Preprinted Paper
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_PRPRP.
        check LR_PR_MS_PRPRP is bound.

        move LR_PR_MS_PRPRP->GET_BPAID( ) to LF_BPAID.

        read table ME->T_MS_PAPER assigning <S_MS_PAPER>
                   with key BPAID = LF_BPAID.
        check SY-SUBRC eq 0.

        move LR_PR_MS_PRPRP->GET_MATNR( ) to <S_MS_PAPER>-MATNR.

        move LR_PR_MS_PRPRP->GET_BAWGT( ) to LS_BAWGT.
        move-corresponding LS_BAWGT       to <S_MS_PAPER>.
        move LR_PR_MS_PRPRP->GET_BAWGP( ) to LS_BAWGP.
        move-corresponding LS_BAWGP       to <S_MS_PAPER>.

***     Purchasing Info
        move LR_PR_MS_PRPRP->GET_PURCH( ) to <S_MS_PAPER>-PURCH.
        move LR_PR_MS_PRPRP->GET_LIFNR( ) to <S_MS_PAPER>-LIFNR.
        move LR_PR_MS_PRPRP->GET_PRICE( ) to <S_MS_PAPER>-S_PRICE.
        move LR_PR_MS_PRPRP->GET_PRICP( ) to <S_MS_PAPER>-S_PRICP.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method INIT_BY_SPEC_RODIM.

  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_CR     type ref to ZCL_VCXI_PCSS_PR_SPEC_CR.

***------------------------------------------------------------------------------------------------
*** Get Spec Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_CR.
        if LR_PR_SPEC_CR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SPEC_CR is bound.

***------------------------------------------------------------------------------------------------
*** Get Roll Dimensions
  ME->S_RODIM_OUT = LR_PR_SPEC_CR->GET_RODIM( ).

*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCTYP = ME->S_RODIM_OUT-PCTYP
                                                      EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move ME->S_RODIM_OUT-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

endmethod.
method INIT_BY_SPEC_SCORE.

  data:          LF_SSTRC         type        ZVCXI_P0SS_SSTRC,
                 LF_SCSTR         type        ZVCXI_P0SS_SCSTR,
                 LF_NSCOR         type        ZVCXI_P0SS_NSCOR.
  data:          LS_SCSTR_SCORP   type        ZVCXI_P0SS_S_SCSTR_SCORP,
                 LS_SCORP_PREV    type        ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_ABS     type        ZVCXI_P0SS_S_SCORP.
  data:          LT_GATE_SCORE    type        /VCXI/VKSR_TT_GATE,
                 LT_SCSTR_SCORP   type        ZVCXI_P0SS_TT_SCSTR_SCORP.
  data:          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SCORE      type ref to ZCL_VCXI_P0SS_PR_SCORE,
                 LR_PR_SCSTR      type ref to ZCL_VCXI_P0SS_PR_SCSTR,
                 LR_PR_SCSTR_MGR  type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR.
  field-symbols: <S_SCORE>        type        ZVCXI_P0SR_S_SCORE.

***----------------------------------------------------------------------------
*** Get Score String Calculation
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR_MGR.
        if LR_PR_SCSTR_MGR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SCSTR_MGR is bound.

  LF_SSTRC = LR_PR_SCSTR_MGR->F_SSTRC.

***----------------------------------------------------------------------------
*** Get Tape Position of Score String
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR.
        if LR_PR_SCSTR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SCSTR is bound.

  LF_SCSTR = LR_PR_SCSTR->GET_SCSTR( ).

***------------------------------------------------------------------------------------------------
*** Get Score Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
        check LR_PR_SCORE is bound.

***     Save Score Gate
        append LR_GATE to LT_GATE_SCORE.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***----------------------------------------------------------------------------
*** Get absolute Score Positions of Score String
  LT_SCSTR_SCORP = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_SCSTR_SCORP( IF_SCSTR       = LF_SCSTR
                                                              IF_SSTRC       = LF_SSTRC
                                                              IF_CSCOR       = ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH
                                                              IT_GATE_SCORE  = LT_GATE_SCORE
                                                              IF_UOM         = ME->S_COWID-COWID_UOM ).

***------------------------------------------------------------------------------------------------
*** Get Scores and Positions
  loop at LT_SCSTR_SCORP into LS_SCSTR_SCORP.
    add 1 to LF_NSCOR.
    append initial line to ME->T_SCORE assigning <S_SCORE>.
    move-corresponding LS_SCSTR_SCORP             to <S_SCORE>.
    move LF_NSCOR                                 to <S_SCORE>-NSCOR.
    move ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH to <S_SCORE>-CSCOR.
    concatenate <S_SCORE>-CSCOR <S_SCORE>-NSCOR into <S_SCORE>-ISCOR.
  endloop.


*** Calculate Relative Positions
  loop at ME->T_SCORE assigning <S_SCORE>.
*** Buffer Absolute Position
    move <S_SCORE>-SCORP     to LS_SCORP_ABS-SCORP.
    move <S_SCORE>-SCORP_UOM to LS_SCORP_ABS-SCORP_UOM.

    if SY-TABIX ne 1.
***   Calculate Relative to previous Position
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCORE>-SCORP
                                                          IF_CALCV_UOM_1 = <S_SCORE>-SCORP_UOM
                                                          IF_CALCV_2     = LS_SCORP_PREV-SCORP
                                                          IF_CALCV_UOM_2 = LS_SCORP_PREV-SCORP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = <S_SCORE>-SCORP_UOM
                                                importing EF_CALCV       = <S_SCORE>-SCORP
                                                          EF_CALCV_UOM   = <S_SCORE>-SCORP_UOM ).
    endif.

*** Keep absolute position as "previous"
    move LS_SCORP_ABS to LS_SCORP_PREV.
  endloop.

endmethod.
method INIT_BY_SPEC_STARCH.

  data:  LS_AVGCO          type        ZVCXI_XCS_S_AVGCO,
         LS_AVGCP          type        ZVCXI_XCS_S_AVGCP.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MS_STARCH   type ref to ZCL_VCXI_PCSS_PR_MS_STARCH.


***------------------------------------------------------------------------------------------------
*** Get Starch Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_STARCH.
        if LR_PR_MS_STARCH is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_MS_STARCH is bound.

***------------------------------------------------------------------------------------------------
*** Get Starch Info
  move LR_PR_MS_STARCH->GET_MATNR( ) to ME->S_MS_STARCH-MATNR.

  move LR_PR_MS_STARCH->GET_AVGCO( ) to LS_AVGCO.
  move-corresponding LS_AVGCO to ME->S_MS_STARCH.
  move LR_PR_MS_STARCH->GET_AVGCP( ) to LS_AVGCP.
  move-corresponding LS_AVGCP to ME->S_MS_STARCH.

  move LR_PR_MS_STARCH->GET_STARF( ) to ME->S_MS_STARCH-STARF.

*** Purchasing Info
  move LR_PR_MS_STARCH->GET_PURCH( ) to ME->S_MS_STARCH-PURCH.
  move LR_PR_MS_STARCH->GET_LIFNR( ) to ME->S_MS_STARCH-LIFNR.
  move LR_PR_MS_STARCH->GET_PRICE( ) to ME->S_MS_STARCH-S_PRICE.
  move LR_PR_MS_STARCH->GET_PRICP( ) to ME->S_MS_STARCH-S_PRICP.

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              S_PCDIM_OUT  = ME->S_RODIM_OUT

              F_BOARD      = ME->F_BOARD
              F_FLUTE      = ME->F_FLUTE
              S_COWID      = ME->S_COWID

              T_MS_PAPER   = ME->T_MS_PAPER
              S_MS_STARCH  = ME->S_MS_STARCH

              T_SCORE      = ME->T_SCORE

       result xml RF_XML.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  data: LS_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

  move ME->S_RODIM_OUT-ROLEN     to LS_PCDIM_OUT-PCLEN.
  move ME->S_RODIM_OUT-ROLEN_UOM to LS_PCDIM_OUT-PCLEN_UOM.

  move ME->S_RODIM_OUT-ROWID     to LS_PCDIM_OUT-PCWID.
  move ME->S_RODIM_OUT-ROWID_UOM to LS_PCDIM_OUT-PCWID_UOM.

  move ME->S_RODIM_OUT-PCDIR     to LS_PCDIM_OUT-PCDIR.

*** Turn PC Dimension OUT
  LS_PCDIM_OUT = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM_OUT
                                 IF_PCDIR = IF_PCDIR ).

  move LS_PCDIM_OUT-PCLEN     to ME->S_RODIM_OUT-ROLEN.
  move LS_PCDIM_OUT-PCLEN_UOM to ME->S_RODIM_OUT-ROLEN_UOM.

  move LS_PCDIM_OUT-PCWID     to ME->S_RODIM_OUT-ROWID.
  move LS_PCDIM_OUT-PCWID_UOM to ME->S_RODIM_OUT-ROWID_UOM.

  move LS_PCDIM_OUT-PCDIR     to ME->S_RODIM_OUT-PCDIR.

endmethod.
method ZIF_VCXI_PCSR_ADJ_FLUTE~ADJ_FLUTE.

  move ME->F_FLUTE to CF_FLUTE.

endmethod.
method ZIF_VCXI_PCSR_ADJ_RODIM~CALC_RODIM_OUT.

  append ME->S_RODIM_OUT to CT_RODIM.

endmethod.
method ZIF_VCXI_PCSR_CONV_ATR~CONV_ROLL_TO_AREA.

  data:          LF_NOUPW     type F.
  data:          LS_PCARE     type ZVCXI_P0SP_S_PCARE.
  field-symbols: <S_AREADIM>  type ZVCXI_P0SP_S_AREADIM.

***------------------------------------------------------------------------------------------------
  if ME->S_COWID-COWID is initial.
*** Calculate Single Sheet Area
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_RODIM_OUT-ROLEN
                                                        IF_CALCV_UOM_1 = ME->S_RODIM_OUT-ROLEN_UOM
                                                        IF_CALCV_2     = ME->S_RODIM_OUT-ROWID
                                                        IF_CALCV_UOM_2 = ME->S_RODIM_OUT-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_PCARE-PCARE
                                                        EF_CALCV_UOM   = LS_PCARE-PCARE_UOM ).

    append initial line to RT_AREADIM assigning <S_AREADIM>.
    move-corresponding LS_PCARE              to <S_AREADIM>.
    move               ME->S_RODIM_OUT-PCUPS to <S_AREADIM>-PCUPS.


***------------------------------------------------------------------------------------------------
  else.
    check ME->S_RODIM_OUT-ROWID is not initial.

*** Check how many times the Sheet fits in the Corrugation Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_COWID-COWID
                                                        IF_CALCV_UOM_1 = ME->S_COWID-COWID_UOM
                                                        IF_CALCV_2     = ME->S_RODIM_OUT-ROWID
                                                        IF_CALCV_UOM_2 = ME->S_RODIM_OUT-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_NOUPW ).

*** Calculate Corrugation Area (Multi-Sheet + Siderun)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_RODIM_OUT-ROLEN
                                                        IF_CALCV_UOM_1 = ME->S_RODIM_OUT-ROLEN_UOM
                                                        IF_CALCV_2     = ME->S_COWID-COWID
                                                        IF_CALCV_UOM_2 = ME->S_COWID-COWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_PCARE-PCARE
                                                        EF_CALCV_UOM   = LS_PCARE-PCARE_UOM ).

    append initial line to RT_AREADIM assigning <S_AREADIM>.
    move-corresponding LS_PCARE to <S_AREADIM>.
    <S_AREADIM>-PCUPS = ME->S_RODIM_OUT-PCUPS * floor( LF_NOUPW ).

  endif.

endmethod.
