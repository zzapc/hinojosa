
class ZCL_VCXI_FFSR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_F0SR_PR_RTESPV
  create public .

public section.

  interfaces ZIF_VCXI_FFSR_RTESPV_RHNDL_IN .

  data T_RHNDL_IN type ZVCXI_FFSR_TT_RHNDL read-only .
  data T_RHNDL_OUT type ZVCXI_FFSR_TT_RHNDL read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
  methods GET_RHNDL_IN
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    returning
      value(RS_RHNDL) type ZVCXI_FFSR_S_RHNDL
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods EVALUATE_BL_PRTE
    redefinition .
  methods GET_IMFXC
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_DET_RHNDL_IN type /VCXI/VKSC_IEVNT value 'DETERMINE_RHNDL_IN' ##NO_TEXT.
  constants C_IEVNT_I_DET_RHNDL_OUT type /VCXI/VKSC_IEVNT value 'DETERMINE_RHNDL_OUT' ##NO_TEXT.
  constants C_IEVNT_O_RHNDL_OUT_CHANGED type /VCXI/VKSC_IEVNT value 'RHNDL_OUT_CHANGED' ##NO_TEXT.

  methods GET_BL_PSTEP_CSTEP
    importing
      !IR_GATE_CSTEP type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_EMBOS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_FOLD
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_GUFOL
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_PERF
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_PRINT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_SLIT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_STERI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CSTEP_TREAT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_INPUT
    changing
      value(CT_BL_PSTEP) type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_OUTPUT_SLIT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_BY_FCONO
    importing
      !IR_GATE_FCONO type ref to /VCXI/CL_VKSR_GATE
      !IF_TABIX type I
    exporting
      !ES_EVQTY type ZVCXI_XCSR_S_EVQTY
      !EF_NOOUT type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods GET_EVQTY_BY_FFG
    importing
      !IR_GATE_FFG type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ES_EVQTY type ZVCXI_XCSR_S_EVQTY
      !EF_NOOUT type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CSTEP
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
      !IF_INBOUND type ABAP_BOOL default ABAP_FALSE
    returning
      value(RT_PRVDR) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_FFG_ALL
    returning
      value(RT_GATE_COMP) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_INPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_INPUT type ref to ZCL_VCXI_FFSS_PR_INPUT
      !ET_GATE_CHILD type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TPROC
    importing
      !IT_GATE_INPUT type /VCXI/VKSR_TT_GATE
    returning
      value(RF_TPROC) type ZVCXI_FFS_TPROC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DET_RHNDL_IN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DET_RHNDL_OUT
    raising
      /VCXI/CX_CKX .
  methods OPTIMIZE_EXTR
    importing
      !IR_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_RHNDL_OUT
    returning
      value(RT_RHNDL) type ZVCXI_FFSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods GET_BL_PSTEP_SHIPMGR
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods GET_ICELM
    redefinition .
  methods GET_MFMI
    redefinition .
  methods GET_MFSI
    redefinition .
  methods GET_PRVDR_OUTPUT
    redefinition .
  methods HANDLE_INIT_EVQTY
    redefinition .
  methods IS_DUMMY_ALLOWED
    redefinition .
  methods VALIDATE
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_PR_RTESPV definition
class ZCL_VCXI_FFSR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_FFSR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CREATE_BL_PRTE.

    data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

    if IR_RTE_PRTE is bound.
      move IR_RTE_PRTE to LR_RTE_PRTE.
    else.
      create object LR_RTE_PRTE.
    endif.

    create object RR_BL_PRTE
      type
      ZCL_VCXI_FFSR_BL_PRTE
      exporting
        IR_RTE_PRTE  = LR_RTE_PRTE
        IR_MFMI      = ME->R_MFMI
        IR_MFSI      = ME->R_MFSI
        IT_CSPLIT    = ME->T_CSPLIT
        IF_DATE      = ME->F_DATE
        IF_LIFNR_REQ = ABAP_TRUE.

  endmethod.
  method CREATE_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** Create Instance based on ID
    case IF_IPSTP.
***   Slitting
      when ZCL_VCXI_FFSR_BL_PSTEP_SLIT=>C_IPSTP_SLIT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_SLIT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Printing
      when ZCL_VCXI_FFSR_BL_PSTEP_PRINT=>C_IPSTP_PRINT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_PRINT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Embossing
      when ZCL_VCXI_FFSR_BL_PSTEP_EMBOS=>C_IPSTP_EMBOS.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_EMBOS
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Gusset Folding
      when ZCL_VCXI_FFSR_BL_PSTEP_GUFOL=>C_IPSTP_GUFOL.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_GUFOL
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Folding
      when ZCL_VCXI_FFSR_BL_PSTEP_FOLD=>C_IPSTP_FOLD.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_FOLD
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Perforation & Shaping
      when ZCL_VCXI_FFSR_BL_PSTEP_PERF=>C_IPSTP_PERF.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_PERF
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Treatment
      when ZCL_VCXI_FFSR_BL_PSTEP_TREAT=>C_IPSTP_TREAT.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_TREAT
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Sterilization
      when ZCL_VCXI_FFSR_BL_PSTEP_STERI=>C_IPSTP_STERI.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_STERI
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***   Unitizing
      when ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT or
           ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_RPACK.
        create object RR_BL_PSTEP
          type ZCL_VCXI_FFSR_BL_PSTEP_UNIT
          exporting
            IF_IPSTP   = IF_IPSTP
            IF_DATE    = ME->F_DATE
            IR_APPDATA = ME->R_GATE->GET_APPDATA( ).
    endcase.

***------------------------------------------------------------------------------------------------
    if RR_BL_PSTEP is bound.
***   Initialize Production Step
      RR_BL_PSTEP->I_WERKS = ME->I_WERKS.
      RR_BL_PSTEP->SET_COMBW( IF_COMBW = IF_COMBW ).
      RR_BL_PSTEP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = IT_PRVDR ).
    else.
***   Create via SUPER
      RR_BL_PSTEP = SUPER->CREATE_BL_PSTEP( IF_IPSTP = IF_IPSTP
                                            IT_PRVDR = IT_PRVDR
                                            IF_COMBW = IF_COMBW ).
    endif.

  endmethod.
  method EVALUATE_BL_PRTE.

    SUPER->EVALUATE_BL_PRTE( IT_BL_PRTE = IT_BL_PRTE ).

***--------------------------------------------------------------------------------------
*** Determine the new Roll Handling inbound for the selected route
    read table IT_BL_PRTE with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
    if SY-SUBRC eq 0.
      ME->HANDLE_DET_RHNDL_IN( ).
    endif.

  endmethod.
  method GET_BL_PSTEP.

    data: LT_PRVDR_CSTEP type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SPEC   type ref to /VCXI/CL_VKSR_GATE,
          LR_PRVDR_CSTEP type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Specification
    ME->GET_PRVDR_SPEC( importing ER_GATE = LR_GATE_SPEC ).
    check LR_GATE_SPEC is bound.

*** BL Production Step - Input: Extrusion/Lamination
    ME->GET_BL_PSTEP_INPUT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get Provider for Conversion (Sorted)
    LT_PRVDR_CSTEP = ME->GET_PRVDR_CSTEP( IR_GATE_SPEC = LR_GATE_SPEC ).
    loop at LT_PRVDR_CSTEP into LR_PRVDR_CSTEP.
      ME->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = LR_PRVDR_CSTEP
                              changing  CT_BL_PSTEP   = RT_BL_PSTEP ).
    endloop.

*** BL Production Step Output - Slitting
    ME->GET_BL_PSTEP_OUTPUT_SLIT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** Get BL PStep - Shipping Manager
    ME->GET_BL_PSTEP_SHIPMGR( changing CT_BL_PSTEP = RT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP.

*** BL Production Step Conversion Step - Slitting
    ME->GET_BL_PSTEP_CSTEP_SLIT( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Printing
    ME->GET_BL_PSTEP_CSTEP_PRINT( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Embossing
    ME->GET_BL_PSTEP_CSTEP_EMBOS( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Gusset Folding
    ME->GET_BL_PSTEP_CSTEP_GUFOL( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Folding
    ME->GET_BL_PSTEP_CSTEP_FOLD( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Perforation & Shaping
    ME->GET_BL_PSTEP_CSTEP_PERF( exporting IR_GATE     = IR_GATE_CSTEP
                                 changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Treatment
    ME->GET_BL_PSTEP_CSTEP_TREAT( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

*** BL Production Step Conversion Step - Sterilization
    ME->GET_BL_PSTEP_CSTEP_STERI( exporting IR_GATE     = IR_GATE_CSTEP
                                  changing  CT_BL_PSTEP = CT_BL_PSTEP ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_EMBOS.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Embossing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_EMBOS.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_EMBOS=>C_IPSTP_EMBOS
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_FOLD.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Folding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_FOLD.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_FOLD=>C_IPSTP_FOLD
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_GUFOL.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Gusset Folding
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_GUFOL.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_GUFOL=>C_IPSTP_GUFOL
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_PERF.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Perforation
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_PERF.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_PERF=>C_IPSTP_PERF
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_PRINT.

    data: LT_PRVDR    type /VCXI/VKSR_TT_GATE,
          LT_GATE_INK type /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


    check IR_GATE is bound.

***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Printing
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_PRINT.
    LR_PR_CSTEP_PRINT = cast #( IR_GATE->R_CLSPR ).
    check LR_PR_CSTEP_PRINT is bound.

*** Get MS (Digital) Inks and filter to current Print
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_INK=>C_IPRVT_MS_INK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_DINK=>C_IPRVT_MS_DINK
                                           IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
    loop at LT_GATE_INK into LR_GATE.
      if not LR_GATE->IS_IN_LINE( IR_GATE ).
        delete LT_GATE_INK.
      endif.
    endloop.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_INK ).

***--------------------------------------------------------------------------------------
*** Collect all Provider
    refresh LT_PRVDR.
    append IR_GATE to LT_PRVDR.
    append lines of LT_GATE_INK to LT_PRVDR.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_PRINT=>C_IPSTP_PRINT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_SLIT.

    data: LF_NOOUT         type        ZVCXI_XCS_NOOUT.
    data: LS_TRWID         type        ZVCXI_F0S_S_TRWID.
    data: LT_PRVDR_SLIT    type        /VCXI/VKSR_TT_GATE.
    data: LR_BL_PSTEP_SLIT type ref to ZCL_VCXI_FFSR_BL_PSTEP_SLIT,
          LR_PR_CSTEP_SLIT type ref to ZCL_VCXI_FFSS_PR_CSTEP_SLIT,
          LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

    check IR_GATE is bound.

***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Slitting
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_CSTEP_SLIT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP_SLIT.
    endtry.
    check LR_PR_CSTEP_SLIT is bound.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Get Trim on Width value
    LR_PR_CSTEP_SLIT->GET_TRWID( importing ES_TRWID = LS_TRWID ).

*** Get Number of outs
    LR_PR_CSTEP_SLIT->GET_NOOUT( importing EF_NOOUT = LF_NOOUT ).

    if LS_TRWID-TRWID is initial and
       LF_NOOUT le 1.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Collect all Provider
    refresh LT_PRVDR_SLIT.
    append  IR_GATE to LT_PRVDR_SLIT.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_SLIT ).
    delete adjacent duplicates from LT_PRVDR_SLIT.

***--------------------------------------------------------------------------------------
*** Create BL PStep
    create object LR_BL_PSTEP_SLIT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_SLIT to CT_BL_PSTEP.
    move ME->I_WERKS to LR_BL_PSTEP_SLIT->I_WERKS.
    LR_BL_PSTEP_SLIT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR_SLIT ).

  endmethod.
  method GET_BL_PSTEP_CSTEP_STERI.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Sterilization
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_STERI.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_STERI=>C_IPSTP_STERI
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_CSTEP_TREAT.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


***--------------------------------------------------------------------------------------
*** Check if incoming Gate is a Treatment
    check IR_GATE is bound and
          IR_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_TREAT.

***--------------------------------------------------------------------------------------
*** Define Provider
    LT_PRVDR = value #( ( IR_GATE ) ).

***--------------------------------------------------------------------------------------
*** Create BL PStep
    append ME->CREATE_BL_PSTEP( IF_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_TREAT=>C_IPSTP_TREAT
                                IT_PRVDR = LT_PRVDR ) to CT_BL_PSTEP.

  endmethod.
  method GET_BL_PSTEP_INPUT.

    data: LF_COUNT type        I,
          LF_TOTAL type        I.
    data: LT_GATE_INPUT    type        /VCXI/VKSR_TT_GATE,
          LT_GATE_XCONI    type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_FPROC type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_EMAT  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_GLUE  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_EXTR     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_RECI  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_PSCALE   type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_INPUT   type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_CSTEP   type        /VCXI/VKSR_TT_GATE,
          LT_BL_PSTEP      type        ZVCXI_XCSR_TT_BL_PSTEP.
    data: LR_GATE_SPEC     type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PSCALE   type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_F0_PSTEP   type ref to ZCL_VCXI_F0SR_BL_PSTEP,
          LR_PRVDR_CSTEP   type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_PSTEP_EXTR type ref to ZCL_VCXI_FFSR_BL_PSTEP_EXTR,
          LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_FFSR_BL_PSTEP_LAMI,
          LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***--------------------------------------------------------------------------------------
*** Get Input Element
    LT_GATE_INPUT   = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT
                                             IF_INUSE = ABAP_TRUE ).
    check LT_GATE_INPUT is not initial.

***--------------------------------------------------------------------------------------
*** Get Specification
    ME->GET_PRVDR_SPEC( importing ER_GATE = LR_GATE_SPEC ).

*** Get Provider for Inbound Conversion (Sorted)
    LT_PRVDR_CSTEP = ME->GET_PRVDR_CSTEP( exporting IR_GATE_SPEC = LR_GATE_SPEC
                                                    IF_INBOUND   = ABAP_TRUE ).
    loop at LT_PRVDR_CSTEP into LR_PRVDR_CSTEP.
      ME->GET_BL_PSTEP_CSTEP( exporting IR_GATE_CSTEP = LR_PRVDR_CSTEP
                              changing  CT_BL_PSTEP   = LT_BL_PSTEP ).
    endloop.

*** Force Combined With to F0SR level
    loop at LT_BL_PSTEP into LR_BL_PSTEP.
      try.
          move LR_BL_PSTEP ?to LR_BL_F0_PSTEP.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_BL_F0_PSTEP.
      endtry.
      check LR_BL_F0_PSTEP is bound.

***   Set Combined With = Next
      LR_BL_F0_PSTEP->SET_COMBW( IF_COMBW = ZCL_VCXI_FFSS_PR_CSTEP_TREAT=>C_COMBW_N ).

***   Append inbound Conversion BL Steps
      append LR_BL_PSTEP to CT_BL_PSTEP.
    endloop.

*** Get Connection In
    LT_GATE_XCONI = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONI=>C_IPRVT_XCONI
                                           IF_INUSE = ABAP_TRUE ).

*** Get MS Film Procurement
    LT_GATE_MS_FPROC = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_IPRVT_MS_FPROC
                                              IF_INUSE = ABAP_TRUE ).

*** Get MS Estimation Material
    LT_GATE_MS_EMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_IPRVT_MS_EMAT
                                             IF_INUSE = ABAP_TRUE ).

*** Get Extrusion
    LT_GATE_EXTR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_EXTR=>C_IPRVT_EXTR
                                          IF_INUSE = ABAP_TRUE ).

    if LINES( LT_GATE_EXTR ) is not initial.
***   Find Provider for Recipe
      LT_GATE_MS_RECI = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_RECI=>C_IPRVT_MS_RECI
                                               IF_INUSE = ABAP_TRUE ).
      check LT_GATE_MS_RECI is not initial.
    endif.

*** Find Provider for Glue
    LT_GATE_MS_GLUE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_GLUE=>C_IPRVT_MS_GLUE
                                             IF_INUSE = ABAP_TRUE ).

*** Find Provider for Price Scales
    LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                                IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
      if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LT_GATE_INPUT[ 1 ] ) ne ABAP_TRUE.
        delete LT_GATE_PSCALE.
      endif.
    endloop.


*** Count Ingoing Films
    move LINES( LT_GATE_XCONI )     to LF_COUNT.
    add LF_COUNT to LF_TOTAL.
    move LINES( LT_GATE_MS_FPROC )  to LF_COUNT.
    add LF_COUNT to LF_TOTAL.
    move LINES( LT_GATE_MS_EMAT )   to LF_COUNT.
    add LF_COUNT to LF_TOTAL.

***--------------------------------------------------------------------------------------
*** Collect all providers
    refresh LT_PRVDR_INPUT.
    append lines of LT_GATE_INPUT     to LT_PRVDR_INPUT.
    append lines of LT_GATE_EXTR      to LT_PRVDR_INPUT.
    append lines of LT_GATE_MS_RECI   to LT_PRVDR_INPUT.
    append lines of LT_GATE_XCONI     to LT_PRVDR_INPUT.
    append lines of LT_GATE_MS_FPROC  to LT_PRVDR_INPUT.
    append lines of LT_GATE_MS_EMAT   to LT_PRVDR_INPUT.
    append lines of LT_GATE_MS_GLUE   to LT_PRVDR_INPUT.
    append lines of LT_GATE_PSCALE    to LT_PRVDR_INPUT.

*** Sort Provider table
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_INPUT ).

***--------------------------------------------------------------------------------------
*** Determine Production Step Extrusion/Lamination
    case ME->GET_TPROC( LT_GATE_INPUT ).
      when ZCL_VCXI_FFSS_PR_INPUT=>C_TPROC_LAEX.

***     Create BL Production Step Extrusion
        create object LR_BL_PSTEP_EXTR
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = LR_APPDATA.
        append LR_BL_PSTEP_EXTR to CT_BL_PSTEP.
        move ME->I_WERKS to LR_BL_PSTEP_EXTR->I_WERKS.
        LR_BL_PSTEP_EXTR->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                        IT_PRVDR = LT_PRVDR_INPUT ).

      when ZCL_VCXI_FFSS_PR_INPUT=>C_TPROC_EXCO.

***   Create BL Production Step Lamination
        create object LR_BL_PSTEP_LAMI
          exporting
            IF_DATE    = ME->F_DATE
            IR_APPDATA = LR_APPDATA.
        append LR_BL_PSTEP_LAMI to CT_BL_PSTEP.
        move ME->I_WERKS to LR_BL_PSTEP_LAMI->I_WERKS.
        LR_BL_PSTEP_LAMI->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                        IT_PRVDR = LT_PRVDR_INPUT ).

      when SPACE.

***     Production Step Extrusion
        if LT_GATE_EXTR is not initial and
           LF_TOTAL le 1.

***       Create BL PStep
          create object LR_BL_PSTEP_EXTR
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.
          append LR_BL_PSTEP_EXTR to CT_BL_PSTEP.
          move ME->I_WERKS to LR_BL_PSTEP_EXTR->I_WERKS.
          LR_BL_PSTEP_EXTR->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                          IT_PRVDR = LT_PRVDR_INPUT ).

***     Production Step Lamination
        elseif LF_TOTAL gt 1.

***       Create BL PStep
          create object LR_BL_PSTEP_LAMI
            exporting
              IF_DATE    = ME->F_DATE
              IR_APPDATA = LR_APPDATA.
          append LR_BL_PSTEP_LAMI to CT_BL_PSTEP.
          move ME->I_WERKS to LR_BL_PSTEP_LAMI->I_WERKS.
          LR_BL_PSTEP_LAMI->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                          IT_PRVDR = LT_PRVDR_INPUT ).
        endif.

    endcase.

  endmethod.
  method GET_BL_PSTEP_OUTPUT_SLIT.

    data: LF_NOOUT          type        ZVCXI_XCS_NOOUT,
          LF_NOOUT_TOTAL    type        ZVCXI_XCS_NOOUT.
    data: LS_TRWID          type        ZVCXI_F0S_S_TRWID.
    data: LT_PRVDR_SLIT     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILD     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_CORE   type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUTPUT    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OUTPUT      type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
          LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA,
          LR_BL_OUTPUT_SLIT type ref to ZCL_VCXI_FFSR_BL_PSTEP_SLIT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG         type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO       type ref to ZCL_VCXI_FFSS_PR_FCONO.

***--------------------------------------------------------------------------------------
*** Get Provider for Output including children
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( importing ER_GATE       = LR_GATE_OUTPUT
                                                    ET_GATE_CHILD = LT_GATE_CHILD ).
    check LR_GATE_OUTPUT is bound and
          LR_PR_OUTPUT   is bound and
          LT_GATE_CHILD  is not initial.

***--------------------------------------------------------------------------------------
*** Get Trim on Width of Output
    LR_PR_OUTPUT->GET_TRWID( importing ES_TRWID = LS_TRWID ).


*** Get Number of Outs of the Output children
    loop at LT_GATE_CHILD into LR_GATE.
***   Check as FFG
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FFG.
      endtry.
      if LR_PR_FFG is bound.
        clear LF_NOOUT.
        LF_NOOUT = LR_PR_FFG->GET_NOOUT( ).
        add LF_NOOUT to LF_NOOUT_TOTAL.
      endif.

***   Check Connection Out
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONO.
      endtry.
      if LR_PR_FCONO is bound.
        clear LF_NOOUT.
        LF_NOOUT = LR_PR_FCONO->GET_NOOUT( ).
        add LF_NOOUT to LF_NOOUT_TOTAL.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Check if Slitting is required
    if LS_TRWID-TRWID is initial and
       LF_NOOUT_TOTAL le 1.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Get MS Core Provider
    LT_GATE_MS_CORE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_MS_CORE=>C_IPRVT_MS_CORE
                                             IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Collect Provider
    append          LR_GATE_OUTPUT  to LT_PRVDR_SLIT.
    append lines of LT_GATE_CHILD   to LT_PRVDR_SLIT.
    append lines of LT_GATE_MS_CORE to LT_PRVDR_SLIT.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR_SLIT ).

*** Create BL PStep
    create object LR_BL_OUTPUT_SLIT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_OUTPUT_SLIT to CT_BL_PSTEP.
    move ME->I_WERKS to LR_BL_OUTPUT_SLIT->I_WERKS.
    LR_BL_OUTPUT_SLIT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                     IT_PRVDR = LT_PRVDR_SLIT ).

  endmethod.
  method GET_BL_PSTEP_SHIPMGR.

    data: LF_IN_LINE type ABAP_BOOL.
    data: LT_GATE_SHIPMGR  type /VCXI/VKSR_TT_GATE,
          LT_GATE_SHIPUNIT type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_SHIPMGR  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPMGR    type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
          LR_GATE_SHIPUNIT type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_PSTEP_UNIT type ref to ZCL_VCXI_FFSR_BL_PSTEP_UNIT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                             IF_INUSE = ABAP_TRUE ).
    check LT_GATE_SHIPMGR is not initial.

***------------------------------------------------------------------------------------------------
*** Process the Shipping Manager
    loop at LT_GATE_SHIPMGR into LR_GATE_SHIPMGR.
***   Find Provider for Shipping Units
      LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                                IF_INUSE = ABAP_TRUE ).
      check LT_GATE_SHIPUNIT is not initial.

***   Filter by Shipping Manager
      loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
        if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
          delete LT_GATE_SHIPUNIT.
        endif.
      endloop.
      check LT_GATE_SHIPUNIT is not initial.

***------------------------------------------------------------------------------------------------
***   Shipping Units Packed Roll
      ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                           IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                           IF_ATTID_SHUTY   = ZCL_VCXI_FFSU_PR_SHIPMGR=>C_ATTID_SHUTY_PACKED
                                           IF_IPSTP         = ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_RPACK
                                           IF_COMBW         = ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_COMBW_PREV
                                 changing  CT_BL_PSTEP      = CT_BL_PSTEP ).

***   Shipping Units HU
      ME->GET_BL_PSTEP_SHIPUNIT( exporting IR_GATE_SHIPMGR  = LR_GATE_SHIPMGR
                                           IT_GATE_SHIPUNIT = LT_GATE_SHIPUNIT
                                           IF_ATTID_SHUTY   = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                           IF_IPSTP         = ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_UNIT
                                 changing  CT_BL_PSTEP      = CT_BL_PSTEP ).
    endloop.


***------------------------------------------------------------------------------------------------
*** Merge Production Steps of same Shipping Unit (across multiple Shipping Manager)
    clear LR_BL_PSTEP_UNIT.
    loop at CT_BL_PSTEP into data(LR_BL_PSTEP)
                        where TABLE_LINE->F_IPSTP = ZCL_VCXI_FFSR_BL_PSTEP_UNIT=>C_IPSTP_RPACK.
      if LR_BL_PSTEP_UNIT is bound.
        LR_BL_PSTEP_UNIT->MERGE( IR_BL_PSTEP_UNIT = cast #( LR_BL_PSTEP ) ).
        delete CT_BL_PSTEP.
      else.
        LR_BL_PSTEP_UNIT ?= LR_BL_PSTEP.
      endif.
    endloop.

  endmethod.
  method GET_CSPLIT.

    data:           LS_CSPLIT       type        ZVCXI_FFSS_S_CSPLIT.
    data:           LR_PR_OUTPUT    type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
                    LR_GATE_OUTPUT  type ref to /VCXI/CL_VKSR_GATE,
                    LR_BL_FIBPROP   type ref to ZCL_VCXI_FFSS_BL_FIBPROP.
    data:           LT_GATE_CHILD   type        /VCXI/VKSR_TT_GATE,
                    LT_CSPLIT       type        ZVCXI_FFSS_TT_CSPLIT.
    field-symbols:  <S_CSPLIT>      type        ZVCXI_XCSR_S_CSPLIT.

*** Get Provider for Output including children
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( importing ER_GATE       = LR_GATE_OUTPUT
                                                    ET_GATE_CHILD = LT_GATE_CHILD ).
    check LR_GATE_OUTPUT is bound and
          LR_PR_OUTPUT   is bound and
          LT_GATE_CHILD  is not initial.

*** Get Cost Split Distribution by Film Backward Property (Outbound)
    LR_PR_OUTPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP ).
    check LR_BL_FIBPROP is bound.

    move LR_BL_FIBPROP->T_CSPLIT to LT_CSPLIT.
    check LINES( LT_CSPLIT ) gt 1.

*** Remove empty Cost Splits
    delete LT_CSPLIT where DCSPL is initial.

    loop at LT_CSPLIT into LS_CSPLIT.
***   Add Component Cost Split
      append initial line to RT_CSPLIT assigning <S_CSPLIT>.
      move LS_CSPLIT-ICSPL      to <S_CSPLIT>-ICSPL.
      move LS_CSPLIT-DCSPL      to <S_CSPLIT>-DCSPL.
      move LS_CSPLIT-DCSPL_UOM  to <S_CSPLIT>-DCSPL_UOM.
      move LS_CSPLIT-COMPR      to <S_CSPLIT>-COMPR.
      move LS_CSPLIT-COMPR      to <S_CSPLIT>-QFACT.  "Use Component Ratio
    endloop.

  endmethod.
  method GET_EVQTY_BY_FCONO.

    data: LF_IMFXC        type        ZVCXI_XCSP_IMFXC.
    data: LT_IMFXC_IN     type        ZVCXI_XCSP_TT_IMFXC,
          LT_IMFXC_OUT    type        ZVCXI_XCSP_TT_IMFXC.
    data: LT_GATE_RTESPV  type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_FCONO     type ref to ZCL_VCXI_FFSS_PR_FCONO,
          LR_GATE_RTESPV  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV    type ref to ZCL_VCXI_F0SR_PR_RTESPV.


*** Process all Events before further determination of Evaluation Qty
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Get Number of Outs
    move IR_GATE_FCONO->R_CLSPR ?to LR_PR_FCONO.
    EF_NOOUT = LR_PR_FCONO->GET_NOOUT( ).

*** Fallback for calculating a "temporary" Evaluation Quantity
    if EF_NOOUT eq 0.
      move 1 to EF_NOOUT.
    endif.

***--------------------------------------------------------------------------------------
*** Get x-Connect based on position of Gate in relation to Output
    ME->GET_IMFXC( importing ET_IMFXC_OUT = LT_IMFXC_OUT ).
    read table LT_IMFXC_OUT into LF_IMFXC index IF_TABIX.

*** Find Provider for Routing Supervisor of Components
    LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                            IF_INUSE  = ABAP_TRUE ).
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.

***   Get Information by Routing Supervisor
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_RTESPV.
      endtry.

      check LR_PR_RTESPV is bound.

***   Get Inbound Connections
      refresh LT_IMFXC_IN.
      LR_PR_RTESPV->GET_IMFXC( importing ET_IMFXC_IN = LT_IMFXC_IN ).
      read table LT_IMFXC_IN with key TABLE_LINE = LF_IMFXC
                             transporting no fields.
      check SY-SUBRC is initial.

      try.
          move LR_PR_RTESPV->GET_EVQTY_BY_IMFXC( LF_IMFXC ) to ES_EVQTY.
        catch /VCXI/CX_CKX.
***       Clear all to reset parameter
          clear ES_EVQTY.
      endtry.
    endloop.

  endmethod.
  method GET_EVQTY_BY_FFG.

    data: LF_UMREZ      type        UMREZ.
    data: LS_QCALC      type        ZVCXI_XCSS_S_QCALC.
    data: LT_GATE_OPQTY type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_GATE_OPQTY type ref to /VCXI/CL_VKSR_GATE,
          LR_OPQTY      type ref to ZIF_VCXI_XCSS_OPQTY,
          LR_APPDATA    type ref to /VCXI/CL_VKSR_APPDATA.


***--------------------------------------------------------------------------------------
*** Get Number of Outs
    move IR_GATE_FFG->R_CLSPR ?to LR_PR_FFG.
    EF_NOOUT = LR_PR_FFG->GET_NOOUT( ).

*** Fallback for calculating a "temporary" Evaluation Quantity
    if EF_NOOUT eq 0.
      move 1 to EF_NOOUT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
    LT_GATE_OPQTY = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).
*** Find Inline
    loop at LT_GATE_OPQTY into LR_GATE_OPQTY.
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_OPQTY ) eq ABAP_TRUE.
      try.
          move LR_GATE_OPQTY->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endloop.
*** Take first
    if LR_OPQTY is not bound.
      read table LT_GATE_OPQTY into LR_GATE_OPQTY index 1.
      if SY-SUBRC eq 0.
        try.
            move LR_GATE_OPQTY->R_CLSPR ?to LR_OPQTY.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_OPQTY.
        endtry.
      endif.
    endif.

*** Get Operation Quantity of Provider or use Application Data
    if LR_OPQTY is bound.
      LR_OPQTY->GET_QCALC( importing ES_QCALC_SELF = LS_QCALC
                                     EF_UMREZ      = LF_UMREZ ).
*** Use Base and multiply by Numerator
      ES_EVQTY-EVQTY     = LS_QCALC-QCALC * LF_UMREZ.
      ES_EVQTY-EVQTY_UOM = LS_QCALC-QCALC_UOM.
    else.
      LR_APPDATA = ME->R_GATE->GET_APPDATA( ).
      ES_EVQTY-EVQTY     = LR_APPDATA->S_OPQTY-OPQTY.
      ES_EVQTY-EVQTY_UOM = LR_APPDATA->S_OPQTY-OPQTY_UOM.
    endif.

  endmethod.
  method GET_ICELM.

    move 'FILM' to RF_ICELM.

  endmethod.
  method GET_IMFXC.

    data: LF_IMFXC type        ZVCXI_XCSP_IMFXC.
    data: LS_XCONR type        ZVCXI_F0SS_S_XCONR.
    data: LT_GATE     type        /VCXI/VKSR_TT_GATE,
          LT_GATE_FFG type        /VCXI/VKSR_TT_GATE,
          LT_XCONR    type        ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI  type ref to ZCL_VCXI_F0SS_PR_XCONI.

***--------------------------------------------------------------------------------------
*** Determine Cross-Connection ID's Ingoing
    SUPER->GET_IMFXC( importing ET_IMFXC_IN  = ET_IMFXC_IN ).

    if ET_IMFXC_OUT is requested.
***--------------------------------------------------------------------------------------
***   Get X-Connections (References)
      LT_XCONR = ME->GET_XCONR( ).

***--------------------------------------------------------------------------------------
***   Get Connections Outbound
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONO=>C_IPRVT_XCONO
                                       IF_INUSE = ABAP_TRUE ).

***   Get Finished Goods Outbound (to keep the Sorting of Outbound Elements)
      LT_GATE_FFG = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG
                                           IF_INUSE = ABAP_TRUE ).
      append lines of LT_GATE_FFG to LT_GATE.
***   Sort Gates to keep orignal Order of Elements
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

      loop at LT_GATE into LR_GATE.
        try.
            read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
            if SY-SUBRC eq 0.
              check LS_XCONR-R_GATE_IN is bound.
              move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
              check LR_PR_XCONI is bound.
              move LR_PR_XCONI->GET_GXCON( ) to LF_IMFXC.
            else.
              clear LF_IMFXC.
            endif.

            append LF_IMFXC to ET_IMFXC_OUT.

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.

  endmethod.
  method GET_MFMI.

    data: LS_MFMI_L        type ZVCXI_FFSR_S_MFMI_L.
    data: LT_GATE_MS_FPROC type /VCXI/VKSR_TT_GATE,
          LT_GATE_MS_EMAT  type /VCXI/VKSR_TT_GATE,
          LT_GATE_PSCALE   type /VCXI/VKSR_TT_GATE.
    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_MS_FPROC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_MS_EMAT  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_FPROC   type ref to ZCL_VCXI_FFSS_PR_MS_FPROC,
          LR_PR_MS_EMAT    type ref to ZCL_VCXI_FFSS_PR_MS_EMAT,
          LR_PR_PSCALE     type ref to ZCL_VCXI_XCS_PR_PSCALE.
    field-symbols: <T_MFMI> type standard table.


***--------------------------------------------------------------------------------------
*** Find Provider for Film Procurement
    LT_GATE_MS_FPROC = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_FPROC=>C_IPRVT_MS_FPROC
                                              IF_INUSE  = ABAP_TRUE
                                              IF_SORTED = ABAP_TRUE ).

*** Find Provider for Estimation Material
    LT_GATE_MS_EMAT  = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_IPRVT_MS_EMAT
                                              IF_INUSE  = ABAP_TRUE
                                              IF_SORTED = ABAP_TRUE ).

    check LT_GATE_MS_FPROC is not initial or
          LT_GATE_MS_EMAT  is not initial.

*** Find Provider for Price Scale
    LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                            IF_INUSE  = ABAP_TRUE
                                            IF_SORTED = ABAP_TRUE ).


***--------------------------------------------------------------------------------------
*** Add Film Procurements
    loop at LT_GATE_MS_FPROC into LR_GATE_MS_FPROC.
      try.
          move LR_GATE_MS_FPROC->R_CLSPR ?to LR_PR_MS_FPROC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_FPROC.
      endtry.


      check LR_PR_MS_FPROC is bound.

***   Create Data Reference
      if RR_MFMI is not bound and
         <T_MFMI> is not assigned.
        create data RR_MFMI type table of ZVCXI_FFSR_S_MFMI_L.
        assign RR_MFMI->* to <T_MFMI>.
      endif.

      move LR_PR_MS_FPROC->GET_MATNR( ) to LS_MFMI_L-MATNR.
      move LR_PR_MS_FPROC->GET_PURCH( ) to LS_MFMI_L-PURCH.

      move 100                          to LS_MFMI_L-MFISP.
      move '%'                          to LS_MFMI_L-MFISP_UOM.

      move 1                            to LS_MFMI_L-MFICF.
      move 1                            to LS_MFMI_L-MFICP.

      move LR_PR_MS_FPROC->GET_SANKA( ) to LS_MFMI_L-SANKA.

      move LR_PR_MS_FPROC->GET_LIFNR( ) to LS_MFMI_L-LIFNR.

***--------------------------------------------------------------------------------------
***   Get Film Dimensions
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_MFMI_L-S_FIWID ).
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = LS_MFMI_L-S_RELEN ).
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = LS_MFMI_L-S_FITIN ).
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = LS_MFMI_L-S_FITEX ).
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = LS_MFMI_L-S_SURWT ).
      LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = LS_MFMI_L-NOUPS ).

***   Get Roll Dimensions
      LS_MFMI_L-S_RDITA = LR_PR_MS_FPROC->GET_RDITA( ).

***   Alwasy 1 as Number of Outs
      move 1 to LS_MFMI_L-NOOUT.

***--------------------------------------------------------------------------------------
***   Add Price Scale
      loop at LT_GATE_PSCALE into LR_GATE.
        try.
***         Check Scale is part of Film Procurement
            check LR_GATE->GET_PARENT( ) eq LR_GATE_MS_FPROC.
            move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_PSCALE.
        endtry.
        check LR_PR_PSCALE is bound.

***     Add Price Scales
        append value #( ISVCE   = LR_GATE->F_ID
                        S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                        S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                        S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                      ) to LS_MFMI_L-T_PSCALE.
      endloop.

***   Append Material Flow Material to Data Reference
      append LS_MFMI_L to <T_MFMI>.
      clear LS_MFMI_L.

    endloop.

***--------------------------------------------------------------------------------------
*** Add Assigned Material ( for Estimation Material )
    loop at LT_GATE_MS_EMAT into LR_GATE_MS_EMAT.
      try.
          move LR_GATE_MS_EMAT->R_CLSPR ?to LR_PR_MS_EMAT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_EMAT.
      endtry.


      check LR_PR_MS_EMAT is bound.

***   Create Data Reference
      if RR_MFMI is not bound and
         <T_MFMI> is not assigned.
        create data RR_MFMI type table of ZVCXI_FFSR_S_MFMI_L.
        assign RR_MFMI->* to <T_MFMI>.
      endif.

      move LR_PR_MS_EMAT->GET_AMAT( )   to LS_MFMI_L-MATNR.

      move 100                          to LS_MFMI_L-MFISP.
      move '%'                          to LS_MFMI_L-MFISP_UOM.

      move 1                            to LS_MFMI_L-MFICF.
      move 1                            to LS_MFMI_L-MFICP.

***--------------------------------------------------------------------------------------
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_MFMI_L-S_FIWID ).
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = LS_MFMI_L-S_RELEN ).
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = LS_MFMI_L-S_FITIN ).
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = LS_MFMI_L-S_FITEX ).
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = LS_MFMI_L-S_SURWT ).
      LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = LS_MFMI_L-NOUPS ).

***   Alwasy 1 as Number of Outs
      move 1 to LS_MFMI_L-NOOUT.

***   Append Material Flow Material to Data Reference
      append LS_MFMI_L to <T_MFMI>.
      clear LS_MFMI_L.

    endloop.

  endmethod.
  method GET_MFSI.

    data: LS_MFSI_L        type          ZVCXI_FFSR_S_MFSI_L.
    data: LT_GATE_FCONI    type          /VCXI/VKSR_TT_GATE.
    data: LR_GATE_FCONI type ref to   /VCXI/CL_VKSR_GATE,
          LR_PR_FCONI   type ref to   ZCL_VCXI_FFSS_PR_FCONI.
    field-symbols: <T_MFSI>         type standard table.

***--------------------------------------------------------------------------------------
*** Find Provider for Connector In
    LT_GATE_FCONI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FCONI=>C_IPRVT_FF_FCONI
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE_FCONI into LR_GATE_FCONI.
      try.
          move LR_GATE_FCONI->R_CLSPR ?to LR_PR_FCONI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FCONI.
      endtry.
      check LR_PR_FCONI is bound.

***   Create Data Reference
      if RR_MFSI is not bound and
         <T_MFSI> is not assigned.
        create data RR_MFSI type table of ZVCXI_FFSR_S_MFSI_L.
        assign RR_MFSI->* to <T_MFSI>.
      endif.

      move LR_PR_FCONI->GET_GXCON( )    to LS_MFSI_L-IMFXC.

      move 100                          to LS_MFSI_L-MFISP.
      move '%'                          to LS_MFSI_L-MFISP_UOM.

      move 1                            to LS_MFSI_L-MFICF.
      move 1                            to LS_MFSI_L-MFICP.

      move ABAP_TRUE                    to LS_MFSI_L-NEXTL.

***   Get Film Dimensions
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_MFSI_L-S_FIWID ).
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = LS_MFSI_L-S_RELEN ).
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = LS_MFSI_L-S_FITIN ).
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = LS_MFSI_L-S_FITEX ).
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = LS_MFSI_L-S_SURWT ).
      LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = LS_MFSI_L-NOUPS ).

***   Get Roll Dimensions
      LS_MFSI_L-S_RDITA = LR_PR_FCONI->GET_RDITA( ).

***   Alwasy 1 as Number of Outs
      move 1 to LS_MFSI_L-NOOUT.

***   Append Material Flow SFG to Data Reference
      append LS_MFSI_L to <T_MFSI>.
      clear LS_MFSI_L.

    endloop.

  endmethod.
  method GET_PRVDR_CSTEP.

    data: LT_PRVDR      type        /VCXI/VKSR_TT_GATE.
    data: LR_INPUT_GATE type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Input
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT
                                      IF_INUSE  = ABAP_TRUE
                                      IF_SORTED = ABAP_TRUE ).
    read table LT_PRVDR into LR_INPUT_GATE index 1.

***--------------------------------------------------------------------------------------
*** Find Provider for Conversion Steps
    refresh LT_PRVDR.
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_CSTEP=>C_IPRVT_CSTEP
                                      IF_INUSE  = ABAP_TRUE
                                      IF_SORTED = ABAP_TRUE ).

    check LR_INPUT_GATE is bound.
    loop at LT_PRVDR into LR_GATE.
***   Make sure it`s inline with current Specification
      check LR_GATE->IS_IN_LINE( IR_GATE_SPEC ) eq ABAP_TRUE.
      check LR_GATE->IS_IN_LINE( LR_INPUT_GATE ) eq IF_INBOUND.
      append LR_GATE to RT_PRVDR.
    endloop.

*** Sort Resulting Provider
    ME->R_GATE->SORT_GATE( changing CT_GATE = RT_PRVDR ).

  endmethod.
  method GET_PRVDR_FFG_ALL.

    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_COMP type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_RTESPV type ref to ZCL_VCXI_FFSR_PR_RTESPV.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_COMP type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSR_PR_RTESPV=>C_IPRVT_F0_RTESPV
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Find Provider for FFG
      LT_GATE_COMP = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG
                                         IF_INUSE  = ABAP_TRUE ).

      loop at LT_GATE_COMP into LR_GATE_COMP.
        collect LR_GATE_COMP into RT_GATE_COMP.
      endloop.

    endloop.

  endmethod.
  method GET_PRVDR_INPUT.

    data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Provider of Input
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>C_IPRVT_INPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.
    move ER_GATE->R_CLSPR ?to ER_PR_INPUT.

***--------------------------------------------------------------------------------------
*** Find Child Provider for Input
    if ET_GATE_CHILD is requested.
      LT_PRVDR_DEF = ER_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        refresh LT_GATE.
        LT_GATE = ER_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                      IF_INUSE = ABAP_TRUE ).
        append lines of LT_GATE to ET_GATE_CHILD.
      endloop.
      sort ET_GATE_CHILD.
      delete adjacent duplicates from ET_GATE_CHILD.
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Provider of Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC eq 0.
    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

***--------------------------------------------------------------------------------------
*** Find Child Provider for Output
    if ET_GATE_CHILD is requested.
      LT_PRVDR_DEF = ER_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        refresh LT_GATE.
        LT_GATE = ER_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                      IF_INUSE = ABAP_TRUE ).
        append lines of LT_GATE to ET_GATE_CHILD.
      endloop.
      sort ET_GATE_CHILD.
      delete adjacent duplicates from ET_GATE_CHILD.
    endif.

  endmethod.
  method GET_RHNDL_IN.

*** We only consider the first Roll Handling Information for any Ingoing Connection
    read table ME->T_RHNDL_IN into RS_RHNDL index 1.

  endmethod.
  method GET_RHNDL_OUT.

    data: LS_RHNDL_OUT type ZVCXI_FFSR_S_RHNDL.
    data: LR_PR_RHNDL   type ref to ZCL_VCXI_FFSS_PR_RHNDL,
          LR_PR_MS_CORE type ref to ZCL_VCXI_FFSS_PR_MS_CORE.


*** Process available Roll Handling
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_RHNDL=>C_IPRVT_RHNDL
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ) into data(LR_GATE).
      LR_PR_RHNDL ?= LR_GATE->R_CLSPR.

***--------------------------------------------------------------------------------------
***   Add Roll Handling
      append value #( S_RHSRC = LR_PR_RHNDL->GET_RHSRC( )
                    ) to RT_RHNDL assigning field-symbol(<S_RHNDL>).

***--------------------------------------------------------------------------------------
***   Get Winding Information
      LR_PR_RHNDL->GET_RWSID( importing EF_RWSID = <S_RHNDL>-RWSID ).
      LR_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = <S_RHNDL>-RWDIR ).
      LR_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = <S_RHNDL>-EYEMP ).

***   Get Dimension Information
      <S_RHNDL>-RDMTA = LR_PR_RHNDL->GET_RDIMTA( importing ES_RDITA  = <S_RHNDL>-S_RDITA
                                                           ES_RLETA  = <S_RHNDL>-S_RLETA
                                                           ES_RWGTA  = <S_RHNDL>-S_RWGTA
                                                           EF_RLEOF  = <S_RHNDL>-RLEOF ).
      <S_RHNDL>-S_RLEOP = LR_PR_RHNDL->GET_RLEOP( ).

***   Get Core Information
      LR_PR_MS_CORE = LR_PR_RHNDL->GET_PRVDR_MS_CORE( ).
      if LR_PR_MS_CORE is bound.
        <S_RHNDL>-S_MS_CORE = value #( MATNR   = LR_PR_MS_CORE->GET_MATNR( )
                                       ROPCO   = LR_PR_MS_CORE->GET_ROPCO( )
                                       S_COMAR = LR_PR_MS_CORE->GET_COMAR( ) ).
      endif.
    endloop.

  endmethod.
  method GET_TPROC.

    data: LR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_INPUT      type ref to ZCL_VCXI_FFSS_PR_INPUT.

*** Get Process Type
    read table IT_GATE_INPUT into LR_GATE_INPUT index 1.
    try.
        move LR_GATE_INPUT->R_CLSPR ?to LR_INPUT.
        LR_INPUT->GET_TPROC( importing EF_TPROC = RF_TPROC ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear RF_TPROC.
    endtry.

  endmethod.
  method HANDLE_DET_RHNDL_IN.

    data:  LT_RHNDL_IN type        ZVCXI_FFSR_TT_RHNDL.
    data:  LR_BL_PRTE  type ref to ZCL_VCXI_FFSR_BL_PRTE.

***--------------------------------------------------------------------------------------
*** Get Ingoing Roll Handling of Selected Route
    try.
        move ME->R_RTESEL ?to LR_BL_PRTE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_BL_PRTE.
    endtry.
    if LR_BL_PRTE is bound.
      move LR_BL_PRTE->GET_RHNDL_IN( ) to LT_RHNDL_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Roll Handling Dimensions
    if LT_RHNDL_IN ne ME->T_RHNDL_IN.
***   Set new Value
      move LT_RHNDL_IN to ME->T_RHNDL_IN.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSR_RTESPV_RHNDL_IN~C_IEVNT_O_RHNDL_IN_CHANGED ).
    endif.

  endmethod.
  method HANDLE_DET_RHNDL_OUT.

***--------------------------------------------------------------------------------------
*** Get new Roll Handling based on specification
    data(LT_RHNDL_OUT) = ME->GET_RHNDL_OUT( ).

***--------------------------------------------------------------------------------------
*** Compare Roll Handling Dimensions
    if LT_RHNDL_OUT ne ME->T_RHNDL_OUT.
***   Set new Value
      move LT_RHNDL_OUT to ME->T_RHNDL_OUT.

***   Re-Evaluate all Routes
      ME->HANDLE_REEVALUATE( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_DET_RHNDL_OUT.
        ME->HANDLE_DET_RHNDL_OUT( ).

      when C_IEVNT_I_DET_RHNDL_IN.
        ME->HANDLE_DET_RHNDL_IN( ).

    endcase.

  endmethod.
  method HANDLE_INIT_EVQTY.

    types: begin of YS_EVQTY_CHILD,
             S_EVQTY type ZVCXI_XCSR_S_EVQTY,
             NOOUT   type ZVCXI_XCS_NOOUT,
           end   of YS_EVQTY_CHILD,
           YT_EVQTY_CHILD type standard table of YS_EVQTY_CHILD.

    data: LF_TABIX type        I,
          LF_NOOUT type        ZVCXI_XCS_NOOUT,
          LF_MATNR type        MATNR.
    data: LS_EVQTY       type        ZVCXI_XCSR_S_EVQTY,
          LS_EVQTY_CHILD type        ZVCXI_XCSR_S_EVQTY.
    data: LT_GATE_CHILD  type        /VCXI/VKSR_TT_GATE,
          LT_EVQTY_CHILD type        YT_EVQTY_CHILD.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG   type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONO type ref to ZCL_VCXI_FFSS_PR_FCONO.
    field-symbols: <S_EVQTY_CHILD> type YS_EVQTY_CHILD.

***--------------------------------------------------------------------------------------
*** Get Evaluation Quantity
    move ME->GET_EVQTY( ) to LS_EVQTY.
    clear: LS_EVQTY-EVQTY.

*** Get Provider for Output including children
    ME->GET_PRVDR_OUTPUT( importing ET_GATE_CHILD = LT_GATE_CHILD ).
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

*** Loop at all children
    loop at LT_GATE_CHILD into LR_GATE.
      move SY-TABIX to LF_TABIX.

***--------------------------------------------------------------------------------------
***   Check Gate is Finished Good
      clear LR_PR_FFG.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FFG.
      endtry.
      if LR_PR_FFG is bound.

***     Get Detials for FFG
        append initial line to LT_EVQTY_CHILD assigning <S_EVQTY_CHILD>.
        ME->GET_EVQTY_BY_FFG( exporting IR_GATE_FFG = LR_GATE
                              importing ES_EVQTY    = <S_EVQTY_CHILD>-S_EVQTY
                                        EF_NOOUT    = <S_EVQTY_CHILD>-NOOUT ).

***     Add Child #Outs to Total #Outs
        add <S_EVQTY_CHILD>-NOOUT to LF_NOOUT.

***     After MBQ, clear EVQTY of co-products
        if LF_TABIX gt 1 .
          clear LF_MATNR.
          LR_PR_FFG->GET_MATNR( importing EF_MATNR = LF_MATNR ).
          if LF_MATNR is not initial.
            clear <S_EVQTY_CHILD>-S_EVQTY-EVQTY.
          endif.
        endif.

      endif.

***--------------------------------------------------------------------------------------
***   Check Gate is Film Connection Out
      clear LR_PR_FCONO.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FCONO.
      endtry.
      if LR_PR_FCONO is bound.
***     Get Details for Film Connection Out
        append initial line to LT_EVQTY_CHILD assigning <S_EVQTY_CHILD>.
        ME->GET_EVQTY_BY_FCONO( exporting IR_GATE_FCONO = LR_GATE
                                          IF_TABIX      = LF_TABIX
                                importing ES_EVQTY      = <S_EVQTY_CHILD>-S_EVQTY
                                          EF_NOOUT      = <S_EVQTY_CHILD>-NOOUT ).
***     Add Child #Outs to Total #Outs
        add <S_EVQTY_CHILD>-NOOUT to LF_NOOUT.
      endif.

    endloop.


***--------------------------------------------------------------------------------------
*** Find maximum Evaluation Quantity
    loop at LT_EVQTY_CHILD assigning <S_EVQTY_CHILD>.
***  Ensure the determination was successful
      check <S_EVQTY_CHILD>-S_EVQTY-EVQTY_UOM is not initial and
            <S_EVQTY_CHILD>-NOOUT is not initial.

      clear LS_EVQTY_CHILD-EVQTY.
      LS_EVQTY_CHILD-EVQTY     = <S_EVQTY_CHILD>-S_EVQTY-EVQTY * ( LF_NOOUT / <S_EVQTY_CHILD>-NOOUT ).
      LS_EVQTY_CHILD-EVQTY_UOM = <S_EVQTY_CHILD>-S_EVQTY-EVQTY_UOM.

      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_EVQTY_CHILD-EVQTY
                                                      IF_CALCV_UOM_1 = LS_EVQTY_CHILD-EVQTY_UOM
                                                      IF_CALCV_2     = LS_EVQTY-EVQTY
                                                      IF_CALCV_UOM_2 = LS_EVQTY-EVQTY_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ).
        move LS_EVQTY_CHILD to LS_EVQTY.
      endif.
    endloop.

*** Set Evaluation Quantity
    ME->SET_EVQTY( IS_EVQTY = LS_EVQTY ).

  endmethod.
  method IS_DUMMY_ALLOWED.

    data: LR_GATE               type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FFG             type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_PR_FCONI           type ref to ZCL_VCXI_FFSS_PR_FCONI,
          LR_PR_FCONO           type ref to ZCL_VCXI_FFSS_PR_FCONO.
    data: LT_GATE_CHILD_INPUT   type        /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILD_OUTPUT  type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Super check
    RF_ALLOWED = SUPER->IS_DUMMY_ALLOWED( ).

***--------------------------------------------------------------------------------------
*** Get Input Types
    ME->GET_PRVDR_INPUT( importing ET_GATE_CHILD = LT_GATE_CHILD_INPUT ).

*** Get Output Types
    ME->GET_PRVDR_OUTPUT( importing ET_GATE_CHILD = LT_GATE_CHILD_OUTPUT ).

***--------------------------------------------------------------------------------------
*** Check: Output Film Finished Good and no Production Steps
    loop at LT_GATE_CHILD_OUTPUT into LR_GATE.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FFG.
          exit. " First FFG is fine
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FFG.
          continue.
      endtry.

    endloop.

    if LR_PR_FFG      is bound and
       ME->T_BL_PSTEP is initial.
***   No Production Steps for FFG Component -> No Dummy
      move ABAP_FALSE to RF_ALLOWED.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Check complete empty film component (XCONI->XCONO)
    loop at LT_GATE_CHILD_INPUT into LR_GATE.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FCONI.
          exit.
      endtry.

    endloop.

    loop at LT_GATE_CHILD_OUTPUT into LR_GATE.

      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_FCONO.
          exit.
      endtry.

    endloop.

    if LR_PR_FCONI is bound and
       LR_PR_FCONO is bound and
       ME->T_BL_PSTEP is initial.
***   Empty Film Component without Production Steps -> No Dummy
      move ABAP_FALSE to RF_ALLOWED.
      return.
    endif.

  endmethod.
  method OPTIMIZE_EXTR.

    data: LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP_EXTR type ref to ZCL_VCXI_FFSR_BL_PSTEP_EXTR.

*** Find Work Center with Extrusion
    loop at IR_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            clear LR_BL_PSTEP_EXTR.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_EXTR.
            if LR_BL_PSTEP_EXTR is bound.
***           Optimize for Work Center
              RF_RECHECK = LR_BL_PSTEP_EXTR->OPTIMIZE( IR_ARBPL = LR_RTE_ARBPL->R_ARBPL ).
              exit.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_BL_PSTEP_EXTR.
        endtry.
      endloop.
    endloop.

  endmethod.
  method VALIDATE.

    data: LF_EXTR    type        ABAP_BOOL,
          LF_RECHECK type        ABAP_BOOL.
    data: LR_BL_PRTE      type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_BL_PSTEP     type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_FFSR_BL_PRTE type ref to ZCL_VCXI_FFSR_BL_PRTE.

    SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***--------------------------------------------------------------------------------------
*** Search for Extrusion PStep
    loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
      if LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_FFSR_BL_PSTEP_EXTR=>C_IPSTP_EXTR.
        move ABAP_TRUE to LF_EXTR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Process Routes
    loop at CT_BL_PRTE into LR_BL_PRTE.
      clear LF_RECHECK.

      try.
          move LR_BL_PRTE ?to LR_FFSR_BL_PRTE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_FFSR_BL_PRTE.
      endtry.

***   Check all Extruder, that they have Extrusion as PStep if not delete route
      if LR_FFSR_BL_PRTE is bound.
        if LR_FFSR_BL_PRTE->CHECK_EXTR_PSTEP( ) eq ABAP_FALSE.
***       Delete this route
          delete CT_BL_PRTE index SY-TABIX.
          continue.
        endif.
      endif.

***   Optimize Extrusion for Work Center
      if LF_EXTR eq ABAP_TRUE.
        LF_RECHECK =  ME->OPTIMIZE_EXTR( IR_RTE_PRTE = LR_BL_PRTE->R_RTE_PRTE ).
      endif.

***   Update Roll Handling for complete Route
      if LR_FFSR_BL_PRTE is bound.
        LR_FFSR_BL_PRTE->SET_RHNDL_OUT( IT_RHNDL_OUT = ME->T_RHNDL_OUT ).

***     Update Route with new Roll Handling Information
        LR_FFSR_BL_PRTE->UPDATE_RHNDL( ).

***     Determine the new Roll Handling inbound for the selected route
        if LR_BL_PRTE eq ME->R_RTESEL.
          ME->HANDLE_DET_RHNDL_IN( ).
        endif.

        move ABAP_TRUE to LF_RECHECK.
      endif.

***   Recheck
      if LF_RECHECK eq ABAP_TRUE.
        LR_BL_PRTE->CHECK( ).
        LR_BL_PRTE->INIT_RELPO( ).
      endif.
    endloop.

  endmethod.
  method ZIF_VCXI_FFSR_RTESPV_RHNDL_IN~GET_RHNDL_IN.

*** We only consider the first Roll Handling Information for any Ingoing Connection
    read table ME->T_RHNDL_IN into RS_RHNDL_IN index 1.

  endmethod.
