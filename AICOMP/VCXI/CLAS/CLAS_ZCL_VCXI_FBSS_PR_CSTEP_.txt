
class ZCL_VCXI_FBSS_PR_CSTEP definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_FBSS_COMM_NEXT .
  interfaces ZIF_VCXI_FBSS_COMM_PREV .
  interfaces ZIF_VCXI_F0S_LTEXT .

  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IPRVT_CSTEP type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_CSTEP' ##NO_TEXT.
  constants C_PARID_BGHEI type /VCXI/VKS_PARID value 'ZVCXI_FB_BGHEI' ##NO_TEXT.
  constants C_PARID_BGWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWGT' ##NO_TEXT.
  constants C_PARID_BGWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWID' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDWI' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.

  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_F0S_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods GET_LTEXT
    exporting
      !EF_LTEXT type ZVCXI_F0S_LTEXT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_LTEXT
    importing
      !IF_LTEXT type ZVCXI_F0S_LTEXT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods ADD_CSTEP_PRVDR
    redefinition .
  methods GET_CSTEPS_DEF
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD
    redefinition .
  methods GET_STATUS
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_BGBPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGFPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGHEI_CHANGED type /VCXI/VKSC_IEVNT value 'BGHEI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BGWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWID_CHANGED type /VCXI/VKSC_IEVNT value 'BGWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBAGT_CHANGED type /VCXI/VKSC_IEVNT value 'IBAGT_CHANGED' ##NO_TEXT.
  constants C_PARID_BGBPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGBPX' ##NO_TEXT.
  constants C_PARID_BGFPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGFPX' ##NO_TEXT.
  constants C_PARID_LTEXT type /VCXI/VKS_PARID value 'ZVCXI_F0_LTEXT' ##NO_TEXT.

  methods GET_BAGTY_CONV
    importing
      !IR_GATE_CONV type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP
      !ET_RECLO type ZVCXI_FBSSC_TT_BAGTY_RECLO
    raising
      /VCXI/CX_CKX .
  methods CHECK_CSTEP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_HNDDIM
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_CUTOUT
    exporting
      !ES_COARE type ZVCXI_FBS_S_COARE
      !EF_LCOUT type ZVCXI_FBS_LCOUT
    raising
      /VCXI/CX_CKX .
  methods SET_BGBPX
    importing
      !IF_BGBPX type ZVCXI_FBS_BGBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGHEI
    importing
      !IS_BGHEI type ZVCXI_FBS_S_BGHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWGT
    importing
      !IS_BGWGT type ZVCXI_FBS_S_BGWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_F0S_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods SET_BGWID
    importing
      !IS_BGWID type ZVCXI_FBS_S_BGWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_F0S_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods SET_IBAGT
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_F0S_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_F0S_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_F0S_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_F0S_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_CSTEP definition
class ZCL_VCXI_FBSS_PR_CSTEP implementation.
  method ADD_CSTEP_PRVDR.

    data: LF_POSID     type        /VCXI/VKSR_POSID,
          LF_ID        type        /VCXI/CKX_ID,
          LF_PARAM_VAL type        /VCXI/CKX_ID,
          LF_TRECL     type        ZVCXI_FBS_TRECL.
    data: LS_PRVDR_DEF type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_RECLO     type        ZVCXI_FBSSC_S_BAGTY_RECLO.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_BCOMP type ref to ZCL_VCXI_FBSS_PR_BCOMP,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.

    move IF_FCODE+4 to LF_ID.

***--------------------------------------------------------------------------------------
*** Check for Reclosing Step
    if IF_FCODE cs ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
      read table IT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.
      if SY-SUBRC is initial.
***     Get Bag component PR
        if ME->R_GATE is bound.
          LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BCOMP=>C_IPRVT_FB_BCOMP ).
          read table LT_GATE into LR_GATE index 1.
          if LR_GATE is bound.
            try .
                move LR_GATE->R_CLSPR ?to LR_PR_BCOMP.
              catch CX_SY_MOVE_CAST_ERROR.
                clear LR_PR_BCOMP.
            endtry.
          endif.
        endif.

***     Get the Reclosing Type
        if LINES( LS_PRVDR_DEF-T_RECLO ) gt 1.
***       Call Popup to decide because there are more than 1 entry
          if LR_PR_BCOMP is bound.
            LR_PR_BCOMP->DISPLAY_POPUP_RECLO_STEPS( exporting IT_RECLO = LS_PRVDR_DEF-T_RECLO
                                                    importing EF_TRECL = LF_TRECL ).
          endif.
        else.
          read table LS_PRVDR_DEF-T_RECLO into LS_RECLO index 1.
          if SY-SUBRC is initial.
            move LS_RECLO-TRECL to LF_TRECL.
          endif.
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Add Conversion Step Gate
    if IF_FCODE cp 'ADD@*'.
      read table IT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.

      if ME->R_GATE is bound.
        read table LS_PRVDR_DEF-T_GATE_SEQ with key TABLE_LINE = ME->R_GATE transporting no fields.
        if SY-SUBRC is initial.
          LF_POSID = SY-TABIX.
          multiply LF_POSID by 10.
        endif.
      endif.

***   Always last position
      add 5 to LF_POSID.

***--------------------------------------------------------------------------------------
***   Create Provider if Parent Gate is available
      if LS_PRVDR_DEF-R_PARENT_GATE is bound.
***     Create element
        RR_GATE = LS_PRVDR_DEF-R_PARENT_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
        if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
          RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.
        RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

***     Reorg position ID's
        RR_GATE->REORG_POSID( ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Add the Reclosing Conversion Step
    if RR_GATE is bound and LF_TRECL is not initial.
      if LR_PR_BCOMP is bound.
        move LF_TRECL to LF_PARAM_VAL.

***     Set Reclosing Type parameter
        LR_PR_BCOMP->SET_PRVDR_PARAM( exporting IR_GATE = RR_GATE
                                                IF_PARAM_VAL = LF_PARAM_VAL ).
      endif.
    endif.

  endmethod.
  method CHECK_CSTEP.

*** 0 - No error.
*** 1 - Conversion & not allowed
*** 2 - Maximum & Conversion &.
*** 3 - Minimum & Conversion &.

    data: LF_IBAGT type        ZVCXI_FBS_IBAGT,
          LF_DESCR type        /VCXI/CKX_DESCR.
    data: LS_CSTEP  type        ZVCXI_FBSSC_S_BAGTY_CSTEP,
          LS_BGICS  type        ZVCXI_FBSS_S_BGICS,
          LS_TC030T type        ZVCXI_FBS_TC030T.
    data: LT_CSTEP      type        ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


    move 0 to RF_RETURN.

*** Get Bag Customizing
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).
    if LR_CUST_BAG is bound.
***   Get Definition of Conversion Step based on Bag Type Customizing
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    read table LT_CSTEP into LS_CSTEP with key ICSTP = ME->R_GATE->F_ID.

    if SY-SUBRC ne 0.
***   Conversion & not allowed
      move 1 to RF_RETURN.
    else.

***   Get Bag Forward Property XML (Outbound)
      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
      check LR_BL_BGFPROP is bound.
      read table LR_BL_BGFPROP->T_BGICS into LS_BGICS with key ICSTP = LS_CSTEP-ICSTP.
      if SY-SUBRC ne 0.
***     Conversion Step not added to "Included Conversion Steps"
        raise exception type /VCXI/CX_CKX.
      else.
***     Check Min/Max both are infinite
        if LS_CSTEP-QTYMI is initial and
           LS_CSTEP-QTYMA is initial.
          move 0 to RF_RETURN.
        else.
          if LS_CSTEP-QTYMA lt LS_BGICS-CCSTP.
***         Maximum & Conversion &.
            move 2 to RF_RETURN.
          endif.
          if LS_CSTEP-QTYMI gt LS_BGICS-CCSTP.
***         Minimum & Conversion &
            move 3 to RF_RETURN.
          endif.
        endif.
      endif.
    endif.

    if IR_MESSAGE is supplied.

***   Get Conversion Descriptions
      clear LS_TC030T.
      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T with key ICSTP = ME->R_GATE->F_ID.
      move LS_TC030T-DESCR to LF_DESCR.

      case RF_RETURN.
        when 1.
***       Conversion &1 not allowed.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '480'
                                   IF_MSGV1 = LF_DESCR ).

        when 2.
***       Maximum &1 Conversion &2 allowed.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '482'
                                   IF_MSGV1 = LS_CSTEP-QTYMA
                                   IF_MSGV2 = LF_DESCR ).

        when 3.
***       Minimum &1 Conversion &2 needed.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '481'
                                   IF_MSGV1 = LS_CSTEP-QTYMI
                                   IF_MSGV2 = LF_DESCR ).
      endcase.
    endif.

  endmethod.
  method CHECK_HNDDIM.

    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.


*** Get Handling Dimensions
    LS_HNDDIM = ME->GET_HNDDIM( ).

*** Check Handling Dimension
    if LS_HNDDIM-HNDLE is not initial and
       LS_HNDDIM-HNDWI is not initial and
       LS_HNDDIM-HNDHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Handling Dimensions are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '488' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Handling Dimensions are not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '489' ).
      endif.
    endif.

  endmethod.
  method GET_BAGTY_CONV.

    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_INPUT type ref to ZCL_VCXI_FBSS_PR_INPUT,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.

*** Get Input Gate
    LT_GATE = IR_GATE_CONV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_INPUT=>C_IPRVT_INPUT
                                       IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    check LR_GATE is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.
    check LR_PR_INPUT is bound.

    LR_PR_INPUT->GET_BAGTY_CONV( importing ET_CSTEP = ET_CSTEP
                                           ET_RECLO = ET_RECLO  ).

  endmethod.
  method GET_CSTEPS_DEF.

    data: LF_ACTIV_PRVDR type NUMC3.
    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF,
          LS_PRVDR     type ZVCXI_F0SS_S_PRVDR_DEF,
          LS_CSTEP     type ZVCXI_FBSSC_S_BAGTY_CSTEP.
    data: LT_CSTEP     type ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_RECLO     type ZVCXI_FBSSC_TT_BAGTY_RECLO,
          LT_PRVDR     type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SPEC   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC     type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_PARENT_GATE type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_PRVDR_CSTEPS> type ZVCXI_F0SS_S_PRVDR_DEF.


***--------------------------------------------------------------------------------------
*** Get Specification
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into LR_GATE_SPEC index 1.
    check LR_GATE_SPEC is bound.
    try .
        move LR_GATE_SPEC->R_CLSPR ?to LR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SPEC.
    endtry.

    check LR_PR_SPEC is bound.

    refresh LT_PRVDR_DEF.
    LT_PRVDR_DEF = LR_GATE_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'CONV'.
    check LS_PRVDR_DEF-IPRVT is not initial.

*** Get Gates of Provider
    LT_GATE = LR_GATE_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_PARENT_GATE with key TABLE_LINE->F_ID = 'CONV'.
    check LR_PARENT_GATE is bound.

*** Get Bag Type Conversion
    ME->GET_BAGTY_CONV( exporting IR_GATE_CONV = LR_PARENT_GATE
                        importing ET_CSTEP     = LT_CSTEP
                                  ET_RECLO     = LT_RECLO ).

*** Get Provider Definition
    refresh LT_PRVDR_DEF.
    LT_PRVDR_DEF = LR_PARENT_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    sort LT_PRVDR_DEF by ID.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    insert initial line into table ET_PRVDR_CSTEPS assigning <S_PRVDR_CSTEPS>.
    move ZCL_VCXI_F0SS_ND_CSTEP=>C_UC_SPLIT to <S_PRVDR_CSTEPS>-ID.

    loop at LT_CSTEP into LS_CSTEP.
      clear: LF_ACTIV_PRVDR, LS_PRVDR.

      read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LS_CSTEP-ICSTP.
      check SY-SUBRC is initial.

***   Get Gates of Provider
      LT_GATE = LR_PARENT_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                           IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
***     Get all Active Provider with searched ID
        check LR_GATE->F_ID eq LS_PRVDR_DEF-ID.
        add 1 to LF_ACTIV_PRVDR.
      endloop.

***   Check if there are less then maximal Provider
      check LF_ACTIV_PRVDR < LS_CSTEP-QTYMA.

      move LS_PRVDR_DEF to LS_PRVDR-S_PRVDR_DEF.
      move LT_GATE      to LS_PRVDR-T_GATE_SEQ.
      LR_PARENT_GATE->SORT_GATE( changing CT_GATE = LS_PRVDR-T_GATE_SEQ ).
      move LR_PARENT_GATE  to LS_PRVDR-R_PARENT_GATE.

      if LS_CSTEP-ICSTP eq ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_ICSTP_RECLO.
        move LT_RECLO[] to LS_PRVDR-T_RECLO[].
      endif.

      append LS_PRVDR to ET_PRVDR_CSTEPS.
    endloop.

  endmethod.
  method GET_CUTOUT.

***  Implement the return Cutout Area and Location if Conversion changes it
    return.

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = cond #( "when <no calculation> ne ABAP_TRUE then ABAP_UNDEFINED
                       when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LTEXT ).
    move LS_PARAM-STRNG to EF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

***--------------------------------------------------------------------------------------
*** Check Conversion Steps
    if ME->CHECK_CSTEP( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Handling Dimension
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_HNDDIM( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Conversion Steps
    ME->CHECK_CSTEP( exporting IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Handling Dimensions
    ME->CHECK_HNDDIM( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


***--------------------------------------------------------------------------------------
*** Only recalculate Handling Dimensions if they are not overridden.
    ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
*** Get Bag Forward Property (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    check LR_BL_BGFPROP is bound.

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LR_BL_BGFPROP->S_HNDDIM ).

  endmethod.
  method SET_BGBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).

    move IF_BGBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGBPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).

    move IF_BGFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGFPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGHEI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).

    move IS_BGHEI-BGHEI     to LS_PARAM-ATFLV.
    move IS_BGHEI-BGHEI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGHEI_CHANGED ).
    endif.

  endmethod.
  method SET_BGWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).

    move IS_BGWGT-BGWGT     to LS_PARAM-ATFLV.
    move IS_BGWGT-BGWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BGWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).

    move IS_BGWID-BGWID     to LS_PARAM-ATFLV.
    move IS_BGWID-BGWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWID_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_IBAGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).

    move IF_IBAGT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBAGT_CHANGED ).
    endif.

  endmethod.
  method SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_F0S_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_F0S_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LF_IBAGT      type ZVCXI_FBS_IBAGT,
          LF_IBAGT_PREV type ZVCXI_FBS_IBAGT.
    data: LS_BGWID      type ZVCXI_FBS_S_BGWID,
          LS_BGWID_PREV type ZVCXI_FBS_S_BGWID,
          LS_BGHEI      type ZVCXI_FBS_S_BGHEI,
          LS_BGHEI_PREV type ZVCXI_FBS_S_BGHEI.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FBSS_COMM_PREV,
          LR_BL_BGBPROP      type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGBPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGBPROP.


***--------------------------------------------------------------------------------------
*** Create new Bag Backward Property Instance
    LR_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***--------------------------------------------------------------------------------------
***   Get first defined Bag Type
      LR_COMM_PREV->GET_IBAGT( importing EF_IBAGT = LF_IBAGT_PREV ).
      if LF_IBAGT is initial.
        move LF_IBAGT_PREV to LF_IBAGT.
      endif.

***   Get first defined Bag Width
      LR_COMM_PREV->GET_BGWID( importing ES_BGWID = LS_BGWID_PREV ).
      if LS_BGWID-BGWID is initial.
        move LS_BGWID_PREV to LS_BGWID.
      endif.

***   Get first defined Bag Height
      LR_COMM_PREV->GET_BGHEI( importing ES_BGHEI = LS_BGHEI_PREV ).
      if LS_BGHEI-BGHEI is initial.
        move LS_BGHEI_PREV to LS_BGHEI.
      endif.

***   Combine Bag Forward Property
      LR_COMM_PREV->GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
      LR_BL_BGBPROP->MERGE( IR_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Bag Type
    ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).

*** Backward Bag Width
    ME->SET_BGWID( IS_BGWID = LS_BGWID ).

*** Backward Bag Height
    ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).

*** Backward Bag Backward Property XML
    ME->SET_BGBPX( IF_BGBPX = LR_BL_BGBPROP->GET_BGBPX( ) ).

  endmethod.
  method ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD.

    data: LS_BGWGT      type ZVCXI_FBS_S_BGWGT,
          LS_BGWGT_NEXT type ZVCXI_FBS_S_BGWGT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_FBSS_COMM_NEXT,
          LR_BL_BGFPROP      type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_BL_BGFPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


***--------------------------------------------------------------------------------------
*** Create new Bag Forward Property Instance
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***--------------------------------------------------------------------------------------
***   Get Sum of Bag Weight
      LR_COMM_NEXT->GET_BGWGT( importing ES_BGWGT = LS_BGWGT_NEXT ).
      if LS_BGWGT_NEXT is not initial.
        if LS_BGWGT is initial.
          move LS_BGWGT_NEXT to LS_BGWGT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWGT_NEXT-BGWGT
                                                              IF_CALCV_UOM_1 = LS_BGWGT_NEXT-BGWGT_UOM
                                                              IF_CALCV_2     = LS_BGWGT-BGWGT
                                                              IF_CALCV_UOM_2 = LS_BGWGT-BGWGT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_BGWGT-BGWGT_UOM
                                                    importing EF_CALCV       = LS_BGWGT-BGWGT
                                                              EF_CALCV_UOM   = LS_BGWGT-BGWGT_UOM ).
        endif.
      endif.

***   Combine Bag Forward Property
      LR_COMM_NEXT->GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
      LR_BL_BGFPROP->MERGE( IR_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Forward Bag Weight
    ME->SET_BGWGT( IS_BGWGT = LS_BGWGT ).

*** Forward Bag Forward Property XML
    ME->SET_BGFPX( IF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ) ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).
    move LS_PARAM-STRNG to EF_BGBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

    data:           LF_LCOUT        type        ZVCXI_FBS_LCOUT.
    data:           LS_COARE        type        ZVCXI_FBS_S_COARE.
    data:           LT_BPINFO       type        ZVCXI_FBSS_TT_BPINFO.
    data:           LR_BL_BGFPROP   type ref to ZCL_VCXI_FBSS_BL_BGFPROP.
    field-symbols:  <S_BPINFO>      type        ZVCXI_FBSS_S_BPINFO.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property XML (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing EF_BGFPX = EF_BGFPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).

***--------------------------------------------------------------------------------------
*** Add Conversion Step to Bag Property Popup
    LR_BL_BGFPROP->ADD_BGICS( IF_ICSTP = ME->R_GATE->F_ID ).

*** Set Handling Dimensions to Forward Properties
    LR_BL_BGFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

***--------------------------------------------------------------------------------------
*** Get Cutout Area & Location
    ME->GET_CUTOUT( importing ES_COARE = LS_COARE
                              EF_LCOUT = LF_LCOUT ).

    if     LS_COARE is not initial
       and LF_LCOUT is not initial.

***   Get changed Bag Part Area and Surface Weight
      append lines of LR_BL_BGFPROP->T_BPINFO to LT_BPINFO.
      read table LT_BPINFO assigning <S_BPINFO> with key IBPAR = LF_LCOUT.
      if SY-SUBRC = 0.

***     Reduce Bag Part Area by Cutout Area
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_BPINFO>-BPARE
                                                            IF_CALCV_UOM_1 = <S_BPINFO>-BPARE_UOM
                                                            IF_CALCV_2     = LS_COARE-COARE
                                                            IF_CALCV_UOM_2 = LS_COARE-COARE_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = <S_BPINFO>-BPARE_UOM
                                                  importing EF_CALCV       = <S_BPINFO>-BPARE
                                                            EF_CALCV_UOM   = <S_BPINFO>-BPARE_UOM ).

***     No negative Area
        if <S_BPINFO>-BPARE lt 0.
          move 0 to <S_BPINFO>-BPARE.
        endif.

***     Set Bag Property Popup -> Bag Bparts Info
        LR_BL_BGFPROP->SET_BPINFO( IT_BPINFO = LT_BPINFO ).

      endif.
    endif.

*** Return Bag Forward Property XML
    EF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ).

    if ER_BL_BGFPROP is requested.
      move LR_BL_BGFPROP to ER_BL_BGFPROP.
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT.

    data: LF_LCOUT            type        ZVCXI_FBS_LCOUT.
    data: LS_COARE       type        ZVCXI_FBS_S_COARE,
          LS_BPINFO_PREV type        ZVCXI_FBSS_S_BPINFO,
          LS_BPINFO_NEXT type        ZVCXI_FBSS_S_BPINFO,
          LS_BPWGT_PREV  type       ZVCXI_FBS_S_BPWGT,
          LS_BPWGT_NEXT  type       ZVCXI_FBS_S_BPWGT,
          LS_BPWGT_DIFF  type       ZVCXI_FBS_S_BPWGT.
    data: LR_BL_BGFPROP_PREV type ref to ZCL_VCXI_FBSS_BL_BGFPROP,
          LR_BL_BGFPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

*** Get Bag Weight (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT( importing ES_BGWGT = ES_BGWGT
                                                     EF_SETBY = EF_SETBY ).

*** Get Cutout Area & Location
    ME->GET_CUTOUT( importing ES_COARE = LS_COARE
                              EF_LCOUT = LF_LCOUT ).

    check LS_COARE is not initial
      and LF_LCOUT is not initial.

*** Get Bag Forward Property XML (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_PREV ).
    check LR_BL_BGFPROP_PREV is bound.

*** Get Bag Forward Property XML (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP_NEXT ).
    check LR_BL_BGFPROP_NEXT is bound.

*** Get Bag Part Info (Previous)
    read table LR_BL_BGFPROP_PREV->T_BPINFO into LS_BPINFO_PREV with key IBPAR = LF_LCOUT.
    if SY-SUBRC eq 0.

***   Calculate Bag Part Weight (Inbound)
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO_PREV-BPARE
                                                          IF_CALCV_UOM_1 = LS_BPINFO_PREV-BPARE_UOM
                                                          IF_CALCV_2     = LS_BPINFO_PREV-SURWT
                                                          IF_CALCV_UOM_2 = LS_BPINFO_PREV-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = ES_BGWGT-BGWGT_UOM
                                                importing EF_CALCV       = LS_BPWGT_PREV-BPWGT
                                                          EF_CALCV_UOM   = LS_BPWGT_PREV-BPWGT_UOM ).

    endif.

*** Get Bag Part Info (Next)
    read table LR_BL_BGFPROP_NEXT->T_BPINFO into LS_BPINFO_NEXT with key IBPAR = LF_LCOUT.
    if SY-SUBRC eq 0.

***   Calculate Bag Part Weight (Outbound)
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPINFO_NEXT-BPARE
                                                          IF_CALCV_UOM_1 = LS_BPINFO_NEXT-BPARE_UOM
                                                          IF_CALCV_2     = LS_BPINFO_NEXT-SURWT
                                                          IF_CALCV_UOM_2 = LS_BPINFO_NEXT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = ES_BGWGT-BGWGT_UOM
                                                importing EF_CALCV       = LS_BPWGT_NEXT-BPWGT
                                                          EF_CALCV_UOM   = LS_BPWGT_NEXT-BPWGT_UOM ).

    endif.

*** Calculate Bag Part Difference
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPWGT_PREV-BPWGT
                                                        IF_CALCV_UOM_1 = LS_BPWGT_PREV-BPWGT_UOM
                                                        IF_CALCV_2     = LS_BPWGT_NEXT-BPWGT
                                                        IF_CALCV_UOM_2 = LS_BPWGT_NEXT-BPWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = ES_BGWGT-BGWGT_UOM
                                              importing EF_CALCV       = LS_BPWGT_DIFF-BPWGT
                                                        EF_CALCV_UOM   = LS_BPWGT_DIFF-BPWGT_UOM ).

    check LS_BPWGT_DIFF-BPWGT gt 0.

*** Calculate Bag Weight (Outbound)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_BGWGT-BGWGT
                                                        IF_CALCV_UOM_1 = ES_BGWGT-BGWGT_UOM
                                                        IF_CALCV_2     = LS_BPWGT_DIFF-BPWGT
                                                        IF_CALCV_UOM_2 = LS_BPWGT_DIFF-BPWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = ES_BGWGT-BGWGT_UOM
                                              importing EF_CALCV       = ES_BGWGT-BGWGT
                                                        EF_CALCV_UOM   = ES_BGWGT-BGWGT_UOM ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT.

    data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

    clear EF_DESCR.
    check EF_IBAGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    if ER_CUST_BAG is requested or
       EF_DESCR    is requested.
      ER_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
    endif.

*** Get Description
    if ER_CUST_BAG is bound and
       EF_DESCR    is requested.
      move ER_CUST_BAG->GET_DESCR( ) to EF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGBPX.

***--------------------------------------------------------------------------------------
*** Get Bag Backwarad Property XML (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing EF_BGBPX = EF_BGBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).
    move LS_PARAM-STRNG to EF_BGFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGHEI.

*** Get Bag Height (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = ES_BGHEI
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).
    move LS_PARAM-ATFLV to ES_BGWGT-BGWGT.
    move LS_PARAM-UNIT  to ES_BGWGT-BGWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_BGWID.

*** Get Bag Width (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = ES_BGWID
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_PREV~GET_IBAGT.

*** Get Bag Type (Outbound)
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT    = EF_IBAGT
                                                     EF_SETBY    = EF_SETBY
                                                     EF_DESCR    = EF_DESCR
                                                     ER_CUST_BAG = ER_CUST_BAG ).

  endmethod.
