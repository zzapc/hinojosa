
class ZCL_VCXI_XCSR_TREE_RTEALT definition
  public
  create public .

public section.
  type-pools ICON .

  constants C_LLAYO_MAW type ZVCXI_XCSR_LLAYO value 'MAW'. "#EC NOTEXT
  constants C_LLAYO_MAWP type ZVCXI_XCSR_LLAYO value 'MAWP'. "#EC NOTEXT
  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IF_LLAYO type ZVCXI_XCSR_LLAYO
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_UI_RTESPV type ref to ZCL_VCXI_XCSR_UI_RTESPV
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_MGRP_NODEKEY,
            T_MTYPE  type /VCXI/CKX_TT_OBJECT,
            NODEKEY  type TM_NODEKEY,
          end of YS_MGRP_NODEKEY .
  types:
    YT_MGRP_NODEKEY type standard table of YS_MGRP_NODEKEY .

  constants C_COLUMN_BTN_EDIT type TV_ITMNAME value 'BTN_EDIT'. "#EC NOTEXT
  constants C_COLUMN_DECIS type TV_ITMNAME value 'DECIS'. "#EC NOTEXT
  constants C_COLUMN_DYN type TV_ITMNAME value 'DYN_'. "#EC NOTEXT
  constants C_COLUMN_HDR type TV_ITMNAME value 'HDR'. "#EC NOTEXT
  constants C_COLUMN_RANK type TV_ITMNAME value 'RANK_'. "#EC NOTEXT
  constants C_COLUMN_RELCO type TV_ITMNAME value 'RELCO'. "#EC NOTEXT
  constants C_COLUMN_RSRCE type TV_ITMNAME value 'RSRCE'. "#EC NOTEXT
  constants C_COLUMN_STICO type TV_ITMNAME value 'STICO'. "#EC NOTEXT
  data F_CONTAINER_NAME type SCRFNAME .
  data F_IDX_GRP type NUMC5 .
  data F_IDX_RTE type NUMC5 .
  data F_LLAYO type ZVCXI_XCSR_LLAYO .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .
  data R_UI_RTESPV type ref to ZCL_VCXI_XCSR_UI_RTESPV .
  data T_MGRP_NODEKEY type YT_MGRP_NODEKEY .

  methods ADD_COLUMN_BY_DTEL
    importing
      !IF_NAME type TV_ITMNAME
      !IF_ROLLNAME type ROLLNAME
    raising
      /VCXI/CX_CKX .
  methods GET_DATA
    exporting
      !ET_NODE type TREEMCNOTA
      !ET_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods GET_NODEKEY_MGRP
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    exporting
      !EF_NODEKEY type TM_NODEKEY
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods SET_EVENT
    raising
      /VCXI/CX_CKX .
  methods UPDATE_COLUMN_DEF
    importing
      !IT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BL_PRTE_EVALUATED
    for event BL_PRTE_EVALUATED of ZCL_VCXI_XCSR_PR_RTESPV .
private section.

  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
endclass. "ZCL_VCXI_XCSR_TREE_RTEALT definition
class ZCL_VCXI_XCSR_TREE_RTEALT implementation.
method ADD_COLUMN_BY_DTEL.

  data:  LF_WIDTH           type        I,
         LF_HEADER_TEXT     type        TV_HEADING,
         LF_HEADER_TOOLTIP  type        TV_HEADING.
  data:  LS_DFIES           type        DFIES.
  data:  LR_ELEMDESCR       type ref to CL_ABAP_ELEMDESCR.

***----------------------------------------------------------------------------
  LR_ELEMDESCR ?= CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( P_NAME = IF_ROLLNAME ).
  LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

  move LS_DFIES-OUTPUTLEN to LF_WIDTH.

  if LS_DFIES-OUTPUTLEN gt LS_DFIES-SCRLEN3.
    move LS_DFIES-SCRTEXT_L to LF_HEADER_TEXT.

  elseif LS_DFIES-OUTPUTLEN gt LS_DFIES-SCRLEN2.
    move LS_DFIES-SCRTEXT_M to LF_HEADER_TEXT.

  else.
    move LS_DFIES-SCRTEXT_S to LF_HEADER_TEXT.
  endif.

  move LS_DFIES-SCRTEXT_L to LF_HEADER_TOOLTIP.

***----------------------------------------------------------------------------
*** Add Column
  ME->R_TREE->ADD_COLUMN( exporting  NAME                = IF_NAME
                                     WIDTH               = LF_WIDTH
                                     HEADER_TEXT         = LF_HEADER_TEXT
                                     HEADER_TOOLTIP      = LF_HEADER_TOOLTIP
                          exceptions COLUMN_EXISTS       = 1
                                     ILLEGAL_COLUMN_NAME = 2
                                     TOO_MANY_COLUMNS    = 3
                                     ILLEGAL_ALIGNMENT   = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method CONSTRUCTOR.

  move IR_GATE           to ME->R_GATE.
  move IR_UIGATE         to ME->R_UIGATE.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.
  move IF_LLAYO          to ME->F_LLAYO.
  move IR_UI_RTESPV      to ME->R_UI_RTESPV.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_RTESPV.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

*** Set Event Handler
  set handler ME->HANDLE_BL_PRTE_EVALUATED for ME->R_PR_RTESPV.

endmethod.
method DO_FREE.

**** Free Grid
*  if ME->R_GRID is bound.
*
**** Check for Changes
*    ME->R_GRID->CHECK_CHANGED_DATA( ).
*
*    ME->R_GRID->FREE( exceptions
*                        CNTL_ERROR        = 1
*                        CNTL_SYSTEM_ERROR = 2
*                        others            = 3 ).
*    if SY-SUBRC ne 0.
*      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
*    endif.
*    clear ME->R_GRID.
*  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_DATA.

  data:          LF_NODEKEY_MGRP   type        TM_NODEKEY,
                 LF_NODEKEY_PRTE   type        TM_NODEKEY,
                 LF_CHANGEABLE     type        ABAP_BOOL,
                 LF_IDX_RANK       type        NUMC5,
                 LF_IDX_DYN        type        NUMC5,
                 LF_COLUMN         type        TV_ITMNAME,
                 LF_PSTEP          type        STRING,
                 LF_IPSTP          type        /VCXI/VSMC_IPSTP.
  data:          LS_RANK_DEF       type        ZVCXI_XCSR_S_RANK_DEF,
                 LS_RTE_RANK       type        /VCXI/VSMR_S_RTE_RANK.
  data:          LT_RANK_DEF       type        ZVCXI_XCSR_TT_RANK_DEF.
  data:          LR_BL_PRTE        type ref to ZCL_VCXI_XCSR_BL_PRTE,
                 LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP.
  field-symbols: <S_NODE>          type        TREEMCNODT,
                 <S_ITEM>          type        TREEMCITEN.

  free: ET_NODE,
        ET_ITEM,
        ME->T_MGRP_NODEKEY.
  free: ME->F_IDX_GRP,
        ME->F_IDX_RTE.

*** Get Ranking Definition
  move ME->R_PR_RTESPV->GET_RANK_DEF( ) to LT_RANK_DEF.

*** Is BL Production Route changeable
  move ME->R_PR_RTESPV->IS_BL_PRTE_CHANGEABLE( ) to LF_CHANGEABLE.

***--------------------------------------------------------------------------------------
*** Build Routes
  loop at ME->R_PR_RTESPV->T_RTEALT into LR_BL_PRTE.
*** Get Node Key for Group
    ME->GET_NODEKEY_MGRP( exporting IR_BL_PRTE = LR_BL_PRTE
                          importing EF_NODEKEY = LF_NODEKEY_MGRP
                          changing  CT_NODE    = ET_NODE
                                    CT_ITEM    = ET_ITEM ).

***------------------------------------------------------------------------------------------------
*** Build Node Key
    add 1 to ME->F_IDX_RTE.
    concatenate 'PRTE' ME->F_IDX_RTE into LF_NODEKEY_PRTE.

    append initial line to ET_NODE assigning <S_NODE>.
    move LF_NODEKEY_PRTE                              to <S_NODE>-NODE_KEY.
    move LF_NODEKEY_MGRP                              to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD       to <S_NODE>-RELATSHIP.
    move ICON_ROUTING_SEQUENCE                        to <S_NODE>-N_IMAGE.
    move ICON_ROUTING_SEQUENCE                        to <S_NODE>-EXP_IMAGE.
    move LR_BL_PRTE                                   to <S_NODE>-USEROBJECT.

    append initial line to ET_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
    move C_COLUMN_BTN_EDIT                            to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_BUTTON      to <S_ITEM>-CLASS.
    if LF_CHANGEABLE eq ABAP_TRUE.
      move ICON_CHANGE                                to <S_ITEM>-T_IMAGE.
    else.
      move ICON_DISPLAY                               to <S_ITEM>-T_IMAGE.
    endif.

    append initial line to ET_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
    move C_COLUMN_RSRCE                               to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
    move LR_BL_PRTE->R_RTE_PRTE->F_RSRCE              to <S_ITEM>-TEXT.

    append initial line to ET_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
    move C_COLUMN_RELCO                               to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
    move LR_BL_PRTE->GET_RELCO( )                     to <S_ITEM>-TEXT.

    append initial line to ET_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
    move C_COLUMN_STICO                               to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
    move ICON_GREEN_LIGHT                             to <S_ITEM>-T_IMAGE.

***------------------------------------------------------------------------------------------------
*** Build Ranking Data
    loop at LT_RANK_DEF into LS_RANK_DEF.
***   Build Column Name
      move SY-TABIX to LF_IDX_RANK.
      concatenate C_COLUMN_RANK LF_IDX_RANK into LF_COLUMN.

**    Find Rank Value
      read table LR_BL_PRTE->R_RTE_PRTE->T_RTE_RANK into LS_RTE_RANK
                                                   with key IRANK = LS_RANK_DEF-IRANK.
      if SY-SUBRC eq 0.
        append initial line to ET_ITEM assigning <S_ITEM>.
        move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
        move LF_COLUMN                                    to <S_ITEM>-ITEM_NAME.
        move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
        move LS_RTE_RANK-RANKV                            to <S_ITEM>-TEXT.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Build Column Name
      move SY-TABIX to LF_IDX_DYN.
      concatenate C_COLUMN_DYN LF_IDX_DYN into LF_COLUMN.

      append initial line to ET_ITEM assigning <S_ITEM>.
      move <S_NODE>-NODE_KEY                                      to <S_ITEM>-NODE_KEY.
      move LF_COLUMN                                              to <S_ITEM>-ITEM_NAME.
      move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT                  to <S_ITEM>-CLASS.
      if LR_RTE_ARBPL->R_ARBPL is bound.
        move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <S_ITEM>-TEXT.
      endif.

      case ME->F_LLAYO.
        when C_LLAYO_MAW.
        when C_LLAYO_MAWP.
***       Build Production Steps
          clear LF_PSTEP.
          loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
            concatenate LF_PSTEP ',' into LF_PSTEP.

            move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
            concatenate LF_PSTEP LF_IPSTP into LF_PSTEP separated by SPACE.

            at first.
              concatenate '[' LF_IPSTP into LF_PSTEP.
            endat.
            at last.
              concatenate LF_PSTEP ']' into LF_PSTEP.
            endat.
          endloop.
          concatenate <S_ITEM>-TEXT LF_PSTEP into <S_ITEM>-TEXT separated by SPACE.
      endcase.
    endloop.
  endloop.

endmethod.
method GET_NODEKEY_MGRP.

  data:          LF_IDX_DYN       type        NUMC5,
                 LF_COLUMN        type        TV_ITMNAME.
  data:          LS_MGRP_NODEKEY  type        YS_MGRP_NODEKEY.
  data:          LT_MTYPE         type        /VCXI/CKX_TT_OBJECT.
  data:          LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_MGRPV         type ref to /VCXI/CL_VSMC_MGRPV,
                 LR_MTYPE         type ref to /VCXI/CL_VSMC_MTYPE,
                 LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_NODE>         type        TREEMCNODT,
                 <S_ITEM>         type        TREEMCITEN.

***------------------------------------------------------------------------------------------------
*** Build List of Machine Types
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    clear LR_MTYPE.
    try.
        if LR_RTE_ARBPL->R_ARBPL is bound.
          LR_MGRPV = LR_RTE_ARBPL->GET_MGRPV_BY_RTE_PSTEP( IF_DATE  = SY-DATUM
                                                           IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).
          move LR_MGRPV->R_MGRP->R_MTYPE to LR_MTYPE.
        endif.
      catch /VCXI/CX_CKX.
    endtry.
    append LR_MTYPE to LT_MTYPE.
  endloop.

***------------------------------------------------------------------------------------------------
*** Check for existing Group Node
  read table ME->T_MGRP_NODEKEY into LS_MGRP_NODEKEY
                                with key T_MTYPE = LT_MTYPE.
  if SY-SUBRC eq 0.
    move LS_MGRP_NODEKEY-NODEKEY to EF_NODEKEY.
  else.

***------------------------------------------------------------------------------------------------
*** Build Node Key
    add 1 to ME->F_IDX_GRP.
    concatenate 'MGRP' ME->F_IDX_GRP into EF_NODEKEY.

*** Add Node
    append initial line to CT_NODE assigning <S_NODE>.
    move EF_NODEKEY                                   to <S_NODE>-NODE_KEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD       to <S_NODE>-RELATSHIP.
    move ABAP_TRUE                                    to <S_NODE>-ISFOLDER.
    move ICON_ACTIVITY_GROUP                          to <S_NODE>-N_IMAGE.
    move ICON_ACTIVITY_GROUP                          to <S_NODE>-EXP_IMAGE.

*** Add Items
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
    move C_COLUMN_RELCO                               to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
    move IR_BL_PRTE->GET_RELCO( )                     to <S_ITEM>-TEXT.

*** Add Dynamic Group Columns
    loop at LT_MTYPE into LR_OBJECT.
***   Build Column Nanem
      move SY-TABIX to LF_IDX_DYN.
      concatenate C_COLUMN_DYN LF_IDX_DYN into LF_COLUMN.

      move LR_OBJECT ?to LR_MTYPE.

***   Add Node
      append initial line to CT_ITEM assigning <S_ITEM>.
      move <S_NODE>-NODE_KEY                            to <S_ITEM>-NODE_KEY.
      move LF_COLUMN                                    to <S_ITEM>-ITEM_NAME.
      move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT        to <S_ITEM>-CLASS.
      if LR_MTYPE is bound.
        move LR_MTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( )    to <S_ITEM>-TEXT.
      endif.
    endloop.

*** Append Node to Buffer
    clear LS_MGRP_NODEKEY.
    move LT_MTYPE   to LS_MGRP_NODEKEY-T_MTYPE.
    move EF_NODEKEY to LS_MGRP_NODEKEY-NODEKEY.
    append LS_MGRP_NODEKEY to ME->T_MGRP_NODEKEY.
  endif.

endmethod.
method HANDLE_BL_PRTE_EVALUATED.

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_BUTTON_CLICK.

  data:  LR_USER_OBJECT type ref to OBJECT,
         LR_BL_PRTE     type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.

      case ITEM_NAME.
        when C_COLUMN_BTN_EDIT.
***       Get Production Route
          ME->R_TREE->NODE_GET_USER_OBJECT( exporting  NODE_KEY       = NODE_KEY
                                            importing  USER_OBJECT    = LR_USER_OBJECT
                                            exceptions NODE_NOT_FOUND = 1 ).
          check SY-SUBRC eq 0.
          try.
              move LR_USER_OBJECT ?to LR_BL_PRTE.
            catch CX_SY_MOVE_CAST_ERROR.
              exit.
          endtry.

***       Start Edit Popup
          ME->R_UI_RTESPV->POPUP_RTEEDI( IR_BL_PRTE = LR_BL_PRTE ).

***       Request Refresh
          move ABAP_TRUE to ME->F_REFRESH_REQ.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK.

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_NODE_DOUBLE_CLICK.

  data:  LR_USER_OBJECT type ref to OBJECT,
         LR_BL_PRTE     type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------------------------------------
***   Get Production Route
      ME->R_TREE->NODE_GET_USER_OBJECT( exporting  NODE_KEY       = NODE_KEY
                                        importing  USER_OBJECT    = LR_USER_OBJECT
                                        exceptions NODE_NOT_FOUND = 1 ).
      check SY-SUBRC eq 0.

      if LR_USER_OBJECT is bound.
        try.
            move LR_USER_OBJECT ?to LR_BL_PRTE.
          catch CX_SY_MOVE_CAST_ERROR.
            exit.
        endtry.

***     Set Selected Route
        ME->R_PR_RTESPV->SET_RTESEL( IR_BL_PRTE = LR_BL_PRTE ).

      else.
        ME->R_TREE->EXPAND_NODE( exporting  NODE_KEY       = NODE_KEY
                                 exceptions NODE_NOT_FOUND = 0 ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_TREE.

  data:  LF_IDX_RANK    type        NUMC5,
         LF_NAME        type        TV_ITMNAME.
  data:  LS_HHDR        type        TREEMHHDR,
         LS_RANK_DEF    type        ZVCXI_XCSR_S_RANK_DEF.
  data:  LT_RANK_DEF    type        ZVCXI_XCSR_TT_RANK_DEF.

  check ME->R_TREE is not bound.

***----------------------------------------------------------------------------
*** Get the Hierarchy Column
  move SPACE      to LS_HHDR-HEADING.
  move '15'       to LS_HHDR-WIDTH.

*** Create the Tree Instance
  create object ME->R_TREE
    exporting
      NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
      ITEM_SELECTION              = ABAP_TRUE
      HIERARCHY_COLUMN_NAME       = C_COLUMN_HDR
      HIERARCHY_HEADER            = LS_HHDR
    exceptions
      ILLEGAL_NODE_SELECTION_MODE = 1
      ILLEGAL_COLUMN_NAME         = 2
      others                      = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create the Tree Control
  ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                     PARENT                       = ME->R_CONTAINER
                                   exceptions
                                     LIFETIME_ERROR               = 1
                                     CNTL_SYSTEM_ERROR            = 2
                                     CREATE_ERROR                 = 3
                                     FAILED                       = 4
                                     TREE_CONTROL_ALREADY_CREATED = 5
                                     others                       = 6 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Event for Tree
  ME->SET_EVENT( ).

***----------------------------------------------------------------------------
*** Add Columns
  ME->R_TREE->ADD_COLUMN( exporting  NAME                = C_COLUMN_BTN_EDIT
                                     WIDTH               = '5'
                                     HEADER_TEXT         = 'Edit'(T10)
                          exceptions COLUMN_EXISTS       = 1
                                     ILLEGAL_COLUMN_NAME = 2
                                     TOO_MANY_COLUMNS    = 3
                                     ILLEGAL_ALIGNMENT   = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  ME->ADD_COLUMN_BY_DTEL( IF_NAME     = C_COLUMN_RSRCE
                          IF_ROLLNAME = '/VCXI/VSMR_RSRCE' ).

  ME->ADD_COLUMN_BY_DTEL( IF_NAME     = C_COLUMN_DECIS
                          IF_ROLLNAME = 'ZVCXI_XCSR_DECIS' ).

  ME->ADD_COLUMN_BY_DTEL( IF_NAME     = C_COLUMN_RELCO
                          IF_ROLLNAME = 'ZVCXI_XCSR_RELCO' ).

  ME->ADD_COLUMN_BY_DTEL( IF_NAME     = C_COLUMN_STICO
                          IF_ROLLNAME = 'ZVCXI_XCSR_STICO' ).

***--------------------------------------------------------------------------------------
*** Dynamic Ranking Columns
  move ME->R_PR_RTESPV->GET_RANK_DEF( ) to LT_RANK_DEF.

  if LT_RANK_DEF is not initial.
    clear LF_IDX_RANK.
    loop at LT_RANK_DEF into LS_RANK_DEF.
      add 1 to LF_IDX_RANK.
      concatenate C_COLUMN_RANK LF_IDX_RANK into LF_NAME.

      if LS_RANK_DEF-ROLLNAME is initial.
        move '/VCXI/VSMR_RANKV' to LS_RANK_DEF-ROLLNAME.
      endif.

      ME->ADD_COLUMN_BY_DTEL( IF_NAME     = LF_NAME
                              IF_ROLLNAME = LS_RANK_DEF-ROLLNAME ).
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Disable Column Rearrangement with the Mouse
  ME->R_TREE->SET_COLUMN_ORDER_FROZEN( FROZEN = ABAP_TRUE ).

endmethod.
method REFRESH_TREE.

  data:  LT_NODE    type        TREEMCNOTA,
         LT_ITEM    type        TREEMCITAC.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

***----------------------------------------------------------------------------
*** Initialize if needed
  ME->INIT_CONTAINER( ).
  ME->INIT_TREE( ).

*** Remove all Nodes
  ME->R_TREE->DELETE_ALL_NODES( ).

***----------------------------------------------------------------------------
*** Get Data for Tree
  ME->GET_DATA( importing ET_NODE = LT_NODE
                          ET_ITEM = LT_ITEM ).

***----------------------------------------------------------------------------
*** Ensure correct Columns are visible
  ME->UPDATE_COLUMN_DEF( IT_ITEM = LT_ITEM ).

***----------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = LT_NODE
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = LT_ITEM
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Expand everything prior Optimize Width
  ME->R_TREE->EXPAND_ROOT_NODES( ).

*** Optimize Column Width
  ME->R_TREE->ADJUST_COLUMN_WIDTH( exporting  ALL_COLUMNS               = ABAP_TRUE
                                              INCLUDE_HEADING           = ABAP_TRUE
                                   exceptions CONTROL_NOT_EXISTING      = 1
                                              CONTROL_DEAD              = 2
                                              CNTL_SYSTEM_ERROR         = 3
                                              FAILED                    = 4
                                              START_COLUMN_NOT_FOUND    = 5
                                              END_COLUMN_NOT_FOUND      = 6
                                              START_COLUMN_IN_HIERARCHY = 7
                                              END_COLUMN_IN_HIERARCHY   = 8
                                              START_COLUMN_EMPTY        = 9 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Collapse everything after Optimize Width
  ME->R_TREE->COLLAPSE_ALL_NODES( ).

endmethod.
method SET_EVENT.

  data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
  field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_BUTTON_CLICK          to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_NODE_DOUBLE_CLICK  for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK  for ME->R_TREE.
  set handler ME->HANDLE_BUTTON_CLICK       for ME->R_TREE.

endmethod.
method UPDATE_COLUMN_DEF.

  data:  LF_COLUMN type TV_ITMNAME.
  data:  LS_ITEM   type TREEMCITEN.
  data:  LT_COLUMN type TREEV_CONA.

***----------------------------------------------------------------------------
*** Get Current Columns
  ME->R_TREE->GET_COLUMN_ORDER( importing  COLUMNS              = LT_COLUMN
                                exceptions CONTROL_NOT_EXISTING = 1
                                           CONTROL_DEAD         = 2
                                           CNTL_SYSTEM_ERROR    = 3
                                           FAILED               = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Remove unnecessary dynamic Columns
  loop at LT_COLUMN into LF_COLUMN where TABLE_LINE cs C_COLUMN_DYN.
    read table IT_ITEM with key ITEM_NAME = LF_COLUMN
                       transporting no fields.
    if SY-SUBRC ne 0.
      ME->R_TREE->DELETE_COLUMN( exporting  COLUMN_NAME      = LF_COLUMN
                                 exceptions COLUMN_NOT_FOUND = 1 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      delete LT_COLUMN.
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Add new dynamic Columns
  loop at IT_ITEM into LS_ITEM where ITEM_NAME cs C_COLUMN_DYN.
    read table LT_COLUMN with key TABLE_LINE = LS_ITEM-ITEM_NAME
                         transporting no fields.
    if SY-SUBRC ne 0.
      ME->R_TREE->ADD_COLUMN( exporting  NAME                = LS_ITEM-ITEM_NAME
                                         WIDTH               = '10'
                                         HEADER_TEXT         = ''
                              exceptions COLUMN_EXISTS       = 1
                                         ILLEGAL_COLUMN_NAME = 2
                                         TOO_MANY_COLUMNS    = 3
                                         ILLEGAL_ALIGNMENT   = 4 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      append LS_ITEM-ITEM_NAME to LT_COLUMN.
    endif.
  endloop.

endmethod.
