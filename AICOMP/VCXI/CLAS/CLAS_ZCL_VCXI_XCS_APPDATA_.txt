
class ZCL_VCXI_XCS_APPDATA definition
  public
  inheriting from /VCXI/CL_VKSR_APPDATA
  create public .

public section.

  data S_KNVV_WE type KNVV read-only .
  data S_KNVV_AG type KNVV read-only .
  data S_KNA1_WE type KNA1 read-only .
  data S_KNA1_AG type KNA1 read-only .
  data T_APPE type ZVCXI_XCS_TT_APPE read-only .
  data S_AUQTY type ZVCXI_XCS_S_AUQTY read-only .

  methods CONSTRUCTOR
    importing
      !IF_GVCIN type /VCXI/VKCR_GVCIN
      !IF_DCONF type /VCXI/VKCR_DCONF
      !IF_APPDATA type /VCXI/VKX_XML
    raising
      /VCXI/CX_CKX .

  methods COMPARE
    redefinition .
  methods GET_INFO
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  methods INIT_APPE
    raising
      /VCXI/CX_CKX .
  methods LOAD_AUQTY
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_IDAT
    raising
      /VCXI/CX_CKX .
  methods LOAD_WE
    raising
      /VCXI/CX_CKX .
  methods LOAD_AG
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_APPDATA definition
class ZCL_VCXI_XCS_APPDATA implementation.
  method COMPARE.

    data:  LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.

    check IR_APPDATA is bound.

    RF_SIMILAR = SUPER->COMPARE( IR_APPDATA = IR_APPDATA ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_APPDATA ?to LR_APPDATA.

*** Compare Alternative Unit Quantity
    if ME->S_AUQTY eq LR_APPDATA->S_AUQTY.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Compare Sold-To Party Data
    if ME->S_KNA1_AG eq LR_APPDATA->S_KNA1_AG and
       ME->S_KNVV_AG eq LR_APPDATA->S_KNVV_AG.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Compare Ship-To Party Data
    if ME->S_KNA1_WE eq LR_APPDATA->S_KNA1_WE and
       ME->S_KNVV_WE eq LR_APPDATA->S_KNVV_WE.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_GVCIN   = IF_GVCIN
                      IF_DCONF   = IF_DCONF
                      IF_APPDATA = IF_APPDATA ).

***----------------------------------------------------------------------------
*** Load from XML
  if IF_APPDATA is not initial.
    call transformation ID
         source xml IF_APPDATA
         result S_KNA1_AG = ME->S_KNA1_AG
                S_KNVV_AG = ME->S_KNVV_AG
                S_KNA1_WE = ME->S_KNA1_WE
                S_KNVV_WE = ME->S_KNVV_WE
                S_AUQTY   = ME->S_AUQTY.
  endif.

***----------------------------------------------------------------------------
*** Initialize Application Environment
  ME->INIT_APPE( ).

*** Get Values of currently active Configuration
  ME->LOAD_AG( ).
  ME->LOAD_WE( ).
  ME->LOAD_AUQTY( ).

***----------------------------------------------------------------------------
*** Load by Integration Data
  ME->LOAD_BY_IDAT( ).

endmethod.
method GET_INFO.

  data:          LR_SUPER_INFO    type ref to DATA.
  field-symbols: <S_SUPER_INFO>   type any,
                 <S_APPDATA_INFO> type ZVCXI_XCS_S_APPDATA_INFO.

  create data RR_INFO type ZVCXI_XCS_S_APPDATA_INFO.
  assign RR_INFO->* to <S_APPDATA_INFO>.

*** Get Super Values
  LR_SUPER_INFO = SUPER->GET_INFO( ).
  if LR_SUPER_INFO is bound.
    assign LR_SUPER_INFO->* to <S_SUPER_INFO>.
    move-corresponding <S_SUPER_INFO> to <S_APPDATA_INFO>.
  endif.

  move ME->S_AUQTY to <S_APPDATA_INFO>-S_AUQTY.

  move ME->S_KNA1_AG to <S_APPDATA_INFO>-S_KNA1_AG.
  move ME->S_KNA1_WE to <S_APPDATA_INFO>-S_KNA1_WE.
  move ME->S_KNVV_AG to <S_APPDATA_INFO>-S_KNVV_AG.
  move ME->S_KNVV_WE to <S_APPDATA_INFO>-S_KNVV_WE.

  move ME->T_APPE    to <S_APPDATA_INFO>-T_APPE.

endmethod.
method INIT_APPE.

  data:          LF_ACTIVE  type          ABAP_BOOL.
  data:          LS_TC010   type          ZVCXI_XCS_TC010.
  data:          LT_TC010   type table of ZVCXI_XCS_TC010.
  field-symbols: <S_APPE>   type          ZVCXI_XCS_S_APPE.

  free: ME->T_APPE.

***----------------------------------------------------------------------------
*** Get all Application Environments
  select * into table LT_TC010
           from ZVCXI_XCS_TC010.

***----------------------------------------------------------------------------
*** Identify active Environments
  loop at LT_TC010 into LS_TC010.
    clear LF_ACTIVE.

*** Dynamic Call
    call function LS_TC010-FNAME
      exporting
        IF_GVCIN  = ME->F_GVCIN
      importing
        RF_ACTIVE = LF_ACTIVE.

***----------------------------------------------------------------------------
*** For active Environments only
    if LF_ACTIVE eq ABAP_TRUE.
***   Add to active Application Environments
      append initial line to ME->T_APPE assigning <S_APPE>.
      move LS_TC010-IAPPE to <S_APPE>-IAPPE.

***   Get Description
      select single DESCR
             into <S_APPE>-DESCR
             from ZVCXI_XCS_TC010T
            where IAPPE eq <S_APPE>-IAPPE
             and  LANGU eq SY-LANGU.
    endif.
  endloop.

endmethod.
method LOAD_AG.

  data: LF_KUNNR type KUNNR,
        LF_VKORG type VKORG,
        LF_VTWEG type VTWEG,
        LF_SPART type SPART.
  data: LS_VBAK type VBAK,
        LS_VBAP type VBAP,
        LS_VBPA type VBPAVB.


***------------------------------------------------------------------
*** Get Key of current Value
  move ME->S_KNVV_AG-VKORG to LF_VKORG.
  move ME->S_KNVV_AG-VTWEG to LF_VTWEG.
  move ME->S_KNVV_AG-SPART to LF_SPART.
  move ME->S_KNVV_AG-KUNNR to LF_KUNNR.

***------------------------------------------------------------------
*** Header
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAK'
                        changing  CS_DATA  = LS_VBAK ).
  if LS_VBAK is not initial.
    move LS_VBAK-VKORG to LF_VKORG.
    move LS_VBAK-VTWEG to LF_VTWEG.
    move LS_VBAK-SPART to LF_SPART.
  endif.

*** Item
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                        changing  CS_DATA  = LS_VBAP ).
  if LS_VBAP is not initial.
    move LS_VBAP-SPART to LF_SPART.
  endif.

*** Sold-to Party
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBPA_AG'
                        changing  CS_DATA  = LS_VBPA ).
  if LS_VBPA is not initial.
    move LS_VBPA-KUNNR to LF_KUNNR.
  endif.

***------------------------------------------------------------------
  clear: ME->S_KNA1_AG,
         ME->S_KNVV_AG.

  check LF_KUNNR is not initial.

*** Get General Data in Customer Master
  select single *
         into ME->S_KNA1_AG
         from KNA1
        where KUNNR = LF_KUNNR.

*** Get Sales Data in Customer Master
  call function 'KNVV_SINGLE_READ'
    exporting
      I_KUNNR         = LF_KUNNR
      I_VKORG         = LF_VKORG
      I_VTWEG         = LF_VTWEG
      I_SPART         = LF_SPART
    importing
      O_KNVV          = ME->S_KNVV_AG
    exceptions
      NOT_FOUND       = 1
      PARAMETER_ERROR = 2
      others          = 3.

endmethod.
method LOAD_AUQTY.

  data: LS_VBAP type VBAP,
        LS_TVAP type TVAP.
  data: LT_VCMDL type /VCXI/VKCR_TT_VCMDL.
  field-symbols: <S_SDCOM> type SDCOM.


*** Alternate UoM Quantity is only relevant for root Configuration
  LT_VCMDL = /VCXI/CL_VKCR_GATEWAY=>GET_MODEL( IF_GVCIN = ME->F_GVCIN ).
  read table LT_VCMDL with key GVCIN  = ME->F_GVCIN
                               PARENT = SPACE
                      transporting no fields.
  if SY-SUBRC ne 0.
    clear: ME->S_AUQTY.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Information Item
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                        changing  CS_DATA  = LS_VBAP ).
  check LS_VBAP is not initial.

*** Get Settings of Item Category
  call function 'SD_TVAP_SELECT'
    exporting
      I_PSTYV   = LS_VBAP-PSTYV
    importing
      E_TVAP    = LS_TVAP
    exceptions
      NOT_FOUND = 1.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  if LS_TVAP-ETERL ne SPACE.
*** Get Cumulative Order Quantity in Sales Unit
    ME->S_AUQTY-AUQTY     = LS_VBAP-KWMENG.
    ME->S_AUQTY-AUQTY_UOM = LS_VBAP-VRKME.
  else.
*** Target Quantity in Sales Units
    ME->S_AUQTY-AUQTY     = LS_VBAP-ZMENG.
    ME->S_AUQTY-AUQTY_UOM = LS_VBAP-ZIEME.
  endif.

***--------------------------------------------------------------------------------------
*** During line item creation, VBAP-KWMENG or VBAP-ZMENG isn't always filled. In this
*** case use SDCOM (Based on SAPFV45S form CONFIGURATION_PREPARE)
***--------------------------------------------------------------------------------------
  if ME->S_AUQTY-AUQTY = 0.
*** Get SDCOM reference
    assign ('(SAPFV45S)SDCOM') to <S_SDCOM>.
    if <S_SDCOM> is assigned.
***   Use SDCOM Quantity
      move <S_SDCOM>-WMENG to ME->S_AUQTY-AUQTY.
    endif.
  endif.

endmethod.
method LOAD_BY_IDAT.

  data:          LF_POSNR         type        POSNR,
                 LF_NIDAT         type        ZVCXI_XCI_NIDAT,
                 LF_GUID          type        /VCXI/CKX_GUID.
  data:          LR_IDAT_SVC      type ref to ZCL_VCXI_XCI_IDAT_SVC.
  field-symbols: <F_POSNR>        type        any.

***------------------------------------------------------------------------------------------------
*** Get Item Number
  assign ('(SAPFV45S)VBAP-POSNR') to <F_POSNR>.
  if SY-SUBRC eq 0.
    move <F_POSNR> to LF_POSNR.
  endif.

*** Get Number of Integration Data
  call function 'ZVCXI_XCC_IDAT_GET_NIDAT'
    exporting
      IF_POSNR = LF_POSNR
    importing
      EF_NIDAT = LF_NIDAT.
  check LF_NIDAT is not initial.

*** Get Instance of Integration Data for SVC
  move LF_NIDAT to LF_GUID.
  LR_IDAT_SVC ?= ZCL_VCXI_XCI_IDAT_SVC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

***------------------------------------------------------------------------------------------------
*** Check Application Data are set by Integration Data
  check LR_IDAT_SVC->S_SVCAD-USE_APPDATA eq ABAP_TRUE.

*** Check Config. Material & Profile Key
  check ME->S_CMPRK eq LR_IDAT_SVC->R_CUPRFL->R_CVC_CUPRFL->S_CMPRK.

***------------------------------------------------------------------------------------------------
*** Set Quantity
  move-corresponding LR_IDAT_SVC->S_SVCAD to ME->S_OPQTY.

*** Clear Alternate Unit Quantity
  clear ME->S_AUQTY.

*** Set Sold-To Party
  clear: ME->S_KNA1_AG,
         ME->S_KNVV_AG.

  select single *
         into ME->S_KNA1_AG
         from KNA1
        where KUNNR = LR_IDAT_SVC->S_SVCAD-KUNAG.

*** Get Sales Data in Customer Master
  call function 'KNVV_SINGLE_READ'
    exporting
      I_KUNNR         = LR_IDAT_SVC->S_SVCAD-KUNAG
      I_VKORG         = LR_IDAT_SVC->S_SVCAD-VKORG
      I_VTWEG         = LR_IDAT_SVC->S_SVCAD-VTWEG
      I_SPART         = LR_IDAT_SVC->S_SVCAD-SPART
    importing
      O_KNVV          = ME->S_KNVV_AG
    exceptions
      NOT_FOUND       = 1
      PARAMETER_ERROR = 2
      others          = 3.

*** Set Ship-To Party
  clear: ME->S_KNA1_WE,
         ME->S_KNVV_WE.

  select single *
         into ME->S_KNA1_WE
         from KNA1
        where KUNNR = LR_IDAT_SVC->S_SVCAD-KUNWE.

*** Get Sales Data in Customer Master
  call function 'KNVV_SINGLE_READ'
    exporting
      I_KUNNR         = LR_IDAT_SVC->S_SVCAD-KUNWE
      I_VKORG         = LR_IDAT_SVC->S_SVCAD-VKORG
      I_VTWEG         = LR_IDAT_SVC->S_SVCAD-VTWEG
      I_SPART         = LR_IDAT_SVC->S_SVCAD-SPART
    importing
      O_KNVV          = ME->S_KNVV_WE
    exceptions
      NOT_FOUND       = 1
      PARAMETER_ERROR = 2
      others          = 3.

endmethod.
method LOAD_WE.

  data: LF_KUNNR type KUNNR,
        LF_VKORG type VKORG,
        LF_VTWEG type VTWEG,
        LF_SPART type SPART.
  data: LS_VBAK type VBAK,
        LS_VBAP type VBAP,
        LS_VBPA type VBPAVB.

***------------------------------------------------------------------
*** Get Key of current Value
  move ME->S_KNVV_WE-VKORG to LF_VKORG.
  move ME->S_KNVV_WE-VTWEG to LF_VTWEG.
  move ME->S_KNVV_WE-SPART to LF_SPART.
  move ME->S_KNVV_WE-KUNNR to LF_KUNNR.

***------------------------------------------------------------------
*** Header
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAK'
                        changing  CS_DATA  = LS_VBAK ).
  if LS_VBAK is not initial.
    move LS_VBAK-VKORG to LF_VKORG.
    move LS_VBAK-VTWEG to LF_VTWEG.
    move LS_VBAK-SPART to LF_SPART.
  endif.

*** Item
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                        changing  CS_DATA  = LS_VBAP ).
  if LS_VBAP is not initial.
    move LS_VBAP-SPART to LF_SPART.
  endif.

*** Ship-to Party
  ME->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBPA_WE'
                        changing  CS_DATA  = LS_VBPA ).
  if LS_VBPA is not initial.
    move LS_VBPA-KUNNR to LF_KUNNR.
  endif.

***------------------------------------------------------------------
  clear: ME->S_KNA1_WE,
         ME->S_KNVV_WE.

  check LF_KUNNR is not initial.

*** Get General Data in Customer Master
  select single *
         into ME->S_KNA1_WE
         from KNA1
        where KUNNR = LF_KUNNR.

*** Get Sales Data in Customer Master
  call function 'KNVV_SINGLE_READ'
    exporting
      I_KUNNR         = LF_KUNNR
      I_VKORG         = LF_VKORG
      I_VTWEG         = LF_VTWEG
      I_SPART         = LF_SPART
    importing
      O_KNVV          = ME->S_KNVV_WE
    exceptions
      NOT_FOUND       = 1
      PARAMETER_ERROR = 2
      others          = 3.

endmethod.
method SERIALIZE.

*** Generate XML
  call transformation ID
       source F_WERKS   = ME->F_WERKS
              S_OPQTY   = ME->S_OPQTY
              S_KNA1_AG = ME->S_KNA1_AG
              S_KNVV_AG = ME->S_KNVV_AG
              S_KNA1_WE = ME->S_KNA1_WE
              S_KNVV_WE = ME->S_KNVV_WE
              S_AUQTY   = ME->S_AUQTY
       result xml RF_XML.

endmethod.
