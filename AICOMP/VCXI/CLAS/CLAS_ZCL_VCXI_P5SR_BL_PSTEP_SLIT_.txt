
class ZCL_VCXI_P5SR_BL_PSTEP_SLIT definition
  public
  inheriting from ZCL_VCXI_P5SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_P5SR_ADJ_RLDIM .
  interfaces ZIF_VCXI_PXSR_RHNDL .

  constants C_IPSTP_SLIT type /VCXI/VSMC_IPSTP value 'P5_PS_SLIT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_SLIT
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
protected section.

  data T_MFMO type ZVCXI_XCSR_TT_MFMO .
  data S_RLDIM_IN type ZVCXI_P5SP_S_RLDIM .
  data T_MFCSP type /VCXI/CKX_TT_STRING .
  data T_RLDIM_OUT type ZVCXI_P5SP_TT_RLDIM .
  data T_WIDIM_OUT type ZVCXI_PXS_TT_WIDIM .

  methods ADD_SPVRE_RLOUT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_SLIT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_CSTEP_SLIT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_RLFG
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_MFSO_L
    redefinition .
  methods FILL_SPVRE_ADDON
    redefinition .
  methods GET_RLDIM_OUT
    redefinition .
  methods GET_WIDIM_OUT
    redefinition .
  methods GET_XML_DREF
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SR_BL_PSTEP_SLIT definition
class ZCL_VCXI_P5SR_BL_PSTEP_SLIT implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type /VCXI/VSMC_LDUOM,
          LF_LDVAL type /VCXI/VSMR_LDVAL.
    data: LS_RLDIM type ZVCXI_P5SP_S_RLDIM.
    data: LI_LVVAL type /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE type /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***----------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Web Width (Inbound)
        when 'PX_LT_DI_WEBWI'.
          LF_LDVAL = ME->S_RLDIM_IN-WEBWI.
          LF_LDUOM = ME->S_RLDIM_IN-WEBWI_UOM.

***     Web Width (Outbound)
        when 'PX_LT_DO_WEBWI'.
***       Sending Multiple Dimension Limit Check
          loop at ME->T_RLDIM_OUT into LS_RLDIM.
***         Add each value entry as limit value
            IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                        IF_LDVAL = conv #( LS_RLDIM-WEBWI )
                                        IF_LDUOM = LS_RLDIM-WEBWI_UOM ).
          endloop.
          continue.

***     Number of Outs (Total)#
        when 'PX_LT_DP_NOUTT'.
          loop at ME->T_RLDIM_OUT into LS_RLDIM.
            LF_LDVAL += LS_RLDIM-NOOUT.
          endloop.
          LF_LDUOM = 'ST'.

***     Surface Weight (Inbound)
        when 'PX_LT_DI_SURWT'.
          LF_LDVAL = ME->S_RLDIM_IN-SURWT.
          LF_LDUOM = ME->S_RLDIM_IN-SURWT_UOM.

        when others.
          continue.
      endcase.


***----------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MFSO_L.

    data: LF_INDEX type I.
    data: LS_RLDIM_OUT type ZVCXI_P5SP_S_RLDIM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_L type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_L.
      if LR_SPVRE_MFSO_L->GET_ID( ) eq 'MFSO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

    loop at ME->T_RLDIM_OUT into LS_RLDIM_OUT.
      LF_INDEX = SY-TABIX.

***   Suppress other Outs, if they are created as Material Flow Material Out
      if ME->T_MFMO is not initial.
        check LF_INDEX le 1.
      endif.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFSO_L
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFSO_L to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFSO_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Get MF X-Connect
      if LINE_EXISTS( ME->T_IMFXC_OUT[ LF_INDEX ] ).
***     Set MF X-Connect
        LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                        ATWRT = ME->T_IMFXC_OUT[ LF_INDEX ]
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
      endif.

***   Cost Split IDs relevant for Material Flow
      if LINE_EXISTS( ME->T_MFCSP[ LF_INDEX ] ).
        LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MFSO=>C_PARID_MFCSP
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG
                                                        STRNG = ME->T_MFCSP[ LF_INDEX ]
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
      endif.

    endloop.

  endmethod.
  method ADD_SPVRE_RLOUT.

    data: LS_RLDIM_OUT type        ZVCXI_P5SP_S_RLDIM,
          LS_PARAM     type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_RLOUT type ref to /VCXI/CL_VKSR_SPVRE.


***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'RLOUT'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

    loop at ME->T_RLDIM_OUT into LS_RLDIM_OUT.

***--------------------------------------------------------------------------------------
***   Create Supervisor Runtime Element
      create object LR_SPVRE_RLOUT
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_RLOUT to CT_SPVRE.

***   Set In Use
      LR_SPVRE_RLOUT->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Web Width
      LR_SPVRE_RLOUT->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P5SP_PR_RLOUT=>C_PARID_WEBWI
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = LS_RLDIM_OUT-WEBWI
                                                     UNIT  = LS_RLDIM_OUT-WEBWI_UOM
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Number Ups
      LR_SPVRE_RLOUT->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P5SP_PR_RLOUT=>C_PARID_NOUPS
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = LS_RLDIM_OUT-NOUPS
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Number Outs
      LR_SPVRE_RLOUT->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P5SP_PR_RLOUT=>C_PARID_NOOUT
                                                     PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                     ATFLV = LS_RLDIM_OUT-NOOUT
                                                     SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_SLIT type ref to ZCL_VCXI_P5SR_BL_PSTEP_SLIT.


*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_SLIT.

*** Roll Dimensions
    if ME->S_RLDIM_IN  eq LR_BL_PSTEP_SLIT->S_RLDIM_IN  and
       ME->T_RLDIM_OUT eq LR_BL_PSTEP_SLIT->T_RLDIM_OUT and
       ME->T_WIDIM_OUT eq LR_BL_PSTEP_SLIT->T_WIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Material Flow Material Out and
*** Material Flow relevant Cost Split IDs
    if ME->T_MFMO  eq LR_BL_PSTEP_SLIT->T_MFMO and
       ME->T_MFCSP eq LR_BL_PSTEP_SLIT->T_MFCSP.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_SLIT type ref to ZCL_VCXI_P5SR_BL_PSTEP_SLIT.


*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_SLIT.

***--------------------------------------------------------------------------------------
*** Roll Dimensions
    move ME->S_RLDIM_IN    to LR_BL_PSTEP_SLIT->S_RLDIM_IN.
    move ME->T_RLDIM_OUT   to LR_BL_PSTEP_SLIT->T_RLDIM_OUT.
    move ME->T_WIDIM_OUT   to LR_BL_PSTEP_SLIT->T_WIDIM_OUT.

*** Material Flow Material Out
    move ME->T_MFMO        to LR_BL_PSTEP_SLIT->T_MFMO.
*** Material Flow relevant Cost Split IDs
    move ME->T_MFCSP       to LR_BL_PSTEP_SLIT->T_MFCSP.

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'P5_AT_SLIT'.
        ME->FILL_SPVRE_ADDON_SLIT( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_SLIT.

***--------------------------------------------------------------------------------------
*** Add Roll Out
    ME->ADD_SPVRE_RLOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = IR_SPVRE_ADDON
                         changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***------------------------------------------------------------------
*** Standard
    move 'CONV_LTL'     to CF_ID_ARBPL.

**** If Manual
*    if ME->ZIF_VCXI_XCSR_BL_MANU~F_MANWC eq ABAP_TRUE.
*      move 'MANU_LTL'     to CF_ID_ARBPL.
*    endif.

*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'OUTSO_LTL'    to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_RLDIM_OUT.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS,
          LF_NOUTT type ZVCXI_PXS_NOUTT.
    data: LS_WEBWI type ZVCXI_PXS_S_WEBWI.
    data: LT_ICSPL  type ZVCXI_XCSP_TT_ICSPL.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_RLFPROP type ref to ZCL_VCXI_P5SS_BL_RLFPROP,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.


***--------------------------------------------------------------------------------------
*** Process Outbound Provider
    loop at IT_PRVDR into LR_GATE.
*{   REPLACE        HEDK927942                                        1
*\      case type of LR_GATE->R_CLSPR.
*\***     Conversion Step Slitting
*\        when type ZCL_VCXI_P5SS_PR_CSTEP_SLIT into data(LR_PR_CSTEP_SLIT).
*\          LR_BL_RLFPROP = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( ).
*\          LR_BL_RLBPROP = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( ).
*\          LS_WEBWI      = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
*\          LF_NOUPS      = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).
*\          LF_NOUTT      = LR_PR_CSTEP_SLIT->GET_NOUTT( ).
*\***     Finished Good
*\        when type ZCL_VCXI_P5SS_PR_RLFG into data(LR_PR_RLFG).
*\          LR_BL_RLFPROP = LR_PR_RLFG->GET_RLFPX( ).
*\          LR_BL_RLBPROP = LR_PR_RLFG->GET_RLBPX( ).
*\          LS_WEBWI      = LR_PR_RLFG->GET_WEBWI( ).
*\          LF_NOUPS      = LR_PR_RLFG->GET_NOUPS( ).
*\          LF_NOUTT      = LR_PR_RLFG->GET_NOUTT( ).
*\***     Semi-Finished Good
*\        when type ZCL_VCXI_P5SS_PR_RLCONO into data(LR_PR_RLCONO).
*\          LR_BL_RLFPROP = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( ).
*\          LR_BL_RLBPROP = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( ).
*\          LS_WEBWI      = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
*\          LF_NOUPS      = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).
*\          LF_NOUTT      = LR_PR_RLCONO->GET_NOUTT( ).
*\        when others.
*\          continue.
*\      endcase.
      DATA: LR_PR_CSTEP_SLIT TYPE REF TO ZCL_VCXI_P5SS_PR_CSTEP_SLIT,
            LR_PR_RLFG       TYPE REF TO ZCL_VCXI_P5SS_PR_RLFG,
            LR_PR_RLCONO     TYPE REF TO ZCL_VCXI_P5SS_PR_RLCONO.

      TRY .
        LR_PR_CSTEP_SLIT ?= LR_GATE->R_CLSPR.
***     Conversion Step Slitting
          LR_BL_RLFPROP = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( ).
          LR_BL_RLBPROP = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( ).
          LS_WEBWI      = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
          LF_NOUPS      = LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).
          LF_NOUTT      = LR_PR_CSTEP_SLIT->GET_NOUTT( ).
      CATCH CX_SY_MOVE_CAST_ERROR.
          TRY .
                 LR_PR_RLFG ?= LR_GATE->R_CLSPR.
***     Finished Good
                 LR_BL_RLFPROP = LR_PR_RLFG->GET_RLFPX( ).
                 LR_BL_RLBPROP = LR_PR_RLFG->GET_RLBPX( ).
                 LS_WEBWI      = LR_PR_RLFG->GET_WEBWI( ).
                 LF_NOUPS      = LR_PR_RLFG->GET_NOUPS( ).
                 LF_NOUTT      = LR_PR_RLFG->GET_NOUTT( ).
          CATCH CX_SY_MOVE_CAST_ERROR.
              TRY .
                      LR_PR_RLCONO ?= LR_GATE->R_CLSPR.
***     Semi-Finished Good
                      LR_BL_RLFPROP = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( ).
                      LR_BL_RLBPROP = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( ).
                      LS_WEBWI      = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
                      LF_NOUPS      = LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).
                      LF_NOUTT      = LR_PR_RLCONO->GET_NOUTT( ).
              CATCH CX_SY_MOVE_CAST_ERROR.
                CONTINUE.
              ENDTRY.
          ENDTRY.
      ENDTRY.
*}   REPLACE

***   Add Roll Dimension
      append value #( S_WEBWI  = LS_WEBWI
                      NOUPS    = LF_NOUPS
                      NOOUT    = LF_NOUTT
                    ) to RT_RLDIM.

***   Collect relevant Cost Split IDs
      if LR_BL_RLBPROP is bound.
        clear LT_ICSPL.
        LT_ICSPL = value #( for LS_CSPLIT in LR_BL_RLBPROP->T_CSPLIT where ( DCSPL ne 0 ) ( LS_CSPLIT-ICSPL ) ).
        append ZCL_VCXI_XCSP_PR_MFSO=>CONV_TO_MFCSP( IT_ICSPL = LT_ICSPL ) to ME->T_MFCSP.
      endif.
    endloop.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.


***------------------------------------------------------------------------------------------------
*** Get Customizing Element for Activity Slitting
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_SLIT'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Add Roll Out
    ME->ADD_SPVRE_RLOUT( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                         changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method GET_SPVRE_MF.

*** Force new MFO
    move ABAP_FALSE to CF_MFO.

*** Call Super
    SUPER->GET_SPVRE_MF( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                   IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                         changing  CT_SPVRE       = CT_SPVRE
                                   CF_MFI         = CF_MFI
                                   CF_MFO         = CF_MFO ).

***------------------------------------------------------------------------------------------------
*** Add Material Flow Material Out
    ME->ADD_SPVRE_MFMO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                                    IT_MFMO        = ME->T_MFMO
                          changing  CT_SPVRE       = CT_SPVRE ).

  endmethod.
  method GET_WIDIM_OUT.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Process Outbound Provider
    loop at IT_PRVDR into LR_GATE.
*{   REPLACE        HEDK927942                                        1
*\      case type of LR_GATE->R_CLSPR.
*\***     Conversion Step Slitting
*\        when type ZCL_VCXI_P5SS_PR_CSTEP_SLIT into data(LR_PR_CSTEP_SLIT).
*\          append value #( S_WIWID = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( )
*\                                                     mapping WIWID     = WEBWI
*\                                                             WIWID_UOM = WEBWI_UOM )
*\                          S_WITHI = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( )->S_CALIP
*\                                                     mapping WITHI     = CALIP
*\                                                             WITHI_UOM = CALIP_UOM )
*\                          S_WISWG = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( )
*\                                                     mapping WISWG     = SURWT
*\                                                             WISWG_UOM = SURWT_UOM )
*\                        ) to RT_WIDIM.
*\
*\***     Finished Good
*\        when type ZCL_VCXI_P5SS_PR_RLFG into data(LR_PR_RLFG).
*\          append value #( S_WIWID = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WIWID( )
*\                          S_WITHI = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WITHI( )
*\                          S_WISWG = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WISWG( )
*\                        ) to RT_WIDIM.
*\
*\
*\***     Semi-Finished Good
*\        when type ZCL_VCXI_P5SS_PR_RLCONO into data(LR_PR_RLCONO).
*\          append value #( S_WIWID = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( )
*\                                                     mapping WIWID     = WEBWI
*\                                                             WIWID_UOM = WEBWI_UOM )
*\                          S_WITHI = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( )->S_CALIP
*\                                                     mapping WITHI     = CALIP
*\                                                             WITHI_UOM = CALIP_UOM )
*\                          S_WISWG = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( )
*\                                                     mapping WISWG     = SURWT
*\                                                             WISWG_UOM = SURWT_UOM )
*\                        ) to RT_WIDIM.
*\
*\        when others.
*\          continue.
*\      endcase.
        DATA:  LR_PR_CSTEP_SLIT TYPE REF TO ZCL_VCXI_P5SS_PR_CSTEP_SLIT,
               LR_PR_RLFG       TYPE REF TO ZCL_VCXI_P5SS_PR_RLFG,
               LR_PR_RLCONO     TYPE REF TO ZCL_VCXI_P5SS_PR_RLCONO.

          TRY .
            LR_PR_CSTEP_SLIT ?= LR_GATE->R_CLSPR.
***     Conversion Step Slitting
              append value #( S_WIWID = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( )
                                                         mapping WIWID     = WEBWI
                                                         WIWID_UOM = WEBWI_UOM )
                             S_WITHI = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( )->S_CALIP
                                                        mapping WITHI     = CALIP
                                                        WITHI_UOM = CALIP_UOM )
                          S_WISWG = corresponding #( LR_PR_CSTEP_SLIT->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( )
                                                     mapping WISWG     = SURWT
                                                             WISWG_UOM = SURWT_UOM )
                                                    ) to RT_WIDIM.
                  CATCH CX_SY_MOVE_CAST_ERROR.
                    TRY .
                      LR_PR_RLFG ?= LR_GATE->R_CLSPR.
***     Finished Good
                   append value #( S_WIWID = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WIWID( )
                          S_WITHI = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WITHI( )
                          S_WISWG = LR_PR_RLFG->ZIF_VCXI_PXSS_WIDIM~GET_WISWG( )
                        ) to RT_WIDIM.
                   CATCH CX_SY_MOVE_CAST_ERROR.
                     TRY .
                      LR_PR_RLCONO ?= LR_GATE->R_CLSPR.
***     Semi-Finished Good
                        append value #( S_WIWID = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( )
                                                     mapping WIWID     = WEBWI
                                                             WIWID_UOM = WEBWI_UOM )
                                S_WITHI = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( )->S_CALIP
                                                     mapping WITHI     = CALIP
                                                             WITHI_UOM = CALIP_UOM )
                          S_WISWG = corresponding #( LR_PR_RLCONO->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( )
                                                     mapping WISWG     = SURWT
                                                             WISWG_UOM = SURWT_UOM )
                        ) to RT_WIDIM.
              CATCH CX_SY_MOVE_CAST_ERROR.
                CONTINUE.
              ENDTRY.
          ENDTRY.
      ENDTRY.
*}   REPLACE
    endloop.

  endmethod.
  method GET_XML_DREF.

*** Super References
    RT_DATA = SUPER->GET_XML_DREF( ).

*** Add additional References
    append value #( NAME = 'S_RLDIM_IN'   VALUE = ref #( ME->S_RLDIM_IN  ) ) to RT_DATA.
    append value #( NAME = 'T_RLDIM_OUT'  VALUE = ref #( ME->T_RLDIM_OUT ) ) to RT_DATA.
    append value #( NAME = 'T_WIDIM_OUT'  VALUE = ref #( ME->T_WIDIM_OUT ) ) to RT_DATA.
    append value #( NAME = 'T_MFMO'       VALUE = ref #( ME->T_MFMO      ) ) to RT_DATA.
    append value #( NAME = 'T_MFCSP'      VALUE = ref #( ME->T_MFCSP     ) ) to RT_DATA.

  endmethod.
  method INIT_BY_CSTEP_SLIT.

    data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP_SLIT type ref to ZCL_VCXI_P5SS_PR_CSTEP_SLIT.


***--------------------------------------------------------------------------------------
*** Get Reference for CStep Printing
*{   REPLACE        HEDK927942                                        1
*\    loop at IT_PRVDR into LR_GATE
*\                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_CSTEP_SLIT.
*\      LR_PR_CSTEP_SLIT ?= LR_GATE->R_CLSPR.
*\      exit.
*\    endloop.
    LOOP AT IT_PRVDR INTO LR_GATE.
      TRY.
        LR_PR_CSTEP_SLIT ?= LR_GATE->R_CLSPR.
      CATCH CX_SY_MOVE_CAST_ERROR.
        CONTINUE.
      ENDTRY.
    ENDLOOP.
*}   REPLACE
    check LR_PR_CSTEP_SLIT  is bound.


****--------------------------------------------------------------------------------------
**** Get Print Type
*    ME->F_TPRIN = LR_PR_CSTEP_PRINT->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).
*
**** Get Printable Width
*    ME->S_PRWID = LR_PR_CSTEP_PRINT->GET_PRWID( ).
*
**** Get Tool Set Number
*    LF_SETTN = LR_PR_CSTEP_PRINT->GET_SETTN( ).
*    if LF_SETTN is not initial.
*      append value #( MATNR = LF_SETTN ) to ME->T_MS_TOOL.
*    endif.

  endmethod.
  method INIT_BY_RLFG.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get Material Numbers of Finished Good
*{   REPLACE        HEDK927942                                        1
*\    loop at IT_PRVDR into LR_GATE where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XFG.
      DATA: LR_PR_XFG TYPE REF TO ZCL_VCXI_PXSS_PR_XFG.
    loop at IT_PRVDR into LR_GATE.
      TRY .
          LR_PR_XFG ?= LR_GATE->R_CLSPR.
      CATCH CX_SY_MOVE_CAST_ERROR.
        CONTINUE.
      ENDTRY.
*}   REPLACE
      append value #( POSID = LR_GATE->GET_POSID( )
                      MATNR = cast ZCL_VCXI_PXSS_PR_XFG( LR_GATE->R_CLSPR )->ZIF_VCXI_PXSS_FG~GET_MATNR( )
                    ) to ME->T_MFMO.

***   Quantity Factor
      append cast ZCL_VCXI_PXSS_PR_XFG( LR_GATE->R_CLSPR )->ZIF_VCXI_PXSS_FG~GET_QFACT( ) to ME->T_QFACT.
    endloop.

*** Remove those w/o Material Number as they are SFGs (before MBQ)
    delete ME->T_MFMO where MATNR is initial.

  endmethod.
  method INIT_BY_SPEC.

    data: LT_RLDIM type ZVCXI_P5SP_TT_RLDIM.


***--------------------------------------------------------------------------------------
*** Get Inbound Roll Dimension
    LT_RLDIM = ME->GET_RLDIM_IN( IT_PRVDR = IT_PRVDR ).
    ME->S_RLDIM_IN = value #( LT_RLDIM[ 1 ] optional ).

*** Get Outbound Roll Dimension
    ME->T_RLDIM_OUT = ME->GET_RLDIM_OUT( IT_PRVDR = IT_PRVDR ).

*** Get Outbound Winding Dimension
    ME->T_WIDIM_OUT = ME->GET_WIDIM_OUT( IT_PRVDR = IT_PRVDR ).

*** Initialize by CStep Slitting
    ME->INIT_BY_CSTEP_SLIT( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

*** Initialize by Finished Goods
    ME->INIT_BY_RLFG( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method ZIF_VCXI_P5SR_ADJ_RLDIM~CALC_RLDIM_IN.

    refresh: CT_RLDIM.
    append ME->S_RLDIM_IN to CT_RLDIM.

  endmethod.
  method ZIF_VCXI_P5SR_ADJ_RLDIM~CALC_RLDIM_OUT.

    refresh: CT_RLDIM.
    append lines of ME->T_RLDIM_OUT to CT_RLDIM.

    loop at CT_RLDIM assigning field-symbol(<S_RLDIM>).
***   Suppress Ups of Material Flow Material Out -> Don't consider in conversion MQTYO to MQTYI
      if SY-TABIX gt 1 and
         ME->T_MFMO is not initial.
        clear <S_RLDIM>-NOUPS.
      endif.

      <S_RLDIM>-S_RLETA = value #( ZIF_VCXI_PXSR_RHNDL~T_RHNDL[ SY-TABIX ]-S_RLETA optional ).
    endloop.

  endmethod.
  method ZIF_VCXI_PXSR_RHNDL~GET_WIDIM.

    RT_WIDIM = ME->T_WIDIM_OUT.

  endmethod.
  method ZIF_VCXI_PXSR_RHNDL~SET_RHNDL.

    check IT_RHNDL ne ME->ZIF_VCXI_PXSR_RHNDL~T_RHNDL.

*** Set Roll Handing Infos as provided
    ME->ZIF_VCXI_PXSR_RHNDL~T_RHNDL = IT_RHNDL.

*** Perform automatic updates
    if IR_RTE_ARBPL is bound.
      ME->RECALC_RHNDL( IR_ARBPL = IR_RTE_ARBPL->R_ARBPL ).
    endif.

  endmethod.
