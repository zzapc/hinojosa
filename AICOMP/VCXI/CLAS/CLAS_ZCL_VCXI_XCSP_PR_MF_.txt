
class ZCL_VCXI_XCSP_PR_MF definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_PARID_IMFXC type /VCXI/VKS_PARID value 'ZVCXI_XC_IMFXC'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_CONSU
    returning
      value(RS_CONSU) type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
  methods GET_IMFXC
    returning
      value(RF_IMFXC) type ZVCXI_XCSP_IMFXC
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MFRAT
    returning
      value(RF_MFRAT) type ZVCXI_XCSP_MFRAT
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_IMFXC
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MFRAT
    importing
      !IF_MFRAT type ZVCXI_XCSP_MFRAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_MFMGR type /VCXI/VKSC_IEVNT value 'INIT_MFMGR' ##NO_TEXT.
  constants C_IEVNT_O_CONSU_CHANGED type /VCXI/VKSC_IEVNT value 'CONSU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IMFXC_CHANGED type /VCXI/VKSC_IEVNT value 'IMFXC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MFRAT_CHANGED type /VCXI/VKSC_IEVNT value 'MFRAT_CHANGED' ##NO_TEXT.
  constants C_PARID_CONSU_A type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_A' ##NO_TEXT.
  constants C_PARID_CONSU_L type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_L' ##NO_TEXT.
  constants C_PARID_CONSU_P type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_P' ##NO_TEXT.
  constants C_PARID_CONSU_W type /VCXI/VKS_PARID value 'ZVCXI_XC_CONSU_W' ##NO_TEXT.
  constants C_PARID_MFRAT type /VCXI/VKS_PARID value 'ZVCXI_XC_MFRAT' ##NO_TEXT.
  data F_PARID_CONSU type /VCXI/VKS_PARID .
  data R_PR_MFMGR type ref to ZCL_VCXI_XCSP_PR_MFMGR .

  methods CHECK_CONSU
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MFMGR
    raising
      /VCXI/CX_CKX .
  methods SET_CONSU
    importing
      !IS_CONSU type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MF definition
class ZCL_VCXI_XCSP_PR_MF implementation.
  method CHECK_CONSU.

    data(LF_MATNR) = ME->GET_MATNR( ).
    data(LS_CONSU) = ME->GET_CONSU( ).


***--------------------------------------------------------------------------------------
    if LS_CONSU-CONSU is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Consumption has been calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '251' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Consumption has not been calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '252' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
    if LF_MATNR is not initial.
      if ZCL_VCXI_XCS_SERVICE_UNIT=>IS_MATNR_UNIT( IF_MATNR = LF_MATNR
                                                   IF_UOM   = LS_CONSU-CONSU_UOM ) ne ABAP_TRUE.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Quantities cannot be converted for the material &.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'MM'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '328'
                                   IF_MSGV1 = LF_MATNR ).
        endif.
      endif.
    endif.

  endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_CONSU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_CONSU ).
  move LS_PARAM-ATFLV to RS_CONSU-CONSU.
  move LS_PARAM-UNIT  to RS_CONSU-CONSU_UOM.

endmethod.
method GET_DESCR.

  data: LF_MATNR type MATNR,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_MATNR = ME->GET_MATNR( ).

  if LF_MATNR is not initial.
*** Convert Material Number to Output
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = LF_MATNR
      importing
        OUTPUT = LF_MATNR.
*** Get Material Description
    LF_DESCR = ME->GET_MATNR_DESCR( ).

    concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    RF_DESCR = SUPER->GET_DESCR( ).
  endif.

endmethod.
method GET_IMFXC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IMFXC ).
  move LS_PARAM-ATWRT to RF_IMFXC.

endmethod.
method GET_MATNR.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_MATNR.

endmethod.
method GET_MATNR_DESCR.

  data:  LF_MATNR type MATNR.
  data:  LS_MAKT  type MAKT.

  LF_MATNR = ME->GET_MATNR( ).

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = LF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0.
    clear RF_DESCR.
  else.
    move LS_MAKT-MAKTX to RF_DESCR.
  endif.

endmethod.
method GET_MFRAT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFRAT ).
  move LS_PARAM-ATFLV to RF_MFRAT.

endmethod.
method GET_WERKS.

***------------------------------------------------------------------
*** Get Plant of Machine
  check ME->R_PR_MFMGR is bound.

  RF_WERKS = ME->R_PR_MFMGR->GET_WERKS( ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_MFMGR.
      ME->HANDLE_INIT_MFMGR( ).

  endcase.

endmethod.
method HANDLE_INIT_MFMGR.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  check ME->R_PR_MFMGR is not bound.

***------------------------------------------------------------------
*** Initialize Material Flow Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Assign Reference of Material Flow Manager
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.

        clear: ME->R_PR_MFMGR.
        move LR_GATE->R_CLSPR ?to ME->R_PR_MFMGR.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_MFMGR.
    endtry.
  endif.

  if ME->R_PR_MFMGR is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method SET_CONSU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_CONSU ).

  move IS_CONSU-CONSU                      to LS_PARAM-ATFLV.
  move IS_CONSU-CONSU_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONSU_CHANGED ).
  endif.

endmethod.
method SET_IMFXC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IMFXC ).

  move IF_IMFXC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IMFXC_CHANGED ).
  endif.

endmethod.
method SET_MATNR.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_MATNR to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
  endif.

endmethod.
method SET_MFRAT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFRAT ).

  move IF_MFRAT to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFRAT_CHANGED ).
  endif.

endmethod.
