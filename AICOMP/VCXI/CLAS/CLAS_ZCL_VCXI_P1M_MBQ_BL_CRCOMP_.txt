
class ZCL_VCXI_P1M_MBQ_BL_CRCOMP definition
  public
  inheriting from ZCL_VCXI_PXM_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_CFG type ZVCXI_XCS_ISVCE value 'CFG' ##NO_TEXT.
  constants C_ISVCE_COMP_P1 type ZVCXI_XCS_ISVCE value 'COMP_P1' ##NO_TEXT.
  constants C_ISVCE_CORR type ZVCXI_XCS_ISVCE value 'CORR' ##NO_TEXT.
  constants C_ISVCE_CRCONI type ZVCXI_XCS_ISVCE value 'CRCONI' ##NO_TEXT.
  constants C_ISVCE_CRCONO type ZVCXI_XCS_ISVCE value 'CRCONO' ##NO_TEXT.
  constants C_ISVCE_CRCPMCNF type ZVCXI_XCS_ISVCE value 'CRCPMCNF' ##NO_TEXT.
  constants C_ISVCE_CRPART type ZVCXI_XCS_ISVCE value 'CRPART' ##NO_TEXT.
  constants C_ISVCE_CRSHT type ZVCXI_XCS_ISVCE value 'CRSHT' ##NO_TEXT.
  constants C_ISVCE_CSTEP_CLOSE type ZVCXI_XCS_ISVCE value 'CSTEP_CLOSE' ##NO_TEXT.
  constants C_ISVCE_CSTEP_DCUT type ZVCXI_XCS_ISVCE value 'CSTEP_DCUT' ##NO_TEXT.
  constants C_ISVCE_CSTEP_EMBOS type ZVCXI_XCS_ISVCE value 'CSTEP_EMBOS' ##NO_TEXT.
  constants C_ISVCE_CSTEP_LAMI type ZVCXI_XCS_ISVCE value 'CSTEP_LAMI' ##NO_TEXT.
  constants C_ISVCE_CSTEP_PRINT type ZVCXI_XCS_ISVCE value 'CSTEP_PRINT' ##NO_TEXT.
  constants C_ISVCE_INPLIN type ZVCXI_XCS_ISVCE value 'INPLIN' ##NO_TEXT.
  constants C_ISVCE_LAMI type ZVCXI_XCS_ISVCE value 'LAMI' ##NO_TEXT.
  constants C_ISVCE_MS_CRPROC type ZVCXI_XCS_ISVCE value 'MS_CRPROC' ##NO_TEXT.
  constants C_ISVCE_SSTEP_DCUT type ZVCXI_XCS_ISVCE value 'SSTEP_DCUT' ##NO_TEXT.
  constants C_SOKEY_CFG type ZVCXI_XCM_MBQ_SOKEY value 'P1_CFG' ##NO_TEXT.
  constants C_SOKEY_CFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P1_CFG_MTS' ##NO_TEXT.
  constants C_SOKEY_CRPROC type ZVCXI_XCM_MBQ_SOKEY value 'P1_CRPROC' ##NO_TEXT.
  constants C_SOKEY_CRPROC_UV type ZVCXI_XCM_MBQ_SOKEY value 'P1_CRPROC_UV' ##NO_TEXT.
  constants C_SOKEY_CSFG type ZVCXI_XCM_MBQ_SOKEY value 'P1_CSFG' ##NO_TEXT.
  constants C_SOKEY_CSFG_CO type ZVCXI_XCM_MBQ_SOKEY value 'P1_CSFG_CO' ##NO_TEXT.
  constants C_SOKEY_CSFG_CO_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P1_CSFG_CO_MTS' ##NO_TEXT.
  constants C_SOKEY_CSFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P1_CSFG_MTS' ##NO_TEXT.

  methods ADJUST_SVCEL_MS_CRPROC
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CRCPMCNF
    importing
      !IR_SVCEL_CRCPMCNF type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CRSHT
    importing
      !IR_SVCEL_CRSHT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_MS_CRPROC
    importing
      !IR_SVCEL_CRPROC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods ADD_SCORE_MGR
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IF_PANOR type ZVCXI_P0SS_PANOR
      !IF_SSCOR type ZVCXI_P0SS_SSCOR
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !IT_TAPE_COM type ZVCXI_PXSS_TT_TAPE_COM
    exporting
      !EF_ISELF type /VCXI/CKX_ID
      !EF_CSELF type /VCXI/VKSR_REPNR
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_CLOSE
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_DCUT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_EMBOS
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_PRINT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_INPLIN
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_SSTEP_DCUT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CORR
    importing
      !IR_SVCEL_CORR type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_DCUT
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_EMBOS
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_LAMI
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_PRINT
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_INPLIN
    importing
      !IR_SVCEL_INPLIN type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_LAMI
    importing
      !IR_SVCEL_LAMI type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SSTEP_DCUT
    importing
      !IR_SVCEL_SSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods FILL_CFG_AS_CUSTOM
    importing
      !IR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods FILL_CFG_AS_SHEET
    importing
      !IR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .

  methods ADJUST_ID
    redefinition .
  methods ADJUST_SVCEL
    redefinition .
  methods ANALYZE_CSTEP
    redefinition .
  methods ANALYZE_SSTEP
    redefinition .
  methods GET_ACTDAT_DMS
    redefinition .
  methods GET_ACTDAT_DMSEXT
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_DMSEXT_PD
    redefinition .
  methods GET_MATDAT_MAKT
    redefinition .
  methods GET_MATDAT_MARM
    redefinition .
  methods GET_SOKEY_OUT
    redefinition .
private section.
endclass. "ZCL_VCXI_P1M_MBQ_BL_CRCOMP definition
class ZCL_VCXI_P1M_MBQ_BL_CRCOMP implementation.
  method ADD_SCORE_MGR.

    data: LS_SVCEL     type ZVCXI_XCI_S_SVCEL,
          LS_SCORE_COM type ZVCXI_PXSS_S_SCORE_COM,
          LS_TAPE_COM  type ZVCXI_PXSS_S_TAPE_COM.


***--------------------------------------------------------------------------------------
*** Add Score Manager
    clear LS_SVCEL.
    LS_SVCEL-IPARE = IF_IPARE.
    LS_SVCEL-CPARE = IF_CPARE.
    LS_SVCEL-ISELF = 'SCORE_MGR'.
    LS_SVCEL-CSELF = IR_IDAT_SVC->ADD_SVCEL( IF_IPARE = LS_SVCEL-IPARE
                                             IF_CPARE = LS_SVCEL-CPARE
                                             IF_ISELF = LS_SVCEL-ISELF ).
*** Panel Orientation
    LS_SVCEL-LEOKY = IF_PANOR.
    LS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Score Status
    append value #( PARID = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_PARID_SSCOR
                    ATWRT = IF_SSCOR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to LS_SVCEL-T_SVCPA.

*** Update
    IR_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).

    EF_ISELF = LS_SVCEL-ISELF.
    EF_CSELF = LS_SVCEL-CSELF.


***--------------------------------------------------------------------------------------
*** Add Scores
    loop at IT_SCORE_COM into LS_SCORE_COM.
***   Add Score Manager
      clear LS_SVCEL.
      LS_SVCEL-IPARE = EF_ISELF.
      LS_SVCEL-CPARE = EF_CSELF.
      LS_SVCEL-ISELF = 'SCORE'.
      LS_SVCEL-CSELF = IR_IDAT_SVC->ADD_SVCEL( IF_IPARE = LS_SVCEL-IPARE
                                               IF_CPARE = LS_SVCEL-CPARE
                                               IF_ISELF = LS_SVCEL-ISELF ).
***   Score ID
      LS_SVCEL-LEOKY = LS_SCORE_COM-ISCOR.
      LS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***   Score Position
      append value #( PARID = ZCL_VCXI_PXSS_PR_SCORE=>C_PARID_SCORP
                      ATFLV = LS_SCORE_COM-SCORP
                      UNIT  = LS_SCORE_COM-SCORP_UOM
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                    ) to LS_SVCEL-T_SVCPA.

***   Score Type
      append value #( PARID = ZCL_VCXI_PXSS_PR_SCORE=>C_PARID_TSCOR
                      ATWRT = LS_SCORE_COM-TSCOR
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                    ) to LS_SVCEL-T_SVCPA.

***   Slot Indicator
      append value #( PARID = ZCL_VCXI_PXSS_PR_SCORE=>C_PARID_FSLIN
                      ATWRT = LS_SCORE_COM-FSLIN
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                    ) to LS_SVCEL-T_SVCPA.

***   Update
      IR_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).
    endloop.


***--------------------------------------------------------------------------------------
*** Add Tapes
    loop at IT_TAPE_COM into LS_TAPE_COM.
***   Add Score Manager
      clear LS_SVCEL.
      LS_SVCEL-IPARE = EF_ISELF.
      LS_SVCEL-CPARE = EF_CSELF.
      LS_SVCEL-ISELF = 'TAPE'.
      LS_SVCEL-CSELF = IR_IDAT_SVC->ADD_SVCEL( IF_IPARE = LS_SVCEL-IPARE
                                               IF_CPARE = LS_SVCEL-CPARE
                                               IF_ISELF = LS_SVCEL-ISELF ).

***   Tape Type
      append value #( PARID = ZCL_VCXI_PXSS_PR_TAPE=>C_PARID_TTAPE
                      ATWRT = LS_TAPE_COM-TTAPE
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                    ) to LS_SVCEL-T_SVCPA.

***   Tape Position
      append value #( PARID = ZCL_VCXI_PXSS_PR_TAPE=>C_PARID_TAPOS
                      ATFLV = LS_TAPE_COM-TAPOS
                      UNIT  = LS_TAPE_COM-TAPOS_UOM
                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                    ) to LS_SVCEL-T_SVCPA.

***   Update
      IR_IDAT_SVC->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).
    endloop.

  endmethod.
  method ADJUST_ID.

*** Call SUPER
    SUPER->ADJUST_ID( exporting IR_SVCEL = IR_SVCEL
                      changing  CF_ID    = CF_ID ).

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Connection Out is replaced by a Finished Good
      when C_ISVCE_CRCONO.
        CF_ID = C_ISVCE_CFG.

***   SFG Shipping Manger is replaced by FG Shipping Manager
      when 'SHIPMGR_CRCONO'.
        CF_ID = 'SHIPMGR'.

    endcase.

  endmethod.
  method ADJUST_SVCEL.

*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
***--------------------------------------------------------------------------------------
***   Input
***-------------------------------------------------------------------------------------
      when C_ISVCE_INPLIN.
***     Adjust Inline Printed Liner
        ME->ADJUST_SVCEL_INPLIN( exporting IR_SVCEL         = IR_SVCEL
                                           IR_IDAT_SVC      = IR_IDAT_SVC
                                           IT_MATLI         = IT_MATLI
                                           IT_DMSLI         = IT_DMSLI
                                 importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                 changing  CS_SVCEL         = CS_SVCEL ).

***-------------------------------------------------------------------------------------
***   Conversion Steps
***-------------------------------------------------------------------------------------
      when C_ISVCE_CSTEP_PRINT.
***     Adjust CStep Printing
        ME->ADJUST_SVCEL_CSTEP_PRINT( exporting IR_SVCEL         = IR_SVCEL
                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                IT_MATLI         = IT_MATLI
                                                IT_DMSLI         = IT_DMSLI
                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                      changing  CS_SVCEL         = CS_SVCEL ).
      when C_ISVCE_CSTEP_DCUT.
***     Adjust CStep Die Cutting
        ME->ADJUST_SVCEL_CSTEP_DCUT( exporting IR_SVCEL         = IR_SVCEL
                                               IR_IDAT_SVC      = IR_IDAT_SVC
                                               IT_MATLI         = IT_MATLI
                                               IT_DMSLI         = IT_DMSLI
                                     importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                     changing  CS_SVCEL         = CS_SVCEL ).
      when C_ISVCE_CSTEP_EMBOS.
***     Adjust CStep Embossing
        ME->ADJUST_SVCEL_CSTEP_EMBOS( exporting IR_SVCEL         = IR_SVCEL
                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                IT_MATLI         = IT_MATLI
                                                IT_DMSLI         = IT_DMSLI
                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                      changing  CS_SVCEL         = CS_SVCEL ).
      when C_ISVCE_CSTEP_CLOSE.
***     Adjust CStep Closing
        ME->ADJUST_SVCEL_CSTEP_CLOSE( exporting IR_SVCEL         = IR_SVCEL
                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                IT_MATLI         = IT_MATLI
                                                IT_DMSLI         = IT_DMSLI
                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                      changing  CS_SVCEL         = CS_SVCEL ).

***--------------------------------------------------------------------------------------
***   Output
***-------------------------------------------------------------------------------------
      when C_ISVCE_SSTEP_DCUT.
***     Adjust SStep Die Cutting
        ME->ADJUST_SVCEL_SSTEP_DCUT( exporting IR_SVCEL         = IR_SVCEL
                                               IR_IDAT_SVC      = IR_IDAT_SVC
                                               IT_MATLI         = IT_MATLI
                                               IT_DMSLI         = IT_DMSLI
                                     importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                     changing  CS_SVCEL         = CS_SVCEL ).
      when C_ISVCE_CFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_CFG( exporting IR_SVCEL         = IR_SVCEL
                                        IR_IDAT_SVC      = IR_IDAT_SVC
                                        IT_MATLI         = IT_MATLI
                                        IT_DMSLI         = IT_DMSLI
                              importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                              changing  CS_SVCEL         = CS_SVCEL ).

    endcase.

  endmethod.
  method ADJUST_SVCEL_CFG.

    data: LR_EA_CRCONO  type ref to ZCL_VCXI_P1SS_EA_CRCONO,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Remove Customer Material Info
    delete CS_SVCEL-T_SVCPA where PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDMAT
                             or   PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDPTX.

***--------------------------------------------------------------------------------------
*** Transfer Information of Connection Out to Finished Good
    if IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ISVCE_CRCONO.
      LR_EA_CRCONO ?= IR_SVCEL->GET_CLSEA( ).

***   Get Corrugator Backward Property XML (Outbound)
      LR_BL_CRBPROP = LR_EA_CRCONO->GET_CRBPX( ).

      case LR_BL_CRBPROP->F_FEFCO.
        when '0110' or                      "Sheet
             '0111' or '0112' or '0113' or  "Sheet with Scores on Width
             '0111' or '0112' or '0113'.    "Sheet with Scores on Length
          ME->FILL_CFG_AS_SHEET( exporting IR_BL_CRBPROP = LR_BL_CRBPROP
                                           IR_IDAT_SVC   = IR_IDAT_SVC
                                 changing  CS_SVCEL      = CS_SVCEL ).
        when others.
          ME->FILL_CFG_AS_CUSTOM( exporting IR_BL_CRBPROP = LR_BL_CRBPROP
                                            IR_IDAT_SVC   = IR_IDAT_SVC
                                  changing  CS_SVCEL      = CS_SVCEL ).
      endcase.
    endif.

  endmethod.
  method ADJUST_SVCEL_CSTEP_CLOSE.

*** Mark Handling Dimensions as Setby User, due to adjustment of FEFCO to custom design
    CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P1SS_PR_CSTEP_CLOS=>C_PARID_HNDLE ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P1SS_PR_CSTEP_CLOS=>C_PARID_HNDWI ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
    CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_P1SS_PR_CSTEP_CLOS=>C_PARID_HNDHE ]-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  endmethod.
  method ADJUST_SVCEL_CSTEP_DCUT.

    data: LF_MATNR type MATNR.
    data: LR_EA_CSTEP_DCUT type ref to ZCL_VCXI_P1SS_EA_CSTEP_DCUT.


*** Check if Die Cut Tool has not been specified
    LR_EA_CSTEP_DCUT ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_CSTEP_DCUT is bound and
          LR_EA_CSTEP_DCUT->GET_DCTTN( ) is initial.

*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).
    check LF_MATNR is not initial.

*** Fill Tool Material
    delete CS_SVCEL-T_SVCPA where PARID = ZIF_VCXI_PXSS_DCUT=>C_PARID_DCTTN.
    append value #( PARID = ZIF_VCXI_PXSS_DCUT=>C_PARID_DCTTN
                    ATWRT = LF_MATNR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

  endmethod.
  method ADJUST_SVCEL_CSTEP_EMBOS.

    data: LF_MATNR type MATNR.
    data: LR_EA_CSTEP_EMBOS type ref to ZCL_VCXI_P1SS_EA_CSTEP_EMBOS.


*** Check if Embossing Tool has not been specified
    LR_EA_CSTEP_EMBOS ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_CSTEP_EMBOS is bound and
          LR_EA_CSTEP_EMBOS->GET_EMBTN( ) is initial.

*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).
    check LF_MATNR is not initial.

*** Fill Tool Material
    delete CS_SVCEL-T_SVCPA where PARID = ZCL_VCXI_P1SS_PR_CSTEP_EMBOS=>C_PARID_EMBTN.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CSTEP_EMBOS=>C_PARID_EMBTN
                    ATWRT = LF_MATNR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

  endmethod.
  method ADJUST_SVCEL_CSTEP_PRINT.

    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_P1SS_EA_CSTEP_PRINT.


*** Check if Design Document has not been specified
    LR_EA_CSTEP_PRINT ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound and
          LR_EA_CSTEP_PRINT->GET_DESDO( ) is initial.

*** Get DMS Document Key of created DMS Document
    LS_DOC_KEY = ME->GET_DOC_KEY_BY_SOURCE( IT_DMSLI        = IT_DMSLI
                                            IR_SVCEL_SOURCE = IR_SVCEL ).
    check LS_DOC_KEY is not initial.

*** Fill Design Document
    delete CS_SVCEL-T_SVCPA where PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO.
    append value #( PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO
                    STRNG = conv #( ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                                        IF_DOKNR = LS_DOC_KEY-DOKNR
                                                                        IF_DOKTL = LS_DOC_KEY-DOKTL
                                                                        IF_DOKVR = LS_DOC_KEY-DOKVR ) )
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZIF_VCXI_PXSS_PRINT=>C_IEVNT_O_DESDO_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_INPLIN.

    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.
    data: LR_EA_INPLIN type ref to ZCL_VCXI_P1SS_EA_INPLIN.


*** Check if Design Document has not been specified
    LR_EA_INPLIN ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_INPLIN is bound and
          LR_EA_INPLIN->GET_DESDO( ) is initial.

*** Get DMS Document Key of created DMS Document
    LS_DOC_KEY = ME->GET_DOC_KEY_BY_SOURCE( IT_DMSLI        = IT_DMSLI
                                            IR_SVCEL_SOURCE = IR_SVCEL ).
    check LS_DOC_KEY is not initial.

*** Fill Design Document
    delete CS_SVCEL-T_SVCPA where PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO.
    append value #( PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO
                    STRNG = conv #( ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                                        IF_DOKNR = LS_DOC_KEY-DOKNR
                                                                        IF_DOKTL = LS_DOC_KEY-DOKTL
                                                                        IF_DOKVR = LS_DOC_KEY-DOKVR ) )
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZIF_VCXI_PXSS_PRINT=>C_IEVNT_O_DESDO_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_MS_CRPROC.

    data: LF_MATNR type MATNR.
    data: LS_KAUSF type ZVCXI_XCSP_S_KAUSF.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.

***--------------------------------------------------------------------------------------
*** Get correct Source Element
    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_CRPROC.
        LR_SVCEL_SOURCE = IR_SVCEL.

****    No adjustments for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
          return.
        endif.

      when C_ISVCE_CRCONI.
***     Get related Connection Out
        LR_SVCEL_SOURCE = cast ZCL_VCXI_PXSS_EA_XCONI( IR_SVCEL->GET_CLSEA( ) )->GET_XCONO( ).
        check LR_SVCEL_SOURCE is bound.

***     Get Component Scrap of Connection Out
        LS_KAUSF = cast ZCL_VCXI_PXSS_EA_XCONO( LR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_KAUSF( ).

***     Substitute Component with Dummy Route if needed
        if not LINE_EXISTS( IT_MATLI[ LEVEL_SOURCE = LR_SVCEL_SOURCE->GET_LEVEL( ) ] ).
          LR_SVCEL_SOURCE = ME->GET_INP_BY_XCONO( IR_SVCEL_XCONO = LR_SVCEL_SOURCE ).

          if LR_SVCEL_SOURCE is bound.
***         Copy supervised Parameter of input
            CS_SVCEL-T_SVCPA = corresponding #( LR_SVCEL_SOURCE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ) ).
***         Copy children of e.g. Procurement
            ME->COPY_SVCEL_CHILDREN( IF_ISELF    = CS_SVCEL-ISELF
                                     IF_CSELF    = CS_SVCEL-CSELF
                                     IR_SVCEL    = LR_SVCEL_SOURCE
                                     IR_IDAT_SVC = IR_IDAT_SVC
                                     IT_MATLI    = IT_MATLI
                                     IT_DMSLI    = IT_DMSLI ).
          endif.
        endif.
    endcase.
    check LR_SVCEL_SOURCE is bound.

***--------------------------------------------------------------------------------------
    case LR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_CRPROC.
***     Use existing Material for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( LR_SVCEL_SOURCE->GET_CLSEA( ) )->IS_DUMMY( ).
          LF_MATNR = LR_SVCEL_SOURCE->GET_LEOKY( )-LEOKY.
        endif.
    endcase.

*** Get Material Number of created Material
    if LF_MATNR is initial.
      LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                          IR_SVCEL_SOURCE = LR_SVCEL_SOURCE ).
    endif.

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Set Component Scrap
    if LS_KAUSF is not initial.
      if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ] ).
        assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ] to <S_PARAM>.
      else.
        append value #( PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ) to CS_SVCEL-T_SVCPA assigning <S_PARAM>.
      endif.
      <S_PARAM>-ATFLV = LS_KAUSF-KAUSF.
      <S_PARAM>-UNIT  = LS_KAUSF-KAUSF_UOM.
      <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

*** Switch Procurement Option to "Direct Procurement"/"Stock"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] to <S_PARAM>.

      if <S_PARAM>-ATWRT eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
         LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_XCSS_PR_MS=>C_PARID_FPTOS )-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                                     else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

*** Ensure loaded dummy price scales remain after material creation
    if value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ]-ATWRT optional ) eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
       value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ]-ATWRT optional ) is initial.
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ] to <S_PARAM>.
      <S_PARAM>-ATWRT = ABAP_TRUE.
      <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

  endmethod.
  method ADJUST_SVCEL_SSTEP_DCUT.

    data: LF_MATNR type MATNR.
    data: LR_EA_SSTEP_DCUT type ref to ZCL_VCXI_P1SS_EA_SSTEP_DCUT.


*** Check if Die Cut Tool has not been specified
    LR_EA_SSTEP_DCUT ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_SSTEP_DCUT is bound and
          LR_EA_SSTEP_DCUT->GET_DCTTN( ) is initial.

*** Get Material Number of created Material
    LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                        IR_SVCEL_SOURCE = IR_SVCEL ).
    check LF_MATNR is not initial.

*** Fill Tool Material
    delete CS_SVCEL-T_SVCPA where PARID = ZIF_VCXI_PXSS_DCUT=>C_PARID_DCTTN.
    append value #( PARID = ZIF_VCXI_PXSS_DCUT=>C_PARID_DCTTN
                    ATWRT = LF_MATNR
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

  endmethod.
  method ANALYZE.

    data: LF_WERKS type WERKS_D,
          LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY,
          LF_COUNT type I.
    data: LT_CHILDREN type /VCXI/CKX_TT_OBJECT.
    data: LR_EA_SPEC      type ref to ZCL_VCXI_PXSS_EA_SPEC,
          LR_SVCEL_INPUT  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CONV   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Specification and Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_EA_SPEC      = LR_EA_SPEC
                                  ER_SVCEL_INPUT  = LR_SVCEL_INPUT
                                  ER_SVCEL_CONV   = LR_SVCEL_CONV
                                  ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_EA_SPEC      is bound and
          LR_SVCEL_INPUT  is bound and
          LR_SVCEL_CONV   is bound and
          LR_SVCEL_OUTPUT is bound.

*** Get Plant
    LF_WERKS = LR_EA_SPEC->GET_WERKS( ).

***--------------------------------------------------------------------------------------
*** Ignore Dummy Routes
    if ME->HAS_ARBPL( IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP ).
***   Analyze Output for FG / SFG
      LT_CHILDREN = LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
      LR_SVCEL_OUTPUT->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_CHILDREN ).
      loop at LT_CHILDREN into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.

        if LR_SVCEL->GET_CLSEA( ) is instance of ZCL_VCXI_PXSS_EA_SSTEP.
***       Analyze Separation Steps
          ME->ANALYZE_SSTEP( exporting IR_SVCEL_SSTEP = LR_SVCEL
                                       IF_DISST       = conv #( IF_DISST + 1 )
                             changing  CT_MATLI       = ET_MATLI
                                       CT_DMSLI       = ET_DMSLI ).
        else.
***       Define Source Key
          LF_SOKEY = ME->GET_SOKEY_OUT( IR_SVCEL = LR_SVCEL
                                        IF_KZKUP = cond #( when LINES( LT_CHILDREN ) gt 1 and LF_COUNT ne 0 then ABAP_TRUE ) ).
          check LF_SOKEY is not initial.
          LF_COUNT += 1.

***       Add Material with Activities based on Source Key
          ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                                   IF_DISST        = IF_DISST
                                   IR_SVCEL_SOURCE = LR_SVCEL
                                   IF_WERKS        = LF_WERKS
                         changing  CT_MATLI        = ET_MATLI ).

***       Analyze Children (eg. Shipping Manager for Configured Packaging Material)
          data(LT_CHILDREN_OUT) = LR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
          loop at LT_CHILDREN_OUT into LR_OBJECT.
            move LR_OBJECT ?to LR_SVCEL.
            if LR_SVCEL->GET_CLSEA( ) is instance of ZCL_VCXI_XCSU_EA_SHIPMGR.
              ME->ANALYZE_SHIPMGR( exporting IR_SVCEL_SHIPMGR = LR_SVCEL
                                             IF_DISST         = conv #( IF_DISST + 1 )
                                   changing  CT_MATLI         = ET_MATLI
                                             CT_DMSLI         = ET_DMSLI ).
            endif.
          endloop.
        endif.
      endloop.

***--------------------------------------------------------------------------------------
***   Analyze Conversion Steps
      loop at LR_SVCEL_CONV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.
        ME->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = LR_SVCEL
                                     IF_DISST       = conv #( IF_DISST + 1 )
                           changing  CT_MATLI       = ET_MATLI
                                     CT_DMSLI       = ET_DMSLI ).
      endloop.

    endif.

***--------------------------------------------------------------------------------------
*** Analyze Input for Sheet Procurement Dummy
    loop at LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        when C_ISVCE_MS_CRPROC.
          ME->ANALYZE_MS_CRPROC( exporting IR_SVCEL_CRPROC = LR_SVCEL
                                           IF_DISST        = conv #( IF_DISST + 1 )
                                 changing  CT_MATLI        = ET_MATLI
                                           CT_DMSLI        = ET_DMSLI ).
        when C_ISVCE_CORR.
          ME->ANALYZE_CORR( exporting IR_SVCEL_CORR = LR_SVCEL
                                      IF_DISST      = conv #( IF_DISST + 1 )
                            changing  CT_MATLI      = ET_MATLI
                                      CT_DMSLI      = ET_DMSLI ).
        when C_ISVCE_LAMI.
          ME->ANALYZE_LAMI( exporting IR_SVCEL_LAMI = LR_SVCEL
                                      IF_DISST      = conv #( IF_DISST + 1 )
                            changing  CT_MATLI      = ET_MATLI
                                      CT_DMSLI      = ET_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CORR.

    data: LR_SVCEL_PREPR  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_PRPLIN type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_INLPR  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_INPLIN type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Analyze Preprint and its Preprint Liner
    loop at IR_SVCEL_CORR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PREPR=>C_IPRVT_P1_PREPR ) into LR_OBJECT.
      LR_SVCEL_PREPR ?= LR_OBJECT.
      loop at LR_SVCEL_PREPR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN ) into LR_OBJECT.
        LR_SVCEL_PRPLIN ?= LR_OBJECT.

***     Analyze Input of Preprint Liner
        loop at LR_SVCEL_PRPLIN->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
          LR_SVCEL ?= LR_OBJECT.

          case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***         Delegate to Business Logic of Roll Component to analyze Roll Procurement
            when ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_ISVCE_MS_RLPROC.
              ME->GET_BL_RLCOMP( )->ANALYZE_MS_RLPROC( exporting IR_SVCEL_RLPROC = LR_SVCEL
                                                                 IF_DISST        = IF_DISST
                                                       changing  CT_MATLI        = CT_MATLI
                                                                 CT_DMSLI        = CT_DMSLI ).
          endcase.
        endloop.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze Inline Printing and its Inline Printed Liner
    loop at IR_SVCEL_CORR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_INLPR=>C_IPRVT_P1_INLPR ) into LR_OBJECT.
      LR_SVCEL_INLPR ?= LR_OBJECT.
      loop at LR_SVCEL_INLPR->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_INPLIN=>C_IPRVT_P1_INPLIN ) into LR_OBJECT.
        LR_SVCEL_INPLIN ?= LR_OBJECT.
        ME->ANALYZE_INPLIN( exporting IR_SVCEL_INPLIN = LR_SVCEL_INPLIN
                                      IF_DISST        = IF_DISST
                            changing  CT_MATLI        = CT_MATLI
                                      CT_DMSLI        = CT_DMSLI ).
      endloop.
    endloop.

  endmethod.
  method ANALYZE_CRCPMCNF.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Configured Packaging Material
    loop at IR_SVCEL_CRCPMCNF->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Procurement
        when C_ISVCE_MS_CRPROC.
          ME->ANALYZE_MS_CRPROC( exporting IR_SVCEL_CRPROC = LR_SVCEL
                                           IF_DISST        = IF_DISST
                                 changing  CT_MATLI        = CT_MATLI
                                           CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CRSHT.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Input of Sheet
    loop at IR_SVCEL_CRSHT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Procurement
        when C_ISVCE_MS_CRPROC.
          ME->ANALYZE_MS_CRPROC( exporting IR_SVCEL_CRPROC = LR_SVCEL
                                           IF_DISST        = IF_DISST
                                 changing  CT_MATLI        = CT_MATLI
                                           CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP.

    SUPER->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                    IF_DISST       = IF_DISST
                          changing  CT_MATLI       = CT_MATLI
                                    CT_DMSLI       = CT_DMSLI ).

    case IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_CSTEP_LAMI.
        ME->ANALYZE_CSTEP_LAMI( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                          IF_DISST       = IF_DISST
                                changing  CT_MATLI       = CT_MATLI
                                          CT_DMSLI       = CT_DMSLI ).
      when C_ISVCE_CSTEP_PRINT.
        ME->ANALYZE_CSTEP_PRINT( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                           IF_DISST       = IF_DISST
                                 changing  CT_MATLI       = CT_MATLI
                                           CT_DMSLI       = CT_DMSLI ).
      when C_ISVCE_CSTEP_DCUT.
        ME->ANALYZE_CSTEP_DCUT( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                          IF_DISST       = IF_DISST
                                changing  CT_MATLI       = CT_MATLI
                                          CT_DMSLI       = CT_DMSLI ).
      when C_ISVCE_CSTEP_EMBOS.
        ME->ANALYZE_CSTEP_EMBOS( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                           IF_DISST       = IF_DISST
                                 changing  CT_MATLI       = CT_MATLI
                                           CT_DMSLI       = CT_DMSLI ).
    endcase.

  endmethod.
  method ANALYZE_CSTEP_DCUT.

    data: LR_EA_CSTEP_DCUT type ref to ZCL_VCXI_P1SS_EA_CSTEP_DCUT.


*** Check if Die Cut Tool has not been specified
    LR_EA_CSTEP_DCUT ?= IR_SVCEL_CSTEP->GET_CLSEA( ).
    check LR_EA_CSTEP_DCUT is bound and
          LR_EA_CSTEP_DCUT->GET_DCTTN( ) is initial.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_DCT
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                             IF_WERKS        = LR_EA_CSTEP_DCUT->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_CSTEP_EMBOS.

    data: LR_EA_CSTEP_EMBOS type ref to ZCL_VCXI_P1SS_EA_CSTEP_EMBOS.


*** Check if Embossing Tool has not been specified
    LR_EA_CSTEP_EMBOS ?= IR_SVCEL_CSTEP->GET_CLSEA( ).
    check LR_EA_CSTEP_EMBOS is bound and
          LR_EA_CSTEP_EMBOS->GET_EMBTN( ) is initial.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_EMB
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                             IF_WERKS        = LR_EA_CSTEP_EMBOS->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_CSTEP_LAMI.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Sheets
    loop at IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Sheet
        when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_CRSHT.
***       Delegate to Business Logic of Corrugated Component to analyze Corrugated Sheet
          ME->GET_BL_CRCOMP( )->ANALYZE_CRSHT( exporting IR_SVCEL_CRSHT = LR_SVCEL
                                                         IF_DISST       = IF_DISST
                                               changing  CT_MATLI       = CT_MATLI
                                                         CT_DMSLI       = CT_DMSLI ).

***     Analyze Folding Carton Sheet
        when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_FCSHT.
***       Delegate to Business Logic of Folding Carton Component to analyze Folding Carton Sheet
          ME->GET_BL_FCCOMP( )->ANALYZE_FCSHT( exporting IR_SVCEL_FCSHT = LR_SVCEL
                                                         IF_DISST       = IF_DISST
                                               changing  CT_MATLI       = CT_MATLI
                                                         CT_DMSLI       = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP_PRINT.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_P1SS_EA_CSTEP_PRINT,
          LR_BL_DOC         type ref to ZCL_VCXI_XCSS_BL_DOC,
          LR_SVCEL          type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.


    LR_EA_CSTEP_PRINT ?= IR_SVCEL_CSTEP->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_CSTEP
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if DMS Design Document has not been specified
    if LR_EA_CSTEP_PRINT->GET_DESDO( importing ER_BL_DOC = LR_BL_DOC ) is initial.
***   Add DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = value #( DOKAR = LR_EA_CSTEP_PRINT->GET_DOKAR( ) )
                     changing  CT_DMSLI        = CT_DMSLI ).

***   Add Material with Activities based on Source Key (Print Tool Set for analog printing)
      LR_EA_CSTEP_PRINT->GET_TPRIN( importing EF_PRTEC = LF_PRTEC ).
      if LF_PRTEC eq ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
        ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_FOTUT when ABAP_TRUE then C_SOKEY_TOOL_SET_PRINT_OTU
                                                                                     else C_SOKEY_TOOL_SET_PRINT )
                                 IF_DISST        = IF_DISST
                                 IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                                 IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                       changing  CT_MATLI        = CT_MATLI ).
      endif.
    else.
***   Add existing DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = LR_BL_DOC->GET_DOC_KEY( )
                     changing  CT_DMSLI        = CT_DMSLI ).
    endif.


***--------------------------------------------------------------------------------------
    loop at IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Inks
        when ZCL_VCXI_PXM_MBQ_BL_XCOMP=>C_ISVCE_MS_INK.
          ME->ANALYZE_MS_INK( exporting IR_SVCEL_MS_INK = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_INPLIN.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC.
    data: LR_EA_INPLIN type ref to ZCL_VCXI_P1SS_EA_INPLIN,
          LR_BL_DOC    type ref to ZCL_VCXI_XCSS_BL_DOC,
          LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.


    LR_EA_INPLIN ?= IR_SVCEL_INPLIN->GET_CLSEA( ).
    check LR_EA_INPLIN is bound.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_INPLIN
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if DMS Design Document has not been specified
    if LR_EA_INPLIN->GET_DESDO( importing ER_BL_DOC = LR_BL_DOC ) is initial.
***   Add DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_INPLIN
                               IF_WERKS        = LR_EA_INPLIN->GET_WERKS( )
                               IS_DOC_KEY      = value #( DOKAR = LR_EA_INPLIN->GET_DOKAR( ) )
                     changing  CT_DMSLI        = CT_DMSLI ).

***   Add Material with Activities based on Source Key (Print Tool Set for analog printing)
      LR_EA_INPLIN->GET_TPRIN( importing EF_PRTEC = LF_PRTEC ).
      if LF_PRTEC eq ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
        ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_FOTUT when ABAP_TRUE then C_SOKEY_TOOL_SET_PRINT_OTU
                                                                                     else C_SOKEY_TOOL_SET_PRINT )
                                 IF_DISST        = IF_DISST
                                 IR_SVCEL_SOURCE = IR_SVCEL_INPLIN
                                 IF_WERKS        = LR_EA_INPLIN->GET_WERKS( )
                       changing  CT_MATLI        = CT_MATLI ).
      endif.
    else.
***   Add existing DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_INPLIN
                               IF_WERKS        = LR_EA_INPLIN->GET_WERKS( )
                               IS_DOC_KEY      = LR_BL_DOC->GET_DOC_KEY( )
                     changing  CT_DMSLI        = CT_DMSLI ).
    endif.


***--------------------------------------------------------------------------------------
    loop at IR_SVCEL_INPLIN->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Inks
        when ZCL_VCXI_PXM_MBQ_BL_XCOMP=>C_ISVCE_MS_INK.
          ME->ANALYZE_MS_INK( exporting IR_SVCEL_MS_INK = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_LAMI.

    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Analyze Sheets
    loop at IR_SVCEL_LAMI->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Corrugated Sheet
        when ZCL_VCXI_P1M_MBQ_BL_CRCOMP=>C_ISVCE_CRSHT.
***       Delegate to Business Logic of Corrugated Component to analyze Corrugated Sheet
          ME->GET_BL_CRCOMP( )->ANALYZE_CRSHT( exporting IR_SVCEL_CRSHT = LR_SVCEL
                                                         IF_DISST       = IF_DISST
                                               changing  CT_MATLI       = CT_MATLI
                                                         CT_DMSLI       = CT_DMSLI ).

***     Analyze Folding Carton Sheet
        when ZCL_VCXI_P2M_MBQ_BL_FCCOMP=>C_ISVCE_FCSHT.
***       Delegate to Business Logic of Folding Carton Component to analyze Folding Carton Sheet
          ME->GET_BL_FCCOMP( )->ANALYZE_FCSHT( exporting IR_SVCEL_FCSHT = LR_SVCEL
                                                         IF_DISST       = IF_DISST
                                               changing  CT_MATLI       = CT_MATLI
                                                         CT_DMSLI       = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_MS_CRPROC.

    data: LF_WERTU type WERTU.
    data: LR_EA_MS_CRPROC type ref to ZCL_VCXI_P1SS_EA_MS_CRPROC.


    check IR_SVCEL_CRPROC is bound.
    LR_EA_MS_CRPROC ?= IR_SVCEL_CRPROC->GET_CLSEA( ).
    check LR_EA_MS_CRPROC->IS_DUMMY( ).

    LR_EA_MS_CRPROC->GET_MATNR( importing EF_WERTU = LF_WERTU ).

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_WERTU when ABAP_TRUE  then C_SOKEY_CRPROC
                                                                  when ABAP_FALSE then C_SOKEY_CRPROC_UV )
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_CRPROC
                             IF_WERKS        = LR_EA_MS_CRPROC->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_SSTEP.

    SUPER->ANALYZE_SSTEP( exporting IR_SVCEL_SSTEP = IR_SVCEL_SSTEP
                                    IF_DISST       = IF_DISST
                          changing  CT_MATLI       = CT_MATLI
                                    CT_DMSLI       = CT_DMSLI ).

    case IR_SVCEL_SSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_SSTEP_DCUT.
        ME->ANALYZE_SSTEP_DCUT( exporting IR_SVCEL_SSTEP = IR_SVCEL_SSTEP
                                          IF_DISST       = IF_DISST
                                changing  CT_MATLI       = CT_MATLI
                                          CT_DMSLI       = CT_DMSLI ).
    endcase.

  endmethod.
  method ANALYZE_SSTEP_DCUT.

    data: LR_EA_SSTEP_DCUT type ref to ZCL_VCXI_P1SS_EA_SSTEP_DCUT.


*** Check if Die Cut Tool has not been specified
    LR_EA_SSTEP_DCUT ?= IR_SVCEL_SSTEP->GET_CLSEA( ).
    check LR_EA_SSTEP_DCUT is bound and
          LR_EA_SSTEP_DCUT->GET_DCTTN( ) is initial.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_DCT
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_SSTEP
                             IF_WERKS        = LR_EA_SSTEP_DCUT->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method FILL_CFG_AS_CUSTOM.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


***--------------------------------------------------------------------------------------
*** FEFCO
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_FEFCO
                    ATWRT = '1000'    "Custom Design
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Product Dimensions
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_PROLE
                    ATFLV = IR_BL_CRBPROP->S_PRODIM-PROLE
                    UNIT  = IR_BL_CRBPROP->S_PRODIM-PROLE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_PROWI
                    ATFLV = IR_BL_CRBPROP->S_PRODIM-PROWI
                    UNIT  = IR_BL_CRBPROP->S_PRODIM-PROWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_PROHE
                    ATFLV = IR_BL_CRBPROP->S_PRODIM-PROHE
                    UNIT  = IR_BL_CRBPROP->S_PRODIM-PROHE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Product Sheet Dimension
    IR_BL_CRBPROP->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                         ES_SHTWI = LS_SHTWI ).

    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_SHTPL
                    ATFLV = LS_SHTLE-SHTLE
                    UNIT  = LS_SHTLE-SHTLE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_SHTPW
                    ATFLV = LS_SHTWI-SHTWI
                    UNIT  = LS_SHTWI-SHTWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Flute Orientation
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_FLUTO
                    ATWRT = IR_BL_CRBPROP->F_FLUTO
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Cut Out Area
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_COUAR
                    ATFLV = IR_BL_CRBPROP->S_COUAR-COUAR
                    UNIT  = IR_BL_CRBPROP->S_COUAR-COUAR_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Joint Flap Dimension
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOIPO
                    ATWRT = IR_BL_CRBPROP->S_JOIDIM-JOIPO
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOIWI
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JOIWI
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JOIWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOILE
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JOILE
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JOILE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER      "No recalculation
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JEXTT
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JEXTT
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JEXTT_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JEXTB
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JEXTB
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JEXTB_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.


***--------------------------------------------------------------------------------------
*** Add Score Manager
    ME->ADD_SCORE_MGR( IF_IPARE     = CS_SVCEL-ISELF
                       IF_CPARE     = CS_SVCEL-CSELF
                       IR_IDAT_SVC  = IR_IDAT_SVC
                       IF_PANOR     = 'CUSTOM'
                       IF_SSCOR     = 'M'
                       IT_SCORE_COM = IR_BL_CRBPROP->T_SCORE
                       IT_TAPE_COM  = IR_BL_CRBPROP->T_TAPE_COM ).

  endmethod.
  method FILL_CFG_AS_SHEET.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


***--------------------------------------------------------------------------------------
*** Set FEFCO
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_FEFCO
                    ATWRT = IR_BL_CRBPROP->F_FEFCO
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Set Product Dimensions
    IR_BL_CRBPROP->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                         ES_SHTWI = LS_SHTWI ).

    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_PROLE
                    ATFLV = LS_SHTLE-SHTLE
                    UNIT  = LS_SHTLE-SHTLE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_PROWI
                    ATFLV = LS_SHTWI-SHTWI
                    UNIT  = LS_SHTWI-SHTWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Flute Orientation
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_FLUTO
                    ATWRT = IR_BL_CRBPROP->F_FLUTO
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Cut Out Area
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_COUAR
                    ATFLV = IR_BL_CRBPROP->S_COUAR-COUAR
                    UNIT  = IR_BL_CRBPROP->S_COUAR-COUAR_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

*** Joint Flap Dimension
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOIPO
                    ATWRT = IR_BL_CRBPROP->S_JOIDIM-JOIPO
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOIWI
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JOIWI
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JOIWI_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JOILE
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JOILE
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JOILE_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER      "No recalculation
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JEXTT
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JEXTT
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JEXTT_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( PARID = ZCL_VCXI_P1SS_PR_CFG=>C_PARID_JEXTB
                    ATFLV = IR_BL_CRBPROP->S_JOIDIM-JEXTB
                    UNIT  = IR_BL_CRBPROP->S_JOIDIM-JEXTB_UOM
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.

***--------------------------------------------------------------------------------------
*** Add Score Manager
    ME->ADD_SCORE_MGR( IF_IPARE     = CS_SVCEL-ISELF
                       IF_CPARE     = CS_SVCEL-CSELF
                       IR_IDAT_SVC  = IR_IDAT_SVC
                       IF_PANOR     = 'SHEET'
                       IF_SSCOR     = 'M'
                       IT_SCORE_COM = IR_BL_CRBPROP->T_SCORE
                       IT_TAPE_COM  = IR_BL_CRBPROP->T_TAPE_COM ).

  endmethod.
  method GET_ACTDAT_DMS.

    data: LT_DKTXT type ZVCXI_XCS_TT_DKTXT.
    field-symbols: <S_ACTDAT_DMS> type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_DMS( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                       importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_DMS>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Printing
      when C_SOKEY_DMS_PRINT.
        case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***       CStep Printing
          when type ZCL_VCXI_P1SS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
            if LR_EA_CSTEP_PRINT->GET_DESDO( ) is initial.
***           Create a new Design Document
              LR_EA_CSTEP_PRINT->GET_DESDD( importing ET_DKTXT = LT_DKTXT ).
              <S_ACTDAT_DMS>-T_DMSDAT_DRAT = corresponding #( LT_DKTXT ).
            else.
***           Design Document already exists - no creation needed
              EF_SKIP = ABAP_TRUE.
            endif.

***       Inline Printing
          when type ZCL_VCXI_P1SS_EA_INPLIN into data(LR_EA_INPLIN).
            if LR_EA_INPLIN->GET_DESDO( ) is initial.
***           Create a new Design Document
              LR_EA_INPLIN->GET_DESDD( importing ET_DKTXT = LT_DKTXT ).
              <S_ACTDAT_DMS>-T_DMSDAT_DRAT = corresponding #( LT_DKTXT ).
            else.
***           Design Document already exists - no creation needed
              EF_SKIP = ABAP_TRUE.
            endif.

        endcase.
    endcase.

  endmethod.
  method GET_ACTDAT_DMSEXT.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Printing
      when C_SOKEY_DMS_PRINT.
        case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***       CStep Printing
          when type ZCL_VCXI_P1SS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
            if LR_EA_CSTEP_PRINT->GET_DESDO( ) is not initial.
***           Design Document already exists - no update of Data Extension
              EF_SKIP = ABAP_TRUE.
              exit.
            endif.

***       Inline Printing
          when type ZCL_VCXI_P1SS_EA_INPLIN into data(LR_EA_INPLIN).
            if LR_EA_INPLIN->GET_DESDO( ) is not initial.
***           Design Document already exists - no update of Data Extension
              EF_SKIP = ABAP_TRUE.
              exit.
            endif.

        endcase.
    endcase.

***--------------------------------------------------------------------------------------
*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_DMSEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                    IF_SOKEY        = IF_SOKEY
                                                    IF_WERKS        = IF_WERKS
                                          importing EF_SKIP         = EF_SKIP ).

  endmethod.
  method GET_ACTDAT_MMEXT.

    data: LR_EA_MS_CRPROC type ref to ZCL_VCXI_P1SS_EA_MS_CRPROC,
          LR_BL_CRFPROP   type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRBPROP   type ref to ZCL_VCXI_P1SS_BL_CRBPROP.
    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Corrugated Procurement
      when C_SOKEY_CRPROC or
           C_SOKEY_CRPROC_UV.
        LR_EA_MS_CRPROC ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

***     Get Corrugator Forward and Backward Property XML (Outbound)
        LR_BL_CRFPROP = LR_EA_MS_CRPROC->GET_CRFPX( ).
        LR_BL_CRBPROP = LR_EA_MS_CRPROC->GET_CRBPX( ).

***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_P1E_MM_MMEXT=>C_CNTXT_P1.    "Corrugated
        <S_ACTDAT_MMEXT>-S_P1_EXTVAL = value #( SABOA       = LR_BL_CRFPROP->F_SABOA
                                                PRBOA       = LR_BL_CRFPROP->F_PRBOA
                                                FLUTE       = LR_BL_CRFPROP->F_FLUTE
                                                S_CALIP     = LR_BL_CRFPROP->S_CALIP
                                                S_SURWT     = LR_EA_MS_CRPROC->GET_SURWT( )
                                                S_ADDWT     = LR_BL_CRFPROP->S_ADDWT
                                                S_HNDDIM    = LR_BL_CRFPROP->S_HNDDIM
                                                T_SCORE_COM = LR_BL_CRBPROP->T_SCORE
                                                S_COUAR     = LR_BL_CRBPROP->S_COUAR
                                                T_JOITY     = LR_BL_CRFPROP->T_JOITY
                                                T_PRINT_COM = LR_BL_CRFPROP->T_PRINT ).

    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Corrugated Procurement
      when C_SOKEY_CRPROC or
           C_SOKEY_CRPROC_UV.
        <S_ACTDAT_PURIR> = ME->GET_PURIR_XPROC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                          IF_SOKEY        = IF_SOKEY
                                                          IF_WERKS        = IF_WERKS
                                                changing  CF_SKIP         = EF_SKIP ).
    endcase.

  endmethod.
  method GET_DMSEXT_PD.

*** Call SUPER
    RS_DMSEXT_PD = SUPER->GET_DMSEXT_PD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).


    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   CStep Printing
      when type ZCL_VCXI_P1SS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
***     Get Print Design Header Information
        RS_DMSEXT_PD-S_PD = LR_EA_CSTEP_PRINT->GET_PD( ).

***   Inline Printing
      when type ZCL_VCXI_P1SS_EA_INPLIN into data(LR_EA_INPLIN).
***     Get Print Design Header Information
        RS_DMSEXT_PD-S_PD = LR_EA_INPLIN->GET_PD( ).
    endcase.

  endmethod.
  method GET_MATDAT_MAKT.

    RT_MATDAT_MAKT = SUPER->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_TMATN        = IF_TMATN ).

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Print Tool Set of Inline Printed Liner
      when type ZCL_VCXI_P1SS_EA_INPLIN into data(LR_EA_INPLIN).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_INPLIN->GET_DESDD( ) ) ).

***   Print Tool Set of Conversion Step
      when type ZCL_VCXI_P1SS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_CSTEP_PRINT->GET_DESDD( ) ) ).

***   Die Cut Tool of Conversion Step
      when type ZCL_VCXI_P1SS_EA_CSTEP_DCUT into data(LR_EA_CSTEP_DCUT).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_CSTEP_DCUT->GET_DCTTD( ) ) ).

***   Die Cut Tool of Separation Step
      when type ZCL_VCXI_P1SS_EA_SSTEP_DCUT into data(LR_EA_SSTEP_DCUT).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_SSTEP_DCUT->GET_DCTTD( ) ) ).

***   Embossing Tool of Conversion Step
      when type ZCL_VCXI_P1SS_EA_CSTEP_EMBOS into data(LR_EA_CSTEP_EMBOS).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_CSTEP_EMBOS->GET_EMBTD( ) ) ).
    endcase.

  endmethod.
  method GET_MATDAT_MARM.

    data: LS_SHTLE        type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI        type ZVCXI_P0SS_S_SHTWI,
          LS_SURWT        type ZVCXI_PXS_S_SURWT,
          LS_CALCV_AREA   type ZVCXI_XCS_S_CALCV,
          LS_CALCV_WEIGHT type ZVCXI_XCS_S_CALCV.
    field-symbols: <S_MATDAT_MARM> type ZVCXI_XCM_MBQ_S_MATDAT_MARM.


*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   MS Procurement
      when type ZCL_VCXI_P1SS_EA_MS_CRPROC into data(LR_EA_MS_CRPROC).
        LR_EA_MS_CRPROC->GET_CRBPX( )->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                             ES_SHTWI = LS_SHTWI ).
        LS_SURWT = LR_EA_MS_CRPROC->GET_SURWT( ).

        if LS_SHTLE-SHTLE_UOM is not initial and
           LS_SHTWI-SHTWI_UOM is not initial.
***       Calculate Area
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                              IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                              IF_CALCV_2     = LS_SHTWI-SHTWI
                                                              IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                    importing EF_CALCV       = LS_CALCV_AREA-CALCV
                                                              EF_CALCV_UOM   = LS_CALCV_AREA-CALCV_UOM ).
***       Add Conversion for Area
          append value #( MEINH = LS_CALCV_AREA-CALCV_UOM ) to RT_MATDAT_MARM assigning <S_MATDAT_MARM>.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CALC_UMREZ_UMREN( exporting IS_CALCV_BASE = value #( CALCV     = 1
                                                                                          CALCV_UOM = 'PC' )
                                                                 IS_CALCV_ALT  = LS_CALCV_AREA
                                                       importing EF_UMREZ      = <S_MATDAT_MARM>-UMREZ
                                                                 EF_UMREN      = <S_MATDAT_MARM>-UMREN ).

***       Calculate Weight
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_AREA-CALCV
                                                              IF_CALCV_UOM_1 = LS_CALCV_AREA-CALCV_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                    importing EF_CALCV       = LS_CALCV_WEIGHT-CALCV
                                                              EF_CALCV_UOM   = LS_CALCV_WEIGHT-CALCV_UOM ).
***       Add Conversion for Weight
          append value #( MEINH = LS_CALCV_WEIGHT-CALCV_UOM ) to RT_MATDAT_MARM assigning <S_MATDAT_MARM>.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CALC_UMREZ_UMREN( exporting IS_CALCV_BASE = value #( CALCV     = 1
                                                                                          CALCV_UOM = 'PC' )
                                                                 IS_CALCV_ALT  = LS_CALCV_WEIGHT
                                                       importing EF_UMREZ      = <S_MATDAT_MARM>-UMREZ
                                                                 EF_UMREN      = <S_MATDAT_MARM>-UMREN ).
        endif.
    endcase.

  endmethod.
  method GET_SOKEY_OUT.

*** Get Make-to-Stock Flag of Element
    data(LF_FMTSA) = ME->GET_FMTSA( IR_SVCEL = IR_SVCEL ).

*** Define Source Key based on FG/SFG > Co-Product > MTO/MTS
    RF_SOKEY = switch #( IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( )
                         when C_ISVCE_CFG    then switch #( IF_KZKUP                                  "Finished Good
                                                            when ABAP_FALSE then switch #( LF_FMTSA     "Normal
                                                                                           when ABAP_FALSE then C_SOKEY_CFG
                                                                                           when ABAP_TRUE  then C_SOKEY_CFG_MTS
                                                                                         )
*                                                             when ABAP_TRUE then switch #( LF_FMTSA      "Co-Product
*                                                                                            when ABAP_FALSE then C_SOKEY_CFG_CO
*                                                                                            when ABAP_TRUE  then C_SOKEY_CFG_CO_MTS
*                                                                                          )
                                                          )
                         when C_ISVCE_CRCONO then switch #( IF_KZKUP                                  "Semi-Finished Good
                                                            when ABAP_FALSE then switch #( LF_FMTSA     "Normal
                                                                                           when ABAP_FALSE then C_SOKEY_CSFG
                                                                                           when ABAP_TRUE  then C_SOKEY_CSFG_MTS
                                                                                         )
                                                            when ABAP_TRUE then switch #( LF_FMTSA      "Co-Product
                                                                                           when ABAP_FALSE then C_SOKEY_CSFG_CO
                                                                                           when ABAP_TRUE  then C_SOKEY_CSFG_CO_MTS
                                                                                         )
                                                          )
                       ).

  endmethod.
