
class ZCL_VCXI_P0SR_BL_PSTEP_PRINT definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_P0SR_PCDIR .
  interfaces ZIF_VCXI_XCSR_BL_OUTSO .

  constants C_IPSTP_PRINT type /VCXI/VSMC_IPSTP value 'P0_PS_PRINT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_PRINT
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .
  methods SPLIT_FOR_RERUN
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IF_LCVAL type /VCXI/VSMC_LCVAL optional
    returning
      value(RT_BL_PSTEP) type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  constants C_IAATY_FULLSPRINT type /VCXI/VSMC_IAATY value 'P0_AA_FULLSPRINT'. "#EC NOTEXT
  constants C_IAATY_NOCOL type /VCXI/VSMC_IAATY value 'P0_AA_NOCOL'. "#EC NOTEXT
  data F_PRSID type ZVCXI_P0S_PRSID .
  data F_PRTYP type ZVCXI_P0S_PRTYP .
  data F_SUTYP type ZVCXI_P0S_SUTYP .
  data S_PCDIM_IN type ZVCXI_P0SP_S_PCDIM .
  data S_PRARE type ZVCXI_P0S_S_PRARE .
  data T_MS_INK type ZVCXI_P0SR_TT_MS_INK .
  data F_FPRFS type ZVCXI_P0SS_FPRFS .
  data T_MS_TOOL type ZVCXI_P0SR_TT_MS_TOOL .

  methods ADD_SPVRE_MC_INK
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_TOOL
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_PRINT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_INK
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PCDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_PRARE
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_TOOL
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_BL_PSTEP_PRINT definition
class ZCL_VCXI_P0SR_BL_PSTEP_PRINT implementation.
method ADD_ASPECTS_TO_RTE_PSTEP.

  data:          LS_RTE_SAREC  type        /VCXI/VSMR_S_RTE_SAREC,
                 LS_RTE_SAVAL  type        /VCXI/VSMR_S_RTE_SAVAL.
  data:          LF_NOCOL      type        I.
  field-symbols: <S_ARECN>     type        /VCXI/VSMR_S_RTE_RANGE_ARECN,
                 <S_AVVAL>     type        /VCXI/VSMR_S_RTE_RANGE_AVVAL.

***----------------------------------------------------------------------------
*** Get Super
  SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).


***----------------------------------------------------------------------------
*** Aspect - P0_AA_NOCOL
  try.
      clear LS_RTE_SAREC.
      LF_NOCOL = lines( ME->T_MS_INK ).
      move 1                                            to LS_RTE_SAREC-MAXSEL.
      move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
      append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
      move 'I'                    to <S_ARECN>-SIGN.
      move 'LE'                   to <S_ARECN>-OPTION.
      move LF_NOCOL               to <S_ARECN>-LOW.

      IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = C_IAATY_NOCOL
                                   II_ARECN  = LS_RTE_SAREC-I_ARECN
                                   IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                   IF_ASORT  = LS_RTE_SAREC-ASORT ).

    catch /VCXI/CX_CKX.
  endtry.

***----------------------------------------------------------------------------
*** Aspect - P0_AA_FULLSPRINT
  try.
      clear LS_RTE_SAVAL.
      append initial line         to LS_RTE_SAVAL-I_AVVAL assigning <S_AVVAL>.
      move 'I'                    to <S_AVVAL>-SIGN.
      move 'EQ'                   to <S_AVVAL>-OPTION.
      move ME->F_FPRFS            to <S_AVVAL>-LOW.

      IR_RTE_PSTEP->SET_RTE_SAVAL( IF_IAATY  = C_IAATY_FULLSPRINT
                                   II_AVVAL  = LS_RTE_SAVAL-I_AVVAL ).

    catch /VCXI/CX_CKX.
  endtry.

endmethod.
method ADD_LIMITS_TO_RTE_PSTEP.

  data:          LF_COLOR_NUM_TOTAL     type        I,
                 LF_COLOR_NUM_STANDARD  type        I,
                 LF_LDUOM               type        /VCXI/VSMC_LDUOM,
                 LF_LDVAL               type        /VCXI/VSMR_LDVAL.
  data:          LS_MS_INK              type        ZVCXI_P0SR_S_MS_INK.
  data:          LI_LVVAL               type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
  data:          LT_LTYPE               type        /VCXI/CKX_TT_OBJECT.
  data:          LR_LTYPE               type ref to /VCXI/CL_VSMC_LTYPE,
                 LR_OBJECT              type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_LVVAL>              type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

  SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
  loop at ME->T_MS_INK into LS_MS_INK.
    add 1 to LF_COLOR_NUM_TOTAL.
    if LS_MS_INK-VARNI ne ABAP_TRUE.
      add 1 to LF_COLOR_NUM_STANDARD.
    endif.
  endloop.

***----------------------------------------------------------------------------
*** Get all linked Limits
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

    clear: LF_LDVAL,
           LF_LDUOM,
           LI_LVVAL.

***----------------------------------------------------------------------------
    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Sheet Length (Inbound)
      when 'P0_LT_DI_SHTLEN'.
        move ME->S_PCDIM_IN-PCLEN     to LF_LDVAL.
        move ME->S_PCDIM_IN-PCLEN_UOM to LF_LDUOM.

***   Sheet Width (Inbound)
      when 'P0_LT_DI_SHTWID'.
        move ME->S_PCDIM_IN-PCWID     to LF_LDVAL.
        move ME->S_PCDIM_IN-PCWID_UOM to LF_LDUOM.

***   Print Type
      when 'P0_LT_VP_PRINT_TYPE'.
        append initial line to LI_LVVAL assigning <S_LVVAL>.
        move 'I'                        to <S_LVVAL>-SIGN.
        move 'EQ'                       to <S_LVVAL>-OPTION.
        move ME->F_PRTYP                to <S_LVVAL>-LOW.

***   Number of Colors (Total)
      when 'P0_LT_DP_COLOR_NUM_TOTAL'.
        move LF_COLOR_NUM_TOTAL to LF_LDVAL.
        move 'ST'               to LF_LDUOM.

***   Number of Standard Colors (not including varnish)
      when 'P0_LT_DP_COLOR_NUM_STANDARD'.
        move LF_COLOR_NUM_STANDARD to LF_LDVAL.
        move 'ST'                  to LF_LDUOM.

      when others.
        continue.
    endcase.


***----------------------------------------------------------------------------
*** Set
    case LR_LTYPE->F_MLTYP.
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
        IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                    IF_LDVAL = LF_LDVAL
                                    IF_LDUOM = LF_LDUOM ).
      when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
        IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                    II_LVVAL = LI_LVVAL ).
    endcase.
  endloop.

endmethod.
method ADD_SPVRE_MC_INK.

  data: LF_WERKS type        WERKS_D,
        LF_ARBPL type        ARBPL.
  data: LS_MS_INK type        ZVCXI_P0SR_S_MS_INK,
        LS_AVGCO  type        ZVCXI_XCS_S_AVGCO,
        LS_AVGCP  type        ZVCXI_XCS_S_AVGCP,
        LS_LEOKY  type        /VCXI/VKSR_S_LEOKY,
        LS_PARAM  type        /VCXI/VKSR_S_PARAM.
  data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
        LR_SPVRE_MC_INK type ref to /VCXI/CL_VKSR_SPVRE,
        LR_CUST_PRINT   type ref to ZCL_VCXI_P0SS_CUST_PRINT.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_INK'
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Get Printing Customizing
  move IR_ARBPL->F_ARBPL to LF_ARBPL.
  move IR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_WERKS.
  LR_CUST_PRINT = ZCL_VCXI_P0SS_CUST_PRINT=>GET_INSTANCE( IF_WERKS = LF_WERKS ).

***------------------------------------------------------------------------------------------------
  loop at ME->T_MS_INK into LS_MS_INK.

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MC_INK
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_MC_INK to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MC_INK->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    clear LS_LEOKY.
    move LS_MS_INK-MATNR                             to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
    LR_SPVRE_MC_INK->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Text
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_TEXT       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_INK-TEXT                              to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Coverage
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_COVRG      to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_INK-COVRG                             to LS_PARAM-ATFLV.
    move LS_MS_INK-COVRG_UOM                         to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Varnish Flag
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_VARNI      to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_INK-VARNI                             to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Read Average Consumption -> for no dummy
    if LS_MS_INK-DUMMY eq ABAP_FALSE.
      LR_CUST_PRINT->GET_AVGCO( exporting IF_MATNR = LS_MS_INK-MATNR
                                          IF_ARBPL = LF_ARBPL
                                          IF_SUTYP = ME->F_SUTYP
                                          IF_DATE  = ME->F_DATE
                                importing ES_AVGCO = LS_AVGCO
                                          ES_AVGCP = LS_AVGCP ).
    else.
      move-corresponding LS_MS_INK to: LS_AVGCO, LS_AVGCP.
    endif.

*** Set Average Consumption
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_AVGCO_W    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_AVGCO-AVGCO                              to LS_PARAM-ATFLV.
    move LS_AVGCO-AVGCO_UOM                          to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_AVGCP_A    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_AVGCP-AVGCP                              to LS_PARAM-ATFLV.
    move LS_AVGCP-AVGCP_UOM                          to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).


***------------------------------------------------------------------------------------------------
*** Set Purchase Flag
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_PURCH      to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move LS_MS_INK-PURCH                             to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

    check LS_MS_INK-PURCH ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.

***------------------------------------------------------------------------------------------------
*** Set Price
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_PRICE      to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_INK-PRICE                             to LS_PARAM-ATFLV.
    move LS_MS_INK-PRICE_CURR                        to LS_PARAM-CURKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Price Unit
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_PRICP_W     to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
    move LS_MS_INK-PRICP                              to LS_PARAM-ATFLV.
    move LS_MS_INK-PRICP_UOM                          to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Vendor
    clear LS_PARAM.
    move ZCL_VCXI_P0SP_PR_MC_INK=>C_PARID_LIFNR       to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
    move LS_MS_INK-LIFNR                              to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
    LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).


  endloop.

endmethod.
method ADD_SPVRE_MC_TOOL.

  data:  LS_MS_TOOL          type        ZVCXI_P0SR_S_MS_TOOL,
         LS_LEOKY            type        /VCXI/VKSR_S_LEOKY,
         LS_PARAM            type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE            type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_MC_TOOL    type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TOOL'
                                      IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

  loop at ME->T_MS_TOOL into LS_MS_TOOL.
***------------------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element
    create object LR_SPVRE_MC_TOOL
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_MC_TOOL to CT_SPVRE.

***   Set In Use
    LR_SPVRE_MC_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Material Number
    clear LS_LEOKY.
    move LS_MS_TOOL-MATNR                            to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
    LR_SPVRE_MC_TOOL->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Average Consumption
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCO_P   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move 1                                           to LS_PARAM-ATFLV.
    move 'ST'                                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCP_P   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move LS_MS_TOOL-LTITO                            to LS_PARAM-ATFLV.
    move LS_MS_TOOL-LTITO_UOM                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = LS_PARAM ).

  endloop.

endmethod.
method COMPARE.

  data:  LR_BL_PSTEP_PRINT type ref to ZCL_VCXI_P0SR_BL_PSTEP_PRINT.

*** Super Compare
  RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
  check RF_SIMILAR eq ABAP_TRUE.

  move IR_BL_PSTEP ?to LR_BL_PSTEP_PRINT.

***----------------------------------------------------------------------------
*** PC Dimensions
  if ME->S_PCDIM_IN eq LR_BL_PSTEP_PRINT->S_PCDIM_IN.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Printing Data
  if ME->F_PRSID eq LR_BL_PSTEP_PRINT->F_PRSID and
     ME->F_PRTYP eq LR_BL_PSTEP_PRINT->F_PRTYP and
     ME->F_SUTYP eq LR_BL_PSTEP_PRINT->F_SUTYP and
     ME->F_FPRFS eq LR_BL_PSTEP_PRINT->F_FPRFS and
     ME->S_PRARE eq LR_BL_PSTEP_PRINT->S_PRARE.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Inks
  if ME->T_MS_INK eq LR_BL_PSTEP_PRINT->T_MS_INK.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

*** Tool
  if ME->T_MS_TOOL eq LR_BL_PSTEP_PRINT->T_MS_TOOL.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                      IF_DATE    = IF_DATE
                      IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
  move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
  ME->INIT_OUTSO( ).

endmethod.
method COPY.

  data:  LR_BL_PSTEP_PRINT type ref to ZCL_VCXI_P0SR_BL_PSTEP_PRINT.

***----------------------------------------------------------------------------
*** Super Copy
  RR_BL_PSTEP = SUPER->COPY( ).
  move RR_BL_PSTEP ?to LR_BL_PSTEP_PRINT.

***----------------------------------------------------------------------------
*** PC Dimensions
  move ME->S_PCDIM_IN    to LR_BL_PSTEP_PRINT->S_PCDIM_IN.

***----------------------------------------------------------------------------
*** Printing Data
  move ME->F_PRSID       to LR_BL_PSTEP_PRINT->F_PRSID.
  move ME->F_PRTYP       to LR_BL_PSTEP_PRINT->F_PRTYP.
  move ME->F_SUTYP       to LR_BL_PSTEP_PRINT->F_SUTYP.
  move ME->F_FPRFS       to LR_BL_PSTEP_PRINT->F_FPRFS.
  move ME->S_PRARE       to LR_BL_PSTEP_PRINT->S_PRARE.

***----------------------------------------------------------------------------
*** Inks
  move ME->T_MS_INK      to LR_BL_PSTEP_PRINT->T_MS_INK.

*** Tool
  move ME->T_MS_TOOL     to LR_BL_PSTEP_PRINT->T_MS_TOOL.

endmethod.
method DESERIALIZE.

  data:  LF_XML   type STRING.

  check IF_XML is not initial.

*** Deserialize
  call transformation ID
       source xml IF_XML
       result SUPER_XML    = LF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN

              F_PRSID      = ME->F_PRSID
              F_PRTYP      = ME->F_PRTYP
              F_SUTYP      = ME->F_SUTYP
              F_FPRFS      = ME->F_FPRFS
              S_PRARE      = ME->S_PRARE

              T_MS_INK     = ME->T_MS_INK
              T_MS_TOOL    = ME->T_MS_TOOL.

*** Super Deserialize
  SUPER->DESERIALIZE( IF_XML = LF_XML ).

endmethod.
method FILL_SPVRE_ADDON.

  SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  case IR_SPVRE_ADDON->GET_ID( ).
    when 'P0_AT_PRINT'.
      ME->FILL_SPVRE_ADDON_PRINT( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                            IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                            IR_ARBPL       = IR_ARBPL
                                  changing  CT_SPVRE       = CT_SPVRE ).
  endcase.

endmethod.
method FILL_SPVRE_ADDON_PRINT.

  data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Set Print Side
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_PRINT=>C_PARID_PRSID to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->F_PRSID                                 to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Print Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_PRINT=>C_PARID_PRTYP to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->F_PRTYP                                 to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Print Type
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_PRINT=>C_PARID_SUTYP to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->F_SUTYP                                 to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Printable Area
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_PRINT=>C_PARID_PRARE to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PRARE-PRARE                           to LS_PARAM-ATFLV.
  move ME->S_PRARE-PRARE_UOM                       to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Set Full Area Print
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ADDON_PRINT=>C_PARID_FPRFS to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
  move ME->F_FPRFS                                 to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Ink
  ME->ADD_SPVRE_MC_INK( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                  IR_SPVRE_PARENT = IR_SPVRE_ADDON
                                  IR_ARBPL        = IR_ARBPL
                        changing  CT_SPVRE        = CT_SPVRE ).

*** Add Material Consumption for Tool
  ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = IR_SPVRE_ADDON
                         changing  CT_SPVRE        = CT_SPVRE ).

endmethod.
method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Don't overrule existing
  check CF_ID_GRP   is initial and
        CF_ID_ARBPL is initial.

***------------------------------------------------------------------
*** Standard
  move 'GRP_CONV' to CF_ID_GRP.
  move 'CONV'     to CF_ID_ARBPL.

*** If Outsourcing
  if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
    move 'GRP_CONV' to CF_ID_GRP.
    move 'OUTSO'    to CF_ID_ARBPL.
  endif.

endmethod.
method GET_SPVRE_ACTVY.

  data:  LS_PARAM        type        /VCXI/VKSR_S_PARAM.
  data:  LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE_ACTVY  type ref to /VCXI/CL_VKSR_SPVRE.

***----------------------------------------------------------------------------
*** Get Customizing Element for Activity Unitizing
  LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_PRINT'
                                      IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
  create object LR_SPVRE_ACTVY
    exporting
      IR_SPVCE  = LR_SPVCE
      IR_PARENT = IR_SPVRE_ARBPL.
  append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
  LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Set Printable Area
  clear LS_PARAM.
  move ZCL_VCXI_P0SP_PR_ACTVY_PRINT=>C_PARID_PRARE to LS_PARAM-PARID.
  move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
  move ME->S_PRARE-PRARE                           to LS_PARAM-ATFLV.
  move ME->S_PRARE-PRARE_UOM                       to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
  LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Ink
  ME->ADD_SPVRE_MC_INK( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                  IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                                  IR_ARBPL        = IR_ARBPL
                        changing  CT_SPVRE        = RT_SPVRE ).


***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Tool
  ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                   IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                         changing  CT_SPVRE        = RT_SPVRE ).

endmethod.
method INIT_BY_SPEC.

  data:  LR_GATE_PRINT      type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT        type ref to ZCL_VCXI_P0SS_PR_PRINT.

  SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                       IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions
  ME->INIT_BY_SPEC_PCDIM( IT_PRVDR = IT_PRVDR ).

*** Get Printable Area
  ME->INIT_BY_SPEC_PRARE( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get Printing Data
  loop at IT_PRVDR into LR_GATE_PRINT.
    try.
        move LR_GATE_PRINT->R_CLSPR ?to LR_PR_PRINT.
        if LR_PR_PRINT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_PRINT is bound.

  move LR_PR_PRINT->GET_PRSID( ) to ME->F_PRSID.
  move LR_PR_PRINT->GET_PRTYP( ) to ME->F_PRTYP.
  move LR_PR_PRINT->GET_SUTYP( ) to ME->F_SUTYP.
  move LR_PR_PRINT->GET_FPRFS( ) to ME->F_FPRFS.

***------------------------------------------------------------------------------------------------
*** Get Ink Data
  ME->INIT_BY_SPEC_INK( IR_GATE  = IR_GATE
                        IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get Tool Data
  ME->INIT_BY_SPEC_TOOL( IT_PRVDR = IT_PRVDR ).

endmethod.
method INIT_BY_SPEC_INK.

  data: LS_COVRG type        ZVCXI_P0S_S_COVRG,
        LS_AVGCO type        ZVCXI_XCS_S_AVGCO,
        LS_AVGCP type        ZVCXI_XCS_S_AVGCP.
  data: LT_GATE_MARK      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MS_INK type ref to ZCL_VCXI_P0SS_PR_MS_INK,
        LR_PR_PRINT  type ref to ZCL_VCXI_P0SS_PR_PRINT,
        LR_PR_MARK   type ref to ZCL_VCXI_P0SS_PR_MARK.
  field-symbols: <S_MS_INK>        type        ZVCXI_P0SR_S_MS_INK.

***--------------------------------------------------------------------------------------
*** Get Marking Gates
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MARK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MARK.
        continue.
    endtry.
    check LR_PR_MARK is bound.
    append LR_GATE to LT_GATE_MARK.
  endloop.

*** Get Printing Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PRINT.
        continue.
    endtry.
    check LR_PR_PRINT is bound.
    exit.
  endloop.
  check LR_PR_PRINT is bound.

***--------------------------------------------------------------------------------------
*** Get Ink Data
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_INK.
        continue.
    endtry.
    append initial line to ME->T_MS_INK assigning <S_MS_INK>.

    move LR_PR_MS_INK->GET_MATNR( ) to <S_MS_INK>-MATNR.
    move LR_PR_MS_INK->GET_TEXT( ) to <S_MS_INK>-TEXT.

*** Coverage (total)
    LS_COVRG = LR_PR_PRINT->GET_TOTAL_MS_INK_COVRG( IR_GATE_MS_INK = LR_GATE
                                                    IT_GATE_MARK   = LT_GATE_MARK ).
    move-corresponding LS_COVRG       to <S_MS_INK>.

*** Varnish Flag
    LR_PR_MS_INK->GET_VARNI( importing EF_VARNI = <S_MS_INK>-VARNI ).

*** Purchasing Info
    move LR_PR_MS_INK->GET_PURCH( )   to <S_MS_INK>-PURCH.
    move LR_PR_MS_INK->GET_LIFNR( )   to <S_MS_INK>-LIFNR.
    move LR_PR_MS_INK->GET_PRICE( )   to <S_MS_INK>-S_PRICE.
    move LR_PR_MS_INK->GET_PRICP( )   to <S_MS_INK>-S_PRICP.

    move LR_PR_MS_INK->IS_DUMMY( )    to <S_MS_INK>-DUMMY.

*** In Case of Dummy -> Save Average Consumption
    move LR_PR_MS_INK->GET_AVGCO( )   to LS_AVGCO.
    move LR_PR_MS_INK->GET_AVGCP( )   to LS_AVGCP.
    move-corresponding LS_AVGCO       to <S_MS_INK>.
    move-corresponding LS_AVGCP       to <S_MS_INK>.

  endloop.

endmethod.
method INIT_BY_SPEC_PCDIM.

  data:  LF_SHTDI          type        ZVCXI_P0SS_SHTDI.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PR_PRINT       type ref to ZCL_VCXI_P0SS_PR_PRINT.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

*** Get Printing Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        if LR_PR_PRINT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_PRINT is bound.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions
  ME->S_PCDIM_IN  = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NETWT ).

*** Get PC Type and Direction
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                            importing EF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR
                                                      EF_PCDOP = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).

  move LR_PR_PRINT->GET_SHTDI( ) to LF_SHTDI.
  if LF_SHTDI is not initial.
    move LF_SHTDI                               to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
    move ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDOP.
  endif.

  if ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR is initial.
    move ME->S_PCDIM_IN-PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.
  endif.

*** Set Direction
  ME->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR ).

endmethod.
method INIT_BY_SPEC_PRARE.

  data:  LS_PCDIM          type        ZVCXI_P0SP_S_PCDIM.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PR_PRINT       type ref to ZCL_VCXI_P0SS_PR_PRINT.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        if LR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_SHTDIM is bound.

*** Get Printing Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
        if LR_PR_PRINT is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_PRINT is bound.

***------------------------------------------------------------------------------------------------
*** Get Area for Full Surface Print
  if LR_PR_PRINT->GET_FPRFS( ) eq ABAP_TRUE.
*** Use Net Sheet Size with Trim
    LS_PCDIM = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NETWT ).
  else.
*** Use Net Sheet Size
    LS_PCDIM = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NET ).
  endif.

*** Calculate Printable Area
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                      IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                      IF_CALCV_2     = LS_PCDIM-PCWID
                                                      IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                            importing EF_CALCV       = ME->S_PRARE-PRARE
                                                      EF_CALCV_UOM   = ME->S_PRARE-PRARE_UOM ).

endmethod.
method INIT_BY_SPEC_TOOL.

  data:          LF_PRTON          type        ZVCXI_P0SS_PRTON,
                 LF_INKTN          type        ZVCXI_P0SS_INKTN.
  data:          LS_LTITO          type        ZVCXI_P0S_S_LTITO.
  data:          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_INK      type ref to ZCL_VCXI_P0SS_PR_MS_INK,
                 LR_PR_PRINT       type ref to ZCL_VCXI_P0SS_PR_PRINT.
  field-symbols: <S_MS_TOOL>       type        ZVCXI_P0SR_S_MS_TOOL.

***--------------------------------------------------------------------------------------
*** Get Printing Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PRINT.
        continue.
    endtry.
    check LR_PR_PRINT is bound.
    exit.
  endloop.
  check LR_PR_PRINT is bound.

*** Add Print Tool
  move LR_PR_PRINT->GET_PRTON( ) to LF_PRTON.
  if LF_PRTON is not initial.
    append initial line to ME->T_MS_TOOL assigning <S_MS_TOOL>.
    move LF_PRTON                   to <S_MS_TOOL>-MATNR.
    move LR_PR_PRINT->GET_LTITO( )  to LS_LTITO.
    move-corresponding LS_LTITO     to <S_MS_TOOL>.
  endif.


***--------------------------------------------------------------------------------------
*** Add Ink Tool
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_INK.
        continue.
    endtry.

    move LR_PR_MS_INK->GET_INKTN( ) to LF_INKTN.
    if LF_INKTN is not initial.
      append initial line to ME->T_MS_TOOL assigning <S_MS_TOOL>.
      move LF_INKTN to <S_MS_TOOL>-MATNR.
    endif.
  endloop.

endmethod.
method SERIALIZE.

*** Super Serialize
  RF_XML = SUPER->SERIALIZE( ).

*** Serialize
  call transformation ID
       source SUPER_XML    = RF_XML

              S_PCDIM_IN   = ME->S_PCDIM_IN

              F_PRSID      = ME->F_PRSID
              F_PRTYP      = ME->F_PRTYP
              F_SUTYP      = ME->F_SUTYP
              F_FPRFS      = ME->F_FPRFS
              S_PRARE      = ME->S_PRARE

              T_MS_INK     = ME->T_MS_INK
              T_MS_TOOL    = ME->T_MS_TOOL

       result xml RF_XML.

endmethod.
method SPLIT_FOR_RERUN.

  data:  LF_GLDIK                  type          /VCXI/VSMC_GLDIK,
         LF_GLTYP_TOTAL            type          /VCXI/VSMC_GLTYP,
         LF_GLTYP_STANDARD         type          /VCXI/VSMC_GLTYP,
         LF_LDMAX_TOTAL            type          /VCXI/VSMC_LDMAX,
         LF_LDMAX_STANDARD         type          /VCXI/VSMC_LDMAX,
         LF_COLOR_NUM_TOTAL        type          I,
         LF_COLOR_NUM_STANDARD     type          I,
         LF_INDEX                  type          I.
  data:  LS_LDIM                   type          /VCXI/VSMC_S_LDIM,
         LS_MS_INK                 type          ZVCXI_P0SR_S_MS_INK.
  data:  LT_ATYPE                  type          /VCXI/CKX_TT_OBJECT,
         LT_LTYPE                  type          /VCXI/CKX_TT_OBJECT,
         LT_GLDIK                  type table of /VCXI/VSMC_GLDIK.
  data:  LR_MGRPV_LIMIT            type ref to   /VCXI/CL_VSMC_MGRPV_LIMIT,
         LR_ATYPE                  type ref to   /VCXI/CL_VSMC_ATYPE,
         LR_LTYPE                  type ref to   /VCXI/CL_VSMC_LTYPE,
         LR_BL_PSTEP_PRINT_FIRST   type ref to   ZCL_VCXI_P0SR_BL_PSTEP_PRINT,
         LR_BL_PSTEP_PRINT_SECOND  type ref to   ZCL_VCXI_P0SR_BL_PSTEP_PRINT,
         LR_OBJECT                 type ref to   /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Get Limit Machine Group Version
  LR_MGRPV_LIMIT ?= IR_ARBPL->GET_MGRPV_BY_DATE( IF_DATE  = ME->F_DATE
                                                 IF_LCVAL = IF_LCVAL
                                                 IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).
  check LR_MGRPV_LIMIT is bound.

***--------------------------------------------------------------------------------------
*** Get GLDIK to check only the once that need to be checked...
  append LR_MGRPV_LIMIT->F_GLDIK to LT_GLDIK.
  move ME->R_PSTEP->/VCXI/IF_VSMC_LINK_ATYPE~GET_LINKED_ATYPE( ) to LT_ATYPE.
  loop at LT_ATYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_ATYPE.
    move LR_MGRPV_LIMIT->GET_GLDIK_BY_ATYPE( IR_ATYPE = LR_ATYPE ) to LF_GLDIK.
    append LF_GLDIK to LT_GLDIK.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Limits GUID
  LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
  loop at LT_LTYPE into LR_OBJECT.
    move LR_OBJECT ?to LR_LTYPE.

*** Only for Dimension Limits
    check LR_LTYPE->F_MLTYP eq /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.

    case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Number of Colors (Total)
      when 'P0_LT_DP_COLOR_NUM_TOTAL'.
        move LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GLTYP_TOTAL.

***   Number of Standard Colors (not including varnish)
      when 'P0_LT_DP_COLOR_NUM_STANDARD'.
        move LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GLTYP_STANDARD.

    endcase.
  endloop.

***--------------------------------------------------------------------------------------
*** Get allowed Value
  loop at LT_GLDIK into LF_GLDIK.
    loop at LR_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                   where GLDIK eq LF_GLDIK
                                    and ( GLTYP eq LF_GLTYP_TOTAL or
                                          GLTYP eq LF_GLTYP_STANDARD ).
      case LS_LDIM-GLTYP.
        when LF_GLTYP_TOTAL.
          move LS_LDIM-LDMAX to LF_LDMAX_TOTAL.
        when LF_GLTYP_STANDARD.
          move LS_LDIM-LDMAX to LF_LDMAX_STANDARD.
      endcase.
    endloop.
  endloop.

***--------------------------------------------------------------------------------------
*** Copy to First and find Splitting Point
  loop at ME->T_MS_INK into LS_MS_INK.
    add 1 to LF_COLOR_NUM_TOTAL.
    if LS_MS_INK-VARNI ne ABAP_TRUE.
      add 1 to LF_COLOR_NUM_STANDARD.
    endif.

    if ( LF_LDMAX_TOTAL        gt 0 and
         LF_COLOR_NUM_TOTAL    ge LF_LDMAX_TOTAL ) or
       ( LF_LDMAX_STANDARD     gt 0 and
         LF_COLOR_NUM_STANDARD ge LF_LDMAX_STANDARD ).
      move SY-TABIX to LF_INDEX.
      exit.
    endif.
  endloop.

  if LF_INDEX eq 0.
*** No Rerun
    append ME to RT_BL_PSTEP.
    exit.
  endif.

*** First Run
  add 1 to LF_INDEX.
  LR_BL_PSTEP_PRINT_FIRST  ?= ME->COPY( ).
  delete LR_BL_PSTEP_PRINT_FIRST->T_MS_INK from LF_INDEX.
  append LR_BL_PSTEP_PRINT_FIRST to RT_BL_PSTEP.

*** Second Run
  subtract 1 from LF_INDEX.
  if LF_INDEX ne 0.
*** Copy to Second and leave the rest of Colors
    LR_BL_PSTEP_PRINT_SECOND ?= ME->COPY( ).

    delete LR_BL_PSTEP_PRINT_SECOND->T_MS_INK to LF_INDEX.
    if LR_BL_PSTEP_PRINT_SECOND->T_MS_INK is not initial.
      append LR_BL_PSTEP_PRINT_SECOND to RT_BL_PSTEP.
    endif.
  endif.

endmethod.
method ZIF_VCXI_P0SR_PCDIR~SET_PCDIR.

  move IF_PCDIR to ME->ZIF_VCXI_P0SR_PCDIR~F_PCDIR.

*** Turn PC Dimension IN
  ME->S_PCDIM_IN  = ME->TURN_PCDIM( IS_PCDIM = ME->S_PCDIM_IN
                                    IF_PCDIR = IF_PCDIR ).

endmethod.
