
class ZCL_VCXI_P5SS_BL_FDMDL definition
  public
  inheriting from ZCL_VCXI_PXSS_BL_FDMDL
  create public .

public section.

  constants C_FDMDL_RLFG type ZVCXI_PXSS_FDMDL value 'RLFG' ##NO_TEXT.
  constants C_IFDMV_ROLL type ZVCXI_PXSS_IFDMV value 'P5_ROLL' ##NO_TEXT.
  constants C_IFDMV_SE_SLIT type ZVCXI_PXSS_IFDMV value 'P5_SE_SLIT' ##NO_TEXT.

  methods ADJ_CSTEP_SLIT
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IS_FDI_CSTEP_SLIT type ZVCXI_P5SS_S_FDI_CSTEP_SLIT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods GET_SRCIN
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods DET_IFDMV
    redefinition .
  methods GET_CLSUI
    redefinition .
  methods ADD_XFG
    redefinition .
protected section.

  methods GET_INIT_ROLL
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_SE_SLIT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .

  methods INIT_FDMDL
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SS_BL_FDMDL definition
class ZCL_VCXI_P5SS_BL_FDMDL implementation.
  method ADD_XFG.

    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


    check ME->F_IFDMV = C_IFDMV_SE_SLIT.

*** Search for Separation Step
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'SSTEP_SLIT' ] ).

***     Add new Finished Good
        append value #( IPARE = 'OUTPUT'   ISELF = 'RLFG' ) to <S_FASTD_XCOMP>-T_DATA.
      endif.
    endloop.

  endmethod.
  method ADJ_CSTEP_SLIT.

    data: LR_GATE_OUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


**** Ignore Fast Data Model "Procurement Detail"
*    check ME->F_FDMDL ne C_FDMDL_FCPRDTL.

***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

***------------------------------------------------------------------------------------------------
*** Get Component for Conversion
    check CT_FASTD_XCOMP is not initial.
    LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                                       IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
    check LR_GATE_XCOMP is bound.
    assign CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ] to <S_FASTD_XCOMP>.

*** Add/Remove Slitting Step
    if IS_FDI_CSTEP_SLIT-NOUTT is not initial.
      if not LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CSTEP_SLIT' ] ).
        append value #( IPARE = 'CONV'
                        ISELF = 'CSTEP_SLIT'
                        R_DATA = new ZVCXI_P5SS_S_FDI_CSTEP_SLIT( IS_FDI_CSTEP_SLIT )
                      ) to <S_FASTD_XCOMP>-T_DATA.
      endif.
    else.
      delete <S_FASTD_XCOMP>-T_DATA where ISELF = 'CSTEP_SLIT'.
    endif.

  endmethod.
  method DET_IFDMV.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Get Configuration Structure
    SUPER->DET_IFDMV( importing ET_FASTD_XCOMP = ET_FASTD_XCOMP ).
    check ME->T_GATE_OUT is not initial.

***------------------------------------------------------------------------------------------------
*** Identify Variant based on Fast Data Integration Information
    loop at ET_FASTD_XCOMP into LS_FASTD_XCOMP.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_SLIT' ] ).
        ME->F_IFDMV = C_IFDMV_SE_SLIT.
        exit.
      endif.
    endloop.

    if ME->F_IFDMV is initial and
       LINES( ME->T_GATE_OUT ) eq 1.
***   Fallback to Roll
      ME->F_IFDMV = C_IFDMV_ROLL.
    endif.

  endmethod.
  method GET_CLSUI.

    RF_CLSUI = 'ZCL_VCXI_P5SS_UI_FDMDL'.

  endmethod.
  method GET_INIT_ROLL.

***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P5'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_RLPROC'   ) "  R_DATA = new ZVCXI_P5SS_S_FDI_RLPROC( )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_PRINT' )
                                      ( IPARE = 'OUTPUT'  ISELF = 'RLFG'        ) "  R_DATA = new ZVCXI_P5SS_S_FDI_RLFG( )
                                    )
                  ) to CT_FASTD_XCOMP.

  endmethod.
  method GET_INIT_SE_SLIT.

***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P5'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'MS_RLPROC'   ) "  R_DATA = new ZVCXI_P5SS_S_FDI_RLPROC( )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_PRINT' )
                                      ( IPARE = 'OUTPUT'  ISELF = 'SSTEP_SLIT'  ) "  R_DATA = new ZVCXI_P5SS_S_FDI_SSTEP_SLIT( )
                                      ( IPARE = 'OUTPUT'  ISELF = 'RLFG'        ) "  R_DATA = new ZVCXI_P5SS_S_FDI_RLFG( )
                                      ( IPARE = 'OUTPUT'  ISELF = 'RLFG'        ) "  R_DATA = new ZVCXI_P5SS_S_FDI_RLFG( )
                                    )
                  ) to CT_FASTD_XCOMP.

  endmethod.
  method GET_SRCIN.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT    type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

*** Get excluded Gates
    LT_GATE_EXCLUDE = cond #( when IT_GATE_EXCLUDE is supplied then IT_GATE_EXCLUDE
                              else ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                                         IT_FASTD_XCOMP = IT_FASTD_XCOMP ) ).

    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

***   Search for Procurement
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                             ISELF = 'MS_RLPROC' ] ).
*        RF_SRCIN = C_SRCIN_PROC.   " Input Source - Procurement
        ER_GATE  = LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                          ISELF = 'MS_RLPROC' ]-R_GATE.
      endif.
    endloop.

  endmethod.
  method INIT_FDMDL.

*** Get initial Structure based on Model Variant
    case IF_IFDMV.
      when C_IFDMV_ROLL.
        ME->GET_INIT_ROLL( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                    CT_XCONG       = CT_XCONG ).
      when C_IFDMV_SE_SLIT.
        ME->GET_INIT_SE_SLIT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                       CT_XCONG       = CT_XCONG ).
    endcase.

  endmethod.
