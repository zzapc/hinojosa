
class ZCL_VCXI_XCDCU_PART_SCRGR definition
  public
  final
  create public .

public section.
  type-pools ABAP .
  type-pools ICON .

  data F_FREED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .

  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_STRIPDESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_SCRGR type ref to ZIF_VCXI_XCDC_REGDVC_SCRGR
    raising
      /VCXI/CX_CKX .
protected section.

  data F_ISCGR type ZVCXI_XCD_ISCGR .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_LEFT type ref to CL_GUI_CONTAINER .
  data R_CONTAINER_RIGHT type ref to CL_GUI_CONTAINER .
  data R_SCRGR type ref to ZIF_VCXI_XCDC_REGDVC_SCRGR .
  data R_SCRGRDEF_GRID type ref to CL_GUI_ALV_GRID .
  data R_SCRGR_GRID type ref to CL_GUI_ALV_GRID .
  data R_SPLITTER type ref to CL_GUI_SPLITTER_CONTAINER .
  data T_SCRGRDEF_FIELDCAT type LVC_T_FCAT .
  data T_SCRGRDEF_GRID type ZVCXI_XCDCU_TT_SCRGRDEF_GRID .
  data T_SCRGR_FIELDCAT type LVC_T_FCAT .
  data T_SCRGR_GRID type ZVCXI_XCDCU_TT_SCRGR_GRID .
  data F_SCRGRDEF_REFRESH_REQUESTED type ABAP_BOOL .
  data F_SCRGR_REFRESH_REQUESTED type ABAP_BOOL .

  methods HANDLE_SCRGR_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_SCRGR .
  methods INIT_T_SCRGRDEF_GRID .
  methods INIT_T_SCRGR_GRID .
  methods INIT_SCRGRDEF_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_SCRGR_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM
      !SENDER .
  methods HANDLE_SCRGR_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SCRGRDEF_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CONTEXT_MENU_REQUEST
    for event CONTEXT_MENU_REQUEST of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !SENDER .
  methods HANDLE_SCRGR_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SCRGR_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SCRGRDEF_ADD_SF
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SCRGRDEF_ADD_MULTI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SCRGRDEF_ADD
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_SCRGRDEF
    returning
      value(RS_SCRGRDEF) type ZVCXI_XCDC_S_REGDVC_SCRGRDEF
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_SCRGR
    returning
      value(RF_ISCGR) type ZVCXI_XCD_ISCGR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO
      !SENDER .
  methods REFRESH_SCRGRDEF_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_SCRGR_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT_SCRGR
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT_SCRGRDEF
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCDCU_PART_SCRGR definition
class ZCL_VCXI_XCDCU_PART_SCRGR implementation.
method BUILD_FIELDCAT_SCRGR .

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_SCRGR_GRID'
    changing
      CT_FIELDCAT            = ME->T_SCRGR_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method BUILD_FIELDCAT_SCRGRDEF .

  field-symbols:  <S_FIELDCAT> type LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_SCRGRDEF_GRID'
    changing
      CT_FIELDCAT            = ME->T_SCRGRDEF_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at ME->T_SCRGRDEF_FIELDCAT assigning <S_FIELDCAT>.
    case <S_FIELDCAT>-FIELDNAME.
      when 'ISCGR' or 'CSDEF'.
        move ABAP_TRUE to <S_FIELDCAT>-TECH.
    endcase.
  endloop.

endmethod.
method CONSTRUCTOR .

  move IR_SCRGR        to ME->R_SCRGR.
  move ABAP_TRUE       to ME->F_SCRGR_REFRESH_REQUESTED.

  set handler ME->HANDLE_SCRGR_CHANGED for ME->R_SCRGR.

  call function 'ZVCXI_XCDCU_UI_SET_PART_SCRGR'
    exporting
      IR_PART_SCRGR = ME.

endmethod.
method DO_FREE .

  move ABAP_TRUE to ME->F_FREED.

  if ME->R_SCRGR_GRID is bound.
    ME->R_SCRGR_GRID->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_SCRGR_GRID.
  endif.

  if ME->R_SCRGRDEF_GRID is bound.
    ME->R_SCRGRDEF_GRID->FREE( exceptions
                                 CNTL_ERROR        = 1
                                 CNTL_SYSTEM_ERROR = 2
                                 others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_SCRGRDEF_GRID.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

  set handler ME->HANDLE_SCRGR_CHANGED for ME->R_SCRGR activation ABAP_FALSE.

endmethod.
method DO_PBO .

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      ME->INIT_CONTAINER( ).

      ME->INIT_SCRGR_GRID( ).
      ME->REFRESH_SCRGR_GRID_CONTENT( ).

      ME->INIT_SCRGRDEF_GRID( ).
      ME->REFRESH_SCRGRDEF_GRID_CONTENT( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method DO_USER_COMMAND.
endmethod.
method GET_SELECTED_SCRGR .

  data:  LS_SCRGR_GRID type         ZVCXI_XCDCU_S_SCRGR_GRID,
         LS_INDEX      type         LVC_S_ROW.
  data:  LT_INDEX      type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_SCRGR_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_SCRGR_GRID into LS_SCRGR_GRID index LS_INDEX-INDEX.
    check SY-SUBRC eq 0.
    move LS_SCRGR_GRID-ISCGR to RF_ISCGR.
  endif.

endmethod.
method GET_SELECTED_SCRGRDEF .

  data:  LS_INDEX      type         LVC_S_ROW.
  data:  LT_INDEX      type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_SCRGRDEF_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_SCRGRDEF_GRID into RS_SCRGRDEF index LS_INDEX-INDEX.
  endif.

endmethod.
method GET_STRIPDESCR .

  data:  LF_COUNT  type STRING.

  describe table ME->R_SCRGR->T_REGDVC_SCRGR lines LF_COUNT.

  move 'Screen Groups (&)'(001) to RF_DESCR.
  replace '&' in RF_DESCR with LF_COUNT.

endmethod.
method HANDLE_CONTEXT_MENU_REQUEST .

  data:  LF_ISCGR       type        ZVCXI_XCD_ISCGR.
  data:  LS_SCRGRDEF    type        ZVCXI_XCDC_S_REGDVC_SCRGRDEF.
  data:  LR_MENU        type ref to CL_CTMENU,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.

      case SENDER.
***     Show Screen Group Context Menu
        when ME->R_SCRGR_GRID.
          LF_ISCGR = ME->GET_SELECTED_SCRGR( ).
          LR_MENU = ME->R_SCRGR->GET_ACTIONS_SCRGR( IF_ISCGR = LF_ISCGR ).

          E_OBJECT->CLEAR( ).

          if LR_MENU is bound.
            E_OBJECT->ADD_MENU( MENU = LR_MENU ).
          endif.

***     Show Screen Group Definition Context Menu
        when ME->R_SCRGRDEF_GRID.
          E_OBJECT->CLEAR( ).
          check ME->F_ISCGR is not initial.

          LS_SCRGRDEF = ME->GET_SELECTED_SCRGRDEF( ).
          LR_MENU = ME->R_SCRGR->GET_ACTIONS_SCRGRDEF( IS_REGDVC_SCRGRDEF = LS_SCRGRDEF ).

          if LR_MENU is bound.
            E_OBJECT->ADD_MENU( MENU = LR_MENU ).
          endif.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:  LR_CX_CKX            type ref to  /VCXI/CX_CKX.

  try.

      case SENDER.
        when ME->R_SCRGR_GRID.
          ME->F_ISCGR = ME->GET_SELECTED_SCRGR( ).
          move ABAP_TRUE to ME->F_SCRGRDEF_REFRESH_REQUESTED.
          CL_GUI_CFW=>SET_NEW_OK_CODE( 'REFRESH' ).

        when ME->R_SCRGRDEF_GRID.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_SCRGR_ADD .

  data: LF_RETURN           type                   ABAP_BOOL,
        LF_EXIT             type                   ABAP_BOOL.
  data: LT_SVAL             type standard table of SVAL.
  data: LS_SCRGR            type                   ZVCXI_XCDC_S_REGDVC_SCRGR.

  field-symbols: <S_FIELD>  type                   SVAL,
                 <F_FIELD>  type                   any.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_SCRGR'.
  <S_FIELD>-FIELDNAME = 'ISCGR'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_SCRGR'.
  <S_FIELD>-FIELDNAME = 'DESCR'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Screen Group'(A20)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.

      if <S_FIELD>-VALUE is not initial.
        case <S_FIELD>-FIELDNAME.
          when 'ISCGR'.
            assign LS_SCRGR-ISCGR to <F_FIELD>.
          when 'DESCR'.
            assign LS_SCRGR-DESCR to <F_FIELD>.
        endcase.


        check <F_FIELD> is assigned.
        move <S_FIELD>-VALUE to <F_FIELD>.
        unassign <F_FIELD>.

      endif.
    endloop.

    check LS_SCRGR-ISCGR is not initial and
          LS_SCRGR-DESCR is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Add Function
  ME->R_SCRGR->ADD( IS_REGDVC_SCRGR = LS_SCRGR ).

endmethod.
method HANDLE_SCRGR_CHANGE .

  data:          LF_RETURN      type                   ABAP_BOOL,
                 LF_EXIT        type                   ABAP_BOOL,
                 LF_ISCGR       type                   ZVCXI_XCD_ISCGR.
  data:          LT_SVAL        type standard table of SVAL.
  data:          LS_SCRGR       type                   ZVCXI_XCDC_S_REGDVC_SCRGR.
  field-symbols: <S_FIELD>      type                   SVAL,
                 <F_FIELD>      type                   any.


*** Get selected Data
  LF_ISCGR = ME->GET_SELECTED_SCRGR( ).
  check LF_ISCGR is not initial.
  read table ME->R_SCRGR->T_REGDVC_SCRGR into LS_SCRGR with key ISCGR = LF_ISCGR.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_SCRGR'.
  <S_FIELD>-FIELDNAME  = 'ISCGR'.
  <S_FIELD>-VALUE      = LS_SCRGR-ISCGR.
  <S_FIELD>-FIELD_ATTR = '02'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_SCRGR'.
  <S_FIELD>-FIELDNAME  = 'DESCR'.
  <S_FIELD>-VALUE      = LS_SCRGR-DESCR.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Change Screen Group'(A25)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.

      if <S_FIELD>-VALUE is not initial.
        case <S_FIELD>-FIELDNAME.
          when 'ISCGR'.
            assign LS_SCRGR-ISCGR to <F_FIELD>.
          when 'DESCR'.
            assign LS_SCRGR-DESCR to <F_FIELD>.
        endcase.


        check <F_FIELD> is assigned.
        move <S_FIELD>-VALUE to <F_FIELD>.
        unassign <F_FIELD>.

      endif.
    endloop.

    check LS_SCRGR-ISCGR is not initial and
          LS_SCRGR-DESCR is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Change Screen Group
  ME->R_SCRGR->CHANGE( IS_REGDVC_SCRGR = LS_SCRGR ).

endmethod.
method HANDLE_SCRGR_CHANGED .

  move ABAP_TRUE     to ME->F_SCRGR_REFRESH_REQUESTED.
  move ABAP_TRUE     to ME->F_SCRGRDEF_REFRESH_REQUESTED.

endmethod.
method HANDLE_SCRGR_DELETE .

  data: LF_ISCGR type ZVCXI_XCD_ISCGR.

  LF_ISCGR = ME->GET_SELECTED_SCRGR( ).
  ME->R_SCRGR->DELETE( IF_ISCGR = LF_ISCGR ).

  if ME->F_ISCGR = LF_ISCGR.
    clear: ME->F_ISCGR.
  endif.

endmethod.
method HANDLE_SCRGRDEF_ADD .

  data:          LF_RETURN      type          ABAP_BOOL,
                 LF_EXIT        type          ABAP_BOOL.
  data:          LS_SCRGRDEF    type          ZVCXI_XCDC_S_REGDVC_SCRGRDEF.
  data:          LT_SVAL        type table of SVAL,
                 LT_SCRGRDEF    type          ZVCXI_XCDC_TT_REGDVC_SCRGRDEF.
  field-symbols: <S_FIELD>      type          SVAL,
                 <F_FIELD>      type          any.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_SCRGRDEF'.
  <S_FIELD>-FIELDNAME = 'TSDEF'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_SCRGRDEF'.
  <S_FIELD>-FIELDNAME = 'ISDEF'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Screen Group Definition'(A21)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.

      if <S_FIELD>-VALUE is not initial.
        case <S_FIELD>-FIELDNAME.
          when 'TSDEF'.
            assign LS_SCRGRDEF-TSDEF to <F_FIELD>.
          when 'ISDEF'.
            assign LS_SCRGRDEF-ISDEF to <F_FIELD>.
        endcase.


        check <F_FIELD> is assigned.
        move <S_FIELD>-VALUE to <F_FIELD>.
        unassign <F_FIELD>.

      endif.
    endloop.

    check LS_SCRGRDEF-TSDEF is not initial and
          LS_SCRGRDEF-ISDEF is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  move ME->F_ISCGR to LS_SCRGRDEF-ISCGR.
  append LS_SCRGRDEF to LT_SCRGRDEF.

***--------------------------------------------------------------------------------------
*** Add Function
  ME->R_SCRGR->ADD_SCRGRDEF( IT_REGDVC_SCRGRDEF = LT_SCRGRDEF ).
  move ABAP_TRUE to ME->F_SCRGRDEF_REFRESH_REQUESTED.

endmethod.
method HANDLE_SCRGRDEF_ADD_MULTI .

  data:          LF_RETURN           type                   ABAP_BOOL,
                 LF_EXIT             type                   ABAP_BOOL,
                 LF_TABNAME          type                   TABNAME.
  data:          LS_STRUCT_FIELDS    type                   DD03P,
                 LS_RETURN           type                   DDSHRETVAL,
                 LS_SCRGRDEF         type                   ZVCXI_XCDC_S_REGDVC_SCRGRDEF,
                 LS_SCRGR_M_SHLP     type                   ZVCXI_XCDCU_S_SCRGR_M_SHLP.
  data:          LT_SVAL             type standard table of SVAL,
                 LT_STRUCT_FIELDS    type standard table of DD03P,
                 LT_RETURN           type standard table of DDSHRETVAL,
                 LT_SCRGRDEF         type                   ZVCXI_XCDC_TT_REGDVC_SCRGRDEF,
                 LT_SCRGR_M_SHLP     type standard table of ZVCXI_XCDCU_S_SCRGR_M_SHLP.
  field-symbols: <S_FIELD>           type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'DD03P'.
  <S_FIELD>-FIELDNAME = 'TABNAME'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Insert Screen Structure'(A24)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'TABNAME'.
          move <S_FIELD>-VALUE to LF_TABNAME.
      endcase.
    endloop.

*** Get all Structure Fields
    call function 'DDIF_TABL_GET'
      exporting
        NAME          = LF_TABNAME
        LANGU         = SY-LANGU
      tables
        DD03P_TAB     = LT_STRUCT_FIELDS
      exceptions
        ILLEGAL_INPUT = 1
        others        = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.


    delete LT_STRUCT_FIELDS where COMPTYPE eq 'S'.

    if LT_STRUCT_FIELDS is initial.
***   No Structure Fields available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_XCDCU'
                                            IF_MSGNO = '010' ).
    endif.

    exit.
  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

*** Get Valid Structure Fields
  loop at LT_STRUCT_FIELDS into LS_STRUCT_FIELDS.
    clear LS_SCRGR_M_SHLP.
    concatenate LS_STRUCT_FIELDS-TABNAME LS_STRUCT_FIELDS-FIELDNAME
                                 into LS_SCRGR_M_SHLP-ISDEF separated by '-'.
    move LS_STRUCT_FIELDS-DDTEXT to   LS_SCRGR_M_SHLP-DESCR.
    append LS_SCRGR_M_SHLP to LT_SCRGR_M_SHLP.
  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_SCRGR_M_SHLP'
      RETFIELD        = 'ISDEF'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_SCRGR_M_SHLP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.

    move ME->F_ISCGR         to LS_SCRGRDEF-ISCGR.
    move ZCL_VCXI_XCDC_REGDVC=>ZIF_VCXI_XCDC_REGDVC_SCRGR~C_TSDEF_SF
                             to LS_SCRGRDEF-TSDEF.
    move LS_RETURN-FIELDVAL  to LS_SCRGRDEF-ISDEF.
    append LS_SCRGRDEF       to LT_SCRGRDEF.

  endloop.

***--------------------------------------------------------------------------------------
*** Add Function
  ME->R_SCRGR->ADD_SCRGRDEF( IT_REGDVC_SCRGRDEF = LT_SCRGRDEF ).

endmethod.
method HANDLE_SCRGRDEF_ADD_SF .

  data:          LF_RETURN           type                   ABAP_BOOL,
                 LF_EXIT             type                   ABAP_BOOL,
                 LF_GROUP            type                   RS38L_AREA,
                 LF_PROGRAM          type                   PROGNAME,
                 LF_DYNNR            type                   DYNNR.
  data:          LS_SCREEN_FIELDS    type                   RPY_DYFATC,
                 LS_RETURN           type                   DDSHRETVAL,
                 LS_SCRGRDEF         type                   ZVCXI_XCDC_S_REGDVC_SCRGRDEF,
                 LS_SCRGR_SF_SHLP    type                   ZVCXI_XCDCU_S_SCRGR_SF_SHLP.
  data:          LT_SVAL             type standard table of SVAL,
                 LT_SCREEN_FIELDS    type                   DYFATC_TAB,
                 LT_RETURN           type standard table of DDSHRETVAL,
                 LT_SCRGRDEF         type                   ZVCXI_XCDC_TT_REGDVC_SCRGRDEF,
                 LT_SCRGR_SF_SHLP    type standard table of ZVCXI_XCDCU_S_SCRGR_SF_SHLP.
  field-symbols: <S_FIELD>           type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDCU_S_SCREEN_INFO_SHLP'.
  <S_FIELD>-FIELDNAME = 'GROUP'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDCU_S_SCREEN_INFO_SHLP'.
  <S_FIELD>-FIELDNAME = 'DYNNR'.
  <S_FIELD>-VALUE     = '0100'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Insert Screen Function Module'(A23)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'GROUP'.
          move <S_FIELD>-VALUE to LF_GROUP.
        when 'DYNNR'.
          move <S_FIELD>-VALUE to LF_DYNNR.
      endcase.
    endloop.

*** Check if Function Module has Main Programm
    call function 'FUNCTION_INCLUDE_CONCATENATE'
      changing
        PROGRAM                  = LF_PROGRAM
        GROUP                    = LF_GROUP
      exceptions
        NOT_ENOUGH_INPUT         = 1
        NO_FUNCTION_POOL         = 2
        DELIMITER_WRONG_POSITION = 3
        others                   = 4.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** If Programm is maintained and Screen Number -> go ahead
    check LF_PROGRAM is not initial and
          LF_DYNNR   is not initial.

*** Check if Main Programm has Screen and Fields to show
    call function 'RPY_DYNPRO_READ'
      exporting
        PROGNAME             = LF_PROGRAM
        DYNNR                = LF_DYNNR
      tables
        FIELDS_TO_CONTAINERS = LT_SCREEN_FIELDS
      exceptions
        CANCELLED            = 1
        NOT_FOUND            = 2
        PERMISSION_ERROR     = 3
        others               = 4.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    delete LT_SCREEN_FIELDS where TYPE eq 'TEXT'.

    if LT_SCREEN_FIELDS is initial.
***   No Screen Fields available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_XCDCU'
                                            IF_MSGNO = '001' ).
    endif.

    exit.
  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

** Get Valid Structure Fields
  loop at LT_SCREEN_FIELDS into LS_SCREEN_FIELDS.
    clear LS_SCRGR_SF_SHLP.
    move LS_SCREEN_FIELDS-TYPE to LS_SCRGR_SF_SHLP-STYPE.
    move LS_SCREEN_FIELDS-NAME to LS_SCRGR_SF_SHLP-SNAME.
    append LS_SCRGR_SF_SHLP to LT_SCRGR_SF_SHLP.
  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE  = 'ZVCXI_XCDCU_S_SCRGR_SF_SHLP'
      RETFIELD        = 'SNAME'
      VALUE_ORG       = 'S'
      MULTIPLE_CHOICE = 'X'
    tables
      VALUE_TAB       = LT_SCRGR_SF_SHLP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.

    move ME->F_ISCGR         to LS_SCRGRDEF-ISCGR.
    move ZCL_VCXI_XCDC_REGDVC=>ZIF_VCXI_XCDC_REGDVC_SCRGR~C_TSDEF_SF
                             to LS_SCRGRDEF-TSDEF.
    move LS_RETURN-FIELDVAL  to LS_SCRGRDEF-ISDEF.
    append LS_SCRGRDEF       to LT_SCRGRDEF.

  endloop.

***--------------------------------------------------------------------------------------
*** Add Function
  ME->R_SCRGR->ADD_SCRGRDEF( IT_REGDVC_SCRGRDEF = LT_SCRGRDEF ).

endmethod.
method HANDLE_SCRGRDEF_DELETE .

  data: LS_SCRGRDEF type ZVCXI_XCDC_S_REGDVC_SCRGRDEF.

  LS_SCRGRDEF = ME->GET_SELECTED_SCRGRDEF( ).
  ME->R_SCRGR->DELETE_SCRGRDEF( IS_REGDVC_SCRGRDEF = LS_SCRGRDEF ).

endmethod.
method HANDLE_USER_COMMAND .

  data:  LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      case SENDER.
        when ME->R_SCRGR_GRID.
          case E_UCOMM.
            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD.
              ME->HANDLE_SCRGR_ADD( ).

            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_DEL.
              ME->HANDLE_SCRGR_DELETE( ).

            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_CHANGE.
              ME->HANDLE_SCRGR_CHANGE( ).

          endcase.

        when ME->R_SCRGRDEF_GRID.
          case E_UCOMM.
            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF.
              ME->HANDLE_SCRGRDEF_ADD( ).

            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF_MULTI.
              ME->HANDLE_SCRGRDEF_ADD_MULTI( ).

            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_ADD_DEF_SF.
              ME->HANDLE_SCRGRDEF_ADD_SF( ).

            when ZIF_VCXI_XCDC_REGDVC_SCRGR=>C_FCODE_DEL_DEF.
              ME->HANDLE_SCRGRDEF_DELETE( ).

          endcase.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
  endtry.

endmethod.
method INIT_CONTAINER .

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = '0210CC_SCRGR'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

    if ME->R_SPLITTER is not bound.
      create object ME->R_SPLITTER
        exporting
          PARENT            = ME->R_CONTAINER
          ROWS              = 1
          COLUMNS           = 2
        exceptions
          CNTL_ERROR        = 1
          CNTL_SYSTEM_ERROR = 2
          others            = 3.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

    if ME->R_CONTAINER_LEFT is not bound.
      ME->R_CONTAINER_LEFT  = ME->R_SPLITTER->GET_CONTAINER( ROW    = 1
                                                             COLUMN = 1 ).
    endif.

    if ME->R_CONTAINER_RIGHT is not bound.
      ME->R_CONTAINER_RIGHT = ME->R_SPLITTER->GET_CONTAINER( ROW    = 1
                                                             COLUMN = 2 ).
    endif.


*** Make it not movable
    ME->R_SPLITTER->SET_COLUMN_SASH(
      exporting
        ID                = 1
        TYPE              = CL_GUI_SPLITTER_CONTAINER=>TYPE_MOVABLE
        VALUE             = CL_GUI_SPLITTER_CONTAINER=>FALSE
      exceptions
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

endmethod.
method INIT_SCRGR_GRID .

  if ME->R_SCRGR_GRID is not bound.
    create object ME->R_SCRGR_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER_LEFT
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_SCRGR_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_SCRGR_GRID.
    set handler ME->HANDLE_DOUBLE_CLICK         for ME->R_SCRGR_GRID.

    ME->BUILD_FIELDCAT_SCRGR( ).

  endif.

endmethod.
method INIT_SCRGRDEF_GRID .

  if ME->R_SCRGRDEF_GRID is not bound.
    create object ME->R_SCRGRDEF_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER_RIGHT
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_SCRGRDEF_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_SCRGRDEF_GRID.

    ME->BUILD_FIELDCAT_SCRGRDEF( ).

  endif.

endmethod.
method INIT_T_SCRGR_GRID .

  data:           LS_SCRGR       type ZVCXI_XCDC_S_REGDVC_SCRGR.
  field-symbols:  <S_SCRGR_GRID> type ZVCXI_XCDCU_S_SCRGR_GRID.

  free: ME->T_SCRGR_GRID.

  loop at ME->R_SCRGR->T_REGDVC_SCRGR into LS_SCRGR.
    append initial line to ME->T_SCRGR_GRID assigning <S_SCRGR_GRID>.
    move-corresponding LS_SCRGR to <S_SCRGR_GRID>.
  endloop.

endmethod.
method INIT_T_SCRGRDEF_GRID .

  data:           LS_SCRGRDEF       type ZVCXI_XCDC_S_REGDVC_SCRGRDEF.
  field-symbols:  <S_SCRGRDEF_GRID> type ZVCXI_XCDCU_S_SCRGRDEF_GRID.

  free: ME->T_SCRGRDEF_GRID.

  loop at ME->R_SCRGR->T_REGDVC_SCRGRDEF into LS_SCRGRDEF
                                        where ISCGR eq ME->F_ISCGR.
    append initial line to ME->T_SCRGRDEF_GRID assigning <S_SCRGRDEF_GRID>.
    move-corresponding LS_SCRGRDEF to <S_SCRGRDEF_GRID>.
  endloop.

endmethod.
method REFRESH_SCRGR_GRID_CONTENT .

  data:   LS_LAYOUT            type LVC_S_LAYO.
  data:   LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  check ME->F_SCRGR_REFRESH_REQUESTED eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_SCRGR_REFRESH_REQUESTED.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_SCRGR_GRID( ).

  move 'X' to LS_LAYOUT-NO_TOOLBAR.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

  ME->R_SCRGR_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                   IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                                   IS_LAYOUT                     = LS_LAYOUT
                                                 changing
                                                   IT_FIELDCATALOG               = ME->T_SCRGR_FIELDCAT
                                                   IT_OUTTAB                     = ME->T_SCRGR_GRID
                                                 exceptions
                                                   INVALID_PARAMETER_COMBINATION = 1
                                                   PROGRAM_ERROR                 = 2
                                                   TOO_MANY_LINES                = 3
                                                   others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_SCRGRDEF_GRID_CONTENT .

  data:   LF_WIDTH             type I.
  data:   LS_LAYOUT            type LVC_S_LAYO.
  data:   LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_SCRGRDEF_GRID( ).

  if ME->F_SCRGRDEF_REFRESH_REQUESTED eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_SCRGRDEF_REFRESH_REQUESTED.

    move 'X'         to LS_LAYOUT-NO_TOOLBAR.
    move 'X'         to LS_LAYOUT-CWIDTH_OPT.
    move ME->F_ISCGR to LS_LAYOUT-GRID_TITLE.

    ME->R_SCRGRDEF_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                                        IS_LAYOUT                     = LS_LAYOUT
                                                      changing
                                                        IT_FIELDCATALOG               = ME->T_SCRGRDEF_FIELDCAT
                                                        IT_OUTTAB                     = ME->T_SCRGRDEF_GRID
                                                      exceptions
                                                        INVALID_PARAMETER_COMBINATION = 1
                                                        PROGRAM_ERROR                 = 2
                                                        TOO_MANY_LINES                = 3
                                                        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endif.

*** Change Container Settings
  if ME->F_ISCGR is initial.
    clear LF_WIDTH.
  else.
*** Default Width
    move 50 to LF_WIDTH.
  endif.

  ME->R_SPLITTER->SET_COLUMN_WIDTH(
    exporting
      ID                = 2
      WIDTH             = LF_WIDTH
    exceptions
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      others            = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
