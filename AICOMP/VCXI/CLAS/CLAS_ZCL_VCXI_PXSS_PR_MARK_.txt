
class ZCL_VCXI_PXSS_PR_MARK definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_PX_MARK type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MARK' ##NO_TEXT.
  constants C_PARID_ACONO type /VCXI/VKS_PARID value 'ZVCXI_P0_ACONO' ##NO_TEXT.
  constants C_PARID_COVRG type /VCXI/VKS_PARID value 'ZVCXI_P0_COVRG' ##NO_TEXT.
  constants C_PARID_MARKP type /VCXI/VKS_PARID value 'ZVCXI_PX_MARKP' ##NO_TEXT.
  constants C_PARID_NUMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_NUMPR' ##NO_TEXT.

  methods GET_ACONO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_ACONO) type ZVCXI_P0SS_ACONO
    raising
      /VCXI/CX_CKX .
  methods GET_COVRG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COVRG) type ZVCXI_P0S_S_COVRG
    raising
      /VCXI/CX_CKX .
  methods GET_MARKP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_MARKP) type ZVCXI_PXS_MARKP
    raising
      /VCXI/CX_CKX .
  methods GET_NUMPR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NUMPR) type ZVCXI_P0SS_NUMPR
    raising
      /VCXI/CX_CKX .
  methods GET_TMARK
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_TMARK) type ZVCXI_PXS_TMARK
    raising
      /VCXI/CX_CKX .
  methods SET_ACONO
    importing
      !IF_ACONO type ZVCXI_P0SS_ACONO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COVRG
    importing
      !IS_COVRG type ZVCXI_P0S_S_COVRG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MARKP
    importing
      !IF_MARKP type ZVCXI_PXS_MARKP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NUMPR
    importing
      !IF_NUMPR type ZVCXI_P0SS_NUMPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TMARK
    importing
      !IF_TMARK type ZVCXI_PXS_TMARK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_O_ACONO_CHANGED type /VCXI/VKSC_IEVNT value 'ACONO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COVRG_CHANGED type /VCXI/VKSC_IEVNT value 'COVRG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MARKP_CHANGED type /VCXI/VKSC_IEVNT value 'MARKP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NUMPR_CHANGED type /VCXI/VKSC_IEVNT value 'NUMPR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TMARK_CHANGED type /VCXI/VKSC_IEVNT value 'TMARK_CHANGED' ##NO_TEXT.

  methods CHECK_ACONO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MARKP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TMARK
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRINT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PRINT) type ref to ZIF_VCXI_PXSS_PRINT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MARK definition
class ZCL_VCXI_PXSS_PR_MARK implementation.
  method CHECK_ACONO.

    data: LF_ACONO type ZVCXI_P0SS_ACONO.
    data: LR_PRINT type ref to ZIF_VCXI_PXSS_PRINT.


*** Get Assigned Color Number
    LF_ACONO = ME->GET_ACONO( ).

*** Check Assigned Color Number
    if LF_ACONO is not initial.
      LR_PRINT = ME->GET_PRVDR_PRINT( ).
      if LR_PRINT is bound and
         LR_PRINT->GET_NOCOL( ) ge LF_ACONO.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Assigned Color Number is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '256' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Assigned Color Number is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '257' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Assigned Color Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '258' ).
      endif.
    endif.

  endmethod.
  method CHECK_COVRG.

    data: LS_COVRG type ZVCXI_P0S_S_COVRG.


*** Get Coverage
    LS_COVRG = ME->GET_COVRG( ).

*** Check Coverage
    if LS_COVRG-COVRG gt 0 and
       LS_COVRG-COVRG le 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Coverage is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '201' ).
      endif.

    elseif LS_COVRG-COVRG gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is greater than 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '202' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Coverage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '203' ).
      endif.

    endif.

  endmethod.
  method CHECK_MARKP.

*** Check Marking Position
    if ME->GET_MARKP( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Marking Position is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '254' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Marking Position is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '255' ).
      endif.
    endif.

  endmethod.
  method CHECK_TMARK.

*** Check Marking Type
    if ME->GET_TMARK( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Marking Type is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '251' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Marking Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '253' ).
      endif.
    endif.

  endmethod.
  method GET_ACONO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACONO ).
    move LS_PARAM-ATFLV to RF_ACONO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COVRG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).
    move LS_PARAM-ATFLV to RS_COVRG-COVRG.
    move LS_PARAM-UNIT  to RS_COVRG-COVRG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MARKP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MARKP ).
    move LS_PARAM-ATWRT to RF_MARKP.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_MARKP is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_MARKP_DESCR( IF_MARKP = RF_MARKP ).
    endif.

  endmethod.
  method GET_NUMPR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NUMPR ).
    move LS_PARAM-ATWRT to RF_NUMPR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_PRINT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PRINT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Printing
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_PRINT=>C_IPRVT_PX_PRINT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PRINT.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Marking Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TMARK( ) ).

*** Check Marking Position
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MARKP( ) ).

*** Check Assigned Color Nr
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ACONO( ) ).

*** Check Coverage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COVRG( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Marking Type
    ME->CHECK_TMARK( IR_MESSAGE = IR_MESSAGE ).

*** Check Marking Position
    ME->CHECK_MARKP( IR_MESSAGE = IR_MESSAGE ).

*** Check Assigned Color Nr
    ME->CHECK_ACONO( IR_MESSAGE = IR_MESSAGE ).

*** Check Coverage
    ME->CHECK_COVRG( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TMARK.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

***----------------------------------------------------------------------------
*** Get Leading Object
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to RF_TMARK.
    move LS_LEOKY-SETBY to EF_SETBY.

    check RF_TMARK is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PXSS_CUST_PRINT=>GET_TMARK_DESCR( IF_TMARK = RF_TMARK ).
    endif.

  endmethod.
method SET_ACONO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACONO ).

  move IF_ACONO to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ACONO_CHANGED ).
  endif.

endmethod.
method SET_COVRG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).

  move IS_COVRG-COVRG     to LS_PARAM-ATFLV.
  move IS_COVRG-COVRG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COVRG_CHANGED ).
  endif.

endmethod.
method SET_MARKP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MARKP ).

  move IF_MARKP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MARKP_CHANGED ).
  endif.

endmethod.
method SET_NUMPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NUMPR ).

  move IF_NUMPR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NUMPR_CHANGED ).
  endif.

endmethod.
method SET_TMARK.

  data:  LF_CHANGED type  ABAP_BOOL.
  data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.

  move IF_TMARK to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED =  ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TMARK_CHANGED ).
  endif.

endmethod.
