
class ZCL_VCXI_P0SS_UI_AREA_WGT_MCH definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_AREA_WGT_MCH_VIS type ZVCXI_P0SS_S_AREA_WGT_MCH_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_AREA_WGT_MCH_VIS
    importing
      !IS_AREA_WGT_MCH_VIS type ZVCXI_P0SS_S_AREA_WGT_MCH_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_AREA_WGT_MCH type ref to ZCL_VCXI_P0SS_PR_AREA_WGT_MCH .
  data F_CURSOR type SCRFNAME .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_UI_AREA_WGT_MCH definition
class ZCL_VCXI_P0SS_UI_AREA_WGT_MCH implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_P0SS_UI_AREAWGT_MCH_BIND'
    exporting
      IR_UI_AREA_WGT_MCH = ME
    importing
      ES_DYNP            = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_AREA_WGT_MCH.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE .
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_AREA_WGT_MCH_VIS.

  data:  LS_ABLAN    type ZVCXI_P0SS_S_ABLAN,
         LS_ABLAG    type ZVCXI_P0SS_S_ABLAG,
         LS_WNEPP    type ZVCXI_P0SS_S_WNEPP,
         LS_WGRPP    type ZVCXI_P0SS_S_WGRPP.

***--------------------------------------------------------------------------------------
*** Set Net Blank Area
  if ME->S_AREA_WGT_MCH_VIS-ABLAN ne IS_AREA_WGT_MCH_VIS-ABLAN.
    move-corresponding IS_AREA_WGT_MCH_VIS to LS_ABLAN.
    ME->R_PR_AREA_WGT_MCH->SET_ABLAN( IS_ABLAN = LS_ABLAN
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Gross Blank Area
  if ME->S_AREA_WGT_MCH_VIS-ABLAG ne IS_AREA_WGT_MCH_VIS-ABLAG.
    move-corresponding IS_AREA_WGT_MCH_VIS to LS_ABLAG.
    ME->R_PR_AREA_WGT_MCH->SET_ABLAG( IS_ABLAG = LS_ABLAG
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

***--------------------------------------------------------------------------------------
*** Set Net Weight per Piece
  if ME->S_AREA_WGT_MCH_VIS-WNEPP ne IS_AREA_WGT_MCH_VIS-WNEPP.
    move-corresponding IS_AREA_WGT_MCH_VIS to LS_WNEPP.
    ME->R_PR_AREA_WGT_MCH->SET_WNEPP( IS_WNEPP = LS_WNEPP
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Gross Weight per Piece
  if ME->S_AREA_WGT_MCH_VIS-WGRPP ne IS_AREA_WGT_MCH_VIS-WGRPP.
    move-corresponding IS_AREA_WGT_MCH_VIS to LS_WGRPP.
    ME->R_PR_AREA_WGT_MCH->SET_WGRPP( IS_WGRPP = LS_WGRPP
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_AREA_WGT_MCH.

endmethod.
method INIT_VIS.

  data:  LS_ABLAG    type ZVCXI_P0SS_S_ABLAG,
         LS_ABLAN    type ZVCXI_P0SS_S_ABLAN,
         LS_AREAO    type ZVCXI_P0SS_S_AREAO,
         LS_WNEPP    type ZVCXI_P0SS_S_WNEPP,
         LS_WNEPO    type ZVCXI_P0SS_S_WNEPO,
         LS_WGRPP    type ZVCXI_P0SS_S_WGRPP,
         LS_WGRPO    type ZVCXI_P0SS_S_WGRPO.

  free: ME->S_AREA_WGT_MCH_VIS.

***--------------------------------------------------------------------------------------
*** Get Gross Area
  move ME->R_PR_AREA_WGT_MCH->GET_ABLAG( )   to LS_ABLAG.
  move-corresponding LS_ABLAG                to ME->S_AREA_WGT_MCH_VIS.

*** Get Net Area
  move ME->R_PR_AREA_WGT_MCH->GET_ABLAN( )   to LS_ABLAN.
  move-corresponding LS_ABLAN                to ME->S_AREA_WGT_MCH_VIS.

*** Get Area per Order
  move ME->R_PR_AREA_WGT_MCH->GET_AREAO( )   to LS_AREAO.
  move-corresponding LS_AREAO                to ME->S_AREA_WGT_MCH_VIS.

***--------------------------------------------------------------------------------------
*** Get Net Weight per Piece
  move ME->R_PR_AREA_WGT_MCH->GET_WNEPP( )   to LS_WNEPP.
  move-corresponding LS_WNEPP                to ME->S_AREA_WGT_MCH_VIS.

*** Get Net Weight per Order
  move ME->R_PR_AREA_WGT_MCH->GET_WNEPO( )   to LS_WNEPO.
  move-corresponding LS_WNEPO                to ME->S_AREA_WGT_MCH_VIS.

*** Get Gross Weight per Piece
  move ME->R_PR_AREA_WGT_MCH->GET_WGRPP( )   to LS_WGRPP.
  move-corresponding LS_WGRPP                to ME->S_AREA_WGT_MCH_VIS.

*** Get Gross Weight per Piece
  move ME->R_PR_AREA_WGT_MCH->GET_WGRPO( )   to LS_WGRPO.
  move-corresponding LS_WGRPO                to ME->S_AREA_WGT_MCH_VIS.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
