
class ZCL_VCXI_FFSS_CUST_PRINT definition
  public
  create protected .

public section.

  constants C_PRTEC_ANALOG type ZVCXI_FFS_PRTEC value 'A' ##NO_TEXT.
  constants C_PRTEC_DIGITAL type ZVCXI_FFS_PRTEC value 'D' ##NO_TEXT.
  data F_WERKS type WERKS_D read-only .

  methods GET_APDIM
    returning
      value(RF_APDIM) type ZVCXI_FFS_APDIM
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_DESCR
    importing
      !IF_COLCO type ZVCXI_FFS_COLCO
    returning
      value(RF_COLCO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_MATNR
    importing
      !IF_COLCO type ZVCXI_FFS_COLCO
      !IF_TPRIN type ZVCXI_FFS_TPRIN
      !IF_DCONF type /VCXI/VKCR_DCONF
    exporting
      !EF_MATNR type MATNR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_COLCO_TINK
    importing
      !IF_COLCO type ZVCXI_FFS_COLCO
    returning
      value(RF_TINK) type ZVCXI_FFS_TINK
    raising
      /VCXI/CX_CKX .
  methods GET_DEFAULT_INK
    importing
      !IF_TPRIN type ZVCXI_FFS_TPRIN
      !IF_TINK type ZVCXI_FFS_TINK
      !IF_NOCOL type ZVCXI_FFS_NOCOL optional
      !IF_PRCAT type ZVCXI_FFS_PRCAT optional
    exporting
      !EF_MATNR type MATNR
      !EF_INKSI type ZVCXI_FFS_INKSI
      !ES_COVRG type ZVCXI_FFS_S_COVRG
      !EF_ANITN type ZVCXI_FFS_ANITN
      !ES_APWGT type ZVCXI_FFS_S_APWGT
      !ES_APVOL type ZVCXI_FFS_S_APVOL .
  class-methods GET_INSTANCE
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_PRINT
    raising
      /VCXI/CX_CKX .
  class-methods GET_TINK_DESCR
    importing
      !IF_TINK type ZVCXI_FFS_TINK
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TINK_PRTEC
    importing
      !IF_TINK type ZVCXI_FFS_TINK
    returning
      value(RF_PRTEC) type ZVCXI_FFS_PRTEC
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_DESCR
    importing
      !IF_TPRIN type ZVCXI_FFS_TPRIN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_FAPCA
    importing
      !IF_TPRIN type ZVCXI_FFS_TPRIN
    returning
      value(RF_FAPCA) type ZVCXI_FFS_FAPCA
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_PRTEC
    importing
      !IF_TPRIN type ZVCXI_FFS_TPRIN
    returning
      value(RF_PRTEC) type ZVCXI_FFS_PRTEC
    raising
      /VCXI/CX_CKX .
  class-methods GET_TPRIN_TINK
    importing
      !IF_TPRIN type ZVCXI_FFS_TPRIN
    returning
      value(RT_TINK_INFO) type ZVCXI_FFSS_TT_TINK_INFO
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      WERKS      type        WERKS_D,
      R_INSTANCE type ref to ZCL_VCXI_FFSS_CUST_PRINT,
    end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .
  types:
    YT_TC240 type standard table of ZVCXI_FFS_TC240 with default key .
  types:
    YT_TD240 type standard table of ZVCXI_FFS_TD240 with default key .
  types:
    YT_TD241 type standard table of ZVCXI_FFS_TD241 with default key .
  types:
    YT_TD250 type standard table of ZVCXI_FFS_TD250 with default key .
  types:
    YT_TD251 type standard table of ZVCXI_FFS_TD251 with default key .
  types:
    YT_TD250T type standard table of ZVCXI_FFS_TD250T with default key .

  class-data T_INSTANCE type YT_INSTANCE .
  class-data:
    T_TC210 type sorted table of ZVCXI_FFS_TC210 with unique key TPRIN .
  data T_TC240 type YT_TC240 .
  data T_TD240 type YT_TD240 .
  data T_TD241 type YT_TD241 .
  data T_TD250 type YT_TD250 .
  data T_TD250T type YT_TD250T .
  data T_TD251 type YT_TD251 .

  methods CONSTRUCTOR
    importing
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
private section.

  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_FFSS_CUST_PRINT definition
class ZCL_VCXI_FFSS_CUST_PRINT implementation.
  method CONSTRUCTOR.

    field-symbols: <S_INSTANCE> type YS_INSTANCE.

***---------------------------------------------------------------------------------
*** Set Plant
    move IF_WERKS to ME->F_WERKS.

*** Load from Database
    ME->LOAD_FROM_DB( ).

***---------------------------------------------------------------------------------
*** Add to Instance Buffer
    append initial line to T_INSTANCE assigning <S_INSTANCE>.
    move ME->F_WERKS to <S_INSTANCE>-WERKS.
    move ME          to <S_INSTANCE>-R_INSTANCE.

  endmethod.
  method GET_APDIM.

*** Calculate Application by Volume
    RF_APDIM = ZCL_VCXI_FFSS_PR_MS_DINK=>C_APDIM_VOLUME.

  endmethod.
  method GET_COLCO_DESCR.

    data: LS_TD250T type ZVCXI_FFS_TD250T.

    read table ME->T_TD250T into LS_TD250T with key COLCO = IF_COLCO.

    check SY-SUBRC is initial.
    move LS_TD250T-DESCR to RF_COLCO_DESCR.

  endmethod.
  method GET_COLCO_MATNR.

    data: LS_TD251 type ZVCXI_FFS_TD251.
    data: LT_TD251 type table of  ZVCXI_FFS_TD251.

***------------------------------------------------------------------
*** Find with Data based on Print Type
    LT_TD251 = ME->T_TD251.
    delete LT_TD251 where COLCO ne IF_COLCO
                     or   TPRIN ne IF_TPRIN
                     or   VALFR gt IF_DCONF.
    if LT_TD251 is initial.
***   Find with Data with no Print Type
      LT_TD251 = ME->T_TD251.
      delete LT_TD251 where COLCO ne IF_COLCO
                       or   TPRIN ne SPACE
                       or   VALFR gt IF_DCONF.
    endif.

***------------------------------------------------------------------
*** Get latest entry
    sort LT_TD251 by VALFR descending.
    read table LT_TD251 into LS_TD251 index 1.
    move SY-SUBRC to RF_RETURN.
    if SY-SUBRC eq 0.
      move LS_TD251-MATNR to EF_MATNR.
    endif.

  endmethod.
  method GET_COLCO_TINK.

    data: LS_TD250 type ZVCXI_FFS_TD250.

    read table ME->T_TD250 into LS_TD250 with key COLCO = IF_COLCO.
    check SY-SUBRC is initial.

    move LS_TD250-TINK to RF_TINK.

  endmethod.
  method GET_DEFAULT_INK.

    data: LS_TC240 type ZVCXI_FFS_TC240,
          LS_TD240 type ZVCXI_FFS_TD240,
          LS_TD241 type ZVCXI_FFS_TD241.
    data: LT_TC240 type YT_TC240,
          LT_TD240 type YT_TD240,
          LT_TD241 type YT_TD241.

    clear: EF_MATNR,
           ES_COVRG,
           ES_APWGT,
           ES_APVOL.

***---------------------------------------------------------------------
*** Find with all values (Plant, Print Type and Ink Type)
    move ME->T_TD240 to LT_TD240.
    delete LT_TD240 where  WERKS ne ME->F_WERKS
                     or    TPRIN ne IF_TPRIN
                     or    TINK  ne IF_TINK.

    if LINES( LT_TD240 ) lt 1.
***   Find with only Plant and Ink Type
      move ME->T_TD240 to LT_TD240.
      delete LT_TD240 where  WERKS ne ME->F_WERKS
                       or    TPRIN ne SPACE
                       or    TINK  ne IF_TINK.

      if LINES( LT_TD240 ) lt 1.
***     Find with only Print Type and Ink Type
        move ME->T_TD240 to LT_TD240.
        delete LT_TD240 where  WERKS ne SPACE
                         or    TPRIN ne IF_TPRIN
                         or    TINK  ne IF_TINK.

        if LINES( LT_TD240 ) lt 1.
***       Find with only Ink Type
          move ME->T_TD240 to LT_TD240.
          delete LT_TD240 where  WERKS ne SPACE
                           or    TPRIN ne SPACE
                           or    TINK  ne IF_TINK.

          if LINES( LT_TD240 ) lt 1.
***         Find with only Plant
            move ME->T_TD240 to LT_TD240.
            delete LT_TD240 where  WERKS ne ME->F_WERKS
                             or    TPRIN ne SPACE
                             or    TINK  ne SPACE.

            if LINES( LT_TD240 ) lt 1.
***           Find with only Print Type
              move ME->T_TD240 to LT_TD240.
              delete LT_TD240 where  WERKS ne SPACE
                               or    TPRIN ne IF_TPRIN
                               or    TINK  ne SPACE.
            endif.
          endif.
        endif.
      endif.
    endif.

*** Find first Entry
    read table LT_TD240 into LS_TD240 index 1.
    check SY-SUBRC eq 0.
    move LS_TD240-MATNR   to EF_MATNR.
    move LS_TD240-ANITN   to EF_ANITN.
    move LS_TD240-S_APWGT to ES_APWGT.
    move LS_TD240-S_APVOL to ES_APVOL.

***----------------------------------------------------------------------------
    if IF_NOCOL is supplied.
***   Get Coverage per Ink
      move ME->T_TD241 to LT_TD241.
      delete LT_TD241 where WERKS ne LS_TD240-WERKS
                       or   TPRIN ne LS_TD240-TPRIN
                       or   TINK  ne LS_TD240-TINK
                       or   NOCOL gt IF_NOCOL.

      if LINES( LT_TD241 ) lt 1.
***     Find with only Plant and Ink Type
        move ME->T_TD241 to LT_TD241.
        delete LT_TD241 where  WERKS ne ME->F_WERKS
                         or    TPRIN ne SPACE
                         or    TINK  ne IF_TINK
                         or    NOCOL gt IF_NOCOL.

        if LINES( LT_TD241 ) lt 1.
***       Find with only Print Type and Ink Type
          move ME->T_TD241 to LT_TD241.
          delete LT_TD241 where  WERKS ne SPACE
                           or    TPRIN ne IF_TPRIN
                           or    TINK  ne IF_TINK
                           or    NOCOL gt IF_NOCOL.

          if LINES( LT_TD241 ) lt 1.
***         Find with only Ink Type
            move ME->T_TD241 to LT_TD241.
            delete LT_TD241 where  WERKS ne SPACE
                             or    TPRIN ne SPACE
                             or    TINK  ne IF_TINK
                             or    NOCOL gt IF_NOCOL.

            if LINES( LT_TD241 ) lt 1.
***           Find with only Plant
              move ME->T_TD241 to LT_TD241.
              delete LT_TD241 where  WERKS ne ME->F_WERKS
                               or    TPRIN ne SPACE
                               or    TINK  ne SPACE
                               or    NOCOL gt IF_NOCOL.

              if LINES( LT_TD241 ) lt 1.
***             Find with only Print Type
                move ME->T_TD241 to LT_TD241.
                delete LT_TD241 where  WERKS ne SPACE
                                 or    TPRIN ne IF_TPRIN
                                 or    TINK  ne SPACE
                                 or    NOCOL gt IF_NOCOL.
              endif.
            endif.
          endif.
        endif.
      endif.

      sort LT_TD241 by NOCOL descending.
      read table LT_TD241 into LS_TD241 index 1.
      if SY-SUBRC eq 0.
        move LS_TD241-COVRG     to ES_COVRG-COVRG.
        move LS_TD241-COVRG_UOM to ES_COVRG-COVRG_UOM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Default Ink Side based on Print Category
    if IF_PRCAT is supplied.

***   Get Ink Side Defaults
      move ME->T_TC240 to LT_TC240.
      delete LT_TC240 where WERKS ne ME->F_WERKS
                       or   PRCAT ne IF_PRCAT
                       or   TINK  ne IF_TINK.

      if LINES( LT_TC240 ) lt 1.
***     Find with only Print Category and Ink Type
        move ME->T_TC240 to LT_TC240.
        delete LT_TC240 where WERKS ne SPACE
                         or   PRCAT ne IF_PRCAT
                         or   TINK  ne IF_TINK.


        if LINES( LT_TC240 ) lt 1.
***       Find with only Plant and Ink Type
          move ME->T_TC240 to LT_TC240.
          delete LT_TC240 where WERKS ne ME->F_WERKS
                           or   PRCAT ne SPACE
                           or   TINK  ne IF_TINK.

          if LINES( LT_TC240 ) lt 1.
***         Find with only Plant and Print Category
            move ME->T_TC240 to LT_TC240.
            delete LT_TC240 where WERKS ne ME->F_WERKS
                             or   PRCAT ne IF_PRCAT
                             or   TINK  ne SPACE.

            if LINES( LT_TC240 ) lt 1.
***           Find with only Ink Type
              move ME->T_TC240 to LT_TC240.
              delete LT_TC240 where WERKS ne SPACE
                               or   PRCAT ne SPACE
                               or   TINK  ne IF_TINK.

              if LINES( LT_TC240 ) lt 1.
***             Find with only Print Category
                move ME->T_TC240 to LT_TC240.
                delete LT_TC240 where WERKS ne SPACE
                                 or   PRCAT ne IF_PRCAT
                                 or   TINK  ne SPACE.


              endif.
            endif.
          endif.
        endif.
      endif.

      read table LT_TC240 into LS_TC240 index 1.
      if SY-SUBRC eq 0.
        move LS_TC240-INKSI to EF_INKSI.
      endif.

    endif.

  endmethod.
  method GET_INSTANCE.

    data:  LS_INSTANCE type YS_INSTANCE.

    read table T_INSTANCE into LS_INSTANCE with key WERKS = IF_WERKS.
    if SY-SUBRC is initial.
      move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
    else.
      create object RR_INSTANCE
        exporting
          IF_WERKS = IF_WERKS.
    endif.

  endmethod.
  method GET_TINK_DESCR.

    statics: LT_TC230T type sorted table of ZVCXI_FFS_TC230T with unique key TINK.
    data: LS_TC230T type ZVCXI_FFS_TC230T.


    if not LINE_EXISTS( LT_TC230T[ TINK = IF_TINK ] ).
      select single *
             into LS_TC230T
             from ZVCXI_FFS_TC230T
            where TINK  eq IF_TINK
             and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC230T = value #( TINK = IF_TINK ).
      endif.
      insert LS_TC230T into table LT_TC230T.
    endif.

    RF_DESCR = LT_TC230T[ TINK = IF_TINK ]-DESCR.

  endmethod.
  method GET_TINK_PRTEC.

    statics: LT_TC230 type sorted table of ZVCXI_FFS_TC230 with unique key TINK.
    data: LS_TC230 type ZVCXI_FFS_TC230.


    check IF_TINK is not initial.

    if not LINE_EXISTS( LT_TC230[ TINK = IF_TINK ] ).
      select single *
             into LS_TC230
             from ZVCXI_FFS_TC230
            where TINK eq IF_TINK.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC230 = value #( TINK = IF_TINK ).
      endif.
      insert LS_TC230 into table LT_TC230.
    endif.

    RF_PRTEC = LT_TC230[ TINK = IF_TINK ]-PRTEC.

  endmethod.
  method GET_TPRIN_DESCR.

    statics: LT_TC210T type sorted table of ZVCXI_FFS_TC210T with unique key TPRIN.
    data: LS_TC210T type ZVCXI_FFS_TC210T.


    if not LINE_EXISTS( LT_TC210T[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC210T
         from ZVCXI_FFS_TC210T
        where TPRIN eq IF_TPRIN
         and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC210T = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC210T into table LT_TC210T.
    endif.

    RF_DESCR = LT_TC210T[ TPRIN = IF_TPRIN ]-DESCR.

  endmethod.
  method GET_TPRIN_FAPCA.

    data: LS_TC210 type ZVCXI_FFS_TC210.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( T_TC210[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC210
         from ZVCXI_FFS_TC210
        where TPRIN eq IF_TPRIN.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC210 = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC210 into table T_TC210.
    endif.

    RF_FAPCA = T_TC210[ TPRIN = IF_TPRIN ]-FAPCA.

  endmethod.
  method GET_TPRIN_PRTEC.

    data: LS_TC210 type ZVCXI_FFS_TC210.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( T_TC210[ TPRIN = IF_TPRIN ] ).
      select single *
         into LS_TC210
         from ZVCXI_FFS_TC210
        where TPRIN eq IF_TPRIN.
      if SY-SUBRC ne 0.
***     Keep initial value in Buffer
        LS_TC210 = value #( TPRIN = IF_TPRIN ).
      endif.
      insert LS_TC210 into table T_TC210.
    endif.

    RF_PRTEC = T_TC210[ TPRIN = IF_TPRIN ]-PRTEC.

  endmethod.
  method GET_TPRIN_TINK.

    types: begin of YS_BUFFER,
             TPRIN       type ZVCXI_FFS_TPRIN,
             T_TINK_INFO type ZVCXI_FFSS_TT_TINK_INFO,
           end of YS_BUFFER.
    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key TPRIN.
    data: LS_BUFFER type YS_BUFFER.


    check IF_TPRIN is not initial.

    if not LINE_EXISTS( LT_BUFFER[ TPRIN = IF_TPRIN ] ).
      select *
             into table @data(LT_TC211)
             from ZVCXI_FFS_TC211
            where TPRIN eq @IF_TPRIN
             order by POSID.
      if SY-SUBRC eq 0.
        select TINK, PRTEC, FRLFD
               into table @data(LT_TC230)
               from ZVCXI_FFS_TC230
               for all entries in @LT_TC211
             where TINK eq @LT_TC211-TINK.
      endif.

***   Add entry to Buffer
      LS_BUFFER = value #( TPRIN       = IF_TPRIN
                           T_TINK_INFO = value #( for LS_TC211 in LT_TC211
                                                      ( value #( base corresponding #( LS_TC211 )
                                                                 PRTEC = value #( LT_TC230[ TINK = LS_TC211-TINK ]-PRTEC optional )
                                                                 FRLFD = value #( LT_TC230[ TINK = LS_TC211-TINK ]-FRLFD optional )
                                                               ) ) ) ).
      insert LS_BUFFER into table LT_BUFFER.
    endif.

    RT_TINK_INFO = LT_BUFFER[ TPRIN = IF_TPRIN ]-T_TINK_INFO.

  endmethod.
  method LOAD_FROM_DB.

***--------------------------------------------------------------------------------------
*** Get Ink Side Defaults
    select * from ZVCXI_FFS_TC240
      into table ME->T_TC240
      where WERKS eq ME->F_WERKS
         or WERKS eq SPACE.                               "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Printing Default
    select * from ZVCXI_FFS_TD240
      into table ME->T_TD240
      where WERKS eq ME->F_WERKS
         or WERKS eq SPACE.                               "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Printing Default Coverage
    select * from ZVCXI_FFS_TD241
      into table ME->T_TD241
      where WERKS eq ME->F_WERKS
         or WERKS eq SPACE.                               "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Color Code
    select * from ZVCXI_FFS_TD250
      into table ME->T_TD250
      where WERKS eq ME->F_WERKS
         or WERKS eq SPACE.                               "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Color Code Material
    select * from ZVCXI_FFS_TD251
      into table ME->T_TD251
      where WERKS eq ME->F_WERKS
         or WERKS eq SPACE.                               "#EC CI_SUBRC

***--------------------------------------------------------------------------------------
*** Get Color Code - Text
    select * from ZVCXI_FFS_TD250T
      into table ME->T_TD250T
      where LANGU eq SY-LANGU.                            "#EC CI_SUBRC

  endmethod.
