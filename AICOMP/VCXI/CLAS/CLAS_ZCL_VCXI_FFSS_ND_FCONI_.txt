
class ZCL_VCXI_FFSS_ND_FCONI definition
  public
  inheriting from ZCL_VCXI_F0SS_ND
  create public .

public section.

  constants C_UC_ADD type SYUCOMM value 'ADD' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_FCODE
    redefinition .
  methods HANDLE_UC_POPUP_SEL
    redefinition .
protected section.

  data T_PRVDR_DEF type ZVCXI_F0SS_TT_PRVDR_DEF .

  methods ADD_PRVDR
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_PRVDR_DEF
    raising
      /VCXI/CX_CKX .

  methods INIT_NODE
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_ND_FCONI definition
class ZCL_VCXI_FFSS_ND_FCONI implementation.
  method ADD_PRVDR.

    data: LF_POSID type /VCXI/VKSR_POSID,
          LF_ID    type /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type ZVCXI_F0SS_S_PRVDR_DEF.

***--------------------------------------------------------------------------------------
*** Check ID
    check IF_ID is not initial.
    move IF_ID to LF_ID.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = LF_ID.

*** Add after selected position
    move 5 to LF_POSID.

***--------------------------------------------------------------------------------------
*** Create Provider
    check LS_PRVDR_DEF-R_PARENT_GATE is bound.

    RR_GATE = LS_PRVDR_DEF-R_PARENT_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
    if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
      RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).

  endmethod.
  method CONSTRUCTOR.

*** Call super constructor
    SUPER->CONSTRUCTOR( IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Assign to cluster - Parent
    move C_PARENT_ASSIGN to ME->F_ASSIGN.

*** Initialize with class type specific values
    ME->INIT_NODE( ).

  endmethod.
  method GET_FCODE.

    data:           LS_PRVDR_DEF  type      ZVCXI_F0SS_S_PRVDR_DEF.
    field-symbols:  <S_FCODE>     type      YS_FCODE.

***--------------------------------------------------------------------------------------
*** Create Popup Menu Entries for Node
    SUPER->GET_FCODE( importing ET_FCODE = ET_FCODE ).
    check ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Create Separation Line
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_BLANK                      to <S_FCODE>-FCODE.
    move C_TEXT_SEP                      to <S_FCODE>-TEXT.

*** Create Merge
    append initial line to ET_FCODE assigning <S_FCODE>.
    move C_UC_MERGE                      to <S_FCODE>-FCODE.
    move text-T01                        to <S_FCODE>-TEXT.

***--------------------------------------------------------------------------------------
*** Initialize Provider Definitions
    ME->INIT_PRVDR_DEF( ).

*** Create Separation Line
    if LINES( ME->T_PRVDR_DEF ) is not initial.
      append initial line to ET_FCODE assigning <S_FCODE>.
      move C_UC_BLANK                      to <S_FCODE>-FCODE.
      move C_TEXT_SEP                      to <S_FCODE>-TEXT.
    endif.

*** Add Provider Relations
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      append initial line to ET_FCODE assigning <S_FCODE>.
      concatenate C_UC_ADD LS_PRVDR_DEF-ID   into <S_FCODE>-FCODE separated by '@'.
      concatenate text-M01 LS_PRVDR_DEF-DESCR into <S_FCODE>-TEXT separated by SPACE.
    endloop.

  endmethod.
  method HANDLE_UC_POPUP_SEL.

    data: LF_ID       type        /VCXI/CKX_ID.
    data: LR_CX_CKX   type ref to /VCXI/CX_CKX.

    SUPER->HANDLE_UC_POPUP_SEL( IF_FCODE = IF_FCODE ).

***--------------------------------------------------------------------------------------
*** Determine Action
    try.
***     Trigger specific Add command
        if IF_FCODE cp 'ADD@*'.
          move IF_FCODE+4 to LF_ID.
          ME->ADD_PRVDR( IF_ID = LF_ID ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_NODE.

    data:          LS_FIWID            type        ZVCXI_F0S_S_FIWID,
                   LS_FITIN            type        ZVCXI_FFS_S_FITIN.
    data:          LR_FCONI            type ref to ZCL_VCXI_FFSS_PR_FCONI.
    field-symbols: <S_NVAL>            type        YS_NVALS.

***----------------------------------------------------------------------------
*** Call Super
    SUPER->INIT_NODE( ).

***----------------------------------------------------------------------------
*** Check Input Gate is Film Connection In
    try.
        move ME->R_GATE->R_CLSPR ?to LR_FCONI.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_FCONI.
    endtry.

    check LR_FCONI is bound.

*** Initialize Node Values from Gate
    move 4 to ME->F_NETTYPE.

*** Set Node Description
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 0.
    <S_NVAL>-VAL  = LR_FCONI->GET_DESCR( ).

***----------------------------------------------------------------------------
*** Set Film Width and UOM
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 2.
    move text-D01 to <S_NVAL>-VAL.

    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 3.
    LR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = LS_FIWID ).
    <S_NVAL>-VAL = ME->CONV_ANY_TO_VAL( IF_VALUE = LS_FIWID-FIWID
                                        IF_UOM   = LS_FIWID-FIWID_UOM ).

***----------------------------------------------------------------------------
*** Set Film Thickness and UOM
    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 4.
    move text-D02 to <S_NVAL>-VAL.

    append initial line to ME->T_NVALS assigning <S_NVAL>.
    <S_NVAL>-FL   = 5.
    LR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = LS_FITIN ).
    <S_NVAL>-VAL = ME->CONV_ANY_TO_VAL( IF_VALUE = LS_FITIN-FITIN
                                        IF_UOM   = LS_FITIN-FITIN_UOM ).

*** Set Status Icon
    ME->SET_STATUS_ICON( ).

  endmethod.
  method INIT_PRVDR_DEF.

    data: LF_ACTIV_PRVDR  type        NUMC3.
    data: LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_PRVDR        type        ZVCXI_F0SS_S_PRVDR_DEF.
    data: LT_GATE         type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF    type        /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

    refresh: ME->T_PRVDR_DEF.

    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_F0SS_PR_CSTEP=>C_IPRVT_F0_CSTEP
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    sort LT_PRVDR_DEF.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      clear: LF_ACTIV_PRVDR, LS_PRVDR.

***   Get Gates of Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
***     Get all Active Provider with searched ID
        check LR_GATE->F_ID eq LS_PRVDR_DEF-ID.
        add 1 to LF_ACTIV_PRVDR.
      endloop.

***   Check if there are less then maximal Provider
      check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

      move LS_PRVDR_DEF to LS_PRVDR-S_PRVDR_DEF.
      move LT_GATE      to LS_PRVDR-T_GATE_SEQ.
      move ME->R_GATE   to LS_PRVDR-R_PARENT_GATE.

      append LS_PRVDR to ME->T_PRVDR_DEF.
    endloop.

  endmethod.
