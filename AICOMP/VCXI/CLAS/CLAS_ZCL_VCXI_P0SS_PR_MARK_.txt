
class ZCL_VCXI_P0SS_PR_MARK definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_P0_MARK type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_MARK'. "#EC NOTEXT
  constants C_PARID_ACONO type /VCXI/VKS_PARID value 'ZVCXI_P0_ACONO'. "#EC NOTEXT
  constants C_PARID_COVRG type /VCXI/VKS_PARID value 'ZVCXI_P0_COVRG'. "#EC NOTEXT
  constants C_PARID_MARKP type /VCXI/VKS_PARID value 'ZVCXI_P0_MARKP'. "#EC NOTEXT
  constants C_PARID_NUMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_NUMPR'. "#EC NOTEXT
  constants C_ATTID_CALCULATED type /VCXI/VKS_ATTID value 'CALCULATED'. "#EC NOTEXT

  methods GET_TMARK
    exporting
      !EF_TMARK type ZVCXI_P0SS_TMARK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_MARKP
    exporting
      !EF_MARKP type ZVCXI_P0SS_MARKP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TMARK_DESCR
    returning
      value(RF_TMARK_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MARKP_DESCR
    returning
      value(RF_MARKP_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_TMARK
    importing
      !IF_TMARK type ZVCXI_P0SS_TMARK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MARKP
    importing
      !IF_MARKP type ZVCXI_P0SS_MARKP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_NUMPR
    exporting
      !EF_NUMPR type ZVCXI_P0SS_NUMPR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_ACONO
    exporting
      !EF_ACONO type ZVCXI_P0SS_ACONO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_COVRG
    exporting
      !ES_COVRG type ZVCXI_P0S_S_COVRG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_NUMPR
    importing
      !IF_NUMPR type ZVCXI_P0SS_NUMPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ACONO
    importing
      !IF_ACONO type ZVCXI_P0SS_ACONO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COVRG
    importing
      !IS_COVRG type ZVCXI_P0S_S_COVRG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_O_ACONO_CHANGED type /VCXI/VKSC_IEVNT value 'ACONO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_COVRG_CHANGED type /VCXI/VKSC_IEVNT value 'COVRG_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_MARKP_CHANGED type /VCXI/VKSC_IEVNT value 'MARKP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_NUMPR_CHANGED type /VCXI/VKSC_IEVNT value 'NUMPR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TMARK_CHANGED type /VCXI/VKSC_IEVNT value 'TMARK_CHANGED'. "#EC NOTEXT
  data R_PR_PRINT type ref to ZCL_VCXI_P0SS_PR_PRINT .
  data R_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT .

  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods CHECK_TMARK
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MARKP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_ACONO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_COVRG
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_MARK definition
class ZCL_VCXI_P0SS_PR_MARK implementation.
method CHECK_ACONO.

  data:  LF_ACONO  type ZVCXI_P0SS_ACONO.

  ME->GET_ACONO( importing EF_ACONO = LF_ACONO ).
  if LF_ACONO is not initial.
*** Check if Assigned Ink Nr exists
    if ME->R_PR_PRINT is bound.
      RF_RETURN = ME->R_PR_PRINT->CHECK_MARK_INK( IR_GATE = ME->R_GATE ).
    elseif ME->R_PR_SP_PRINT is bound.
      RF_RETURN = ME->R_PR_SP_PRINT->CHECK_MARK_INK( IR_GATE = ME->R_GATE ).
    endif.
  else.
    move '1' to RF_RETURN.
  endif.

endmethod.
method CHECK_COVRG.

  data: LS_COVRG    type ZVCXI_P0S_S_COVRG.

  ME->GET_COVRG( importing ES_COVRG = LS_COVRG ).

  if LS_COVRG is not initial and
     LS_COVRG-COVRG ne '0'   and
     LS_COVRG-COVRG le '100'.
    move '0' to RF_RETURN.
  else.
    move '1' to RF_RETURN.
  endif.

endmethod.
method CHECK_MARKP.

  data:  LF_MARKP  type ZVCXI_P0SS_MARKP.

  ME->GET_MARKP( importing EF_MARKP = LF_MARKP ).

  if LF_MARKP is not initial.
    move '0' to RF_RETURN.
  else.
    move '1' to RF_RETURN.
  endif.

endmethod.
method CHECK_TMARK.
*** 0 - Marking type is maintained and valid.
*** 1 - Marking Type is not maintained.
*** 2 - Marking Type is maintained but not valid.

  data: LF_TMARK type ZVCXI_P0SS_TMARK,
        LF_PRTYP type ZVCXI_P0S_PRTYP.

  ME->GET_TMARK( importing EF_TMARK = LF_TMARK ).
  if LF_TMARK is not initial.

***  Start negative
    move '2' to RF_RETURN.

*** Check if Marking Type is Valid for Print Type
    if ME->R_PR_PRINT is bound.
      LF_PRTYP = ME->R_PR_PRINT->GET_PRTYP( ).
    elseif ME->R_PR_SP_PRINT is bound.
      LF_PRTYP = ME->R_PR_SP_PRINT->GET_PRTYP( ).
    endif.

*** Check by Customizing
    check ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_TMARK_BY_PRTYP( IF_TMARK = LF_TMARK
                                                          IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.

    move '0' to RF_RETURN.
  else.
    move '1' to RF_RETURN.
  endif.

endmethod.
method GET_ACONO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACONO ).
  move LS_PARAM-ATFLV to EF_ACONO.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_COVRG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).
  move LS_PARAM-ATFLV to ES_COVRG-COVRG.
  move LS_PARAM-UNIT  to ES_COVRG-COVRG_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_MARKP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MARKP ).
  move LS_PARAM-ATWRT to EF_MARKP.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_MARKP_DESCR.

  data: LF_MARKP    type ZVCXI_P0SS_MARKP.

  ME->GET_MARKP( importing EF_MARKP = LF_MARKP ).

  RF_MARKP_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_MARKP_DESCR( IF_MARKP = LF_MARKP ).

endmethod.
method GET_NUMPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NUMPR ).
  move LS_PARAM-ATWRT to EF_NUMPR.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Marking Type
  case ME->CHECK_TMARK( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Marking Position
  case ME->CHECK_MARKP( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Assigned Color Nr
  case ME->CHECK_ACONO( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Coverage
  case ME->CHECK_COVRG( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

***----------------------------------------------------------------------------
*** Super
  SUPER->GET_STATUS_MSG( IR_MESSAGE =  IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Marking Type
  case ME->CHECK_TMARK( ).
    when 0.
***   Marking Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '381' ).
    when 1.
***   Please check Marking Type.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '382' ).
    when 2.
***   Marking Type is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '389' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Marking Position
  case ME->CHECK_MARKP( ).
    when 0.
***   Marking Position is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '383' ).
    when 1.
***   Please check Marking Position.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '384' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Assigned Color Number
  case ME->CHECK_ACONO( ).
    when 0.
***   Assigned Color Number is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '385' ).
    when 1.
***   Please check Assigned Color Number.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '386' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Coverage
  case ME->CHECK_COVRG( ).
    when 0.
***   Coverage is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '387' ).
    when 1.
***   Please check Coverage.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '388' ).
  endcase.

endmethod.
method GET_TMARK.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to EF_TMARK.
  move LS_LEOKY-SETBY to EF_SETBY.

endmethod.
method GET_TMARK_DESCR.

  data:      LF_TMARK   type     ZVCXI_P0SS_TMARK.

  ME->GET_TMARK( importing EF_TMARK = LF_TMARK ).

  RF_TMARK_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_TMARK_DESCR( IF_TMARK = LF_TMARK ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Printing Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_PRINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  check ME->R_PR_PRINT is not bound.

*** Get Sheet Procurement Printing Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to ME->R_PR_SP_PRINT.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if ME->R_PR_PRINT    is not bound and
     ME->R_PR_SP_PRINT is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
        IF_MSGV2 = ME->R_GATE->F_ID ).

  endif.

endmethod.
method IS_CALCULATED.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.
  data: LT_ATTRI type /VCXI/VKS_TT_ATTRI.

*** Read Attribute
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).
  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_CALCULATED.
  check SY-SUBRC = 0.
  move LS_ATTRI-ATTVA to RF_CALCULATED.

endmethod.
method SET_ACONO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ACONO ).

  move IF_ACONO to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ACONO_CHANGED ).
  endif.

endmethod.
method SET_COVRG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COVRG ).

  move IS_COVRG-COVRG     to LS_PARAM-ATFLV.
  move IS_COVRG-COVRG_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COVRG_CHANGED ).
  endif.

endmethod.
method SET_MARKP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MARKP ).

  move IF_MARKP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MARKP_CHANGED ).
  endif.

endmethod.
method SET_NUMPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NUMPR ).

  move IF_NUMPR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NUMPR_CHANGED ).
  endif.

endmethod.
method SET_TMARK.

  data:  LF_CHANGED type  ABAP_BOOL.
  data:  LS_LEOKY   type  /VCXI/VKSR_S_LEOKY.

  move IF_TMARK to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED =  ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TMARK_CHANGED ).
  endif.

endmethod.
