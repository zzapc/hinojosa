
class ZCL_VCXI_PCSS_CUST_PAPER definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data S_BAWGT type ZVCXI_PCS_S_BAWGT read-only .
  data S_BAWGP type ZVCXI_PCS_S_BAWGP read-only .
  data S_CALIP type ZVCXI_P0SS_S_CALIP read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_PAPER
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PCSS_CUST_PAPER
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    importing
      !IF_UOM type /VCXI/CKX_UOM optional
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SETID_PCS_PAPER type /VCXI/CKXC_SETID value 'ZVCXI_PCS_PAPER'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_PCSS_CUST_PAPER definition
class ZCL_VCXI_PCSS_CUST_PAPER implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVN     type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Paper Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_PCS_PAPER
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVN.

        case LS_SETVA-MAPID.
          when 'BAWGT'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_BAWGT-BAWGT.
            move LS_MAPVN-ATFLV_UOM to ME->S_BAWGT-BAWGT_UOM.

          when 'BAWGP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_BAWGP-BAWGP.
            move LS_MAPVN-ATFLV_UOM to ME->S_BAWGP-BAWGP_UOM.

          when 'CALIP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_CALIP-CALIP.
            move LS_MAPVN-ATFLV_UOM to ME->S_CALIP-CALIP_UOM.

        endcase.
      endloop.

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
  method GET_GRAMM.

*** Calculate Grammage
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_BAWGT-BAWGT
                                                          IF_CALCV_UOM_1 = ME->S_BAWGT-BAWGT_UOM
                                                          IF_CALCV_2     = ME->S_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = ME->S_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_GRAMM-GRAMM
                                                          EF_CALCV_UOM   = RS_GRAMM-GRAMM_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_BAWGT-BAWGT
                                                          IF_CALCV_UOM_1 = ME->S_BAWGT-BAWGT_UOM
                                                          IF_CALCV_2     = ME->S_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = ME->S_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = RS_GRAMM-GRAMM
                                                          EF_CALCV_UOM   = RS_GRAMM-GRAMM_UOM ).
    endif.

  endmethod.
method GET_INSTANCE_PAPER.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
