
class ZCL_VCXI_FBSS_TOOLBAR_CSTEP definition
  public
  inheriting from ZCL_VCXI_FBSS_TOOLBAR_PRVDR
  create public .

public section.

  constants C_PRVDR_PARID type /VCXI/VKS_PARID value 'ZVCXI_FB_TRECL' ##NO_TEXT.
protected section.

  methods GET_BAGTY_CONV
    exporting
      !ET_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP
      !ET_RECLO type ZVCXI_FBSSC_TT_BAGTY_RECLO
    raising
      /VCXI/CX_CKX .

  methods CHECK_PRVDR_PARAM_ADD
    redefinition .
  methods CHECK_PRVDR_PARAM_DEL
    redefinition .
  methods GET_MENU_ITEMS
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods SET_PRVDR_PARAM
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_TOOLBAR_CSTEP definition
class ZCL_VCXI_FBSS_TOOLBAR_CSTEP implementation.
  method CHECK_PRVDR_PARAM_ADD.

    data: LF_PARAM_VAL   type        /VCXI/CKX_ID,
          LF_ACTIV_PRVDR type        I.
    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_ATTRI     type        /VCXI/VKS_S_ATTRI.
    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


*** Start negative
    move ABAP_TRUE to RF_DISABLED.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF where ID = IF_ID.
      read table LS_PRVDR_DEF-T_ATTRI into LS_ATTRI index 1.
      if LS_ATTRI-ATTVA eq IF_PARAM_VAL.
        exit.
      endif.
    endloop.

    check SY-SUBRC eq 0.

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.

***   Get all Active Provider with searched ID
      check LR_GATE->F_ID eq IF_ID.

***   Check Provider Parameter Value
      move ME->GET_PRVDR_PARAM( exporting IR_GATE = LR_GATE ) to LF_PARAM_VAL.
      if LF_PARAM_VAL is not initial.
        check LF_PARAM_VAL eq IF_PARAM_VAL.
      endif.

      add 1 to LF_ACTIV_PRVDR.

    endloop.

*** If Max Quantity is 0, remove limit
    if LS_PRVDR_DEF-QTYMA = 0.
      move ABAP_FALSE to RF_DISABLED.
      return.
    endif.

*** Check if there are less then maximal Provider
    check LF_ACTIV_PRVDR lt LS_PRVDR_DEF-QTYMA.

    move ABAP_FALSE to RF_DISABLED.

  endmethod.
  method CHECK_PRVDR_PARAM_DEL.

    RF_DISABLED = ABAP_FALSE.

  endmethod.
  method GET_BAGTY_CONV.

    data: LF_IBAGT type        ZVCXI_FBS_IBAGT,
          LF_BGFPX type        ZVCXI_FBS_BGFPX.
    data: LS_BGICS  type  ZVCXI_FBSS_S_BGICS.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_INPUT   type ref to ZCL_VCXI_FBSS_PR_INPUT,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.
    field-symbols: <S_CSTEP>  type ZVCXI_FBSSC_S_BAGTY_CSTEP.

*** Get Input
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_INPUT=>C_IPRVT_INPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    check LR_GATE is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_INPUT.
    endtry.
    check LR_PR_INPUT is bound.

*** Get Bag Customizing
    LR_PR_INPUT->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to ET_CSTEP.
      move LR_CUST_BAG->GET_RECLO( ) to ET_RECLO.
    endif.

*** Reduce Min/Max based on existing Conversions
    if ET_CSTEP is not initial.

***   Get Bag Forward Property XML (Inbound)
      LR_PR_INPUT->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing EF_BGFPX = LF_BGFPX ).

***   Get Bag Forward Property Instance
      LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = LF_BGFPX ).

      loop at LR_BL_BGFPROP->T_BGICS into LS_BGICS.
        read table ET_CSTEP assigning <S_CSTEP> with key ICSTP = LS_BGICS-ICSTP.
        check SY-SUBRC eq 0.

        if <S_CSTEP>-QTYMI > LS_BGICS-CCSTP.
          <S_CSTEP>-QTYMI = <S_CSTEP>-QTYMI - LS_BGICS-CCSTP.
        else.
          move 0  to <S_CSTEP>-QTYMI.
        endif.

        if <S_CSTEP>-QTYMA > LS_BGICS-CCSTP.
          <S_CSTEP>-QTYMA = <S_CSTEP>-QTYMA - LS_BGICS-CCSTP.
        else.
          move 0  to <S_CSTEP>-QTYMA.
        endif.
      endloop.

    endif.

  endmethod.
  method GET_MENU_ITEMS.

    data: LS_MENU_ITEMS type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_TC030T     type        ZVCXI_FBS_TC030T,
          LS_ATTRI      type        /VCXI/VKS_S_ATTRI,
          LS_CSTEP      type        ZVCXI_FBSSC_S_BAGTY_CSTEP,
          LS_RECLO      type        ZVCXI_FBSSC_S_BAGTY_RECLO.
    data: LT_CSTEP     type        ZVCXI_FBSSC_TT_BAGTY_CSTEP,
          LT_RECLO     type        ZVCXI_FBSSC_TT_BAGTY_RECLO,
          LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

    clear ME->T_MENU_ITEMS.

*** Get Bag Type Conversion Steps
    ME->GET_BAGTY_CONV( importing ET_CSTEP = LT_CSTEP
                                  ET_RECLO = LT_RECLO ).

*    check LT_CSTEP is not initial.

    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    sort LT_PRVDR_DEF.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

*** Create Menu Items list
    loop at LT_CSTEP into LS_CSTEP.

      read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = LS_CSTEP-ICSTP.

***   Add Conversion Steps
      if SY-SUBRC eq 0.
        clear LS_MENU_ITEMS.

        move LS_CSTEP-ICSTP      to LS_MENU_ITEMS-ID.
        move LS_CSTEP-QTYMI      to LS_MENU_ITEMS-QTYMI.
        move LS_CSTEP-QTYMA      to LS_MENU_ITEMS-QTYMA.
        move LS_PRVDR_DEF-DESCR  to LS_MENU_ITEMS-DESCR.

***     Special Handling of Reclosing
        if LS_CSTEP-ICSTP eq 'CSTEP_RECLO'.
          clear: LS_ATTRI.
          move ME->C_PRVDR_PARID  to  LS_ATTRI-ATTID.
          move 'IMPL'             to  LS_ATTRI-ATTMO.

          loop at LT_RECLO into LS_RECLO.
            clear: LS_ATTRI-ATTVA,
                   LS_MENU_ITEMS-T_ATTRI.

            move LS_RECLO-TRECL     to  LS_ATTRI-ATTVA.
            append LS_ATTRI         to  LS_MENU_ITEMS-T_ATTRI.

            append LS_MENU_ITEMS    to  ME->T_MENU_ITEMS.
          endloop.

        else.
          append LS_MENU_ITEMS    to ME->T_MENU_ITEMS.
        endif.

      endif.

    endloop.

*** Get existing conversions (to be deleted)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_CSTEP=>C_IPRVT_CSTEP
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      clear LS_MENU_ITEMS.
      read table ME->T_MENU_ITEMS into LS_MENU_ITEMS with key ID = LR_GATE->F_ID.
      check SY-SUBRC ne 0.

      move LR_GATE->F_ID    to LS_MENU_ITEMS-ID.

      read table ZCL_VCXI_FBSSC_BAGTY=>T_TC030T into LS_TC030T with key ICSTP = LR_GATE->F_ID.
      if SY-SUBRC = 0.
        move LS_TC030T-DESCR  to  LS_MENU_ITEMS-DESCR.
      else.
        move LS_CSTEP-ICSTP    to  LS_MENU_ITEMS-DESCR.
      endif.

      append LS_MENU_ITEMS    to ME->T_MENU_ITEMS.
    endloop.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LF_FCODE     type        UI_FUNC,
          LF_TEXT      type        GUI_TEXT,
          LF_DISABLED  type        CUA_ACTIVE,
          LF_PARAM_VAL type        /VCXI/CKX_ID.
    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF,
          LS_ATTRI     type        /VCXI/VKS_S_ATTRI,
          LS_TC210T    type        ZVCXI_FBS_TC210T.
    data: LR_MENU       type ref to CL_CTMENU,
          LR_MENU_RECLO type ref to CL_CTMENU,
          LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
        case FCODE.
          when C_FCODE_ADD.
            move ABAP_UNDEFINED to ME->F_REFRESH_REQ.

***         Check if Providers exist
            if ME->T_PRVDR_DEF is not initial.

***           Create DropDown Menu
              create object LR_MENU.

              loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
                clear: LF_FCODE, LF_TEXT, LF_PARAM_VAL,
                       LS_ATTRI.

***             Get Provider Set Parameter
                read table LS_PRVDR_DEF-T_ATTRI into LS_ATTRI index 1.
                move LS_ATTRI-ATTVA to LF_PARAM_VAL.

***             Get Function Code
                concatenate C_FCODE_ADD LS_PRVDR_DEF-ID LF_PARAM_VAL into LF_FCODE separated by '@'.

***             Get Description
                move LS_PRVDR_DEF-DESCR to LF_TEXT.

***             Check if Provider can be added
                LF_DISABLED = ME->CHECK_PRVDR_PARAM_ADD( IF_ID        = LS_PRVDR_DEF-ID
                                                         IF_PARAM_VAL = LF_PARAM_VAL ).

***             Add Conversion Reclosing Submenu
                if LS_PRVDR_DEF-ID eq 'CSTEP_RECLO'.

                  if LR_MENU_RECLO is not bound.
                    create object LR_MENU_RECLO.
                    LR_MENU->ADD_SUBMENU( MENU     = LR_MENU_RECLO
                                          TEXT     = LF_TEXT ).
                  endif.

                  read table ZCL_VCXI_FBSSC_BAGTY=>T_TC210T into LS_TC210T
                                                            with key TRECL = LF_PARAM_VAL.
                  if SY-SUBRC eq 0.
                    move LS_TC210T-DESCR  to LF_TEXT.
                  else.
                    move LF_PARAM_VAL     to LF_TEXT.
                  endif.
                  LR_MENU_RECLO->ADD_FUNCTION( FCODE    = LF_FCODE
                                               TEXT     = LF_TEXT
                                               DISABLED = LF_DISABLED ).

***             Add Conversion Function
                else.
                  LR_MENU->ADD_FUNCTION( FCODE    = LF_FCODE
                                         TEXT     = LF_TEXT
                                         DISABLED = LF_DISABLED ).
                endif.

              endloop.
            endif.

        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( CONTEXT_MENU = LR_MENU
                                             POSX         = POSX
                                             POSY         = POSY ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method SET_PRVDR_PARAM.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = IR_GATE->GET_PARAM( IF_PARID = ME->C_PRVDR_PARID ).
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC   to LS_PARAM-SETBY.
    move IF_PARAM_VAL                       to LS_PARAM-ATWRT.

    IR_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    case ME->C_PRVDR_PARID.
      when ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_PARID_TRECL.
***     Send Event
        IR_GATE->SET_EVENT( IF_IEVNT = ZCL_VCXI_FBSS_PR_CSTEP_RECLO=>C_IEVNT_O_TRECL_CHANGED ).

        IR_GATE->RAISE_EVENTS( ).

    endcase.

  endmethod.
