
class ZCL_VCXI_XCDCU_GRID_CD_EXIT definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_CONDDEF type ref to ZCL_VCXI_XCDC_CONDDEF .

  methods ADD_EXIT
    raising
      /VCXI/CX_CKX .
  methods DELETE_EXIT
    importing
      !IT_CD_EXIT type ZVCXI_XCDC_TT_CD_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CHOOSE_FM
    importing
      !IF_FMNAM type RS38L_FNAM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_CD_EXIT definition
class ZCL_VCXI_XCDCU_GRID_CD_EXIT implementation.
method ADD_EXIT.

  data:          LF_RETURN    type                   ABAP_BOOL,
                 LF_EXIT      type                   ABAP_BOOL.
  data:          LT_SVAL      type standard table of SVAL.
  data:          LS_CD_EXIT   type                   ZVCXI_XCDC_S_CD_EXIT.
  field-symbols: <S_FIELD>    type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_CD_EXIT'.
  <S_FIELD>-FIELDNAME = 'IEXIT'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Condition Definition Exit'(A20)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'IEXIT'.
          move <S_FIELD>-VALUE to LS_CD_EXIT-IEXIT.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_CD_EXIT-IEXIT is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.


*** Add Condition Value
  ME->R_CONDDEF->ADD_CD_EXIT( IS_CD_EXIT = LS_CD_EXIT ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_CD_EXIT_GRID'
                      IF_CONTAINER_NAME = '0100CC_GRID_EXIT'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).


*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CONDDEF.
    catch CX_SY_MOVE_CAST_ERROR.
***   Condition Definition Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDC'
          IF_MSGNO = '252' ).
  endtry.

  check ME->R_CONDDEF is bound.
  ME->F_LOCKED = ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method DELETE_EXIT.

  data: LS_CD_EXIT type ZVCXI_XCDC_S_CD_EXIT.

  loop at IT_CD_EXIT into LS_CD_EXIT.
*** Delete by ID
    ME->R_CONDDEF->DELETE_CD_EXIT( IS_CD_EXIT = LS_CD_EXIT ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'FNAME' or 'SEXIT'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-EDIT.
        endif.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CD_EXIT_GRID      type          ZVCXI_XCDCU_S_CD_EXIT_GRID,
                 LS_CD_EXIT           type          ZVCXI_XCDC_S_CD_EXIT.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Values
  loop at ME->R_CONDDEF->T_CD_EXIT into LS_CD_EXIT.
    clear: LS_CD_EXIT_GRID.

    move-corresponding LS_CD_EXIT to LS_CD_EXIT_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CD_EXIT_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_CD_EXIT           type          ZVCXI_XCDC_S_CD_EXIT.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( exporting E_MODIFIED    = E_MODIFIED
                                                     ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.

        read table ET_GOOD_CELLS with key ROW_ID = SY-TABIX transporting no fields.
        check SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_CD_EXIT.
        ME->R_CONDDEF->UPDATE_CD_EXIT( IS_CD_EXIT = LS_CD_EXIT ).
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LS_CD_EXIT_GRID     type          ZVCXI_XCDCU_S_CD_EXIT_GRID.
  data:          LR_CX_CKX           type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>            type standard table,
                 <S_DATA>            type          any.

  try.
***----------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Get Data
      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      check SY-SUBRC = 0.
      move-corresponding <S_DATA> to LS_CD_EXIT_GRID.

***   Handle Double Click
      case E_COLUMN-FIELDNAME.
        when 'FNAME'.
          ME->HANDLE_UC_CHOOSE_FM( IF_FMNAM = LS_CD_EXIT_GRID-FNAME ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_CHOOSE_FM.

  check IF_FMNAM is not initial.

  set parameter id 'LIB' field IF_FMNAM.
  call function 'ABAP4_CALL_TRANSACTION'
    exporting
      TCODE                   = 'SE37'
      SKIP_SCREEN             = 'X'
    exceptions
      CALL_TRANSACTION_DENIED = 1
      TCODE_INVALID           = 2
      others                  = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_CD_EXIT      type          ZVCXI_XCDC_TT_CD_EXIT.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_CD_EXIT>     type          ZVCXI_XCDC_S_CD_EXIT,
                 <S_DATA>        type          any.

  try.

***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Condition Exit
          ME->ADD_EXIT( ).

        when C_FUNC_DEL.
***     Delete Condition Exit
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Condition Exit's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CD_EXIT assigning <S_CD_EXIT>.
            move-corresponding <S_DATA> to <S_CD_EXIT>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CD_EXIT assigning <S_CD_EXIT>.
            move-corresponding <S_DATA> to <S_CD_EXIT>.
          endloop.

***       Delete Condition Exit's
          ME->DELETE_EXIT( IT_CD_EXIT = LT_CD_EXIT ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_CONDDEF->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
