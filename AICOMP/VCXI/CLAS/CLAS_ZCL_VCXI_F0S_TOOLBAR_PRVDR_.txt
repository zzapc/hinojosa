
class ZCL_VCXI_F0S_TOOLBAR_PRVDR definition
  public
  create public .

public section.

  data F_REFRESH_REQ type ABAP_BOOL .
  data F_FREED type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IF_IPRVT type /VCXI/VKSC_IPRVT optional .
  methods REFRESH_TOOLBAR
    importing
      !IT_PRVDR_SELECTED type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
protected section.

  data T_PRVDR_SELECTED type /VCXI/VKSR_TT_GATE .
  constants C_BTYPE_BUTTON type TB_BTYPE value '0' ##NO_TEXT.
  constants C_BTYPE_CHECKBOX type TB_BTYPE value '5' ##NO_TEXT.
  constants C_BTYPE_MENU type TB_BTYPE value '2' ##NO_TEXT.
  constants C_BTYPE_MENU_BTN type TB_BTYPE value '1' ##NO_TEXT.
  constants C_BTYPE_MENU_ENTRY type TB_BTYPE value '6' ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value '3' ##NO_TEXT.
  data F_CONTAINER_NAME type SCRFNAME .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR .
  data F_APPL_EVENTS type ABAP_BOOL .
  data F_MENU_BUTTON_ACTIV type ABAP_BOOL .
  data F_TEXT_ADD type TEXT40 .
  data F_TEXT_DEL type TEXT40 .
  data T_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF .
  data R_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE .
  constants C_FCODE_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_FCODE_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  data F_BTYPE_ADD type TB_BTYPE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data F_IPRVT type /VCXI/VKSC_IPRVT .
  data R_GATE type ref to /VCXI/CL_VKSR_GATE .

  methods ADD_PRVDR
    importing
      !IF_ID type /VCXI/CKX_ID optional
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRVDR_ADD
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRVDR_DEL
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DISABLED_ADD
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRVDR_REL
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_RELEVANT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DISABLED_DEL
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_GATE_FREED
    for event GATE_FREED of /VCXI/CL_VKSR_GATE .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR_DEF
    raising
      /VCXI/CX_CKX .
  methods DEL_PRVDR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event DROPDOWN_CLICKED of CL_GUI_TOOLBAR
    importing
      !FCODE
      !POSX
      !POSY .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR_FCODE
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
private section.
endclass. "ZCL_VCXI_F0S_TOOLBAR_PRVDR definition
class ZCL_VCXI_F0S_TOOLBAR_PRVDR implementation.
  method ADD_PRVDR.

    data: LF_POSID type        /VCXI/VKSR_POSID,
          LF_ID    type        /VCXI/CKX_ID.
    data: LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***----------------------------------------------------------------------------
*** Find ID
    move IF_ID to LF_ID.

    if LF_ID is initial and
       LINES( ME->T_PRVDR_DEF ) gt 1.
***   No Provider Type available to add
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '013' ).

    elseif LF_ID is initial and
           LINES( ME->T_PRVDR_DEF ) le 1.
      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
      if SY-SUBRC = 0.
        move LS_PRVDR_DEF-ID to LF_ID.
      else.
***     No Provider Type available to add
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
            IF_MSGTY = 'E'
            IF_MSGID = 'ZVCXI_XCS'
            IF_MSGNO = '013' ).
      endif.
    endif.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
    read table ME->T_PRVDR_SELECTED into LR_GATE index 1.
    if LR_GATE is bound.
      LF_POSID = LR_GATE->GET_POSID( ).
    endif.

*** Add 5 to insert after selected position
    add 5 to LF_POSID.

***----------------------------------------------------------------------------
*** Create Provider
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
    if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
      RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.
    RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
    RR_GATE->REORG_POSID( ).

*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method CHECK_PRVDR_ADD.

    data: LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE              type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE              type ref to /VCXI/CL_VKSR_GATE.
    data: LF_ACTIV_PRVDR       type        NUMC3.


    move ABAP_TRUE to RF_DISABLED.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
***   Get all Active Provider with searched ID
      check LR_GATE->F_ID eq IF_ID.
      add 1 to LF_ACTIV_PRVDR.

    endloop.

*** Check if there are less then maximal Provider
    check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

    move ABAP_FALSE to RF_DISABLED.

  endmethod.
  method CHECK_PRVDR_DEL.

    data: LF_PRVDR       type        I,
          LF_ACTIV_PRVDR type        I.
    data: LS_PRVDR_DEF   type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Start negative
    move ABAP_TRUE to RF_DISABLED.

***--------------------------------------------------------------------------------------
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
    check SY-SUBRC = 0.

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
***   Get all Provider with searched ID
      check LR_GATE->F_ID eq IF_ID.
      add 1 to LF_PRVDR.

***   Check also if Provider is changeable -> can be deleted!!
      if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
        add 1 to LF_ACTIV_PRVDR.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Check if there is min. one changeable Provider
    check LF_ACTIV_PRVDR gt 0.

*** Check if there are more than min. number of Provider
    check LF_ACTIV_PRVDR gt LS_PRVDR_DEF-QTYMI.

    move ABAP_FALSE to RF_DISABLED.

  endmethod.
  method CHECK_PRVDR_REL.

*** Initial all Provider are relevant
    move ABAP_TRUE to RF_RELEVANT.

  endmethod.
  method CONSTRUCTOR.

    move IR_GATE           to ME->R_GATE.
    move IR_UIGATE         to ME->R_UIGATE.
    move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.
    move IF_APPL_EVENTS    to ME->F_APPL_EVENTS.
    move IF_IPRVT          to ME->F_IPRVT.

*** Request Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Activate Event Handler
    set handler ME->HANDLE_GATE_FREED for ME->R_GATE activation ABAP_TRUE.

  endmethod.
  method DEL_PRVDR.

    data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Deactivate selected Provider
    loop at ME->T_PRVDR_SELECTED into LR_GATE where TABLE_LINE is bound.
***   Check if Gate is changeable and can be deleted
      if LR_GATE->GET_USYNC( ) eq ABAP_FALSE and
         ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_FALSE ).
      endif.
    endloop.

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Free selected Provider
    loop at ME->T_PRVDR_SELECTED into LR_GATE where TABLE_LINE is bound.
***   Check if Gate is changeable and can be deleted
      if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
        LR_GATE->DO_FREE( ).
      endif.
    endloop.

*** Process Events
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method DO_FREE.

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_TOOLBAR.
    endif.

*** Free Container
    if ME->R_CONTAINER is bound.
      ME->R_CONTAINER->FREE( exceptions
                               CNTL_ERROR        = 1
                               CNTL_SYSTEM_ERROR = 2
                               others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER.
    endif.

  endmethod.
  method GET_DISABLED_ADD.

    data:  LF_LOCKED       type        /VCXI/CKX_LOCKED.
    data:  LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.

***----------------------------------------------------------------------------
*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      exit.
    endif.

    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      RF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).
      check RF_DISABLED eq ABAP_FALSE.
      exit.
    endloop.

*** Do general DVC Check if Function is activ
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                  IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
    endif.

  endmethod.
  method GET_DISABLED_DEL.

    data:  LF_LOCKED       type        /VCXI/CKX_LOCKED.
    data:  LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.

***----------------------------------------------------------------------------
*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

    if LF_LOCKED ne ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
      exit.
    endif.

*** Get delete Button in Grid or not in Grid
    loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
      RF_DISABLED = ME->CHECK_PRVDR_DEL( IF_ID = LS_PRVDR_DEF-ID ).
      check RF_DISABLED eq ABAP_FALSE.
      exit.
    endloop.

*** Do general DVC Check if Function is activ
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                  IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_DISABLED.
    endif.

  endmethod.
  method HANDLE_GATE_FREED.
  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LF_FCODE    type UI_FUNC,
          LF_TEXT     type GUI_TEXT,
          LF_DISABLED type CUA_ACTIVE.
    data: LS_PRVDR_DEF  type /VCXI/VKSR_S_PRVDR_DEF.
    data: LR_MENU   type ref to CL_CTMENU,
          LR_CX_CKX type ref to /VCXI/CX_CKX.


    try.
        case FCODE.
          when C_FCODE_ADD.
            move ABAP_UNDEFINED to ME->F_REFRESH_REQ.

***         Check if Providers exist
            if ME->T_PRVDR_DEF is not initial.

***           Create DropDown Menu
              create object LR_MENU.

              loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
                clear: LF_FCODE, LF_TEXT.

***             Get Function Code
                concatenate C_FCODE_ADD LS_PRVDR_DEF-ID into LF_FCODE separated by '@'.

***             Get Description
                move LS_PRVDR_DEF-DESCR to LF_TEXT.

***             Check if Provider can be added
                LF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).

***             Add Function
                LR_MENU->ADD_FUNCTION( FCODE    = LF_FCODE
                                       TEXT     = LF_TEXT
                                       DISABLED = LF_DISABLED ).

              endloop.
            endif.

        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( CONTEXT_MENU = LR_MENU
                                             POSX         = POSX
                                             POSY         = POSY ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR_FCODE.

    data:  LF_ID         type        /VCXI/CKX_ID.
    data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
***     Trigger specific Add command
        if FCODE cp 'ADD@*'.
          move FCODE+4 to LF_ID.
          ME->ADD_PRVDR( IF_ID = LF_ID ).
        endif.

***     Trigger general Add command
        case FCODE.
          when C_FCODE_ADD.
            ME->ADD_PRVDR( ).
          when C_FCODE_DEL.
            ME->DEL_PRVDR( ).
        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** If we switch Application Events off -> do manually Refresh Screen
    if ME->F_APPL_EVENTS eq ABAP_FALSE.
      ME->R_UIGATE->REFRESH_SCREEN( ).
    endif.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        exporting
          CONTAINER_NAME              = ME->F_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED   type /VCXI/CKX_LOCKED,
          LF_INUSE    type /VCXI/VKSR_INUSE,
          LF_DISABLED type ABAP_BOOL.
    data: LT_EVENT type CNTL_SIMPLE_EVENTS.
    field-symbols: <S_EVENT> type CNTL_SIMPLE_EVENT.


    check ME->R_TOOLBAR is not bound.

***--------------------------------------------------------------------------------------
*** Create Toolbar
    create object ME->R_TOOLBAR
      exporting
        PARENT             = ME->R_CONTAINER
      exceptions
        CNTL_INSTALL_ERROR = 1
        CNTL_ERROR         = 2
        CNTB_WRONG_VERSION = 3
        others             = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
    move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
    move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

    ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting
                                            EVENTS                    = LT_EVENT
                                          exceptions
                                            CNTL_ERROR                = 1
                                            CNTL_SYSTEM_ERROR         = 2
                                            ILLEGAL_EVENT_COMBINATION = 3
                                            others                    = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event Handler
    set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.
    set handler ME->HANDLE_MENU_BUTTON   for ME->R_TOOLBAR.

  endmethod.
  method INIT_TOOLBAR_DEF.

    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.


    clear: ME->T_PRVDR_DEF.

    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ME->F_IPRVT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    sort LT_PRVDR_DEF.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***   Check if provider is used for GRID
      check ME->CHECK_PRVDR_REL( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.

      append LS_PRVDR_DEF to ME->T_PRVDR_DEF.
    endloop.

    if LINES( ME->T_PRVDR_DEF ) eq 1.
***   Set Type of Add Button
      move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
      move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

      read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

***   Set Button Text - Translate related
      move text-ADD to ME->F_TEXT_ADD.
      replace first occurrence of '&' in ME->F_TEXT_ADD with LS_PRVDR_DEF-DESCR.

      move text-DEL to ME->F_TEXT_DEL.
      replace first occurrence of '&' in ME->F_TEXT_DEL with LS_PRVDR_DEF-DESCR.

    else.
***   Set Type of Add Button
      move C_BTYPE_MENU to ME->F_BTYPE_ADD.
      move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

***   Set Button Text - Translate related
      move text-ADD to ME->F_TEXT_ADD.
      replace first occurrence of '&' in ME->F_TEXT_ADD with ''.

      move text-DEL to ME->F_TEXT_DEL.
      replace first occurrence of '&' in ME->F_TEXT_DEL with ''.
    endif.

  endmethod.
  method REFRESH_TOOLBAR.

    data:  LF_DISABLED   type ABAP_BOOL.

*** Buffer selected Provider
    move IT_PRVDR_SELECTED to ME->T_PRVDR_SELECTED.

***--------------------------------------------------------------------------------------
    check ME->F_FREED       ne ABAP_TRUE and
          ME->F_REFRESH_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ.

*** Initialize if needed
    ME->INIT_CONTAINER( ).
    ME->INIT_TOOLBAR_DEF( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Delete All Buttons
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( ).

***--------------------------------------------------------------------------------------
*** Add Button
    move ME->GET_DISABLED_ADD( ) to LF_DISABLED.
    ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = C_FCODE_ADD
                                          ICON             = ICON_INSERT_ROW
                                          IS_DISABLED      = LF_DISABLED
                                          BUTN_TYPE        = ME->F_BTYPE_ADD
                                          TEXT             = ME->F_TEXT_ADD
                               exceptions CNTL_ERROR       = 1
                                          CNTB_BTYPE_ERROR = 2
                                          CNTB_ERROR_FCODE = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Delete Button
    move ME->GET_DISABLED_DEL( ) to LF_DISABLED.
    ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = C_FCODE_DEL
                                          ICON             = ICON_DELETE_ROW
                                          IS_DISABLED      = LF_DISABLED
                                          BUTN_TYPE        = C_BTYPE_BUTTON
                                          TEXT             = ME->F_TEXT_DEL
                               exceptions CNTL_ERROR       = 1
                                          CNTB_BTYPE_ERROR = 2
                                          CNTB_ERROR_FCODE = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
