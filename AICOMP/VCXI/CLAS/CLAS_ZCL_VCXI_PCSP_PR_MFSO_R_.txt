
class ZCL_VCXI_PCSP_PR_MFSO_R definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MFSO
  create public .

public section.

  interfaces ZIF_VCXI_PCSP_MFR .
  interfaces ZIF_VCXI_PCSP_MF_FLUTE .

  aliases C_PARID_FLUTE
    for ZIF_VCXI_PCSP_MF_FLUTE~C_PARID_FLUTE .
  aliases C_PARID_PCDIR
    for ZIF_VCXI_PCSP_MFR~C_PARID_PCDIR .
  aliases C_PARID_PCTYP
    for ZIF_VCXI_PCSP_MFR~C_PARID_PCTYP .
  aliases C_PARID_PCUPS
    for ZIF_VCXI_PCSP_MFR~C_PARID_PCUPS .
  aliases C_PARID_RODIA
    for ZIF_VCXI_PCSP_MFR~C_PARID_RODIA .
  aliases C_PARID_ROLEN
    for ZIF_VCXI_PCSP_MFR~C_PARID_ROLEN .
  aliases C_PARID_ROWID
    for ZIF_VCXI_PCSP_MFR~C_PARID_ROWID .
  aliases GET_FLUTE
    for ZIF_VCXI_PCSP_MF_FLUTE~GET_FLUTE .
  aliases GET_PCDIR
    for ZIF_VCXI_PCSP_MFR~GET_PCDIR .
  aliases GET_PCTYP
    for ZIF_VCXI_PCSP_MFR~GET_PCTYP .
  aliases GET_PCUPS
    for ZIF_VCXI_PCSP_MFR~GET_PCUPS .
  aliases GET_RODIA
    for ZIF_VCXI_PCSP_MFR~GET_RODIA .
  aliases GET_RODIM
    for ZIF_VCXI_PCSP_MFR~GET_RODIM .
  aliases GET_ROLEN
    for ZIF_VCXI_PCSP_MFR~GET_ROLEN .
  aliases GET_ROWID
    for ZIF_VCXI_PCSP_MFR~GET_ROWID .
  aliases SET_FLUTE
    for ZIF_VCXI_PCSP_MF_FLUTE~SET_FLUTE .
  aliases SET_PCDIR
    for ZIF_VCXI_PCSP_MFR~SET_PCDIR .
  aliases SET_PCTYP
    for ZIF_VCXI_PCSP_MFR~SET_PCTYP .
  aliases SET_PCUPS
    for ZIF_VCXI_PCSP_MFR~SET_PCUPS .
  aliases SET_RODIA
    for ZIF_VCXI_PCSP_MFR~SET_RODIA .
  aliases SET_RODIM
    for ZIF_VCXI_PCSP_MFR~SET_RODIM .
  aliases SET_ROLEN
    for ZIF_VCXI_PCSP_MFR~SET_ROLEN .
  aliases SET_ROWID
    for ZIF_VCXI_PCSP_MFR~SET_ROWID .

  constants C_IPRVT_PC_MFSO_R type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSP_MFSO_R'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
protected section.

  aliases C_IEVNT_O_FLUTE_CHANGED
    for ZIF_VCXI_PCSP_MF_FLUTE~C_IEVNT_O_FLUTE_CHANGED .

  constants C_IEVNT_O_RODIM_CHANGED type /VCXI/VKSC_IEVNT value 'RODIM_CHANGED'. "#EC NOTEXT

  methods CONV_TO_CONSU
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSP_PR_MFSO_R definition
class ZCL_VCXI_PCSP_PR_MFSO_R implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDS's
  move C_PARID_CONSU_P to ME->F_PARID_CONSU.


endmethod.
  method CONV_TO_CONSU.

    data: LF_PCUPS type ZVCXI_P0SP_PCUPS,
          LF_PCTYP type ZVCXI_P0SP_PCTYP.

    SUPER->CONV_TO_CONSU( exporting IR_MFSI  = IR_MFSI
                          changing  CS_CONSU = CS_CONSU ).

*** Last MFSO if MFSI is Organizer
    if ME->F_MFSI_ORGLC eq ABAP_TRUE.
      LF_PCUPS = ME->GET_PCUPS( ).
      LF_PCTYP = ME->GET_PCTYP( ).

      check LF_PCUPS ne 0.
      CS_CONSU-CONSU = CS_CONSU-CONSU / LF_PCUPS.
      ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LF_PCTYP
                                                 changing  CF_VALUE = CS_CONSU-CONSU ).
    endif.

  endmethod.
method GET_DESCR.

  data: LF_PCTYP type ZVCXI_P0SP_PCTYP,
        LF_DESCR type /VCXI/CKX_DESCR.

  LF_PCTYP = ME->GET_PCTYP( ).
  LF_DESCR = ZCL_VCXI_P0SP_CUST_PCTYP=>GET_PCTYP_DESCR( IF_PCTYP = LF_PCTYP ).
  RF_DESCR = SUPER->GET_DESCR( ).

  if LF_DESCR is not initial.
    concatenate LF_DESCR '-' RF_DESCR into RF_DESCR separated by SPACE.
  endif.

endmethod.
method ZIF_VCXI_PCSP_MF_FLUTE~GET_FLUTE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).
  move LS_PARAM-ATWRT to RF_FLUTE.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_PCSP_MF_FLUTE~SET_FLUTE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).

  move IF_FLUTE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTE_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_PCDIR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).
  move LS_PARAM-ATWRT to RF_PCDIR.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_PCTYP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).
  move LS_PARAM-ATWRT to RF_PCTYP.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_PCUPS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).
  move LS_PARAM-ATFLV to RF_PCUPS.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_RODIA.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).
  move LS_PARAM-ATFLV to RS_RODIA-RODIA.
  move LS_PARAM-UNIT  to RS_RODIA-RODIA_UOM.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_RODIM.

  data: LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_RODIA type ZVCXI_PCS_S_RODIA.

***------------------------------------------------------------------
*** PC Type
  RS_RODIM-PCTYP = ME->GET_PCTYP( ).

***------------------------------------------------------------------
*** Roll Length
  LS_ROLEN = ME->GET_ROLEN( ).
  move-corresponding LS_ROLEN to RS_RODIM.

*** Roll Width
  LS_ROWID = ME->GET_ROWID( ).
  move-corresponding LS_ROWID to RS_RODIM.

*** Roll Diameter
  LS_RODIA = ME->GET_RODIA( ).
  move-corresponding LS_RODIA to RS_RODIM.

***------------------------------------------------------------------
*** PC Ups
  RS_RODIM-PCUPS = ME->GET_PCUPS( ).

*** Number of Outs
  RS_RODIM-NOOUT = ME->GET_NOOUT( ).

***------------------------------------------------------------------
*** PC Direction
  RS_RODIM-PCDIR = ME->GET_PCDIR( ).

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_ROLEN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).
  move LS_PARAM-ATFLV to RS_ROLEN-ROLEN.
  move LS_PARAM-UNIT  to RS_ROLEN-ROLEN_UOM.

endmethod.
method ZIF_VCXI_PCSP_MFR~GET_ROWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).
  move LS_PARAM-ATFLV to RS_ROWID-ROWID.
  move LS_PARAM-UNIT  to RS_ROWID-ROWID_UOM.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_PCDIR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCDIR ).

  move IF_PCDIR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_PCTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCTYP ).

  move IF_PCTYP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_PCUPS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCUPS ).

  move IF_PCUPS to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_RODIA.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RODIA ).

  move IS_RODIA-RODIA                      to LS_PARAM-ATFLV.
  move IS_RODIA-RODIA_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_RODIM.

  data: LS_ROLEN type ZVCXI_PCS_S_ROLEN,
        LS_ROWID type ZVCXI_PCS_S_ROWID,
        LS_RODIA type ZVCXI_PCS_S_RODIA,
        LS_RODIM type ZVCXI_PCSP_S_RODIM.

  LS_RODIM = ME->GET_RODIM( ).

***------------------------------------------------------------------
*** Set PC Type
  if IS_RODIM-PCTYP ne LS_RODIM-PCTYP.
    ME->SET_PCTYP( IF_PCTYP = IS_RODIM-PCTYP
                   IF_SETBY = IF_SETBY ).
  endif.

***------------------------------------------------------------------
*** Set Roll Length
  if IS_RODIM-ROLEN ne LS_RODIM-ROLEN.
    move-corresponding IS_RODIM to LS_ROLEN.
    ME->SET_ROLEN( IS_ROLEN = LS_ROLEN
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set Roll Width
  if IS_RODIM-ROWID ne LS_RODIM-ROWID.
    move-corresponding IS_RODIM to LS_ROWID.
    ME->SET_ROWID( IS_ROWID = LS_ROWID
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set Roll Diameter
  if IS_RODIM-RODIA ne LS_RODIM-RODIA.
    move-corresponding IS_RODIM to LS_RODIA.
    ME->SET_RODIA( IS_RODIA = LS_RODIA
                   IF_SETBY = IF_SETBY ).
  endif.

***------------------------------------------------------------------
*** Set PC Ups
  if IS_RODIM-PCUPS ne LS_RODIM-PCUPS.
    ME->SET_PCUPS( IF_PCUPS = IS_RODIM-PCUPS
                   IF_SETBY = IF_SETBY ).
  endif.

*** Set Number of Outs
  if IS_RODIM-NOOUT ne LS_RODIM-NOOUT.
    ME->SET_NOOUT( IF_NOOUT = IS_RODIM-NOOUT
                   IF_SETBY = IF_SETBY ).
  endif.

***------------------------------------------------------------------
*** Set PC Direction
  if IS_RODIM-PCDIR ne LS_RODIM-PCDIR.
    ME->SET_PCDIR( IF_PCDIR = IS_RODIM-PCDIR
                   IF_SETBY = IF_SETBY ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_ROLEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROLEN ).

  move IS_ROLEN-ROLEN                      to LS_PARAM-ATFLV.
  move IS_ROLEN-ROLEN_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSP_MFR~SET_ROWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

 LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ROWID ).

  move IS_ROWID-ROWID                      to LS_PARAM-ATFLV.
  move IS_ROWID-ROWID_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RODIM_CHANGED ).
  endif.

endmethod.
