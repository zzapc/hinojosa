
class ZCL_VCXI_P1SS_PR_CSTEP_CLOS definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_JOIDIM .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_SHTDI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTDI_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P1_CSTEP_CLOS type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_CSTEP_CLOS' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.
  constants C_PARID_SHTDI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTDI' ##NO_TEXT.

  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_SHTDI) type ZVCXI_P0SS_SHTDI
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_JOIDIM type /VCXI/VKSC_IEVNT value 'RECALC_JOIDIM' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.

  methods GET_JOITY
    returning
      value(RT_JOITY) type ZVCXI_PXS_TT_JOITY
    raising
      /VCXI/CX_CKX .
  methods CHECK_HNDDIM
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_ONEUP
    exporting
      !ER_GATE_CADIF_ONEUP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_ONEUP) type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CSTEP_CLOS definition
class ZCL_VCXI_P1SS_PR_CSTEP_CLOS implementation.
method CHECK_CUST_PRSTY.

  break TBD.

*  data: LF_TPRST  type        ZVCXI_P0SS_TPRST,
*        LF_PRSTY  type        ZVCXI_P0SS_PRSTY,
*        LF_OWNER  type        /VCXI/CKX_STRING,
*        LF_SYSOM  type        /VCXI/VKS_SYSOM.
*
*  ME->GET_TPRST_PRSTY( importing EF_TPRST = LF_TPRST
*                                 EF_PRSTY = LF_PRSTY ).
*
*  move ME->R_GATE->F_GATKY to LF_OWNER.
*  ME->R_GATE->GET_CONFIG_INFO( importing EF_SYSOM = LF_SYSOM ).
*
**** Check if Customizing is the right one
*  if ME->R_CUST_PRSTY is not bound or
*     ME->R_CUST_PRSTY->F_TPRST ne LF_TPRST or
*     ME->R_CUST_PRSTY->F_PRSTY ne LF_PRSTY or
*     ME->R_CUST_PRSTY->F_OWNER ne LF_OWNER or
*     ME->R_CUST_PRSTY->F_SYSOM ne LF_SYSOM.
*
*    free: ME->R_CUST_PRSTY.
*
*    if LF_TPRST is not initial and
*       LF_PRSTY is not initial.
*
*      try.
*
*          ME->R_CUST_PRSTY = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = LF_TPRST
*                                                                     IF_PRSTY = LF_PRSTY
*                                                                     IF_OWNER = LF_OWNER
*                                                                     IF_SYSOM = LF_SYSOM ).
*
*        catch /VCXI/CX_CKX.
*****      Product Style Customizing Reference can't be assigned. Will be shown at Status Message.
*          exit.
*      endtry.
*    endif.
*  endif.

endmethod.
  method CHECK_HNDDIM.

    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM.


*** Get Handling Dimensions
    LS_HNDDIM = ME->GET_HNDDIM( ).

*** Check Handling Dimension
    if LS_HNDDIM-HNDLE is not initial and
       LS_HNDDIM-HNDWI is not initial and
       LS_HNDDIM-HNDHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Handling Dimensions are maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '451' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Handling Dimensions are not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '452' ).
      endif.
    endif.

  endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_PR_CADIF_ONEUP.

    LR_PR_CADIF_ONEUP = ME->GET_PRVDR_CADIF_ONEUP( ).
    check LR_PR_CADIF_ONEUP is bound.
    RF_CADLS = LR_PR_CADIF_ONEUP->GET_CADLS( ).

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_JOITY.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get Gates of Provider
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ) into LR_GATE.
***   Add Joint Type to Return List
      append cast ZCL_VCXI_PXSS_PR_JOINT( LR_GATE->R_CLSPR )->GET_JOITY(  ) to RT_JOITY.
    endloop.

  endmethod.
  method GET_PRVDR_CADIF_ONEUP.

    data: LF_GCADO type ZVCXI_PXS_GCADO.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get CAD Integration provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_ONEUP=>C_IPRVT_PX_CADIF_ONEUP
                                     IF_INUSE = ABAP_TRUE ).

*** Get own OneUp GUID
    LF_GCADO = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->F_GCADO.

***--------------------------------------------------------------------------------------
*** Get CAD Integration Reference
    loop at LT_GATE into LR_GATE.
      try.
***       Check OneUp GUID fits own
          check cast ZCL_VCXI_PXSS_PR_CADIF_ONEUP( LR_GATE->R_CLSPR )->GET_GCADO( ) eq LF_GCADO.

          move LR_GATE->R_CLSPR ?to RR_PR_CADIF_ONEUP.
          check RR_PR_CADIF_ONEUP is bound.
          move LR_GATE to ER_GATE_CADIF_ONEUP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CADIF_ONEUP, ER_GATE_CADIF_ONEUP.
      endtry.
    endloop.

  endmethod.
  method GET_SHTDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data:  LT_D07V    type standard table of DD07V.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).
    move LS_PARAM-ATWRT to RF_SHTDI.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_P0SS_SHTDI'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_SHTDI ]-DDTEXT optional ).
    endif.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Handling Dimension
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_HNDDIM( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Handling Dimensions
    ME->CHECK_HNDDIM( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_JOIDIM.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_JOIDIM~C_IEVNT_O_JOIDIM_CHANGED ).

      when C_IEVNT_I_RECALC_HNDDIM.
        ME->HANDLE_RECALC_HNDDIM( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_HNDDIM type ZVCXI_PXS_S_HNDDIM,
          LS_SHTLE  type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI  type ZVCXI_P0SS_S_SHTWI.
    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


***--------------------------------------------------------------------------------------
*** Do only Recalc Folding Dimensions if they are not overridden.
    LS_HNDDIM = ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
    clear: LS_HNDDIM-HNDLE,
           LS_HNDDIM-HNDWI,
           LS_HNDDIM-HNDHE.

*** Get Corrugator Forward and Backward Property (Outbound)
    LR_BL_CRFPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( ).
    LR_BL_CRBPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    if LR_BL_CRFPROP is bound and
       LR_BL_CRBPROP is bound.

***   For Closed Products use Folding Dimension
      if LR_BL_CRFPROP->GET_TFOLD( ) eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
        LS_HNDDIM = value #( HNDLE     = LR_BL_CRBPROP->S_FOLDIM-FOLLE
                             HNDLE_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLLE_UOM
                             HNDWI     = LR_BL_CRBPROP->S_FOLDIM-FOLWI
                             HNDWI_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLWI_UOM
                             HNDHE     = LR_BL_CRBPROP->S_FOLDIM-FOLHE
                             HNDHE_UOM = LR_BL_CRBPROP->S_FOLDIM-FOLHE_UOM ).
      else.
***     Otherwise use Sheet Dimension
        LR_BL_CRBPROP->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                             ES_SHTWI = LS_SHTWI ).
        LS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                             HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                             HNDWI     = LS_SHTWI-SHTWI
                             HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                             HNDHE     = LR_BL_CRFPROP->S_CALIP-CALIP
                             HNDHE_UOM = LR_BL_CRFPROP->S_CALIP-CALIP_UOM ).
      endif.
    endif.

*** Ensure no negative Values have been calculated
    LS_HNDDIM-HNDLE = cond #( when LS_HNDDIM-HNDLE lt 0 then 0 else LS_HNDDIM-HNDLE ).
    LS_HNDDIM-HNDWI = cond #( when LS_HNDDIM-HNDWI lt 0 then 0 else LS_HNDDIM-HNDWI ).
    LS_HNDDIM-HNDHE = cond #( when LS_HNDDIM-HNDHE lt 0 then 0 else LS_HNDDIM-HNDHE ).

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_SHTDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTDI ).

    move IF_SHTDI  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTDI_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LT_JOITY  type ZVCXI_PXS_TT_JOITY.

*** Super
    RR_BL_CRFPROP = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Set Handling Dimensions to Forward Properties
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

*** Set Joint Types
    LT_JOITY = RR_BL_CRFPROP->T_JOITY.
    append lines of ME->GET_JOITY( ) to LT_JOITY.
    RR_BL_CRFPROP->SET_JOITY( IT_JOITY = LT_JOITY ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_FDI_CSTEP_CLOS> type ZVCXI_P1SS_S_FDI_CSTEP_CLOS.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FDI_CSTEP_CLOS.
    assign RR_DATA->* to <S_FDI_CSTEP_CLOS>.


***--------------------------------------------------------------------------------------
*** Get defined Joints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    if LT_GATE is not initial.
***   Get Joint Type
      <S_FDI_CSTEP_CLOS>-JOITY = cast ZCL_VCXI_PXSS_PR_JOINT( LT_GATE[ 1 ]->R_CLSPR )->GET_JOITY( ).
    else.
      clear <S_FDI_CSTEP_CLOS>-JOITY.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CSTEP_CLOS_OLD type ZVCXI_P1SS_S_FDI_CSTEP_CLOS,
          LS_FDI_CSTEP_CLOS_NEW type ZVCXI_P1SS_S_FDI_CSTEP_CLOS.
    data: LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_DATA_OLD type ref to DATA,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CSTEP_CLOS_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CSTEP_CLOS_NEW = corresponding #( <S_DATA> ).
    endif.

*** General Check for Changes
    check LS_FDI_CSTEP_CLOS_OLD ne LS_FDI_CSTEP_CLOS_NEW.

***--------------------------------------------------------------------------------------
*** Get first defined Joints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).
    if LT_GATE is not initial.
      LR_GATE = LT_GATE[ 1 ].
    else.
***   Create one if not existing
      LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PXSS_PR_JOINT=>C_IPRVT_PX_JOINT ).
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID default 'JOINT' ) ).
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.
    check LR_GATE is bound.

    if LS_FDI_CSTEP_CLOS_OLD-JOITY ne LS_FDI_CSTEP_CLOS_NEW-JOITY.
***   Get Joint Type
      cast ZCL_VCXI_PXSS_PR_JOINT( LR_GATE->R_CLSPR )->SET_JOITY( IF_JOITY = LS_FDI_CSTEP_CLOS_NEW-JOITY
                                                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_JOIDIM~GET_JOIDIM.

    data: LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.

*** Get Corrugator Backward Property XML (Outbound)
    LR_BL_CRBPROP = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    check LR_BL_CRBPROP is bound.

    RS_JOIDIM = LR_BL_CRBPROP->S_JOIDIM.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_JOITY type ZVCXI_P0S_JOITY,
          LF_VALUE type STRING.
    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    concatenate lines of ME->GET_JOITY( ) into LF_VALUE separated by '/'.
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL = CR_NETGRAPH_JSON->GET_LABEL( LF_JOITY )
                                          IF_VALUE = LF_VALUE
                                changing  CT_ATTR  = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ZIF_VCXI_PXSS_JOIDIM~GET_JOIDIM( )-JOIPO   "Joint Position
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://collapse'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
