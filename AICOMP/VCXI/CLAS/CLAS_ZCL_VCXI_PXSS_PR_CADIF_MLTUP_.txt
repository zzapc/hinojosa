
class ZCL_VCXI_PXSS_PR_CADIF_MLTUP definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_IEVNT_O_CADDE_CHANGED type /VCXI/VKSC_IEVNT value 'CADDE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPDFR_CHANGED type /VCXI/VKSC_IEVNT value 'FPDFR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ICADM_CHANGED type /VCXI/VKSC_IEVNT value 'ICADM_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_CADIF_MLTUP type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_CADIF_MLTUP' ##NO_TEXT.
  constants C_PARID_CADDE type /VCXI/VKS_PARID value 'ZVCXI_PX_CADDE' ##NO_TEXT.
  constants C_PARID_CADDL type /VCXI/VKS_PARID value 'ZVCXI_PX_CADDL' ##NO_TEXT.
  constants C_PARID_FPDFR type /VCXI/VKS_PARID value 'ZVCXI_PX_FPDFR' ##NO_TEXT.
  constants C_PARID_ICADM type /VCXI/VKS_PARID value 'ZVCXI_PX_ICADM' ##NO_TEXT.

  methods GET_CADDE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CADDE) type ZVCXI_PXS_CADDE
    raising
      /VCXI/CX_CKX .
  methods GET_CADDL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_CADDL) type ZVCXI_PXS_TT_CADDL
    raising
      /VCXI/CX_CKX .
  methods GET_CADIF_IO
    returning
      value(RR_CADIF_IO) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_CADPI
    returning
      value(RF_CADPI) type ZVCXI_PXS_CADPI
    raising
      /VCXI/CX_CKX .
  methods GET_CADPO
    returning
      value(RF_CADPO) type ZVCXI_PXS_CADPO
    raising
      /VCXI/CX_CKX .
  methods GET_FPDFR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPDFR) type ZVCXI_PXS_FPDFR
    raising
      /VCXI/CX_CKX .
  methods GET_GCADM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_GCADM) type ZVCXI_PXS_GCADM
    raising
      /VCXI/CX_CKX .
  methods GET_ICADM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_ICADM) type ZVCXI_PXS_ICADM
    raising
      /VCXI/CX_CKX .
  methods SET_CADDE
    importing
      !IF_CADDE type ZVCXI_PXS_CADDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADDL
    importing
      !IT_CADDL type ZVCXI_PXS_TT_CADDL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CADIF_IO
    importing
      value(IS_CADIF_IO) type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_FPDFR
    importing
      !IF_FPDFR type ZVCXI_PXS_FPDFR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ICADM
    importing
      !IF_ICADM type ZVCXI_PXS_ICADM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_GCADM type /VCXI/VKSC_IEVNT value 'INIT_GCADM' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CHECK_CADDE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CREATE_CADIF_IO
    returning
      value(RR_CADIF_IO) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_CSTEP
  abstract
    importing
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_DCUT
    importing
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_SSS
    importing
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_SSTEP
  abstract
    importing
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_PRJ
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_PRJ) type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CSTEP
    exporting
      !ER_GATE_CSTEP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CSTEP) type ref to ZCL_VCXI_PXSS_PR_CSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_DCUT
    exporting
      !ER_GATE_DCUT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_DCUT) type ref to ZIF_VCXI_PXSS_DCUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SSS
    exporting
      !ER_GATE_SSS type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_SSS) type ref to ZIF_VCXI_PXSS_SSS
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SSTEP
    exporting
      !ER_GATE_SSTEP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SSTEP) type ref to ZCL_VCXI_PXSS_PR_SSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XOUT
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_GCADM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_GCADM
    importing
      !IF_GCADM type ZVCXI_PXS_GCADM
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CSTEP
  abstract
    importing
      !IS_CADIF_IO type ANY
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SSTEP
  abstract
    importing
      !IS_CADIF_IO type ANY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_CADIF_MLTUP definition
class ZCL_VCXI_PXSS_PR_CADIF_MLTUP implementation.
  method CHECK_CADDE.

*** Check Design Error
    if ME->GET_CADDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Design Error occured in CAD system.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '802' ).
      endif.
    endif.

  endmethod.
  method CREATE_CADIF_IO.

*** Create Data Reference
    create data RR_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.

  endmethod.
  method FILL_BY_DCUT.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_DCUT type ref to ZIF_VCXI_PXSS_DCUT.
    field-symbols: <S_CADIF_IO> type ANY.


***--------------------------------------------------------------------------------------
*** Get Die Cutting Provider
    LR_DCUT = ME->GET_PRVDR_DCUT( ).
    check LR_DCUT is bound.

*** Dereferencing and "Cast" I/O Structure
    assign IR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
*** Get Die Cut Type
    LS_CADIF_IO-TDCUT   = LR_DCUT->GET_TDCUT( ).

*** Get Die Cut Tool Number
    LS_CADIF_IO-DCTTN   = LR_DCUT->GET_DCTTN( ).

*** Get Sheet Direction
    LS_CADIF_IO-SHTDI   = LR_DCUT->GET_SHTDI( ).

*** Get Rule Length
    LS_CADIF_IO-S_RULEN = LR_DCUT->GET_RULEN( ).

*** Get Net Sheet Dimension
    LR_DCUT->GET_SHTN( importing ES_SHTNW = LS_CADIF_IO-S_SHTNW
                                 ES_SHTNL = LS_CADIF_IO-S_SHTNL ).

*** Get Trim
    LS_CADIF_IO-S_TRLEF = LR_DCUT->GET_TRLEF( ).
    LS_CADIF_IO-S_TRRIG = LR_DCUT->GET_TRRIG( ).
    LS_CADIF_IO-S_TRTOP = LR_DCUT->GET_TRTOP( ).
    LS_CADIF_IO-S_TRBOT = LR_DCUT->GET_TRBOT( ).

***------------------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method FILL_BY_SSS.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_SSS type ref to ZIF_VCXI_PXSS_SSS.
    field-symbols: <S_CADIF_IO> type ANY.


***--------------------------------------------------------------------------------------
*** Get Slit/Slot/Score Provider
    LR_SSS = ME->GET_PRVDR_SSS( ).
    check LR_SSS is bound.

*** Dereferencing and "Cast" I/O Structure
    assign IR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
*** Get Sheet Direction
    LR_SSS->GET_DIMEN( importing EF_SHTDI = LS_CADIF_IO-SHTDI ).

**** Get Net Sheet Dimension
*    LR_SSS->GET_SHTN( importing ES_SHTNW = LS_CADIF_IO-S_SHTNW
*                                ES_SHTNL = LS_CADIF_IO-S_SHTNL ).

*** Get Trim
    LS_CADIF_IO-S_TRLEF = LR_SSS->GET_TRLEF( ).
    LS_CADIF_IO-S_TRRIG = LR_SSS->GET_TRRIG( ).
    LS_CADIF_IO-S_TRTOP = LR_SSS->GET_TRTOP( ).
    LS_CADIF_IO-S_TRBOT = LR_SSS->GET_TRBOT( ).

***------------------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method GET_CADDE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDE ).
    move LS_PARAM-ATWRT to RF_CADDE.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CADDL.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDL ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_CADDL = RT_CADDL.
    endif.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_CADIF_IO.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    field-symbols: <S_CADIF_IO> type ANY.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    RR_CADIF_IO = ME->CREATE_CADIF_IO( ).

*** Dereferencing and "Cast" I/O Structure
    assign RR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.

***--------------------------------------------------------------------------------------
*** Get CAD Project Owner & ID and MultiUp GUID & ID
    LS_CADIF_IO-CADPO = ME->GET_CADPO( ).
    LS_CADIF_IO-CADPI = ME->GET_CADPI( ).
    LS_CADIF_IO-GCADM = ME->GET_GCADM( ).
    LS_CADIF_IO-ICADM = ME->GET_ICADM( ).
    LS_CADIF_IO-CADDE = ME->GET_CADDE( ).

*** Get Flag - PDF Requested
    LS_CADIF_IO-FPDFR = ME->GET_FPDFR( ).

***--------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.


*** Fill by Die Cutting or Slit/Slot/Score
    ME->FILL_BY_DCUT( IR_CADIF_IO = RR_CADIF_IO ).
    ME->FILL_BY_SSS(  IR_CADIF_IO = RR_CADIF_IO ).

*** Fill by Conversion or Separation Step
    ME->FILL_BY_CSTEP( IR_CADIF_IO = RR_CADIF_IO ).
    ME->FILL_BY_SSTEP( IR_CADIF_IO = RR_CADIF_IO ).

  endmethod.
  method GET_CADLS.

    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ.

    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.
    RF_CADLS = LR_PR_CADIF_PRJ->GET_CADLS( ).

  endmethod.
  method GET_CADPI.

    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ.

    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.
    RF_CADPI = LR_PR_CADIF_PRJ->GET_CADPI( ).

  endmethod.
  method GET_CADPO.

    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ.

    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.
    RF_CADPO = LR_PR_CADIF_PRJ->GET_CADPO( ).

  endmethod.
  method GET_FPDFR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPDFR ).
    move LS_PARAM-ATWRT to RF_FPDFR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GCADM.

    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY.


    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    RF_GCADM = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.

  endmethod.
  method GET_ICADM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICADM ).
    move LS_PARAM-ATWRT to RF_ICADM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_CADIF_PRJ.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_CADIF_PRJ.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_IPRVT_PX_CADIF_PRJ
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_CADIF_PRJ.

  endmethod.
  method GET_PRVDR_CSTEP.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Conversion Step provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CSTEP=>C_IPRVT_PX_CSTEP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Die Cut (Interface) Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_CSTEP.
          check RR_PR_CSTEP is bound.
          move LR_GATE to ER_GATE_CSTEP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CSTEP, ER_GATE_CSTEP.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_DCUT.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Die Cut provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_DCUT=>C_IPRVT_PX_DCUT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Die Cut (Interface) Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_DCUT.
          check RR_DCUT is bound.
          move LR_GATE to ER_GATE_DCUT.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_DCUT, ER_GATE_DCUT.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SSS.

    data: LT_GATE type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Slot/Slit/Score provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_SSS=>C_IPRVT_PX_SSS
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Slot/Slit/Score (Interface) Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_SSS.
          check RR_SSS is bound.
          move LR_GATE to ER_GATE_SSS.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_SSS, ER_GATE_SSS.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SSTEP.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Separation Step provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SSTEP=>C_IPRVT_PX_SSTEP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Die Cut (Interface) Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SSTEP.
          check RR_PR_SSTEP is bound.
          move LR_GATE to ER_GATE_SSTEP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SSTEP, ER_GATE_SSTEP.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_XOUT.

***--------------------------------------------------------------------------------------
*** Get Finished Goods and Connection Out provider
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XFG=>C_IPRVT_XFG
                                           IF_INUSE = ABAP_TRUE ) to RT_GATE.
    append lines of ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONO=>C_IPRVT_XCONO
                                           IF_INUSE = ABAP_TRUE ) to RT_GATE.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Design Error
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CADDE( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Design Error
    ME->CHECK_CADDE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_GCADM.
        ME->HANDLE_INIT_GCADM( ).
    endcase.

  endmethod.
  method HANDLE_INIT_GCADM.

    data:  LF_GCADM  type ZVCXI_PXS_GCADM.


    check ME->GET_GCADM( ) is initial.

    try.
        LF_GCADM = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( ).
      catch CX_UUID_ERROR.                              "#EC NO_HANDLER
    endtry.

    ME->SET_GCADM( IF_GCADM = LF_GCADM ).

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_CADDE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDE ).

    move IF_CADDE to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CADDE_CHANGED ).
    endif.

  endmethod.
  method SET_CADDL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CADDL ).

    if IT_CADDL is supplied.
      call transformation ID
           source T_CADDL = IT_CADDL
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_CADIF_IO.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.


*** "Cast" I/O Structure
    move-corresponding IS_CADIF_IO to LS_CADIF_IO.

***--------------------------------------------------------------------------------------
*** Check validity of I/O values
    if LS_CADIF_IO-CADPO ne ME->GET_CADPO( ) or
       LS_CADIF_IO-GCADM ne ME->GET_GCADM( ).
      break TBD.
    endif.

*** Set MultiUp ID
    ME->SET_ICADM( IF_ICADM = LS_CADIF_IO-ICADM ).

*** Set CAD Design Error
    ME->SET_CADDE( IF_CADDE = LS_CADIF_IO-CADDE ).

*** Set Document List
    ME->SET_CADDL( IT_CADDL = corresponding #( LS_CADIF_IO-T_CADIF_DOC_IO ) ).

***--------------------------------------------------------------------------------------
*** Update Conversion Step from I/O Structure
    ME->UPDATE_CSTEP( IS_CADIF_IO = IS_CADIF_IO ).

*** Update Separation Step from I/O Structure
    ME->UPDATE_SSTEP( IS_CADIF_IO = IS_CADIF_IO ).

  endmethod.
  method SET_FPDFR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPDFR ).

    move IF_FPDFR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPDFR_CHANGED ).
    endif.

  endmethod.
  method SET_GCADM.

    ME->R_GATE->SET_LEOKY( IS_LEOKY = value #( LEOKY = IF_GCADM
                                               SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

  endmethod.
  method SET_ICADM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ICADM ).

    move IF_ICADM to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICADM_CHANGED ).
    endif.

  endmethod.
