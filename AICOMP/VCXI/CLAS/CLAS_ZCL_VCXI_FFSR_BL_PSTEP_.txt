
class ZCL_VCXI_FFSR_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_F0SR_BL_PSTEP
  abstract
  create public .

public section.

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods RESTORE_ON_UPDATE
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  methods DETERMINE_MS_CORE
    importing
      !IF_ARBPL type ARBPL
      !IF_WERKS type WERKS_D
      !IS_WIDIM type ZVCXI_FFSR_S_WIDIM
    changing
      !CS_RHNDL type ZVCXI_FFSR_S_RHNDL
    raising
      /VCXI/CX_CKX .
  methods RECALC_RHNDL
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSI_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods SET_RHNDL
    importing
      !IT_RHNDL type ZVCXI_FFSR_TT_RHNDL
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP definition
class ZCL_VCXI_FFSR_BL_PSTEP implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type /VCXI/VSMC_LDUOM,
          LF_LDVAL type /VCXI/VSMR_LDVAL.
    data: LS_RDIM  type ZVCXI_FFSR_S_RDIM.
    data: LI_LVVAL  type /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_RDIM_IN  type ZVCXI_FFSR_TT_RDIM,
          LT_RDIM_OUT type ZVCXI_FFSR_TT_RDIM,
          LT_LTYPE    type /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to  /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to  /VCXI/IF_CKX_OBJECT.

***--------------------------------------------------------------------------------------
*** Call Super
    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

*** Get Roll Dimension Inbound and Outbound
    if ME is instance of ZIF_VCXI_FFSR_RHNDL.
      cast ZIF_VCXI_FFSR_RHNDL( ME )->GET_RDIM( importing ET_RDIM_IN  = LT_RDIM_IN
                                                          ET_RDIM_OUT = LT_RDIM_OUT ).
    endif.


***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***--------------------------------------------------------------------------------------
***   For every Production Step Limit
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).

***     Roll Diameter (Inbound)
        when 'FF_LT_DI_RDITA'.
          if LT_RDIM_IN is not initial.
            loop at LT_RDIM_IN into LS_RDIM.
              LF_LDVAL = LS_RDIM-S_RDITA-RDITA.
              LF_LDUOM = LS_RDIM-S_RDITA-RDITA_UOM.
              IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                          IF_LDVAL = LF_LDVAL
                                          IF_LDUOM = LF_LDUOM ).
            endloop.
            continue.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

***     Roll Diameter (Outbound)
        when 'FF_LT_DO_RDITA'.
          if LT_RDIM_OUT is not initial.
            loop at LT_RDIM_OUT into LS_RDIM.
              LF_LDVAL = LS_RDIM-S_RDITA-RDITA.
              LF_LDUOM = LS_RDIM-S_RDITA-RDITA_UOM.
              IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                          IF_LDVAL = LF_LDVAL
                                          IF_LDUOM = LF_LDUOM ).
            endloop.
            continue.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

***     Roll Core Inner Diameter
        when 'FF_LT_VO_CRDII'.
          break LIMIT_FOR_CORE_INNER_DIAMETER_FUTURE_STORY. "OPSCVCIS-1021
          continue.

        when others.
          continue.
      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MFSI_L.

    data: LF_LINES type        I,
          LF_INDEX type        I,
          LF_IMFXC type        ZVCXI_XCSP_IMFXC,
          LF_NEXTL type        ZVCXI_XCSP_NEXTL.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSI_L type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).


***------------------------------------------------------------------------------------------------
*** Define required Material Flow SFGs
    if ME->T_IMFXC_IN is not initial.
      move LINES( ME->T_IMFXC_IN ) to LF_LINES.
    else.
      move 1 to LF_LINES.
    endif.

    do LF_LINES times.
      move SY-INDEX to LF_INDEX.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFSI_L
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFSI_L to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFSI_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Get MF X-Connect
      read table ME->T_IMFXC_IN into LF_IMFXC index LF_INDEX.
      if SY-SUBRC eq 0.
***     Set MF X-Connect
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
        move LF_IMFXC                                    to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSI_L->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

***------------------------------------------------------------------------------------------------
***   "Next Low-Level Code" Flag
      read table ME->T_NEXTL into LF_NEXTL index LF_INDEX.
      if SY-SUBRC eq 0.
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL        to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
        move LF_NEXTL                                    to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSI_L->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

    enddo.

  endmethod.
  method ADD_SPVRE_MFSI_P.

    data: LF_LINES type        I,
          LF_INDEX type        I,
          LF_IMFXC type        ZVCXI_XCSP_IMFXC,
          LF_NEXTL type        ZVCXI_XCSP_NEXTL.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSI_P type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).


***------------------------------------------------------------------------------------------------
*** Define required Material Flow SFGs
    if ME->T_IMFXC_IN is not initial.
      move LINES( ME->T_IMFXC_IN ) to LF_LINES.
    else.
      move 1 to LF_LINES.
    endif.

    do LF_LINES times.
      move SY-INDEX to LF_INDEX.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFSI_P
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFSI_P to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Get MF X-Connect
      read table ME->T_IMFXC_IN into LF_IMFXC index LF_INDEX.
      if SY-SUBRC eq 0.
***     Set MF X-Connect
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
        move LF_IMFXC                                    to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

***------------------------------------------------------------------------------------------------
***   "Next Low-Level Code" Flag
      read table ME->T_NEXTL into LF_NEXTL index LF_INDEX.
      if SY-SUBRC eq 0.
        clear LS_PARAM.
        move ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL        to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
        move LF_NEXTL                                    to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

    enddo.

  endmethod.
  method ADD_SPVRE_MFSO_L.

    data: LF_IMFXC        type        ZVCXI_XCSP_IMFXC.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_L type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_L.
      if LR_SPVRE_MFSO_L->GET_ID( ) eq 'MFSO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSO_L
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSO_L to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSO_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
    read table ME->T_IMFXC_OUT into LF_IMFXC index 1.
    if SY-SUBRC eq 0.

***   Set MF X-Connect
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LF_IMFXC                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = LS_PARAM ).

    endif.

  endmethod.
  method ADD_SPVRE_MFSO_P.

    data: LF_IMFXC        type        ZVCXI_XCSP_IMFXC.
    data: LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_P type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_P.
      if LR_SPVRE_MFSO_P->GET_ID( ) eq 'MFSO_P'.
        delete CT_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSO_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSO_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
    read table ME->T_IMFXC_OUT into LF_IMFXC index 1.
    if SY-SUBRC eq 0.

***   Set MF X-Connect
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC          to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LF_IMFXC                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFSO_P->SET_PARAM( IS_PARAM = LS_PARAM ).

    endif.

  endmethod.
  method COMPARE.

    data: LR_BL_PSTEP    type ref to ZCL_VCXI_FFSR_BL_PSTEP.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Compare Roll Handling
    if ME          is instance of ZIF_VCXI_FFSR_RHNDL and
       LR_BL_PSTEP is instance of ZIF_VCXI_FFSR_RHNDL.
      if cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RHNDL   eq cast ZIF_VCXI_FFSR_RHNDL( LR_BL_PSTEP )->T_RHNDL and
         cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RDIM_IN eq cast ZIF_VCXI_FFSR_RHNDL( LR_BL_PSTEP )->T_RDIM_IN.
        move ABAP_TRUE  to RF_SIMILAR.
      else.
        move ABAP_FALSE to RF_SIMILAR.
        return.
      endif.
    endif.

  endmethod.
  method COPY.

    data: LR_BL_PSTEP  type ref to ZCL_VCXI_FFSR_BL_PSTEP.

*** Super Copy
    RR_BL_PSTEP  = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Copy Roll Handling
    if ME          is instance of ZIF_VCXI_FFSR_RHNDL and
       LR_BL_PSTEP is instance of ZIF_VCXI_FFSR_RHNDL.
      cast ZIF_VCXI_FFSR_RHNDL( LR_BL_PSTEP )->T_RHNDL   = cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RHNDL.
      cast ZIF_VCXI_FFSR_RHNDL( LR_BL_PSTEP )->T_RDIM_IN = cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RDIM_IN.
    endif.

  endmethod.
  method DESERIALIZE.

    data: LF_XML   type STRING.
    data: LT_RHNDL   type ZVCXI_FFSR_TT_RHNDL,
          LT_RDIM_IN type ZVCXI_FFSR_TT_RDIM.


    check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML  = LF_XML
                T_RHNDL    = LT_RHNDL
                T_RDIM_IN  = LT_RDIM_IN.

*** Set Roll Handling if available
    if ME is instance of ZIF_VCXI_FFSR_RHNDL.
      cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RHNDL   = LT_RHNDL.
      cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RDIM_IN = LT_RDIM_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method DETERMINE_MS_CORE.

*    data: LS_RHNDL  type ZVCXI_FFSR_S_RHNDL.
*
*
*    check ME is instance of ZIF_VCXI_FFSR_RHNDL.
*
**** Determine new Core only for Default (or none)
*    if CS_RHNDL-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT or
*       CS_RHNDL-S_RHSRC-RHSCO is initial.
*
*      clear CS_RHNDL-S_MS_CORE.
*
****   Set Core ID
*      move IS_WIDIM-ICORE to CS_RHNDL-S_MS_CORE-ICORE.
*
****   Set Initial Core Margin
*      move ZCL_VCXI_FFSS_CUST_RHNDL=>GET_SFG_COMAR( IF_ARBPL = IF_ARBPL
*                                                    IF_WERKS = IF_WERKS ) to CS_RHNDL-S_MS_CORE-S_COMAR.
*      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = CS_RHNDL-S_MS_CORE-S_COMAR-COMAR
*                                                         IF_UOM_IN    = CS_RHNDL-S_MS_CORE-S_COMAR-COMAR_UOM
*                                                         IF_UOM_OUT   = ME->GET_UOM_OF_PARAM( IF_PARID = 'ZVCXI_FF_COMAR' )
*                                               importing EF_VALUE_OUT = CS_RHNDL-S_MS_CORE-S_COMAR-COMAR
*                                                         EF_UOM_OUT   = CS_RHNDL-S_MS_CORE-S_COMAR-COMAR_UOM ).
*
****   Get Default Core Material
*      CS_RHNDL-S_MS_CORE-MATNR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_SFG_CORE( exporting IF_ARBPL = IF_ARBPL
*                                                                                   IF_WERKS = IF_WERKS
*                                                                                   IS_WIWID = IS_WIDIM-S_WIWID
*                                                                                   IS_COMAR = CS_RHNDL-S_MS_CORE-S_COMAR ).
*      break CHECK_AGAIN. " Check reading of classification data from Core Material to fill structure fields
*
****   Calculate Default Roll/Core
*      CS_RHNDL-S_MS_CORE-ROPCO = ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROPCO( IF_MATNR  = CS_RHNDL-S_MS_CORE-MATNR
*                                                                       IS_WIWID  = IS_WIDIM-S_WIWID
*                                                                       IS_COMAR  = CS_RHNDL-S_MS_CORE-S_COMAR
*                                                                       IF_FSHCO  = CS_RHNDL-S_MS_CORE-FSHCO
*                                                                       IF_WERKS  = IF_WERKS ).
*
****   Calculate Target Core Length
*      CS_RHNDL-S_MS_CORE-S_CLETA = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = IS_WIDIM-S_WIWID
*                                                                        IS_COMAR = CS_RHNDL-S_MS_CORE-S_COMAR
*                                                                        IF_ROPCO = CS_RHNDL-S_MS_CORE-ROPCO ).
*    else.
*
****   Set Core from Shared Core
*      if CS_RHNDL-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
*
*        if CS_RHNDL-ISHCO is not initial.
*
*          read table cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RHNDL into LS_RHNDL with key ICORE = CS_RHNDL-ISHCO.
*          move LS_RHNDL-S_MS_CORE-MATNR to CS_RHNDL-S_MS_CORE-MATNR.
*
*          if CS_RHNDL-S_MS_CORE-ROPCO is initial.
****         Set Initial Rolls/Core
*            move 1 to CS_RHNDL-S_MS_CORE-ROPCO.
*          endif.
*
****       Calculate Target Core Length
*          CS_RHNDL-S_MS_CORE-S_CLETA = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = IS_WIDIM-S_WIWID
*                                                                            IS_COMAR = CS_RHNDL-S_MS_CORE-S_COMAR
*                                                                            IF_ROPCO = CS_RHNDL-S_MS_CORE-ROPCO ).
*        endif.
*      endif.
*
*    endif.

  endmethod.
  method GET_SPVRE_MF.

***------------------------------------------------------------------------------------------------
*** Always Try to add MFSI (after Route has added MFMI)
    if ME->T_IMFXC_IN is not initial.
      move ABAP_FALSE to CF_MFI.
    endif.

*** Add MFSI Length
    if CF_MFI ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSI_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFI.
    endif.

***------------------------------------------------------------------------------------------------
*** Add MFSO Length
    if CF_MFO ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFO.
    endif.

  endmethod.
  method RECALC_RHNDL.

    data: LS_RHNDL_DFLT type ZVCXI_FFSS_S_RHNDL_DFLT,
          LS_WIDIM      type ZVCXI_FFSR_S_WIDIM,
          LS_RDIMTA     type ZVCXI_FFS_S_RDIMTA.
    data: LT_WIDIM type ZVCXI_FFSR_TT_WIDIM.
    data: LR_RHNDL     type ref to ZIF_VCXI_FFSR_RHNDL,
          LR_CUST_CORE type ref to ZCL_VCXI_FFSS_CUST_CORE.


*** Production Step supports Roll Handling
    check ME is instance of ZIF_VCXI_FFSR_RHNDL.
    LR_RHNDL ?= ME.

***--------------------------------------------------------------------------------------
*** Get Winding Dimension
    LT_WIDIM = LR_RHNDL->GET_WIDIM( ).

*** Get Work-in-Progress Default
    if IR_ARBPL is bound.
      LS_RHNDL_DFLT = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_DFLT_WIP( IF_WERKS = IR_ARBPL->GET_WERKS( )
                                                              IF_ARBPL = IR_ARBPL->F_ARBPL ).
    endif.

***--------------------------------------------------------------------------------------
*** Perform automatic updates
    loop at LR_RHNDL->T_RHNDL assigning field-symbol(<S_RHNDL>).
      if LINE_EXISTS( LT_WIDIM[ SY-TABIX ] ).
        LS_WIDIM = LT_WIDIM[ SY-TABIX ].

***     Determine new Core only for Default (or none)
        if <S_RHNDL>-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT or
           <S_RHNDL>-S_RHSRC-RHSCO is initial.

          if LS_RHNDL_DFLT-MATNR is initial.
            LS_RHNDL_DFLT-MATNR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_CORE( IF_WERKS = IR_ARBPL->GET_WERKS( )
                                                                      IF_TCORE = LS_RHNDL_DFLT-TCORE
                                                                      IS_CRDII = LS_RHNDL_DFLT-S_CRDII
                                                                      IS_CRWMI = LS_RHNDL_DFLT-S_CRWMI
                                                                      IS_CRWMA = LS_RHNDL_DFLT-S_CRWMA
                                                                      IS_WIWID = LS_WIDIM-S_WIWID
                                                                      IS_COMAR = LS_RHNDL_DFLT-S_COMAR ).
          endif.

***       Fill Core based on Default
          <S_RHNDL>-S_MS_CORE = value #( MATNR   = LS_RHNDL_DFLT-MATNR
                                         S_COMAR = LS_RHNDL_DFLT-S_COMAR
                                         ROPCO   = ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_ROPCO( IF_MATNR  = LS_RHNDL_DFLT-MATNR
                                                                                         IS_WIWID  = LS_WIDIM-S_WIWID
                                                                                         IS_COMAR  = LS_RHNDL_DFLT-S_COMAR
                                                                                         IF_FSHCO  = <S_RHNDL>-S_MS_CORE-FSHCO
                                                                                         IF_WERKS  = IR_ARBPL->GET_WERKS( ) )
                                       ).
        endif.

***     Get Core Detials
        if <S_RHNDL>-S_MS_CORE-MATNR is not initial.
          LR_CUST_CORE = ZCL_VCXI_FFSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = <S_RHNDL>-S_MS_CORE-MATNR
                                                                     IF_WERKS = IR_ARBPL->GET_WERKS( ) ).
          data(LS_CRDIO) = LR_CUST_CORE->GET_CRDIO( ).
          data(LS_CRWGT) = LR_CUST_CORE->GET_CRWGT( IS_CLETA = ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_CLETA( IS_WIWID = LS_WIDIM-S_WIWID
                                                                                                     IS_COMAR = <S_RHNDL>-S_MS_CORE-S_COMAR
                                                                                                     IF_ROPCO = 1 ) ).
        endif.

***     Calculate Target Core Length
        <S_RHNDL>-S_MS_CORE-S_CLETA = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = LS_WIDIM-S_WIWID
                                                                           IS_COMAR = <S_RHNDL>-S_MS_CORE-S_COMAR
                                                                           IF_ROPCO = <S_RHNDL>-S_MS_CORE-ROPCO ).


***     Determine new Roll Dimensions for Default
        if <S_RHNDL>-S_RHSRC-RHSDI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT.
          LS_RDIMTA = LS_RHNDL_DFLT-S_RDIMTA.
        else.
***       Determine Target Dimension
          LS_RDIMTA = value #( RDMTA   = <S_RHNDL>-RDMTA
                               S_RDVTA = switch #( <S_RHNDL>-RDMTA when 'D' then value #( RDVTA     = <S_RHNDL>-RDITA
                                                                                          RDVTA_UOM = <S_RHNDL>-RDITA_UOM )
                                                                   when 'L' then value #( RDVTA     = <S_RHNDL>-RLETA
                                                                                          RDVTA_UOM = <S_RHNDL>-RLETA_UOM )
                                                                   when 'W' then value #( RDVTA     = <S_RHNDL>-RWGTA
                                                                                          RDVTA_UOM = <S_RHNDL>-RWGTA_UOM )
                                                                   when 'O' then value #( RDVTA     = <S_RHNDL>-RLEOF )
                                                 ) ).
        endif.

***     Recalculate Roll Dimensions
        <S_RHNDL>-RDMTA = LS_RDIMTA-RDMTA.
        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_BY_RDIMTA( exporting IS_RDIMTA = LS_RDIMTA
                                                            IS_WIDIM  = LS_WIDIM-S_WIDIM
                                                            IS_CRDIO  = LS_CRDIO
                                                            IS_CRWGT  = LS_CRWGT
                                                            IS_RLEOP  = <S_RHNDL>-S_RLEOP
                                                  importing ES_RDITA  = <S_RHNDL>-S_RDITA
                                                            ES_RLETA  = <S_RHNDL>-S_RLETA
                                                            ES_RWGTA  = <S_RHNDL>-S_RWGTA
                                                            EF_RLEOF  = <S_RHNDL>-RLEOF ).

***     Set Core Consumption
        if <S_RHNDL>-ROPCO ne 0.
          <S_RHNDL>-S_MS_CORE-AVGCO = <S_RHNDL>-NOOUT.
        else.
          <S_RHNDL>-S_MS_CORE-AVGCO = 0.
        endif.
        <S_RHNDL>-S_MS_CORE-AVGCO_UOM = ME->GET_UOM_OF_PARAM( IF_PARID = ZCL_VCXI_FFSP_PR_MC_CORE=>C_PARID_AVGCO_P ).
        <S_RHNDL>-S_MS_CORE-AVGCP     = <S_RHNDL>-RLETA.
        <S_RHNDL>-S_MS_CORE-AVGCP_UOM = <S_RHNDL>-RLETA_UOM.

***--------------------------------------------------------------------------------------
      else.
***     Remove Roll Handling Info where no Winding Dimension are available
        delete LR_RHNDL->T_RHNDL.
      endif.
    endloop.

  endmethod.
  method RESTORE_ON_UPDATE.

    data: LS_RHNDL     type        ZVCXI_FFSR_S_RHNDL.
    data: LR_BL_PSTEP  type ref to ZCL_VCXI_FFSR_BL_PSTEP,
          LR_RHNDL_ME  type ref to ZIF_VCXI_FFSR_RHNDL,
          LR_RHNDL_OLD type ref to ZIF_VCXI_FFSR_RHNDL.
    field-symbols: <S_RHNDL>  type ZVCXI_FFSR_S_RHNDL.


***--------------------------------------------------------------------------------------
*** Super Restore
    SUPER->RESTORE_ON_UPDATE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check IR_BL_PSTEP is bound.
    move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
    if ME          is instance of ZIF_VCXI_FFSR_RHNDL and
       LR_BL_PSTEP is instance of ZIF_VCXI_FFSR_RHNDL.
      LR_RHNDL_ME  ?= ME.
      LR_RHNDL_OLD ?= LR_BL_PSTEP.

***   Restore Roll Handling if set by User
      if LINES( LR_RHNDL_OLD->T_RHNDL ) eq LINES( LR_RHNDL_ME->T_RHNDL ).

***     Process each Roll Handling line separately
        loop at LR_RHNDL_ME->T_RHNDL assigning <S_RHNDL>.
          read table LR_RHNDL_OLD->T_RHNDL into LS_RHNDL index SY-TABIX.

***       Keep Core Information if set by User
          if LS_RHNDL-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
            move LS_RHNDL-S_MS_CORE to <S_RHNDL>-S_MS_CORE.
          endif.

***       Keep Dimensions Information if set by User
          if LS_RHNDL-S_RHSRC-RHSDI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
            move LS_RHNDL-S_RDITA to <S_RHNDL>-S_RDITA.
            move LS_RHNDL-S_RLETA to <S_RHNDL>-S_RLETA.
          endif.

***       Keep Winding Information if set by User
          if LS_RHNDL-S_RHSRC-RHSWI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
            move LS_RHNDL-RWSID to <S_RHNDL>-RWSID.
            move LS_RHNDL-RWDIR to <S_RHNDL>-RWDIR.
            move LS_RHNDL-EYEMP to <S_RHNDL>-EYEMP.
          endif.

        endloop.
      else.
***     If no Roll Handling is defined restore completely
        if LR_RHNDL_ME->T_RHNDL is initial.
          move LR_RHNDL_OLD->T_RHNDL to LR_RHNDL_ME->T_RHNDL.
        endif.
      endif.
    endif.

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Get Roll Handling if available
    if ME is instance of ZIF_VCXI_FFSR_RHNDL.
      data(LT_RHNDL)   = cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RHNDL.
      data(LT_RDIM_IN) = cast ZIF_VCXI_FFSR_RHNDL( ME )->T_RDIM_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Serialize
    call transformation ID
         source SUPER_XML  = RF_XML
                T_RHNDL    = LT_RHNDL
                T_RDIM_IN  = LT_RDIM_IN
         result xml RF_XML.

  endmethod.
  method SET_RHNDL.

    data: LR_RHNDL type ref to ZIF_VCXI_FFSR_RHNDL.


    check ME is instance of ZIF_VCXI_FFSR_RHNDL.
    LR_RHNDL ?= ME.

    check IT_RHNDL ne LR_RHNDL->T_RHNDL.

*** Set Roll Handing Infos as provided
    LR_RHNDL->T_RHNDL = IT_RHNDL.

*** Perform automatic updates
    if IR_RTE_ARBPL is bound.
      ME->RECALC_RHNDL( IR_ARBPL = IR_RTE_ARBPL->R_ARBPL ).
    endif.

  endmethod.
