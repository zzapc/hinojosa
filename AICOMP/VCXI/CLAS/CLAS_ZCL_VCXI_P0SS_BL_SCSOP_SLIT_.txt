
class ZCL_VCXI_P0SS_BL_SCSOP_SLIT definition
  public
  inheriting from ZCL_VCXI_P0SS_BL_SCSOP
  create public .

public section.

  constants C_SCSOP_SLIT_SCORE type ZVCXI_P0S_SCSOP value 'SLIT_SCORE'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    raising
      /VCXI/CX_CKX .
protected section.

  methods CALC_SCSTR
    redefinition .
  methods GET_DIVDI
    redefinition .
  methods READ_SHT_DIM
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_BL_SCSOP_SLIT definition
class ZCL_VCXI_P0SS_BL_SCSOP_SLIT implementation.
method CALC_SCSTR.

  data:          LF_NOUPT          type        ZVCXI_P0SS_NOUPT,
                 LF_PARID_TRIM     type        /VCXI/VKS_PARID.
  data:          LS_PCDIM          type        ZVCXI_P0SP_S_PCDIM,
                 LS_SCSTR_CALC     type        ZVCXI_P0SS_S_SCSTR_CALC,
                 LS_TRIRB          type        ZVCXI_P0SS_S_TRIRB,
                 LS_TRILT          type        ZVCXI_P0SS_S_TRILT.
  data:          LT_SCSTR_CALC     type        ZVCXI_P0SS_TT_SCSTR_CALC.
  data:          LR_SHTDIM         type ref to ZIF_VCXI_P0SS_SHTDIM.

  LR_SHTDIM = ME->GET_SHTDIM_PRVDR( IT_PRVDR = IT_PRVDR ).
  check LR_SHTDIM is bound.

***------------------------------------------------------------------------------------------------
*** 1 Get Values of Scores
  LT_SCSTR_CALC = ME->GET_SCORES_OF_SCSTR( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** If we do not handle Scores -> just take the Sheet Length or Width as absolute value
  if  ME->F_CSCOR is initial.
    clear: LS_SCSTR_CALC, LT_SCSTR_CALC.
*** Save Values
    case ME->F_SHTDI.
      when 'A'.
        LS_PCDIM = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NET ).
        move LS_PCDIM-PCWID                         to LS_SCSTR_CALC-SCORP.
        move LS_PCDIM-PCWID_UOM                     to LS_SCSTR_CALC-SCORP_UOM.

      when 'B'.
        LS_PCDIM = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_NET ).
        move LS_PCDIM-PCLEN                         to LS_SCSTR_CALC-SCORP.
        move LS_PCDIM-PCLEN_UOM                     to LS_SCSTR_CALC-SCORP_UOM.
    endcase.

    append LS_SCSTR_CALC to LT_SCSTR_CALC.
  endif.

***------------------------------------------------------------------------------------------------
*** 2 Sort Values
  sort LT_SCSTR_CALC by SCORP.

***------------------------------------------------------------------------------------------------
*** 3 Add Ups (in case of cutting)
  if ME->F_CSCOR is not initial.
    case ME->F_SHTDI.
      when 'A'.
        LF_NOUPT = LR_SHTDIM->GET_NOUPW( ).
      when 'B'.
        LF_NOUPT = LR_SHTDIM->GET_NOUPL( ).
    endcase.

    ME->ADD_UPS( exporting IF_NOUPT      = LF_NOUPT
                 changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).
  endif.

***------------------------------------------------------------------------------------------------
*** 4 Get the production trim side or length and add it
  case ME->F_SHTDI.
    when 'A'.
***     Load Side Trim
      LF_PARID_TRIM = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPS.
    when 'B'.
***     Load Length Trim
      LF_PARID_TRIM = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPL.
  endcase.

  IR_PR_SCSTR_MGR->GET_TRIM( exporting IF_PARID    = LF_PARID_TRIM
                             importing ES_TRILT_IO = LS_TRILT
                                       ES_TRIRB_IO = LS_TRIRB ).

  ME->ADD_TRIM( exporting IS_TRILT      = LS_TRILT
                          IS_TRIRB      = LS_TRIRB
                changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).

***------------------------------------------------------------------------------------------------
*** 5 Check if we need a division on the right dimension if we have Scores
  case ME->F_SHTDI.
    when 'A'.
      LF_NOUPT = LR_SHTDIM->GET_DUPSW( ).
    when 'B'.
      LF_NOUPT = LR_SHTDIM->GET_DUPSL( ).
  endcase.

  if ME->F_DIVDI is not initial.
    ME->ADD_UPS( exporting IF_NOUPT      = LF_NOUPT
                           IF_TSCOR_CUT  = IR_PR_SCSTR_MGR->F_TSCOR_CUT
                 changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).
  else.
    ME->ADD_UPS( exporting IF_NOUPT      = LF_NOUPT
                 changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).
  endif.

***------------------------------------------------------------------------------------------------
*** 6 Get the right division Trim and add it to the absolute value then add the Cutting Score type
  case ME->F_SHTDI.
    when 'A'.
***   Load Division Trim on Width
      LF_PARID_TRIM = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIW.
    when 'B'.
***   Load Division Trim on Length
      LF_PARID_TRIM = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIL.
  endcase.

  IR_PR_SCSTR_MGR->GET_TRIM( exporting IF_PARID    = LF_PARID_TRIM
                             importing ES_TRILT_IO = LS_TRILT
                                       ES_TRIRB_IO = LS_TRIRB ).

  if ME->F_DIVDI is not initial.
    ME->ADD_TRIM( exporting IS_TRILT      = LS_TRILT
                            IS_TRIRB      = LS_TRIRB
                            IF_TSCOR_CUT  = IR_PR_SCSTR_MGR->F_TSCOR_CUT
                  changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).
  else.
    ME->ADD_TRIM( exporting IS_TRILT      = LS_TRILT
                            IS_TRIRB      = LS_TRIRB
                  changing  CT_SCSTR_CALC = LT_SCSTR_CALC ).
  endif.

***------------------------------------------------------------------------------------------------
*** 7 Define the right Score String Values ( SCSTR_VALUE ) and return the Hole string
  RF_SCSTR = ME->BUILD_SCSTR( IF_SSTRC      = IR_PR_SCSTR_MGR->F_SSTRC
                              IT_SCSTR_CALC = LT_SCSTR_CALC ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_SHTDI = IF_SHTDI
                      IF_CSCOR = IF_CSCOR ).

*** Set Score Operation
  move C_SCSOP_SLIT_SCORE to ME->F_SCSOP.

endmethod.
method GET_DIVDI.

  data: LR_SHTDIM type ref to ZIF_VCXI_P0SS_SHTDIM.

***------------------------------------------------------------------------------------------------
*** Set Division Dimension based on Sheet Dimension
  LR_SHTDIM = ME->GET_SHTDIM_PRVDR( IT_PRVDR = IT_PRVDR ).
  check LR_SHTDIM is bound.

  case ME->F_SHTDI.
    when 'B'.
      check LR_SHTDIM->GET_DUPSL( ) gt 1.
      RF_DIVDI = 'L'.
    when 'A'.
      check LR_SHTDIM->GET_DUPSW( ) gt 1.
      RF_DIVDI = 'W'.
  endcase.

endmethod.
method READ_SHT_DIM.

  data:  LF_SDIVI     type        ZVCXI_P0SS_SDIVI.
  data:  LS_PCDIM_IN  type        ZVCXI_P0SP_S_PCDIM.
  data:  LR_SHTDIM    type ref to ZIF_VCXI_P0SS_SHTDIM.

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension Before First or Second Divison
  LR_SHTDIM = ME->GET_SHTDIM_PRVDR( IT_PRVDR = IT_PRVDR ).
  check LR_SHTDIM is bound.

  move LR_SHTDIM->GET_SDIVI( ) to LF_SDIVI.

  if ME->F_DIVDI is not initial.
    if ( LF_SDIVI    eq 'L'   and
         ME->F_SHTDI eq 'B' ) or
       ( LF_SDIVI    eq 'W'   and
         ME->F_SHTDI eq 'A' ).
      LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFDIV ).
    else.
      LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSDIV ).
    endif.

  else.
    if LF_SDIVI    eq 'L'   and
       ME->F_SHTDI eq 'A'.
      LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFDIV ).

    elseif LF_SDIVI    eq 'W'   and
           ME->F_SHTDI eq 'B'.
      LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSDIV ).

    elseif LR_SHTDIM->GET_SDIVI( ) is initial.
      if ME->F_SHTDI eq 'A'.
        LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFDIV ).
      elseif ME->F_SHTDI eq 'B'.
        LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BSDIV ).
      endif.

    else.
      LS_PCDIM_IN = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_ASDIV ).
    endif.
  endif.

  move LS_PCDIM_IN-PCLEN     to ES_SHTLE-SHTLE.
  move LS_PCDIM_IN-PCLEN_UOM to ES_SHTLE-SHTLE_UOM.

  move LS_PCDIM_IN-PCWID     to ES_SHTWI-SHTWI.
  move LS_PCDIM_IN-PCWID_UOM to ES_SHTWI-SHTWI_UOM.

endmethod.
