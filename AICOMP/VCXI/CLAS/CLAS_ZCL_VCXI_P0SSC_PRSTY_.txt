
class ZCL_VCXI_P0SSC_PRSTY definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  aliases F_TOOBJ
    for /VCXI/IF_CKX_OBJECT~F_TOOBJ .
  aliases CHECK_IS_LOCKED
    for /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED .
  aliases DO_LOCK
    for /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK .
  aliases DO_UNLOCK
    for /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK .
  aliases GET_ACTIONS
    for /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS .
  aliases GET_DESCR
    for /VCXI/IF_CKX_OBJECT~GET_DESCR .
  aliases GET_DESCR_ALL
    for /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL .
  aliases GET_GUID
    for /VCXI/IF_CKX_OBJECT~GET_GUID .
  aliases GET_ID
    for /VCXI/IF_CKX_OBJECT~GET_ID .
  aliases GET_INFO
    for /VCXI/IF_CKX_OBJECT_CD~GET_INFO .
  aliases GET_INSTANCE
    for /VCXI/IF_CKX_OBJECT~GET_INSTANCE .
  aliases GET_LOG
    for /VCXI/IF_CKX_OBJECT~GET_LOG .
  aliases HANDLE_ACTION
    for /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION .
  aliases IS_LOCKED
    for /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED .
  aliases CHANGED
    for /VCXI/IF_CKX_OBJECT~CHANGED .
  aliases CREATED
    for /VCXI/IF_CKX_OBJECT~CREATED .

  constants C_ACTVT_CREATE type ACTIV_AUTH value '01' ##NO_TEXT.
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06' ##NO_TEXT.
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03' ##NO_TEXT.
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02' ##NO_TEXT.
  constants C_CDOCL_PRSTY type CDOBJECTCL value 'ZVCXI_P0SSC_PS' ##NO_TEXT.
  constants C_DIMEN_LENGTH type ZVCXI_P0S_DIMEN value 'L' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_P0S_DIMEN value 'W' ##NO_TEXT.
  constants C_FCODE_PRSTY_CHECK type UI_FUNC value 'CHECK_S' ##NO_TEXT.
  constants C_FCODE_PRSTY_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_PRSTY_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_PRSTY_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_TOOBJ_PRSTY type /VCXI/CKX_TOOBJ value 'PRSTY' ##NO_TEXT.
  data F_CCCORACTIV type CCCORACTIV read-only .
  data F_CHANGED type ABAP_BOOL read-only value ABAP_FALSE ##NO_TEXT.
  data F_DELETED type ABAP_BOOL read-only value ABAP_FALSE ##NO_TEXT.
  data R_PRSTY_MANTU_E type ref to OBJECT read-only .
  data S_PRSTY type ZVCXI_P0SSC_S_PRSTY read-only .
  data T_DESCR type /VCXI/CKX_TT_DESCR read-only .
  data T_PRSTY_DELEM type ZVCXI_P0SSC_TT_PRSTY_DELEM read-only .
  data T_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM read-only .
  data T_PRSTY_JOITY type ZVCXI_P0SSC_TT_PRSTY_JOITY read-only .
  data T_PRSTY_MANTU type ZVCXI_P0SSC_TT_PRSTY_MANTU read-only .
  data T_PRSTY_MANTU_F type ZVCXI_P0SSC_TT_PRSTY_MANTU_F read-only .
  data T_PRSTY_PTYPE type ZVCXI_P0SSC_TT_PRSTY_PTYPE read-only .
  data T_PRSTY_SCORE type ZVCXI_P0SSC_TT_PRSTY_SCORE read-only .

  methods ADD_DELEM
    importing
      !IS_PRSTY_DELEM type ZVCXI_P0SSC_S_PRSTY_DELEM
    raising
      /VCXI/CX_CKX .
  methods ADD_FOLDM
    importing
      !IS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM
    raising
      /VCXI/CX_CKX .
  methods ADD_JOITY
    importing
      !IS_PRSTY_JOITY type ZVCXI_P0SSC_S_PRSTY_JOITY
    raising
      /VCXI/CX_CKX .
  methods ADD_MANTU
    importing
      !IS_PRSTY_MANTU type ZVCXI_P0SSC_S_PRSTY_MANTU
      !IS_PRSTY_MANTU_E type ANY optional
    returning
      value(RF_GMATU) type ZVCXI_P0SSC_GMATU
    raising
      /VCXI/CX_CKX .
  methods ADD_PTYPE
    importing
      !IS_PRSTY_PTYPE type ZVCXI_P0SSC_S_PRSTY_PTYPE
    raising
      /VCXI/CX_CKX .
  methods ADD_SCORE
    importing
      !IS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IR_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY optional
      !IF_ID type ZVCXI_P0SS_TPRST optional
    raising
      /VCXI/CX_CKX .
  methods CHECK_KORRNR
    importing
      !IF_KORRNR type TRKORR
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods COPY
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY_NEW type ZVCXI_P0SS_PRSTY
      !IF_PRSTY_OLD type ZVCXI_P0SS_PRSTY
    returning
      value(RR_PRSTY) type ref to ZCL_VCXI_P0SSC_PRSTY
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
    returning
      value(RR_PRSTY) type ref to ZCL_VCXI_P0SSC_PRSTY
    raising
      /VCXI/CX_CKX .
  class-methods DECRYPT_GUID
    importing
      !IF_GUID type /VCXI/CKX_GUID
    exporting
      !EF_TPRST type ZVCXI_P0SS_TPRST
      !EF_PRSTY type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods DELETE_DELEM
    importing
      !IS_PRSTY_DELEM type ZVCXI_P0SSC_S_PRSTY_DELEM
    raising
      /VCXI/CX_CKX .
  methods DELETE_DELEM_ALL
    raising
      /VCXI/CX_CKX .
  methods DELETE_FOLDM
    importing
      !IS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM
    raising
      /VCXI/CX_CKX .
  methods DELETE_JOITY
    importing
      !IS_PRSTY_JOITY type ZVCXI_P0SSC_S_PRSTY_JOITY
    raising
      /VCXI/CX_CKX .
  methods DELETE_MANTU
    importing
      !IF_GMATU type ZVCXI_P0SSC_GMATU
    raising
      /VCXI/CX_CKX .
  methods DELETE_MANTU_ALL
    raising
      /VCXI/CX_CKX .
  methods DELETE_PTYPE
    importing
      !IS_PRSTY_PTYPE type ZVCXI_P0SSC_S_PRSTY_PTYPE
    raising
      /VCXI/CX_CKX .
  methods DELETE_SCORE
    importing
      !IS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE
    raising
      /VCXI/CX_CKX .
  methods DELETE_SCORE_ALL
    raising
      /VCXI/CX_CKX .
  class-methods ENCRYPT_GUID
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  class-methods GET_CSCOR
    importing
      !IF_DIMEN type ZVCXI_P0S_DIMEN
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_CSCOR) type ZVCXI_P0SS_CSCOR
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_FOLDM
    importing
      !IF_TFOLD type ZVCXI_P0SS_TFOLD
      !IF_ORIEN type ZVCXI_P0S_ORIEN
    returning
      value(RT_PRSTY_FOLDM) type ZVCXI_P0SSC_TT_PRSTY_FOLDM
    raising
      /VCXI/CX_CKX .
  methods SAVE
    importing
      !IF_KORRNR type TRKORR optional
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods SET_FCUSD
    importing
      !IF_FCUSD type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods UPDATE_DELEM
    importing
      !IS_PRSTY_DELEM type ZVCXI_P0SSC_S_PRSTY_DELEM
    raising
      /VCXI/CX_CKX .
  methods UPDATE_FOLDM
    importing
      !IS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM
    raising
      /VCXI/CX_CKX .
  methods UPDATE_MANTU
    importing
      !IS_PRSTY_MANTU_F type ZVCXI_P0SSC_S_PRSTY_MANTU_F
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SCORE
    importing
      !IS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE
    raising
      /VCXI/CX_CKX .
protected section.

  data F_TPRST_DESCR type /VCXI/CKX_DESCR .
  data F_TRANS_REQ type ABAP_BOOL .
  data F_WRITE_TR type ABAP_BOOL .
  data T_GMATU_OLD type ZVCXI_P0SSC_TT_GMATU .
  class-data:
    T_TC030 type sorted table of ZVCXI_P0S_TC030 with unique key CSCOR .
  class-data:
    T_TC030T type sorted table of ZVCXI_P0S_TC030T with unique key CSCOR LANGU .

  methods CONSTRUCTOR
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SSC_PRSTY definition
class ZCL_VCXI_P0SSC_PRSTY implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

  data:  LF_DISABLED         type CUA_ACTIVE,
         LF_TEXT             type GUI_TEXT.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Delete Add-on Type
  if ME->F_CCCORACTIV ne 2.          "Customizing in this client cannot be changed
    move ABAP_FALSE to LF_DISABLED.
  else.
    move ABAP_TRUE  to LF_DISABLED.
  endif.

***--------------------------------------------------------------------------------------
*** Delete Product Style
  clear: LF_TEXT.
  concatenate 'Delete'(F01) ME->F_TPRST_DESCR into LF_TEXT separated by SPACE.
  RR_MENU->ADD_FUNCTION( FCODE       = ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_DELETE
                         TEXT        = LF_TEXT
                         DISABLED    = LF_DISABLED ).

*** Check Product Style
  clear: LF_TEXT.
  concatenate 'Check'(F02) ME->F_TPRST_DESCR into LF_TEXT separated by SPACE.
  RR_MENU->ADD_FUNCTION( FCODE       = ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_CHECK
                         TEXT        = LF_TEXT
                         DISABLED    = ABAP_FALSE ).

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_P0SSC_PRSTY=>C_FCODE_PRSTY_CHECK.
      ME->HANDLE_CHECK( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move C_CDOCL_PRSTY   to EF_CDOCL.
  move ME->GET_GUID( ) to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_P0SSC_PRSTY=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_P0SSC_PRSTY=>C_ACTVT_EDIT
                                    IR_PRSTY = ME ).

***--------------------------------------------------------------------------------------
*** Customizing Changes allowed in Client
  check ME->F_CCCORACTIV ne '2'.

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LT_DESCR type /VCXI/CKX_TT_DESCR.

  try.
      LT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ).
      RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
    catch /VCXI/CX_CKX.
      clear RF_DESCR.
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  move ME->T_DESCR to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  RF_GUID = ZCL_VCXI_P0SSC_PRSTY=>ENCRYPT_GUID( IF_TPRST = ME->S_PRSTY-TPRST
                                                IF_PRSTY = ME->S_PRSTY-PRSTY ).

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->S_PRSTY-PRSTY to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_TPRST    type        ZVCXI_P0SS_TPRST,
         LF_PRSTY    type        ZVCXI_P0SS_PRSTY.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_PRSTY    type ref to ZCL_VCXI_P0SSC_PRSTY.

  check IF_GUID is not initial.

  read table ZCL_VCXI_P0SSC_PRSTY=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.

*** Decrypt GUID into Product Style Type and Product Style
    ZCL_VCXI_P0SSC_PRSTY=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                        importing EF_TPRST = LF_TPRST
                                                  EF_PRSTY = LF_PRSTY ).

*** Get new Instance
    create object LR_PRSTY
      exporting
        IF_TPRST = LF_TPRST
        IF_PRSTY = LF_PRSTY.

    move LR_PRSTY ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method ADD_DELEM.

  field-symbols: <S_PRSTY_DELEM> type ZVCXI_P0SSC_S_PRSTY_DELEM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_DELEM assigning <S_PRSTY_DELEM> with key TPRST = IS_PRSTY_DELEM-TPRST
                                                                  PRSTY = IS_PRSTY_DELEM-PRSTY
                                                                  IELEM = IS_PRSTY_DELEM-IELEM.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PRSTY_DELEM assigning <S_PRSTY_DELEM>.
    move-corresponding IS_PRSTY_DELEM to <S_PRSTY_DELEM>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_FOLDM.

  field-symbols: <S_PRSTY_FOLDM> type ZVCXI_P0SSC_S_PRSTY_FOLDM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_FOLDM assigning <S_PRSTY_FOLDM> with key TPRST = IS_PRSTY_FOLDM-TPRST
                                                                  PRSTY = IS_PRSTY_FOLDM-PRSTY
                                                                  TFOLD = IS_PRSTY_FOLDM-TFOLD
                                                                  ORIEN = IS_PRSTY_FOLDM-ORIEN
                                                                  DIMEN = IS_PRSTY_FOLDM-DIMEN
                                                                  IELEM = IS_PRSTY_FOLDM-IELEM.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PRSTY_FOLDM assigning <S_PRSTY_FOLDM>.
    move-corresponding IS_PRSTY_FOLDM to <S_PRSTY_FOLDM>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_JOITY.

  field-symbols: <S_PRSTY_JOITY> type ZVCXI_P0SSC_S_PRSTY_JOITY.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_JOITY assigning <S_PRSTY_JOITY> with key TPRST = IS_PRSTY_JOITY-TPRST
                                                                  PRSTY = IS_PRSTY_JOITY-PRSTY
                                                                  JOITY = IS_PRSTY_JOITY-JOITY.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PRSTY_JOITY assigning <S_PRSTY_JOITY>.
    move-corresponding IS_PRSTY_JOITY to <S_PRSTY_JOITY>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_MANTU.

  data:          LF_GMATU          type        ZVCXI_P0SSC_GMATU.
  data:          LS_PRSTY_SCORE    type        ZVCXI_P0SSC_S_PRSTY_SCORE.
  data:          LR_PRSTY_MANTU_E  type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E.
  field-symbols: <S_PRSTY_MANTU>   type        ZVCXI_P0SSC_S_PRSTY_MANTU,
                 <S_PRSTY_MANTU_F> type        ZVCXI_P0SSC_S_PRSTY_MANTU_F.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_MANTU assigning <S_PRSTY_MANTU> with key GMATU = IS_PRSTY_MANTU-GMATU.

  if SY-SUBRC ne 0.

*** Get GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = LF_GMATU.

    move LF_GMATU to RF_GMATU.

*** Add Manual Take-up
    append initial line to ME->T_PRSTY_MANTU assigning <S_PRSTY_MANTU>.
    move-corresponding IS_PRSTY_MANTU to <S_PRSTY_MANTU>.
    move ME->S_PRSTY-TPRST            to <S_PRSTY_MANTU>-TPRST.
    move ME->S_PRSTY-PRSTY            to <S_PRSTY_MANTU>-PRSTY.
    move LF_GMATU                     to <S_PRSTY_MANTU>-GMATU.

*** Add Manual Take-up Factor
    loop at ME->T_PRSTY_SCORE into LS_PRSTY_SCORE
      where BOXPA eq IS_PRSTY_MANTU-BOXPA
        and PANOR eq IS_PRSTY_MANTU-PANOR.
      append initial line to ME->T_PRSTY_MANTU_F assigning <S_PRSTY_MANTU_F>.
      move LF_GMATU                     to <S_PRSTY_MANTU_F>-GMATU.
      move LS_PRSTY_SCORE-CSCOR         to <S_PRSTY_MANTU_F>-CSCOR.
      move LS_PRSTY_SCORE-NSCOR         to <S_PRSTY_MANTU_F>-NSCOR.
    endloop.

*** Add Manual Take-up Extended Key
    if ME->R_PRSTY_MANTU_E is bound and
       IS_PRSTY_MANTU_E is supplied.
      try.
          move ME->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.
        LR_PRSTY_MANTU_E->ADD( IF_GMATU   = LF_GMATU
                               IS_MANTU_E = IS_PRSTY_MANTU_E ).
      endif.

    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_PTYPE.

  field-symbols: <S_PRSTY_PTYPE> type ZVCXI_P0SSC_S_PRSTY_PTYPE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_PTYPE assigning <S_PRSTY_PTYPE> with key TPRST = IS_PRSTY_PTYPE-TPRST
                                                                  PRSTY = IS_PRSTY_PTYPE-PRSTY
                                                                  PTYPE = IS_PRSTY_PTYPE-PTYPE.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PRSTY_PTYPE assigning <S_PRSTY_PTYPE>.
    move-corresponding IS_PRSTY_PTYPE to <S_PRSTY_PTYPE>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_SCORE.

  field-symbols: <S_PRSTY_SCORE> type ZVCXI_P0SSC_S_PRSTY_SCORE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_SCORE assigning <S_PRSTY_SCORE> with key TPRST = IS_PRSTY_SCORE-TPRST
                                                                  PRSTY = IS_PRSTY_SCORE-PRSTY
                                                                  BOXPA = IS_PRSTY_SCORE-BOXPA
                                                                  PANOR = IS_PRSTY_SCORE-PANOR
                                                                  CSCOR = IS_PRSTY_SCORE-CSCOR
                                                                  NSCOR = IS_PRSTY_SCORE-NSCOR.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PRSTY_SCORE assigning <S_PRSTY_SCORE>.
    move-corresponding IS_PRSTY_SCORE to <S_PRSTY_SCORE>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method CHECK_AUTH.

  data:  LF_ID     type /VCXI/CKX_ID,
         LF_PRSTY  type /VCXI/CKX_ID,
         LF_MSGV1  type SYMSGV,
         LF_MSGV2  type SYMSGV,
         LF_MSGV3  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Get Product Style Type (& Product Style ID)
  if IR_PRSTY is bound.
    move IR_PRSTY->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_PRSTY.
    move IR_PRSTY->S_PRSTY-TPRST                 to LF_ID.
  elseif IF_ID is not initial.
    move IF_ID to LF_ID.
  endif.

****--------------------------------------------------------------------------------------
**** Check Authority for Product Style Customizing
  if LF_ID is not initial.
    authority-check object 'Z_P0_PRSTY'
             id 'ACTVT'       field IF_ACTVT
             id 'Z_P0_TPRST'  field LF_ID.
  else.
    authority-check object 'Z_P0_PRSTY'
             id 'ACTVT'       field IF_ACTVT
             id 'Z_P0_TPRST'  dummy.
  endif.

***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

*** No authorization to & & &.
    move LF_ID to LF_MSGV2.
    move LF_PRSTY to LF_MSGV3.
    raise exception type /VCXI/CX_CKX
       exporting
         F_MSGTY = 'E'
         F_MSGID = 'ZVCXI_P0SSC'
         F_MSGNO = '095'
         F_MSGV1 = LF_MSGV1
         F_MSGV2 = LF_MSGV2
         F_MSGV3 = LF_MSGV3.
  endif.

endmethod.
  method CHECK_KORRNR.

    data: LT_E071  type table of E071,
          LT_E071K type table of E071K.


    if ME->F_TRANS_REQ eq ABAP_TRUE.
      if IF_KORRNR is initial.
***     Specify a request
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'TK'
                                              IF_MSGNO = '136' ).
      endif.

***   Check Transport
      call function 'TRINT_ORDER_CHOICE'
        exporting
          WI_SIMULATION          = 'X'
          WI_CATEGORY            = 'CUST'
          WI_ORDER               = IF_KORRNR
          WI_SUPPRESS_DIALOG     = 'X'
        tables
          WT_E071                = LT_E071
          WT_E071K               = LT_E071K
        exceptions
          NO_CORRECTION_SELECTED = 1
          DISPLAY_MODE           = 2
          OBJECT_APPEND_ERROR    = 3
          RECURSIVE_CALL         = 4
          WRONG_ORDER_TYPE       = 5
          others                 = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

    select * into table T_TC030
             from ZVCXI_P0S_TC030.

    select * into table T_TC030T
             from ZVCXI_P0S_TC030T
            where LANGU eq SY-LANGU.

  endmethod.
method CONSTRUCTOR.

  data:          LF_CLAEK      type        ZVCXI_P0SS_CLAEK.
  data:          LR_CX_CKX     type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***------------------------------------------------------------------------------------------------
***   Set Product Style Type , Product Style and Type of Object
      move IF_TPRST      to ME->S_PRSTY-TPRST.
      move IF_PRSTY      to ME->S_PRSTY-PRSTY.
      move C_TOOBJ_PRSTY to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***----------------------------------------------------------------------------
***   Load Extended Key
      select single CLAEK
             into LF_CLAEK
             from ZVCXI_P0S_TC300
            where TPRST eq ME->S_PRSTY-TPRST.

      if LF_CLAEK is not initial.
        create object ME->R_PRSTY_MANTU_E
               type (LF_CLAEK).
      endif.

***   Load from DB for existing Flutes
      if IF_NEW eq ABAP_FALSE.
        ME->LOAD_FROM_DB( ).
      endif.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to ZCL_VCXI_P0SSC_PRSTY=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
      move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.

***------------------------------------------------------------------------------------------------
***   Get System/Client Parameters
      call function 'TR_SYS_PARAMS'
        importing
          SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
        exceptions
          NO_SYSTEMNAME      = 1
          NO_SYSTEMTYPE      = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***------------------------------------------------------------------------------------------------
***   Get Product Style Type Description
      select single DESCR
             into ME->F_TPRST_DESCR
             from ZVCXI_P0S_TC300T
            where TPRST eq ME->S_PRSTY-TPRST
             and  LANGU eq SY-LANGU.
      if SY-SUBRC ne 0.
        move ME->S_PRSTY-TPRST to ME->F_TPRST_DESCR.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method COPY.

  data:          LF_GUID              type        /VCXI/CKX_GUID,
                 LF_GMATU             type        ZVCXI_P0SSC_GMATU,
                 LF_ADD_STD           type        ABAP_BOOL.
  data:          LS_PRSTY_DELEM       type        ZVCXI_P0SSC_S_PRSTY_DELEM,
                 LS_PRSTY_FOLDM       type        ZVCXI_P0SSC_S_PRSTY_FOLDM,
                 LS_PRSTY_JOITY       type        ZVCXI_P0SSC_S_PRSTY_JOITY,
                 LS_PRSTY_PTYPE       type        ZVCXI_P0SSC_S_PRSTY_PTYPE,
                 LS_PRSTY_SCORE       type        ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_PRSTY_MANTU       type        ZVCXI_P0SSC_S_PRSTY_MANTU,
                 LS_PRSTY_MANTU_F     type        ZVCXI_P0SSC_S_PRSTY_MANTU_F.
  data:          LR_PRSTY_OLD         type ref to ZCL_VCXI_P0SSC_PRSTY,
                 LR_PRSTY_MANTU_E     type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E,
                 LR_S_PRSTY_MANTU_E   type ref to DATA.
  field-symbols: <S_PRSTY_MANTU_E>    type        any.

  check IF_TPRST     is not initial and
        IF_PRSTY_NEW is not initial and
        IF_PRSTY_OLD is not initial.

***--------------------------------------------------------------------------------------
*** Get old Product Style
  try.
      LF_GUID = ZCL_VCXI_P0SSC_PRSTY=>ENCRYPT_GUID( IF_TPRST = IF_TPRST
                                                    IF_PRSTY = IF_PRSTY_OLD ).
      LR_PRSTY_OLD ?= ZCL_VCXI_P0SSC_PRSTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    catch /VCXI/CX_CKX.
***   Old Product Style can't be loaded for copy.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '011' ).
  endtry.

***--------------------------------------------------------------------------------------
*** Create new Product Style
  RR_PRSTY = ZCL_VCXI_P0SSC_PRSTY=>CREATE( IF_TPRST = IF_TPRST
                                           IF_PRSTY = IF_PRSTY_NEW ).

***----------------------------------------------------------------------------
*** Set Custom Design Flag
  RR_PRSTY->SET_FCUSD( IF_FCUSD = LR_PRSTY_OLD->S_PRSTY-FCUSD ).

*** Set Default Joint Type
  RR_PRSTY->SET_JOITY( IF_JOITY = LR_PRSTY_OLD->S_PRSTY-JOITY ).

***----------------------------------------------------------------------------
*** Add all Default Elements
  loop at LR_PRSTY_OLD->T_PRSTY_DELEM into LS_PRSTY_DELEM.
    move IF_PRSTY_NEW to LS_PRSTY_DELEM-PRSTY.
    RR_PRSTY->ADD_DELEM( IS_PRSTY_DELEM = LS_PRSTY_DELEM ).
  endloop.

*** Add all Folding Dimensions
  loop at LR_PRSTY_OLD->T_PRSTY_FOLDM into LS_PRSTY_FOLDM.
    move IF_PRSTY_NEW to LS_PRSTY_FOLDM-PRSTY.
    RR_PRSTY->ADD_FOLDM( IS_PRSTY_FOLDM = LS_PRSTY_FOLDM ).
  endloop.

*** Add all Joint Types
  loop at LR_PRSTY_OLD->T_PRSTY_JOITY into LS_PRSTY_JOITY.
    move IF_PRSTY_NEW to LS_PRSTY_JOITY-PRSTY.
    RR_PRSTY->ADD_JOITY( IS_PRSTY_JOITY = LS_PRSTY_JOITY ).
  endloop.

*** Add all Product Type
  loop at LR_PRSTY_OLD->T_PRSTY_PTYPE into LS_PRSTY_PTYPE.
    move IF_PRSTY_NEW to LS_PRSTY_PTYPE-PRSTY.
    RR_PRSTY->ADD_PTYPE( IS_PRSTY_PTYPE = LS_PRSTY_PTYPE ).
  endloop.

*** Add all Scores
  loop at LR_PRSTY_OLD->T_PRSTY_SCORE into LS_PRSTY_SCORE.
    move IF_PRSTY_NEW to LS_PRSTY_SCORE-PRSTY.
    RR_PRSTY->ADD_SCORE( IS_PRSTY_SCORE = LS_PRSTY_SCORE ).
  endloop.

***----------------------------------------------------------------------------
*** Add all Manual Take-up's & Factors
  loop at LR_PRSTY_OLD->T_PRSTY_MANTU into LS_PRSTY_MANTU.
    LF_ADD_STD = ABAP_TRUE.
    move IF_PRSTY_NEW to LS_PRSTY_MANTU-PRSTY.

*** Get extended Key
    if LR_PRSTY_OLD->R_PRSTY_MANTU_E is bound.
      try.
          move LR_PRSTY_OLD->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.
        LR_PRSTY_MANTU_E->READ( exporting IF_GMATU = LS_PRSTY_MANTU-GMATU
                                importing ER_S_PRSTY_MANTU_E = LR_S_PRSTY_MANTU_E ).

        assign LR_S_PRSTY_MANTU_E->* to <S_PRSTY_MANTU_E>.

        LF_GMATU = RR_PRSTY->ADD_MANTU( IS_PRSTY_MANTU   = LS_PRSTY_MANTU
                                        IS_PRSTY_MANTU_E = <S_PRSTY_MANTU_E> ).
        LF_ADD_STD = ABAP_FALSE.
      endif.
    endif.

*** Do Standard
    if LF_ADD_STD = ABAP_TRUE.
      LF_GMATU = RR_PRSTY->ADD_MANTU( IS_PRSTY_MANTU = LS_PRSTY_MANTU ).
    endif.

*** Update Take-up Factors
    loop at LR_PRSTY_OLD->T_PRSTY_MANTU_F into LS_PRSTY_MANTU_F
                                         where GMATU eq LS_PRSTY_MANTU-GMATU.
      move LF_GMATU to LS_PRSTY_MANTU_F-GMATU.
      RR_PRSTY->UPDATE_MANTU( IS_PRSTY_MANTU_F = LS_PRSTY_MANTU_F ).
    endloop.

  endloop.

endmethod.
method CREATE.

  data:  LF_GUID     type        /VCXI/CKX_GUID.

  check IF_TPRST is not initial and
        IF_PRSTY is not initial.

***---------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_P0SSC_PRSTY=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_P0SSC_PRSTY=>C_ACTVT_CREATE
                                    IF_ID    = IF_TPRST ).

*** Make sure that Product Style does not exist yet
  LF_GUID = ZCL_VCXI_P0SSC_PRSTY=>ENCRYPT_GUID( IF_TPRST = IF_TPRST
                                                IF_PRSTY = IF_PRSTY ).


  read table ZCL_VCXI_P0SSC_PRSTY=>T_INSTANCE with key GUID = LF_GUID
                                              transporting no fields.

  if SY-SUBRC ne 0.

*** Create new Product Style
    create object RR_PRSTY
      exporting
        IF_TPRST = IF_TPRST
        IF_PRSTY = IF_PRSTY
        IF_NEW   = ABAP_TRUE.
  else.
*** Product Style already exist.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_P0SSC'
        IF_MSGNO = '009' ).
  endif.

***----------------------------------------------------------------------------
*** Initialization after creation of new object
  RR_PRSTY->INIT_AFTER_CREATE( ).

endmethod.
method DECRYPT_GUID.

  data: begin of LS_TPRST_PRSTY,
                 TPRST type ZVCXI_P0SS_TPRST,
                 PRSTY type ZVCXI_P0SS_PRSTY,
        end   of LS_TPRST_PRSTY.

  CL_ABAP_CONTAINER_UTILITIES=>READ_CONTAINER_C( exporting IM_CONTAINER = IF_GUID
                                                 importing EX_VALUE     = LS_TPRST_PRSTY ).

  if LS_TPRST_PRSTY is initial.
*** GUID of Product Style invalid. (Decrypt not possible)
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_P0SSC'
                                          IF_MSGNO = '051' ).
  endif.

  move LS_TPRST_PRSTY-TPRST to EF_TPRST.
  move LS_TPRST_PRSTY-PRSTY to EF_PRSTY.

endmethod.
method DELETE_DELEM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_DELEM with key TPRST = IS_PRSTY_DELEM-TPRST
                                        PRSTY = IS_PRSTY_DELEM-PRSTY
                                        IELEM = IS_PRSTY_DELEM-IELEM
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_DELEM where TPRST = IS_PRSTY_DELEM-TPRST
                               and PRSTY = IS_PRSTY_DELEM-PRSTY
                               and IELEM = IS_PRSTY_DELEM-IELEM.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_DELEM_ALL.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  clear ME->T_PRSTY_DELEM.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_FOLDM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_FOLDM with key TPRST = IS_PRSTY_FOLDM-TPRST
                                        PRSTY = IS_PRSTY_FOLDM-PRSTY
                                        TFOLD = IS_PRSTY_FOLDM-TFOLD
                                        ORIEN = IS_PRSTY_FOLDM-ORIEN
                                        DIMEN = IS_PRSTY_FOLDM-DIMEN
                                        IELEM = IS_PRSTY_FOLDM-IELEM
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_FOLDM where TPRST = IS_PRSTY_FOLDM-TPRST
                               and PRSTY = IS_PRSTY_FOLDM-PRSTY
                               and TFOLD = IS_PRSTY_FOLDM-TFOLD
                               and ORIEN = IS_PRSTY_FOLDM-ORIEN
                               and DIMEN = IS_PRSTY_FOLDM-DIMEN
                               and IELEM = IS_PRSTY_FOLDM-IELEM.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_JOITY.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_JOITY with key TPRST = IS_PRSTY_JOITY-TPRST
                                        PRSTY = IS_PRSTY_JOITY-PRSTY
                                        JOITY = IS_PRSTY_JOITY-JOITY
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_JOITY where TPRST = IS_PRSTY_JOITY-TPRST
                               and PRSTY = IS_PRSTY_JOITY-PRSTY
                               and JOITY = IS_PRSTY_JOITY-JOITY.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_MANTU.

  data: LR_PRSTY_MANTU_E  type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_MANTU with key GMATU = IF_GMATU
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_MANTU   where GMATU = IF_GMATU.
    delete ME->T_PRSTY_MANTU_F where GMATU = IF_GMATU.

*** Delete Manual Take-up Extended Key
    if ME->R_PRSTY_MANTU_E is bound.
      try.
          move ME->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.
        LR_PRSTY_MANTU_E->DELETE( IF_GMATU = IF_GMATU ).
      endif.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_MANTU_ALL.

  data: LR_PRSTY_MANTU_E type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  clear ME->T_PRSTY_MANTU.
  clear ME->T_PRSTY_MANTU_F.

*** Add Manual Take-up Extended Key
  if ME->R_PRSTY_MANTU_E is bound.
    try.
        move ME->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PRSTY_MANTU_E.
    endtry.
    if LR_PRSTY_MANTU_E is bound.
      LR_PRSTY_MANTU_E->DELETE_ALL( ).
    endif.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_PTYPE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_PTYPE with key TPRST = IS_PRSTY_PTYPE-TPRST
                                        PRSTY = IS_PRSTY_PTYPE-PRSTY
                                        PTYPE = IS_PRSTY_PTYPE-PTYPE
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_PTYPE where TPRST = IS_PRSTY_PTYPE-TPRST
                               and PRSTY = IS_PRSTY_PTYPE-PRSTY
                               and PTYPE = IS_PRSTY_PTYPE-PTYPE.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SCORE.

  data: LS_PRSTY_MANTU type ZVCXI_P0SSC_S_PRSTY_MANTU.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_SCORE with key TPRST = IS_PRSTY_SCORE-TPRST
                                        PRSTY = IS_PRSTY_SCORE-PRSTY
                                        BOXPA = IS_PRSTY_SCORE-BOXPA
                                        PANOR = IS_PRSTY_SCORE-PANOR
                                        CSCOR = IS_PRSTY_SCORE-CSCOR
                                        NSCOR = IS_PRSTY_SCORE-NSCOR
                               transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PRSTY_SCORE where TPRST = IS_PRSTY_SCORE-TPRST
                               and PRSTY = IS_PRSTY_SCORE-PRSTY
                               and BOXPA = IS_PRSTY_SCORE-BOXPA
                               and PANOR = IS_PRSTY_SCORE-PANOR
                               and CSCOR = IS_PRSTY_SCORE-CSCOR
                               and NSCOR = IS_PRSTY_SCORE-NSCOR.

*** Delete Assigned Manual Take-Up
    read table ME->T_PRSTY_MANTU with key TPRST = IS_PRSTY_SCORE-TPRST
                                          PRSTY = IS_PRSTY_SCORE-PRSTY
                                          BOXPA = IS_PRSTY_SCORE-BOXPA
                                          PANOR = IS_PRSTY_SCORE-PANOR
                                 into LS_PRSTY_MANTU.

    if SY-SUBRC = 0.
      read table ME->T_PRSTY_MANTU_F with key GMATU = LS_PRSTY_MANTU-GMATU
                                              CSCOR = IS_PRSTY_SCORE-CSCOR
                                              NSCOR = IS_PRSTY_SCORE-NSCOR
                                     transporting no fields.
      if SY-SUBRC = 0.
        delete ME->T_PRSTY_MANTU_F where GMATU = LS_PRSTY_MANTU-GMATU
                                     and CSCOR = IS_PRSTY_SCORE-CSCOR
                                     and NSCOR = IS_PRSTY_SCORE-NSCOR.

        read table ME->T_PRSTY_MANTU_F with key GMATU = LS_PRSTY_MANTU-GMATU
                                       transporting no fields.
***     If there are no more Scores -> Delete Complete Entry
        if SY-SUBRC ne 0.
          ME->DELETE_MANTU( IF_GMATU = LS_PRSTY_MANTU-GMATU ).
        endif.
      endif.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SCORE_ALL.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  clear ME->T_PRSTY_SCORE.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ENCRYPT_GUID.

  data: begin of LS_TPRST_PRSTY,
                 TPRST type ZVCXI_P0SS_TPRST,
                 PRSTY type ZVCXI_P0SS_PRSTY,
        end   of LS_TPRST_PRSTY.

  move IF_TPRST to LS_TPRST_PRSTY-TPRST.
  move IF_PRSTY to LS_TPRST_PRSTY-PRSTY.

  CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C( exporting IM_VALUE     = LS_TPRST_PRSTY
                                                 importing EX_CONTAINER = RF_GUID ).

endmethod.
  method GET_CSCOR.

    RF_CSCOR = value #( T_TC030[ DIMEN = IF_DIMEN ]-CSCOR optional ).

    if EF_DESCR is requested.
      EF_DESCR = value #( T_TC030T[ CSCOR = RF_CSCOR
                                    LANGU = SY-LANGU ]-DESCR optional ).
    endif.

  endmethod.
method GET_PRSTY_FOLDM.

*** Find matching Folding Measurements for Folding Type and Orientation
  move ME->T_PRSTY_FOLDM to RT_PRSTY_FOLDM.
  delete RT_PRSTY_FOLDM where TFOLD ne IF_TFOLD
                         or   ORIEN ne IF_ORIEN.


*** Find matching Folding Measurements for Folding Type without a defined Orientation
  if RT_PRSTY_FOLDM is initial.
    move ME->T_PRSTY_FOLDM to RT_PRSTY_FOLDM.
    delete RT_PRSTY_FOLDM where TFOLD ne IF_TFOLD
                           or   ORIEN ne SPACE.
  endif.

  sort RT_PRSTY_FOLDM by TFOLD ORIEN DIMEN.

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

***   Transport
      if ME->F_CCCORACTIV eq '1'.
        move ABAP_TRUE to ME->F_TRANS_REQ.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method HANDLE_CHECK.

***------------------------------------------------------------------
*** Check Product Style has at leaste 1 Score
    if ME->S_PRSTY-FCUSD eq ABAP_FALSE.
      if LINES( ME->T_PRSTY_SCORE ) eq 0.
***     No Score is maintained.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_P0SSC'
                                              IF_MSGNO = '062' ).

      endif.

***   Check if there is an Denominator within the Scores - Value 0.
      read table ME->T_PRSTY_SCORE with key ELEMD = 0 transporting no fields.
      if SY-SUBRC eq 0.
***     Scores with Denominator = 0 is not allowed.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_P0SSC'
                                              IF_MSGNO = '065' ).
      endif.
    endif.

***------------------------------------------------------------------
*** Check Product Style has at leaste 1 Folding Measurement
    if LINES( ME->T_PRSTY_FOLDM ) eq 0.
***   No Folding Measurement is maintained.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '063' ).

    endif.

*** Check if there is an Denominator within the Folding Dimensions - Value 0.
    read table ME->T_PRSTY_FOLDM with key ELEMD = 0 transporting no fields.
    if SY-SUBRC eq 0.
***   Folding Measurement with Denominator = 0 is not allowed.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '064' ).
    endif.

***------------------------------------------------------------------
    if ME->S_PRSTY-JOITY is not initial and
       not line_exists( ME->T_PRSTY_JOITY[ JOITY = ME->S_PRSTY-JOITY ] ).
***   Default Joint Type is not allowed.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SSC'
                                            IF_MSGNO = '066' ).
    endif.

  endmethod.
method HANDLE_DELETE.

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_P0SSC_PRSTY=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_P0SSC_PRSTY=>C_ACTVT_DELETE
                                    IR_PRSTY = ME ).

*** If not locked try to lock
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  data:  LF_GUID type /VCXI/CKX_GUID.

  LF_GUID = ME->GET_GUID( ).
  delete ZCL_VCXI_P0SSC_PRSTY=>T_INSTANCE where GUID = LF_GUID.

endmethod.
method HANDLE_SAVE.

  data: LF_KORRNR         type        TRKORR.


  try.
***   Save only if changed
      check ME->F_CHANGED eq ABAP_TRUE.

***   Popup to pick Transport
      if ME->F_TRANS_REQ eq ABAP_TRUE.
        call function 'G_TRANS_NUMBER'
          exporting
            CATEGORY  = 'CUST'
          importing
            KORRNR    = LF_KORRNR
          exceptions
            NO_NUMBER = 1
            others    = 2.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
      endif.

***------------------------------------------------------------------------------------------------
***   Normal Save
      ME->SAVE( IF_KORRNR = LF_KORRNR ).

      commit work and wait.

***------------------------------------------------------------------------------------------------
***   Relock all locked Objects after Commit
      ME->DO_LOCK( ).

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      rollback work.
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method INIT_AFTER_CREATE.

*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method LOAD_FROM_DB.

  data:          LS_TC200         type          ZVCXI_P0S_TC200,
                 LS_TC200T        type          ZVCXI_P0S_TC200T,
                 LS_PRSTY_MANTU   type          ZVCXI_P0SSC_S_PRSTY_MANTU.
  data:          LT_TC200T        type table of ZVCXI_P0S_TC200T.
  data:          LR_PRSTY_MANTU_E type ref to   ZIF_VCXI_P0SSC_PRSTY_MANTU_E.
  field-symbols: <S_DESCR>        type          /VCXI/CKX_S_DESCR.

  free: ME->S_LOG,
        ME->T_DESCR,
        ME->F_CHANGED.

***----------------------------------------------------------------------------
*** Load Header
  select single *
         into corresponding fields of LS_TC200
         from ZVCXI_P0S_TC200
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Log
  move-corresponding LS_TC200 to: ME->S_LOG, ME->S_PRSTY.

***----------------------------------------------------------------------------
*** Load Description
  select * from ZVCXI_P0S_TC200T
         into corresponding fields of table LT_TC200T
         where TPRST = ME->S_PRSTY-TPRST
           and PRSTY = ME->S_PRSTY-PRSTY.

  loop at LT_TC200T into LS_TC200T.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move-corresponding LS_TC200T to <S_DESCR>.
  endloop.

***----------------------------------------------------------------------------
*** Load Scores
  select *
         into corresponding fields of table ME->T_PRSTY_SCORE
         from ZVCXI_P0S_TC201
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY.

***----------------------------------------------------------------------------
*** Load Folding Measurements
  select *
         into corresponding fields of table ME->T_PRSTY_FOLDM
         from ZVCXI_P0S_TC202
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY.

***----------------------------------------------------------------------------
*** Load Product Types
  select *
         into corresponding fields of table ME->T_PRSTY_PTYPE
         from ZVCXI_P0S_TC203
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY
         order by TPRST PRSTY PTYPE.

***----------------------------------------------------------------------------
*** Load Joint Types
  select *
         into corresponding fields of table ME->T_PRSTY_JOITY
         from ZVCXI_P0S_TC204
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY
         order by TPRST PRSTY JOITY.

***----------------------------------------------------------------------------
*** Load Default Elements
  select *
         into corresponding fields of table ME->T_PRSTY_DELEM
         from ZVCXI_P0S_TC205
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY
         order by TPRST PRSTY IELEM.

***----------------------------------------------------------------------------
*** Load Manual Take-up
  select *
         into corresponding fields of table ME->T_PRSTY_MANTU
         from ZVCXI_P0S_TC210
        where TPRST = ME->S_PRSTY-TPRST
          and PRSTY = ME->S_PRSTY-PRSTY.

  loop at ME->T_PRSTY_MANTU into LS_PRSTY_MANTU.
    append LS_PRSTY_MANTU-GMATU to ME->T_GMATU_OLD.
  endloop.

***----------------------------------------------------------------------------
*** Load Manual Take-up Factor
  if ME->T_GMATU_OLD is not initial.
    select *
           into corresponding fields of table ME->T_PRSTY_MANTU_F
           from ZVCXI_P0S_TC211
           for all entries in ME->T_GMATU_OLD
          where GMATU = ME->T_GMATU_OLD-TABLE_LINE.
  endif.

*** LoAD Data - Manual Take-up Extended Key
  if ME->R_PRSTY_MANTU_E is bound.
    try.
        move ME->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PRSTY_MANTU_E.
    endtry.
    if LR_PRSTY_MANTU_E is bound.
      LR_PRSTY_MANTU_E->LOAD_FROM_DB( IT_GMATU_OLD = ME->T_GMATU_OLD ).
    endif.
  endif.

endmethod.
  method SAVE.

    data: LR_PRSTY_MANTU_E  type ref to ZIF_VCXI_P0SSC_PRSTY_MANTU_E.


    if ME->F_TRANS_REQ eq ABAP_TRUE.
***   Check Transport
      ME->CHECK_KORRNR( IF_KORRNR = IF_KORRNR ).

***   Open Transport
      call function 'ZVCXI_P0SSC_DB_OPEN_TRANSPORT'
        in update task
        exporting
          IF_TRKORR = IF_KORRNR.
    endif.

*** Save only if changed
    check ME->F_CHANGED eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
    move SY-UNAME     to ME->S_LOG-CHABY.
    get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
    if ME->F_DELETED eq ABAP_FALSE.
***   Save Product Style
      call function 'ZVCXI_P0SSC_DB_SAVE_PRSTY'
        in update task
        exporting
          IS_PRSTY         = ME->S_PRSTY
          IT_PRSTY_PTYPE   = ME->T_PRSTY_PTYPE
          IT_PRSTY_JOITY   = ME->T_PRSTY_JOITY
          IT_PRSTY_SCORE   = ME->T_PRSTY_SCORE
          IT_PRSTY_FOLDM   = ME->T_PRSTY_FOLDM
          IT_PRSTY_DELEM   = ME->T_PRSTY_DELEM
          IT_PRSTY_MANTU   = ME->T_PRSTY_MANTU
          IT_PRSTY_MANTU_F = ME->T_PRSTY_MANTU_F
          IS_LOG           = ME->S_LOG
          IT_DESCR         = ME->T_DESCR
          IF_WRITE_CD      = ABAP_TRUE
          IF_WRITE_TR      = ME->F_TRANS_REQ.
    else.
***   Delete Product Style
      call function 'ZVCXI_P0SSC_DB_DEL_PRSTY'
        in update task
        exporting
          IS_PRSTY    = ME->S_PRSTY
          IF_WRITE_CD = ABAP_TRUE
          IF_WRITE_TR = ME->F_TRANS_REQ.
    endif.

*** Save Manual Take-up Extended Key
    if ME->R_PRSTY_MANTU_E is bound.
      try.
          move ME->R_PRSTY_MANTU_E ?to LR_PRSTY_MANTU_E.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PRSTY_MANTU_E.
      endtry.
      if LR_PRSTY_MANTU_E is bound.
        if ME->F_DELETED eq ABAP_TRUE.
          LR_PRSTY_MANTU_E->DELETE_ALL( ).
        endif.
        LR_PRSTY_MANTU_E->SAVE( IT_GMATU_OLD = ME->T_GMATU_OLD ).
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Write Transport
    call function 'ZVCXI_P0SSC_DB_CLOSE_TRANSPORT'
      in update task.

***------------------------------------------------------------------------------------------------
*** All changes are handled
    move ABAP_FALSE to ME->F_CHANGED.

  endmethod.
method SET_DESCR.

  field-symbols: <S_DESCR> type /VCXI/CKX_S_DESCR.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Description
  read table ME->T_DESCR assigning <S_DESCR> with key LANGU = IF_LANGU.
  if SY-SUBRC ne 0.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move IF_LANGU to <S_DESCR>-LANGU.
  endif.
  move IF_DESCR   to <S_DESCR>-DESCR.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_FCUSD.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Custom Design Flag
  move IF_FCUSD   to ME->S_PRSTY-FCUSD.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method SET_JOITY.

*** Check of the Lock-Status of the Object
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Default Joint Type
    move IF_JOITY   to ME->S_PRSTY-JOITY.

*** Raise Changed Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_P0S_C200E'
          exporting
            TPRST          = ME->S_PRSTY-TPRST
            PRSTY          = ME->S_PRSTY-PRSTY
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
        call function 'DEQUEUE_EZVCXI_P0S_C200E'
          exporting
            TPRST = ME->S_PRSTY-TPRST
            PRSTY = ME->S_PRSTY-PRSTY.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method UPDATE_DELEM.

  field-symbols: <S_PRSTY_DELEM> type ZVCXI_P0SSC_S_PRSTY_DELEM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_DELEM assigning <S_PRSTY_DELEM> with key TPRST = IS_PRSTY_DELEM-TPRST
                                                                  PRSTY = IS_PRSTY_DELEM-PRSTY
                                                                  IELEM = IS_PRSTY_DELEM-IELEM.

  if SY-SUBRC eq 0.
    move-corresponding IS_PRSTY_DELEM to <S_PRSTY_DELEM>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_FOLDM.

  field-symbols: <S_PRSTY_FOLDM> type ZVCXI_P0SSC_S_PRSTY_FOLDM.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_FOLDM assigning <S_PRSTY_FOLDM> with key TPRST = IS_PRSTY_FOLDM-TPRST
                                                                  PRSTY = IS_PRSTY_FOLDM-PRSTY
                                                                  TFOLD = IS_PRSTY_FOLDM-TFOLD
                                                                  ORIEN = IS_PRSTY_FOLDM-ORIEN
                                                                  DIMEN = IS_PRSTY_FOLDM-DIMEN
                                                                  IELEM = IS_PRSTY_FOLDM-IELEM.

  if SY-SUBRC eq 0.
    move-corresponding IS_PRSTY_FOLDM to <S_PRSTY_FOLDM>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_MANTU.

  field-symbols: <S_PRSTY_MANTU_F> type ZVCXI_P0SSC_S_PRSTY_MANTU_F.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_MANTU_F assigning <S_PRSTY_MANTU_F>
                                 with key GMATU = IS_PRSTY_MANTU_F-GMATU
                                          CSCOR = IS_PRSTY_MANTU_F-CSCOR
                                          NSCOR = IS_PRSTY_MANTU_F-NSCOR.

  if SY-SUBRC eq 0.
*** Add Manual Take-up Facto
    move-corresponding IS_PRSTY_MANTU_F to <S_PRSTY_MANTU_F>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SCORE.

  field-symbols: <S_PRSTY_SCORE> type ZVCXI_P0SSC_S_PRSTY_SCORE.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PRSTY_SCORE assigning <S_PRSTY_SCORE> with key TPRST = IS_PRSTY_SCORE-TPRST
                                                                  PRSTY = IS_PRSTY_SCORE-PRSTY
                                                                  BOXPA = IS_PRSTY_SCORE-BOXPA
                                                                  PANOR = IS_PRSTY_SCORE-PANOR
                                                                  CSCOR = IS_PRSTY_SCORE-CSCOR
                                                                  NSCOR = IS_PRSTY_SCORE-NSCOR.

  if SY-SUBRC eq 0.
    move-corresponding IS_PRSTY_SCORE to <S_PRSTY_SCORE>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
