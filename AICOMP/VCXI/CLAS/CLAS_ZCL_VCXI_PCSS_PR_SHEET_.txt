
class ZCL_VCXI_PCSS_PR_SHEET definition
  public
  inheriting from ZCL_VCXI_P0SS_PR_SHEET
  create public .

public section.

  interfaces ZIF_VCXI_PCSS_SELFD .

  aliases C_IEVNT_I_RECALC_BOARD_WIDTH
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_I_RECALC_BOARD_WIDTH .
  aliases C_IEVNT_I_RECALC_SIDERUN
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_I_RECALC_SIDERUN .
  aliases C_IEVNT_O_BOARD_WIDTH_CHANGED
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_O_BOARD_WIDTH_CHANGED .
  aliases C_IEVNT_O_SIDE_RUN_CHANGED
    for ZIF_VCXI_PCSS_SELFD~C_IEVNT_O_SIDE_RUN_CHANGED .
  aliases C_IPRVT_PC_SELFD
    for ZIF_VCXI_PCSS_SELFD~C_IPRVT_PC_SELFD .
  aliases C_PARID_BOARW
    for ZIF_VCXI_PCSS_SELFD~C_PARID_BOARW .
  aliases C_PARID_SIDRU
    for ZIF_VCXI_PCSS_SELFD~C_PARID_SIDRU .
  aliases GET_BOARW
    for ZIF_VCXI_PCSS_SELFD~GET_BOARW .
  aliases GET_COWID_ALL
    for ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL .
  aliases GET_FOVRS
    for ZIF_VCXI_PCSS_SELFD~GET_FOVRS .
  aliases GET_SIDRU
    for ZIF_VCXI_PCSS_SELFD~GET_SIDRU .
  aliases SET_BOARW
    for ZIF_VCXI_PCSS_SELFD~SET_BOARW .
  aliases SET_FOVRS
    for ZIF_VCXI_PCSS_SELFD~SET_FOVRS .

  constants C_FLUTO_HORIZONTAL type ZVCXI_PCSS_FLUTO value 'H'. "#EC NOTEXT
  constants C_FLUTO_VERTICAL type ZVCXI_PCSS_FLUTO value 'V'. "#EC NOTEXT
  constants C_IPRVT_PC_SHEET type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_SHEET'. "#EC NOTEXT
  constants C_SETID_PC_DCTO type /VCXI/CKXC_SETID value 'ZVCXI_PCS_DCTO'. "#EC NOTEXT
  data F_VALID_BOARW type CHAR30 .

  methods GET_PRPRP_PAWID
    returning
      value(RS_PAWID) type ZVCXI_PCS_S_PAWID
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FDUST
    exporting
      !ES_FDUST type ZVCXI_PCSS_S_FDUST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTO
    returning
      value(RF_FLUTO) type ZVCXI_PCSS_FLUTO
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTO_DESCR
    returning
      value(RF_FLUTO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FTUCK
    exporting
      !ES_FTUCK type ZVCXI_PCSS_S_FTUCK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_FDUST
    importing
      !IS_FDUST type ZVCXI_PCSS_S_FDUST optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTO
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FLUTO type ZVCXI_PCSS_FLUTO
    raising
      /VCXI/CX_CKX .
  methods SET_FTUCK
    importing
      !IS_FTUCK type ZVCXI_PCSS_S_FTUCK optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_CALIP
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_DUST_FLAP_CHANGED type /VCXI/VKSC_IEVNT value 'DUST_FLAP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FLUTO_CHANGED type /VCXI/VKSC_IEVNT value 'FLUTO_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_FOVRS_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRS_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_TUCKIN_FLAP_CHANGED type /VCXI/VKSC_IEVNT value 'TUCKIN_FLAP_CHANGED'. "#EC NOTEXT
  constants C_PARID_FDUST type /VCXI/VKS_PARID value 'ZVCXI_PC_FDUST'. "#EC NOTEXT
  constants C_PARID_FLUTO type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTO'. "#EC NOTEXT
  constants C_PARID_FTUCK type /VCXI/VKS_PARID value 'ZVCXI_PC_FTUCK'. "#EC NOTEXT

  type-pools ABAP .
  methods CHECK_COWID_BY_PAWID
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_BOARW
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CALC_SIDERUN
    importing
      !IS_BOARW type ZVCXI_PCSS_S_BOARW
      !IS_SHTGW type ZVCXI_P0SS_S_SHTGW
      !IS_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BOARD_WIDTH
    raising
      /VCXI/CX_CKX .
  methods SET_SIDRU
    importing
      !IS_SIDRU type ZVCXI_P0SS_S_SIDRU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SIDERUN
    raising
      /VCXI/CX_CKX .

  methods GET_ORIEN
    redefinition .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSS_PR_SHEET definition
class ZCL_VCXI_PCSS_PR_SHEET implementation.
method CALC_SIDERUN.

  data:  LF_NOUPW   type F,
         LF_NUPSS   type ZVCXI_PCSS_NUPSS.
  data:  LS_CALCV   type ZVCXI_XCS_S_CALCV,
         LS_BOARW   type ZVCXI_PCSS_S_BOARW.

  check IS_SHTGW-SHTGW is not initial.

  if IS_SIDRU_MIN is initial.
    move IS_BOARW to LS_BOARW.
  else.
*** Subtract Sidrun Min from Board Width TMP
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_BOARW-BOARW
                                                        IF_CALCV_UOM_1 = IS_BOARW-BOARW_UOM
                                                        IF_CALCV_2     = IS_SIDRU_MIN-SIDRU
                                                        IF_CALCV_UOM_2 = IS_SIDRU_MIN-SIDRU_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                              importing EF_CALCV       = LS_BOARW-BOARW
                                                        EF_CALCV_UOM   = LS_BOARW-BOARW_UOM ).
  endif.

*** Check how many times the Sheet fits in the Board Grade Width
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BOARW-BOARW
                                                      IF_CALCV_UOM_1 = LS_BOARW-BOARW_UOM
                                                      IF_CALCV_2     = IS_SHTGW-SHTGW
                                                      IF_CALCV_UOM_2 = IS_SHTGW-SHTGW_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                            importing EF_CALCV       = LF_NOUPW ).


*** Multiply Sheet Width (based on how many times it fits) - Get First 10 decimal places!!
  move LF_NOUPW to LF_NUPSS.
  LS_CALCV-CALCV     = IS_SHTGW-SHTGW * floor( LF_NUPSS ).
  LS_CALCV-CALCV_UOM = IS_SHTGW-SHTGW_UOM.

*** Calculate Side Run
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_BOARW-BOARW
                                                      IF_CALCV_UOM_1 = IS_BOARW-BOARW_UOM
                                                      IF_CALCV_2     = LS_CALCV-CALCV
                                                      IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                      IF_UOM         = IS_BOARW-BOARW_UOM
                                            importing EF_CALCV       = RS_SIDRU-SIDRU
                                                      EF_CALCV_UOM   = RS_SIDRU-SIDRU_UOM ).

endmethod.
method CHECK_BOARW.
***  0 - No Board Width is needed.
***  1 - Board Width is maintained.
***  2 - Board Width is not maintained.
***  3 - Board Width lower then Gross Sheet Width.
***  4 - Board Grade Width is not valid. Check BoardID Customizing.

  data:          LF_MBOAR       type        ZVCXI_PCSS_MBOAR,
                 LF_SELFD       type        ZVCXI_PCSS_SELFD,
                 LF_VALID       type        ABAP_BOOL.
  data:          LS_BOARW       type        ZVCXI_PCSS_S_BOARW,
                 LS_SHTGW       type        ZVCXI_P0SS_S_SHTGW,
                 LS_COWID       type        ZVCXI_PCS_S_COWID.
  data:          LT_GATE        type        /VCXI/VKSR_TT_GATE,
                 LT_COWID       type        ZVCXI_PCS_TT_COWID.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD    type ref to ZCL_VCXI_PCSS_PR_BOARD.

***---------------------------------------------------------------------------
*** Get all Boards
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S to LF_MBOAR.
    when ABAP_FALSE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P to LF_MBOAR.
  endcase.

*** Get right Board
  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***       right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***---------------------------------------------------------------------------
  if LR_PR_BOARD is bound.
    LR_PR_BOARD->GET_SELFD( importing EF_SELFD = LF_SELFD ).
    if LF_SELFD eq ABAP_TRUE.
      ME->GET_BOARW( importing ES_BOARW = LS_BOARW ).

***   If needed Check Board Width against BoardID Customizing
      if ME->F_VALID_BOARW eq 'CUST'.
        LT_COWID = ME->ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL( ).
        loop at LT_COWID into LS_COWID.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BOARW-BOARW_UOM
                                                             IF_UOM_IN    = LS_COWID-COWID_UOM
                                                             IF_VALUE_IN  = LS_COWID-COWID
                                                   importing EF_VALUE_OUT = LS_COWID-COWID
                                                             EF_UOM_OUT   = LS_COWID-COWID_UOM ).

          if LS_BOARW-BOARW_UOM eq LS_COWID-COWID_UOM and
             LS_BOARW-BOARW     eq LS_COWID-COWID.
            LF_VALID = ABAP_TRUE.
            exit.
          endif.
        endloop.

        if LF_VALID eq ABAP_FALSE.
          RF_RESULT = 4.
          exit.
        endif.
      endif.

      if LS_BOARW-BOARW is not initial.
***     Check Board Width against Gross Sheet Width
        LS_SHTGW = ME->GET_SHTGW( ).
        if LS_SHTGW-SHTGW gt LS_BOARW-BOARW.
***       Selfdeckling is activated and Board Width lower then Gross Sheet Width.
          RF_RESULT = 3.
        else.
***       Selfdeckling is activated and Board Width is maintained.
          RF_RESULT = 1.
        endif.
      else.
***     Selfdeckling is activated and Board Width is not maintained.
        RF_RESULT = 2.
      endif.
    else.
***   Selfdeckling is not activated.
      RF_RESULT = 0.
    endif.
  endif.

endmethod.
method CHECK_COWID_BY_PAWID.

  data:          LF_WERKS     type        WERKS_D.
  data:          LS_PAWID     type        ZVCXI_PCS_S_PAWID,
                 LS_PWIDT     type        ZVCXI_PCSS_S_PWIDT,
                 LS_PWIDTC    type        ZVCXI_PCSS_S_PWIDT.
  data:          LR_APPDATA   type ref to /VCXI/CL_VKSR_APPDATA.

*** Start Positiv
  RF_ALLOWED = ABAP_TRUE.

*** Get Application Data
  move ME->R_GATE->GET_APPDATA( ) to LR_APPDATA.
  if LR_APPDATA is bound.
    move LR_APPDATA->F_WERKS to LF_WERKS.
  endif.

*** Get Preprint Paper Width
  LS_PAWID = ME->GET_PRPRP_PAWID( ).

*** Get Paper Width Tolerance
  LS_PWIDT = ZCL_VCXI_PCSS_CUST_BOARD=>GET_PWIDT( IF_WERKS = LF_WERKS ).

  check LS_PAWID-PAWID is not initial.

*** Convert all Units
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_COWID-COWID_UOM
                                                     IF_UOM_IN    = LS_PAWID-PAWID_UOM
                                                     IF_VALUE_IN  = LS_PAWID-PAWID
                                           importing EF_VALUE_OUT = LS_PAWID-PAWID
                                                     EF_UOM_OUT   = LS_PAWID-PAWID_UOM ).

  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_COWID-COWID_UOM
                                                     IF_UOM_IN    = LS_PWIDT-PWIDT_UOM
                                                     IF_VALUE_IN  = LS_PWIDT-PWIDT
                                           importing EF_VALUE_OUT = LS_PWIDT-PWIDT
                                                     EF_UOM_OUT   = LS_PWIDT-PWIDT_UOM ).

*** Do the check
  LS_PWIDTC-PWIDT = LS_PAWID-PAWID - IS_COWID-COWID.
  check abs( LS_PWIDTC-PWIDT ) gt LS_PWIDT-PWIDT.
  move ABAP_FALSE to RF_ALLOWED.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
  ME->INIT_ATTRI( ).

endmethod.
method GET_CALIP.

  data:  LF_MBOAR           type        ZVCXI_PCSS_MBOAR.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_BOARD        type ref to ZCL_VCXI_PCSS_PR_BOARD,
         LR_PR_MS_SHTPR     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
         LR_PR_COMP_SE      type ref to ZCL_VCXI_P0SS_PR_COMP_SE.

***------------------------------------------------------------------------------------------------
*** Get Caliper from Board ID
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.   move 'S' to LF_MBOAR.
    when ABAP_FALSE.  move 'P' to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***        right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Check Board/Purchase is there
  if LR_PR_BOARD is bound.
    move LR_PR_BOARD->GET_CALIP( ) to RS_CALIP.

  else.

***------------------------------------------------------------------------------------------------
*** Get Sheet Procurement
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_MS_SHTPR.
      endtry.
    endloop.

    if LR_PR_MS_SHTPR is bound.
      move LR_PR_MS_SHTPR->GET_CALIP( ) to RS_CALIP.
    else.

***------------------------------------------------------------------------------------------------
***   Get Component SE
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_COMP_SE.
        endtry.
      endloop.

      if LR_PR_COMP_SE is bound.
        move LR_PR_COMP_SE->GET_CALIP( ) to RS_CALIP.
      endif.
    endif.
  endif.

endmethod.
method GET_FDUST.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).
  move LS_PARAM-ATFLV to ES_FDUST-FDUST.
  move LS_PARAM-UNIT  to ES_FDUST-FDUST_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_FLUTO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTO ).
  move LS_PARAM-ATWRT to RF_FLUTO.

endmethod.
method GET_FLUTO_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_P0S_ORIEN'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_FLUTO   type                   ZVCXI_PCSS_FLUTO.

  LF_FLUTO = ME->GET_FLUTO( ).

*** Return Flute Orientation Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_FLUTO into LS_D07V.
  check SY-SUBRC = 0.

  RF_FLUTO_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_FTUCK.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).
  move LS_PARAM-ATFLV to ES_FTUCK-FTUCK.
  move LS_PARAM-UNIT  to ES_FTUCK-FTUCK_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_ORIEN.

  move ME->GET_FLUTO( ) to RF_ORIEN.

endmethod.
method GET_PRPRP_PAWID.

  data:  LS_PRPRP_STR       type        ZVCXI_PCSS_S_PRPRP_STR.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRPRP_STR       type        ZVCXI_PCSS_TT_PRPRP_STR.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PREPR_MGR    type ref to ZCL_VCXI_PCSS_PR_PREPR_MGR.

***------------------------------------------------------------------
*** Preprint Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PCSS_PR_PREPR_MGR=>C_IPRVT_PC_PREPR_MGR
                                   IF_INUSE  = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Preprint
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PREPR_MGR.
        check LR_PR_PREPR_MGR is bound.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  check LR_PR_PREPR_MGR is bound.
  LT_PRPRP_STR = LR_PR_PREPR_MGR->GET_PRPRP_STR( ).

  loop at LT_PRPRP_STR into LS_PRPRP_STR.

*** Do unit conversion if needed
    if RS_PAWID-PAWID is not initial.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = RS_PAWID-PAWID_UOM
                                                         IF_UOM_IN    = LS_PRPRP_STR-PAWID_UOM
                                                         IF_VALUE_IN  = LS_PRPRP_STR-PAWID
                                               importing EF_VALUE_OUT = LS_PRPRP_STR-PAWID
                                                         EF_UOM_OUT   = LS_PRPRP_STR-PAWID_UOM ).
    endif.

    if LS_PRPRP_STR-PAWID gt RS_PAWID-PAWID.
      move-corresponding LS_PRPRP_STR to RS_PAWID.
    endif.

  endloop.

endmethod.
method GET_STATUS.

  data: LS_FDUST type ZVCXI_PCSS_S_FDUST,
        LS_FTUCK type ZVCXI_PCSS_S_FTUCK.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Self Deckeling
  case ME->CHECK_BOARW( ).
    when 0 or 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when 2 or 3 or 4.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

***------------------------------------------------------------------
*** Check Flute Orientation
  if ME->GET_FLUTO( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Dust Flap Required and if it is filled
  if ME->R_CUST_PRSTY is bound.
    if ME->R_CUST_PRSTY->CHECK_SCORE_ELEMENT( IF_IELEM = 'DUST_FLAP' ) eq ABAP_TRUE.
      ME->GET_FDUST( importing ES_FDUST = LS_FDUST ).
      if LS_FDUST-FDUST is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.
    endif.

***------------------------------------------------------------------
*** Check Tuck in Flap Required and if it is filled
    if ME->R_CUST_PRSTY->CHECK_SCORE_ELEMENT( IF_IELEM = 'TUCKING_FLAP' ) eq ABAP_TRUE.
      ME->GET_FTUCK( importing ES_FTUCK = LS_FTUCK ).
      if LS_FTUCK-FTUCK is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.
    endif.
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_FDUST type ZVCXI_PCSS_S_FDUST,
        LS_FTUCK type ZVCXI_PCSS_S_FTUCK.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Self Deckeling
  case ME->CHECK_BOARW( ).
    when 1.
***   Board Grade Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '403' ).

    when 2.
***   Board Grade Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '404' ).

    when 3.
***   Board Grade Width lower then Gross Sheet Width.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '405' ).
    when 4.
***   Board Grade Width is not valid. Check BoardID Customizing.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '406' ).
  endcase.

***------------------------------------------------------------------
*** Check Flute Orientation
  if ME->GET_FLUTO( ) is not initial.
*** Flute Orientation is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '401' ).
  else.
*** Flute Orientation is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '402' ).
  endif.

***------------------------------------------------------------------
*** Check Dust Flap Required and if it is filled
  if ME->R_CUST_PRSTY is bound.
    if ME->R_CUST_PRSTY->CHECK_SCORE_ELEMENT( IF_IELEM = 'DUST_FLAP' ) eq ABAP_TRUE.
      ME->GET_FDUST( importing ES_FDUST = LS_FDUST ).
      if LS_FDUST-FDUST is not initial.
***     Dust Flap is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '027' ).
      else.
***     Dust Flap is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '028' ).
      endif.
    endif.

***------------------------------------------------------------------
*** Check Tuck in Flap Required and if it is filled
    if ME->R_CUST_PRSTY->CHECK_SCORE_ELEMENT( IF_IELEM = 'TUCKING_FLAP' ) eq ABAP_TRUE.
      ME->GET_FTUCK( importing ES_FTUCK = LS_FTUCK ).
      if LS_FTUCK-FTUCK is not initial.
***     Tuck in Flap is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '029' ).
      else.
***     Tuck in Flap is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '030' ).
      endif.
    endif.
  endif.
endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_SIDERUN.
      ME->HANDLE_RECALC_SIDERUN( ).

    when C_IEVNT_I_RECALC_BOARD_WIDTH.
      ME->HANDLE_RECALC_BOARD_WIDTH( ).
  endcase.

endmethod.
method HANDLE_RECALC_BOARD_WIDTH.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR,
                 LF_SELFD     type        ZVCXI_PCSS_SELFD.
  data:          LS_BOARW     type        ZVCXI_PCSS_S_BOARW,
                 LS_BOARW_TMP type        ZVCXI_PCSS_S_BOARW,
                 LS_SIDRU     type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_TMP type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MIN type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MAX type        ZVCXI_P0SS_S_SIDRU,
                 LS_SHTGW     type        ZVCXI_P0SS_S_SHTGW,
                 LS_COWID     type        ZVCXI_PCS_S_COWID.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE,
                 LT_COWID     type        ZVCXI_PCS_TT_COWID.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S to LF_MBOAR.
    when ABAP_FALSE.
      move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***       right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if LR_PR_BOARD is bound.
    LR_PR_BOARD->GET_SELFD( importing EF_SELFD = LF_SELFD ).
    if LF_SELFD eq ABAP_TRUE.

      LS_SHTGW = ME->GET_SHTGW( ).

****---------------------------------------------------------------------------
***   Get Board Grade Width from Board Grade Table
      LT_COWID = LR_PR_BOARD->GET_COWID( ).

***   Get Limits of Side run
      LR_PR_BOARD->GET_LIMIT_SIDRU( importing ES_SIDRU_MIN = LS_SIDRU_MIN
                                              ES_SIDRU_MAX = LS_SIDRU_MAX ).

***---------------------------------------------------------------------------
***   Do Corrugation Width calculation
      loop at LT_COWID into LS_COWID.

***     Check if Corrugation Width is allowed by Paper Width of Preprint
        check ME->CHECK_COWID_BY_PAWID( IS_COWID = LS_COWID ) eq ABAP_TRUE.

        move LS_COWID-COWID     to LS_BOARW_TMP-BOARW.
        move LS_COWID-COWID_UOM to LS_BOARW_TMP-BOARW_UOM.

***     Calculate Side Run
        if LS_SHTGW-SHTGW         is not initial and
           LS_SHTGW-SHTGW_UOM     is not initial and
           LS_BOARW_TMP-BOARW     is not initial and
           LS_BOARW_TMP-BOARW_UOM is not initial.

          LS_SIDRU_TMP = ME->CALC_SIDERUN( IS_SIDRU_MIN = LS_SIDRU_MIN
                                           IS_BOARW     = LS_BOARW_TMP
                                           IS_SHTGW     = LS_SHTGW ).

***       Convert Sidrun Limit to right unit
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SIDRU_TMP-SIDRU_UOM
                                                             IF_UOM_IN    = LS_SIDRU_MIN-SIDRU_UOM
                                                             IF_VALUE_IN  = LS_SIDRU_MIN-SIDRU
                                                   importing EF_VALUE_OUT = LS_SIDRU_MIN-SIDRU
                                                             EF_UOM_OUT   = LS_SIDRU_MIN-SIDRU_UOM ).

          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SIDRU_TMP-SIDRU_UOM
                                                             IF_UOM_IN    = LS_SIDRU_MAX-SIDRU_UOM
                                                             IF_VALUE_IN  = LS_SIDRU_MAX-SIDRU
                                                   importing EF_VALUE_OUT = LS_SIDRU_MAX-SIDRU
                                                             EF_UOM_OUT   = LS_SIDRU_MAX-SIDRU_UOM ).



***       Check Siderun agains limit
          if LS_SIDRU_MIN is not initial and
             LS_SIDRU_MAX is not initial.
            check LS_SIDRU_TMP-SIDRU ge LS_SIDRU_MIN-SIDRU and
                  LS_SIDRU_TMP-SIDRU le LS_SIDRU_MAX-SIDRU.
          endif.


          check LS_SIDRU-SIDRU is initial or
                LS_SIDRU_TMP-SIDRU lt LS_SIDRU-SIDRU.

***       Safe SideRun -> Best one
          move LS_SIDRU_TMP-SIDRU     to LS_SIDRU-SIDRU.
          move LS_SIDRU_TMP-SIDRU_UOM to LS_SIDRU-SIDRU_UOM.

***       Safe Board Grade Width according to best Side Run
          move LS_COWID-COWID     to LS_BOARW-BOARW.
          move LS_COWID-COWID_UOM to LS_BOARW-BOARW_UOM.

        endif.
      endloop.
    endif.
  endif.

*** Update BoardWidth in Case of Not Overriden or Selfdeckling is deactivated
  check ME->GET_FOVRS( ) eq ABAP_FALSE or
        LF_SELFD         eq ABAP_FALSE.

***---------------------------------------------------------------------------
*** Set Value
  ME->SET_BOARW( IS_BOARW = LS_BOARW ).

endmethod.
method HANDLE_RECALC_SIDERUN.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR.
  data:          LS_SIDRU     type        ZVCXI_P0SS_S_SIDRU,
                 LS_SIDRU_MIN type        ZVCXI_P0SS_S_SIDRU,
                 LS_BOARW     type        ZVCXI_PCSS_S_BOARW,
                 LS_SHTGW     type        ZVCXI_P0SS_S_SHTGW.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.

*** Get Board Grade Width
  ME->GET_BOARW( importing ES_BOARW = LS_BOARW ).

  if LS_BOARW-BOARW is not initial.

*** Get Minimum Side Run for calculation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                     IF_INUSE = ABAP_TRUE ).

***---------------------------------------------------------------------------
*** Define the right board mode
    case ME->CHECK_SALES_ACTIV( ).
      when ABAP_TRUE.   move 'S' to LF_MBOAR.
      when ABAP_FALSE.  move 'P' to LF_MBOAR.
    endcase.

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
          endif.
          if LR_PR_BOARD               is bound     and
             LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***           right board found -> exit
            exit.
          else.
            clear: LR_PR_BOARD.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    if LR_PR_BOARD               is bound.

****---------------------------------------------------------------------------
*** Get Limits of Side run
      LR_PR_BOARD->GET_LIMIT_SIDRU( importing ES_SIDRU_MIN = LS_SIDRU_MIN ).

    endif.

    LS_SHTGW = ME->GET_SHTGW( ).

*** Calculate Side Run
    LS_SIDRU = ME->CALC_SIDERUN( IS_SIDRU_MIN = LS_SIDRU_MIN
                                 IS_BOARW     = LS_BOARW
                                 IS_SHTGW     = LS_SHTGW ).

  endif.

*** Set Calculated Side Run
  ME->SET_SIDRU( IS_SIDRU = LS_SIDRU ).

endmethod.
method INIT_ATTRI.

  data:  LS_ATTRI       type /VCXI/VKS_S_ATTRI.

*** -------------------------------------------------------------------------------------------------
*** Get Valid BoardGrade Width via Attribute
  LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'VALID_BOARW' ).
  ME->F_VALID_BOARW = LS_ATTRI-ATTVA.

endmethod.
method SET_FDUST.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).

  if IS_FDUST is supplied.
    if IS_FDUST-FDUST is not initial.
      move IS_FDUST-FDUST     to LS_PARAM-ATFLV.
      move IS_FDUST-FDUST_UOM to LS_PARAM-UNIT.
      move IF_SETBY           to LS_PARAM-SETBY.
    else.
      clear: LS_PARAM-ATFLV,
             LS_PARAM-SETBY.
    endif.
  else.
    move IF_SETBY             to LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DUST_FLAP_CHANGED ).
  endif.

endmethod.
method SET_FLUTO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTO ).

  move IF_FLUTO     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTO_CHANGED ).
  endif.

endmethod.
method SET_FTUCK.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).

  if IS_FTUCK is supplied.
    if IS_FTUCK-FTUCK is not initial.
      move IS_FTUCK-FTUCK     to LS_PARAM-ATFLV.
      move IS_FTUCK-FTUCK_UOM to LS_PARAM-UNIT.
      move IF_SETBY           to LS_PARAM-SETBY.
    else.
      clear: LS_PARAM-ATFLV,
             LS_PARAM-SETBY.
    endif.
  else.
    move IF_SETBY             to LS_PARAM-SETBY.
  endif.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TUCKIN_FLAP_CHANGED ).
  endif.

endmethod.
method SET_SIDRU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).

  if IS_SIDRU is supplied.
    move IS_SIDRU-SIDRU     to LS_PARAM-ATFLV.
    move IS_SIDRU-SIDRU_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SIDE_RUN_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_BOARW.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARW ).
  move LS_PARAM-ATFLV to ES_BOARW-BOARW.
  move LS_PARAM-UNIT  to ES_BOARW-BOARW_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_COWID_ALL.

  data:          LF_MBOAR     type        ZVCXI_PCSS_MBOAR.
  data:          LS_BOARW     type        ZVCXI_PCSS_S_BOARW.
  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_BOARD  type ref to ZCL_VCXI_PCSS_PR_BOARD.
  field-symbols: <S_COWID>    type        ZVCXI_PCS_S_COWID.

***------------------------------------------------------------------------------------------------
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PCSS_PR_BOARD=>C_IPRVT_PC_BOARD
                                   IF_INUSE = ABAP_TRUE ).

*** Define the right board mode
  case ME->CHECK_SALES_ACTIV( ).
    when ABAP_TRUE.   move ZCL_VCXI_PCSSC_BOARD_G=>C_MBOAR_SALES to LF_MBOAR.
    when ABAP_FALSE.  move ZCL_VCXI_PCSSC_BOARD_G=>C_MBOAR_PROD  to LF_MBOAR.
  endcase.

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_BOARD.
        endif.
        if LR_PR_BOARD               is bound     and
           LR_PR_BOARD->GET_MBOAR( ) eq LF_MBOAR.
***           right board found -> exit
          exit.
        else.
          clear: LR_PR_BOARD.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_BOARD is bound.

*** Get Board Grade Width from Board Grade Table
  RT_COWID = LR_PR_BOARD->GET_COWID( ).

***------------------------------------------------------------------------------------------------
*** Convert Corrugation Width to Unit of Board Grade Width
  ME->ZIF_VCXI_PCSS_SELFD~GET_BOARW( importing ES_BOARW = LS_BOARW ).

  loop at RT_COWID assigning <S_COWID>.
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_BOARW-BOARW_UOM
                                                       IF_UOM_IN    = <S_COWID>-COWID_UOM
                                                       IF_VALUE_IN  = <S_COWID>-COWID
                                             importing EF_VALUE_OUT = <S_COWID>-COWID
                                                       EF_UOM_OUT   = <S_COWID>-COWID_UOM ).
  endloop.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_FOVRS.

  data: LF_SETBY_BOARW type /VCXI/VKSR_SETBY.

*** Get all Set By from Needed Values
  ME->GET_BOARW( importing EF_SETBY = LF_SETBY_BOARW ).

  check LF_SETBY_BOARW eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

  move ABAP_TRUE to RF_FOVRS.

endmethod.
method ZIF_VCXI_PCSS_SELFD~GET_SIDRU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).
  move LS_PARAM-ATFLV to ES_SIDRU-SIDRU.
  move LS_PARAM-UNIT  to ES_SIDRU-SIDRU_UOM.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method ZIF_VCXI_PCSS_SELFD~SET_BOARW.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOARW ).

  if IS_BOARW is supplied.
    move IS_BOARW-BOARW     to LS_PARAM-ATFLV.
    move IS_BOARW-BOARW_UOM to LS_PARAM-UNIT.
  endif.
  move IF_SETBY             to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARD_WIDTH_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_PCSS_SELFD~SET_FOVRS.

  case IF_FOVRS.
*** Set all Set By "User" for Needed Values
    when ABAP_TRUE.
      ME->SET_BOARW( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set all Set By "Calc" for Needed Values
    when ABAP_FALSE.
      ME->SET_BOARW( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endcase.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRS_CHANGED ).

endmethod.
