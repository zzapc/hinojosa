
class ZCL_VCXI_P2SS_PR_RCUT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P2SS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_COMM_NEXT .
  interfaces ZIF_VCXI_PXSS_LTEXT .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_P2_RCUT type /VCXI/VKSC_IPRVT value 'ZVCXI_P2SS_RCUT' ##NO_TEXT.

  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_O_FCBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FCBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_PARID_FCBPX type /VCXI/VKS_PARID value 'ZVCXI_P2_FCBPX' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.

  methods SET_FCBPX
    importing
      !IF_FCBPX type ZVCXI_P2S_FCBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_REEL
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_REEL) type ref to ZCL_VCXI_P2SS_PR_MS_REEL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_PR_RCUT definition
class ZCL_VCXI_P2SS_PR_RCUT implementation.
  method GET_PRVDR_MS_REEL.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MS_REEL.

***------------------------------------------------------------------------------------------------
*** Find Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P2SS_PR_MS_REEL=>C_IPRVT_P2_MS_REEL
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_MS_REEL.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method SET_FCBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCBPX ).

    move IF_FCBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FCBPX_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCBPX ).
    move LS_PARAM-STRNG to EF_FCBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Folding Carton Backward Property Instance
    if RR_BL_FCBPROP is requested.
      RR_BL_FCBPROP = ZCL_VCXI_P2SS_BL_FCBPROP=>FACTORY( IF_FCBPX = EF_FCBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LR_PR_MS_REEL type ref to ZCL_VCXI_P2SS_PR_MS_REEL.


***--------------------------------------------------------------------------------------
*** Get Folding Carton Forward Property (Inbound)
    RR_BL_FCFPROP = ZCL_VCXI_P2SS_BL_FCFPROP=>FACTORY( ).
    check RR_BL_FCFPROP is bound.

***--------------------------------------------------------------------------------------
    LR_PR_MS_REEL = ME->GET_PRVDR_MS_REEL( ).
    if LR_PR_MS_REEL is bound.
***   Paper Grade and Grammage
      RR_BL_FCFPROP->SET_PAPGR( IF_PAPGR = LR_PR_MS_REEL->GET_PAPGR( ) ).
      RR_BL_FCFPROP->SET_GRAMM( IS_GRAMM = LR_PR_MS_REEL->GET_GRAMM( ) ).

***   Caliper
      RR_BL_FCFPROP->SET_CALIP( IS_CALIP = LR_PR_MS_REEL->GET_CALIP( ) ).

***   Print Definition
      RR_BL_FCFPROP->SET_PRINT( IT_PRINT = LR_PR_MS_REEL->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( ) ).

    endif.

*** Use Sheet Dimension as Handling Dimension
    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
    RR_BL_FCFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                    HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                    HNDWI     = LS_SHTWI-SHTWI
                                                    HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                    HNDHE     = RR_BL_FCFPROP->S_CALIP-CALIP
                                                    HNDHE_UOM = RR_BL_FCFPROP->S_CALIP-CALIP_UOM ) ).

*** Use Determined Product Hierarchy
    RR_BL_FCFPROP->SET_PRODH( IF_PRODH = RR_BL_FCFPROP->DET_PRODH( IR_GATE = ME->R_GATE ) ).

***--------------------------------------------------------------------------------------
*** Get new Folding Carton Forward Property XML
    if EF_FCFPX is requested.
      EF_FCFPX = RR_BL_FCFPROP->GET_FCFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM.

    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( )->GET_SHTDIM( importing ES_SHTLE = ES_SHTLE
                                                                    ES_SHTWI = ES_SHTWI
                                                                    EF_GRADI = EF_GRADI ).

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_SURWT.

    data: LS_SURWT type ZVCXI_PXS_S_SURWT.
    data: LR_PR_MS_REEL type ref to ZCL_VCXI_P2SS_PR_MS_REEL.


***------------------------------------------------------------------------------------------------
*** Consider Reel
    LR_PR_MS_REEL = ME->GET_PRVDR_MS_REEL( ).
    if LR_PR_MS_REEL is bound.
***   Summarize Surface Weight
      LS_SURWT = LR_PR_MS_REEL->GET_SURWT( ).
      if RS_SURWT is initial.
        RS_SURWT = LS_SURWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                            IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                            IF_CALCV_2     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SURWT-SURWT_UOM
                                                  importing EF_CALCV       = RS_SURWT-SURWT
                                                            EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P2SS_COMM_PREV,
          LR_BL_FCBPROP type ref to ZCL_VCXI_P2SS_BL_FCBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Folding Carton Backward Property Instance
    LR_BL_FCBPROP = ZCL_VCXI_P2SS_BL_FCBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Number of Ups
      LF_NOUPS = LR_COMM_PREV->GET_NOUPS( ).

***   Combine Folding Carton Backward Property
      LR_BL_FCBPROP->MERGE( IR_BL_FCBPROP = LR_COMM_PREV->GET_FCBPX( ) ).
    endloop.

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Folding Carton Backward Property XML
    ME->SET_FCBPX( IF_FCBPX = LR_BL_FCBPROP->GET_FCBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.
  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.
  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    data(LR_BL_FCFPROP) = ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX( ).
    if LR_BL_FCFPROP is bound.
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LR_BL_FCFPROP->F_PAPGR     "Paper Grade
                                  changing  CT_ATTR  = LT_ATTR ).
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LR_BL_FCFPROP->S_GRAMM-GRAMM
                                            IF_UOM   = LR_BL_FCFPROP->S_GRAMM-GRAMM_UOM
                                  changing  CT_ATTR  = LT_ATTR ).
    endif.

*** Add Node for Conversion Step
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_ICON      = 'sap-icon://scissors'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
