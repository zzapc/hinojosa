
class ZCL_VCXI_FBSSC_UIC_BAGTY definition
  public
  create public .

public section.

  types:
    YT_TC500T type standard table of ZVCXI_FBS_TC500T .

  constants C_UCOMM_F0S type SYUCOMM value 'F0S_' ##NO_TEXT.
  constants C_UCOMM_FBS type SYUCOMM value 'FBS_' ##NO_TEXT.
  constants C_VIEW_PREFIX type VCL_NAME value 'ZVCXI_' ##NO_TEXT.
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .
  class-data F_IBAGT type ZVCXI_FBS_IBAGT .

  class-methods CALL_CUST
    importing
      !IF_VCLNAME type VCL_NAME
    raising
      /VCXI/CX_CKX .
  class-methods START_UI
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT optional
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_ALL_BAGTY
    returning
      value(RT_BAGTY) type ZVCXI_FBSSC_TT_BAGTY
    raising
      /VCXI/CX_CKX .
  methods OPEN_BAGTY
    importing
      !IF_CHANGE type ABAP_BOOL default 'X'
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    raising
      /VCXI/CX_CKX .
  methods ADD_BAGTY
    raising
      /VCXI/CX_CKX .
  methods COPY_BAGTY
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    raising
      /VCXI/CX_CKX .
  methods DELETE_BAGTY
    importing
      !IT_BAGTY type ZVCXI_FBSSC_TT_BAGTY
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UCOMM_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UCOMM_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UCOMM_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  data R_GRID_BAGTY type ref to ZCL_VCXI_FBSSC_GRID_BAGTY .

  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSSC_UIC_BAGTY definition
class ZCL_VCXI_FBSSC_UIC_BAGTY implementation.
  method ADD_BAGTY.

    data: LF_RETURN type                   ABAP_BOOL,
          LF_IBAGT  type                   ZVCXI_FBS_IBAGT,
          LF_EXIT   type                   ABAP_BOOL,
          LF_CREATE type                   ABAP_BOOL.
    data: LT_BAGTY type                   ZVCXI_FBSSC_TT_BAGTY,
          LT_SVAL  type standard table of SVAL.
    data: LR_BAGTY  type ref to            ZCL_VCXI_FBSSC_BAGTY.
    field-symbols: <S_FIELD> type SVAL.

***--------------------------------------------------------------------------------------
*** Get Bag Type Entries
    LT_BAGTY = ME->GET_ALL_BAGTY( ).

***--------------------------------------------------------------------------------------
*** Create PopUp for User-Entry
    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME   = 'ZVCXI_FBS_TC500'.
    <S_FIELD>-FIELDNAME = 'IBAGT'.

    do.
      call function 'POPUP_GET_VALUES'
        exporting
          POPUP_TITLE     = text-T01
        importing
          RETURNCODE      = LF_RETURN
        tables
          FIELDS          = LT_SVAL
        exceptions
          ERROR_IN_FIELDS = 1
          others          = 2.
      if SY-SUBRC is not initial or
        LF_RETURN eq 'A'.
        clear LT_SVAL.
        LF_EXIT = ABAP_TRUE.
        exit.
      endif.

      check LT_SVAL is not initial.
      read table LT_SVAL assigning <S_FIELD> index 1.

      if <S_FIELD>-VALUE is not initial.
        move <S_FIELD>-VALUE to LF_IBAGT.

        read table LT_BAGTY with key IBAGT = LF_IBAGT
                            transporting no fields.
        if SY-SUBRC is initial.
***       Bag Type already exist.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
              IF_MSGTY = 'E'
              IF_MSGID = 'ZVCXI_FBSSC'
              IF_MSGNO = '058' ).
        endif.

        LR_BAGTY = ZCL_VCXI_FBSSC_BAGTY=>CREATE( IF_IBAGT = LF_IBAGT ).

***     Save Changes -> Delete from DB
        LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_SAVE ).

***     Free Instance
        LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_FREE ).

        LF_CREATE = ABAP_TRUE.
      endif.

      if LF_CREATE eq ABAP_TRUE or
         LF_EXIT   eq ABAP_TRUE.
        exit.
      endif.

    enddo.

    if LF_EXIT eq ABAP_TRUE.
      return.
    endif.

*** Call Detail Screen
    ZCL_VCXI_FBSSC_UI_BAGTY=>START_UI( IF_IBAGT = LF_IBAGT
                                       IF_CHANGE = ABAP_TRUE ).

  endmethod.
  method CALL_CUST.

    call function 'VIEWCLUSTER_MAINTENANCE_CALL'
      exporting
        VIEWCLUSTER_NAME             = IF_VCLNAME
        MAINTENANCE_ACTION           = 'S'
        SHOW_SELECTION_POPUP         = SPACE
        NO_WARNING_FOR_CLIENTINDEP   = SPACE
      exceptions
        CLIENT_REFERENCE             = 1
        FOREIGN_LOCK                 = 2
        VIEWCLUSTER_NOT_FOUND        = 3
        VIEWCLUSTER_IS_INCONSISTENT  = 4
        MISSING_GENERATED_FUNCTION   = 5
        NO_UPD_AUTH                  = 6
        NO_SHOW_AUTH                 = 7
        OBJECT_NOT_FOUND             = 8
        NO_TVDIR_ENTRY               = 9
        NO_CLIENTINDEP_AUTH          = 10
        INVALID_ACTION               = 11
        SAVING_CORRECTION_FAILED     = 12
        SYSTEM_FAILURE               = 13
        UNKNOWN_FIELD_IN_DBA_SELLIST = 14
        MISSING_CORR_NUMBER          = 15
        others                       = 16.

    if SY-SUBRC is not initial.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = SY-MSGID
          F_MSGNO = SY-MSGNO
          F_MSGV1 = SY-MSGV1
          F_MSGV2 = SY-MSGV2
          F_MSGV3 = SY-MSGV3
          F_MSGV4 = SY-MSGV4.

    endif.

*** Refresh Basic Customizing
    ZCL_VCXI_FBSSC_BAGTY=>LOAD_BASIC_CUST( ).

  endmethod.
  method CONSTRUCTOR.

***--------------------------------------------------------------------------------------
*** Check Authorization
    ZCL_VCXI_FBSSC_BAGTY=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_FBSSC_BAGTY=>C_ACTVT_DISPLAY ).

*** Bind UI Customizing
    call function 'ZVCXI_FBSSC_UIC_BAGTY_BIND'
      exporting
        IR_UIC_BAGTY = ME
      importing
        ES_DYNP      = ME->S_DYNP.

*** Create Bag Types Grid
    create object ME->R_GRID_BAGTY
      exporting
        IF_TABNAME        = 'ZVCXI_FBSSC_S_BAGTY_GRID'
        IF_CONTAINER_NAME = '0100CC_BAGTY'
        IR_CUSTOMIZING    = ME.


  endmethod.
  method COPY_BAGTY.

    data: LF_RETURN type                   ABAP_BOOL,
          LF_IBAGT  type                   ZVCXI_FBS_IBAGT,
          LF_EXIT   type                   ABAP_BOOL,
          LF_CREATE type                   ABAP_BOOL.
    data: LT_BAGTY type                   ZVCXI_FBSSC_TT_BAGTY,
          LT_SVAL  type standard table of SVAL.
    data: LR_BAGTY  type ref to            ZCL_VCXI_FBSSC_BAGTY.
    field-symbols: <S_FIELD> type SVAL.

***--------------------------------------------------------------------------------------
*** Get Bag Type Entries
    LT_BAGTY = ME->GET_ALL_BAGTY( ).

***--------------------------------------------------------------------------------------
*** Create PopUp for User-Entry
    append initial line to LT_SVAL assigning <S_FIELD>.
    <S_FIELD>-TABNAME   = 'ZVCXI_FBS_TC500'.
    <S_FIELD>-FIELDNAME = 'IBAGT'.

    do.
      call function 'POPUP_GET_VALUES'
        exporting
          POPUP_TITLE     = text-T01
        importing
          RETURNCODE      = LF_RETURN
        tables
          FIELDS          = LT_SVAL
        exceptions
          ERROR_IN_FIELDS = 1
          others          = 2.
      if SY-SUBRC ne 0 or
        LF_RETURN eq 'A'.
        clear LT_SVAL.
        LF_EXIT = ABAP_TRUE.
        return.
      endif.

      check LT_SVAL is not initial.
      read table LT_SVAL assigning <S_FIELD> index 1.

      if <S_FIELD>-VALUE is not initial.
        move <S_FIELD>-VALUE to LF_IBAGT.

        read table LT_BAGTY with key IBAGT = LF_IBAGT
                            transporting no fields.
        if SY-SUBRC = 0.
***       Bag Type already exist.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
              IF_MSGTY = 'E'
              IF_MSGID = 'ZVCXI_FBSSC'
              IF_MSGNO = '058' ).
        endif.

        LR_BAGTY = ZCL_VCXI_FBSSC_BAGTY=>COPY( IF_IBAGT_NEW = LF_IBAGT
                                               IF_IBAGT_OLD = IF_IBAGT ).

***     Save Changes -> Delete from DB
        LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_SAVE ).

***     Free Instance
        LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_FREE ).
        LF_CREATE = ABAP_TRUE.
      endif.

      if LF_CREATE eq ABAP_TRUE or
         LF_EXIT   eq ABAP_TRUE.
        exit.
      endif.

    enddo.

    if LF_EXIT = ABAP_TRUE.
      return.
    endif.

*** Call Detail Screen
    check LR_BAGTY is bound.
    ZCL_VCXI_FBSSC_UI_BAGTY=>START_UI( IF_IBAGT  = LR_BAGTY->F_IBAGT
                                       IF_CHANGE = ABAP_TRUE ).

  endmethod.
  method DELETE_BAGTY.

    data: LF_GUID   type        /VCXI/CKX_GUID.
    data: LS_BAGTY  type        ZVCXI_FBSSC_S_BAGTY.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_BAGTY  type ref to ZCL_VCXI_FBSSC_BAGTY.

    loop at IT_BAGTY into LS_BAGTY.

      clear: LF_GUID.

***   Get GUID
      LF_GUID = ZCL_VCXI_FBSSC_BAGTY=>ENCRYPT_GUID( IF_IBAGT = LS_BAGTY-IBAGT ).

      LR_OBJECT = ZCL_VCXI_FBSSC_BAGTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      try.
          move LR_OBJECT ?to LR_BAGTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BAGTY.
      endtry.

      check LR_BAGTY is bound.

***   Delete Instance
      LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_DELETE ).

***   Save Changes -> Delete from DB
      LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_SAVE ).

***   Free Instance
      LR_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_FREE ).

      free: LR_BAGTY.

    endloop.

  endmethod.
  method DO_PBO.

*** Set Title and GUI-Status
    ME->SET_PFSTATUS( ).
    ME->SET_TITLE( ).

*** Refresh Grid
    if ME->R_GRID_BAGTY is bound.
      move ABAP_TRUE to ME->R_GRID_BAGTY->F_REFRESH_REQ.
      ME->R_GRID_BAGTY->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data: LF_VCLNAME type        VCL_NAME.

    case IF_UCOMM.
      when C_UCOMM_BACK or C_UCOMM_CANCEL.
        leave to screen 0.

      when C_UCOMM_EXIT.
        leave program.

      when others.
***     Call Standard View
        if IF_UCOMM cs C_UCOMM_FBS or IF_UCOMM cs C_UCOMM_F0S.
          concatenate C_VIEW_PREFIX IF_UCOMM into LF_VCLNAME.
          ME->CALL_CUST( IF_VCLNAME = LF_VCLNAME ).
          move ABAP_TRUE to ME->R_GRID_BAGTY->F_REFRESH_REQ.
        endif.

    endcase.

  endmethod.
  method GET_ALL_BAGTY.

*** Select All Bag Types
    select ZVCXI_FBS_TC500~IBAGT, ZVCXI_FBS_TC500T~DESCR
           from ZVCXI_FBS_TC500
           left outer join ZVCXI_FBS_TC500T
             on ZVCXI_FBS_TC500~IBAGT  eq ZVCXI_FBS_TC500T~IBAGT and
                ZVCXI_FBS_TC500T~LANGU eq @SY-LANGU
           into table @RT_BAGTY.

  endmethod.
  method OPEN_BAGTY.

    data: LF_GUID   type        /VCXI/CKX_GUID.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_BAGTY  type ref to ZCL_VCXI_FBSSC_BAGTY.

    check IF_IBAGT is not initial.

    clear: LF_GUID.
*** Get GUID
    LF_GUID = ZCL_VCXI_FBSSC_BAGTY=>ENCRYPT_GUID( IF_IBAGT = IF_IBAGT ).

    LR_OBJECT = ZCL_VCXI_FBSSC_BAGTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    try.
        move LR_OBJECT ?to LR_BAGTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_BAGTY.
    endtry.

    check LR_BAGTY is bound.

*** Call Detail Screen
    ZCL_VCXI_FBSSC_UI_BAGTY=>START_UI( IF_IBAGT  = IF_IBAGT
                                       IF_CHANGE = IF_CHANGE ).
  endmethod.
  method SET_PFSTATUS.

***--------------------------------------------------------------------------------------
*** Set PF-Status
    set pf-status '0100' of program ME->S_DYNP-REPID.

  endmethod.
  method SET_TITLE.

    set titlebar '0100' of program ME->S_DYNP-REPID.

  endmethod.
  method START_UI.

    data:  LR_UIC_BAGTY type ref to ZCL_VCXI_FBSSC_UIC_BAGTY.

*** Create Instance of Bag Type Customizing
    create object LR_UIC_BAGTY.

*** Navigation from SVC
    if IF_IBAGT is not initial.
      LR_UIC_BAGTY->OPEN_BAGTY( exporting IF_IBAGT = IF_IBAGT
                                          IF_CHANGE = ABAP_FALSE ).
    endif.

    call function 'ZVCXI_FBSSC_UIC_BAGTY_START'.

  endmethod.
