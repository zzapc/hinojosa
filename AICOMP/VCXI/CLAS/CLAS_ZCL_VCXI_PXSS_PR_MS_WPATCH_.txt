
class ZCL_VCXI_PXSS_PR_MS_WPATCH definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  constants C_IPRVT_PX_MS_WPATCH type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_WPATCH' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_WPLEN type /VCXI/VKS_PARID value 'ZVCXI_PX_WPLEN' ##NO_TEXT.
  constants C_PARID_WPWID type /VCXI/VKS_PARID value 'ZVCXI_PX_WPWID' ##NO_TEXT.
  constants C_PARID_WPARE type /VCXI/VKS_PARID value 'ZVCXI_PX_WPARE' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  constants C_PARID_NOSBN type /VCXI/VKS_PARID value 'ZVCXI_PX_NOSBN' ##NO_TEXT.
  constants C_PARID_GLUTN type /VCXI/VKS_PARID value 'ZVCXI_PX_GLUTN' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_GLUTD
    returning
      value(RF_GLUTD) type ZVCXI_PXS_GLUTD
    raising
      /VCXI/CX_CKX .
  methods GET_GLUTN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_GLUTN) type ZVCXI_PXS_GLUTN
    raising
      /VCXI/CX_CKX .
  methods GET_NOSBN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOSBN) type ZVCXI_PXS_NOSBN
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_WPARE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_WPARE) type ZVCXI_PXS_S_WPARE
    raising
      /VCXI/CX_CKX .
  methods GET_WPLEN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_WPLEN) type ZVCXI_PXS_S_WPLEN
    raising
      /VCXI/CX_CKX .
  methods GET_WPWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_WPWID) type ZVCXI_PXS_S_WPWID
    raising
      /VCXI/CX_CKX .
  methods SET_GLUTN
    importing
      !IF_GLUTN type ZVCXI_PXS_GLUTN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOSBN
    importing
      !IF_NOSBN type ZVCXI_PXS_NOSBN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WPARE
    importing
      !IS_WPARE type ZVCXI_PXS_S_WPARE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WPLEN
    importing
      !IS_WPLEN type ZVCXI_PXS_S_WPLEN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WPWID
    importing
      !IS_WPWID type ZVCXI_PXS_S_WPWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_MATNR_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_WPARE type /VCXI/VKSC_IEVNT value 'RECALC_WPARE' ##NO_TEXT.
  data C_IEVNT_I_INIT_MATNR type /VCXI/VKSC_IEVNT value 'INIT_MATNR' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WPLEN_CHANGED type /VCXI/VKSC_IEVNT value 'WPLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WPWID_CHANGED type /VCXI/VKSC_IEVNT value 'WPWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WPARE_CHANGED type /VCXI/VKSC_IEVNT value 'WPARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOSBN_CHANGED type /VCXI/VKSC_IEVNT value 'NOSBN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GLUTN_CHANGED type /VCXI/VKSC_IEVNT value 'GLUTN_CHANGED' ##NO_TEXT.
  data R_CUST_WPATCH type ref to ZCL_VCXI_PXSS_CUST_WPATCH .

  methods CHECK_GLUTN
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SURWT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WPARE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WPLEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_WPWID
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_WPARE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MATNR
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_WPATCH definition
class ZCL_VCXI_PXSS_PR_MS_WPATCH implementation.
  method CHECK_GLUTN.

    data: LF_GLUTN   type ZVCXI_PXS_GLUTN,
          LF_MATNR   type BAPIMATALL-MATERIAL,
          LF_DELFLAG type BAPIMATALL-DEL_FLAG.
    data: LS_MARC   type MARC,
          LS_RETURN type BAPIRETURN1.


    LF_GLUTN = ME->GET_GLUTN( ).
    check LF_GLUTN is not initial.

*** Start Positive - Glue Tool Number Exists and Valid
    RF_RESULT = 1.

*** Glue Tool Number Check on Client Level
    call function 'BAPI_MATERIAL_EXISTENCECHECK'
      exporting
        MATERIAL_LONG = LF_GLUTN
      importing
        RETURN        = LS_RETURN
        DELETION_FLAG = LF_DELFLAG.


    if LS_RETURN-TYPE ne     'S'     and
       LS_RETURN-TYPE is not initial.
***   Glue Tool Number does not exist.
      RF_RESULT = 2.
      exit.
    elseif LF_DELFLAG eq ABAP_TRUE.
***   Glue Tool Number is not valid.
      RF_RESULT = 2.
      exit.
    endif.

*** Glue Tool Number Check on Plant Level
    call function 'MARC_SINGLE_READ'
      exporting
        MATNR  = LF_GLUTN
        WERKS  = ME->GET_WERKS( )
      importing
        WMARC  = LS_MARC
      exceptions
        others = 99.

    if SY-SUBRC ne 0.
***   Glue Tool Number does not exist for Plant.
      RF_RESULT = 3.
      exit.
    elseif LS_MARC-LVORM eq ABAP_TRUE.
***   Glue Tool Number is not valid in Plant.
      RF_RESULT = 3.
      exit.
    endif.

  endmethod.
  method CHECK_SURWT.

*** Check Surface Weight
    if ME->GET_WPARE( )-WPARE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Surface Weight is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '385' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Surface Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '386' ).
      endif.
    endif.

  endmethod.
  method CHECK_WPARE.

*** Check Window Patch Width
    if ME->GET_WPARE( )-WPARE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Window Patch Area is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '385' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Window Patch Area is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '386' ).
      endif.
    endif.

  endmethod.
  method CHECK_WPLEN.

*** Check Window Patch Length
    if ME->GET_WPLEN( )-WPLEN is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Window Patch Length is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '381' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Window Patch Length is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '382' ).
      endif.
    endif.

  endmethod.
  method CHECK_WPWID.

*** Check Window Patch Width
    if ME->GET_WPWID( )-WPWID is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Window Patch Width is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '383' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Window Patch Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '384' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Dimension Parameters
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method GET_ADDWT.

    data(LS_WPARE) = ME->GET_WPARE( ).
    data(LS_SURWT) = ME->GET_SURWT( ).

*** Calculate Addtional Weight for the Patch
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = LS_WPARE-WPARE
                                                        IF_CALCV_UOM_2 = LS_WPARE-WPARE_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = RS_ADDWT-ADDWT
                                                        EF_CALCV_UOM   = RS_ADDWT-ADDWT_UOM ).

  endmethod.
  method GET_GLUTD.

    data:  LF_GLUTN type ZVCXI_PXS_GLUTN.
    data:  LS_MAKT  type MAKT.


    LF_GLUTN = ME->GET_GLUTN( ).

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = LF_GLUTN
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_GLUTD.
    else.
      move LS_MAKT-MAKTX to RF_GLUTD.
    endif.

  endmethod.
  method GET_GLUTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GLUTN ).
    move LS_PARAM-ATWRT to RF_GLUTN.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    RF_DESCR = SUPER->GET_MATNR_DESCR( ).

    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

      if LS_PARAM-SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        move LS_PARAM-STRNG to RF_DESCR.
      endif.
    endif.

  endmethod.
  method GET_NOSBN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_NOSBN ).
    move LS_PARAM-ATFLV to RF_NOSBN.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Window Patch Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WPLEN( ) ).

*** Check Window Patch Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WPWID( ) ).

*** Check Window Patch Area
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_WPARE( ) ).

***----------------------------------------------------------------------------
*** Check Glue Tool Number
    if ME->CHECK_GLUTN( ) gt 1.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_WERKS type WERKS_D.


    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Window Patch Length
    ME->CHECK_WPLEN( IR_MESSAGE = IR_MESSAGE ).

*** Check Window Patch Width
    ME->CHECK_WPWID( IR_MESSAGE = IR_MESSAGE ).

*** Check Window Patch Area
    ME->CHECK_WPARE( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Glue Tool Number
    case ME->CHECK_GLUTN( ).
      when 1.
***   Glue Tool Number is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '387' ).
      when 2.
***   Glue Tool Number is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '388' ).
      when 3.
***   Glue Tool Number is not valid in Plant.
        LF_WERKS = ME->GET_WERKS( ).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '389'
                                 IF_MSGV1 = LF_WERKS ).
    endcase.

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WPARE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPARE ).
    move LS_PARAM-ATFLV to RS_WPARE-WPARE.
    move LS_PARAM-UNIT  to RS_WPARE-WPARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_SETBY is not initial.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method GET_WPLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPLEN ).
    move LS_PARAM-ATFLV to RS_WPLEN-WPLEN.
    move LS_PARAM-UNIT  to RS_WPLEN-WPLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_SETBY is not initial.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method GET_WPWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPWID ).
    move LS_PARAM-ATFLV to RS_WPWID-WPWID.
    move LS_PARAM-UNIT  to RS_WPWID-WPWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_SETBY is not initial.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
***   Set Default
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Recalculate Window Patch Area
      when C_IEVNT_I_RECALC_WPARE.
        ME->HANDLE_RECALC_WPARE( ).

***   Intialize Material
      when C_IEVNT_I_INIT_MATNR.
        ME->HANDLE_INIT_MATNR( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS,
          LF_SETBY type /VCXI/VKSR_SETBY.


***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_WPATCH          is bound    and
       ME->R_CUST_WPATCH->F_MATNR eq LF_MATNR and
       ME->R_CUST_WPATCH->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.
    clear:  ME->R_CUST_MATNR, ME->R_CUST_WPATCH.

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_WPATCH = ZCL_VCXI_PXSS_CUST_WPATCH=>GET_INSTANCE_WPATCH( IF_MATNR = LF_MATNR
                                                                              IF_WERKS = LF_WERKS
                                                                              IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

    move ME->R_CUST_WPATCH to ME->R_CUST_MATNR.
    check ME->IS_DUMMY( ) eq ABAP_FALSE.

*** Set SmartVC Parameters based on Customizing
    if ME->R_CUST_WPATCH is bound.
***   Set Window Patch Dimensions
      if ME->R_CUST_WPATCH->S_WPLEN-WPLEN_UOM is not initial.
        ME->GET_WPLEN( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          ME->SET_WPLEN( IS_WPLEN = ME->R_CUST_WPATCH->S_WPLEN ).
        endif.
      endif.
      if ME->R_CUST_WPATCH->S_WPWID-WPWID_UOM is not initial.
        ME->GET_WPWID( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          ME->SET_WPWID( IS_WPWID = ME->R_CUST_WPATCH->S_WPWID ).
        endif.
      endif.
***   Set Window Patch Area
      if ME->R_CUST_WPATCH->S_WPARE-WPARE_UOM is not initial.
        ME->GET_WPARE( importing EF_SETBY = LF_SETBY ).
        if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          ME->SET_WPARE( IS_WPARE = ME->R_CUST_WPATCH->S_WPARE ).
        endif.
      endif.
***   Set Surface Weight
      ME->GET_SURWT( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        ME->SET_SURWT( IS_SURWT = ME->R_CUST_WPATCH->S_SURWT ).
      endif.
    endif.

  endmethod.
  method HANDLE_INIT_MATNR.

***--------------------------------------------------------------------------------------
*** Initalize Window Patch Dimensions, Window Patch Area and Surface Weight
    ME->SET_WPLEN( IF_SETBY = SPACE ).
    ME->SET_WPWID( IF_SETBY = SPACE ).
    ME->SET_WPARE( IF_SETBY = SPACE ).
    ME->SET_SURWT( IF_SETBY = SPACE ).

***--------------------------------------------------------------------------------------
*** Reload Material Information
    clear ME->R_CUST_WPATCH.
    ME->HANDLE_INIT_CUST_MATNR( ).

  endmethod.
  method HANDLE_RECALC_WPARE.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_WPLEN type ZVCXI_PXS_S_WPLEN,
          LS_WPWID type ZVCXI_PXS_S_WPWID,
          LS_WPARE type ZVCXI_PXS_S_WPARE.


    LS_WPARE = ME->GET_WPARE( importing EF_SETBY = LF_SETBY ).
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

    LS_WPLEN = ME->GET_WPLEN( ).
    LS_WPWID = ME->GET_WPWID( ).

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WPLEN-WPLEN
                                                        IF_CALCV_UOM_1 = LS_WPLEN-WPLEN_UOM
                                                        IF_CALCV_2     = LS_WPWID-WPWID
                                                        IF_CALCV_UOM_2 = LS_WPWID-WPWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = LS_WPARE-WPARE_UOM
                                              importing EF_CALCV       = LS_WPARE-WPARE
                                                        EF_CALCV_UOM   = LS_WPARE-WPARE_UOM ).

    ME->SET_WPARE( IS_WPARE = LS_WPARE ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method INIT_DIM_PARAM.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
    data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.


    LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Price Per
    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_PRICP_A or
                            PARID eq C_PARID_PRICP_L or
                            PARID eq C_PARID_PRICP_P or
                            PARID eq C_PARID_PRICP_W ).
      move LS_PARAM-PARID to ME->F_PARID_PRICP.
      exit.
    endloop.

  endmethod.
  method SET_GLUTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GLUTN ).

    move IF_GLUTN  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GLUTN_CHANGED ).
    endif.

  endmethod.
  method SET_MATNR_DESCR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_DESCR to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_NOSBN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_NOSBN ).

    move IF_NOSBN to LS_PARAM-ATFLV.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOSBN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    if IS_SURWT is supplied.
      LS_PARAM-ATFLV = IS_SURWT-SURWT.
      LS_PARAM-UNIT  = IS_SURWT-SURWT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_WPARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPARE ).

    if IS_WPARE is supplied.
      LS_PARAM-ATFLV = IS_WPARE-WPARE.
      LS_PARAM-UNIT  = IS_WPARE-WPARE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WPARE_CHANGED ).
    endif.

  endmethod.
  method SET_WPLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPLEN ).

    if IS_WPLEN is supplied.
      LS_PARAM-ATFLV = IS_WPLEN-WPLEN.
      LS_PARAM-UNIT  = IS_WPLEN-WPLEN_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WPLEN_CHANGED ).
    endif.

  endmethod.
  method SET_WPWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->C_PARID_WPWID ).

    if IS_WPWID is supplied.
      LS_PARAM-ATFLV = IS_WPWID-WPWID.
      LS_PARAM-UNIT  = IS_WPWID-WPWID_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WPWID_CHANGED ).
    endif.

  endmethod.
