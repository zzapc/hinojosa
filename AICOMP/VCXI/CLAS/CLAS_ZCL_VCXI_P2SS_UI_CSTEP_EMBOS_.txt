
class ZCL_VCXI_P2SS_UI_CSTEP_EMBOS definition
  public
  inheriting from ZCL_VCXI_P2SS_UI_CSTEP
  create public .

public section.

  data S_CSTEP_EMBOS_VIS type ZVCXI_P2SS_S_CSTEP_EMBOS_VIS .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_VIS
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_GRID_EMBOS type ref to ZCL_VCXI_PXSS_GRID_EMBOS .
  data R_PR_CSTEP_EMBOS type ref to ZCL_VCXI_P2SS_PR_CSTEP_EMBOS .

  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SS_UI_CSTEP_EMBOS definition
class ZCL_VCXI_P2SS_UI_CSTEP_EMBOS implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_P2SS_UI_CSTEP_EMBOS_BIND'
      exporting
        IR_UI_CSTEP_EMBOS = ME
      importing
        ES_DYNP           = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Create Grid for Embossments
    create object ME->R_GRID_EMBOS
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_EMBOS'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP_EMBOS.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_GRID_EMBOS is bound.
      ME->R_GRID_EMBOS->DO_FREE( ).
      clear ME->R_GRID_EMBOS.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_TOOL_RELEASED type ABAP_BOOL.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***     Is Tool Released
        ME->R_PR_CSTEP_EMBOS->GET_EMBTN( importing EF_RELEA = LF_TOOL_RELEASED ).

        loop at screen.
***       Hide Tool Description Override Flag if undefined
          if SCREEN-NAME cp '*-FOVRR_EMBTD' and
             ME->S_CSTEP_EMBOS_VIS-FOVRR_EMBTD eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.
***       Disable Tool Description if generated
          if SCREEN-NAME cp '*-EMBTD' and
             ME->S_CSTEP_EMBOS_VIS-FOVRR_EMBTD eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.
***       Disable Tool Desciption for existing Tools
          if ME->S_CSTEP_EMBOS_VIS-EMBTN is not initial.
            if SCREEN-NAME cp '*-DCTTD'.
              SCREEN-INPUT      = 0.
              SCREEN-DISPLAY_3D = 0.
            endif.
            if SCREEN-NAME cp '*-FOVRR_EMBTD'.
              move 0 to SCREEN-ACTIVE.
            endif.
          endif.

***       Disable fields if tool is released
          if SCREEN-GROUP2 eq 'TIR' and
             LF_TOOL_RELEASED eq ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Super PBO
    SUPER->DO_PBO( ).

***--------------------------------------------------------------------------------------
*** Initialize GRID
    if ME->R_GRID_EMBOS is bound.
      ME->R_GRID_EMBOS->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_EMBOS->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_EMBOS_VIS type ZVCXI_P2SS_S_CSTEP_EMBOS_VIS.


*** Call SUPER
    SUPER->DO_UPDATE_VIS( IS_CSTEP_VIS = IS_CSTEP_VIS ).

    check ME->R_PR_CSTEP_EMBOS is bound.

*** "Cast" Vis Structure
    move-corresponding IS_CSTEP_VIS to LS_CSTEP_EMBOS_VIS.

***--------------------------------------------------------------------------------------
*** Set Embossing Tool Number
    if ME->S_CSTEP_EMBOS_VIS-EMBTN ne LS_CSTEP_EMBOS_VIS-EMBTN.
      ME->R_PR_CSTEP_EMBOS->SET_EMBTN( IF_EMBTN = LS_CSTEP_EMBOS_VIS-EMBTN
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Embossing Tool Description
    if ME->S_CSTEP_EMBOS_VIS-EMBTD        ne LS_CSTEP_EMBOS_VIS-EMBTD or
       ME->S_CSTEP_EMBOS_VIS-FOVRR_EMBTD  ne LS_CSTEP_EMBOS_VIS-FOVRR_EMBTD.
      if LS_CSTEP_EMBOS_VIS-FOVRR_EMBTD ne ABAP_FALSE.
        ME->R_PR_CSTEP_EMBOS->SET_EMBTD( IF_EMBTD = LS_CSTEP_EMBOS_VIS-EMBTD
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_CSTEP_EMBOS->SET_EMBTD( IF_EMBTD = LS_CSTEP_EMBOS_VIS-EMBTD
                                         IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Sheet Direction
    if ME->S_CSTEP_EMBOS_VIS-SHTDI ne LS_CSTEP_EMBOS_VIS-SHTDI.
      ME->R_PR_CSTEP_EMBOS->SET_SHTDI( IF_SHTDI = LS_CSTEP_EMBOS_VIS-SHTDI
                                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    if ME->R_GRID_EMBOS is bound.
      ME->R_GRID_EMBOS->CHECK_CHANGED_DATA( ).
    endif.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP_EMBOS.

  endmethod.
  method INIT_VIS.

    data: LR_CUST_TOOL_EMB  type ref to ZCL_VCXI_PXSS_CUST_TOOL_EMB.


    SUPER->INIT_VIS( ).

    free: ME->S_CSTEP_EMBOS_VIS.
    ME->S_CSTEP_EMBOS_VIS-S_CSTEP_VIS = ME->S_CSTEP_VIS.

***--------------------------------------------------------------------------------------
*** Embossing Tool Number
    ME->S_CSTEP_EMBOS_VIS-EMBTN = ME->R_PR_CSTEP_EMBOS->GET_EMBTN( importing ER_CUST_TOOL_EMB = LR_CUST_TOOL_EMB ).

*** Get Tool Status Icon based on Release Status
    ME->S_CSTEP_EMBOS_VIS-EMBTN_ICON = cond #( when LR_CUST_TOOL_EMB is not bound                 then SPACE
                                               when LR_CUST_TOOL_EMB->IS_RELEASED( ) eq ABAP_TRUE then ICON_CONNECT
                                                                                                  else ICON_DISCONNECT ).
*** Die Cut Tool Description
    ME->S_CSTEP_EMBOS_VIS-EMBTD = ME->R_PR_CSTEP_EMBOS->GET_EMBTD( importing EF_FOVRR = ME->S_CSTEP_EMBOS_VIS-FOVRR_EMBTD ).

***--------------------------------------------------------------------------------------
*** Sheet Direction
    ME->S_CSTEP_EMBOS_VIS-SHTDI = ME->R_PR_CSTEP_EMBOS->GET_SHTDI( ).

  endmethod.
