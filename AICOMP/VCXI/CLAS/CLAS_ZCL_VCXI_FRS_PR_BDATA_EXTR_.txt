
class ZCL_VCXI_FRS_PR_BDATA_EXTR definition
  public
  inheriting from ZCL_VCXI_FRS_PR_BDATA
  create public .

public section.

  types:
    YT_TC120  type standard table of ZVCXI_FFS_TC120 .
  types:
    YT_TC121  type standard table of ZVCXI_FFS_TC121 .
  types:
    YT_TC010T type STANDARD TABLE OF ZVCXI_F0S_TC010T .

  constants C_IPRVT_BDATA_EXTR type /VCXI/VKSC_IPRVT value 'ZVCXI_FRS_BDATA_EXTR' ##NO_TEXT.
  constants C_PARID_FBLOF type /VCXI/VKS_PARID value 'ZVCXI_F0_FBLOF' ##NO_TEXT.
  constants C_PARID_FICOL type /VCXI/VKS_PARID value 'ZVCXI_F0_FICOL' ##NO_TEXT.
  constants C_PARID_FITHI type /VCXI/VKS_PARID value 'ZVCXI_F0_FITHI' ##NO_TEXT.
  constants C_PARID_FITMA type /VCXI/VKS_PARID value 'ZVCXI_FR_FITMA' ##NO_TEXT.
  constants C_PARID_FITMI type /VCXI/VKS_PARID value 'ZVCXI_FR_FITMI' ##NO_TEXT.
  constants C_PARID_TEXTR type /VCXI/VKS_PARID value 'ZVCXI_F0_TEXTR' ##NO_TEXT.
  constants C_PARID_TFILM type /VCXI/VKS_PARID value 'ZVCXI_F0_TFILM' ##NO_TEXT.
  class-data T_TC010T type YT_TC010T .
  class-data T_TC120 type YT_TC120 .
  class-data T_TC121 type YT_TC121 .

  class-methods CLASS_CONSTRUCTOR .
  methods GET_FBLOF
    exporting
      !EF_FBLOF type ZVCXI_F0S_FBLOF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FICOL
    exporting
      !EF_FICOL type ZVCXI_F0S_FICOL
      !EF_FICOL_DESCR type TEXT255
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITHI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_FITHI type ZVCXI_F0S_S_FITHI
    raising
      /VCXI/CX_CKX .
  methods GET_FITMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_FITMA type ZVCXI_FRS_S_FITMA
    raising
      /VCXI/CX_CKX .
  methods GET_FITMI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_FITMI type ZVCXI_FRS_S_FITMI
    raising
      /VCXI/CX_CKX .
  methods GET_NOLAY
    returning
      value(RF_NOLAY) type ZVCXI_F0S_NOLAY
    raising
      /VCXI/CX_CKX .
  methods GET_TEXTR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TEXTR type ZVCXI_F0S_TEXTR
    raising
      /VCXI/CX_CKX .
  methods GET_TFILM
    exporting
      !EF_TFILM type ZVCXI_F0S_TFILM
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TEXTR
    exporting
      !ET_TEXTR type VRM_VALUES
    raising
      /VCXI/CX_CKX .
  methods SET_FBLOF
    importing
      !IF_FBLOF type ZVCXI_F0S_FBLOF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITMA
    importing
      !IS_FITMA type ZVCXI_FRS_S_FITMA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITMI
    importing
      !IS_FITMI type ZVCXI_FRS_S_FITMI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOLAY
    importing
      !IF_NOLAY type ZVCXI_F0S_NOLAY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXTR
    importing
      !IF_TEXTR type ZVCXI_F0S_TEXTR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_FICOL type /VCXI/VKSC_IEVNT value 'RECALC_FICOL' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FITHI type /VCXI/VKSC_IEVNT value 'RECALC_FITHI' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TFILM type /VCXI/VKSC_IEVNT value 'RECALC_TFILM' ##NO_TEXT.

  methods CHECK_NOLAY
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FICOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FITHI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TFILM
    raising
      /VCXI/CX_CKX .
  methods SET_FICOL
    importing
      !IF_FICOL type ZVCXI_F0S_FICOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITHI
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_FITHI type ZVCXI_F0S_S_FITHI optional
    raising
      /VCXI/CX_CKX .
  methods SET_TFILM
    importing
      !IF_TFILM type ZVCXI_F0S_TFILM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FRS_PR_BDATA_EXTR definition
class ZCL_VCXI_FRS_PR_BDATA_EXTR implementation.
  method CHECK_NOLAY.

*** 0 Number of Layer is valid.
*** 1 Number of Layer is not maintained.

    data: LF_NOLAY type ZVCXI_F0S_NOLAY.

***----------------------------------------------------------------------------
*** Check Number of Layer is maintained
    LF_NOLAY = ME->GET_NOLAY( ).

    if LF_NOLAY is initial.
      move 1 to RF_RESULT.
    else.
      move 0 to RF_RESULT.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Get Film Styles for Blocked Film Flag
    select *
           from ZVCXI_FFS_TC120
           into table T_TC120.                                       "#EC CI_SUBRC

*** Get Film Style - Allowed Extrusion Type
    select *
           from ZVCXI_FFS_TC121
           into table T_TC121.                                       "#EC CI_SUBRC
    if SY-SUBRC = 0.
***   Get Extrusion Description
      select *
             from ZVCXI_F0S_TC010T
             into table T_TC010T
            where LANGU eq SY-LANGU.                                 "#EC CI_SUBRC
    endif.
  endmethod.
  method GET_FBLOF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBLOF ).
    move LS_PARAM-ATWRT to EF_FBLOF.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FICOL.

    data: LF_LRCOL type ZVCXI_FRS_LRCOL,
          LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_LAYCO type ZCL_VCXI_FRS_PR_LAYER_EXTR=>YS_LAYCO.
    data: LT_LRCOL type table of ZVCXI_FRS_LRCOL.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FICOL ).
    move LS_PARAM-STRNG to EF_FICOL.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
*** Get Description
    if EF_FICOL_DESCR is requested.
      check EF_FICOL is not initial.

***   Split Key
      split EF_FICOL at '-' into table LT_LRCOL.
      check LT_LRCOL is not initial.

***   Build Description based on Layer
      loop at LT_LRCOL into LF_LRCOL.
***     Get Customizing Value for Description
        read table ZCL_VCXI_FRS_PR_LAYER_EXTR=>T_LAYCO into LS_LAYCO with key LRCOL = LF_LRCOL.
        if SY-SUBRC ne 0.
          move LF_LRCOL to LF_DESCR.
        else.
          move LS_LAYCO-DESCR to LF_DESCR.
        endif.
        concatenate EF_FICOL_DESCR LF_DESCR into EF_FICOL_DESCR separated by '-'.
      endloop.

***   Remove leading '-'
      shift EF_FICOL_DESCR left deleting leading '-'.
    endif.

  endmethod.
  method GET_FITHI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITHI ).
    move LS_PARAM-ATFLV to ES_FITHI-FITHI.
    move LS_PARAM-UNIT  to ES_FITHI-FITHI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITMA ).
    move LS_PARAM-ATFLV to ES_FITMA-FITMA.
    move LS_PARAM-UNIT  to ES_FITMA-FITMA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITMI ).
    move LS_PARAM-ATFLV to ES_FITMI-FITMI.
    move LS_PARAM-UNIT  to ES_FITMI-FITMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOLAY.

    data: LR_GATE_VERS  type ref to /VCXI/CL_VKSR_GATE.
    data: LT_GATE_VERS  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_LAYER type        /VCXI/VKSR_TT_GATE.

*** Get all Versions
    LT_GATE_VERS = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_VERS=>C_IPRVT_VERS
                                          IF_INUSE = ABAP_TRUE ).

    check LT_GATE_VERS is not initial.

    read table LT_GATE_VERS into LR_GATE_VERS index 1.

    check SY-SUBRC eq 0.

*** Get all Layer for first Version
    LT_GATE_LAYER = LR_GATE_VERS->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                             IF_INUSE = ABAP_TRUE ).

    check LT_GATE_LAYER is not initial.

*** Get Number of Layer
    move LINES( LT_GATE_LAYER ) to RF_NOLAY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Number of Layer
    if ME->CHECK_NOLAY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Number of Layer
    case ME->CHECK_NOLAY( ).
      when 0.
***     Number of Layer is valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '102' ).
      when 1.
***     Number of Layer is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '101' ).
    endcase.

  endmethod.
  method GET_TEXTR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXTR ).
    move LS_PARAM-ATWRT to EF_TEXTR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TFILM.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TFILM ).
    move LS_PARAM-STRNG to EF_TFILM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VALID_TEXTR.

    data: LF_FBLOF type ZVCXI_F0S_FBLOF.
    field-symbols: <S_TC120>  type ZVCXI_FFS_TC120,
                   <S_TC121>  type ZVCXI_FFS_TC121,
                   <S_TC010T> type ZVCXI_F0S_TC010T,
                   <S_TEXTR>  type VRM_VALUE.

*** get Blocked Film Flag
    ME->GET_FBLOF( importing EF_FBLOF = LF_FBLOF ).

    loop at ME->T_TC120 assigning <S_TC120> where FBLOF = LF_FBLOF.
***   get Extrusion Types for found Film Style
      loop at ME->T_TC121 assigning <S_TC121> where FISTY = <S_TC120>-FISTY.
***     get Film Style description
        read table ME->T_TC010T assigning <S_TC010T> with key TEXTR = <S_TC121>-TEXTR.

        if SY-SUBRC = 0.
***       Check if Extrusion Type already exists in table
          read table ET_TEXTR transporting no fields with key KEY = <S_TC121>-TEXTR.
          if SY-SUBRC ne 0.
            append initial line   to ET_TEXTR assigning <S_TEXTR>.
            move <S_TC010T>-TEXTR to <S_TEXTR>-KEY.
            move <S_TC010T>-DESCR to <S_TEXTR>-TEXT.
          endif.
        endif.

      endloop.
    endloop.

    sort ET_TEXTR ascending by KEY.
    delete adjacent duplicates from ET_TEXTR comparing KEY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_RECALC_FICOL.
        ME->HANDLE_RECALC_FICOL( ).
      when C_IEVNT_I_RECALC_TFILM.
        ME->HANDLE_RECALC_TFILM( ).
      when C_IEVNT_I_RECALC_FITHI.
        ME->HANDLE_RECALC_FITHI( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_FICOL.

    data: LF_FICOL        type        ZVCXI_F0S_FICOL.
    data: LR_PR_VERS_EXTR type ref to ZCL_VCXI_FRS_PR_VERS_EXTR.
    data: LT_GATE_VERS  type /VCXI/VKSR_TT_GATE.


*** Get Film Color
    ME->GET_FICOL( importing EF_FICOL = LF_FICOL ).

    if LF_FICOL is initial.
***   Get released Versions
      LT_GATE_VERS = ME->GET_PRVDR_VERS( IF_RELEASED = ABAP_TRUE ).
      check LT_GATE_VERS is not initial.
      try.
          LR_PR_VERS_EXTR ?= LT_GATE_VERS[ 1 ]->R_CLSPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_VERS_EXTR.
      endtry.
      check LR_PR_VERS_EXTR is bound.

***   Get Version Color
      LR_PR_VERS_EXTR->GET_VRCOL( importing EF_VRCOL = LF_FICOL ).
***   Set Film Color
      ME->SET_FICOL( IF_FICOL = LF_FICOL ).

*** No Released Version
    elseif ME->CHECK_VRREL( ) ne ABAP_TRUE.
***   Reset Film Color
      ME->SET_FICOL( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_FITHI.

    data: LS_FITHI        type        ZVCXI_F0S_S_FITHI.
    data: LR_PR_VERS_EXTR type ref to ZCL_VCXI_FRS_PR_VERS_EXTR.
    data: LT_GATE_VERS  type        /VCXI/VKSR_TT_GATE.


*** Get Film Thickness
    ME->GET_FITHI( importing ES_FITHI = LS_FITHI ).

    if LS_FITHI-FITHI is initial.
***   Get released Versions
      LT_GATE_VERS = ME->GET_PRVDR_VERS( IF_RELEASED = ABAP_TRUE ).
      check LT_GATE_VERS is not initial.
      try.
          LR_PR_VERS_EXTR ?= LT_GATE_VERS[ 1 ]->R_CLSPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_VERS_EXTR.
      endtry.
      check LR_PR_VERS_EXTR is bound.

***   Get Version Thickness
      LR_PR_VERS_EXTR->GET_VRTHI( importing ES_VRTHI = LS_FITHI ).
***   Set Film Thickness
      ME->SET_FITHI( IS_FITHI = LS_FITHI ).

*** No Released Version
    elseif ME->CHECK_VRREL( ) ne ABAP_TRUE.
***   Reset Film Thickness
      ME->SET_FITHI( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_TFILM.

    data: LF_TFILM        type        ZVCXI_F0S_TFILM.
    data: LR_PR_VERS_EXTR type ref to ZCL_VCXI_FRS_PR_VERS_EXTR.
    data: LT_GATE_VERS    type        /VCXI/VKSR_TT_GATE.


*** Get Film Type
    ME->GET_TFILM( importing EF_TFILM = LF_TFILM ).

    if LF_TFILM is initial.
***   Get released Versions
      LT_GATE_VERS = ME->GET_PRVDR_VERS( IF_RELEASED = ABAP_TRUE ).
      check LT_GATE_VERS is not initial.
      try.
          LR_PR_VERS_EXTR ?= LT_GATE_VERS[ 1 ]->R_CLSPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_VERS_EXTR.
      endtry.
      check LR_PR_VERS_EXTR is bound.

***   Get Version Film Type
      LR_PR_VERS_EXTR->GET_TVERS( importing EF_TVERS = LF_TFILM ).
***   Set Film Type
      ME->SET_TFILM( IF_TFILM = LF_TFILM ).

*** No Released Version
    elseif ME->CHECK_VRREL( ) ne ABAP_TRUE.
***   Reset Film Type
      ME->SET_TFILM( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method SET_FBLOF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBLOF ).

    move IF_FBLOF to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_FICOL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FICOL ).

    if IF_FICOL is supplied.
      LS_PARAM-STRNG = IF_FICOL.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_FITHI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITHI ).

    if IS_FITHI is supplied.
      LS_PARAM-ATFLV = IS_FITHI-FITHI.
      LS_PARAM-UNIT  = IS_FITHI-FITHI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_FITMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITMA ).

    move IS_FITMA-FITMA     to LS_PARAM-ATFLV.
    move IS_FITMA-FITMA_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_FITMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITMI ).

    move IS_FITMI-FITMI     to LS_PARAM-ATFLV.
    move IS_FITMI-FITMI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_NOLAY.

    data: LF_NOLAY      type        ZVCXI_F0S_NOLAY,
          LF_INDEX      type        I,
          LF_NO_REFRESH type        ABAP_BOOL.
    data: LS_LEOKY     type        /VCXI/VKSR_S_LEOKY,
          LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE_VERS  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_LAYER type        /VCXI/VKSR_TT_GATE,
          LT_PARAM      type        /VCXI/VKSR_TT_PARAM,
          LT_PRVDR_DEF  type        /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE_VERS  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_LAYER type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get all Versions
    LT_GATE_VERS = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_VERS=>C_IPRVT_VERS
                                          IF_INUSE = ABAP_TRUE ).
    check LT_GATE_VERS is not initial.

*** Get all Layer for first Version
    read table LT_GATE_VERS into LR_GATE_VERS index 1.
    LT_GATE_LAYER = LR_GATE_VERS->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                             IF_INUSE = ABAP_TRUE ).
    check LT_GATE_LAYER is not initial.

*** Get Number of Layer
    move LINES( LT_GATE_LAYER ) to LF_NOLAY.

    check LF_NOLAY ne IF_NOLAY.

*** Check if existing Layer are all Default
    loop at LT_GATE_LAYER into LR_GATE_LAYER.
      LT_PARAM = LR_GATE_LAYER->GET_PARAM_ALL( ).
      read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                          transporting no fields.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LF_NO_REFRESH.
        exit.
      endif.
      move LR_GATE_LAYER->GET_LEOKY( ) to LS_LEOKY.
      if LS_LEOKY-SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
        move ABAP_TRUE to LF_NO_REFRESH.
        exit.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Less Layer needed
    if LF_NOLAY gt IF_NOLAY.
      loop at LT_GATE_VERS into LR_GATE_VERS.
        clear: LF_INDEX.

***     Get all Layer for Version
        LT_GATE_LAYER = LR_GATE_VERS->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                                 IF_INUSE = ABAP_TRUE ).
        check LT_GATE_LAYER is not initial.

        LF_INDEX = IF_NOLAY + 1.
        loop at LT_GATE_LAYER into LR_GATE_LAYER from LF_INDEX.
          LR_GATE_LAYER->DO_FREE( ).
          delete LT_GATE_LAYER.
        endloop.
        if LF_NO_REFRESH eq ABAP_TRUE.
          free LT_GATE_LAYER.
        endif.

      endloop.

***--------------------------------------------------------------------------------------
*** More Layer needed
    else.
      if LF_NO_REFRESH eq ABAP_TRUE.
        free LT_GATE_LAYER.
      endif.

      loop at LT_GATE_VERS into LR_GATE_VERS.
        clear: LF_INDEX.

***     Get Provider Definitions for Layer
        LT_PRVDR_DEF = LR_GATE_VERS->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FRS_PR_LAYER_EXTR=>C_IPRVT_LAYER_EXTR
                                                    IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
        read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
        check SY-SUBRC = 0.

        LF_INDEX = IF_NOLAY - LF_NOLAY.
        do LF_INDEX times.
          LR_GATE_LAYER = LR_GATE_VERS->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
          if LR_GATE_LAYER->IS_INUSE( ) eq ABAP_FALSE.
            LR_GATE_LAYER->SET_INUSE( IF_INUSE = ABAP_TRUE ).
          endif.
          append LR_GATE_LAYER to LT_GATE_LAYER.
        enddo.

      endloop.

    endif.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOLAY_CHANGED ).

  endmethod.
  method SET_TEXTR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXTR ).

    move IF_TEXTR     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_TFILM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TFILM ).

    if IF_TFILM is supplied.
      LS_PARAM-STRNG = IF_TFILM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
